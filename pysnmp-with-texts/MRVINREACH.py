#
# PySNMP MIB module MRVINREACH (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MRVINREACH
# Produced by pysmi-0.3.4 at Wed May  1 14:15:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Counter64, ModuleIdentity, TimeTicks, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, Bits, Unsigned32, ObjectIdentity, NotificationType, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "ModuleIdentity", "TimeTicks", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "Bits", "Unsigned32", "ObjectIdentity", "NotificationType", "Integer32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ccitt = MibIdentifier((0,))
null = MibIdentifier((0, 0))
iso = MibIdentifier((1,))
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
directory = MibIdentifier((1, 3, 6, 1, 1))
mgmt = MibIdentifier((1, 3, 6, 1, 2))
experimental = MibIdentifier((1, 3, 6, 1, 3))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
mib_2 = MibIdentifier((1, 3, 6, 1, 2, 1)).setLabel("mib-2")
class DisplayString(OctetString):
    pass

class PhysAddress(OctetString):
    pass

system = MibIdentifier((1, 3, 6, 1, 2, 1, 1))
interfaces = MibIdentifier((1, 3, 6, 1, 2, 1, 2))
at = MibIdentifier((1, 3, 6, 1, 2, 1, 3))
ip = MibIdentifier((1, 3, 6, 1, 2, 1, 4))
icmp = MibIdentifier((1, 3, 6, 1, 2, 1, 5))
tcp = MibIdentifier((1, 3, 6, 1, 2, 1, 6))
udp = MibIdentifier((1, 3, 6, 1, 2, 1, 7))
egp = MibIdentifier((1, 3, 6, 1, 2, 1, 8))
transmission = MibIdentifier((1, 3, 6, 1, 2, 1, 10))
snmp = MibIdentifier((1, 3, 6, 1, 2, 1, 11))
sysDescr = MibScalar((1, 3, 6, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDescr.setStatus('mandatory')
if mibBuilder.loadTexts: sysDescr.setDescription("A textual description of the entity. This value should include the full name and version identification of the system's hardware type, software operating-system, and networking software. It is mandatory that this only contain printable ASCII characters.")
sysObjectID = MibScalar((1, 3, 6, 1, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysObjectID.setStatus('mandatory')
if mibBuilder.loadTexts: sysObjectID.setDescription("The vendor's authoritative identification of the network management subsystem contained in the entity. This value is allocated within the SMI enterprises subtree (1.3.6.1.4.1) and provides an easy and unambiguous means for determining `what kind of box' is being managed. For example, if vendor `Flintstones, Inc.' was assigned the subtree 1.3.6.1.4.1.4242, it could assign the identifier 1.3.6.1.4.1.4242.1.1 to its `Fred Router'.")
sysUpTime = MibScalar((1, 3, 6, 1, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: sysUpTime.setDescription('The time (in hundredths of a second) since the network management portion of the system was last re-initialized.')
sysContact = MibScalar((1, 3, 6, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysContact.setStatus('mandatory')
if mibBuilder.loadTexts: sysContact.setDescription('The textual identification of the contact person for this managed node, together with information on how to contact this person.')
sysName = MibScalar((1, 3, 6, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysName.setStatus('mandatory')
if mibBuilder.loadTexts: sysName.setDescription("An administratively-assigned name for this managed node. By convention, this is the node's fully-qualified domain name.")
sysLocation = MibScalar((1, 3, 6, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sysLocation.setDescription("The physical location of this node (e.g., `telephone closet, 3rd floor').")
sysServices = MibScalar((1, 3, 6, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysServices.setStatus('mandatory')
if mibBuilder.loadTexts: sysServices.setDescription('A value which indicates the set of services that this entity primarily offers. The value is a sum. This sum initially takes the value zero, Then, for each layer, L, in the range 1 through 7, that this node performs transactions for, 2 raised to (L - 1) is added to the sum. For example, a node which performs primarily routing functions would have a value of 4 (2^(3-1)). In contrast, a node which is a host offering application services would have a value of 72 (2^(4-1) + 2^(7-1)). Note that in the context of the Internet suite of protocols, values should be calculated accordingly: layer functionality 1 physical (e.g., repeaters) 2 datalink/subnetwork (e.g., bridges) 3 internet (e.g., IP gateways) 4 end-to-end (e.g., IP hosts) 7 applications (e.g., mail relays) For systems including OSI protocols, layers 5 and 6 may also be counted.')
ifNumber = MibScalar((1, 3, 6, 1, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ifNumber.setDescription('The number of network interfaces (regardless of their current state) present on this system.')
ifTable = MibTable((1, 3, 6, 1, 2, 1, 2, 2), )
if mibBuilder.loadTexts: ifTable.setStatus('mandatory')
if mibBuilder.loadTexts: ifTable.setDescription('A list of interface entries. The number of entries is given by the value of ifNumber.')
ifEntry = MibTableRow((1, 3, 6, 1, 2, 1, 2, 2, 1), ).setIndexNames((0, "MRVINREACH", "ifIndex"))
if mibBuilder.loadTexts: ifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ifEntry.setDescription('An interface entry containing objects at the subnetwork layer and below for a particular interface.')
ifIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ifIndex.setDescription("A unique value for each interface. Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
ifDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifDescr.setStatus('mandatory')
if mibBuilder.loadTexts: ifDescr.setDescription('A textual string containing information about the interface. This string should include the name of the manufacturer, the product name and the version of the hardware interface.')
ifType = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifType.setStatus('mandatory')
if mibBuilder.loadTexts: ifType.setDescription("The type of interface, distinguished according to the physical/link protocol(s) immediately `below' the network layer in the protocol stack.")
ifMtu = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMtu.setStatus('mandatory')
if mibBuilder.loadTexts: ifMtu.setDescription('The size of the largest datagram which can be sent/received on the interface, specified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface.')
ifSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ifSpeed.setDescription("An estimate of the interface's current bandwidth in bits per second. For interfaces which do not vary in bandwidth or for those where no accurate estimation can be made, this object should contain the nominal bandwidth.")
ifPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifPhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ifPhysAddress.setDescription("The interface's address at the protocol layer immediately `below' the network layer in the protocol stack. For interfaces which do not have such an address (e.g., a serial line), this object should contain an octet string of zero length.")
ifAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ifAdminStatus.setDescription('The desired state of the interface. The testing(3) state indicates that no operational packets can be passed.')
ifOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ifOperStatus.setDescription('The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed.')
ifLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: ifLastChange.setDescription('The value of sysUpTime at the time the interface entered its current operational state. If the current state was entered prior to the last re- initialization of the local network management subsystem, then this object contains a zero value.')
ifInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ifInOctets.setDescription('The total number of octets received on the interface, including framing characters.')
ifInUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ifInUcastPkts.setDescription('The number of subnetwork-unicast packets delivered to a higher-layer protocol.')
ifInNUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInNUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ifInNUcastPkts.setDescription('The number of non-unicast (i.e., subnetwork- broadcast or subnetwork-multicast) packets delivered to a higher-layer protocol.')
ifInDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ifInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
ifInErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ifInErrors.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
ifInUnknownProtos = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInUnknownProtos.setStatus('mandatory')
if mibBuilder.loadTexts: ifInUnknownProtos.setDescription('The number of packets received via the interface which were discarded because of an unknown or unsupported protocol.')
ifOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ifOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters.')
ifOutUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ifOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent.')
ifOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutNUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ifOutNUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a non- unicast (i.e., a subnetwork-broadcast or subnetwork-multicast) address, including those that were discarded or not sent.')
ifOutDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ifOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
ifOutErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ifOutErrors.setDescription('The number of outbound packets that could not be transmitted because of errors.')
ifOutQLen = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifOutQLen.setStatus('mandatory')
if mibBuilder.loadTexts: ifOutQLen.setDescription('The length of the output packet queue (in packets).')
ifSpecific = MibTableColumn((1, 3, 6, 1, 2, 1, 2, 2, 1, 22), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSpecific.setStatus('mandatory')
if mibBuilder.loadTexts: ifSpecific.setDescription('A reference to MIB definitions specific to the particular media being used to realize the interface. For example, if the interface is realized by an ethernet, then the value of this object refers to a document defining objects specific to ethernet. If this information is not present, its value should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntatically valid object identifier, and any conformant implementation of ASN.1 and BER must be able to generate and recognize this value.')
atTable = MibTable((1, 3, 6, 1, 2, 1, 3, 1), )
if mibBuilder.loadTexts: atTable.setStatus('deprecated')
if mibBuilder.loadTexts: atTable.setDescription("The Address Translation tables contain the NetworkAddress to `physical' address equivalences. Some interfaces do not use translation tables for determining address equivalences (e.g., DDN-X.25 has an algorithmic method); if all interfaces are of this type, then the Address Translation table is empty, i.e., has zero entries.")
atEntry = MibTableRow((1, 3, 6, 1, 2, 1, 3, 1, 1), ).setIndexNames((0, "MRVINREACH", "atIfIndex"), (0, "MRVINREACH", "atNetAddress"))
if mibBuilder.loadTexts: atEntry.setStatus('deprecated')
if mibBuilder.loadTexts: atEntry.setDescription("Each entry contains one NetworkAddress to `physical' address equivalence.")
atIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: atIfIndex.setDescription("The interface on which this entry's equivalence is effective. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.")
atPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 3, 1, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atPhysAddress.setStatus('deprecated')
if mibBuilder.loadTexts: atPhysAddress.setDescription("The media-dependent `physical' address. Setting this object to a null string (one of zero length) has the effect of invaliding the corresponding entry in the atTable object. That is, it effectively dissasociates the interface identified with said entry from the mapping identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant atPhysAddress object.")
atNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 3, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atNetAddress.setStatus('deprecated')
if mibBuilder.loadTexts: atNetAddress.setDescription("The NetworkAddress (e.g., the IP address) corresponding to the media-dependent `physical' address.")
ipForwarding = MibScalar((1, 3, 6, 1, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("not-forwarding", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: ipForwarding.setDescription("The indication of whether this entity is acting as an IP gateway in respect to the forwarding of datagrams received by, but not addressed to, this entity. IP gateways forward datagrams. IP hosts do not (except those source-routed via the host). Note that for some managed nodes, this object may take on only a subset of the values possible. Accordingly, it is appropriate for an agent to return a `badValue' response if a management station attempts to change this object to an inappropriate value.")
ipDefaultTTL = MibScalar((1, 3, 6, 1, 2, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDefaultTTL.setStatus('mandatory')
if mibBuilder.loadTexts: ipDefaultTTL.setDescription('The default value inserted into the Time-To-Live field of the IP header of datagrams originated at this entity, whenever a TTL value is not supplied by the transport layer protocol.')
ipInReceives = MibScalar((1, 3, 6, 1, 2, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInReceives.setStatus('mandatory')
if mibBuilder.loadTexts: ipInReceives.setDescription('The total number of input datagrams received from interfaces, including those received in error.')
ipInHdrErrors = MibScalar((1, 3, 6, 1, 2, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInHdrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ipInHdrErrors.setDescription('The number of input datagrams discarded due to errors in their IP headers, including bad checksums, version number mismatch, other format errors, time-to-live exceeded, errors discovered in processing their IP options, etc.')
ipInAddrErrors = MibScalar((1, 3, 6, 1, 2, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInAddrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ipInAddrErrors.setDescription("The number of input datagrams discarded because the IP address in their IP header's destination field was not a valid address to be received at this entity. This count includes invalid addresses (e.g., 0.0.0.0) and addresses of unsupported Classes (e.g., Class E). For entities which are not IP Gateways and therefore do not forward datagrams, this counter includes datagrams discarded because the destination address was not a local address.")
ipForwDatagrams = MibScalar((1, 3, 6, 1, 2, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipForwDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: ipForwDatagrams.setDescription('The number of input datagrams for which this entity was not their final IP destination, as a result of which an attempt was made to find a route to forward them to that final destination. In entities which do not act as IP Gateways, this counter will include only those packets which were Source-Routed via this entity, and the Source- Route option processing was successful.')
ipInUnknownProtos = MibScalar((1, 3, 6, 1, 2, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInUnknownProtos.setStatus('mandatory')
if mibBuilder.loadTexts: ipInUnknownProtos.setDescription('The number of locally-addressed datagrams received successfully but discarded because of an unknown or unsupported protocol.')
ipInDiscards = MibScalar((1, 3, 6, 1, 2, 1, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ipInDiscards.setDescription('The number of input IP datagrams for which no problems were encountered to prevent their continued processing, but which were discarded (e.g., for lack of buffer space). Note that this counter does not include any datagrams discarded while awaiting re-assembly.')
ipInDelivers = MibScalar((1, 3, 6, 1, 2, 1, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInDelivers.setStatus('mandatory')
if mibBuilder.loadTexts: ipInDelivers.setDescription('The total number of input datagrams successfully delivered to IP user-protocols (including ICMP).')
ipOutRequests = MibScalar((1, 3, 6, 1, 2, 1, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ipOutRequests.setDescription('The total number of IP datagrams which local IP user-protocols (including ICMP) supplied to IP in requests for transmission. Note that this counter does not include any datagrams counted in ipForwDatagrams.')
ipOutDiscards = MibScalar((1, 3, 6, 1, 2, 1, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ipOutDiscards.setDescription('The number of output IP datagrams for which no problem was encountered to prevent their transmission to their destination, but which were discarded (e.g., for lack of buffer space). Note that this counter would include datagrams counted in ipForwDatagrams if any such packets met this (discretionary) discard criterion.')
ipOutNoRoutes = MibScalar((1, 3, 6, 1, 2, 1, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutNoRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: ipOutNoRoutes.setDescription("The number of IP datagrams discarded because no route could be found to transmit them to their destination. Note that this counter includes any packets counted in ipForwDatagrams which meet this `no-route' criterion. Note that this includes any datagarms which a host cannot route because all of its default gateways are down.")
ipReasmTimeout = MibScalar((1, 3, 6, 1, 2, 1, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ipReasmTimeout.setDescription('The maximum number of seconds which received fragments are held while they are awaiting reassembly at this entity.')
ipReasmReqds = MibScalar((1, 3, 6, 1, 2, 1, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmReqds.setStatus('mandatory')
if mibBuilder.loadTexts: ipReasmReqds.setDescription('The number of IP fragments received which needed to be reassembled at this entity.')
ipReasmOKs = MibScalar((1, 3, 6, 1, 2, 1, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmOKs.setStatus('mandatory')
if mibBuilder.loadTexts: ipReasmOKs.setDescription('The number of IP datagrams successfully re- assembled.')
ipReasmFails = MibScalar((1, 3, 6, 1, 2, 1, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipReasmFails.setStatus('mandatory')
if mibBuilder.loadTexts: ipReasmFails.setDescription('The number of failures detected by the IP re- assembly algorithm (for whatever reason: timed out, errors, etc). Note that this is not necessarily a count of discarded IP fragments since some algorithms (notably the algorithm in RFC 815) can lose track of the number of fragments by combining them as they are received.')
ipFragOKs = MibScalar((1, 3, 6, 1, 2, 1, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragOKs.setStatus('mandatory')
if mibBuilder.loadTexts: ipFragOKs.setDescription('The number of IP datagrams that have been successfully fragmented at this entity.')
ipFragFails = MibScalar((1, 3, 6, 1, 2, 1, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragFails.setStatus('mandatory')
if mibBuilder.loadTexts: ipFragFails.setDescription("The number of IP datagrams that have been discarded because they needed to be fragmented at this entity but could not be, e.g., because their Don't Fragment flag was set.")
ipFragCreates = MibScalar((1, 3, 6, 1, 2, 1, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragCreates.setStatus('mandatory')
if mibBuilder.loadTexts: ipFragCreates.setDescription('The number of IP datagram fragments that have been generated as a result of fragmentation at this entity.')
ipAddrTable = MibTable((1, 3, 6, 1, 2, 1, 4, 20), )
if mibBuilder.loadTexts: ipAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipAddrTable.setDescription("The table of addressing information relevant to this entity's IP addresses.")
ipAddrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 20, 1), ).setIndexNames((0, "MRVINREACH", "ipAdEntAddr"))
if mibBuilder.loadTexts: ipAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipAddrEntry.setDescription("The addressing information for one of this entity's IP addresses.")
ipAdEntAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipAdEntAddr.setDescription("The IP address to which this entry's addressing information pertains.")
ipAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipAdEntIfIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
ipAdEntNetMask = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipAdEntNetMask.setDescription('The subnet mask associated with the IP address of this entry. The value of the mask is an IP address with all the network bits set to 1 and all the hosts bits set to 0.')
ipAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntBcastAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipAdEntBcastAddr.setDescription('The value of the least-significant bit in the IP broadcast address used for sending datagrams on the (logical) interface associated with the IP address of this entry. For example, when the Internet standard all-ones broadcast address is used, the value will be 1. This value applies to both the subnet and network broadcasts addresses used by the entity on this (logical) interface.')
ipAdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntReasmMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: ipAdEntReasmMaxSize.setDescription('The size of the largest IP datagram which this entity can re-assemble from incoming IP fragmented datagrams received on this interface.')
ipRouteTable = MibTable((1, 3, 6, 1, 2, 1, 4, 21), )
if mibBuilder.loadTexts: ipRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteTable.setDescription("This entity's IP Routing table.")
ipRouteEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 21, 1), ).setIndexNames((0, "MRVINREACH", "ipRouteDest"))
if mibBuilder.loadTexts: ipRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteEntry.setDescription('A route to a particular destination.')
ipRouteDest = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteDest.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteDest.setDescription('The destination IP address of this route. An entry with a value of 0.0.0.0 is considered a default route. Multiple routes to a single destination can appear in the table, but access to such multiple entries is dependent on the table- access mechanisms defined by the network management protocol in use.')
ipRouteIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteIfIndex.setDescription('The index value which uniquely identifies the local interface through which the next hop of this route should be reached. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
ipRouteMetric1 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric1.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteMetric1.setDescription("The primary routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1.")
ipRouteMetric2 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric2.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteMetric2.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1.")
ipRouteMetric3 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric3.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteMetric3.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1.")
ipRouteMetric4 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric4.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteMetric4.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1.")
ipRouteNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteNextHop.setDescription("The IP address of the next hop of this route. (In the case of a route bound to an interface which is realized via a broadcast media, the value of this field is the agent's IP address on that interface.)")
ipRouteType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("indirect", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteType.setDescription('The type of route. Note that the values direct(3) and indirect(4) refer to the notion of direct and indirect routing in the IP architecture. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the ipRouteTable object. That is, it effectively dissasociates the destination identified with said entry from the route identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant ipRouteType object.')
ipRouteProto = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("is-is", 9), ("es-is", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteProto.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteProto.setDescription('The routing mechanism via which this route was learned. Inclusion of values for gateway routing protocols is not intended to imply that hosts should support those protocols.')
ipRouteAge = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteAge.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteAge.setDescription("The number of seconds since this route was last updated or otherwise determined to be correct. Note that no semantics of `too old' can be implied except through knowledge of the routing protocol by which the route was learned.")
ipRouteMask = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteMask.setDescription('Indicate the mask to be logical-ANDed with the destination address before being compared to the value in the ipRouteDest field. For those systems that do not support arbitrary subnet masks, an agent constructs the value of the ipRouteMask by determining whether the value of the correspondent ipRouteDest field belong to a class-A, B, or C network, and then using one of: mask network 255.0.0.0 class-A 255.255.0.0 class-B 255.255.255.0 class-C If the value of the ipRouteDest is 0.0.0.0 (a default route), then the mask value is also 0.0.0.0. It should be noted that all IP routing subsystems implicitly use this mechanism.')
ipRouteMetric5 = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteMetric5.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteMetric5.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipRouteProto value. If this metric is not used, its value should be set to -1.")
ipRouteInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 21, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfo.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfo.setDescription("A reference to MIB definitions specific to the particular routing protocol which is responsible for this route, as determined by the value specified in the route's ipRouteProto value. If this information is not present, its value should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntatically valid object identifier, and any conformant implementation of ASN.1 and BER must be able to generate and recognize this value.")
ipNetToMediaTable = MibTable((1, 3, 6, 1, 2, 1, 4, 22), )
if mibBuilder.loadTexts: ipNetToMediaTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipNetToMediaTable.setDescription('The IP Address Translation table used for mapping from IP addresses to physical addresses.')
ipNetToMediaEntry = MibTableRow((1, 3, 6, 1, 2, 1, 4, 22, 1), ).setIndexNames((0, "MRVINREACH", "ipNetToMediaIfIndex"), (0, "MRVINREACH", "ipNetToMediaNetAddress"))
if mibBuilder.loadTexts: ipNetToMediaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipNetToMediaEntry.setDescription("Each entry contains one IpAddress to `physical' address equivalence.")
ipNetToMediaIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetToMediaIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipNetToMediaIfIndex.setDescription("The interface on which this entry's equivalence is effective. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.")
ipNetToMediaPhysAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetToMediaPhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipNetToMediaPhysAddress.setDescription("The media-dependent `physical' address.")
ipNetToMediaNetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNetToMediaNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipNetToMediaNetAddress.setDescription("The IpAddress corresponding to the media- dependent `physical' address.")
ipNetToMediaType = MibTableColumn((1, 3, 6, 1, 2, 1, 4, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetToMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: ipNetToMediaType.setDescription('The type of mapping. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the ipNetToMediaTable. That is, it effectively dissasociates the interface identified with said entry from the mapping identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant ipNetToMediaType object.')
ipRoutingDiscards = MibScalar((1, 3, 6, 1, 2, 1, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRoutingDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ipRoutingDiscards.setDescription('The number of routing entries which were chosen to be discarded even though they are valid. One possible reason for discarding such an entry could be to free-up buffer space for other routing entries.')
icmpInMsgs = MibScalar((1, 3, 6, 1, 2, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: icmpInMsgs.setDescription('The total number of ICMP messages which the entity received. Note that this counter includes all those counted by icmpInErrors.')
icmpInErrors = MibScalar((1, 3, 6, 1, 2, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: icmpInErrors.setDescription('The number of ICMP messages which the entity received but determined as having ICMP-specific errors (bad ICMP checksums, bad length, etc.).')
icmpInDestUnreachs = MibScalar((1, 3, 6, 1, 2, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInDestUnreachs.setStatus('mandatory')
if mibBuilder.loadTexts: icmpInDestUnreachs.setDescription('The number of ICMP Destination Unreachable messages received.')
icmpInTimeExcds = MibScalar((1, 3, 6, 1, 2, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInTimeExcds.setStatus('mandatory')
if mibBuilder.loadTexts: icmpInTimeExcds.setDescription('The number of ICMP Time Exceeded messages received.')
icmpInParmProbs = MibScalar((1, 3, 6, 1, 2, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInParmProbs.setStatus('mandatory')
if mibBuilder.loadTexts: icmpInParmProbs.setDescription('The number of ICMP Parameter Problem messages received.')
icmpInSrcQuenchs = MibScalar((1, 3, 6, 1, 2, 1, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInSrcQuenchs.setStatus('mandatory')
if mibBuilder.loadTexts: icmpInSrcQuenchs.setDescription('The number of ICMP Source Quench messages received.')
icmpInRedirects = MibScalar((1, 3, 6, 1, 2, 1, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInRedirects.setStatus('mandatory')
if mibBuilder.loadTexts: icmpInRedirects.setDescription('The number of ICMP Redirect messages received.')
icmpInEchos = MibScalar((1, 3, 6, 1, 2, 1, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInEchos.setStatus('mandatory')
if mibBuilder.loadTexts: icmpInEchos.setDescription('The number of ICMP Echo (request) messages received.')
icmpInEchoReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInEchoReps.setStatus('mandatory')
if mibBuilder.loadTexts: icmpInEchoReps.setDescription('The number of ICMP Echo Reply messages received.')
icmpInTimestamps = MibScalar((1, 3, 6, 1, 2, 1, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInTimestamps.setStatus('mandatory')
if mibBuilder.loadTexts: icmpInTimestamps.setDescription('The number of ICMP Timestamp (request) messages received.')
icmpInTimestampReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInTimestampReps.setStatus('mandatory')
if mibBuilder.loadTexts: icmpInTimestampReps.setDescription('The number of ICMP Timestamp Reply messages received.')
icmpInAddrMasks = MibScalar((1, 3, 6, 1, 2, 1, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInAddrMasks.setStatus('mandatory')
if mibBuilder.loadTexts: icmpInAddrMasks.setDescription('The number of ICMP Address Mask Request messages received.')
icmpInAddrMaskReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInAddrMaskReps.setStatus('mandatory')
if mibBuilder.loadTexts: icmpInAddrMaskReps.setDescription('The number of ICMP Address Mask Reply messages received.')
icmpOutMsgs = MibScalar((1, 3, 6, 1, 2, 1, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: icmpOutMsgs.setDescription('The total number of ICMP messages which this entity attempted to send. Note that this counter includes all those counted by icmpOutErrors.')
icmpOutErrors = MibScalar((1, 3, 6, 1, 2, 1, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: icmpOutErrors.setDescription("The number of ICMP messages which this entity did not send due to problems discovered within ICMP such as a lack of buffers. This value should not include errors discovered outside the ICMP layer such as the inability of IP to route the resultant datagram. In some implementations there may be no types of error which contribute to this counter's value.")
icmpOutDestUnreachs = MibScalar((1, 3, 6, 1, 2, 1, 5, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutDestUnreachs.setStatus('mandatory')
if mibBuilder.loadTexts: icmpOutDestUnreachs.setDescription('The number of ICMP Destination Unreachable messages sent.')
icmpOutTimeExcds = MibScalar((1, 3, 6, 1, 2, 1, 5, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutTimeExcds.setStatus('mandatory')
if mibBuilder.loadTexts: icmpOutTimeExcds.setDescription('The number of ICMP Time Exceeded messages sent.')
icmpOutParmProbs = MibScalar((1, 3, 6, 1, 2, 1, 5, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutParmProbs.setStatus('mandatory')
if mibBuilder.loadTexts: icmpOutParmProbs.setDescription('The number of ICMP Parameter Problem messages sent.')
icmpOutSrcQuenchs = MibScalar((1, 3, 6, 1, 2, 1, 5, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutSrcQuenchs.setStatus('mandatory')
if mibBuilder.loadTexts: icmpOutSrcQuenchs.setDescription('The number of ICMP Source Quench messages sent.')
icmpOutRedirects = MibScalar((1, 3, 6, 1, 2, 1, 5, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutRedirects.setStatus('mandatory')
if mibBuilder.loadTexts: icmpOutRedirects.setDescription('The number of ICMP Redirect messages sent. For a host, this object will always be zero, since hosts do not send redirects.')
icmpOutEchos = MibScalar((1, 3, 6, 1, 2, 1, 5, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutEchos.setStatus('mandatory')
if mibBuilder.loadTexts: icmpOutEchos.setDescription('The number of ICMP Echo (request) messages sent.')
icmpOutEchoReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutEchoReps.setStatus('mandatory')
if mibBuilder.loadTexts: icmpOutEchoReps.setDescription('The number of ICMP Echo Reply messages sent.')
icmpOutTimestamps = MibScalar((1, 3, 6, 1, 2, 1, 5, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutTimestamps.setStatus('mandatory')
if mibBuilder.loadTexts: icmpOutTimestamps.setDescription('The number of ICMP Timestamp (request) messages sent.')
icmpOutTimestampReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutTimestampReps.setStatus('mandatory')
if mibBuilder.loadTexts: icmpOutTimestampReps.setDescription('The number of ICMP Timestamp Reply messages sent.')
icmpOutAddrMasks = MibScalar((1, 3, 6, 1, 2, 1, 5, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutAddrMasks.setStatus('mandatory')
if mibBuilder.loadTexts: icmpOutAddrMasks.setDescription('The number of ICMP Address Mask Request messages sent.')
icmpOutAddrMaskReps = MibScalar((1, 3, 6, 1, 2, 1, 5, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutAddrMaskReps.setStatus('mandatory')
if mibBuilder.loadTexts: icmpOutAddrMaskReps.setDescription('The number of ICMP Address Mask Reply messages sent.')
tcpRtoAlgorithm = MibScalar((1, 3, 6, 1, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("constant", 2), ("rsre", 3), ("vanj", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpRtoAlgorithm.setStatus('mandatory')
if mibBuilder.loadTexts: tcpRtoAlgorithm.setDescription('The algorithm used to determine the timeout value used for retransmitting unacknowledged octets.')
tcpRtoMin = MibScalar((1, 3, 6, 1, 2, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpRtoMin.setStatus('mandatory')
if mibBuilder.loadTexts: tcpRtoMin.setDescription('The minimum value permitted by a TCP implementation for the retransmission timeout, measured in milliseconds. More refined semantics for objects of this type depend upon the algorithm used to determine the retransmission timeout. In particular, when the timeout algorithm is rsre(3), an object of this type has the semantics of the LBOUND quantity described in RFC 793.')
tcpRtoMax = MibScalar((1, 3, 6, 1, 2, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpRtoMax.setStatus('mandatory')
if mibBuilder.loadTexts: tcpRtoMax.setDescription('The maximum value permitted by a TCP implementation for the retransmission timeout, measured in milliseconds. More refined semantics for objects of this type depend upon the algorithm used to determine the retransmission timeout. In particular, when the timeout algorithm is rsre(3), an object of this type has the semantics of the UBOUND quantity described in RFC 793.')
tcpMaxConn = MibScalar((1, 3, 6, 1, 2, 1, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpMaxConn.setStatus('mandatory')
if mibBuilder.loadTexts: tcpMaxConn.setDescription('The limit on the total number of TCP connections the entity can support. In entities where the maximum number of connections is dynamic, this object should contain the value -1.')
tcpActiveOpens = MibScalar((1, 3, 6, 1, 2, 1, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpActiveOpens.setStatus('mandatory')
if mibBuilder.loadTexts: tcpActiveOpens.setDescription('The number of times TCP connections have made a direct transition to the SYN-SENT state from the CLOSED state.')
tcpPassiveOpens = MibScalar((1, 3, 6, 1, 2, 1, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpPassiveOpens.setStatus('mandatory')
if mibBuilder.loadTexts: tcpPassiveOpens.setDescription('The number of times TCP connections have made a direct transition to the SYN-RCVD state from the LISTEN state.')
tcpAttemptFails = MibScalar((1, 3, 6, 1, 2, 1, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpAttemptFails.setStatus('mandatory')
if mibBuilder.loadTexts: tcpAttemptFails.setDescription('The number of times TCP connections have made a direct transition to the CLOSED state from either the SYN-SENT state or the SYN-RCVD state, plus the number of times TCP connections have made a direct transition to the LISTEN state from the SYN-RCVD state.')
tcpEstabResets = MibScalar((1, 3, 6, 1, 2, 1, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpEstabResets.setStatus('mandatory')
if mibBuilder.loadTexts: tcpEstabResets.setDescription('The number of times TCP connections have made a direct transition to the CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state.')
tcpCurrEstab = MibScalar((1, 3, 6, 1, 2, 1, 6, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurrEstab.setStatus('mandatory')
if mibBuilder.loadTexts: tcpCurrEstab.setDescription('The number of TCP connections for which the current state is either ESTABLISHED or CLOSE- WAIT.')
tcpInSegs = MibScalar((1, 3, 6, 1, 2, 1, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpInSegs.setStatus('mandatory')
if mibBuilder.loadTexts: tcpInSegs.setDescription('The total number of segments received, including those received in error. This count includes segments received on currently established connections.')
tcpOutSegs = MibScalar((1, 3, 6, 1, 2, 1, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOutSegs.setStatus('mandatory')
if mibBuilder.loadTexts: tcpOutSegs.setDescription('The total number of segments sent, including those on current connections but excluding those containing only retransmitted octets.')
tcpRetransSegs = MibScalar((1, 3, 6, 1, 2, 1, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpRetransSegs.setStatus('mandatory')
if mibBuilder.loadTexts: tcpRetransSegs.setDescription('The total number of segments retransmitted - that is, the number of TCP segments transmitted containing one or more previously transmitted octets.')
tcpConnTable = MibTable((1, 3, 6, 1, 2, 1, 6, 13), )
if mibBuilder.loadTexts: tcpConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: tcpConnTable.setDescription('A table containing TCP connection-specific information.')
tcpConnEntry = MibTableRow((1, 3, 6, 1, 2, 1, 6, 13, 1), ).setIndexNames((0, "MRVINREACH", "tcpConnLocalAddress"), (0, "MRVINREACH", "tcpConnLocalPort"), (0, "MRVINREACH", "tcpConnRemAddress"), (0, "MRVINREACH", "tcpConnRemPort"))
if mibBuilder.loadTexts: tcpConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tcpConnEntry.setDescription('Information about a particular current TCP connection. An object of this type is transient, in that it ceases to exist when (or soon after) the connection makes the transition to the CLOSED state.')
tcpConnState = MibTableColumn((1, 3, 6, 1, 2, 1, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("synSent", 3), ("synReceived", 4), ("established", 5), ("finWait1", 6), ("finWait2", 7), ("closeWait", 8), ("lastAck", 9), ("closing", 10), ("timeWait", 11), ("deleteTCB", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpConnState.setStatus('mandatory')
if mibBuilder.loadTexts: tcpConnState.setDescription("The state of this TCP connection. The only value which may be set by a management station is deleteTCB(12). Accordingly, it is appropriate for an agent to return a `badValue' response if a management station attempts to set this object to any other value. If a management station sets this object to the value deleteTCB(12), then this has the effect of deleting the TCB (as defined in RFC 793) of the corresponding connection on the managed node, resulting in immediate termination of the connection. As an implementation-specific option, a RST segment may be sent from the managed node to the other TCP endpoint (note however that RST segments are not sent reliably).")
tcpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 6, 13, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tcpConnLocalAddress.setDescription('The local IP address for this TCP connection. In the case of a connection in the listen state which is willing to accept connections for any IP interface associated with the node, the value 0.0.0.0 is used.')
tcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 2, 1, 6, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: tcpConnLocalPort.setDescription('The local port number for this TCP connection.')
tcpConnRemAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 6, 13, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnRemAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tcpConnRemAddress.setDescription('The remote IP address for this TCP connection.')
tcpConnRemPort = MibTableColumn((1, 3, 6, 1, 2, 1, 6, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpConnRemPort.setStatus('mandatory')
if mibBuilder.loadTexts: tcpConnRemPort.setDescription('The remote port number for this TCP connection.')
tcpInErrs = MibScalar((1, 3, 6, 1, 2, 1, 6, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpInErrs.setStatus('mandatory')
if mibBuilder.loadTexts: tcpInErrs.setDescription('The total number of segments received in error (e.g., bad TCP checksums).')
tcpOutRsts = MibScalar((1, 3, 6, 1, 2, 1, 6, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpOutRsts.setStatus('mandatory')
if mibBuilder.loadTexts: tcpOutRsts.setDescription('The number of TCP segments sent containing the RST flag.')
udpInDatagrams = MibScalar((1, 3, 6, 1, 2, 1, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpInDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: udpInDatagrams.setDescription('The total number of UDP datagrams delivered to UDP users.')
udpNoPorts = MibScalar((1, 3, 6, 1, 2, 1, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpNoPorts.setStatus('mandatory')
if mibBuilder.loadTexts: udpNoPorts.setDescription('The total number of received UDP datagrams for which there was no application at the destination port.')
udpInErrors = MibScalar((1, 3, 6, 1, 2, 1, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: udpInErrors.setDescription('The number of received UDP datagrams that could not be delivered for reasons other than the lack of an application at the destination port.')
udpOutDatagrams = MibScalar((1, 3, 6, 1, 2, 1, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpOutDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: udpOutDatagrams.setDescription('The total number of UDP datagrams sent from this entity.')
udpTable = MibTable((1, 3, 6, 1, 2, 1, 7, 5), )
if mibBuilder.loadTexts: udpTable.setStatus('mandatory')
if mibBuilder.loadTexts: udpTable.setDescription('A table containing UDP listener information.')
udpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 7, 5, 1), ).setIndexNames((0, "MRVINREACH", "udpLocalAddress"), (0, "MRVINREACH", "udpLocalPort"))
if mibBuilder.loadTexts: udpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: udpEntry.setDescription('Information about a particular current UDP listener.')
udpLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 7, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: udpLocalAddress.setDescription('The local IP address for this UDP listener. In the case of a UDP listener which is willing to accept datagrams for any IP interface associated with the node, the value 0.0.0.0 is used.')
udpLocalPort = MibTableColumn((1, 3, 6, 1, 2, 1, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: udpLocalPort.setDescription('The local port number for this UDP listener.')
egpInMsgs = MibScalar((1, 3, 6, 1, 2, 1, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpInMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: egpInMsgs.setDescription('The number of EGP messages received without error.')
egpInErrors = MibScalar((1, 3, 6, 1, 2, 1, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: egpInErrors.setDescription('The number of EGP messages received that proved to be in error.')
egpOutMsgs = MibScalar((1, 3, 6, 1, 2, 1, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpOutMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: egpOutMsgs.setDescription('The total number of locally generated EGP messages.')
egpOutErrors = MibScalar((1, 3, 6, 1, 2, 1, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: egpOutErrors.setDescription('The number of locally generated EGP messages not sent due to resource limitations within an EGP entity.')
egpNeighTable = MibTable((1, 3, 6, 1, 2, 1, 8, 5), )
if mibBuilder.loadTexts: egpNeighTable.setStatus('mandatory')
if mibBuilder.loadTexts: egpNeighTable.setDescription('The EGP neighbor table.')
egpNeighEntry = MibTableRow((1, 3, 6, 1, 2, 1, 8, 5, 1), ).setIndexNames((0, "MRVINREACH", "egpNeighAddr"))
if mibBuilder.loadTexts: egpNeighEntry.setStatus('mandatory')
if mibBuilder.loadTexts: egpNeighEntry.setDescription("Information about this entity's relationship with a particular EGP neighbor.")
egpNeighState = MibTableColumn((1, 3, 6, 1, 2, 1, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("acquisition", 2), ("down", 3), ("up", 4), ("cease", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpNeighState.setStatus('mandatory')
if mibBuilder.loadTexts: egpNeighState.setDescription("The EGP state of the local system with respect to this entry's EGP neighbor. Each EGP state is represented by a value that is one greater than the numerical value associated with said state in RFC 904.")
egpNeighAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 8, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpNeighAddr.setStatus('mandatory')
if mibBuilder.loadTexts: egpNeighAddr.setDescription("The IP address of this entry's EGP neighbor.")
egpNeighAs = MibTableColumn((1, 3, 6, 1, 2, 1, 8, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpNeighAs.setStatus('mandatory')
if mibBuilder.loadTexts: egpNeighAs.setDescription('The autonomous system of this EGP peer. Zero should be specified if the autonomous system number of the neighbor is not yet known.')
egpNeighInMsgs = MibTableColumn((1, 3, 6, 1, 2, 1, 8, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpNeighInMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: egpNeighInMsgs.setDescription('The number of EGP messages received without error from this EGP peer.')
egpNeighInErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 8, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpNeighInErrs.setStatus('mandatory')
if mibBuilder.loadTexts: egpNeighInErrs.setDescription('The number of EGP messages received from this EGP peer that proved to be in error (e.g., bad EGP checksum).')
egpNeighOutMsgs = MibTableColumn((1, 3, 6, 1, 2, 1, 8, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpNeighOutMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: egpNeighOutMsgs.setDescription('The number of locally generated EGP messages to this EGP peer.')
egpNeighOutErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 8, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpNeighOutErrs.setStatus('mandatory')
if mibBuilder.loadTexts: egpNeighOutErrs.setDescription('The number of locally generated EGP messages not sent to this EGP peer due to resource limitations within an EGP entity.')
egpNeighInErrMsgs = MibTableColumn((1, 3, 6, 1, 2, 1, 8, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpNeighInErrMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: egpNeighInErrMsgs.setDescription('The number of EGP-defined error messages received from this EGP peer.')
egpNeighOutErrMsgs = MibTableColumn((1, 3, 6, 1, 2, 1, 8, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpNeighOutErrMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: egpNeighOutErrMsgs.setDescription('The number of EGP-defined error messages sent to this EGP peer.')
egpNeighStateUps = MibTableColumn((1, 3, 6, 1, 2, 1, 8, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpNeighStateUps.setStatus('mandatory')
if mibBuilder.loadTexts: egpNeighStateUps.setDescription('The number of EGP state transitions to the UP state with this EGP peer.')
egpNeighStateDowns = MibTableColumn((1, 3, 6, 1, 2, 1, 8, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpNeighStateDowns.setStatus('mandatory')
if mibBuilder.loadTexts: egpNeighStateDowns.setDescription('The number of EGP state transitions from the UP state to any other state with this EGP peer.')
egpNeighIntervalHello = MibTableColumn((1, 3, 6, 1, 2, 1, 8, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpNeighIntervalHello.setStatus('mandatory')
if mibBuilder.loadTexts: egpNeighIntervalHello.setDescription('The interval between EGP Hello command retransmissions (in hundredths of a second). This represents the t1 timer as defined in RFC 904.')
egpNeighIntervalPoll = MibTableColumn((1, 3, 6, 1, 2, 1, 8, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpNeighIntervalPoll.setStatus('mandatory')
if mibBuilder.loadTexts: egpNeighIntervalPoll.setDescription('The interval between EGP poll command retransmissions (in hundredths of a second). This represents the t3 timer as defined in RFC 904.')
egpNeighMode = MibTableColumn((1, 3, 6, 1, 2, 1, 8, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpNeighMode.setStatus('mandatory')
if mibBuilder.loadTexts: egpNeighMode.setDescription('The polling mode of this EGP entity, either passive or active.')
egpNeighEventTrigger = MibTableColumn((1, 3, 6, 1, 2, 1, 8, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egpNeighEventTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: egpNeighEventTrigger.setDescription("A control variable used to trigger operator- initiated Start and Stop events. When read, this variable always returns the most recent value that egpNeighEventTrigger was set to. If it has not been set since the last initialization of the network management subsystem on the node, it returns a value of `stop'. When set, this variable causes a Start or Stop event on the specified neighbor, as specified on pages 8-10 of RFC 904. Briefly, a Start event causes an Idle peer to begin neighbor acquisition and a non-Idle peer to reinitiate neighbor acquisition. A stop event causes a non-Idle peer to return to the Idle state until a Start event occurs, either via egpNeighEventTrigger or otherwise.")
egpAs = MibScalar((1, 3, 6, 1, 2, 1, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpAs.setStatus('mandatory')
if mibBuilder.loadTexts: egpAs.setDescription('The autonomous system number of this EGP entity.')
snmpInPkts = MibScalar((1, 3, 6, 1, 2, 1, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snmpInPkts.setDescription('The total number of Messages delivered to the SNMP entity from the transport service.')
snmpOutPkts = MibScalar((1, 3, 6, 1, 2, 1, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snmpOutPkts.setDescription('The total number of SNMP Messages which were passed from the SNMP protocol entity to the transport service.')
snmpInBadVersions = MibScalar((1, 3, 6, 1, 2, 1, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInBadVersions.setStatus('mandatory')
if mibBuilder.loadTexts: snmpInBadVersions.setDescription('The total number of SNMP Messages which were delivered to the SNMP protocol entity and were for an unsupported SNMP version.')
snmpInBadCommunityNames = MibScalar((1, 3, 6, 1, 2, 1, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInBadCommunityNames.setStatus('mandatory')
if mibBuilder.loadTexts: snmpInBadCommunityNames.setDescription('The total number of SNMP Messages delivered to the SNMP protocol entity which used a SNMP community name not known to said entity.')
snmpInBadCommunityUses = MibScalar((1, 3, 6, 1, 2, 1, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInBadCommunityUses.setStatus('mandatory')
if mibBuilder.loadTexts: snmpInBadCommunityUses.setDescription('The total number of SNMP Messages delivered to the SNMP protocol entity which represented an SNMP operation which was not allowed by the SNMP community named in the Message.')
snmpInASNParseErrs = MibScalar((1, 3, 6, 1, 2, 1, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInASNParseErrs.setStatus('mandatory')
if mibBuilder.loadTexts: snmpInASNParseErrs.setDescription('The total number of ASN.1 or BER errors encountered by the SNMP protocol entity when decoding received SNMP Messages.')
snmpInTooBigs = MibScalar((1, 3, 6, 1, 2, 1, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInTooBigs.setStatus('mandatory')
if mibBuilder.loadTexts: snmpInTooBigs.setDescription("The total number of SNMP PDUs which were delivered to the SNMP protocol entity and for which the value of the error-status field is `tooBig'.")
snmpInNoSuchNames = MibScalar((1, 3, 6, 1, 2, 1, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInNoSuchNames.setStatus('mandatory')
if mibBuilder.loadTexts: snmpInNoSuchNames.setDescription("The total number of SNMP PDUs which were delivered to the SNMP protocol entity and for which the value of the error-status field is `noSuchName'.")
snmpInBadValues = MibScalar((1, 3, 6, 1, 2, 1, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInBadValues.setStatus('mandatory')
if mibBuilder.loadTexts: snmpInBadValues.setDescription("The total number of SNMP PDUs which were delivered to the SNMP protocol entity and for which the value of the error-status field is `badValue'.")
snmpInReadOnlys = MibScalar((1, 3, 6, 1, 2, 1, 11, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInReadOnlys.setStatus('mandatory')
if mibBuilder.loadTexts: snmpInReadOnlys.setDescription("The total number valid SNMP PDUs which were delivered to the SNMP protocol entity and for which the value of the error-status field is `readOnly'. It should be noted that it is a protocol error to generate an SNMP PDU which contains the value `readOnly' in the error-status field, as such this object is provided as a means of detecting incorrect implementations of the SNMP.")
snmpInGenErrs = MibScalar((1, 3, 6, 1, 2, 1, 11, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInGenErrs.setStatus('mandatory')
if mibBuilder.loadTexts: snmpInGenErrs.setDescription("The total number of SNMP PDUs which were delivered to the SNMP protocol entity and for which the value of the error-status field is `genErr'.")
snmpInTotalReqVars = MibScalar((1, 3, 6, 1, 2, 1, 11, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInTotalReqVars.setStatus('mandatory')
if mibBuilder.loadTexts: snmpInTotalReqVars.setDescription('The total number of MIB objects which have been retrieved successfully by the SNMP protocol entity as the result of receiving valid SNMP Get-Request and Get-Next PDUs.')
snmpInTotalSetVars = MibScalar((1, 3, 6, 1, 2, 1, 11, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInTotalSetVars.setStatus('mandatory')
if mibBuilder.loadTexts: snmpInTotalSetVars.setDescription('The total number of MIB objects which have been altered successfully by the SNMP protocol entity as the result of receiving valid SNMP Set-Request PDUs.')
snmpInGetRequests = MibScalar((1, 3, 6, 1, 2, 1, 11, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInGetRequests.setStatus('mandatory')
if mibBuilder.loadTexts: snmpInGetRequests.setDescription('The total number of SNMP Get-Request PDUs which have been accepted and processed by the SNMP protocol entity.')
snmpInGetNexts = MibScalar((1, 3, 6, 1, 2, 1, 11, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInGetNexts.setStatus('mandatory')
if mibBuilder.loadTexts: snmpInGetNexts.setDescription('The total number of SNMP Get-Next PDUs which have been accepted and processed by the SNMP protocol entity.')
snmpInSetRequests = MibScalar((1, 3, 6, 1, 2, 1, 11, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInSetRequests.setStatus('mandatory')
if mibBuilder.loadTexts: snmpInSetRequests.setDescription('The total number of SNMP Set-Request PDUs which have been accepted and processed by the SNMP protocol entity.')
snmpInGetResponses = MibScalar((1, 3, 6, 1, 2, 1, 11, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInGetResponses.setStatus('mandatory')
if mibBuilder.loadTexts: snmpInGetResponses.setDescription('The total number of SNMP Get-Response PDUs which have been accepted and processed by the SNMP protocol entity.')
snmpInTraps = MibScalar((1, 3, 6, 1, 2, 1, 11, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpInTraps.setStatus('mandatory')
if mibBuilder.loadTexts: snmpInTraps.setDescription('The total number of SNMP Trap PDUs which have been accepted and processed by the SNMP protocol entity.')
snmpOutTooBigs = MibScalar((1, 3, 6, 1, 2, 1, 11, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutTooBigs.setStatus('mandatory')
if mibBuilder.loadTexts: snmpOutTooBigs.setDescription("The total number of SNMP PDUs which were generated by the SNMP protocol entity and for which the value of the error-status field is `tooBig.'")
snmpOutNoSuchNames = MibScalar((1, 3, 6, 1, 2, 1, 11, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutNoSuchNames.setStatus('mandatory')
if mibBuilder.loadTexts: snmpOutNoSuchNames.setDescription("The total number of SNMP PDUs which were generated by the SNMP protocol entity and for which the value of the error-status is `noSuchName'.")
snmpOutBadValues = MibScalar((1, 3, 6, 1, 2, 1, 11, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutBadValues.setStatus('mandatory')
if mibBuilder.loadTexts: snmpOutBadValues.setDescription("The total number of SNMP PDUs which were generated by the SNMP protocol entity and for which the value of the error-status field is `badValue'.")
snmpOutGenErrs = MibScalar((1, 3, 6, 1, 2, 1, 11, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutGenErrs.setStatus('mandatory')
if mibBuilder.loadTexts: snmpOutGenErrs.setDescription("The total number of SNMP PDUs which were generated by the SNMP protocol entity and for which the value of the error-status field is `genErr'.")
snmpOutGetRequests = MibScalar((1, 3, 6, 1, 2, 1, 11, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutGetRequests.setStatus('mandatory')
if mibBuilder.loadTexts: snmpOutGetRequests.setDescription('The total number of SNMP Get-Request PDUs which have been generated by the SNMP protocol entity.')
snmpOutGetNexts = MibScalar((1, 3, 6, 1, 2, 1, 11, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutGetNexts.setStatus('mandatory')
if mibBuilder.loadTexts: snmpOutGetNexts.setDescription('The total number of SNMP Get-Next PDUs which have been generated by the SNMP protocol entity.')
snmpOutSetRequests = MibScalar((1, 3, 6, 1, 2, 1, 11, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutSetRequests.setStatus('mandatory')
if mibBuilder.loadTexts: snmpOutSetRequests.setDescription('The total number of SNMP Set-Request PDUs which have been generated by the SNMP protocol entity.')
snmpOutGetResponses = MibScalar((1, 3, 6, 1, 2, 1, 11, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutGetResponses.setStatus('mandatory')
if mibBuilder.loadTexts: snmpOutGetResponses.setDescription('The total number of SNMP Get-Response PDUs which have been generated by the SNMP protocol entity.')
snmpOutTraps = MibScalar((1, 3, 6, 1, 2, 1, 11, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpOutTraps.setStatus('mandatory')
if mibBuilder.loadTexts: snmpOutTraps.setDescription('The total number of SNMP Trap PDUs which have been generated by the SNMP protocol entity.')
snmpEnableAuthenTraps = MibScalar((1, 3, 6, 1, 2, 1, 11, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpEnableAuthenTraps.setStatus('mandatory')
if mibBuilder.loadTexts: snmpEnableAuthenTraps.setDescription('Indicates whether the SNMP agent process is permitted to generate authentication-failure traps. The value of this object overrides any configuration information; as such, it provides a means whereby all authentication-failure traps may be disabled. Note that it is strongly recommended that this object be stored in non-volatile memory so that it remains constant between re-initializations of the network management system.')
char = MibIdentifier((1, 3, 6, 1, 2, 1, 19))
class AutonomousType(ObjectIdentifier):
    pass

class InstancePointer(ObjectIdentifier):
    pass

charNumber = MibScalar((1, 3, 6, 1, 2, 1, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charNumber.setStatus('mandatory')
if mibBuilder.loadTexts: charNumber.setDescription('The number of entries in charPortTable, regardless of their current state.')
charPortTable = MibTable((1, 3, 6, 1, 2, 1, 19, 2), )
if mibBuilder.loadTexts: charPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: charPortTable.setDescription('A list of port entries. The number of entries is given by the value of charNumber.')
charPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 19, 2, 1), ).setIndexNames((0, "MRVINREACH", "charPortIndex"))
if mibBuilder.loadTexts: charPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: charPortEntry.setDescription('Status and parameter values for a character port.')
charPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: charPortIndex.setDescription('A unique value for each character port. Its value ranges between 1 and the value of charNumber. By convention and if possible, hardware port numbers come first, with a simple, direct mapping. The value for each port must remain constant at least from one re-initialization of the network management agent to the next.')
charPortName = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortName.setStatus('mandatory')
if mibBuilder.loadTexts: charPortName.setDescription('An administratively assigned name for the port, typically with some local significance.')
charPortType = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("physical", 1), ("virtual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortType.setStatus('mandatory')
if mibBuilder.loadTexts: charPortType.setDescription("The port's type, 'physical' if the port represents an external hardware connector, 'virtual' if it does not.")
charPortHardware = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 2, 1, 4), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortHardware.setStatus('mandatory')
if mibBuilder.loadTexts: charPortHardware.setDescription("A reference to hardware MIB definitions specific to a physical port's external connector. For example, if the connector is RS-232, then the value of this object refers to a MIB sub-tree defining objects specific to RS-232. If an agent is not configured to have such values, the agent returns the object identifier: nullHardware OBJECT IDENTIFIER ::= { 0 0 } ")
charPortReset = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortReset.setStatus('mandatory')
if mibBuilder.loadTexts: charPortReset.setDescription("A control to force the port into a clean, initial state, both hardware and software, disconnecting all the port's existing sessions. In response to a get-request or get-next-request, the agent always returns 'ready' as the value. Setting the value to 'execute' causes a reset.")
charPortAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("off", 3), ("maintenance", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: charPortAdminStatus.setDescription("The port's desired state, independent of flow control. 'enabled' indicates that the port is allowed to pass characters and form new sessions. 'disabled' indicates that the port is allowed to pass characters but not form new sessions. 'off' indicates that the port is not allowed to pass characters or have any sessions. 'maintenance' indicates a maintenance mode, exclusive of normal operation, such as running a test.")
charPortOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("maintenance", 3), ("absent", 4), ("active", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: charPortOperStatus.setDescription("The port's actual, operational state, independent of flow control. 'up' indicates able to function normally. 'down' indicates inability to function for administrative or operational reasons. 'maintenance' indicates a maintenance mode, exclusive of normal operation, such as running a test. 'absent' indicates that port hardware is not present. 'active' indicates up with a user present (e.g. logged in).")
charPortLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: charPortLastChange.setDescription('The value of sysUpTime at the time the port entered its current operational state. If the current state was entered prior to the last reinitialization of the local network management subsystem, then this object contains a zero value.')
charPortInFlowType = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("xonXoff", 2), ("hardware", 3), ("ctsRts", 4), ("dsrDtr", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortInFlowType.setStatus('mandatory')
if mibBuilder.loadTexts: charPortInFlowType.setDescription("The port's type of input flow control. 'none' indicates no flow control at this level or below. 'xonXoff' indicates software flow control by recognizing XON and XOFF characters. 'hardware' indicates flow control delegated to the lower level, for example a parallel port. 'ctsRts' and 'dsrDtr' are specific to RS-232-like ports. Although not architecturally pure, they are included here for simplicity's sake.")
charPortOutFlowType = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("xonXoff", 2), ("hardware", 3), ("ctsRts", 4), ("dsrDtr", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortOutFlowType.setStatus('mandatory')
if mibBuilder.loadTexts: charPortOutFlowType.setDescription("The port's type of output flow control. 'none' indicates no flow control at this level or below. 'xonXoff' indicates software flow control by recognizing XON and XOFF characters. 'hardware' indicates flow control delegated to the lower level, for example a parallel port. 'ctsRts' and 'dsrDtr' are specific to RS-232-like ports. Although not architecturally pure, they are included here for simplicy's sake.")
charPortInFlowState = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("stop", 3), ("go", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortInFlowState.setStatus('mandatory')
if mibBuilder.loadTexts: charPortInFlowState.setDescription("The current operational state of input flow control on the port. 'none' indicates not applicable. 'unknown' indicates this level does not know. 'stop' indicates flow not allowed. 'go' indicates flow allowed.")
charPortOutFlowState = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("stop", 3), ("go", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortOutFlowState.setStatus('mandatory')
if mibBuilder.loadTexts: charPortOutFlowState.setDescription("The current operational state of output flow control on the port. 'none' indicates not applicable. 'unknown' indicates this level does not know. 'stop' indicates flow not allowed. 'go' indicates flow allowed.")
charPortInCharacters = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortInCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: charPortInCharacters.setDescription("Total number of characters detected as input from the port since system re-initialization and while the port operational state was 'up', 'active', or 'maintenance', including, for example, framing, flow control (i.e. XON and XOFF), each occurrence of a BREAK condition, locally-processed input, and input sent to all sessions.")
charPortOutCharacters = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortOutCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: charPortOutCharacters.setDescription("Total number of characters detected as output to the port since system re-initialization and while the port operational state was 'up', 'active', or 'maintenance', including, for example, framing, flow control (i.e. XON and XOFF), each occurrence of a BREAK condition, locally-created output, and output received from all sessions.")
charPortAdminOrigin = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dynamic", 1), ("network", 2), ("local", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortAdminOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: charPortAdminOrigin.setDescription("The administratively allowed origin for establishing session on the port. 'dynamic' allows 'network' or 'local' session establishment. 'none' disallows session establishment.")
charPortSessionMaximum = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charPortSessionMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: charPortSessionMaximum.setDescription('The maximum number of concurrent sessions allowed on the port. A value of -1 indicates no maximum. Setting the maximum to less than the current number of sessions has unspecified results.')
charPortSessionNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortSessionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: charPortSessionNumber.setDescription('The number of open sessions on the port that are in the connecting, connected, or disconnecting state.')
charPortSessionIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charPortSessionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: charPortSessionIndex.setDescription("The value of charSessIndex for the port's first or only active session. If the port has no active session, the agent returns the value zero.")
charSessTable = MibTable((1, 3, 6, 1, 2, 1, 19, 3), )
if mibBuilder.loadTexts: charSessTable.setStatus('mandatory')
if mibBuilder.loadTexts: charSessTable.setDescription('A list of port session entries.')
charSessEntry = MibTableRow((1, 3, 6, 1, 2, 1, 19, 3, 1), ).setIndexNames((0, "MRVINREACH", "charSessPortIndex"), (0, "MRVINREACH", "charSessIndex"))
if mibBuilder.loadTexts: charSessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: charSessEntry.setDescription('Status and parameter values for a character port session.')
charSessPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: charSessPortIndex.setDescription('The value of charPortIndex for the port to which this session belongs.')
charSessIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: charSessIndex.setDescription('The session index in the context of the port, a non-zero positive integer. Session indexes within a port need not be sequential. Session indexes may be reused for different ports. For example, port 1 and port 3 may both have a session 2 at the same time. Session indexes may have any valid integer value, with any meaning convenient to the agent implementation.')
charSessKill = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charSessKill.setStatus('mandatory')
if mibBuilder.loadTexts: charSessKill.setDescription("A control to terminate the session. In response to a get-request or get-next-request, the agent always returns 'ready' as the value. Setting the value to 'execute' causes termination.")
charSessState = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("connecting", 1), ("connected", 2), ("disconnecting", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessState.setStatus('mandatory')
if mibBuilder.loadTexts: charSessState.setDescription("The current operational state of the session, disregarding flow control. 'connected' indicates that character data could flow on the network side of session. 'connecting' indicates moving from nonexistent toward 'connected'. 'disconnecting' indicates moving from 'connected' or 'connecting' to nonexistent.")
charSessProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 3, 1, 5), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: charSessProtocol.setDescription('The network protocol over which the session is running. Other OBJECT IDENTIFIER values may be defined elsewhere, in association with specific protocols. However, this document assigns those of known interest as of this writing.')
wellKnownProtocols = MibIdentifier((1, 3, 6, 1, 2, 1, 19, 4))
protocolOther = MibIdentifier((1, 3, 6, 1, 2, 1, 19, 4, 1))
protocolTelnet = MibIdentifier((1, 3, 6, 1, 2, 1, 19, 4, 2))
protocolRlogin = MibIdentifier((1, 3, 6, 1, 2, 1, 19, 4, 3))
protocolLat = MibIdentifier((1, 3, 6, 1, 2, 1, 19, 4, 4))
protocolX29 = MibIdentifier((1, 3, 6, 1, 2, 1, 19, 4, 5))
protocolVtp = MibIdentifier((1, 3, 6, 1, 2, 1, 19, 4, 6))
charSessOperOrigin = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("network", 2), ("local", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessOperOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: charSessOperOrigin.setDescription("The session's source of establishment.")
charSessInCharacters = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessInCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: charSessInCharacters.setDescription("This session's subset of charPortInCharacters.")
charSessOutCharacters = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessOutCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: charSessOutCharacters.setDescription("This session's subset of charPortOutCharacters.")
charSessConnectionId = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 3, 1, 9), InstancePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessConnectionId.setStatus('mandatory')
if mibBuilder.loadTexts: charSessConnectionId.setDescription('A reference to additional local MIB information. This should be the highest available related MIB, corresponding to charSessProtocol, such as Telnet. For example, the value for a TCP connection (in the absence of a Telnet MIB) is the object identifier of tcpConnState. If an agent is not configured to have such values, the agent returns the object identifier: nullConnectionId OBJECT IDENTIFIER ::= { 0 0 } ')
charSessStartTime = MibTableColumn((1, 3, 6, 1, 2, 1, 19, 3, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: charSessStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: charSessStartTime.setDescription('The value of sysUpTime in MIB-2 when the session entered connecting state.')
rs232 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 33))
rs232Number = MibScalar((1, 3, 6, 1, 2, 1, 10, 33, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232Number.setStatus('mandatory')
if mibBuilder.loadTexts: rs232Number.setDescription('The number of ports (regardless of their current state) in the RS-232-like general port table.')
rs232PortTable = MibTable((1, 3, 6, 1, 2, 1, 10, 33, 2), )
if mibBuilder.loadTexts: rs232PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: rs232PortTable.setDescription('A list of port entries. The number of entries is given by the value of rs232Number.')
rs232PortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 33, 2, 1), ).setIndexNames((0, "MRVINREACH", "rs232PortIndex"))
if mibBuilder.loadTexts: rs232PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rs232PortEntry.setDescription('Status and parameter values for a port.')
rs232PortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232PortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rs232PortIndex.setDescription('A unique value for each port. Its value ranges between 1 and the value of rs232Number. By convention and if possible, hardware port numbers map directly to external connectors. The value for each port must remain constant at least from one re-initialization of the network management agent to the next.')
rs232PortType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("rs232", 2), ("rs422", 3), ("rs423", 4), ("v35", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232PortType.setStatus('mandatory')
if mibBuilder.loadTexts: rs232PortType.setDescription("The port's hardware type.")
rs232PortInSigNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232PortInSigNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rs232PortInSigNumber.setDescription('The number of input signals for the port in the input signal table (rs232PortInSigTable). The table contains entries only for those signals the software can detect.')
rs232PortOutSigNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232PortOutSigNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rs232PortOutSigNumber.setDescription('The number of output signals for the port in the output signal table (rs232PortOutSigTable). The table contains entries only for those signals the software can assert.')
rs232PortInSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232PortInSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: rs232PortInSpeed.setDescription("The port's input speed in bits per second.")
rs232PortOutSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232PortOutSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: rs232PortOutSpeed.setDescription("The port's output speed in bits per second.")
rs232AsyncPortTable = MibTable((1, 3, 6, 1, 2, 1, 10, 33, 3), )
if mibBuilder.loadTexts: rs232AsyncPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortTable.setDescription('A list of asynchronous port entries. The maximum entry number is given by the value of rs232Number. Entries need not exist for synchronous ports.')
rs232AsyncPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 33, 3, 1), ).setIndexNames((0, "MRVINREACH", "rs232AsyncPortIndex"))
if mibBuilder.loadTexts: rs232AsyncPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortEntry.setDescription('Status and parameter values for an asynchronous port.')
rs232AsyncPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232AsyncPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortIndex.setDescription('A unique value for each port. Its value is the same as rs232PortIndex for the port.')
rs232AsyncPortBits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232AsyncPortBits.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortBits.setDescription("The port's number of bits in a character.")
rs232AsyncPortStopBits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("one-and-half", 3), ("dynamic", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232AsyncPortStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortStopBits.setDescription("The port's number of stop bits.")
rs232AsyncPortParity = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232AsyncPortParity.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortParity.setDescription("The port's sense of a character parity bit.")
rs232AsyncPortAutobaud = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232AsyncPortAutobaud.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortAutobaud.setDescription("A control for the port's ability to automatically sense input speed. When rs232PortAutoBaud is 'enabled', a port may autobaud to values different from the set values for speed, parity, and character size. As a result a network management system may temporarily observe values different from what was previously set.")
rs232AsyncPortParityErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232AsyncPortParityErrs.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortParityErrs.setDescription("Total number of characters with a parity error, input from the port since system re-initialization and while the port state was 'up' or 'test'.")
rs232AsyncPortFramingErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232AsyncPortFramingErrs.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortFramingErrs.setDescription("Total number of characters with a framing error, input from the port since system re-initialization and while the port state was 'up' or 'test'.")
rs232AsyncPortOverrunErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232AsyncPortOverrunErrs.setStatus('mandatory')
if mibBuilder.loadTexts: rs232AsyncPortOverrunErrs.setDescription("Total number of characters with an overrun error, input from the port since system re-initialization and while the port state was 'up' or 'test'.")
rs232SyncPortTable = MibTable((1, 3, 6, 1, 2, 1, 10, 33, 4), )
if mibBuilder.loadTexts: rs232SyncPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: rs232SyncPortTable.setDescription('A list of synchronous port entries. The maximum entry number is given by the value of rs232Number. Entries need not exist for asynchronous ports.')
rs232SyncPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 33, 4, 1), ).setIndexNames((0, "MRVINREACH", "rs232SyncPortIndex"))
if mibBuilder.loadTexts: rs232SyncPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rs232SyncPortEntry.setDescription('Status and parameter values for a synchronous port.')
rs232SyncPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rs232SyncPortIndex.setDescription('A unique value for each port. Its value is the same as rs232PortIndex for the port.')
rs232SyncPortClockSource = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("split", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rs232SyncPortClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: rs232SyncPortClockSource.setDescription("Source of the port's bit rate clock. 'split' means the tranmit clock is internal and the receive clock is external.")
rs232SyncPortFrameCheckErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortFrameCheckErrs.setStatus('mandatory')
if mibBuilder.loadTexts: rs232SyncPortFrameCheckErrs.setDescription("Total number of frames with an invalid frame check sequence, input from the port since system re-initialization and while the port state was 'up' or 'test'.")
rs232SyncPortTransmitUnderrunErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortTransmitUnderrunErrs.setStatus('mandatory')
if mibBuilder.loadTexts: rs232SyncPortTransmitUnderrunErrs.setDescription("Total number of frames that failed to be transmitted on the port since system re-initialization and while the port state was 'up' or 'test' because data was not available to the transmitter in time.")
rs232SyncPortReceiveOverrunErrs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortReceiveOverrunErrs.setStatus('mandatory')
if mibBuilder.loadTexts: rs232SyncPortReceiveOverrunErrs.setDescription("Total number of frames that failed to be received on the port since system re-initialization and while the port state was 'up' or 'test' because the receiver did not accept the data in time.")
rs232SyncPortInterruptedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortInterruptedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: rs232SyncPortInterruptedFrames.setDescription("Total number of frames that failed to be received or transmitted on the port due to loss of modem signals since system re-initialization and while the port state was 'up' or 'test'.")
rs232SyncPortAbortedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232SyncPortAbortedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: rs232SyncPortAbortedFrames.setDescription("Number of frames aborted on the port due to receiving an abort sequence since system re-initialization and while the port state was 'up' or 'test'.")
rs232InSigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 33, 5), )
if mibBuilder.loadTexts: rs232InSigTable.setStatus('mandatory')
if mibBuilder.loadTexts: rs232InSigTable.setDescription('A list of port input control signal entries.')
rs232InSigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 33, 5, 1), ).setIndexNames((0, "MRVINREACH", "rs232InSigPortIndex"), (0, "MRVINREACH", "rs232InSigName"))
if mibBuilder.loadTexts: rs232InSigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rs232InSigEntry.setDescription('Input control signal status for a hardware port.')
rs232InSigPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232InSigPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rs232InSigPortIndex.setDescription('The value of rs232PortIndex for the port to which this entry belongs.')
rs232InSigName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("rts", 1), ("cts", 2), ("dsr", 3), ("dtr", 4), ("ri", 5), ("dcd", 6), ("sq", 7), ("srs", 8), ("srts", 9), ("scts", 10), ("sdcd", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232InSigName.setReference('EIA Standard RS-232-C, August 1969.')
if mibBuilder.loadTexts: rs232InSigName.setStatus('mandatory')
if mibBuilder.loadTexts: rs232InSigName.setDescription('Identification of a hardware signal, as follows: rts Request to Send cts Clear to Send dsr Data Set Ready dtr Data Terminal Ready ri Ring Indicator dcd Received Line Signal Detector sq Signal Quality Detector srs Data Signaling Rate Selector srts Secondary Request to Send scts Secondary Clear to Send sdcd Secondary Received Line Signal Detector ')
rs232InSigState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232InSigState.setStatus('mandatory')
if mibBuilder.loadTexts: rs232InSigState.setDescription('The current signal state.')
rs232InSigChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232InSigChanges.setStatus('mandatory')
if mibBuilder.loadTexts: rs232InSigChanges.setDescription("The number of times the signal has changed from 'on' to 'off' or from 'off' to 'on'.")
rs232OutSigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 33, 6), )
if mibBuilder.loadTexts: rs232OutSigTable.setStatus('mandatory')
if mibBuilder.loadTexts: rs232OutSigTable.setDescription('A list of port output control signal entries.')
rs232OutSigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 33, 6, 1), ).setIndexNames((0, "MRVINREACH", "rs232OutSigPortIndex"), (0, "MRVINREACH", "rs232OutSigName"))
if mibBuilder.loadTexts: rs232OutSigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rs232OutSigEntry.setDescription('Output control signal status for a hardware port.')
rs232OutSigPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232OutSigPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rs232OutSigPortIndex.setDescription('The value of rs232PortIndex for the port to which this entry belongs.')
rs232OutSigName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("rts", 1), ("cts", 2), ("dsr", 3), ("dtr", 4), ("ri", 5), ("dcd", 6), ("sq", 7), ("srs", 8), ("srts", 9), ("scts", 10), ("sdcd", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232OutSigName.setReference('EIA Standard RS-232-C, August 1969.')
if mibBuilder.loadTexts: rs232OutSigName.setStatus('mandatory')
if mibBuilder.loadTexts: rs232OutSigName.setDescription('Identification of a hardware signal, as follows: rts Request to Send cts Clear to Send dsr Data Set Ready dtr Data Terminal Ready ri Ring Indicator dcd Received Line Signal Detector sq Signal Quality Detector srs Data Signaling Rate Selector srts Secondary Request to Send scts Secondary Clear to Send sdcd Secondary Received Line Signal Detector ')
rs232OutSigState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232OutSigState.setStatus('mandatory')
if mibBuilder.loadTexts: rs232OutSigState.setDescription('The current signal state.')
rs232OutSigChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 33, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rs232OutSigChanges.setStatus('mandatory')
if mibBuilder.loadTexts: rs232OutSigChanges.setDescription("The number of times the signal has changed from 'on' to 'off' or from 'off' to 'on'.")
phiv = MibIdentifier((1, 3, 6, 1, 2, 1, 18))
class PhivAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class PhivCounter(Integer32):
    pass

phivSystem = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 1))
phivManagement = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 2))
session = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 3))
end = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 4))
routing = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 5))
circuit = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 6))
ddcmp = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 7))
control = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 8))
ethernet = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 9))
counters = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 10))
adjacency = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 11))
line = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 12))
nonBroadcastLine = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 14))
area = MibIdentifier((1, 3, 6, 1, 2, 1, 18, 15))
phivCircuitParametersTable = MibTable((1, 3, 6, 1, 2, 1, 18, 6, 1), )
if mibBuilder.loadTexts: phivCircuitParametersTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitParametersTable.setDescription('Information about the parameters associated with all circuits currently known.')
phivCircuitParametersEntry = MibTableRow((1, 3, 6, 1, 2, 1, 18, 6, 1, 1), ).setIndexNames((0, "MRVINREACH", "phivCircuitIndex"))
if mibBuilder.loadTexts: phivCircuitParametersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitParametersEntry.setDescription('Parameters information about all circuits currently known.')
phivCircuitIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitIndex.setDescription('A unique index value for each known circuit.')
phivCircuitLineIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitLineIndex.setDescription('The line on which this circuit is active. This is the same as the IfIndex.')
phivCircuitCommonState = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("service", 3), ("cleared", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitCommonState.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCommonState.setDescription("This value represents the circuit's Network Management operational state. NOTE: These values are incremented by one compared to the standard DECnet values in order to maintain compliance with RFC 1155.")
phivCircuitCommonSubState = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("starting", 1), ("reflecting", 2), ("looping", 3), ("loading", 4), ("dumping", 5), ("triggering", 6), ("autoservice", 7), ("autoloading", 8), ("autodumping", 9), ("autotriggering", 10), ("synchronizing", 11), ("failed", 12), ("running", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCommonSubState.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCommonSubState.setDescription("This value represents the circuit's Network Management operational and service substate. NOTE: These values are incremented by one compared to the standard DECnet values in order to maintain compliance with RFC 1155.")
phivCircuitCommonName = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCommonName.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCommonName.setDescription('The name of the circuit entry in the table, for example, SVA-0 or in a level 2 router ASYNC-8 or ETHER-1).')
phivCircuitExecRecallTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitExecRecallTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExecRecallTimer.setDescription('This parameter represents the minimum number of seconds to wait before restarting the circuit. A value of 0 indicates not timer is running.')
phivCircuitCommonType = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15))).clone(namedValues=NamedValues(("ddcmp-point", 1), ("ddcmp-control", 2), ("ddcmp-tributary", 3), ("x25", 4), ("ddcmp-dmc", 5), ("ethernet", 6), ("ci", 7), ("qp2-dte20", 8), ("bisync", 9), ("other", 14), ("fddi", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCommonType.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCommonType.setDescription('Represents the type of the circuit. For X.25 circuits, the value must be set to X25. For DDCMP and Ethernet circuits it is read only and is the same value as the protocol of the associated line. NOTE: Values 1 - 5 are incremented by one compared to the standard DECnet values in order to maintain compliance with RFC 1155.')
phivCircuitService = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitService.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitService.setDescription('This value indicates whether or not Network Management allows service operations on a circuit. The values for service-control are as follows: ENABLED SERVICE state and/or service functions are allowed. DISABLED SERVICE state and/or service functions are not allowed. NOTE: These values are incremented by one compared to the standard DECnet values in order to maintain compliance with RFC 1155.')
phivCircuitExecCost = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitExecCost.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExecCost.setDescription('This value represents the routing cost of the circuit. Routing sends messages along the path between two nodes having the smallest cost.')
phivCircuitExecHelloTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitExecHelloTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExecHelloTimer.setDescription('This value determines the frequency of Routing Hello messages sent to the adjacent node on the circuit.')
phivCircuitCountTable = MibTable((1, 3, 6, 1, 2, 1, 18, 6, 2), )
if mibBuilder.loadTexts: phivCircuitCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountTable.setDescription('Information about the counters associated with all circuits currently known.')
phivCircuitCountEntry = MibTableRow((1, 3, 6, 1, 2, 1, 18, 6, 2, 1), ).setIndexNames((0, "MRVINREACH", "phivCircuitIndex"))
if mibBuilder.loadTexts: phivCircuitCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountEntry.setDescription('Counter information about all circuits currently known')
phivCircuitCountSecLastZeroed = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 1), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountSecLastZeroed.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountSecLastZeroed.setDescription('Number of seconds since the circuit counters for this circuit were last zeroed.')
phivCircuitCountTermPacketsRecd = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 2), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountTermPacketsRecd.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountTermPacketsRecd.setDescription('Number of terminating packets received on this circuit.')
phivCircuitCountOriginPackSent = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 3), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountOriginPackSent.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountOriginPackSent.setDescription('Number of originating packets sent on this circuit.')
phivCircuitCountTermCongLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 4), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountTermCongLoss.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountTermCongLoss.setDescription('Number of terminating congestion losses on this circuit.')
phivCircuitCountCorruptLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 5), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountCorruptLoss.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountCorruptLoss.setDescription('Number of corruption losses on this circuit.')
phivCircuitCountTransitPksRecd = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 6), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountTransitPksRecd.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountTransitPksRecd.setDescription('Number of Transit packets received on this circuit.')
phivCircuitCountTransitPkSent = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 7), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountTransitPkSent.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountTransitPkSent.setDescription('Number of transit packets sent on this circuit.')
phivCircuitCountTransitCongestLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 8), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountTransitCongestLoss.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountTransitCongestLoss.setDescription('Number of transit congestion losses on this circuit.')
phivCircuitCountCircuitDown = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 9), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountCircuitDown.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountCircuitDown.setDescription('Number of circuit downs on this circuit.')
phivCircuitCountInitFailure = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 10), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountInitFailure.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountInitFailure.setDescription('Number of Initialization failures on this circuit.')
phivCircuitCountAdjDown = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 11), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountAdjDown.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountAdjDown.setDescription('This counter indicates the number of adjacency losses that result from any of the following: Node listener timeout Invalid data received at node listener Unexpected control (initialization or verification) message received Routing message received with a checksum error Node identification from a routing message or a Hello message that is not the one expected Hello message received indicating that connectivity became one-way Adjacency idled.')
phivCircuitCountPeakAdj = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 12), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountPeakAdj.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountPeakAdj.setDescription('This counter indicates the maximum number of nodes that are up on the circuit.')
phivCircuitCountBytesRecd = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 13), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountBytesRecd.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountBytesRecd.setDescription('Number of bytes received on this circuit.')
phivCircuitCountBytesSent = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 14), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountBytesSent.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountBytesSent.setDescription('Number of bytes sent on this circuit.')
phivCircuitCountDataBlocksRecd = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 15), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountDataBlocksRecd.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountDataBlocksRecd.setDescription('Number of data blocks received on this circuit.')
phivCircuitCountDataBlocksSent = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 16), PhivCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountDataBlocksSent.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountDataBlocksSent.setDescription('Number of data blocks sent on this circuit.')
phivCircuitCountUsrBuffUnav = MibTableColumn((1, 3, 6, 1, 2, 1, 18, 6, 2, 1, 17), PhivCounter().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitCountUsrBuffUnav.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountUsrBuffUnav.setDescription('Number of user buffer unavailable errors.')
phivCircuitOrigQueueLimit = MibScalar((1, 3, 6, 1, 2, 1, 18, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitOrigQueueLimit.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitOrigQueueLimit.setDescription('This parameter indicates the maximum number of originating packets that may be outstanding on this circuit. This does not include route-thru traffic.')
phivCircuitCountZeroCount = MibScalar((1, 3, 6, 1, 2, 1, 18, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitCountZeroCount.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitCountZeroCount.setDescription('When this value is set to 2, all of the counters in the Circuit Counter Table are set to zero.')
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(Integer32):
    pass

dot1dBridge = MibIdentifier((1, 3, 6, 1, 2, 1, 17))
dot1dBase = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 1))
dot1dStp = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 2))
dot1dSr = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 3))
dot1dTp = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 4))
dot1dStatic = MibIdentifier((1, 3, 6, 1, 2, 1, 17, 5))
dot1dBaseBridgeAddress = MibScalar((1, 3, 6, 1, 2, 1, 17, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBaseBridgeAddress.setReference('IEEE 802.1D-1990: Sections 6.4.1.1.3 and 3.12.5')
if mibBuilder.loadTexts: dot1dBaseBridgeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dBaseBridgeAddress.setDescription('The MAC address used by this bridge when it must be referred to in a unique fashion. It is recommended that this be the numerically smallest MAC address of all ports that belong to this bridge. However it is only required to be unique. When concatenated with dot1dStpPriority a unique BridgeIdentifier is formed which is used in the Spanning Tree Protocol.')
dot1dBaseNumPorts = MibScalar((1, 3, 6, 1, 2, 1, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBaseNumPorts.setReference('IEEE 802.1D-1990: Section 6.4.1.1.3')
if mibBuilder.loadTexts: dot1dBaseNumPorts.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dBaseNumPorts.setDescription('The number of ports controlled by this bridging entity.')
dot1dBaseType = MibScalar((1, 3, 6, 1, 2, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparent-only", 2), ("sourceroute-only", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBaseType.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dBaseType.setDescription('Indicates what type of bridging this bridge can perform. If a bridge is actually performing a certain type of bridging this will be indicated by entries in the port table for the given type.')
dot1dBasePortTable = MibTable((1, 3, 6, 1, 2, 1, 17, 1, 4), )
if mibBuilder.loadTexts: dot1dBasePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dBasePortTable.setDescription('A table that contains generic information about every port that is associated with this bridge. Transparent, source-route, and srt ports are included.')
dot1dBasePortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 1, 4, 1), ).setIndexNames((0, "MRVINREACH", "dot1dBasePort"))
if mibBuilder.loadTexts: dot1dBasePortEntry.setReference('IEEE 802.1D-1990: Section 6.4.2, 6.6.1')
if mibBuilder.loadTexts: dot1dBasePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dBasePortEntry.setDescription('A list of information for each port of the bridge.')
dot1dBasePort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBasePort.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dBasePort.setDescription('The port number of the port for which this entry contains bridge management information.')
dot1dBasePortIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBasePortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dBasePortIfIndex.setDescription('The value of the instance of the ifIndex object, defined in MIB-II, for the interface corresponding to this port.')
dot1dBasePortCircuit = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 1, 4, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBasePortCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dBasePortCircuit.setDescription('For a port which (potentially) has the same value of dot1dBasePortIfIndex as another port on the same bridge, this object contains the name of an object instance unique to this port. For example, in the case where multiple ports correspond one- to-one with multiple X.25 virtual circuits, this value might identify an (e.g., the first) object instance associated with the X.25 virtual circuit corresponding to this port. For a port which has a unique value of dot1dBasePortIfIndex, this object can have the value { 0 0 }.')
dot1dBasePortDelayExceededDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBasePortDelayExceededDiscards.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: dot1dBasePortDelayExceededDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dBasePortDelayExceededDiscards.setDescription('The number of frames discarded by this port due to excessive transit delay through the bridge. It is incremented by both transparent and source route bridges.')
dot1dBasePortMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dBasePortMtuExceededDiscards.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: dot1dBasePortMtuExceededDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dBasePortMtuExceededDiscards.setDescription('The number of frames discarded by this port due to an excessive size. It is incremented by both transparent and source route bridges.')
dot1dStpProtocolSpecification = MibScalar((1, 3, 6, 1, 2, 1, 17, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpProtocolSpecification.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpProtocolSpecification.setDescription("An indication of what version of the Spanning Tree Protocol is being run. The value 'decLb100(2)' indicates the DEC LANbridge 100 Spanning Tree protocol. IEEE 802.1d implementations will return 'ieee8021d(3)'. If future versions of the IEEE Spanning Tree Protocol are released that are incompatible with the current version a new value will be defined.")
dot1dStpPriority = MibScalar((1, 3, 6, 1, 2, 1, 17, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpPriority.setReference('IEEE 802.1D-1990: Section 4.5.3.7')
if mibBuilder.loadTexts: dot1dStpPriority.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpPriority.setDescription('The value of the write-able portion of the Bridge ID, i.e., the first two octets of the (8 octet long) Bridge ID. The other (last) 6 octets of the Bridge ID are given by the value of dot1dBaseBridgeAddress.')
dot1dStpTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 2, 1, 17, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpTimeSinceTopologyChange.setReference('IEEE 802.1D-1990: Section 6.8.1.1.3')
if mibBuilder.loadTexts: dot1dStpTimeSinceTopologyChange.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpTimeSinceTopologyChange.setDescription('The time (in hundredths of a second) since the last time a topology change was detected by the bridge entity.')
dot1dStpTopChanges = MibScalar((1, 3, 6, 1, 2, 1, 17, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpTopChanges.setReference('IEEE 802.1D-1990: Section 6.8.1.1.3')
if mibBuilder.loadTexts: dot1dStpTopChanges.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpTopChanges.setDescription('The total number of topology changes detected by this bridge since the management entity was last reset or initialized.')
dot1dStpDesignatedRoot = MibScalar((1, 3, 6, 1, 2, 1, 17, 2, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpDesignatedRoot.setReference('IEEE 802.1D-1990: Section 4.5.3.1')
if mibBuilder.loadTexts: dot1dStpDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpDesignatedRoot.setDescription('The bridge identifier of the root of the spanning tree as determined by the Spanning Tree Protocol as executed by this node. This value is used as the Root Identifier parameter in all Configuration Bridge PDUs originated by this node.')
dot1dStpRootCost = MibScalar((1, 3, 6, 1, 2, 1, 17, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpRootCost.setReference('IEEE 802.1D-1990: Section 4.5.3.2')
if mibBuilder.loadTexts: dot1dStpRootCost.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpRootCost.setDescription('The cost of the path to the root as seen from this bridge.')
dot1dStpRootPort = MibScalar((1, 3, 6, 1, 2, 1, 17, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpRootPort.setReference('IEEE 802.1D-1990: Section 4.5.3.3')
if mibBuilder.loadTexts: dot1dStpRootPort.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpRootPort.setDescription('The port number of the port which offers the lowest cost path from this bridge to the root bridge.')
dot1dStpMaxAge = MibScalar((1, 3, 6, 1, 2, 1, 17, 2, 8), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpMaxAge.setReference('IEEE 802.1D-1990: Section 4.5.3.4')
if mibBuilder.loadTexts: dot1dStpMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpMaxAge.setDescription('The maximum age of Spanning Tree Protocol information learned from the network on any port before it is discarded, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
dot1dStpHelloTime = MibScalar((1, 3, 6, 1, 2, 1, 17, 2, 9), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpHelloTime.setReference('IEEE 802.1D-1990: Section 4.5.3.5')
if mibBuilder.loadTexts: dot1dStpHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpHelloTime.setDescription('The amount of time between the transmission of Configuration bridge PDUs by this node on any port when it is the root of the spanning tree or trying to become so, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
dot1dStpHoldTime = MibScalar((1, 3, 6, 1, 2, 1, 17, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpHoldTime.setReference('IEEE 802.1D-1990: Section 4.5.3.14')
if mibBuilder.loadTexts: dot1dStpHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpHoldTime.setDescription('This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node, in units of hundredths of a second.')
dot1dStpForwardDelay = MibScalar((1, 3, 6, 1, 2, 1, 17, 2, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpForwardDelay.setReference('IEEE 802.1D-1990: Section 4.5.3.6')
if mibBuilder.loadTexts: dot1dStpForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpForwardDelay.setDescription('This time value, measured in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the Forwarding state. The value determines how long the port stays in each of the Listening and Learning states, which precede the Forwarding state. This value is also used, when a topology change has been detected and is underway, to age all dynamic entries in the Forwarding Database. [Note that this value is the one that this bridge is currently using, in contrast to dot1dStpBridgeForwardDelay which is the value that this bridge and all others would start using if/when this bridge were to become the root.]')
dot1dStpBridgeMaxAge = MibScalar((1, 3, 6, 1, 2, 1, 17, 2, 12), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpBridgeMaxAge.setReference('IEEE 802.1D-1990: Section 4.5.3.8')
if mibBuilder.loadTexts: dot1dStpBridgeMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpBridgeMaxAge.setDescription('The value that all bridges use for MaxAge when this bridge is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of dot1dStpBridgeHelloTime. The granularity of this timer is specified by 802.1D-1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
dot1dStpBridgeHelloTime = MibScalar((1, 3, 6, 1, 2, 1, 17, 2, 13), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpBridgeHelloTime.setReference('IEEE 802.1D-1990: Section 4.5.3.9')
if mibBuilder.loadTexts: dot1dStpBridgeHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpBridgeHelloTime.setDescription('The value that all bridges use for HelloTime when this bridge is acting as the root. The granularity of this timer is specified by 802.1D- 1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
dot1dStpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 2, 1, 17, 2, 14), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpBridgeForwardDelay.setReference('IEEE 802.1D-1990: Section 4.5.3.10')
if mibBuilder.loadTexts: dot1dStpBridgeForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpBridgeForwardDelay.setDescription('The value that all bridges use for ForwardDelay when this bridge is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of dot1dStpBridgeMaxAge. The granularity of this timer is specified by 802.1D-1990 to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
dot1dStpPortTable = MibTable((1, 3, 6, 1, 2, 1, 17, 2, 15), )
if mibBuilder.loadTexts: dot1dStpPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpPortTable.setDescription('A table that contains port-specific information for the Spanning Tree Protocol.')
dot1dStpPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 2, 15, 1), ).setIndexNames((0, "MRVINREACH", "dot1dStpPort"))
if mibBuilder.loadTexts: dot1dStpPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpPortEntry.setDescription('A list of information maintained by every port about the Spanning Tree Protocol state for that port.')
dot1dStpPort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpPort.setReference('IEEE 802.1D-1990: Section 6.8.2.1.2')
if mibBuilder.loadTexts: dot1dStpPort.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpPort.setDescription('The port number of the port for which this entry contains Spanning Tree Protocol management information.')
dot1dStpPortPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpPortPriority.setReference('IEEE 802.1D-1990: Section 4.5.5.1')
if mibBuilder.loadTexts: dot1dStpPortPriority.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpPortPriority.setDescription('The value of the priority field which is contained in the first (in network byte order) octet of the (2 octet long) Port ID. The other octet of the Port ID is given by the value of dot1dStpPort.')
dot1dStpPortState = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpPortState.setReference('IEEE 802.1D-1990: Section 4.5.5.2')
if mibBuilder.loadTexts: dot1dStpPortState.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpPortState.setDescription("The port's current state as defined by application of the Spanning Tree Protocol. This state controls what action a port takes on reception of a frame. If the bridge has detected a port that is malfunctioning it will place that port into the broken(6) state. For ports which are disabled (see dot1dStpPortEnable), this object will have a value of disabled(1).")
dot1dStpPortEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpPortEnable.setReference('IEEE 802.1D-1990: Section 4.5.5.2')
if mibBuilder.loadTexts: dot1dStpPortEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpPortEnable.setDescription('The enabled/disabled status of the port.')
dot1dStpPortPathCost = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStpPortPathCost.setReference('IEEE 802.1D-1990: Section 4.5.5.3')
if mibBuilder.loadTexts: dot1dStpPortPathCost.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the spanning tree root which include this port. 802.1D-1990 recommends that the default value of this parameter be in inverse proportion to the speed of the attached LAN.')
dot1dStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpPortDesignatedRoot.setReference('IEEE 802.1D-1990: Section 4.5.5.4')
if mibBuilder.loadTexts: dot1dStpPortDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpPortDesignatedRoot.setDescription('The unique Bridge Identifier of the Bridge recorded as the Root in the Configuration BPDUs transmitted by the Designated Bridge for the segment to which the port is attached.')
dot1dStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpPortDesignatedCost.setReference('IEEE 802.1D-1990: Section 4.5.5.5')
if mibBuilder.loadTexts: dot1dStpPortDesignatedCost.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpPortDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port. This value is compared to the Root Path Cost field in received bridge PDUs.')
dot1dStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpPortDesignatedBridge.setReference('IEEE 802.1D-1990: Section 4.5.5.6')
if mibBuilder.loadTexts: dot1dStpPortDesignatedBridge.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpPortDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this port considers to be the Designated Bridge for this port's segment.")
dot1dStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpPortDesignatedPort.setReference('IEEE 802.1D-1990: Section 4.5.5.7')
if mibBuilder.loadTexts: dot1dStpPortDesignatedPort.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpPortDesignatedPort.setDescription("The Port Identifier of the port on the Designated Bridge for this port's segment.")
dot1dStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 2, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dStpPortForwardTransitions.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStpPortForwardTransitions.setDescription('The number of times this port has transitioned from the Learning state to the Forwarding state.')
dot1dTpLearnedEntryDiscards = MibScalar((1, 3, 6, 1, 2, 1, 17, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpLearnedEntryDiscards.setReference('IEEE 802.1D-1990: Section 6.7.1.1.3')
if mibBuilder.loadTexts: dot1dTpLearnedEntryDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dTpLearnedEntryDiscards.setDescription('The total number of Forwarding Database entries, which have been or would have been learnt, but have been discarded due to a lack of space to store them in the Forwarding Database. If this counter is increasing, it indicates that the Forwarding Database is regularly becoming full (a condition which has unpleasant performance effects on the subnetwork). If this counter has a significant value but is not presently increasing, it indicates that the problem has been occurring but is not persistent.')
dot1dTpAgingTime = MibScalar((1, 3, 6, 1, 2, 1, 17, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dTpAgingTime.setReference('IEEE 802.1D-1990: Section 6.7.1.1.3')
if mibBuilder.loadTexts: dot1dTpAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dTpAgingTime.setDescription('The timeout period in seconds for aging out dynamically learned forwarding information. 802.1D-1990 recommends a default of 300 seconds.')
dot1dTpFdbTable = MibTable((1, 3, 6, 1, 2, 1, 17, 4, 3), )
if mibBuilder.loadTexts: dot1dTpFdbTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dTpFdbTable.setDescription('A table that contains information about unicast entries for which the bridge has forwarding and/or filtering information. This information is used by the transparent bridging function in determining how to propagate a received frame.')
dot1dTpFdbEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 4, 3, 1), ).setIndexNames((0, "MRVINREACH", "dot1dTpFdbAddress"))
if mibBuilder.loadTexts: dot1dTpFdbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dTpFdbEntry.setDescription('Information about a specific unicast MAC address for which the bridge has some forwarding and/or filtering information.')
dot1dTpFdbAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpFdbAddress.setReference('IEEE 802.1D-1990: Section 3.9.1, 3.9.2')
if mibBuilder.loadTexts: dot1dTpFdbAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dTpFdbAddress.setDescription('A unicast MAC address for which the bridge has forwarding and/or filtering information.')
dot1dTpFdbPort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpFdbPort.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dTpFdbPort.setDescription("Either the value '0', or the port number of the port on which a frame having a source address equal to the value of the corresponding instance of dot1dTpFdbAddress has been seen. A value of '0' indicates that the port number has not been learned but that the bridge does have some forwarding/filtering information about this address (e.g. in the dot1dStaticTable). Implementors are encouraged to assign the port value to this object whenever it is learned even for addresses for which the corresponding value of dot1dTpFdbStatus is not learned(3).")
dot1dTpFdbStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpFdbStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dTpFdbStatus.setDescription("The status of this entry. The meanings of the values are: other(1) : none of the following. This would include the case where some other MIB object (not the corresponding instance of dot1dTpFdbPort, nor an entry in the dot1dStaticTable) is being used to determine if and how frames addressed to the value of the corresponding instance of dot1dTpFdbAddress are being forwarded. invalid(2) : this entry is not longer valid (e.g., it was learned but has since aged-out), but has not yet been flushed from the table. learned(3) : the value of the corresponding instance of dot1dTpFdbPort was learned, and is being used. self(4) : the value of the corresponding instance of dot1dTpFdbAddress represents one of the bridge's addresses. The corresponding instance of dot1dTpFdbPort indicates which of the bridge's ports has this address. mgmt(5) : the value of the corresponding instance of dot1dTpFdbAddress is also the value of an existing instance of dot1dStaticAddress.")
dot1dTpPortTable = MibTable((1, 3, 6, 1, 2, 1, 17, 4, 4), )
if mibBuilder.loadTexts: dot1dTpPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dTpPortTable.setDescription('A table that contains information about every port that is associated with this transparent bridge.')
dot1dTpPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 4, 4, 1), ).setIndexNames((0, "MRVINREACH", "dot1dTpPort"))
if mibBuilder.loadTexts: dot1dTpPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dTpPortEntry.setDescription('A list of information for each port of a transparent bridge.')
dot1dTpPort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPort.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dTpPort.setDescription('The port number of the port for which this entry contains Transparent bridging management information.')
dot1dTpPortMaxInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPortMaxInfo.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dTpPortMaxInfo.setDescription('The maximum size of the INFO (non-MAC) field that this port will receive or transmit.')
dot1dTpPortInFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPortInFrames.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: dot1dTpPortInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dTpPortInFrames.setDescription('The number of frames that have been received by this port from its segment. Note that a frame received on the interface corresponding to this port is only counted by this object if and only if it is for a protocol being processed by the local bridging function, including bridge management frames.')
dot1dTpPortOutFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPortOutFrames.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: dot1dTpPortOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dTpPortOutFrames.setDescription('The number of frames that have been transmitted by this port to its segment. Note that a frame transmitted on the interface corresponding to this port is only counted by this object if and only if it is for a protocol being processed by the local bridging function, including bridge management frames.')
dot1dTpPortInDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTpPortInDiscards.setReference('IEEE 802.1D-1990: Section 6.6.1.1.3')
if mibBuilder.loadTexts: dot1dTpPortInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dTpPortInDiscards.setDescription('Count of valid frames received which were discarded (i.e., filtered) by the Forwarding Process.')
dot1dStaticTable = MibTable((1, 3, 6, 1, 2, 1, 17, 5, 1), )
if mibBuilder.loadTexts: dot1dStaticTable.setReference('IEEE 802.1D-1990: Section 6.7.2')
if mibBuilder.loadTexts: dot1dStaticTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStaticTable.setDescription('A table containing filtering information configured into the bridge by (local or network) management specifying the set of ports to which frames received from specific ports and containing specific destination addresses are allowed to be forwarded. The value of zero in this table as the port number from which frames with a specific destination address are received, is used to specify all ports for which there is no specific entry in this table for that particular destination address. Entries are valid for unicast and for group/broadcast addresses.')
dot1dStaticEntry = MibTableRow((1, 3, 6, 1, 2, 1, 17, 5, 1, 1), ).setIndexNames((0, "MRVINREACH", "dot1dStaticAddress"), (0, "MRVINREACH", "dot1dStaticReceivePort"))
if mibBuilder.loadTexts: dot1dStaticEntry.setReference('IEEE 802.1D-1990: Section 6.7.2')
if mibBuilder.loadTexts: dot1dStaticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStaticEntry.setDescription('Filtering information configured into the bridge by (local or network) management specifying the set of ports to which frames received from a specific port and containing a specific destination address are allowed to be forwarded.')
dot1dStaticAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 5, 1, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStaticAddress.setReference('IEEE 802.1D-1990: Section 3.9.1, 3.9.2')
if mibBuilder.loadTexts: dot1dStaticAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStaticAddress.setDescription("The destination MAC address in a frame to which this entry's filtering information applies. This object can take the value of a unicast address, a group address or the broadcast address.")
dot1dStaticReceivePort = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStaticReceivePort.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStaticReceivePort.setDescription("Either the value '0', or the port number of the port from which a frame must be received in order for this entry's filtering information to apply. A value of zero indicates that this entry applies on all ports of the bridge for which there is no other applicable entry.")
dot1dStaticAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 5, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStaticAllowedToGoTo.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStaticAllowedToGoTo.setDescription("The set of ports to which frames received from a specific port and destined for a specific MAC address, are allowed to be forwarded. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'. (Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant.) The default value of this object is a string of ones of appropriate length.")
dot1dStaticStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 17, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dStaticStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dStaticStatus.setDescription('This object indicates the status of this entry. The default value is permanent(3). other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. invalid(2) - writing this value to the object removes the corresponding entry. permanent(3) - this entry is currently in use and will remain so after the next reset of the bridge. deleteOnReset(4) - this entry is currently in use and will remain so until the next reset of the bridge. deleteOnTimeout(5) - this entry is currently in use and will remain so until it is aged out.')
newRoot = NotificationType((1, 3, 6, 1, 2, 1, 17) + (0,1))
if mibBuilder.loadTexts: newRoot.setDescription('The newRoot trap indicates that the sending agent has become the new root of the Spanning Tree; the trap is sent by a bridge soon after its election as the new root, e.g., upon expiration of the Topology Change Timer immediately subsequent to its election. Implementation of this trap is optional.')
topologyChange = NotificationType((1, 3, 6, 1, 2, 1, 17) + (0,2))
if mibBuilder.loadTexts: topologyChange.setDescription('A topologyChange trap is sent by a bridge when any of its configured ports transitions from the Learning state to the Forwarding state, or from the Forwarding state to the Blocking state. The trap is not sent if a newRoot trap is sent for the same transition. Implementation of this trap is optional.')
ospf = MibIdentifier((1, 3, 6, 1, 2, 1, 14))
class AreaID(IpAddress):
    pass

class RouterID(IpAddress):
    pass

class Metric(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

class BigMetric(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 16777215)

class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class Status(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class Validation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("valid", 1), ("invalid", 2))

class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class HelloRange(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

class UpToMaxAge(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 3600)

class InterfaceIndex(Integer32):
    pass

class DesignatedRouterPriority(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class TOSType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 31)

ospfGeneralGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 14, 1))
ppp = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23))
pppLcp = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 1))
pppLink = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 1, 1))
pppLqr = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 1, 2))
pppTests = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 1, 3))
pppLinkStatusTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1), )
if mibBuilder.loadTexts: pppLinkStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusTable.setDescription('A table containing PPP-link specific variables for this PPP implementation.')
pppLinkStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1), ).setIndexNames((0, "MRVINREACH", "ifIndex"))
if mibBuilder.loadTexts: pppLinkStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusEntry.setDescription('Management information about a particular PPP Link.')
pppLinkStatusPhysicalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusPhysicalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusPhysicalIndex.setDescription("The value of ifIndex that identifies the lower-level interface over which this PPP Link is operating. This interface would usually be an HDLC or RS-232 type of interface. If there is no lower-layer interface element, or there is no ifEntry for the element, or the element can not be identified, then the value of this object is 0. For example, suppose that PPP is operating over a serial port. This would use two entries in the ifTable. The PPP could be running over `interface' number 123 and the serial port could be running over `interface' number 987. Therefore, ifSpecific.123 would contain the OBJECT IDENTIFIER ppp pppLinkStatusPhysicalIndex.123 would contain 987, and ifSpecific.987 would contain the OBJECT IDENTIFIER for the serial-port's media- specific MIB.")
pppLinkStatusBadAddresses = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusBadAddresses.setReference('Section 3.1, Address Field, of RFC1331.')
if mibBuilder.loadTexts: pppLinkStatusBadAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusBadAddresses.setDescription('The number of packets received with an incorrect Address Field. This counter is a component of the ifInErrors variable that is associated with the interface that represents this PPP Link.')
pppLinkStatusBadControls = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusBadControls.setReference('Section 3.1, Control Field, of RFC1331.')
if mibBuilder.loadTexts: pppLinkStatusBadControls.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusBadControls.setDescription('The number of packets received on this link with an incorrect Control Field. This counter is a component of the ifInErrors variable that is associated with the interface that represents this PPP Link.')
pppLinkStatusPacketTooLongs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusPacketTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusPacketTooLongs.setDescription('The number of received packets that have been discarded because their length exceeded the MRU. This counter is a component of the ifInErrors variable that is associated with the interface that represents this PPP Link. NOTE, packets which are longer than the MRU but which are successfully received and processed are NOT included in this count.')
pppLinkStatusBadFCSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusBadFCSs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusBadFCSs.setDescription('The number of received packets that have been discarded due to having an incorrect FCS. This counter is a component of the ifInErrors variable that is associated with the interface that represents this PPP Link.')
pppLinkStatusLocalMRU = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483648))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusLocalMRU.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusLocalMRU.setDescription('The current value of the MRU for the local PPP Entity. This value is the MRU that the remote entity is using when sending packets to the local PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkStatusRemoteMRU = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483648))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusRemoteMRU.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusRemoteMRU.setDescription('The current value of the MRU for the remote PPP Entity. This value is the MRU that the local entity is using when sending packets to the remote PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkStatusLocalToPeerACCMap = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusLocalToPeerACCMap.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusLocalToPeerACCMap.setDescription('The current value of the ACC Map used for sending packets from the local PPP entity to the remote PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkStatusPeerToLocalACCMap = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusPeerToLocalACCMap.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusPeerToLocalACCMap.setDescription('The ACC Map used by the remote PPP entity when transmitting packets to the local PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkStatusLocalToRemoteProtocolCompression = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusLocalToRemoteProtocolCompression.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusLocalToRemoteProtocolCompression.setDescription('Indicates whether the local PPP entity will use Protocol Compression when transmitting packets to the remote PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkStatusRemoteToLocalProtocolCompression = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusRemoteToLocalProtocolCompression.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusRemoteToLocalProtocolCompression.setDescription('Indicates whether the remote PPP entity will use Protocol Compression when transmitting packets to the local PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkStatusLocalToRemoteACCompression = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusLocalToRemoteACCompression.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusLocalToRemoteACCompression.setDescription('Indicates whether the local PPP entity will use Address and Control Compression when transmitting packets to the remote PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkStatusRemoteToLocalACCompression = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusRemoteToLocalACCompression.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusRemoteToLocalACCompression.setDescription('Indicates whether the remote PPP entity will use Address and Control Compression when transmitting packets to the local PPP entity. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkStatusTransmitFcsSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusTransmitFcsSize.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusTransmitFcsSize.setDescription('The size of the Frame Check Sequence (FCS) in bits that the local node will generate when sending packets to the remote node. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkStatusReceiveFcsSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkStatusReceiveFcsSize.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkStatusReceiveFcsSize.setDescription('The size of the Frame Check Sequence (FCS) in bits that the remote node will generate when sending packets to the local node. The value of this object is meaningful only when the link has reached the open state (ifOperStatus is up).')
pppLinkConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2), )
if mibBuilder.loadTexts: pppLinkConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkConfigTable.setDescription('A table containing the LCP configuration parameters for this PPP Link. These variables represent the initial configuration of the PPP Link. The actual values of the parameters may be changed when the link is brought up via the LCP options negotiation mechanism.')
pppLinkConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2, 1), ).setIndexNames((0, "MRVINREACH", "ifIndex"))
if mibBuilder.loadTexts: pppLinkConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkConfigEntry.setDescription('Configuration information about a particular PPP Link.')
pppLinkConfigInitialMRU = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkConfigInitialMRU.setReference('Section 7.2, Maximum Receive Unit of RFC1331.')
if mibBuilder.loadTexts: pppLinkConfigInitialMRU.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkConfigInitialMRU.setDescription('The initial Maximum Receive Unit (MRU) that the local PPP entity will advertise to the remote entity. If the value of this variable is 0 then the local PPP entity will not advertise any MRU to the remote entity and the default MRU will be assumed. Changing this object will have effect when the link is next restarted. Agent variations: DESCRIPTION writing not supported')
pppLinkConfigReceiveACCMap = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="ffffffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLinkConfigReceiveACCMap.setReference('Section 7.3, page 4, Async-Control-Character- Map of RFC1331.')
if mibBuilder.loadTexts: pppLinkConfigReceiveACCMap.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkConfigReceiveACCMap.setDescription("The Asynchronous-Control-Character-Map (ACC) that the local PPP entity requires for use on its receive side. In effect, this is the ACC Map that is required in order to ensure that the local modem will successfully receive all characters. The actual ACC map used on the receive side of the link will be a combination of the local node's pppLinkConfigReceiveACCMap and the remote node's pppLinkConfigTransmitACCMap. Changing this object will have effect when the link is next restarted.")
pppLinkConfigTransmitACCMap = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="ffffffff")).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkConfigTransmitACCMap.setReference('Section 7.3, page 4, Async-Control-Character- Map of RFC1331.')
if mibBuilder.loadTexts: pppLinkConfigTransmitACCMap.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkConfigTransmitACCMap.setDescription("The Asynchronous-Control-Character-Map (ACC) that the local PPP entity requires for use on its transmit side. In effect, this is the ACC Map that is required in order to ensure that all characters can be successfully transmitted through the local modem. The actual ACC map used on the transmit side of the link will be a combination of the local node's pppLinkConfigTransmitACCMap and the remote node's pppLinkConfigReceiveACCMap. Changing this object will have effect when the link is next restarted. Agent variations: DESCRIPTION writing not supported")
pppLinkConfigMagicNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkConfigMagicNumber.setReference('Section 7.6, Magic Number, of RFC1331.')
if mibBuilder.loadTexts: pppLinkConfigMagicNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkConfigMagicNumber.setDescription('If true(2) then the local node will attempt to perform Magic Number negotiation with the remote node. If false(1) then this negotiation is not performed. In any event, the local node will comply with any magic number negotiations attempted by the remote node, per the PPP specification. Changing this object will have effect when the link is next restarted. Agent variations: DESCRIPTION writing not supported')
pppLinkConfigFcsSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)).clone(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkConfigFcsSize.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkConfigFcsSize.setDescription('The size of the FCS, in bits, the local node will attempt to negotiate for use with the remote node. Regardless of the value of this object, the local node will comply with any FCS size negotiations initiated by the remote node, per the PPP specification. Changing this object will have effect when the link is next restarted. Agent variations: DESCRIPTION writing not supported')
pppEchoTest = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 1, 3, 1))
pppDiscardTest = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 1, 3, 2))
pppIp = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 23, 3))
pppIpTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 3, 1), )
if mibBuilder.loadTexts: pppIpTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpTable.setDescription('Table containing the IP parameters and statistics for the local PPP entity.')
pppIpEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1), ).setIndexNames((0, "MRVINREACH", "ifIndex"))
if mibBuilder.loadTexts: pppIpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpEntry.setDescription('IPCP status information for a particular PPP link.')
pppIpOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("not-opened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpOperStatus.setDescription('The operational status of the IP network protocol. If the value of this object is up then the finite state machine for the IP network protocol has reached the Opened state.')
pppIpLocalToRemoteCompressionProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("vj-tcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIpLocalToRemoteCompressionProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpLocalToRemoteCompressionProtocol.setDescription('The IP compression protocol that the local PPP-IP entity uses when sending packets to the remote PPP-IP entity. The value of this object is meaningful only when the link has reached the open state (pppIpOperStatus is opened).')
pppIpRemoteToLocalCompressionProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("vj-tcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIpRemoteToLocalCompressionProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpRemoteToLocalCompressionProtocol.setDescription('The IP compression protocol that the remote PPP-IP entity uses when sending packets to the local PPP-IP entity. The value of this object is meaningful only when the link has reached the open state (pppIpOperStatus is opened).')
pppIpRemoteMaxSlotId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIpRemoteMaxSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpRemoteMaxSlotId.setDescription('The Max-Slot-Id parameter that the remote node has advertised and that is in use on the link. If vj-tcp header compression is not in use on the link then the value of this object shall be 0. The value of this object is meaningful only when the link has reached the open state (pppIpOperStatus is opened).')
pppIpLocalMaxSlotId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIpLocalMaxSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpLocalMaxSlotId.setDescription('The Max-Slot-Id parameter that the local node has advertised and that is in use on the link. If vj-tcp header compression is not in use on the link then the value of this object shall be 0. The value of this object is meaningful only when the link has reached the open state (pppIpOperStatus is opened).')
pppIpConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 23, 3, 2), )
if mibBuilder.loadTexts: pppIpConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpConfigTable.setDescription('Table containing configuration variables for the IPCP for the local PPP entity.')
pppIpConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 23, 3, 2, 1), ).setIndexNames((0, "MRVINREACH", "ifIndex"))
if mibBuilder.loadTexts: pppIpConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpConfigEntry.setDescription('IPCP information for a particular PPP link.')
pppIpConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIpConfigAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpConfigAdminStatus.setDescription("The immediate desired status of the IP network protocol. Setting this object to open will inject an administrative open event into the IP network protocol's finite state machine. Setting this object to close will inject an administrative close event into the IP network protocol's finite state machine. Agent variations: DESCRIPTION writing not supported")
pppIpConfigCompression = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 23, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("vj-tcp", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppIpConfigCompression.setReference('Section 4.0, Van Jacobson TCP/IP Header Compression of RFC1332.')
if mibBuilder.loadTexts: pppIpConfigCompression.setStatus('mandatory')
if mibBuilder.loadTexts: pppIpConfigCompression.setDescription('If none(1) then the local node will not attempt to negotiate any IP Compression option. Otherwise, the local node will attempt to negotiate compression mode indicated by the enumerated value. Changing this object will have effect when the link is next restarted.')
mrvInReachProductDivision = MibIdentifier((1, 3, 6, 1, 4, 1, 33))
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8))
class DateTime(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class AddressType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("local", 3), ("ip", 4), ("ethernet", 5))

class TypedAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

class SoftwareType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("terminalServer", 1), ("bridge", 3), ("repeater", 4), ("bridgeRouter", 5), ("router", 6), ("bridgeRouterRepeater", 7), ("switch", 8), ("oem", 9))

class HardwareType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 230))
    namedValues = NamedValues(("unknown", 1), ("em1608", 29), ("ir7520", 30), ("ir9020", 31), ("ir7020", 32), ("mxTServJ8", 33), ("mxTservJ16", 34), ("mxManF2", 35), ("mx1500", 36), ("mx1100", 37), ("mx1800", 38), ("mxNpcP1", 39), ("mxTsrLJ16", 40), ("mxTsrvLJ8", 41), ("mxTsrvMj8", 42), ("mxTsrvNJ8", 43), ("mxTsrvOJ8", 44), ("mx1400", 45), ("mx6510", 46), ("mxRb2", 47), ("mx1500x8", 49), ("mx1710", 50), ("mx2710", 51), ("ts3395", 52), ("mx1120", 53), ("mx1520", 54), ("mx1820", 55), ("mx2220", 56), ("mx3510", 57), ("mx6625", 58), ("mx2120", 59), ("mx6020", 60), ("mx3610", 61), ("etsmim", 62), ("mx3010", 63), ("mx6025", 64), ("lannetTs", 65), ("fn1500", 66), ("dpXp1", 67), ("mx3710", 68), ("mx3210", 69), ("mx6710", 70), ("mx6220", 71), ("mx1600a", 74), ("mx1450", 75), ("ts720", 76), ("so3395aTs", 77), ("mx1608", 78), ("mx2210a", 79), ("br401", 80), ("mx6800a", 81), ("notApplicable", 83), ("rp210", 84), ("mx6800b", 85), ("mx1620", 86), ("mx2240", 87), ("ps3m", 88), ("lb2Wan", 89), ("nio1600", 90), ("asy160", 91), ("mx1640", 92), ("br220", 93), ("rp211", 94), ("br221", 95), ("mx2210b", 96), ("mx1600b", 97), ("mx1600c", 98), ("mx800a", 99), ("mx1600d", 100), ("tokenRing", 101), ("mx800b", 102), ("br501", 103), ("br350", 105), ("br350ExpansionSlot", 107), ("n3000", 108), ("br402", 109), ("sw610", 110), ("sw610S", 111), ("br501s", 112), ("br501c", 113), ("br501sc", 114), ("routeRunnerIsdnSt", 115), ("routeRunner", 116), ("mx1608a", 117), ("routerRunnerIsdnU", 118), ("mx1608b", 119), ("mx1604", 120), ("n3000Ias", 123), ("irMgr0Rdc", 124), ("ir9040", 125), ("ir7040", 126), ("irMgr0", 127), ("irM800", 128), ("irM700", 129), ("ir8020", 130), ("ir8040", 131), ("ir7004", 132), ("ir7008", 133), ("ir8004", 134), ("ir8008", 135), ("irM900", 136), ("irMGR0AC", 137), ("irMGR0AC-IN", 138), ("ir9004", 139), ("ir9008", 140), ("ir9504", 141), ("n3000SP", 230))

class ChassisType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("mx45xx", 2), ("net9000", 3), ("net9000SWITCH", 4))

class IOType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(16, 32, 33, 34, 35, 36, 37, 38, 39, 40, 128, 129, 144, 145, 146, 147, 148, 149, 150, 155, 156, 157, 158, 160, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 214, 224, 225, 226, 227, 231, 232, 233, 234, 235, 236, 237, 238, 239))
    namedValues = NamedValues(("io616", 16), ("dualE175", 32), ("dualT1", 33), ("bri8", 34), ("io351d", 35), ("io352d", 36), ("dualE1120", 37), ("singleT1", 38), ("singleE175", 39), ("singleE1120", 40), ("io625", 128), ("io626", 129), ("io601", 144), ("io602", 145), ("io603", 146), ("io601A", 147), ("io602A", 148), ("io603A", 149), ("io604", 150), ("io621", 155), ("io622", 156), ("io623", 157), ("io624", 158), ("io301x12", 160), ("io521", 174), ("io522", 175), ("io512x3", 176), ("io511x3", 177), ("io520", 178), ("io514", 179), ("io513", 180), ("io470x4", 182), ("io469x2", 183), ("io467x4", 184), ("io467x2", 185), ("io468x4", 186), ("io468x2", 187), ("io466x4", 188), ("io465x2", 189), ("io464x4", 190), ("io463x2", 191), ("io201", 192), ("io202", 193), ("io204", 194), ("io203", 195), ("io251", 196), ("io231", 197), ("io254", 198), ("io206", 199), ("io253", 200), ("io256", 201), ("io201a", 202), ("io202a", 203), ("io203a", 204), ("ioRepeater", 207), ("io205x12", 209), ("io205", 210), ("io255", 214), ("io722", 224), ("io721", 225), ("io411", 226), ("io724", 227), ("io725", 231), ("io723", 232), ("io462", 233), ("io412", 234), ("ioTS16a", 235), ("ioTS16b", 236), ("io461", 237), ("io101", 238), ("io119", 239))

terminalServer = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1))
tsMxCard1M = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 1))
tsMxBox1M = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 2))
tsMxCard = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 3))
tsMxBox = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 4))
tsN9 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 5))
tsPrint = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 6))
tsX25 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 7))
em1608 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 29))
ir7520 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 30))
ir9020 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 31))
ir7020 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 32))
irMgr0Rdc = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 124))
ir9040 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 125))
ir7040 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 126))
irMgr0 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 127))
irM800 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 128))
irM700 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 129))
ir8020 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 130))
ir8040 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 131))
ir7004 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 132))
ir7008 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 133))
ir8004 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 134))
ir8008 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 135))
irM900 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 136))
irMGR0AC = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 137))
irMGR0AC_IN = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 138)).setLabel("irMGR0AC-IN")
ir9004 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 139))
ir9008 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 140))
ir9504 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 1, 141))
bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 3))
repeater = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 4))
rpMx = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 4, 1))
rpN9 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 4, 2))
bridgeRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 5))
bridgeRouterMx = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 5, 1))
bridgeRouterN9 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 5, 2))
bridgeRouterN3 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 5, 3))
bridgeRouterN2 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 5, 4))
bridgeRouterEB = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 5, 5))
bridgeRouterRepeater = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 7))
switch = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 8))
oem = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 9))
netVantage = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 9, 1))
nv8516TT = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 9, 1, 1))
nv8516FF = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 9, 1, 2))
nbase = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 10))
nbaseSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 10, 1))
nbaseSwitchN9 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 8, 10, 1, 1))
appletalk = MibIdentifier((1, 3, 6, 1, 2, 1, 13))
class DdpAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

llap = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 1))
aarp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 2))
atport = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 3))
ddp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 4))
rtmp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 5))
kip = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 6))
zip = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 7))
nbp = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 8))
atecho = MibIdentifier((1, 3, 6, 1, 2, 1, 13, 9))
xApple = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 21))
xAppleSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 21, 1))
xApplePort = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 21, 2))
xApplePolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 21, 3))
xAppleNbp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 21, 4))
xAppleTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 21, 5))
xAppleRemoteAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 21, 6))
appleState = MibScalar((1, 3, 6, 1, 4, 1, 33, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appleState.setStatus('mandatory')
if mibBuilder.loadTexts: appleState.setDescription('Controls whether the router will perform AppleTalk routing.')
appleStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("active", 2), ("noInterface", 3), ("badConfig", 4), ("noInterfaceActive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: appleStatus.setDescription('Indicates whether the router is performing AppleTalk routing.')
appleStatusIf = MibScalar((1, 3, 6, 1, 4, 1, 33, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleStatusIf.setStatus('mandatory')
if mibBuilder.loadTexts: appleStatusIf.setDescription("The ifIndex of the bad interface if appleStatus is 'badConfig'.")
applePortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 21, 2, 1), )
if mibBuilder.loadTexts: applePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: applePortTable.setDescription('Table of fields indexed by interface.')
applePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1), ).setIndexNames((0, "MRVINREACH", "applePortIndex"))
if mibBuilder.loadTexts: applePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: applePortEntry.setDescription('A particular entry.')
applePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: applePortIndex.setDescription('The index of the interface; same as IfIndex.')
applePortProtocolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5))).clone(namedValues=NamedValues(("low", 1), ("medium", 3), ("high", 5))).clone('medium')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortProtocolPriority.setStatus('mandatory')
if mibBuilder.loadTexts: applePortProtocolPriority.setDescription('This value defines the priority at which all Apple routed packets will be placed on the WAN output queue.')
applePortArpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(33, 65535)).clone(33)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortArpInterval.setStatus('mandatory')
if mibBuilder.loadTexts: applePortArpInterval.setDescription('The interval at which ARP messages should be sent during the process of selecting a network address.')
applePortArpRetransmitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortArpRetransmitCount.setStatus('mandatory')
if mibBuilder.loadTexts: applePortArpRetransmitCount.setDescription('The number of ARP messages that should be sent during the process of selecting a network address.')
applePortChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: applePortChecksum.setDescription('Controls whether checksums are generated on all DDP packets sent out the interface.')
applePortPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortPacketsIn.setStatus('mandatory')
if mibBuilder.loadTexts: applePortPacketsIn.setDescription('The number of AppleTalk packets received on this interface.')
applePortPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortPacketsOut.setStatus('mandatory')
if mibBuilder.loadTexts: applePortPacketsOut.setDescription('The number of AppleTalk packets transmitted on this interface.')
applePortForwardsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortForwardsIn.setStatus('mandatory')
if mibBuilder.loadTexts: applePortForwardsIn.setDescription('The number of AppleTalk packets received on this interface which were not addressed to this router.')
applePortForwardsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortForwardsOut.setStatus('mandatory')
if mibBuilder.loadTexts: applePortForwardsOut.setDescription('The number of AppleTalk packets transmitted on this interface which were not originated by this router.')
applePortNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 10), DdpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: applePortNetAddress.setDescription('The actual address used by this port.')
applePortNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortNetStart.setStatus('mandatory')
if mibBuilder.loadTexts: applePortNetStart.setDescription('The start of the actual network range used by this port.')
applePortNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortNetEnd.setStatus('mandatory')
if mibBuilder.loadTexts: applePortNetEnd.setDescription('The end of the actual network range used by this port.')
applePortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortErrors.setStatus('mandatory')
if mibBuilder.loadTexts: applePortErrors.setDescription('The number of AppleTalk packets received in error.')
applePortLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("broadcast", 1), ("checksum", 2), ("hopCount", 3), ("noProtocol", 4), ("noRoute", 5), ("shortDDP", 6), ("tooLong", 7), ("tooShort", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortLastError.setStatus('mandatory')
if mibBuilder.loadTexts: applePortLastError.setDescription('The type of the most recent error counted in applePortErrors. A value of zero means no error.')
applePortLastErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortLastErrorTime.setStatus('mandatory')
if mibBuilder.loadTexts: applePortLastErrorTime.setDescription('The value of sysUptime when applePortLastError last occured.')
applePortLastErrorData = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(22, 22)).setFixedLength(22)).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortLastErrorData.setStatus('mandatory')
if mibBuilder.loadTexts: applePortLastErrorData.setDescription('The first 22 bytes of the packet from applePortLastError.')
applePortBringBackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortBringBackTime.setStatus('mandatory')
if mibBuilder.loadTexts: applePortBringBackTime.setDescription('The number of seconds to shut down an interface while waiting for a manager-initiated configuration change to propagate.')
applePortUseNeighborNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortUseNeighborNotify.setStatus('mandatory')
if mibBuilder.loadTexts: applePortUseNeighborNotify.setDescription('Controls generation of neighbor notify messages when an interface is disabled or system is shut down.')
applePortRouterType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortRouterType.setStatus('mandatory')
if mibBuilder.loadTexts: applePortRouterType.setDescription('Type of router operation over this port.')
applePortZoneTable = MibTable((1, 3, 6, 1, 4, 1, 33, 21, 2, 2), )
if mibBuilder.loadTexts: applePortZoneTable.setStatus('mandatory')
if mibBuilder.loadTexts: applePortZoneTable.setDescription('Table of fields indexed by interface and zone.')
applePortZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 21, 2, 2, 1), ).setIndexNames((0, "MRVINREACH", "applePortZoneIndex"), (0, "MRVINREACH", "applePortZoneName"))
if mibBuilder.loadTexts: applePortZoneEntry.setStatus('mandatory')
if mibBuilder.loadTexts: applePortZoneEntry.setDescription('A particular entry.')
applePortZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortZoneIndex.setStatus('mandatory')
if mibBuilder.loadTexts: applePortZoneIndex.setDescription('The index of the interface; same as IfIndex.')
applePortZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortZoneName.setStatus('mandatory')
if mibBuilder.loadTexts: applePortZoneName.setDescription('The name of the zone.')
applePortZoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortZoneStatus.setStatus('mandatory')
if mibBuilder.loadTexts: applePortZoneStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry.")
applePortExportTable = MibTable((1, 3, 6, 1, 4, 1, 33, 21, 3, 1), )
if mibBuilder.loadTexts: applePortExportTable.setStatus('mandatory')
if mibBuilder.loadTexts: applePortExportTable.setDescription('Table of fields indexed by interface and zone.')
applePortExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 21, 3, 1, 1), ).setIndexNames((0, "MRVINREACH", "applePortExportIndex"), (0, "MRVINREACH", "applePortExportZone"), (0, "MRVINREACH", "applePortExportName"), (0, "MRVINREACH", "applePortExportType"))
if mibBuilder.loadTexts: applePortExportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: applePortExportEntry.setDescription('A particular entry.')
applePortExportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortExportIndex.setStatus('mandatory')
if mibBuilder.loadTexts: applePortExportIndex.setDescription('The index of the interface; same as IfIndex.')
applePortExportZone = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortExportZone.setStatus('mandatory')
if mibBuilder.loadTexts: applePortExportZone.setDescription('The name of the zone.')
applePortExportName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortExportName.setStatus('mandatory')
if mibBuilder.loadTexts: applePortExportName.setDescription('The name of the name.')
applePortExportType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortExportType.setStatus('mandatory')
if mibBuilder.loadTexts: applePortExportType.setDescription('The name of the type.')
applePortExportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortExportAction.setStatus('mandatory')
if mibBuilder.loadTexts: applePortExportAction.setDescription('Control whether the data will be hidden or advertised.')
applePortExportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortExportStatus.setStatus('mandatory')
if mibBuilder.loadTexts: applePortExportStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry.")
applePortImportTable = MibTable((1, 3, 6, 1, 4, 1, 33, 21, 3, 2), )
if mibBuilder.loadTexts: applePortImportTable.setStatus('mandatory')
if mibBuilder.loadTexts: applePortImportTable.setDescription('Table of fields indexed by interface and zone.')
applePortImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 21, 3, 2, 1), ).setIndexNames((0, "MRVINREACH", "applePortImportIndex"), (0, "MRVINREACH", "applePortImportZone"), (0, "MRVINREACH", "applePortImportName"), (0, "MRVINREACH", "applePortImportType"))
if mibBuilder.loadTexts: applePortImportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: applePortImportEntry.setDescription('A particular entry.')
applePortImportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortImportIndex.setStatus('mandatory')
if mibBuilder.loadTexts: applePortImportIndex.setDescription('The index of the interface; same as IfIndex.')
applePortImportZone = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortImportZone.setStatus('mandatory')
if mibBuilder.loadTexts: applePortImportZone.setDescription('The name of the zone.')
applePortImportName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortImportName.setStatus('mandatory')
if mibBuilder.loadTexts: applePortImportName.setDescription('The name of the name.')
applePortImportType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortImportType.setStatus('mandatory')
if mibBuilder.loadTexts: applePortImportType.setDescription('The name of the type.')
applePortImportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortImportAction.setStatus('mandatory')
if mibBuilder.loadTexts: applePortImportAction.setDescription('Control whether the data will be discarded or accepted.')
applePortImportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortImportStatus.setStatus('mandatory')
if mibBuilder.loadTexts: applePortImportStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry.")
appleNbpTable = MibTable((1, 3, 6, 1, 4, 1, 33, 21, 4, 1), )
if mibBuilder.loadTexts: appleNbpTable.setStatus('mandatory')
if mibBuilder.loadTexts: appleNbpTable.setDescription('Table of fields indexed by interface and zone.')
appleNbpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 21, 4, 1, 1), ).setIndexNames((0, "MRVINREACH", "appleNbpZone"), (0, "MRVINREACH", "appleNbpName"), (0, "MRVINREACH", "appleNbpType"))
if mibBuilder.loadTexts: appleNbpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: appleNbpEntry.setDescription('A particular entry.')
appleNbpZone = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleNbpZone.setStatus('mandatory')
if mibBuilder.loadTexts: appleNbpZone.setDescription('The name of the zone.')
appleNbpName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleNbpName.setStatus('mandatory')
if mibBuilder.loadTexts: appleNbpName.setDescription('The name of the name.')
appleNbpType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleNbpType.setStatus('mandatory')
if mibBuilder.loadTexts: appleNbpType.setDescription('The name of the type.')
appleNbpNode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 4, 1, 1, 4), DdpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleNbpNode.setStatus('mandatory')
if mibBuilder.loadTexts: appleNbpNode.setDescription('The address of the node who offers the service associated with this entry.')
appleNbpSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleNbpSocket.setStatus('mandatory')
if mibBuilder.loadTexts: appleNbpSocket.setDescription('The socket of the service associated with this entry. The value 0 means no socket.')
appleTrafficSort = MibScalar((1, 3, 6, 1, 4, 1, 33, 21, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appleTrafficSort.setStatus('mandatory')
if mibBuilder.loadTexts: appleTrafficSort.setDescription('Setting to EXECUTE causes the most recent traffic information to be sorted into the appleTrafficTable. The sorting precedence is: decreasing percentage, increasing destination address, increasing source address, and increasing interface number. Setting to READY has no effect.')
appleTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 33, 21, 5, 2), )
if mibBuilder.loadTexts: appleTrafficTable.setStatus('mandatory')
if mibBuilder.loadTexts: appleTrafficTable.setDescription('A list of traffic entries, sorted in the order specified by appleTrafficSort.')
appleTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 21, 5, 2, 1), ).setIndexNames((0, "MRVINREACH", "appleTrafficIndex"))
if mibBuilder.loadTexts: appleTrafficEntry.setStatus('mandatory')
if mibBuilder.loadTexts: appleTrafficEntry.setDescription('Parameter values for an Filter filter.')
appleTrafficIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleTrafficIndex.setStatus('mandatory')
if mibBuilder.loadTexts: appleTrafficIndex.setDescription('Identification of a traffic entry.')
appleTrafficPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleTrafficPercent.setStatus('mandatory')
if mibBuilder.loadTexts: appleTrafficPercent.setDescription('The percent of total traffic that this traffic entryrepresents, in tenths of a percent.')
appleTrafficDst = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 5, 2, 1, 3), DdpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleTrafficDst.setStatus('mandatory')
if mibBuilder.loadTexts: appleTrafficDst.setDescription('The destination to which the traffic entry applies.')
appleTrafficSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 5, 2, 1, 4), DdpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleTrafficSrc.setStatus('mandatory')
if mibBuilder.loadTexts: appleTrafficSrc.setDescription('The source to which the traffic entry applies.')
appleTrafficIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleTrafficIntf.setStatus('mandatory')
if mibBuilder.loadTexts: appleTrafficIntf.setDescription('The inbound interface to which the traffic entry applies.')
appleTrafficMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 33, 21, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appleTrafficMonitoring.setStatus('mandatory')
if mibBuilder.loadTexts: appleTrafficMonitoring.setDescription('Controls whether internet traffic information will be recorded.')
arapPassword = MibScalar((1, 3, 6, 1, 4, 1, 33, 21, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arapPassword.setStatus('mandatory')
if mibBuilder.loadTexts: arapPassword.setDescription("The server's ARAP password. To increase security, Gets of this object return the NULL string.")
arapDefaultZoneName = MibScalar((1, 3, 6, 1, 4, 1, 33, 21, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arapDefaultZoneName.setStatus('mandatory')
if mibBuilder.loadTexts: arapDefaultZoneName.setDescription('The name of the AppleTalk zone that the server should try to choose at boot time.')
arapPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 21, 6, 3), )
if mibBuilder.loadTexts: arapPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: arapPortTable.setDescription('A list of ARAP port entries.')
arapPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 21, 6, 3, 1), ).setIndexNames((0, "MRVINREACH", "charPortIndex"))
if mibBuilder.loadTexts: arapPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: arapPortEntry.setDescription('ARAP parameter values for a port.')
arapPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arapPortEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: arapPortEnabled.setDescription('Indicates if ARAP connections are allowed on this port.')
arapPortZoneAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("local", 2), ("none", 3), ("namedzone", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arapPortZoneAccess.setStatus('mandatory')
if mibBuilder.loadTexts: arapPortZoneAccess.setDescription('Indicates the AppleTalk zones that ARAP connections on this port may access: none, local, all, or named zone.')
arapPortZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 6, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arapPortZoneName.setStatus('mandatory')
if mibBuilder.loadTexts: arapPortZoneName.setDescription("If this port's arapPortZoneAccess field indicates a named zone, this field contains the zone name.")
arapPortMaxConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 6, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arapPortMaxConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: arapPortMaxConnectTime.setDescription('Maximum number of minutes a single ARAP connection may exist on the port before a server initiated disconnect. To set no limit on the amount of time that an ARAP user may be connected, set this object to -1.')
arapPortGuestLoginsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arapPortGuestLoginsOk.setStatus('mandatory')
if mibBuilder.loadTexts: arapPortGuestLoginsOk.setDescription("Indicates if 'Guest' logins (with no password) are allowed on the port.")
arapPortTimeConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 6, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arapPortTimeConnected.setStatus('mandatory')
if mibBuilder.loadTexts: arapPortTimeConnected.setDescription('Indicates the number of minutes the current ARAP connection has been established on the port, rounded up to the nearest minute. Gets return -1 if no ARAP user is currently connected on the port or if ARAP is not enabled on the port.')
arapPortTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 6, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arapPortTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: arapPortTimeRemaining.setDescription('Indicates the number of minutes the current ARAP connection may remain on the port before a server initiated disconnect will occur, rounded up to the nearest minute. To set no limit on the amount of time that the current ARAP user may continue to be connected, set this object to the maximum value in the range. Gets return -1 if no ARAP user is currently connected on the port or if ARAP is not enabled on the port. Gets also return -1 if there is a user connected and there is no limit on the amount of time that the current user may be connected.')
xBootClient = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 12))
bootClientStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 12, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootClientStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bootClientStatus.setDescription('The overall status of the bootstrapping operation, including, for example, what is presently happening and error information.')
xBootServer = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 6))
xBsBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 6, 1))
xDump = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 6, 2))
xLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 6, 3))
xParam = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 6, 4))
class DialogStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("none", 1), ("fileTooLarge", 2), ("notImageFile", 3), ("notExecutableFile", 4), ("badFileData", 5), ("deviceWriteProtected", 6), ("operationTimeout", 7), ("remoteFileNotFound", 8), ("remoteFileAccessViolation", 9), ("protocolError", 10), ("fileSystemError", 11), ("temporaryResourceConflict", 12), ("success", 13))

basicLogLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicLogLimit.setStatus('mandatory')
if mibBuilder.loadTexts: basicLogLimit.setDescription("Maximum allowed number of kilobytes for recording events. Corresponds directly to MANAGER LOG FILE SIZE and the value labeled 'Log File Size:' in the MANAGER CHARACTERISTICS display.")
basicActiveLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicActiveLimit.setStatus('mandatory')
if mibBuilder.loadTexts: basicActiveLimit.setDescription("Maximum allowed number of simultaneous service dialogs. Corresponds directly to MANAGER SIMULTANEOUS and the value labeled 'Maximum simultaneous requests:' in the MANAGER CHARACTERISTICS display.")
basicActiveNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicActiveNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicActiveNumber.setDescription('Number of active service dialogs. Corresponds indirectly to the list of active clients in the MANAGER STATUS display.')
basicClientNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicClientNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicClientNumber.setDescription('Number of defined clients. Corresponds indirectly to the list of defined clients in the MANAGER LOCAL, MANAGER GLOBAL, and MANAGER NODE displays.')
basicOffersSent = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicOffersSent.setStatus('mandatory')
if mibBuilder.loadTexts: basicOffersSent.setDescription("Total number of service offers sent in response to client requests. Corresponds directly to the value labeled 'Total service offers sent:' in the MANAGER STATUS display.")
basicEventTotal = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicEventTotal.setStatus('mandatory')
if mibBuilder.loadTexts: basicEventTotal.setDescription("Total number of events that have been written to the event log since it was last purged. This may be less than the number currently in the log. Corresponds directly to the value labeled 'Total Messages Logged:' in the MANAGER EVENTS display.")
basicEventPurge = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicEventPurge.setStatus('mandatory')
if mibBuilder.loadTexts: basicEventPurge.setDescription("Control to cause emptying the event log. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' causes the event log to immediately become empty. Corresponds directly to the PURGE MANAGER LOG FILE command.")
activeTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 1, 8), )
if mibBuilder.loadTexts: activeTable.setStatus('mandatory')
if mibBuilder.loadTexts: activeTable.setDescription('A list of active client dialog entries. The number of entries is given by basicActiveNumber.')
activeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1), ).setIndexNames((0, "MRVINREACH", "activeIdentificationType"), (0, "MRVINREACH", "activeIdentification"))
if mibBuilder.loadTexts: activeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: activeEntry.setDescription('Parameter values for an active client dialog entry.')
activeIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 1), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeIdentificationType.setStatus('mandatory')
if mibBuilder.loadTexts: activeIdentificationType.setDescription("The type of identification value in activeIdentification. Corresponds indirectly to the value labeled 'EthernetAddress' in the MANAGER STATUS display.")
activeIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: activeIdentification.setDescription("Identification of the active partner. Corresponds directly to the value labeled 'EthernetAddress' in the MANAGER STATUS display.")
activeFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("parameterStore", 1), ("load", 2), ("dump", 3), ("imageUpdate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeFunction.setStatus('mandatory')
if mibBuilder.loadTexts: activeFunction.setDescription("The function the server is performing with the partner. Corresponds directly to the value labeled 'Function' in the MANAGER STATUS display.")
activeSoftwareVersionType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("alpha", 1), ("beta", 2), ("production", 3), ("special", 4), ("diagnostic", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeSoftwareVersionType.setStatus('mandatory')
if mibBuilder.loadTexts: activeSoftwareVersionType.setDescription("If activeFunction is 'load', the software version being sent to the client, otherwise 'notApplicable'. Corresponds to the letter in the software version labeled 'Version' in the MANAGER STATUS display. alpha 'A': alpha test beta 'B': beta test production null: normal, production software special 'S': special, custom software diagnostic 'D': diagnostic, debug software ")
activeSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: activeSoftwareVersion.setDescription("If activeFunction is 'load', the 4-byte software version being sent to the client, otherwise zero length. In order, the octets contain major version, minor version, ECO, and pre-release number. Corresponds to the numbers in the software version labeled 'Version' in the MANAGER STATUS display. For example, the version display for activeSoftwareVersionType 'production' and activeSoftwareVersion '2.2.0.0' is 'V2.2'. The version display for activeSoftwareVersionType 'beta' and activeSoftwareVersion '3.1.0.4' is 'V3.1B4'.")
activeParameterVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeParameterVersion.setStatus('mandatory')
if mibBuilder.loadTexts: activeParameterVersion.setDescription("If activeFunction is 'parameterStore', the parameter version being stored by the client, otherwise zero. Corresponds directly to the value labeled 'Version' in the MANAGER STATUS display.")
activeCurrentSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeCurrentSequence.setStatus('mandatory')
if mibBuilder.loadTexts: activeCurrentSequence.setDescription("The current dialog sequence number. Corresponds directly to the value labeled 'Seq' in the MANAGER STATUS display.")
activeBytesRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeBytesRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: activeBytesRemaining.setDescription("The number of bytes remaining to be transferred in the dialog. Corresponds directly to the value labeled 'Left' in the MANAGER STATUS display.")
activeFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeFile.setStatus('mandatory')
if mibBuilder.loadTexts: activeFile.setDescription("The name of the file being used in the dialog. Corresponds directly to the value labeled 'File' in the MANAGER STATUS display.")
activeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 10), DialogStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: activeStatus.setDescription("The final status of the most recent attempt to get an image. Corresponds directly to the value labeled 'Get Status:' in the DEVICE STATUS display.")
activeState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("idle", 1), ("internal1", 2), ("internal2", 3), ("openPartner", 4), ("openFile", 5), ("receivePartner", 6), ("writeFile", 7), ("closePartner", 8), ("closeFile", 9), ("cleanup", 10), ("done", 11), ("error", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeState.setStatus('mandatory')
if mibBuilder.loadTexts: activeState.setDescription("The dynamic state of an active attempt to get an image. Corresponds directly to the value labeled 'Get State:' in the DEVICE STATUS display.")
clientTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 1, 9), )
if mibBuilder.loadTexts: clientTable.setStatus('mandatory')
if mibBuilder.loadTexts: clientTable.setDescription('A list of client data base entries. The number of entries is given by basicClientNumber.')
clientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1), ).setIndexNames((0, "MRVINREACH", "clientIdentificationType"), (0, "MRVINREACH", "clientIdentification"))
if mibBuilder.loadTexts: clientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: clientEntry.setDescription('Parameter values for a client data base entry.')
clientIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 1), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientIdentificationType.setStatus('mandatory')
if mibBuilder.loadTexts: clientIdentificationType.setDescription("The type of identification value in clientIdentification. Corresponds directly to MANAGER NODE, MANAGER GLOBAL, and MANAGER LOCAL, and the value labeled 'Ethernet Address' in the MANAGER NODE display or 'Ethernet Address', 'Device', and 'Global Devices' or 'Local Devices' in the MANAGER GLOBAL and LOCAL displays.")
clientIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: clientIdentification.setDescription("Identification of the client, either a hardware type or an Ethernet address, depending on clientIdentificationType. Corresponds directly to MANAGER NODE, MANAGER GLOBAL, and MANAGER LOCAL, and the value labeled 'Ethernet Address' in the MANAGER NODE display or 'Ethernet Address', 'Device', and 'Global Devices' or 'Local Devices' in the MANAGER GLOBAL and LOCAL displays.")
clientEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: clientEntryStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry, which corresponds directly to the PURGE LOCAL, PURGE GLOBAL, and PURGE NODE commands. Actual removal of the entry is implementation specific.")
clientName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientName.setStatus('mandatory')
if mibBuilder.loadTexts: clientName.setDescription("A name that may be used to identify the client. Corresponds directly to the value labeled 'Name' in the MANAGER NODE display.")
clientLoadFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientLoadFile.setStatus('mandatory')
if mibBuilder.loadTexts: clientLoadFile.setDescription("The file with the client's load image. Corresponds directly to the value labeled 'Load File' in the MANAGER LOCAL, MANAGER GLOBAL, and MANAGER NODE displays.")
clientDiagnosticFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientDiagnosticFile.setStatus('mandatory')
if mibBuilder.loadTexts: clientDiagnosticFile.setDescription("The file with the client's diagnostic test image. Corresponds directly to the value labeled 'Diag File' in the MANAGER LOCAL, MANAGER GLOBAL, and MANAGER NODE displays.")
clientLoadService = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientLoadService.setStatus('mandatory')
if mibBuilder.loadTexts: clientLoadService.setDescription("Control for allowing load service for the client. Corresponds directly to the value labeled 'Load' in the MANAGER LOCAL, MANAGER GLOBAL, and MANAGER NODE displays.")
clientDumpService = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clientDumpService.setStatus('mandatory')
if mibBuilder.loadTexts: clientDumpService.setDescription("Control for allowing dump service for the client. Corresponds directly to the value labeled 'Dump' in the MANAGER LOCAL, MANAGER GLOBAL, and MANAGER NODE displays.")
namedTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 1, 10), )
if mibBuilder.loadTexts: namedTable.setStatus('mandatory')
if mibBuilder.loadTexts: namedTable.setDescription('A list of named client data base entries. The number of entries is given by basicClientNumber.')
namedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1), ).setIndexNames((0, "MRVINREACH", "namedName"))
if mibBuilder.loadTexts: namedEntry.setStatus('mandatory')
if mibBuilder.loadTexts: namedEntry.setDescription('Parameter values for a named client data base entry.')
namedIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 1), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: namedIdentificationType.setStatus('mandatory')
if mibBuilder.loadTexts: namedIdentificationType.setDescription("The type of identification value in namedIdentification. Corresponds directly to MANAGER NODE, MANAGER GLOBAL, and MANAGER LOCAL, and the value labeled 'Ethernet Address' in the MANAGER NODE display or 'Ethernet Address', 'Device', and 'Global Devices' or 'Local Devices' in the MANAGER GLOBAL and LOCAL displays.")
namedIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: namedIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: namedIdentification.setDescription("Identification of the client, either a hardware type or an Ethernet address, depending on namedIdentificationType. Corresponds directly to MANAGER NODE, MANAGER GLOBAL, and MANAGER LOCAL, and the value labeled 'Ethernet Address' in the MANAGER NODE display or 'Ethernet Address', 'Device', and 'Global Devices' or 'Local Devices' in the MANAGER GLOBAL and LOCAL displays.")
namedEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: namedEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: namedEntryStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry, which corresponds directly to the PURGE LOCAL, PURGE GLOBAL, and PURGE NODE commands. Actual removal of the entry is implementation specific.")
namedName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: namedName.setStatus('mandatory')
if mibBuilder.loadTexts: namedName.setDescription("A name that may be used to identify the client. Corresponds directly to the value labeled 'Name' in the MANAGER NODE display.")
namedLoadFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: namedLoadFile.setStatus('mandatory')
if mibBuilder.loadTexts: namedLoadFile.setDescription("The file with the client's load image. Corresponds directly to the value labeled 'Load File' in the MANAGER LOCAL, MANAGER GLOBAL, and MANAGER NODE displays.")
namedDiagnosticFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: namedDiagnosticFile.setStatus('mandatory')
if mibBuilder.loadTexts: namedDiagnosticFile.setDescription("The file with the client's diagnostic test image. Corresponds directly to the value labeled 'Diag File' in the MANAGER LOCAL, MANAGER GLOBAL, and MANAGER NODE displays.")
namedLoadService = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: namedLoadService.setStatus('mandatory')
if mibBuilder.loadTexts: namedLoadService.setDescription("Control for allowing load service for the client. Corresponds directly to the value labeled 'Load' in the MANAGER LOCAL, MANAGER GLOBAL, and MANAGER NODE displays.")
namedDumpService = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: namedDumpService.setStatus('mandatory')
if mibBuilder.loadTexts: namedDumpService.setDescription("Control for allowing dump service for the client. Corresponds directly to the value labeled 'Dump' in the MANAGER LOCAL, MANAGER GLOBAL, and MANAGER NODE displays.")
xEventTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 1, 11), )
if mibBuilder.loadTexts: xEventTable.setStatus('mandatory')
if mibBuilder.loadTexts: xEventTable.setDescription('A list of event entries. The number of entries is given by basicEventNumber.')
xEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 1, 11, 1), ).setIndexNames((0, "MRVINREACH", "xEventIndex"))
if mibBuilder.loadTexts: xEventEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xEventEntry.setDescription('Parameter values for a event entry.')
xEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xEventIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xEventIndex.setDescription('In identification number for an event. The value 1 indicates the oldest event in the file, with subsequent numbers indicating sequential events. The event text for a given number may change as a circular event log wraps over its beginning. Corresponds directly to the relative position of an event in the MANAGER EVENTS display.')
xEventText = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xEventText.setStatus('mandatory')
if mibBuilder.loadTexts: xEventText.setDescription('The text of the event, including date, time and other information. Corresponds directly to the individual event text in the MANAGER EVENTS display.')
basicDeviceNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicDeviceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicDeviceNumber.setDescription("The system's number of mass-storage devices.")
deviceTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 1, 13), )
if mibBuilder.loadTexts: deviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: deviceTable.setDescription('A list of device entries. The number of entries is given by basicDeviceNumber.')
deviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1), ).setIndexNames((0, "MRVINREACH", "deviceIndex"))
if mibBuilder.loadTexts: deviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: deviceEntry.setDescription('Parameter values for a device entry.')
deviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: deviceIndex.setDescription('In identification number for a device, in the range 1 to basicDeviceNumber')
deviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceName.setStatus('mandatory')
if mibBuilder.loadTexts: deviceName.setDescription("A name by which the device is known in other displays, such as 'C1' or 'D2'.")
deviceDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDescr.setStatus('mandatory')
if mibBuilder.loadTexts: deviceDescr.setDescription("Details of the device type, including, for example, size, manufacturer, Flash versus RAM, and such. Corresponds directly to the value labeled 'Device Type: in the MANAGER DEVICE STATUS display.")
deviceOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("format", 3), ("idle", 4), ("erase", 5), ("paramStore", 6), ("unpack", 7), ("loadingClient", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceOperation.setStatus('mandatory')
if mibBuilder.loadTexts: deviceOperation.setDescription("Current operational state of the device. Corresponds directly the value labeled 'Device Operation:' in the MANAGER DEVICE STATUS display.")
deviceFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unformatted", 1), ("formatted", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFormat.setStatus('mandatory')
if mibBuilder.loadTexts: deviceFormat.setDescription("Formatting status of the device. Corresponds directly the presence of one of the value labels under the label 'Device Status:' in the MANAGER DEVICE STATUS display.")
deviceProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("write-enabled", 1), ("write-protected", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceProtection.setStatus('mandatory')
if mibBuilder.loadTexts: deviceProtection.setDescription("Write-protect status of the device. Corresponds directly the presence of one of the value labels under the label 'Device Status:' in the MANAGER DEVICE STATUS display.")
deviceFormatMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceFormatMedium.setStatus('mandatory')
if mibBuilder.loadTexts: deviceFormatMedium.setDescription("Control to cause formatting of the medium in the device. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' causes the device to be formatted. Corresponds directly to the FORMAT DEVICE command.")
deviceGetFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2), ("abort", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceGetFile.setStatus('mandatory')
if mibBuilder.loadTexts: deviceGetFile.setDescription("Control to cause getting a file to the device from a remote host system. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' causes the get to be attempted. Corresponds directly to the GET DEVICE command. When set to 'execute', the objects deviceGetFileHostIdentificationType, deviceGetFileHostIdentification, deviceGetFileName and deviceGetFileArea must be somewhere in the same set request message.")
deviceGetFileHostIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 9), AddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceGetFileHostIdentificationType.setStatus('mandatory')
if mibBuilder.loadTexts: deviceGetFileHostIdentificationType.setDescription("The type of identification value in deviceIdentification. Corresponds indirectly to ADDRESS in the GET DEVICE command. This object may not be set outside the context of setting deviceGetFile to 'execute'. In response to a get-request or get-next-request, the value of this object is 'undefined'.")
deviceGetFileHostIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceGetFileHostIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: deviceGetFileHostIdentification.setDescription("Identification of the host to get the file from, with type depending on deviceIdentificationType. Corresponds directly to ADDRESS in the GET DEVICE command. This object may not be set outside the context of setting deviceGetFile to 'execute'. In response to a get-request or get-next-request, the value of this object is zero length.")
deviceGetFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceGetFileName.setStatus('mandatory')
if mibBuilder.loadTexts: deviceGetFileName.setDescription("The name of the file to get. Corresponds directly to LOAD FILE in the GET DEVICE command. This object may not be set outside the context of setting deviceGetFile to 'execute'. In response to a get-request or get-next-request, the value of this object is zero length.")
deviceGetFileArea = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceGetFileArea.setStatus('mandatory')
if mibBuilder.loadTexts: deviceGetFileArea.setDescription("The area number in which to put the file. Corresponds directly to AREA in the GET DEVICE command. If it is not relevant to the particular device, it is ignored. This object may not be set outside the context of setting deviceGetFile to 'execute'. In response to a get-request or get-next-request, the value of this object is zero.")
deviceFormatOption = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceFormatOption.setStatus('mandatory')
if mibBuilder.loadTexts: deviceFormatOption.setDescription("Formatting option to apply. Corresponds directly to the OPTION in the FORMAT DEVICE command. This object may not be set outside the context of setting deviceFormatMedium to 'execute'. In response to a get-request or get-next-request, the value of this object is zero.")
deviceFormatRedundantParams = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonredundant", 1), ("redundant", 2))).clone('redundant')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceFormatRedundantParams.setStatus('mandatory')
if mibBuilder.loadTexts: deviceFormatRedundantParams.setDescription("Control for creating redundant parameter storage areas when formatting. Corresponds directly to NONREDUNDANT in the FORMAT DEVICE command. This object may not be set outside the context of setting deviceFormatMedium to 'execute'. In response to a get-request or get-next-request, the value of this object is zero.")
devicePreviousStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 1, 13, 1, 15), DialogStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePreviousStatus.setStatus('mandatory')
if mibBuilder.loadTexts: devicePreviousStatus.setDescription("Result of the immediately previous concluded boot dialog. Corresponds directly to the value labeled 'Get File Previous Status:' in the SHOW CARD STATUS display.")
dumpService = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dumpService.setStatus('mandatory')
if mibBuilder.loadTexts: dumpService.setDescription("Control for allowing dump service for any client. Corresponds directly to DUMP and the value labeled 'Dump:' in the MANAGER CHARACTERISTICS display.")
dumpDrive = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dumpDrive.setStatus('mandatory')
if mibBuilder.loadTexts: dumpDrive.setDescription("Identification number of the disk drive where dumps are stored. Corresponds directly to DUMP DRIVE and the value labeled 'Dump Drive:' in the MANAGER CHARACTERISTICS display.")
dumpMerit = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dumpMerit.setStatus('mandatory')
if mibBuilder.loadTexts: dumpMerit.setDescription("Relative preference for this dump server over others. Corresponds directly to DUMP MERIT and the value labeled 'Dump Merit:' in the MANAGER CHARACTERISTICS display.")
dumpSize = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("small", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dumpSize.setStatus('mandatory')
if mibBuilder.loadTexts: dumpSize.setDescription("Type of dump file to keep. Corresponds directly to DUMP SIZE and the value labeled 'Dump Size:' in the MANAGER CHARACTERISTICS display.")
dumpCompleted = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpCompleted.setStatus('mandatory')
if mibBuilder.loadTexts: dumpCompleted.setDescription("The number of dumps completed since system initialization. Corresponds directly to the value labeled 'Dump Operations Completed:' in the MANAGER STATUS display.")
dumpActive = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpActive.setStatus('mandatory')
if mibBuilder.loadTexts: dumpActive.setDescription("The number of dumps in progress. Corresponds directly to the value labeled 'Currently Dumping:' in the MANAGER STATUS display.")
dumpFileNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpFileNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dumpFileNumber.setDescription("The number of dump files currently stored. Corresponds directly to the value labeled 'Network dump files' and 'files' in the MANAGER FILES display.")
dumpFileTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 2, 8), )
if mibBuilder.loadTexts: dumpFileTable.setStatus('mandatory')
if mibBuilder.loadTexts: dumpFileTable.setDescription('A list of dump file entries. The number of entries is given by dumpFileNumber.')
dumpFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 2, 8, 1), ).setIndexNames((0, "MRVINREACH", "dumpFileIdentificationType"), (0, "MRVINREACH", "dumpFileIdentification"))
if mibBuilder.loadTexts: dumpFileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dumpFileEntry.setDescription('Parameter values for a dump file entry.')
dumpFileIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 2, 8, 1, 1), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpFileIdentificationType.setStatus('mandatory')
if mibBuilder.loadTexts: dumpFileIdentificationType.setDescription("The type of identification value in dumpFileIdentification. Corresponds indirectly to a file name part in the section labeled 'Network dump files' in the MANAGER FILES display.")
dumpFileIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 2, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpFileIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: dumpFileIdentification.setDescription("Identification of the dump file, an Ethernet address, as indicated by dumpFileIdentificationType. Corresponds indirectly to a file name part in the section labeled 'Network dump files' in the MANAGER FILES display.")
dumpFileEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dumpFileEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dumpFileEntryStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry, which corresponds indirectly to the PURGE MANAGER DUMP FILES command. Actual removal of the entry is implementation specific.")
dumpFileCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 2, 8, 1, 4), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpFileCreation.setStatus('mandatory')
if mibBuilder.loadTexts: dumpFileCreation.setDescription("The time the dump file was created. Corresponds directly to a date and time in the section labeled 'Network dump files' in the MANAGER FILES display.")
dumpFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 2, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dumpFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: dumpFileSize.setDescription("The number of bytes stored in the dump file. Corresponds directly to the value labeled 'bytes' in the section labeled 'Network dump files' in the MANAGER FILES display.")
loadService = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadService.setStatus('mandatory')
if mibBuilder.loadTexts: loadService.setDescription("Control for allowing load service for any client. Corresponds directly to LOAD and the value labeled 'Load:' in the MANAGER CHARACTERISTICS display.")
loadMerit = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadMerit.setStatus('mandatory')
if mibBuilder.loadTexts: loadMerit.setDescription("Relative preference for this load server over others. Corresponds directly to LOAD MERIT and the value labeled 'Load Merit:' in the MANAGER CHARACTERISTICS display.")
loadCompleted = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadCompleted.setStatus('mandatory')
if mibBuilder.loadTexts: loadCompleted.setDescription("The number of loads completed since system initialization. Corresponds directly to the value labeled 'Load Operations Completed:' in the MANAGER STATUS display.")
loadActive = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadActive.setStatus('mandatory')
if mibBuilder.loadTexts: loadActive.setDescription("The number of loads in progress. Corresponds directly to the value labeled 'Currently Loading:' in the MANAGER STATUS display.")
loadFileNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 3, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFileNumber.setStatus('mandatory')
if mibBuilder.loadTexts: loadFileNumber.setDescription("The number of load files currently stored. Corresponds directly to the value labeled 'Load image files' and 'files' in the MANAGER FILES display.")
loadFileTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 3, 6), )
if mibBuilder.loadTexts: loadFileTable.setStatus('mandatory')
if mibBuilder.loadTexts: loadFileTable.setDescription('A list of load file entries. The number of entries is given by loadFileNumber.')
loadFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 3, 6, 1), ).setIndexNames((0, "MRVINREACH", "loadFileName"))
if mibBuilder.loadTexts: loadFileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: loadFileEntry.setDescription('Parameter values for a load file entry.')
loadFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 3, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFileName.setStatus('mandatory')
if mibBuilder.loadTexts: loadFileName.setDescription("The name of a load file. Corresponds directly to a file name part in the section labeled 'Load image files' in the MANAGER FILES display.")
loadFileCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 3, 6, 1, 2), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFileCreation.setStatus('mandatory')
if mibBuilder.loadTexts: loadFileCreation.setDescription("The time the load file was created. Corresponds directly to a date and time in the section labeled 'Load image files' in the MANAGER FILES display.")
loadFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: loadFileSize.setDescription("The number of bytes stored in the load file. Corresponds directly to the value labeled 'bytes' in the section labeled 'Load image files' in the MANAGER FILES display.")
loadFileSoftwareVersionType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("alpha", 1), ("beta", 2), ("production", 3), ("special", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFileSoftwareVersionType.setStatus('mandatory')
if mibBuilder.loadTexts: loadFileSoftwareVersionType.setDescription("The software version type of the image in the load file. Corresponds directly to a software version in the section labeled 'Load image files' in the MANAGER FILES display. alpha 'A': alpha test beta 'B': beta test production null: normal, production software special 'S': special, custom software ")
loadFileSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 3, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFileSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: loadFileSoftwareVersion.setDescription("The software version of the image in the load file. Corresponds directly to a software version in the section labeled 'Load image files' in the MANAGER FILES display. For example, the version display for loadFileSoftwareVersionType 'production' and loadFileSoftwareVersion '2.2.0.0' is 'V2.2'. The version display for loadFileSoftwareVersionType 'beta' and loadFileSoftwareVersion '3.1.0.4' is 'V3.1B4'.")
paramService = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramService.setStatus('mandatory')
if mibBuilder.loadTexts: paramService.setDescription("Control for allowing parameter storage service for any client. Corresponds directly to PARAMETER SERVICE and the value labeled 'Parameter Service:' in the MANAGER CHARACTERISTICS display.")
paramDefaultService = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramDefaultService.setStatus('mandatory')
if mibBuilder.loadTexts: paramDefaultService.setDescription("Control for allowing default parameter loading service for any client. Corresponds directly to PARAMETER DEFAULT SERVICE and the value labeled 'Parameter Default Service:' in the MANAGER CHARACTERISTICS display.")
paramDrive = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramDrive.setStatus('mandatory')
if mibBuilder.loadTexts: paramDrive.setDescription("Identification number of the disk drive where parameters are stored. Corresponds directly to PARAMETER DRIVE and the value labeled 'Parameter Drive:' in the MANAGER CHARACTERISTICS display.")
paramActive = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramActive.setStatus('mandatory')
if mibBuilder.loadTexts: paramActive.setDescription("The number of params in progress. Corresponds directly to the value labeled 'Currently Paraming:' in the MANAGER STATUS display.")
paramStorageActive = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramStorageActive.setStatus('mandatory')
if mibBuilder.loadTexts: paramStorageActive.setDescription("The number of parameter storage operations in progress. Corresponds directly to the value labeled 'Currently saving parameters:' in the MANAGER STATUS display.")
paramFileNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 6, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramFileNumber.setStatus('mandatory')
if mibBuilder.loadTexts: paramFileNumber.setDescription("The number of parameter files currently stored. Corresponds directly to the value labeled 'Parameter files' and 'files' in the MANAGER FILES display.")
paramFileTable = MibTable((1, 3, 6, 1, 4, 1, 33, 6, 4, 7), )
if mibBuilder.loadTexts: paramFileTable.setStatus('mandatory')
if mibBuilder.loadTexts: paramFileTable.setDescription('A list of param file entries. The number of entries is given by paramFileNumber.')
paramFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1), ).setIndexNames((0, "MRVINREACH", "paramFileIdentificationType"), (0, "MRVINREACH", "paramFileIdentification"))
if mibBuilder.loadTexts: paramFileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: paramFileEntry.setDescription('Parameter values for a param file entry.')
paramFileIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1, 1), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramFileIdentificationType.setStatus('mandatory')
if mibBuilder.loadTexts: paramFileIdentificationType.setDescription("The type of identification value in paramFileIdentification. Corresponds indirectly to a file name part in the section labeled 'Parameter files' in the MANAGER FILES display.")
paramFileIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramFileIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: paramFileIdentification.setDescription("Identification of the param file, an Ethernet address, as indicated by paramFileIdentificationType. Corresponds indirectly to a file name part in the section labeled 'Parameter files' in the MANAGER FILES display.")
paramFileEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramFileEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: paramFileEntryStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry, which corresponds indirectly to the PURGE MANAGER PARAMETER FILES command. Actual removal of the entry is implementation specific.")
paramFileWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1, 4), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramFileWrite.setStatus('mandatory')
if mibBuilder.loadTexts: paramFileWrite.setDescription("The time the parameter file was last written. Corresponds directly to a date and time in the section labeled 'Parameter files' in the MANAGER FILES display.")
paramFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: paramFileSize.setDescription("The number of bytes stored in the param file. Corresponds directly to the value labeled 'bytes' in the section labeled 'Parameter files' in the MANAGER FILES display.")
paramFileParameterVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 6, 4, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramFileParameterVersion.setStatus('mandatory')
if mibBuilder.loadTexts: paramFileParameterVersion.setDescription("The version number of the parameter data in the file. Corresponds directly to the value labeled 'ver' in the section labeled 'Parameter files' in the MANAGER FILES display.")
xChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16))
xChassisBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16, 1))
xSegment = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16, 2))
xPort = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16, 3))
xController = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16, 4))
xInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16, 5))
xSlotBootControl = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16, 6))
xSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16, 7))
xPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16, 8))
xFirmwareUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16, 9))
class NetworkType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("ethernet", 3), ("tokenRing", 4), ("fddi", 5), ("wan", 6), ("ethernetRepeater", 7), ("tokenRingConcentrator", 8), ("fddiConcentrator", 9), ("atm", 10), ("isdn", 11), ("switchplane", 12), ("switchedEthernet", 13))

class SerialNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 6)

class Letter(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))
    namedValues = NamedValues(("a", 1), ("b", 2), ("c", 3), ("d", 4), ("e", 5), ("f", 6), ("g", 7), ("h", 8), ("i", 9), ("j", 10), ("k", 11), ("l", 12), ("m", 13), ("n", 14), ("o", 15), ("p", 16), ("q", 17), ("r", 18), ("s", 19), ("t", 20), ("u", 21), ("v", 22), ("w", 23), ("x", 24), ("y", 25), ("z", 26))

basicBase802Address = MibScalar((1, 3, 6, 1, 4, 1, 33, 16, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicBase802Address.setStatus('mandatory')
if mibBuilder.loadTexts: basicBase802Address.setDescription('Base IEEE 802 global address for the chassis.')
basicSlot = MibScalar((1, 3, 6, 1, 4, 1, 33, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicSlot.setStatus('mandatory')
if mibBuilder.loadTexts: basicSlot.setDescription('Chassis slot number (slotIndex) of the system whose agent is supplying this MIB.')
basicSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicSlotNumber.setDescription('Number of slots in the chassis.')
basicNewBase802Address = MibScalar((1, 3, 6, 1, 4, 1, 33, 16, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicNewBase802Address.setStatus('mandatory')
if mibBuilder.loadTexts: basicNewBase802Address.setDescription("New base IEEE 802 global address for the chassis. Must be set in conjunction with featType 'changeEthernetAddress' and featKey from the MRV In-Reach System MIB.")
segmentTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 2, 1), )
if mibBuilder.loadTexts: segmentTable.setStatus('mandatory')
if mibBuilder.loadTexts: segmentTable.setDescription('A list of segment entries, one for each segment of each type on the chassis.')
segmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 2, 1, 1), ).setIndexNames((0, "MRVINREACH", "segmentType"), (0, "MRVINREACH", "segmentIndex"))
if mibBuilder.loadTexts: segmentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: segmentEntry.setDescription('Values for a chassis segment.')
segmentType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 2, 1, 1, 1), NetworkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: segmentType.setStatus('mandatory')
if mibBuilder.loadTexts: segmentType.setDescription('The segment type.')
segmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 2, 1, 1, 2), Letter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: segmentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: segmentIndex.setDescription('An index value that uniquely identifies a segment.')
portIOCardType = MibScalar((1, 3, 6, 1, 4, 1, 33, 16, 3, 1), IOType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIOCardType.setStatus('mandatory')
if mibBuilder.loadTexts: portIOCardType.setDescription('The hardware type of the I/O card in this slot.')
portIOCardSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 16, 3, 2), SerialNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIOCardSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: portIOCardSerialNumber.setDescription('The MRV In-Reach serial number of the I/O card in this slot.')
portIOCardOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 16, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("mismatch", 2), ("good", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIOCardOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: portIOCardOperStatus.setDescription('Status of the I/O card relative to the function card in this slot.')
portTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 3, 4), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
if mibBuilder.loadTexts: portTable.setDescription('A list of port entries, one for each port of each type on the slots I/O card.')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 3, 4, 1), ).setIndexNames((0, "MRVINREACH", "portType"), (0, "MRVINREACH", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portEntry.setDescription('Values for an I/O card port.')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 3, 4, 1, 1), NetworkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('mandatory')
if mibBuilder.loadTexts: portType.setDescription('The port type.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('mandatory')
if mibBuilder.loadTexts: portIndex.setDescription('An index value that uniquely identifies a port.')
controllerTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 4, 1), )
if mibBuilder.loadTexts: controllerTable.setStatus('mandatory')
if mibBuilder.loadTexts: controllerTable.setDescription('A list of controller entries, one for each controller of each type on the local system.')
controllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 4, 1, 1), ).setIndexNames((0, "MRVINREACH", "controllerType"), (0, "MRVINREACH", "controllerIndex"))
if mibBuilder.loadTexts: controllerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: controllerEntry.setDescription('Values for a controller.')
controllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 4, 1, 1, 1), NetworkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerType.setStatus('mandatory')
if mibBuilder.loadTexts: controllerType.setDescription('The controller type.')
controllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: controllerIndex.setDescription('An index value that uniquely identifies a controller.')
controllerNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 4, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controllerNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: controllerNetwork.setDescription('The instance identifier of the first object in the conceptual row entry for the segment, port, or controller this controller is to use, that is, segmentType, portType or controllerType.')
interfaceTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 5, 1), )
if mibBuilder.loadTexts: interfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: interfaceTable.setDescription('A list of interface entries, corresponding to the MIB II Interface group. These are directly equivalent to hardware network controllers, and must be the lowest numbered interfaces on the system.')
interfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 5, 1, 1), ).setIndexNames((0, "MRVINREACH", "interfaceIndex"))
if mibBuilder.loadTexts: interfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: interfaceEntry.setDescription('Values for an interface.')
interfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: interfaceIndex.setDescription('An index value that uniquely identifies an interface. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
interfaceNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 5, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: interfaceNetwork.setDescription('The instance identifier of the first object in the conceptual row entry for the segment, port, or controller this interface is to use, that is, segmentType, portType, or controllerType.')
slotBootControlTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 6, 1), )
if mibBuilder.loadTexts: slotBootControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlTable.setDescription('A list of slot boot control entries.')
slotBootControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1), ).setIndexNames((0, "MRVINREACH", "slotBootControlSlot"), (0, "MRVINREACH", "slotBootControlIndex"))
if mibBuilder.loadTexts: slotBootControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlEntry.setDescription('Values for a chassis slot.')
slotBootControlSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootControlSlot.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlSlot.setDescription('An index value that uniquely identifies a slot, defined the same as slotIndex.')
slotBootControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlIndex.setDescription('An index value that uniquely identifies a boot control entry, from 1 to the number of entries for the slot.')
slotBootControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlStatus.setDescription("The status of the entry. Set to 'disabled' to disable the entry.")
slotBootControlController = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlController.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlController.setDescription('The instance identifier of the first object in the conceptual row entry for the controller this entry selects for bootstrap operation, that is, controllerType. This entry must be compatible with slotBootControlNetwork, including being of the same network type. The value 0.0 indicates default action.')
slotBootControlNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 5), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlNetwork.setDescription('The instance identifier of the first object in the conceptual row entry for the segment or port this entry selects for bootstrap operation, that is, segmentType or portType. This entry must be compatible with slotBootControlController, including being of the same network type. The value 0.0 indicates default action.')
slotBootControlMopFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlMopFile.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlMopFile.setDescription('The software file name to request for down-line load of the server via MOP or XMOP.')
slotBootControlInternetFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlInternetFile.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlInternetFile.setDescription('The filename to request when loading an image via TFTP.')
slotBootControlInternetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlInternetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlInternetAddress.setDescription('The internet address of the system is to use for itself when loading via TFTP. The value 0.0.0.0 indicates default action.')
slotBootControlInternetServer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlInternetServer.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlInternetServer.setDescription('The internet address of the server to use when loading an image via TFTP. The value 0.0.0.0 indicates default action.')
slotBootControlInternetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlInternetGateway.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlInternetGateway.setDescription('The internet address of the gateway to use when loading an image via TFTP. The value 0.0.0.0 indicates default action.')
slotBootControlInternetDelimiter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlInternetDelimiter.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlInternetDelimiter.setDescription('The character separating the load file directory name from the file name.')
slotBootControlFlagTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 6, 2), )
if mibBuilder.loadTexts: slotBootControlFlagTable.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagTable.setDescription('A list of slot boot control source flag entries.')
slotBootControlFlagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1), ).setIndexNames((0, "MRVINREACH", "slotBootControlSlot"), (0, "MRVINREACH", "slotBootControlIndex"))
if mibBuilder.loadTexts: slotBootControlFlagEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagEntry.setDescription('Values for a boot control flag.')
slotBootControlFlagLoadBootpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagLoadBootpTftp.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagLoadBootpTftp.setDescription('Control for performing load over BOOTP/TFTP.')
slotBootControlFlagParamBootpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagParamBootpTftp.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagParamBootpTftp.setDescription('Control for performing parameter load over BOOTP/TFTP.')
slotBootControlFlagDumpBootpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagDumpBootpTftp.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagDumpBootpTftp.setDescription('Control for performing dump over BOOTP/TFTP.')
slotBootControlFlagLoadTftpDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagLoadTftpDirect.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagLoadTftpDirect.setDescription('Control for performing load over direct TFTP.')
slotBootControlFlagParamTftpDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagParamTftpDirect.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagParamTftpDirect.setDescription('Control for performing parameter load over direct TFTP.')
slotBootControlFlagDumpTftpDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagDumpTftpDirect.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagDumpTftpDirect.setDescription('Control for performing dump over direct TFTP.')
slotBootControlFlagLoadLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagLoadLocal.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagLoadLocal.setDescription('Control for performing load from a local device.')
slotBootControlFlagParamLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagParamLocal.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagParamLocal.setDescription('Control for performing parameter load from a local device.')
slotBootControlFlagDumpLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagDumpLocal.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagDumpLocal.setDescription('Control for performing dump from a local device.')
slotBootControlFlagLoadMop = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagLoadMop.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagLoadMop.setDescription("Control for performing load over Digital's MOP.")
slotBootControlFlagParamMop = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagParamMop.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagParamMop.setDescription("Control for performing parameter load over Digital's MOP.")
slotBootControlFlagDumpMop = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagDumpMop.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagDumpMop.setDescription("Control for performing dump over Digital's MOP.")
slotBootControlFlagLoadXmop = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagLoadXmop.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagLoadXmop.setDescription('Control for performing load over MRV In-Reach extended MOP.')
slotBootControlFlagParamXmop = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagParamXmop.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagParamXmop.setDescription('Control for performing parameter load over MRV In-Reach extended MOP.')
slotBootControlFlagDumpXmop = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagDumpXmop.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagDumpXmop.setDescription('Control for performing dump over MRV In-Reach extended MOP.')
slotBootControlFlagLoadRarpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagLoadRarpTftp.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagLoadRarpTftp.setDescription('Control for performing load over RARP/TFTP.')
slotBootControlFlagParamRarpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagParamRarpTftp.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagParamRarpTftp.setDescription('Control for performing parameter load over RARP/TFTP.')
slotBootControlFlagDumpRarpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagDumpRarpTftp.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlFlagDumpRarpTftp.setDescription('Control for performing dump over RARP/TFTP.')
slotBootControlStorageTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 6, 3), )
if mibBuilder.loadTexts: slotBootControlStorageTable.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlStorageTable.setDescription('A list of slot boot control Storage entries.')
slotBootControlStorageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 6, 3, 1), ).setIndexNames((0, "MRVINREACH", "slotBootControlStorageClientSlot"), (0, "MRVINREACH", "slotBootControlStorageServerSlot"))
if mibBuilder.loadTexts: slotBootControlStorageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlStorageEntry.setDescription('Values for a chassis slot.')
slotBootControlStorageClientSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootControlStorageClientSlot.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlStorageClientSlot.setDescription('An index value that uniquely identifies a slot, defined the same as slotIndex.')
slotBootControlStorageServerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootControlStorageServerSlot.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlStorageServerSlot.setDescription('An index value that uniquely identifies the slot in which the Storage record resides, with the same values as slotIndex.')
slotBootControlStorageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("present", 1), ("failed", 2), ("ok", 3), ("notpresent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootControlStorageStatus.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlStorageStatus.setDescription('The status of the entry.')
slotBootControlStorageFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootControlStorageFailures.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootControlStorageFailures.setDescription('The number of times a read from or write to a given Storage location failed')
slotTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 7, 1), )
if mibBuilder.loadTexts: slotTable.setStatus('mandatory')
if mibBuilder.loadTexts: slotTable.setDescription('A list of slot entries.')
slotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1), ).setIndexNames((0, "MRVINREACH", "slotIndex"))
if mibBuilder.loadTexts: slotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slotEntry.setDescription('Values for a chassis slot.')
slotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slotIndex.setDescription('An index value that uniquely identifies a slot, in the range 0 to basicSlotNumber, where the value 0 indicates the same slot as basicSlot. As the objects found at instance zero are duplicates, that instance does not appear in responses a get-next, that is, the lowest numbered slotIndex returned by get-next is 1.')
slotAdminAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("reset", 2), ("resetHold", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotAdminAction.setStatus('mandatory')
if mibBuilder.loadTexts: slotAdminAction.setDescription("Control to cause reset of the system in a slot. When read, the value is always 'ready'. Setting to 'reset' or 'resetHold' causes a single attempt to take that action, but does not ensure transition to any particular value of slotOperStatus.")
slotOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 64, 65, 66, 67, 68, 69))).clone(namedValues=NamedValues(("loadRequested", 1), ("loading", 2), ("dumpRequested", 3), ("dumping", 4), ("paramRequested", 5), ("paramLoading", 6), ("running", 7), ("initializing", 8), ("attended", 9), ("internal10", 10), ("internal11", 11), ("inhibited", 12), ("maxserverCard", 13), ("invalidConfigStorage", 14), ("securityLockdown", 15), ("resetHold", 64), ("selfTest", 65), ("notResponding", 66), ("broken", 67), ("unknown", 68), ("notApplicable", 69)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: slotOperStatus.setDescription('Relative to the chassis, the current operating status of the system in the slot.')
slotSecondsSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotSecondsSinceReset.setStatus('mandatory')
if mibBuilder.loadTexts: slotSecondsSinceReset.setDescription('The number of seconds since the system in the slot was last reset by hardware or software.')
slotHardwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 5), HardwareType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotHardwareType.setStatus('mandatory')
if mibBuilder.loadTexts: slotHardwareType.setDescription('The type of hardware in the slot.')
slotHardwareSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 6), SerialNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotHardwareSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: slotHardwareSerialNumber.setDescription('The MRV In-Reach serial number of the function card hardware in this slot.')
slotHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotHardwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: slotHardwareRevision.setDescription('This revision level of the function card hardware in the slot.')
slotIOCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 8), IOType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIOCardType.setStatus('mandatory')
if mibBuilder.loadTexts: slotIOCardType.setDescription('The hardware type of the I/O card in this slot.')
slotIOCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 9), SerialNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIOCardSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: slotIOCardSerialNumber.setDescription('The MRV In-Reach serial number of the I/O card in this slot.')
slotIOCardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("mismatch", 2), ("good", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIOCardOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: slotIOCardOperStatus.setDescription('Status of the I/O card relative to the function card in this slot.')
slotBootstrapFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootstrapFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootstrapFirmwareRevision.setDescription('The firmware revision level of the bootstrap ROM installed in the system in the slot.')
slotElementalFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotElementalFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: slotElementalFirmwareRevision.setDescription('The firmware revision level of the minimal function ROM (management bus microprocessor) installed in the system in the slot.')
slotMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: slotMemorySize.setDescription('The number of bytes of memory installed in the system in the slot.')
slotLedNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotLedNumber.setStatus('mandatory')
if mibBuilder.loadTexts: slotLedNumber.setDescription('The number of LEDs on the system in the slot. A value of 0 indicates none, unknown, or status not readable.')
slotLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotLedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: slotLedStatus.setDescription('The status of the LEDs displayed on the front and back of the system in the slot. The first bit is the high-order bit of the first byte of the value, proceeding to the low-order bit, then to then next byte. On the system hardware, the first LED is at the top, left, front, proceeding left to right, top to bottom, and front to back.')
slotBase802Address = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBase802Address.setStatus('mandatory')
if mibBuilder.loadTexts: slotBase802Address.setDescription('Base IEEE 802 global address for the slot.')
slotIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: slotIpAddress.setDescription('An internet address to which the system in this slot might respond. May be one of many.')
slotPlus5Status = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("broken", 2), ("good", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotPlus5Status.setStatus('mandatory')
if mibBuilder.loadTexts: slotPlus5Status.setDescription('Status of the +5 volt power to the slot.')
slotPlus12Status = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("broken", 2), ("good", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotPlus12Status.setStatus('mandatory')
if mibBuilder.loadTexts: slotPlus12Status.setDescription('Status of the +12 volt power to the slot.')
slotMinus12Status = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("broken", 2), ("good", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMinus12Status.setStatus('mandatory')
if mibBuilder.loadTexts: slotMinus12Status.setDescription('Status of the -12 volt power to the slot.')
slotPlus5Watts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotPlus5Watts.setStatus('mandatory')
if mibBuilder.loadTexts: slotPlus5Watts.setDescription('Tenths of watts of +5 volt power currently drawn by the slot.')
slotPlus12Watts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotPlus12Watts.setStatus('mandatory')
if mibBuilder.loadTexts: slotPlus12Watts.setDescription('Tenths of watts of +12 volt power currently drawn by the slot.')
slotMinus12Watts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMinus12Watts.setStatus('mandatory')
if mibBuilder.loadTexts: slotMinus12Watts.setDescription('Tenths of watts of -12 volt power currently drawn by the slot.')
slotIOCardHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIOCardHardwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: slotIOCardHardwareVersion.setDescription('Version number of I/O card in the slot.')
slotRestoreNVS = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotRestoreNVS.setStatus('mandatory')
if mibBuilder.loadTexts: slotRestoreNVS.setDescription("Setting to 'execute' causes the non-volatile parameter storage to be restored from an installed memory card. Setting to 'ready' has no effect.")
slotDefaultNVS = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotDefaultNVS.setStatus('mandatory')
if mibBuilder.loadTexts: slotDefaultNVS.setDescription("Setting to 'execute' causes non-volatile stored parameters to be reset to factory defaults. Setting to 'ready' has no effect.")
slotBootTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 7, 2), )
if mibBuilder.loadTexts: slotBootTable.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootTable.setDescription('A list of slot bootstrap status entries. A given slot has an entry in this table only when slotOperStatus is one of: loadRequested, loading, dumpRequested, dumping, paramRequested, paramLoading')
slotBootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1), ).setIndexNames((0, "MRVINREACH", "slotBootIndex"))
if mibBuilder.loadTexts: slotBootEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootEntry.setDescription('Bootstrap status values for a chassis slot.')
slotBootIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootIndex.setDescription('An index value that uniquely identifies a slot, defined the same as slotIndex.')
slotBootIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootIfIndex.setDescription('An index value that uniquely identifies the interface in use for bootstrap functions. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
slotBootNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootNetwork.setDescription('The instance identifier of the first object in the conceptual row entry for the segment or port this interface is using, that is, segmentType or portType.')
slotBootProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("mop", 3), ("xmop", 4), ("rarpTftp", 5), ("bootpTftp", 6), ("tftp", 7), ("local", 8), ("managementBus", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootProtocol.setDescription('The protocol in use for bootstrap operation.')
slotBoot802Address = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBoot802Address.setStatus('mandatory')
if mibBuilder.loadTexts: slotBoot802Address.setDescription('IEEE 802 global address in use for bootstrap operation.')
slotBootAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 6), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootAddressType.setDescription('The type of network address contained in slotBootAddress.')
slotBootAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootAddress.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootAddress.setDescription('The network address the system in the slot is using to identify itself for bootstrap operation.')
slotBootServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 8), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootServerAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootServerAddressType.setDescription('The type of network address contained in slotBootServerAddress.')
slotBootServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootServerAddress.setDescription('The network address of the system supplying bootstrap services to the system in the slot.')
slotBootGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootGatewayAddress.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootGatewayAddress.setDescription('The internet address of the router in use for bootstrap operation.')
slotBootFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootFileName.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootFileName.setDescription('The full name of the file in use for bootstrap operation.')
slotBootBlockNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootBlockNumber.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootBlockNumber.setDescription('The current block number being transferred for bootstrap operation, zero if unknown or not applicable.')
slotBootCrashCode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootCrashCode.setStatus('mandatory')
if mibBuilder.loadTexts: slotBootCrashCode.setDescription('If slotOperStatus is dumpRequested or dumping, a code number to identify the crash reason; otherwise zero length.')
slotControllerTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 7, 3), )
if mibBuilder.loadTexts: slotControllerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slotControllerTable.setDescription('A list of controller entries, one for each controller of each type in each slot.')
slotControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 7, 3, 1), ).setIndexNames((0, "MRVINREACH", "slotControllerType"), (0, "MRVINREACH", "slotControllerIndex"))
if mibBuilder.loadTexts: slotControllerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slotControllerEntry.setDescription('Values for a controller.')
slotControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 3, 1, 1), NetworkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotControllerType.setStatus('mandatory')
if mibBuilder.loadTexts: slotControllerType.setDescription('The controller type.')
slotControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotControllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slotControllerIndex.setDescription('An index value that uniquely identifies a controller.')
slotControllerNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotControllerNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: slotControllerNetwork.setDescription('The instance identifier of the first object in the conceptual row entry for the segment or port this controller is to use, that is, segmentType or portType.')
powerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 8, 1), )
if mibBuilder.loadTexts: powerSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyTable.setDescription('A list of power supply entries.')
powerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1), ).setIndexNames((0, "MRVINREACH", "powerSupplyIndex"))
if mibBuilder.loadTexts: powerSupplyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyEntry.setDescription('Values for a chassis power supply.')
powerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyIndex.setDescription('An index value that uniquely identifies a power supply, in the range 1 to the number of power supply slots in the chassis.')
powerSupplyAdminAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("reset", 2), ("resetHold", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSupplyAdminAction.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyAdminAction.setDescription("Control to cause reset of the power supply. When read, the value is always 'ready'. Setting to 'reset' or 'resetHold' causes a single attempt to take that action, but does not ensure transition to any particular value of powerSupplyRedundancyStatus.")
powerSupplyFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyFirmwareVersion.setDescription('Version number of power supply firmware.')
powerSupplyRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("redundant", 3), ("engaged", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyRedundancyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyRedundancyStatus.setDescription('The current redundancy status of the power supply.')
powerSupplyPlus5Status = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyPlus5Status.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyPlus5Status.setDescription('Status of the +5 volt power from the power supply.')
powerSupplyPlus12Status = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyPlus12Status.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyPlus12Status.setDescription('Status of the +12 volt power from the power supply.')
powerSupplyMinus12Status = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyMinus12Status.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyMinus12Status.setDescription('Status of the -12 volt power from the power supply.')
powerSupplyThermalWarningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyThermalWarningStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyThermalWarningStatus.setDescription('The current thermal warning status of the power supply.')
powerSupplyThermalShutdownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyThermalShutdownStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyThermalShutdownStatus.setDescription('The current thermal shutdown status of the power supply.')
powerSupplyFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyFanStatus.setDescription("The current status of the power supply's fan.")
powerSupplyHardwareInhibitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyHardwareInhibitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyHardwareInhibitStatus.setDescription("The current status of the power supply's hardware inhibit.")
powerSupplyPlus5History = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyPlus5History.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyPlus5History.setDescription('History of the +5 volt power from the power supply.')
powerSupplyPlus12History = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyPlus12History.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyPlus12History.setDescription('History of the +12 volt power from the power supply.')
powerSupplyMinus12History = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyMinus12History.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyMinus12History.setDescription('History of the -12 volt power from the power supply.')
powerSupplyThermalWarningHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyThermalWarningHistory.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyThermalWarningHistory.setDescription('The thermal warning history of the power supply.')
powerSupplyThermalShutdownHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyThermalShutdownHistory.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyThermalShutdownHistory.setDescription('The thermal shutdown history of the power supply.')
powerSupplyFanHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyFanHistory.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyFanHistory.setDescription("The status history of the power supply's fan.")
powerSupplyHardwareInhibitHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyHardwareInhibitHistory.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyHardwareInhibitHistory.setDescription("The status history of the power supply's hardware inhibit.")
powerSupplyPlus5Volts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyPlus5Volts.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyPlus5Volts.setDescription('In hundredths, volts of +5 volt power currently provided by the power supply. A value of 0 indicates unknown.')
powerSupplyPlus12Volts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyPlus12Volts.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyPlus12Volts.setDescription('In hundredths, volts of +12 volt power currently provided by the power supply. A value of 0 indicates unknown.')
powerSupplyMinus12Volts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyMinus12Volts.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyMinus12Volts.setDescription('In hundredths, volts of -12 volt power currently provided by the power supply. A value of 0 indicates unknown.')
powerSupplyWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyWatts.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyWatts.setDescription('Watts of power currently drawn from this power supply. A value of 0 indicates unknown.')
powerSupplyWattsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyWattsMax.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyWattsMax.setDescription('Maximum watts of power available from this power supply. A value of 0 indicates unknown.')
powerSupplyChassisWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyChassisWatts.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyChassisWatts.setDescription('Total watts of power currently drawn by the entire chassis. A value of 0 indicates unknown.')
powerSupplyChassisWattsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyChassisWattsMax.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyChassisWattsMax.setDescription('Total maximum watts of power available from all the power supplies in the chassis. A value of 0 indicates unknown.')
powerSupplyHardwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ps130", 2), ("bb190", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyHardwareType.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplyHardwareType.setDescription('The type of power supply.')
firmwareUpdateTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 9, 1), )
if mibBuilder.loadTexts: firmwareUpdateTable.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareUpdateTable.setDescription('Table of descriptive and status information concerning the writing of firmware to a target I/O card.')
firmwareUpdateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 9, 1, 1), ).setIndexNames((0, "MRVINREACH", "firmwareUpdateSlotIndex"))
if mibBuilder.loadTexts: firmwareUpdateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareUpdateEntry.setDescription('An entry in the table concerning the writing of firmware to a target I/O card.')
firmwareUpdateSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareUpdateSlotIndex.setDescription('This variable identifies the slot to which is to be the target of the firmware update.')
firmwareUpdateDefaultFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateDefaultFileName.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareUpdateDefaultFileName.setDescription('This variable when read will obtain the default file name from the target.')
firmwareUpdateFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 9, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateFileName.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareUpdateFileName.setDescription('This variable contains the name of the file to be read from the flash memory card and written to the target.')
firmwareUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateStatus.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareUpdateStatus.setDescription("This variable is used to start the update process. The agent always 'ready' for this value. Setting this value to 'execute' causes the agent to write the file specified by firmwareUpdateFileName to be written to the taget. Setting this value to 'execute' when firmwareUpdateFileName has not been written or when firmwareUpdateState is 'writing' causes bad value to be returned.")
firmwareUpdateState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("writing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateState.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareUpdateState.setDescription("This variable indicates the current state of firmware update, 'idle' indicates that firmware update may be initiated, and 'writing' indicates that an update is in process.")
firmwareUpdateCompletionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("noTarget", 3), ("busError", 4), ("badFileName", 5), ("targetError", 6), ("timeout", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateCompletionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareUpdateCompletionStatus.setDescription("This variable indicates the completion status of the the last firmware update attempt. 'none' indicates that no firmware update has yet been attempted.")
firmwareUpdateMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("card", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateMethod.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareUpdateMethod.setDescription('This variable indicates the method of update of the firmware update attempt. ')
characterDep = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 2))
xCharacter = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13))
xBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 1))
xQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 2))
xMenu = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 3))
xNetLogin = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 4))
xDial = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 5))
xSessionLog = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 6))
xCcl = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 7))
xBroadcastGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 8))
xPingHosts = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 9))
basicBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: basicBroadcast.setDescription("Control for user ability to broadcast messages to other local ports. Corresponds directly to SERVER BROADCAST and the presence of the label 'Broadcast' following the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display.")
basicErrorReport = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicErrorReport.setStatus('mandatory')
if mibBuilder.loadTexts: basicErrorReport.setDescription("Control for server display of an error when the user gives an unsupported command. Corresponds directly to SERVER REPORT ERRORS and the presence of the label 'Report Errors' following the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display.")
basicLock = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicLock.setStatus('mandatory')
if mibBuilder.loadTexts: basicLock.setDescription("Control for user ability to use a password to protect a logged in terminal from other users. Corresponds directly to SERVER LOCK and the presence of the label 'Lock' following the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display.")
basicInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 480))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicInactivityTimer.setStatus('mandatory')
if mibBuilder.loadTexts: basicInactivityTimer.setDescription("Number of minutes a terminal may remain logged in with no sessions, no input or output, and no modem transitions. Corresponds directly to SERVER INACTIVITY TIMER and the value labeled 'Inactivity Timer:' in the SERVER CHARACTERISTICS display.")
basicPasswordRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPasswordRetryLimit.setStatus('mandatory')
if mibBuilder.loadTexts: basicPasswordRetryLimit.setDescription("Number of times the server allows a user to retry an incorrect password. Corresponds directly to SERVER PASSWORD LIMIT and the value labeled 'Password Limit:' in the SERVER CHARACTERISTICS display.")
basicPrivilegedPassword = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPrivilegedPassword.setStatus('mandatory')
if mibBuilder.loadTexts: basicPrivilegedPassword.setDescription('The password a user must enter to become privileged. For security reasons, reading this object always returns a zero-length value. Corresponds directly to SERVER PRIVILEGED PASSWORD.')
basicLoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicLoginPassword.setStatus('mandatory')
if mibBuilder.loadTexts: basicLoginPassword.setDescription('The password a user must enter to be given the opportunity to log in. For security reasons, reading this object always returns a zero-length value. Corresponds directly to SERVER LOGIN PASSWORD.')
basicLoginPrompt = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicLoginPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: basicLoginPrompt.setDescription('The text string the server displays to prompt a user for the login password. Corresponds directly to SERVER LOGIN PROMPT.')
basicWelcome = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicWelcome.setStatus('mandatory')
if mibBuilder.loadTexts: basicWelcome.setDescription("The text string the server displays before attempting to log in a user. Corresponds directly to SERVER WELCOME and the value labeled 'Welcome:' in the SERVER CHARACTERISTICS display.")
basicActivePorts = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicActivePorts.setStatus('mandatory')
if mibBuilder.loadTexts: basicActivePorts.setDescription("The number of ports with connected sessions or logged in users. Corresponds directly to the value labeled 'Active Ports:' and 'Cur' in the SERVER STATUS display.")
basicActivePortsHigh = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicActivePortsHigh.setStatus('mandatory')
if mibBuilder.loadTexts: basicActivePortsHigh.setDescription("The highest value of basicActivePorts since system initialization. Corresponds directly to the value labeled 'Active Ports:' and 'High' in the SERVER STATUS display.")
basicActiveUsers = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicActiveUsers.setStatus('mandatory')
if mibBuilder.loadTexts: basicActiveUsers.setDescription("The number of logged in users. Corresponds directly to the value labeled 'Active Users:' and 'Cur' in the SERVER STATUS display.")
basicActiveUsersHigh = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicActiveUsersHigh.setStatus('mandatory')
if mibBuilder.loadTexts: basicActiveUsersHigh.setDescription("The highest value of basicActiveUsers since system initialization. Corresponds directly to the value labeled 'Active Users:' and 'High' in the SERVER STATUS display.")
basicSessions = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicSessions.setStatus('mandatory')
if mibBuilder.loadTexts: basicSessions.setDescription("The total number of connected sessions. Corresponds directly to the value labeled 'Connected Sessions:' and 'Cur' in the SERVER STATUS display.")
basicSessionsHigh = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicSessionsHigh.setStatus('mandatory')
if mibBuilder.loadTexts: basicSessionsHigh.setDescription("The highest value of basicSessions since system initialization. Corresponds directly to the value labeled 'Connected Sessions:' and 'High' in the SERVER STATUS display.")
basicSessionsLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSessionsLimit.setStatus('mandatory')
if mibBuilder.loadTexts: basicSessionsLimit.setDescription("The maximum total number of sessions that can simultaneously be connected to the system. A value of -1 indicates no limit up to available dynamic system memory. Corresponds directly to SERVER SESSION LIMIT and the value labeled 'Connected Sessions:' and 'Max' in the SERVER STATUS display.")
basicPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 17), )
if mibBuilder.loadTexts: basicPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortTable.setDescription('A list of basic character port entries.')
basicPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1), ).setIndexNames((0, "MRVINREACH", "basicPortIndex"))
if mibBuilder.loadTexts: basicPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortEntry.setDescription('Basic parameter values for a port.')
basicPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the standard Character MIB.')
basicPortDefaultDestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dedicated", 1), ("preferred", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDestAction.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortDefaultDestAction.setDescription("The action to take relative to basicPortDefaultDestName. Corresponds directly to PORT DEDICATED/PREFERRED SERVICE and the label 'Dedicated/Preferred Service:' in the PORT CHARACTERISTICS display.")
basicPortDefaultDestProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lat", 1), ("telnet", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDestProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortDefaultDestProtocol.setDescription('The session protocol to use with basicPortDefaultDestName. Corresponds directly to LAT/TELNET PORT DEDICATED/PREFERRED SERVICE.')
basicPortDefaultDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDestName.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortDefaultDestName.setDescription("The default name to use in forming a connection when no other name is specified. Corresponds directly to PORT DEDICATED/PREFERRED SERVICE and the value labeled 'Dedicated/Preferred Service:' in the PORT CHARACTERISTICS display. If the value of basicPortDefaultDestProtocol is 'telnet', an Internet port number may be included on the end of the name, delimited with a colon (':'). If the value of basicPortDefaultDestProtocol is not 'telnet', then the maximum length is 16.")
basicPortDefaultDestLATNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDestLATNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortDefaultDestLATNodeName.setDescription("A LAT node name to use with basicPortDefaultDestName. Corresponds directly to PORT DEDICATED/PREFERRED SERVICE NODE and the value labeled 'Node:' following the label 'Dedicated/Preferred Service:' in the PORT CHARACTERISTICS display. This object can have a non- zero-length value only if the value of basicPortDefaultDestProtocol is 'lat'.")
basicPortDefaultDestLATPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDestLATPortName.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortDefaultDestLATPortName.setDescription("A LAT port name to use with basicPortDefaultDestName. Corresponds directly to PORT DEDICATED/PREFERRED SERVICE NODE and the value labeled 'Node:' following the label 'Dedicated/Preferred Service:' in the PORT CHARACTERISTICS display. this object can hav a non-zero-length value only if the value if basicPortDefaultDestProtocol is 'lat'")
basicPortAutoConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAutoConnect.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortAutoConnect.setDescription("Control for automatic session connection. Corresponds directly to PORT AUTOCONNECT and the presence of the label 'Autoconnect' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
basicPortAutoLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAutoLogin.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortAutoLogin.setDescription("Control for automatic port login. Corresponds directly to PORT AUTODEDICATED and the presence of the label 'Autodedicated' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
basicPortBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortBroadcast.setDescription("Control for display of messages sent by users on other ports. Corresponds directly to PORT BROADCAST and the presence of the label 'Broadcast' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
basicPortConnectResume = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortConnectResume.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortConnectResume.setDescription("Control for behavior of a connection attempt to a destination where the port already has a connection. 'disabled' causes a new connection. 'enabled' causes the existing connection to become the active connection. Corresponds directly to PORT CONNECTRESUME and the presence of the label 'Connectresume' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
basicPortDialup = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDialup.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortDialup.setDescription("Defines whether the port should be considered as connected to a dialup line. 'enabled' means that it is. Corresponds directly to PORT DIALUP and the presence of the label 'Dial Up' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display. This object is not available on units that do not support modem signals (ie 2220).")
basicPortIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 480))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortIdleTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortIdleTimeout.setDescription("The number of minutes the system will allow a session to have no activity before automatically disconnecting it. A value of -1 indicates no timeout. Zero is not a valid value. Corresponds directly to PORT IDLE TIMEOUT and the value labeled 'Idle Timeout:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicPortInactivityLogout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortInactivityLogout.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortInactivityLogout.setDescription("Control for the system automatically logging the port out when it has no sessions, no local activity, and no modem signal changes for the time period specified by basicInactivityTimer. Corresponds directly to PORT INACTIVITY LOGOUT and the presence of the label 'Inactivity Logout' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
basicPortLossNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortLossNotification.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortLossNotification.setDescription("Control for the system sending a Bell character to the port when it looses an input character due to an overrun or data error. Corresponds directly to PORT LOSS NOTIFICATION and the presence of the label 'Loss Notification' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
basicPortMessageCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortMessageCodes.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortMessageCodes.setDescription("Control for including error numbers in error messages displayed on the port. Corresponds directly to PORT MESSAGE CODES and the presence of the label 'Message Codes' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
basicPortMultisessions = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortMultisessions.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortMultisessions.setDescription("Control for running the multisession line protocol between the port and the locally-connected terminal. Corresponds directly to PORT MULTISESSIONS and the presence of the label 'Multisessions' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
basicPortDefaultUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultUserName.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortDefaultUserName.setDescription("Default user name to use for automatically logging in the port. Corresponds directly to PORT USERNAME and the value labeled 'Port n:' in the PORT CHARACTERISTICS display.")
basicPortVerification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortVerification.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortVerification.setDescription("Control for display of informational messages on the port when the user connects, disconnects, or switches a session. Corresponds directly to PORT VERIFICATION and the presence of the label 'Verification' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
basicPortDefaultProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 13))).clone(namedValues=NamedValues(("lat", 1), ("telnet", 2), ("anylat", 3), ("anytelnet", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortDefaultProtocol.setDescription("The session protocol to use when not otherwise specified. Corresponds directly to PORT RESOLVE SERVICE and the value labeled 'Resolve Service:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicPortLogins = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortLogins.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortLogins.setDescription("The number of logins on the port since system initialization. Corresponds directly to the value labeled 'Local Accesses:' in the PORT COUNTERS display.")
basicPortRemoteSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortRemoteSessions.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortRemoteSessions.setDescription("The number of remotely originating sessions to the port since system initialization. Corresponds directly to the value labeled 'Remote Accesses:' in the PORT COUNTERS display.")
basicPortIdleTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortIdleTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortIdleTimeouts.setDescription("The number of session disconnects due to expiration of basicPortIdleTimeout. Corresponds directly to the value labeled 'Idle Timeouts:' in the PORT COUNTERS display.")
basicPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("idle", 1), ("local", 2), ("waitInput", 3), ("executingCommand", 4), ("connecting", 5), ("checkConnect", 6), ("waitOutput", 7), ("connected", 8), ("disconnecting", 9), ("disconnect", 10), ("suspended", 11), ("locked", 12), ("permanent", 13), ("loginWait", 14), ("retryConnect", 15), ("connectWait", 16), ("logout", 17), ("login", 18), ("waitSession", 19), ("reset", 20), ("testServiceWait", 21), ("testServiceOut", 22), ("connectPassword", 23), ("waitLogout", 24), ("waitQueue", 25), ("cancelQueue", 26), ("autobaud", 27), ("available", 28), ("checkModem", 29), ("slip", 30), ("signalWait", 31), ("scriptSearch", 32), ("scriptLoad", 33), ("scriptRun", 34), ("dialback1", 35), ("dialback2", 36), ("dialback3", 37), ("xremote", 38), ("ppp", 39), ("cslip", 40), ("arapInit", 41), ("cclAnswer", 42), ("cclOriginate", 43), ("cclHangup", 44), ("kerberos", 45), ("securID", 46), ("arapUser", 47), ("arapDialback", 48), ("arapSearch", 49), ("arapLoad", 50), ("arapRead", 51), ("arapDialDone", 52), ("arapExit", 53), ("arapEnabling", 54), ("arapConnecting", 55), ("cclLoading", 56), ("cclLoadError", 57), ("cclLoadWaiting", 58), ("cclExecute", 59), ("cclDone", 60), ("apd", 61)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortStatus.setDescription("The current operational status of the port. Corresponds directly to the value labeled 'Status:' in the PORT STATUS display.")
basicPortLastInCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortLastInCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortLastInCharacter.setDescription("The character that most recently came into the port. Corresponds directly to the value labeled 'Last Char Input:' in the PORT STATUS display.")
basicPortLastOutCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortLastOutCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortLastOutCharacter.setDescription("The character that most recently went out of the port. Corresponds directly to the value labeled 'Last Char Output:' in the PORT STATUS display.")
basicPortActiveUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortActiveUserName.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortActiveUserName.setDescription("The user name currently logged into the port. Corresponds directly to the value by the port number and labeled 'Username' in the USERS display.")
basicPortDefaultSessionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("interactive", 1), ("binary", 2), ("binaryWithFlow", 3), ("transparent", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultSessionMode.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortDefaultSessionMode.setDescription("Data recognition mode when starting a session, with the following meanings: interactive locally recognize all controls binary recognize only session protocol (corresponds to PASSALL) binaryWithFlow recognize only XON and XOFF (corresponds to PASTHRU transparent recognize no data Corresponds directly to PORT DEFAULT SESSION MODE and the value labeled 'Default Session Mode:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicPortZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortZero.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortZero.setDescription("Control to zero counters for the port. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' causes the port's counters to be zeroed. Corresponds to the ZERO PORT command.")
basicPortZeroTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 29), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortZeroTime.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortZeroTime.setDescription("The number of hundredths of a second since the most recent zeroing of the port's counters, such as through execution of basicPortZero. Corresponds directly to the value labeled 'Seconds Since Zeroed:' in the PORT COUNTERS display.")
basicPortUnixCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("primary", 3), ("only", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortUnixCommands.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortUnixCommands.setDescription('Control to allow the user to use Unix-style commands the port.')
basicPortSessionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("interactive", 1), ("binary", 2), ("binaryWithFlow", 3), ("transparent", 4), ("noActiveSessions", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortSessionMode.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortSessionMode.setDescription('Data recognition mode for an active session, with the following meanings: interactive locally recognize all controls binary recognize only session protocol (corresponds to PASSALL) binaryWithFlow recognize only XON and XOFF (corresponds to PASTHRU transparent recognize no data noActiveSessions no sessions on this port. This object can be set to values of 1 to 4, but only if there is an active session on the port.')
basicPortRemoteDisconnectNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortRemoteDisconnectNotify.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortRemoteDisconnectNotify.setDescription('If enabled, a BELL (ctrl G) will be sent out the serial port when a remote session is disconnected and the port is logged out.')
basicPortDefaultDestControlled = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDestControlled.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortDefaultDestControlled.setDescription("A control to send preconfigured controlled port session strings when entering or exiting a session established to the basicPortDefaultDestName. Corresponds directly to the value labeled '(Controlled)' following the label 'Dedicated/Preferred Service:' in the PORT CHARACTERISTICS display.")
basicPortControlledPortLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortControlledPortLogin.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortControlledPortLogin.setDescription("A control string to send out the serial port upon port login. Corresponds to the hexadecimal code which is represented in ASCII following the label 'Controlled Port Login:' in the PORT CONTROLLED display.")
basicPortControlledPortLogout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortControlledPortLogout.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortControlledPortLogout.setDescription("A control string to send out the serial port upon port logout. Corresponds to the hexadecimal code which is represented in ASCII following the label 'Controlled Port Logout:' in the PORT CONTROLLED display.")
basicPortControlledSessionInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 36), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortControlledSessionInitialize.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortControlledSessionInitialize.setDescription("A control string to send out the serial port upon entering a session. Corresponds to the hexadecimal code which represented in ASCII following the label 'Controlled Session Initialize:' in the PORT CONTROLLED display.")
basicPortControlledSessionTerminate = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortControlledSessionTerminate.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortControlledSessionTerminate.setDescription("A control string to send out the serial port upon exiting a session. Corresponds to the hexadecimal code which is represented in ASCII following the label 'Controlled Session Terminate:' in the PORT CONTROLLED display.")
basicPortRloginTransparentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortRloginTransparentMode.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortRloginTransparentMode.setDescription("A control to pass x'ff' as binary data, not doubling x'ff'. Similar to basicPortSessionMode = transparent but for a rlogin session.")
basicPortLoginDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortLoginDuration.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortLoginDuration.setDescription("The amount of time in minutes that a port may remain logged in regardless of the activity on the port. The value 0 indicates that the timer is disabled. Corresponds directly to the value labeled 'Login Duration:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicPortOutboundSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortOutboundSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortOutboundSecurity.setDescription("Control to disable outbound security, which can be either Kerberos or SecureID, on a per port basis. Corresponds directly to the presence of the value 'OutboundSecurity' following the label 'Enabled Characteristics' in the PORT CHARACTERISTICS display.")
basicPortXonTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2550))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortXonTimer.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortXonTimer.setDescription("Indicates the number of seconds between successive 'XON's sent out a port. A zero signifies that the timer is disabled. Corresponds directly to the value labeled 'Xon Send Timer:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicPortDefaultDedicatedSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 168)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDefaultDedicatedSessionType.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortDefaultDedicatedSessionType.setDescription('This integer is interpreted as a bit mask that specifies the default session type for a dedicated service for this port. The bit numbers are: 1;service name, 2;node name, 3;port name, 4, telnet console; 5, rlogin; 6, bridge console; 7, chassis console.')
basicPortIdleTimeReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortIdleTimeReceive.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortIdleTimeReceive.setDescription("Control to restrict the basicPortIdleTimeout to apply to data received from the network and transmitted out the serial port. Data received by the serial port will not be considered activity. Corresponds directly to the value labeled 'Idle Time Receive Mode:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicPortIdleTimeTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortIdleTimeTransmit.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortIdleTimeTransmit.setDescription("Control to restrict the basicPortIdleTimeout to apply to data received from the serial port and transmitted out the LAN. Data received from the network will not count as activity. Corresponds directly to the value labeled 'Idle Time Transmit Mode:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicPortZeroDisconnectSession = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortZeroDisconnectSession.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortZeroDisconnectSession.setDescription('A control to disconnect a session at Port 0 when the password limit is reached.')
basicPortConsolePort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortConsolePort.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortConsolePort.setDescription('Control to configure this port as a console port. This control is only valid on those models with variable configuration ports. This object can only be set enabled; and doing so will disable basicPortSensor and basicPortAlarmControl. A set will only update the permanent database. Use a charPortReset for this change to take effect.')
basicPortLoginPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortLoginPassword.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortLoginPassword.setDescription('The password a user must enter to be given the opportunity to log in to a given port. For security reasons reading this object always returns a zero-length value. Corresponds directly to PORT LOGIN PASSWORD.')
basicPortSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortSensor.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortSensor.setDescription('Control to configure this port as a temperature and humidity sensor. This control is only valid on those models with variable configuration ports. This object can only be set enabled; and doing so will disable basicPortConsolePort and basicPortAlarmControl. A set will only update the permanent database. Use a charPortReset for this change to take effect.')
basicPortAlarmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmControl.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortAlarmControl.setDescription('Control to configure this port for alarm input and control output. This control is only valid on those models with variable configuration ports. This object can only be set enabled; and doing so will disable basicPortConsolePort and basicPortSensor. A set will only update the permanent database. Use a charPortReset for this change to take effect.')
basicPortCommandLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortCommandLogging.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortCommandLogging.setDescription("A control to toggle logging of commands at this port. Command input may be logged from direct terminal connections, session input from the LAN, or session output to the LAN. Corresponds directly to the presence of 'Command Logging' under the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display. The desired change will not take effect until the port is logged off.")
basicPortBreakSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortBreakSequence.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortBreakSequence.setDescription("A sequence of characters to be sent out the serial port on receipt of a Break from the network in lieu of a hardware break. The sequence entered by the user is converted into an octet string up to four bytes long to be sent out the serial port. For example, the user's representation of octal 2, or '\\002', takes four characters in basicPortBreakSequence; but only one byte in the string sent out the serial port.")
basicPortTl1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("hml", 2), ("mml", 3), ("mmlNoEcho", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortTl1Mode.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortTl1Mode.setDescription('Controls the TL1 mode of a port. Valid TL1 modes are human- to-machine language (hml), machine-to-machine language (mml), and MML without echo. MML is for direct connection to another TL1 device whereas HML provides human prompts. A change takes effect after logging out the port.')
basicPortTl1Console = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortTl1Console.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortTl1Console.setDescription('Controls whether this port becomes the TL1 console receiving and displaying autonomous reports of alarm events. A change takes effect after logging out the port.')
basicPortFallThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortFallThrough.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortFallThrough.setDescription("Control to allow a user to login to a port after RADIUS or SecurID authentication fails because the RADIUS servers or SecurID servers are unavailable. When a user is logged in via 'fallthrough', he is logged in to the port as a non-privileged user. The change takes effect after logging out the port.")
basicPortCommandLoggingSuppressControlCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortCommandLoggingSuppressControlCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortCommandLoggingSuppressControlCharacters.setDescription('Control to toggle suppression of control characters in the command log. This object can only be set to enabled when command logging is enabled on that port.')
basicPortDataLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDataLogging.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortDataLogging.setDescription('Control to toggle data logging on the specified port.')
basicPortDataLoggingSuppressControlCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortDataLoggingSuppressControlCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortDataLoggingSuppressControlCharacters.setDescription('Control to toggle suppression of control characters in the data log. This object can only be set to enabled when data logging is enabled on that port.')
basicPortOnboardSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortOnboardSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortOnboardSecurity.setDescription('A control to toggle onboard security for this port where the username and password are authenticated against an internal access list. The desired change will not take effect until the port is logged off.')
basicPortFallBack = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortFallBack.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortFallBack.setDescription("Control to allow a 'fallback' authentication mechanism after RADIUS or SecurID authentication fails because the RADIUS or SecurID servers are unavailable. Onboard security, an internal security database, is used for fallback authentication. The user in fallback mode must enter a valid username and password to be successfully logged in. The change takes effect after logging out the port.")
basicPortAlarmMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMaster.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortAlarmMaster.setDescription('Control to configure this port for high densitiy alarm input and control output management. This control is only valid on those models with variable configuration ports. This object can only be set enabled; and doing so will disable basicPortConsolePort, basicPortSensor and basicPortAlarmControl. A set will only update the permanent database. Use a charPortReset for this change to take effect.')
basicPortAlarmMasterAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMasterAccounting.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortAlarmMasterAccounting.setDescription('Control to toggle logging of alarm events on this port. Use a charPortReset for this change to take effect.')
basicPortAlarmMasterAudibleAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMasterAudibleAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortAlarmMasterAudibleAlarm.setDescription('Control whether the alarm will have an audible sound for all alarm points attached to this port.')
basicPortAlarmMasterFixTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 720)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMasterFixTime.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortAlarmMasterFixTime.setDescription('Time in minutes between audible alarm soundings for an alarm master port. This occurs after someone hits the master alarm reset button. If there is at least one alarm condition on an alarm point within the fix time, then the alarm will sound again at the end of that fix time.')
basicPortAlarmMasterLcdDisplayString = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMasterLcdDisplayString.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortAlarmMasterLcdDisplayString.setDescription('Updates the LCD display message for the high density alarm unit attached to the port. Corresponds directly to the DISPLAY AMST command.')
basicPortAlarmMasterReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMasterReboot.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortAlarmMasterReboot.setDescription("Control to reboot the high density alarm unit attached to the port when set to 'execute'. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Corresponds directly to the REBOOT AMST command.")
basicPortAlarmMasterUpdateFirmwareHost = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 67), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMasterUpdateFirmwareHost.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortAlarmMasterUpdateFirmwareHost.setDescription("The internet address of the server to use when downloading a new firmware image for the high density alarm unit attached to this port via TFTP. Corresponds directly to the UPDATE AMST FIRMWARE command's INTERNET ADDRESS parameter.")
basicPortAlarmMasterUpdateFirmwareFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMasterUpdateFirmwareFileName.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortAlarmMasterUpdateFirmwareFileName.setDescription("The filename to request when downloading a new firmware image for the high density alarm unit attached to this port via TFTP. Corresponds directly to the UPDATE AMST FIRMWARE command's FILE parameter.")
basicPortAlarmMasterUpdateFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMasterUpdateFirmware.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortAlarmMasterUpdateFirmware.setDescription("Control to update firmware for the high density alarm unit attached to the port when set to 'execute'. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. The basicPortAlarmMasterUpdateFirmwareHost and basicPortAlarmMasterUpdateFirmwareFileName must be set prior to setting this object. Corresponds directly to the UPDATE AMST FIRMWARE command.")
basicPortAlarmMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortAlarmMasterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortAlarmMasterStatus.setDescription('Indicates the current status of the high density alarm unit attached to the port. If no response is obtained from this unit, the status is set to basicPortAlarmMasterFaultSeverity. Otherwise it is cleared.')
basicPortAlarmMasterFaultSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6))).clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAlarmMasterFaultSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortAlarmMasterFaultSeverity.setDescription('Control to determine the severity level associated with the trap sent out when a fault occurs when no response is obtained from the high density alarm unit attached to this port.')
basicPortPowerMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortPowerMaster.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortPowerMaster.setDescription('Control to configure this port as a power master port. This control is only valid on those models with variable configuration ports and which support the power master. This object can only be set enabled, and doing so will disable the previous port type, such as basicPortConsolePort. A set will only update the permanent database. Use a charPortReset for this change to take effect.')
basicPortPowerMasterTimeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 100, 200, 300, 400, 500, 600, 700, 800, 900))).clone(namedValues=NamedValues(("none", 1), ("oneHundred", 100), ("twoHundred", 200), ("threeHundred", 300), ("fourHundred", 400), ("fiveHundred", 500), ("sixHundred", 600), ("sevenHundred", 700), ("eightHundred", 800), ("nineHundred", 900))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortPowerMasterTimeDelay.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortPowerMasterTimeDelay.setDescription("Control to set the power up delay interval in milliseconds for the power device attached to this port. A response of 'none' to a get-request or get-next-request may indicate that the power unit attached to this port is not responding with status.")
basicPortPowerMasterSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortPowerMasterSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortPowerMasterSwitch.setDescription('Control to power on or off all of the outlets in the power device attached to this port. A get-request or a get-next- request always returns ready.')
basicPortPowerMasterModel = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortPowerMasterModel.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortPowerMasterModel.setDescription('The model number of the power master device, which is connected to this port. A response of a null string to a get-request or get-next-request indicates that the power unit attached to this port is not responding with status.')
basicPortPowerMasterSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 76), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortPowerMasterSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortPowerMasterSerialNumber.setDescription('The serial number of the power master device, which is connected to this port. A response of a null string to a get-request or get-next-request indicates that the power unit attached to this port is not responding with status.')
basicPortPowerMasterFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 77), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortPowerMasterFirmware.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortPowerMasterFirmware.setDescription('The firmware version of the power master device, which is connected to this port. A response of a null string to a get-request or get-next-request indicates that the power unit attached to this port is not responding with status.')
basicPortLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortLockout.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortLockout.setDescription('Control to prohibit access to this port and send a trap when login authentication fails. One must log out the port for this change to take effect.')
basicPortAsciiToTrapTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAsciiToTrapTranslation.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortAsciiToTrapTranslation.setDescription('Control to configure the port as an ascii-to-trap translator. One must log out the port for this change to take effect.')
basicPortAsciiToTrapTranslationTrapSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6))).clone('cleared')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortAsciiToTrapTranslationTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortAsciiToTrapTranslationTrapSeverity.setDescription('Control to determine the severity level associated with the trap sent out from this port. One must log out the port for this change to take effect.')
basicPortAsciiToTrapTranslationMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortAsciiToTrapTranslationMessages.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortAsciiToTrapTranslationMessages.setDescription('Count of number of trap messages sent from this port.')
basicPortAsciiToTrapTranslationLastMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 82), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortAsciiToTrapTranslationLastMessage.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortAsciiToTrapTranslationLastMessage.setDescription('The last message or partial message sent out by this port.')
basicPortPowerMasterAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6))).clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortPowerMasterAlarmSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortPowerMasterAlarmSeverity.setDescription('Control to determine the severity level associated with the trap sent out when the power device is not responding to this port.')
basicPortPowerMasterDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortPowerMasterDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortPowerMasterDeviceStatus.setDescription('Indicates the current status of the power device controlled by this port. If the device is responding, the status is cleared. Otherwise the status matches the basicPortPowerMasterAlarmSeverity.')
basicPortBuffering = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortBuffering.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortBuffering.setDescription('Control to allow data from an attached device to be retained across multiple sessions. When a session is established to a port with buffering, the contents of the command buffer is sent to the remote device. One must log out the port for this change to take effect.')
basicPortLogFacilityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("local0", 2), ("local1", 3), ("local2", 4), ("local3", 5), ("local4", 6), ("local5", 7), ("local6", 8), ("local7", 9), ("user", 10))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortLogFacilityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortLogFacilityLevel.setDescription("Indicates that server originated accounting messages pertaining to this port are logged to the syslog host at this UNIX facility level. If 'none', the server's sessionLogFacility is used.")
basicPortPppDialBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortPppDialBackup.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortPppDialBackup.setDescription('Indicates whether this port is configured as a PPP dial backup port. This parameter will not take effect until the port is logged out, and this function is restricted to one port.')
basicPortPppDialBackupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 88), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortPppDialBackupNumber.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortPppDialBackupNumber.setDescription('The number to dial when a PPP dial backup link is activated, which occurs when the network is down and there are SNMP traps to forward. The port must be a basicPortPppDialBackup port, and it must be logged out for the change to take effect.')
basicPortPppDialBackupRedialTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortPppDialBackupRedialTimer.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortPppDialBackupRedialTimer.setDescription('Indicates the time in seconds to wait before redialing the basicPortPppDialBackupNumber on a basicPortPppDialBackup port.')
basicPortPppDialBackupRedialRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortPppDialBackupRedialRetries.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortPppDialBackupRedialRetries.setDescription('Indicates the number of time to try to dial the backup number before recording an error, logging out the port, and if there are new traps trying to dial again.')
basicPortPppDialBackupDisconnectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortPppDialBackupDisconnectTimer.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortPppDialBackupDisconnectTimer.setDescription('Indicates the time in seconds that the dial backup link will stay up when there is no more SNMP traffic flowing prior to disconnecting it.')
basicPortPppDialBackupLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 92), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortPppDialBackupLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortPppDialBackupLocalAddress.setDescription('The local address to use in a PPP dial backup link when the network connection is down and there are SNMP traps to forward.')
basicPortPppDialBackupDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 93), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortPppDialBackupDestinationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortPppDialBackupDestinationAddress.setDescription('The destination address to use in a PPP dial backup link when the network connection is down and there are SNMP traps to forward.')
basicPortPppDialBackupAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 17, 1, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortPppDialBackupAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortPppDialBackupAddresses.setDescription("Control to initiate dialing from a dial backup port. In response to get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' after a valid basicPortPppDialBackupLocalAddress and basicPortPppDialBackupDestinationAddress are configured causes the basicPortPppDialBackup port to dial the basicPortPppDialBackupNumbermber.")
basicSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 18), )
if mibBuilder.loadTexts: basicSerialPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortTable.setDescription('A list of basic character serial port entries.')
basicSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1), ).setIndexNames((0, "MRVINREACH", "basicSerialPortIndex"))
if mibBuilder.loadTexts: basicSerialPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortEntry.setDescription('Basic parameter values for a serial port.')
basicSerialPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicSerialPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the standard Character MIB.')
basicSerialPortBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("localSwitch", 2), ("sendRemote", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortBreak.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortBreak.setDescription("Action to take on a BREAK condition from the port. Corresponds directly to PORT BREAK and the value labeled 'Break:' in the PORT CHARACTERISTICS display.")
basicSerialPortInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortInterrupts.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortInterrupts.setDescription("Control for recognizing BREAK or local switch to interrupt a session. Corresponds directly to PORT INTERRUPTS and the presence of the label 'Interrupts' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
basicSerialPortNoLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortNoLoss.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortNoLoss.setDescription("Control for storing port input locally in anticipation of session startup. Corresponds directly to PORT NOLOSS and the presence of the label 'Noloss' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
basicSerialPortPause = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortPause.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortPause.setDescription("Control for pausing after each screenful of locally-originated output to the port. Corresponds directly to PORT PAUSE and the presence of the label 'Pause' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
basicSerialPortPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortPrompt.setDescription("Prompt for the system to use on the port. Corresponds directly to PORT PROMPT and the value labeled 'Prompt:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicSerialPortTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ansi", 1), ("hardcopy", 2), ("softcopy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortTerminalType.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortTerminalType.setDescription("Type of terminal attached to the port, for formatting local output. Corresponds directly to PORT TYPE and the value labeled 'Type:' in the PORT CHARACTERISTICS display.")
basicSerialPortTypeaheadLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(80, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortTypeaheadLimit.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortTypeaheadLimit.setDescription("Maximum number of input characters to hold pending tranmission on a session. Corresponds directly to PORT TYPEAHEAD SIZE and the value labeled 'Typeahead Size:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicSerialPortBackwardSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortBackwardSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortBackwardSwitch.setDescription("Character input from the character port to cause a switch to the previous, lower numbered session. The value 0 indicates no character has this effect. Corresponds directly to PORT BACKWARD SWITCH and the value labeled 'Backwards Switch:' in the PORT CHARACTERISTICS display.")
basicSerialPortForwardSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortForwardSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortForwardSwitch.setDescription("Character input from the character port to cause a switch to the next, higher numbered session. The value 0 indicates no character has this effect. Corresponds directly to PORT FORWARD SWITCH and the value labeled 'Forwards Switch:' in the PORT CHARACTERISTICS display.")
basicSerialPortLocalSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLocalSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortLocalSwitch.setDescription("Character input from the character port to cause a switch to local command mode. The value 0 indicates no character has this effect. Corresponds directly to PORT LOCAL SWITCH and the value labeled 'Local Switch:' in the PORT CHARACTERISTICS display.")
basicSerialPortModemControl = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortModemControl.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortModemControl.setDescription("Control for observing hardware modem control signals. Corresponds directly to PORT MODEM CONTROL and the value labeled 'Modem Control:' in the PORT CHARACTERISTICS display. This object is not available on units that do not support modem signals (ie 2220).")
basicSerialPortSignalCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortSignalCheck.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortSignalCheck.setDescription("Control for observing DSR and DCD to bound allowing sessions. Corresponds directly to PORT SIGNAL CHECK and the presence of the label 'Signal Check' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display. This object is not available on units that do not support modem signals (ie 2220).")
basicSerialPortDSRLogout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortDSRLogout.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortDSRLogout.setDescription("Control for logging out the port when DCD is deasserted. Corresponds directly to PORT DSRLOGOUT and the presence of the label 'DSRlogout' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display. This object is not available on units that do not support modem signals (ie 2220).")
basicSerialPortDSRObserve = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortDSRObserve.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortDSRObserve.setDescription("Control for beginning the login sequence on the port when DCD is asserted. Corresponds directly to PORT DSRWAIT and the presence of the label 'DSRwait' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display. This object is not available on units that do not support modem signals (ie 2220).")
basicSerialPortDCDTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortDCDTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortDCDTimeout.setDescription("The number of milleseconds that DCD may be asserted before disconnecting the port. Corresponds directly to PORT DCD TIMEOUT and the value labeled 'DCD Timeout:' in the PORT ALTERNATE CHARACTERISTICS display. This object is not available on units that do not support modem signals (ie 2220).")
basicSerialPortDTRAssert = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("always", 1), ("onConnectionOrRing", 2), ("onConnection", 3), ("onRing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortDTRAssert.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortDTRAssert.setDescription("Control when the system asserts DTR on the port. always unconditional(DISABLED) onConnectionOrRing connection formed or RING asserted(ENABLED) onConnection connection formed (FORCONNECTION) onRing RING asserted (FORRING) Corresponds directly to PORT DTRWAIT and the value labeled 'DTR Wait:' in the PORT ALTERNATE CHARACTERISTICS display. This object is not available on units that do not support modem signals (ie 2220).")
basicSerialPortLimitedCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLimitedCommands.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortLimitedCommands.setDescription("Control for limiting the commands available to the user on the port. Corresponds directly to PORT SECURITY and the presence of the label 'Security' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display. This object is not available on units that do not support modem signals (ie 2220).")
basicSerialPortLimitedView = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLimitedView.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortLimitedView.setDescription("Control for restricting what a user may display. Corresponds directly to PORT LIMITED VIEW and the presence of the label 'Limited View' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
basicSerialPortPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortPassword.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortPassword.setDescription("Control for requiring the user to supply the login password to log in on the port. Corresponds directly to PORT PASSWORD and the presence of the label 'Password' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
basicSerialPortLineEditor = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditor.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortLineEditor.setDescription("Control for allowing the user to use local mode command line editing. Corresponds directly to PORT LINE EDITOR and the presence of the label 'Line Editor' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
basicSerialPortLineEditorBackspace = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorBackspace.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortLineEditorBackspace.setDescription("Character input from the character port to move the cursor to the left. The value 0 indicates no character has this effect. Corresponds directly to PORT LINE EDITOR BACKSPACE and the value labeled 'Backspace Character:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicSerialPortLineEditorBeginning = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorBeginning.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortLineEditorBeginning.setDescription("Character input from the character port to move the cursor to the beginning of the line. The value 0 indicates no character has this effect. Corresponds directly to PORT LINE EDITOR BEGINNING and the value labeled 'Begin Line Character:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicSerialPortLineEditorCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorCancel.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortLineEditorCancel.setDescription("Character input from the character port to cancel an interactive dialog or delete the current line. The value 0 indicates no character has this effect. Corresponds directly to PORT LINE EDITOR CANCEL and the value labeled 'Cancel Character:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicSerialPortLineEditorDeleteBeginning = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorDeleteBeginning.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortLineEditorDeleteBeginning.setDescription("Character input from the character port to delete the current line from the cursor to the beginning. The value 0 indicates no character has this effect. Corresponds directly to PORT LINE EDITOR DELETE BEGINNING and the value labeled 'Delete Begin Character:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicSerialPortLineEditorDeleteLine = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorDeleteLine.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortLineEditorDeleteLine.setDescription("Character input from the character port to delete the current line. The value 0 indicates no character has this effect. Corresponds directly to PORT LINE EDITOR DELETE LINE and the value labeled 'Delete Line Character:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicSerialPortLineEditorEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorEnd.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortLineEditorEnd.setDescription("Character input from the character port to move the cursor to the end of the line. The value 0 indicates no character has this effect. Corresponds directly to PORT LINE EDITOR END and the value labeled 'End of Line Character:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicSerialPortLineEditorForward = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorForward.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortLineEditorForward.setDescription("Character input from the character port to move the cursor to the right. The value 0 indicates no character has this effect. Corresponds directly to PORT LINE EDITOR FORWARDS and the value labeled 'Forwards Character:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicSerialPortLineEditorInsertToggle = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorInsertToggle.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortLineEditorInsertToggle.setDescription("Character input from the character port to toggle between insert and overwrite modes. The value 0 indicates no character has this effect. Corresponds directly to PORT LINE EDITOR INSERT TOGGLE and the value labeled 'Insert Character:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicSerialPortLineEditorNextLine = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorNextLine.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortLineEditorNextLine.setDescription("Character input from the character port to recall the next, newer line in the command history. The value -1 indicates no character has this effect. Corresponds directly to PORT LINE EDITOR NEXT LINE and the value labeled 'Next Line Character:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicSerialPortLineEditorPreviousLine = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorPreviousLine.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortLineEditorPreviousLine.setDescription("Character input from the character port to recall the previous, older line in the command history. The value 0 indicates no character has this effect. Corresponds directly to PORT LINE EDITOR PREVIOUS LINE and the value labeled 'Previous Line Character:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicSerialPortLineEditorQuotingCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorQuotingCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortLineEditorQuotingCharacter.setDescription("Character input from the character port to inhibit interpretation of the next input character. The value 0 indicates no character has this effect. Corresponds directly to PORT LINE EDITOR QUOTING CHARACTER and the value labeled 'Quoting Character:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicSerialPortLineEditorRedisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortLineEditorRedisplay.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortLineEditorRedisplay.setDescription("Character input from the character port to redisplay the current command line. The value 0 indicates no character has this effect. Corresponds directly to PORT LINE EDITOR REDISPLAY CHARACTER and the value labeled 'Redisplay Character:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicSerialPortQuadartReceiveDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortQuadartReceiveDiscard.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortQuadartReceiveDiscard.setDescription('Control for discard of received errors from quadart hardware.')
basicSerialPortAPDProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortAPDProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortAPDProtocols.setDescription('A bit map that specifies the protocols that this port will attempt to detect using the Auto Protocol Detection function. The bit numbers for the protocols are: 1;ARAP, 3;Interactive, 4;SLIP, 5;PPP. Bits 6-16 are reserved for future use. More than one of these protocols may be ORed together. The default is 0 (zero) no protocols.')
basicSerialPortAPDTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortAPDTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortAPDTimeout.setDescription('A time value, in seconds, that specifies how long the port will attempt to determine which protocol is coming into the port. When basicSerialPortAPDTimeout seconds have expired, the port will assume the protocol to use is that specified by basicSerialPortAPDDefaultProtocol. A value of 0 (zero provides an unlimited timeout.')
basicSerialPortAPDDefaultProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortAPDDefaultProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortAPDDefaultProtocol.setDescription('A bit map that specifies the protocol that this port will use when the time specified by basicSerialPortAPDTimeout has expired without sucessfully identifying the incoming porotocol. The bit numbers for the protocols are: None;Logout the port, 1;ARAP, 2;CSLIP, 3;Interactive, 4;SLIP, 5;PPP. Bits 6-16 are reserved for future use. Only one protocol may be specified for this object')
basicSerialPortUsernameCharSet = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("seven-bit", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortUsernameCharSet.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortUsernameCharSet.setDescription('A control, that if set to seven-bit, will allow only the ASCII printable characters in the range SP (X20) to ~ (X7E) in the username field. A value of none allows any character')
basicSerialPortAutoHangup = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortAutoHangup.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortAutoHangup.setDescription('A control that, if enabled, will cause the port to be logged off when the last session on that port is destroyed')
basicSerialPortCommandSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(80, 16384)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortCommandSize.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortCommandSize.setDescription("Maximum number of input characters to hold in the command buffer. Corresponds directly to the PORT COMMAND SIZE and the value labeled 'Command Size:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicSerialPortAutoProtocolDetectPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortAutoProtocolDetectPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortAutoProtocolDetectPrompt.setDescription("Controls whether to send the basicAutoProtocolDetectMessage out the serial port at the beginning of auto protocol detection mode. Corresponds to the value labeled 'APD Prompt' in the PORT ALTERNATE CHARACTERISTICS display.")
basicSerialPortUsernamePrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25)).clone('Enter username>')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortUsernamePrompt.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortUsernamePrompt.setDescription("The text string used to prompt for a user's name. Corresponds directly to the value labeled 'Username Prompt:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicSerialPortPasswordPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25)).clone('Enter user password>')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortPasswordPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortPasswordPrompt.setDescription("The text string used to prompt for a user's password. Corresponds directly to the value labeled 'Password Prompt:' in the PORT ALTERNATE CHARACTERISTICS display.")
basicSerialPortAutoProtocolDetectSecurityInteractiveOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortAutoProtocolDetectSecurityInteractiveOnly.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortAutoProtocolDetectSecurityInteractiveOnly.setDescription("Controls whether Auto Protocol Detect (APD) authentication applies only to interactive users, and not to other APD protocols such as PPP. Corresponds directly to the value labeled 'APD Authentication Interactive Only:' in the PORT CHARACTERISTICS display.")
basicSerialPortDedicatedUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortDedicatedUserData.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortDedicatedUserData.setDescription("The text string to send at the beginning of a connection to a Telnet dedicated service. Corresponds to the value labeled 'UserData:' in the PORT CHARACTERISTICS display.")
basicSerialPortIpAutoDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortIpAutoDiscovery.setStatus('deprecated')
if mibBuilder.loadTexts: basicSerialPortIpAutoDiscovery.setDescription("Control to enable a non-standard method of acquiring the IP address after boot completes via the BOOTP protocol. Corresponds to the value labeled 'IP Address Auto Discovery' in the SERVER CHARACTERISTICS display.")
basicSerialPortDedicatedKickStartData = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortDedicatedKickStartData.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortDedicatedKickStartData.setDescription("A text string which is used to compare at login time to incoming serial data. A match will initiate a telnet session to a dedicated service. Corresponds to the value labeled 'KickStart:' in the PORT CHARACTERISTICS display.")
basicSerialPortBreakLength = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ms250", 1), ("ms500", 2), ("ms750", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortBreakLength.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortBreakLength.setDescription("Specifies the duration in milliseconds of a remote serial break which is sent via the Telnet Break command. Corresponds directly to the value labeled 'Break Length:' in the PORT CHARACTERISTIC display.")
basicSerialPortRotaryRoundRobin = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortRotaryRoundRobin.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortRotaryRoundRobin.setDescription("Controls whether a port which participates in an internet rotary is selected in round robin or fixed priority order. Corresponds directly to the value labeled 'Round Robin search:' in the SERVER INTERNET ROTARY display.")
basicSerialPortWelcomeBeforeAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortWelcomeBeforeAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortWelcomeBeforeAuthentication.setDescription("Control to display the basicWelcome message prior to authenticating the user. Corresponds to the presence of the value 'Welcome-Banner-Pre-Authentication' following the label 'Enabled Characteristics' in the PORT CHARACTERISTICS display.")
basicSerialPortGatewayAutoDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortGatewayAutoDiscovery.setStatus('deprecated')
if mibBuilder.loadTexts: basicSerialPortGatewayAutoDiscovery.setDescription('Control to enable a non-standard method of acquiring the gateway address after boot completes via the bootp protocol.')
basicSerialPortSubnetAutoDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortSubnetAutoDiscovery.setStatus('deprecated')
if mibBuilder.loadTexts: basicSerialPortSubnetAutoDiscovery.setDescription('Control to enable a non-standard method of acquiring the subnet mask after boot completes via the bootp protocol.')
basicSerialPortRaiseLowerDtr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortRaiseLowerDtr.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortRaiseLowerDtr.setDescription('A control to to raise or lower the DTR signal from this port by setting it to high or low, respectively. This request will have no effect unless basicSerialPortRaiseControlDtr is enabled. In response to a get-request or get-next-request the agent always returns low for this object.')
basicSerialPortRaiseControlDtr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortRaiseControlDtr.setStatus('mandatory')
if mibBuilder.loadTexts: basicSerialPortRaiseControlDtr.setDescription("Controls the ability to change the state of DTR using basicSerialPortRaiseLowerDTR. This characteristic is not intended for use with modem ports. Corresponds directly to the presence of 'Control DTR' under the label 'Enabled Characteristics' in the PORT CHARACTERISTICS display. The desired change will not take effect until the port is logged off.")
basicSerialPortIpConfigureBootp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 18, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicSerialPortIpConfigureBootp.setStatus('deprecated')
if mibBuilder.loadTexts: basicSerialPortIpConfigureBootp.setDescription("Control to use the BOOTP protocol upon startup to learn the unit's own internet address, subnet mask, primary and secondary gateway servers, domain name servers, time server and domain name. This object was moved to the MRV-IN-REACH-INTERNET-MIB for InReach agent software version V2.4.")
basicConsoleLogoutDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicConsoleLogoutDisconnect.setStatus('mandatory')
if mibBuilder.loadTexts: basicConsoleLogoutDisconnect.setDescription("Control for automatic session disconnection when a console port user logs out. Corresponds directly to SERVER CONSOLE LOGOUT and the presence of the label 'Console Logout' following the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display.")
basicControlledPorts = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicControlledPorts.setStatus('mandatory')
if mibBuilder.loadTexts: basicControlledPorts.setDescription("Status of Controlled Ports feature. Corresponds directly to the 'Controlled Ports' following the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display. Enabling this feature causes strings of control characters to be sent out on a port upon starting and/or stopping a session")
basicPortSessionTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 21), )
if mibBuilder.loadTexts: basicPortSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortSessionTable.setDescription('A list of port session entries.')
basicPortSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 21, 1), ).setIndexNames((0, "MRVINREACH", "basicPortPortIndex"), (0, "MRVINREACH", "basicPortSessIndex"))
if mibBuilder.loadTexts: basicPortSessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortSessEntry.setDescription('Status and parameter values for a basic port session.')
basicPortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortPortIndex.setDescription('The value of basicPortIndex for the port to which this session belongs. The port identified by a particular value of this index is the same port as identified by charPortIndex in the standard Character MIB.')
basicPortSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortSessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortSessIndex.setDescription('The session index in the context of the port, a non-zero positive integer. Session indexes within a port need not be sequential. Session indexes may be reused for different ports. For example, port 1 and port 3 may both have a session 2 at the same time. Session indexes may have any valid integer value, with any meaning convenient to the agent implementation. The session identified by a particular value of this index is the same session as identified by charSessIndex in the standard Character MIB.')
basicSessControlled = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicSessControlled.setStatus('mandatory')
if mibBuilder.loadTexts: basicSessControlled.setDescription("A control to send preconfigured controlled port session strings out the serial port when entering or exiting this session. Corresponds directly to the value labeled 'Controlled' under the Service Mode header in the SESSION display.")
basicPortSessEncryption = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortSessEncryption.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortSessEncryption.setDescription('Status of the default encryption value to be set for each session. Corresponds directly to Console Security on SHOW SERVER screen.')
basicTemperatureUnits = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fahrenheit", 1), ("celcius", 2))).clone('fahrenheit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicTemperatureUnits.setStatus('mandatory')
if mibBuilder.loadTexts: basicTemperatureUnits.setDescription('Indicates the units of measurement for the temperature sensors.')
basicEnvironmentalManagerCircuitBreaker = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicEnvironmentalManagerCircuitBreaker.setStatus('mandatory')
if mibBuilder.loadTexts: basicEnvironmentalManagerCircuitBreaker.setDescription('Indicates whether the circuit breaker is activated.')
basicContactClosureOrAlarmInputTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 25), )
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputTable.setDescription('Information about contact closures or alarm inputs.')
basicContactClosureOrAlarmInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1), ).setIndexNames((0, "MRVINREACH", "basicContactClosureOrAlarmInputIndex"))
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputEntry.setDescription('An entry in the basicContactClosureOrAlarmInputTable.')
basicContactClosureOrAlarmInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputValue.setStatus('mandatory')
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputValue.setDescription('Indicates the state of the contact closure or alarm input.')
basicContactClosureOrAlarmInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputName.setStatus('mandatory')
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputName.setDescription('The name used to identify this contact closure or alarm input.')
basicContactClosureOrAlarmInputTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputTrapEnable.setDescription('Control to send trap when contact closure or alarm input changes state.')
basicContactClosureOrAlarmInputFaultSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6))).clone('minor')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputFaultSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputFaultSeverity.setDescription('Control to determine the severity level associated with the trap sent out when a fault occurs for a given contact closure or alarm input.')
basicContactClosureOrAlarmInputFaultState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2))).clone('open')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputFaultState.setStatus('mandatory')
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputFaultState.setDescription('Control to indicate which state, open or closed, represents the fault condition. The other state is the cleared condition.')
basicContactClosureOrAlarmInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputStatus.setDescription('Indicates the current status of the contact closure or alarm input. If the basicContactClosureOrAlarmInputValue matches the fault state, then the status is equal to the fault severity. Otherwise the status is cleared.')
basicContactClosureOrAlarmInputZone = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputZone.setStatus('mandatory')
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputZone.setDescription('The name used to identify the zone where the equipment resides.')
basicContactClosureOrAlarmInputRelatedEquipment = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputRelatedEquipment.setStatus('mandatory')
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputRelatedEquipment.setDescription('The name used to identify related equipment.')
basicContactClosureOrAlarmInputSiteId = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputSiteId.setStatus('mandatory')
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputSiteId.setDescription('The name used to identify the site where the unit resides.')
basicContactClosureOrAlarmInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputIndex.setStatus('mandatory')
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputIndex.setDescription('An index which uniquely identifies the contact closure or alarm input.')
basicContactClosureOrAlarmInputManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputManufacturer.setDescription('The name used to identify the manufacturer of this equipment.')
basicContactClosureOrAlarmInputModel = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 25, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputModel.setStatus('mandatory')
if mibBuilder.loadTexts: basicContactClosureOrAlarmInputModel.setDescription('The model name of this equipment.')
basicPowerOutletTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 26), )
if mibBuilder.loadTexts: basicPowerOutletTable.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerOutletTable.setDescription('Information about Environmental Manager Power Outlets.')
basicPowerOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 26, 1), ).setIndexNames((0, "MRVINREACH", "basicPowerOutletIndex"))
if mibBuilder.loadTexts: basicPowerOutletEntry.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerOutletEntry.setDescription('An entry in the basicPowerOutletTable.')
basicPowerOutletOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPowerOutletOnOff.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerOutletOnOff.setDescription('Controls turning on or off the power for the device connected to this power outlet.')
basicPowerOutletReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 26, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPowerOutletReboot.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerOutletReboot.setDescription('Controls rebooting of the device attached this power outlet.')
basicPowerOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 26, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPowerOutletName.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerOutletName.setDescription('A name used to identify this power outlet.')
basicPowerOutletRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 26, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPowerOutletRedundant.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerOutletRedundant.setDescription('Controls whether power outlets in bank A have redundant outlets in bank B. When enabled, powering on an outlet in bank A will simultaneously power on the corresponding outlet number in bank B.')
basicPowerOutletConsoleName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 26, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPowerOutletConsoleName.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerOutletConsoleName.setDescription('A name used to identify a console port on a unit with power outlet managment.')
basicPowerOutletHighCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 26, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPowerOutletHighCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerOutletHighCurrent.setDescription("A control to indicate a high current unit is attached to this power outlet. When enabled the high current unit will provide current when it detects no power from the power outlet; and will stop the current when the outlet resumes power. This control only works on those InReach devices which support the high current unit such as the IRMGR0. Corresponds directly to the value labeled 'HCNC Setting' in the INREACH MANAGER OUTLET STATUS display.")
basicPowerOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 26, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPowerOutletIndex.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerOutletIndex.setDescription('An index which uniquely identifies a power outlet.')
basicTemperatureHumiditySensor = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 13, 1, 27))
basicTemperatureSensorTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1), )
if mibBuilder.loadTexts: basicTemperatureSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: basicTemperatureSensorTable.setDescription('Information about Environmental Manager Temperature Sensors.')
basicTemperatureSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1, 1), ).setIndexNames((0, "MRVINREACH", "basicTemperatureSensorIndex"))
if mibBuilder.loadTexts: basicTemperatureSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: basicTemperatureSensorEntry.setDescription('An entry in the basicTemperatureSensorTable.')
basicTempTrapHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicTempTrapHighThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: basicTempTrapHighThreshold.setDescription('The temperature at or above which a sensorThresholdTrap is generated.')
basicTempTrapLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicTempTrapLowThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: basicTempTrapLowThreshold.setDescription('The temperature at or below which a sensorThresholdTrap is generated.')
basicTemperatureSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicTemperatureSensor.setStatus('mandatory')
if mibBuilder.loadTexts: basicTemperatureSensor.setDescription('Controls the enabling or disabling of a temperature sensor.')
basicTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicTemperatureValue.setStatus('mandatory')
if mibBuilder.loadTexts: basicTemperatureValue.setDescription('The current temperature reading for this sensor.')
basicTemperatureAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6))).clone('minor')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicTemperatureAlarmSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: basicTemperatureAlarmSeverity.setDescription('Control to determine the severity level associated with the trap sent out when the temperature reading is out-of-bounds.')
basicTemperatureAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicTemperatureAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: basicTemperatureAlarmStatus.setDescription('Indicates the current status of the temperature sensor. If the basicTemperatureValue falls within the normal range, the status is cleared. Otherwise the status matches the alarm severity level.')
basicTemperatureHumiditySensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicTemperatureHumiditySensorName.setStatus('mandatory')
if mibBuilder.loadTexts: basicTemperatureHumiditySensorName.setDescription('The name used to identify this temperature sensor.')
basicTemperatureSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicTemperatureSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: basicTemperatureSensorIndex.setDescription('An index which uniquely identifies a temperature sensor.')
basicHumiditySensorTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 2), )
if mibBuilder.loadTexts: basicHumiditySensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: basicHumiditySensorTable.setDescription('Information about Environmental Manager Humidity Sensors.')
basicHumiditySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 2, 1), ).setIndexNames((0, "MRVINREACH", "basicHumiditySensorIndex"))
if mibBuilder.loadTexts: basicHumiditySensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: basicHumiditySensorEntry.setDescription('An entry in the basicHumiditySensorTable.')
basicHumidityTrapHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicHumidityTrapHighThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: basicHumidityTrapHighThreshold.setDescription('The humidity at or above which a sensorThresholdTrap is generated.')
basicHumidityTrapLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicHumidityTrapLowThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: basicHumidityTrapLowThreshold.setDescription('The humidity at or below which a sensorThresholdTrap is generated.')
basicHumiditySensor = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicHumiditySensor.setStatus('mandatory')
if mibBuilder.loadTexts: basicHumiditySensor.setDescription('Controls the enabling or disabling of a humidity sensor.')
basicHumidityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicHumidityValue.setStatus('mandatory')
if mibBuilder.loadTexts: basicHumidityValue.setDescription('The current humidity reading for this sensor.')
basicHumidityAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6))).clone('minor')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicHumidityAlarmSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: basicHumidityAlarmSeverity.setDescription('Control to indicate the severity level associated with the trap sent out when the humidity reading is out-of-bounds.')
basicHumidityAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicHumidityAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: basicHumidityAlarmStatus.setDescription('Indicates the current status of the humidity sensor. If the basicHumidityValue falls within the normal range, the status is cleared. Otherwise the status matches the alarm severity level.')
basicHumiditySensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 27, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicHumiditySensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: basicHumiditySensorIndex.setDescription('An index which uniquely identifies a humidity sensor.')
basicControlSignalTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 28), )
if mibBuilder.loadTexts: basicControlSignalTable.setStatus('mandatory')
if mibBuilder.loadTexts: basicControlSignalTable.setDescription('Information about Environmental Manager Control Signal points.')
basicControlSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 28, 1), ).setIndexNames((0, "MRVINREACH", "basicControlSignalIndex"))
if mibBuilder.loadTexts: basicControlSignalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: basicControlSignalEntry.setDescription('An entry in the basicControlSignalTable.')
basicControlSignalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("high", 1), ("low", 2))).clone('high')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicControlSignalValue.setStatus('mandatory')
if mibBuilder.loadTexts: basicControlSignalValue.setDescription('Sets and reads the state of the control signal point.')
basicControlSignalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 28, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicControlSignalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: basicControlSignalIndex.setDescription('An index which uniquely identifies a control signal point.')
basicPowerAlarmTimer = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPowerAlarmTimer.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerAlarmTimer.setDescription('The polling interval in seconds for the fuse and power supply status. An alarm trap is issued on power failure.')
basicControlOutputTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 30), )
if mibBuilder.loadTexts: basicControlOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: basicControlOutputTable.setDescription('Information about controlled output distribution points.')
basicControlOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 30, 1), ).setIndexNames((0, "MRVINREACH", "basicControlOutputIndex"))
if mibBuilder.loadTexts: basicControlOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: basicControlOutputEntry.setDescription('An entry in the basicControlOutputTable.')
basicControlOutputSignalDtrRts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2))).clone('high')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicControlOutputSignalDtrRts.setStatus('mandatory')
if mibBuilder.loadTexts: basicControlOutputSignalDtrRts.setDescription('Controls the raising or lowering of a signal on a distribution control signal point. The signal is DTR when the basicControlOutputIndex is odd, or RTS when the basicControlOutputIndex is even.')
basicControlOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 30, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicControlOutputName.setStatus('mandatory')
if mibBuilder.loadTexts: basicControlOutputName.setDescription('The name used to identify this distribution control signal point.')
basicControlOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 30, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicControlOutputIndex.setStatus('mandatory')
if mibBuilder.loadTexts: basicControlOutputIndex.setDescription('An index which uniquely identifies a distribution control signal point.')
basicPowerStatusFuseA = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPowerStatusFuseA.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerStatusFuseA.setDescription('Indicates the status of fuse bank A.')
basicPowerStatusFuseB = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPowerStatusFuseB.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerStatusFuseB.setDescription('Indicates the status of fuse bank B.')
basicPowerSupplyStatusA = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPowerSupplyStatusA.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerSupplyStatusA.setDescription('Indicates the status of power supply A.')
basicPowerSupplyStatusB = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPowerSupplyStatusB.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerSupplyStatusB.setDescription('Indicates the status of power supply B.')
basicPortTrapTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 35), )
if mibBuilder.loadTexts: basicPortTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortTrapTable.setDescription('A list of traps associated with signal control changes on ports.')
basicPortTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 35, 1), ).setIndexNames((0, "MRVINREACH", "basicPortTrapIndex"), (0, "MRVINREACH", "basicPortSignalName"))
if mibBuilder.loadTexts: basicPortTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortTrapEntry.setDescription('Administrative status of signal change traps for a hardware port.')
basicPortTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 35, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortTrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortTrapIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by rs232PortIndex in the standard rs232 MIB.')
basicPortSignalName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 35, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rts", 1), ("cts", 2), ("dsr", 3), ("dtr", 4), ("ri", 5), ("dcd", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPortSignalName.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortSignalName.setDescription('Identification of the hardware signal as specified in RFC1659 as follows: rts Request to Send cts Clear to Send dsr Data Set Ready dts Data Terminal Ready ri Ring Indicator dcd Received Line Signal Detector Some agents do not support DSR since its pin is shared with DCD.')
basicPortTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPortTrapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: basicPortTrapStatus.setDescription('Control to toggle the sending of a trap on a specific signal change on a physical port. One must logout the port prior to this taking effect.')
basicAlarmMasterInputTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 36), )
if mibBuilder.loadTexts: basicAlarmMasterInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterInputTable.setDescription("Information about the high density alarm manager's alarm inputs.")
basicAlarmMasterInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1), ).setIndexNames((0, "MRVINREACH", "basicAlarmMasterInputPort"), (0, "MRVINREACH", "basicAlarmMasterInputSlot"), (0, "MRVINREACH", "basicAlarmMasterInputPoint"))
if mibBuilder.loadTexts: basicAlarmMasterInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterInputEntry.setDescription('An entry in the basicAlarmMasterInputTable.')
basicAlarmMasterInputPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicAlarmMasterInputPort.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterInputPort.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the standard Character MIB.')
basicAlarmMasterInputSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicAlarmMasterInputSlot.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterInputSlot.setDescription('An index value that uniquely identifies a slot of alarm points on a given high density alarm port.')
basicAlarmMasterInputPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicAlarmMasterInputPoint.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterInputPoint.setDescription('An index value that uniquely identifies an alarm point within an alarm slot on a high density alarm port.')
basicAlarmMasterInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterInputName.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterInputName.setDescription('The name used to identify this alarm point.')
basicAlarmMasterInputTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterInputTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterInputTrapEnable.setDescription('Control to send a trap when the alarm input changes state.')
basicAlarmMasterControlOutputSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2))).clone('open')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterControlOutputSignal.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterControlOutputSignal.setDescription('Control to toggle the output signal for an alarm point.')
basicAlarmMasterInputEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterInputEnable.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterInputEnable.setDescription('Control to toggle whether this alarm point is active.')
basicAlarmMasterInputDebounceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterInputDebounceInterval.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterInputDebounceInterval.setDescription('Amount of time in seconds to debounce a signal change before triggering an alarm.')
basicAlarmMasterInputFaultSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6))).clone('minor')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterInputFaultSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterInputFaultSeverity.setDescription('Control to determine the severity level associated with the trap sent out when a fault occurs for this alarm input point.')
basicAlarmMasterInputFaultState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2))).clone('closed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterInputFaultState.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterInputFaultState.setDescription('Control to indicate which state, open or closed, represents the fault condition for this alarm input point. The other state is the cleared condition.')
basicAlarmMasterInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicAlarmMasterInputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterInputStatus.setDescription('Indicates the current status of the alarm input point. If the basicAlarmMasterInputValue matches the fault state, then the status is equal to the fault severity. Otherwise the status is cleared.')
basicAlarmMasterInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicAlarmMasterInputValue.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterInputValue.setDescription('Indicates the current state of the alarm input point.')
basicAlarmMasterDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterDisplay.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterDisplay.setDescription('Control to toggle the display of the alarm status for this point in the display window of the high density alarm unit.')
basicAlarmMasterInputZone = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterInputZone.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterInputZone.setDescription('The name used to identify the zone where the equipment resides.')
basicAlarmMasterInputRelatedEquipment = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterInputRelatedEquipment.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterInputRelatedEquipment.setDescription('The name used to identify related equipment.')
basicAlarmMasterInputSiteId = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterInputSiteId.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterInputSiteId.setDescription('The name used to identify the site where the unit resides.')
basicAlarmMasterInputManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterInputManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterInputManufacturer.setDescription('The name used to identify the manufacturer of this equipment.')
basicAlarmMasterInputModel = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 36, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAlarmMasterInputModel.setStatus('mandatory')
if mibBuilder.loadTexts: basicAlarmMasterInputModel.setDescription('The model name of this equipment.')
basicPowerMasterOutletTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 37), )
if mibBuilder.loadTexts: basicPowerMasterOutletTable.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerMasterOutletTable.setDescription('Information about power master outlets.')
basicPowerMasterOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 37, 1), ).setIndexNames((0, "MRVINREACH", "basicPowerMasterPortIndex"), (0, "MRVINREACH", "basicPowerMasterOutletIndex"))
if mibBuilder.loadTexts: basicPowerMasterOutletEntry.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerMasterOutletEntry.setDescription('An entry in the basicPowerMasterOutletTable.')
basicPowerMasterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 37, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPowerMasterPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerMasterPortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by the charPortIndex in the standard Character MIB.')
basicPowerMasterOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 37, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPowerMasterOutletIndex.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerMasterOutletIndex.setDescription('An index which uniquely identifies a power master outlet.')
basicPowerMasterOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 37, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPowerMasterOutletName.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerMasterOutletName.setDescription('The name used to identify this power master outlet.')
basicPowerMasterOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 37, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicPowerMasterOutletState.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerMasterOutletState.setDescription("Switches the power master outlet on or off. There may be a noticeable time delay while processing a get-request for this object. A response of 'off' to a get-request may indicate that the state is temporarily unavailable.")
basicPowerMasterOutletAmperageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 37, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicPowerMasterOutletAmperageStatus.setStatus('mandatory')
if mibBuilder.loadTexts: basicPowerMasterOutletAmperageStatus.setDescription('Indicates the current amperage drawn at this outlet. There may be a noticeable time delay while processing a get-request for this object. A null string indicates that amperage status is temporarily unavailable.')
basicControlOutputRelayTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 1, 38), )
if mibBuilder.loadTexts: basicControlOutputRelayTable.setStatus('mandatory')
if mibBuilder.loadTexts: basicControlOutputRelayTable.setDescription('Information about controlled output relays.')
basicControlOutputRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 1, 38, 1), ).setIndexNames((0, "MRVINREACH", "basicControlOutputRelayIndex"))
if mibBuilder.loadTexts: basicControlOutputRelayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: basicControlOutputRelayEntry.setDescription('An entry in the basicControlOutputRelayTable.')
basicControlOutputRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 38, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicControlOutputRelayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: basicControlOutputRelayIndex.setDescription('An index which uniquely identifies a control output relay.')
basicControlOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 38, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicControlOutputRelayName.setStatus('mandatory')
if mibBuilder.loadTexts: basicControlOutputRelayName.setDescription('The name used to identify this control output relay.')
basicControlOutputRelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 38, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2))).clone('open')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicControlOutputRelayState.setStatus('mandatory')
if mibBuilder.loadTexts: basicControlOutputRelayState.setDescription('Controls the opening or closing of the control output relay.')
basicControlOutputRelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 1, 38, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicControlOutputRelayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: basicControlOutputRelayStatus.setDescription('Indicates the current status of the control output relay.')
basicAutoProtocolDetectMessage = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 1, 100), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('AutoProtocolDetect - Begin protocol or enter 4 returns for interactive mode.')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicAutoProtocolDetectMessage.setStatus('mandatory')
if mibBuilder.loadTexts: basicAutoProtocolDetectMessage.setDescription("The text string sent as a prompt message out the port at the beginning of auto protocol detection mode. Corresponds to the value labeled 'APD Message' in the SERVER UNIT display.")
queueLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queueLimit.setStatus('mandatory')
if mibBuilder.loadTexts: queueLimit.setDescription("The maximum number of entries that can be made in the Queue table. The value -1 indicates the imit is available memory. Corresponds directly to SERVER QUEUE LIMIT and the value labeled 'Queue Limit:' in the SERVER CHARACTERISTICS display.")
queueHigh = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueHigh.setStatus('mandatory')
if mibBuilder.loadTexts: queueHigh.setDescription("The highest value of queueNumber since system initialization. Corresponds directly to the value labeled 'Queue Entries' and 'High' in the SERVER STATUS display.")
queueNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueNumber.setStatus('mandatory')
if mibBuilder.loadTexts: queueNumber.setDescription("The number of entries in the Queue table. Corresponds directly to the value labeled 'Queue Entries' and 'Cur' in the SERVER STATUS display.")
queueTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 2, 4), )
if mibBuilder.loadTexts: queueTable.setStatus('mandatory')
if mibBuilder.loadTexts: queueTable.setDescription('A list of queue entries.')
queueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1), ).setIndexNames((0, "MRVINREACH", "queueJob"))
if mibBuilder.loadTexts: queueEntry.setStatus('mandatory')
if mibBuilder.loadTexts: queueEntry.setDescription('Parameter values for a queue entry.')
queueJob = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueJob.setStatus('mandatory')
if mibBuilder.loadTexts: queueJob.setDescription("The job number of a queued request. Corresponds directly to the value labeled 'Entry' in the QUEUE display.")
queueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queueStatus.setStatus('mandatory')
if mibBuilder.loadTexts: queueStatus.setDescription("The status of a queue entry. Set to 'invalid' to remove the entry, which corresponds directly to the REMOVE QUEUE ENTRY command. Actual removal of the entry is implementation specific.")
queueSourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueSourceName.setStatus('mandatory')
if mibBuilder.loadTexts: queueSourceName.setDescription("The name of the system that originated the queue entry. Corresponds directly to the value labeled 'Source Node' in the QUEUE display.")
queueServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueServiceName.setStatus('mandatory')
if mibBuilder.loadTexts: queueServiceName.setDescription("The name of the service for which the originator is waiting. Corresponds directly to the value labeled 'Service' in the QUEUE display.")
queueServicePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueServicePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: queueServicePortIndex.setDescription("The charPortIndex of the port for which the originator is waiting, if supplied by the originator. As defined in the standard Character MIB. Corresponds indirectly to the port number part of the value labeled 'Port Name' in the QUEUE display.")
queueServicePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueServicePortName.setStatus('mandatory')
if mibBuilder.loadTexts: queueServicePortName.setDescription("The name of the port for which the originator is waiting, if supplied by the originator. Corresponds directly to the port name part of the value labeled 'Port Name' in the SERVER QUEUE display.")
queuePortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 2, 5), )
if mibBuilder.loadTexts: queuePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: queuePortTable.setDescription('A list of queuing-related character port entries.')
queuePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 2, 5, 1), ).setIndexNames((0, "MRVINREACH", "queuePortIndex"))
if mibBuilder.loadTexts: queuePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: queuePortEntry.setDescription('Queuing parameter values for a port.')
queuePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: queuePortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the standard Character MIB.')
queuePortQueuing = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queuePortQueuing.setStatus('mandatory')
if mibBuilder.loadTexts: queuePortQueuing.setDescription("Control for allowing queued requests for using the port. Corresponds directly to PORT QUEUING and the presence of the label 'Queuing' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
menuNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: menuNumber.setStatus('mandatory')
if mibBuilder.loadTexts: menuNumber.setDescription('The number of entries in the Menu table. Corresponds indirectly to SERVER MENU display.')
menuContinuePrompt = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuContinuePrompt.setStatus('mandatory')
if mibBuilder.loadTexts: menuContinuePrompt.setDescription("The text to use when prompting a menu user to press RETURN to continue. Corresponds directly to SERVER MENU CONTINUE PROMPT and the value labeled 'Menu Continue Prompt:' in the SERVER MENU display.")
menuSelectionPrompt = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuSelectionPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: menuSelectionPrompt.setDescription("The text to use when prompting a menu user for a menu selection. Corresponds directly to SERVER MENU PROMPT and the value labeled 'Menu Prompt:' in the SERVER MENU display.")
menuTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 3, 4), )
if mibBuilder.loadTexts: menuTable.setStatus('mandatory')
if mibBuilder.loadTexts: menuTable.setDescription('A list of menu entries.')
menuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 3, 4, 1), ).setIndexNames((0, "MRVINREACH", "menuIndex"))
if mibBuilder.loadTexts: menuEntry.setStatus('mandatory')
if mibBuilder.loadTexts: menuEntry.setDescription('Parameter values for a menu entry.')
menuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: menuIndex.setStatus('mandatory')
if mibBuilder.loadTexts: menuIndex.setDescription('The index number of a menu entry. Corresponds directly to the numbers down the left of the SERVER MENU display.')
menuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuStatus.setStatus('mandatory')
if mibBuilder.loadTexts: menuStatus.setDescription("The status of a the entry. Set to 'invalid' to remove the entry, which corresponds directly to the CLEAR SERVER MENU command. Actual removal of the entry is implementation specific.")
menuText = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuText.setStatus('mandatory')
if mibBuilder.loadTexts: menuText.setDescription('The text to be displayed in the menu. Corresponds directly to the line next to the entry number in the SERVER MENU display.')
menuCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuCommand.setStatus('mandatory')
if mibBuilder.loadTexts: menuCommand.setDescription('The commands to execute when the user chooses the menu entry. Corresponds directly second line following the entry number in the SERVER MENU display.')
menuPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 3, 5), )
if mibBuilder.loadTexts: menuPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: menuPortTable.setDescription('A list of menu-related character port entries.')
menuPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 3, 5, 1), ).setIndexNames((0, "MRVINREACH", "menuPortIndex"))
if mibBuilder.loadTexts: menuPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: menuPortEntry.setDescription('Menu parameter values for a port.')
menuPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: menuPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: menuPortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the standard Character MIB.')
menuPortMenuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("privileged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuPortMenuStatus.setStatus('mandatory')
if mibBuilder.loadTexts: menuPortMenuStatus.setDescription("Control for menu operation on the port. Corresponds indirectly to PORT MENU and PORT PRIVILEGED MENU and the presence of the labels 'Menu' and 'Privileged Menu' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
menuPortNestedMenuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("required", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuPortNestedMenuStatus.setStatus('mandatory')
if mibBuilder.loadTexts: menuPortNestedMenuStatus.setDescription("Control for nested menu operation on the port. Corresponds indirectly to PORT NESTED MENU and the presence of the label 'Nested Menu' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
menuPortNestedMenuPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuPortNestedMenuPrivilege.setStatus('mandatory')
if mibBuilder.loadTexts: menuPortNestedMenuPrivilege.setDescription("Control for nested privileged menu operation on the port. Corresponds indirectly to PORT NESTED PRIVILEGED MENU and the presence of the label 'Nested Privileged Menu' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
menuPortNestedTopLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuPortNestedTopLevel.setStatus('mandatory')
if mibBuilder.loadTexts: menuPortNestedTopLevel.setDescription('The top level nested menu to select from the menu definition file.')
menuNestedName = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone('NESTMENU.TXT')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuNestedName.setStatus('mandatory')
if mibBuilder.loadTexts: menuNestedName.setDescription('Name of the script file containing the nested menu.')
menuNestedScriptMaximum = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 204800)).clone(16384)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuNestedScriptMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: menuNestedScriptMaximum.setDescription('Maximum number of temporary storage bytes for a nested menu script file. If not zero, the nested menu function is enabled.')
menuNestedSystemName = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuNestedSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: menuNestedSystemName.setDescription('Control to request to download a menu script which is unique for this unit by prepending the sysLocalName of this unit to the nestedMenuName.')
menuNestedEthernet = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: menuNestedEthernet.setStatus('mandatory')
if mibBuilder.loadTexts: menuNestedEthernet.setDescription('Control to request to download a menu script which is unique for this unit by prepending the Ethernet address, or 802.3 MAC address, of this unit to the nestedMenuName.')
netLoginNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLoginNumber.setStatus('mandatory')
if mibBuilder.loadTexts: netLoginNumber.setDescription('The number of entries in the Network Login Server table.')
netLoginServerTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 4, 2), )
if mibBuilder.loadTexts: netLoginServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: netLoginServerTable.setDescription('A list of network login server entries.')
netLoginServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 4, 2, 1), ).setIndexNames((0, "MRVINREACH", "netLoginServerName"))
if mibBuilder.loadTexts: netLoginServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: netLoginServerEntry.setDescription('Network login parameter values for a server entry.')
netLoginServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLoginServerName.setStatus('mandatory')
if mibBuilder.loadTexts: netLoginServerName.setDescription("The name of a network login server, suitable for resolution to a network address. Corresponds directly to host portion of SERVER SCRIPT SERVER and the value labeled 'Script Host' in the SERVER PARAMETER SERVER display.")
netLoginServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLoginServerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: netLoginServerStatus.setDescription("Status of this entry. Set to 'invalid' to remove the entry, which corresponds directly to the CLEAR SERVER SCRIPT SERVER command. Actual removal of the entry is implementation specific.")
netLoginServerPath = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLoginServerPath.setStatus('mandatory')
if mibBuilder.loadTexts: netLoginServerPath.setDescription("The full path name to the script file that is identified by the user name. Corresponds directly to path portion of SERVER SCRIPT SERVER and the value labeled 'Script Path' in the SERVER PARAMETER SERVER display. Defaults to the NULL string when a new entry is created.")
netLoginServerSeparator = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLoginServerSeparator.setStatus('mandatory')
if mibBuilder.loadTexts: netLoginServerSeparator.setDescription("The single character string that will be inserted between the components of a file's path on the script server. Defaults to the NULL string when a new entry is created. Corresponds directly to the separator portion of SERVER SCRIPT SERVER display.")
netLoginPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 4, 3), )
if mibBuilder.loadTexts: netLoginPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: netLoginPortTable.setDescription('A list of network login character port entries.')
netLoginPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1), ).setIndexNames((0, "MRVINREACH", "netLoginPortIndex"))
if mibBuilder.loadTexts: netLoginPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: netLoginPortEntry.setDescription('Network login parameter values for a port.')
netLoginPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLoginPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: netLoginPortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the standard Character MIB.')
netLoginPortScriptUse = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("required", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLoginPortScriptUse.setStatus('mandatory')
if mibBuilder.loadTexts: netLoginPortScriptUse.setDescription("Control for the script action taken when a user logs in on the port. Corresponds directly to PORT SCRIPT LOGIN and the value labeled 'Script Login:' in the PORT ALTERNATE CHARACTERISTICS display.")
netLoginPortScriptEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLoginPortScriptEcho.setStatus('mandatory')
if mibBuilder.loadTexts: netLoginPortScriptEcho.setDescription("Control for display of script operation on the port when running a script. Corresponds directly to PORT SCRIPT ECHO and the presence of the label 'Script Echo' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
netLoginPortLoaderAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 4), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLoginPortLoaderAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: netLoginPortLoaderAddressType.setDescription("The type of network address contained in netLoginPortLoaderAddress. 'unknown' means no address has been defined. 'other' means no other type value applies. 'ip' is an Internet IP address. 'ethernet' is an 802.3 MAC address. Corresponds indirectly to the address part of the value labeled 'Script Loaded From:' in the PORT STATUS display.")
netLoginPortLoaderAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLoginPortLoaderAddress.setStatus('mandatory')
if mibBuilder.loadTexts: netLoginPortLoaderAddress.setDescription("The network address of the server that provided the script for the current port login. Corresponds directly the address part of the value labeled 'Script Loaded From:' in the PORT STATUS display.")
netLoginPortLoaderFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLoginPortLoaderFile.setStatus('mandatory')
if mibBuilder.loadTexts: netLoginPortLoaderFile.setDescription("The path and file name of the script used for the current port login. Corresponds directly the file name part of the value labeled 'Script Loaded From:' in the PORT STATUS display.")
netLoginPortExecuteFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 4, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLoginPortExecuteFile.setStatus('mandatory')
if mibBuilder.loadTexts: netLoginPortExecuteFile.setDescription('The path and file name of a script to be executed immediately on the port. Corresponds directly the file name in the SCRIPT command.')
dialPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 5, 1), )
if mibBuilder.loadTexts: dialPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: dialPortTable.setDescription('A list of dial character port entries.')
dialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 5, 1, 1), ).setIndexNames((0, "MRVINREACH", "dialPortIndex"))
if mibBuilder.loadTexts: dialPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dialPortEntry.setDescription('Dial parameter values for a port.')
dialPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dialPortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the standard Character MIB.')
dialPortDialback = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialPortDialback.setStatus('mandatory')
if mibBuilder.loadTexts: dialPortDialback.setDescription("Control for use of dialback when a user logs in on the port. Corresponds directly to PORT DIALBACK and the presence of the label 'Dialback' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
dialPortDialbackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialPortDialbackTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: dialPortDialbackTimeout.setDescription("The number of seconds to wait for remote modem response when dialing back. Corresponds directly to PORT DIALBACK TIMEOUT and the value labeled 'Dialback Timeout:' in the PORT ALTERNATE CHARACTERISTICS display.")
dialPortDialout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("query", 2), ("slip", 3), ("ppp", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialPortDialout.setStatus('mandatory')
if mibBuilder.loadTexts: dialPortDialout.setDescription('A control to determine the state of a remote port after it has been logged out from the remote side of the connection. none will log out the port, query will ask user what to do, slip and ppp will revert to those protocols')
dialPortDialbackNoUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialPortDialbackNoUsername.setStatus('mandatory')
if mibBuilder.loadTexts: dialPortDialbackNoUsername.setDescription('Control which when enabled on a dialback port will not prompt for a username upon dialing back. Instead the original username is reused.')
sessionLogLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogLimit.setDescription("The maximum number of entries allowed in the Session Log table. Corresponds directly to SERVER ACCOUNTING ENTRIES and the value labeled 'Accounting Entries:' in the SERVER CHARACTERISTICS display.")
sessionLogTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 6, 2), )
if mibBuilder.loadTexts: sessionLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogTable.setDescription('A list of session log entries.')
sessionLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1), ).setIndexNames((0, "MRVINREACH", "sessionLogIndex"))
if mibBuilder.loadTexts: sessionLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogEntry.setDescription('Parameter values for a session log entry.')
sessionLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogIndex.setDescription('The index number of a session log entry. Corresponds directly to the order of the displayed records in the SERVER ACCOUNTING display. The maximum value is sessionLogLimit.')
sessionLogConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogConnectionID.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogConnectionID.setDescription("An indentifying number for records relating to the same connection, that is, the connect and disconnect records, either of which can be missing. Corresponds directly to value labeled 'Entry' the SERVER ACCOUNTING display.")
sessionLogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogPort.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogPort.setDescription("An index value that uniquely identifies the port where the event took place. The port identified by a particular value of this index is the same port as identified by charPortIndex in the standard Character MIB. Corresponds directly to the value labeled 'Port' in the SERVER ACCOUNTING display.")
sessionLogEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 13, 14, 15))).clone(namedValues=NamedValues(("login", 1), ("connectLocal", 2), ("connectRemote", 3), ("disconnect", 4), ("rCPConnect", 5), ("rCPDisconnect", 6), ("x25Connect", 13), ("x25Disconnect", 14), ("processDefined", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogEvent.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogEvent.setDescription("The type of event. Corresponds directly to the alphabetic part of the value labeled 'Type' in the SERVER ACCOUNTING display. Type 15 is used by internal processes that call the session log function with an already formatted message. ")
sessionLogEventDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))).clone(namedValues=NamedValues(("none", 1), ("protocolBadCircuit", 2), ("protocolBadCredits", 3), ("protocolBadStartOrRun", 4), ("protocolBadRange", 5), ("duplicateQueueID", 6), ("noUsers", 7), ("noServiceResourced", 8), ("serviceUserDisconnect", 9), ("serviceUnavailable", 10), ("serverUserDisconnect", 11), ("noNodeResources", 12), ("systemShutdown", 13), ("nodeUserdisconnect", 14), ("badCircuitTimer", 15), ("badServiceClass", 16), ("badMessageOrSlot", 17), ("timeout", 18), ("noProgress", 19), ("serviceNotOnPort", 20), ("noSuchPort", 21), ("badPassword", 22), ("serviceBusy", 23), ("noSuchService", 24), ("serviceDisabled", 25), ("notInQueue", 26), ("noImmeditatAccess", 27), ("accessDenied", 28), ("protocolBadSolicit", 29), ("protocolBadReasonCode", 30), ("unsupportedTest", 31), ("domainTooLong", 32), ("noSuchNode", 33), ("noSuchServiceOnNode", 34), ("rejectService", 35), ("internetConnectDisabled", 36)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogEventDetail.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogEventDetail.setDescription("The detailed reason for the event. Corresponds directly to the numeric part of the value labeled 'Type' in the SERVER ACCOUNTING display.")
sessionLogUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogUserName.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogUserName.setDescription("The user name logged in on the port when the event occurred. Corresponds directly to the value labeled 'Username' in the SERVER ACCOUNTING display.")
sessionLogRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogRemoteName.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogRemoteName.setDescription("The name of the session remote partner. Corresponds directly to the value labeled 'Destination' in the SERVER ACCOUNTING display.")
sessionLogConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 8), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogConnectTime.setDescription("The date and time that session connection occurred. Corresponds directly to the value labeled 'Connect Time' in the SERVER ACCOUNTING display.")
sessionLogDisconnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 9), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogDisconnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogDisconnectTime.setDescription("The date and time that session disconnection occurred. Corresponds directly to the value labeled 'Disconnect Time' in the SERVER ACCOUNTING display.")
sessionLogInCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogInCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogInCharacters.setDescription("The number of characters that came into the port for the session. Corresponds directly to the value labeled 'Bytes In' in the SERVER ACCOUNTING display.")
sessionLogOutCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogOutCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogOutCharacters.setDescription("The number of characters that went out of the port for the session. Corresponds directly to the value labeled 'Bytes Out' in the SERVER ACCOUNTING display.")
sessionLogVerboseEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15))).clone(namedValues=NamedValues(("login", 1), ("connectLocal", 2), ("connectRemote", 3), ("disconnect", 4), ("connectRcp", 5), ("disconnectRcp", 6), ("telnetMaint", 7), ("xremote", 8), ("xprinter", 9), ("lpd", 12), ("connectX25", 13), ("disconnectX25", 14), ("userDefined", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogVerboseEvent.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogVerboseEvent.setDescription("When logging in 'verbose' mode, the event that occured.")
sessionLogX25Direction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogX25Direction.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogX25Direction.setDescription('The initial direction for an X.25 connection. A value of 0 is returned if the session is not X25')
sessionLogVerboseMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogVerboseMessage.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogVerboseMessage.setDescription('Text describing the event that was logged.')
sessionLogX25CallerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogX25CallerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogX25CallerAddress.setDescription('For an X.25 connection, the X.121 source address.')
sessionLogX25CalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogX25CalledAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogX25CalledAddress.setDescription('For an X.25 connection, the X.121 destination address.')
sessionLogX25DisconnectCause = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogX25DisconnectCause.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogX25DisconnectCause.setDescription('For a terminated X.25 connection, the standard, X.25 cause code.')
sessionLogX25DisconnectDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 6, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionLogX25DisconnectDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogX25DisconnectDiagnostic.setDescription('For a terminated X.25 connection, the standard, X.25 diagnostic code.')
sessionLogHostType = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("unix", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogHostType.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogHostType.setDescription('The type of host to which session log events are to be sent.')
sessionLogHostAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogHostAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogHostAddress.setDescription('The address of the host to receive events.')
sessionLogVerbose = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogVerbose.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogVerbose.setDescription('Control for verbose logging.')
sessionLogPriority = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogPriority.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogPriority.setDescription('The largest priority number for the system to log. Higher numbered (lower priority) events will not be logged.')
sessionLogEmpty = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogEmpty.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogEmpty.setDescription("Control to empty the log. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' causes the log to be emptied.")
sessionLogFacility = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8), ("user", 9))).clone('user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogFacility.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogFacility.setDescription('The UNIX facility level that server originated accounting messages are logged to.')
sessionLogReliable = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogReliable.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogReliable.setDescription("Control for reliable logging. Corresponds directly to the presence of the label 'Reliable Accounting' following the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display.")
sessionLogHostSecondaryType = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("unix", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogHostSecondaryType.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogHostSecondaryType.setDescription("The type of secondary host to which session log events are to be sent. This value should be set to unix when configuring a non-zero sessionLogHostSecondaryAddress. Corresponds to the presence of the label 'SYSLOGD Host2' following the label 'Daemon(s)' in the SERVER UNIT display.")
sessionLogHostSecondaryAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogHostSecondaryAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogHostSecondaryAddress.setDescription("The address of a secondary host to receive events. Corresponds directly to the value labeled 'SYSLOGD Host2' in the SERVER UNIT display.")
sessionLogZeroAccountingAll = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogZeroAccountingAll.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogZeroAccountingAll.setDescription('A control to clear all entries in the accounting log including command log entries. Corresponds directly to the command CLEAR SERVER ACCOUNTING ALL. In response to a get-request or get-next-request the agent always returns ready for this value.')
sessionLogZeroCommandLogging = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogZeroCommandLogging.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogZeroCommandLogging.setDescription('A control to clear all command log entries. Corresponds directly to the command CLEAR SERVER COMMAND LOGGING. In response to a get-request or get-next-request the agent always returns ready for this value.')
sessionLogTl1AutonomousLogSize = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogTl1AutonomousLogSize.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogTl1AutonomousLogSize.setDescription('The size in bytes of the TL1 autonomous log, which records alarms. A change in log size will not take effect until rebooting the unit.')
sessionLogTl1CommandLogSize = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogTl1CommandLogSize.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogTl1CommandLogSize.setDescription('The size in bytes of the TL1 command log, which records all TL1 commands entered on this server. A change in log size will not take effect until rebooting the unit.')
sessionLogZeroDataLogging = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogZeroDataLogging.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogZeroDataLogging.setDescription('A control to clear all data log entries. Corresponds directly to the command CLEAR SERVER DATA LOGGING. In response to a get-request or get-next-request the agent always returns ready for this value.')
sessionLogZeroAlarmLogging = MibScalar((1, 3, 6, 1, 4, 1, 33, 13, 6, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLogZeroAlarmLogging.setStatus('mandatory')
if mibBuilder.loadTexts: sessionLogZeroAlarmLogging.setDescription('Control to clear all alarm log entries. In response to a get-request or a get-next-request the agent always returns ready for this value.')
cclParsedScriptTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 7, 1), )
if mibBuilder.loadTexts: cclParsedScriptTable.setStatus('mandatory')
if mibBuilder.loadTexts: cclParsedScriptTable.setDescription('A list of parsed CCL scripts.')
cclParsedScriptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 7, 1, 1), ).setIndexNames((0, "MRVINREACH", "cclScriptName"))
if mibBuilder.loadTexts: cclParsedScriptEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cclParsedScriptEntry.setDescription('Parsed CCL script information.')
cclScriptName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cclScriptName.setStatus('mandatory')
if mibBuilder.loadTexts: cclScriptName.setDescription("The name of a CCL script file that has been loaded from a script server. Corresponds directly to the name in a SERVER CCL command and the value labeled 'CCL name:' in the PORT CHARACTERISTICS display.")
cclScriptControl = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("refresh", 1), ("delete", 2))).clone('refresh')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cclScriptControl.setStatus('mandatory')
if mibBuilder.loadTexts: cclScriptControl.setDescription('Control for maintaining the CCL script. The refresh action consists of retrieving the script by name from a script server and parsing it into an executable format. This may be used to add an entry to the table or refresh an existing entry with a new version of the CCL script from the server. This command may take ten seconds or more to complete and may fail if the script file cannot be retrieved or an error is encountered in parsing the CCL script. An error value of genErr is returned upon refresh failure. The refresh action corresponds directly to the commnd: REFRESH SERVER CCL. Setting this field to delete causes a script that is NOT being referenced by any ports to be removed from the list and its memory freed. This action corresponds directly to the command: DELETE SERVER CCL. An error value of badValue is returned upon delete failure.')
cclPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 7, 2), )
if mibBuilder.loadTexts: cclPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cclPortTable.setDescription('A list of ccl character port entries.')
cclPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 7, 2, 1), ).setIndexNames((0, "MRVINREACH", "charPortIndex"))
if mibBuilder.loadTexts: cclPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cclPortEntry.setDescription('CCL parameter values for a port.')
cclPortCclName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 7, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cclPortCclName.setStatus('mandatory')
if mibBuilder.loadTexts: cclPortCclName.setDescription('The name of the ARAP modem CCL script file.')
cclPortModemAudible = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cclPortModemAudible.setStatus('mandatory')
if mibBuilder.loadTexts: cclPortModemAudible.setDescription('This boolean indicates if the CCL script should put the modem into audible mode.')
broadcastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 8, 1), )
if mibBuilder.loadTexts: broadcastGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: broadcastGroupTable.setDescription('A list of broadcast groups.')
broadcastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 8, 1, 1), ).setIndexNames((0, "MRVINREACH", "broadcastGroupIndex"))
if mibBuilder.loadTexts: broadcastGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: broadcastGroupEntry.setDescription('Broadcast group information.')
broadcastGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: broadcastGroupIndex.setDescription('An index value that uniquely identifies a broadcast group.')
broadcastGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastGroupStatus.setStatus('mandatory')
if mibBuilder.loadTexts: broadcastGroupStatus.setDescription("A status value for the broadcast group. The value 'enabled' means that the group is active and broadcasting data whereas 'disabled' means that the group is not active.")
broadcastGroupMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 8, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastGroupMaster.setStatus('mandatory')
if mibBuilder.loadTexts: broadcastGroupMaster.setDescription('An index value that uniquely identifies the Master Broadcast Port for this group. The port provided in this object is the same port as identified by charPortIndex in the standard Character MIB.')
broadcastGroupSlaves = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 8, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastGroupSlaves.setStatus('mandatory')
if mibBuilder.loadTexts: broadcastGroupSlaves.setDescription("A bitmap representing the ports included in this broadcast group. A bit with a value of '1' means the corresponding port is included in the broadcast group whereas a value of '0' indicates that the port is not part of the broadcast group.")
broadcastGroupSlavesBroadcastOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 8, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastGroupSlavesBroadcastOnly.setStatus('mandatory')
if mibBuilder.loadTexts: broadcastGroupSlavesBroadcastOnly.setDescription("A bitmap representing the ports set up to discard input data and transmit only the broadcast data on the line. A bit set to '1' means that the corresponding port will only broadcast the data and discard any input.")
broadcastGroupSlaveTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65554))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastGroupSlaveTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: broadcastGroupSlaveTcpPort.setDescription("A TCP port number on which the broadcast group process will listen for incoming TCP connections. A client connected to this particular port will receive the data broadcast by the Master Port. A value of '0' indicates that no TCP port is defined.")
broadcastGroupSlaveTcpBroadcastOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastGroupSlaveTcpBroadcastOnly.setStatus('mandatory')
if mibBuilder.loadTexts: broadcastGroupSlaveTcpBroadcastOnly.setDescription('Specifies whether the TCP port will discard input characters for the Master port so that the Master port operates in broadcast only mode.')
pingHostsTable = MibTable((1, 3, 6, 1, 4, 1, 33, 13, 9, 1), )
if mibBuilder.loadTexts: pingHostsTable.setStatus('mandatory')
if mibBuilder.loadTexts: pingHostsTable.setDescription('A list of ICMP ping hosts.')
pingHostsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 13, 9, 1, 1), ).setIndexNames((0, "MRVINREACH", "icmpPingHostIndex"))
if mibBuilder.loadTexts: pingHostsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pingHostsEntry.setDescription('Ping Hosts information.')
icmpPingHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpPingHostIndex.setStatus('mandatory')
if mibBuilder.loadTexts: icmpPingHostIndex.setDescription('An index value that uniquely identifies a ping host.')
icmpPingHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 9, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpPingHostAddress.setStatus('mandatory')
if mibBuilder.loadTexts: icmpPingHostAddress.setDescription('The host address to be monitored to make sure it is reachable using ICMP pings. This address must be unique within the table, and must be Set to a non-zero value prior to configuring the other attributes of the ping host. A set-request with an IpAddress of zero will make this entry inactive.')
icmpPingHostDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpPingHostDescription.setStatus('mandatory')
if mibBuilder.loadTexts: icmpPingHostDescription.setDescription('This is an optional description of the ping host.')
icmpPingHostNotificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("snmp", 2))).clone('snmp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpPingHostNotificationType.setStatus('mandatory')
if mibBuilder.loadTexts: icmpPingHostNotificationType.setDescription('Indicates the type of notification used, if any, when the ping host is determined to be unreachable. If the type is snmp, a trap is sent to configured trap clients.')
icmpPingHostPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpPingHostPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: icmpPingHostPollingInterval.setDescription('The time in seconds between sending an ICMP ping to a ping host in order to check for reachability.')
icmpPingHostMaximumRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpPingHostMaximumRetries.setStatus('mandatory')
if mibBuilder.loadTexts: icmpPingHostMaximumRetries.setDescription('The maximum consecutive failed attempts to reach the host via ICMP ping before sending notification as specified by icmpPingHostNotificationType.')
icmpPingHostTrapSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpPingHostTrapSeverityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: icmpPingHostTrapSeverityLevel.setDescription('Indicates the severity level of a trap to be sent out when the host is unreachable.')
icmpPingHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 13, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpPingHostStatus.setStatus('mandatory')
if mibBuilder.loadTexts: icmpPingHostStatus.setDescription('Indicates the current status of the ping host. If the host is reachable, the status is cleared. Otherwise, it is the same as the icmpPingHostTrapSeverityLevel.')
contactClosureChanged = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: contactClosureChanged.setDescription('Indication that the contact closure transitioned to open or closed.')
powerAlarmFuseBankA = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,31)).setObjects(("MRVINREACH", "basicPowerStatusFuseA"), ("MRVINREACH", "sysLocation"))
if mibBuilder.loadTexts: powerAlarmFuseBankA.setDescription('Indicates that a fuse from bank A tripped its breaker, or that it went operational. However, it is unlikely that a trap would be issued when the fuse starts working.')
powerAlarmFuseBankB = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,32)).setObjects(("MRVINREACH", "basicPowerStatusFuseB"), ("MRVINREACH", "sysLocation"))
if mibBuilder.loadTexts: powerAlarmFuseBankB.setDescription('Indicates that a fuse from bank B tripped its breaker, or that it went operational. However, it is unlikely that a trap would be issued when the fuse starts working.')
powerSupplyAlarmA = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,33)).setObjects(("MRVINREACH", "basicPowerSupplyStatusA"), ("MRVINREACH", "sysLocation"))
if mibBuilder.loadTexts: powerSupplyAlarmA.setDescription('Indicates that power supply A lost or regained power. However, it is unlikely that a trap would be issued when the power comes on.')
powerSupplyAlarmB = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,34)).setObjects(("MRVINREACH", "basicPowerSupplyStatusB"), ("MRVINREACH", "sysLocation"))
if mibBuilder.loadTexts: powerSupplyAlarmB.setDescription('Indicates that power supply B lost or regained power. However, it is unlikely that a trap would be issued when the power comes on.')
portInputSignalChange = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,35)).setObjects(("MRVINREACH", "rs232InSigState"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "rs232PortIndex"))
if mibBuilder.loadTexts: portInputSignalChange.setDescription('Indicates that an input signal on a port has transitioned to the state indicated in the variable rs232InSigState.')
portOutputSignalChange = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,36)).setObjects(("MRVINREACH", "rs232OutSigState"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "rs232PortIndex"))
if mibBuilder.loadTexts: portOutputSignalChange.setDescription('Indicates that an output signal on a port has transitioned to the state indicated in the variable rs232OutSigState.')
humidityThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,37)).setObjects(("MRVINREACH", "basicHumidityValue"), ("MRVINREACH", "basicTemperatureHumiditySensorName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicHumiditySensorIndex"), ("MRVINREACH", "basicHumidityAlarmStatus"))
if mibBuilder.loadTexts: humidityThresholdExceeded.setDescription('Indication that the humidity exceeded a threshhold and the value of the currrent humidity.')
temperatureThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,38)).setObjects(("MRVINREACH", "basicTemperatureValue"), ("MRVINREACH", "basicTemperatureHumiditySensorName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicTemperatureSensorIndex"), ("MRVINREACH", "basicTemperatureAlarmStatus"))
if mibBuilder.loadTexts: temperatureThresholdExceeded.setDescription('Indication that the temperature exceeded a threshhold and the value of the currrent temperature.')
alarmMasterNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,39)).setObjects(("MRVINREACH", "basicPortIndex"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicPortAlarmMasterStatus"))
if mibBuilder.loadTexts: alarmMasterNotResponding.setDescription('Indication that the high density alarm management device lost or regained contact with the inReach port to which it was connected as indicated by the basicPortAlarmMasterStatus variable.')
alarmMasterInputStateChange = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,41)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"))
if mibBuilder.loadTexts: alarmMasterInputStateChange.setDescription('Indication that the alarm input point within a high density alarm management port transitioned to open or closed.')
asciiToTrapTranslation = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,42)).setObjects(("MRVINREACH", "basicPortAsciiToTrapTranslationTrapSeverity"), ("MRVINREACH", "basicPortAsciiToTrapTranslationLastMessage"))
if mibBuilder.loadTexts: asciiToTrapTranslation.setDescription('This trap contains ASCII data, which arrived at serial port, was formatted as a trap, and sent out on the network.')
powerMasterNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,43)).setObjects(("MRVINREACH", "basicPortIndex"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicPortPowerMasterDeviceStatus"))
if mibBuilder.loadTexts: powerMasterNotResponding.setDescription('Indication that the power management port lost or regained contact with the power unit to which it was connected as indicated by the basicPortPowerMasterDeviceStatus variable.')
temperatureNormal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,44)).setObjects(("MRVINREACH", "basicTemperatureValue"), ("MRVINREACH", "basicTemperatureHumiditySensorName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicTemperatureSensorIndex"), ("MRVINREACH", "basicTemperatureAlarmStatus"))
if mibBuilder.loadTexts: temperatureNormal.setDescription('Indication that the temperature returned within bounds, and the value of the currrent temperature.')
humidityNormal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,45)).setObjects(("MRVINREACH", "basicHumidityValue"), ("MRVINREACH", "basicTemperatureHumiditySensorName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicHumiditySensorIndex"), ("MRVINREACH", "basicHumidityAlarmStatus"))
if mibBuilder.loadTexts: humidityNormal.setDescription('Indication that the humidity returned within bounds, and the currrent humidity reading.')
alarmMasterSideAOff = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,46)).setObjects(("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicPortIndex"))
if mibBuilder.loadTexts: alarmMasterSideAOff.setDescription('Indication that side A powered off in the attached IR7104 alarm unit due to DC rail fluctuations.')
alarmMasterSideBOff = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,47)).setObjects(("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicPortIndex"))
if mibBuilder.loadTexts: alarmMasterSideBOff.setDescription('Indication that side B powered off in the attached IR7104 alarm unit due to DC rail fluctuations.')
alarmMasterSideAOn = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,48)).setObjects(("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicPortIndex"))
if mibBuilder.loadTexts: alarmMasterSideAOn.setDescription('Indication that side A powered on in the attached IR7104 alarm unit after previous power off.')
alarmMasterSideBOn = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,49)).setObjects(("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicPortIndex"))
if mibBuilder.loadTexts: alarmMasterSideBOn.setDescription('Indication that side B powered on in the attached IR7104 alarm unit after previous power off.')
icmpPingHostNotReachable = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,50)).setObjects(("MRVINREACH", "icmpPingHostAddress"), ("MRVINREACH", "icmpPingHostDescription"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "icmpPingHostPollingInterval"), ("MRVINREACH", "icmpPingHostMaximumRetries"), ("MRVINREACH", "icmpPingHostStatus"))
if mibBuilder.loadTexts: icmpPingHostNotReachable.setDescription('Indication that the icmp Ping Host is not reachable after polling for icmpPingHostMaximumRetries.')
icmpPingHostResponding = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,51)).setObjects(("MRVINREACH", "icmpPingHostAddress"), ("MRVINREACH", "icmpPingHostDescription"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "icmpPingHostPollingInterval"), ("MRVINREACH", "icmpPingHostMaximumRetries"), ("MRVINREACH", "icmpPingHostStatus"))
if mibBuilder.loadTexts: icmpPingHostResponding.setDescription('Indication that the icmp Ping Host is reachable again after a failure.')
alarmInputLowDensity0001Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10001)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0001Alarm.setDescription('Generated when alarm point 1 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0001Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20001)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0001Normal.setDescription('Generated when alarm point 1 from a low density unit transitions to the normal state.')
alarmInputLowDensity0002Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10002)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0002Alarm.setDescription('Generated when alarm point 2 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0002Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20002)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0002Normal.setDescription('Generated when alarm point 2 from a low density unit transitions to the normal state.')
alarmInputLowDensity0003Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10003)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0003Alarm.setDescription('Generated when alarm point 3 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0003Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20003)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0003Normal.setDescription('Generated when alarm point 3 from a low density unit transitions to the normal state.')
alarmInputLowDensity0004Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10004)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0004Alarm.setDescription('Generated when alarm point 4 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0004Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20004)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0004Normal.setDescription('Generated when alarm point 4 from a low density unit transitions to the normal state.')
alarmInputLowDensity0005Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10005)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0005Alarm.setDescription('Generated when alarm point 5 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0005Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20005)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0005Normal.setDescription('Generated when alarm point 5 from a low density unit transitions to the normal state.')
alarmInputLowDensity0006Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10006)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0006Alarm.setDescription('Generated when alarm point 6 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0006Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20006)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0006Normal.setDescription('Generated when alarm point 6 from a low density unit transitions to the normal state.')
alarmInputLowDensity0007Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10007)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0007Alarm.setDescription('Generated when alarm point 7 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0007Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20007)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0007Normal.setDescription('Generated when alarm point 7 from a low density unit transitions to the normal state.')
alarmInputLowDensity0008Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10008)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0008Alarm.setDescription('Generated when alarm point 8 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0008Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20008)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0008Normal.setDescription('Generated when alarm point 8 from a low density unit transitions to the normal state.')
alarmInputLowDensity0009Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10009)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0009Alarm.setDescription('Generated when alarm point 9 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0009Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20009)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0009Normal.setDescription('Generated when alarm point 9 from a low density unit transitions to the normal state.')
alarmInputLowDensity0010Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10010)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0010Alarm.setDescription('Generated when alarm point 10 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0010Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20010)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0010Normal.setDescription('Generated when alarm point 10 from a low density unit transitions to the normal state.')
alarmInputLowDensity0011Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10011)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0011Alarm.setDescription('Generated when alarm point 11 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0011Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20011)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0011Normal.setDescription('Generated when alarm point 11 from a low density unit transitions to the normal state.')
alarmInputLowDensity0012Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10012)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0012Alarm.setDescription('Generated when alarm point 12 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0012Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20012)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0012Normal.setDescription('Generated when alarm point 12 from a low density unit transitions to the normal state.')
alarmInputLowDensity0013Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10013)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0013Alarm.setDescription('Generated when alarm point 13 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0013Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20013)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0013Normal.setDescription('Generated when alarm point 13 from a low density unit transitions to the normal state.')
alarmInputLowDensity0014Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10014)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0014Alarm.setDescription('Generated when alarm point 14 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0014Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20014)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0014Normal.setDescription('Generated when alarm point 14 from a low density unit transitions to the normal state.')
alarmInputLowDensity0015Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10015)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0015Alarm.setDescription('Generated when alarm point 15 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0015Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20015)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0015Normal.setDescription('Generated when alarm point 15 from a low density unit transitions to the normal state.')
alarmInputLowDensity0016Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10016)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0016Alarm.setDescription('Generated when alarm point 16 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0016Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20016)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0016Normal.setDescription('Generated when alarm point 16 from a low density unit transitions to the normal state.')
alarmInputLowDensity0017Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10017)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0017Alarm.setDescription('Generated when alarm point 17 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0017Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20017)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0017Normal.setDescription('Generated when alarm point 17 from a low density unit transitions to the normal state.')
alarmInputLowDensity0018Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10018)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0018Alarm.setDescription('Generated when alarm point 18 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0018Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20018)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0018Normal.setDescription('Generated when alarm point 18 from a low density unit transitions to the normal state.')
alarmInputLowDensity0019Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10019)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0019Alarm.setDescription('Generated when alarm point 19 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0019Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20019)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0019Normal.setDescription('Generated when alarm point 19 from a low density unit transitions to the normal state.')
alarmInputLowDensity0020Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10020)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0020Alarm.setDescription('Generated when alarm point 20 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0020Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20020)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0020Normal.setDescription('Generated when alarm point 20 from a low density unit transitions to the normal state.')
alarmInputLowDensity0021Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10021)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0021Alarm.setDescription('Generated when alarm point 21 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0021Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20021)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0021Normal.setDescription('Generated when alarm point 21 from a low density unit transitions to the normal state.')
alarmInputLowDensity0022Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10022)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0022Alarm.setDescription('Generated when alarm point 22 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0022Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20022)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0022Normal.setDescription('Generated when alarm point 22 from a low density unit transitions to the normal state.')
alarmInputLowDensity0023Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10023)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0023Alarm.setDescription('Generated when alarm point 23 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0023Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20023)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0023Normal.setDescription('Generated when alarm point 23 from a low density unit transitions to the normal state.')
alarmInputLowDensity0024Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10024)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0024Alarm.setDescription('Generated when alarm point 24 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0024Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20024)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0024Normal.setDescription('Generated when alarm point 24 from a low density unit transitions to the normal state.')
alarmInputLowDensity0025Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10025)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0025Alarm.setDescription('Generated when alarm point 25 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0025Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20025)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0025Normal.setDescription('Generated when alarm point 25 from a low density unit transitions to the normal state.')
alarmInputLowDensity0026Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10026)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0026Alarm.setDescription('Generated when alarm point 26 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0026Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20026)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0026Normal.setDescription('Generated when alarm point 26 from a low density unit transitions to the normal state.')
alarmInputLowDensity0027Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10027)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0027Alarm.setDescription('Generated when alarm point 27 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0027Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20027)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0027Normal.setDescription('Generated when alarm point 27 from a low density unit transitions to the normal state.')
alarmInputLowDensity0028Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10028)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0028Alarm.setDescription('Generated when alarm point 28 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0028Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20028)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0028Normal.setDescription('Generated when alarm point 28 from a low density unit transitions to the normal state.')
alarmInputLowDensity0029Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10029)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0029Alarm.setDescription('Generated when alarm point 29 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0029Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20029)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0029Normal.setDescription('Generated when alarm point 29 from a low density unit transitions to the normal state.')
alarmInputLowDensity0030Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10030)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0030Alarm.setDescription('Generated when alarm point 30 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0030Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20030)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0030Normal.setDescription('Generated when alarm point 30 from a low density unit transitions to the normal state.')
alarmInputLowDensity0031Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10031)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0031Alarm.setDescription('Generated when alarm point 31 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0031Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20031)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0031Normal.setDescription('Generated when alarm point 31 from a low density unit transitions to the normal state.')
alarmInputLowDensity0032Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10032)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0032Alarm.setDescription('Generated when alarm point 32 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0032Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20032)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0032Normal.setDescription('Generated when alarm point 32 from a low density unit transitions to the normal state.')
alarmInputLowDensity0033Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10033)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0033Alarm.setDescription('Generated when alarm point 33 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0033Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20033)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0033Normal.setDescription('Generated when alarm point 33 from a low density unit transitions to the normal state.')
alarmInputLowDensity0034Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10034)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0034Alarm.setDescription('Generated when alarm point 34 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0034Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20034)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0034Normal.setDescription('Generated when alarm point 34 from a low density unit transitions to the normal state.')
alarmInputLowDensity0035Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10035)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0035Alarm.setDescription('Generated when alarm point 35 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0035Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20035)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0035Normal.setDescription('Generated when alarm point 35 from a low density unit transitions to the normal state.')
alarmInputLowDensity0036Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10036)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0036Alarm.setDescription('Generated when alarm point 36 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0036Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20036)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0036Normal.setDescription('Generated when alarm point 36 from a low density unit transitions to the normal state.')
alarmInputLowDensity0037Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10037)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0037Alarm.setDescription('Generated when alarm point 37 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0037Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20037)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0037Normal.setDescription('Generated when alarm point 37 from a low density unit transitions to the normal state.')
alarmInputLowDensity0038Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10038)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0038Alarm.setDescription('Generated when alarm point 38 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0038Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20038)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0038Normal.setDescription('Generated when alarm point 38 from a low density unit transitions to the normal state.')
alarmInputLowDensity0039Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10039)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0039Alarm.setDescription('Generated when alarm point 39 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0039Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20039)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0039Normal.setDescription('Generated when alarm point 39 from a low density unit transitions to the normal state.')
alarmInputLowDensity0040Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10040)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0040Alarm.setDescription('Generated when alarm point 40 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0040Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20040)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0040Normal.setDescription('Generated when alarm point 40 from a low density unit transitions to the normal state.')
alarmInputLowDensity0041Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10041)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0041Alarm.setDescription('Generated when alarm point 41 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0041Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20041)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0041Normal.setDescription('Generated when alarm point 41 from a low density unit transitions to the normal state.')
alarmInputLowDensity0042Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10042)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0042Alarm.setDescription('Generated when alarm point 42 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0042Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20042)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0042Normal.setDescription('Generated when alarm point 42 from a low density unit transitions to the normal state.')
alarmInputLowDensity0043Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10043)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0043Alarm.setDescription('Generated when alarm point 43 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0043Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20043)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0043Normal.setDescription('Generated when alarm point 43 from a low density unit transitions to the normal state.')
alarmInputLowDensity0044Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10044)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0044Alarm.setDescription('Generated when alarm point 44 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0044Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20044)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0044Normal.setDescription('Generated when alarm point 44 from a low density unit transitions to the normal state.')
alarmInputLowDensity0045Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10045)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0045Alarm.setDescription('Generated when alarm point 45 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0045Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20045)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0045Normal.setDescription('Generated when alarm point 45 from a low density unit transitions to the normal state.')
alarmInputLowDensity0046Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10046)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0046Alarm.setDescription('Generated when alarm point 46 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0046Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20046)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0046Normal.setDescription('Generated when alarm point 46 from a low density unit transitions to the normal state.')
alarmInputLowDensity0047Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10047)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0047Alarm.setDescription('Generated when alarm point 47 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0047Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20047)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0047Normal.setDescription('Generated when alarm point 47 from a low density unit transitions to the normal state.')
alarmInputLowDensity0048Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10048)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0048Alarm.setDescription('Generated when alarm point 48 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0048Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20048)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0048Normal.setDescription('Generated when alarm point 48 from a low density unit transitions to the normal state.')
alarmInputLowDensity0049Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10049)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0049Alarm.setDescription('Generated when alarm point 49 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0049Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20049)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0049Normal.setDescription('Generated when alarm point 49 from a low density unit transitions to the normal state.')
alarmInputLowDensity0050Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10050)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0050Alarm.setDescription('Generated when alarm point 50 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0050Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20050)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0050Normal.setDescription('Generated when alarm point 50 from a low density unit transitions to the normal state.')
alarmInputLowDensity0051Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10051)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0051Alarm.setDescription('Generated when alarm point 51 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0051Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20051)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0051Normal.setDescription('Generated when alarm point 51 from a low density unit transitions to the normal state.')
alarmInputLowDensity0052Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10052)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0052Alarm.setDescription('Generated when alarm point 52 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0052Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20052)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0052Normal.setDescription('Generated when alarm point 52 from a low density unit transitions to the normal state.')
alarmInputLowDensity0053Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10053)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0053Alarm.setDescription('Generated when alarm point 53 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0053Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20053)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0053Normal.setDescription('Generated when alarm point 53 from a low density unit transitions to the normal state.')
alarmInputLowDensity0054Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10054)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0054Alarm.setDescription('Generated when alarm point 54 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0054Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20054)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0054Normal.setDescription('Generated when alarm point 54 from a low density unit transitions to the normal state.')
alarmInputLowDensity0055Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10055)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0055Alarm.setDescription('Generated when alarm point 55 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0055Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20055)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0055Normal.setDescription('Generated when alarm point 55 from a low density unit transitions to the normal state.')
alarmInputLowDensity0056Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10056)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0056Alarm.setDescription('Generated when alarm point 56 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0056Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20056)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0056Normal.setDescription('Generated when alarm point 56 from a low density unit transitions to the normal state.')
alarmInputLowDensity0057Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10057)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0057Alarm.setDescription('Generated when alarm point 57 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0057Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20057)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0057Normal.setDescription('Generated when alarm point 57 from a low density unit transitions to the normal state.')
alarmInputLowDensity0058Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10058)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0058Alarm.setDescription('Generated when alarm point 58 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0058Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20058)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0058Normal.setDescription('Generated when alarm point 58 from a low density unit transitions to the normal state.')
alarmInputLowDensity0059Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10059)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0059Alarm.setDescription('Generated when alarm point 59 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0059Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20059)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0059Normal.setDescription('Generated when alarm point 59 from a low density unit transitions to the normal state.')
alarmInputLowDensity0060Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10060)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0060Alarm.setDescription('Generated when alarm point 60 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0060Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20060)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0060Normal.setDescription('Generated when alarm point 60 from a low density unit transitions to the normal state.')
alarmInputLowDensity0061Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10061)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0061Alarm.setDescription('Generated when alarm point 61 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0061Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20061)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0061Normal.setDescription('Generated when alarm point 61 from a low density unit transitions to the normal state.')
alarmInputLowDensity0062Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10062)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0062Alarm.setDescription('Generated when alarm point 62 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0062Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20062)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0062Normal.setDescription('Generated when alarm point 62 from a low density unit transitions to the normal state.')
alarmInputLowDensity0063Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10063)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0063Alarm.setDescription('Generated when alarm point 63 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0063Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20063)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0063Normal.setDescription('Generated when alarm point 63 from a low density unit transitions to the normal state.')
alarmInputLowDensity0064Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10064)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0064Alarm.setDescription('Generated when alarm point 64 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0064Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20064)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0064Normal.setDescription('Generated when alarm point 64 from a low density unit transitions to the normal state.')
alarmInputLowDensity0065Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10065)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0065Alarm.setDescription('Generated when alarm point 65 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0065Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20065)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0065Normal.setDescription('Generated when alarm point 65 from a low density unit transitions to the normal state.')
alarmInputLowDensity0066Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10066)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0066Alarm.setDescription('Generated when alarm point 66 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0066Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20066)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0066Normal.setDescription('Generated when alarm point 66 from a low density unit transitions to the normal state.')
alarmInputLowDensity0067Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10067)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0067Alarm.setDescription('Generated when alarm point 67 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0067Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20067)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0067Normal.setDescription('Generated when alarm point 67 from a low density unit transitions to the normal state.')
alarmInputLowDensity0068Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10068)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0068Alarm.setDescription('Generated when alarm point 68 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0068Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20068)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0068Normal.setDescription('Generated when alarm point 68 from a low density unit transitions to the normal state.')
alarmInputLowDensity0069Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10069)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0069Alarm.setDescription('Generated when alarm point 69 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0069Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20069)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0069Normal.setDescription('Generated when alarm point 69 from a low density unit transitions to the normal state.')
alarmInputLowDensity0070Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10070)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0070Alarm.setDescription('Generated when alarm point 70 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0070Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20070)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0070Normal.setDescription('Generated when alarm point 70 from a low density unit transitions to the normal state.')
alarmInputLowDensity0071Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10071)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0071Alarm.setDescription('Generated when alarm point 71 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0071Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20071)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0071Normal.setDescription('Generated when alarm point 71 from a low density unit transitions to the normal state.')
alarmInputLowDensity0072Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10072)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0072Alarm.setDescription('Generated when alarm point 72 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0072Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20072)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0072Normal.setDescription('Generated when alarm point 72 from a low density unit transitions to the normal state.')
alarmInputLowDensity0073Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10073)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0073Alarm.setDescription('Generated when alarm point 73 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0073Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20073)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0073Normal.setDescription('Generated when alarm point 73 from a low density unit transitions to the normal state.')
alarmInputLowDensity0074Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10074)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0074Alarm.setDescription('Generated when alarm point 74 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0074Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20074)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0074Normal.setDescription('Generated when alarm point 74 from a low density unit transitions to the normal state.')
alarmInputLowDensity0075Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10075)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0075Alarm.setDescription('Generated when alarm point 75 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0075Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20075)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0075Normal.setDescription('Generated when alarm point 75 from a low density unit transitions to the normal state.')
alarmInputLowDensity0076Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10076)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0076Alarm.setDescription('Generated when alarm point 76 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0076Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20076)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0076Normal.setDescription('Generated when alarm point 76 from a low density unit transitions to the normal state.')
alarmInputLowDensity0077Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10077)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0077Alarm.setDescription('Generated when alarm point 77 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0077Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20077)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0077Normal.setDescription('Generated when alarm point 77 from a low density unit transitions to the normal state.')
alarmInputLowDensity0078Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10078)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0078Alarm.setDescription('Generated when alarm point 78 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0078Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20078)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0078Normal.setDescription('Generated when alarm point 78 from a low density unit transitions to the normal state.')
alarmInputLowDensity0079Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10079)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0079Alarm.setDescription('Generated when alarm point 79 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0079Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20079)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0079Normal.setDescription('Generated when alarm point 79 from a low density unit transitions to the normal state.')
alarmInputLowDensity0080Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,10080)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0080Alarm.setDescription('Generated when alarm point 80 from a low density unit transitions to the alarm state.')
alarmInputLowDensity0080Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,20080)).setObjects(("MRVINREACH", "basicContactClosureOrAlarmInputValue"), ("MRVINREACH", "basicContactClosureOrAlarmInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicContactClosureOrAlarmInputIndex"), ("MRVINREACH", "basicContactClosureOrAlarmInputStatus"), ("MRVINREACH", "basicContactClosureOrAlarmInputZone"), ("MRVINREACH", "basicContactClosureOrAlarmInputRelatedEquipment"), ("MRVINREACH", "basicContactClosureOrAlarmInputSiteId"), ("MRVINREACH", "basicContactClosureOrAlarmInputManufacturer"), ("MRVINREACH", "basicContactClosureOrAlarmInputModel"))
if mibBuilder.loadTexts: alarmInputLowDensity0080Normal.setDescription('Generated when alarm point 80 from a low density unit transitions to the normal state.')
xAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 49))
alarmInputHighDensity0001Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30001)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0001Alarm.setDescription('Generated when alarm point 1 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0001Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40001)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0001Normal.setDescription('Generated when alarm point 1 from a high density unit transitions to the normal state.')
alarmInputHighDensity0002Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30002)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0002Alarm.setDescription('Generated when alarm point 2 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0002Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40002)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0002Normal.setDescription('Generated when alarm point 2 from a high density unit transitions to the normal state.')
alarmInputHighDensity0003Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30003)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0003Alarm.setDescription('Generated when alarm point 3 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0003Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40003)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0003Normal.setDescription('Generated when alarm point 3 from a high density unit transitions to the normal state.')
alarmInputHighDensity0004Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30004)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0004Alarm.setDescription('Generated when alarm point 4 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0004Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40004)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0004Normal.setDescription('Generated when alarm point 4 from a high density unit transitions to the normal state.')
alarmInputHighDensity0005Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30005)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0005Alarm.setDescription('Generated when alarm point 5 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0005Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40005)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0005Normal.setDescription('Generated when alarm point 5 from a high density unit transitions to the normal state.')
alarmInputHighDensity0006Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30006)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0006Alarm.setDescription('Generated when alarm point 6 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0006Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40006)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0006Normal.setDescription('Generated when alarm point 6 from a high density unit transitions to the normal state.')
alarmInputHighDensity0007Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30007)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0007Alarm.setDescription('Generated when alarm point 7 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0007Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40007)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0007Normal.setDescription('Generated when alarm point 7 from a high density unit transitions to the normal state.')
alarmInputHighDensity0008Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30008)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0008Alarm.setDescription('Generated when alarm point 8 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0008Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40008)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0008Normal.setDescription('Generated when alarm point 8 from a high density unit transitions to the normal state.')
alarmInputHighDensity0009Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30009)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0009Alarm.setDescription('Generated when alarm point 9 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0009Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40009)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0009Normal.setDescription('Generated when alarm point 9 from a high density unit transitions to the normal state.')
alarmInputHighDensity0010Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30010)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0010Alarm.setDescription('Generated when alarm point 10 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0010Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40010)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0010Normal.setDescription('Generated when alarm point 10 from a high density unit transitions to the normal state.')
alarmInputHighDensity0011Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30011)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0011Alarm.setDescription('Generated when alarm point 11 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0011Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40011)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0011Normal.setDescription('Generated when alarm point 11 from a high density unit transitions to the normal state.')
alarmInputHighDensity0012Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30012)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0012Alarm.setDescription('Generated when alarm point 12 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0012Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40012)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0012Normal.setDescription('Generated when alarm point 12 from a high density unit transitions to the normal state.')
alarmInputHighDensity0013Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30013)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0013Alarm.setDescription('Generated when alarm point 13 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0013Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40013)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0013Normal.setDescription('Generated when alarm point 13 from a high density unit transitions to the normal state.')
alarmInputHighDensity0014Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30014)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0014Alarm.setDescription('Generated when alarm point 14 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0014Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40014)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0014Normal.setDescription('Generated when alarm point 14 from a high density unit transitions to the normal state.')
alarmInputHighDensity0015Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30015)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0015Alarm.setDescription('Generated when alarm point 15 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0015Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40015)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0015Normal.setDescription('Generated when alarm point 15 from a high density unit transitions to the normal state.')
alarmInputHighDensity0016Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30016)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0016Alarm.setDescription('Generated when alarm point 16 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0016Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40016)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0016Normal.setDescription('Generated when alarm point 16 from a high density unit transitions to the normal state.')
alarmInputHighDensity0017Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30017)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0017Alarm.setDescription('Generated when alarm point 17 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0017Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40017)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0017Normal.setDescription('Generated when alarm point 17 from a high density unit transitions to the normal state.')
alarmInputHighDensity0018Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30018)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0018Alarm.setDescription('Generated when alarm point 18 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0018Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40018)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0018Normal.setDescription('Generated when alarm point 18 from a high density unit transitions to the normal state.')
alarmInputHighDensity0019Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30019)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0019Alarm.setDescription('Generated when alarm point 19 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0019Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40019)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0019Normal.setDescription('Generated when alarm point 19 from a high density unit transitions to the normal state.')
alarmInputHighDensity0020Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30020)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0020Alarm.setDescription('Generated when alarm point 20 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0020Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40020)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0020Normal.setDescription('Generated when alarm point 20 from a high density unit transitions to the normal state.')
alarmInputHighDensity0021Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30021)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0021Alarm.setDescription('Generated when alarm point 21 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0021Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40021)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0021Normal.setDescription('Generated when alarm point 21 from a high density unit transitions to the normal state.')
alarmInputHighDensity0022Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30022)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0022Alarm.setDescription('Generated when alarm point 22 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0022Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40022)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0022Normal.setDescription('Generated when alarm point 22 from a high density unit transitions to the normal state.')
alarmInputHighDensity0023Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30023)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0023Alarm.setDescription('Generated when alarm point 23 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0023Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40023)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0023Normal.setDescription('Generated when alarm point 23 from a high density unit transitions to the normal state.')
alarmInputHighDensity0024Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30024)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0024Alarm.setDescription('Generated when alarm point 24 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0024Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40024)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0024Normal.setDescription('Generated when alarm point 24 from a high density unit transitions to the normal state.')
alarmInputHighDensity0025Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30025)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0025Alarm.setDescription('Generated when alarm point 25 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0025Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40025)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0025Normal.setDescription('Generated when alarm point 25 from a high density unit transitions to the normal state.')
alarmInputHighDensity0026Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30026)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0026Alarm.setDescription('Generated when alarm point 26 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0026Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40026)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0026Normal.setDescription('Generated when alarm point 26 from a high density unit transitions to the normal state.')
alarmInputHighDensity0027Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30027)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0027Alarm.setDescription('Generated when alarm point 27 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0027Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40027)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0027Normal.setDescription('Generated when alarm point 27 from a high density unit transitions to the normal state.')
alarmInputHighDensity0028Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30028)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0028Alarm.setDescription('Generated when alarm point 28 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0028Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40028)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0028Normal.setDescription('Generated when alarm point 28 from a high density unit transitions to the normal state.')
alarmInputHighDensity0029Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30029)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0029Alarm.setDescription('Generated when alarm point 29 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0029Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40029)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0029Normal.setDescription('Generated when alarm point 29 from a high density unit transitions to the normal state.')
alarmInputHighDensity0030Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30030)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0030Alarm.setDescription('Generated when alarm point 30 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0030Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40030)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0030Normal.setDescription('Generated when alarm point 30 from a high density unit transitions to the normal state.')
alarmInputHighDensity0031Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30031)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0031Alarm.setDescription('Generated when alarm point 31 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0031Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40031)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0031Normal.setDescription('Generated when alarm point 31 from a high density unit transitions to the normal state.')
alarmInputHighDensity0032Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30032)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0032Alarm.setDescription('Generated when alarm point 32 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0032Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40032)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0032Normal.setDescription('Generated when alarm point 32 from a high density unit transitions to the normal state.')
alarmInputHighDensity0033Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30033)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0033Alarm.setDescription('Generated when alarm point 33 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0033Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40033)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0033Normal.setDescription('Generated when alarm point 33 from a high density unit transitions to the normal state.')
alarmInputHighDensity0034Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30034)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0034Alarm.setDescription('Generated when alarm point 34 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0034Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40034)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0034Normal.setDescription('Generated when alarm point 34 from a high density unit transitions to the normal state.')
alarmInputHighDensity0035Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30035)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0035Alarm.setDescription('Generated when alarm point 35 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0035Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40035)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0035Normal.setDescription('Generated when alarm point 35 from a high density unit transitions to the normal state.')
alarmInputHighDensity0036Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30036)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0036Alarm.setDescription('Generated when alarm point 36 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0036Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40036)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0036Normal.setDescription('Generated when alarm point 36 from a high density unit transitions to the normal state.')
alarmInputHighDensity0037Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30037)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0037Alarm.setDescription('Generated when alarm point 37 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0037Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40037)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0037Normal.setDescription('Generated when alarm point 37 from a high density unit transitions to the normal state.')
alarmInputHighDensity0038Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30038)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0038Alarm.setDescription('Generated when alarm point 38 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0038Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40038)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0038Normal.setDescription('Generated when alarm point 38 from a high density unit transitions to the normal state.')
alarmInputHighDensity0039Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30039)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0039Alarm.setDescription('Generated when alarm point 39 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0039Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40039)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0039Normal.setDescription('Generated when alarm point 39 from a high density unit transitions to the normal state.')
alarmInputHighDensity0040Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30040)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0040Alarm.setDescription('Generated when alarm point 40 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0040Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40040)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0040Normal.setDescription('Generated when alarm point 40 from a high density unit transitions to the normal state.')
alarmInputHighDensity0041Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30041)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0041Alarm.setDescription('Generated when alarm point 41 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0041Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40041)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0041Normal.setDescription('Generated when alarm point 41 from a high density unit transitions to the normal state.')
alarmInputHighDensity0042Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30042)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0042Alarm.setDescription('Generated when alarm point 42 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0042Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40042)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0042Normal.setDescription('Generated when alarm point 42 from a high density unit transitions to the normal state.')
alarmInputHighDensity0043Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30043)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0043Alarm.setDescription('Generated when alarm point 43 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0043Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40043)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0043Normal.setDescription('Generated when alarm point 43 from a high density unit transitions to the normal state.')
alarmInputHighDensity0044Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30044)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0044Alarm.setDescription('Generated when alarm point 44 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0044Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40044)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0044Normal.setDescription('Generated when alarm point 44 from a high density unit transitions to the normal state.')
alarmInputHighDensity0045Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30045)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0045Alarm.setDescription('Generated when alarm point 45 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0045Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40045)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0045Normal.setDescription('Generated when alarm point 45 from a high density unit transitions to the normal state.')
alarmInputHighDensity0046Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30046)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0046Alarm.setDescription('Generated when alarm point 46 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0046Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40046)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0046Normal.setDescription('Generated when alarm point 46 from a high density unit transitions to the normal state.')
alarmInputHighDensity0047Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30047)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0047Alarm.setDescription('Generated when alarm point 47 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0047Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40047)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0047Normal.setDescription('Generated when alarm point 47 from a high density unit transitions to the normal state.')
alarmInputHighDensity0048Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30048)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0048Alarm.setDescription('Generated when alarm point 48 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0048Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40048)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0048Normal.setDescription('Generated when alarm point 48 from a high density unit transitions to the normal state.')
alarmInputHighDensity0049Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30049)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0049Alarm.setDescription('Generated when alarm point 49 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0049Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40049)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0049Normal.setDescription('Generated when alarm point 49 from a high density unit transitions to the normal state.')
alarmInputHighDensity0050Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30050)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0050Alarm.setDescription('Generated when alarm point 50 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0050Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40050)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0050Normal.setDescription('Generated when alarm point 50 from a high density unit transitions to the normal state.')
alarmInputHighDensity0051Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30051)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0051Alarm.setDescription('Generated when alarm point 51 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0051Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40051)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0051Normal.setDescription('Generated when alarm point 51 from a high density unit transitions to the normal state.')
alarmInputHighDensity0052Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30052)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0052Alarm.setDescription('Generated when alarm point 52 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0052Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40052)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0052Normal.setDescription('Generated when alarm point 52 from a high density unit transitions to the normal state.')
alarmInputHighDensity0053Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30053)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0053Alarm.setDescription('Generated when alarm point 53 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0053Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40053)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0053Normal.setDescription('Generated when alarm point 53 from a high density unit transitions to the normal state.')
alarmInputHighDensity0054Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30054)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0054Alarm.setDescription('Generated when alarm point 54 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0054Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40054)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0054Normal.setDescription('Generated when alarm point 54 from a high density unit transitions to the normal state.')
alarmInputHighDensity0055Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30055)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0055Alarm.setDescription('Generated when alarm point 55 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0055Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40055)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0055Normal.setDescription('Generated when alarm point 55 from a high density unit transitions to the normal state.')
alarmInputHighDensity0056Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30056)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0056Alarm.setDescription('Generated when alarm point 56 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0056Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40056)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0056Normal.setDescription('Generated when alarm point 56 from a high density unit transitions to the normal state.')
alarmInputHighDensity0057Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30057)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0057Alarm.setDescription('Generated when alarm point 57 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0057Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40057)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0057Normal.setDescription('Generated when alarm point 57 from a high density unit transitions to the normal state.')
alarmInputHighDensity0058Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30058)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0058Alarm.setDescription('Generated when alarm point 58 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0058Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40058)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0058Normal.setDescription('Generated when alarm point 58 from a high density unit transitions to the normal state.')
alarmInputHighDensity0059Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30059)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0059Alarm.setDescription('Generated when alarm point 59 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0059Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40059)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0059Normal.setDescription('Generated when alarm point 59 from a high density unit transitions to the normal state.')
alarmInputHighDensity0060Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30060)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0060Alarm.setDescription('Generated when alarm point 60 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0060Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40060)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0060Normal.setDescription('Generated when alarm point 60 from a high density unit transitions to the normal state.')
alarmInputHighDensity0061Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30061)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0061Alarm.setDescription('Generated when alarm point 61 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0061Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40061)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0061Normal.setDescription('Generated when alarm point 61 from a high density unit transitions to the normal state.')
alarmInputHighDensity0062Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30062)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0062Alarm.setDescription('Generated when alarm point 62 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0062Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40062)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0062Normal.setDescription('Generated when alarm point 62 from a high density unit transitions to the normal state.')
alarmInputHighDensity0063Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30063)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0063Alarm.setDescription('Generated when alarm point 63 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0063Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40063)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0063Normal.setDescription('Generated when alarm point 63 from a high density unit transitions to the normal state.')
alarmInputHighDensity0064Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30064)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0064Alarm.setDescription('Generated when alarm point 64 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0064Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40064)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0064Normal.setDescription('Generated when alarm point 64 from a high density unit transitions to the normal state.')
alarmInputHighDensity0065Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30065)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0065Alarm.setDescription('Generated when alarm point 65 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0065Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40065)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0065Normal.setDescription('Generated when alarm point 65 from a high density unit transitions to the normal state.')
alarmInputHighDensity0066Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30066)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0066Alarm.setDescription('Generated when alarm point 66 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0066Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40066)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0066Normal.setDescription('Generated when alarm point 66 from a high density unit transitions to the normal state.')
alarmInputHighDensity0067Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30067)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0067Alarm.setDescription('Generated when alarm point 67 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0067Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40067)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0067Normal.setDescription('Generated when alarm point 67 from a high density unit transitions to the normal state.')
alarmInputHighDensity0068Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30068)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0068Alarm.setDescription('Generated when alarm point 68 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0068Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40068)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0068Normal.setDescription('Generated when alarm point 68 from a high density unit transitions to the normal state.')
alarmInputHighDensity0069Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30069)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0069Alarm.setDescription('Generated when alarm point 69 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0069Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40069)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0069Normal.setDescription('Generated when alarm point 69 from a high density unit transitions to the normal state.')
alarmInputHighDensity0070Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30070)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0070Alarm.setDescription('Generated when alarm point 70 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0070Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40070)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0070Normal.setDescription('Generated when alarm point 70 from a high density unit transitions to the normal state.')
alarmInputHighDensity0071Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30071)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0071Alarm.setDescription('Generated when alarm point 71 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0071Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40071)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0071Normal.setDescription('Generated when alarm point 71 from a high density unit transitions to the normal state.')
alarmInputHighDensity0072Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30072)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0072Alarm.setDescription('Generated when alarm point 72 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0072Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40072)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0072Normal.setDescription('Generated when alarm point 72 from a high density unit transitions to the normal state.')
alarmInputHighDensity0073Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30073)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0073Alarm.setDescription('Generated when alarm point 73 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0073Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40073)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0073Normal.setDescription('Generated when alarm point 73 from a high density unit transitions to the normal state.')
alarmInputHighDensity0074Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30074)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0074Alarm.setDescription('Generated when alarm point 74 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0074Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40074)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0074Normal.setDescription('Generated when alarm point 74 from a high density unit transitions to the normal state.')
alarmInputHighDensity0075Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30075)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0075Alarm.setDescription('Generated when alarm point 75 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0075Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40075)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0075Normal.setDescription('Generated when alarm point 75 from a high density unit transitions to the normal state.')
alarmInputHighDensity0076Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30076)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0076Alarm.setDescription('Generated when alarm point 76 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0076Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40076)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0076Normal.setDescription('Generated when alarm point 76 from a high density unit transitions to the normal state.')
alarmInputHighDensity0077Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30077)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0077Alarm.setDescription('Generated when alarm point 77 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0077Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40077)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0077Normal.setDescription('Generated when alarm point 77 from a high density unit transitions to the normal state.')
alarmInputHighDensity0078Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30078)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0078Alarm.setDescription('Generated when alarm point 78 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0078Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40078)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0078Normal.setDescription('Generated when alarm point 78 from a high density unit transitions to the normal state.')
alarmInputHighDensity0079Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30079)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0079Alarm.setDescription('Generated when alarm point 79 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0079Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40079)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0079Normal.setDescription('Generated when alarm point 79 from a high density unit transitions to the normal state.')
alarmInputHighDensity0080Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30080)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0080Alarm.setDescription('Generated when alarm point 80 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0080Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40080)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0080Normal.setDescription('Generated when alarm point 80 from a high density unit transitions to the normal state.')
alarmInputHighDensity0081Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30081)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0081Alarm.setDescription('Generated when alarm point 81 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0081Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40081)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0081Normal.setDescription('Generated when alarm point 81 from a high density unit transitions to the normal state.')
alarmInputHighDensity0082Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30082)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0082Alarm.setDescription('Generated when alarm point 82 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0082Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40082)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0082Normal.setDescription('Generated when alarm point 82 from a high density unit transitions to the normal state.')
alarmInputHighDensity0083Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30083)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0083Alarm.setDescription('Generated when alarm point 83 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0083Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40083)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0083Normal.setDescription('Generated when alarm point 83 from a high density unit transitions to the normal state.')
alarmInputHighDensity0084Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30084)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0084Alarm.setDescription('Generated when alarm point 84 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0084Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40084)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0084Normal.setDescription('Generated when alarm point 84 from a high density unit transitions to the normal state.')
alarmInputHighDensity0085Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30085)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0085Alarm.setDescription('Generated when alarm point 85 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0085Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40085)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0085Normal.setDescription('Generated when alarm point 85 from a high density unit transitions to the normal state.')
alarmInputHighDensity0086Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30086)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0086Alarm.setDescription('Generated when alarm point 86 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0086Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40086)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0086Normal.setDescription('Generated when alarm point 86 from a high density unit transitions to the normal state.')
alarmInputHighDensity0087Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30087)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0087Alarm.setDescription('Generated when alarm point 87 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0087Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40087)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0087Normal.setDescription('Generated when alarm point 87 from a high density unit transitions to the normal state.')
alarmInputHighDensity0088Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30088)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0088Alarm.setDescription('Generated when alarm point 88 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0088Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40088)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0088Normal.setDescription('Generated when alarm point 88 from a high density unit transitions to the normal state.')
alarmInputHighDensity0089Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30089)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0089Alarm.setDescription('Generated when alarm point 89 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0089Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40089)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0089Normal.setDescription('Generated when alarm point 89 from a high density unit transitions to the normal state.')
alarmInputHighDensity0090Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30090)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0090Alarm.setDescription('Generated when alarm point 90 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0090Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40090)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0090Normal.setDescription('Generated when alarm point 90 from a high density unit transitions to the normal state.')
alarmInputHighDensity0091Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30091)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0091Alarm.setDescription('Generated when alarm point 91 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0091Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40091)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0091Normal.setDescription('Generated when alarm point 91 from a high density unit transitions to the normal state.')
alarmInputHighDensity0092Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30092)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0092Alarm.setDescription('Generated when alarm point 92 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0092Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40092)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0092Normal.setDescription('Generated when alarm point 92 from a high density unit transitions to the normal state.')
alarmInputHighDensity0093Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30093)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0093Alarm.setDescription('Generated when alarm point 93 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0093Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40093)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0093Normal.setDescription('Generated when alarm point 93 from a high density unit transitions to the normal state.')
alarmInputHighDensity0094Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30094)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0094Alarm.setDescription('Generated when alarm point 94 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0094Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40094)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0094Normal.setDescription('Generated when alarm point 94 from a high density unit transitions to the normal state.')
alarmInputHighDensity0095Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30095)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0095Alarm.setDescription('Generated when alarm point 95 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0095Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40095)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0095Normal.setDescription('Generated when alarm point 95 from a high density unit transitions to the normal state.')
alarmInputHighDensity0096Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30096)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0096Alarm.setDescription('Generated when alarm point 96 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0096Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40096)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0096Normal.setDescription('Generated when alarm point 96 from a high density unit transitions to the normal state.')
alarmInputHighDensity0097Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30097)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0097Alarm.setDescription('Generated when alarm point 97 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0097Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40097)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0097Normal.setDescription('Generated when alarm point 97 from a high density unit transitions to the normal state.')
alarmInputHighDensity0098Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30098)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0098Alarm.setDescription('Generated when alarm point 98 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0098Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40098)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0098Normal.setDescription('Generated when alarm point 98 from a high density unit transitions to the normal state.')
alarmInputHighDensity0099Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30099)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0099Alarm.setDescription('Generated when alarm point 99 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0099Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40099)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0099Normal.setDescription('Generated when alarm point 99 from a high density unit transitions to the normal state.')
alarmInputHighDensity0100Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30100)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0100Alarm.setDescription('Generated when alarm point 100 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0100Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40100)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0100Normal.setDescription('Generated when alarm point 100 from a high density unit transitions to the normal state.')
alarmInputHighDensity0101Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30101)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0101Alarm.setDescription('Generated when alarm point 101 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0101Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40101)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0101Normal.setDescription('Generated when alarm point 101 from a high density unit transitions to the normal state.')
alarmInputHighDensity0102Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30102)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0102Alarm.setDescription('Generated when alarm point 102 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0102Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40102)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0102Normal.setDescription('Generated when alarm point 102 from a high density unit transitions to the normal state.')
alarmInputHighDensity0103Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30103)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0103Alarm.setDescription('Generated when alarm point 103 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0103Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40103)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0103Normal.setDescription('Generated when alarm point 103 from a high density unit transitions to the normal state.')
alarmInputHighDensity0104Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30104)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0104Alarm.setDescription('Generated when alarm point 104 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0104Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40104)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0104Normal.setDescription('Generated when alarm point 104 from a high density unit transitions to the normal state.')
alarmInputHighDensity0105Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30105)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0105Alarm.setDescription('Generated when alarm point 105 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0105Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40105)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0105Normal.setDescription('Generated when alarm point 105 from a high density unit transitions to the normal state.')
alarmInputHighDensity0106Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30106)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0106Alarm.setDescription('Generated when alarm point 106 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0106Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40106)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0106Normal.setDescription('Generated when alarm point 106 from a high density unit transitions to the normal state.')
alarmInputHighDensity0107Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30107)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0107Alarm.setDescription('Generated when alarm point 107 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0107Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40107)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0107Normal.setDescription('Generated when alarm point 107 from a high density unit transitions to the normal state.')
alarmInputHighDensity0108Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30108)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0108Alarm.setDescription('Generated when alarm point 108 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0108Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40108)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0108Normal.setDescription('Generated when alarm point 108 from a high density unit transitions to the normal state.')
alarmInputHighDensity0109Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30109)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0109Alarm.setDescription('Generated when alarm point 109 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0109Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40109)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0109Normal.setDescription('Generated when alarm point 109 from a high density unit transitions to the normal state.')
alarmInputHighDensity0110Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30110)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0110Alarm.setDescription('Generated when alarm point 110 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0110Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40110)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0110Normal.setDescription('Generated when alarm point 110 from a high density unit transitions to the normal state.')
alarmInputHighDensity0111Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30111)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0111Alarm.setDescription('Generated when alarm point 111 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0111Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40111)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0111Normal.setDescription('Generated when alarm point 111 from a high density unit transitions to the normal state.')
alarmInputHighDensity0112Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30112)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0112Alarm.setDescription('Generated when alarm point 112 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0112Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40112)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0112Normal.setDescription('Generated when alarm point 112 from a high density unit transitions to the normal state.')
alarmInputHighDensity0113Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30113)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0113Alarm.setDescription('Generated when alarm point 113 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0113Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40113)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0113Normal.setDescription('Generated when alarm point 113 from a high density unit transitions to the normal state.')
alarmInputHighDensity0114Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30114)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0114Alarm.setDescription('Generated when alarm point 114 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0114Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40114)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0114Normal.setDescription('Generated when alarm point 114 from a high density unit transitions to the normal state.')
alarmInputHighDensity0115Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30115)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0115Alarm.setDescription('Generated when alarm point 115 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0115Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40115)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0115Normal.setDescription('Generated when alarm point 115 from a high density unit transitions to the normal state.')
alarmInputHighDensity0116Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30116)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0116Alarm.setDescription('Generated when alarm point 116 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0116Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40116)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0116Normal.setDescription('Generated when alarm point 116 from a high density unit transitions to the normal state.')
alarmInputHighDensity0117Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30117)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0117Alarm.setDescription('Generated when alarm point 117 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0117Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40117)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0117Normal.setDescription('Generated when alarm point 117 from a high density unit transitions to the normal state.')
alarmInputHighDensity0118Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30118)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0118Alarm.setDescription('Generated when alarm point 118 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0118Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40118)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0118Normal.setDescription('Generated when alarm point 118 from a high density unit transitions to the normal state.')
alarmInputHighDensity0119Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30119)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0119Alarm.setDescription('Generated when alarm point 119 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0119Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40119)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0119Normal.setDescription('Generated when alarm point 119 from a high density unit transitions to the normal state.')
alarmInputHighDensity0120Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30120)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0120Alarm.setDescription('Generated when alarm point 120 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0120Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40120)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0120Normal.setDescription('Generated when alarm point 120 from a high density unit transitions to the normal state.')
alarmInputHighDensity0121Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30121)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0121Alarm.setDescription('Generated when alarm point 121 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0121Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40121)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0121Normal.setDescription('Generated when alarm point 121 from a high density unit transitions to the normal state.')
alarmInputHighDensity0122Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30122)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0122Alarm.setDescription('Generated when alarm point 122 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0122Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40122)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0122Normal.setDescription('Generated when alarm point 122 from a high density unit transitions to the normal state.')
alarmInputHighDensity0123Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30123)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0123Alarm.setDescription('Generated when alarm point 123 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0123Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40123)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0123Normal.setDescription('Generated when alarm point 123 from a high density unit transitions to the normal state.')
alarmInputHighDensity0124Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30124)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0124Alarm.setDescription('Generated when alarm point 124 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0124Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40124)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0124Normal.setDescription('Generated when alarm point 124 from a high density unit transitions to the normal state.')
alarmInputHighDensity0125Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30125)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0125Alarm.setDescription('Generated when alarm point 125 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0125Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40125)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0125Normal.setDescription('Generated when alarm point 125 from a high density unit transitions to the normal state.')
alarmInputHighDensity0126Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30126)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0126Alarm.setDescription('Generated when alarm point 126 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0126Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40126)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0126Normal.setDescription('Generated when alarm point 126 from a high density unit transitions to the normal state.')
alarmInputHighDensity0127Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30127)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0127Alarm.setDescription('Generated when alarm point 127 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0127Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40127)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0127Normal.setDescription('Generated when alarm point 127 from a high density unit transitions to the normal state.')
alarmInputHighDensity0128Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30128)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0128Alarm.setDescription('Generated when alarm point 128 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0128Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40128)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0128Normal.setDescription('Generated when alarm point 128 from a high density unit transitions to the normal state.')
alarmInputHighDensity0129Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30129)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0129Alarm.setDescription('Generated when alarm point 129 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0129Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40129)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0129Normal.setDescription('Generated when alarm point 129 from a high density unit transitions to the normal state.')
alarmInputHighDensity0130Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30130)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0130Alarm.setDescription('Generated when alarm point 130 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0130Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40130)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0130Normal.setDescription('Generated when alarm point 130 from a high density unit transitions to the normal state.')
alarmInputHighDensity0131Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30131)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0131Alarm.setDescription('Generated when alarm point 131 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0131Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40131)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0131Normal.setDescription('Generated when alarm point 131 from a high density unit transitions to the normal state.')
alarmInputHighDensity0132Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30132)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0132Alarm.setDescription('Generated when alarm point 132 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0132Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40132)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0132Normal.setDescription('Generated when alarm point 132 from a high density unit transitions to the normal state.')
alarmInputHighDensity0133Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30133)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0133Alarm.setDescription('Generated when alarm point 133 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0133Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40133)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0133Normal.setDescription('Generated when alarm point 133 from a high density unit transitions to the normal state.')
alarmInputHighDensity0134Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30134)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0134Alarm.setDescription('Generated when alarm point 134 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0134Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40134)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0134Normal.setDescription('Generated when alarm point 134 from a high density unit transitions to the normal state.')
alarmInputHighDensity0135Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30135)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0135Alarm.setDescription('Generated when alarm point 135 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0135Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40135)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0135Normal.setDescription('Generated when alarm point 135 from a high density unit transitions to the normal state.')
alarmInputHighDensity0136Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30136)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0136Alarm.setDescription('Generated when alarm point 136 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0136Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40136)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0136Normal.setDescription('Generated when alarm point 136 from a high density unit transitions to the normal state.')
alarmInputHighDensity0137Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30137)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0137Alarm.setDescription('Generated when alarm point 137 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0137Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40137)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0137Normal.setDescription('Generated when alarm point 137 from a high density unit transitions to the normal state.')
alarmInputHighDensity0138Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30138)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0138Alarm.setDescription('Generated when alarm point 138 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0138Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40138)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0138Normal.setDescription('Generated when alarm point 138 from a high density unit transitions to the normal state.')
alarmInputHighDensity0139Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30139)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0139Alarm.setDescription('Generated when alarm point 139 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0139Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40139)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0139Normal.setDescription('Generated when alarm point 139 from a high density unit transitions to the normal state.')
alarmInputHighDensity0140Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30140)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0140Alarm.setDescription('Generated when alarm point 140 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0140Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40140)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0140Normal.setDescription('Generated when alarm point 140 from a high density unit transitions to the normal state.')
alarmInputHighDensity0141Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30141)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0141Alarm.setDescription('Generated when alarm point 141 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0141Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40141)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0141Normal.setDescription('Generated when alarm point 141 from a high density unit transitions to the normal state.')
alarmInputHighDensity0142Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30142)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0142Alarm.setDescription('Generated when alarm point 142 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0142Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40142)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0142Normal.setDescription('Generated when alarm point 142 from a high density unit transitions to the normal state.')
alarmInputHighDensity0143Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30143)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0143Alarm.setDescription('Generated when alarm point 143 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0143Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40143)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0143Normal.setDescription('Generated when alarm point 143 from a high density unit transitions to the normal state.')
alarmInputHighDensity0144Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30144)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0144Alarm.setDescription('Generated when alarm point 144 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0144Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40144)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0144Normal.setDescription('Generated when alarm point 144 from a high density unit transitions to the normal state.')
alarmInputHighDensity0145Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30145)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0145Alarm.setDescription('Generated when alarm point 145 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0145Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40145)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0145Normal.setDescription('Generated when alarm point 145 from a high density unit transitions to the normal state.')
alarmInputHighDensity0146Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30146)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0146Alarm.setDescription('Generated when alarm point 146 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0146Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40146)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0146Normal.setDescription('Generated when alarm point 146 from a high density unit transitions to the normal state.')
alarmInputHighDensity0147Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30147)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0147Alarm.setDescription('Generated when alarm point 147 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0147Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40147)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0147Normal.setDescription('Generated when alarm point 147 from a high density unit transitions to the normal state.')
alarmInputHighDensity0148Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30148)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0148Alarm.setDescription('Generated when alarm point 148 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0148Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40148)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0148Normal.setDescription('Generated when alarm point 148 from a high density unit transitions to the normal state.')
alarmInputHighDensity0149Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30149)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0149Alarm.setDescription('Generated when alarm point 149 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0149Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40149)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0149Normal.setDescription('Generated when alarm point 149 from a high density unit transitions to the normal state.')
alarmInputHighDensity0150Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30150)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0150Alarm.setDescription('Generated when alarm point 150 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0150Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40150)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0150Normal.setDescription('Generated when alarm point 150 from a high density unit transitions to the normal state.')
alarmInputHighDensity0151Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30151)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0151Alarm.setDescription('Generated when alarm point 151 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0151Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40151)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0151Normal.setDescription('Generated when alarm point 151 from a high density unit transitions to the normal state.')
alarmInputHighDensity0152Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30152)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0152Alarm.setDescription('Generated when alarm point 152 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0152Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40152)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0152Normal.setDescription('Generated when alarm point 152 from a high density unit transitions to the normal state.')
alarmInputHighDensity0153Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30153)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0153Alarm.setDescription('Generated when alarm point 153 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0153Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40153)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0153Normal.setDescription('Generated when alarm point 153 from a high density unit transitions to the normal state.')
alarmInputHighDensity0154Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30154)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0154Alarm.setDescription('Generated when alarm point 154 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0154Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40154)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0154Normal.setDescription('Generated when alarm point 154 from a high density unit transitions to the normal state.')
alarmInputHighDensity0155Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30155)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0155Alarm.setDescription('Generated when alarm point 155 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0155Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40155)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0155Normal.setDescription('Generated when alarm point 155 from a high density unit transitions to the normal state.')
alarmInputHighDensity0156Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30156)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0156Alarm.setDescription('Generated when alarm point 156 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0156Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40156)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0156Normal.setDescription('Generated when alarm point 156 from a high density unit transitions to the normal state.')
alarmInputHighDensity0157Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30157)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0157Alarm.setDescription('Generated when alarm point 157 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0157Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40157)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0157Normal.setDescription('Generated when alarm point 157 from a high density unit transitions to the normal state.')
alarmInputHighDensity0158Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30158)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0158Alarm.setDescription('Generated when alarm point 158 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0158Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40158)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0158Normal.setDescription('Generated when alarm point 158 from a high density unit transitions to the normal state.')
alarmInputHighDensity0159Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30159)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0159Alarm.setDescription('Generated when alarm point 159 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0159Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40159)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0159Normal.setDescription('Generated when alarm point 159 from a high density unit transitions to the normal state.')
alarmInputHighDensity0160Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30160)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0160Alarm.setDescription('Generated when alarm point 160 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0160Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40160)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0160Normal.setDescription('Generated when alarm point 160 from a high density unit transitions to the normal state.')
alarmInputHighDensity0161Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30161)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0161Alarm.setDescription('Generated when alarm point 161 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0161Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40161)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0161Normal.setDescription('Generated when alarm point 161 from a high density unit transitions to the normal state.')
alarmInputHighDensity0162Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30162)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0162Alarm.setDescription('Generated when alarm point 162 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0162Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40162)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0162Normal.setDescription('Generated when alarm point 162 from a high density unit transitions to the normal state.')
alarmInputHighDensity0163Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30163)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0163Alarm.setDescription('Generated when alarm point 163 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0163Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40163)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0163Normal.setDescription('Generated when alarm point 163 from a high density unit transitions to the normal state.')
alarmInputHighDensity0164Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30164)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0164Alarm.setDescription('Generated when alarm point 164 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0164Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40164)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0164Normal.setDescription('Generated when alarm point 164 from a high density unit transitions to the normal state.')
alarmInputHighDensity0165Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30165)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0165Alarm.setDescription('Generated when alarm point 165 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0165Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40165)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0165Normal.setDescription('Generated when alarm point 165 from a high density unit transitions to the normal state.')
alarmInputHighDensity0166Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30166)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0166Alarm.setDescription('Generated when alarm point 166 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0166Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40166)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0166Normal.setDescription('Generated when alarm point 166 from a high density unit transitions to the normal state.')
alarmInputHighDensity0167Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30167)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0167Alarm.setDescription('Generated when alarm point 167 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0167Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40167)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0167Normal.setDescription('Generated when alarm point 167 from a high density unit transitions to the normal state.')
alarmInputHighDensity0168Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30168)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0168Alarm.setDescription('Generated when alarm point 168 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0168Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40168)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0168Normal.setDescription('Generated when alarm point 168 from a high density unit transitions to the normal state.')
alarmInputHighDensity0169Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30169)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0169Alarm.setDescription('Generated when alarm point 169 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0169Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40169)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0169Normal.setDescription('Generated when alarm point 169 from a high density unit transitions to the normal state.')
alarmInputHighDensity0170Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30170)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0170Alarm.setDescription('Generated when alarm point 170 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0170Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40170)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0170Normal.setDescription('Generated when alarm point 170 from a high density unit transitions to the normal state.')
alarmInputHighDensity0171Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30171)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0171Alarm.setDescription('Generated when alarm point 171 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0171Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40171)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0171Normal.setDescription('Generated when alarm point 171 from a high density unit transitions to the normal state.')
alarmInputHighDensity0172Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30172)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0172Alarm.setDescription('Generated when alarm point 172 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0172Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40172)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0172Normal.setDescription('Generated when alarm point 172 from a high density unit transitions to the normal state.')
alarmInputHighDensity0173Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30173)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0173Alarm.setDescription('Generated when alarm point 173 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0173Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40173)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0173Normal.setDescription('Generated when alarm point 173 from a high density unit transitions to the normal state.')
alarmInputHighDensity0174Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30174)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0174Alarm.setDescription('Generated when alarm point 174 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0174Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40174)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0174Normal.setDescription('Generated when alarm point 174 from a high density unit transitions to the normal state.')
alarmInputHighDensity0175Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30175)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0175Alarm.setDescription('Generated when alarm point 175 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0175Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40175)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0175Normal.setDescription('Generated when alarm point 175 from a high density unit transitions to the normal state.')
alarmInputHighDensity0176Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30176)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0176Alarm.setDescription('Generated when alarm point 176 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0176Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40176)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0176Normal.setDescription('Generated when alarm point 176 from a high density unit transitions to the normal state.')
alarmInputHighDensity0177Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30177)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0177Alarm.setDescription('Generated when alarm point 177 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0177Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40177)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0177Normal.setDescription('Generated when alarm point 177 from a high density unit transitions to the normal state.')
alarmInputHighDensity0178Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30178)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0178Alarm.setDescription('Generated when alarm point 178 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0178Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40178)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0178Normal.setDescription('Generated when alarm point 178 from a high density unit transitions to the normal state.')
alarmInputHighDensity0179Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30179)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0179Alarm.setDescription('Generated when alarm point 179 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0179Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40179)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0179Normal.setDescription('Generated when alarm point 179 from a high density unit transitions to the normal state.')
alarmInputHighDensity0180Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30180)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0180Alarm.setDescription('Generated when alarm point 180 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0180Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40180)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0180Normal.setDescription('Generated when alarm point 180 from a high density unit transitions to the normal state.')
alarmInputHighDensity0181Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30181)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0181Alarm.setDescription('Generated when alarm point 181 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0181Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40181)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0181Normal.setDescription('Generated when alarm point 181 from a high density unit transitions to the normal state.')
alarmInputHighDensity0182Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30182)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0182Alarm.setDescription('Generated when alarm point 182 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0182Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40182)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0182Normal.setDescription('Generated when alarm point 182 from a high density unit transitions to the normal state.')
alarmInputHighDensity0183Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30183)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0183Alarm.setDescription('Generated when alarm point 183 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0183Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40183)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0183Normal.setDescription('Generated when alarm point 183 from a high density unit transitions to the normal state.')
alarmInputHighDensity0184Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30184)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0184Alarm.setDescription('Generated when alarm point 184 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0184Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40184)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0184Normal.setDescription('Generated when alarm point 184 from a high density unit transitions to the normal state.')
alarmInputHighDensity0185Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30185)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0185Alarm.setDescription('Generated when alarm point 185 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0185Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40185)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0185Normal.setDescription('Generated when alarm point 185 from a high density unit transitions to the normal state.')
alarmInputHighDensity0186Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30186)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0186Alarm.setDescription('Generated when alarm point 186 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0186Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40186)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0186Normal.setDescription('Generated when alarm point 186 from a high density unit transitions to the normal state.')
alarmInputHighDensity0187Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30187)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0187Alarm.setDescription('Generated when alarm point 187 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0187Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40187)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0187Normal.setDescription('Generated when alarm point 187 from a high density unit transitions to the normal state.')
alarmInputHighDensity0188Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30188)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0188Alarm.setDescription('Generated when alarm point 188 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0188Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40188)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0188Normal.setDescription('Generated when alarm point 188 from a high density unit transitions to the normal state.')
alarmInputHighDensity0189Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30189)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0189Alarm.setDescription('Generated when alarm point 189 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0189Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40189)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0189Normal.setDescription('Generated when alarm point 189 from a high density unit transitions to the normal state.')
alarmInputHighDensity0190Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30190)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0190Alarm.setDescription('Generated when alarm point 190 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0190Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40190)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0190Normal.setDescription('Generated when alarm point 190 from a high density unit transitions to the normal state.')
alarmInputHighDensity0191Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30191)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0191Alarm.setDescription('Generated when alarm point 191 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0191Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40191)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0191Normal.setDescription('Generated when alarm point 191 from a high density unit transitions to the normal state.')
alarmInputHighDensity0192Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30192)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0192Alarm.setDescription('Generated when alarm point 192 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0192Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40192)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0192Normal.setDescription('Generated when alarm point 192 from a high density unit transitions to the normal state.')
alarmInputHighDensity0193Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30193)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0193Alarm.setDescription('Generated when alarm point 193 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0193Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40193)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0193Normal.setDescription('Generated when alarm point 193 from a high density unit transitions to the normal state.')
alarmInputHighDensity0194Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30194)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0194Alarm.setDescription('Generated when alarm point 194 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0194Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40194)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0194Normal.setDescription('Generated when alarm point 194 from a high density unit transitions to the normal state.')
alarmInputHighDensity0195Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30195)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0195Alarm.setDescription('Generated when alarm point 195 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0195Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40195)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0195Normal.setDescription('Generated when alarm point 195 from a high density unit transitions to the normal state.')
alarmInputHighDensity0196Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30196)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0196Alarm.setDescription('Generated when alarm point 196 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0196Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40196)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0196Normal.setDescription('Generated when alarm point 196 from a high density unit transitions to the normal state.')
alarmInputHighDensity0197Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30197)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0197Alarm.setDescription('Generated when alarm point 197 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0197Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40197)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0197Normal.setDescription('Generated when alarm point 197 from a high density unit transitions to the normal state.')
alarmInputHighDensity0198Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30198)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0198Alarm.setDescription('Generated when alarm point 198 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0198Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40198)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0198Normal.setDescription('Generated when alarm point 198 from a high density unit transitions to the normal state.')
alarmInputHighDensity0199Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30199)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0199Alarm.setDescription('Generated when alarm point 199 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0199Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40199)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0199Normal.setDescription('Generated when alarm point 199 from a high density unit transitions to the normal state.')
alarmInputHighDensity0200Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30200)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0200Alarm.setDescription('Generated when alarm point 200 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0200Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40200)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0200Normal.setDescription('Generated when alarm point 200 from a high density unit transitions to the normal state.')
alarmInputHighDensity0201Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30201)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0201Alarm.setDescription('Generated when alarm point 201 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0201Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40201)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0201Normal.setDescription('Generated when alarm point 201 from a high density unit transitions to the normal state.')
alarmInputHighDensity0202Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30202)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0202Alarm.setDescription('Generated when alarm point 202 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0202Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40202)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0202Normal.setDescription('Generated when alarm point 202 from a high density unit transitions to the normal state.')
alarmInputHighDensity0203Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30203)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0203Alarm.setDescription('Generated when alarm point 203 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0203Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40203)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0203Normal.setDescription('Generated when alarm point 203 from a high density unit transitions to the normal state.')
alarmInputHighDensity0204Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30204)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0204Alarm.setDescription('Generated when alarm point 204 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0204Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40204)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0204Normal.setDescription('Generated when alarm point 204 from a high density unit transitions to the normal state.')
alarmInputHighDensity0205Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30205)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0205Alarm.setDescription('Generated when alarm point 205 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0205Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40205)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0205Normal.setDescription('Generated when alarm point 205 from a high density unit transitions to the normal state.')
alarmInputHighDensity0206Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30206)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0206Alarm.setDescription('Generated when alarm point 206 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0206Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40206)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0206Normal.setDescription('Generated when alarm point 206 from a high density unit transitions to the normal state.')
alarmInputHighDensity0207Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30207)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0207Alarm.setDescription('Generated when alarm point 207 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0207Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40207)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0207Normal.setDescription('Generated when alarm point 207 from a high density unit transitions to the normal state.')
alarmInputHighDensity0208Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30208)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0208Alarm.setDescription('Generated when alarm point 208 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0208Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40208)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0208Normal.setDescription('Generated when alarm point 208 from a high density unit transitions to the normal state.')
alarmInputHighDensity0209Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30209)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0209Alarm.setDescription('Generated when alarm point 209 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0209Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40209)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0209Normal.setDescription('Generated when alarm point 209 from a high density unit transitions to the normal state.')
alarmInputHighDensity0210Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30210)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0210Alarm.setDescription('Generated when alarm point 210 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0210Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40210)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0210Normal.setDescription('Generated when alarm point 210 from a high density unit transitions to the normal state.')
alarmInputHighDensity0211Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30211)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0211Alarm.setDescription('Generated when alarm point 211 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0211Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40211)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0211Normal.setDescription('Generated when alarm point 211 from a high density unit transitions to the normal state.')
alarmInputHighDensity0212Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30212)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0212Alarm.setDescription('Generated when alarm point 212 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0212Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40212)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0212Normal.setDescription('Generated when alarm point 212 from a high density unit transitions to the normal state.')
alarmInputHighDensity0213Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30213)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0213Alarm.setDescription('Generated when alarm point 213 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0213Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40213)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0213Normal.setDescription('Generated when alarm point 213 from a high density unit transitions to the normal state.')
alarmInputHighDensity0214Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30214)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0214Alarm.setDescription('Generated when alarm point 214 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0214Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40214)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0214Normal.setDescription('Generated when alarm point 214 from a high density unit transitions to the normal state.')
alarmInputHighDensity0215Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30215)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0215Alarm.setDescription('Generated when alarm point 215 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0215Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40215)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0215Normal.setDescription('Generated when alarm point 215 from a high density unit transitions to the normal state.')
alarmInputHighDensity0216Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30216)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0216Alarm.setDescription('Generated when alarm point 216 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0216Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40216)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0216Normal.setDescription('Generated when alarm point 216 from a high density unit transitions to the normal state.')
alarmInputHighDensity0217Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30217)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0217Alarm.setDescription('Generated when alarm point 217 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0217Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40217)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0217Normal.setDescription('Generated when alarm point 217 from a high density unit transitions to the normal state.')
alarmInputHighDensity0218Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30218)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0218Alarm.setDescription('Generated when alarm point 218 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0218Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40218)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0218Normal.setDescription('Generated when alarm point 218 from a high density unit transitions to the normal state.')
alarmInputHighDensity0219Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30219)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0219Alarm.setDescription('Generated when alarm point 219 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0219Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40219)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0219Normal.setDescription('Generated when alarm point 219 from a high density unit transitions to the normal state.')
alarmInputHighDensity0220Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30220)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0220Alarm.setDescription('Generated when alarm point 220 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0220Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40220)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0220Normal.setDescription('Generated when alarm point 220 from a high density unit transitions to the normal state.')
alarmInputHighDensity0221Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30221)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0221Alarm.setDescription('Generated when alarm point 221 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0221Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40221)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0221Normal.setDescription('Generated when alarm point 221 from a high density unit transitions to the normal state.')
alarmInputHighDensity0222Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30222)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0222Alarm.setDescription('Generated when alarm point 222 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0222Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40222)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0222Normal.setDescription('Generated when alarm point 222 from a high density unit transitions to the normal state.')
alarmInputHighDensity0223Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30223)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0223Alarm.setDescription('Generated when alarm point 223 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0223Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40223)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0223Normal.setDescription('Generated when alarm point 223 from a high density unit transitions to the normal state.')
alarmInputHighDensity0224Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30224)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0224Alarm.setDescription('Generated when alarm point 224 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0224Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40224)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0224Normal.setDescription('Generated when alarm point 224 from a high density unit transitions to the normal state.')
alarmInputHighDensity0225Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30225)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0225Alarm.setDescription('Generated when alarm point 225 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0225Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40225)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0225Normal.setDescription('Generated when alarm point 225 from a high density unit transitions to the normal state.')
alarmInputHighDensity0226Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30226)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0226Alarm.setDescription('Generated when alarm point 226 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0226Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40226)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0226Normal.setDescription('Generated when alarm point 226 from a high density unit transitions to the normal state.')
alarmInputHighDensity0227Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30227)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0227Alarm.setDescription('Generated when alarm point 227 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0227Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40227)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0227Normal.setDescription('Generated when alarm point 227 from a high density unit transitions to the normal state.')
alarmInputHighDensity0228Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30228)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0228Alarm.setDescription('Generated when alarm point 228 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0228Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40228)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0228Normal.setDescription('Generated when alarm point 228 from a high density unit transitions to the normal state.')
alarmInputHighDensity0229Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30229)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0229Alarm.setDescription('Generated when alarm point 229 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0229Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40229)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0229Normal.setDescription('Generated when alarm point 229 from a high density unit transitions to the normal state.')
alarmInputHighDensity0230Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30230)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0230Alarm.setDescription('Generated when alarm point 230 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0230Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40230)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0230Normal.setDescription('Generated when alarm point 230 from a high density unit transitions to the normal state.')
alarmInputHighDensity0231Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30231)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0231Alarm.setDescription('Generated when alarm point 231 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0231Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40231)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0231Normal.setDescription('Generated when alarm point 231 from a high density unit transitions to the normal state.')
alarmInputHighDensity0232Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30232)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0232Alarm.setDescription('Generated when alarm point 232 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0232Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40232)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0232Normal.setDescription('Generated when alarm point 232 from a high density unit transitions to the normal state.')
alarmInputHighDensity0233Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30233)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0233Alarm.setDescription('Generated when alarm point 233 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0233Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40233)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0233Normal.setDescription('Generated when alarm point 233 from a high density unit transitions to the normal state.')
alarmInputHighDensity0234Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30234)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0234Alarm.setDescription('Generated when alarm point 234 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0234Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40234)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0234Normal.setDescription('Generated when alarm point 234 from a high density unit transitions to the normal state.')
alarmInputHighDensity0235Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30235)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0235Alarm.setDescription('Generated when alarm point 235 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0235Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40235)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0235Normal.setDescription('Generated when alarm point 235 from a high density unit transitions to the normal state.')
alarmInputHighDensity0236Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30236)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0236Alarm.setDescription('Generated when alarm point 236 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0236Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40236)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0236Normal.setDescription('Generated when alarm point 236 from a high density unit transitions to the normal state.')
alarmInputHighDensity0237Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30237)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0237Alarm.setDescription('Generated when alarm point 237 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0237Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40237)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0237Normal.setDescription('Generated when alarm point 237 from a high density unit transitions to the normal state.')
alarmInputHighDensity0238Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30238)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0238Alarm.setDescription('Generated when alarm point 238 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0238Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40238)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0238Normal.setDescription('Generated when alarm point 238 from a high density unit transitions to the normal state.')
alarmInputHighDensity0239Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30239)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0239Alarm.setDescription('Generated when alarm point 239 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0239Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40239)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0239Normal.setDescription('Generated when alarm point 239 from a high density unit transitions to the normal state.')
alarmInputHighDensity0240Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30240)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0240Alarm.setDescription('Generated when alarm point 240 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0240Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40240)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0240Normal.setDescription('Generated when alarm point 240 from a high density unit transitions to the normal state.')
alarmInputHighDensity0241Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30241)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0241Alarm.setDescription('Generated when alarm point 241 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0241Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40241)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0241Normal.setDescription('Generated when alarm point 241 from a high density unit transitions to the normal state.')
alarmInputHighDensity0242Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30242)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0242Alarm.setDescription('Generated when alarm point 242 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0242Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40242)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0242Normal.setDescription('Generated when alarm point 242 from a high density unit transitions to the normal state.')
alarmInputHighDensity0243Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30243)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0243Alarm.setDescription('Generated when alarm point 243 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0243Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40243)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0243Normal.setDescription('Generated when alarm point 243 from a high density unit transitions to the normal state.')
alarmInputHighDensity0244Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30244)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0244Alarm.setDescription('Generated when alarm point 244 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0244Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40244)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0244Normal.setDescription('Generated when alarm point 244 from a high density unit transitions to the normal state.')
alarmInputHighDensity0245Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30245)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0245Alarm.setDescription('Generated when alarm point 245 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0245Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40245)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0245Normal.setDescription('Generated when alarm point 245 from a high density unit transitions to the normal state.')
alarmInputHighDensity0246Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30246)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0246Alarm.setDescription('Generated when alarm point 246 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0246Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40246)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0246Normal.setDescription('Generated when alarm point 246 from a high density unit transitions to the normal state.')
alarmInputHighDensity0247Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30247)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0247Alarm.setDescription('Generated when alarm point 247 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0247Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40247)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0247Normal.setDescription('Generated when alarm point 247 from a high density unit transitions to the normal state.')
alarmInputHighDensity0248Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30248)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0248Alarm.setDescription('Generated when alarm point 248 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0248Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40248)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0248Normal.setDescription('Generated when alarm point 248 from a high density unit transitions to the normal state.')
alarmInputHighDensity0249Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30249)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0249Alarm.setDescription('Generated when alarm point 249 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0249Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40249)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0249Normal.setDescription('Generated when alarm point 249 from a high density unit transitions to the normal state.')
alarmInputHighDensity0250Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30250)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0250Alarm.setDescription('Generated when alarm point 250 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0250Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40250)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0250Normal.setDescription('Generated when alarm point 250 from a high density unit transitions to the normal state.')
alarmInputHighDensity0251Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30251)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0251Alarm.setDescription('Generated when alarm point 251 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0251Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40251)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0251Normal.setDescription('Generated when alarm point 251 from a high density unit transitions to the normal state.')
alarmInputHighDensity0252Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30252)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0252Alarm.setDescription('Generated when alarm point 252 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0252Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40252)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0252Normal.setDescription('Generated when alarm point 252 from a high density unit transitions to the normal state.')
alarmInputHighDensity0253Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30253)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0253Alarm.setDescription('Generated when alarm point 253 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0253Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40253)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0253Normal.setDescription('Generated when alarm point 253 from a high density unit transitions to the normal state.')
alarmInputHighDensity0254Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30254)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0254Alarm.setDescription('Generated when alarm point 254 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0254Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40254)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0254Normal.setDescription('Generated when alarm point 254 from a high density unit transitions to the normal state.')
alarmInputHighDensity0255Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30255)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0255Alarm.setDescription('Generated when alarm point 255 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0255Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40255)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0255Normal.setDescription('Generated when alarm point 255 from a high density unit transitions to the normal state.')
alarmInputHighDensity0256Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30256)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0256Alarm.setDescription('Generated when alarm point 256 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0256Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40256)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0256Normal.setDescription('Generated when alarm point 256 from a high density unit transitions to the normal state.')
alarmInputHighDensity0257Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30257)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0257Alarm.setDescription('Generated when alarm point 257 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0257Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40257)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0257Normal.setDescription('Generated when alarm point 257 from a high density unit transitions to the normal state.')
alarmInputHighDensity0258Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30258)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0258Alarm.setDescription('Generated when alarm point 258 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0258Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40258)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0258Normal.setDescription('Generated when alarm point 258 from a high density unit transitions to the normal state.')
alarmInputHighDensity0259Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30259)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0259Alarm.setDescription('Generated when alarm point 259 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0259Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40259)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0259Normal.setDescription('Generated when alarm point 259 from a high density unit transitions to the normal state.')
alarmInputHighDensity0260Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30260)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0260Alarm.setDescription('Generated when alarm point 260 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0260Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40260)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0260Normal.setDescription('Generated when alarm point 260 from a high density unit transitions to the normal state.')
alarmInputHighDensity0261Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30261)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0261Alarm.setDescription('Generated when alarm point 261 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0261Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40261)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0261Normal.setDescription('Generated when alarm point 261 from a high density unit transitions to the normal state.')
alarmInputHighDensity0262Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30262)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0262Alarm.setDescription('Generated when alarm point 262 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0262Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40262)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0262Normal.setDescription('Generated when alarm point 262 from a high density unit transitions to the normal state.')
alarmInputHighDensity0263Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30263)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0263Alarm.setDescription('Generated when alarm point 263 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0263Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40263)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0263Normal.setDescription('Generated when alarm point 263 from a high density unit transitions to the normal state.')
alarmInputHighDensity0264Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30264)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0264Alarm.setDescription('Generated when alarm point 264 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0264Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40264)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0264Normal.setDescription('Generated when alarm point 264 from a high density unit transitions to the normal state.')
alarmInputHighDensity0265Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30265)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0265Alarm.setDescription('Generated when alarm point 265 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0265Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40265)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0265Normal.setDescription('Generated when alarm point 265 from a high density unit transitions to the normal state.')
alarmInputHighDensity0266Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30266)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0266Alarm.setDescription('Generated when alarm point 266 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0266Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40266)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0266Normal.setDescription('Generated when alarm point 266 from a high density unit transitions to the normal state.')
alarmInputHighDensity0267Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30267)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0267Alarm.setDescription('Generated when alarm point 267 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0267Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40267)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0267Normal.setDescription('Generated when alarm point 267 from a high density unit transitions to the normal state.')
alarmInputHighDensity0268Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30268)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0268Alarm.setDescription('Generated when alarm point 268 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0268Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40268)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0268Normal.setDescription('Generated when alarm point 268 from a high density unit transitions to the normal state.')
alarmInputHighDensity0269Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30269)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0269Alarm.setDescription('Generated when alarm point 269 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0269Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40269)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0269Normal.setDescription('Generated when alarm point 269 from a high density unit transitions to the normal state.')
alarmInputHighDensity0270Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30270)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0270Alarm.setDescription('Generated when alarm point 270 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0270Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40270)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0270Normal.setDescription('Generated when alarm point 270 from a high density unit transitions to the normal state.')
alarmInputHighDensity0271Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30271)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0271Alarm.setDescription('Generated when alarm point 271 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0271Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40271)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0271Normal.setDescription('Generated when alarm point 271 from a high density unit transitions to the normal state.')
alarmInputHighDensity0272Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30272)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0272Alarm.setDescription('Generated when alarm point 272 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0272Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40272)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0272Normal.setDescription('Generated when alarm point 272 from a high density unit transitions to the normal state.')
alarmInputHighDensity0273Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30273)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0273Alarm.setDescription('Generated when alarm point 273 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0273Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40273)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0273Normal.setDescription('Generated when alarm point 273 from a high density unit transitions to the normal state.')
alarmInputHighDensity0274Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30274)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0274Alarm.setDescription('Generated when alarm point 274 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0274Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40274)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0274Normal.setDescription('Generated when alarm point 274 from a high density unit transitions to the normal state.')
alarmInputHighDensity0275Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30275)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0275Alarm.setDescription('Generated when alarm point 275 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0275Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40275)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0275Normal.setDescription('Generated when alarm point 275 from a high density unit transitions to the normal state.')
alarmInputHighDensity0276Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30276)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0276Alarm.setDescription('Generated when alarm point 276 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0276Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40276)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0276Normal.setDescription('Generated when alarm point 276 from a high density unit transitions to the normal state.')
alarmInputHighDensity0277Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30277)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0277Alarm.setDescription('Generated when alarm point 277 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0277Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40277)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0277Normal.setDescription('Generated when alarm point 277 from a high density unit transitions to the normal state.')
alarmInputHighDensity0278Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30278)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0278Alarm.setDescription('Generated when alarm point 278 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0278Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40278)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0278Normal.setDescription('Generated when alarm point 278 from a high density unit transitions to the normal state.')
alarmInputHighDensity0279Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30279)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0279Alarm.setDescription('Generated when alarm point 279 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0279Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40279)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0279Normal.setDescription('Generated when alarm point 279 from a high density unit transitions to the normal state.')
alarmInputHighDensity0280Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30280)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0280Alarm.setDescription('Generated when alarm point 280 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0280Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40280)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0280Normal.setDescription('Generated when alarm point 280 from a high density unit transitions to the normal state.')
alarmInputHighDensity0281Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30281)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0281Alarm.setDescription('Generated when alarm point 281 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0281Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40281)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0281Normal.setDescription('Generated when alarm point 281 from a high density unit transitions to the normal state.')
alarmInputHighDensity0282Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30282)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0282Alarm.setDescription('Generated when alarm point 282 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0282Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40282)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0282Normal.setDescription('Generated when alarm point 282 from a high density unit transitions to the normal state.')
alarmInputHighDensity0283Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30283)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0283Alarm.setDescription('Generated when alarm point 283 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0283Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40283)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0283Normal.setDescription('Generated when alarm point 283 from a high density unit transitions to the normal state.')
alarmInputHighDensity0284Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30284)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0284Alarm.setDescription('Generated when alarm point 284 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0284Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40284)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0284Normal.setDescription('Generated when alarm point 284 from a high density unit transitions to the normal state.')
alarmInputHighDensity0285Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30285)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0285Alarm.setDescription('Generated when alarm point 285 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0285Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40285)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0285Normal.setDescription('Generated when alarm point 285 from a high density unit transitions to the normal state.')
alarmInputHighDensity0286Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30286)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0286Alarm.setDescription('Generated when alarm point 286 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0286Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40286)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0286Normal.setDescription('Generated when alarm point 286 from a high density unit transitions to the normal state.')
alarmInputHighDensity0287Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30287)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0287Alarm.setDescription('Generated when alarm point 287 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0287Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40287)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0287Normal.setDescription('Generated when alarm point 287 from a high density unit transitions to the normal state.')
alarmInputHighDensity0288Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30288)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0288Alarm.setDescription('Generated when alarm point 288 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0288Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40288)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0288Normal.setDescription('Generated when alarm point 288 from a high density unit transitions to the normal state.')
alarmInputHighDensity0289Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30289)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0289Alarm.setDescription('Generated when alarm point 289 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0289Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40289)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0289Normal.setDescription('Generated when alarm point 289 from a high density unit transitions to the normal state.')
alarmInputHighDensity0290Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30290)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0290Alarm.setDescription('Generated when alarm point 290 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0290Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40290)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0290Normal.setDescription('Generated when alarm point 290 from a high density unit transitions to the normal state.')
alarmInputHighDensity0291Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30291)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0291Alarm.setDescription('Generated when alarm point 291 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0291Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40291)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0291Normal.setDescription('Generated when alarm point 291 from a high density unit transitions to the normal state.')
alarmInputHighDensity0292Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30292)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0292Alarm.setDescription('Generated when alarm point 292 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0292Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40292)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0292Normal.setDescription('Generated when alarm point 292 from a high density unit transitions to the normal state.')
alarmInputHighDensity0293Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30293)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0293Alarm.setDescription('Generated when alarm point 293 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0293Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40293)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0293Normal.setDescription('Generated when alarm point 293 from a high density unit transitions to the normal state.')
alarmInputHighDensity0294Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30294)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0294Alarm.setDescription('Generated when alarm point 294 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0294Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40294)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0294Normal.setDescription('Generated when alarm point 294 from a high density unit transitions to the normal state.')
alarmInputHighDensity0295Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30295)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0295Alarm.setDescription('Generated when alarm point 295 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0295Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40295)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0295Normal.setDescription('Generated when alarm point 295 from a high density unit transitions to the normal state.')
alarmInputHighDensity0296Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30296)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0296Alarm.setDescription('Generated when alarm point 296 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0296Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40296)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0296Normal.setDescription('Generated when alarm point 296 from a high density unit transitions to the normal state.')
alarmInputHighDensity0297Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30297)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0297Alarm.setDescription('Generated when alarm point 297 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0297Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40297)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0297Normal.setDescription('Generated when alarm point 297 from a high density unit transitions to the normal state.')
alarmInputHighDensity0298Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30298)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0298Alarm.setDescription('Generated when alarm point 298 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0298Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40298)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0298Normal.setDescription('Generated when alarm point 298 from a high density unit transitions to the normal state.')
alarmInputHighDensity0299Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30299)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0299Alarm.setDescription('Generated when alarm point 299 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0299Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40299)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0299Normal.setDescription('Generated when alarm point 299 from a high density unit transitions to the normal state.')
alarmInputHighDensity0300Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30300)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0300Alarm.setDescription('Generated when alarm point 300 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0300Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40300)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0300Normal.setDescription('Generated when alarm point 300 from a high density unit transitions to the normal state.')
alarmInputHighDensity0301Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30301)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0301Alarm.setDescription('Generated when alarm point 301 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0301Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40301)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0301Normal.setDescription('Generated when alarm point 301 from a high density unit transitions to the normal state.')
alarmInputHighDensity0302Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30302)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0302Alarm.setDescription('Generated when alarm point 302 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0302Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40302)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0302Normal.setDescription('Generated when alarm point 302 from a high density unit transitions to the normal state.')
alarmInputHighDensity0303Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30303)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0303Alarm.setDescription('Generated when alarm point 303 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0303Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40303)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0303Normal.setDescription('Generated when alarm point 303 from a high density unit transitions to the normal state.')
alarmInputHighDensity0304Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30304)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0304Alarm.setDescription('Generated when alarm point 304 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0304Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40304)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0304Normal.setDescription('Generated when alarm point 304 from a high density unit transitions to the normal state.')
alarmInputHighDensity0305Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30305)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0305Alarm.setDescription('Generated when alarm point 305 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0305Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40305)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0305Normal.setDescription('Generated when alarm point 305 from a high density unit transitions to the normal state.')
alarmInputHighDensity0306Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30306)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0306Alarm.setDescription('Generated when alarm point 306 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0306Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40306)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0306Normal.setDescription('Generated when alarm point 306 from a high density unit transitions to the normal state.')
alarmInputHighDensity0307Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30307)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0307Alarm.setDescription('Generated when alarm point 307 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0307Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40307)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0307Normal.setDescription('Generated when alarm point 307 from a high density unit transitions to the normal state.')
alarmInputHighDensity0308Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30308)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0308Alarm.setDescription('Generated when alarm point 308 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0308Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40308)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0308Normal.setDescription('Generated when alarm point 308 from a high density unit transitions to the normal state.')
alarmInputHighDensity0309Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30309)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0309Alarm.setDescription('Generated when alarm point 309 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0309Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40309)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0309Normal.setDescription('Generated when alarm point 309 from a high density unit transitions to the normal state.')
alarmInputHighDensity0310Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30310)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0310Alarm.setDescription('Generated when alarm point 310 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0310Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40310)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0310Normal.setDescription('Generated when alarm point 310 from a high density unit transitions to the normal state.')
alarmInputHighDensity0311Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30311)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0311Alarm.setDescription('Generated when alarm point 311 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0311Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40311)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0311Normal.setDescription('Generated when alarm point 311 from a high density unit transitions to the normal state.')
alarmInputHighDensity0312Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30312)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0312Alarm.setDescription('Generated when alarm point 312 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0312Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40312)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0312Normal.setDescription('Generated when alarm point 312 from a high density unit transitions to the normal state.')
alarmInputHighDensity0313Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30313)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0313Alarm.setDescription('Generated when alarm point 313 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0313Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40313)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0313Normal.setDescription('Generated when alarm point 313 from a high density unit transitions to the normal state.')
alarmInputHighDensity0314Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30314)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0314Alarm.setDescription('Generated when alarm point 314 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0314Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40314)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0314Normal.setDescription('Generated when alarm point 314 from a high density unit transitions to the normal state.')
alarmInputHighDensity0315Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30315)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0315Alarm.setDescription('Generated when alarm point 315 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0315Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40315)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0315Normal.setDescription('Generated when alarm point 315 from a high density unit transitions to the normal state.')
alarmInputHighDensity0316Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30316)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0316Alarm.setDescription('Generated when alarm point 316 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0316Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40316)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0316Normal.setDescription('Generated when alarm point 316 from a high density unit transitions to the normal state.')
alarmInputHighDensity0317Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30317)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0317Alarm.setDescription('Generated when alarm point 317 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0317Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40317)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0317Normal.setDescription('Generated when alarm point 317 from a high density unit transitions to the normal state.')
alarmInputHighDensity0318Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30318)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0318Alarm.setDescription('Generated when alarm point 318 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0318Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40318)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0318Normal.setDescription('Generated when alarm point 318 from a high density unit transitions to the normal state.')
alarmInputHighDensity0319Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30319)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0319Alarm.setDescription('Generated when alarm point 319 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0319Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40319)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0319Normal.setDescription('Generated when alarm point 319 from a high density unit transitions to the normal state.')
alarmInputHighDensity0320Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30320)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0320Alarm.setDescription('Generated when alarm point 320 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0320Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40320)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0320Normal.setDescription('Generated when alarm point 320 from a high density unit transitions to the normal state.')
alarmInputHighDensity0321Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30321)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0321Alarm.setDescription('Generated when alarm point 321 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0321Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40321)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0321Normal.setDescription('Generated when alarm point 321 from a high density unit transitions to the normal state.')
alarmInputHighDensity0322Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30322)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0322Alarm.setDescription('Generated when alarm point 322 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0322Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40322)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0322Normal.setDescription('Generated when alarm point 322 from a high density unit transitions to the normal state.')
alarmInputHighDensity0323Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30323)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0323Alarm.setDescription('Generated when alarm point 323 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0323Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40323)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0323Normal.setDescription('Generated when alarm point 323 from a high density unit transitions to the normal state.')
alarmInputHighDensity0324Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30324)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0324Alarm.setDescription('Generated when alarm point 324 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0324Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40324)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0324Normal.setDescription('Generated when alarm point 324 from a high density unit transitions to the normal state.')
alarmInputHighDensity0325Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30325)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0325Alarm.setDescription('Generated when alarm point 325 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0325Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40325)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0325Normal.setDescription('Generated when alarm point 325 from a high density unit transitions to the normal state.')
alarmInputHighDensity0326Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30326)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0326Alarm.setDescription('Generated when alarm point 326 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0326Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40326)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0326Normal.setDescription('Generated when alarm point 326 from a high density unit transitions to the normal state.')
alarmInputHighDensity0327Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30327)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0327Alarm.setDescription('Generated when alarm point 327 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0327Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40327)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0327Normal.setDescription('Generated when alarm point 327 from a high density unit transitions to the normal state.')
alarmInputHighDensity0328Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30328)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0328Alarm.setDescription('Generated when alarm point 328 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0328Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40328)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0328Normal.setDescription('Generated when alarm point 328 from a high density unit transitions to the normal state.')
alarmInputHighDensity0329Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30329)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0329Alarm.setDescription('Generated when alarm point 329 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0329Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40329)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0329Normal.setDescription('Generated when alarm point 329 from a high density unit transitions to the normal state.')
alarmInputHighDensity0330Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30330)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0330Alarm.setDescription('Generated when alarm point 330 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0330Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40330)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0330Normal.setDescription('Generated when alarm point 330 from a high density unit transitions to the normal state.')
alarmInputHighDensity0331Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30331)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0331Alarm.setDescription('Generated when alarm point 331 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0331Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40331)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0331Normal.setDescription('Generated when alarm point 331 from a high density unit transitions to the normal state.')
alarmInputHighDensity0332Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30332)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0332Alarm.setDescription('Generated when alarm point 332 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0332Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40332)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0332Normal.setDescription('Generated when alarm point 332 from a high density unit transitions to the normal state.')
alarmInputHighDensity0333Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30333)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0333Alarm.setDescription('Generated when alarm point 333 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0333Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40333)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0333Normal.setDescription('Generated when alarm point 333 from a high density unit transitions to the normal state.')
alarmInputHighDensity0334Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30334)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0334Alarm.setDescription('Generated when alarm point 334 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0334Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40334)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0334Normal.setDescription('Generated when alarm point 334 from a high density unit transitions to the normal state.')
alarmInputHighDensity0335Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30335)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0335Alarm.setDescription('Generated when alarm point 335 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0335Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40335)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0335Normal.setDescription('Generated when alarm point 335 from a high density unit transitions to the normal state.')
alarmInputHighDensity0336Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30336)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0336Alarm.setDescription('Generated when alarm point 336 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0336Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40336)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0336Normal.setDescription('Generated when alarm point 336 from a high density unit transitions to the normal state.')
alarmInputHighDensity0337Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30337)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0337Alarm.setDescription('Generated when alarm point 337 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0337Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40337)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0337Normal.setDescription('Generated when alarm point 337 from a high density unit transitions to the normal state.')
alarmInputHighDensity0338Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30338)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0338Alarm.setDescription('Generated when alarm point 338 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0338Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40338)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0338Normal.setDescription('Generated when alarm point 338 from a high density unit transitions to the normal state.')
alarmInputHighDensity0339Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30339)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0339Alarm.setDescription('Generated when alarm point 339 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0339Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40339)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0339Normal.setDescription('Generated when alarm point 339 from a high density unit transitions to the normal state.')
alarmInputHighDensity0340Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30340)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0340Alarm.setDescription('Generated when alarm point 340 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0340Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40340)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0340Normal.setDescription('Generated when alarm point 340 from a high density unit transitions to the normal state.')
alarmInputHighDensity0341Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30341)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0341Alarm.setDescription('Generated when alarm point 341 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0341Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40341)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0341Normal.setDescription('Generated when alarm point 341 from a high density unit transitions to the normal state.')
alarmInputHighDensity0342Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30342)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0342Alarm.setDescription('Generated when alarm point 342 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0342Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40342)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0342Normal.setDescription('Generated when alarm point 342 from a high density unit transitions to the normal state.')
alarmInputHighDensity0343Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30343)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0343Alarm.setDescription('Generated when alarm point 343 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0343Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40343)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0343Normal.setDescription('Generated when alarm point 343 from a high density unit transitions to the normal state.')
alarmInputHighDensity0344Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30344)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0344Alarm.setDescription('Generated when alarm point 344 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0344Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40344)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0344Normal.setDescription('Generated when alarm point 344 from a high density unit transitions to the normal state.')
alarmInputHighDensity0345Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30345)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0345Alarm.setDescription('Generated when alarm point 345 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0345Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40345)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0345Normal.setDescription('Generated when alarm point 345 from a high density unit transitions to the normal state.')
alarmInputHighDensity0346Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30346)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0346Alarm.setDescription('Generated when alarm point 346 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0346Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40346)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0346Normal.setDescription('Generated when alarm point 346 from a high density unit transitions to the normal state.')
alarmInputHighDensity0347Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30347)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0347Alarm.setDescription('Generated when alarm point 347 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0347Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40347)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0347Normal.setDescription('Generated when alarm point 347 from a high density unit transitions to the normal state.')
alarmInputHighDensity0348Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30348)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0348Alarm.setDescription('Generated when alarm point 348 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0348Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40348)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0348Normal.setDescription('Generated when alarm point 348 from a high density unit transitions to the normal state.')
alarmInputHighDensity0349Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30349)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0349Alarm.setDescription('Generated when alarm point 349 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0349Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40349)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0349Normal.setDescription('Generated when alarm point 349 from a high density unit transitions to the normal state.')
alarmInputHighDensity0350Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30350)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0350Alarm.setDescription('Generated when alarm point 350 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0350Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40350)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0350Normal.setDescription('Generated when alarm point 350 from a high density unit transitions to the normal state.')
alarmInputHighDensity0351Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30351)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0351Alarm.setDescription('Generated when alarm point 351 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0351Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40351)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0351Normal.setDescription('Generated when alarm point 351 from a high density unit transitions to the normal state.')
alarmInputHighDensity0352Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30352)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0352Alarm.setDescription('Generated when alarm point 352 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0352Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40352)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0352Normal.setDescription('Generated when alarm point 352 from a high density unit transitions to the normal state.')
alarmInputHighDensity0353Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30353)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0353Alarm.setDescription('Generated when alarm point 353 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0353Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40353)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0353Normal.setDescription('Generated when alarm point 353 from a high density unit transitions to the normal state.')
alarmInputHighDensity0354Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30354)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0354Alarm.setDescription('Generated when alarm point 354 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0354Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40354)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0354Normal.setDescription('Generated when alarm point 354 from a high density unit transitions to the normal state.')
alarmInputHighDensity0355Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30355)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0355Alarm.setDescription('Generated when alarm point 355 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0355Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40355)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0355Normal.setDescription('Generated when alarm point 355 from a high density unit transitions to the normal state.')
alarmInputHighDensity0356Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30356)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0356Alarm.setDescription('Generated when alarm point 356 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0356Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40356)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0356Normal.setDescription('Generated when alarm point 356 from a high density unit transitions to the normal state.')
alarmInputHighDensity0357Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30357)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0357Alarm.setDescription('Generated when alarm point 357 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0357Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40357)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0357Normal.setDescription('Generated when alarm point 357 from a high density unit transitions to the normal state.')
alarmInputHighDensity0358Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30358)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0358Alarm.setDescription('Generated when alarm point 358 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0358Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40358)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0358Normal.setDescription('Generated when alarm point 358 from a high density unit transitions to the normal state.')
alarmInputHighDensity0359Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30359)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0359Alarm.setDescription('Generated when alarm point 359 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0359Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40359)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0359Normal.setDescription('Generated when alarm point 359 from a high density unit transitions to the normal state.')
alarmInputHighDensity0360Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30360)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0360Alarm.setDescription('Generated when alarm point 360 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0360Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40360)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0360Normal.setDescription('Generated when alarm point 360 from a high density unit transitions to the normal state.')
alarmInputHighDensity0361Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30361)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0361Alarm.setDescription('Generated when alarm point 361 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0361Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40361)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0361Normal.setDescription('Generated when alarm point 361 from a high density unit transitions to the normal state.')
alarmInputHighDensity0362Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30362)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0362Alarm.setDescription('Generated when alarm point 362 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0362Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40362)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0362Normal.setDescription('Generated when alarm point 362 from a high density unit transitions to the normal state.')
alarmInputHighDensity0363Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30363)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0363Alarm.setDescription('Generated when alarm point 363 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0363Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40363)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0363Normal.setDescription('Generated when alarm point 363 from a high density unit transitions to the normal state.')
alarmInputHighDensity0364Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30364)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0364Alarm.setDescription('Generated when alarm point 364 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0364Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40364)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0364Normal.setDescription('Generated when alarm point 364 from a high density unit transitions to the normal state.')
alarmInputHighDensity0365Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30365)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0365Alarm.setDescription('Generated when alarm point 365 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0365Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40365)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0365Normal.setDescription('Generated when alarm point 365 from a high density unit transitions to the normal state.')
alarmInputHighDensity0366Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30366)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0366Alarm.setDescription('Generated when alarm point 366 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0366Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40366)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0366Normal.setDescription('Generated when alarm point 366 from a high density unit transitions to the normal state.')
alarmInputHighDensity0367Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30367)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0367Alarm.setDescription('Generated when alarm point 367 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0367Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40367)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0367Normal.setDescription('Generated when alarm point 367 from a high density unit transitions to the normal state.')
alarmInputHighDensity0368Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30368)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0368Alarm.setDescription('Generated when alarm point 368 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0368Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40368)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0368Normal.setDescription('Generated when alarm point 368 from a high density unit transitions to the normal state.')
alarmInputHighDensity0369Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30369)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0369Alarm.setDescription('Generated when alarm point 369 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0369Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40369)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0369Normal.setDescription('Generated when alarm point 369 from a high density unit transitions to the normal state.')
alarmInputHighDensity0370Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30370)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0370Alarm.setDescription('Generated when alarm point 370 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0370Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40370)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0370Normal.setDescription('Generated when alarm point 370 from a high density unit transitions to the normal state.')
alarmInputHighDensity0371Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30371)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0371Alarm.setDescription('Generated when alarm point 371 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0371Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40371)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0371Normal.setDescription('Generated when alarm point 371 from a high density unit transitions to the normal state.')
alarmInputHighDensity0372Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30372)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0372Alarm.setDescription('Generated when alarm point 372 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0372Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40372)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0372Normal.setDescription('Generated when alarm point 372 from a high density unit transitions to the normal state.')
alarmInputHighDensity0373Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30373)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0373Alarm.setDescription('Generated when alarm point 373 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0373Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40373)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0373Normal.setDescription('Generated when alarm point 373 from a high density unit transitions to the normal state.')
alarmInputHighDensity0374Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30374)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0374Alarm.setDescription('Generated when alarm point 374 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0374Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40374)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0374Normal.setDescription('Generated when alarm point 374 from a high density unit transitions to the normal state.')
alarmInputHighDensity0375Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30375)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0375Alarm.setDescription('Generated when alarm point 375 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0375Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40375)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0375Normal.setDescription('Generated when alarm point 375 from a high density unit transitions to the normal state.')
alarmInputHighDensity0376Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30376)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0376Alarm.setDescription('Generated when alarm point 376 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0376Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40376)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0376Normal.setDescription('Generated when alarm point 376 from a high density unit transitions to the normal state.')
alarmInputHighDensity0377Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30377)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0377Alarm.setDescription('Generated when alarm point 377 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0377Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40377)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0377Normal.setDescription('Generated when alarm point 377 from a high density unit transitions to the normal state.')
alarmInputHighDensity0378Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30378)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0378Alarm.setDescription('Generated when alarm point 378 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0378Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40378)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0378Normal.setDescription('Generated when alarm point 378 from a high density unit transitions to the normal state.')
alarmInputHighDensity0379Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30379)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0379Alarm.setDescription('Generated when alarm point 379 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0379Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40379)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0379Normal.setDescription('Generated when alarm point 379 from a high density unit transitions to the normal state.')
alarmInputHighDensity0380Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30380)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0380Alarm.setDescription('Generated when alarm point 380 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0380Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40380)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0380Normal.setDescription('Generated when alarm point 380 from a high density unit transitions to the normal state.')
alarmInputHighDensity0381Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30381)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0381Alarm.setDescription('Generated when alarm point 381 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0381Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40381)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0381Normal.setDescription('Generated when alarm point 381 from a high density unit transitions to the normal state.')
alarmInputHighDensity0382Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30382)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0382Alarm.setDescription('Generated when alarm point 382 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0382Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40382)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0382Normal.setDescription('Generated when alarm point 382 from a high density unit transitions to the normal state.')
alarmInputHighDensity0383Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30383)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0383Alarm.setDescription('Generated when alarm point 383 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0383Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40383)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0383Normal.setDescription('Generated when alarm point 383 from a high density unit transitions to the normal state.')
alarmInputHighDensity0384Alarm = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,30384)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0384Alarm.setDescription('Generated when alarm point 384 from a high density unit transitions to the alarm state.')
alarmInputHighDensity0384Normal = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,40384)).setObjects(("MRVINREACH", "basicAlarmMasterInputValue"), ("MRVINREACH", "basicAlarmMasterInputName"), ("MRVINREACH", "sysLocation"), ("MRVINREACH", "basicAlarmMasterInputPort"), ("MRVINREACH", "basicAlarmMasterInputStatus"), ("MRVINREACH", "basicAlarmMasterInputSlot"), ("MRVINREACH", "basicAlarmMasterInputPoint"), ("MRVINREACH", "basicAlarmMasterInputZone"), ("MRVINREACH", "basicAlarmMasterInputRelatedEquipment"), ("MRVINREACH", "basicAlarmMasterInputSiteId"), ("MRVINREACH", "basicAlarmMasterInputManufacturer"), ("MRVINREACH", "basicAlarmMasterInputModel"))
if mibBuilder.loadTexts: alarmInputHighDensity0384Normal.setDescription('Generated when alarm point 384 from a high density unit transitions to the normal state.')
xDecnet = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14))
xRcp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 1))
xPhiv = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 2))
xPhivRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 2, 1))
xPhivCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 2, 2))
xPhivImport = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 2, 3))
xPhivImportArea = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 2, 4))
xPhivExport = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 2, 5))
xPhivExportArea = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 2, 6))
xPhivFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 2, 7))
xPhivTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 2, 8))
rcpRemoteAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rcpRemoteAddress.setDescription('If a remote console session exists, the Ethernet address of the remote partner, otherwise zero length.')
phivPathSelection = MibScalar((1, 3, 6, 1, 4, 1, 33, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("roundRobin", 1), ("samePath", 2))).clone('roundRobin')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivPathSelection.setStatus('mandatory')
if mibBuilder.loadTexts: phivPathSelection.setDescription("The algorithm used to balance traffic between equal next hop paths. 'roundRobin' selects the next hop using a round robin algorithm for each hop. 'samePath' selects the next hop guaranteeing that all packets with the same source/destination pair will always use the same next hop.")
phivMaxPaths = MibScalar((1, 3, 6, 1, 4, 1, 33, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivMaxPaths.setStatus('mandatory')
if mibBuilder.loadTexts: phivMaxPaths.setDescription('The maximum number of equal cost next hops that the router can remember and successfully load balance between.')
phivStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("disabled", 2), ("noAddressSpecified", 3), ("noInterfacesEnabled", 4), ("badCost", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivStatus.setStatus('mandatory')
if mibBuilder.loadTexts: phivStatus.setDescription('The status of the DECnet routing software.')
phivCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1), )
if mibBuilder.loadTexts: phivCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitTable.setDescription('A list of DECnet circuit entries.')
phivCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1), ).setIndexNames((0, "MRVINREACH", "xPhivCircuitIndex"))
if mibBuilder.loadTexts: phivCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitEntry.setDescription('Parameter values for a DECnet circuit.')
xPhivCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPhivCircuitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xPhivCircuitIndex.setDescription('Identification of a circuit entry. Same as an interface index (ifIndex).')
phivCircuitRoutingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitRoutingTimer.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitRoutingTimer.setDescription('The maximum time in seconds allowed between Routing updates on the circuit. Different values for LANs vs. WANs.')
phivCircuitOperCost = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitOperCost.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitOperCost.setDescription('The actual cost associated with the circuit.')
phivCircuitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitErrors.setDescription('The number of routed DECnet packets received in error on this circuit.')
phivCircuitLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noError", 1), ("addressOutOfRange", 2), ("ageExceeded", 3), ("destinationUnreachable", 4), ("packetFormatError", 5), ("packetOversized", 6), ("partialRoutingUpdate", 7), ("verificationReject", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitLastError.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitLastError.setDescription('The error of the last routed DECnet packet received in error on this circuit.')
phivCircuitLastErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1, 6), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitLastErrorTime.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitLastErrorTime.setDescription('The date and time that the last routed DECnet packet was received in error on this circuit.')
phivCircuitLastErrorData = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(22, 22)).setFixedLength(22)).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitLastErrorData.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitLastErrorData.setDescription('The first 22 bytes of the last routed DECnet packet received in error on this circuit.')
phivCircuitProtocolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5))).clone(namedValues=NamedValues(("low", 1), ("medium", 3), ("high", 5))).clone('medium')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitProtocolPriority.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitProtocolPriority.setDescription('The priority at which all DECnet routed packets will be placed on the WAN output queue.')
phivCircuitRoutingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitRoutingPriority.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitRoutingPriority.setDescription("Router's priority to be designated router on this circuit.")
phivCircuitImportTable = MibTable((1, 3, 6, 1, 4, 1, 33, 14, 2, 3, 1), )
if mibBuilder.loadTexts: phivCircuitImportTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitImportTable.setDescription('A list of circuit import filter entries.')
phivCircuitImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 14, 2, 3, 1, 1), ).setIndexNames((0, "MRVINREACH", "phivCircuitImportIf"), (0, "MRVINREACH", "phivCircuitImportAddr"), (0, "MRVINREACH", "phivCircuitImportMask"))
if mibBuilder.loadTexts: phivCircuitImportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitImportEntry.setDescription('Parameter values for an import filter.')
phivCircuitImportIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitImportIf.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitImportIf.setDescription('The interface associated with the import routing filter.')
phivCircuitImportAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 3, 1, 1, 2), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitImportAddr.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitImportAddr.setDescription('The address (node or area) to match against learned route entries to decide whether to import the entry to the routing database.')
phivCircuitImportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 3, 1, 1, 3), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitImportMask.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitImportMask.setDescription('The mask which is ANDed with the address field as well as the route entries address to determine whether the address matches the route entry.')
phivCircuitImportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitImportAction.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitImportAction.setDescription('The action to take if the address field along with the mask field matches the route entry.')
phivCircuitImportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitImportStatus.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitImportStatus.setDescription("Setting to 'invalid' removes this import filter from the table. Setting to 'valid' has no effect.")
phivCircuitImportAreaTable = MibTable((1, 3, 6, 1, 4, 1, 33, 14, 2, 4, 1), )
if mibBuilder.loadTexts: phivCircuitImportAreaTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitImportAreaTable.setDescription('A list of circuit import area filter entries.')
phivCircuitImportAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 14, 2, 4, 1, 1), ).setIndexNames((0, "MRVINREACH", "phivCircuitImportAreaIf"), (0, "MRVINREACH", "phivCircuitImportAreaAddr"), (0, "MRVINREACH", "phivCircuitImportAreaMask"))
if mibBuilder.loadTexts: phivCircuitImportAreaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitImportAreaEntry.setDescription('Parameter values for an import area filter.')
phivCircuitImportAreaIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitImportAreaIf.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitImportAreaIf.setDescription('The interface associated with the import area routing filter.')
phivCircuitImportAreaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 4, 1, 1, 2), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitImportAreaAddr.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitImportAreaAddr.setDescription('The address (node or area) to match against learned route entries to decide whether to import the entry to the routing database.')
phivCircuitImportAreaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 4, 1, 1, 3), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitImportAreaMask.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitImportAreaMask.setDescription('The mask which is ANDed with the address field as well as the route entries address to determine whether the address matches the route entry.')
phivCircuitImportAreaAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitImportAreaAction.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitImportAreaAction.setDescription('The action to take if the address field along with the mask field matches the route entry.')
phivCircuitImportAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitImportAreaStatus.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitImportAreaStatus.setDescription("Setting to 'invalid' removes this import area filter from the table. Setting to 'valid' has no effect.")
phivCircuitExportTable = MibTable((1, 3, 6, 1, 4, 1, 33, 14, 2, 5, 1), )
if mibBuilder.loadTexts: phivCircuitExportTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExportTable.setDescription('A list of circuit export filter entries.')
phivCircuitExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 14, 2, 5, 1, 1), ).setIndexNames((0, "MRVINREACH", "phivCircuitExportIf"), (0, "MRVINREACH", "phivCircuitExportAddr"), (0, "MRVINREACH", "phivCircuitExportMask"))
if mibBuilder.loadTexts: phivCircuitExportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExportEntry.setDescription('Parameter values for an export filter.')
phivCircuitExportIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitExportIf.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExportIf.setDescription('The interface associated with the export routing filter.')
phivCircuitExportAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 5, 1, 1, 2), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitExportAddr.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExportAddr.setDescription('The address (node or area) to match against learned route entries to decide whether to export the entry to the routing database.')
phivCircuitExportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 5, 1, 1, 3), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitExportMask.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExportMask.setDescription('The mask which is ANDed with the address field as well as the route entries address to determine whether the address matches the route entry.')
phivCircuitExportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitExportAction.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExportAction.setDescription('The action to take if the address field along with the mask field matches the route entry.')
phivCircuitExportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitExportStatus.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExportStatus.setDescription("Setting to 'invalid' removes this export filter from the table. Setting to 'valid' has no effect.")
phivCircuitExportAreaTable = MibTable((1, 3, 6, 1, 4, 1, 33, 14, 2, 6, 1), )
if mibBuilder.loadTexts: phivCircuitExportAreaTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExportAreaTable.setDescription('A list of circuit export area filter entries.')
phivCircuitExportAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 14, 2, 6, 1, 1), ).setIndexNames((0, "MRVINREACH", "phivCircuitExportAreaIf"), (0, "MRVINREACH", "phivCircuitExportAreaAddr"), (0, "MRVINREACH", "phivCircuitExportAreaMask"))
if mibBuilder.loadTexts: phivCircuitExportAreaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExportAreaEntry.setDescription('Parameter values for an export area filter.')
phivCircuitExportAreaIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitExportAreaIf.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExportAreaIf.setDescription('The interface associated with the export area routing filter.')
phivCircuitExportAreaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 6, 1, 1, 2), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitExportAreaAddr.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExportAreaAddr.setDescription('The address (node or area) to match against learned route entries to decide whether to export the entry to the routing database.')
phivCircuitExportAreaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 6, 1, 1, 3), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitExportAreaMask.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExportAreaMask.setDescription('The mask which is ANDed with the address field as well as the route entries address to determine whether the address matches the route entry.')
phivCircuitExportAreaAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitExportAreaAction.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExportAreaAction.setDescription('The action to take if the address field along with the mask field matches the route entry.')
phivCircuitExportAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitExportAreaStatus.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitExportAreaStatus.setDescription("Setting to 'invalid' removes this export area filter from the table. Setting to 'valid' has no effect.")
phivCircuitFilterTable = MibTable((1, 3, 6, 1, 4, 1, 33, 14, 2, 7, 1), )
if mibBuilder.loadTexts: phivCircuitFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitFilterTable.setDescription('A list of circuit filter entries.')
phivCircuitFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 14, 2, 7, 1, 1), ).setIndexNames((0, "MRVINREACH", "phivCircuitFilterIf"), (0, "MRVINREACH", "phivCircuitFilterDstAddr"), (0, "MRVINREACH", "phivCircuitFilterDstMask"), (0, "MRVINREACH", "phivCircuitFilterSrcAddr"), (0, "MRVINREACH", "phivCircuitFilterSrcMask"))
if mibBuilder.loadTexts: phivCircuitFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitFilterEntry.setDescription('Parameter values for a filter.')
phivCircuitFilterIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitFilterIf.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitFilterIf.setDescription('The interface associated with the filter entry.')
phivCircuitFilterDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 7, 1, 1, 2), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitFilterDstAddr.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitFilterDstAddr.setDescription('The address (node or area) to match against the destination address of the packet to decide whether to forward the packet.')
phivCircuitFilterDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 7, 1, 1, 3), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitFilterDstMask.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitFilterDstMask.setDescription("The mask which is ANDed with the destination address field and the packet's destination address to determine whether the address matches the packet's address.")
phivCircuitFilterSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 7, 1, 1, 4), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitFilterSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitFilterSrcAddr.setDescription('The address (node or area) to match against the source address of the packet to decide whether to forward the packet.')
phivCircuitFilterSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 7, 1, 1, 5), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitFilterSrcMask.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitFilterSrcMask.setDescription("The mask which is ANDed with the source address field and the packet's source address to determine whether the address matches the packet's address.")
phivCircuitFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2))).clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitFilterAction.setDescription('The action to take if the address fields along with the mask fields match the packet.')
phivCircuitFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: phivCircuitFilterStatus.setDescription("Setting to 'invalid' removes this Filter filter from the table. Setting to 'valid' has no effect.")
phivTrafficSort = MibScalar((1, 3, 6, 1, 4, 1, 33, 14, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivTrafficSort.setStatus('mandatory')
if mibBuilder.loadTexts: phivTrafficSort.setDescription("Setting to 'execute' causes the most recent traffic information to be sorted into the phivTrafficTable. The sorting precedence is: decreasing percentage, increasing destination address, increasing source address, and increasing interface number. Setting to 'ready' has no effect.")
phivTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 33, 14, 2, 8, 2), )
if mibBuilder.loadTexts: phivTrafficTable.setStatus('mandatory')
if mibBuilder.loadTexts: phivTrafficTable.setDescription('A list of traffic entries, sorted in the order specified by phivTrafficSort.')
phivTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 14, 2, 8, 2, 1), ).setIndexNames((0, "MRVINREACH", "phivTrafficIndex"))
if mibBuilder.loadTexts: phivTrafficEntry.setStatus('mandatory')
if mibBuilder.loadTexts: phivTrafficEntry.setDescription('A traffic entry.')
phivTrafficIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivTrafficIndex.setStatus('mandatory')
if mibBuilder.loadTexts: phivTrafficIndex.setDescription('Identification of this traffic entry.')
phivTrafficPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivTrafficPercent.setStatus('mandatory')
if mibBuilder.loadTexts: phivTrafficPercent.setDescription('The percentage of total traffic that this traffic entry represents, in tenths of a percent.')
phivTrafficDst = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 8, 2, 1, 3), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivTrafficDst.setStatus('mandatory')
if mibBuilder.loadTexts: phivTrafficDst.setDescription('The destination to which the traffic entry applies.')
phivTrafficSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 8, 2, 1, 4), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivTrafficSrc.setStatus('mandatory')
if mibBuilder.loadTexts: phivTrafficSrc.setDescription('The source to which the traffic entry applies.')
phivTrafficIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivTrafficIf.setStatus('mandatory')
if mibBuilder.loadTexts: phivTrafficIf.setDescription('The inbound interface to which the traffic entry applies. This value is the same as IfIndex.')
xEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 11))
etherTable = MibTable((1, 3, 6, 1, 4, 1, 33, 11, 1), )
if mibBuilder.loadTexts: etherTable.setStatus('mandatory')
if mibBuilder.loadTexts: etherTable.setDescription('A list of generic entries.')
etherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 11, 1, 1), ).setIndexNames((0, "MRVINREACH", "etherIndex"))
if mibBuilder.loadTexts: etherEntry.setStatus('mandatory')
if mibBuilder.loadTexts: etherEntry.setDescription('Generic status and parameter values for an Ethernet interface.')
etherIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherIndex.setStatus('mandatory')
if mibBuilder.loadTexts: etherIndex.setDescription('An index value that uniquely identifies an Ethernet interface. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
etherAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherAlignmentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: etherAlignmentErrors.setDescription('A count of frames received on a particular interface that are not an integral number of octets in length and do not pass the FCS check.')
etherFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherFCSErrors.setStatus('mandatory')
if mibBuilder.loadTexts: etherFCSErrors.setDescription('A count of frames received on a particular interface that are an integral number of octets in length that do not pass the FCS check.')
etherTxTable = MibTable((1, 3, 6, 1, 4, 1, 33, 11, 2), )
if mibBuilder.loadTexts: etherTxTable.setStatus('mandatory')
if mibBuilder.loadTexts: etherTxTable.setDescription('A list of Ethernet transmit entries.')
etherTxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 11, 2, 1), ).setIndexNames((0, "MRVINREACH", "etherTxIndex"))
if mibBuilder.loadTexts: etherTxEntry.setStatus('mandatory')
if mibBuilder.loadTexts: etherTxEntry.setDescription('Transmit status and parameter values for an Ethernet interface.')
etherTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherTxIndex.setStatus('mandatory')
if mibBuilder.loadTexts: etherTxIndex.setDescription('An index value that uniquely identifies an Ethernet interface. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
etherTxSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherTxSingleCollisionFrames.setStatus('mandatory')
if mibBuilder.loadTexts: etherTxSingleCollisionFrames.setDescription('A count of successfully transmitted frames on a particular interface for which transmission is inhibited by exactly one collision. A frame that is counted by an instance of this object is also counted by the corresponding instance of either the ifOutUcastPkts or ifOutNUcastPkts object and is not counted by the corresponding instance of the etherTxMultipleCollisionFrames object.')
etherTxMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherTxMultipleCollisionFrames.setStatus('mandatory')
if mibBuilder.loadTexts: etherTxMultipleCollisionFrames.setDescription('A count of successfully transmitted frames on a particular interface for which transmission is inhibited by more than one collision. A frame that is counted by an instance of this object is also counted by the corresponding instance of either the ifOutUcastPkts or ifOutNUcastPkts object and is not counted by the corresponding instance of the etherTxSingleCollisionFrames object.')
etherMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 33, 11, 3), )
if mibBuilder.loadTexts: etherMulticastTable.setStatus('mandatory')
if mibBuilder.loadTexts: etherMulticastTable.setDescription('A list of etherMulticast entries.')
etherMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 11, 3, 1), ).setIndexNames((0, "MRVINREACH", "etherMulticastIndex"))
if mibBuilder.loadTexts: etherMulticastEntry.setStatus('mandatory')
if mibBuilder.loadTexts: etherMulticastEntry.setDescription('EtherMulticast status and parameter values for an Ethernet interface.')
etherMulticastIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherMulticastIndex.setStatus('mandatory')
if mibBuilder.loadTexts: etherMulticastIndex.setDescription('An index value that uniquely identifies an Ethernet interface. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
etherMulticastBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherMulticastBytesIn.setStatus('mandatory')
if mibBuilder.loadTexts: etherMulticastBytesIn.setDescription('A count of frames successfully received on a particular interface and for which the destination address multicast bit was set. Bytes that are counted by an instance of this object are also counted by the corresponding instance of the ifInOctets object.')
etherMulticastBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherMulticastBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: etherMulticastBytesOut.setDescription('A count of successfully frames successfully transmitted on a particular interface and for which the destination address multicast bit was set. Bytes that are counted by an instance of this object are also counted by the corresponding instance of the ifOutOctets object.')
etherXTxTable = MibTable((1, 3, 6, 1, 4, 1, 33, 11, 4), )
if mibBuilder.loadTexts: etherXTxTable.setStatus('mandatory')
if mibBuilder.loadTexts: etherXTxTable.setDescription('A list of Ethernet extended transmit entries.')
etherXTxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 11, 4, 1), ).setIndexNames((0, "MRVINREACH", "etherXTxIndex"))
if mibBuilder.loadTexts: etherXTxEntry.setStatus('mandatory')
if mibBuilder.loadTexts: etherXTxEntry.setDescription('Extended transmit status and parameter values for an Ethernet interface.')
etherXTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherXTxIndex.setStatus('mandatory')
if mibBuilder.loadTexts: etherXTxIndex.setDescription('An index value that uniquely identifies an Ethernet interface. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
etherXTxExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 11, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherXTxExcessiveCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: etherXTxExcessiveCollisions.setDescription('A count of frames for which transmission on a particular interface fails due to excessive collisions.')
xInternetDep = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 4))
xInternet = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10))
xIp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 1))
xTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 2))
xSnmpAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 3))
xDomainResolver = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 4))
xSlip = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 5))
xTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 6))
xTn3270 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 7))
xKerberos = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 8))
xPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 9))
xXremote = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 10))
xRotary = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 11))
xEgp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 12))
xOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 13))
xRouterIp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 14))
xRouterUdp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 15))
xRouterPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 16))
xRip = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 18))
xlpd = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 19))
xSecurID = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 20))
xSsh = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 23))
ipGatewayAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGatewayAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: ipGatewayAddress1.setDescription("The internet address of the system's primary (first choice) gateway. A value of 0.0.0.0 indicates no address. Corresponds directly to SERVER INTERNET PRIMARY GATEWAY ADDRESS and the value labeled 'Primary Gateway Address:' in the SERVER INTERNET CHARACTERISTICS display.")
ipGatewayAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGatewayAddress2.setStatus('mandatory')
if mibBuilder.loadTexts: ipGatewayAddress2.setDescription("The internet address of the system's secondary (second choice) gateway. A value of 0.0.0.0 indicates no address. Corresponds directly to SERVER INTERNET SECONDARY GATEWAY ADDRESS and the value labeled 'Secondary Gateway Address:' in the SERVER INTERNET CHARACTERISTICS display.")
ipAutoSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAutoSubnetMask.setStatus('deprecated')
if mibBuilder.loadTexts: ipAutoSubnetMask.setDescription("A control for automatic determination of subnet mask. 'disabled' indicates the system must use the mask as configured by the network manager. 'enabled' indicates that the system is to automatically change the subnet mask when the system's Internet address is changed. Corresponds directly to SERVER INTERNET SUBNET MASK AUTOCONFIGURE and the value labeled 'Subnet Mask Autoconfigure:' in the SERVER INTERNET CHARACTERISTICS display.")
ipReassembly = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipReassembly.setStatus('mandatory')
if mibBuilder.loadTexts: ipReassembly.setDescription("A control for reassembly of IP fragments. Corresponds directly to SERVER INTERNET REASSEMBLY and the value labeled 'Reassembly:' in the SERVER INTERNET CHARACTERISTICS display.")
ipFragmentsQueuedHigh = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragmentsQueuedHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ipFragmentsQueuedHigh.setDescription('Highest number of IP fragments queued.')
ipFragmentsQueuedCurrent = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFragmentsQueuedCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: ipFragmentsQueuedCurrent.setDescription('Current number of IP fragments queued.')
ipGenAdExtTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 1, 7), )
if mibBuilder.loadTexts: ipGenAdExtTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipGenAdExtTable.setDescription('Table of additional fields indexed by local IP address. An entry in this table is created or deleted when an entry in the MIB-II ipAddrTable is created or deleted. Although MIB-II specifies the ipAddrTable as read-only, MRV In-Reach implementations typically implement it as read-write to support modification of local IP addresses, network masks, and such.')
ipARPTimeout = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipARPTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ipARPTimeout.setDescription("A control to set the length of time in minutes before an unused ARP entry is purged from the ARP table. The default is 60 minutes. Corresponds directly to the value labeled 'Translation Table TTL' in the SERVER INTERNET CHARACTERISTICS display.")
ipGatewayPingInterval = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGatewayPingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ipGatewayPingInterval.setDescription("A control to set the interval of time in seconds between successive pings to the primary gateway so as to determine its status. The default is 60 seconds. Corresponds directly to the value labeled 'Gateway Timeout' in the SERVER INTERNET CHARACTERISTICS display.")
ipConfigureBootp = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipConfigureBootp.setStatus('mandatory')
if mibBuilder.loadTexts: ipConfigureBootp.setDescription("Control to use the BOOTP protocol upon startup to learn the unit's own internet address, subnet mask, primary and secondary gateway servers, domain name servers, time server and domain name.")
ipGenAdExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 1, 7, 1), ).setIndexNames((0, "MRVINREACH", "ipAdEntAddr"))
if mibBuilder.loadTexts: ipGenAdExtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipGenAdExtEntry.setDescription('A particular entry.')
ipGenAdEntExtType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("rotary", 2), ("slip", 3), ("ppp", 4))).clone('primary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGenAdEntExtType.setStatus('mandatory')
if mibBuilder.loadTexts: ipGenAdEntExtType.setDescription('The way this local IP address is used, which may imply alternate, more intuitive ways to set it. primary general purpose for ordinary use rotary identificaton for rotary selection slip use for SLIP connection ppp use for PPP connection ')
ipGenAdEntExtBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 1, 7, 1, 2), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipGenAdEntExtBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: ipGenAdEntExtBroadcast.setDescription('Outgoing IP broadcast address associated with this local address. Value may be confined to logical compatibility with associated network mask.')
tcpPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 2, 1), )
if mibBuilder.loadTexts: tcpPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: tcpPortTable.setDescription('A list of TCP character port entries.')
tcpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1), ).setIndexNames((0, "MRVINREACH", "tcpPortIndex"))
if mibBuilder.loadTexts: tcpPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tcpPortEntry.setDescription('TCP parameter values for a character port.')
tcpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tcpPortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
tcpPortConnectByAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpPortConnectByAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tcpPortConnectByAddress.setDescription("A control for requesting outgoing connection by internet address. 'disabled' indicates outgoing connections must be by Domain name. 'enabled' indicates that outgoing connections may be requested by internet address. Corresponds directly to PORT INTERNET CONNECTIONS and the presence of the label 'Internet Connections' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
tcpPortWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpPortWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: tcpPortWindowSize.setDescription("Size of the TCP window for TCP connections on the port. Corresponds directly to PORT INTERNET TCP WINDOW SIZE and the value labeled 'TCP Window Size:' in the PORT ALTERNATE CHARACTERISTICS display.")
tcpPortKeepAliveLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpPortKeepAliveLimit.setStatus('mandatory')
if mibBuilder.loadTexts: tcpPortKeepAliveLimit.setDescription('Number of minutes to maintain a TCP connection without response to keep-alive communication. A value of zero indicates no limit.')
tcpResequencing = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpResequencing.setStatus('mandatory')
if mibBuilder.loadTexts: tcpResequencing.setDescription("A control for keeping TCP messages received out-of-order to resequence them before using them. Corresponds directly to SERVER INTERNET TCP RESEQUENCING and the value labeled 'Resequencing:' in the SERVER INTERNET CHARACTERISTICS display.")
tcpQueuedSegs = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpQueuedSegs.setStatus('mandatory')
if mibBuilder.loadTexts: tcpQueuedSegs.setDescription("Number of TCP segments in the TCP receive queues. Corresponds directly to the value labeled 'TCP Packets Queued:' in the SERVER INTERNET COUNTERS display.")
tcpDiscardSegs = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpDiscardSegs.setStatus('mandatory')
if mibBuilder.loadTexts: tcpDiscardSegs.setDescription("Number of TCP segments discarded due to exceeding the TCP receive queue limit. Corresponds directly to the value labeled 'TCP Packets Discarded:' in the SERVER INTERNET COUNTERS display.")
tcpConnectTimer = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpConnectTimer.setStatus('mandatory')
if mibBuilder.loadTexts: tcpConnectTimer.setDescription("Number of seconds to attempt a TCP connection without a response from the other side. The default value is 32 seconds. Corresponds directly to the SERVER INTERNET TCP CONNECT TIMER and the value labeled 'TCP Connect Timer' in the SERVER INTERNET CHARACTERISTICS display")
tcpLocalPortBase = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpLocalPortBase.setStatus('mandatory')
if mibBuilder.loadTexts: tcpLocalPortBase.setDescription("The value for port 0's tcp source port number.")
tcpLocalPortIncrement = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpLocalPortIncrement.setStatus('mandatory')
if mibBuilder.loadTexts: tcpLocalPortIncrement.setDescription('The value by which the tcp source port number increases for each port greater than port 0.')
tcpRoutingTblSz = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpRoutingTblSz.setStatus('mandatory')
if mibBuilder.loadTexts: tcpRoutingTblSz.setDescription('A control to set the size of the working routing table. The default is the current size of the table (64).')
tcpDataSendDelay = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpDataSendDelay.setStatus('mandatory')
if mibBuilder.loadTexts: tcpDataSendDelay.setDescription('A control to delay for the specified number of 10 millisecond ticks before sending the userdata string over the telnet connection.')
tcpAckDelay = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpAckDelay.setStatus('mandatory')
if mibBuilder.loadTexts: tcpAckDelay.setDescription('A Control to prevent sending a TCP ACK when we we change TCP window size.')
tcpRetransmitMin = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 3000)).clone(640)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpRetransmitMin.setStatus('mandatory')
if mibBuilder.loadTexts: tcpRetransmitMin.setDescription('Number of milliseconds for the initial TCP Retransmit timer. This is the time at which a TCP session will initially retransmit unacknowledged packets.')
snmpAgentGetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentGetCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentGetCommunity.setDescription("The SNMP community name allowed to perform get-requests or get-next requests to this agent. Use of this value is case-insensitive. If the size is 0, the agent does not check the community name for these operations. Corresponds directly to SERVER INTERNET SNMP GET COMMUNITY and the value labeled 'Get Community:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
snmpAgentSetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentSetCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentSetCommunity.setDescription("The SNMP community name allowed to perform set-requests to this agent. Use of this value is case-insensitive. If the size is 0, the agent does not check the community name for these operations. Corresponds directly to SERVER INTERNET SNMP SET COMMUNITY and the value labeled 'Set Community:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
snmpAgentTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentTrapCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapCommunity.setDescription("The SNMP community name sent in traps from this agent. Use of this value preserves case. Corresponds directly to SERVER INTERNET SNMP TRAP COMMUNITY and the value labeled 'Trap Community:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
snmpAgentGetClientNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentGetClientNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentGetClientNumber.setDescription("The number of client source addresses allowed to perform get-requests or get-next requests to this agent. If the value is 0, the agent does not check source address for these operations. Corresponds indirectly to the values labeled 'Get Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
snmpAgentSetClientNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentSetClientNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentSetClientNumber.setDescription("The number of client source addresses allowed to perform set-requests to this agent. If the value is 0, the agent does not check source address for these operations. Corresponds indirectly to the values labeled 'Set Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
snmpAgentTrapClientNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientNumber.setDescription("The number of client source addresses to which this agent sends traps. If the value is 0, the agent does not perform this operation. Corresponds indirectly to the values labeled 'Trap Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
getClientTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 3, 7), )
if mibBuilder.loadTexts: getClientTable.setStatus('mandatory')
if mibBuilder.loadTexts: getClientTable.setDescription('A list of get client entries. The number of entries is given by the value of snmpAgentGetClientNumber.')
getClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1), ).setIndexNames((0, "MRVINREACH", "getClientIndex"))
if mibBuilder.loadTexts: getClientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: getClientEntry.setDescription('Parameter values for a get client.')
getClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: getClientIndex.setStatus('mandatory')
if mibBuilder.loadTexts: getClientIndex.setDescription("Identification of a get client entry. Corresponds directly to the number in the label 'Get Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
getClientEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: getClientEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: getClientEntryStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table.")
getClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1, 3), AddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: getClientAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: getClientAddressType.setDescription("The type of network address contained in getClientAddress. 'unknown' means no address has been defined. 'other' means no other type value applies. 'ip' is an Internet IP address. 'ethernet' is an 802.3 MAC address. If getClientAddressType does not accompany getClientAddress in a set request, the default type is 'ip'. Corresponds indirectly to the address value labeled 'Get Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
getClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 7, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: getClientAddress.setStatus('mandatory')
if mibBuilder.loadTexts: getClientAddress.setDescription("The client's network address. If getClientAddressType does not accompany getClientAddress in a set request, the default type is 'ip'. Corresponds directly to the address value labeled 'Get Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
setClientTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 3, 8), )
if mibBuilder.loadTexts: setClientTable.setStatus('mandatory')
if mibBuilder.loadTexts: setClientTable.setDescription('A list of set client entries. The number of entries is given by the value of snmpAgentSetClientNumber.')
setClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1), ).setIndexNames((0, "MRVINREACH", "setClientIndex"))
if mibBuilder.loadTexts: setClientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: setClientEntry.setDescription('Parameter values for a set client.')
setClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setClientIndex.setStatus('mandatory')
if mibBuilder.loadTexts: setClientIndex.setDescription("Identification of a set client entry. Corresponds directly to the number in the label 'Set Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
setClientEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setClientEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: setClientEntryStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table.")
setClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1, 3), AddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setClientAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: setClientAddressType.setDescription("The type of network address contained in setClientAddress. 'unknown' means no address has been defined. 'other' means no other type value applies. 'ip' is an Internet IP address. 'ethernet' is an 802.3 MAC address. If setClientAddressType does not accompany setClientAddress in a set request, the default type is 'ip'. Corresponds indirectly to the address value labeled 'Set Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
setClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 8, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setClientAddress.setStatus('mandatory')
if mibBuilder.loadTexts: setClientAddress.setDescription("The client's network address. When setting this value, the requester must supply setClientAddressType. If setClientAddressType does not accompany setClientAddress in a set request, the default type is 'ip'. Corresponds directly to the address value labeled 'Set Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
trapClientTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 3, 9), )
if mibBuilder.loadTexts: trapClientTable.setStatus('mandatory')
if mibBuilder.loadTexts: trapClientTable.setDescription('A list of trap client entries. The number of entries is given by the value of snmpAgentTrapClientNumber.')
trapClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1), ).setIndexNames((0, "MRVINREACH", "trapClientIndex"))
if mibBuilder.loadTexts: trapClientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trapClientEntry.setDescription('Parameter values for a trap client.')
trapClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapClientIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trapClientIndex.setDescription("Identification of a trap client entry. Corresponds directly to the number in the label 'Trap Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
trapClientEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapClientEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trapClientEntryStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table.")
trapClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1, 3), AddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapClientAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: trapClientAddressType.setDescription("The type of network address contained in trapClientAddress. 'unknown' means no address has been defined. 'other' means no other type value applies. 'ip' is an Internet IP address. 'ethernet' is an 802.3 MAC address. If trapClientAddressType does not accompany trapClientAddress in a set request, the default type is 'ip'. Corresponds indirectly to the address value labeled 'Trap Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
trapClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 3, 9, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapClientAddress.setStatus('mandatory')
if mibBuilder.loadTexts: trapClientAddress.setDescription("The client's network address. When setting this value, the requester must supply trapClientAddressType. If trapClientAddressType does not accompany trapClientAddress in a set request, the default type is 'ip'. Corresponds directly to the address value labeled 'Trap Client n:' in the SERVER INTERNET SNMP CHARACTERISTICS display.")
snmpAgentAuthFailureAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 10), TypedAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentAuthFailureAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentAuthFailureAddress.setDescription('The address of the client to most recently fail SNMP authorization.')
snmpAgentCommunityAuthenticationAlways = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentCommunityAuthenticationAlways.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentCommunityAuthenticationAlways.setDescription('When enabled, indicates that community string authentication is done always for Gets, Sets, and GetNexts. When disabled, community string authentication is done once; but bypassed on subsequent Gets, Sets or GetNexts from the same address.')
snmpAgentTrapClientPingHost1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost1.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost1.setDescription('Configures the first trap client in the trapClientTable as a ping host. The InReach server will poll the ping host at a specified interval to determine connectivity. This feature is mutually exclusive with snmpAgentTrapClientQuerySourceHost1 and snmpAgentTrapClientQuerySourceHost2.')
snmpAgentTrapClientPingHost2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost2.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost2.setDescription('Configures the second trap client in the trapClientTable as a ping host. The InReach server will poll the ping host at a specified interval to determine connectivity. This feature is mutually exclusive with snmpAgentTrapClientQuerySourceHost1 and snmpAgentTrapClientQuerySourceHost2.')
snmpAgentTrapClientPingHost1PollInterval = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost1PollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost1PollInterval.setDescription('Indicates the time in seconds between polling the first ping host.')
snmpAgentTrapClientPingHost2PollInterval = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost2PollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost2PollInterval.setDescription('Indicates the time in seconds between polling the second ping host.')
snmpAgentTrapClientPingHost1PollRetries = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost1PollRetries.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost1PollRetries.setDescription('Indicates the maximum number of retries when polling the first ping host before concluding that connectivity is lost. When network connectivity is lost, PPP dial backup procedures to a backup host are initiated.')
snmpAgentTrapClientPingHost2PollRetries = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost2PollRetries.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientPingHost2PollRetries.setDescription('Indicates the maximum number of retries when polling the second ping host before concluding that connectivity is lost. When network connectivity is lost, PPP dial backup procedures to a backup host are initiated.')
snmpAgentTrapClientQuerySourceHost1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientQuerySourceHost1.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientQuerySourceHost1.setDescription('Configures the first trap client in the trapClientTable as a query source host. When enabled the InReach server will monitor incoming get-, get-next- and set-requests from this host as an indicator of connectivity. This feature is mutually exclusive with snmpAgentTrapClientPingHost1 and snmpAgentTrapClientPingHost2.')
snmpAgentTrapClientQuerySourceHost2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientQuerySourceHost2.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientQuerySourceHost2.setDescription('Configures the second trap client in the trapClientTable as a query source host. When enabled the InReach server will monitor incoming get-, get-next- and set-requests from this host as an indicator of connectivity. This feature is mutually exclusive with snmpAgentTrapClientPingHost1 and snmpAgentTrapClientPingHost2.')
snmpAgentTrapClientQuerySourceHost1Timeout = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientQuerySourceHost1Timeout.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientQuerySourceHost1Timeout.setDescription('Indicates the time in seconds between SNMP queries from the first query source host before timing out and considering connectivity lost to that host. When network connectivity is lost, PPP dial backup procedures to a backup host are initiated.')
snmpAgentTrapClientQuerySourceHost2Timeout = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 3, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapClientQuerySourceHost2Timeout.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAgentTrapClientQuerySourceHost2Timeout.setDescription('Indicates the time in seconds between SNMP queries from the first query source host before timing out and considering connectivity lost to that host. When network connectivity is lost, PPP dial backup procedures to a backup host are initiated.')
domainResolverSuffix = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 115))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverSuffix.setStatus('mandatory')
if mibBuilder.loadTexts: domainResolverSuffix.setDescription("A partial domain name for the server to append to the end of an incomplete domain name provided by the user. Corresponds directly to SERVER INTERNET DEFAULT DOMAIN SUFFIX and the value labeled 'Domain Suffix:' in the SERVER INTERNET CHARACTERISTICS display.")
domainResolverAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: domainResolverAddress1.setDescription("The internet address of a Domain Name Server. The system can use one or two such addresses, without preference. A value of 0.0.0.0 indicates no address. Corresponds directly to SERVER INTERNET PRIMARY DOMAIN ADDRESS and the value labeled 'Primary Domain Address:' in the SERVER INTERNET CHARACTERISTICS display.")
domainResolverAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverAddress2.setStatus('mandatory')
if mibBuilder.loadTexts: domainResolverAddress2.setDescription("The internet address of a Domain Name Server. The system can use one or two such addresses, without preference. A value of 0.0.0.0 indicates no address. Corresponds directly to SERVER INTERNET SECONDARY DOMAIN ADDRESS and the value labeled 'Secondary Domain Address:' in the SERVER INTERNET CHARACTERISTICS display.")
domainResolverTtl = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 168))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverTtl.setStatus('mandatory')
if mibBuilder.loadTexts: domainResolverTtl.setDescription("The number of hours to keep received Domain information. Corresponds directly to SERVER INTERNET DOMAIN TTL and the value labeled ' Domain TTL:' in the SERVER INTERNET CHARACTERISTICS display.")
domainResolverNameNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainResolverNameNumber.setStatus('mandatory')
if mibBuilder.loadTexts: domainResolverNameNumber.setDescription("The number of Domain name mappings in this system's name cache.")
nameTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 4, 6), )
if mibBuilder.loadTexts: nameTable.setStatus('mandatory')
if mibBuilder.loadTexts: nameTable.setDescription('A list of Domain name entries. The number of entries is given by the value of domainResolverNameNumber.')
nameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1), ).setIndexNames((0, "MRVINREACH", "nameName"), (0, "MRVINREACH", "nameAddress"))
if mibBuilder.loadTexts: nameEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nameEntry.setDescription('Parameter values for a Domain name.')
nameName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameName.setStatus('mandatory')
if mibBuilder.loadTexts: nameName.setDescription("A fully qualified domain name. Corresponds directly to the value labeled 'Domain Name' in the DOMAIN display.")
nameAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nameAddress.setDescription("An Internet address corresponding to the Domain name. Corresponds directly to the value labeled 'Internet Address' in the DOMAIN display.")
nameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nameStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry, which corresponds directly to the PURGE DOMAIN command. Actual removal of the entry is implementation specific.")
nameSource = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("manager", 1), ("primary", 2), ("secondary", 3), ("rwho", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameSource.setStatus('mandatory')
if mibBuilder.loadTexts: nameSource.setDescription("Source of this entry. The value meanings are: local defined by manager (LOCAL) primary obtained from a primary name server secondary obtained from a secondary name server rwho obtained from rwho Corresponds directly to the value labeled 'Source' in the DOMAIN display.")
nameTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameTtl.setStatus('mandatory')
if mibBuilder.loadTexts: nameTtl.setDescription("The number of minutes remaining in the entry's time to live. Corresponds directly to the value labeled 'TTL' in the DOMAIN display.")
domainResolverPpp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 4, 7))
domainResolverPppPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 7, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverPppPrimaryServer.setStatus('mandatory')
if mibBuilder.loadTexts: domainResolverPppPrimaryServer.setDescription("The internet address of the primary Domain Name Server to use in PPP IPCP negotiations. A value of 0.0.0.0 indicates no address. Corresponds directly to the value labeled 'Primary WINS Address:' in the SERVER INTERNET CHARACTERISTICS display.")
domainResolverPppSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 4, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainResolverPppSecondaryServer.setStatus('mandatory')
if mibBuilder.loadTexts: domainResolverPppSecondaryServer.setDescription("The internet address of the secondary Domain Name Server to use in PPP IPCP negotiations. A value of 0.0.0.0 indicates no address. Corresponds directly to the value labeled 'Secondary WINS Address:' in the SERVER INTERNET CHARACTERISTICS display.")
slipTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 5, 1), )
if mibBuilder.loadTexts: slipTable.setStatus('mandatory')
if mibBuilder.loadTexts: slipTable.setDescription('A list of SLIP character port entries.')
slipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1), ).setIndexNames((0, "MRVINREACH", "slipIndex"))
if mibBuilder.loadTexts: slipEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slipEntry.setDescription('Parameter values for a SLIP port.')
slipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slipIndex.setDescription('An index value that uniquely identifies a port that can run SLIP. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
slipState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("compressed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipState.setStatus('mandatory')
if mibBuilder.loadTexts: slipState.setDescription("A control indicating whether SLIP is in operation on the port. Corresponds directly to PORT INTERNET SLIP and the value labeled 'SLIP' in the PORT CHARACTERISTICS display.")
slipLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: slipLocalAddress.setDescription("The IP address assigned to the port. Corresponds directly to PORT SLIP ADDRESS and the value labeled 'SLIP Address:' in the PORT ALTERNATE CHARACTERISTICS display.")
slipRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: slipRemoteAddress.setDescription("The IP address of the remote system attached to the port. Corresponds directly to PORT SLIP REMOTE and the value labeled 'Remote SLIP Address:' in the PORT ALTERNATE CHARACTERISTICS display.")
slipMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slipMask.setStatus('mandatory')
if mibBuilder.loadTexts: slipMask.setDescription("The subnet mask to use for SLIP operation on the port. Corresponds directly to PORT SLIP MASK and the value labeled 'SLIP Mask:' in the PORT ALTERNATE CHARACTERISTICS display.")
slipPortPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: slipPortPacketsReceived.setDescription("The number of SLIP packets received from the port. Corresponds directly to the value labeled 'Serial Packets Received:' in the PORT COUNTERS display.")
slipPortPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketsSent.setStatus('mandatory')
if mibBuilder.loadTexts: slipPortPacketsSent.setDescription("The number of SLIP packets sent to the port. Corresponds directly to the value labeled 'Serial Packets Sent:' in the PORT COUNTERS display.")
slipPortPacketsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: slipPortPacketsDiscarded.setDescription("The number of SLIP packets received from the port and discarded. Corresponds directly to the value labeled 'Serial Packets Discarded:' in the PORT COUNTERS display.")
slipPortPacketLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketLengthErrors.setStatus('mandatory')
if mibBuilder.loadTexts: slipPortPacketLengthErrors.setDescription("The number of SLIP packets received from the port with an incorrect number of bytes. Corresponds directly to the value labeled 'Serial Packet Length Errors:' in the PORT COUNTERS display.")
slipPortPacketChecksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipPortPacketChecksumErrors.setStatus('mandatory')
if mibBuilder.loadTexts: slipPortPacketChecksumErrors.setDescription("The number of SLIP packets received from the port with an invalid checksum. Corresponds directly to the value labeled 'Serial Packet Checksum Errors:' in the PORT COUNTERS display.")
slipNetworkPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipNetworkPacketsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: slipNetworkPacketsReceived.setDescription("The number of SLIP packets received from the network for this port. Corresponds directly to the value labeled 'Network Packets Received:' in the PORT COUNTERS display.")
slipNetworkPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipNetworkPacketsSent.setStatus('mandatory')
if mibBuilder.loadTexts: slipNetworkPacketsSent.setDescription("The number of SLIP packets sent to the network from this port. Corresponds directly to the value labeled 'Network Packets Sent:' in the PORT COUNTERS display.")
slipNetworkPacketsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slipNetworkPacketsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: slipNetworkPacketsDiscarded.setDescription("The number of SLIP packets received from the network for this port and discarded. Corresponds directly to the value labeled 'Network Packets Discarded:' in the PORT COUNTERS display.")
telnetPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 6, 1), )
if mibBuilder.loadTexts: telnetPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortTable.setDescription('A list of Telnet character port entries.')
telnetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1), ).setIndexNames((0, "MRVINREACH", "telnetPortIndex"))
if mibBuilder.loadTexts: telnetPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortEntry.setDescription('Telnet parameter values for a character port.')
telnetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
telnetPortIncomingTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortIncomingTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortIncomingTcpPort.setDescription("The TCP port number offered for incoming connections to this character port. Corresponds directly to PORT TELNET REMOTE PORT and the value labeled 'Remote Port:' in the PORT TELNET CHARACTERISTICS display.")
telnetPortOutgoingTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortOutgoingTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortOutgoingTcpPort.setDescription("The TCP port number used by default for outgoing connections from this character port. Corresponds directly to PORT TELNET DEFAULT PORT and the value labeled 'Default Port:' in the PORT TELNET CHARACTERISTICS display.")
telnetPortNewlineTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("cr", 2), ("crNull", 3), ("crLf", 4), ("std", 5), ("lfToCrLf", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortNewlineTranslation.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortNewlineTranslation.setDescription("Translation to apply to newline sequences (CR/NULL or CR/LF) received from the network, before sending the newline to the character port. The value indicates the sequence sent to the character port, with 'none' meaning no translation. The lfToCrLf value converts the newline character LF received from the network to a CR/LF. Corresponds directly to PORT TELNET NEWLINE FILTERING and the value labeled 'Newline Filtering:' in the PORT TELNET CHARACTERISTICS display.")
telnetPortTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortTerminalType.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortTerminalType.setDescription("The terminal type character string for Telnet negotiations. Corresponds directly to PORT TELNET TERMINALTYPE and the value labeled 'TerminalType:' in the PORT TELNET CHARACTERISTICS display.")
telnetPortEorReflection = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortEorReflection.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortEorReflection.setDescription("Control for end-of-record handshake. Corresponds directly to PORT TELNET EOR REFLECTION and the value labeled 'EOR Reflection:' in the PORT TELNET CHARACTERISTICS display.")
telnetPortBinaryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flowControl", 1), ("complete", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortBinaryMode.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortBinaryMode.setDescription("Control for operation of Telnet binary mode. The value meanings are: disabled refuse binary mode negotiation (INTERACTIVE) flowControl pass all but XON and XOFF (PASTHRU) complete pass all characters (PASSALL) Corresponds directly to PORT TELNET BINARY SESSION MODE and the value labeled 'Binary Session Mode:' in the PORT TELNET CHARACTERISTICS display.")
telnetPortSendLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortSendLocation.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortSendLocation.setDescription("A control indicating whether a Telnet session will initiate negotiation of the Send Location option. Corresponds directly to the PORT TELNET LOCATION and the value labeled 'Location' in the PORT TELNET CHARACTERISTICS display.")
telnetPortClientLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetPortClientLocation.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortClientLocation.setDescription("The location of the Telnet client port. Corresponds directly to the value labeled 'Telnet Client Location' in the SESSION display.")
telnetPortPassiveSendLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortPassiveSendLocation.setStatus('mandatory')
if mibBuilder.loadTexts: telnetPortPassiveSendLocation.setDescription("A control indicating whether a Telnet session will passively respond to negotiation of the Send Location option. When disabled and telnetPortSendLocation is disabled, we will refuse to negotiate this option. When telnetPortSendLocation is enabled, it takes precedence. Corresponds directly to the value labeled 'Passive Location' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 6, 2), )
if mibBuilder.loadTexts: telnetSerialPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortTable.setDescription('A list of Telnet character port entries.')
telnetSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1), ).setIndexNames((0, "MRVINREACH", "telnetSerialPortIndex"))
if mibBuilder.loadTexts: telnetSerialPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortEntry.setDescription('Telnet parameter values for a character port.')
telnetSerialPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telnetSerialPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
telnetSerialPortOptionDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortOptionDisplay.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortOptionDisplay.setDescription("Control for display of Telnet option negotiations. Corresponds directly to PORT TELNET OPTION DISPLAY and the value labeled 'Option Display:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortCsiEscape = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortCsiEscape.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortCsiEscape.setDescription("Control for translation of 8-bit escape sequences received from the character port to 7-bit equivalents before transmission to the remote partner. Corresponds directly to PORT TELNET CSI ESCAPE and the value labeled 'CSI Escape:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortEchoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("disabled", 3), ("passive", 4), ("character", 5), ("line", 6), ("noecho", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortEchoMode.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortEchoMode.setDescription("Control for who echoes characters that come from the character port. The value meanings are: local terminal server echoes locally remote remote system echoes disabled don't default to local echo passive don't initiate negotiating of echo character initiate remote echo and suppress go ahead line reject remote echo and reject suppress go ahead noecho will not initiate echo, but will negotiate it Corresponds directly to PORT TELNET ECHO MODE and the value labeled 'Echo Mode:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortNewlineMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crNull", 1), ("crLf", 2), ("verbatim", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortNewlineMode.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortNewlineMode.setDescription("Translation to apply to newline (carriage return) received from the character port, before sending the newline to the remote partner. The correspondence to command keywords is 'crNull' to NULL, 'crLF' to LINEFEED, and 'verbatim' to NOTHING (that is, no translation). Corresponds directly to PORT TELNET NEWLINE and the value labeled 'Newline:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortTransmitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediate", 1), ("buffered", 2), ("timed", 3), ("controlchar", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortTransmitMode.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortTransmitMode.setDescription("Criterion for deciding to send to the remote partner characters received from the character port. Corresponds directly to PORT TELNET TRANSMIT and the value labeled 'Transmit:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortTransmitCharacterTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortTransmitCharacterTimes.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortTransmitCharacterTimes.setDescription("Number of character times to wait before transmitting when telnetSerialPortTransmitMode value is 'timed'. Corresponds directly to PORT TELNET TRANSMIT IDLETIME and the value labeled 'Transmit: Idle Time -' in the PORT TELNET CHARACTERISTICS display. This object may only be set to values 1..255. A value of 0 may be read if telnetSerialPortTransmitMode has a value of immediate or buffered")
telnetSerialPortAbortOutputCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortAbortOutputCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortAbortOutputCharacter.setDescription("Character input from the character port to cause aborting output. The value 0 indicates no character has this effect. Corresponds directly to PORT TELNET ABORT OUTPUT and the value labeled 'Abort Output Character:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortAttentionCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortAttentionCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortAttentionCharacter.setDescription("Character input from the character port to cause an attention notification to the remote partner. The value 0 indicates no character has this effect. Corresponds directly to PORT TELNET ATTENTION and the value labeled 'Attention Character:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortEraseKeyCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortEraseKeyCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortEraseKeyCharacter.setDescription("Character input from the character port to cause erasure of the previous input character. The value 0 indicates no character has this effect. Corresponds directly to PORT TELNET ERASE CHARACTER and the value labeled 'Erase Keystroke Character:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortEraseLineCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortEraseLineCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortEraseLineCharacter.setDescription("Character input from the character port to cause erasure of the previous line of input. The value 0 indicates no character has this effect. Corresponds directly to PORT TELNET ERASE LINE and the value labeled 'Erase Line Character:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortInterruptCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortInterruptCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortInterruptCharacter.setDescription("Character input from the character port to cause sending an interrupt notification to the remote partner. The value 0 indicates no character has this effect. Corresponds directly to PORT TELNET INTERRUPT and the value labeled 'Interrupt Character:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortQueryCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortQueryCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortQueryCharacter.setDescription("Character input from the character port to cause sending a status query to the remote partner. The value 0 indicates no character has this effect. Corresponds directly to PORT TELNET QUERY and the value labeled 'Query Character:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortSynchronizeCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortSynchronizeCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortSynchronizeCharacter.setDescription("Character input from the character port to cause sending a synchronization attempt to the remote partner. The value 0 indicates no character has this effect. Corresponds directly to PORT TELNET SYNCHRONIZE and the value labeled 'Synchronize Character:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortUrgentBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortUrgentBreak.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortUrgentBreak.setDescription("Control for encoding breaks as Telnet urgent data. Corresponds directly to PORT TELNET URGENT BREAK and the value labeled 'Urgent Break:' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortRs491 = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortRs491.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortRs491.setDescription('A control to enable RS491 protocol processing on a port.')
telnetSerialPortTransmitBufferedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1500)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortTransmitBufferedTime.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortTransmitBufferedTime.setDescription("Number of milliseconds to wait before transmitting when telnetSerialPortTransmitMode value is 'timed'. Corresponds directly to PORT TELNET TRANSMIT BUFFERED and the value labeled 'Transmit: Buff Time -' in the PORT TELNET CHARACTERISTICS display. This object may only be set to values 30..1500. A value of 0 may be read if telnetSerialPortTransmitMode has a value of immediate, idletime or controlchar")
telnetSerialPortInterpretInterruptAsBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortInterpretInterruptAsBreak.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortInterpretInterruptAsBreak.setDescription("Control to interpret a Telnet Interrupt Character coming from the network as a Telnet Break Character, and to send a break out the serial port. This control is necessary for those devices which can send Telnet Interrupt but not Telnet Break. Corresponds directly to the presence of 'Telnet Interrupts Interpreted as Break' under the label 'Enabled Characteristics' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortPass8d = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortPass8d.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortPass8d.setDescription("Control to pass unaltered the hexadecimal character '8D'. This control is added to ensure that this character will pass through directly in a session with 8-bit characters and parity odd or even. Corresponds directly to the presence of 'Telnet Pass 8D' under the label 'Enabled Characteristics' in the PORT TELNET CHARACTERISTICS display.")
telnetSerialPortComControlClient = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortComControlClient.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortComControlClient.setDescription("Control to begin Telnet comport control option negotiations as a client when a Telnet session is initiated. The comport control option enables a port to do outbound modem dialing on a Telnet connection. Corresponds to the value labeled 'Client:' in the PORT TELNET COMPORTCONTROL CHARACTERISTICS display.")
telnetSerialPortComControlServer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortComControlServer.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortComControlServer.setDescription("Control to begin Telnet comport control option negotiations as a server when a Telnet session is initiated. Corresponds to the value labeled 'Server:' in the PORT TELNET COMPORTCONTROL CHARACTERISTICS display.")
telnetSerialPortComControlServerRaisesDtr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortComControlServerRaisesDtr.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortComControlServerRaisesDtr.setDescription("Control for the client to request that the server raises its DTR signal on the port at the begining of the Telnet connection. Corresponds to the value labeled 'Server Raises DTR:' in the PORT TELNET COMPORTCONTROL CHARACTERISTICS display.")
telnetSerialPortComControlClientTogglesDtr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 6, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetSerialPortComControlClientTogglesDtr.setStatus('mandatory')
if mibBuilder.loadTexts: telnetSerialPortComControlClientTogglesDtr.setDescription("Control to respond to the server's notification that its DCD has come high (or low) by raising (or lowering) DTR accordingly on the local port. Corresponds to the value labeled 'Client Toggles DTR:' in the PORT TELNET COMPORTCONTROL CHARACTERISTICS display.")
tn3270DeviceNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270DeviceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270DeviceNumber.setDescription('The number of entries in the tn3270 Device table.')
tn3270LanguageNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270LanguageNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270LanguageNumber.setDescription('The number of entries in the tn3270 Language table.')
tn3270PortKeymapStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortKeymapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortKeymapStatus.setDescription("Control for individual ports to create their own keymaps. Corresponds directly to SERVER TN3270 PORT KEYMAPS and the value labeled 'Port Keymaps:' in the SERVER TN3270 display.")
tn3270DeviceTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 4), )
if mibBuilder.loadTexts: tn3270DeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270DeviceTable.setDescription('A list of tn3270 terminal device entries.')
tn3270DeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1), ).setIndexNames((0, "MRVINREACH", "tn3270DeviceName"))
if mibBuilder.loadTexts: tn3270DeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270DeviceEntry.setDescription('Tn3270 parameter values for a terminal device entry.')
tn3270DeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270DeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270DeviceName.setDescription("The name of a generic terminal device. Corresponds directly to SERVER TN3270 DEVICE and the value labeled 'Device Name:' in the SERVER TN3270 DEVICE display.")
tn3270DeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270DeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270DeviceStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry, corresponding directly to the PURGE SERVER TN3270 DEVICE command. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. If a new device table entry is added to the table, the agent will copy the VT100 table as a default. If one plans to add a new table entry, one should not remove the VT100 entry.")
tn3270DeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21)).clone('VT100')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270DeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270DeviceType.setDescription("The terminal type character string for use when tn3270DeviceTn3270Type is insufficient. Corresponds directly to SERVER TN3270 DEVICE TERMINALTYPE and the value labeled 'TerminalType:' in the SERVER TN3270 DEVICE display.")
tn3270Device3278Model = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("model2", 1), ("model5", 2))).clone('model2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270Device3278Model.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270Device3278Model.setDescription("The 3278 model for the device. Corresponds directly to SERVER TN3270 DEVICE 3278Model and the value labeled '3278Model:' in the SERVER TN3270 DEVICE display.")
tn3270DeviceKeyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 5), Integer32().clone(70)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270DeviceKeyNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270DeviceKeyNumber.setDescription('The number of Key table entries for this device.')
tn3270DeviceScreenNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 4, 1, 6), Integer32().clone(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270DeviceScreenNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270DeviceScreenNumber.setDescription('The number of Screen table entries for this device.')
tn3270KeyTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 5), )
if mibBuilder.loadTexts: tn3270KeyTable.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270KeyTable.setDescription('A list of tn3270 key entries by device.')
tn3270KeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1), ).setIndexNames((0, "MRVINREACH", "tn3270KeyDeviceName"), (0, "MRVINREACH", "tn3270KeyName"))
if mibBuilder.loadTexts: tn3270KeyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270KeyEntry.setDescription('Tn3270 parameter values for a key entry for a device.')
tn3270KeyDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270KeyDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270KeyDeviceName.setDescription("The name of a generic terminal device as in tn3270DeviceName. Corresponds directly to SERVER TN3270 DEVICE and the value labeled 'Device Name:' in the SERVER TN3270 DEVICE display.")
tn3270KeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70))).clone(namedValues=NamedValues(("newline", 1), ("tab", 2), ("backtab", 3), ("cursorup", 4), ("cursorleft", 5), ("cursorright", 6), ("cursordown", 7), ("home", 8), ("delete", 9), ("eraseeof", 10), ("eraseinput", 11), ("insert", 12), ("flushinput", 13), ("refresh", 14), ("centsign", 15), ("duplicate", 16), ("fieldmark", 17), ("scroll", 18), ("status", 19), ("reset", 20), ("fastleft", 21), ("fastright", 22), ("showkeys", 23), ("print", 24), ("pf1", 39), ("pf2", 40), ("pf3", 41), ("pf4", 42), ("pf5", 43), ("pf6", 44), ("pf7", 45), ("pf8", 46), ("pf9", 47), ("pf10", 48), ("pf11", 49), ("pf12", 50), ("pf13", 51), ("pf14", 52), ("pf15", 53), ("pf16", 54), ("pf17", 55), ("pf18", 56), ("pf19", 57), ("pf20", 58), ("pf21", 59), ("pf22", 60), ("pf23", 61), ("pf24", 62), ("pa1", 63), ("pa2", 64), ("pa3", 65), ("sysreq", 66), ("enter", 67), ("clear", 68), ("cursorsel", 69), ("test", 70)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270KeyName.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270KeyName.setDescription("The key name to which this entry applies. Corresponds directly to the key portion of SERVER TN3270 DEVICE KEYMAP and the value labeled '3270-key' in the 'Keymap:' section of the SERVER TN3270 DEVICE display.")
tn3270KeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270KeyStatus.setStatus('deprecated')
if mibBuilder.loadTexts: tn3270KeyStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table.")
tn3270KeyCharacterSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270KeyCharacterSequence.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270KeyCharacterSequence.setDescription("The ASCII character sequence for the key. Corresponds directly to the escape-sequence portion of SERVER TN3270 DEVICE KEYMAP and the value labeled 'KeyCode' in the 'Keymap:' section of the SERVER TN3270 DEVICE display.")
tn3270KeyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270KeyDescription.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270KeyDescription.setDescription("Descriptive text for the key. Corresponds directly to the description portion of SERVER TN3270 DEVICE KEYMAP and the value labeled 'Description' in the SERVER TN3270 DEVICE display.")
tn3270ScreenTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 6), )
if mibBuilder.loadTexts: tn3270ScreenTable.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270ScreenTable.setDescription('A list of tn3270 screen action entries by device.')
tn3270ScreenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1), ).setIndexNames((0, "MRVINREACH", "tn3270ScreenDeviceName"), (0, "MRVINREACH", "tn3270ScreenActionName"))
if mibBuilder.loadTexts: tn3270ScreenEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270ScreenEntry.setDescription('Tn3270 parameter values for a screen action entry for a device.')
tn3270ScreenDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270ScreenDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270ScreenDeviceName.setDescription("The name of a generic terminal device as in tn3270DeviceName. Corresponds directly to SERVER TN3270 DEVICE and the value labeled 'Device Name:' in the SERVER TN3270 DEVICE display.")
tn3270ScreenActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("eraseeol", 1), ("clearscr", 2), ("movecursor", 3), ("col132", 4), ("col80", 5), ("beep", 6), ("charset", 7), ("boldon", 8), ("boldoff", 9), ("blinkon", 10), ("blinkoff", 11), ("underscoreon", 12), ("underscoreoff", 13), ("reverseon", 14), ("reverseoff", 15), ("colorBlue", 16), ("colorRed", 17), ("colorPink", 18), ("colorGreen", 19), ("colorTurquoise", 20), ("colorYellow", 21), ("colorWhite", 22), ("status1", 26), ("status2", 27), ("reset1", 28), ("reset2", 29), ("reset3", 30), ("reset4", 31), ("base", 32), ("sgr", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270ScreenActionName.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270ScreenActionName.setDescription("The screen action to which this entry applies. Corresponds directly to the action portion of SERVER TN3270 DEVICE SCREENMAP and the value labeled 'Terminal Function' in the 'Screenmap: section of the SERVER TN3270 DEVICE display.")
tn3270ScreenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270ScreenStatus.setStatus('deprecated')
if mibBuilder.loadTexts: tn3270ScreenStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table.")
tn3270ScreenCharacterSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270ScreenCharacterSequence.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270ScreenCharacterSequence.setDescription("The ASCII character sequence for the screen action. Some actions may have a lesser length limit. Corresponds directly to the escape-sequence portion of SERVER TN3270 DEVICE SCREENMAP and the value labeled 'HexCode' in the 'Screenmap: section of the SERVER TN3270 DEVICE display.")
tn3270LanguageTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 7), )
if mibBuilder.loadTexts: tn3270LanguageTable.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270LanguageTable.setDescription('A list of tn3270 language entries.')
tn3270LanguageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 7, 1), ).setIndexNames((0, "MRVINREACH", "tn3270LanguageName"))
if mibBuilder.loadTexts: tn3270LanguageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270LanguageEntry.setDescription('Tn3270 parameter values for a language entry.')
tn3270LanguageName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270LanguageName.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270LanguageName.setDescription("The name of language for character translation tables. Corresponds directly to SERVER TN3270 LANGUAGE and the value labeled 'Language Name:' in the SERVER LANGUAGE display.")
tn3270LanguageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270LanguageStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270LanguageStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. If a new device table entry is added to the table, the agent will copy the USENGLSH table as the default.")
eToALanguageTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 8), )
if mibBuilder.loadTexts: eToALanguageTable.setStatus('mandatory')
if mibBuilder.loadTexts: eToALanguageTable.setDescription('A list of language EBCDIC to ASCII conversion entries.')
eToALanguageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 8, 1), ).setIndexNames((0, "MRVINREACH", "eToALanguageName"), (0, "MRVINREACH", "eToAOffset"))
if mibBuilder.loadTexts: eToALanguageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: eToALanguageEntry.setDescription('EBCDIC to ASCII parameter values for a language entry.')
eToALanguageName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eToALanguageName.setStatus('mandatory')
if mibBuilder.loadTexts: eToALanguageName.setDescription('The name of language from the language table.')
eToAOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(65, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eToAOffset.setStatus('mandatory')
if mibBuilder.loadTexts: eToAOffset.setDescription("EBCDIC character offset plus one, that is, the value 1 corresponds to an operational offset of 0. Corresponds directly to the offset portion of SERVER TN3270 LANGUAGE and the hexadecimal labels around the conversion table labeled 'EBCDIC to ASCII' in the SERVER LANGUAGE display.")
eToAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eToAValue.setStatus('mandatory')
if mibBuilder.loadTexts: eToAValue.setDescription("ASCII character value for the EBCDIC offset. Corresponds directly to the value portion of SERVER TN3270 LANGUAGE and the values in the conversion table labeled 'EBCDIC to ASCII' in the SERVER LANGUAGE display.")
aToELanguageTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 9), )
if mibBuilder.loadTexts: aToELanguageTable.setStatus('mandatory')
if mibBuilder.loadTexts: aToELanguageTable.setDescription('A list of language ASCII to EBCDIC conversion entries.')
aToELanguageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 9, 1), ).setIndexNames((0, "MRVINREACH", "aToELanguageName"), (0, "MRVINREACH", "aToEOffset"))
if mibBuilder.loadTexts: aToELanguageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aToELanguageEntry.setDescription('ASCII to EBCDIC parameter values for a language entry.')
aToELanguageName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aToELanguageName.setStatus('mandatory')
if mibBuilder.loadTexts: aToELanguageName.setDescription('The name of language from the language table.')
aToEOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(33, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aToEOffset.setStatus('mandatory')
if mibBuilder.loadTexts: aToEOffset.setDescription("ASCII character offset plus one, that is, the value 1 corresponds to an operational offset of 0. Corresponds directly to the offset portion of SERVER TN3270 LANGUAGE and the hexadecimal labels around the conversion table labeled 'ASCII to EBCDIC' in the SERVER LANGUAGE display.")
aToEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aToEValue.setStatus('mandatory')
if mibBuilder.loadTexts: aToEValue.setDescription("EBCDIC character value for the ASCII offset. Corresponds directly to the value portion of SERVER TN3270 LANGUAGE and the values in the conversion table labeled 'ASCII to EBCDIC' in the SERVER LANGUAGE display.")
tn3270PortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 7, 10), )
if mibBuilder.loadTexts: tn3270PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortTable.setDescription('A list of tn3270 character port entries.')
tn3270PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1), ).setIndexNames((0, "MRVINREACH", "tn3270PortIndex"))
if mibBuilder.loadTexts: tn3270PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortEntry.setDescription('Parameter values for a tn3270 port.')
tn3270PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270PortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
tn3270PortDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortDeviceName.setDescription("The name of a generic terminal device from the tn3270 device table. Corresponds directly to PORT TELNET TN3270 DEVICE and the value labeled 'Tn3270 Device:' in the PORT TELNET display.")
tn3270PortLanguageName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortLanguageName.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortLanguageName.setDescription("The name of language from the tn3270 language table. Corresponds directly to PORT TELNET TN3270 LANGUAGE and the value labeled 'Tn3270 Language:' in the PORT TELNET display.")
tn3270PortExtendedAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortExtendedAttributes.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortExtendedAttributes.setDescription("A control indicating that certain 3270 extended attributes are supported on the port. Corresponds directly to PORT TELNET TN3270 XTDATTRS and the label 'Tn3270 XtdAttrs' following the label 'Enabled Characteristics' in the PORT TELNET display.")
tn3270PortEorNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortEorNegotiation.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortEorNegotiation.setDescription("A control for negotiation of the Telnet EOR option when establishing a tn3270 session on the port. Corresponds directly to PORT TELNET TN3270 EOR and the label 'Tn3270 EOR' following the label 'Enabled Characteristics' in the PORT TELNET display.")
tn3270PortErrorLock = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortErrorLock.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortErrorLock.setDescription("A control for requiring use the RESET key when the host reports an error during a tn3270 session on the port. Corresponds directly to PORT TELNET TN3270 ERRORLOCK and the label 'Tn3270 ErrorLock' following the label 'Enabled Characteristics' in the PORT TELNET display.")
tn3270PortPrinterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortPrinterPort.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortPrinterPort.setDescription("The port number of the tn3270 printer. Corresponds directly to PORT TELNET TN3270 PRINTER and the value labeled 'Tn3270 Printer:' in the PORT TELNET display.")
tn3270PortOutgoingTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortOutgoingTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortOutgoingTcpPort.setDescription("The TCP port which is used for a TN3270 session when connecting to a remote host from this serial port. Corresponds directly to the value labeled 'Tn3270 Default Port:' in the PORT TELNET CHARACTERISTICS display.")
tn3270PortSpaceInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortSpaceInsert.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortSpaceInsert.setDescription("Control to allow insert mode within a space filled field, and write characters over EBCDIC spaces. Corresponds directly to the presence of 'Tn3270 Space_Insert' under the label 'Enabled Characteristics' in the PORT TELNET CHARACTERISTICS display.")
tn3270PortTypeAhead = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortTypeAhead.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortTypeAhead.setDescription("Control to permit typing ahead in a tn3270 session prior to receiving a response from the host for the previous command entered. Corresponds directly to the presence of 'Tn3270 TypeAhead' under the label 'Enabled Characteristics' in the PORT TELNET CHARACTERISTICS display.")
tn3270PrefixKeyMap = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PrefixKeyMap.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PrefixKeyMap.setDescription("Control to prepend a prefix function to another function key. When the operator hits the key the prepended function(s) and then the main function for the key are transmitted to the host. Corresponds directly to the presence of 'Tn3270 PrefixKeyMap' under the label 'Enabled Characteristics' in the PORT TELNET CHARACTERISTICS display.")
tn3270PortScanner = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 7, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270PortScanner.setStatus('mandatory')
if mibBuilder.loadTexts: tn3270PortScanner.setDescription("Indicates that this is a tn3270 scanner port. Corresponds directly to the presence of 'Tn3270 SCANNER' under the label 'Enabled Characteristics' in the PORT TELNET CHARACTERISTICS display.")
kerbStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("login", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbStatus.setStatus('mandatory')
if mibBuilder.loadTexts: kerbStatus.setDescription("A control indicating the level of Kerberos operation on the system. Corresponds directly to SERVER KERBEROS STATUS and the value labeled 'Kerberos Security:' in the SERVER KERBEROS display.")
kerbRealm = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbRealm.setStatus('mandatory')
if mibBuilder.loadTexts: kerbRealm.setDescription("The Kerberos realm with which the kerbServerName1 and kerbServerName2 are associated. Corresponds directly to SERVER KERBEROS REALM and the value labeled 'Kerberos Realm:' in the SERVER KERBEROS display.")
kerbQueryLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbQueryLimit.setStatus('mandatory')
if mibBuilder.loadTexts: kerbQueryLimit.setDescription("The maximum number of attempts the system can make when trying to verify a Kerberos ID. Corresponds directly to SERVER KERBEROS QUERY LIMIT and the value labeled 'Kerberos Query Limit:' in the SERVER KERBEROS display.")
kerbMasterName = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbMasterName.setStatus('mandatory')
if mibBuilder.loadTexts: kerbMasterName.setDescription("The Domain name of the Kerberos master host system, which holds the Kerberos database. Corresponds directly to SERVER KERBEROS MASTER and the value labeled 'Kerberos Master:' in the SERVER KERBEROS display.")
kerbServerName1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbServerName1.setStatus('mandatory')
if mibBuilder.loadTexts: kerbServerName1.setDescription("The Domain name of the first Kerberos server to try when the system verifys a Kerberos ID. Corresponds directly to SERVER KERBEROS PRIMARY SERVER and the value labeled 'Kerberos Primary Server:' in the SERVER KERBEROS display.")
kerbServerName2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbServerName2.setStatus('mandatory')
if mibBuilder.loadTexts: kerbServerName2.setDescription("The Domain name of the Kerberos server to try when the system verifys a Kerberos ID and cannot reach the Kerberos primary server. Corresponds directly to SERVER KERBEROS SECONDARY SERVER and the value labeled 'Kerberos Secondary Server:' in the SERVER KERBEROS display.")
kerbInsecureLogins = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbInsecureLogins.setStatus('mandatory')
if mibBuilder.loadTexts: kerbInsecureLogins.setDescription("The number of user logins on ports for which Kerberos user verification is not enabled. Corresponds directly to the value labeled 'Logins without Kerberos:' in the SERVER KERBEROS display.")
kerbSecureLogins = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbSecureLogins.setStatus('mandatory')
if mibBuilder.loadTexts: kerbSecureLogins.setDescription("The number of successful user logins on ports for which Kerberos user verification is enabled. Corresponds directly to the value labeled 'Successful Logins:' in the SERVER KERBEROS display.")
kerbSecureLoginsFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbSecureLoginsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: kerbSecureLoginsFailed.setDescription("The number of verification failures due to incorrect ID or password for attempted user logins on ports for which Kerberos user verification is enabled. Corresponds directly to the value labeled 'Unsuccessful Logins:' in the SERVER KERBEROS display.")
kerbPasswordChangeFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbPasswordChangeFailed.setStatus('mandatory')
if mibBuilder.loadTexts: kerbPasswordChangeFailed.setDescription("The number of user failures to change their Kerberos password due to invalid old password or new password verification. Corresponds directly to the value labeled 'Password Change Failures:' in the SERVER KERBEROS display.")
kerbError = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbError.setStatus('mandatory')
if mibBuilder.loadTexts: kerbError.setDescription("The error number of the most recent Kerberos-related failure. Corresponds directly to the value labeled 'Last Kerberos Error:' in the SERVER KERBEROS display. For a list of error numbers and their meanings, consult relevant MRV In-Reach or Kerberos documentation.")
kerbErrorTime = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 12), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbErrorTime.setStatus('mandatory')
if mibBuilder.loadTexts: kerbErrorTime.setDescription("The date and time that kerbError was last updated. Corresponds directly to the value labeled 'Occurred:' in the SERVER KERBEROS display.")
kerbMasterAccess = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbMasterAccess.setStatus('mandatory')
if mibBuilder.loadTexts: kerbMasterAccess.setDescription("The number of times the system successfully accessed the Kerberos master host. Corresponds directly to the value labeled 'Attempts to access:', 'Master', and 'Successful:' in the SERVER KERBEROS display.")
kerbMasterAccessFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbMasterAccessFailed.setStatus('mandatory')
if mibBuilder.loadTexts: kerbMasterAccessFailed.setDescription("The number of times the system failed access to the Kerberos master host. Corresponds directly to the value labeled 'Attempts to access:', 'Master', and 'Unsuccessful:' in the SERVER KERBEROS display.")
kerbServerAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbServerAccess1.setStatus('mandatory')
if mibBuilder.loadTexts: kerbServerAccess1.setDescription("The number of times the system successfully accessed the Kerberos primary server. Corresponds directly to the value labeled 'Attempts to access:', 'Server1', and 'Successful:' in the SERVER KERBEROS display.")
kerbServerAccessFailed1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbServerAccessFailed1.setStatus('mandatory')
if mibBuilder.loadTexts: kerbServerAccessFailed1.setDescription("The number of times the system failed access to the Kerberos primary server. Corresponds directly to the value labeled 'Attempts to access:', 'Server1', and 'Unsuccessful:' in the SERVER KERBEROS display.")
kerbServerAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbServerAccess2.setStatus('mandatory')
if mibBuilder.loadTexts: kerbServerAccess2.setDescription("The number of times the system successfully accessed the Kerberos secondary server. Corresponds directly to the value labeled 'Attempts to access:', 'Server2', and 'Successful:' in the SERVER KERBEROS display.")
kerbServerAccessFailed2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbServerAccessFailed2.setStatus('mandatory')
if mibBuilder.loadTexts: kerbServerAccessFailed2.setDescription("The number of times the system failed access to the Kerberos secondary server. Corresponds directly to the value labeled 'Attempts to access:', 'Server2', and 'Unsuccessful:' in the SERVER KERBEROS display.")
kerbPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 8, 19), )
if mibBuilder.loadTexts: kerbPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: kerbPortTable.setDescription('A list of Kerberos character port entries.')
kerbPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 8, 19, 1), ).setIndexNames((0, "MRVINREACH", "kerbPortIndex"))
if mibBuilder.loadTexts: kerbPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: kerbPortEntry.setDescription('Parameter values for a Kerberos port.')
kerbPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 8, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kerbPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: kerbPortIndex.setDescription('An index value that uniquely identifies a port could relate to Kerberos. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
kerbPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 8, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("login", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: kerbPortStatus.setDescription("A control indicating the level of Kerberos operation on the port. Corresponds directly to PORT KERBEROS and the value 'Kerberos' following the label 'Enabled Characteristics' in the PORT CHARACTERISTICS display.")
kerbServerPort = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 8, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(88, 750))).clone(namedValues=NamedValues(("standardPort", 88), ("experimentalPort", 750)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerbServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: kerbServerPort.setDescription('The UDP port number on the Kerberos server where Kerberos messages are sent.')
psEntryNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEntryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryNumber.setDescription("The number of security entries in this system's port security table with psEntryStatus of 'valid'.")
psEntryNumberLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEntryNumberLimit.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryNumberLimit.setDescription("The maximum number of security entries in this system's port security table.")
psEntryInvalidIndex = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEntryInvalidIndex.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryInvalidIndex.setDescription("A value of psEntryIndex for an entry that has psEntryStatus of 'invalid'. A management station may choose this value when adding a new entry. Collisions between independent management stations simultaneously using the same number are beyond the scope of this document.")
psPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 9, 4), )
if mibBuilder.loadTexts: psPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: psPortTable.setDescription('A list of port security character port entries.')
psPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1), ).setIndexNames((0, "MRVINREACH", "psPortIndex"))
if mibBuilder.loadTexts: psPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: psPortEntry.setDescription('Port security parameter values for a port.')
psPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: psPortIndex.setDescription('An index value that uniquely identifies a port for security purposes. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
psPortDefaultInboundAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPortDefaultInboundAccess.setStatus('mandatory')
if mibBuilder.loadTexts: psPortDefaultInboundAccess.setDescription("The default access to the port for incoming TCP connections. Corresponds directly to PORT INTERNET SECURITY DEFAULT INBOUND and the value labeled 'Inbound Default:' in the PORT INTERNET SECURITY display.")
psPortDefaultOutboundAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPortDefaultOutboundAccess.setStatus('mandatory')
if mibBuilder.loadTexts: psPortDefaultOutboundAccess.setDescription("The default access to the port for outgoing TCP connections. Corresponds directly to PORT INTERNET SECURITY DEFAULT OUTBOUND and the value labeled 'Outbound Default:' in the PORT INTERNET SECURITY display.")
psClrInternetSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psClrInternetSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: psClrInternetSecurity.setDescription('A control for if the internet security entries for this port will be cleared upon port logout. The default is disabled.')
psTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 9, 5), )
if mibBuilder.loadTexts: psTable.setStatus('mandatory')
if mibBuilder.loadTexts: psTable.setDescription('A list of port security entries.')
psEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1), ).setIndexNames((0, "MRVINREACH", "psEntryIndex"))
if mibBuilder.loadTexts: psEntry.setStatus('mandatory')
if mibBuilder.loadTexts: psEntry.setDescription('Port security parameter values for an entry for a port.')
psEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryIndex.setDescription("A small, numeric distinguisher for port security entries. When adding a new entry, the client should specify an unused value, such as psEntryInvalidIndex. Corresponds directly to the value labeled 'Entry' in the SERVER INTERNET SECURITY display.")
psEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry, corresponding directly to the CLEAR INTERNET SECURITY command. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Setting this object to 'valid' has no effect. When creating a new instance, one must set psEntryAddress, psEntryMask, psEntryAccess, psEntryDirection and psEntryPortList for the new instance in the same physical set request. Furthermore, if one wishes to change an entry, one must first delete it and then add it with its new values.")
psEntryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryAddress.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryAddress.setDescription("The IP address to which the entry pertains. Corresponds directly to the PORT INTERNET SECURITY internet address and the value labeled 'Internet Address' in the SERVER INTERNET SECURITY display.")
psEntryMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryMask.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryMask.setDescription("The mask applied to psEntryAddress when making a security check based on this entry. Corresponds directly to PORT INTERNET SECURITY MASK and the value labeled 'Security Mask' in the SERVER INTERNET SECURITY display.")
psEntryAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryAccess.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryAccess.setDescription("The access to the port for TCP connections when making a security check based on this entry. Corresponds directly to PORT INTERNET SECURITY ALLOW or DENY and the value labeled 'Access' in the SERVER INTERNET SECURITY display.")
psEntryDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryDirection.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryDirection.setDescription("The direction of TCP connections to which this entry applies. Corresponds directly to PORT INTERNET SECURITY INBOUND or OUTBOUND and the value labeled 'Direction' in the SERVER INTERNET SECURITY display.")
psEntryPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 9, 5, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psEntryPortMap.setStatus('mandatory')
if mibBuilder.loadTexts: psEntryPortMap.setDescription("The list of character ports to which this entry applies. The OCTET STRING contains a bitmap, with one bit for each port, and enough octets for all the ports on the system. Port numbers are as defined for charPortIndex in the Proposed Standard Internet Character MIB. Corresponding bit numbers start with 1 as the high-order bit of the first octet. Corresponds directly to PORT INTERNET SECURITY and the value labeled 'Ports' in the SERVER INTERNET SECURITY display.")
xremoteServerName1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremoteServerName1.setStatus('mandatory')
if mibBuilder.loadTexts: xremoteServerName1.setDescription("The Domain name of the first XREMOTE font server to try for downloading fonts. Corresponds directly to SERVER XREMOTE PRIMARY SERVER and the value labeled 'Xremote Primary Font Server:' in the SERVER XREMOTE display.")
xremoteServerName2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremoteServerName2.setStatus('mandatory')
if mibBuilder.loadTexts: xremoteServerName2.setDescription("The Domain name of the XREMOTE font server to try for downloading fonts and the primary font server does not respond. Corresponds directly to SERVER XREMOTE SECONDARY SERVER and the value labeled 'Xremote Secondary Font Server:' in the SERVER XREMOTE display.")
xremoteServerAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerAccess1.setStatus('mandatory')
if mibBuilder.loadTexts: xremoteServerAccess1.setDescription("The number of times the system successfully accessed the XREMOTE primary font server. Corresponds directly to the value labeled 'Attempts to access:', 'Server1', and 'Successful:' in the SERVER XREMOTE display.")
xremoteServerAccessFailed1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerAccessFailed1.setStatus('mandatory')
if mibBuilder.loadTexts: xremoteServerAccessFailed1.setDescription("The number of times the system failed access to the XREMOTE primary font server. Corresponds directly to the value labeled 'Attempts to access:', 'Server1', and 'Unsuccessful:' in the SERVER XREMOTE display.")
xremoteServerAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerAccess2.setStatus('mandatory')
if mibBuilder.loadTexts: xremoteServerAccess2.setDescription("The number of times the system successfully accessed the XREMOTE secondary font server. Corresponds directly to the value labeled 'Attempts to access:', 'Server2', and 'Successful:' in the SERVER XREMOTE display.")
xremoteServerAccessFailed2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerAccessFailed2.setStatus('mandatory')
if mibBuilder.loadTexts: xremoteServerAccessFailed2.setDescription("The number of times the system failed access to the XREMOTE secondary font server. Corresponds directly to the value labeled 'Attempts to access:', 'Server2', and 'Unsuccessful:' in the SERVER XREMOTE display.")
xremoteSessions = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteSessions.setStatus('mandatory')
if mibBuilder.loadTexts: xremoteSessions.setDescription("The number of connected XREMOTE sessions. Corresponds directly to the value labeled 'Current Number of Xremote Sessions:' in the SERVER XREMOTE display.")
xremotePortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 10, 8), )
if mibBuilder.loadTexts: xremotePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: xremotePortTable.setDescription('A list of XREMOTE character port entries.')
xremotePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1), ).setIndexNames((0, "MRVINREACH", "xremotePortIndex"))
if mibBuilder.loadTexts: xremotePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xremotePortEntry.setDescription('XREMOTE parameter values for a port.')
xremotePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremotePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xremotePortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
xremotePortXremote = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremotePortXremote.setStatus('mandatory')
if mibBuilder.loadTexts: xremotePortXremote.setDescription("Control for use of XREMOTE on the port. Corresponds directly to PORT XREMOTE and the presence of the label 'Xremote' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
xremotePortXdmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("specific", 1), ("broadcast", 2), ("indirect", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremotePortXdmQuery.setStatus('mandatory')
if mibBuilder.loadTexts: xremotePortXdmQuery.setDescription("The type of query message issued by a port when searching for an X Display Manager (XDM). Corresponds directly to the PORT XDM QUERY and the 'XDM Query:' in the PORT ALTERNATE CHARACTERISTICS display")
xremotePortXdmHost = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 10, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xremotePortXdmHost.setStatus('mandatory')
if mibBuilder.loadTexts: xremotePortXdmHost.setDescription("The Domain name or Internet address of the X Display Manager (XDM) for a port. Corresponds directly to the PORT XDM HOST and the 'XDM Host:' in the PORT ALTERNATE CHARACTERISTICS display")
xremoteServerClients = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 10, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xremoteServerClients.setStatus('mandatory')
if mibBuilder.loadTexts: xremoteServerClients.setDescription("The number of active X clients. Corresponds directly to the value labeled 'Current Number of XClients:' in the SERVER XREMOTE display.")
rotaryNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rotaryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rotaryNumber.setDescription('The number of entries in the Rotary table.')
rotaryTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 11, 2), )
if mibBuilder.loadTexts: rotaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: rotaryTable.setDescription('A list of rotary entries.')
rotaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 11, 2, 1), ).setIndexNames((0, "MRVINREACH", "rotaryAddress"))
if mibBuilder.loadTexts: rotaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rotaryEntry.setDescription('Parameter values for a rotary.')
rotaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 11, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rotaryAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rotaryAddress.setDescription("The internet address to be recognized as a rotary. Corresponds directly to the ip-address portion of SERVER INTERNET ROTARY and the value labeled 'Internet Address' in the SERVER INTERNET ROTARY display.")
rotaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rotaryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rotaryStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry, corresponding directly to the CLEAR SERVER INTERNET ROTARY command. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Setting the value to 'valid' in conjunction with a new rotaryAddress will add a new entry to the table. When adding a new entry, one should also specify a rotaryPortMap as the DEFVAL of 0..0 for rotaryPortMap is meaningless.")
rotaryPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 11, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rotaryPortMap.setStatus('mandatory')
if mibBuilder.loadTexts: rotaryPortMap.setDescription("The list of character ports that compose the rotary. The OCTET STRING contains a bitmap, with one bit for each port, and enough octets for all the ports on the system. Port numbers are as defined for charPortIndex in the Proposed Standard Internet Character MIB. Corresponding bit numbers start with 1 as the high-order bit of the first octet. Corresponds directly to port-list portion of SERVER INTERNET ROTARY and the value labeled 'Ports' in the SERVER INTERNET ROTARY display.")
egpRouting = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egpRouting.setStatus('mandatory')
if mibBuilder.loadTexts: egpRouting.setDescription('Control for EGP routing services.')
egpStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("noMemory", 2), ("noIpRouting", 3), ("noEgpRouting", 4), ("noNeighbors", 5), ("noAS", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: egpStatus.setDescription('Status of the EGP routing services indicating why it is not running.')
egpNbrTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 12, 3), )
if mibBuilder.loadTexts: egpNbrTable.setStatus('mandatory')
if mibBuilder.loadTexts: egpNbrTable.setDescription('The EGP neighbor table.')
egpNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 12, 3, 1), ).setIndexNames((0, "MRVINREACH", "egpNbrAddr"))
if mibBuilder.loadTexts: egpNbrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: egpNbrEntry.setDescription("Information about this entity's relationship with a particular EGP neighbor.")
egpNbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 12, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: egpNbrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: egpNbrAddr.setDescription("The IP address of this entry's EGP neighbor.")
egpNbrIntervalDead = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(30000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egpNbrIntervalDead.setStatus('mandatory')
if mibBuilder.loadTexts: egpNbrIntervalDead.setDescription('The interval upon entering the cease or idle state before automatically assuming a Start Event has occured. If a neighbor does not respond within 5 minutes, a Stop Event will automatically occur. The interval is in hundredths of seconds.')
egpNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 12, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: egpNbrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: egpNbrStatus.setDescription("The status of the entry for this neighbor. Set to 'invalid' to remove the entry.")
ospfAutoConfigure = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfAutoConfigure.setStatus('mandatory')
if mibBuilder.loadTexts: ospfAutoConfigure.setDescription('Control whether OSPF will automatically configure itself.')
ospfStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("active", 1), ("noMemory", 2), ("noIpRouting", 3), ("noOspfRouting", 4), ("noAreas", 5), ("noInterfaces", 6), ("noRtrId", 7), ("noBackBoneAndVirtualInterfaces", 8), ("noBackBoneAndInterface", 9), ("noBackBone", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ospfStatus.setDescription('Status of the OSPF routing services indicating why it is not running.')
ospfIfMtrcTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 13, 3), )
if mibBuilder.loadTexts: ospfIfMtrcTable.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIfMtrcTable.setDescription('The TOS metrics for a non-virtual interface identified by the interface index.')
ospfIfMtrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 13, 3, 1), ).setIndexNames((0, "MRVINREACH", "ospfIfMtrcIpAddress"), (0, "MRVINREACH", "ospfIfMtrcAddressLessIf"), (0, "MRVINREACH", "ospfIfMtrcTos"))
if mibBuilder.loadTexts: ospfIfMtrcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIfMtrcEntry.setDescription('A particular TOS metric for a non-virtual interface identified by the interface index.')
ospfIfMtrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfMtrcIpAddress.setReference('OSPF Version 2 Management Information Base, RFC 1253')
if mibBuilder.loadTexts: ospfIfMtrcIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIfMtrcIpAddress.setDescription('Same as ospfIfMetricIpAddress in OSPF MIB, the IP address of this OSPF interface.')
ospfIfMtrcAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfMtrcAddressLessIf.setReference('OSPF Version 2 Management Information Base, RFC 1253')
if mibBuilder.loadTexts: ospfIfMtrcAddressLessIf.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIfMtrcAddressLessIf.setDescription('Same as ospfIfMetricAddressLessIf in OSPF MIB, for the purpose of easing the instancing of addressed and addressless interfaces. This variable takes the value 0 on interfaces with IP Addresses, and the value of ifIndex for interfaces having no IP Address.')
ospfIfMtrcTos = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfMtrcTos.setReference('OSPF Version 2 Management Information Base, RFC 1253')
if mibBuilder.loadTexts: ospfIfMtrcTos.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIfMtrcTos.setDescription('Same as ospfIfMetricTOS in OSPF MIB, the type of service metric being referenced.')
ospfIfMtrcCostActual = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfMtrcCostActual.setStatus('mandatory')
if mibBuilder.loadTexts: ospfIfMtrcCostActual.setDescription('The actual cost of the metric in case it was set to auto.')
ospfXIfTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 13, 4), )
if mibBuilder.loadTexts: ospfXIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXIfTable.setDescription('The TOS metrics for a non-virtual interface identified by the interface index.')
ospfXIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 13, 4, 1), ).setIndexNames((0, "MRVINREACH", "ospfXIfIpAddress"), (0, "MRVINREACH", "ospfXIfAddressLessIf"))
if mibBuilder.loadTexts: ospfXIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXIfEntry.setDescription('Interface parameters for OSPF.')
ospfXIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfXIfIpAddress.setReference('OSPF Version 2 Management Information Base, RFC 1253')
if mibBuilder.loadTexts: ospfXIfIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXIfIpAddress.setDescription('Same as ospfIfIpAddress in OSPF MIB, the IP address of this OSPF interface.')
ospfXIfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfXIfAddressLessIf.setReference('OSPF Version 2 Management Information Base, RFC 1253')
if mibBuilder.loadTexts: ospfXIfAddressLessIf.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXIfAddressLessIf.setDescription('Same as ospfIfAddressLessIf in OSPF MIB, for the purpose of easing the instancing of addressed and addressless interfaces. This variable takes the value 0 on interfaces with IP Addresses, and the value of ifIndex for interfaces having no IP Address.')
ospfXIfTypeActual = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("nonbroadcast", 2), ("pointToPoint", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfXIfTypeActual.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXIfTypeActual.setDescription('The interface type.')
ospfXIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfXIfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXIfStatus.setDescription("The status of the interface entry, including the entry in the standard OSPF MIB. Set to 'invalid' to remove the entry.")
ospfXAreaTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 13, 5), )
if mibBuilder.loadTexts: ospfXAreaTable.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXAreaTable.setDescription('Parameters for an OSPF area.')
ospfXAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 13, 5, 1), ).setIndexNames((0, "MRVINREACH", "ospfXAreaId"))
if mibBuilder.loadTexts: ospfXAreaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXAreaEntry.setDescription('An area entry.')
ospfXAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfXAreaId.setReference('OSPF Version 2 Management Information Base, RFC 1253')
if mibBuilder.loadTexts: ospfXAreaId.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXAreaId.setDescription('Same as ospfAreaId in OSPF MIB, the ID of the area.')
ospfXAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 13, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfXAreaStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ospfXAreaStatus.setDescription("The status of the area entry, including the entry in the standard OSPF MIB. Set to 'invalid' to remove the entry.")
ipAdExtTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 14, 1), )
if mibBuilder.loadTexts: ipAdExtTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipAdExtTable.setDescription('Table of additional fields indexed by local IP address. An entry in this table is created or deleted when an entry in the ipAddrTable is created or deleted.')
ipAdExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 14, 1, 1), ).setIndexNames((0, "MRVINREACH", "ipAdEntExtAddress"))
if mibBuilder.loadTexts: ipAdExtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipAdExtEntry.setDescription('A particular entry.')
ipAdEntExtAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntExtAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipAdEntExtAddress.setDescription('Same as ipAdEntAddr, a local address representing a network connection.')
ipAdEntExtProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAdEntExtProxyArp.setStatus('mandatory')
if mibBuilder.loadTexts: ipAdEntExtProxyArp.setDescription('Controls whether proxy ARP is active for this local address.')
ipAdEntExtRip = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAdEntExtRip.setStatus('deprecated')
if mibBuilder.loadTexts: ipAdEntExtRip.setDescription('Controls whether RIP as a router discovery protocol is active for this local address.')
ipRouterIfTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 14, 2), )
if mibBuilder.loadTexts: ipRouterIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfTable.setDescription('Table of IP router values indexed by interface.')
ipRouterIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1), ).setIndexNames((0, "MRVINREACH", "ipRouterIfIndex"))
if mibBuilder.loadTexts: ipRouterIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfEntry.setDescription('A particular entry.')
ipRouterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfIndex.setDescription('The index of the interface; same as IfIndex.')
ipRouterIfProtocolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5))).clone(namedValues=NamedValues(("low", 1), ("medium", 3), ("high", 5))).clone('medium')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouterIfProtocolPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfProtocolPriority.setDescription('The priority at which all Internet routed packets will be placed on the WAN output queue.')
ipRouterIfMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 65535)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouterIfMTU.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfMTU.setDescription('The size of the largest datagram that IP can transmit on this interface. The default value is actually hardware dependent.')
ipRouterIfRDP = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouterIfRDP.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfRDP.setDescription('Control for whether the router side of the Router Discovery Protocol is running on this interface.')
ipRouterIfArpPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfArpPacketsIn.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfArpPacketsIn.setDescription('The number of ARP packets received on this interface.')
ipRouterIfArpPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfArpPacketsOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfArpPacketsOut.setDescription('The number of ARP packets sent on this interface.')
ipRouterIfPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfPacketsIn.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfPacketsIn.setDescription('The number of IP packets received on this interface.')
ipRouterIfPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfPacketsOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfPacketsOut.setDescription('The number of IP packets sent on this interface.')
ipRouterIfForwardsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfForwardsIn.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfForwardsIn.setDescription('The number of IP packets received on this interface that were forwarded.')
ipRouterIfForwardsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouterIfForwardsOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterIfForwardsOut.setDescription('The number of IP packets sent on this interface that were forwarded.')
xIpTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 14, 3))
ipTrafficSort = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTrafficSort.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficSort.setDescription("Setting to 'execute' causes the most recent traffic information to be sorted into the ipTrafficTable. The sorting precedence is: decreasing percentage, increasing destination address, increasing source address, and increasing interface number. Setting to 'ready' has no effect.")
ipTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2), )
if mibBuilder.loadTexts: ipTrafficTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficTable.setDescription('A list of traffic entries, sorted in the order specified by ipTrafficSort.')
ipTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1), ).setIndexNames((0, "MRVINREACH", "ipTrafficIndex"))
if mibBuilder.loadTexts: ipTrafficEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficEntry.setDescription('A traffic entry.')
ipTrafficIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficIndex.setDescription('Identification of this traffic entry.')
ipTrafficPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficPercent.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficPercent.setDescription('The percentage of total traffic that this traffic entry represents, in tenths of a percent.')
ipTrafficDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficDstAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficDstAddr.setDescription('The destination IP address of the traffic entry.')
ipTrafficSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficSrcAddr.setDescription('The source IP address of the traffic entry.')
ipTrafficProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficProtocol.setDescription('The IP protocol type of the traffic entry.')
ipTrafficDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficDstPort.setDescription('The destination TCP/UDP port of the traffic entry.')
ipTrafficSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficSrcPort.setDescription('The source TCP/UDP port of the traffic entry.')
ipTrafficIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipTrafficIf.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficIf.setDescription('The inbound interface to which the traffic entry applies. This value is the same as IfIndex.')
ipTrafficMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 14, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTrafficMonitoring.setStatus('mandatory')
if mibBuilder.loadTexts: ipTrafficMonitoring.setDescription('Control for whether the router side of the Router Discovery Protocol is running on this interface.')
xIpNetToMediaTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 14, 4), )
if mibBuilder.loadTexts: xIpNetToMediaTable.setStatus('mandatory')
if mibBuilder.loadTexts: xIpNetToMediaTable.setDescription('MRV In-Reach extensions to the IP Address Translation Table.')
xIpNetToMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 14, 4, 1), ).setIndexNames((0, "MRVINREACH", "ifIndex"), (0, "MRVINREACH", "ipNetToMediaNetAddress"))
if mibBuilder.loadTexts: xIpNetToMediaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xIpNetToMediaEntry.setDescription('Entry parameters.')
xIpNetToMediaCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIpNetToMediaCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: xIpNetToMediaCircuit.setDescription('An additional identifier for the circuit (i.e. Frame Relay DLCI or X.25 VC) which the entry extends.')
xIpNetToMediaReverseArp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 14, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIpNetToMediaReverseArp.setStatus('mandatory')
if mibBuilder.loadTexts: xIpNetToMediaReverseArp.setDescription('Whether reverse ARP is supported on this entry.')
udpBcstServerTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 15, 1), )
if mibBuilder.loadTexts: udpBcstServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: udpBcstServerTable.setDescription('Table of servers to whom UDP broadcast messages will be forwarded.')
udpBcstServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 15, 1, 1), ).setIndexNames((0, "MRVINREACH", "udpBcstServerAddress"))
if mibBuilder.loadTexts: udpBcstServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: udpBcstServerEntry.setDescription('A particular entry.')
udpBcstServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 15, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBcstServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: udpBcstServerAddress.setDescription('Internet address of the server.')
udpBcstServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpBcstServerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: udpBcstServerStatus.setDescription("The status of the server. Set to 'invalid' to remove the entry.")
udpBcstPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 15, 2), )
if mibBuilder.loadTexts: udpBcstPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: udpBcstPortTable.setDescription('Table of incoming UDP destination port numbers for which UDP broadcasts will be forwarded.')
udpBcstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 15, 2, 1), ).setIndexNames((0, "MRVINREACH", "udpBcstPort"))
if mibBuilder.loadTexts: udpBcstPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: udpBcstPortEntry.setDescription('A particular entry.')
udpBcstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBcstPort.setStatus('mandatory')
if mibBuilder.loadTexts: udpBcstPort.setDescription('The incoming destination UDP port number.')
udpBcstPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpBcstPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: udpBcstPortStatus.setDescription("The status of broadcast forwarding for the port. Set to 'invalid' to remove the entry.")
udpBcstRouting = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpBcstRouting.setStatus('mandatory')
if mibBuilder.loadTexts: udpBcstRouting.setDescription('The indication of whether this entity forwards UDP broadcasts.')
xImport = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 16, 1))
xExport = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 16, 2))
xFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 10, 16, 3))
impEgpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1), )
if mibBuilder.loadTexts: impEgpRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRuleTable.setDescription('The EGP import table.')
impEgpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1), ).setIndexNames((0, "MRVINREACH", "impEgpRuleAs"), (0, "MRVINREACH", "impEgpRuleNetwork"))
if mibBuilder.loadTexts: impEgpRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRuleEntry.setDescription('An EGP import rule. Each rule is keyed by the Autonomous System of the EGP neighbor and the IP network of the route learned from the neighbor. The AS can be set to a wild card as can the IP network. When a route is learned from a neighbor, the most specific import rule is applied to the route. The route is either accepted or discarded and its metrics are applied according to the rule. An exact match on the AS and IP network is the most exact rule. An exact match on the AS and a wild card match on the IP network is the 2nd most exact rule. A wild card match on the AS and an exact match on the IP network is the 3rd most exact match. Finally, a total wild card match is the least exact rule.')
impEgpRuleAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impEgpRuleAs.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRuleAs.setDescription('The Autonomous System of the neighbor. The value 65535 is a wild card matching any AS number.')
impEgpRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impEgpRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRuleNetwork.setDescription('The IP network learned from the neighbor. The value 255.255.255.255 is a wild card matching any network.')
impEgpRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impEgpRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRuleAction.setDescription('Control whether the route is learned or discarded.')
impEgpRulePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impEgpRulePreference.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRulePreference.setDescription('Preference to be stored with the route. The lower preference is preferred.')
impEgpRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impEgpRuleType.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRuleType.setDescription('Type to be stored with the route. The type is based on the OSPF external type and used to help compare metrics. Type 1 is preferred over type 2.')
impEgpRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impEgpRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRuleMetricAction.setDescription('How to apply the impEgpRuleMetric field to the metric learned with the route before storing it in the routing table.')
impEgpRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impEgpRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRuleMetric.setDescription('Metric value to be applied to the metric learned learned with the route before storing it in the routing table.')
impEgpRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impEgpRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: impEgpRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
impOspfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 2), )
if mibBuilder.loadTexts: impOspfRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: impOspfRuleTable.setDescription('The OSPF import table.')
impOspfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 2, 1), ).setIndexNames((0, "MRVINREACH", "impOspfRuleNetwork"))
if mibBuilder.loadTexts: impOspfRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: impOspfRuleEntry.setDescription('An OSPF import rule. Each rule is keyed by the IP network of the route and the AS from which it was learned. The Ip network and the AS can both be set to a wild card. When an OSPF route is added to the routing table, the most specific import rule is applied to set the preference of the route. An exact match on the Ip network and on the AS is the most exact rule. An exact match on the IP network and a wild card match on the AS is the 2nd most exact rule. A wild card match on both the on the AS and IP network is the next and least exact rule.')
impOspfRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impOspfRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: impOspfRuleNetwork.setDescription('The IP network of the route. The value 255.255.255.255 is a wild card matching any network.')
impOspfRulePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impOspfRulePreference.setStatus('mandatory')
if mibBuilder.loadTexts: impOspfRulePreference.setDescription('Preference to be stored with the route. The lower preference is preferred.')
impOspfRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impOspfRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: impOspfRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
impRipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3), )
if mibBuilder.loadTexts: impRipRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRuleTable.setDescription('The RIP import table.')
impRipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1), ).setIndexNames((0, "MRVINREACH", "impRipRuleFromIf"), (0, "MRVINREACH", "impRipRuleNetwork"))
if mibBuilder.loadTexts: impRipRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRuleEntry.setDescription('A RIP import rule. Each rule is keyed by the interface and the IP network of the route learned from the neighbor. The route is either accepted or discarded and its metrics are applied according to the rule. An exact match on the IP network is the rule that will be applied. If an exact match does not exist, the rule with the wild card IP network is used.')
impRipRuleFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impRipRuleFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRuleFromIf.setDescription('The interface index of the interface where the rule applies, same as ifIndex.')
impRipRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impRipRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRuleNetwork.setDescription('The IP network learned from the neighbor. The value 255.255.255.255 is a wild card matching any network.')
impRipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impRipRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRuleAction.setDescription('Control whether the route is learned or discarded.')
impRipRulePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impRipRulePreference.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRulePreference.setDescription('Preference to be stored with the route. The lower preference are preferred.')
impRipRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impRipRuleType.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRuleType.setDescription('Type to be stored with the route. The type is based on the OSPF external type and used to help compare metrics. Type 1 is preferred over type 2.')
impRipRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impRipRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRuleMetricAction.setDescription('How to apply the impRipRuleMetric field to the metric learned with the route before storing it in the routing table.')
impRipRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impRipRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRuleMetric.setDescription('Metric value to be applied to the metric learned learned with the route before storing it in the routing table.')
impRipRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impRipRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: impRipRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
impIsisRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4), )
if mibBuilder.loadTexts: impIsisRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: impIsisRuleTable.setDescription('The Isis import table.')
impIsisRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1), ).setIndexNames((0, "MRVINREACH", "impIsisRuleNetwork"))
if mibBuilder.loadTexts: impIsisRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: impIsisRuleEntry.setDescription('An Isis import rule. Each rule is keyed by the IP network of the route learned from the neighbor. The route is either accepted or discarded and its metrics are applied according to the rule. An exact match on the IP network is the rule that will be applied. If an exact match does not exist, the rule with the wild card IP network is used.')
impIsisRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impIsisRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: impIsisRuleNetwork.setDescription('The IP network learned from the neighbor. The value 255.255.255.255 is a wild card matching any network.')
impIsisRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impIsisRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: impIsisRuleAction.setDescription('Control whether the route is learned or discarded.')
impIsisRulePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impIsisRulePreference.setStatus('mandatory')
if mibBuilder.loadTexts: impIsisRulePreference.setDescription('Preference to be stored with the route. The lower preference are preferred.')
impIsisRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impIsisRuleType.setStatus('mandatory')
if mibBuilder.loadTexts: impIsisRuleType.setDescription('Type to be stored with the route. The type is based on the OSPF external type and used to help compare metrics. Type 1 is preferred over type 2.')
impIsisRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impIsisRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: impIsisRuleMetricAction.setDescription('How to apply the impIsisRuleMetric field to the metric learned with the route before storing it in the routing table.')
impIsisRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impIsisRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: impIsisRuleMetric.setDescription('Metric value to be applied to the metric learned learned with the route before storing it in the routing table.')
impIsisRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impIsisRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: impIsisRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expEgpToEgpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1), )
if mibBuilder.loadTexts: expEgpToEgpRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToEgpRuleTable.setDescription('The EGP to EGP export table.')
expEgpToEgpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1), ).setIndexNames((0, "MRVINREACH", "expEgpToEgpRuleToAs"), (0, "MRVINREACH", "expEgpToEgpRuleNetwork"), (0, "MRVINREACH", "expEgpToEgpRuleFromAs"))
if mibBuilder.loadTexts: expEgpToEgpRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToEgpRuleEntry.setDescription('An EGP to EGP export rule. Each rule is keyed by the Autonomous System of the EGP neighbor, the IP network of the EGP route in the routing table, and the Autonomous System from which the route was learned. The neighbor (to) AS can be set to a wild card as can the IP network and the (from) AS. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: To As IP Network From AS Rank exact exact exact 1st exact exact wild card 2nd exact wild card exact 3rd exact wild card wild card 4th wild card exact exact 5th wild card exact wild card 6th wild card wild card exact 7th wild card wild card wild card 8th ')
expEgpToEgpRuleToAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToEgpRuleToAs.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToEgpRuleToAs.setDescription('The Autonomous System of the neighbor. The value 65535 is a wild card matching any AS number.')
expEgpToEgpRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToEgpRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToEgpRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expEgpToEgpRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToEgpRuleFromAs.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToEgpRuleFromAs.setDescription('The Autonomous System of the route in the route table. The value 65535 is a wild card matching any AS number.')
expEgpToEgpRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToEgpRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToEgpRuleAction.setDescription('Control whether the route is advertised or not.')
expEgpToEgpRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToEgpRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToEgpRuleMetricAction.setDescription('How to apply the expEgpToEgpRuleMetric field to the metric in the route table entry before the route is advertised.')
expEgpToEgpRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToEgpRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToEgpRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expEgpToEgpRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToEgpRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToEgpRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expOspfToEgpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2), )
if mibBuilder.loadTexts: expOspfToEgpRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToEgpRuleTable.setDescription('The OSPF to EGP export table.')
expOspfToEgpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1), ).setIndexNames((0, "MRVINREACH", "expOspfToEgpRuleToAs"), (0, "MRVINREACH", "expOspfToEgpRuleNetwork"), (0, "MRVINREACH", "expOspfToEgpRuleFromAs"))
if mibBuilder.loadTexts: expOspfToEgpRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToEgpRuleEntry.setDescription('An OSPF to EGP export rule. Each rule is keyed by the Autonomous System of the EGP neighbor, the IP network of the OSPF route in the routing table, and the Autonomous System from which the route was learned. The neighbor (to) AS can be set to a wild card as can the IP network and the (from) AS. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: To As IP Network From AS Rank exact exact exact 1st exact exact wild card 2nd exact wild card exact 3rd exact wild card wild card 4th wild card exact exact 5th wild card exact wild card 6th wild card wild card exact 7th wild card wild card wild card 8th ')
expOspfToEgpRuleToAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToEgpRuleToAs.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToEgpRuleToAs.setDescription('The Autonomous System of the neighbor. The value 65535 is a wild card matching any AS number.')
expOspfToEgpRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToEgpRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToEgpRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expOspfToEgpRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToEgpRuleFromAs.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToEgpRuleFromAs.setDescription('The Autonomous System of the route in the route table. Local indicates that the route was not an external OSPF route. The value 65535 is a wild card matching any AS number, and the value 65534 is for routes within the local AS.')
expOspfToEgpRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToEgpRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToEgpRuleAction.setDescription('Control whether the route is advertised or not.')
expOspfToEgpRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToEgpRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToEgpRuleMetricAction.setDescription('How to apply the expOspfToEgpRuleMetric field to the metric in the route table entry before the route is advertised.')
expOspfToEgpRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToEgpRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToEgpRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expOspfToEgpRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToEgpRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToEgpRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expStaticToEgpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3), )
if mibBuilder.loadTexts: expStaticToEgpRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToEgpRuleTable.setDescription('The Static to EGP export table.')
expStaticToEgpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1), ).setIndexNames((0, "MRVINREACH", "expStaticToEgpRuleToAs"), (0, "MRVINREACH", "expStaticToEgpRuleNetwork"))
if mibBuilder.loadTexts: expStaticToEgpRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToEgpRuleEntry.setDescription('An Static to EGP export rule. Each rule is keyed by the Autonomous System of the EGP neighbor and the IP network of the Static route in the routing table. The neighbor (to) AS can be set to a wild card as can the IP network. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: To As IP Network Rank exact exact 1st exact wild card 2nd wild card exact 3rd wild card wild card 4th ')
expStaticToEgpRuleToAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expStaticToEgpRuleToAs.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToEgpRuleToAs.setDescription('The Autonomous System of the neighbor. The value 65535 is a wild card matching any AS number.')
expStaticToEgpRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expStaticToEgpRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToEgpRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expStaticToEgpRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToEgpRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToEgpRuleAction.setDescription('Control whether the route is advertised or not.')
expStaticToEgpRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToEgpRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToEgpRuleMetricAction.setDescription('How to apply the expStaticToEgpRuleMetric field to the metric in the route table entry before the route is advertised.')
expStaticToEgpRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToEgpRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToEgpRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expStaticToEgpRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToEgpRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToEgpRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expEgpToOspfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 4), )
if mibBuilder.loadTexts: expEgpToOspfRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToOspfRuleTable.setDescription('The EGP to OSPF export table.')
expEgpToOspfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 4, 1), ).setIndexNames((0, "MRVINREACH", "expEgpToOspfRuleNetwork"), (0, "MRVINREACH", "expEgpToOspfRuleFromAs"))
if mibBuilder.loadTexts: expEgpToOspfRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToOspfRuleEntry.setDescription('An EGP to OSPF export rule. Each rule is keyed by the IP network of the EGP route in the routing table, and the Autonomous System from which the route was learned. The Ip network can be set to a wild card as can the (from) AS. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network From AS Rank exact exact 1st exact wild card 2nd wild card exact 3rd wild card wild card 4th ')
expEgpToOspfRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToOspfRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToOspfRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expEgpToOspfRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToOspfRuleFromAs.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToOspfRuleFromAs.setDescription('The Autonomous System of the route in the route table. The value 65535 is a wild card matching any AS number.')
expEgpToOspfRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToOspfRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToOspfRuleAction.setDescription('Control whether the route is advertised or not.')
expEgpToOspfRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToOspfRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToOspfRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expRipToEgpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5), )
if mibBuilder.loadTexts: expRipToEgpRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToEgpRuleTable.setDescription('The Rip to EGP export table.')
expRipToEgpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1), ).setIndexNames((0, "MRVINREACH", "expRipToEgpRuleToAs"), (0, "MRVINREACH", "expRipToEgpRuleNetwork"))
if mibBuilder.loadTexts: expRipToEgpRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToEgpRuleEntry.setDescription('An Rip to EGP export rule. Each rule is keyed by the Autonomous System of the EGP neighbor and the IP network of the Rip route in the routing table. The neighbor (to) AS can be set to a wild card as can the IP network. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: To As IP Network Best Match Rank exact exact 1st exact wild card 2nd wild card exact 3rd wild card wild card 4th ')
expRipToEgpRuleToAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expRipToEgpRuleToAs.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToEgpRuleToAs.setDescription('The Autonomous System of the neighbor. The value 65535 is a wild card matching any AS number.')
expRipToEgpRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expRipToEgpRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToEgpRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expRipToEgpRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToEgpRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToEgpRuleAction.setDescription('Control whether the route is advertised or not.')
expRipToEgpRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToEgpRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToEgpRuleMetricAction.setDescription('How to apply the expRipToEgpRuleMetric field to the metric in the route table entry before the route is advertised.')
expRipToEgpRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToEgpRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToEgpRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expRipToEgpRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToEgpRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToEgpRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expRipToOspfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 6), )
if mibBuilder.loadTexts: expRipToOspfRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToOspfRuleTable.setDescription('The RIP to OSPF export table.')
expRipToOspfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 6, 1), ).setIndexNames((0, "MRVINREACH", "expRipToOspfRuleNetwork"))
if mibBuilder.loadTexts: expRipToOspfRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToOspfRuleEntry.setDescription('A RIP to OSPF export rule. Each rule is keyed by the IP network of the RIP route in the routing table. The IP network can be set to a wild card. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network Best Match Rank exact 1st wild card 2nd ')
expRipToOspfRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expRipToOspfRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToOspfRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expRipToOspfRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToOspfRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToOspfRuleAction.setDescription('Control whether the route is advertised or not.')
expRipToOspfRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToOspfRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToOspfRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expEgpToRipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7), )
if mibBuilder.loadTexts: expEgpToRipRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToRipRuleTable.setDescription('The EGP to RIP export table.')
expEgpToRipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1), ).setIndexNames((0, "MRVINREACH", "expEgpToRipRuleToIf"), (0, "MRVINREACH", "expEgpToRipRuleNetwork"), (0, "MRVINREACH", "expEgpToRipRuleFromAs"))
if mibBuilder.loadTexts: expEgpToRipRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToRipRuleEntry.setDescription('An EGP to RIP export rule. Each rule is keyed by the Autonomous System of the EGP neighbor, the IP network of the EGP route in the routing table, and the Autonomous System from which the route was learned. The IP network can be set to a wild card as can the the from AS. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network From AS Best Match Rank exact exact 1st exact wild card 2nd wild card exact 3rd wild card wild card 4th ')
expEgpToRipRuleToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToRipRuleToIf.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToRipRuleToIf.setDescription('The IP address of the RIP interface to which the rule applies.')
expEgpToRipRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToRipRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToRipRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expEgpToRipRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToRipRuleFromAs.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToRipRuleFromAs.setDescription('The Autonomous System of the route in the route table. The value 65535 is a wild card matching any AS number.')
expEgpToRipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToRipRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToRipRuleAction.setDescription('Control whether the route is advertised or not.')
expEgpToRipRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToRipRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToRipRuleMetricAction.setDescription('How to apply the expEgpToRipRuleMetric field to the metric in the route table entry before the route is advertised.')
expEgpToRipRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToRipRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToRipRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expEgpToRipRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToRipRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToRipRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expOspfToRipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8), )
if mibBuilder.loadTexts: expOspfToRipRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToRipRuleTable.setDescription('The OSPF to RIP export table.')
expOspfToRipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1), ).setIndexNames((0, "MRVINREACH", "expOspfToRipRuleToIf"), (0, "MRVINREACH", "expOspfToRipRuleNetwork"), (0, "MRVINREACH", "expOspfToRipRuleFromAs"))
if mibBuilder.loadTexts: expOspfToRipRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToRipRuleEntry.setDescription('An Ospf to RIP export rule. Each rule is keyed by the Autonomous System of the Ospf neighbor, the IP network of the Ospf route in the routing table, and the Autonomous System from which the route was learned. The IP network can be set to a wild card as can the the from AS. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network From AS Best Match Rank exact exact 1st exact wild card 2nd wild card exact 3rd wild card wild card 4th ')
expOspfToRipRuleToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToRipRuleToIf.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToRipRuleToIf.setDescription('The IP address of the RIP interface to which the rule applies.')
expOspfToRipRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToRipRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToRipRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expOspfToRipRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToRipRuleFromAs.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToRipRuleFromAs.setDescription('The Autonomous System of the route in the route table. The value 65535 is a wild card matching any AS number, and the value 65534 is for routes within the local AS.')
expOspfToRipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToRipRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToRipRuleAction.setDescription('Control whether the route is advertised or not.')
expOspfToRipRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToRipRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToRipRuleMetricAction.setDescription('How to apply the expOspfToRipRuleMetric field to the metric in the route table entry before the route is advertised.')
expOspfToRipRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToRipRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToRipRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expOspfToRipRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToRipRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToRipRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values. The same is true for the all wild cards where the AS is set to local")
expRipToRipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9), )
if mibBuilder.loadTexts: expRipToRipRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToRipRuleTable.setDescription('The Rip to Rip export table.')
expRipToRipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1), ).setIndexNames((0, "MRVINREACH", "expRipToRipRuleToIf"), (0, "MRVINREACH", "expRipToRipRuleNetwork"))
if mibBuilder.loadTexts: expRipToRipRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToRipRuleEntry.setDescription('An Rip to Rip export rule. Each rule is keyed by the IP network of the Rip route in the routing table. The neighbor IP network can be set to a wild card. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network Best Match Rank exact 1st wild card 2nd ')
expRipToRipRuleToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expRipToRipRuleToIf.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToRipRuleToIf.setDescription('The IP address of the RIP interface to which the rule applies.')
expRipToRipRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expRipToRipRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToRipRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expRipToRipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToRipRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToRipRuleAction.setDescription('Control whether the route is advertised or not.')
expRipToRipRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToRipRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToRipRuleMetricAction.setDescription('How to apply the expRipToRipRuleMetric field to the metric in the route table entry before the route is advertised.')
expRipToRipRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToRipRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToRipRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expRipToRipRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToRipRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToRipRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expStaticToRipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10), )
if mibBuilder.loadTexts: expStaticToRipRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToRipRuleTable.setDescription('The Static to Rip export table.')
expStaticToRipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1), ).setIndexNames((0, "MRVINREACH", "expStaticToRipRuleToIf"), (0, "MRVINREACH", "expStaticToRipRuleNetwork"))
if mibBuilder.loadTexts: expStaticToRipRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToRipRuleEntry.setDescription('An Static to Rip export rule. Each rule is keyed by the IP network of the Static route in the routing table. The neighbor IP network can be set to a wild card. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network Best Match Rank exact 1st wild card 2nd ')
expStaticToRipRuleToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expStaticToRipRuleToIf.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToRipRuleToIf.setDescription('The IP address of the RIP interface to which the rule applies.')
expStaticToRipRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expStaticToRipRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToRipRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expStaticToRipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToRipRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToRipRuleAction.setDescription('Control whether the route is advertised or not.')
expStaticToRipRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToRipRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToRipRuleMetricAction.setDescription('How to apply the expStaticToRipRuleMetric field to the metric in the route table entry before the route is advertised.')
expStaticToRipRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToRipRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToRipRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expStaticToRipRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToRipRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToRipRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expIsisToEgpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11), )
if mibBuilder.loadTexts: expIsisToEgpRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToEgpRuleTable.setDescription('The Isis to EGP export table.')
expIsisToEgpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1), ).setIndexNames((0, "MRVINREACH", "expIsisToEgpRuleToAs"), (0, "MRVINREACH", "expIsisToEgpRuleNetwork"))
if mibBuilder.loadTexts: expIsisToEgpRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToEgpRuleEntry.setDescription('An Isis to EGP export rule. Each rule is keyed by the Autonomous System of the EGP neighbor and the IP network of the Isis route in the routing table. The neighbor (to) AS can be set to a wild card as can the IP network. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: To As IP Network Best Match Rank exact exact 1st exact wild card 2nd wild card exact 3rd wild card wild card 4th .')
expIsisToEgpRuleToAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expIsisToEgpRuleToAs.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToEgpRuleToAs.setDescription('The Autonomous System of the neighbor. The value 65535 is a wild card matching any AS number.')
expIsisToEgpRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expIsisToEgpRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToEgpRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expIsisToEgpRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToEgpRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToEgpRuleAction.setDescription('Control whether the route is advertised or not.')
expIsisToEgpRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToEgpRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToEgpRuleMetricAction.setDescription('How to apply the expIsisToEgpRuleMetric field to the metric in the route table entry before the route is advertised.')
expIsisToEgpRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToEgpRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToEgpRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expIsisToEgpRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToEgpRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToEgpRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expIsisToOspfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 12), )
if mibBuilder.loadTexts: expIsisToOspfRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToOspfRuleTable.setDescription('The Isis to Ospf export table.')
expIsisToOspfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 12, 1), ).setIndexNames((0, "MRVINREACH", "expIsisToOspfRuleNetwork"))
if mibBuilder.loadTexts: expIsisToOspfRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToOspfRuleEntry.setDescription('An Isis to Ospf export rule. Each rule is keyed by the IP network of the Isis route in the routing table. The IP network can be set to a wild card. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network Best Match Rank exact 1st wild card 2nd .')
expIsisToOspfRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 12, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expIsisToOspfRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToOspfRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expIsisToOspfRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToOspfRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToOspfRuleAction.setDescription('Control whether the route is advertised or not.')
expIsisToOspfRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToOspfRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToOspfRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expIsisToRipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13), )
if mibBuilder.loadTexts: expIsisToRipRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToRipRuleTable.setDescription('The Isis to Rip export table.')
expIsisToRipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1), ).setIndexNames((0, "MRVINREACH", "expIsisToRipRuleNetwork"))
if mibBuilder.loadTexts: expIsisToRipRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToRipRuleEntry.setDescription('An Isis to Rip export rule. Each rule is keyed by the IP network of the Isis route in the routing table. The IP network can be set to a wild card. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network Best Match Rank exact 1st wild card 2nd .')
expIsisToRipRuleToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expIsisToRipRuleToIf.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToRipRuleToIf.setDescription('The IP address of the RIP interface to which the rule applies.')
expIsisToRipRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expIsisToRipRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToRipRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expIsisToRipRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToRipRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToRipRuleAction.setDescription('Control whether the route is advertised or not.')
expIsisToRipRuleMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToRipRuleMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToRipRuleMetricAction.setDescription('How to apply the expIsisToRipRuleMetric field to the metric in the route table entry before the route is advertised.')
expIsisToRipRuleMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToRipRuleMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToRipRuleMetric.setDescription('Metric value to be applied to the metric in the route table entry before the route is advertised.')
expIsisToRipRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expIsisToRipRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expIsisToRipRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expEgpToIsisRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14), )
if mibBuilder.loadTexts: expEgpToIsisRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleTable.setDescription('The EGP to Isis export table.')
expEgpToIsisRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1), ).setIndexNames((0, "MRVINREACH", "expEgpToIsisRuleNetwork"), (0, "MRVINREACH", "expEgpToIsisRuleFromAs"))
if mibBuilder.loadTexts: expEgpToIsisRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleEntry.setDescription('An EGP to Isis export rule. Each rule is keyed by the Autonomous System of the EGP neighbor, the IP network of the EGP route in the routing table, and the Autonomous System from which the route was learned. The IP network can be set to a wild card as can the from AS. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network From AS Best Match Rank exact exact 1st exact wild card 2nd wild card exact 3rd wild card wild card 4th .')
expEgpToIsisRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToIsisRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expEgpToIsisRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expEgpToIsisRuleFromAs.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleFromAs.setDescription('The Autonomous System of the route in the route table. The value 65535 is a wild card matching any AS number.')
expEgpToIsisRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleAction.setDescription('Control whether the route is advertised or not.')
expEgpToIsisRuleMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleMetricType.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleMetricType.setDescription('Whether to advertise the metric as Internal or External.')
expEgpToIsisRuleDefaultMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleDefaultMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleDefaultMetricAction.setDescription('How to apply the expEgpToIsisDefaultRuleMetric field to the metric in the route table entry before the route is advertised.')
expEgpToIsisRuleDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleDefaultMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleDefaultMetric.setDescription('Default metric value to be applied to the metric in the route table entry before the route is advertised.')
expEgpToIsisRuleDelayMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleDelayMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleDelayMetricAction.setDescription('How to apply the expEgpToIsisDelayRuleMetric field to the metric in the route table entry before the route is advertised.')
expEgpToIsisRuleDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleDelayMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleDelayMetric.setDescription('Delay metric value to be applied to the metric in the route table entry before the route is advertised.')
expEgpToIsisRuleErrorMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleErrorMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleErrorMetricAction.setDescription('How to apply the expEgpToIsisErrorRuleMetric field to the metric in the route table entry before the route is advertised.')
expEgpToIsisRuleErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleErrorMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleErrorMetric.setDescription('Error metric value to be applied to the metric in the route table entry before the route is advertised.')
expEgpToIsisRuleExpenseMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleExpenseMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleExpenseMetricAction.setDescription('How to apply the expEgpToIsisExpenseRuleMetric field to the metric in the route table entry before the route is advertised.')
expEgpToIsisRuleExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleExpenseMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleExpenseMetric.setDescription('Expense metric value to be applied to the metric in the route table entry before the route is advertised.')
expEgpToIsisRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 14, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expEgpToIsisRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expEgpToIsisRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expOspfToIsisRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15), )
if mibBuilder.loadTexts: expOspfToIsisRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleTable.setDescription('The Ospf to Isis export table.')
expOspfToIsisRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1), ).setIndexNames((0, "MRVINREACH", "expOspfToIsisRuleNetwork"), (0, "MRVINREACH", "expOspfToIsisRuleFromAs"))
if mibBuilder.loadTexts: expOspfToIsisRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleEntry.setDescription('An Ospf to Isis export rule. Each rule is keyed by the Autonomous System of the Ospf neighbor, the IP network of the Ospf route in the routing table, and the Autonomous System from which the route was learned. The IP network can be set to a wild card as can the the from AS. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network From AS Best Match Rank exact exact 1st exact wild card 2nd wild card exact 3rd wild card wild card 4th .')
expOspfToIsisRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToIsisRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expOspfToIsisRuleFromAs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: expOspfToIsisRuleFromAs.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleFromAs.setDescription('The Autonomous System of the route in the route table. The value 65535 is a wild card matching any AS number, and the value 65534 is for routes within the local AS.')
expOspfToIsisRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleAction.setDescription('Control whether the route is advertised or not.')
expOspfToIsisRuleMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleMetricType.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleMetricType.setDescription('Whether to advertise the metric as Internal or External.')
expOspfToIsisRuleDefaultMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleDefaultMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleDefaultMetricAction.setDescription('How to apply the expOspfToIsisDefaultRuleMetric field to the metric in the route table entry before the route is advertised.')
expOspfToIsisRuleDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleDefaultMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleDefaultMetric.setDescription('Default metric value to be applied to the metric in the route table entry before the route is advertised.')
expOspfToIsisRuleDelayMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleDelayMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleDelayMetricAction.setDescription('How to apply the expOspfToIsisDelayRuleMetric field to the metric in the route table entry before the route is advertised.')
expOspfToIsisRuleDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleDelayMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleDelayMetric.setDescription('Delay metric value to be applied to the metric in the route table entry before the route is advertised.')
expOspfToIsisRuleErrorMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleErrorMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleErrorMetricAction.setDescription('How to apply the expOspfToIsisErrorRuleMetric field to the metric in the route table entry before the route is advertised.')
expOspfToIsisRuleErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleErrorMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleErrorMetric.setDescription('Error metric value to be applied to the metric in the route table entry before the route is advertised.')
expOspfToIsisRuleExpenseMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleExpenseMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleExpenseMetricAction.setDescription('How to apply the expOspfToIsisExpenseRuleMetric field to the metric in the route table entry before the route is advertised.')
expOspfToIsisRuleExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleExpenseMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleExpenseMetric.setDescription('Expense metric value to be applied to the metric in the route table entry before the route is advertised.')
expOspfToIsisRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 15, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expOspfToIsisRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expOspfToIsisRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values. The same is true for the all wild cards where the AS is set to local")
expRipToIsisRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16), )
if mibBuilder.loadTexts: expRipToIsisRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleTable.setDescription('The Isis to Isis export table.')
expRipToIsisRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1), ).setIndexNames((0, "MRVINREACH", "expRipToIsisRuleNetwork"))
if mibBuilder.loadTexts: expRipToIsisRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleEntry.setDescription('An Isis to Isis export rule. Each rule is keyed by the IP network of the Isis route in the routing table. The neighbor IP network can be set to a wild card. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network Best Match Rank exact 1st wild card 2nd .')
expRipToIsisRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expRipToIsisRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expRipToIsisRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleAction.setDescription('Control whether the route is advertised or not.')
expRipToIsisRuleMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleMetricType.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleMetricType.setDescription('Whether to advertise the metric as Internal or External.')
expRipToIsisRuleDefaultMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleDefaultMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleDefaultMetricAction.setDescription('How to apply the expRipToIsisDefaultRuleMetric field to the metric in the route table entry before the route is advertised.')
expRipToIsisRuleDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleDefaultMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleDefaultMetric.setDescription('Default metric value to be applied to the metric in the route table entry before the route is advertised.')
expRipToIsisRuleDelayMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleDelayMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleDelayMetricAction.setDescription('How to apply the expRipToIsisDelayRuleMetric field to the metric in the route table entry before the route is advertised.')
expRipToIsisRuleDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleDelayMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleDelayMetric.setDescription('Delay metric value to be applied to the metric in the route table entry before the route is advertised.')
expRipToIsisRuleErrorMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleErrorMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleErrorMetricAction.setDescription('How to apply the expRipToIsisErrorRuleMetric field to the metric in the route table entry before the route is advertised.')
expRipToIsisRuleErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleErrorMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleErrorMetric.setDescription('Error metric value to be applied to the metric in the route table entry before the route is advertised.')
expRipToIsisRuleExpenseMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleExpenseMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleExpenseMetricAction.setDescription('How to apply the expRipToIsisExpenseRuleMetric field to the metric in the route table entry before the route is advertised.')
expRipToIsisRuleExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleExpenseMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleExpenseMetric.setDescription('Expense metric value to be applied to the metric in the route table entry before the route is advertised.')
expRipToIsisRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 16, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expRipToIsisRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expRipToIsisRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
expStaticToIsisRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17), )
if mibBuilder.loadTexts: expStaticToIsisRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleTable.setDescription('The Static to Isis export table.')
expStaticToIsisRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1), ).setIndexNames((0, "MRVINREACH", "expStaticToIsisRuleNetwork"))
if mibBuilder.loadTexts: expStaticToIsisRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleEntry.setDescription('An Static to Isis export rule. Each rule is keyed by the IP network of the Static route in the routing table. The neighbor IP network can be set to a wild card. The route is either accepted to be advertised to the neighbor or discarded from being advertised, and its metric is applied according to the rule. The best match is as follows: IP Network Best Match Rank exact 1st wild card 2nd .')
expStaticToIsisRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: expStaticToIsisRuleNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleNetwork.setDescription('The IP network of the route in the route table. The value 255.255.255.255 is a wild card matching any network.')
expStaticToIsisRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleAction.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleAction.setDescription('Control whether the route is advertised or not.')
expStaticToIsisRuleMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleMetricType.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleMetricType.setDescription('Whether to advertise the metric as Internal or External.')
expStaticToIsisRuleDefaultMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('increment')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleDefaultMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleDefaultMetricAction.setDescription('How to apply the expStaticToIsisDefaultRuleMetric field to the metric in the route table entry before the route is advertised.')
expStaticToIsisRuleDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleDefaultMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleDefaultMetric.setDescription('Default metric value to be applied to the metric in the route table entry before the route is advertised.')
expStaticToIsisRuleDelayMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleDelayMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleDelayMetricAction.setDescription('How to apply the expStaticToIsisDelayRuleMetric field to the metric in the route table entry before the route is advertised.')
expStaticToIsisRuleDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleDelayMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleDelayMetric.setDescription('Delay metric value to be applied to the metric in the route table entry before the route is advertised.')
expStaticToIsisRuleErrorMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleErrorMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleErrorMetricAction.setDescription('How to apply the expStaticToIsisErrorRuleMetric field to the metric in the route table entry before the route is advertised.')
expStaticToIsisRuleErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleErrorMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleErrorMetric.setDescription('Error metric value to be applied to the metric in the route table entry before the route is advertised.')
expStaticToIsisRuleExpenseMetricAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("increment", 2), ("decrement", 3))).clone('replace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleExpenseMetricAction.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleExpenseMetricAction.setDescription('How to apply the expStaticToIsisExpenseRuleMetric field to the metric in the route table entry before the route is advertised.')
expStaticToIsisRuleExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleExpenseMetric.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleExpenseMetric.setDescription('Expense metric value to be applied to the metric in the route table entry before the route is advertised.')
expStaticToIsisRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 2, 17, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: expStaticToIsisRuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: expStaticToIsisRuleStatus.setDescription("The status of the rule. Set to 'invalid' to remove the rule. If the all wild card rule is removed, it is automatically readded with default values.")
ipIfFilterTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1), )
if mibBuilder.loadTexts: ipIfFilterTable.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterTable.setDescription('Table of filter entries.')
ipIfFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1), ).setIndexNames((0, "MRVINREACH", "ipIfFilterIndex"), (0, "MRVINREACH", "ipIfFilterProtocol"), (0, "MRVINREACH", "ipIfFilterDstPort"), (0, "MRVINREACH", "ipIfFilterSrcPort"), (0, "MRVINREACH", "ipIfFilterDstAddr"), (0, "MRVINREACH", "ipIfFilterDstMask"), (0, "MRVINREACH", "ipIfFilterSrcAddr"), (0, "MRVINREACH", "ipIfFilterSrcMask"))
if mibBuilder.loadTexts: ipIfFilterEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterEntry.setDescription('A particular entry.')
ipIfFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterIndex.setDescription('The interface index with which this entry is associated. This value is the same as IfIndex.')
ipIfFilterDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterDstAddr.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterDstAddr.setDescription('The destination IP address to use in the filter match.')
ipIfFilterDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterDstMask.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterDstMask.setDescription('The destination IP mask to use in the filter match.')
ipIfFilterSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterSrcAddr.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterSrcAddr.setDescription('The source IP address to use in the filter match.')
ipIfFilterSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterSrcMask.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterSrcMask.setDescription('The source IP mask to use in the filter match.')
ipIfFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterProtocol.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterProtocol.setDescription('The protocol to use in the filter match. The value 256 indicates any protocol.')
ipIfFilterDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterDstPort.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterDstPort.setDescription('The destination port to use in the filter match. This field only applies to TCP and UDP protocol packets. The value 65536 indicates any destination port.')
ipIfFilterSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilterSrcPort.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterSrcPort.setDescription('The source port to use in the filter match. This field only applies to TCP and UDP protocol packets. The value 65536 indicates any source port.')
ipIfFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2))).clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipIfFilterAction.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterAction.setDescription('Control whether the packet for which this filter is the best match should be forwarded or discarded.')
ipIfFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipIfFilterStatus.setStatus('deprecated')
if mibBuilder.loadTexts: ipIfFilterStatus.setDescription("The status of the filter entry. Set to 'invalid' to remove the entry.")
ipFilterState = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterState.setStatus('mandatory')
if mibBuilder.loadTexts: ipFilterState.setDescription('The indication of whether this system does IP filtering.')
ipIfFilter2Table = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3), )
if mibBuilder.loadTexts: ipIfFilter2Table.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2Table.setDescription('Table of filter entries.')
ipIfFilter2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1), ).setIndexNames((0, "MRVINREACH", "ipIfFilter2Index"), (0, "MRVINREACH", "ipIfFilter2Protocol"), (0, "MRVINREACH", "ipIfFilter2DstPortStart"), (0, "MRVINREACH", "ipIfFilter2DstPortEnd"), (0, "MRVINREACH", "ipIfFilter2TcpSyn"), (0, "MRVINREACH", "ipIfFilter2SrcPortStart"), (0, "MRVINREACH", "ipIfFilter2SrcPortEnd"), (0, "MRVINREACH", "ipIfFilter2DstMask"), (0, "MRVINREACH", "ipIfFilter2DstAddr"), (0, "MRVINREACH", "ipIfFilter2SrcMask"), (0, "MRVINREACH", "ipIfFilter2SrcAddr"))
if mibBuilder.loadTexts: ipIfFilter2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2Entry.setDescription('A particular entry.')
ipIfFilter2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2Index.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2Index.setDescription('The interface index with which this entry is associated. This value is the same as IfIndex.')
ipIfFilter2DstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2DstAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2DstAddr.setDescription('The destination IP address to use in the filter match.')
ipIfFilter2DstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2DstMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2DstMask.setDescription('The destination IP mask to use in the filter match.')
ipIfFilter2SrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2SrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2SrcAddr.setDescription('The source IP address to use in the filter match.')
ipIfFilter2SrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2SrcMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2SrcMask.setDescription('The source IP mask to use in the filter match.')
ipIfFilter2Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2Protocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2Protocol.setDescription('The protocol to use in the filter match. The value 256 indicates any protocol.')
ipIfFilter2DstPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2DstPortStart.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2DstPortStart.setDescription('The starting destination port in a range of destination ports to use in the filter match. This field only applies to TCP and UDP protocol packets.')
ipIfFilter2SrcPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2SrcPortStart.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2SrcPortStart.setDescription('The starting source port in a range of source ports to use in the filter match. This field only applies to TCP and UDP protocol packets.')
ipIfFilter2Action = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2))).clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipIfFilter2Action.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2Action.setDescription('Control whether the packet for which this filter is the best match should be forwarded or discarded.')
ipIfFilter2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipIfFilter2Status.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2Status.setDescription("The status of the filter entry. Set to 'invalid' to remove the entry.")
ipIfFilter2DstPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2DstPortEnd.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2DstPortEnd.setDescription('The ending destination port in a range of destination ports to use in the filter match. This field only applies to TCP and UDP protocol packets. This filed must also be greater or equal to the ipIfFilter2DstPortStart field.')
ipIfFilter2SrcPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2SrcPortEnd.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2SrcPortEnd.setDescription('The starting source port in a range of source ports to use in the filter match. This field only applies to TCP and UDP protocol packets. This filed must also be greater or equal to the ipIfFilter2SrcPortStart field.')
ipIfFilter2TcpSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("all", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfFilter2TcpSyn.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2TcpSyn.setDescription('The value of the TCP SYN and ACK bit to ues in the filter match. This field only applies to TCP packets. On indicates that the SYN bit is on and the ACK bit is off. Off is any other combination.')
ipIfFilter2ProtocolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 16, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 256))).clone(namedValues=NamedValues(("low", 1), ("medium", 3), ("high", 5), ("none", 256))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipIfFilter2ProtocolPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ipIfFilter2ProtocolPriority.setDescription('Control the priority at which the packet for which this filter is the best match should be placed on the WAN output queue. None indicates that the sending interfaces protocol priority should be used.')
ripState = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripState.setStatus('mandatory')
if mibBuilder.loadTexts: ripState.setDescription('The indication of whether this system participates in RIP.')
ripStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("ripDisabled", 2), ("ipDisabled", 3), ("noNetworksEnabled", 4), ("noMemory", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ripStatus.setDescription('The status of the RIP software.')
ripNetTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 18, 3), )
if mibBuilder.loadTexts: ripNetTable.setStatus('mandatory')
if mibBuilder.loadTexts: ripNetTable.setDescription('Table of RIP entries.')
ripNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 18, 3, 1), ).setIndexNames((0, "MRVINREACH", "ripNetNet"))
if mibBuilder.loadTexts: ripNetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ripNetEntry.setDescription('A particular entry.')
ripNetNet = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 18, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNetNet.setStatus('mandatory')
if mibBuilder.loadTexts: ripNetNet.setDescription('The IP Network to which this entry applies.')
ripNetState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 18, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("routerDiscovery", 2), ("full", 3))).clone('full')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNetState.setStatus('mandatory')
if mibBuilder.loadTexts: ripNetState.setDescription('This value controls the RIP protocol on this network.')
ripNetRipsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 18, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNetRipsIn.setStatus('mandatory')
if mibBuilder.loadTexts: ripNetRipsIn.setDescription('The number of RIP packets received from routers on this IP network.')
ripNetRipsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 18, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNetRipsOut.setStatus('mandatory')
if mibBuilder.loadTexts: ripNetRipsOut.setDescription('The number of RIP packets sent to routers on this IP network.')
ripNetAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 18, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("poisonedReverse", 1), ("splitHorizon", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNetAlgorithm.setStatus('mandatory')
if mibBuilder.loadTexts: ripNetAlgorithm.setDescription('This value controls the RIP algorithm on this network.')
lpdQueueTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 19, 1), )
if mibBuilder.loadTexts: lpdQueueTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueTable.setDescription('A list of lpd queues on the server.')
lpdQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1), ).setIndexNames((0, "MRVINREACH", "lpdQueueName"))
if mibBuilder.loadTexts: lpdQueueEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueEntry.setDescription('Lpd parameter values plus counters for an individual lpd queue.')
lpdQueueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdQueueStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry, corresponding directly to the CLEAR/PURGE SERVER LPD QUEUE command. Setting the value to 'valid' validates (creates) the entry, corresonding directly to the DEF/SET SERVER LPD QUEUE and lpd create commands.")
lpdQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdQueueName.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueName.setDescription('Name of the LPD queue, case sensitive.')
lpdQueuePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdQueuePorts.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueuePorts.setDescription('List of ports assigned to the queue. An lpd queue can be associated with more than 1 port. This object corresponds to the port-list in the DEF/SET SERVER LPD QUEUE and lpc/create commands. The OCTET STRING contains a bitmap, with one bit for each port, and enough octets for all the ports on the system. Port numbers are as defined for charPortIndex in the Character MIB [11]. Corresponding bit numbers start with 1 as the high-order bit of the first octet. ')
lpdQueueEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdQueueEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueEnabled.setDescription("Flag indicates if the queue is enabled. A 'disabled' queue will reject print requests from remote systems. A 'enabled' queue accepts requests for printing.")
lpdQueueLfConversion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lf", 1), ("lfcr", 2))).clone('lf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdQueueLfConversion.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueLfConversion.setDescription("Flag indicates if the queue is converting linefeeds to linefeeds, carriagereturns. 'lfcr' does the converion, 'lf' does not.")
lpdQueueTotalJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdQueueTotalJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueTotalJobs.setDescription('The total number of jobs on the queue. This number should be equal to the number of active and waiting jobs. (lpdQueueActive + lpdQueueWaiting)')
lpdQueueActiveJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdQueueActiveJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueActiveJobs.setDescription('The number of active jobs on the queue. An active job is a job that has been assigned a port is in the process of receiving data from a remote host and sending it out the port.')
lpdQueueWaitingJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdQueueWaitingJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueWaitingJobs.setDescription('The number of waiting jobs on the queue. A waiting job is a job that needs a port to send its data to. This implies that the ports associated with this queue are busy.')
lpdQueueProcessedJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdQueueProcessedJobs.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueProcessedJobs.setDescription('The total number of jobs processed by this queue since server boot.')
lpdQueueFormFeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("formfeedafter", 1), ("formfeedbefore", 2), ("formfeednone", 3))).clone('formfeedafter')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdQueueFormFeed.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueFormFeed.setDescription('A control to determine how we will send out a formfeed when printing a lpd job. formfeedafter: Send after job, formfeedbefore: Send before job, formfeednone: Send no formfeed.')
lpdQueueBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdQueueBypass.setStatus('mandatory')
if mibBuilder.loadTexts: lpdQueueBypass.setDescription("Control for a queue to bypass a LPD port which has output inhibited via flow control. Corresponds directly to the value labeled 'Bypass' in the SERVER LPD QUEUE display.")
lpdJobTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 19, 2), )
if mibBuilder.loadTexts: lpdJobTable.setStatus('mandatory')
if mibBuilder.loadTexts: lpdJobTable.setDescription('A list of lpd jobs.')
lpdJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1), ).setIndexNames((0, "MRVINREACH", "lpdQueueName"), (0, "MRVINREACH", "lpdJobNumber"))
if mibBuilder.loadTexts: lpdJobEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lpdJobEntry.setDescription('A single lpd Job.')
lpdJobStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpdJobStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lpdJobStatus.setDescription("Status of this entry. Setting this object to 'invalid' will remove the job from the queue. Setting this object ot 'valid' has no effect since the only way to create an lpd job is with the lpd protocol.")
lpdJobNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdJobNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lpdJobNumber.setDescription('The queue relative job number for this lpd job. Job numbers are assigned as jobs are accepted onto the queue. Job numbers are reset to 1 when they reach a value greater than 1000 and the queue goes empty.')
lpdJobAssignedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdJobAssignedPort.setStatus('mandatory')
if mibBuilder.loadTexts: lpdJobAssignedPort.setDescription('The number of the port assigned to the lpd job.')
lpdJobFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdJobFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: lpdJobFileSize.setDescription('The size of the file being sent from the remote system.')
lpdJobHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdJobHostName.setStatus('mandatory')
if mibBuilder.loadTexts: lpdJobHostName.setDescription('The name of the host sending the job.')
lpdJobFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdJobFileName.setStatus('mandatory')
if mibBuilder.loadTexts: lpdJobFileName.setDescription('The name of the file being sent.')
lpdJobState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 19, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initialized", 1), ("waiting", 2), ("assigned", 3), ("printingData", 4), ("printingControl", 5), ("aborted", 6), ("completed", 7), ("error", 8), ("flushing", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpdJobState.setStatus('mandatory')
if mibBuilder.loadTexts: lpdJobState.setDescription('The current state of the lpd job. A typical job transistions through the following states: initialize->waiting->assigned->printingdata-> printingcontrol->completed.')
securIDServerName0 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDServerName0.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerName0.setDescription("The Domain name of the first SecurID server to try when the system verifies a SecurID PASSCODE. Corresponds directly to SERVER SECURID SERVER0 and the value labeled 'SecurID Server0:' in the SERVER SECURID display.")
securIDServerName1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDServerName1.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerName1.setDescription("The Domain name of the second SecurID server to try when the system verifies a SecurID PASSCODE. Corresponds directly to SERVER SECURID SERVER1 and the value labeled 'SecurID Server1:' in the SERVER SECURID display.")
securIDServerName2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDServerName2.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerName2.setDescription("The Domain name of the third SecurID server to try when the system verifies a SecurID PASSCODE. Corresponds directly to SERVER SECURID SERVER2 and the value labeled 'SecurID Server2:' in the SERVER SECURID display.")
securIDServerName3 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDServerName3.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerName3.setDescription("The Domain name of the fourth SecurID server to try when the system verifies a SecurID PASSCODE. Corresponds directly to SERVER SECURID SERVER3 and the value labeled 'SecurID Server3:' in the SERVER SECURID display.")
securIDServerName4 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDServerName4.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerName4.setDescription("The Domain name of the fifth SecurID server to try when the system verifies a SecurID PASSCODE. Corresponds directly to SERVER SECURID SERVER4 and the value labeled 'SecurID Server4:' in the SERVER SECURID display.")
securIDMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDMaxRetries.setStatus('mandatory')
if mibBuilder.loadTexts: securIDMaxRetries.setDescription("The maximum number of times the server will try any single SecurID server to validate a PASSCODE. Corresponds directly to SERVER SECURID ACMMAXRETRIES and the value labeled 'SecurID ACMMAXRETRIES:' in the SERVER SECURID display.")
securIDBaseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDBaseTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: securIDBaseTimeout.setDescription("The initial timeout value to be used between prompts for a SecurID PASSCODE. Corresponds directly to SERVER SECURID ACMBASETIMEOUT and the value labeled 'SecurID ACMBASETIMEOUT:' in the SERVER SECURID display.")
securIDPort = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDPort.setStatus('mandatory')
if mibBuilder.loadTexts: securIDPort.setDescription("The UDP port number to be used when communicating with the SecurID servers. Corresponds directly to SERVER SECURID ACM_PORT and the value labeled 'SecurID ACM_PORT:' in the SERVER SECURID display.")
securIDQueryLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDQueryLimit.setStatus('mandatory')
if mibBuilder.loadTexts: securIDQueryLimit.setDescription("The maximum number of times a user will be queried for a SecurID PASSCODE before being logged out. Corresponds directly to SERVER SECURID QUERY LIMIT and the value labeled 'SecurID Query Limit:' in the SERVER SECURID display.")
securIDEncryptionMode = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sdiBlockCipher", 1), ("des", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDEncryptionMode.setStatus('mandatory')
if mibBuilder.loadTexts: securIDEncryptionMode.setDescription("The type of encryption to use in SecurID validation. Corresponds directly to the value labeled 'Encryption Mode' in the SERVER SECURID display.")
securIDInsecureLogins = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDInsecureLogins.setStatus('mandatory')
if mibBuilder.loadTexts: securIDInsecureLogins.setDescription("The number of user logins on ports for which SecurID user verification is not enabled. Corresponds directly to the value labeled 'Logins without SecurID:' in the SERVER SECURID display.")
securIDSecureLogins = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDSecureLogins.setStatus('mandatory')
if mibBuilder.loadTexts: securIDSecureLogins.setDescription("The number of successful user logins on ports for which SecurID user verification is enabled. Corresponds directly to the value labeled 'Successful Logins:' in the SERVER SECURID display.")
securIDSecureLoginsFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDSecureLoginsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: securIDSecureLoginsFailed.setDescription("The number of verification failures due to incorrect PASSCODE for attempted user logins on ports for which SecurID user verification is enabled. Corresponds directly to the value labeled 'Unsuccessful Logins:' in the SERVER SECURID display.")
securIDServerAccess0 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccess0.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccess0.setDescription("The number of times the system successfully accessed the SecurID server0. Corresponds directly to the value labeled 'Attempts to access:', 'Server0', and 'Successful:' in the SERVER SECURID display.")
securIDServerAccessFailed0 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccessFailed0.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccessFailed0.setDescription("The number of times the system unsuccessfully accessed the SecurID server0. Corresponds directly to the value labeled 'Attempts to access:', 'Server0', and 'UnSuccessful:' in the SERVER SECURID display.")
securIDServerAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccess1.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccess1.setDescription("The number of times the system successfully accessed the SecurID server1. Corresponds directly to the value labeled 'Attempts to access:', 'Server1', and 'Successful:' in the SERVER SECURID display.")
securIDServerAccessFailed1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccessFailed1.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccessFailed1.setDescription("The number of times the system unsuccessfully accessed the SecurID server1. Corresponds directly to the value labeled 'Attempts to access:', 'Server1', and 'UnSuccessful:' in the SERVER SECURID display.")
securIDServerAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccess2.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccess2.setDescription("The number of times the system successfully accessed the SecurID server2. Corresponds directly to the value labeled 'Attempts to access:', 'Server2', and 'Successful:' in the SERVER SECURID display.")
securIDServerAccessFailed2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccessFailed2.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccessFailed2.setDescription("The number of times the system unsuccessfully accessed the SecurID server2. Corresponds directly to the value labeled 'Attempts to access:', 'Server2', and 'UnSuccessful:' in the SERVER SECURID display.")
securIDServerAccess3 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccess3.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccess3.setDescription("The number of times the system successfully accessed the SecurID server3. Corresponds directly to the value labeled 'Attempts to access:', 'Server3', and 'Successful:' in the SERVER SECURID display.")
securIDServerAccessFailed3 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccessFailed3.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccessFailed3.setDescription("The number of times the system unsuccessfully accessed the SecurID server3. Corresponds directly to the value labeled 'Attempts to access:', 'Server3', and 'UnSuccessful:' in the SERVER SECURID display.")
securIDServerAccess4 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccess4.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccess4.setDescription("The number of times the system successfully accessed the SecurID server4. Corresponds directly to the value labeled 'Attempts to access:', 'Server4', and 'Successful:' in the SERVER SECURID display.")
securIDServerAccessFailed4 = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDServerAccessFailed4.setStatus('mandatory')
if mibBuilder.loadTexts: securIDServerAccessFailed4.setDescription("The number of times the system unsuccessfully accessed the SecurID server4. Corresponds directly to the value labeled 'Attempts to access:', 'Server4', and 'UnSuccessful:' in the SERVER SECURID display.")
securIDErrorPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDErrorPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: securIDErrorPortIndex.setDescription("The index of the most recent port on which a SecurID access violation occurred. Corresponds directly to the value labeled 'Last Unsuccessful Login:' in the SERVER SECURID display.")
securIDError = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDError.setStatus('mandatory')
if mibBuilder.loadTexts: securIDError.setDescription("The error number of the most recent SecurID-related error. Corresponds directly to the value labeled 'Reason:' in the SERVER SECURID display. See MRV In-Reach documentation for a complete list of error numbers and their meaning.")
securIDErrorUsername = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 20, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDErrorUsername.setStatus('mandatory')
if mibBuilder.loadTexts: securIDErrorUsername.setDescription("The username associated with the most recent SecurID-related error. Corresponds directly to the value labeled 'Username:' in the SERVER SECURID display.")
securIDPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 20, 27), )
if mibBuilder.loadTexts: securIDPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: securIDPortTable.setDescription('A list of SecurID character port entries.')
securIDPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 20, 27, 1), ).setIndexNames((0, "MRVINREACH", "securIDPortIndex"))
if mibBuilder.loadTexts: securIDPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: securIDPortEntry.setDescription('Parameter values for a SecurID port.')
securIDPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 20, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securIDPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: securIDPortIndex.setDescription('An index value that uniquely identifies a port could relate to SecurID. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
securIDPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 20, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securIDPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: securIDPortStatus.setDescription("A control indicating the level of SecurID operation on the port. Corresponds directly to PORT SECURID and the value 'SecurID' following the label 'Enabled Characteristics' in the PORT CHARACTERISTICS display.")
sshPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 10, 23, 1), )
if mibBuilder.loadTexts: sshPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: sshPortTable.setDescription('A list of SSH port entries')
sshPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1), ).setIndexNames((0, "MRVINREACH", "sshPortIndex"))
if mibBuilder.loadTexts: sshPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sshPortEntry.setDescription('Parameter values for an SSH port.')
sshPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sshPortIndex.setDescription('An index value that uniquely identifies an SSH port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the proposed standard Internet Character MIB.')
sshPortIncomingTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortIncomingTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: sshPortIncomingTcpPort.setDescription("Specifies the TCP port number used to identify the port when a SSH connection request arrives at the server. The default for a physical port is 2022 + 100 * port's physical port number. The default is 22 for virtual ports. Corresponds directly to the value labeled 'Remote Port:' in the PORT SSH CHARACTERISTICS display.")
sshPortNewlineFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("crToCrLf", 2), ("crToCrNull", 3), ("crLfToCr", 4), ("crLfToCrNull", 5), ("crNullToCr", 6), ("crNullToCrLf", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortNewlineFiltering.setStatus('mandatory')
if mibBuilder.loadTexts: sshPortNewlineFiltering.setDescription("Translation to apply to newline sequences (CR/NULL or CR/LF) received from the network during a SSH session, before sending the newline to the character port. The value indicates which input sequence is converted to which output sequence and sent to the character port, with 'none' meaning no translation. Corresponds directly to the value labeled 'Newline Filtering:' in the PORT SSH CHARACTERISTICS display.")
sshPortNewline = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("crToCrLf", 2), ("crToCrNull", 3), ("crLfToCr", 4), ("crLfToCrNull", 5), ("crNullToCr", 6), ("crNullToCrLf", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortNewline.setStatus('mandatory')
if mibBuilder.loadTexts: sshPortNewline.setDescription("Translation to apply to newline (carriage return) received from the character port during an SSH session, before sending the newline to the remote partner. Corresponds directly to the value labeled 'Newline:' in the PORT SSH CHARACTERISTICS display.")
sshPortTransmitBufferedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1500)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortTransmitBufferedTime.setStatus('mandatory')
if mibBuilder.loadTexts: sshPortTransmitBufferedTime.setDescription("Number of milliseconds to wait before transmitting data received from a character port during an interactive SSH session. Corresponds directly to the value labeled 'Transmit Buffered Time:' in the PORT SSH CHARACTERISTICS display.")
sshPortRemoteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ssh", 1), ("telnet", 2), ("both", 3))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortRemoteProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: sshPortRemoteProtocol.setDescription("Indicates which remote protocols will be accepted at this port. Corresponds indirectly to the presence of 'Telnet' or 'SSH' under the label 'Enabled Characteristics:' in the PORT SSH CHARACTERISTICS display. If both protocols are accepted at the port, the choice of protocol is determined by which features are enabled on the server with SSH taking precedence over Telnet.")
sshPortBreakSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 10, 23, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPortBreakSequence.setStatus('mandatory')
if mibBuilder.loadTexts: sshPortBreakSequence.setDescription("A sequence of characters, which together define the break function. If this string is received from the SSH connection from across the network, the port will send a hardware break out of the serial port. The first character must be a carriage return ('\\r'), and no more carriage returns may appear in the sequence. The second character must not be a NULL, or a line-feed ('\\n'). Send a NULL to remove the break sequence. If the sequence exists, it must have two to four characters.")
sshCipherMask = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshCipherMask.setStatus('mandatory')
if mibBuilder.loadTexts: sshCipherMask.setDescription("This is a list of the encryption methods supported. The OCTET STRING contains a bitmap, with one bit for each cipher type. Corresponding bit numbers start with 0 as the low-order bit of the second octet. The following bit positions are defined: none(0), des(2), tripleDes(3), and blowfish(6). Corresponds directly to the value labeled 'SSH Cipher Enabled:' in the SERVER SSH CHARACTERISTICS display.")
sshAuthenticationTimeout = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthenticationTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: sshAuthenticationTimeout.setDescription("The timeout in minutes before disconnecting if no successful authentication of SSH parties has been made. Corresponds directly to the value labeled 'Authentication Timeout:' in the SERVER SSH CHARACTERISTICS display.")
sshHostKeyLength = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 2048)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyLength.setStatus('mandatory')
if mibBuilder.loadTexts: sshHostKeyLength.setDescription("The bit length of the SSH host encryption key. When modified, the desired change does not occur until the next system initialization. Corresponds directly to the value labeled 'Host Key Length:' in the SERVER SSH CHARACTERISTICS display.")
sshHostKeyGenerate = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("generate", 2), ("update", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyGenerate.setStatus('mandatory')
if mibBuilder.loadTexts: sshHostKeyGenerate.setDescription('For a set-request with a value of generate or update, a new host key will be generated in the background. When modified with generate, the desired change does not occur until the next system initialization whereas when modified with update the change goes into effect upon completion of the new key. In response to a get-request or a get-next-request the agent will respond ready except when a host key is being created in which case the agent responds generate.')
sshServerKeyLength = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 2048)).clone(768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerKeyLength.setStatus('mandatory')
if mibBuilder.loadTexts: sshServerKeyLength.setDescription("The bit length of the SSH server encryption key. The difference between the server and host key lengths should be greater than 128 bits. Corresponds directly to the value labeled 'Server Key Length:' in the SERVER SSH CHARACTERISTICS display.")
sshServerKeyTtl = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1440)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerKeyTtl.setStatus('mandatory')
if mibBuilder.loadTexts: sshServerKeyTtl.setDescription("The time in minutes that the server key remains valid. After this time the server key is automatically re-generated. Corresponds directly to the value labeled 'Server Key Timeout:' in the SERVER SSH CHARACTERISTICS display.")
sshServerMaxBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 33, 10, 23, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4096, 262144)).clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerMaxBufferSize.setStatus('mandatory')
if mibBuilder.loadTexts: sshServerMaxBufferSize.setDescription('The size of the four buffers used by SSH for input and output. These buffers are used for data coming from the console, going to the network, coming from the network and going to the console.')
xIpx = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 15))
xIpxSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 15, 1))
xIpxIf = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 15, 2))
xIpxNetbios = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 15, 3))
xIpxRip = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 15, 4))
xIpxSap = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 15, 5))
xIpxFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 15, 6))
xIpxPrinter = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 15, 8))
ipxRouting = MibScalar((1, 3, 6, 1, 4, 1, 33, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouting.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRouting.setDescription('Control for IPX routing services.')
ipxInternalNetwork = MibScalar((1, 3, 6, 1, 4, 1, 33, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInternalNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxInternalNetwork.setDescription('The IPX Internal Network to use on the the IPX Router.')
ipxIfTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 2, 1), )
if mibBuilder.loadTexts: ipxIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfTable.setDescription('A list of IPX interface entries.')
ipxIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1), ).setIndexNames((0, "MRVINREACH", "ipxIfIndex"))
if mibBuilder.loadTexts: ipxIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfEntry.setDescription('IPX interface parameters and counters.')
ipxIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfIndex.setDescription('An index value that uniquely identifies an IPX interface. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
ipxIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfState.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfState.setDescription('Control for IPX routing services for this interface.')
ipxIfNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfNetwork.setDescription('The IPX network number of the network to which this interface is attached.')
ipxIfFrameStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee8023", 2), ("ieee8022", 3), ("ieee802Snap", 4))).clone('ieee8023')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfFrameStyle.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFrameStyle.setDescription('Control for the CSMA/CD frame style to use on this interface.')
ipxIfFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFramesIn.setDescription('The number of IPX frames received on this interface.')
ipxIfFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFramesOut.setDescription('The number of IPX frames sent on this interface.')
ipxIfErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfErrors.setDescription('The number of IPX errors seen on this interface.')
ipxIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfTransitDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfTransitDelay.setDescription('The number of 55 millisecond ticks it takes for a packet to travel from one destination to another on the interface. A value of 0 means that the system will calculate this value based on the measured speed of the interface.')
ipxIfTransitDelayActual = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfTransitDelayActual.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfTransitDelayActual.setDescription('The number of 55 millisecond ticks it takes for a packet to travel from one destination to another on the interface.')
ipxIfProtocolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5))).clone(namedValues=NamedValues(("low", 1), ("medium", 3), ("high", 5))).clone('medium')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfProtocolPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfProtocolPriority.setDescription('This value defines the priority at which all Internet Routed packets will be placed on the WAN output queue.')
ipxIfWatchdogSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfWatchdogSpoof.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfWatchdogSpoof.setDescription('Control for whether or not this router responds to IPX watchog requests on this interface.')
ipxIfStatusNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfStatusNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfStatusNetwork.setDescription('The IPX network number that is actually in use on the attached interface. This value may have been learned via listening to the attached network.')
ipxNetbiosHopLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 15, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxNetbiosHopLimit.setStatus('mandatory')
if mibBuilder.loadTexts: ipxNetbiosHopLimit.setDescription('Maximum number of hops that an IPX Netbios packet may make.')
ipxNetbiosIfTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 3, 2), )
if mibBuilder.loadTexts: ipxNetbiosIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxNetbiosIfTable.setDescription('A list of IPX interface entries.')
ipxNetbiosIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 3, 2, 1), ).setIndexNames((0, "MRVINREACH", "ipxNetbiosIfIndex"))
if mibBuilder.loadTexts: ipxNetbiosIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxNetbiosIfEntry.setDescription('IPX interface parameters and counters.')
ipxNetbiosIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxNetbiosIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxNetbiosIfIndex.setDescription('An index value that uniquely identifies an IPX interface. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
ipxIfNetbiosForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfNetbiosForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfNetbiosForwarding.setDescription('Control whether Netbios packet will be forwarded in or out on this interface.')
ipxIfNetbiosIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfNetbiosIn.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfNetbiosIn.setDescription('The number of IPX Netbios frames received on this interface.')
ipxIfNetbiosOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfNetbiosOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfNetbiosOut.setDescription('The number of IPX Netbios frames sent on this interface.')
ipxRipIfTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 4, 1), )
if mibBuilder.loadTexts: ipxRipIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipIfTable.setDescription('A list of IPX interface entries.')
ipxRipIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 4, 1, 1), ).setIndexNames((0, "MRVINREACH", "ipxRipIfIndex"))
if mibBuilder.loadTexts: ipxRipIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipIfEntry.setDescription('IPX interface parameters and counters.')
ipxRipIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipIfIndex.setDescription('An index value that uniquely identifies an IPX interface. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
ipxIfRipBcst = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("propUpdateOnly", 3), ("demandCircuit", 4))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfRipBcst.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipBcst.setDescription('Control whether RIP packets will be broadcasted out this interface.')
ipxIfRipBcstDiscardTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 1, 1, 3), Integer32().clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfRipBcstDiscardTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipBcstDiscardTimeout.setDescription('The number of seconds to wait before discarding information learned from a RIP broadcast.')
ipxIfRipBcstTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 1, 1, 4), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfRipBcstTimer.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipBcstTimer.setDescription('The number of seconds to wait between sending out RIP broadcasts.')
ipxIfRipIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfRipIn.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipIn.setDescription('The number of RIP broadcasts received on this interface.')
ipxIfRipOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfRipOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipOut.setDescription('The number of RIP broadcasts sent on this interface.')
ipxIfRipAgedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfRipAgedOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipAgedOut.setDescription('The number of entries timed out and discarded on this interface.')
ipxRipTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 4, 2), )
if mibBuilder.loadTexts: ipxRipTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipTable.setDescription('A list of RIP entries.')
ipxRipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 4, 2, 1), ).setIndexNames((0, "MRVINREACH", "ipxRipNetwork"))
if mibBuilder.loadTexts: ipxRipEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipEntry.setDescription('IPX interface parameters and counters.')
ipxRipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipNetwork.setDescription('An IPX network number to which this router knows a path.')
ipxRipRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipRouter.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRouter.setDescription('The Ethernet address of an IPX router on this network.')
ipxRipInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipInterface.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipInterface.setDescription('The interface to reach the router. A value of ifIndex.')
ipxRipHops = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipHops.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipHops.setDescription('The number of hops to reach the router.')
ipxRipTransTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipTransTime.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipTransTime.setDescription('The number of 55 millisecond ticks it takes for a packet to travel to the router.')
ipxRipAge = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipAge.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipAge.setDescription('The age of the RIP entry in seconds.')
ipxRipRtTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 4, 3), )
if mibBuilder.loadTexts: ipxRipRtTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRtTable.setDescription('A list of RIP Routing entries.')
ipxRipRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 4, 3, 1), ).setIndexNames((0, "MRVINREACH", "ipxRipRtNetwork"), (0, "MRVINREACH", "ipxRipRtInterface"), (0, "MRVINREACH", "ipxRipRtOrigin"), (0, "MRVINREACH", "ipxRipRtRouter"))
if mibBuilder.loadTexts: ipxRipRtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRtEntry.setDescription('IPX Routing Entry information')
ipxRipRtNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipRtNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRtNetwork.setDescription('An IPX network number to which this router knows a path.')
ipxRipRtRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipRtRouter.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRtRouter.setDescription('The Ethernet address of an IPX router on this network.')
ipxRipRtInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipRtInterface.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRtInterface.setDescription('The interface to reach the router. A value of ifIndex.')
ipxRipRtHops = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRipRtHops.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRtHops.setDescription('The number of hops to reach the router.')
ipxRipRtTransTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRipRtTransTime.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRtTransTime.setDescription('The number of 55 millisecond ticks it takes for a packet to travel to the router.')
ipxRipRtOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ripLearned", 1), ("static", 2), ("nlspLearned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRipRtOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRtOrigin.setDescription('The source of the RIP entry, either Learned via RIP or Static.')
ipxRipRtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRipRtRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRipRtRowStatus.setDescription('Create or Delete RIP routing table entries.')
ipxSapIfTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 5, 1), )
if mibBuilder.loadTexts: ipxSapIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapIfTable.setDescription('A list of IPX interface entries.')
ipxSapIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 5, 1, 1), ).setIndexNames((0, "MRVINREACH", "ipxSapIfIndex"))
if mibBuilder.loadTexts: ipxSapIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapIfEntry.setDescription('IPX interface parameters and counters.')
ipxSapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapIfIndex.setDescription('An index value that uniquely identifies an IPX interface. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
ipxIfSapBcst = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("propUpdateOnly", 3), ("demandCircuit", 4))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfSapBcst.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapBcst.setDescription('Control whether SAP packets will be broadcasted out this interface.')
ipxIfSapBcstDiscardTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 1, 1, 3), Integer32().clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfSapBcstDiscardTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapBcstDiscardTimeout.setDescription('The number of seconds to wait before discarding information learned from a SAP broadcast.')
ipxIfSapBcstTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 1, 1, 4), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfSapBcstTimer.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapBcstTimer.setDescription('The number of seconds to wait between sending out SAP broadcasts.')
ipxIfSapIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapIn.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapIn.setDescription('The number SAP broadcasts received on this interface.')
ipxIfSapOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapOut.setDescription('The number SAP broadcasts sent on this interface.')
ipxIfSapAgedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapAgedOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapAgedOut.setDescription('The number entries for this interface discarded due to aging timeout.')
ipxSapTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 5, 2), )
if mibBuilder.loadTexts: ipxSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapTable.setDescription('A list of SAP entries.')
ipxSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 5, 2, 1), ).setIndexNames((0, "MRVINREACH", "ipxSapName"), (0, "MRVINREACH", "ipxSapType"))
if mibBuilder.loadTexts: ipxSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapEntry.setDescription('IPX interface parameters and counters.')
ipxSapName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(48, 48)).setFixedLength(48)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapName.setDescription('The name of the service, null filled.')
ipxSapNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapNetwork.setDescription("The IPX network number on which the service's host resides.")
ipxSapHost = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapHost.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapHost.setDescription('The Ethernet address of the IPX host of the service.')
ipxSapSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapSocket.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSocket.setDescription('The socket number of the service on the host.')
ipxSapInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapInterface.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapInterface.setDescription('The interface of the router in the direction of the service. A value of ifIndex.')
ipxSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("user", 1), ("userGroup", 2), ("printQueue", 3), ("novellFileServer", 4), ("jobServer", 5), ("gateway1", 6), ("printServer", 7), ("archiveQueue", 8), ("archiveServer", 9), ("jobQueue", 10), ("administration", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapType.setDescription('The type of the service. The enumeration is an incomplete set of all possible values.')
ipxSapAge = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapAge.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapAge.setDescription('The age of the Sap entry in seconds.')
ipxSapSvTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 5, 3), )
if mibBuilder.loadTexts: ipxSapSvTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvTable.setDescription('A list of SAP entries.')
ipxSapSvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1), ).setIndexNames((0, "MRVINREACH", "ipxSapSvName"), (0, "MRVINREACH", "ipxSapSvType"), (0, "MRVINREACH", "ipxSapSvOrigin"), (0, "MRVINREACH", "ipxSapSvNetwork"), (0, "MRVINREACH", "ipxSapSvSocket"), (0, "MRVINREACH", "ipxSapSvHost"))
if mibBuilder.loadTexts: ipxSapSvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvEntry.setDescription('IPX interface parameters and counters.')
ipxSapSvName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapSvName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvName.setDescription('The name of the service.')
ipxSapSvNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapSvNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvNetwork.setDescription("The IPX network number on which the service's host resides.")
ipxSapSvHost = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapSvHost.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvHost.setDescription('The Ethernet address of the IPX host of the service.')
ipxSapSvSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapSvSocket.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvSocket.setDescription('The socket number of the service on the host.')
ipxSapSvInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapSvInterface.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvInterface.setDescription('The interface of the router in the direction of the service. A value of ifIndex.')
ipxSapSvOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipxSapLearned", 1), ("ipxStatic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapSvOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvOrigin.setDescription('The source of the RIP entry, either Learned via RIP or Static.')
ipxSapSvType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("user", 1), ("userGroup", 2), ("printQueue", 3), ("novellFileServer", 4), ("jobServer", 5), ("gateway1", 6), ("printServer", 7), ("archiveQueue", 8), ("archiveServer", 9), ("jobQueue", 10), ("administration", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapSvType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvType.setDescription('The type of the service. The enumeration is an incomplete set of all possible values.')
ipxSapSvHops = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSapSvHops.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvHops.setDescription('The number of hops to the Service.')
ipxSapSvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSapSvRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvRowStatus.setDescription('Create or Delete SAP Service table entries.')
ipxSapSvAge = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 5, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSapSvAge.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSapSvAge.setDescription('The age of the Sap entry in seconds.')
ipxIfFilterTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 6, 1), )
if mibBuilder.loadTexts: ipxIfFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterTable.setDescription('A list of IPX interface Source and Destination address Filter entries.')
ipxIfFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1), ).setIndexNames((0, "MRVINREACH", "ipxIfIndex"), (0, "MRVINREACH", "ipxIfFilterDestNetwork"), (0, "MRVINREACH", "ipxIfFilterDestNode"), (0, "MRVINREACH", "ipxIfFilterSourceNetwork"), (0, "MRVINREACH", "ipxIfFilterSourceNode"), (0, "MRVINREACH", "ipxIfFilterPacketType"), (0, "MRVINREACH", "ipxIfFilterStatusDestNetworkAll"), (0, "MRVINREACH", "ipxIfFilterStatusDestNodeAll"), (0, "MRVINREACH", "ipxIfFilterStatusSourceNetworkAll"), (0, "MRVINREACH", "ipxIfFilterStatusSourceNodeAll"), (0, "MRVINREACH", "ipxIfFilterStatusPacketTypeAll"))
if mibBuilder.loadTexts: ipxIfFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterEntry.setDescription('IPX Source and Destination interface Filters.')
ipxIfFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterIndex.setDescription('The interface to which this IPX Address filter applies. A value of ifIndex.')
ipxIfFilterDestNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterDestNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterDestNetwork.setDescription('The destination IPX network to be filtered.')
ipxIfFilterDestNode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterDestNode.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterDestNode.setDescription('The destination IPX node to be filtered.')
ipxIfFilterSourceNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterSourceNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterSourceNetwork.setDescription('The destination IPX network to be filtered.')
ipxIfFilterSourceNode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterSourceNode.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterSourceNode.setDescription('The destination IPX node to be filtered.')
ipxIfFilterPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterPacketType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterPacketType.setDescription('The IPX packet type to be filtered.')
ipxIfFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterAction.setDescription('The IPX filter action to be taken, either Forward or Discard.')
ipxIfFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfFilterRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterRowStatus.setDescription('The IPX Filter create or delete function.')
ipxIfFilterStatusDestNetworkAll = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterStatusDestNetworkAll.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterStatusDestNetworkAll.setDescription('The IPX Filter flag meaning ALL destination networks.')
ipxIfFilterStatusDestNodeAll = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterStatusDestNodeAll.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterStatusDestNodeAll.setDescription('The IPX Filter flag meaning ALL destination nodes.')
ipxIfFilterStatusSourceNetworkAll = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterStatusSourceNetworkAll.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterStatusSourceNetworkAll.setDescription('The IPX Filter flag meaning ALL source networks.')
ipxIfFilterStatusSourceNodeAll = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterStatusSourceNodeAll.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterStatusSourceNodeAll.setDescription('The IPX Filter flag meaning ALL source nodes.')
ipxIfFilterStatusPacketTypeAll = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfFilterStatusPacketTypeAll.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfFilterStatusPacketTypeAll.setDescription('The IPX Filter flag meaning ALL packet types.')
ipxIfRipFilterTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 6, 2), )
if mibBuilder.loadTexts: ipxIfRipFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipFilterTable.setDescription('A list of IPX interface RIP Filter entries.')
ipxIfRipFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 6, 2, 1), ).setIndexNames((0, "MRVINREACH", "ipxIfIndex"), (0, "MRVINREACH", "ipxIfRipFilterType"), (0, "MRVINREACH", "ipxIfRipFilterNetwork"), (0, "MRVINREACH", "ipxIfRipFilterNetworkAll"), (0, "MRVINREACH", "ipxIfRipFilterHost"))
if mibBuilder.loadTexts: ipxIfRipFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipFilterEntry.setDescription('IPX RIP interface Filters.')
ipxIfRipFilterNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfRipFilterNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipFilterNetwork.setDescription('The IPX RIP network to be filtered.')
ipxIfRipFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("import", 1), ("export", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfRipFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipFilterType.setDescription('The IPX RIP filter type, either IMPORT or EXPORT.')
ipxIfRipFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfRipFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipFilterAction.setDescription('The IPX RIP filter action to be taken, either ALLOW or DENY.')
ipxIfRipFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfRipFilterRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipFilterRowStatus.setDescription('The IPX RIP Filter create or delete function.')
ipxIfRipFilterNetworkAll = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfRipFilterNetworkAll.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipFilterNetworkAll.setDescription('The IPX RIP Filter flag meaning filter ALL networks.')
ipxIfRipFilterHost = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfRipFilterHost.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfRipFilterHost.setDescription('The RIP Filter IPX Host Address from which RIP will ALLOW/DENY IMPORT of routes.')
ipxIfSapFilterTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 6, 3), )
if mibBuilder.loadTexts: ipxIfSapFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterTable.setDescription('A list of IPX interface SAP Filter entries.')
ipxIfSapFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1), ).setIndexNames((0, "MRVINREACH", "ipxIfIndex"), (0, "MRVINREACH", "ipxIfSapFilterType"), (0, "MRVINREACH", "ipxIfSapFilterName"), (0, "MRVINREACH", "ipxIfSapFilterServiceType"), (0, "MRVINREACH", "ipxIfSapFilterServiceTypeAll"), (0, "MRVINREACH", "ipxIfSapFilterNetwork"), (0, "MRVINREACH", "ipxIfSapFilterNetworkAll"), (0, "MRVINREACH", "ipxIfSapFilterHost"))
if mibBuilder.loadTexts: ipxIfSapFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterEntry.setDescription('IPX SAP interface Filters.')
ipxIfSapFilterNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapFilterNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterNetwork.setDescription('The IPX SAP network to be filtered.')
ipxIfSapFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("import", 1), ("export", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterType.setDescription('The IPX SAP filter type, either IMPORT or EXPORT.')
ipxIfSapFilterServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapFilterServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterServiceType.setDescription('The IPX SAP service type to which this filter applies.')
ipxIfSapFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfSapFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterAction.setDescription('The IPX SAP filter action to be taken, either ALLOW or DENY.')
ipxIfSapFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxIfSapFilterRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterRowStatus.setDescription('The IPX SAP Filter create or delete function.')
ipxIfSapFilterNetworkAll = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapFilterNetworkAll.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterNetworkAll.setDescription('The IPX SAP Filter flag meaning filter ALL networks.')
ipxIfSapFilterServiceTypeAll = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapFilterServiceTypeAll.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterServiceTypeAll.setDescription('The IPX SAP Filter flag meaning filter ALL service types.')
ipxIfSapFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterName.setDescription('The name of the service to be filtered.')
ipxIfSapFilterHost = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 6, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxIfSapFilterHost.setStatus('mandatory')
if mibBuilder.loadTexts: ipxIfSapFilterHost.setDescription('The IPX Host address from which SAP will ALLOW/DENY IMPORT of services .')
ipxPrinterPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 15, 8, 1), )
if mibBuilder.loadTexts: ipxPrinterPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterPortTable.setDescription('A list of IPX printer character port entries.')
ipxPrinterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 15, 8, 1, 1), ).setIndexNames((0, "MRVINREACH", "ipxPrinterPortIndex"))
if mibBuilder.loadTexts: ipxPrinterPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterPortEntry.setDescription('IPX printer parameter values for a character port.')
ipxPrinterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxPrinterPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterPortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Proposed Standard Internet Character MIB.')
ipxPrinterPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxPrinterPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterPortStatus.setDescription("Status of this entry. Setting the value to 'invalid' invalidates the entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table.")
ipxPrinterPortServer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxPrinterPortServer.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterPortServer.setDescription('The name of an active print server on the network.')
ipxPrinterPortPrinter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxPrinterPortPrinter.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterPortPrinter.setDescription('An available remote printer on ixpPrinterPortServer.')
ipxTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 15, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 300)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ipxTimeout.setDescription('A control to set the the time at which a print job from a print server will be timed out and the port freed.')
ipxPrinterEthernet = MibScalar((1, 3, 6, 1, 4, 1, 33, 15, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxPrinterEthernet.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterEthernet.setDescription('Control for use of Ethernet-style message framing, with the IPX protocol type. Mutually exclusive with ipxPrinterMac, ipxPrinterMac802_2_Snap, and ipxPrinterMac802_2.')
ipxPrinterMac = MibScalar((1, 3, 6, 1, 4, 1, 33, 15, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxPrinterMac.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterMac.setDescription('Control for use of MAC-only message framing, with no protocol type. Mutually exclusive with ipxPrinterEthernet, ipxPrinterMac802_2_Snap, and ipxPrinterMac802_2.')
ipxPrinterMac802_2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 15, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setLabel("ipxPrinterMac802-2").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxPrinterMac802_2.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterMac802_2.setDescription('Control for use of MAC message framing with 802.2 framing. Mutually exclusive with ipxPrinterEthernet, ipxPrinterMac, and ipxPrinterMac802_2_Snap.')
ipxPrinterMac802_2_Snap = MibScalar((1, 3, 6, 1, 4, 1, 33, 15, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setLabel("ipxPrinterMac802-2-Snap").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxPrinterMac802_2_Snap.setStatus('mandatory')
if mibBuilder.loadTexts: ipxPrinterMac802_2_Snap.setDescription('Control for use of MAC-only message framing with 802 Snap framing. Mutually exclusive with ipxPrinterEthernet, ipxPrinterMac, and ipxPrinterMac802_2.')
xLat = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 3))
latAnnounceServices = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latAnnounceServices.setStatus('mandatory')
if mibBuilder.loadTexts: latAnnounceServices.setDescription("Control for automatic, periodic announcement of local services to the network. Corresponds directly to SERVER ANNOUNCEMENTS and the presence of the label 'Announcements' following the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display.")
latCircuitTimer = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latCircuitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: latCircuitTimer.setDescription("Number of milleseconds to collect port input data before sending it to the host. Corresponds directly to SERVER CIRCUIT TIMER and the value labeled 'Circuit Timer:' in the SERVER CHARACTERISTICS display.")
latIdentificationLengthLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latIdentificationLengthLimit.setStatus('mandatory')
if mibBuilder.loadTexts: latIdentificationLengthLimit.setDescription("Maximum number of characters to store in the instances of latVisibleServiceIdentification. Corresponds directly to SERVER IDENTIFICATION SIZE and the value labeled 'Identification Size:' in the SERVER CHARACTERISTICS display.")
latKeepaliveTimer = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latKeepaliveTimer.setStatus('mandatory')
if mibBuilder.loadTexts: latKeepaliveTimer.setDescription("Number of seconds of inactivity before sending a null message to the host. Corresponds directly to SERVER KEEPALIVE TIMER and the value labeled 'Keepalive Timer:' in the SERVER CHARACTERISTICS display.")
latMulticastTimer = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latMulticastTimer.setStatus('mandatory')
if mibBuilder.loadTexts: latMulticastTimer.setDescription("Number of seconds between transmission of local service announcements. Corresponds directly to SERVER MULTICAST TIMER and the value labeled 'Multicast Timer:' in the SERVER CHARACTERISTICS display.")
latNodeLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latNodeLimit.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeLimit.setDescription("Maximum number of service nodes to keep in the node table. Corresponds directly to SERVER NODE LIMIT and the value labeled 'Node Limit:' in the SERVER CHARACTERISTICS display.")
latNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latNumber.setStatus('mandatory')
if mibBuilder.loadTexts: latNumber.setDescription("An arbitrary number assigned and used for administrative purposes. Corresponds directly to SERVER NUMBER and the value labeled 'Number:' in the SERVER CHARACTERISTICS display.")
latRetransmitLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latRetransmitLimit.setStatus('mandatory')
if mibBuilder.loadTexts: latRetransmitLimit.setDescription("Maximum number of times to retransmit an unacknowledged message. Corresponds directly to SERVER RETRANSMIT LIMIT and the value labeled 'Retransmit Limit:' in the SERVER CHARACTERISTICS display.")
latLocalServiceGroups = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latLocalServiceGroups.setStatus('mandatory')
if mibBuilder.loadTexts: latLocalServiceGroups.setDescription("The list of group numbers allowed to use local services, where a group number is in the range 0-255. The OCTET STRING contains a bitmap, with one bit for each group. Corresponding bit numbers start with 0 as the high-order bit of the first octet. Corresponds directly to SERVER SERVICE GROUPS and the value labeled 'Service Groups:' in the SERVER CHARACTERISTICS display.")
latGroupPurge = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latGroupPurge.setStatus('mandatory')
if mibBuilder.loadTexts: latGroupPurge.setDescription("Control for automatic deletion of all node table entries when latServiceGroups or latPortCurrentGroups is changed. Corresponds directly to SERVER PURGE GROUP and the presence of the label 'Purge Group' following the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display.")
latNodePurge = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latNodePurge.setStatus('mandatory')
if mibBuilder.loadTexts: latNodePurge.setDescription("Control for automatic deletion of all node table entries with status 'reachable' when the number of entries exceeds latNodeLimit. Corresponds directly to SERVER PURGE NODE and the presence of the label 'Purge Node' following the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display.")
latNodesRejected = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodesRejected.setStatus('mandatory')
if mibBuilder.loadTexts: latNodesRejected.setDescription("Number of nodes not added to the node table because there was no room. Corresponds directly to the value labeled 'Discarded Nodes:' in the SERVER STATUS display.")
latInMessages = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInMessages.setStatus('mandatory')
if mibBuilder.loadTexts: latInMessages.setDescription("Number of LAT messages received. Corresponds directly to the value labeled 'Messages Received:' in the SERVER COUNTERS display.")
latOutMessages = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latOutMessages.setStatus('mandatory')
if mibBuilder.loadTexts: latOutMessages.setDescription("Number of LAT messages sent. Corresponds directly to the value labeled 'Messages Transmitted:' in the SERVER COUNTERS display.")
latInSessionsAccepted = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInSessionsAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: latInSessionsAccepted.setDescription("Number of incoming LAT session connection attempts accepted. Corresponds directly to the value labeled 'Solicitations Accepted:' in the SERVER COUNTERS display.")
latInSessionsRejected = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInSessionsRejected.setStatus('mandatory')
if mibBuilder.loadTexts: latInSessionsRejected.setDescription("Number of incoming LAT session connection attempts rejected. Corresponds directly to the value labeled 'Solicitations Rejected:' in the SERVER COUNTERS display.")
latAddressChange = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latAddressChange.setStatus('mandatory')
if mibBuilder.loadTexts: latAddressChange.setDescription("Number of times a service announcement contained a node name already in the visible service table but with a different address. Corresponds directly to the value labeled 'Multiple Node Addresses:' in the SERVER COUNTERS display.")
latInDuplicates = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInDuplicates.setStatus('mandatory')
if mibBuilder.loadTexts: latInDuplicates.setDescription("Number of duplicate LAT messages received. Corresponds directly to the value labeled 'Duplicates Received:' in the SERVER COUNTERS display.")
latOutRetransmits = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latOutRetransmits.setStatus('mandatory')
if mibBuilder.loadTexts: latOutRetransmits.setDescription("Number of LAT messages retransmitted due to no acknowledgement. Corresponds directly to the value labeled 'Messages Re-transmitted:' in the SERVER COUNTERS display.")
latInBadMessages = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInBadMessages.setStatus('mandatory')
if mibBuilder.loadTexts: latInBadMessages.setDescription("Number of LAT messages received with invalid format. Corresponds directly to the value labeled 'Illegal Messages Rcv'd:' in the SERVER COUNTERS display.")
latInBadSlots = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInBadSlots.setStatus('mandatory')
if mibBuilder.loadTexts: latInBadSlots.setDescription("Number of LAT messages received with invalid slot format. Corresponds directly to the value labeled 'Illegal Slots Rcv'd:' in the SERVER COUNTERS display.")
latInBadMulticasts = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latInBadMulticasts.setStatus('mandatory')
if mibBuilder.loadTexts: latInBadMulticasts.setDescription("Number of multicast LAT messages received with invalid format. Corresponds directly to the value labeled 'Illegal Multicasts Rcv'd:' in the SERVER COUNTERS display.")
latPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 3, 23), )
if mibBuilder.loadTexts: latPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: latPortTable.setDescription('A list of LAT character port entries.')
latPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 3, 23, 1), ).setIndexNames((0, "MRVINREACH", "latPortIndex"))
if mibBuilder.loadTexts: latPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: latPortEntry.setDescription('LAT parameter values for a port.')
latPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: latPortIndex.setDescription('An index value that uniquely identifies a port. The port identified by a particular value of this index is the same port as identified by charPortIndex in the Character MIB [11].')
latPortAuthorizedGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 23, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latPortAuthorizedGroups.setStatus('mandatory')
if mibBuilder.loadTexts: latPortAuthorizedGroups.setDescription("The list of group numbers to which the port is allowed to set access, where a group number is in the range 0-255. The OCTET STRING contains a bitmap, with one bit for each group. Corresponding bit numbers start with 0 as the high-order bit of the first octet. Corresponds directly to PORT AUTHORIZED GROUPS and the value labeled 'Authorized Groups:' in the PORT CHARACTERISTICS display.")
latPortAutoPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latPortAutoPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: latPortAutoPrompt.setDescription("Control for automatic stimulation of a host prompt upon forming a new session. Corresponds directly to PORT AUTOPROMPT and the presence of the label 'Autoprompt' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
latPortCurrentGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 23, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latPortCurrentGroups.setStatus('mandatory')
if mibBuilder.loadTexts: latPortCurrentGroups.setDescription("The list of group numbers to which the port currently has set access, where a group number is in the range 0-255. The OCTET STRING contains a bitmap, with one bit for each group. Corresponding bit numbers start with 0 as the high-order bit of the first octet. Corresponds directly to PORT GROUPS and the value labeled 'Groups:' in the PORT CHARACTERISTICS display.")
latPortRemoteModification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latPortRemoteModification.setStatus('mandatory')
if mibBuilder.loadTexts: latPortRemoteModification.setDescription("Control to allow the remote system to modify certain physical port characteristics. Corresponds directly to PORT REMOTE MODIFICATION and the presence of the label 'Remote Modification' following the label 'Enabled Characteristics:' in the PORT CHARACTERISTICS display.")
latOfferedServiceTable = MibTable((1, 3, 6, 1, 4, 1, 33, 3, 24), )
if mibBuilder.loadTexts: latOfferedServiceTable.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServiceTable.setDescription('A list of offered service entries.')
latOfferedServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 3, 24, 1), ).setIndexNames((0, "MRVINREACH", "latOfferedServiceName"))
if mibBuilder.loadTexts: latOfferedServiceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServiceEntry.setDescription('Parameter values for an offered service entry.')
latOfferedServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latOfferedServiceName.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServiceName.setDescription("The name of an offered service. Corresponds directly to the name in a SERVICE command and the value labeled 'Service:' in the SERVICE CHARACTERISTICS display.")
latOfferedServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServiceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServiceStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry, which corresponds directly to the CLEAR SERVICE command. Actual removal of the entry is implementation specific.")
latOfferedServiceAllowConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServiceAllowConnections.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServiceAllowConnections.setDescription("Control for allowing incoming connections to the service. Corresponds directly to SERVICE CONNECTIONS and the presence of the label 'Connections' following the label 'Enabled Characteristics:' in the SERVICE CHARACTERISTICS display.")
latOfferedServiceIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServiceIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServiceIdentification.setDescription("Text to identify a service. Corresponds directly to SERVICE IDENTIFICATION and the value labeled 'Identification:' in the SERVICE CHARACTERISTICS display.")
latOfferedServicePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServicePassword.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServicePassword.setDescription("The password a user must supply to use the service. Corresponds directly to SERVICE PASSWORD and the presence of the label 'Password' following the label 'Enabled Characteristics:' in the SERVICE CHARACTERISTICS display. When setting this value, the management system must supply eight octets, filling with zeros from the first octet. That is, the value '1ab42' would be expressed as '0.0.0.0.0.1.ab.42'. Setting the value to zero disables the password check. When returning this value, the agent always returns a zero length OCTET STRING.")
latOfferedServicePortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServicePortMap.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServicePortMap.setDescription("The list of character ports offer the service. The OCTET STRING contains a bitmap, with one bit for each port, and enough octets for all the ports on the system. Port numbers are as defined for charPortIndex in the Character MIB [11]. Corresponding bit numbers start with 1 as the high-order bit of the first octet. Corresponds directly to port-list portion of SERVICE PORTS and the value labeled 'Ports:' in the SERVICE CHARACTERISTICS display.")
latOfferedServiceQueuing = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServiceQueuing.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServiceQueuing.setDescription("Control for allowing queuing of incoming connections to the service when the service is busy. Corresponds directly to SERVICE QUEUE and the presence of the label 'Queuing' following the label 'Enabled Characteristics:' in the SERVICE CHARACTERISTICS display.")
latOfferedServiceEnvironmentalManager = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latOfferedServiceEnvironmentalManager.setStatus('mandatory')
if mibBuilder.loadTexts: latOfferedServiceEnvironmentalManager.setDescription('Control indicating whether Environmental Management services are offered.')
latVisibleServiceTable = MibTable((1, 3, 6, 1, 4, 1, 33, 3, 25), )
if mibBuilder.loadTexts: latVisibleServiceTable.setStatus('mandatory')
if mibBuilder.loadTexts: latVisibleServiceTable.setDescription('A list of visible service entries.')
latVisibleServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 3, 25, 1), ).setIndexNames((0, "MRVINREACH", "latVisibleServiceName"))
if mibBuilder.loadTexts: latVisibleServiceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: latVisibleServiceEntry.setDescription('Parameter values for a visible service entry.')
latVisibleServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 25, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latVisibleServiceName.setStatus('mandatory')
if mibBuilder.loadTexts: latVisibleServiceName.setDescription("The name of a visible service. Corresponds directly to the name in a SERVICE command and the value labeled 'Service Name' in the SERVICE SUMMARY display.")
latVisibleServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("available", 1), ("unavailable", 2), ("unknown", 3), ("unreachable", 4), ("reachable", 5), ("connected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latVisibleServiceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: latVisibleServiceStatus.setDescription("Status of communication with the service. Corresponds directly to the value labeled 'Status' in the SERVICE SUMMARY display.")
latVisibleServiceNode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 25, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latVisibleServiceNode.setStatus('mandatory')
if mibBuilder.loadTexts: latVisibleServiceNode.setDescription('Name of a node offering the service. Corresponds directly to the value labeled Node Name in the SERVICE STATUS display.')
latVisibleServiceConnectedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 25, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latVisibleServiceConnectedSessions.setStatus('mandatory')
if mibBuilder.loadTexts: latVisibleServiceConnectedSessions.setDescription("Number of connected sessions to the service. Corresponds directly to the number with the value 'Connected', labeled 'Status' in the SERVICE SUMMARY display.")
latVisibleServiceIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 25, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latVisibleServiceIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: latVisibleServiceIdentification.setDescription("Text to identify a service. The length is subject to limitation by latIdentificationLengthLimit. Corresponds directly to the value labeled 'Identification:' in the SERVICE SUMMARY display.")
latVisibleServiceRating = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 25, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latVisibleServiceRating.setStatus('mandatory')
if mibBuilder.loadTexts: latVisibleServiceRating.setDescription('Relative capacity of the service to accept additional sessions. Corresponds directly to value labeled Rating in the SERVICE STATUS display.')
latNodeTable = MibTable((1, 3, 6, 1, 4, 1, 33, 3, 26), )
if mibBuilder.loadTexts: latNodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeTable.setDescription('A list of node entries.')
latNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 3, 26, 1), ).setIndexNames((0, "MRVINREACH", "latNodeName"))
if mibBuilder.loadTexts: latNodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeEntry.setDescription('Parameter values for a node entry.')
latNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeName.setDescription("The name of a node. Corresponds directly to the value labeled 'Node:' in the NODE STATUS display.")
latNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("available", 1), ("unavailable", 2), ("unknown", 3), ("unreachable", 4), ("reachable", 5), ("connected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeStatus.setDescription("Status of communication with the node. Corresponds directly to the value labeled 'Status' in the NODE STATUS display.")
latNodeConnectedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeConnectedSessions.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeConnectedSessions.setDescription("Number of connected sessions to the node. Corresponds directly to the number with the value 'Connected', labeled 'Status' in the NODE STATUS display.")
latNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeAddress.setDescription("Ethernet address of the node. Corresponds directly to the value labeled 'Address:' in the NODE STATUS display.")
latNodeDataLinkFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeDataLinkFrame.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeDataLinkFrame.setDescription("Maximum Ethernet frame used by the node. Corresponds directly to the value labeled 'Data Link Frame Size:' in the NODE STATUS display.")
latNodeIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeIdentification.setDescription("Text that identifies the node. The size is subject to limitation by latIdentificationLengtLimit. Corresponds directly to the value labeled 'Identification' in the NODE STATUS display.")
latNodeGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeGroups.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeGroups.setDescription("The list of group numbers to which the node belongs, where a group number is in the range 0-255. The OCTET STRING contains a bitmap, with one bit for each group. Corresponding bit numbers start with 0 as the high-order bit of the first octet. Corresponds directly to the value labeled 'Node Groups:' in the NODE STATUS display.")
latNodeServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeServiceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeServiceNumber.setDescription('Number of entries for the node in the node service table. Corresponds indirectly to the list of services in the NODE STATUS display.')
latNodeZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latNodeZero.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeZero.setDescription("Control to zero counters kept for the node. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' causes all the system's counters to be zeroed. Corresponds to the ZERO NODE command.")
latNodeZeroTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeZeroTime.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeZeroTime.setDescription("The number of hundredths of a second since the most recent zeroing of the counters kept for the node, such as through execution of sysZeroAll or latNodeZero. Corresponds directly to the value labeled 'Seconds Since Zeroed:' in the NODE COUNTERS display.")
latNodeInMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInMessages.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeInMessages.setDescription("The number of LAT messages received from the node. Corresponds directly to the value labeled 'Messages Received:' in the NODE COUNTERS display.")
latNodeOutMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeOutMessages.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeOutMessages.setDescription("The number of LAT messages sent to the node. Corresponds directly to the value labeled 'Messages Transmitted:' in the NODE COUNTERS display.")
latNodeInSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInSlots.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeInSlots.setDescription("The number of LAT slots received from the node. Corresponds directly to the value labeled 'Slots Received:' in the NODE COUNTERS display.")
latNodeOutSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeOutSlots.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeOutSlots.setDescription("The number of LAT slots sent to the node. Corresponds directly to the value labeled 'Slots Transmitted:' in the NODE COUNTERS display.")
latNodeInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeInBytes.setDescription("The total number of bytes received from the node, including Ethernet overhead. Corresponds directly to the value labeled 'Bytes Received:' in the NODE COUNTERS display.")
latNodeOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeOutBytes.setDescription("The total number of bytes sent to the node, including Ethernet overhead. Corresponds directly to the value labeled 'Bytes Transmitted:' in the NODE COUNTERS display.")
latNodeAddressChange = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeAddressChange.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeAddressChange.setDescription("The number of times a LAT message multicast by the node had a different Ethernet address from the previous time. Corresponds directly to the value labeled 'Multiple Node Addresses:' in the NODE COUNTERS display.")
latNodeInDuplicates = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInDuplicates.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeInDuplicates.setDescription("The number of duplicate LAT message received from the node. Corresponds directly to the value labeled 'Duplicates Received:' in the NODE COUNTERS display.")
latNodeOutRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeOutRetransmits.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeOutRetransmits.setDescription("The number of LAT message retransmitted to the node due to lack of acknowledgement. Corresponds directly to the value labeled 'Messages Re-transmitted:' in the NODE COUNTERS display.")
latNodeInBadMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInBadMessages.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeInBadMessages.setDescription("The number of LAT message received from the node with invalid format. Corresponds directly to the value labeled 'Illegal Messages Received:' in the NODE COUNTERS display.")
latNodeInBadSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInBadSlots.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeInBadSlots.setDescription("The number of LAT slots received from the node with invalid format. Corresponds directly to the value labeled 'Illegal Slots Received:' in the NODE COUNTERS display.")
latNodeInSessionsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInSessionsAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeInSessionsAccepted.setDescription("The number of LAT session connection attempts received from the node and accepted. Corresponds directly to the value labeled 'Solicitations Accepted:' in the NODE COUNTERS display.")
latNodeInSessionsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 3, 26, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latNodeInSessionsRejected.setStatus('mandatory')
if mibBuilder.loadTexts: latNodeInSessionsRejected.setDescription("The number of LAT session connection attempts received from the node and rejected. Corresponds directly to the value labeled 'Solicitations Rejected:' in the NODE COUNTERS display.")
latSolicits = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latSolicits.setStatus('mandatory')
if mibBuilder.loadTexts: latSolicits.setDescription("Control for multicast solicitation of LAT services. Corresponds directly to SERVER LAT SOLICITAIONS and the presence of the label 'LAT SOLICITATIONS' following the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display.")
latImmediateAck = MibScalar((1, 3, 6, 1, 4, 1, 33, 3, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latImmediateAck.setStatus('mandatory')
if mibBuilder.loadTexts: latImmediateAck.setDescription("Control for LAT to provide an immediate ACK, and not to wait for the timer to expire. Corresponds directly to SERVER LAT IMMEDIATE ACK and the presence of the label 'LAT Immediate Ack following the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display.")
xParamClient = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 7))
paramClientLoaderName = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramClientLoaderName.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientLoaderName.setDescription("The name of the system that most recently provided this system's stored parameters. Corresponds directly to the name value labeled 'Loaded From:' in the PARAMETER SERVER display.")
paramClientLoaderAddressType = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 2), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramClientLoaderAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientLoaderAddressType.setDescription("The type of network address contained in paramClientLoaderAddress. 'unknown' means no address has been defined. 'other' means no other type value applies. 'local' means there is no address and parameters were loaded from local storage. 'ip' is an Internet IP address. 'ethernet' is an 802.3 MAC address. Corresponds indirectly to the address value labeled 'Loaded From:' in the PARAMETER SERVER display.")
paramClientLoaderAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramClientLoaderAddress.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientLoaderAddress.setDescription("The network address of the system that most recently provided this system's stored parameters. Corresponds directly to the address value labeled 'Loaded From:' in the PARAMETER SERVER display.")
paramClientParameterVersion = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramClientParameterVersion.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientParameterVersion.setDescription("The version number of the parameters as stored in this system's local memory. Corresponds directly to SERVER PARAMETER VERSION and the value labeled 'Last Update Version:' in the PARAMETER SERVER display.")
paramClientUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 5), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramClientUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientUpdateTime.setDescription("This system's local date and time when it last attempted to store parameters with a parameter server. Corresponds directly to the values labeled 'Last Update Date:' and 'Last Update Time:' in the PARAMETER SERVER display.")
paramClientServerCheck = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramClientServerCheck.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientServerCheck.setDescription("Control over whether or not this system is allowed to check for additional parameter servers. 'enabled' allows checking. Corresponds directly to PARAMETER SERVER CHECK and the presence of PARAMETER POLLING under the label 'Enabled Characteristics' in the SERVER CHARACTERISTICS display.")
paramClientCheckInterval = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramClientCheckInterval.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientCheckInterval.setDescription("The number of minutes between checks for additional parameter servers. Corresponds directly to PARAMETER SERVER CHECK TIMER and the value labeled 'Check Timer:' in the PARAMETER SERVER display.")
paramClientCheckNow = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramClientCheckNow.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientCheckNow.setDescription("Control to cause this system to immediately check for additional parameter servers. The agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' causes a check to be started. Corresponds to the CHECK PARAMETER SERVER command.")
paramClientServerLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramClientServerLimit.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientServerLimit.setDescription("The maximum number of parameter servers this system is allowed to remember at the same time. Corresponds directly to PARAMETER SERVER LIMIT and the value labeled 'Parameter Server Limit:' in the PARAMETER SERVER display.")
paramClientRetransmitInterval = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramClientRetransmitInterval.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientRetransmitInterval.setDescription("The number of minutes between this system's attempts to store new parameters with a server that has not acknowledged previous attempts. Corresponds directly to PARAMETER SERVER RETRANSMIT TIMER and the value labeled 'Retransmit Timer: in the PARAMETER SERVER display.")
paramClientRetransmitLimit = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramClientRetransmitLimit.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientRetransmitLimit.setDescription("The maximum number of attempts by this system to store new parameters with a server that has not acknowledged previous attempts. Corresponds directly to PARAMETER SERVER RETRANSMIT LIMIT and the value labeled 'Retransmit Limit:' in the PARAMETER SERVER display.")
paramClientState = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("idle", 2), ("internal1", 3), ("internal2", 4), ("internal3", 5), ("internal4", 6), ("internal5", 7), ("internal6", 8), ("internal7", 9), ("internal8", 10), ("hold", 11), ("retry", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramClientState.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientState.setDescription("This system's state with regard to update attempts. The value meanings are: other none of the following idle no update in progress internal internal state of no meaning to manager hold holding to keep from updating too often retry waiting to retry after failure Corresponds directly to the value labeled 'Storage State:' in the PARAMETER SERVER display.")
paramClientProtocolErrors = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramClientProtocolErrors.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientProtocolErrors.setDescription("The number of invalid parameter service protocol messages received by this system. Corresponds directly to the value labeled 'Bad Parameter Messages:' in the PARAMETER SERVER display.")
paramClientServerRejects = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramClientServerRejects.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientServerRejects.setDescription("The number of parameter servers this system rejected due to exceeding paramClientServerLimit. Corresponds directly to the value labeled 'Rejected Servers:' in the PARAMETER SERVER display.")
paramClientServerNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramClientServerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientServerNumber.setDescription("The number of parameter servers known to this system, indicating the number of entries in serverTable. Corresponds directly to the value labeled 'Parameter Servers:' in the PARAMETER SERVER display.")
paramServerTable = MibTable((1, 3, 6, 1, 4, 1, 33, 7, 16), )
if mibBuilder.loadTexts: paramServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: paramServerTable.setDescription('A list of parameter server entries. The number of entries is given by the value of paramClientServerNumber.')
paramServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 7, 16, 1), ).setIndexNames((0, "MRVINREACH", "paramServerName"))
if mibBuilder.loadTexts: paramServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: paramServerEntry.setDescription('Status and parameter values for a parameter server.')
paramServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 7, 16, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramServerName.setStatus('mandatory')
if mibBuilder.loadTexts: paramServerName.setDescription("The server's name, unique within this system. Always 16 characters, null padded on the end. Corresponds directly to the name used to create the entry and the value labeled 'Name' in the PARAMETER SERVER display.")
paramServerEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 7, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramServerEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: paramServerEntryStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry, which corresponds directly to the CLEAR/PURGE PARAMETER SERVER command. Actual removal of the entry is implementation specific.")
paramServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 7, 16, 1, 3), AddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramServerAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: paramServerAddressType.setDescription("The type of network address contained in paramServerAddress. 'unknown' means no address has been defined. 'other' means no other type value applies. 'local' means there is no address and parameters were loaded from local storage. 'ip' is an Internet IP address. 'ethernet' is an 802.3 MAC address. Corresponds indirectly to the value labeled 'Address' in the PARAMETER SERVER display.")
paramServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 7, 16, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: paramServerAddress.setDescription("The server's network address. Corresponds directly to the value labeled 'Address' in the PARAMETER SERVER display.")
paramServerStoredVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 7, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramServerStoredVersion.setStatus('mandatory')
if mibBuilder.loadTexts: paramServerStoredVersion.setDescription("Parameter version number currently stored at the server. Corresponds directly to the value labeled 'Version' in the PARAMETER SERVER display.")
paramServerStoredTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 7, 16, 1, 6), DateTime().clone(hexValue="00")).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramServerStoredTime.setStatus('mandatory')
if mibBuilder.loadTexts: paramServerStoredTime.setDescription("The server's date and time when it stored the parameters of version paramServerStoredVersion. Corresponds directly to the value labeled 'Date' in the PARAMETER SERVER display.")
paramServerStoredStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 7, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("current", 2), ("ahead", 3), ("behind", 4), ("failing", 5), ("failed", 6), ("query", 7), ("noMemCard", 8))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramServerStoredStatus.setStatus('mandatory')
if mibBuilder.loadTexts: paramServerStoredStatus.setDescription("Status of this system's parameters with respect to the server. Corresponds directly to the value labeled 'Status' in the PARAMETER SERVER display. The value meanings are: ahead server version newer than system's behind server version older than system's current up to date failed system no longer attempting update failing system trying to update but failing query attempting to determine version noMemCard no memory card in card drive unknown version not known ")
paramServerStoredFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 7, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("protocolOut", 3), ("open", 4), ("read", 5), ("write", 6), ("resource", 7), ("protocolIn", 8), ("response", 9), ("close", 10), ("delete", 11), ("rename", 12), ("fileData", 13))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramServerStoredFailure.setStatus('mandatory')
if mibBuilder.loadTexts: paramServerStoredFailure.setDescription("When paramServerStoredStatus is 'failed' or 'failing', the reason for the most recent failure. Corresponds directly to the value labeled 'Reason' in the PARAMETER SERVER display. The value meanings are: other none of the following none no failure protocolOut invalid protocol message to server open file open error at server read file read error at server write file write error at server resource resource lack at server (e.g. disk) protocolIn invalid protocol message from server response no response from server close file close error at server delete file delete error at server rename file rename error at server fileData bad parameter data stored at server ")
paramClientPath = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramClientPath.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientPath.setDescription("The directory path to the parameter file on all servers. Corresponds directly to PARAMETER SERVER PATH and the value labeled 'Path:' in the PARAMETER SERVER display.")
paramClientChassisStorageState = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notApplicable", 1), ("unknown", 2), ("current", 3), ("verifying", 4), ("busBusy", 5), ("retrying", 6), ("failing", 7), ("behind", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paramClientChassisStorageState.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientChassisStorageState.setDescription("The status of the current attempt to update parameters in local chassis storage. Corresponds directly to the value labeled 'Chassis Configuration:'.")
paramClientTftpBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramClientTftpBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientTftpBroadcast.setDescription("Control over whether or not this system is allowed to send out a TFTP read broadcast after sending a BOOTP broadcast during the Parameter Check Function. 'enabled' allows TFTP broadcast. Corresponds directly to the presence of PARAMETER TFTP BROADCAST under the label 'Enabled Characteristics' in the SERVER CHARACTERISTICS display.")
paramClientWriteNow = MibScalar((1, 3, 6, 1, 4, 1, 33, 7, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paramClientWriteNow.setStatus('mandatory')
if mibBuilder.loadTexts: paramClientWriteNow.setDescription("Control to start saving parameters immediately in response to an execute. Corresponds directly to the WRITE PARAMETERS command. In response to a get-request or get-next-request, the agent always returns 'ready' for this value.")
xPpp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 22))
xPppBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 22, 1))
xPppLcp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 22, 2))
xPppIpcp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 22, 3))
xPppAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 22, 4))
xPppIpxcp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 22, 5))
xPppConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 1, 1), )
if mibBuilder.loadTexts: xPppConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigTable.setDescription('A table containing PPP specific variables for this PPP implementation.')
xPppConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1), ).setIndexNames((0, "MRVINREACH", "ifIndex"))
if mibBuilder.loadTexts: xPppConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigEntry.setDescription('Management information about a particular PPP.')
xPppConfigOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigOpen.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigOpen.setDescription('Determines if PPP is configured on this port.')
xPppConfigActive = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigActive.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigActive.setDescription('Determines if LCP will actively open or wait passively.')
xPppConfigDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigDefaults.setDescription("Revert to factory default PPP parameters. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' sets PPP parameters to factory defaults.")
xPppConfigRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigRestartTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigRestartTimer.setDescription('The number of seconds waited before retransmitting during option negotiation.')
xPppConfigConfLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigConfLimit.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigConfLimit.setDescription('Maximum number of times a configuration request will be sent to the peer without receiving a response.')
xPppConfigFailLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigFailLimit.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigFailLimit.setDescription("Maximum number of times a peer's proposed option will be NAKed before REJECTing the option.")
xPppConfigPacketLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("raw", 2), ("interpreted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigPacketLogging.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigPacketLogging.setDescription('Determines the level of packet logging to accounting on this port.')
xPppConfigKATimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigKATimer.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigKATimer.setDescription('Determines the number of seconds between transmission of LCP Echo Keepalive packets.')
xPppConfigKATimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppConfigKATimeout.setStatus('mandatory')
if mibBuilder.loadTexts: xPppConfigKATimeout.setDescription('Determines the number of seconds to wait to hear LCP Echo Replies to our Echo Request Keepalive packets before giving up and shutting down the link.')
xPppStatusTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 1, 2), )
if mibBuilder.loadTexts: xPppStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppStatusTable.setDescription('A table containing basic PPP status info.')
xPppStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1), ).setIndexNames((0, "MRVINREACH", "ifIndex"))
if mibBuilder.loadTexts: xPppStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppStatusEntry.setDescription('Status information about a particular PPP.')
xPppStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: xPppStatusState.setDescription('Displays whether PPP is enabled or disabled on this port.')
xPppLinkOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notOpen", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLinkOpen.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLinkOpen.setDescription('Displays open status of the link.')
xPppHdlcRxTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcRxTotalPkts.setStatus('mandatory')
if mibBuilder.loadTexts: xPppHdlcRxTotalPkts.setDescription('Total of all packets received on PPP link.')
xPppHdlcTxTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcTxTotalPkts.setStatus('mandatory')
if mibBuilder.loadTexts: xPppHdlcTxTotalPkts.setDescription('Total of all packets transmitted on PPP link.')
xPppHdlcRxFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcRxFrameErrs.setStatus('mandatory')
if mibBuilder.loadTexts: xPppHdlcRxFrameErrs.setDescription('Number of framing errors received on PPP link.')
xPppHdlcRxNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcRxNoBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: xPppHdlcRxNoBuffer.setDescription('Number of times a buffer was not available to receive packet into.')
xPppHdlcTxNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcTxNoBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: xPppHdlcTxNoBuffer.setDescription('Number of times a buffer was not available to transmit a packet from.')
xPppHdlcRxBadFcs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcRxBadFcs.setStatus('mandatory')
if mibBuilder.loadTexts: xPppHdlcRxBadFcs.setDescription('Number of packets received with a bad checksum.')
xPppHdlcVJDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppHdlcVJDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: xPppHdlcVJDiscards.setDescription('Number of packets received that failed VJ decompression.')
xPppLcpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 2, 1), )
if mibBuilder.loadTexts: xPppLcpConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpConfigTable.setDescription('A table containing PPP LCP specific variables for this PPP implementation.')
xPppLcpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 2, 1, 1), ).setIndexNames((0, "MRVINREACH", "ifIndex"))
if mibBuilder.loadTexts: xPppLcpConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpConfigEntry.setDescription('Management information about a particular PPP LCP session.')
xPppLcpConfigAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("pap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppLcpConfigAuth.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpConfigAuth.setDescription('Authentication protocol used for authenticating peers.')
xPppLcpConfigChapAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("chap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppLcpConfigChapAuth.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpConfigChapAuth.setDescription('Authentication CHAP protocol used for authenticating peers.')
xPppLcpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 2, 2), )
if mibBuilder.loadTexts: xPppLcpStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTable.setDescription('A table containing PPP LCP status info.')
xPppLcpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1), ).setIndexNames((0, "MRVINREACH", "ifIndex"))
if mibBuilder.loadTexts: xPppLcpStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusEntry.setDescription('Status information about a particular PPP LCP session.')
xPppLcpStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("requestSent", 3), ("ackReceived", 4), ("ackSent", 5), ("open", 6), ("closing", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusState.setStatus('deprecated')
if mibBuilder.loadTexts: xPppLcpStatusState.setDescription('The current state of LCP.')
xPppLcpStatusRxAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("pap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxAuth.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxAuth.setDescription('The authentication protocol currently in use from the peer to us.')
xPppLcpStatusTxAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("pap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxAuth.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxAuth.setDescription('The authentication protocol currently in use from us to the peer.')
xPppLcpStatusRxConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxConReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxConReq.setDescription('The count of LCP Configure Requests received from the peer.')
xPppLcpStatusTxConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxConReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxConReq.setDescription('The count of LCP Configure Requests transmitted to the peer.')
xPppLcpStatusRxConNak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxConNak.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxConNak.setDescription('The count of LCP Configure Naks received from the peer.')
xPppLcpStatusTxConNak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxConNak.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxConNak.setDescription('The count of LCP Configure Naks transmitted to the peer.')
xPppLcpStatusRxConAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxConAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxConAck.setDescription('The count of LCP Configure Acks received from the peer.')
xPppLcpStatusTxConAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxConAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxConAck.setDescription('The count of LCP Configure Acks transmitted to the peer.')
xPppLcpStatusRxConRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxConRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxConRej.setDescription('The count of LCP Configure Rejects received from the peer.')
xPppLcpStatusTxConRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxConRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxConRej.setDescription('The count of LCP Configure Rejects transmitted to the peer.')
xPppLcpStatusRxTrmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxTrmReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxTrmReq.setDescription('The count of LCP Terminate Requests received from the peer.')
xPppLcpStatusTxTrmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxTrmReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxTrmReq.setDescription('The count of LCP Terminate Requests transmitted to the peer.')
xPppLcpStatusRxTrmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxTrmAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxTrmAck.setDescription('The count of LCP Terminate Acks received from the peer.')
xPppLcpStatusTxTrmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxTrmAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxTrmAck.setDescription('The count of LCP Terminate Acks transmitted to the peer.')
xPppLcpStatusRxEcoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxEcoReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxEcoReq.setDescription('The count of LCP Echo Requests received from the peer.')
xPppLcpStatusTxEcoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxEcoReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxEcoReq.setDescription('The count of LCP Echo Requests transmitted to the peer.')
xPppLcpStatusRxEcoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxEcoRep.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxEcoRep.setDescription('The count of LCP Echo Reply received from the peer.')
xPppLcpStatusTxEcoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxEcoRep.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxEcoRep.setDescription('The count of LCP Echo Reply transmitted to the peer.')
xPppLcpStatusRxCodRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxCodRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxCodRej.setDescription('The count of LCP Code Rejects received from the peer.')
xPppLcpStatusTxCodRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxCodRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxCodRej.setDescription('The count of LCP Code Rejects transmitted to the peer.')
xPppLcpStatusRxProRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusRxProRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusRxProRej.setDescription('The count of LCP Protocol Rejects received from the peer.')
xPppLcpStatusTxProRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusTxProRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusTxProRej.setDescription('The count of LCP Protocol Rejects transmitted to the peer.')
xPppLcpStatusState2 = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("reqSent", 7), ("ackRcvd", 8), ("ackSent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppLcpStatusState2.setStatus('mandatory')
if mibBuilder.loadTexts: xPppLcpStatusState2.setDescription('The current state of LCP.')
xPppIpcpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 3, 1), )
if mibBuilder.loadTexts: xPppIpcpConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigTable.setDescription('A table containing PPP IPCPspecific variables for this PPP implementation.')
xPppIpcpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1), ).setIndexNames((0, "MRVINREACH", "ifIndex"))
if mibBuilder.loadTexts: xPppIpcpConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigEntry.setDescription('Management information about a particular PPP IPCP session.')
xPppIpcpConfigLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigLocalAddress.setDescription('IP Address of the local PPP interface.')
xPppIpcpConfigRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigRemoteAddress.setDescription('IP Address of the peer PPP interface.')
xPppIpcpConfigVJCompSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigVJCompSlots.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigVJCompSlots.setDescription('Number of slots to be used by VJ compression.')
xPppIpcpConfigRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigRangeStart.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigRangeStart.setDescription('Start of acceptable address range in which the negotiated remote IP address must fall.')
xPppIpcpConfigRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigRangeEnd.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigRangeEnd.setDescription('End of acceptable address range in which the negotiated remote IP address must fall.')
xPppIpcpConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigState.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigState.setDescription('Controls whether IPCP is allowed to run on this port.')
xPppIpcpConfigLocalRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigLocalRangeStart.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigLocalRangeStart.setDescription('Start of acceptable address range in which the negotiated local IP address must fall.')
xPppIpcpConfigLocalRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigLocalRangeEnd.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigLocalRangeEnd.setDescription('End of acceptable address range in which the negotiated local IP address must fall.')
xPppIpcpConfigPppIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 1, 1, 9), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpConfigPppIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpConfigPppIpMask.setDescription("The subnet mask to use for a PPP operation on the port. Corresponds directly to the value labeled 'IP Mask:' in the PPP PORT IP CHARACTERISTICS display.")
xPppIpcpAsyncConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 3, 2), )
if mibBuilder.loadTexts: xPppIpcpAsyncConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpAsyncConfigTable.setDescription('A table containing PPP specific variables for this PPP implementation.')
xPppIpcpAsyncConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 3, 2, 1), ).setIndexNames((0, "MRVINREACH", "ifIndex"))
if mibBuilder.loadTexts: xPppIpcpAsyncConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpAsyncConfigEntry.setDescription('Management information about a particular PPP Asynchronous LCP.')
xPppIpcpAsyncConfigBrdcast = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpcpAsyncConfigBrdcast.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpAsyncConfigBrdcast.setDescription('Determines whether to forward an IP Broadcast or not.')
xPppIpcpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 3, 3), )
if mibBuilder.loadTexts: xPppIpcpStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpStatusTable.setDescription('A table containing basic PPP IPCP status info.')
xPppIpcpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1), ).setIndexNames((0, "MRVINREACH", "ifIndex"))
if mibBuilder.loadTexts: xPppIpcpStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpStatusEntry.setDescription('Status information about a particular PPP IPCP session.')
xPppIpcpStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("requestSent", 3), ("ackReceived", 4), ("ackSent", 5), ("open", 6), ("closing", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpStatusState.setStatus('deprecated')
if mibBuilder.loadTexts: xPppIpcpStatusState.setDescription('The current state of IPCP.')
xPppIpcpStatusLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpStatusLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpStatusLocalAddress.setDescription('The IP Address currently being used by the local IPCP.')
xPppIpcpStatusRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpStatusRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpStatusRemoteAddress.setDescription('The IP Address currently being used by the Remote IPCP.')
xPppIpcpRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpRxPkts.setDescription('Total number of IP packets received.')
xPppIpcpTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpTxPkts.setDescription('Total number of IP packets transmitted.')
xPppIpcpRxConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxConReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpRxConReq.setDescription('The count of IPCP Configure Requests received from the peer.')
xPppIpcpTxConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxConReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpTxConReq.setDescription('The count of IPCP Configure Requests transmitted to the peer.')
xPppIpcpRxConNak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxConNak.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpRxConNak.setDescription('The count of IPCP Configure Naks received from the peer.')
xPppIpcpTxConNak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxConNak.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpTxConNak.setDescription('The count of IPCP Configure Naks transmitted to the peer.')
xPppIpcpRxConAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxConAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpRxConAck.setDescription('The count of IPCP Configure Acks received from the peer.')
xPppIpcpTxConAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxConAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpTxConAck.setDescription('The count of IPCP Configure Acks transmitted to the peer.')
xPppIpcpRxConRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxConRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpRxConRej.setDescription('The count of IPCP Configure Rejects received from the peer.')
xPppIpcpTxConRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxConRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpTxConRej.setDescription('The count of IPCP Configure Rejects transmitted to the peer.')
xPppIpcpRxTrmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxTrmReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpRxTrmReq.setDescription('The count of IPCP Terminate Requests received from the peer.')
xPppIpcpTxTrmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxTrmReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpTxTrmReq.setDescription('The count of IPCP Terminate Requests transmitted to the peer.')
xPppIpcpRxTrmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpRxTrmAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpRxTrmAck.setDescription('The count of IPCP Terminate Acks received from the peer.')
xPppIpcpTxTrmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpTxTrmAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpTxTrmAck.setDescription('The count of IPCP Terminate Acks transmitted to the peer.')
xPppIpcpStatusState2 = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("reqSent", 7), ("ackRcvd", 8), ("ackSent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpcpStatusState2.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpcpStatusState2.setDescription('The current state of IPCP.')
xPppPapPassword = MibScalar((1, 3, 6, 1, 4, 1, 33, 22, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppPapPassword.setStatus('mandatory')
if mibBuilder.loadTexts: xPppPapPassword.setDescription('The password to use for PAP authentication.')
xPppAuthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 4, 2), )
if mibBuilder.loadTexts: xPppAuthConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppAuthConfigTable.setDescription('A table containing PPP specific variables for this PPP implementation.')
xPppAuthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 4, 2, 1), ).setIndexNames((0, "MRVINREACH", "ifIndex"))
if mibBuilder.loadTexts: xPppAuthConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppAuthConfigEntry.setDescription('Management information about a particular PPP.')
xPppAuthChapChallengeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppAuthChapChallengeTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xPppAuthChapChallengeTimer.setDescription('Length of time in minutes between CHAP reauthentication challenges. A value of zero disables the timer.')
xPppAuthPapConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("kerberos", 3), ("radius", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppAuthPapConfigState.setStatus('mandatory')
if mibBuilder.loadTexts: xPppAuthPapConfigState.setDescription('Controls the type of Pap authentication required for this port, and whether it is combined with another authentication mechanism such as Radius.')
xPppAuthChapConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("radius", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppAuthChapConfigState.setStatus('mandatory')
if mibBuilder.loadTexts: xPppAuthChapConfigState.setDescription('Controls the type of Chap authentication required for this port, and whether it is combined with another authentication mechanism such as Radius.')
xPppAuthStatusTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 4, 3), )
if mibBuilder.loadTexts: xPppAuthStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppAuthStatusTable.setDescription('A table containing PPP specific variables for this PPP implementation.')
xPppAuthStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 4, 3, 1), ).setIndexNames((0, "MRVINREACH", "ifIndex"))
if mibBuilder.loadTexts: xPppAuthStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppAuthStatusEntry.setDescription('Management information about a particular PPP.')
xPppPapStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("initial", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("reqSent", 5), ("ackRecv", 6), ("ackSent", 7), ("opened", 8), ("kerberosReqSent", 9), ("kerberosStopped", 10), ("kerberosAckRecv", 11), ("kerberosAckSent", 12), ("papKerberosOpened", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppPapStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: xPppPapStatusState.setDescription('The current state of PAP.')
xPppChapStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("challengeWait", 2), ("challengeSent", 3), ("responseSent", 4), ("challengeSentResponseSent", 5), ("challengeSentAckRecv", 6), ("open", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppChapStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: xPppChapStatusState.setDescription('The current state of CHAP.')
xPppChapPassword = MibScalar((1, 3, 6, 1, 4, 1, 33, 22, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppChapPassword.setStatus('mandatory')
if mibBuilder.loadTexts: xPppChapPassword.setDescription('The password to use for CHAP authentication.')
xPppIpxcpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 5, 1), )
if mibBuilder.loadTexts: xPppIpxcpConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpConfigTable.setDescription('A table containing PPP specific variables for this PPP implementation.')
xPppIpxcpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 5, 1, 1), ).setIndexNames((0, "MRVINREACH", "ifIndex"))
if mibBuilder.loadTexts: xPppIpxcpConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpConfigEntry.setDescription('Management information about a particular PPP.')
xPppIpxcpCipxCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpxcpCipxCompression.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpCipxCompression.setDescription('Controls whether CIPX compression will be negotiated on the interface.')
xPppIpxcpConfigRemoteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPppIpxcpConfigRemoteNode.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpConfigRemoteNode.setDescription('The IPX Node address which can be offered to the peer if it does not know a Node number but requires one.')
xPppIpxcpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 5, 2), )
if mibBuilder.loadTexts: xPppIpxcpStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpStatusTable.setDescription('A table containing PPP specific variables for this PPP implementation.')
xPppIpxcpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1), ).setIndexNames((0, "MRVINREACH", "ifIndex"))
if mibBuilder.loadTexts: xPppIpxcpStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpStatusEntry.setDescription('Management information about a particular PPP.')
xPppIpxcpStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("reqSent", 7), ("ackRcvd", 8), ("ackSent", 9), ("opened", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpStatusState.setDescription('The current state of IPXCP.')
xPppIpxcpCipxInCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpCipxInCompression.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpCipxInCompression.setDescription('The current state of CIPX compression inbound.')
xPppIpxcpCipxOutCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpCipxOutCompression.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpCipxOutCompression.setDescription('The current state of CIPX compression outbound.')
xPppIpxcpCipxInSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpCipxInSlots.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpCipxInSlots.setDescription('The current number of CIPX compression inbound slots.')
xPppIpxcpCipxOutSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpCipxOutSlots.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpCipxOutSlots.setDescription('The current number of CIPX compression outbound slots.')
xPppIpxcpStatusRemoteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpStatusRemoteNode.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpStatusRemoteNode.setDescription('The IPX Node address currently being used by the Remote IPX peer.')
xPppIpxcpCountersTable = MibTable((1, 3, 6, 1, 4, 1, 33, 22, 5, 3), )
if mibBuilder.loadTexts: xPppIpxcpCountersTable.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpCountersTable.setDescription('A table containing basic PPP IPXCP status info.')
xPppIpxcpCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1), ).setIndexNames((0, "MRVINREACH", "ifIndex"))
if mibBuilder.loadTexts: xPppIpxcpCountersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpCountersEntry.setDescription('Counter information about a particular PPP IPXCP session.')
xPppIpxcpRxConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpRxConReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpRxConReq.setDescription('The count of IPXCP Configure Requests received from the peer.')
xPppIpxcpTxConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpTxConReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpTxConReq.setDescription('The count of IPXCP Configure Requests transmitted to the peer.')
xPppIpxcpRxConNak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpRxConNak.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpRxConNak.setDescription('The count of IPXCP Configure Naks received from the peer.')
xPppIpxcpTxConNak = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpTxConNak.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpTxConNak.setDescription('The count of IPXCP Configure Naks transmitted to the peer.')
xPppIpxcpRxConAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpRxConAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpRxConAck.setDescription('The count of IPXCP Configure Acks received from the peer.')
xPppIpxcpTxConAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpTxConAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpTxConAck.setDescription('The count of IPXCP Configure Acks transmitted to the peer.')
xPppIpxcpRxConRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpRxConRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpRxConRej.setDescription('The count of IPXCP Configure Rejects received from the peer.')
xPppIpxcpTxConRej = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpTxConRej.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpTxConRej.setDescription('The count of IPXCP Configure Rejects transmitted to the peer.')
xPppIpxcpRxTrmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpRxTrmReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpRxTrmReq.setDescription('The count of IPXCP Terminate Requests received from the peer.')
xPppIpxcpTxTrmReq = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpTxTrmReq.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpTxTrmReq.setDescription('The count of IPXCP Terminate Requests transmitted to the peer.')
xPppIpxcpRxTrmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpRxTrmAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpRxTrmAck.setDescription('The count of IPXCP Terminate Acks received from the peer.')
xPppIpxcpTxTrmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 22, 5, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPppIpxcpTxTrmAck.setStatus('mandatory')
if mibBuilder.loadTexts: xPppIpxcpTxTrmAck.setDescription('The count of IPXCP Terminate Acks transmitted to the peer.')
xRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35))
xRadiusPort = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 1))
xRadiusCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 2))
xRadiusConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 3))
xRadiusServers = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 4))
xRadiusCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 5))
xRadiusPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 35, 1, 1), )
if mibBuilder.loadTexts: xRadiusPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusPortTable.setDescription('Table of fields indexed by port.')
xRadiusPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 35, 1, 1, 1), ).setIndexNames((0, "MRVINREACH", "xRadiusPortIndex"))
if mibBuilder.loadTexts: xRadiusPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusPortEntry.setDescription('A particular entry.')
xRadiusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 35, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusPortIndex.setDescription('The index of the port.')
xRadiusPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 35, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusPortStatus.setDescription('Indicates the state of Radius Authentication on the port.')
xRadiusPortSolicitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 35, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusPortSolicitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusPortSolicitStatus.setDescription('Indicates the state of Radius solicitation mode on the port.')
xRadiusAcctPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 35, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("limited", 3))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusAcctPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusAcctPortStatus.setDescription('Indicates the state of Radius Accounting on the port.')
xRadiusAuthServerPort = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1645)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusAuthServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusAuthServerPort.setDescription('The UDP port on which the Radius authentication request will be made.')
xRadiusAcctServerPort = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1646)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusAcctServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusAcctServerPort.setDescription('The UDP port on which the Radius accounting request will be made.')
xRadiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusTimeout.setDescription('The period of time that the Radius client will wait for a reply from the server.')
xRadiusServerRetries = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusServerRetries.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusServerRetries.setDescription('The number of times a Radius server will be tried.')
xRadiusAcctLogAttempts = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusAcctLogAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusAcctLogAttempts.setDescription('The number of times the client will attempt to log the accounting record to either the primary or secondary Radius server before giving up and failing.')
xRadiusChapChallengeSize = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 128)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusChapChallengeSize.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusChapChallengeSize.setDescription('The size of the CHAP challenge that is sent to the peer and the Radius server.')
xRadiusLogging = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusLogging.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusLogging.setDescription('Indicates the state of Radius logging for packet tracing and troubleshooting. Messages are logged to the MRV In-Reach event log.')
xRadiusMessage = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusMessage.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusMessage.setDescription('The authentication prompting message for Radius logins.')
xRadServer1SubGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 4, 1))
xRadServer2SubGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 4, 2))
xRadiusServerName1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(51, 51)).setFixedLength(51)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusServerName1.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusServerName1.setDescription('The primary Radius server queried for authentication.')
xRadiusSecret1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32).clone('Default_Secret')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusSecret1.setStatus('obsolete')
if mibBuilder.loadTexts: xRadiusSecret1.setDescription('The secret value used to communicate with the primary Radius server.')
xRadiusServerAccess1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusServerAccess1.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusServerAccess1.setDescription('The number of successful accesses of primary Radius server.')
xRadiusServerAccessFailed1 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusServerAccessFailed1.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusServerAccessFailed1.setDescription('The number of failed accesses of primary Radius server.')
xRadiusServerName2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(51, 51)).setFixedLength(51)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xRadiusServerName2.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusServerName2.setDescription('The secondary Radius server queried for authentication, if the primary one fails.')
xRadiusSecret2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32).clone('Default_Secret')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusSecret2.setStatus('obsolete')
if mibBuilder.loadTexts: xRadiusSecret2.setDescription('The secret value used to communicate with the secondary Radius server.')
xRadiusServerAccess2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusServerAccess2.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusServerAccess2.setDescription('The number of successful accesses of secondary Radius server.')
xRadiusServerAccessFailed2 = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 4, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusServerAccessFailed2.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusServerAccessFailed2.setDescription('The number of failed accesses of secondary Radius server.')
xRadAuthCtsSubGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 5, 1))
xRadAcctCtsSubGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 35, 5, 2))
xRadiusLogins = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusLogins.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusLogins.setDescription('The number of successful logins using Radius.')
xRadiusLoginsFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusLoginsFailed.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusLoginsFailed.setDescription('The number of failed logins resulting from being rejected by the Radius server.')
xRadiusConfigFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusConfigFailed.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusConfigFailed.setDescription('The number of failed logins resulting from unsupported attribute values.')
xRadiusPolicyFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusPolicyFailed.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusPolicyFailed.setDescription('The number of failed logins resulting from failing specific Radius policies on the MRV In-Reach unit.')
xRadiusAcctSuccess = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusAcctSuccess.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusAcctSuccess.setDescription('The number of successfully recorded Radius accounting log records.')
xRadiusAcctFailed = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusAcctFailed.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusAcctFailed.setDescription('The number of failed (not logged) Radius accounting log records.')
xRadiusAcctReqWait = MibScalar((1, 3, 6, 1, 4, 1, 33, 35, 5, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xRadiusAcctReqWait.setStatus('mandatory')
if mibBuilder.loadTexts: xRadiusAcctReqWait.setDescription('The number of log requests waiting for a reply from the Radius server.')
xSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 1))
sysIdent = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIdent.setStatus('mandatory')
if mibBuilder.loadTexts: sysIdent.setDescription("An identification string for local and remote displays. Corresponds directly to SERVER IDENTIFICATION and the value labeled 'Identification:' on the SERVER CHARACTERISTICS display.")
sysDefineMode = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permOnly", 1), ("operAndPerm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDefineMode.setStatus('mandatory')
if mibBuilder.loadTexts: sysDefineMode.setDescription("The system's operation with regard to DEFINE commands. 'permOnly' indicates that DEFINE commands modify only the permanent data base. 'operAndPerm' indicates that DEFINE commands modify both operational and permanent data bases, unless specifically documented to the contrary. Corresponds to SERVER CHANGE and the presence of the label CHANGE in the SERVER CHARACTERISTICS display.")
sysDateTime = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 3), DateTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: sysDateTime.setDescription("The system's current local date and time. Corresponds directly to SERVER DATE and SERVER TIME and the value in various displays.")
sysTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: sysTimeZone.setDescription("The adjustment to apply to a universal (Greenwich) time received when down-line loaded, comprising two octets. The first octet is the number of hours west of universal, the second is the number of minutes. Corresponds directly to SERVER TIMEZONE and the value labeled 'Timezone:' in the SERVER CHARACTERISTICS display.")
sysLoadSoftware = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLoadSoftware.setStatus('mandatory')
if mibBuilder.loadTexts: sysLoadSoftware.setDescription("The software file name to request for down-line load of the server. Corresponds directly to SERVER SOFTWARE, and the value labeled 'Software:' in the SERVER CHARACTERISTICS display.")
sysDump = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDump.setStatus('mandatory')
if mibBuilder.loadTexts: sysDump.setDescription("Control for dumping the system's memory when the system crashes. Corresponds directly to SERVER DUMP and the presence of 'Dump' under the label 'Enabled Characteristics' in the SERVER CHARACTERISTICS display.")
sysMaintenancePassword = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMaintenancePassword.setStatus('mandatory')
if mibBuilder.loadTexts: sysMaintenancePassword.setDescription("The password a management system must supply to force the system to reboot or use the system's remote console via the Maintenance Operation Protocol (MOP). Corresponds directly to SERVER MAINTENANCE PASSWORD. When setting this value, the management system must supply eight octets, filling with zeros from the first octet. That is, the value '1ab42' would be expressed as '0.0.0.0.0.1.ab.42'. Setting the value to zero disables the password check. When returning this value, the agent always returns a zero length OCTET STRING.")
sysLocalName = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocalName.setStatus('mandatory')
if mibBuilder.loadTexts: sysLocalName.setDescription("The system's local name. Corresponds directly to SERVER NAME and the value labeled 'Name:' in the SERVER CHARACTERISTICS display.")
sysSoftwareVersionType = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("alpha", 1), ("beta", 2), ("production", 3), ("special", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSoftwareVersionType.setStatus('mandatory')
if mibBuilder.loadTexts: sysSoftwareVersionType.setDescription("The software version variant running in the system. Corresponds to the letter in the software version in the SERVER CHARACTERISTICS display. alpha 'A': alpha test beta 'B': beta test production null: normal, production software special 'S': special, custom software ")
sysSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sysSoftwareVersion.setDescription("The software version running in the system. In order, the octets contain major version, minor version, ECO, and pre-release number. Corresponds to the numbers in the software version in the SERVER CHARACTERISTICS display. For example, the version display for sysSoftwareVersionType 'production' and sysSoftwareVersion '2.2.0.0' is 'V2.2'. The version display for sysSoftwareVersionType 'beta' and sysSoftwareVersion '3.1.0.4' is 'V3.1B4'.")
sysRomVersion = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRomVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sysRomVersion.setDescription("The firmware version of the bootstrap ROM installed in the system. Corresponds directly to the value labeled 'Rom' in the SERVER CHARACTERISTICS display.")
sysHardwareType = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 12), HardwareType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareType.setStatus('mandatory')
if mibBuilder.loadTexts: sysHardwareType.setDescription("The type of hardware on which the system is running. Corresponds directly to the value labeled 'Hardware Type:' in the UNIT display.")
sysHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sysHardwareVersion.setDescription("This version of hardware on which the system is running. Corresponds directly to part of the value labeled 'HW' in the SERVER CHARACTERISTICS display.")
sysChassisType = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 14), ChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisType.setStatus('mandatory')
if mibBuilder.loadTexts: sysChassisType.setDescription("The type of chassis in which the system is running. Corresponds directly to part of the value labeled 'HW' in the SERVER CHARACTERISTICS display.")
sysChassisVersion = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sysChassisVersion.setDescription("This version of chassis in which the system is running. Corresponds directly to part of the value labeled 'HW' in the SERVER CHARACTERISTICS display.")
sysCrash = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCrash.setStatus('mandatory')
if mibBuilder.loadTexts: sysCrash.setDescription("Control to cause this system to crash. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' causes an immediate crash. Corresponds to the CRASH command.")
sysInitialize = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 1), ("conditionalExecute", 2), ("unconditionalExecute", 3), ("cancel", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysInitialize.setStatus('mandatory')
if mibBuilder.loadTexts: sysInitialize.setDescription("Control to cause this system to reset its software to initial load values, typically by reloading. When executing an initialize command, the system observes the value of sysInitializeDelay as supplied anywhere in the same set request with sysInitialize. If this value is not included in the set request, the system uses its default value. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'conditionalExecute' causes initialization if the overall system state is acceptible (such as not needing to store permanent parameters). Setting it to 'unconditionalExecute' causes initialization regardless of the overall system state. Setting it to 'cancel' aborts an initialization that has not yet started. According to standard SNMP operation, if the system is not in a proper state to accept a given set request for this value, it returns the standard SNMP error 'badValue'. Corresponds to the INITIALIZE command.")
sysInitializeDelay = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysInitializeDelay.setStatus('mandatory')
if mibBuilder.loadTexts: sysInitializeDelay.setDescription("The number of minutes to delay before beginning the system initialization process as executed with sysInitialize. This value cannot be set outside a set-request that contains the value 'execute' for sysInitialize. If not included in such a set, the default value is 1. Corresponds to the INITIALIZE command's DELAY parameter and to the value labeled 'Minutes to shutdown:' in the SYSTEM STATUS display.")
sysZeroAll = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysZeroAll.setStatus('mandatory')
if mibBuilder.loadTexts: sysZeroAll.setDescription("Control to zero all counters. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' causes all the system's counters to be zeroed. Corresponds to the ZERO ALL command.")
sysZeroBase = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysZeroBase.setStatus('mandatory')
if mibBuilder.loadTexts: sysZeroBase.setDescription("Control to zero all base counters. In response to a get-request or get-next-request, the agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting it to 'execute' causes all the system's base counters to be zeroed. Examples of counters that are zeroed are the SNMP counters or the counters from the SYSTEM COUNTERS display. Examples of counters that are not zeroed are Ethernet interface counters or port counters. Corresponds to the ZERO SYSTEM command.")
sysZeroBaseTime = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 21), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysZeroBaseTime.setStatus('mandatory')
if mibBuilder.loadTexts: sysZeroBaseTime.setDescription("The number hundredths of a second since the most recent zeroing of the base counters, such as through execution of sysZeroAll or sysZeroBase. Corresponds directly to the value labeled 'Seconds Since Zeroed:' in the SERVER COUNTERS display.")
sysLoaderName = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLoaderName.setStatus('mandatory')
if mibBuilder.loadTexts: sysLoaderName.setDescription("The name of the system that provided this system's running software. Corresponds directly to the value labeled 'Primary Host:' in the SERVER STATUS display.")
sysLoaderAddressType = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 23), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLoaderAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: sysLoaderAddressType.setDescription("The type of network address contained in sysLoaderAddress. 'unknown' means no address has been defined. 'other' means no other type value applies. 'local' means there is no address and this system's software was loaded from local storage. 'ip' is an Internet IP address. 'ethernet' is an 802.3 MAC address. Corresponds indirectly to the value labeled 'Load Address:' in the SERVER STATUS display.")
sysLoaderAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLoaderAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sysLoaderAddress.setDescription("The network address of the system that provided this system's running software. Corresponds directly to the value labeled 'Load Address:' in the SERVER STATUS display.")
sysDumperAddressType = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 25), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDumperAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: sysDumperAddressType.setDescription("The type of network address contained in sysDumperAddress. 'unknown' means no address has been defined. 'other' means no other type value applies. 'local' means there is no address and this system's was dumped to local storage. 'ip' is an Internet IP address. 'ethernet' is an 802.3 MAC address. Corresponds indirectly to the value labeled 'Dump Address:' in the SERVER STATUS display.")
sysDumperAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDumperAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sysDumperAddress.setDescription("The network address of the system that most recently accepted a crash dump from this system. Corresponds directly to the value labeled 'Dump Address:' in the SERVER STATUS display.")
sysResourceLacks = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResourceLacks.setStatus('mandatory')
if mibBuilder.loadTexts: sysResourceLacks.setDescription("The number of times a local resource allocation failed, for example due to lack of dynamic memory. Corresponds directly to the value labeled 'Resource Errors:' in the SERVER STATUS display.")
sysChassisState = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("noFault", 2), ("fault", 3), ("loop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisState.setStatus('mandatory')
if mibBuilder.loadTexts: sysChassisState.setDescription("For chassis-based systems, the state of the overall chassis. 'notApplicable' indicates the system is not chassis based. 'noFault' indicates no current chassis problem. 'fault' indicates a current chassis problem such as a card or power supply failure. Corresponds directly to the value labeled 'Crate Current State: in the SERVER ALTERNATE STATUS display.")
sysChassisFaultTransitions = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysChassisFaultTransitions.setStatus('mandatory')
if mibBuilder.loadTexts: sysChassisFaultTransitions.setDescription("The number of times this system has seen sysChassisState switch from 'noFault' to 'fault' or from 'fault' to 'noFault'. Corresponds directly to the value labeled 'Crate Transition Count: in the SERVER ALTERNATE STATUS display.")
sysResourceNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResourceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sysResourceNumber.setDescription('The number of resource entries in the Resource table.')
sysFeatureNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFeatureNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sysFeatureNumber.setDescription('The number of feature entries in the Feature table.')
resTable = MibTable((1, 3, 6, 1, 4, 1, 33, 1, 32), )
if mibBuilder.loadTexts: resTable.setStatus('mandatory')
if mibBuilder.loadTexts: resTable.setDescription('A list of resource entries. The number of entries is given by the value of sysResourceNumber.')
resEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 1, 32, 1), ).setIndexNames((0, "MRVINREACH", "resType"))
if mibBuilder.loadTexts: resEntry.setStatus('mandatory')
if mibBuilder.loadTexts: resEntry.setDescription('Status values for a system resource.')
resType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43))).clone(namedValues=NamedValues(("cpuPercent", 1), ("memoryPercent", 2), ("process", 3), ("timer", 4), ("packetBuffer", 5), ("ipcMessage", 6), ("textPool", 7), ("freeMemory", 8), ("globalMemoryPercent", 9), ("phivDecnetRouteCache", 10), ("ipFilterCache", 11), ("ipRouteCache", 12), ("ipxRouteCache", 13), ("ipPolicyTable", 14), ("ipFilterTable", 15), ("phivDecnetPolicyTable", 16), ("phivDecnetFilterTable", 17), ("appleRouteCache", 18), ("appleFilterTable", 19), ("repeaterPortAccessTable", 20), ("repeaterPortNameTable", 21), ("ipxRipTable", 22), ("ipxSapTable", 23), ("repeaterPortSecurityTable", 24), ("bridgeFilterTable", 25), ("bridgeStaticFilters", 26), ("bridgeSourceFilters", 27), ("bridgeLearnedFilters", 28), ("bridgeInactiveFilters", 29), ("bridgeProtocolFilters", 30), ("latAnnouncementCompressionTable", 31), ("packetCompressionTable", 32), ("ipFragmentTable", 33), ("repeaterRedundancyTable", 34), ("repeaterGlobalSecurityTable", 35), ("packetHeaders", 36), ("interfaces", 37), ("circuits", 38), ("ipIgmpTable", 39), ("ipMulticastTable", 40), ("ipRouteTable", 41), ("ipxRipFilterTable", 42), ("ipxSapFilterTable", 43)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: resType.setStatus('mandatory')
if mibBuilder.loadTexts: resType.setDescription("Identification of a resource type. Typically corresponds directly to a label such as 'Processes:' in the SERVER ALTERNATE STATUS display.")
resCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: resCurrent.setDescription("The number of resources currently in use on the system. Typically corresponds directly to a value labeled 'Cur' in the SERVER ALTERNATE STATUS display.")
resWorst = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resWorst.setStatus('mandatory')
if mibBuilder.loadTexts: resWorst.setDescription("The highest or lowest value of resCurrent since system initialization. Typically corresponds directly to a value labeled 'High' or 'Low' in the SERVER ALTERNATE STATUS display.")
resAdminMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resAdminMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: resAdminMaximum.setDescription("The desired maximum possible number of resources in the system. In many cases, ACCESS to this object for a particular resType is read-only. Typically corresponds directly to a value labeled 'Max' in the SERVER ALTERNATE STATUS display for desired, administrative values. When the desired change takes effect is implementation specific, ranging from immediately to the next system initialization.")
resLacks = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resLacks.setStatus('mandatory')
if mibBuilder.loadTexts: resLacks.setDescription("The number of times since system initialization that the system could not obtain the resource because none were available. Typically corresponds directly to a value labeled 'Failure' in the SERVER ALTERNATE STATUS display. If such failures do not apply to the particular resource, such as 'cpuPercent', the agent returns zero for this object.")
resLackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 6), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resLackTime.setStatus('mandatory')
if mibBuilder.loadTexts: resLackTime.setDescription("The local system date and time when resLack last increased. Typically corresponds directly to a value labeled 'Last Occurred' in the SERVER ALTERNATE STATUS display. If such failures do not apply to the particular resource, such as 'cpuPercent', the agent returns all zeroes (unknown) for this object.")
resOperMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 32, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resOperMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: resOperMaximum.setDescription("The current maximum possible number of resources in the system. Typically corresponds directly to a value labeled 'Max' in the SERVER ALTERNATE STATUS display for current operational values. This value is based on current or previous value of resAdminMaximum.")
featTable = MibTable((1, 3, 6, 1, 4, 1, 33, 1, 33), )
if mibBuilder.loadTexts: featTable.setStatus('mandatory')
if mibBuilder.loadTexts: featTable.setDescription('A list of feature entries. The number of entries is given by the value of sysFeatureNumber.')
featEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 1, 33, 1), ).setIndexNames((0, "MRVINREACH", "featType"))
if mibBuilder.loadTexts: featEntry.setStatus('mandatory')
if mibBuilder.loadTexts: featEntry.setDescription('Status values for a system feature.')
featType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39))).clone(namedValues=NamedValues(("help", 1), ("snmp", 2), ("xremote", 3), ("tn3270", 4), ("menu", 5), ("multisessions", 6), ("lat", 7), ("eventLog", 8), ("internetSecurity", 9), ("slip", 10), ("scriptServer", 11), ("kerberos", 12), ("telnet", 13), ("rlogin", 14), ("allPorts", 15), ("xprinter", 16), ("x25", 17), ("frameRelay", 18), ("ipMulticastSpecial", 19), ("changeEthernetAddress", 20), ("expanded800", 21), ("lpDaemon", 22), ("ppp", 23), ("unixCommands", 24), ("arap", 25), ("fingerDaemon", 26), ("routeDaemon", 27), ("rwhoDaemon", 28), ("securID", 29), ("apd", 30), ("ipxRouting", 31), ("ipxFiltering", 32), ("ipFiltering", 33), ("kerberos5", 34), ("radius", 35), ("enviromentalManager", 36), ("terminalServer", 37), ("ssh", 38), ("tl1", 39)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: featType.setStatus('mandatory')
if mibBuilder.loadTexts: featType.setDescription('Identification of a feature type. Corresponds to a SERVER feature keyword.')
featStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("locked", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: featStatus.setStatus('mandatory')
if mibBuilder.loadTexts: featStatus.setDescription("The status of the feature as of the next system initialization. Corresponds to the presence of the feature's lable following the label 'Enabled Feature(s): in the UNIT display.")
featKey = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 33, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: featKey.setStatus('mandatory')
if mibBuilder.loadTexts: featKey.setDescription("The key a management system must supply to make a locked feature available. When unlocking a feature and the management system does not supply a value for featStatus, that object's value is implementation dependent. When returning this value, the agent always returns a zero length DisplayString.")
xBootControl = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 1, 34))
bootControlLoadInternetFile = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadInternetFile.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlLoadInternetFile.setDescription("The filename to request when loading an image via TFTP. Corresponds directly to SERVER INTERNET LOAD FILE and the value labeled 'Internet Load File:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlLoadInternetServer = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadInternetServer.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlLoadInternetServer.setDescription("The internet address of the server to use when loading an image via TFTP. Corresponds directly to SERVER INTERNET LOAD HOST and the value labeled 'Internet Load Host:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlLoadInternetGateway = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadInternetGateway.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlLoadInternetGateway.setDescription("The internet address of the gateway to use when loading an image via TFTP. Corresponds directly to SERVER INTERNET LOAD GATEWAY and the value labeled 'Internet Load Gateway:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlLoadBootpTftp = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadBootpTftp.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlLoadBootpTftp.setDescription("Control for loading via the combination of BOOTP and TFTP. Corresponds to SERVER LOAD PROTOCOL BOOTPTFTP and the presence of 'BOOTP/TFTP/' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlLoadTftpDirect = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadTftpDirect.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlLoadTftpDirect.setDescription("Control for loading via directed TFTP. Corresponds to SERVER LOAD PROTOCOL TFTPDIRECT and the presence of 'TFTPDIRECT' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlLoadLocal = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadLocal.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlLoadLocal.setDescription("Control for loading from a local medium. Corresponds to SERVER LOAD PROTOCOL LOCAL and the presence of 'LOCAL' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlLoadMop = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadMop.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlLoadMop.setDescription("Control for loading via DEC MOP. Corresponds to SERVER LOAD PROTOCOL MOP and the presence of 'MOP' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlLoadProprietary = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadProprietary.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlLoadProprietary.setDescription("Control for loading via MRV In-Reach-proprietary extended MOP. Corresponds to SERVER LOAD PROTOCOL PROPRIETARY and the presence of 'Proprietary' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlLoadRarpTftp = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlLoadRarpTftp.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlLoadRarpTftp.setDescription("Control for loading via the combination of RARP and TFTP. Corresponds to SERVER LOAD PROTOCOL RARPTFTP and the presence of 'RARP/TFTP' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlDumpBootpTftp = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlDumpBootpTftp.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlDumpBootpTftp.setDescription("Control for dumping via the combination of BOOTP and TFTP. Corresponds to SERVER DUMP PROTOCOL BOOTPTFTP and the presence of 'BOOTP/TFTP' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlDumpLocal = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlDumpLocal.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlDumpLocal.setDescription("Control for dumping to a local medium. Corresponds to SERVER DUMP PROTOCOL LOCAL and the presence of 'Local' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlDumpMop = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlDumpMop.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlDumpMop.setDescription("Control for dumping via DEC MOP. Corresponds to SERVER DUMP PROTOCOL MOP and the presence of 'MOP' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlDumpProprietary = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlDumpProprietary.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlDumpProprietary.setDescription("Control for dumping via MRV In-Reach-proprietary extended MOP. Corresponds to SERVER DUMP PROTOCOL PROPRIETARY and the presence of 'Proprietary' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlDumpRarpTftp = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlDumpRarpTftp.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlDumpRarpTftp.setDescription("Control for dumping via the combination of RARP and TFTP. Corresponds to SERVER DUMP PROTOCOL RARPTFTP and the presence of 'RARP/TFTP' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlParamBootpTftp = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlParamBootpTftp.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlParamBootpTftp.setDescription("Control for loading parameters via the combination of BOOTP and TFTP. Corresponds to SERVER PARAMETER PROTOCOL MOP and the presence of 'BOOTP/TFTP' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlParamLocal = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlParamLocal.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlParamLocal.setDescription("Control for loading parameters from a local medium. Corresponds to SERVER PARAMETER PROTOCOL LOCAL and the presence of 'LOCAL' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlParamMop = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlParamMop.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlParamMop.setDescription("Control for loading parameters via DEC MOP. Corresponds to SERVER PARAMETER PROTOCOL MOP and the presence of 'MOP' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlParamProprietary = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlParamProprietary.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlParamProprietary.setDescription("Control for loading parameters via MRV In-Reach-proprietary extended MOP. Corresponds to SERVER PARAMETER PROTOCOL PROPRIETARY and the presence of 'Proprietary' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootControlParamRarpTftp = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 34, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootControlParamRarpTftp.setStatus('deprecated')
if mibBuilder.loadTexts: bootControlParamRarpTftp.setDescription("Control for loading parameters via the combination of RARP and TFTP. Corresponds to SERVER PARAMETER PROTOCOL RARPTFTP and the presence of 'RARP/TFTP' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
sysInstalledMemory = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInstalledMemory.setStatus('mandatory')
if mibBuilder.loadTexts: sysInstalledMemory.setDescription("The total number of bytes of main memory installed in the system. Corresponds directly to the value labeled 'Installed' on the SERVER ALTERNATE STATUS display. A value of 0 indicates standard memory for the particular hardware.")
sysTemperatureLevel = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("normal", 2), ("high", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTemperatureLevel.setStatus('mandatory')
if mibBuilder.loadTexts: sysTemperatureLevel.setDescription("The temperature level of the system. 'unknown' indicates the system does not support a temperature sensor. 'normal' indicates a normal temperature level. 'high' indicates an excessive temperature level. Corresponds directly to the value labeled 'Temperature Level:' in the SERVER ALTERNATE STATUS display.")
bootRecordTable = MibTable((1, 3, 6, 1, 4, 1, 33, 1, 37), )
if mibBuilder.loadTexts: bootRecordTable.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordTable.setDescription('A list of boot control records.')
bootRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 1, 37, 1), ).setIndexNames((0, "MRVINREACH", "bootRecordIndex"))
if mibBuilder.loadTexts: bootRecordEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordEntry.setDescription('Values for a boot record.')
bootRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootRecordIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordIndex.setDescription('An index value that uniquely identifies a boot control record entry, from 1 to the number of entries for the system.')
bootRecordLoadInternetFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordLoadInternetFile.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordLoadInternetFile.setDescription("The filename to request when loading an image via TFTP. Corresponds directly to SERVER INTERNET LOAD FILE and the value labeled 'Internet Load File:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordLoadInternetServer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordLoadInternetServer.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordLoadInternetServer.setDescription("The internet address of the server to use when loading an image via TFTP. Corresponds directly to SERVER INTERNET LOAD HOST and the value labeled 'Internet Load Host:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordLoadInternetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordLoadInternetGateway.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordLoadInternetGateway.setDescription("The internet address of the gateway to use when loading an image via TFTP. Corresponds directly to SERVER INTERNET LOAD GATEWAY and the value labeled 'Internet Load Gateway:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordLoadBootpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordLoadBootpTftp.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordLoadBootpTftp.setDescription("Control for loading via the combination of BOOTP and TFTP. Corresponds to SERVER LOAD PROTOCOL BOOTPTFTP and the presence of 'BOOTP/TFTP/' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordLoadTftpDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordLoadTftpDirect.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordLoadTftpDirect.setDescription("Control for loading via directed TFTP. Corresponds to SERVER LOAD PROTOCOL TFTPDIRECT and the presence of 'TFTPDIRECT' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordLoadLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordLoadLocal.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordLoadLocal.setDescription("Control for loading from a local medium. Corresponds to SERVER LOAD PROTOCOL LOCAL and the presence of 'LOCAL' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordLoadMop = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordLoadMop.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordLoadMop.setDescription("Control for loading via DEC MOP. Corresponds to SERVER LOAD PROTOCOL MOP and the presence of 'MOP' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordLoadProprietary = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordLoadProprietary.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordLoadProprietary.setDescription("Control for loading via MRV In-Reach-proprietary extended MOP. Corresponds to SERVER LOAD PROTOCOL PROPRIETARY and the presence of 'Proprietary' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordLoadRarpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordLoadRarpTftp.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordLoadRarpTftp.setDescription("Control for loading via the combination of RARP and TFTP. Corresponds to SERVER LOAD PROTOCOL RARPTFTP and the presence of 'RARP/TFTP' following the label 'Load Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordDumpBootpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordDumpBootpTftp.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordDumpBootpTftp.setDescription("Control for dumping via the combination of BOOTP and TFTP. Corresponds to SERVER DUMP PROTOCOL BOOTPTFTP and the presence of 'BOOTP/TFTP' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordDumpLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordDumpLocal.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordDumpLocal.setDescription("Control for dumping to a local medium. Corresponds to SERVER DUMP PROTOCOL LOCAL and the presence of 'Local' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordDumpMop = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordDumpMop.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordDumpMop.setDescription("Control for dumping via DEC MOP. Corresponds to SERVER DUMP PROTOCOL MOP and the presence of 'MOP' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordDumpProprietary = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordDumpProprietary.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordDumpProprietary.setDescription("Control for dumping via MRV In-Reach-proprietary extended MOP. Corresponds to SERVER DUMP PROTOCOL PROPRIETARY and the presence of 'Proprietary' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordDumpRarpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordDumpRarpTftp.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordDumpRarpTftp.setDescription("Control for dumping via the combination of RARP and TFTP. Corresponds to SERVER DUMP PROTOCOL RARPTFTP and the presence of 'RARP/TFTP' following the label 'Dump Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordParamBootpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordParamBootpTftp.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordParamBootpTftp.setDescription("Control for loading parameters via the combination of BOOTP and TFTP. Corresponds to SERVER PARAMETER PROTOCOL MOP and the presence of 'BOOTP/TFTP' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordParamLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordParamLocal.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordParamLocal.setDescription("Control for loading parameters from a local medium. Corresponds to SERVER PARAMETER PROTOCOL LOCAL and the presence of 'LOCAL' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordParamMop = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordParamMop.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordParamMop.setDescription("Control for loading parameters via DEC MOP. Corresponds to SERVER PARAMETER PROTOCOL MOP and the presence of 'MOP' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordParamProprietary = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordParamProprietary.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordParamProprietary.setDescription("Control for loading parameters via MRV In-Reach proprietary extended MOP. Corresponds to SERVER PARAMETER PROTOCOL PROPRIETARY and the presence of 'Proprietary' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordParamRarpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordParamRarpTftp.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordParamRarpTftp.setDescription("Control for loading parameters via the combination of RARP and TFTP. Corresponds to SERVER PARAMETER PROTOCOL RARPTFTP and the presence of 'RARP/TFTP' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordStatus.setDescription("The status of the entry. Set to 'disabled' to disable the entry.")
bootRecordMopFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordMopFile.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordMopFile.setDescription('The software file name to request for down-line load of the server via MOP or XMOP.')
bootRecordInternetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordInternetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordInternetAddress.setDescription('The internet address of the system is to use for itself when loading via TFTP. The value 0.0.0.0 indicates default action.')
bootRecordParamTftpDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordParamTftpDirect.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordParamTftpDirect.setDescription("Control for loading parameters via the protocol DTFTP. Corresponds to SERVER PARAMETER PROTOCOL DTFTP and the presence of 'DTFTP' following the label 'Parameter Protocols Enabled:' in the SERVER BOOT CHARACTERISTICS display.")
bootRecordInternetDelimiter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 1, 37, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootRecordInternetDelimiter.setStatus('mandatory')
if mibBuilder.loadTexts: bootRecordInternetDelimiter.setDescription('The character separating the load file directory name from the file name.')
sysLastAgentError = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("noError", 1), ("tooBig", 2), ("noSuchName", 3), ("badValue", 4), ("readOnly", 5), ("genErr", 6), ("badCommunity", 7), ("badVersion", 8), ("badType", 9), ("badClient", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLastAgentError.setStatus('mandatory')
if mibBuilder.loadTexts: sysLastAgentError.setDescription("The most recent error the agent encountered in attempting to satisfy an SNMP request. Reading this value has the side effect of resetting it to 'noError'.")
sysRcpMulticast = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRcpMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: sysRcpMulticast.setDescription("Control for sending of the MOP RCP system identifier message. Corresponds directly to the presence of 'RCP Multicast' under the label 'Enabled Characteristics' in the SERVER CHARACTERISTICS display.")
sysTimeServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 41), TypedAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTimeServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sysTimeServerAddress.setDescription('The address of the time server, either an IpAddr or an ethernet address.')
sysTimeServerConfiguredAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 46), TypedAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeServerConfiguredAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sysTimeServerConfiguredAddress.setDescription('The address of a configured time server (, either an IpAddr or an ethernet address).')
sysTimeServerConfiguredStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("required", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeServerConfiguredStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sysTimeServerConfiguredStatus.setDescription('Control whether the sysTimeServerConfiguredAddress is the only time server used to obtain the time (REQUIRED), the first time server used to obtain the time (ENABLED), or not used to obtain the time (DISABLED).')
sysBootRecordOverrideDefinedAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBootRecordOverrideDefinedAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sysBootRecordOverrideDefinedAddress.setDescription('Control to override the internally defined Internet address with that obtained from the bootp loading protocol.')
sysBootRecordMessageEnable = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBootRecordMessageEnable.setStatus('mandatory')
if mibBuilder.loadTexts: sysBootRecordMessageEnable.setDescription("Control to display load status messages during reboot. Corresponds directly to the value labeled 'Status Message:' in the SERVER LOADDUMP display.")
sysBootRecordParamDefaults = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBootRecordParamDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: sysBootRecordParamDefaults.setDescription("Control to use default parameters upon the next reboot after which time this control reverts to disabled. This control only applies to stand-alone devices. Corresponds directly to the value labeled 'Default Parameters:' in the SERVER LOADDUMP display.")
sysLoginAuthFailureTrapType = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("loginPassword", 2), ("pap", 3), ("chap", 4), ("kerberos", 5), ("securId", 6), ("radius", 7), ("privilegedPassword", 8), ("limitedPrivilegedPassword", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLoginAuthFailureTrapType.setStatus('mandatory')
if mibBuilder.loadTexts: sysLoginAuthFailureTrapType.setDescription('Indicates the type of authentication failure which last occurred.')
sysLoginAuthTrapIdentity = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 81), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLoginAuthTrapIdentity.setStatus('mandatory')
if mibBuilder.loadTexts: sysLoginAuthTrapIdentity.setDescription('An identification string for the circuit or port where an authentication failure last occurred.')
sysLocalScriptServer = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocalScriptServer.setStatus('mandatory')
if mibBuilder.loadTexts: sysLocalScriptServer.setDescription('Control to allow script serving for this system from a script residing in a local flash card.')
sysInReachManagementSecurityStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysInReachManagementSecurityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sysInReachManagementSecurityStatus.setDescription('Indicates whether per port authentication is in use. This includes username, password, privilege level, and list of power outlets controlled by that user, or console connections allowed from that port.')
sysProductName = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 84), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProductName.setStatus('mandatory')
if mibBuilder.loadTexts: sysProductName.setDescription('Displays the product name of this system.')
sysModemPresent = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noModem", 1), ("modem", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModemPresent.setStatus('mandatory')
if mibBuilder.loadTexts: sysModemPresent.setDescription('Indicates whether this system has a built-in modem.')
sysCauseAction = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCauseAction.setStatus('mandatory')
if mibBuilder.loadTexts: sysCauseAction.setDescription("A control for toggling the cause action feature. Corresponds directly to the presence of 'Trigger/Action' under the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display. The desired change will not take effect until the next system initialization.")
sysWebServerConfigAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysWebServerConfigAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sysWebServerConfigAdminStatus.setDescription("A control for bring the web server up or down. Corresponds directly to the presence of 'Web Server' under the label 'Enabled Characteristics:' in the SERVER CHARACTERISTICS display.")
sysTl1SourceIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 88), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTl1SourceIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: sysTl1SourceIdentifier.setDescription('The source identifier (SID) is the server name used by TL1 to identify the server.')
sysInitializeDelayParameter = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysInitializeDelayParameter.setStatus('mandatory')
if mibBuilder.loadTexts: sysInitializeDelayParameter.setDescription("Control to begin the system initialization process providing that at least one parameter server is current. Corresponds directly to the INITIALIZE DELAY PARAMETER command. In response to a get-request or get-next-request, the agent always returns 'ready' for this value.")
sysTimeProtocol = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: sysTimeProtocol.setDescription('Indicates whether the SNTP protocol is used to obtain the time at startup. If disabled, the older TIMED protocol is used. Both protocols run over UDP.')
sysTimeBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 33, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: sysTimeBroadcast.setDescription('Indicates whether the unit will broadcast for the time at startup.')
resourceLack = NotificationType((1, 3, 6, 1, 4, 1, 33, 1) + (0,1)).setObjects(("MRVINREACH", "resType"))
if mibBuilder.loadTexts: resourceLack.setDescription('Indication that the system incremented the corresponding value of resLacks.')
resourceFailure = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,9)).setObjects(("MRVINREACH", "resType"), ("MRVINREACH", "sysLocation"))
if mibBuilder.loadTexts: resourceFailure.setDescription('Indication that a system resource lack occurred of the type resType.')
sysLoginAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 33) + (0,28)).setObjects(("MRVINREACH", "sysLoginAuthFailureTrapType"), ("MRVINREACH", "sysLoginAuthTrapIdentity"))
if mibBuilder.loadTexts: sysLoginAuthenticationFailure.setDescription('Indicates when and where a user attempted and failed to access the system.')
mibBuilder.exportSymbols("MRVINREACH", xRadiusPortEntry=xRadiusPortEntry, tcpDataSendDelay=tcpDataSendDelay, ip=ip, alarmInputHighDensity0266Normal=alarmInputHighDensity0266Normal, xPppIpcpConfigVJCompSlots=xPppIpcpConfigVJCompSlots, snmpInTraps=snmpInTraps, eToAOffset=eToAOffset, xremotePortXdmQuery=xremotePortXdmQuery, ipxIfNetbiosOut=ipxIfNetbiosOut, latMulticastTimer=latMulticastTimer, basicPortDefaultUserName=basicPortDefaultUserName, alarmInputLowDensity0034Alarm=alarmInputLowDensity0034Alarm, latNodeIdentification=latNodeIdentification, latAddressChange=latAddressChange, expEgpToIsisRuleAction=expEgpToIsisRuleAction, bootRecordDumpBootpTftp=bootRecordDumpBootpTftp, ospfIfMtrcTable=ospfIfMtrcTable, xRadiusServerName1=xRadiusServerName1, latNodeInSlots=latNodeInSlots, xPppChapPassword=xPppChapPassword, xPppConfigTable=xPppConfigTable, slotHardwareSerialNumber=slotHardwareSerialNumber, slotControllerEntry=slotControllerEntry, xremotePortXdmHost=xremotePortXdmHost, expRipToIsisRuleExpenseMetricAction=expRipToIsisRuleExpenseMetricAction, alarmInputLowDensity0026Normal=alarmInputLowDensity0026Normal, slipIndex=slipIndex, ipRouterIfProtocolPriority=ipRouterIfProtocolPriority, icmpInParmProbs=icmpInParmProbs, sysBootRecordOverrideDefinedAddress=sysBootRecordOverrideDefinedAddress, arapPortZoneAccess=arapPortZoneAccess, alarmInputHighDensity0165Alarm=alarmInputHighDensity0165Alarm, ospfXIfTable=ospfXIfTable, alarmInputHighDensity0010Normal=alarmInputHighDensity0010Normal, xPppIpcpStatusLocalAddress=xPppIpcpStatusLocalAddress, ipIfFilterDstAddr=ipIfFilterDstAddr, xPppLcpStatusTxConNak=xPppLcpStatusTxConNak, basicPortAutoConnect=basicPortAutoConnect, expEgpToEgpRuleAction=expEgpToEgpRuleAction, sessionLogReliable=sessionLogReliable, kerbPortEntry=kerbPortEntry, securIDServerAccess0=securIDServerAccess0, ipReasmFails=ipReasmFails, basicSerialPortTerminalType=basicSerialPortTerminalType, paramServerTable=paramServerTable, bootRecordParamLocal=bootRecordParamLocal, tcpActiveOpens=tcpActiveOpens, alarmInputHighDensity0297Alarm=alarmInputHighDensity0297Alarm, phivCircuitImportAreaIf=phivCircuitImportAreaIf, ospfXIfTypeActual=ospfXIfTypeActual, menuNestedEthernet=menuNestedEthernet, latRetransmitLimit=latRetransmitLimit, sshPortNewlineFiltering=sshPortNewlineFiltering, basicOffersSent=basicOffersSent, dumpMerit=dumpMerit, expRipToRipRuleMetric=expRipToRipRuleMetric, alarmInputHighDensity0314Alarm=alarmInputHighDensity0314Alarm, alarmInputHighDensity0242Alarm=alarmInputHighDensity0242Alarm, ifOutOctets=ifOutOctets, telnetSerialPortSynchronizeCharacter=telnetSerialPortSynchronizeCharacter, xPppIpcpRxTrmReq=xPppIpcpRxTrmReq, deviceTable=deviceTable, slotBootControlFlagLoadTftpDirect=slotBootControlFlagLoadTftpDirect, alarmInputHighDensity0187Alarm=alarmInputHighDensity0187Alarm, alarmInputLowDensity0049Alarm=alarmInputLowDensity0049Alarm, alarmInputHighDensity0120Alarm=alarmInputHighDensity0120Alarm, sysRomVersion=sysRomVersion, slotBootControlFlagParamXmop=slotBootControlFlagParamXmop, basicContactClosureOrAlarmInputTable=basicContactClosureOrAlarmInputTable, alarmInputLowDensity0008Alarm=alarmInputLowDensity0008Alarm, basicPortAlarmMaster=basicPortAlarmMaster, xPppIpcpConfigLocalRangeStart=xPppIpcpConfigLocalRangeStart, alarmInputLowDensity0014Normal=alarmInputLowDensity0014Normal, alarmInputHighDensity0283Normal=alarmInputHighDensity0283Normal, basicSerialPortLineEditor=basicSerialPortLineEditor, telnetPortNewlineTranslation=telnetPortNewlineTranslation, alarmInputHighDensity0203Alarm=alarmInputHighDensity0203Alarm, broadcastGroupSlavesBroadcastOnly=broadcastGroupSlavesBroadcastOnly, basicEventPurge=basicEventPurge, expIsisToEgpRuleToAs=expIsisToEgpRuleToAs, xPppLcpConfigAuth=xPppLcpConfigAuth, sysChassisFaultTransitions=sysChassisFaultTransitions, atIfIndex=atIfIndex, expOspfToIsisRuleAction=expOspfToIsisRuleAction, xPppLinkOpen=xPppLinkOpen, expEgpToOspfRuleTable=expEgpToOspfRuleTable, alarmInputLowDensity0027Alarm=alarmInputLowDensity0027Alarm, ipxIfRipFilterTable=ipxIfRipFilterTable, ipxIfFilterRowStatus=ipxIfFilterRowStatus, icmpPingHostTrapSeverityLevel=icmpPingHostTrapSeverityLevel, xIpNetToMediaEntry=xIpNetToMediaEntry, alarmInputHighDensity0326Normal=alarmInputHighDensity0326Normal, ipForwarding=ipForwarding, basicPortIdleTimeout=basicPortIdleTimeout, alarmInputHighDensity0163Normal=alarmInputHighDensity0163Normal, alarmInputHighDensity0173Alarm=alarmInputHighDensity0173Alarm, pingHostsTable=pingHostsTable, rs232InSigTable=rs232InSigTable, RouterID=RouterID, dialPortTable=dialPortTable, alarmInputLowDensity0061Alarm=alarmInputLowDensity0061Alarm, alarmInputHighDensity0318Alarm=alarmInputHighDensity0318Alarm, alarmInputHighDensity0288Alarm=alarmInputHighDensity0288Alarm, latInBadMessages=latInBadMessages, alarmInputHighDensity0246Alarm=alarmInputHighDensity0246Alarm, alarmInputHighDensity0184Normal=alarmInputHighDensity0184Normal, alarmInputHighDensity0095Alarm=alarmInputHighDensity0095Alarm, alarmInputHighDensity0166Normal=alarmInputHighDensity0166Normal, alarmInputHighDensity0179Normal=alarmInputHighDensity0179Normal, ipIfFilter2SrcPortEnd=ipIfFilter2SrcPortEnd, rs232OutSigEntry=rs232OutSigEntry, alarmInputHighDensity0287Normal=alarmInputHighDensity0287Normal, alarmInputHighDensity0311Alarm=alarmInputHighDensity0311Alarm, applePortLastErrorData=applePortLastErrorData, ipxSapEntry=ipxSapEntry, rotaryEntry=rotaryEntry, alarmInputLowDensity0035Alarm=alarmInputLowDensity0035Alarm, tn3270KeyName=tn3270KeyName, ipxSapName=ipxSapName, basicPortControlledSessionTerminate=basicPortControlledSessionTerminate, basicControlOutputSignalDtrRts=basicControlOutputSignalDtrRts, alarmInputHighDensity0028Alarm=alarmInputHighDensity0028Alarm, dumpCompleted=dumpCompleted, basicPortMultisessions=basicPortMultisessions, ipxSapInterface=ipxSapInterface, alarmInputHighDensity0076Alarm=alarmInputHighDensity0076Alarm, alarmInputHighDensity0015Normal=alarmInputHighDensity0015Normal, pppIpConfigAdminStatus=pppIpConfigAdminStatus, egpNeighIntervalPoll=egpNeighIntervalPoll, alarmInputLowDensity0062Alarm=alarmInputLowDensity0062Alarm, paramServerName=paramServerName, xRadiusAcctFailed=xRadiusAcctFailed, expOspfToIsisRuleNetwork=expOspfToIsisRuleNetwork, ipxPrinterMac802_2=ipxPrinterMac802_2, rs232SyncPortInterruptedFrames=rs232SyncPortInterruptedFrames, basicPowerOutletEntry=basicPowerOutletEntry, phivCircuitCountDataBlocksSent=phivCircuitCountDataBlocksSent, snmpInGetRequests=snmpInGetRequests, alarmInputHighDensity0236Alarm=alarmInputHighDensity0236Alarm, sysBootRecordMessageEnable=sysBootRecordMessageEnable, applePortErrors=applePortErrors, alarmInputHighDensity0108Alarm=alarmInputHighDensity0108Alarm, tcpPortWindowSize=tcpPortWindowSize, alarmInputLowDensity0080Normal=alarmInputLowDensity0080Normal, basicPortDefaultDestProtocol=basicPortDefaultDestProtocol, alarmInputHighDensity0330Normal=alarmInputHighDensity0330Normal, icmpOutDestUnreachs=icmpOutDestUnreachs, slipPortPacketLengthErrors=slipPortPacketLengthErrors, pppLinkStatusLocalMRU=pppLinkStatusLocalMRU, phivCircuitOrigQueueLimit=phivCircuitOrigQueueLimit, basicPortUnixCommands=basicPortUnixCommands, snmpOutGetRequests=snmpOutGetRequests, sessionLogTl1AutonomousLogSize=sessionLogTl1AutonomousLogSize, alarmInputLowDensity0014Alarm=alarmInputLowDensity0014Alarm, sessionLogTl1CommandLogSize=sessionLogTl1CommandLogSize, alarmInputLowDensity0031Alarm=alarmInputLowDensity0031Alarm, slotBootGatewayAddress=slotBootGatewayAddress, basicPortTable=basicPortTable, basicPortIndex=basicPortIndex, phivCircuitParametersTable=phivCircuitParametersTable, alarmInputHighDensity0044Alarm=alarmInputHighDensity0044Alarm, kerbServerName1=kerbServerName1, alarmInputHighDensity0179Alarm=alarmInputHighDensity0179Alarm, xPppIpcpRxConAck=xPppIpcpRxConAck, basicLoginPrompt=basicLoginPrompt, xPppIpxcpStatusState=xPppIpxcpStatusState, basicHumiditySensorEntry=basicHumiditySensorEntry, alarmInputHighDensity0103Alarm=alarmInputHighDensity0103Alarm, sysZeroBase=sysZeroBase, xRadiusCircuit=xRadiusCircuit, alarmInputHighDensity0335Alarm=alarmInputHighDensity0335Alarm, alarmInputHighDensity0241Alarm=alarmInputHighDensity0241Alarm, ripNetRipsOut=ripNetRipsOut, alarmInputHighDensity0074Alarm=alarmInputHighDensity0074Alarm, queueStatus=queueStatus, alarmInputHighDensity0290Alarm=alarmInputHighDensity0290Alarm, alarmInputHighDensity0284Alarm=alarmInputHighDensity0284Alarm, egpNeighInErrs=egpNeighInErrs, alarmInputHighDensity0115Normal=alarmInputHighDensity0115Normal, phivTrafficDst=phivTrafficDst, securIDSecureLoginsFailed=securIDSecureLoginsFailed, dod=dod, tsMxCard=tsMxCard, securIDMaxRetries=securIDMaxRetries, applePortExportEntry=applePortExportEntry, expRipToIsisRuleExpenseMetric=expRipToIsisRuleExpenseMetric, alarmInputHighDensity0182Normal=alarmInputHighDensity0182Normal, bootRecordLoadTftpDirect=bootRecordLoadTftpDirect, latPortEntry=latPortEntry, basicAlarmMasterInputModel=basicAlarmMasterInputModel, rs232InSigState=rs232InSigState, ipxIfProtocolPriority=ipxIfProtocolPriority, rs232SyncPortIndex=rs232SyncPortIndex, phivCircuitCountSecLastZeroed=phivCircuitCountSecLastZeroed, rs232InSigName=rs232InSigName, alarmInputHighDensity0355Normal=alarmInputHighDensity0355Normal, slotBootControlFlagDumpMop=slotBootControlFlagDumpMop, alarmInputHighDensity0374Alarm=alarmInputHighDensity0374Alarm, xSlot=xSlot, impOspfRuleNetwork=impOspfRuleNetwork, egpNeighEventTrigger=egpNeighEventTrigger, basicSerialPortTypeaheadLimit=basicSerialPortTypeaheadLimit, appletalk=appletalk, impRipRuleStatus=impRipRuleStatus, securIDPortTable=securIDPortTable, ipIfFilterSrcMask=ipIfFilterSrcMask, alarmInputHighDensity0039Normal=alarmInputHighDensity0039Normal, alarmInputHighDensity0279Alarm=alarmInputHighDensity0279Alarm, egpNeighStateUps=egpNeighStateUps, segmentIndex=segmentIndex, icmpInDestUnreachs=icmpInDestUnreachs, telnetSerialPortComControlServerRaisesDtr=telnetSerialPortComControlServerRaisesDtr, xSessionLog=xSessionLog, impIsisRuleNetwork=impIsisRuleNetwork, xPppLcpStatusRxEcoRep=xPppLcpStatusRxEcoRep, basicSerialPortForwardSwitch=basicSerialPortForwardSwitch, alarmInputHighDensity0248Alarm=alarmInputHighDensity0248Alarm, menuIndex=menuIndex, basicAlarmMasterInputEntry=basicAlarmMasterInputEntry, snmpOutGetResponses=snmpOutGetResponses, alarmInputHighDensity0153Normal=alarmInputHighDensity0153Normal, pppIpConfigTable=pppIpConfigTable, expStaticToEgpRuleMetricAction=expStaticToEgpRuleMetricAction, alarmInputHighDensity0162Alarm=alarmInputHighDensity0162Alarm, sshServerMaxBufferSize=sshServerMaxBufferSize, xImport=xImport, basicPortFallBack=basicPortFallBack, pppIp=pppIp, alarmInputHighDensity0301Alarm=alarmInputHighDensity0301Alarm, tn3270PortScanner=tn3270PortScanner, alarmInputHighDensity0380Normal=alarmInputHighDensity0380Normal, Status=Status, basicSerialPortIndex=basicSerialPortIndex, powerSupplyThermalWarningStatus=powerSupplyThermalWarningStatus, sshCipherMask=sshCipherMask, securIDServerAccessFailed3=securIDServerAccessFailed3, alarmInputHighDensity0250Alarm=alarmInputHighDensity0250Alarm, sysBootRecordParamDefaults=sysBootRecordParamDefaults, alarmInputHighDensity0204Alarm=alarmInputHighDensity0204Alarm, impRipRuleType=impRipRuleType, alarmInputHighDensity0359Normal=alarmInputHighDensity0359Normal, xIpNetToMediaTable=xIpNetToMediaTable, ddcmp=ddcmp, telnetSerialPortEntry=telnetSerialPortEntry, xPppConfigActive=xPppConfigActive, basicSerialPortQuadartReceiveDiscard=basicSerialPortQuadartReceiveDiscard, applePortZoneIndex=applePortZoneIndex, alarmInputHighDensity0101Normal=alarmInputHighDensity0101Normal, paramClientPath=paramClientPath, slotBootstrapFirmwareRevision=slotBootstrapFirmwareRevision, impEgpRuleEntry=impEgpRuleEntry, ipxIfFilterIndex=ipxIfFilterIndex, menuNestedName=menuNestedName, powerSupplyEntry=powerSupplyEntry)
mibBuilder.exportSymbols("MRVINREACH", alarmInputHighDensity0298Normal=alarmInputHighDensity0298Normal, basicSerialPortUsernameCharSet=basicSerialPortUsernameCharSet, pppLinkConfigMagicNumber=pppLinkConfigMagicNumber, slipRemoteAddress=slipRemoteAddress, alarmInputHighDensity0105Alarm=alarmInputHighDensity0105Alarm, xPppConfigRestartTimer=xPppConfigRestartTimer, impIsisRuleMetric=impIsisRuleMetric, alarmInputHighDensity0144Normal=alarmInputHighDensity0144Normal, alarmInputHighDensity0068Alarm=alarmInputHighDensity0068Alarm, udpBcstServerAddress=udpBcstServerAddress, alarmInputHighDensity0117Normal=alarmInputHighDensity0117Normal, basicPortControlledPortLogin=basicPortControlledPortLogin, basicPortOnboardSecurity=basicPortOnboardSecurity, paramServerAddressType=paramServerAddressType, alarmInputHighDensity0020Normal=alarmInputHighDensity0020Normal, alarmInputHighDensity0272Alarm=alarmInputHighDensity0272Alarm, xRadServer2SubGrp=xRadServer2SubGrp, alarmInputHighDensity0059Normal=alarmInputHighDensity0059Normal, tn3270KeyDescription=tn3270KeyDescription, alarmInputLowDensity0021Alarm=alarmInputLowDensity0021Alarm, alarmInputHighDensity0038Normal=alarmInputHighDensity0038Normal, latVisibleServiceEntry=latVisibleServiceEntry, queueHigh=queueHigh, telnetSerialPortComControlServer=telnetSerialPortComControlServer, rs232PortEntry=rs232PortEntry, basicContactClosureOrAlarmInputZone=basicContactClosureOrAlarmInputZone, alarmInputHighDensity0168Alarm=alarmInputHighDensity0168Alarm, alarmInputHighDensity0370Normal=alarmInputHighDensity0370Normal, icmpInTimestamps=icmpInTimestamps, dialPortIndex=dialPortIndex, alarmInputHighDensity0006Alarm=alarmInputHighDensity0006Alarm, alarmInputHighDensity0082Normal=alarmInputHighDensity0082Normal, impOspfRuleStatus=impOspfRuleStatus, expEgpToOspfRuleNetwork=expEgpToOspfRuleNetwork, sessionLogHostType=sessionLogHostType, ipRouterIfForwardsIn=ipRouterIfForwardsIn, ipIfFilter2DstMask=ipIfFilter2DstMask, basicPortPowerMasterDeviceStatus=basicPortPowerMasterDeviceStatus, sessionLogConnectTime=sessionLogConnectTime, alarmInputLowDensity0020Normal=alarmInputLowDensity0020Normal, deviceEntry=deviceEntry, tcpRetransmitMin=tcpRetransmitMin, alarmInputHighDensity0261Normal=alarmInputHighDensity0261Normal, basicSerialPortSubnetAutoDiscovery=basicSerialPortSubnetAutoDiscovery, xRadiusLogins=xRadiusLogins, alarmInputHighDensity0026Alarm=alarmInputHighDensity0026Alarm, alarmInputHighDensity0224Alarm=alarmInputHighDensity0224Alarm, domainResolverPppSecondaryServer=domainResolverPppSecondaryServer, tn3270DeviceScreenNumber=tn3270DeviceScreenNumber, bootRecordLoadLocal=bootRecordLoadLocal, expOspfToRipRuleAction=expOspfToRipRuleAction, ipxIfRipFilterEntry=ipxIfRipFilterEntry, snmpOutNoSuchNames=snmpOutNoSuchNames, alarmInputHighDensity0070Normal=alarmInputHighDensity0070Normal, securIDServerAccessFailed2=securIDServerAccessFailed2, bootRecordEntry=bootRecordEntry, ipRouterIfIndex=ipRouterIfIndex, alarmInputLowDensity0051Normal=alarmInputLowDensity0051Normal, deviceFormatMedium=deviceFormatMedium, basicPowerStatusFuseB=basicPowerStatusFuseB, alarmInputHighDensity0338Alarm=alarmInputHighDensity0338Alarm, alarmInputHighDensity0348Alarm=alarmInputHighDensity0348Alarm, expEgpToIsisRuleTable=expEgpToIsisRuleTable, clientName=clientName, alarmInputHighDensity0259Alarm=alarmInputHighDensity0259Alarm, ipIfFilter2DstPortEnd=ipIfFilter2DstPortEnd, alarmInputLowDensity0026Alarm=alarmInputLowDensity0026Alarm, impEgpRuleTable=impEgpRuleTable, alarmInputHighDensity0289Alarm=alarmInputHighDensity0289Alarm, basicSessControlled=basicSessControlled, telnetSerialPortIndex=telnetSerialPortIndex, latNodeInBadSlots=latNodeInBadSlots, xPppLcpStatusRxAuth=xPppLcpStatusRxAuth, ipxIfSapBcst=ipxIfSapBcst, charPortOutCharacters=charPortOutCharacters, icmpPingHostIndex=icmpPingHostIndex, oem=oem, slipState=slipState, alarmInputHighDensity0046Alarm=alarmInputHighDensity0046Alarm, basicSerialPortLineEditorDeleteLine=basicSerialPortLineEditorDeleteLine, alarmInputHighDensity0085Normal=alarmInputHighDensity0085Normal, alarmInputHighDensity0009Alarm=alarmInputHighDensity0009Alarm, psEntryDirection=psEntryDirection, udpNoPorts=udpNoPorts, interfaceTable=interfaceTable, alarmInputHighDensity0043Normal=alarmInputHighDensity0043Normal, alarmInputHighDensity0341Normal=alarmInputHighDensity0341Normal, netLoginPortEntry=netLoginPortEntry, impEgpRuleType=impEgpRuleType, applePortBringBackTime=applePortBringBackTime, dialPortDialbackNoUsername=dialPortDialbackNoUsername, phivTrafficPercent=phivTrafficPercent, ipxSapIfTable=ipxSapIfTable, ipxIfRipOut=ipxIfRipOut, xPppIpxcpRxConNak=xPppIpxcpRxConNak, alarmInputHighDensity0247Normal=alarmInputHighDensity0247Normal, ipTrafficMonitoring=ipTrafficMonitoring, expRipToEgpRuleNetwork=expRipToEgpRuleNetwork, bootControlDumpMop=bootControlDumpMop, slotBootIndex=slotBootIndex, xPppIpxcpTxConReq=xPppIpxcpTxConReq, egp=egp, alarmInputLowDensity0004Alarm=alarmInputLowDensity0004Alarm, charPortSessionMaximum=charPortSessionMaximum, applePortZoneEntry=applePortZoneEntry, alarmInputHighDensity0218Normal=alarmInputHighDensity0218Normal, alarmInputHighDensity0232Normal=alarmInputHighDensity0232Normal, ifSpeed=ifSpeed, pppIpRemoteMaxSlotId=pppIpRemoteMaxSlotId, alarmInputLowDensity0068Alarm=alarmInputLowDensity0068Alarm, alarmInputHighDensity0266Alarm=alarmInputHighDensity0266Alarm, basicContactClosureOrAlarmInputFaultSeverity=basicContactClosureOrAlarmInputFaultSeverity, alarmInputHighDensity0107Normal=alarmInputHighDensity0107Normal, resourceLack=resourceLack, sshPortEntry=sshPortEntry, arapPortTimeRemaining=arapPortTimeRemaining, basicActiveUsers=basicActiveUsers, alarmInputHighDensity0097Normal=alarmInputHighDensity0097Normal, charPortOutFlowType=charPortOutFlowType, ipIfFilterSrcPort=ipIfFilterSrcPort, TypedAddress=TypedAddress, alarmInputHighDensity0364Alarm=alarmInputHighDensity0364Alarm, TOSType=TOSType, xRadiusPortSolicitStatus=xRadiusPortSolicitStatus, alarmInputLowDensity0030Alarm=alarmInputLowDensity0030Alarm, alarmInputHighDensity0263Alarm=alarmInputHighDensity0263Alarm, xApplePort=xApplePort, alarmInputHighDensity0033Normal=alarmInputHighDensity0033Normal, queuePortTable=queuePortTable, alarmInputHighDensity0305Normal=alarmInputHighDensity0305Normal, tcpConnState=tcpConnState, alarmInputHighDensity0085Alarm=alarmInputHighDensity0085Alarm, applePortForwardsIn=applePortForwardsIn, rs232PortOutSpeed=rs232PortOutSpeed, icmpInAddrMasks=icmpInAddrMasks, tn3270PortDeviceName=tn3270PortDeviceName, securIDPortIndex=securIDPortIndex, slotBootControlStorageClientSlot=slotBootControlStorageClientSlot, icmpOutSrcQuenchs=icmpOutSrcQuenchs, dot1dStpMaxAge=dot1dStpMaxAge, tn3270KeyStatus=tn3270KeyStatus, alarmInputHighDensity0299Alarm=alarmInputHighDensity0299Alarm, ipxPrinterPortIndex=ipxPrinterPortIndex, charPortOperStatus=charPortOperStatus, alarmInputHighDensity0173Normal=alarmInputHighDensity0173Normal, telnetPortIncomingTcpPort=telnetPortIncomingTcpPort, psEntryAccess=psEntryAccess, xFirmwareUpdate=xFirmwareUpdate, setClientAddressType=setClientAddressType, expEgpToIsisRuleFromAs=expEgpToIsisRuleFromAs, DisplayString=DisplayString, telnetSerialPortRs491=telnetSerialPortRs491, alarmInputHighDensity0311Normal=alarmInputHighDensity0311Normal, xPppIpcpStatusState2=xPppIpcpStatusState2, alarmInputHighDensity0230Alarm=alarmInputHighDensity0230Alarm, basicPortPowerMasterTimeDelay=basicPortPowerMasterTimeDelay, resType=resType, sysDescr=sysDescr, alarmMasterSideAOn=alarmMasterSideAOn, ipIfFilterAction=ipIfFilterAction, alarmInputHighDensity0037Alarm=alarmInputHighDensity0037Alarm, appleTrafficSrc=appleTrafficSrc, alarmInputHighDensity0282Normal=alarmInputHighDensity0282Normal, impRipRuleMetric=impRipRuleMetric, xBasic=xBasic, alarmInputHighDensity0189Alarm=alarmInputHighDensity0189Alarm, alarmInputHighDensity0221Normal=alarmInputHighDensity0221Normal, alarmInputHighDensity0248Normal=alarmInputHighDensity0248Normal, basicLoginPassword=basicLoginPassword, ipIfFilterIndex=ipIfFilterIndex, basicPowerMasterOutletState=basicPowerMasterOutletState, firmwareUpdateSlotIndex=firmwareUpdateSlotIndex, basicContactClosureOrAlarmInputEntry=basicContactClosureOrAlarmInputEntry, alarmInputHighDensity0155Normal=alarmInputHighDensity0155Normal, alarmInputHighDensity0191Normal=alarmInputHighDensity0191Normal, egpNeighTable=egpNeighTable, alarmInputLowDensity0013Alarm=alarmInputLowDensity0013Alarm, ir7040=ir7040, alarmInputLowDensity0057Alarm=alarmInputLowDensity0057Alarm, HelloRange=HelloRange, sysLoaderName=sysLoaderName, sessionLogInCharacters=sessionLogInCharacters, alarmInputLowDensity0065Alarm=alarmInputLowDensity0065Alarm, basicSlotNumber=basicSlotNumber, alarmInputHighDensity0087Alarm=alarmInputHighDensity0087Alarm, bootRecordDumpLocal=bootRecordDumpLocal, latNodeInBadMessages=latNodeInBadMessages, sshServerKeyLength=sshServerKeyLength, applePortNetEnd=applePortNetEnd, basicControlOutputRelayStatus=basicControlOutputRelayStatus, sysModemPresent=sysModemPresent, alarmInputHighDensity0056Normal=alarmInputHighDensity0056Normal, xInternet=xInternet, namedLoadFile=namedLoadFile, irMgr0=irMgr0, phivCircuitLastError=phivCircuitLastError, alarmInputHighDensity0249Alarm=alarmInputHighDensity0249Alarm, ir8004=ir8004, arapPortTimeConnected=arapPortTimeConnected, etherTxIndex=etherTxIndex, expStaticToIsisRuleDefaultMetricAction=expStaticToIsisRuleDefaultMetricAction, telnetSerialPortTransmitBufferedTime=telnetSerialPortTransmitBufferedTime, ipxIfSapFilterEntry=ipxIfSapFilterEntry, alarmInputHighDensity0231Alarm=alarmInputHighDensity0231Alarm, latCircuitTimer=latCircuitTimer, ipIfFilter2DstPortStart=ipIfFilter2DstPortStart, ipIfFilterDstPort=ipIfFilterDstPort, ospfXIfStatus=ospfXIfStatus, rs232OutSigTable=rs232OutSigTable, tcpInErrs=tcpInErrs, cclParsedScriptEntry=cclParsedScriptEntry, alarmInputHighDensity0318Normal=alarmInputHighDensity0318Normal, applePortImportEntry=applePortImportEntry, psEntryNumber=psEntryNumber, ripNetState=ripNetState, alarmInputLowDensity0007Alarm=alarmInputLowDensity0007Alarm, appleTrafficSort=appleTrafficSort, basicAlarmMasterInputTable=basicAlarmMasterInputTable, ipIfFilter2SrcAddr=ipIfFilter2SrcAddr, irM800=irM800, tcpConnLocalAddress=tcpConnLocalAddress, kerbMasterAccess=kerbMasterAccess, expRipToIsisRuleDelayMetricAction=expRipToIsisRuleDelayMetricAction, ipxRipRtRowStatus=ipxRipRtRowStatus, alarmInputLowDensity0060Normal=alarmInputLowDensity0060Normal, alarmInputLowDensity0080Alarm=alarmInputLowDensity0080Alarm, ipxSapSvType=ipxSapSvType, basicAlarmMasterInputFaultState=basicAlarmMasterInputFaultState, alarmInputHighDensity0202Alarm=alarmInputHighDensity0202Alarm, snmpAgentTrapClientPingHost1=snmpAgentTrapClientPingHost1, basicWelcome=basicWelcome, slotIOCardHardwareVersion=slotIOCardHardwareVersion, basicPortVerification=basicPortVerification, alarmInputLowDensity0024Normal=alarmInputLowDensity0024Normal, dot1dStpPortPriority=dot1dStpPortPriority, latNodeName=latNodeName, icmpOutEchoReps=icmpOutEchoReps, ipxIfTransitDelay=ipxIfTransitDelay, segmentEntry=segmentEntry, tcpPortTable=tcpPortTable, basicAlarmMasterInputPoint=basicAlarmMasterInputPoint, dot1dStpPortEnable=dot1dStpPortEnable, alarmInputHighDensity0303Alarm=alarmInputHighDensity0303Alarm, basicPasswordRetryLimit=basicPasswordRetryLimit, expEgpToEgpRuleStatus=expEgpToEgpRuleStatus, applePortZoneTable=applePortZoneTable, alarmInputHighDensity0229Alarm=alarmInputHighDensity0229Alarm, paramClientServerLimit=paramClientServerLimit, applePortImportType=applePortImportType, dialPortDialout=dialPortDialout, xRadiusAcctSuccess=xRadiusAcctSuccess, xSecurID=xSecurID, xPppLcpStatusTxConReq=xPppLcpStatusTxConReq, basicControlOutputIndex=basicControlOutputIndex)
mibBuilder.exportSymbols("MRVINREACH", snmpInASNParseErrs=snmpInASNParseErrs, alarmInputHighDensity0198Alarm=alarmInputHighDensity0198Alarm, xPppIpxcpRxTrmAck=xPppIpxcpRxTrmAck, sysTimeServerConfiguredAddress=sysTimeServerConfiguredAddress, phivManagement=phivManagement, slotBootControlSlot=slotBootControlSlot, alarmInputHighDensity0036Normal=alarmInputHighDensity0036Normal, paramDefaultService=paramDefaultService, rs232AsyncPortStopBits=rs232AsyncPortStopBits, phivCircuitCountTransitPksRecd=phivCircuitCountTransitPksRecd, slotOperStatus=slotOperStatus, alarmInputHighDensity0151Alarm=alarmInputHighDensity0151Alarm, xremoteServerName2=xremoteServerName2, sysInstalledMemory=sysInstalledMemory, sshPortRemoteProtocol=sshPortRemoteProtocol, alarmInputHighDensity0045Alarm=alarmInputHighDensity0045Alarm, tn3270DeviceName=tn3270DeviceName, basicPortAlarmMasterFaultSeverity=basicPortAlarmMasterFaultSeverity, ipAdEntNetMask=ipAdEntNetMask, alarmInputHighDensity0360Alarm=alarmInputHighDensity0360Alarm, etherXTxExcessiveCollisions=etherXTxExcessiveCollisions, alarmInputHighDensity0337Alarm=alarmInputHighDensity0337Alarm, getClientAddressType=getClientAddressType, slotElementalFirmwareRevision=slotElementalFirmwareRevision, basicControlSignalIndex=basicControlSignalIndex, alarmInputHighDensity0278Alarm=alarmInputHighDensity0278Alarm, latNodeGroups=latNodeGroups, expEgpToOspfRuleStatus=expEgpToOspfRuleStatus, eToAValue=eToAValue, basicPortTrapTable=basicPortTrapTable, expIsisToRipRuleStatus=expIsisToRipRuleStatus, xPppIpcpTxConAck=xPppIpcpTxConAck, slotBootControlInternetAddress=slotBootControlInternetAddress, dot1dBasePortMtuExceededDiscards=dot1dBasePortMtuExceededDiscards, appleTrafficMonitoring=appleTrafficMonitoring, basicContactClosureOrAlarmInputValue=basicContactClosureOrAlarmInputValue, alarmInputHighDensity0114Normal=alarmInputHighDensity0114Normal, ipGatewayAddress2=ipGatewayAddress2, alarmInputHighDensity0142Alarm=alarmInputHighDensity0142Alarm, alarmInputLowDensity0013Normal=alarmInputLowDensity0013Normal, slotBootControlFlagParamTftpDirect=slotBootControlFlagParamTftpDirect, alarmInputHighDensity0189Normal=alarmInputHighDensity0189Normal, alarmInputHighDensity0302Normal=alarmInputHighDensity0302Normal, alarmInputHighDensity0109Alarm=alarmInputHighDensity0109Alarm, xFilter=xFilter, alarmInputHighDensity0067Alarm=alarmInputHighDensity0067Alarm, alarmInputLowDensity0070Normal=alarmInputLowDensity0070Normal, ipNetToMediaType=ipNetToMediaType, xPppIpxcp=xPppIpxcp, alarmInputHighDensity0125Normal=alarmInputHighDensity0125Normal, alarmInputHighDensity0052Normal=alarmInputHighDensity0052Normal, control=control, alarmInputHighDensity0292Alarm=alarmInputHighDensity0292Alarm, eToALanguageName=eToALanguageName, ipDefaultTTL=ipDefaultTTL, alarmInputHighDensity0088Normal=alarmInputHighDensity0088Normal, alarmInputHighDensity0337Normal=alarmInputHighDensity0337Normal, alarmInputHighDensity0261Alarm=alarmInputHighDensity0261Alarm, expOspfToEgpRuleFromAs=expOspfToEgpRuleFromAs, ipTrafficIndex=ipTrafficIndex, latNodeOutBytes=latNodeOutBytes, basicAlarmMasterControlOutputSignal=basicAlarmMasterControlOutputSignal, slotControllerIndex=slotControllerIndex, alarmInputHighDensity0312Normal=alarmInputHighDensity0312Normal, sessionLogX25Direction=sessionLogX25Direction, applePortRouterType=applePortRouterType, basicAlarmMasterInputRelatedEquipment=basicAlarmMasterInputRelatedEquipment, alarmInputHighDensity0288Normal=alarmInputHighDensity0288Normal, ipRouteMask=ipRouteMask, alarmInputHighDensity0272Normal=alarmInputHighDensity0272Normal, impIsisRuleEntry=impIsisRuleEntry, sessionLogConnectionID=sessionLogConnectionID, cclPortCclName=cclPortCclName, alarmInputHighDensity0253Normal=alarmInputHighDensity0253Normal, alarmInputHighDensity0332Alarm=alarmInputHighDensity0332Alarm, egpNeighOutMsgs=egpNeighOutMsgs, setClientAddress=setClientAddress, xPppConfigKATimer=xPppConfigKATimer, alarmInputHighDensity0019Normal=alarmInputHighDensity0019Normal, sysLocation=sysLocation, DateTime=DateTime, basicSerialPortLineEditorBeginning=basicSerialPortLineEditorBeginning, paramClientLoaderName=paramClientLoaderName, alarmInputLowDensity0038Alarm=alarmInputLowDensity0038Alarm, sysLoadSoftware=sysLoadSoftware, powerSupplyPlus5Status=powerSupplyPlus5Status, expOspfToIsisRuleDelayMetricAction=expOspfToIsisRuleDelayMetricAction, basicSerialPortBackwardSwitch=basicSerialPortBackwardSwitch, lpdQueueActiveJobs=lpdQueueActiveJobs, alarmInputLowDensity0058Alarm=alarmInputLowDensity0058Alarm, expIsisToOspfRuleAction=expIsisToOspfRuleAction, powerSupplyRedundancyStatus=powerSupplyRedundancyStatus, alarmInputHighDensity0083Normal=alarmInputHighDensity0083Normal, snmpAgentGetClientNumber=snmpAgentGetClientNumber, powerSupplyPlus12History=powerSupplyPlus12History, alarmInputHighDensity0081Alarm=alarmInputHighDensity0081Alarm, alarmInputHighDensity0367Normal=alarmInputHighDensity0367Normal, ipxRipRtTable=ipxRipRtTable, ipxIfRipFilterType=ipxIfRipFilterType, slotEntry=slotEntry, basicHumidityValue=basicHumidityValue, alarmInputHighDensity0181Normal=alarmInputHighDensity0181Normal, alarmInputHighDensity0220Normal=alarmInputHighDensity0220Normal, eToALanguageTable=eToALanguageTable, basicPortDefaultDedicatedSessionType=basicPortDefaultDedicatedSessionType, alarmInputHighDensity0316Normal=alarmInputHighDensity0316Normal, sysLoginAuthenticationFailure=sysLoginAuthenticationFailure, ipxRipRtEntry=ipxRipRtEntry, basicPortPppDialBackupLocalAddress=basicPortPppDialBackupLocalAddress, basicPortDefaultDestLATPortName=basicPortDefaultDestLATPortName, latNodeInDuplicates=latNodeInDuplicates, ipFragOKs=ipFragOKs, impIsisRuleType=impIsisRuleType, ir9504=ir9504, ipTrafficSrcPort=ipTrafficSrcPort, expIsisToRipRuleTable=expIsisToRipRuleTable, expEgpToIsisRuleExpenseMetric=expEgpToIsisRuleExpenseMetric, alarmInputHighDensity0096Alarm=alarmInputHighDensity0096Alarm, alarmInputHighDensity0355Alarm=alarmInputHighDensity0355Alarm, phivCircuitLastErrorData=phivCircuitLastErrorData, alarmInputHighDensity0329Normal=alarmInputHighDensity0329Normal, ipIfFilter2Status=ipIfFilter2Status, basicPortPppDialBackupRedialTimer=basicPortPppDialBackupRedialTimer, basicContactClosureOrAlarmInputTrapEnable=basicContactClosureOrAlarmInputTrapEnable, lpdJobFileSize=lpdJobFileSize, telnetPortTable=telnetPortTable, tcpCurrEstab=tcpCurrEstab, alarmInputHighDensity0098Normal=alarmInputHighDensity0098Normal, kerbPasswordChangeFailed=kerbPasswordChangeFailed, ipxIfSapFilterType=ipxIfSapFilterType, alarmInputHighDensity0257Normal=alarmInputHighDensity0257Normal, xPppConfigDefaults=xPppConfigDefaults, pppLinkStatusLocalToPeerACCMap=pppLinkStatusLocalToPeerACCMap, etherTable=etherTable, slotBootControlFlagParamBootpTftp=slotBootControlFlagParamBootpTftp, alarmInputHighDensity0308Normal=alarmInputHighDensity0308Normal, alarmInputHighDensity0221Alarm=alarmInputHighDensity0221Alarm, alarmInputHighDensity0016Normal=alarmInputHighDensity0016Normal, bootRecordLoadProprietary=bootRecordLoadProprietary, namedName=namedName, slotMinus12Status=slotMinus12Status, firmwareUpdateEntry=firmwareUpdateEntry, applePortLastErrorTime=applePortLastErrorTime, basicPortAsciiToTrapTranslationMessages=basicPortAsciiToTrapTranslationMessages, alarmInputHighDensity0010Alarm=alarmInputHighDensity0010Alarm, alarmInputHighDensity0300Normal=alarmInputHighDensity0300Normal, securIDErrorUsername=securIDErrorUsername, alarmInputHighDensity0349Alarm=alarmInputHighDensity0349Alarm, lpdQueueBypass=lpdQueueBypass, terminalServer=terminalServer, sysTimeServerAddress=sysTimeServerAddress, phivCircuitExportStatus=phivCircuitExportStatus, securIDServerName0=securIDServerName0, xParamClient=xParamClient, expEgpToEgpRuleToAs=expEgpToEgpRuleToAs, slipPortPacketChecksumErrors=slipPortPacketChecksumErrors, ospfXAreaId=ospfXAreaId, xremotePortTable=xremotePortTable, udp=udp, phivTrafficSrc=phivTrafficSrc, ifIndex=ifIndex, latPortAuthorizedGroups=latPortAuthorizedGroups, xPppIpcpConfigPppIpMask=xPppIpcpConfigPppIpMask, alarmInputHighDensity0167Alarm=alarmInputHighDensity0167Alarm, kerbPortIndex=kerbPortIndex, alarmInputHighDensity0113Alarm=alarmInputHighDensity0113Alarm, rotaryTable=rotaryTable, phivCircuitFilterStatus=phivCircuitFilterStatus, alarmInputHighDensity0263Normal=alarmInputHighDensity0263Normal, ir9020=ir9020, alarmInputHighDensity0219Normal=alarmInputHighDensity0219Normal, Timeout=Timeout, basicSerialPortBreak=basicSerialPortBreak, paramServerStoredFailure=paramServerStoredFailure, llap=llap, phivCircuitImportEntry=phivCircuitImportEntry, dot1dStpPortDesignatedRoot=dot1dStpPortDesignatedRoot, alarmInputHighDensity0055Normal=alarmInputHighDensity0055Normal, alarmInputHighDensity0293Normal=alarmInputHighDensity0293Normal, ipIfFilter2SrcMask=ipIfFilter2SrcMask, alarmInputHighDensity0186Alarm=alarmInputHighDensity0186Alarm, xAppleRemoteAccess=xAppleRemoteAccess, alarmInputHighDensity0282Alarm=alarmInputHighDensity0282Alarm, basicSerialPortLineEditorNextLine=basicSerialPortLineEditorNextLine, alarmInputHighDensity0027Alarm=alarmInputHighDensity0027Alarm, rs232SyncPortFrameCheckErrs=rs232SyncPortFrameCheckErrs, latIdentificationLengthLimit=latIdentificationLengthLimit, psEntryMask=psEntryMask, phivCircuitRoutingPriority=phivCircuitRoutingPriority, directory=directory, xIpxPrinter=xIpxPrinter, latNodesRejected=latNodesRejected, alarmInputHighDensity0300Alarm=alarmInputHighDensity0300Alarm, impRipRuleFromIf=impRipRuleFromIf, charPortAdminOrigin=charPortAdminOrigin, applePortUseNeighborNotify=applePortUseNeighborNotify, slotBootControlStatus=slotBootControlStatus, alarmInputHighDensity0299Normal=alarmInputHighDensity0299Normal, ipxIfTable=ipxIfTable, latNodeOutMessages=latNodeOutMessages, xPppConfigKATimeout=xPppConfigKATimeout, xPppIpxcpCountersTable=xPppIpxcpCountersTable, alarmInputLowDensity0075Alarm=alarmInputLowDensity0075Alarm, ipxSapIfEntry=ipxSapIfEntry, expIsisToOspfRuleTable=expIsisToOspfRuleTable, bridgeRouter=bridgeRouter, telnetSerialPortInterpretInterruptAsBreak=telnetSerialPortInterpretInterruptAsBreak, tn3270LanguageStatus=tn3270LanguageStatus, alarmInputLowDensity0006Alarm=alarmInputLowDensity0006Alarm, alarmInputHighDensity0162Normal=alarmInputHighDensity0162Normal, alarmInputHighDensity0070Alarm=alarmInputHighDensity0070Alarm, phiv=phiv, alarmInputHighDensity0209Normal=alarmInputHighDensity0209Normal, paramClientState=paramClientState, paramClientProtocolErrors=paramClientProtocolErrors, alarmInputHighDensity0195Normal=alarmInputHighDensity0195Normal, slotHardwareRevision=slotHardwareRevision, udpInErrors=udpInErrors, humidityNormal=humidityNormal, alarmInputHighDensity0307Normal=alarmInputHighDensity0307Normal, ipxIfFilterStatusDestNodeAll=ipxIfFilterStatusDestNodeAll, dot1dStpPortState=dot1dStpPortState, alarmInputLowDensity0049Normal=alarmInputLowDensity0049Normal, alarmInputHighDensity0127Alarm=alarmInputHighDensity0127Alarm, charSessIndex=charSessIndex, alarmInputLowDensity0006Normal=alarmInputLowDensity0006Normal, alarmInputHighDensity0083Alarm=alarmInputHighDensity0083Alarm, ipFragmentsQueuedCurrent=ipFragmentsQueuedCurrent, ipxNetbiosIfEntry=ipxNetbiosIfEntry, basicBase802Address=basicBase802Address, ipxSapIfIndex=ipxSapIfIndex, snmpAgentTrapClientPingHost2PollInterval=snmpAgentTrapClientPingHost2PollInterval, alarmInputHighDensity0218Alarm=alarmInputHighDensity0218Alarm, impRipRuleTable=impRipRuleTable, latNumber=latNumber, rs232PortType=rs232PortType, phivCircuitExecCost=phivCircuitExecCost, alarmInputHighDensity0040Alarm=alarmInputHighDensity0040Alarm, loadFileSoftwareVersionType=loadFileSoftwareVersionType, securIDPortEntry=securIDPortEntry, xAppleNbp=xAppleNbp, activeStatus=activeStatus, expStaticToRipRuleTable=expStaticToRipRuleTable, basicControlledPorts=basicControlledPorts, alarmInputHighDensity0303Normal=alarmInputHighDensity0303Normal, dot1dStpPortDesignatedCost=dot1dStpPortDesignatedCost, applePortExportIndex=applePortExportIndex, ipRouterIfTable=ipRouterIfTable, sysChassisVersion=sysChassisVersion, basicSerialPortTable=basicSerialPortTable, alarmInputHighDensity0086Alarm=alarmInputHighDensity0086Alarm, deviceIndex=deviceIndex, applePortExportStatus=applePortExportStatus, rotaryAddress=rotaryAddress)
mibBuilder.exportSymbols("MRVINREACH", alarmInputHighDensity0332Normal=alarmInputHighDensity0332Normal, alarmInputHighDensity0313Normal=alarmInputHighDensity0313Normal, phivCircuitIndex=phivCircuitIndex, snmpAgentTrapClientQuerySourceHost1=snmpAgentTrapClientQuerySourceHost1, alarmInputHighDensity0119Alarm=alarmInputHighDensity0119Alarm, controllerNetwork=controllerNetwork, broadcastGroupSlaveTcpPort=broadcastGroupSlaveTcpPort, bootControlLoadInternetGateway=bootControlLoadInternetGateway, icmpInEchos=icmpInEchos, securIDServerName3=securIDServerName3, AutonomousType=AutonomousType, alarmInputHighDensity0256Normal=alarmInputHighDensity0256Normal, basicContactClosureOrAlarmInputFaultState=basicContactClosureOrAlarmInputFaultState, basicPortPppDialBackupAddresses=basicPortPppDialBackupAddresses, bridgeRouterN3=bridgeRouterN3, at=at, expStaticToIsisRuleStatus=expStaticToIsisRuleStatus, xPppIpcpStatusEntry=xPppIpcpStatusEntry, alarmInputHighDensity0050Alarm=alarmInputHighDensity0050Alarm, alarmInputHighDensity0351Alarm=alarmInputHighDensity0351Alarm, icmpOutAddrMasks=icmpOutAddrMasks, slotBootControlFlagLoadXmop=slotBootControlFlagLoadXmop, alarmInputLowDensity0037Alarm=alarmInputLowDensity0037Alarm, alarmInputHighDensity0094Alarm=alarmInputHighDensity0094Alarm, latNodePurge=latNodePurge, loadFileTable=loadFileTable, phivCircuitCountZeroCount=phivCircuitCountZeroCount, powerSupplyFirmwareVersion=powerSupplyFirmwareVersion, phivCircuitFilterIf=phivCircuitFilterIf, ipxIfRipAgedOut=ipxIfRipAgedOut, alarmInputHighDensity0123Alarm=alarmInputHighDensity0123Alarm, xPppIpxcpConfigTable=xPppIpxcpConfigTable, alarmInputHighDensity0011Alarm=alarmInputHighDensity0011Alarm, ifInUnknownProtos=ifInUnknownProtos, basicAlarmMasterInputEnable=basicAlarmMasterInputEnable, xPppLcpStatusTxCodRej=xPppLcpStatusTxCodRej, atEntry=atEntry, psPortDefaultOutboundAccess=psPortDefaultOutboundAccess, domainResolverTtl=domainResolverTtl, clientDiagnosticFile=clientDiagnosticFile, ChassisType=ChassisType, basicPortBuffering=basicPortBuffering, basicContactClosureOrAlarmInputName=basicContactClosureOrAlarmInputName, protocolLat=protocolLat, xPppIpxcpCipxInCompression=xPppIpxcpCipxInCompression, basicAlarmMasterInputZone=basicAlarmMasterInputZone, paramFileIdentificationType=paramFileIdentificationType, ipIfFilterEntry=ipIfFilterEntry, basicPortPppDialBackupRedialRetries=basicPortPppDialBackupRedialRetries, xRadiusConfigFailed=xRadiusConfigFailed, snmpInGetNexts=snmpInGetNexts, mrvInReachProductDivision=mrvInReachProductDivision, alarmInputHighDensity0353Alarm=alarmInputHighDensity0353Alarm, ospfStatus=ospfStatus, ipxRouting=ipxRouting, sysTimeBroadcast=sysTimeBroadcast, appleNbpNode=appleNbpNode, alarmInputHighDensity0032Alarm=alarmInputHighDensity0032Alarm, alarmInputHighDensity0020Alarm=alarmInputHighDensity0020Alarm, phivCircuitExportMask=phivCircuitExportMask, charNumber=charNumber, loadActive=loadActive, slotBootControlStorageServerSlot=slotBootControlStorageServerSlot, xPppIpxcpCipxCompression=xPppIpxcpCipxCompression, sessionLogEventDetail=sessionLogEventDetail, snmpAgentSetCommunity=snmpAgentSetCommunity, nbaseSwitch=nbaseSwitch, setClientIndex=setClientIndex, alarmInputLowDensity0031Normal=alarmInputLowDensity0031Normal, xPhivCircuitIndex=xPhivCircuitIndex, securIDError=securIDError, ipxIfSapBcstTimer=ipxIfSapBcstTimer, telnetPortSendLocation=telnetPortSendLocation, latVisibleServiceNode=latVisibleServiceNode, clientIdentification=clientIdentification, paramFileParameterVersion=paramFileParameterVersion, basicSerialPortInterrupts=basicSerialPortInterrupts, alarmInputHighDensity0327Normal=alarmInputHighDensity0327Normal, appleStatusIf=appleStatusIf, alarmInputHighDensity0275Normal=alarmInputHighDensity0275Normal, ipxRipInterface=ipxRipInterface, interfaceEntry=interfaceEntry, icmpPingHostAddress=icmpPingHostAddress, alarmInputLowDensity0067Normal=alarmInputLowDensity0067Normal, alarmInputHighDensity0098Alarm=alarmInputHighDensity0098Alarm, telnetSerialPortAbortOutputCharacter=telnetSerialPortAbortOutputCharacter, alarmInputHighDensity0324Alarm=alarmInputHighDensity0324Alarm, xRadiusPortStatus=xRadiusPortStatus, xPppLcpStatusTxConRej=xPppLcpStatusTxConRej, alarmInputLowDensity0077Alarm=alarmInputLowDensity0077Alarm, pppLinkStatusLocalToRemoteProtocolCompression=pppLinkStatusLocalToRemoteProtocolCompression, alarmInputHighDensity0270Alarm=alarmInputHighDensity0270Alarm, xPppStatusState=xPppStatusState, alarmInputLowDensity0015Alarm=alarmInputLowDensity0015Alarm, basicPowerOutletRedundant=basicPowerOutletRedundant, egpNbrTable=egpNbrTable, alarmInputHighDensity0267Normal=alarmInputHighDensity0267Normal, udpBcstServerTable=udpBcstServerTable, charSessEntry=charSessEntry, powerSupplyPlus12Volts=powerSupplyPlus12Volts, ipIfFilterSrcAddr=ipIfFilterSrcAddr, alarmInputHighDensity0128Alarm=alarmInputHighDensity0128Alarm, alarmInputHighDensity0356Normal=alarmInputHighDensity0356Normal, alarmInputHighDensity0345Normal=alarmInputHighDensity0345Normal, expEgpToOspfRuleAction=expEgpToOspfRuleAction, sysMaintenancePassword=sysMaintenancePassword, expOspfToEgpRuleEntry=expOspfToEgpRuleEntry, expEgpToOspfRuleFromAs=expEgpToOspfRuleFromAs, ipxIfNetbiosIn=ipxIfNetbiosIn, phivCircuitCountBytesRecd=phivCircuitCountBytesRecd, sessionLogFacility=sessionLogFacility, expRipToIsisRuleAction=expRipToIsisRuleAction, basicLock=basicLock, basicControlOutputEntry=basicControlOutputEntry, alarmInputHighDensity0372Normal=alarmInputHighDensity0372Normal, alarmInputHighDensity0292Normal=alarmInputHighDensity0292Normal, ipRouterIfMTU=ipRouterIfMTU, rs232SyncPortTable=rs232SyncPortTable, basicTemperatureSensorTable=basicTemperatureSensorTable, telnetSerialPortAttentionCharacter=telnetSerialPortAttentionCharacter, alarmInputHighDensity0088Alarm=alarmInputHighDensity0088Alarm, xEthernet=xEthernet, alarmInputHighDensity0166Alarm=alarmInputHighDensity0166Alarm, ipxRipIfIndex=ipxRipIfIndex, basicAlarmMasterInputSiteId=basicAlarmMasterInputSiteId, basicControlSignalEntry=basicControlSignalEntry, basicSerialPortDCDTimeout=basicSerialPortDCDTimeout, alarmInputHighDensity0099Alarm=alarmInputHighDensity0099Alarm, ospfGeneralGroup=ospfGeneralGroup, firmwareUpdateDefaultFileName=firmwareUpdateDefaultFileName, alarmInputHighDensity0280Normal=alarmInputHighDensity0280Normal, xRadiusServerAccess1=xRadiusServerAccess1, expStaticToIsisRuleEntry=expStaticToIsisRuleEntry, alarmInputLowDensity0010Normal=alarmInputLowDensity0010Normal, alarmInputHighDensity0154Alarm=alarmInputHighDensity0154Alarm, etherMulticastBytesIn=etherMulticastBytesIn, alarmInputHighDensity0229Normal=alarmInputHighDensity0229Normal, ipIfFilter2SrcPortStart=ipIfFilter2SrcPortStart, expEgpToIsisRuleNetwork=expEgpToIsisRuleNetwork, alarmInputHighDensity0132Normal=alarmInputHighDensity0132Normal, lpdQueueStatus=lpdQueueStatus, xRadiusPortTable=xRadiusPortTable, dot1dStpPortPathCost=dot1dStpPortPathCost, slotBootControlFlagLoadRarpTftp=slotBootControlFlagLoadRarpTftp, expOspfToRipRuleEntry=expOspfToRipRuleEntry, ipxIfSapFilterNetwork=ipxIfSapFilterNetwork, basicPortMessageCodes=basicPortMessageCodes, phivCircuitExportAreaMask=phivCircuitExportAreaMask, alarmInputHighDensity0383Alarm=alarmInputHighDensity0383Alarm, phivCircuitFilterSrcAddr=phivCircuitFilterSrcAddr, alarmInputHighDensity0034Alarm=alarmInputHighDensity0034Alarm, expRipToRipRuleEntry=expRipToRipRuleEntry, paramClientRetransmitInterval=paramClientRetransmitInterval, SoftwareType=SoftwareType, interfaceIndex=interfaceIndex, alarmInputHighDensity0365Normal=alarmInputHighDensity0365Normal, BigMetric=BigMetric, tn3270PortEntry=tn3270PortEntry, basicSerialPortDedicatedUserData=basicSerialPortDedicatedUserData, alarmInputHighDensity0153Alarm=alarmInputHighDensity0153Alarm, slotBootControlFlagLoadBootpTftp=slotBootControlFlagLoadBootpTftp, phivCircuitTable=phivCircuitTable, sysLocalScriptServer=sysLocalScriptServer, xRadiusAuthServerPort=xRadiusAuthServerPort, xPppConfigEntry=xPppConfigEntry, alarmInputHighDensity0341Alarm=alarmInputHighDensity0341Alarm, xRip=xRip, ipAddrTable=ipAddrTable, alarmInputHighDensity0331Alarm=alarmInputHighDensity0331Alarm, alarmInputHighDensity0001Alarm=alarmInputHighDensity0001Alarm, phivCircuitFilterAction=phivCircuitFilterAction, dot1dStpForwardDelay=dot1dStpForwardDelay, lpdJobStatus=lpdJobStatus, egpNeighAs=egpNeighAs, alarmInputLowDensity0053Normal=alarmInputLowDensity0053Normal, alarmInputHighDensity0031Alarm=alarmInputHighDensity0031Alarm, ifInUcastPkts=ifInUcastPkts, basicPortPowerMasterModel=basicPortPowerMasterModel, phivCircuitExportTable=phivCircuitExportTable, dot1dStpPortForwardTransitions=dot1dStpPortForwardTransitions, xPppIpxcpTxConRej=xPppIpxcpTxConRej, namedDumpService=namedDumpService, basicSlot=basicSlot, alarmInputHighDensity0024Normal=alarmInputHighDensity0024Normal, basicSerialPortAutoHangup=basicSerialPortAutoHangup, basicSerialPortCommandSize=basicSerialPortCommandSize, phivCircuitExportAreaStatus=phivCircuitExportAreaStatus, xPppIpxcpTxConAck=xPppIpxcpTxConAck, alarmInputHighDensity0345Alarm=alarmInputHighDensity0345Alarm, xPhivCircuit=xPhivCircuit, alarmInputHighDensity0013Normal=alarmInputHighDensity0013Normal, telnetSerialPortEraseLineCharacter=telnetSerialPortEraseLineCharacter, alarmInputLowDensity0033Alarm=alarmInputLowDensity0033Alarm, charSessProtocol=charSessProtocol, icmpOutTimestamps=icmpOutTimestamps, expEgpToIsisRuleExpenseMetricAction=expEgpToIsisRuleExpenseMetricAction, NetworkType=NetworkType, alarmInputHighDensity0035Normal=alarmInputHighDensity0035Normal, alarmInputHighDensity0112Alarm=alarmInputHighDensity0112Alarm, alarmInputHighDensity0298Alarm=alarmInputHighDensity0298Alarm, portIndex=portIndex, expOspfToEgpRuleNetwork=expOspfToEgpRuleNetwork, alarmInputHighDensity0202Normal=alarmInputHighDensity0202Normal, alarmInputLowDensity0008Normal=alarmInputLowDensity0008Normal, latOutRetransmits=latOutRetransmits, bootControlParamMop=bootControlParamMop, ipFragFails=ipFragFails, alarmInputHighDensity0071Normal=alarmInputHighDensity0071Normal, alarmInputHighDensity0152Normal=alarmInputHighDensity0152Normal, alarmInputHighDensity0227Normal=alarmInputHighDensity0227Normal, basicSerialPortNoLoss=basicSerialPortNoLoss, ipxPrinterEthernet=ipxPrinterEthernet, ipNetToMediaTable=ipNetToMediaTable, alarmInputHighDensity0089Normal=alarmInputHighDensity0089Normal, ipxIfIndex=ipxIfIndex, netLoginServerSeparator=netLoginServerSeparator, kerbServerPort=kerbServerPort, tn3270KeyTable=tn3270KeyTable, rs232PortInSpeed=rs232PortInSpeed, pppLinkStatusPhysicalIndex=pppLinkStatusPhysicalIndex, alarmInputHighDensity0041Normal=alarmInputHighDensity0041Normal, kerbPortStatus=kerbPortStatus, xPppIpcp=xPppIpcp, trapClientEntryStatus=trapClientEntryStatus, ir9008=ir9008, nonBroadcastLine=nonBroadcastLine, alarmInputHighDensity0330Alarm=alarmInputHighDensity0330Alarm, tn3270PortTable=tn3270PortTable, dot1dTpPort=dot1dTpPort, psEntryAddress=psEntryAddress, ipAdEntAddr=ipAdEntAddr, latOfferedServiceEntry=latOfferedServiceEntry, queueSourceName=queueSourceName, DdpAddress=DdpAddress, alarmInputHighDensity0125Alarm=alarmInputHighDensity0125Alarm, ipReassembly=ipReassembly, alarmInputHighDensity0097Alarm=alarmInputHighDensity0097Alarm, alarmInputHighDensity0042Normal=alarmInputHighDensity0042Normal, basicPortInactivityLogout=basicPortInactivityLogout, alarmInputHighDensity0310Alarm=alarmInputHighDensity0310Alarm, ipReasmOKs=ipReasmOKs, psEntryNumberLimit=psEntryNumberLimit, alarmInputHighDensity0099Normal=alarmInputHighDensity0099Normal, alarmInputLowDensity0035Normal=alarmInputLowDensity0035Normal, slotPlus5Status=slotPlus5Status, expRipToIsisRuleDefaultMetricAction=expRipToIsisRuleDefaultMetricAction, ipAutoSubnetMask=ipAutoSubnetMask, icmpOutTimestampReps=icmpOutTimestampReps, alarmMasterSideAOff=alarmMasterSideAOff, bootControlLoadProprietary=bootControlLoadProprietary, rs232AsyncPortIndex=rs232AsyncPortIndex, basicSerialPortLineEditorDeleteBeginning=basicSerialPortLineEditorDeleteBeginning, alarmInputHighDensity0167Normal=alarmInputHighDensity0167Normal, alarmInputHighDensity0262Normal=alarmInputHighDensity0262Normal)
mibBuilder.exportSymbols("MRVINREACH", ipRouterIfPacketsOut=ipRouterIfPacketsOut, xPppIpcpRxConNak=xPppIpcpRxConNak, alarmInputHighDensity0353Normal=alarmInputHighDensity0353Normal, bootClientStatus=bootClientStatus, alarmInputHighDensity0245Normal=alarmInputHighDensity0245Normal, egpInMsgs=egpInMsgs, alarmInputHighDensity0156Normal=alarmInputHighDensity0156Normal, alarmInputHighDensity0273Normal=alarmInputHighDensity0273Normal, getClientTable=getClientTable, alarmInputLowDensity0078Normal=alarmInputLowDensity0078Normal, egpNeighEntry=egpNeighEntry, ipxNetbiosHopLimit=ipxNetbiosHopLimit, impRipRuleAction=impRipRuleAction, ipFragCreates=ipFragCreates, topologyChange=topologyChange, alarmInputLowDensity0063Alarm=alarmInputLowDensity0063Alarm, alarmInputHighDensity0276Alarm=alarmInputHighDensity0276Alarm, deviceFormat=deviceFormat, alarmInputHighDensity0084Alarm=alarmInputHighDensity0084Alarm, alarmInputHighDensity0323Alarm=alarmInputHighDensity0323Alarm, alarmInputHighDensity0304Alarm=alarmInputHighDensity0304Alarm, impEgpRuleNetwork=impEgpRuleNetwork, xPppLcpStatusRxTrmAck=xPppLcpStatusRxTrmAck, basicContactClosureOrAlarmInputStatus=basicContactClosureOrAlarmInputStatus, sysContact=sysContact, latSolicits=latSolicits, dot1dTpPortOutFrames=dot1dTpPortOutFrames, pppIpConfigCompression=pppIpConfigCompression, tsMxBox=tsMxBox, domainResolverNameNumber=domainResolverNameNumber, ipxIfSapBcstDiscardTimeout=ipxIfSapBcstDiscardTimeout, ipAdEntBcastAddr=ipAdEntBcastAddr, slotDefaultNVS=slotDefaultNVS, paramClientLoaderAddressType=paramClientLoaderAddressType, rtmp=rtmp, applePortNetStart=applePortNetStart, dot1dTpPortInFrames=dot1dTpPortInFrames, basicTemperatureUnits=basicTemperatureUnits, alarmInputHighDensity0317Normal=alarmInputHighDensity0317Normal, alarmInputLowDensity0017Alarm=alarmInputLowDensity0017Alarm, ipAdEntExtAddress=ipAdEntExtAddress, alarmInputLowDensity0053Alarm=alarmInputLowDensity0053Alarm, alarmInputHighDensity0054Alarm=alarmInputHighDensity0054Alarm, xremoteServerAccessFailed1=xremoteServerAccessFailed1, xRadAcctCtsSubGrp=xRadAcctCtsSubGrp, alarmInputHighDensity0183Alarm=alarmInputHighDensity0183Alarm, dot1dStpHelloTime=dot1dStpHelloTime, sysWebServerConfigAdminStatus=sysWebServerConfigAdminStatus, xRouterPolicy=xRouterPolicy, xPppHdlcRxNoBuffer=xPppHdlcRxNoBuffer, alarmInputHighDensity0084Normal=alarmInputHighDensity0084Normal, setClientEntryStatus=setClientEntryStatus, xremoteServerClients=xremoteServerClients, latInDuplicates=latInDuplicates, latInSessionsRejected=latInSessionsRejected, alarmInputHighDensity0169Alarm=alarmInputHighDensity0169Alarm, system=system, alarmInputLowDensity0076Alarm=alarmInputLowDensity0076Alarm, alarmInputHighDensity0113Normal=alarmInputHighDensity0113Normal, basicTemperatureAlarmSeverity=basicTemperatureAlarmSeverity, alarmInputHighDensity0326Alarm=alarmInputHighDensity0326Alarm, trapClientTable=trapClientTable, appleNbpSocket=appleNbpSocket, basicSerialPortDSRLogout=basicSerialPortDSRLogout, alarmInputHighDensity0256Alarm=alarmInputHighDensity0256Alarm, cclPortModemAudible=cclPortModemAudible, ipFragmentsQueuedHigh=ipFragmentsQueuedHigh, alarmInputHighDensity0161Normal=alarmInputHighDensity0161Normal, ifPhysAddress=ifPhysAddress, icmpPingHostNotReachable=icmpPingHostNotReachable, bootControlParamRarpTftp=bootControlParamRarpTftp, xPppIpcpTxPkts=xPppIpcpTxPkts, expIsisToEgpRuleStatus=expIsisToEgpRuleStatus, snmpAgentTrapClientPingHost1PollInterval=snmpAgentTrapClientPingHost1PollInterval, snmpInTotalReqVars=snmpInTotalReqVars, tn3270DeviceKeyNumber=tn3270DeviceKeyNumber, slipMask=slipMask, etherMulticastIndex=etherMulticastIndex, bootRecordLoadMop=bootRecordLoadMop, expStaticToEgpRuleToAs=expStaticToEgpRuleToAs, alarmInputHighDensity0194Normal=alarmInputHighDensity0194Normal, ipxIfFilterStatusSourceNetworkAll=ipxIfFilterStatusSourceNetworkAll, alarmInputHighDensity0339Normal=alarmInputHighDensity0339Normal, alarmInputHighDensity0042Alarm=alarmInputHighDensity0042Alarm, expRipToIsisRuleErrorMetricAction=expRipToIsisRuleErrorMetricAction, xIpxSystem=xIpxSystem, alarmInputHighDensity0215Normal=alarmInputHighDensity0215Normal, expIsisToEgpRuleNetwork=expIsisToEgpRuleNetwork, charPortEntry=charPortEntry, UpToMaxAge=UpToMaxAge, alarmInputHighDensity0077Normal=alarmInputHighDensity0077Normal, kerbMasterName=kerbMasterName, latKeepaliveTimer=latKeepaliveTimer, sysLastAgentError=sysLastAgentError, alarmInputHighDensity0140Normal=alarmInputHighDensity0140Normal, namedTable=namedTable, latNodeAddress=latNodeAddress, basicBroadcast=basicBroadcast, alarmInputHighDensity0238Alarm=alarmInputHighDensity0238Alarm, xPppLcpStatusRxCodRej=xPppLcpStatusRxCodRej, kerbServerName2=kerbServerName2, alarmInputHighDensity0151Normal=alarmInputHighDensity0151Normal, sysLoginAuthTrapIdentity=sysLoginAuthTrapIdentity, expOspfToRipRuleToIf=expOspfToRipRuleToIf, alarmInputLowDensity0010Alarm=alarmInputLowDensity0010Alarm, tcpConnLocalPort=tcpConnLocalPort, ipTrafficSrcAddr=ipTrafficSrcAddr, alarmInputHighDensity0237Normal=alarmInputHighDensity0237Normal, sysInitializeDelay=sysInitializeDelay, basicPortZeroDisconnectSession=basicPortZeroDisconnectSession, ipAdEntExtRip=ipAdEntExtRip, alarmInputHighDensity0096Normal=alarmInputHighDensity0096Normal, netLoginPortLoaderFile=netLoginPortLoaderFile, alarmInputHighDensity0237Alarm=alarmInputHighDensity0237Alarm, expRipToRipRuleMetricAction=expRipToRipRuleMetricAction, alarmInputHighDensity0227Alarm=alarmInputHighDensity0227Alarm, alarmInputLowDensity0004Normal=alarmInputLowDensity0004Normal, xRadiusServerAccessFailed1=xRadiusServerAccessFailed1, charPortName=charPortName, alarmInputHighDensity0061Normal=alarmInputHighDensity0061Normal, alarmInputLowDensity0041Alarm=alarmInputLowDensity0041Alarm, alarmInputLowDensity0073Normal=alarmInputLowDensity0073Normal, alarmInputHighDensity0236Normal=alarmInputHighDensity0236Normal, eToALanguageEntry=eToALanguageEntry, alarmInputHighDensity0320Normal=alarmInputHighDensity0320Normal, udpInDatagrams=udpInDatagrams, basicAlarmMasterInputFaultSeverity=basicAlarmMasterInputFaultSeverity, sessionLogZeroAlarmLogging=sessionLogZeroAlarmLogging, alarmInputLowDensity0056Alarm=alarmInputLowDensity0056Alarm, alarmInputHighDensity0255Normal=alarmInputHighDensity0255Normal, phivMaxPaths=phivMaxPaths, ipRouteMetric2=ipRouteMetric2, tn3270PortSpaceInsert=tn3270PortSpaceInsert, bootRecordLoadInternetFile=bootRecordLoadInternetFile, ipxRipRtNetwork=ipxRipRtNetwork, slotControllerTable=slotControllerTable, alarmInputHighDensity0136Alarm=alarmInputHighDensity0136Alarm, basicHumidityTrapLowThreshold=basicHumidityTrapLowThreshold, alarmInputHighDensity0327Alarm=alarmInputHighDensity0327Alarm, basicSerialPortDTRAssert=basicSerialPortDTRAssert, slipPortPacketsDiscarded=slipPortPacketsDiscarded, alarmInputHighDensity0008Alarm=alarmInputHighDensity0008Alarm, expEgpToIsisRuleMetricType=expEgpToIsisRuleMetricType, latOfferedServiceAllowConnections=latOfferedServiceAllowConnections, basicContactClosureOrAlarmInputSiteId=basicContactClosureOrAlarmInputSiteId, rs232OutSigChanges=rs232OutSigChanges, basicSerialPortLineEditorRedisplay=basicSerialPortLineEditorRedisplay, dot1dTpLearnedEntryDiscards=dot1dTpLearnedEntryDiscards, basicPortAlarmMasterUpdateFirmwareHost=basicPortAlarmMasterUpdateFirmwareHost, ipxIfRipBcst=ipxIfRipBcst, alarmInputLowDensity0038Normal=alarmInputLowDensity0038Normal, alarmInputLowDensity0077Normal=alarmInputLowDensity0077Normal, ipxIfRipBcstTimer=ipxIfRipBcstTimer, alarmInputHighDensity0054Normal=alarmInputHighDensity0054Normal, tn3270LanguageEntry=tn3270LanguageEntry, alarmInputHighDensity0079Alarm=alarmInputHighDensity0079Alarm, rs232Number=rs232Number, ipxRipRouter=ipxRipRouter, alarmInputHighDensity0348Normal=alarmInputHighDensity0348Normal, dumpSize=dumpSize, basicTemperatureSensorIndex=basicTemperatureSensorIndex, basicPortAlarmMasterUpdateFirmware=basicPortAlarmMasterUpdateFirmware, latAnnounceServices=latAnnounceServices, xPppIpcpStatusRemoteAddress=xPppIpcpStatusRemoteAddress, tn3270ScreenStatus=tn3270ScreenStatus, tn3270PortOutgoingTcpPort=tn3270PortOutgoingTcpPort, latNodeLimit=latNodeLimit, ipRouteInfo=ipRouteInfo, xPppLcpStatusRxConAck=xPppLcpStatusRxConAck, portOutputSignalChange=portOutputSignalChange, expEgpToEgpRuleFromAs=expEgpToEgpRuleFromAs, alarmInputHighDensity0037Normal=alarmInputHighDensity0037Normal, tcpRoutingTblSz=tcpRoutingTblSz, paramService=paramService, ipxSapSvRowStatus=ipxSapSvRowStatus, queuePortIndex=queuePortIndex, expOspfToEgpRuleMetric=expOspfToEgpRuleMetric, featTable=featTable, xIpxFilter=xIpxFilter, kerbErrorTime=kerbErrorTime, namedEntryStatus=namedEntryStatus, wellKnownProtocols=wellKnownProtocols, alarmInputHighDensity0210Normal=alarmInputHighDensity0210Normal, slotBootControlStorageStatus=slotBootControlStorageStatus, expStaticToIsisRuleDefaultMetric=expStaticToIsisRuleDefaultMetric, expEgpToOspfRuleEntry=expEgpToOspfRuleEntry, basicActivePorts=basicActivePorts, applePortImportAction=applePortImportAction, alarmInputHighDensity0177Normal=alarmInputHighDensity0177Normal, alarmInputHighDensity0269Normal=alarmInputHighDensity0269Normal, tcp=tcp, HardwareType=HardwareType, alarmInputHighDensity0091Alarm=alarmInputHighDensity0091Alarm, clientDumpService=clientDumpService, alarmInputHighDensity0130Alarm=alarmInputHighDensity0130Alarm, expRipToRipRuleTable=expRipToRipRuleTable, basicControlOutputRelayState=basicControlOutputRelayState, charSessOutCharacters=charSessOutCharacters, alarmInputHighDensity0156Alarm=alarmInputHighDensity0156Alarm, sessionLogEntry=sessionLogEntry, alarmInputHighDensity0157Normal=alarmInputHighDensity0157Normal, slipNetworkPacketsSent=slipNetworkPacketsSent, tn3270ScreenActionName=tn3270ScreenActionName, basicPortIdleTimeReceive=basicPortIdleTimeReceive, alarmInputLowDensity0047Alarm=alarmInputLowDensity0047Alarm, alarmInputHighDensity0130Normal=alarmInputHighDensity0130Normal, rotaryPortMap=rotaryPortMap, phivCircuitCountTermPacketsRecd=phivCircuitCountTermPacketsRecd, cclParsedScriptTable=cclParsedScriptTable, tn3270DeviceNumber=tn3270DeviceNumber, nameStatus=nameStatus, expEgpToEgpRuleMetricAction=expEgpToEgpRuleMetricAction, alarmInputHighDensity0216Alarm=alarmInputHighDensity0216Alarm, phivCircuitImportAreaStatus=phivCircuitImportAreaStatus, expEgpToRipRuleMetric=expEgpToRipRuleMetric, xPppIpxcpRxConAck=xPppIpxcpRxConAck, xPppIpxcpTxConNak=xPppIpxcpTxConNak, tcpMaxConn=tcpMaxConn, expStaticToIsisRuleExpenseMetric=expStaticToIsisRuleExpenseMetric, xRouterUdp=xRouterUdp, alarmInputHighDensity0286Normal=alarmInputHighDensity0286Normal, alarmInputHighDensity0280Alarm=alarmInputHighDensity0280Alarm, dot1dStpPortEntry=dot1dStpPortEntry, sysDateTime=sysDateTime, dot1dStpTopChanges=dot1dStpTopChanges, tcpRtoMax=tcpRtoMax, clientEntry=clientEntry, charPortHardware=charPortHardware, slotBootControlStorageFailures=slotBootControlStorageFailures, alarmInputHighDensity0307Alarm=alarmInputHighDensity0307Alarm, pppLinkStatusBadControls=pppLinkStatusBadControls, alarmInputHighDensity0214Normal=alarmInputHighDensity0214Normal, xPppLcp=xPppLcp, icmpOutParmProbs=icmpOutParmProbs, basicPortDataLoggingSuppressControlCharacters=basicPortDataLoggingSuppressControlCharacters, snmpAgentTrapClientNumber=snmpAgentTrapClientNumber, queueNumber=queueNumber, kerbPortTable=kerbPortTable, snmpAgentSetClientNumber=snmpAgentSetClientNumber, xPppAuthChapChallengeTimer=xPppAuthChapChallengeTimer, basicControlOutputRelayIndex=basicControlOutputRelayIndex, iso=iso, sysDump=sysDump, lpdQueueTotalJobs=lpdQueueTotalJobs, egpNbrAddr=egpNbrAddr, snmpInReadOnlys=snmpInReadOnlys, basicSerialPortEntry=basicSerialPortEntry, alarmInputHighDensity0120Normal=alarmInputHighDensity0120Normal, latOfferedServiceIdentification=latOfferedServiceIdentification, basicSessions=basicSessions, udpBcstPortStatus=udpBcstPortStatus, alarmInputHighDensity0233Alarm=alarmInputHighDensity0233Alarm, alarmInputHighDensity0031Normal=alarmInputHighDensity0031Normal, netLoginServerEntry=netLoginServerEntry)
mibBuilder.exportSymbols("MRVINREACH", alarmInputHighDensity0117Alarm=alarmInputHighDensity0117Alarm, queueTable=queueTable, alarmInputHighDensity0188Normal=alarmInputHighDensity0188Normal, ipxIfSapFilterHost=ipxIfSapFilterHost, latVisibleServiceName=latVisibleServiceName, ripState=ripState, xPppIpcpRxConRej=xPppIpcpRxConRej, ipAdExtTable=ipAdExtTable, xEventIndex=xEventIndex, tcpRtoAlgorithm=tcpRtoAlgorithm, firmwareUpdateFileName=firmwareUpdateFileName, xPppLcpConfigTable=xPppLcpConfigTable, resLacks=resLacks, basicClientNumber=basicClientNumber, ipxSapSvSocket=ipxSapSvSocket, nameSource=nameSource, ccitt=ccitt, xPppLcpStatusState=xPppLcpStatusState, slotPlus5Watts=slotPlus5Watts, basicPortXonTimer=basicPortXonTimer, alarmInputLowDensity0030Normal=alarmInputLowDensity0030Normal, basicTemperatureAlarmStatus=basicTemperatureAlarmStatus, pppLqr=pppLqr, basicAlarmMasterInputStatus=basicAlarmMasterInputStatus, alarmInputHighDensity0338Normal=alarmInputHighDensity0338Normal, alarmInputHighDensity0382Normal=alarmInputHighDensity0382Normal, xRcp=xRcp, rs232PortOutSigNumber=rs232PortOutSigNumber, phivSystem=phivSystem, dot1dStaticTable=dot1dStaticTable, temperatureNormal=temperatureNormal, alarmInputHighDensity0160Normal=alarmInputHighDensity0160Normal, alarmInputHighDensity0362Alarm=alarmInputHighDensity0362Alarm, arapPassword=arapPassword, alarmInputHighDensity0214Alarm=alarmInputHighDensity0214Alarm, phivCircuitOperCost=phivCircuitOperCost, alarmInputHighDensity0372Alarm=alarmInputHighDensity0372Alarm, xPppLcpConfigChapAuth=xPppLcpConfigChapAuth, clientIdentificationType=clientIdentificationType, alarmInputHighDensity0131Alarm=alarmInputHighDensity0131Alarm, alarmInputLowDensity0051Alarm=alarmInputLowDensity0051Alarm, slotIndex=slotIndex, ospfIfMtrcTos=ospfIfMtrcTos, ir8040=ir8040, alarmInputHighDensity0058Normal=alarmInputHighDensity0058Normal, alarmInputHighDensity0076Normal=alarmInputHighDensity0076Normal, bootControlLoadBootpTftp=bootControlLoadBootpTftp, expIsisToEgpRuleAction=expIsisToEgpRuleAction, ifOutQLen=ifOutQLen, dumpFileNumber=dumpFileNumber, basicPortAlarmMasterAccounting=basicPortAlarmMasterAccounting, alarmInputHighDensity0260Alarm=alarmInputHighDensity0260Alarm, alarmInputHighDensity0369Normal=alarmInputHighDensity0369Normal, alarmInputHighDensity0004Alarm=alarmInputHighDensity0004Alarm, getClientEntry=getClientEntry, bootControlLoadTftpDirect=bootControlLoadTftpDirect, ipxSapSvAge=ipxSapSvAge, psEntryPortMap=psEntryPortMap, alarmInputHighDensity0361Alarm=alarmInputHighDensity0361Alarm, charPortInCharacters=charPortInCharacters, alarmInputLowDensity0057Normal=alarmInputLowDensity0057Normal, basicPowerMasterOutletEntry=basicPowerMasterOutletEntry, basicSerialPortRaiseLowerDtr=basicSerialPortRaiseLowerDtr, alarmInputHighDensity0319Alarm=alarmInputHighDensity0319Alarm, basicPortLogins=basicPortLogins, tcpPassiveOpens=tcpPassiveOpens, ir8008=ir8008, alarmInputHighDensity0320Alarm=alarmInputHighDensity0320Alarm, alarmInputHighDensity0081Normal=alarmInputHighDensity0081Normal, basicSerialPortAutoProtocolDetectPrompt=basicSerialPortAutoProtocolDetectPrompt, phivCircuitCountTransitCongestLoss=phivCircuitCountTransitCongestLoss, impOspfRuleEntry=impOspfRuleEntry, alarmInputHighDensity0367Alarm=alarmInputHighDensity0367Alarm, menuPortEntry=menuPortEntry, ifType=ifType, alarmInputHighDensity0078Alarm=alarmInputHighDensity0078Alarm, basicHumiditySensor=basicHumiditySensor, icmpOutErrors=icmpOutErrors, rs232SyncPortAbortedFrames=rs232SyncPortAbortedFrames, appleNbpName=appleNbpName, DesignatedRouterPriority=DesignatedRouterPriority, expRipToEgpRuleAction=expRipToEgpRuleAction, featType=featType, tsN9=tsN9, basicPortTl1Mode=basicPortTl1Mode, ospfXAreaEntry=ospfXAreaEntry, namedEntry=namedEntry, ipxIfRipFilterNetworkAll=ipxIfRipFilterNetworkAll, lpdJobHostName=lpdJobHostName, etherTxEntry=etherTxEntry, session=session, basicInactivityTimer=basicInactivityTimer, tcpConnEntry=tcpConnEntry, alarmInputLowDensity0023Normal=alarmInputLowDensity0023Normal, alarmInputHighDensity0002Alarm=alarmInputHighDensity0002Alarm, alarmInputHighDensity0038Alarm=alarmInputHighDensity0038Alarm, impEgpRuleMetric=impEgpRuleMetric, alarmInputHighDensity0090Alarm=alarmInputHighDensity0090Alarm, snmpInGenErrs=snmpInGenErrs, deviceGetFile=deviceGetFile, basicSerialPortLineEditorInsertToggle=basicSerialPortLineEditorInsertToggle, expOspfToRipRuleMetricAction=expOspfToRipRuleMetricAction, xPppStatusEntry=xPppStatusEntry, dot1dBasePortTable=dot1dBasePortTable, alarmInputHighDensity0378Alarm=alarmInputHighDensity0378Alarm, latOutMessages=latOutMessages, alarmInputHighDensity0360Normal=alarmInputHighDensity0360Normal, alarmInputHighDensity0267Alarm=alarmInputHighDensity0267Alarm, alarmInputLowDensity0019Alarm=alarmInputLowDensity0019Alarm, SerialNumber=SerialNumber, ifOutErrors=ifOutErrors, xPppLcpConfigEntry=xPppLcpConfigEntry, ipGatewayAddress1=ipGatewayAddress1, alarmInputHighDensity0379Normal=alarmInputHighDensity0379Normal, alarmInputHighDensity0195Alarm=alarmInputHighDensity0195Alarm, cclScriptControl=cclScriptControl, deviceGetFileHostIdentification=deviceGetFileHostIdentification, rotaryNumber=rotaryNumber, alarmInputHighDensity0169Normal=alarmInputHighDensity0169Normal, xPppIpcpTxTrmAck=xPppIpcpTxTrmAck, expRipToRipRuleStatus=expRipToRipRuleStatus, expStaticToRipRuleMetricAction=expStaticToRipRuleMetricAction, phivCircuitExportAreaTable=phivCircuitExportAreaTable, ipxPrinterMac=ipxPrinterMac, alarmInputLowDensity0034Normal=alarmInputLowDensity0034Normal, dot1dBridge=dot1dBridge, alarmInputHighDensity0008Normal=alarmInputHighDensity0008Normal, telnetPortEntry=telnetPortEntry, basicAlarmMasterInputManufacturer=basicAlarmMasterInputManufacturer, ipxSapSvInterface=ipxSapSvInterface, xPppAuthConfigTable=xPppAuthConfigTable, sessionLogX25DisconnectDiagnostic=sessionLogX25DisconnectDiagnostic, basicContactClosureOrAlarmInputManufacturer=basicContactClosureOrAlarmInputManufacturer, securIDServerAccess4=securIDServerAccess4, alarmInputHighDensity0107Alarm=alarmInputHighDensity0107Alarm, xMenu=xMenu, expOspfToIsisRuleExpenseMetricAction=expOspfToIsisRuleExpenseMetricAction, psPortEntry=psPortEntry, charSessPortIndex=charSessPortIndex, xPppIpcpRxPkts=xPppIpcpRxPkts, deviceFormatRedundantParams=deviceFormatRedundantParams, resAdminMaximum=resAdminMaximum, alarmInputHighDensity0260Normal=alarmInputHighDensity0260Normal, impIsisRuleMetricAction=impIsisRuleMetricAction, basicPortRemoteSessions=basicPortRemoteSessions, expStaticToIsisRuleMetricType=expStaticToIsisRuleMetricType, alarmInputHighDensity0384Alarm=alarmInputHighDensity0384Alarm, xPppAuthChapConfigState=xPppAuthChapConfigState, sessionLogX25DisconnectCause=sessionLogX25DisconnectCause, latNodeZeroTime=latNodeZeroTime, tcpOutSegs=tcpOutSegs, xremotePortIndex=xremotePortIndex, ipxSapAge=ipxSapAge, expStaticToEgpRuleTable=expStaticToEgpRuleTable, paramClientLoaderAddress=paramClientLoaderAddress, sessionLogPriority=sessionLogPriority, paramFileSize=paramFileSize, xPppHdlcRxFrameErrs=xPppHdlcRxFrameErrs, expRipToEgpRuleMetricAction=expRipToEgpRuleMetricAction, bootRecordDumpRarpTftp=bootRecordDumpRarpTftp, netLoginPortTable=netLoginPortTable, pppLinkStatusReceiveFcsSize=pppLinkStatusReceiveFcsSize, namedLoadService=namedLoadService, basicHumidityTrapHighThreshold=basicHumidityTrapHighThreshold, latNodeTable=latNodeTable, basicPortAlarmMasterFixTime=basicPortAlarmMasterFixTime, paramFileIdentification=paramFileIdentification, rotaryStatus=rotaryStatus, ipTrafficEntry=ipTrafficEntry, sysSoftwareVersionType=sysSoftwareVersionType, basicPortLockout=basicPortLockout, firmwareUpdateMethod=firmwareUpdateMethod, pppLcp=pppLcp, dot1dTpFdbAddress=dot1dTpFdbAddress, alarmInputHighDensity0184Alarm=alarmInputHighDensity0184Alarm, alarmInputHighDensity0188Alarm=alarmInputHighDensity0188Alarm, expStaticToEgpRuleMetric=expStaticToEgpRuleMetric, xDump=xDump, egpAs=egpAs, rs232AsyncPortParity=rs232AsyncPortParity, alarmInputHighDensity0108Normal=alarmInputHighDensity0108Normal, basicHumidityAlarmSeverity=basicHumidityAlarmSeverity, alarmInputHighDensity0243Normal=alarmInputHighDensity0243Normal, atPhysAddress=atPhysAddress, menuPortNestedTopLevel=menuPortNestedTopLevel, dot1dTpFdbPort=dot1dTpFdbPort, pppIpEntry=pppIpEntry, clientLoadService=clientLoadService, sessionLogDisconnectTime=sessionLogDisconnectTime, alarmInputHighDensity0203Normal=alarmInputHighDensity0203Normal, alarmInputHighDensity0284Normal=alarmInputHighDensity0284Normal, xRadiusSecret2=xRadiusSecret2, alarmInputHighDensity0222Alarm=alarmInputHighDensity0222Alarm, alarmInputLowDensity0012Normal=alarmInputLowDensity0012Normal, sshHostKeyLength=sshHostKeyLength, slipNetworkPacketsReceived=slipNetworkPacketsReceived, menuPortNestedMenuStatus=menuPortNestedMenuStatus, sysTl1SourceIdentifier=sysTl1SourceIdentifier, charPortReset=charPortReset, icmp=icmp, alarmInputHighDensity0180Normal=alarmInputHighDensity0180Normal, xPppAuthPapConfigState=xPppAuthPapConfigState, alarmInputHighDensity0066Alarm=alarmInputHighDensity0066Alarm, expRipToIsisRuleErrorMetric=expRipToIsisRuleErrorMetric, slotBootControlStorageEntry=slotBootControlStorageEntry, impOspfRulePreference=impOspfRulePreference, slotAdminAction=slotAdminAction, alarmInputLowDensity0066Alarm=alarmInputLowDensity0066Alarm, ipxIfFilterSourceNode=ipxIfFilterSourceNode, telnetSerialPortOptionDisplay=telnetSerialPortOptionDisplay, alarmInputHighDensity0185Alarm=alarmInputHighDensity0185Alarm, expOspfToEgpRuleAction=expOspfToEgpRuleAction, rs232SyncPortClockSource=rs232SyncPortClockSource, asciiToTrapTranslation=asciiToTrapTranslation, alarmInputHighDensity0138Normal=alarmInputHighDensity0138Normal, featKey=featKey, alarmInputHighDensity0052Alarm=alarmInputHighDensity0052Alarm, xIpTraffic=xIpTraffic, ipxSapSvHost=ipxSapSvHost, alarmInputHighDensity0022Alarm=alarmInputHighDensity0022Alarm, netLoginPortExecuteFile=netLoginPortExecuteFile, powerSupplyChassisWatts=powerSupplyChassisWatts, latNodeEntry=latNodeEntry, dot1dStpPort=dot1dStpPort, tn3270PortIndex=tn3270PortIndex, alarmInputHighDensity0178Alarm=alarmInputHighDensity0178Alarm, dot1dTpPortInDiscards=dot1dTpPortInDiscards, IOType=IOType, routing=routing, menuCommand=menuCommand, dumpFileSize=dumpFileSize, menuPortMenuStatus=menuPortMenuStatus, pppLinkStatusRemoteMRU=pppLinkStatusRemoteMRU, alarmInputHighDensity0066Normal=alarmInputHighDensity0066Normal, lpdQueueEnabled=lpdQueueEnabled, sysDefineMode=sysDefineMode, xRadiusConfig=xRadiusConfig, ir9040=ir9040, pppIpLocalMaxSlotId=pppIpLocalMaxSlotId, alarmInputHighDensity0111Alarm=alarmInputHighDensity0111Alarm, ifInDiscards=ifInDiscards, alarmInputHighDensity0030Normal=alarmInputHighDensity0030Normal, dot1dStpRootPort=dot1dStpRootPort, pppIpRemoteToLocalCompressionProtocol=pppIpRemoteToLocalCompressionProtocol, broadcastGroupIndex=broadcastGroupIndex, alarmInputHighDensity0147Normal=alarmInputHighDensity0147Normal, rs232InSigPortIndex=rs232InSigPortIndex, basicAutoProtocolDetectMessage=basicAutoProtocolDetectMessage, expOspfToIsisRuleTable=expOspfToIsisRuleTable, basicPortPppDialBackup=basicPortPppDialBackup, xremoteServerAccessFailed2=xremoteServerAccessFailed2, tn3270KeyEntry=tn3270KeyEntry, applePortImportStatus=applePortImportStatus, alarmInputHighDensity0029Alarm=alarmInputHighDensity0029Alarm)
mibBuilder.exportSymbols("MRVINREACH", alarmInputLowDensity0003Normal=alarmInputLowDensity0003Normal, tcpConnTable=tcpConnTable, slotBootControlFlagDumpLocal=slotBootControlFlagDumpLocal, alarmInputHighDensity0064Alarm=alarmInputHighDensity0064Alarm, phivTrafficEntry=phivTrafficEntry, alarmInputLowDensity0021Normal=alarmInputLowDensity0021Normal, alarmInputHighDensity0124Alarm=alarmInputHighDensity0124Alarm, sysZeroBaseTime=sysZeroBaseTime, trapClientAddress=trapClientAddress, alarmInputHighDensity0177Alarm=alarmInputHighDensity0177Alarm, alarmInputHighDensity0103Normal=alarmInputHighDensity0103Normal, netLoginServerStatus=netLoginServerStatus, alarmInputHighDensity0258Alarm=alarmInputHighDensity0258Alarm, alarmInputHighDensity0377Alarm=alarmInputHighDensity0377Alarm, slotBootBlockNumber=slotBootBlockNumber, expOspfToRipRuleStatus=expOspfToRipRuleStatus, sessionLogEmpty=sessionLogEmpty, basicPortAutoLogin=basicPortAutoLogin, ifEntry=ifEntry, alarmInputHighDensity0133Normal=alarmInputHighDensity0133Normal, alarmInputHighDensity0100Alarm=alarmInputHighDensity0100Alarm, ifOutDiscards=ifOutDiscards, alarmInputHighDensity0186Normal=alarmInputHighDensity0186Normal, ir9004=ir9004, alarmInputLowDensity0058Normal=alarmInputLowDensity0058Normal, paramClientServerCheck=paramClientServerCheck, icmpOutEchos=icmpOutEchos, phivCircuitCountTermCongLoss=phivCircuitCountTermCongLoss, sysObjectID=sysObjectID, menuTable=menuTable, alarmInputHighDensity0294Alarm=alarmInputHighDensity0294Alarm, alarmInputHighDensity0375Alarm=alarmInputHighDensity0375Alarm, charSessKill=charSessKill, rs232AsyncPortBits=rs232AsyncPortBits, psPortTable=psPortTable, alarmInputHighDensity0380Alarm=alarmInputHighDensity0380Alarm, alarmInputHighDensity0223Normal=alarmInputHighDensity0223Normal, menuPortNestedMenuPrivilege=menuPortNestedMenuPrivilege, alarmInputHighDensity0110Normal=alarmInputHighDensity0110Normal, ipxSapSvNetwork=ipxSapSvNetwork, alarmInputLowDensity0037Normal=alarmInputLowDensity0037Normal, alarmInputLowDensity0043Normal=alarmInputLowDensity0043Normal, rs232AsyncPortFramingErrs=rs232AsyncPortFramingErrs, powerSupplyHardwareInhibitStatus=powerSupplyHardwareInhibitStatus, alarmInputHighDensity0270Normal=alarmInputHighDensity0270Normal, alarmInputHighDensity0369Alarm=alarmInputHighDensity0369Alarm, kerbInsecureLogins=kerbInsecureLogins, lpdQueueName=lpdQueueName, sshPortTransmitBufferedTime=sshPortTransmitBufferedTime, pppLinkStatusTransmitFcsSize=pppLinkStatusTransmitFcsSize, sysHardwareType=sysHardwareType, ddp=ddp, alarmInputHighDensity0137Alarm=alarmInputHighDensity0137Alarm, powerMasterNotResponding=powerMasterNotResponding, alarmInputHighDensity0250Normal=alarmInputHighDensity0250Normal, alarmInputHighDensity0092Normal=alarmInputHighDensity0092Normal, expRipToEgpRuleStatus=expRipToEgpRuleStatus, slotPlus12Status=slotPlus12Status, adjacency=adjacency, ipxIfSapOut=ipxIfSapOut, expOspfToIsisRuleFromAs=expOspfToIsisRuleFromAs, ethernet=ethernet, xChassisBasic=xChassisBasic, ipIfFilterTable=ipIfFilterTable, phivCircuitCountDataBlocksRecd=phivCircuitCountDataBlocksRecd, basicSerialPortAPDTimeout=basicSerialPortAPDTimeout, xPppLcpStatusTxEcoReq=xPppLcpStatusTxEcoReq, basicPortDefaultProtocol=basicPortDefaultProtocol, alarmInputHighDensity0134Alarm=alarmInputHighDensity0134Alarm, icmpInSrcQuenchs=icmpInSrcQuenchs, sysZeroAll=sysZeroAll, pppLinkStatusTable=pppLinkStatusTable, alarmInputHighDensity0268Alarm=alarmInputHighDensity0268Alarm, resourceFailure=resourceFailure, xBroadcastGroup=xBroadcastGroup, snmp=snmp, alarmInputHighDensity0197Normal=alarmInputHighDensity0197Normal, controllerEntry=controllerEntry, expOspfToIsisRuleExpenseMetric=expOspfToIsisRuleExpenseMetric, basicPortOutboundSecurity=basicPortOutboundSecurity, xSlip=xSlip, kerbError=kerbError, alarmInputHighDensity0309Normal=alarmInputHighDensity0309Normal, xPppIpxcpConfigEntry=xPppIpxcpConfigEntry, basicControlOutputRelayName=basicControlOutputRelayName, latVisibleServiceStatus=latVisibleServiceStatus, alarmInputHighDensity0365Alarm=alarmInputHighDensity0365Alarm, xPppIpxcpTxTrmAck=xPppIpxcpTxTrmAck, basicSerialPortLimitedView=basicSerialPortLimitedView, phivCircuitExportAreaIf=phivCircuitExportAreaIf, phivCircuitExportIf=phivCircuitExportIf, bootControlDumpLocal=bootControlDumpLocal, latPortAutoPrompt=latPortAutoPrompt, alarmInputHighDensity0140Alarm=alarmInputHighDensity0140Alarm, alarmInputLowDensity0040Alarm=alarmInputLowDensity0040Alarm, Metric=Metric, ifLastChange=ifLastChange, charPortIndex=charPortIndex, snmpAgentAuthFailureAddress=snmpAgentAuthFailureAddress, kerbServerAccessFailed2=kerbServerAccessFailed2, latOfferedServicePassword=latOfferedServicePassword, sysTemperatureLevel=sysTemperatureLevel, nbp=nbp, expEgpToRipRuleNetwork=expEgpToRipRuleNetwork, alarmInputHighDensity0359Alarm=alarmInputHighDensity0359Alarm, basicSerialPortWelcomeBeforeAuthentication=basicSerialPortWelcomeBeforeAuthentication, psClrInternetSecurity=psClrInternetSecurity, alarmInputHighDensity0087Normal=alarmInputHighDensity0087Normal, xPppIpcpConfigLocalRangeEnd=xPppIpcpConfigLocalRangeEnd, bootControlLoadMop=bootControlLoadMop, dumpDrive=dumpDrive, icmpInEchoReps=icmpInEchoReps, queueServiceName=queueServiceName, alarmInputLowDensity0055Normal=alarmInputLowDensity0055Normal, alarmInputHighDensity0208Normal=alarmInputHighDensity0208Normal, egpOutErrors=egpOutErrors, alarmInputHighDensity0048Alarm=alarmInputHighDensity0048Alarm, slotHardwareType=slotHardwareType, icmpOutRedirects=icmpOutRedirects, slipEntry=slipEntry, ospfXAreaStatus=ospfXAreaStatus, phivCircuitExportAction=phivCircuitExportAction, ipRouteMetric1=ipRouteMetric1, alarmInputLowDensity0066Normal=alarmInputLowDensity0066Normal, zip=zip, sshAuthenticationTimeout=sshAuthenticationTimeout, basicTemperatureValue=basicTemperatureValue, ipxIfFilterStatusPacketTypeAll=ipxIfFilterStatusPacketTypeAll, xPppLcpStatusRxConReq=xPppLcpStatusRxConReq, securIDPortStatus=securIDPortStatus, charPortTable=charPortTable, dumpFileCreation=dumpFileCreation, pppLinkStatusPeerToLocalACCMap=pppLinkStatusPeerToLocalACCMap, alarmInputHighDensity0147Alarm=alarmInputHighDensity0147Alarm, alarmInputHighDensity0215Alarm=alarmInputHighDensity0215Alarm, domainResolverPpp=domainResolverPpp, ipTrafficPercent=ipTrafficPercent, slotSecondsSinceReset=slotSecondsSinceReset, ipRouteEntry=ipRouteEntry, basicSerialPortLimitedCommands=basicSerialPortLimitedCommands, ripNetTable=ripNetTable, powerSupplyHardwareInhibitHistory=powerSupplyHardwareInhibitHistory, basicPowerAlarmTimer=basicPowerAlarmTimer, alarmInputHighDensity0178Normal=alarmInputHighDensity0178Normal, alarmInputHighDensity0285Alarm=alarmInputHighDensity0285Alarm, alarmInputHighDensity0375Normal=alarmInputHighDensity0375Normal, ipxRipRtInterface=ipxRipRtInterface, latNodeInBytes=latNodeInBytes, paramClientChassisStorageState=paramClientChassisStorageState, alarmInputHighDensity0039Alarm=alarmInputHighDensity0039Alarm, phivTrafficTable=phivTrafficTable, alarmInputHighDensity0309Alarm=alarmInputHighDensity0309Alarm, paramFileEntry=paramFileEntry, snmpAgentTrapClientPingHost2PollRetries=snmpAgentTrapClientPingHost2PollRetries, ir7008=ir7008, xPortSecurity=xPortSecurity, alarmInputHighDensity0193Alarm=alarmInputHighDensity0193Alarm, featEntry=featEntry, broadcastGroupMaster=broadcastGroupMaster, basicTemperatureHumiditySensorName=basicTemperatureHumiditySensorName, ipTrafficTable=ipTrafficTable, end=end, alarmInputHighDensity0075Alarm=alarmInputHighDensity0075Alarm, xPppAuthStatusTable=xPppAuthStatusTable, expIsisToRipRuleToIf=expIsisToRipRuleToIf, tn3270DeviceTable=tn3270DeviceTable, securIDServerAccess1=securIDServerAccess1, loadFileName=loadFileName, basicSerialPortDedicatedKickStartData=basicSerialPortDedicatedKickStartData, phivCircuitCountCorruptLoss=phivCircuitCountCorruptLoss, clientTable=clientTable, telnetPortEorReflection=telnetPortEorReflection, alarmInputHighDensity0278Normal=alarmInputHighDensity0278Normal, tcpPortConnectByAddress=tcpPortConnectByAddress, alarmInputHighDensity0051Alarm=alarmInputHighDensity0051Alarm, agent=agent, kip=kip, etherTxSingleCollisionFrames=etherTxSingleCollisionFrames, basicPortPppDialBackupNumber=basicPortPppDialBackupNumber, ripNetEntry=ripNetEntry, alarmInputHighDensity0358Alarm=alarmInputHighDensity0358Alarm, alarmInputHighDensity0069Normal=alarmInputHighDensity0069Normal, basicTemperatureSensorEntry=basicTemperatureSensorEntry, basicPortAsciiToTrapTranslationLastMessage=basicPortAsciiToTrapTranslationLastMessage, slotBootAddress=slotBootAddress, tsX25=tsX25, alarmInputHighDensity0213Normal=alarmInputHighDensity0213Normal, ipIfFilterProtocol=ipIfFilterProtocol, expRipToRipRuleToIf=expRipToRipRuleToIf, latVisibleServiceRating=latVisibleServiceRating, xPppLcpStatusEntry=xPppLcpStatusEntry, resLackTime=resLackTime, alarmInputLowDensity0054Alarm=alarmInputLowDensity0054Alarm, ipxIfStatusNetwork=ipxIfStatusNetwork, sysInitializeDelayParameter=sysInitializeDelayParameter, expEgpToEgpRuleEntry=expEgpToEgpRuleEntry, impIsisRuleStatus=impIsisRuleStatus, phivCircuitLastErrorTime=phivCircuitLastErrorTime, latNodeAddressChange=latNodeAddressChange, slotBootProtocol=slotBootProtocol, ipRouteIfIndex=ipRouteIfIndex, alarmInputHighDensity0041Alarm=alarmInputHighDensity0041Alarm, xRadiusAcctPortStatus=xRadiusAcctPortStatus, pppIpTable=pppIpTable, alarmInputHighDensity0273Alarm=alarmInputHighDensity0273Alarm, slotIOCardOperStatus=slotIOCardOperStatus, alarmInputLowDensity0020Alarm=alarmInputLowDensity0020Alarm, xRadiusAcctLogAttempts=xRadiusAcctLogAttempts, bootRecordDumpMop=bootRecordDumpMop, telnetPortBinaryMode=telnetPortBinaryMode, ipGenAdExtTable=ipGenAdExtTable, alarmInputHighDensity0377Normal=alarmInputHighDensity0377Normal, alarmInputLowDensity0074Alarm=alarmInputLowDensity0074Alarm, dot1dBase=dot1dBase, bootRecordStatus=bootRecordStatus, alarmInputHighDensity0336Normal=alarmInputHighDensity0336Normal, xPppStatusTable=xPppStatusTable, xPppHdlcVJDiscards=xPppHdlcVJDiscards, alarmInputHighDensity0181Alarm=alarmInputHighDensity0181Alarm, psTable=psTable, alarmInputHighDensity0254Normal=alarmInputHighDensity0254Normal, udpBcstPortTable=udpBcstPortTable, ipxIfNetwork=ipxIfNetwork, MacAddress=MacAddress, alarmInputHighDensity0065Normal=alarmInputHighDensity0065Normal, ipIfFilterStatus=ipIfFilterStatus, sessionLogX25CalledAddress=sessionLogX25CalledAddress, dot1dTpPortMaxInfo=dot1dTpPortMaxInfo, trapClientEntry=trapClientEntry, loadFileNumber=loadFileNumber, ipxIfSapFilterAction=ipxIfSapFilterAction, xRadiusPort=xRadiusPort, netLoginPortScriptEcho=netLoginPortScriptEcho, activeFunction=activeFunction, egpNbrIntervalDead=egpNbrIntervalDead, ipNetToMediaIfIndex=ipNetToMediaIfIndex, xRadServer1SubGrp=xRadServer1SubGrp, netLoginServerPath=netLoginServerPath, xPppIpxcpCipxOutSlots=xPppIpxcpCipxOutSlots, ripNetAlgorithm=ripNetAlgorithm, ipOutRequests=ipOutRequests, alarmInputHighDensity0340Alarm=alarmInputHighDensity0340Alarm, charPortType=charPortType, applePortImportZone=applePortImportZone, slotBootControlMopFile=slotBootControlMopFile, alarmInputLowDensity0016Normal=alarmInputLowDensity0016Normal, sessionLogZeroAccountingAll=sessionLogZeroAccountingAll, devicePreviousStatus=devicePreviousStatus, alarmInputHighDensity0285Normal=alarmInputHighDensity0285Normal, securIDServerAccessFailed0=securIDServerAccessFailed0, alarmInputHighDensity0212Normal=alarmInputHighDensity0212Normal, paramServerStoredTime=paramServerStoredTime, alarmInputHighDensity0265Alarm=alarmInputHighDensity0265Alarm, alarmInputHighDensity0223Alarm=alarmInputHighDensity0223Alarm)
mibBuilder.exportSymbols("MRVINREACH", private=private, telnetSerialPortInterruptCharacter=telnetSerialPortInterruptCharacter, slotBoot802Address=slotBoot802Address, ifInErrors=ifInErrors, latOfferedServiceName=latOfferedServiceName, alarmInputLowDensity0044Normal=alarmInputLowDensity0044Normal, alarmInputLowDensity0072Alarm=alarmInputLowDensity0072Alarm, alarmInputHighDensity0384Normal=alarmInputHighDensity0384Normal, lpdJobAssignedPort=lpdJobAssignedPort, firmwareUpdateState=firmwareUpdateState, ipxIfWatchdogSpoof=ipxIfWatchdogSpoof, paramClientRetransmitLimit=paramClientRetransmitLimit, xremoteServerAccess2=xremoteServerAccess2, rs232OutSigPortIndex=rs232OutSigPortIndex, xAlarm=xAlarm, bridgeRouterEB=bridgeRouterEB, alarmInputHighDensity0101Alarm=alarmInputHighDensity0101Alarm, powerSupplyTable=powerSupplyTable, alarmInputHighDensity0271Alarm=alarmInputHighDensity0271Alarm, cclScriptName=cclScriptName, nbaseSwitchN9=nbaseSwitchN9, appleNbpZone=appleNbpZone, alarmInputHighDensity0277Alarm=alarmInputHighDensity0277Alarm, powerSupplyThermalShutdownHistory=powerSupplyThermalShutdownHistory, xXremote=xXremote, impRipRuleEntry=impRipRuleEntry, securIDPort=securIDPort, controllerType=controllerType, phivCircuitExportEntry=phivCircuitExportEntry, sessionLogX25CallerAddress=sessionLogX25CallerAddress, basicPortPppDialBackupDisconnectTimer=basicPortPppDialBackupDisconnectTimer, alarmInputLowDensity0061Normal=alarmInputLowDensity0061Normal, ipFilterState=ipFilterState, ipxIfSapIn=ipxIfSapIn, arapPortEnabled=arapPortEnabled, charPortAdminStatus=charPortAdminStatus, ipxSapType=ipxSapType, alarmInputHighDensity0016Alarm=alarmInputHighDensity0016Alarm, phivCircuitImportAreaTable=phivCircuitImportAreaTable, switch=switch, alarmInputHighDensity0109Normal=alarmInputHighDensity0109Normal, ipRouteTable=ipRouteTable, ipReasmTimeout=ipReasmTimeout, basicPortDataLogging=basicPortDataLogging, bridge=bridge, expStaticToEgpRuleStatus=expStaticToEgpRuleStatus, sessionLogHostSecondaryType=sessionLogHostSecondaryType, sysFeatureNumber=sysFeatureNumber, applePortChecksum=applePortChecksum, alarmInputLowDensity0002Normal=alarmInputLowDensity0002Normal, latNodeZero=latNodeZero, alarmInputHighDensity0138Alarm=alarmInputHighDensity0138Alarm, activeSoftwareVersionType=activeSoftwareVersionType, alarmInputHighDensity0040Normal=alarmInputHighDensity0040Normal, basicPortTrapEntry=basicPortTrapEntry, rs232InSigChanges=rs232InSigChanges, slotBootIfIndex=slotBootIfIndex, xPhivRoute=xPhivRoute, udpBcstServerStatus=udpBcstServerStatus, ipxIfFilterStatusSourceNodeAll=ipxIfFilterStatusSourceNodeAll, netLoginNumber=netLoginNumber, ipxRipIfTable=ipxRipIfTable, basicPortTrapStatus=basicPortTrapStatus, icmpPingHostMaximumRetries=icmpPingHostMaximumRetries, basicPowerMasterPortIndex=basicPowerMasterPortIndex, expIsisToOspfRuleStatus=expIsisToOspfRuleStatus, alarmInputHighDensity0180Alarm=alarmInputHighDensity0180Alarm, expOspfToIsisRuleDelayMetric=expOspfToIsisRuleDelayMetric, expEgpToRipRuleStatus=expEgpToRipRuleStatus, alarmInputHighDensity0257Alarm=alarmInputHighDensity0257Alarm, ir8020=ir8020, snmpInBadCommunityUses=snmpInBadCommunityUses, xRadiusTimeout=xRadiusTimeout, egpOutMsgs=egpOutMsgs, activeCurrentSequence=activeCurrentSequence, latNodeDataLinkFrame=latNodeDataLinkFrame, alarmInputHighDensity0224Normal=alarmInputHighDensity0224Normal, xPppLcpStatusRxConRej=xPppLcpStatusRxConRej, expRipToOspfRuleEntry=expRipToOspfRuleEntry, xRadiusServerName2=xRadiusServerName2, expRipToEgpRuleMetric=expRipToEgpRuleMetric, dot1dTp=dot1dTp, xPppConfigFailLimit=xPppConfigFailLimit, ipForwDatagrams=ipForwDatagrams, alarmInputHighDensity0172Normal=alarmInputHighDensity0172Normal, alarmInputHighDensity0217Normal=alarmInputHighDensity0217Normal, bootRecordInternetAddress=bootRecordInternetAddress, menuText=menuText, snmpOutBadValues=snmpOutBadValues, telnetSerialPortUrgentBreak=telnetSerialPortUrgentBreak, alarmInputHighDensity0207Alarm=alarmInputHighDensity0207Alarm, alarmInputHighDensity0126Alarm=alarmInputHighDensity0126Alarm, pppLinkStatusBadFCSs=pppLinkStatusBadFCSs, expEgpToRipRuleToIf=expEgpToRipRuleToIf, alarmInputHighDensity0334Normal=alarmInputHighDensity0334Normal, charSessConnectionId=charSessConnectionId, alarmInputHighDensity0333Alarm=alarmInputHighDensity0333Alarm, alarmInputHighDensity0176Normal=alarmInputHighDensity0176Normal, etherEntry=etherEntry, portInputSignalChange=portInputSignalChange, alarmInputHighDensity0060Normal=alarmInputHighDensity0060Normal, alarmInputHighDensity0370Alarm=alarmInputHighDensity0370Alarm, alarmInputLowDensity0028Normal=alarmInputLowDensity0028Normal, ipxRipTable=ipxRipTable, ipxIfFilterPacketType=ipxIfFilterPacketType, portEntry=portEntry, basicPortDefaultDestName=basicPortDefaultDestName, ipxRipRtRouter=ipxRipRtRouter, menuNestedSystemName=menuNestedSystemName, alarmInputHighDensity0018Alarm=alarmInputHighDensity0018Alarm, ipxIfFilterTable=ipxIfFilterTable, ospfXIfAddressLessIf=ospfXIfAddressLessIf, dot1dStaticReceivePort=dot1dStaticReceivePort, snmpAgentTrapClientPingHost2=snmpAgentTrapClientPingHost2, alarmInputHighDensity0079Normal=alarmInputHighDensity0079Normal, expIsisToRipRuleEntry=expIsisToRipRuleEntry, basicSerialPortUsernamePrompt=basicSerialPortUsernamePrompt, securIDServerAccess3=securIDServerAccess3, dot1dStp=dot1dStp, basicActiveLimit=basicActiveLimit, basicPortDefaultSessionMode=basicPortDefaultSessionMode, basicSerialPortLineEditorCancel=basicSerialPortLineEditorCancel, xRadiusAcctReqWait=xRadiusAcctReqWait, alarmInputHighDensity0131Normal=alarmInputHighDensity0131Normal, xRouterIp=xRouterIp, expStaticToRipRuleMetric=expStaticToRipRuleMetric, impEgpRuleMetricAction=impEgpRuleMetricAction, basicPortAsciiToTrapTranslationTrapSeverity=basicPortAsciiToTrapTranslationTrapSeverity, expEgpToIsisRuleDefaultMetricAction=expEgpToIsisRuleDefaultMetricAction, basicPowerMasterOutletIndex=basicPowerMasterOutletIndex, xPppConfigOpen=xPppConfigOpen, telnetPortIndex=telnetPortIndex, alarmInputHighDensity0316Alarm=alarmInputHighDensity0316Alarm, psEntry=psEntry, slotBootControlFlagDumpTftpDirect=slotBootControlFlagDumpTftpDirect, ipIfFilter2Index=ipIfFilter2Index, ipxIfState=ipxIfState, alarmInputHighDensity0361Normal=alarmInputHighDensity0361Normal, xDomainResolver=xDomainResolver, alarmInputLowDensity0005Alarm=alarmInputLowDensity0005Alarm, expIsisToRipRuleMetricAction=expIsisToRipRuleMetricAction, slotPlus12Watts=slotPlus12Watts, alarmInputHighDensity0148Normal=alarmInputHighDensity0148Normal, xBsBasic=xBsBasic, alarmInputHighDensity0175Alarm=alarmInputHighDensity0175Alarm, xBootControl=xBootControl, basicTempTrapLowThreshold=basicTempTrapLowThreshold, xPhivExport=xPhivExport, icmpInMsgs=icmpInMsgs, expOspfToIsisRuleMetricType=expOspfToIsisRuleMetricType, charPortInFlowState=charPortInFlowState, broadcastGroupSlaves=broadcastGroupSlaves, xRadiusServerAccess2=xRadiusServerAccess2, sysIdent=sysIdent, org=org, basicPortSensor=basicPortSensor, alarmInputHighDensity0328Normal=alarmInputHighDensity0328Normal, psEntryStatus=psEntryStatus, snmpInBadVersions=snmpInBadVersions, alarmInputHighDensity0317Alarm=alarmInputHighDensity0317Alarm, AreaID=AreaID, lpdQueueWaitingJobs=lpdQueueWaitingJobs, latVisibleServiceIdentification=latVisibleServiceIdentification, alarmInputLowDensity0036Normal=alarmInputLowDensity0036Normal, basicPortDefaultDestLATNodeName=basicPortDefaultDestLATNodeName, dot1dTpPortTable=dot1dTpPortTable, basicPortFallThrough=basicPortFallThrough, alarmInputHighDensity0104Normal=alarmInputHighDensity0104Normal, basicPrivilegedPassword=basicPrivilegedPassword, alarmInputHighDensity0121Alarm=alarmInputHighDensity0121Alarm, phivCircuitExecRecallTimer=phivCircuitExecRecallTimer, phivTrafficIf=phivTrafficIf, alarmInputHighDensity0059Alarm=alarmInputHighDensity0059Alarm, aToELanguageEntry=aToELanguageEntry, line=line, xPppIpcpTxConReq=xPppIpcpTxConReq, snmpInPkts=snmpInPkts, slotBootControlFlagDumpXmop=slotBootControlFlagDumpXmop, xPppIpcpRxConReq=xPppIpcpRxConReq, pppLink=pppLink, expOspfToEgpRuleStatus=expOspfToEgpRuleStatus, basicSerialPortLocalSwitch=basicSerialPortLocalSwitch, expEgpToIsisRuleDefaultMetric=expEgpToIsisRuleDefaultMetric, sysHardwareVersion=sysHardwareVersion, udpBcstServerEntry=udpBcstServerEntry, alarmInputLowDensity0075Normal=alarmInputLowDensity0075Normal, ipxPrinterPortEntry=ipxPrinterPortEntry, activeIdentification=activeIdentification, expOspfToEgpRuleTable=expOspfToEgpRuleTable, slotBootControlFlagDumpRarpTftp=slotBootControlFlagDumpRarpTftp, snmpInTooBigs=snmpInTooBigs, basicPowerStatusFuseA=basicPowerStatusFuseA, alarmInputHighDensity0313Alarm=alarmInputHighDensity0313Alarm, sshPortIncomingTcpPort=sshPortIncomingTcpPort, alarmInputHighDensity0295Alarm=alarmInputHighDensity0295Alarm, sessionLogPort=sessionLogPort, egpRouting=egpRouting, alarmInputHighDensity0302Alarm=alarmInputHighDensity0302Alarm, basicSerialPortGatewayAutoDiscovery=basicSerialPortGatewayAutoDiscovery, alarmInputHighDensity0021Alarm=alarmInputHighDensity0021Alarm, expEgpToEgpRuleTable=expEgpToEgpRuleTable, icmpOutAddrMaskReps=icmpOutAddrMaskReps, alarmInputHighDensity0183Normal=alarmInputHighDensity0183Normal, ipRouterIfArpPacketsIn=ipRouterIfArpPacketsIn, bridgeRouterN9=bridgeRouterN9, rcpRemoteAddress=rcpRemoteAddress, basicSerialPortAutoProtocolDetectSecurityInteractiveOnly=basicSerialPortAutoProtocolDetectSecurityInteractiveOnly, rs232AsyncPortTable=rs232AsyncPortTable, alarmMasterSideBOn=alarmMasterSideBOn, alarmInputHighDensity0334Alarm=alarmInputHighDensity0334Alarm, sessionLogHostAddress=sessionLogHostAddress, basicSerialPortAPDProtocols=basicSerialPortAPDProtocols, alarmInputHighDensity0333Normal=alarmInputHighDensity0333Normal, rs232OutSigState=rs232OutSigState, telnetPortClientLocation=telnetPortClientLocation, xRadiusServerAccessFailed2=xRadiusServerAccessFailed2, icmpPingHostDescription=icmpPingHostDescription, alarmMasterNotResponding=alarmMasterNotResponding, alarmInputHighDensity0126Normal=alarmInputHighDensity0126Normal, dumpFileIdentificationType=dumpFileIdentificationType, xPppLcpStatusState2=xPppLcpStatusState2, menuSelectionPrompt=menuSelectionPrompt, ipxIfNetbiosForwarding=ipxIfNetbiosForwarding, basicTemperatureSensor=basicTemperatureSensor, alarmInputHighDensity0245Alarm=alarmInputHighDensity0245Alarm, udpBcstRouting=udpBcstRouting, expOspfToIsisRuleEntry=expOspfToIsisRuleEntry, ipInUnknownProtos=ipInUnknownProtos, alarmInputHighDensity0003Normal=alarmInputHighDensity0003Normal, alarmInputHighDensity0057Normal=alarmInputHighDensity0057Normal, ipInDiscards=ipInDiscards, irMGR0AC=irMGR0AC, phivCircuitErrors=phivCircuitErrors, basicAlarmMasterInputPort=basicAlarmMasterInputPort, rs232AsyncPortAutobaud=rs232AsyncPortAutobaud, alarmInputHighDensity0322Normal=alarmInputHighDensity0322Normal, alarmInputHighDensity0199Normal=alarmInputHighDensity0199Normal, dot1dStaticStatus=dot1dStaticStatus, latOfferedServicePortMap=latOfferedServicePortMap, alarmInputHighDensity0381Normal=alarmInputHighDensity0381Normal, alarmInputHighDensity0030Alarm=alarmInputHighDensity0030Alarm, phivCircuitCountEntry=phivCircuitCountEntry, ipxNetbiosIfIndex=ipxNetbiosIfIndex, alarmInputHighDensity0253Alarm=alarmInputHighDensity0253Alarm, rs232SyncPortReceiveOverrunErrs=rs232SyncPortReceiveOverrunErrs, alarmInputHighDensity0068Normal=alarmInputHighDensity0068Normal, expStaticToRipRuleAction=expStaticToRipRuleAction, activeSoftwareVersion=activeSoftwareVersion, charPortOutFlowState=charPortOutFlowState, xChassis=xChassis, alarmInputHighDensity0114Alarm=alarmInputHighDensity0114Alarm, alarmInputHighDensity0346Alarm=alarmInputHighDensity0346Alarm, slotBootControlInternetServer=slotBootControlInternetServer, alarmInputHighDensity0017Alarm=alarmInputHighDensity0017Alarm)
mibBuilder.exportSymbols("MRVINREACH", netLoginPortIndex=netLoginPortIndex, xBootClient=xBootClient, expStaticToEgpRuleEntry=expStaticToEgpRuleEntry, basicErrorReport=basicErrorReport, alarmInputLowDensity0048Alarm=alarmInputLowDensity0048Alarm, phivCircuitFilterDstAddr=phivCircuitFilterDstAddr, xLat=xLat, powerSupplyThermalShutdownStatus=powerSupplyThermalShutdownStatus, impIsisRulePreference=impIsisRulePreference, alarmInputHighDensity0340Normal=alarmInputHighDensity0340Normal, slotIpAddress=slotIpAddress, latPortRemoteModification=latPortRemoteModification, namedIdentificationType=namedIdentificationType, alarmInputHighDensity0055Alarm=alarmInputHighDensity0055Alarm, xApplePolicy=xApplePolicy, alarmInputHighDensity0200Normal=alarmInputHighDensity0200Normal, rs232SyncPortTransmitUnderrunErrs=rs232SyncPortTransmitUnderrunErrs, powerSupplyMinus12Volts=powerSupplyMinus12Volts, securIDBaseTimeout=securIDBaseTimeout, expRipToOspfRuleTable=expRipToOspfRuleTable, paramFileEntryStatus=paramFileEntryStatus, alarmInputLowDensity0076Normal=alarmInputLowDensity0076Normal, latInBadMulticasts=latInBadMulticasts, alarmInputHighDensity0005Alarm=alarmInputHighDensity0005Alarm, alarmInputHighDensity0291Alarm=alarmInputHighDensity0291Alarm, alarmInputHighDensity0116Alarm=alarmInputHighDensity0116Alarm, xEventEntry=xEventEntry, nameName=nameName, expEgpToIsisRuleEntry=expEgpToIsisRuleEntry, alarmInputHighDensity0170Normal=alarmInputHighDensity0170Normal, newRoot=newRoot, expRipToEgpRuleEntry=expRipToEgpRuleEntry, alarmInputHighDensity0366Alarm=alarmInputHighDensity0366Alarm, tcpRtoMin=tcpRtoMin, alarmInputHighDensity0235Alarm=alarmInputHighDensity0235Alarm, latImmediateAck=latImmediateAck, alarmInputHighDensity0176Alarm=alarmInputHighDensity0176Alarm, expOspfToRipRuleMetric=expOspfToRipRuleMetric, queueServicePortName=queueServicePortName, alarmInputHighDensity0191Alarm=alarmInputHighDensity0191Alarm, alarmInputHighDensity0211Alarm=alarmInputHighDensity0211Alarm, impRipRuleNetwork=impRipRuleNetwork, sysInitialize=sysInitialize, latLocalServiceGroups=latLocalServiceGroups, tn3270DeviceEntry=tn3270DeviceEntry, alarmInputHighDensity0007Alarm=alarmInputHighDensity0007Alarm, alarmInputHighDensity0149Alarm=alarmInputHighDensity0149Alarm, queueServicePortIndex=queueServicePortIndex, alarmInputHighDensity0197Alarm=alarmInputHighDensity0197Alarm, securIDSecureLogins=securIDSecureLogins, alarmInputLowDensity0040Normal=alarmInputLowDensity0040Normal, sysLocalName=sysLocalName, basicPortRemoteDisconnectNotify=basicPortRemoteDisconnectNotify, latOfferedServiceStatus=latOfferedServiceStatus, snmpOutPkts=snmpOutPkts, impIsisRuleTable=impIsisRuleTable, setClientEntry=setClientEntry, alarmInputHighDensity0304Normal=alarmInputHighDensity0304Normal, alarmInputHighDensity0210Alarm=alarmInputHighDensity0210Alarm, securIDServerAccessFailed1=securIDServerAccessFailed1, alarmInputHighDensity0142Normal=alarmInputHighDensity0142Normal, ipAdExtEntry=ipAdExtEntry, basicSerialPortAPDDefaultProtocol=basicSerialPortAPDDefaultProtocol, dot1dStpPortTable=dot1dStpPortTable, portIOCardSerialNumber=portIOCardSerialNumber, alarmInputLowDensity0079Normal=alarmInputLowDensity0079Normal, alarmInputLowDensity0046Alarm=alarmInputLowDensity0046Alarm, arapPortEntry=arapPortEntry, bootRecordLoadRarpTftp=bootRecordLoadRarpTftp, dot1dBasePort=dot1dBasePort, applePortForwardsOut=applePortForwardsOut, loadFileSoftwareVersion=loadFileSoftwareVersion, ipRouteMetric3=ipRouteMetric3, trapClientAddressType=trapClientAddressType, paramClientParameterVersion=paramClientParameterVersion, tcpPortKeepAliveLimit=tcpPortKeepAliveLimit, xDecnet=xDecnet, alarmInputHighDensity0376Alarm=alarmInputHighDensity0376Alarm, paramStorageActive=paramStorageActive, ipxIfFilterDestNode=ipxIfFilterDestNode, alarmInputHighDensity0216Normal=alarmInputHighDensity0216Normal, phivCircuitExportAddr=phivCircuitExportAddr, appleTrafficTable=appleTrafficTable, dot1dStpPriority=dot1dStpPriority, alarmInputHighDensity0252Alarm=alarmInputHighDensity0252Alarm, ipxIfFilterEntry=ipxIfFilterEntry, alarmInputHighDensity0094Normal=alarmInputHighDensity0094Normal, tn3270ScreenCharacterSequence=tn3270ScreenCharacterSequence, irMgr0Rdc=irMgr0Rdc, alarmInputHighDensity0366Normal=alarmInputHighDensity0366Normal, bootRecordParamProprietary=bootRecordParamProprietary, alarmInputHighDensity0352Normal=alarmInputHighDensity0352Normal, xIpxRip=xIpxRip, pppIpConfigEntry=pppIpConfigEntry, alarmInputHighDensity0048Normal=alarmInputHighDensity0048Normal, ipxPrinterPortTable=ipxPrinterPortTable, xRadAuthCtsSubGrp=xRadAuthCtsSubGrp, etherTxMultipleCollisionFrames=etherTxMultipleCollisionFrames, xRadiusServers=xRadiusServers, alarmInputHighDensity0251Normal=alarmInputHighDensity0251Normal, bootRecordParamMop=bootRecordParamMop, xPhiv=xPhiv, ipxIfRipBcstDiscardTimeout=ipxIfRipBcstDiscardTimeout, snmpAgentTrapClientQuerySourceHost2Timeout=snmpAgentTrapClientQuerySourceHost2Timeout, slotTable=slotTable, basicPortCommandLogging=basicPortCommandLogging, basicPowerSupplyStatusB=basicPowerSupplyStatusB, slotLedNumber=slotLedNumber, tn3270PortLanguageName=tn3270PortLanguageName, loadFileCreation=loadFileCreation, nameAddress=nameAddress, xRadiusPolicyFailed=xRadiusPolicyFailed, TruthValue=TruthValue, alarmInputHighDensity0023Normal=alarmInputHighDensity0023Normal, ipRouteProto=ipRouteProto, tn3270ScreenDeviceName=tn3270ScreenDeviceName, basicPortSessEntry=basicPortSessEntry, ipxPrinterPortStatus=ipxPrinterPortStatus, ifOutUcastPkts=ifOutUcastPkts, sessionLogUserName=sessionLogUserName, expEgpToIsisRuleDelayMetric=expEgpToIsisRuleDelayMetric, xIpx=xIpx, expEgpToIsisRuleStatus=expEgpToIsisRuleStatus, ipxIfFramesIn=ipxIfFramesIn, rs232PortInSigNumber=rs232PortInSigNumber, alarmInputHighDensity0265Normal=alarmInputHighDensity0265Normal, ipIfFilterDstMask=ipIfFilterDstMask, protocolTelnet=protocolTelnet, xTn3270=xTn3270, kerbStatus=kerbStatus, ipRouteMetric5=ipRouteMetric5, applePortProtocolPriority=applePortProtocolPriority, ipxRipRtHops=ipxRipRtHops, alarmInputHighDensity0351Normal=alarmInputHighDensity0351Normal, applePortPacketsOut=applePortPacketsOut, rpN9=rpN9, tn3270PortKeymapStatus=tn3270PortKeymapStatus, alarmInputHighDensity0165Normal=alarmInputHighDensity0165Normal, slotBootControlEntry=slotBootControlEntry, etherAlignmentErrors=etherAlignmentErrors, ripStatus=ripStatus, xPhivTraffic=xPhivTraffic, alarmInputLowDensity0074Normal=alarmInputLowDensity0074Normal, latNodeInSessionsRejected=latNodeInSessionsRejected, alarmInputHighDensity0171Alarm=alarmInputHighDensity0171Alarm, xPppHdlcRxTotalPkts=xPppHdlcRxTotalPkts, xPppConfigConfLimit=xPppConfigConfLimit, bootRecordIndex=bootRecordIndex, ipxPrinterPortServer=ipxPrinterPortServer, basicDeviceNumber=basicDeviceNumber, alarmInputLowDensity0025Normal=alarmInputLowDensity0025Normal, alarmInputHighDensity0274Normal=alarmInputHighDensity0274Normal, alarmInputHighDensity0381Alarm=alarmInputHighDensity0381Alarm, basicHumiditySensorIndex=basicHumiditySensorIndex, impOspfRuleTable=impOspfRuleTable, xPppHdlcRxBadFcs=xPppHdlcRxBadFcs, xPppAuthConfigEntry=xPppAuthConfigEntry, ipRouterIfArpPacketsOut=ipRouterIfArpPacketsOut, icmpOutMsgs=icmpOutMsgs, expRipToRipRuleNetwork=expRipToRipRuleNetwork, ipxSapSvOrigin=ipxSapSvOrigin, paramClientServerRejects=paramClientServerRejects, alarmInputHighDensity0018Normal=alarmInputHighDensity0018Normal, latInBadSlots=latInBadSlots, tn3270PortPrinterPort=tn3270PortPrinterPort, lpdJobFileName=lpdJobFileName, etherIndex=etherIndex, alarmInputHighDensity0268Normal=alarmInputHighDensity0268Normal, alarmInputHighDensity0026Normal=alarmInputHighDensity0026Normal, alarmInputHighDensity0148Alarm=alarmInputHighDensity0148Alarm, xPppBasic=xPppBasic, slotIOCardType=slotIOCardType, impEgpRuleAs=impEgpRuleAs, xInternetDep=xInternetDep, basicPortConsolePort=basicPortConsolePort, xIp=xIp, telnetSerialPortPass8d=telnetSerialPortPass8d, kerbQueryLimit=kerbQueryLimit, alarmInputHighDensity0027Normal=alarmInputHighDensity0027Normal, loadFileSize=loadFileSize, alarmInputHighDensity0356Alarm=alarmInputHighDensity0356Alarm, psEntryIndex=psEntryIndex, ipAdEntIfIndex=ipAdEntIfIndex, xPppPapPassword=xPppPapPassword, appleTrafficDst=appleTrafficDst, basicAlarmMasterInputName=basicAlarmMasterInputName, phivCircuitLineIndex=phivCircuitLineIndex, InterfaceIndex=InterfaceIndex, tn3270DeviceStatus=tn3270DeviceStatus, ifMtu=ifMtu, dialPortDialbackTimeout=dialPortDialbackTimeout, alarmInputHighDensity0133Alarm=alarmInputHighDensity0133Alarm, sessionLogEvent=sessionLogEvent, ospfXIfEntry=ospfXIfEntry, atNetAddress=atNetAddress, etherXTxTable=etherXTxTable, xremoteSessions=xremoteSessions, powerSupplyAdminAction=powerSupplyAdminAction, expIsisToRipRuleAction=expIsisToRipRuleAction, alarmInputHighDensity0078Normal=alarmInputHighDensity0078Normal, xTelnet=xTelnet, nbase=nbase, alarmInputHighDensity0043Alarm=alarmInputHighDensity0043Alarm, slotBootCrashCode=slotBootCrashCode, alarmInputHighDensity0342Alarm=alarmInputHighDensity0342Alarm, rs232OutSigName=rs232OutSigName, charPortSessionIndex=charPortSessionIndex, ipIfFilter2Action=ipIfFilter2Action, basicHumiditySensorTable=basicHumiditySensorTable, paramClientCheckNow=paramClientCheckNow, alarmInputHighDensity0196Normal=alarmInputHighDensity0196Normal, ipTrafficIf=ipTrafficIf, ir7020=ir7020, alarmInputHighDensity0251Alarm=alarmInputHighDensity0251Alarm, xPppIpcpAsyncConfigEntry=xPppIpcpAsyncConfigEntry, alarmInputHighDensity0306Alarm=alarmInputHighDensity0306Alarm, alarmInputHighDensity0035Alarm=alarmInputHighDensity0035Alarm, contactClosureChanged=contactClosureChanged, alarmInputHighDensity0310Normal=alarmInputHighDensity0310Normal, slotBootControlFlagEntry=slotBootControlFlagEntry, xIpNetToMediaCircuit=xIpNetToMediaCircuit, dot1dBasePortCircuit=dot1dBasePortCircuit, paramFileTable=paramFileTable, basicPowerOutletHighCurrent=basicPowerOutletHighCurrent, basicAlarmMasterInputValue=basicAlarmMasterInputValue, alarmInputHighDensity0362Normal=alarmInputHighDensity0362Normal, icmpPingHostNotificationType=icmpPingHostNotificationType, impRipRulePreference=impRipRulePreference, basicPowerOutletConsoleName=basicPowerOutletConsoleName, dialPortEntry=dialPortEntry, basicEventTotal=basicEventTotal, loadCompleted=loadCompleted, basicPortZero=basicPortZero, basicPortSignalName=basicPortSignalName, ipxIfSapAgedOut=ipxIfSapAgedOut, tcpQueuedSegs=tcpQueuedSegs, applePortZoneStatus=applePortZoneStatus, alarmInputHighDensity0034Normal=alarmInputHighDensity0034Normal, alarmInputHighDensity0374Normal=alarmInputHighDensity0374Normal, xSystem=xSystem, ipxIfErrors=ipxIfErrors, appleTrafficPercent=appleTrafficPercent, arapPortGuestLoginsOk=arapPortGuestLoginsOk, domainResolverAddress2=domainResolverAddress2, alarmInputHighDensity0063Alarm=alarmInputHighDensity0063Alarm, bootControlParamLocal=bootControlParamLocal, ipxIfRipFilterHost=ipxIfRipFilterHost, deviceName=deviceName, expOspfToRipRuleNetwork=expOspfToRipRuleNetwork, alarmInputHighDensity0032Normal=alarmInputHighDensity0032Normal, ipInAddrErrors=ipInAddrErrors, tcpLocalPortIncrement=tcpLocalPortIncrement, alarmInputHighDensity0190Alarm=alarmInputHighDensity0190Alarm, ipRouteMetric4=ipRouteMetric4)
mibBuilder.exportSymbols("MRVINREACH", ipRouterIfRDP=ipRouterIfRDP, basicNewBase802Address=basicNewBase802Address, basicEnvironmentalManagerCircuitBreaker=basicEnvironmentalManagerCircuitBreaker, securIDQueryLimit=securIDQueryLimit, alarmInputHighDensity0144Alarm=alarmInputHighDensity0144Alarm, alarmInputHighDensity0344Alarm=alarmInputHighDensity0344Alarm, phivTrafficIndex=phivTrafficIndex, alarmInputHighDensity0122Alarm=alarmInputHighDensity0122Alarm, alarmInputHighDensity0168Normal=alarmInputHighDensity0168Normal, applePortImportTable=applePortImportTable, circuit=circuit, xQueue=xQueue, basicSerialPortIpAutoDiscovery=basicSerialPortIpAutoDiscovery, tn3270LanguageName=tn3270LanguageName, alarmInputHighDensity0127Normal=alarmInputHighDensity0127Normal, alarmInputHighDensity0312Alarm=alarmInputHighDensity0312Alarm, alarmInputHighDensity0011Normal=alarmInputHighDensity0011Normal, trapClientIndex=trapClientIndex, ipxInternalNetwork=ipxInternalNetwork, latPortTable=latPortTable, portIOCardType=portIOCardType, alarmInputHighDensity0281Normal=alarmInputHighDensity0281Normal, clientLoadFile=clientLoadFile, alarmInputHighDensity0132Alarm=alarmInputHighDensity0132Alarm, aToELanguageName=aToELanguageName, basicPortSessionTable=basicPortSessionTable, snmpAgentTrapClientQuerySourceHost2=snmpAgentTrapClientQuerySourceHost2, slotMemorySize=slotMemorySize, alarmInputHighDensity0110Alarm=alarmInputHighDensity0110Alarm, expStaticToEgpRuleAction=expStaticToEgpRuleAction, basicSerialPortPrompt=basicSerialPortPrompt, powerSupplyPlus12Status=powerSupplyPlus12Status, PositiveInteger=PositiveInteger, phivCircuitProtocolPriority=phivCircuitProtocolPriority, applePortPacketsIn=applePortPacketsIn, pppTests=pppTests, InstancePointer=InstancePointer, charPortInFlowType=charPortInFlowType, sysTimeProtocol=sysTimeProtocol, ipGenAdEntExtBroadcast=ipGenAdEntExtBroadcast, alarmInputHighDensity0252Normal=alarmInputHighDensity0252Normal, slotControllerNetwork=slotControllerNetwork, slotBootAddressType=slotBootAddressType, alarmInputHighDensity0358Normal=alarmInputHighDensity0358Normal, alarmInputLowDensity0001Normal=alarmInputLowDensity0001Normal, ipTrafficDstAddr=ipTrafficDstAddr, egpNeighOutErrs=egpNeighOutErrs, controllerIndex=controllerIndex, slotBootEntry=slotBootEntry, alarmInputHighDensity0209Alarm=alarmInputHighDensity0209Alarm, deviceDescr=deviceDescr, bridgeRouterMx=bridgeRouterMx, dot1dStatic=dot1dStatic, expStaticToRipRuleNetwork=expStaticToRipRuleNetwork, phivCircuitCommonName=phivCircuitCommonName, bootRecordTable=bootRecordTable, applePortIndex=applePortIndex, alarmInputLowDensity0036Alarm=alarmInputLowDensity0036Alarm, dot1dBasePortEntry=dot1dBasePortEntry, setClientTable=setClientTable, alarmInputHighDensity0118Alarm=alarmInputHighDensity0118Alarm, securIDServerName1=securIDServerName1, bootRecordParamRarpTftp=bootRecordParamRarpTftp, alarmInputHighDensity0115Alarm=alarmInputHighDensity0115Alarm, basicConsoleLogoutDisconnect=basicConsoleLogoutDisconnect, BridgeId=BridgeId, ipNetToMediaEntry=ipNetToMediaEntry, phivCircuitImportAreaAction=phivCircuitImportAreaAction, xlpd=xlpd, slipTable=slipTable, ipRouteNextHop=ipRouteNextHop, telnetSerialPortEraseKeyCharacter=telnetSerialPortEraseKeyCharacter, sshHostKeyGenerate=sshHostKeyGenerate, sysLoaderAddressType=sysLoaderAddressType, sshPortNewline=sshPortNewline, sessionLogIndex=sessionLogIndex, bootRecordLoadBootpTftp=bootRecordLoadBootpTftp, alarmInputHighDensity0194Alarm=alarmInputHighDensity0194Alarm, dumpFileIdentification=dumpFileIdentification, udpBcstPortEntry=udpBcstPortEntry, alarmInputLowDensity0044Alarm=alarmInputLowDensity0044Alarm, alarmInputHighDensity0019Alarm=alarmInputHighDensity0019Alarm, sshPortBreakSequence=sshPortBreakSequence, domainResolverSuffix=domainResolverSuffix, tn3270DeviceType=tn3270DeviceType, tn3270ScreenEntry=tn3270ScreenEntry, getClientAddress=getClientAddress, basicPortDialup=basicPortDialup, alarmInputHighDensity0205Alarm=alarmInputHighDensity0205Alarm, xPppIpcpAsyncConfigTable=xPppIpcpAsyncConfigTable, alarmInputHighDensity0271Normal=alarmInputHighDensity0271Normal, alarmInputHighDensity0154Normal=alarmInputHighDensity0154Normal, bootControlLoadInternetFile=bootControlLoadInternetFile, alarmInputHighDensity0363Alarm=alarmInputHighDensity0363Alarm, alarmInputHighDensity0199Alarm=alarmInputHighDensity0199Alarm, alarmInputHighDensity0217Alarm=alarmInputHighDensity0217Alarm, bootControlDumpRarpTftp=bootControlDumpRarpTftp, rs232SyncPortEntry=rs232SyncPortEntry, bootControlLoadRarpTftp=bootControlLoadRarpTftp, rs232PortIndex=rs232PortIndex, lpdJobEntry=lpdJobEntry, powerSupplyPlus5History=powerSupplyPlus5History, dot1dStpBridgeMaxAge=dot1dStpBridgeMaxAge, alarmInputHighDensity0014Normal=alarmInputHighDensity0014Normal, expStaticToRipRuleToIf=expStaticToRipRuleToIf, latNodeStatus=latNodeStatus, basicSessionsHigh=basicSessionsHigh, PhysAddress=PhysAddress, deviceGetFileName=deviceGetFileName, xPhivFilter=xPhivFilter, resOperMaximum=resOperMaximum, activeFile=activeFile, ipxIfRipFilterRowStatus=ipxIfRipFilterRowStatus, latOfferedServiceEnvironmentalManager=latOfferedServiceEnvironmentalManager, powerSupplyWattsMax=powerSupplyWattsMax, alarmInputHighDensity0352Alarm=alarmInputHighDensity0352Alarm, alarmInputHighDensity0244Alarm=alarmInputHighDensity0244Alarm, appleState=appleState, ipxIfEntry=ipxIfEntry, dot1dStpProtocolSpecification=dot1dStpProtocolSpecification, tcpAckDelay=tcpAckDelay, kerbServerAccess1=kerbServerAccess1, basicControlOutputTable=basicControlOutputTable, tn3270ScreenTable=tn3270ScreenTable, rs232InSigEntry=rs232InSigEntry, irMGR0AC_IN=irMGR0AC_IN, alarmInputLowDensity0069Alarm=alarmInputLowDensity0069Alarm, alarmInputLowDensity0067Alarm=alarmInputLowDensity0067Alarm, alarmInputHighDensity0296Alarm=alarmInputHighDensity0296Alarm, phivCircuitExportAreaAction=phivCircuitExportAreaAction, alarmInputHighDensity0308Alarm=alarmInputHighDensity0308Alarm, clientEntryStatus=clientEntryStatus, tn3270LanguageTable=tn3270LanguageTable, latOfferedServiceTable=latOfferedServiceTable, basicPortAsciiToTrapTranslation=basicPortAsciiToTrapTranslation, ospfIfMtrcIpAddress=ospfIfMtrcIpAddress, alarmInputLowDensity0073Alarm=alarmInputLowDensity0073Alarm, latOfferedServiceQueuing=latOfferedServiceQueuing, alarmInputHighDensity0150Normal=alarmInputHighDensity0150Normal, alarmInputHighDensity0325Alarm=alarmInputHighDensity0325Alarm, sysUpTime=sysUpTime, phivCircuitCountTransitPkSent=phivCircuitCountTransitPkSent, applePortTable=applePortTable, menuStatus=menuStatus, ipIfFilter2DstAddr=ipIfFilter2DstAddr, protocolRlogin=protocolRlogin, xPppHdlcTxTotalPkts=xPppHdlcTxTotalPkts, slotBootTable=slotBootTable, loadFileEntry=loadFileEntry, expEgpToRipRuleFromAs=expEgpToRipRuleFromAs, alarmInputHighDensity0028Normal=alarmInputHighDensity0028Normal, xremotePortEntry=xremotePortEntry, bootRecordDumpProprietary=bootRecordDumpProprietary, basicPortPowerMasterSwitch=basicPortPowerMasterSwitch, expStaticToIsisRuleAction=expStaticToIsisRuleAction, alarmInputHighDensity0364Normal=alarmInputHighDensity0364Normal, charSessTable=charSessTable, dot1dStpDesignatedRoot=dot1dStpDesignatedRoot, xEventText=xEventText, alarmInputHighDensity0044Normal=alarmInputHighDensity0044Normal, dot1dStpBridgeHelloTime=dot1dStpBridgeHelloTime, alarmInputHighDensity0095Normal=alarmInputHighDensity0095Normal, phivCircuitExportAreaAddr=phivCircuitExportAreaAddr, paramClientCheckInterval=paramClientCheckInterval, xPppIpcpStatusState=xPppIpcpStatusState, xPppLcpStatusTxAuth=xPppLcpStatusTxAuth, alarmInputHighDensity0014Alarm=alarmInputHighDensity0014Alarm, ipARPTimeout=ipARPTimeout, basicControlOutputName=basicControlOutputName, alarmInputHighDensity0152Alarm=alarmInputHighDensity0152Alarm, PhivCounter=PhivCounter, alarmInputHighDensity0293Alarm=alarmInputHighDensity0293Alarm, dot1dStaticEntry=dot1dStaticEntry, interfaceNetwork=interfaceNetwork, bridgeRouterRepeater=bridgeRouterRepeater, slotBootFileName=slotBootFileName, arapDefaultZoneName=arapDefaultZoneName, basicSerialPortPasswordPrompt=basicSerialPortPasswordPrompt, expStaticToIsisRuleErrorMetricAction=expStaticToIsisRuleErrorMetricAction, pppLinkStatusRemoteToLocalACCompression=pppLinkStatusRemoteToLocalACCompression, etherMulticastBytesOut=etherMulticastBytesOut, alarmInputLowDensity0078Alarm=alarmInputLowDensity0078Alarm, alarmInputHighDensity0193Normal=alarmInputHighDensity0193Normal, xPppLcpStatusTxProRej=xPppLcpStatusTxProRej, basicPortPowerMaster=basicPortPowerMaster, expStaticToIsisRuleDelayMetricAction=expStaticToIsisRuleDelayMetricAction, lpdQueueFormFeed=lpdQueueFormFeed, egpNeighInMsgs=egpNeighInMsgs, getClientEntryStatus=getClientEntryStatus, alarmInputLowDensity0028Alarm=alarmInputLowDensity0028Alarm, snmpAgentTrapCommunity=snmpAgentTrapCommunity, basicContactClosureOrAlarmInputRelatedEquipment=basicContactClosureOrAlarmInputRelatedEquipment, basicSerialPortRotaryRoundRobin=basicSerialPortRotaryRoundRobin, activeParameterVersion=activeParameterVersion, xIpNetToMediaReverseArp=xIpNetToMediaReverseArp, alarmInputHighDensity0192Normal=alarmInputHighDensity0192Normal, alarmInputHighDensity0061Alarm=alarmInputHighDensity0061Alarm, phivCircuitCommonState=phivCircuitCommonState, ospfAutoConfigure=ospfAutoConfigure, telnetPortOutgoingTcpPort=telnetPortOutgoingTcpPort, alarmInputHighDensity0344Normal=alarmInputHighDensity0344Normal, tcpOutRsts=tcpOutRsts, phivTrafficSort=phivTrafficSort, egpNeighIntervalHello=egpNeighIntervalHello, alarmInputHighDensity0339Alarm=alarmInputHighDensity0339Alarm, domainResolverAddress1=domainResolverAddress1, ipAddrEntry=ipAddrEntry, pppLinkStatusLocalToRemoteACCompression=pppLinkStatusLocalToRemoteACCompression, queuePortQueuing=queuePortQueuing, alarmInputHighDensity0015Alarm=alarmInputHighDensity0015Alarm, expIsisToEgpRuleMetricAction=expIsisToEgpRuleMetricAction, alarmInputLowDensity0025Alarm=alarmInputLowDensity0025Alarm, icmpInRedirects=icmpInRedirects, alarmInputHighDensity0240Alarm=alarmInputHighDensity0240Alarm, xPppIpxcpRxTrmReq=xPppIpxcpRxTrmReq, dot1dTpFdbEntry=dot1dTpFdbEntry, phivCircuitImportAreaAddr=phivCircuitImportAreaAddr, basicPowerOutletOnOff=basicPowerOutletOnOff, alarmInputHighDensity0170Alarm=alarmInputHighDensity0170Alarm, alarmInputHighDensity0009Normal=alarmInputHighDensity0009Normal, alarmInputHighDensity0225Alarm=alarmInputHighDensity0225Alarm, ipRouteDest=ipRouteDest, charSessStartTime=charSessStartTime, pppLinkConfigFcsSize=pppLinkConfigFcsSize, applePortExportName=applePortExportName, ipRoutingDiscards=ipRoutingDiscards, alarmInputHighDensity0347Alarm=alarmInputHighDensity0347Alarm, alarmInputHighDensity0314Normal=alarmInputHighDensity0314Normal, appleNbpTable=appleNbpTable, alarmInputLowDensity0063Normal=alarmInputLowDensity0063Normal, applePortArpInterval=applePortArpInterval, dot1dTpAgingTime=dot1dTpAgingTime, slotBootServerAddress=slotBootServerAddress, sessionLogVerboseMessage=sessionLogVerboseMessage, sessionLogZeroCommandLogging=sessionLogZeroCommandLogging, internet=internet, basicPortPowerMasterFirmware=basicPortPowerMasterFirmware, powerSupplyAlarmB=powerSupplyAlarmB, alarmInputHighDensity0190Normal=alarmInputHighDensity0190Normal, alarmInputLowDensity0042Normal=alarmInputLowDensity0042Normal, slotMinus12Watts=slotMinus12Watts, xInterface=xInterface, snmpInBadCommunityNames=snmpInBadCommunityNames, alarmInputHighDensity0283Alarm=alarmInputHighDensity0283Alarm, alarmInputHighDensity0301Normal=alarmInputHighDensity0301Normal, xPppIpcpConfigRangeStart=xPppIpcpConfigRangeStart, alarmInputHighDensity0124Normal=alarmInputHighDensity0124Normal, xPppLcpStatusTxTrmAck=xPppLcpStatusTxTrmAck, irM900=irM900, slotBootControlNetwork=slotBootControlNetwork, alarmInputHighDensity0143Normal=alarmInputHighDensity0143Normal, expEgpToIsisRuleErrorMetric=expEgpToIsisRuleErrorMetric, securIDEncryptionMode=securIDEncryptionMode, dumpFileTable=dumpFileTable)
mibBuilder.exportSymbols("MRVINREACH", basicPortEntry=basicPortEntry, ipReasmReqds=ipReasmReqds, dot1dStpTimeSinceTopologyChange=dot1dStpTimeSinceTopologyChange, alarmMasterInputStateChange=alarmMasterInputStateChange, activeEntry=activeEntry, rs232AsyncPortOverrunErrs=rs232AsyncPortOverrunErrs, alarmInputHighDensity0172Alarm=alarmInputHighDensity0172Alarm, em1608=em1608, slotBootServerAddressType=slotBootServerAddressType, latNodeOutRetransmits=latNodeOutRetransmits, alarmInputHighDensity0354Alarm=alarmInputHighDensity0354Alarm, icmpPingHostStatus=icmpPingHostStatus, alarmInputHighDensity0187Normal=alarmInputHighDensity0187Normal, pppLinkStatusBadAddresses=pppLinkStatusBadAddresses, basicSerialPortSignalCheck=basicSerialPortSignalCheck, dot1dStaticAllowedToGoTo=dot1dStaticAllowedToGoTo, phivCircuitService=phivCircuitService, xPppLcpStatusTxTrmReq=xPppLcpStatusTxTrmReq, slotLedStatus=slotLedStatus, bootControlDumpBootpTftp=bootControlDumpBootpTftp, expEgpToEgpRuleMetric=expEgpToEgpRuleMetric, alarmInputHighDensity0357Alarm=alarmInputHighDensity0357Alarm, xPppIpxcpRxConReq=xPppIpxcpRxConReq, alarmInputHighDensity0064Normal=alarmInputHighDensity0064Normal, alarmInputLowDensity0047Normal=alarmInputLowDensity0047Normal, alarmInputHighDensity0093Normal=alarmInputHighDensity0093Normal, phivCircuitParametersEntry=phivCircuitParametersEntry, alarmInputHighDensity0325Normal=alarmInputHighDensity0325Normal, ipxIfSapFilterRowStatus=ipxIfSapFilterRowStatus, sysLoginAuthFailureTrapType=sysLoginAuthFailureTrapType, alarmInputHighDensity0275Alarm=alarmInputHighDensity0275Alarm, xPpp=xPpp, paramServerStoredStatus=paramServerStoredStatus, xPppIpxcpCountersEntry=xPppIpxcpCountersEntry, aarp=aarp, basicPortConnectResume=basicPortConnectResume, netLoginPortLoaderAddress=netLoginPortLoaderAddress, alarmInputHighDensity0228Normal=alarmInputHighDensity0228Normal, expIsisToOspfRuleEntry=expIsisToOspfRuleEntry, slotBootControlInternetFile=slotBootControlInternetFile, basicPortPppDialBackupDestinationAddress=basicPortPppDialBackupDestinationAddress, sessionLogVerbose=sessionLogVerbose, alarmInputHighDensity0102Normal=alarmInputHighDensity0102Normal, lpdQueueTable=lpdQueueTable, protocolX29=protocolX29, expRipToOspfRuleNetwork=expRipToOspfRuleNetwork, expStaticToRipRuleEntry=expStaticToRipRuleEntry, namedDiagnosticFile=namedDiagnosticFile, pppLinkConfigReceiveACCMap=pppLinkConfigReceiveACCMap, xLoad=xLoad, udpLocalAddress=udpLocalAddress, alarmInputHighDensity0145Alarm=alarmInputHighDensity0145Alarm, netLoginServerName=netLoginServerName, lpdQueueLfConversion=lpdQueueLfConversion, ipxNetbiosIfTable=ipxNetbiosIfTable, ifInNUcastPkts=ifInNUcastPkts, psEntryInvalidIndex=psEntryInvalidIndex, xPppIpxcpTxTrmReq=xPppIpxcpTxTrmReq, pppLinkStatusPacketTooLongs=pppLinkStatusPacketTooLongs, xPppIpcpTxConNak=xPppIpcpTxConNak, kerbServerAccessFailed1=kerbServerAccessFailed1, alarmInputLowDensity0016Alarm=alarmInputLowDensity0016Alarm, netLoginPortLoaderAddressType=netLoginPortLoaderAddressType, alarmInputHighDensity0175Normal=alarmInputHighDensity0175Normal, applePortExportZone=applePortExportZone, alarmInputLowDensity0052Normal=alarmInputLowDensity0052Normal, powerSupplyAlarmA=powerSupplyAlarmA, ifInOctets=ifInOctets, appleStatus=appleStatus, alarmInputHighDensity0161Alarm=alarmInputHighDensity0161Alarm, xPppLcpStatusRxEcoReq=xPppLcpStatusRxEcoReq, alarmInputHighDensity0262Alarm=alarmInputHighDensity0262Alarm, telnetPortTerminalType=telnetPortTerminalType, alarmInputLowDensity0024Alarm=alarmInputLowDensity0024Alarm, ipxSapNetwork=ipxSapNetwork, paramServerEntry=paramServerEntry, resCurrent=resCurrent, applePortNetAddress=applePortNetAddress, experimental=experimental, basicPortLoginDuration=basicPortLoginDuration, alarmInputLowDensity0032Normal=alarmInputLowDensity0032Normal, area=area, alarmInputHighDensity0065Alarm=alarmInputHighDensity0065Alarm, expStaticToIsisRuleTable=expStaticToIsisRuleTable, kerbRealm=kerbRealm, impEgpRulePreference=impEgpRulePreference, charPortLastChange=charPortLastChange, snmpAgentTrapClientQuerySourceHost1Timeout=snmpAgentTrapClientQuerySourceHost1Timeout, alarmInputHighDensity0051Normal=alarmInputHighDensity0051Normal, expEgpToRipRuleAction=expEgpToRipRuleAction, expStaticToIsisRuleErrorMetric=expStaticToIsisRuleErrorMetric, basicControlOutputRelayTable=basicControlOutputRelayTable, slotBootControlTable=slotBootControlTable, phivCircuitFilterDstMask=phivCircuitFilterDstMask, slotBootControlStorageTable=slotBootControlStorageTable, ospfIfMtrcAddressLessIf=ospfIfMtrcAddressLessIf, applePortExportType=applePortExportType, alarmInputHighDensity0086Normal=alarmInputHighDensity0086Normal, xremotePortXremote=xremotePortXremote, alarmInputHighDensity0342Normal=alarmInputHighDensity0342Normal, xPppChapStatusState=xPppChapStatusState, alarmInputHighDensity0080Normal=alarmInputHighDensity0080Normal, alarmInputHighDensity0322Alarm=alarmInputHighDensity0322Alarm, bootControlParamBootpTftp=bootControlParamBootpTftp, deviceProtection=deviceProtection, basicSerialPortBreakLength=basicSerialPortBreakLength, charPortSessionNumber=charPortSessionNumber, expRipToIsisRuleDelayMetric=expRipToIsisRuleDelayMetric, xremoteServerName1=xremoteServerName1, alarmInputHighDensity0006Normal=alarmInputHighDensity0006Normal, alarmInputHighDensity0067Normal=alarmInputHighDensity0067Normal, egpInErrors=egpInErrors, alarmInputHighDensity0111Normal=alarmInputHighDensity0111Normal, xRadiusCounters=xRadiusCounters, alarmInputHighDensity0118Normal=alarmInputHighDensity0118Normal, latPortIndex=latPortIndex, alarmInputLowDensity0039Normal=alarmInputLowDensity0039Normal, ospfIfMtrcEntry=ospfIfMtrcEntry, xPppIpxcpStatusEntry=xPppIpxcpStatusEntry, sysInReachManagementSecurityStatus=sysInReachManagementSecurityStatus, basicPortLoginPassword=basicPortLoginPassword, alarmInputHighDensity0207Normal=alarmInputHighDensity0207Normal, applePortZoneName=applePortZoneName, alarmInputHighDensity0073Normal=alarmInputHighDensity0073Normal, alarmInputHighDensity0319Normal=alarmInputHighDensity0319Normal, snmpOutGenErrs=snmpOutGenErrs, expRipToIsisRuleStatus=expRipToIsisRuleStatus, ospfXIfIpAddress=ospfXIfIpAddress, alarmInputHighDensity0373Alarm=alarmInputHighDensity0373Alarm, ipxRipIfEntry=ipxRipIfEntry, etherTxTable=etherTxTable, expIsisToEgpRuleEntry=expIsisToEgpRuleEntry, latGroupPurge=latGroupPurge, dialPortDialback=dialPortDialback, alarmInputHighDensity0259Normal=alarmInputHighDensity0259Normal, sysProductName=sysProductName, phivCircuitFilterSrcMask=phivCircuitFilterSrcMask, ipInDelivers=ipInDelivers, alarmInputHighDensity0211Normal=alarmInputHighDensity0211Normal, expEgpToRipRuleTable=expEgpToRipRuleTable, snmpInGetResponses=snmpInGetResponses, alarmInputLowDensity0046Normal=alarmInputLowDensity0046Normal, alarmInputLowDensity0017Normal=alarmInputLowDensity0017Normal, sysTimeServerConfiguredStatus=sysTimeServerConfiguredStatus, alarmInputHighDensity0235Normal=alarmInputHighDensity0235Normal, expIsisToEgpRuleMetric=expIsisToEgpRuleMetric, icmpInAddrMaskReps=icmpInAddrMaskReps, dot1dBaseType=dot1dBaseType, alarmInputHighDensity0106Alarm=alarmInputHighDensity0106Alarm, charSessInCharacters=charSessInCharacters, phivCircuitFilterEntry=phivCircuitFilterEntry, xSegment=xSegment, alarmInputHighDensity0163Alarm=alarmInputHighDensity0163Alarm, rs232AsyncPortParityErrs=rs232AsyncPortParityErrs, slotBootControlFlagDumpBootpTftp=slotBootControlFlagDumpBootpTftp, egpNeighAddr=egpNeighAddr, alarmInputLowDensity0011Alarm=alarmInputLowDensity0011Alarm, tn3270KeyDeviceName=tn3270KeyDeviceName, broadcastGroupTable=broadcastGroupTable, ripNetRipsIn=ripNetRipsIn, appleTrafficIndex=appleTrafficIndex, alarmInputHighDensity0331Normal=alarmInputHighDensity0331Normal, xRadiusMessage=xRadiusMessage, sessionLogLimit=sessionLogLimit, pppLinkStatusRemoteToLocalProtocolCompression=pppLinkStatusRemoteToLocalProtocolCompression, powerAlarmFuseBankA=powerAlarmFuseBankA, alarmInputHighDensity0075Normal=alarmInputHighDensity0075Normal, ipTrafficSort=ipTrafficSort, tcpEstabResets=tcpEstabResets, phivCircuitImportAddr=phivCircuitImportAddr, portType=portType, atport=atport, xCcl=xCcl, alarmInputLowDensity0022Normal=alarmInputLowDensity0022Normal, pppIpLocalToRemoteCompressionProtocol=pppIpLocalToRemoteCompressionProtocol, alarmInputHighDensity0264Alarm=alarmInputHighDensity0264Alarm, queueEntry=queueEntry, sysChassisType=sysChassisType, lpdJobState=lpdJobState, pppLinkConfigTable=pppLinkConfigTable, alarmInputHighDensity0082Alarm=alarmInputHighDensity0082Alarm, phivCircuitCountCircuitDown=phivCircuitCountCircuitDown, ipxSapSvHops=ipxSapSvHops, alarmInputHighDensity0239Alarm=alarmInputHighDensity0239Alarm, ipxIfFilterStatusDestNetworkAll=ipxIfFilterStatusDestNetworkAll, alarmInputHighDensity0122Normal=alarmInputHighDensity0122Normal, paramClientServerNumber=paramClientServerNumber, powerSupplyFanHistory=powerSupplyFanHistory, basicPortDefaultDestControlled=basicPortDefaultDestControlled, portIOCardOperStatus=portIOCardOperStatus, ipxSapSocket=ipxSapSocket, xDial=xDial, securIDServerName4=securIDServerName4, dot1dTpFdbTable=dot1dTpFdbTable, paramDrive=paramDrive, securIDErrorPortIndex=securIDErrorPortIndex, alarmInputHighDensity0007Normal=alarmInputHighDensity0007Normal, menuContinuePrompt=menuContinuePrompt, ipRouteAge=ipRouteAge, phivCircuitRoutingTimer=phivCircuitRoutingTimer, ipxIfFrameStyle=ipxIfFrameStyle, alarmInputLowDensity0055Alarm=alarmInputLowDensity0055Alarm, ipxSapHost=ipxSapHost, alarmInputHighDensity0137Normal=alarmInputHighDensity0137Normal, alarmInputHighDensity0149Normal=alarmInputHighDensity0149Normal, alarmInputHighDensity0141Alarm=alarmInputHighDensity0141Alarm, ipGatewayPingInterval=ipGatewayPingInterval, alarmInputHighDensity0329Alarm=alarmInputHighDensity0329Alarm, xPppIpcpConfigTable=xPppIpcpConfigTable, etherXTxIndex=etherXTxIndex, slotIOCardSerialNumber=slotIOCardSerialNumber, xPppIpxcpStatusTable=xPppIpxcpStatusTable, udpEntry=udpEntry, alarmInputHighDensity0143Alarm=alarmInputHighDensity0143Alarm, impRipRuleMetricAction=impRipRuleMetricAction, dot1dSr=dot1dSr, ipxRipNetwork=ipxRipNetwork, alarmInputHighDensity0368Normal=alarmInputHighDensity0368Normal, slotBootControlFlagParamRarpTftp=slotBootControlFlagParamRarpTftp, alarmInputHighDensity0354Normal=alarmInputHighDensity0354Normal, ipxSapSvName=ipxSapSvName, udpLocalPort=udpLocalPort, alarmInputHighDensity0274Alarm=alarmInputHighDensity0274Alarm, alarmInputHighDensity0160Alarm=alarmInputHighDensity0160Alarm, deviceGetFileHostIdentificationType=deviceGetFileHostIdentificationType, udpBcstPort=udpBcstPort, basicPowerOutletTable=basicPowerOutletTable, xPppLcpStatusTxConAck=xPppLcpStatusTxConAck, tcpConnectTimer=tcpConnectTimer, xPppLcpStatusRxTrmReq=xPppLcpStatusRxTrmReq, alarmInputHighDensity0116Normal=alarmInputHighDensity0116Normal, sysRcpMulticast=sysRcpMulticast, broadcastGroupSlaveTcpBroadcastOnly=broadcastGroupSlaveTcpBroadcastOnly, loadMerit=loadMerit, slotRestoreNVS=slotRestoreNVS, basicPortTrapIndex=basicPortTrapIndex, alarmInputLowDensity0023Alarm=alarmInputLowDensity0023Alarm, menuNumber=menuNumber, ipxIfFilterAction=ipxIfFilterAction, xAppleSystem=xAppleSystem, netVantage=netVantage, basicSerialPortModemControl=basicSerialPortModemControl, basicSerialPortRaiseControlDtr=basicSerialPortRaiseControlDtr, xParam=xParam, expRipToOspfRuleStatus=expRipToOspfRuleStatus, tsPrint=tsPrint, egpNbrEntry=egpNbrEntry, alarmInputLowDensity0079Alarm=alarmInputLowDensity0079Alarm, xPppLcpStatusRxProRej=xPppLcpStatusRxProRej, alarmInputLowDensity0033Normal=alarmInputLowDensity0033Normal, snmpOutGetNexts=snmpOutGetNexts, alarmInputHighDensity0049Alarm=alarmInputHighDensity0049Alarm, alarmInputHighDensity0057Alarm=alarmInputHighDensity0057Alarm, basicPortAlarmMasterLcdDisplayString=basicPortAlarmMasterLcdDisplayString)
mibBuilder.exportSymbols("MRVINREACH", psPortIndex=psPortIndex, egpNeighOutErrMsgs=egpNeighOutErrMsgs, menuPortTable=menuPortTable, powerSupplyMinus12History=powerSupplyMinus12History, alarmInputHighDensity0208Alarm=alarmInputHighDensity0208Alarm, expStaticToEgpRuleNetwork=expStaticToEgpRuleNetwork, applePortExportAction=applePortExportAction, nv8516FF=nv8516FF, latInMessages=latInMessages, alarmInputHighDensity0305Alarm=alarmInputHighDensity0305Alarm, alarmInputHighDensity0062Alarm=alarmInputHighDensity0062Alarm, protocolOther=protocolOther, alarmInputHighDensity0244Normal=alarmInputHighDensity0244Normal, charSessState=charSessState, basicPortControlledSessionInitialize=basicPortControlledSessionInitialize, sshServerKeyTtl=sshServerKeyTtl, sshPortIndex=sshPortIndex, alarmInputHighDensity0159Alarm=alarmInputHighDensity0159Alarm, phivCircuitExecHelloTimer=phivCircuitExecHelloTimer, basicPowerMasterOutletTable=basicPowerMasterOutletTable, atecho=atecho, alarmInputHighDensity0077Alarm=alarmInputHighDensity0077Alarm, alarmInputHighDensity0090Normal=alarmInputHighDensity0090Normal, telnetPortPassiveSendLocation=telnetPortPassiveSendLocation, dumpActive=dumpActive, tn3270LanguageNumber=tn3270LanguageNumber, alarmInputHighDensity0129Normal=alarmInputHighDensity0129Normal, egpNeighMode=egpNeighMode, ipNetToMediaPhysAddress=ipNetToMediaPhysAddress, alarmInputHighDensity0139Alarm=alarmInputHighDensity0139Alarm, sessionLogZeroDataLogging=sessionLogZeroDataLogging, alarmInputHighDensity0072Normal=alarmInputHighDensity0072Normal, xRadiusLoginsFailed=xRadiusLoginsFailed, xBootServer=xBootServer, loadService=loadService, alarmInputHighDensity0102Alarm=alarmInputHighDensity0102Alarm, alarmInputHighDensity0150Alarm=alarmInputHighDensity0150Alarm, getClientIndex=getClientIndex, ipxTimeout=ipxTimeout, basicPortTl1Console=basicPortTl1Console, ipIfFilter2Protocol=ipIfFilter2Protocol, sysResourceNumber=sysResourceNumber, expRipToEgpRuleToAs=expRipToEgpRuleToAs, alarmInputHighDensity0220Alarm=alarmInputHighDensity0220Alarm, appleTrafficIntf=appleTrafficIntf, alarmMasterSideBOff=alarmMasterSideBOff, alarmInputHighDensity0164Alarm=alarmInputHighDensity0164Alarm, alarmInputHighDensity0174Alarm=alarmInputHighDensity0174Alarm, latPortCurrentGroups=latPortCurrentGroups, alarmInputHighDensity0071Alarm=alarmInputHighDensity0071Alarm, sysDumperAddressType=sysDumperAddressType, tcpLocalPortBase=tcpLocalPortBase, ipxIfSapFilterTable=ipxIfSapFilterTable, alarmInputHighDensity0135Normal=alarmInputHighDensity0135Normal, applePortImportIndex=applePortImportIndex, snmpAgentGetCommunity=snmpAgentGetCommunity, snmpOutSetRequests=snmpOutSetRequests, etherXTxEntry=etherXTxEntry, xPingHosts=xPingHosts, phivCircuitCountInitFailure=phivCircuitCountInitFailure, alarmInputHighDensity0242Normal=alarmInputHighDensity0242Normal, latInSessionsAccepted=latInSessionsAccepted, slotBootControlFlagLoadLocal=slotBootControlFlagLoadLocal, alarmInputHighDensity0343Alarm=alarmInputHighDensity0343Alarm, basicLogLimit=basicLogLimit, alarmInputHighDensity0025Alarm=alarmInputHighDensity0025Alarm, basicAlarmMasterInputSlot=basicAlarmMasterInputSlot, activeTable=activeTable, basicSerialPortDSRObserve=basicSerialPortDSRObserve, basicPowerSupplyStatusA=basicPowerSupplyStatusA, sessionLogRemoteName=sessionLogRemoteName, tcpAttemptFails=tcpAttemptFails, dot1dTpPortEntry=dot1dTpPortEntry, sessionLogVerboseEvent=sessionLogVerboseEvent, alarmInputHighDensity0306Normal=alarmInputHighDensity0306Normal, egpNeighState=egpNeighState, ipAdEntReasmMaxSize=ipAdEntReasmMaxSize, basicPortAlarmMasterStatus=basicPortAlarmMasterStatus, xPppIpxcpCipxOutCompression=xPppIpxcpCipxOutCompression, basicControlSignalValue=basicControlSignalValue, latVisibleServiceTable=latVisibleServiceTable, portTable=portTable, alarmInputHighDensity0104Alarm=alarmInputHighDensity0104Alarm, alarmInputHighDensity0343Normal=alarmInputHighDensity0343Normal, alarmInputLowDensity0068Normal=alarmInputLowDensity0068Normal, bootRecordMopFile=bootRecordMopFile, PhivAddr=PhivAddr, nameEntry=nameEntry, applePortArpRetransmitCount=applePortArpRetransmitCount, xPppConfigPacketLogging=xPppConfigPacketLogging, Letter=Letter, alarmInputHighDensity0033Alarm=alarmInputHighDensity0033Alarm, xIpxNetbios=xIpxNetbios, bootControlLoadInternetServer=bootControlLoadInternetServer, paramActive=paramActive, alarmInputHighDensity0003Alarm=alarmInputHighDensity0003Alarm, phivCircuitCountOriginPackSent=phivCircuitCountOriginPackSent, alarmInputLowDensity0052Alarm=alarmInputLowDensity0052Alarm, lpdJobNumber=lpdJobNumber, menuEntry=menuEntry, alarmInputHighDensity0105Normal=alarmInputHighDensity0105Normal, ipxPrinterMac802_2_Snap=ipxPrinterMac802_2_Snap, transmission=transmission, slotBootControlFlagTable=slotBootControlFlagTable, egpStatus=egpStatus, firmwareUpdateTable=firmwareUpdateTable, paramClientWriteNow=paramClientWriteNow, snmpAgentCommunityAuthenticationAlways=snmpAgentCommunityAuthenticationAlways, alarmInputHighDensity0164Normal=alarmInputHighDensity0164Normal, alarmInputHighDensity0204Normal=alarmInputHighDensity0204Normal, xPppIpcpConfigLocalAddress=xPppIpcpConfigLocalAddress, xRadiusLogging=xRadiusLogging, sysServices=sysServices, xRadius=xRadius, slotBootControlFlagLoadMop=slotBootControlFlagLoadMop, alarmInputHighDensity0159Normal=alarmInputHighDensity0159Normal, humidityThresholdExceeded=humidityThresholdExceeded, latNodeInMessages=latNodeInMessages, broadcastGroupStatus=broadcastGroupStatus, char=char, alarmInputHighDensity0205Normal=alarmInputHighDensity0205Normal, xPppLcpStatusTxEcoRep=xPppLcpStatusTxEcoRep, alarmInputHighDensity0053Alarm=alarmInputHighDensity0053Alarm, alarmInputHighDensity0119Normal=alarmInputHighDensity0119Normal, alarmInputHighDensity0383Normal=alarmInputHighDensity0383Normal, alarmInputHighDensity0297Normal=alarmInputHighDensity0297Normal, alarmInputHighDensity0371Alarm=alarmInputHighDensity0371Alarm, xRadiusPortIndex=xRadiusPortIndex, activeIdentificationType=activeIdentificationType, alarmInputHighDensity0069Alarm=alarmInputHighDensity0069Alarm, tn3270PortEorNegotiation=tn3270PortEorNegotiation, slipPortPacketsSent=slipPortPacketsSent, alarmInputHighDensity0315Normal=alarmInputHighDensity0315Normal, alarmInputLowDensity0050Normal=alarmInputLowDensity0050Normal, xOspf=xOspf, expOspfToIsisRuleDefaultMetric=expOspfToIsisRuleDefaultMetric, lpdQueueProcessedJobs=lpdQueueProcessedJobs, cclPortTable=cclPortTable, xKerberos=xKerberos, expRipToIsisRuleMetricType=expRipToIsisRuleMetricType, alarmInputHighDensity0264Normal=alarmInputHighDensity0264Normal, basicTempTrapHighThreshold=basicTempTrapHighThreshold, telnetSerialPortQueryCharacter=telnetSerialPortQueryCharacter, sysName=sysName, phivPathSelection=phivPathSelection, netLoginServerTable=netLoginServerTable, ipxSapSvEntry=ipxSapSvEntry, ipxRipRtOrigin=ipxRipRtOrigin, alarmInputHighDensity0347Normal=alarmInputHighDensity0347Normal, ipxIfFilterDestNetwork=ipxIfFilterDestNetwork, segmentTable=segmentTable, basicPortPowerMasterSerialNumber=basicPortPowerMasterSerialNumber, phivCircuitFilterTable=phivCircuitFilterTable, xCharacter=xCharacter, alarmInputHighDensity0112Normal=alarmInputHighDensity0112Normal, paramClientTftpBroadcast=paramClientTftpBroadcast, phivCircuitImportStatus=phivCircuitImportStatus, alarmInputLowDensity0011Normal=alarmInputLowDensity0011Normal, bootRecordLoadInternetGateway=bootRecordLoadInternetGateway, ipxRipEntry=ipxRipEntry, activeState=activeState, alarmInputHighDensity0240Normal=alarmInputHighDensity0240Normal, alarmInputHighDensity0219Alarm=alarmInputHighDensity0219Alarm, tn3270Device3278Model=tn3270Device3278Model, alarmInputHighDensity0145Normal=alarmInputHighDensity0145Normal, powerSupplyHardwareType=powerSupplyHardwareType, basicPortSessEncryption=basicPortSessEncryption, bootRecordParamTftpDirect=bootRecordParamTftpDirect, alarmInputHighDensity0255Alarm=alarmInputHighDensity0255Alarm, alarmInputHighDensity0029Normal=alarmInputHighDensity0029Normal, alarmInputLowDensity0064Alarm=alarmInputLowDensity0064Alarm, alarmInputHighDensity0249Normal=alarmInputHighDensity0249Normal, alarmInputHighDensity0024Alarm=alarmInputHighDensity0024Alarm, expOspfToRipRuleFromAs=expOspfToRipRuleFromAs, alarmInputHighDensity0080Alarm=alarmInputHighDensity0080Alarm, expIsisToOspfRuleNetwork=expIsisToOspfRuleNetwork, phivCircuitCountBytesSent=phivCircuitCountBytesSent, applePortImportName=applePortImportName, arapPortZoneName=arapPortZoneName, ipAdEntExtProxyArp=ipAdEntExtProxyArp, telnetSerialPortEchoMode=telnetSerialPortEchoMode, phivCircuitImportAreaEntry=phivCircuitImportAreaEntry, expRipToEgpRuleTable=expRipToEgpRuleTable, xPppLcpStatusRxConNak=xPppLcpStatusRxConNak, pppLinkConfigEntry=pppLinkConfigEntry, basicPowerOutletReboot=basicPowerOutletReboot, impEgpRuleAction=impEgpRuleAction, nv8516TT=nv8516TT, alarmInputHighDensity0350Normal=alarmInputHighDensity0350Normal, kerbSecureLogins=kerbSecureLogins, alarmInputHighDensity0222Normal=alarmInputHighDensity0222Normal, expOspfToIsisRuleDefaultMetricAction=expOspfToIsisRuleDefaultMetricAction, alarmInputLowDensity0003Alarm=alarmInputLowDensity0003Alarm, alarmInputHighDensity0146Alarm=alarmInputHighDensity0146Alarm, alarmInputLowDensity0071Normal=alarmInputLowDensity0071Normal, alarmInputHighDensity0062Normal=alarmInputHighDensity0062Normal, alarmInputHighDensity0294Normal=alarmInputHighDensity0294Normal, expIsisToRipRuleNetwork=expIsisToRipRuleNetwork, alarmInputHighDensity0232Alarm=alarmInputHighDensity0232Alarm, phivCircuitCountUsrBuffUnav=phivCircuitCountUsrBuffUnav, alarmInputLowDensity0005Normal=alarmInputLowDensity0005Normal, enterprises=enterprises, ppp=ppp, psPortDefaultInboundAccess=psPortDefaultInboundAccess, tn3270PrefixKeyMap=tn3270PrefixKeyMap, ipxIfRipIn=ipxIfRipIn, alarmInputHighDensity0315Alarm=alarmInputHighDensity0315Alarm, etherMulticastEntry=etherMulticastEntry, ipIfFilter2ProtocolPriority=ipIfFilter2ProtocolPriority, alarmInputLowDensity0015Normal=alarmInputLowDensity0015Normal, alarmInputLowDensity0032Alarm=alarmInputLowDensity0032Alarm, aToEOffset=aToEOffset, xApple=xApple, alarmInputHighDensity0289Normal=alarmInputHighDensity0289Normal, snmpInTotalSetVars=snmpInTotalSetVars, securIDInsecureLogins=securIDInsecureLogins, alarmInputHighDensity0254Alarm=alarmInputHighDensity0254Alarm, ipxIfFilterSourceNetwork=ipxIfFilterSourceNetwork, xPppLcpStatusTable=xPppLcpStatusTable, xPppIpcpAsyncConfigBrdcast=xPppIpcpAsyncConfigBrdcast, temperatureThresholdExceeded=temperatureThresholdExceeded, ipxRipTransTime=ipxRipTransTime, alarmInputHighDensity0296Normal=alarmInputHighDensity0296Normal, alarmInputHighDensity0350Alarm=alarmInputHighDensity0350Alarm, dot1dStpPortDesignatedPort=dot1dStpPortDesignatedPort, alarmInputLowDensity0071Alarm=alarmInputLowDensity0071Alarm, alarmInputHighDensity0185Normal=alarmInputHighDensity0185Normal, alarmInputHighDensity0258Normal=alarmInputHighDensity0258Normal, basicPowerMasterOutletName=basicPowerMasterOutletName, egpNeighInErrMsgs=egpNeighInErrMsgs, latNodeServiceNumber=latNodeServiceNumber, ir7520=ir7520, slotBootControlController=slotBootControlController, firmwareUpdateCompletionStatus=firmwareUpdateCompletionStatus, alarmInputLowDensity0070Alarm=alarmInputLowDensity0070Alarm, alarmInputHighDensity0321Normal=alarmInputHighDensity0321Normal, segmentType=segmentType, alarmInputHighDensity0230Normal=alarmInputHighDensity0230Normal, ipGenAdExtEntry=ipGenAdExtEntry, alarmInputHighDensity0321Alarm=alarmInputHighDensity0321Alarm, queuePortEntry=queuePortEntry, alarmInputHighDensity0247Alarm=alarmInputHighDensity0247Alarm, phivStatus=phivStatus, alarmInputHighDensity0212Alarm=alarmInputHighDensity0212Alarm, ifSpecific=ifSpecific, alarmInputLowDensity0029Normal=alarmInputLowDensity0029Normal, alarmInputLowDensity0065Normal=alarmInputLowDensity0065Normal, firmwareUpdateStatus=firmwareUpdateStatus, broadcastGroupEntry=broadcastGroupEntry, resEntry=resEntry, basicPortAlarmMasterAudibleAlarm=basicPortAlarmMasterAudibleAlarm, alarmInputHighDensity0226Normal=alarmInputHighDensity0226Normal, alarmInputHighDensity0158Normal=alarmInputHighDensity0158Normal, ipxPrinterPortPrinter=ipxPrinterPortPrinter)
mibBuilder.exportSymbols("MRVINREACH", basicPortLogFacilityLevel=basicPortLogFacilityLevel, mgmt=mgmt, alarmInputHighDensity0328Alarm=alarmInputHighDensity0328Alarm, protocolVtp=protocolVtp, alarmInputHighDensity0371Normal=alarmInputHighDensity0371Normal, mib_2=mib_2, alarmInputLowDensity0002Alarm=alarmInputLowDensity0002Alarm, expEgpToRipRuleEntry=expEgpToRipRuleEntry, expRipToIsisRuleEntry=expRipToIsisRuleEntry, alarmInputHighDensity0093Alarm=alarmInputHighDensity0093Alarm, ospfIfMtrcCostActual=ospfIfMtrcCostActual, expStaticToRipRuleStatus=expStaticToRipRuleStatus, tcpResequencing=tcpResequencing, sessionLogHostSecondaryAddress=sessionLogHostSecondaryAddress, kerbSecureLoginsFailed=kerbSecureLoginsFailed, alarmInputHighDensity0002Normal=alarmInputHighDensity0002Normal, xPppIpxcpCipxInSlots=xPppIpxcpCipxInSlots, alarmInputHighDensity0206Normal=alarmInputHighDensity0206Normal, alarmInputHighDensity0382Alarm=alarmInputHighDensity0382Alarm, pppDiscardTest=pppDiscardTest, ipNetToMediaNetAddress=ipNetToMediaNetAddress, ipRouteType=ipRouteType, alarmInputLowDensity0043Alarm=alarmInputLowDensity0043Alarm, alarmInputHighDensity0155Alarm=alarmInputHighDensity0155Alarm, pppIpOperStatus=pppIpOperStatus, phivCircuitExportAreaEntry=phivCircuitExportAreaEntry, alarmInputHighDensity0063Normal=alarmInputHighDensity0063Normal, ipxIfSapFilterNetworkAll=ipxIfSapFilterNetworkAll, null=null, paramServerAddress=paramServerAddress, ipOutDiscards=ipOutDiscards, basicSerialPortLineEditorPreviousLine=basicSerialPortLineEditorPreviousLine, tcpConnRemAddress=tcpConnRemAddress, ifNumber=ifNumber, ipOutNoRoutes=ipOutNoRoutes, phivCircuitImportMask=phivCircuitImportMask, xRadiusChapChallengeSize=xRadiusChapChallengeSize, alarmInputHighDensity0050Normal=alarmInputHighDensity0050Normal, kerbMasterAccessFailed=kerbMasterAccessFailed, atTable=atTable, sysDumperAddress=sysDumperAddress, alarmInputHighDensity0141Normal=alarmInputHighDensity0141Normal, alarmInputHighDensity0279Normal=alarmInputHighDensity0279Normal, latVisibleServiceConnectedSessions=latVisibleServiceConnectedSessions, pppLinkConfigTransmitACCMap=pppLinkConfigTransmitACCMap, paramFileNumber=paramFileNumber, basicPortLossNotification=basicPortLossNotification, slipNetworkPacketsDiscarded=slipNetworkPacketsDiscarded, irM700=irM700, deviceGetFileArea=deviceGetFileArea, xPppIpcpRxTrmAck=xPppIpcpRxTrmAck, telnetSerialPortNewlineMode=telnetSerialPortNewlineMode, interfaces=interfaces, ipxRipRtTransTime=ipxRipRtTransTime, alarmInputHighDensity0378Normal=alarmInputHighDensity0378Normal, udpOutDatagrams=udpOutDatagrams, tsMxCard1M=tsMxCard1M, xPppHdlcTxNoBuffer=xPppHdlcTxNoBuffer, ipxSapSvTable=ipxSapSvTable, ifOutNUcastPkts=ifOutNUcastPkts, xPppIpcpConfigState=xPppIpcpConfigState, expEgpToEgpRuleNetwork=expEgpToEgpRuleNetwork, alarmInputHighDensity0206Alarm=alarmInputHighDensity0206Alarm, alarmInputHighDensity0060Alarm=alarmInputHighDensity0060Alarm, latNodeInSessionsAccepted=latNodeInSessionsAccepted, rs232AsyncPortEntry=rs232AsyncPortEntry, expOspfToIsisRuleErrorMetricAction=expOspfToIsisRuleErrorMetricAction, alarmInputLowDensity0009Alarm=alarmInputLowDensity0009Alarm, alarmInputHighDensity0134Normal=alarmInputHighDensity0134Normal, alarmInputHighDensity0089Alarm=alarmInputHighDensity0089Alarm, alarmInputLowDensity0045Alarm=alarmInputLowDensity0045Alarm, xSlotBootControl=xSlotBootControl, alarmInputHighDensity0324Normal=alarmInputHighDensity0324Normal, basicSessionsLimit=basicSessionsLimit, alarmInputHighDensity0234Normal=alarmInputHighDensity0234Normal, menuNestedScriptMaximum=menuNestedScriptMaximum, pppEchoTest=pppEchoTest, xPppIpcpConfigRemoteAddress=xPppIpcpConfigRemoteAddress, alarmInputHighDensity0129Alarm=alarmInputHighDensity0129Alarm, ipxSapTable=ipxSapTable, lpdQueueEntry=lpdQueueEntry, alarmInputHighDensity0379Alarm=alarmInputHighDensity0379Alarm, alarmInputLowDensity0039Alarm=alarmInputLowDensity0039Alarm, alarmInputHighDensity0023Alarm=alarmInputHighDensity0023Alarm, featStatus=featStatus, basicHumidityAlarmStatus=basicHumidityAlarmStatus, alarmInputLowDensity0072Normal=alarmInputLowDensity0072Normal, expEgpToIsisRuleErrorMetricAction=expEgpToIsisRuleErrorMetricAction, alarmInputHighDensity0323Normal=alarmInputHighDensity0323Normal, ifAdminStatus=ifAdminStatus, alarmInputHighDensity0072Alarm=alarmInputHighDensity0072Alarm, basicPowerOutletIndex=basicPowerOutletIndex, sysLoaderAddress=sysLoaderAddress, alarmInputHighDensity0277Normal=alarmInputHighDensity0277Normal, alarmInputHighDensity0269Alarm=alarmInputHighDensity0269Alarm, phivCircuitCommonSubState=phivCircuitCommonSubState, snmpInBadValues=snmpInBadValues, pingHostsEntry=pingHostsEntry, alarmInputHighDensity0058Alarm=alarmInputHighDensity0058Alarm, alarmInputHighDensity0295Normal=alarmInputHighDensity0295Normal, pppLinkStatusEntry=pppLinkStatusEntry, nameTable=nameTable, deviceFormatOption=deviceFormatOption, egpNbrStatus=egpNbrStatus, alarmInputHighDensity0357Normal=alarmInputHighDensity0357Normal, slotBootControlFlagParamLocal=slotBootControlFlagParamLocal, basicPortAlarmMasterReboot=basicPortAlarmMasterReboot, alarmInputHighDensity0049Normal=alarmInputHighDensity0049Normal, bootControlParamProprietary=bootControlParamProprietary, ipIfFilter2TcpSyn=ipIfFilter2TcpSyn, alarmInputHighDensity0174Normal=alarmInputHighDensity0174Normal, sysCauseAction=sysCauseAction, cclPortEntry=cclPortEntry, alarmInputHighDensity0005Normal=alarmInputHighDensity0005Normal, alarmInputHighDensity0123Normal=alarmInputHighDensity0123Normal, alarmInputHighDensity0036Alarm=alarmInputHighDensity0036Alarm, xExport=xExport, tn3270KeyCharacterSequence=tn3270KeyCharacterSequence, alarmInputLowDensity0050Alarm=alarmInputLowDensity0050Alarm, lpdQueuePorts=lpdQueuePorts, AddressType=AddressType, basicSerialPortPassword=basicSerialPortPassword, alarmInputHighDensity0346Normal=alarmInputHighDensity0346Normal, telnetSerialPortTransmitMode=telnetSerialPortTransmitMode, basicSerialPortPause=basicSerialPortPause, dumpFileEntryStatus=dumpFileEntryStatus, sessionLogTable=sessionLogTable, alarmInputLowDensity0009Normal=alarmInputLowDensity0009Normal, powerSupplyPlus5Volts=powerSupplyPlus5Volts, telnetSerialPortTable=telnetSerialPortTable, alarmInputHighDensity0200Alarm=alarmInputHighDensity0200Alarm, alarmInputLowDensity0054Normal=alarmInputLowDensity0054Normal, alarmInputLowDensity0059Normal=alarmInputLowDensity0059Normal, basicPortDefaultDestAction=basicPortDefaultDestAction, xPhivImportArea=xPhivImportArea, slipPortPacketsReceived=slipPortPacketsReceived, telnetSerialPortComControlClientTogglesDtr=telnetSerialPortComControlClientTogglesDtr, dot1dBaseNumPorts=dot1dBaseNumPorts, xRotary=xRotary, securIDServerName2=securIDServerName2, dot1dStpHoldTime=dot1dStpHoldTime, etherMulticastTable=etherMulticastTable, Validation=Validation, basicPortRloginTransparentMode=basicPortRloginTransparentMode, alarmInputHighDensity0363Normal=alarmInputHighDensity0363Normal, phivCircuitImportTable=phivCircuitImportTable, alarmInputHighDensity0045Normal=alarmInputHighDensity0045Normal, icmpOutTimeExcds=icmpOutTimeExcds, alarmInputHighDensity0335Normal=alarmInputHighDensity0335Normal, applePortEntry=applePortEntry, tn3270PortExtendedAttributes=tn3270PortExtendedAttributes, xPppIpcpStatusTable=xPppIpcpStatusTable, dot1dStpBridgeForwardDelay=dot1dStpBridgeForwardDelay, alarmInputHighDensity0157Alarm=alarmInputHighDensity0157Alarm, basicPortBroadcast=basicPortBroadcast, phivCircuitImportAreaMask=phivCircuitImportAreaMask, slotBootControlInternetDelimiter=slotBootControlInternetDelimiter, alarmInputHighDensity0182Alarm=alarmInputHighDensity0182Alarm, pppLinkConfigInitialMRU=pppLinkConfigInitialMRU, bootControlDumpProprietary=bootControlDumpProprietary, queueJob=queueJob, expRipToOspfRuleAction=expRipToOspfRuleAction, applePortExportTable=applePortExportTable, slotControllerType=slotControllerType, icmpPingHostResponding=icmpPingHostResponding, expStaticToIsisRuleExpenseMetricAction=expStaticToIsisRuleExpenseMetricAction, snmpEnableAuthenTraps=snmpEnableAuthenTraps, ipInReceives=ipInReceives, slipLocalAddress=slipLocalAddress, expEgpToIsisRuleDelayMetricAction=expEgpToIsisRuleDelayMetricAction, expStaticToIsisRuleNetwork=expStaticToIsisRuleNetwork, basicActiveNumber=basicActiveNumber, expEgpToRipRuleMetricAction=expEgpToRipRuleMetricAction, alarmInputLowDensity0056Normal=alarmInputLowDensity0056Normal, snmpInNoSuchNames=snmpInNoSuchNames, alarmInputHighDensity0091Normal=alarmInputHighDensity0091Normal, alarmInputHighDensity0376Normal=alarmInputHighDensity0376Normal, xEgp=xEgp, xPppIpcpTxTrmReq=xPppIpcpTxTrmReq, sessionLogOutCharacters=sessionLogOutCharacters, slotBootNetwork=slotBootNetwork, basicPortActiveUserName=basicPortActiveUserName, xPort=xPort, alarmInputHighDensity0201Normal=alarmInputHighDensity0201Normal, basicPortAlarmMasterUpdateFirmwareFileName=basicPortAlarmMasterUpdateFirmwareFileName, alarmInputHighDensity0238Normal=alarmInputHighDensity0238Normal, bootRecordLoadInternetServer=bootRecordLoadInternetServer, ipTrafficDstPort=ipTrafficDstPort, ipxIfSapFilterName=ipxIfSapFilterName, ipxIfFramesOut=ipxIfFramesOut, xPppIpcpConfigRangeEnd=xPppIpcpConfigRangeEnd, phivCircuitCommonType=phivCircuitCommonType, paramFileWrite=paramFileWrite, namedIdentification=namedIdentification, alarmInputHighDensity0286Alarm=alarmInputHighDensity0286Alarm, ipIfFilter2Table=ipIfFilter2Table, xPhivExportArea=xPhivExportArea, sysTimeZone=sysTimeZone, slotBase802Address=slotBase802Address, basicSerialPortLineEditorQuotingCharacter=basicSerialPortLineEditorQuotingCharacter, alarmInputHighDensity0192Alarm=alarmInputHighDensity0192Alarm, dot1dTpFdbStatus=dot1dTpFdbStatus, alarmInputHighDensity0276Normal=alarmInputHighDensity0276Normal, menuPortIndex=menuPortIndex, alarmInputLowDensity0059Alarm=alarmInputLowDensity0059Alarm, powerSupplyChassisWattsMax=powerSupplyChassisWattsMax, alarmInputHighDensity0158Alarm=alarmInputHighDensity0158Alarm, alarmInputHighDensity0012Alarm=alarmInputHighDensity0012Alarm, alarmInputHighDensity0196Alarm=alarmInputHighDensity0196Alarm, xPhivImport=xPhivImport, expRipToIsisRuleDefaultMetric=expRipToIsisRuleDefaultMetric, alarmInputLowDensity0042Alarm=alarmInputLowDensity0042Alarm, appleNbpType=appleNbpType, basicPortIdleTimeTransmit=basicPortIdleTimeTransmit, basicPortBreakSequence=basicPortBreakSequence, alarmInputHighDensity0100Normal=alarmInputHighDensity0100Normal, ipxRipAge=ipxRipAge, resTable=resTable, basicSerialPortLineEditorBackspace=basicSerialPortLineEditorBackspace, alarmInputLowDensity0029Alarm=alarmInputLowDensity0029Alarm, xRadiusAcctServerPort=xRadiusAcctServerPort, aToEValue=aToEValue, alarmInputHighDensity0025Normal=alarmInputHighDensity0025Normal, alarmInputHighDensity0017Normal=alarmInputHighDensity0017Normal, tn3270PortTypeAhead=tn3270PortTypeAhead, impIsisRuleAction=impIsisRuleAction, snmpInSetRequests=snmpInSetRequests, powerSupplyIndex=powerSupplyIndex, basicPortStatus=basicPortStatus, dot1dStpPortDesignatedBridge=dot1dStpPortDesignatedBridge, netLoginPortScriptUse=netLoginPortScriptUse, impEgpRuleStatus=impEgpRuleStatus, ifTable=ifTable, alarmInputHighDensity0136Normal=alarmInputHighDensity0136Normal, expRipToRipRuleAction=expRipToRipRuleAction, telnetSerialPortTransmitCharacterTimes=telnetSerialPortTransmitCharacterTimes, tcpConnRemPort=tcpConnRemPort, expRipToIsisRuleTable=expRipToIsisRuleTable, tcpInSegs=tcpInSegs, powerSupplyWatts=powerSupplyWatts, alarmInputHighDensity0171Normal=alarmInputHighDensity0171Normal, alarmInputHighDensity0226Alarm=alarmInputHighDensity0226Alarm, appleNbpEntry=appleNbpEntry, tcpRetransSegs=tcpRetransSegs, alarmInputHighDensity0106Normal=alarmInputHighDensity0106Normal, basicPowerMasterOutletAmperageStatus=basicPowerMasterOutletAmperageStatus, xIpxSap=xIpxSap, alarmInputHighDensity0243Alarm=alarmInputHighDensity0243Alarm, alarmInputLowDensity0018Normal=alarmInputLowDensity0018Normal, kerbServerAccess2=kerbServerAccess2, phivCircuitEntry=phivCircuitEntry, bootControlLoadLocal=bootControlLoadLocal, basicPortZeroTime=basicPortZeroTime, alarmInputHighDensity0046Normal=alarmInputHighDensity0046Normal)
mibBuilder.exportSymbols("MRVINREACH", alarmInputLowDensity0048Normal=alarmInputLowDensity0048Normal, xPppPapStatusState=xPppPapStatusState, expOspfToIsisRuleStatus=expOspfToIsisRuleStatus, alarmInputLowDensity0062Normal=alarmInputLowDensity0062Normal, bootRecordInternetDelimiter=bootRecordInternetDelimiter, expOspfToRipRuleTable=expOspfToRipRuleTable, alarmInputHighDensity0234Alarm=alarmInputHighDensity0234Alarm, telnetSerialPortCsiEscape=telnetSerialPortCsiEscape, ipxIfSapFilterServiceTypeAll=ipxIfSapFilterServiceTypeAll, phivCircuitCountAdjDown=phivCircuitCountAdjDown, alarmInputHighDensity0004Normal=alarmInputHighDensity0004Normal, ir7004=ir7004, powerSupplyMinus12Status=powerSupplyMinus12Status, alarmInputHighDensity0092Alarm=alarmInputHighDensity0092Alarm, alarmInputLowDensity0022Alarm=alarmInputLowDensity0022Alarm, basicPortPortIndex=basicPortPortIndex, basicSerialPortLineEditorForward=basicSerialPortLineEditorForward, ifDescr=ifDescr, alarmInputHighDensity0287Alarm=alarmInputHighDensity0287Alarm, tsMxBox1M=tsMxBox1M, paramServerStoredVersion=paramServerStoredVersion, sshPortTable=sshPortTable, xPppIpxcpConfigRemoteNode=xPppIpxcpConfigRemoteNode, basicPortSessIndex=basicPortSessIndex, dot1dBaseBridgeAddress=dot1dBaseBridgeAddress, basicPortAlarmControl=basicPortAlarmControl, xTcp=xTcp, icmpInErrors=icmpInErrors, basicSerialPortLineEditorEnd=basicSerialPortLineEditorEnd, basicAlarmMasterInputTrapEnable=basicAlarmMasterInputTrapEnable, sysSoftwareVersion=sysSoftwareVersion, alarmInputLowDensity0045Normal=alarmInputLowDensity0045Normal, deviceOperation=deviceOperation, basicControlOutputRelayEntry=basicControlOutputRelayEntry, snmpAgentTrapClientPingHost1PollRetries=snmpAgentTrapClientPingHost1PollRetries, powerSupplyThermalWarningHistory=powerSupplyThermalWarningHistory, latNodeOutSlots=latNodeOutSlots, xEventTable=xEventTable, ipxIfSapFilterServiceType=ipxIfSapFilterServiceType, udpTable=udpTable, charSessOperOrigin=charSessOperOrigin, basicAlarmMasterInputDebounceInterval=basicAlarmMasterInputDebounceInterval, xRadiusSecret1=xRadiusSecret1, sysCrash=sysCrash, ifOperStatus=ifOperStatus, basicPortLastInCharacter=basicPortLastInCharacter, paramServerEntryStatus=paramServerEntryStatus, xNetLogin=xNetLogin, alarmInputLowDensity0069Normal=alarmInputLowDensity0069Normal, lpdJobTable=lpdJobTable, alarmInputHighDensity0022Normal=alarmInputHighDensity0022Normal, phivCircuitCountPeakAdj=phivCircuitCountPeakAdj, basicControlSignalTable=basicControlSignalTable, basicPortSessionMode=basicPortSessionMode, basicContactClosureOrAlarmInputIndex=basicContactClosureOrAlarmInputIndex, xremoteServerAccess1=xremoteServerAccess1, alarmInputHighDensity0013Alarm=alarmInputHighDensity0013Alarm, alarmInputHighDensity0239Normal=alarmInputHighDensity0239Normal, alarmInputHighDensity0291Normal=alarmInputHighDensity0291Normal, sysChassisState=sysChassisState, repeater=repeater, basicActivePortsHigh=basicActivePortsHigh, dot1dStpRootCost=dot1dStpRootCost, tcpPortIndex=tcpPortIndex, ipxIfTransitDelayActual=ipxIfTransitDelayActual, alarmInputHighDensity0231Normal=alarmInputHighDensity0231Normal, alarmInputHighDensity0246Normal=alarmInputHighDensity0246Normal, ipConfigureBootp=ipConfigureBootp, xPppAuthStatusEntry=xPppAuthStatusEntry, alarmInputLowDensity0041Normal=alarmInputLowDensity0041Normal, icmpInTimeExcds=icmpInTimeExcds, basicPortCommandLoggingSuppressControlCharacters=basicPortCommandLoggingSuppressControlCharacters, basicSerialPortIpConfigureBootp=basicSerialPortIpConfigureBootp, alarmInputLowDensity0012Alarm=alarmInputLowDensity0012Alarm, slotBootControlIndex=slotBootControlIndex, xSsh=xSsh, alarmInputHighDensity0074Normal=alarmInputHighDensity0074Normal, tcpDiscardSegs=tcpDiscardSegs, alarmInputHighDensity0146Normal=alarmInputHighDensity0146Normal, ipGenAdEntExtType=ipGenAdEntExtType, activeBytesRemaining=activeBytesRemaining, bootRecordParamBootpTftp=bootRecordParamBootpTftp, dot1dStaticAddress=dot1dStaticAddress, alarmInputLowDensity0027Normal=alarmInputLowDensity0027Normal, alarmInputHighDensity0241Normal=alarmInputHighDensity0241Normal, expOspfToEgpRuleMetricAction=expOspfToEgpRuleMetricAction, alarmInputHighDensity0368Alarm=alarmInputHighDensity0368Alarm, bridgeRouterN2=bridgeRouterN2, alarmInputHighDensity0349Normal=alarmInputHighDensity0349Normal, basicTemperatureHumiditySensor=basicTemperatureHumiditySensor, aToELanguageTable=aToELanguageTable, arapPortMaxConnectTime=arapPortMaxConnectTime, domainResolverPppPrimaryServer=domainResolverPppPrimaryServer, alarmInputHighDensity0373Normal=alarmInputHighDensity0373Normal, etherFCSErrors=etherFCSErrors, xPppIpcpTxConRej=xPppIpcpTxConRej, dumpFileEntry=dumpFileEntry, alarmInputHighDensity0135Alarm=alarmInputHighDensity0135Alarm, dot1dBasePortIfIndex=dot1dBasePortIfIndex, alarmInputHighDensity0201Alarm=alarmInputHighDensity0201Alarm, alarmInputHighDensity0213Alarm=alarmInputHighDensity0213Alarm, ipTrafficProtocol=ipTrafficProtocol, basicContactClosureOrAlarmInputModel=basicContactClosureOrAlarmInputModel, basicActiveUsersHigh=basicActiveUsersHigh, latNodeConnectedSessions=latNodeConnectedSessions, xRadiusServerRetries=xRadiusServerRetries, ipInHdrErrors=ipInHdrErrors, powerSupplyFanStatus=powerSupplyFanStatus, paramClientUpdateTime=paramClientUpdateTime, alarmInputHighDensity0012Normal=alarmInputHighDensity0012Normal, xPppIpxcpRxConRej=xPppIpxcpRxConRej, xPppAuth=xPppAuth, sysResourceLacks=sysResourceLacks, alarmInputLowDensity0060Alarm=alarmInputLowDensity0060Alarm, expStaticToIsisRuleDelayMetric=expStaticToIsisRuleDelayMetric, DialogStatus=DialogStatus, alarmInputHighDensity0128Normal=alarmInputHighDensity0128Normal, appleTrafficEntry=appleTrafficEntry, arapPortTable=arapPortTable, basicAlarmMasterDisplay=basicAlarmMasterDisplay, alarmInputHighDensity0290Normal=alarmInputHighDensity0290Normal, alarmInputLowDensity0064Normal=alarmInputLowDensity0064Normal, alarmInputHighDensity0073Alarm=alarmInputHighDensity0073Alarm, alarmInputLowDensity0019Normal=alarmInputLowDensity0019Normal, nameTtl=nameTtl, alarmInputHighDensity0053Normal=alarmInputHighDensity0053Normal, snmpOutTooBigs=snmpOutTooBigs, dot1dBasePortDelayExceededDiscards=dot1dBasePortDelayExceededDiscards, xPowerSupply=xPowerSupply, xAppleTraffic=xAppleTraffic, alarmInputHighDensity0139Normal=alarmInputHighDensity0139Normal, alarmInputHighDensity0228Alarm=alarmInputHighDensity0228Alarm, basicPortControlledPortLogout=basicPortControlledPortLogout, basicPortLastOutCharacter=basicPortLastOutCharacter, xSnmpAgent=xSnmpAgent, snmpOutTraps=snmpOutTraps, alarmInputHighDensity0047Normal=alarmInputHighDensity0047Normal, resWorst=resWorst, egpNeighStateDowns=egpNeighStateDowns, ospf=ospf, basicPortIdleTimeouts=basicPortIdleTimeouts, rs232=rs232, tn3270PortErrorLock=tn3270PortErrorLock, expIsisToEgpRuleTable=expIsisToEgpRuleTable, slotBootControlFlagParamMop=slotBootControlFlagParamMop, xPppIpxcpStatusRemoteNode=xPppIpxcpStatusRemoteNode, alarmInputHighDensity0336Alarm=alarmInputHighDensity0336Alarm, xController=xController, icmpInTimestampReps=icmpInTimestampReps, securIDServerAccessFailed4=securIDServerAccessFailed4, ipRouterIfPacketsIn=ipRouterIfPacketsIn, alarmInputLowDensity0007Normal=alarmInputLowDensity0007Normal, xPppIpcpConfigEntry=xPppIpcpConfigEntry, ipxIfRipFilterAction=ipxIfRipFilterAction, basicPowerOutletName=basicPowerOutletName, alarmInputHighDensity0225Normal=alarmInputHighDensity0225Normal, alarmInputHighDensity0198Normal=alarmInputHighDensity0198Normal, expRipToIsisRuleNetwork=expRipToIsisRuleNetwork, ipRouterIfEntry=ipRouterIfEntry, alarmInputLowDensity0001Alarm=alarmInputLowDensity0001Alarm, characterDep=characterDep, ripNetNet=ripNetNet, expIsisToRipRuleMetric=expIsisToRipRuleMetric, expOspfToIsisRuleErrorMetric=expOspfToIsisRuleErrorMetric, rs232PortTable=rs232PortTable, alarmInputHighDensity0001Normal=alarmInputHighDensity0001Normal, alarmInputHighDensity0047Alarm=alarmInputHighDensity0047Alarm, phivCircuitImportIf=phivCircuitImportIf, expOspfToEgpRuleToAs=expOspfToEgpRuleToAs, powerAlarmFuseBankB=powerAlarmFuseBankB, alarmInputHighDensity0056Alarm=alarmInputHighDensity0056Alarm, counters=counters, controllerTable=controllerTable, xIpxIf=xIpxIf, alarmInputHighDensity0021Normal=alarmInputHighDensity0021Normal, basicPortPowerMasterAlarmSeverity=basicPortPowerMasterAlarmSeverity, tcpPortEntry=tcpPortEntry, alarmInputHighDensity0233Normal=alarmInputHighDensity0233Normal, ipxRipHops=ipxRipHops, phivCircuitCountTable=phivCircuitCountTable, telnetSerialPortComControlClient=telnetSerialPortComControlClient, ospfXAreaTable=ospfXAreaTable, applePortLastError=applePortLastError, ipIfFilter2Entry=ipIfFilter2Entry, ipxIfRipFilterNetwork=ipxIfRipFilterNetwork, rpMx=rpMx, securIDServerAccess2=securIDServerAccess2, slotBootControlInternetGateway=slotBootControlInternetGateway, queueLimit=queueLimit, phivCircuitImportAction=phivCircuitImportAction, ipRouterIfForwardsOut=ipRouterIfForwardsOut, icmpPingHostPollingInterval=icmpPingHostPollingInterval, alarmInputHighDensity0121Normal=alarmInputHighDensity0121Normal, alarmInputLowDensity0018Alarm=alarmInputLowDensity0018Alarm, dumpService=dumpService, alarmInputHighDensity0281Alarm=alarmInputHighDensity0281Alarm)
