#
# PySNMP MIB module ZYXEL-AclV2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-AclV2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:49:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType, Gauge32, ObjectIdentity, MibIdentifier, ModuleIdentity, TimeTicks, Integer32, Counter64, Unsigned32, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType", "Gauge32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Integer32", "Counter64", "Unsigned32", "Counter32", "Bits")
TextualConvention, RowStatus, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "MacAddress", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelAclV2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105))
if mibBuilder.loadTexts: zyxelAclV2.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelAclV2.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelAclV2.setContactInfo('')
if mibBuilder.loadTexts: zyxelAclV2.setDescription('The subtree for access control list (ACL) version 2')
zyxelAclV2ClassifierStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1))
zyxelAclV2PolicyStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2))
zyxelAclV2TrapInfoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 3))
zyxelAclV2Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 4))
zyxelAclV2ClassifierTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 1), )
if mibBuilder.loadTexts: zyxelAclV2ClassifierTable.setStatus('current')
if mibBuilder.loadTexts: zyxelAclV2ClassifierTable.setDescription('The table contains classifier general configuration and information.')
zyxelAclV2ClassifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 1, 1), ).setIndexNames((0, "ZYXEL-AclV2-MIB", "zyAclV2ClassifierName"))
if mibBuilder.loadTexts: zyxelAclV2ClassifierEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelAclV2ClassifierEntry.setDescription('An entry contains classifier general configuration and information.')
zyAclV2ClassifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: zyAclV2ClassifierName.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierName.setDescription('The name of classifier rule is used for identifying purposes.')
zyAclV2ClassifierState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 1, 1, 2), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierState.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierState.setDescription('Enable/Disable classifier rule on this switch.')
zyAclV2ClassifierWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierWeight.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierWeight.setDescription('Weght value for classifier rule, 0~65535. Default 32767. When the match order is manual, the higher weight the higher priorit When the match order is auto, the priority depends on the depth of qualifier.')
zyAclV2ClassifierCountState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 1, 1, 4), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierCountState.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierCountState.setDescription('Enable/disable count on this classifier rule. To Enable counting the matched packet number of this rule.')
zyAclV2ClassifierLogState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 1, 1, 5), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierLogState.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierLogState.setDescription('Enable/disable log on this classifier rule. To Enable recording the matched packet number of this rule in a configurable time interval.')
zyAclV2ClassifierTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierTimeRange.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierTimeRange.setDescription('Time Range Name for classifier rule. Bind a time range profile with this rule to active this rule in specific time.')
zyAclV2ClassifierMatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierMatchCount.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierMatchCount.setDescription('Match-Count of this classifier rule. It will show the matched packet count of this rule if zyAclV2ClassifierCount is enabled.')
zyxelAclV2ClassifierEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 2), )
if mibBuilder.loadTexts: zyxelAclV2ClassifierEthernetTable.setStatus('current')
if mibBuilder.loadTexts: zyxelAclV2ClassifierEthernetTable.setDescription('The table contains classifier ethernet configuration.')
zyxelAclV2ClassifierEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 2, 1), ).setIndexNames((0, "ZYXEL-AclV2-MIB", "zyAclV2ClassifierName"))
if mibBuilder.loadTexts: zyxelAclV2ClassifierEthernetEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelAclV2ClassifierEthernetEntry.setDescription('An entry contains classifier ethernet configuration.')
zyAclV2ClassifierEthernetSourcePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 2, 1, 1), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierEthernetSourcePorts.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierEthernetSourcePorts.setDescription('Source Port List for classifier rule.')
zyAclV2ClassifierEthernetSourceTrunks = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 2, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierEthernetSourceTrunks.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierEthernetSourceTrunks.setDescription('Source Trunk List for classifier rule.')
zyAclV2ClassifierEthernetPacketFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("all", 1), ("ethernetIIUntagged", 2), ("ethernetIITagged", 3), ("ethernet802dot3Untagged", 4), ("ethernet802dot3Tagged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierEthernetPacketFormat.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierEthernetPacketFormat.setDescription('Packet format for classifier rule. A value of 802.3 indicates that the packets are formatted according to the IEEE 802.3 standards. A value of Ethernet II indicates that the packets are formatted according to RFC 894, Ethernet II encapsulation.')
zyAclV2ClassifierEthernet8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierEthernet8021pPriority.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierEthernet8021pPriority.setDescription('802.1p priority for classifier rule. 0~7. The range is 0~7 and value -1 means any priority level.')
zyAclV2ClassifierEthernetInner8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierEthernetInner8021pPriority.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierEthernetInner8021pPriority.setDescription('Inner 802.1p priority for classifier rule, 0~7. Value -1 means any priority level.')
zyAclV2ClassifierEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierEthernetType.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierEthernetType.setDescription('Ethernet type for classifier rule. It is represented in decimal expression and value 65535 means any Ethernet type.')
zyAclV2ClassifierEthernetSourceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 2, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierEthernetSourceMacAddress.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierEthernetSourceMacAddress.setDescription('Source MAC address for classifier rule. 00:00:00:00:00:00 means any source MAC address.')
zyAclV2ClassifierEthernetSourceMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 2, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierEthernetSourceMACMask.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierEthernetSourceMACMask.setDescription('Source MAC Mask for classifier rule.')
zyAclV2ClassifierEthernetDestinationMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 2, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierEthernetDestinationMacAddress.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierEthernetDestinationMacAddress.setDescription('Destination MAC address for classifier rule. 00:00:00:00:00:00 means any destination MAC address.')
zyAclV2ClassifierEthernetDestinationMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 2, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierEthernetDestinationMACMask.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierEthernetDestinationMACMask.setDescription('Destination MAC Mask for classifier rule.')
zyxelAclV2ClassifierVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 3), )
if mibBuilder.loadTexts: zyxelAclV2ClassifierVlanTable.setStatus('current')
if mibBuilder.loadTexts: zyxelAclV2ClassifierVlanTable.setDescription('An entry contains classifier VLAN configuration.')
zyxelAclV2ClassifierVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 3, 1), ).setIndexNames((0, "ZYXEL-AclV2-MIB", "zyAclV2ClassifierName"))
if mibBuilder.loadTexts: zyxelAclV2ClassifierVlanEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelAclV2ClassifierVlanEntry.setDescription('An entry contains classifier VLAN configuration.')
zyAclV2ClassifierVlanMap1k = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierVlanMap1k.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierVlanMap1k.setDescription('VLAN ID List for classifer rule. range : 1~4094.')
zyAclV2ClassifierVlanMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierVlanMap2k.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierVlanMap2k.setDescription('VLAN ID List for classifer rule. range : 1~4094.')
zyAclV2ClassifierVlanMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierVlanMap3k.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierVlanMap3k.setDescription('VLAN ID List for classifer rule. range : 1~4094.')
zyAclV2ClassifierVlanMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierVlanMap4k.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierVlanMap4k.setDescription('VLAN ID List for classifer rule. range : 1~4094.')
zyxelAclV2ClassifierInnerVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 4), )
if mibBuilder.loadTexts: zyxelAclV2ClassifierInnerVlanTable.setStatus('current')
if mibBuilder.loadTexts: zyxelAclV2ClassifierInnerVlanTable.setDescription('An entry contains classifier inner VLAN configuration.')
zyxelAclV2ClassifierInnerVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 4, 1), ).setIndexNames((0, "ZYXEL-AclV2-MIB", "zyAclV2ClassifierName"))
if mibBuilder.loadTexts: zyxelAclV2ClassifierInnerVlanEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelAclV2ClassifierInnerVlanEntry.setDescription('An entry contains classifier inner VLAN configuration.')
zyAclV2ClassifierInnerVlanMap1k = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierInnerVlanMap1k.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierInnerVlanMap1k.setDescription('inner VLAN ID List for classifer rule. range : 1~4094.')
zyAclV2ClassifierInnerVlanMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierInnerVlanMap2k.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierInnerVlanMap2k.setDescription('inner VLAN ID List for classifer rule. range : 1~4094.')
zyAclV2ClassifierInnerVlanMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierInnerVlanMap3k.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierInnerVlanMap3k.setDescription('inner VLAN ID List for classifer rule. range : 1~4094.')
zyAclV2ClassifierInnerVlanMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierInnerVlanMap4k.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierInnerVlanMap4k.setDescription('inner VLAN ID List for classifer rule. range : 1~4094.')
zyxelAclV2ClassifierIpTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 5), )
if mibBuilder.loadTexts: zyxelAclV2ClassifierIpTable.setStatus('current')
if mibBuilder.loadTexts: zyxelAclV2ClassifierIpTable.setDescription('The table contains classifier IP configuration.')
zyxelAclV2ClassifierIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 5, 1), ).setIndexNames((0, "ZYXEL-AclV2-MIB", "zyAclV2ClassifierName"))
if mibBuilder.loadTexts: zyxelAclV2ClassifierIpEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelAclV2ClassifierIpEntry.setDescription('An entry contains classifier IP configuration.')
zyAclV2ClassifierIpPacketLenRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIpPacketLenRangeStart.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIpPacketLenRangeStart.setDescription('The Start value of IP packet length range, 0~65535. And it must smaller then the zyAclV2ClassifierIpPacketLenRangeEnd. Value -1 means any start value. ')
zyAclV2ClassifierIpPacketLenRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIpPacketLenRangeEnd.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIpPacketLenRangeEnd.setDescription('The End value of IP packet length range, 0~65535. And it must larger then the zyAclV2ClassifierIpPacketLenRangeStart. Value -1 means any start value. ')
zyAclV2ClassifierIpDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIpDSCP.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIpDSCP.setDescription('DSCP (DiffServ Code Point) for classifier rule. The range is 0~63 and value -1 means any DSCP.')
zyAclV2ClassifierIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIpPrecedence.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIpPrecedence.setDescription('Precedence for calssifier rule, 0~7. Value -1 means any Precedence.')
zyAclV2ClassifierIpToS = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIpToS.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIpToS.setDescription('ToS for calssifier rule, 0~127. Value -1 means any ToS.')
zyAclV2ClassifierIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIpProtocol.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIpProtocol.setDescription('IP Protocol for classifier rule. Value 255 means any IP protocol.')
zyAclV2ClassifierIpEstablishOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 5, 1, 7), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIpEstablishOnly.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIpEstablishOnly.setDescription('Establish Only for TCP protocol type in classifier rule. This means that the switch will pick out the packets that are sent to establish TCP connections.')
zyAclV2ClassifierIpSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 5, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIpSourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIpSourceIpAddress.setDescription('Source IP address for classifier rule. 0.0.0.0 means any source IP address.')
zyAclV2ClassifierIpSourceIpMaskBits = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIpSourceIpMaskBits.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIpSourceIpMaskBits.setDescription('Source IP mask bits for classifier rule.')
zyAclV2ClassifierIpDestinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 5, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIpDestinationIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIpDestinationIpAddress.setDescription('Destination IP address for classifier rule. 0.0.0.0 means any destination IP address.')
zyAclV2ClassifierIpDestinationIpMaskBits = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIpDestinationIpMaskBits.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIpDestinationIpMaskBits.setDescription('Destination IP mask bits for classifier rule.')
zyAclV2ClassifierIpSourceSocketRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIpSourceSocketRangeStart.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIpSourceSocketRangeStart.setDescription('Source Socket Number range start for classifier rule, 0~65535. If not qualifying a range of socket numbers, the zyAclV2ClassifierSourceSocketRangeEnd is no need to configure. ')
zyAclV2ClassifierIpSourceSocketRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIpSourceSocketRangeEnd.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIpSourceSocketRangeEnd.setDescription('Destination Socket Number range end for classifier rule. This object is not necessary. ')
zyAclV2ClassifierIpDestinationSocketRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIpDestinationSocketRangeStart.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIpDestinationSocketRangeStart.setDescription('Source Socket Number range start for classifier rule, 0~65535. If not qualifying a range of socket numbers, the zyAclV2ClassifierDestinationSocketRangeEnd is no need to configure.')
zyAclV2ClassifierIpDestinationSocketRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIpDestinationSocketRangeEnd.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIpDestinationSocketRangeEnd.setDescription('Destination Socket Number range end for classifier rule. This object is not necessary.')
zyxelAclV2ClassifierIpv6Table = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 6), )
if mibBuilder.loadTexts: zyxelAclV2ClassifierIpv6Table.setStatus('current')
if mibBuilder.loadTexts: zyxelAclV2ClassifierIpv6Table.setDescription('The table contains classifier IPv6 configuration.')
zyxelAclV2ClassifierIpv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 6, 1), ).setIndexNames((0, "ZYXEL-AclV2-MIB", "zyAclV2ClassifierName"))
if mibBuilder.loadTexts: zyxelAclV2ClassifierIpv6Entry.setStatus('current')
if mibBuilder.loadTexts: zyxelAclV2ClassifierIpv6Entry.setDescription('An entry contains classifier IPv6 configuration.')
zyAclV2ClassifierIPv6DSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIPv6DSCP.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIPv6DSCP.setDescription('DSCP (DiffServ Code Point) for classifier rule. The range is 0~63 and value -1 means any DSCP.')
zyAclV2ClassifierIPv6NextHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIPv6NextHeader.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIPv6NextHeader.setDescription('IPv6 next header protocol type for classifier rule. Value 255 means any protocol type.')
zyAclV2ClassifierIPv6EstablishOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 6, 1, 3), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIPv6EstablishOnly.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIPv6EstablishOnly.setDescription('Establish Only for TCP protocol type in classifier rule. This means that the switch will pick out the packets that are sent to establish TCP connections.')
zyAclV2ClassifierIPv6SourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 6, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIPv6SourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIPv6SourceIpAddress.setDescription('IPv6 source address for classifier rule. :: means any IPv6 source ip address.')
zyAclV2ClassifierIPv6SourceIpPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIPv6SourceIpPrefixLength.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIPv6SourceIpPrefixLength.setDescription('IPv6 source address prefix length for classifier rule.')
zyAclV2ClassifierIPv6DestinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 6, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIPv6DestinationIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIPv6DestinationIpAddress.setDescription('IPv6 destination address for classifier rule. :: means any IPv6 destination ip address.')
zyAclV2ClassifierIPv6DestinationIpPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2ClassifierIPv6DestinationIpPrefixLength.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierIPv6DestinationIpPrefixLength.setDescription('IPv6 destination address prefix length for classifier rule.')
zyxelAclV2ClassifierMatchOrder = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyxelAclV2ClassifierMatchOrder.setStatus('current')
if mibBuilder.loadTexts: zyxelAclV2ClassifierMatchOrder.setDescription('Manual or Auto to determine the rule ordering. When the match order is manual, the higher weight the higher priority. When the match order is auto, the priority is depended on the depth of the qualifier.')
zyxelAclV2ClassifierLoggingState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 8), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyxelAclV2ClassifierLoggingState.setStatus('current')
if mibBuilder.loadTexts: zyxelAclV2ClassifierLoggingState.setDescription('Enable/disable Logging for classifier.')
zyxelAclV2ClassifierLoggingInterval = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyxelAclV2ClassifierLoggingInterval.setStatus('current')
if mibBuilder.loadTexts: zyxelAclV2ClassifierLoggingInterval.setDescription('Logging Interval for classifier, 0~65535.')
zyxelAclV2PolicyTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1), )
if mibBuilder.loadTexts: zyxelAclV2PolicyTable.setStatus('current')
if mibBuilder.loadTexts: zyxelAclV2PolicyTable.setDescription('The table contains policy configuration.')
zyxelAclV2PolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1), ).setIndexNames((0, "ZYXEL-AclV2-MIB", "zyAclV2PolicyName"))
if mibBuilder.loadTexts: zyxelAclV2PolicyEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelAclV2PolicyEntry.setDescription('An entry contains policy configuration.')
zyAclV2PolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: zyAclV2PolicyName.setStatus('current')
if mibBuilder.loadTexts: zyAclV2PolicyName.setDescription('The name of policy rule is used for identifying purposes.')
zyAclV2PolicyState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2PolicyState.setStatus('current')
if mibBuilder.loadTexts: zyAclV2PolicyState.setDescription('Enable/Disable policy rule on this switch.')
zyAclV2PolicyClassifier = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2PolicyClassifier.setStatus('current')
if mibBuilder.loadTexts: zyAclV2PolicyClassifier.setDescription('The classifier(s) applies in this policy rule.')
zyAclV2PolicyVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2PolicyVid.setStatus('current')
if mibBuilder.loadTexts: zyAclV2PolicyVid.setDescription('VLAN ID for policy rule.')
zyAclV2PolicyEgressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2PolicyEgressPort.setStatus('current')
if mibBuilder.loadTexts: zyAclV2PolicyEgressPort.setDescription('The outgoing port number in this policy rule.')
zyAclV2Policy8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2Policy8021pPriority.setStatus('current')
if mibBuilder.loadTexts: zyAclV2Policy8021pPriority.setDescription('Specify a 802.1p priority level for policy rule. The value of 802.1p is between 0 and 7.')
zyAclV2PolicyDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2PolicyDSCP.setStatus('current')
if mibBuilder.loadTexts: zyAclV2PolicyDSCP.setDescription('Specify a DSCP (DiffServ Code Point) for policy rule. DSCP number is between 0 and 63.')
zyAclV2PolicyTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2PolicyTOS.setStatus('current')
if mibBuilder.loadTexts: zyAclV2PolicyTOS.setDescription('Specify the type of service (TOS) priority level for policy rule. The value of TOS is between 0 and 7.')
zyAclV2PolicyBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2PolicyBandwidth.setStatus('current')
if mibBuilder.loadTexts: zyAclV2PolicyBandwidth.setDescription('Specify the bandwidth for policy rule in kilobit per second (Kbps).')
zyAclV2PolicyOutOfProfileDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2PolicyOutOfProfileDSCP.setStatus('current')
if mibBuilder.loadTexts: zyAclV2PolicyOutOfProfileDSCP.setDescription('Specify a new DSCP number (between 0 and 63) for policy rule if you want to replace or remark the DSCP number for out-of-profile traffic.')
zyAclV2PolicyForwardingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noChange", 1), ("discardThePacket", 2), ("doNotDropTheMatchingFramePreviouslyMarkedForDropping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2PolicyForwardingAction.setStatus('current')
if mibBuilder.loadTexts: zyAclV2PolicyForwardingAction.setDescription("There are three forwarding actions for policy rule. 'No change' is forward the packets. 'Discard the packet' is drop the packets. 'Do not drop the matching frame previously marked for dropping' is retain the frames that were marked to be dropped before.")
zyAclV2PolicyPriorityAction = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noChange", 1), ("setThePackets802dot1Priority", 2), ("sendThePacketToPriorityQueue", 3), ("replaceThe802dot1PriorityFieldWithTheIpTosValue", 4), ("replaceThe802dot1PriorityByInner802dot1Priority", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2PolicyPriorityAction.setStatus('current')
if mibBuilder.loadTexts: zyAclV2PolicyPriorityAction.setDescription("There are four priority actions for policy rule. 'No change' is keep the priority setting of the frames. 'Set the packet's 802.1 priority' is replace the packet's 802.1 priority field with the value you set in the Priority field. 'Send the packet to priority queue' is put the packets in the designated queue. 'Replace the 802.1 priority field with the IP TOS value' to replace the packet's 802.1 priority field with the value you set in the TOS field. 'Replace the 802.1p priority by inner 802.1p priority' to replace 802.1p priority by inner 802.1p priority if there is an inner vlan tag.")
zyAclV2PolicyDiffServAction = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noChange", 1), ("setThePacketsTosField", 2), ("replaceTheIpTosFieldWithThe802dot1PriorityValue", 3), ("setTheDiffservCodepointFieldInTheFrame", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2PolicyDiffServAction.setStatus('current')
if mibBuilder.loadTexts: zyAclV2PolicyDiffServAction.setDescription("There are four DiffServ actions for policy rule. 'No change' is keeping the TOS and/or DSCP fields in the packets. 'Set the packet's TOS field' is set the TOS field with the value you configure in the TOS field. 'Replace the IP TOS with the 802.1 priority value' is replace the TOS field with the value you configure in the Priority field. 'Set the Diffserv Codepoint field in the frame' to set the DSCP field with the value you configure in the DSCP field.")
zyAclV2PolicyOutgoingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1, 14), Bits().clone(namedValues=NamedValues(("sendThePacketToTheMirrorPort", 0), ("sendThePacketToTheEgressPort", 1), ("sendTheMatchingFramesToTheEgressPort", 2), ("setThePacketVlanId", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2PolicyOutgoingAction.setStatus('current')
if mibBuilder.loadTexts: zyAclV2PolicyOutgoingAction.setDescription("There are four outgoing actions for policy rule. 'Send the packet to the mirror port' is sent the packet to the mirror port. 'Send the packet to the egress port' is sent the packet to the egress port. 'Send the matching frames to the egress port' is sent the matching policy rule frames to the egress port. 'Set the packets VLAN ID' is set packet with tag.")
zyAclV2PolicyMeteringState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2PolicyMeteringState.setStatus('current')
if mibBuilder.loadTexts: zyAclV2PolicyMeteringState.setDescription('Enable/Disable bandwidth limitation on the traffic flow(s) then set the actions to be taken on out-of-profile packets.')
zyAclV2PolicyOutOfProfileAction = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1, 16), Bits().clone(namedValues=NamedValues(("dropThePacket", 0), ("changeTheDscpValue", 1), ("setOutDropPrecedence", 2), ("doNotDropTheMatchingFramePreviouslyMarkedForDropping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2PolicyOutOfProfileAction.setStatus('current')
if mibBuilder.loadTexts: zyAclV2PolicyOutOfProfileAction.setDescription("There are four out of profile actions for policy rule. 'Drop the packet' is discard the out-of-profile traffic. 'Change the DSCP value' is replace the DSCP field with the value specified in the Out of profile DSCP field. 'Set Out-Drop Precedence' is mark out-of-profile traffic and drop it when network is congested. 'Do not drop the matching frame previously marked for dropping' to queue the frames that are marked to be dropped.")
zyAclV2PolicyRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1, 17), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2PolicyRowstatus.setStatus('current')
if mibBuilder.loadTexts: zyAclV2PolicyRowstatus.setDescription('This object shows the entry of policy rule status.')
zyAclV2PolicyQueueAction = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noChange", 1), ("sendThePacketToPriorityQueue", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAclV2PolicyQueueAction.setStatus('current')
if mibBuilder.loadTexts: zyAclV2PolicyQueueAction.setDescription("There are two queue actions for policy rule. 'No change' is keep the priority setting of the frames. 'Send the packet to priority queue' is put the packets in the designated queue. ")
zyAclV2TrapClassifierLogMatchCount = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 3, 1), Integer32())
if mibBuilder.loadTexts: zyAclV2TrapClassifierLogMatchCount.setStatus('current')
if mibBuilder.loadTexts: zyAclV2TrapClassifierLogMatchCount.setDescription('display log match count of specific classifier rule.')
zyAclV2ClassifierLogNotification = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 105, 4, 1)).setObjects(("ZYXEL-AclV2-MIB", "zyAclV2ClassifierName"), ("ZYXEL-AclV2-MIB", "zyAclV2TrapClassifierLogMatchCount"))
if mibBuilder.loadTexts: zyAclV2ClassifierLogNotification.setStatus('current')
if mibBuilder.loadTexts: zyAclV2ClassifierLogNotification.setDescription('classifier log information.')
mibBuilder.exportSymbols("ZYXEL-AclV2-MIB", zyAclV2PolicyDSCP=zyAclV2PolicyDSCP, zyxelAclV2ClassifierMatchOrder=zyxelAclV2ClassifierMatchOrder, zyAclV2ClassifierIPv6SourceIpAddress=zyAclV2ClassifierIPv6SourceIpAddress, zyAclV2PolicyName=zyAclV2PolicyName, zyxelAclV2ClassifierStatus=zyxelAclV2ClassifierStatus, zyAclV2ClassifierEthernetSourceTrunks=zyAclV2ClassifierEthernetSourceTrunks, zyAclV2ClassifierIPv6EstablishOnly=zyAclV2ClassifierIPv6EstablishOnly, zyAclV2ClassifierInnerVlanMap3k=zyAclV2ClassifierInnerVlanMap3k, zyAclV2ClassifierEthernetType=zyAclV2ClassifierEthernetType, zyxelAclV2ClassifierIpv6Entry=zyxelAclV2ClassifierIpv6Entry, zyxelAclV2ClassifierLoggingInterval=zyxelAclV2ClassifierLoggingInterval, PYSNMP_MODULE_ID=zyxelAclV2, zyAclV2ClassifierEthernetSourcePorts=zyAclV2ClassifierEthernetSourcePorts, zyxelAclV2ClassifierInnerVlanTable=zyxelAclV2ClassifierInnerVlanTable, zyAclV2PolicyTOS=zyAclV2PolicyTOS, zyAclV2ClassifierIpDestinationIpMaskBits=zyAclV2ClassifierIpDestinationIpMaskBits, zyxelAclV2ClassifierTable=zyxelAclV2ClassifierTable, zyAclV2ClassifierEthernetDestinationMACMask=zyAclV2ClassifierEthernetDestinationMACMask, zyAclV2ClassifierIPv6SourceIpPrefixLength=zyAclV2ClassifierIPv6SourceIpPrefixLength, zyAclV2ClassifierVlanMap3k=zyAclV2ClassifierVlanMap3k, zyAclV2ClassifierIPv6DSCP=zyAclV2ClassifierIPv6DSCP, zyAclV2ClassifierLogNotification=zyAclV2ClassifierLogNotification, zyAclV2ClassifierEthernetPacketFormat=zyAclV2ClassifierEthernetPacketFormat, zyAclV2PolicyOutOfProfileAction=zyAclV2PolicyOutOfProfileAction, zyAclV2ClassifierIpEstablishOnly=zyAclV2ClassifierIpEstablishOnly, zyAclV2ClassifierEthernet8021pPriority=zyAclV2ClassifierEthernet8021pPriority, zyxelAclV2ClassifierInnerVlanEntry=zyxelAclV2ClassifierInnerVlanEntry, zyAclV2ClassifierEthernetSourceMACMask=zyAclV2ClassifierEthernetSourceMACMask, zyAclV2ClassifierIpSourceSocketRangeEnd=zyAclV2ClassifierIpSourceSocketRangeEnd, zyAclV2Policy8021pPriority=zyAclV2Policy8021pPriority, zyAclV2ClassifierInnerVlanMap4k=zyAclV2ClassifierInnerVlanMap4k, zyAclV2ClassifierIpDSCP=zyAclV2ClassifierIpDSCP, zyxelAclV2ClassifierIpTable=zyxelAclV2ClassifierIpTable, zyxelAclV2=zyxelAclV2, zyAclV2ClassifierState=zyAclV2ClassifierState, zyxelAclV2TrapInfoObjects=zyxelAclV2TrapInfoObjects, zyAclV2PolicyQueueAction=zyAclV2PolicyQueueAction, zyAclV2PolicyOutOfProfileDSCP=zyAclV2PolicyOutOfProfileDSCP, zyAclV2ClassifierIpSourceSocketRangeStart=zyAclV2ClassifierIpSourceSocketRangeStart, zyxelAclV2ClassifierEthernetTable=zyxelAclV2ClassifierEthernetTable, zyAclV2ClassifierIpSourceIpAddress=zyAclV2ClassifierIpSourceIpAddress, zyxelAclV2ClassifierEthernetEntry=zyxelAclV2ClassifierEthernetEntry, zyxelAclV2ClassifierEntry=zyxelAclV2ClassifierEntry, zyAclV2ClassifierVlanMap1k=zyAclV2ClassifierVlanMap1k, zyAclV2ClassifierIpProtocol=zyAclV2ClassifierIpProtocol, zyAclV2ClassifierIpDestinationIpAddress=zyAclV2ClassifierIpDestinationIpAddress, zyAclV2ClassifierIpPacketLenRangeEnd=zyAclV2ClassifierIpPacketLenRangeEnd, zyAclV2PolicyForwardingAction=zyAclV2PolicyForwardingAction, zyAclV2ClassifierIPv6DestinationIpAddress=zyAclV2ClassifierIPv6DestinationIpAddress, zyxelAclV2Notifications=zyxelAclV2Notifications, zyAclV2ClassifierVlanMap2k=zyAclV2ClassifierVlanMap2k, zyAclV2PolicyClassifier=zyAclV2PolicyClassifier, zyAclV2ClassifierIpToS=zyAclV2ClassifierIpToS, zyAclV2TrapClassifierLogMatchCount=zyAclV2TrapClassifierLogMatchCount, zyAclV2ClassifierIpPacketLenRangeStart=zyAclV2ClassifierIpPacketLenRangeStart, zyAclV2ClassifierIpSourceIpMaskBits=zyAclV2ClassifierIpSourceIpMaskBits, zyAclV2ClassifierInnerVlanMap1k=zyAclV2ClassifierInnerVlanMap1k, zyxelAclV2ClassifierVlanEntry=zyxelAclV2ClassifierVlanEntry, zyAclV2ClassifierIPv6NextHeader=zyAclV2ClassifierIPv6NextHeader, zyxelAclV2PolicyTable=zyxelAclV2PolicyTable, zyAclV2ClassifierName=zyAclV2ClassifierName, zyAclV2ClassifierEthernetInner8021pPriority=zyAclV2ClassifierEthernetInner8021pPriority, zyAclV2ClassifierVlanMap4k=zyAclV2ClassifierVlanMap4k, zyAclV2ClassifierIpDestinationSocketRangeEnd=zyAclV2ClassifierIpDestinationSocketRangeEnd, zyAclV2PolicyMeteringState=zyAclV2PolicyMeteringState, zyxelAclV2PolicyStatus=zyxelAclV2PolicyStatus, zyAclV2ClassifierIpPrecedence=zyAclV2ClassifierIpPrecedence, zyxelAclV2PolicyEntry=zyxelAclV2PolicyEntry, zyAclV2ClassifierEthernetSourceMacAddress=zyAclV2ClassifierEthernetSourceMacAddress, zyAclV2ClassifierCountState=zyAclV2ClassifierCountState, zyAclV2ClassifierIpDestinationSocketRangeStart=zyAclV2ClassifierIpDestinationSocketRangeStart, zyAclV2PolicyState=zyAclV2PolicyState, zyAclV2ClassifierMatchCount=zyAclV2ClassifierMatchCount, zyxelAclV2ClassifierIpv6Table=zyxelAclV2ClassifierIpv6Table, zyxelAclV2ClassifierLoggingState=zyxelAclV2ClassifierLoggingState, zyAclV2PolicyPriorityAction=zyAclV2PolicyPriorityAction, zyAclV2PolicyOutgoingAction=zyAclV2PolicyOutgoingAction, zyAclV2PolicyBandwidth=zyAclV2PolicyBandwidth, zyAclV2PolicyEgressPort=zyAclV2PolicyEgressPort, zyAclV2PolicyDiffServAction=zyAclV2PolicyDiffServAction, zyAclV2PolicyRowstatus=zyAclV2PolicyRowstatus, zyxelAclV2ClassifierIpEntry=zyxelAclV2ClassifierIpEntry, zyAclV2PolicyVid=zyAclV2PolicyVid, zyAclV2ClassifierLogState=zyAclV2ClassifierLogState, zyAclV2ClassifierWeight=zyAclV2ClassifierWeight, zyAclV2ClassifierIPv6DestinationIpPrefixLength=zyAclV2ClassifierIPv6DestinationIpPrefixLength, zyAclV2ClassifierInnerVlanMap2k=zyAclV2ClassifierInnerVlanMap2k, zyAclV2ClassifierEthernetDestinationMacAddress=zyAclV2ClassifierEthernetDestinationMacAddress, zyxelAclV2ClassifierVlanTable=zyxelAclV2ClassifierVlanTable, zyAclV2ClassifierTimeRange=zyAclV2ClassifierTimeRange)
