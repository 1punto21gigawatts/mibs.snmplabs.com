#
# PySNMP MIB module CISCO-DMN-DSG-MOIPINPUT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DMN-DSG-MOIPINPUT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:55:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ciscoDSGUtilities, = mibBuilder.importSymbols("CISCO-DMN-DSG-ROOT-MIB", "ciscoDSGUtilities")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, NotificationType, Bits, MibIdentifier, ObjectIdentity, iso, Counter32, Integer32, TimeTicks, Unsigned32, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "Bits", "MibIdentifier", "ObjectIdentity", "iso", "Counter32", "Integer32", "TimeTicks", "Unsigned32", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
ciscoDSGMOIPInput = ModuleIdentity((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41))
ciscoDSGMOIPInput.setRevisions(('2012-11-12 18:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDSGMOIPInput.setRevisionsDescriptions(('V01.00.00 2012-11-12 Initial Revision.',))
if mibBuilder.loadTexts: ciscoDSGMOIPInput.setLastUpdated('201211121800Z')
if mibBuilder.loadTexts: ciscoDSGMOIPInput.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoDSGMOIPInput.setContactInfo('Cisco Systems, Inc. Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 NETS E-mail: cs-ipsla@cisco.com')
if mibBuilder.loadTexts: ciscoDSGMOIPInput.setDescription('Cisco generic MOIP Input MIB.')
moipInputInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1))
moipInputTable = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2))
moipInputFlowIsMulticast = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moipInputFlowIsMulticast.setStatus('current')
if mibBuilder.loadTexts: moipInputFlowIsMulticast.setDescription('Delivery Type: Multicast or Unicast.')
moipInputFlowMulticastDstIPV4 = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moipInputFlowMulticastDstIPV4.setStatus('current')
if mibBuilder.loadTexts: moipInputFlowMulticastDstIPV4.setDescription('Muticast V4 IP Address.')
moipInputFlowFecMode = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("oneD", 2), ("twoD", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moipInputFlowFecMode.setStatus('current')
if mibBuilder.loadTexts: moipInputFlowFecMode.setDescription('FEC Mode.')
moipInputFlowSrcFilter = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("whiteList", 2), ("blackList", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moipInputFlowSrcFilter.setStatus('current')
if mibBuilder.loadTexts: moipInputFlowSrcFilter.setDescription('Source Filtering Mode.')
moipInputFlowTsUDPPort = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moipInputFlowTsUDPPort.setStatus('current')
if mibBuilder.loadTexts: moipInputFlowTsUDPPort.setDescription('UDP Port for Transport Stream. ')
moipInputFlowFec1UDPPort = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moipInputFlowFec1UDPPort.setStatus('current')
if mibBuilder.loadTexts: moipInputFlowFec1UDPPort.setDescription('UDP Port for FEC Columns Stream in step of 2.')
moipInputFlowFec2UDPPort = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moipInputFlowFec2UDPPort.setStatus('current')
if mibBuilder.loadTexts: moipInputFlowFec2UDPPort.setDescription('UDP Port for FEC Rows Stream in step of 2.')
moipInputFlowSrcStrmSel = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("swMap", 1), ("userCfg", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moipInputFlowSrcStrmSel.setStatus('current')
if mibBuilder.loadTexts: moipInputFlowSrcStrmSel.setDescription('Selects how to lock to source IP. In SwMap, first source present on both data ports is selected. In UserCfg, user selected source ip is locked per port.')
moipInputDejitterAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbr", 1), ("vbr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moipInputDejitterAlgorithm.setStatus('current')
if mibBuilder.loadTexts: moipInputDejitterAlgorithm.setDescription('Dejitter Algorithm.')
moipInputDejitterBufLatency = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moipInputDejitterBufLatency.setStatus('current')
if mibBuilder.loadTexts: moipInputDejitterBufLatency.setDescription('Dejitter Buffer Latency.')
moipInputRednMode = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bkpPriData1", 1), ("bkpPriData2", 2), ("manualData1", 3), ("manualData2", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moipInputRednMode.setStatus('current')
if mibBuilder.loadTexts: moipInputRednMode.setDescription('Input Redundancy Mode.')
moipInputRednDir = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("Revertive", 1), ("nonRevertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moipInputRednDir.setStatus('current')
if mibBuilder.loadTexts: moipInputRednDir.setDescription('IPI Redundancy Switch Over Type.')
moipInputRednDelayDir = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moipInputRednDelayDir.setStatus('current')
if mibBuilder.loadTexts: moipInputRednDelayDir.setDescription('Direct Redundancy Switch Over Delay in msec.')
moipInputRednDelRev = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moipInputRednDelRev.setStatus('current')
if mibBuilder.loadTexts: moipInputRednDelRev.setDescription('Revertive Redundancy Switch Over Delay in sec.')
moipInputRednPortInUse = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moipInputRednPortInUse.setStatus('current')
if mibBuilder.loadTexts: moipInputRednPortInUse.setDescription('Redundancy: Port In use.')
moipInputRednSwReason = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moipInputRednSwReason.setStatus('current')
if mibBuilder.loadTexts: moipInputRednSwReason.setDescription('Reason for port Switch Over: None, Setup, EthLinkLoss, UdpLoss, PrgmLoss.')
moipInputRednSwDateTime = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moipInputRednSwDateTime.setStatus('current')
if mibBuilder.loadTexts: moipInputRednSwDateTime.setDescription('Redundancy: Switch Over date and time.')
moipInputData1SelIPV4 = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moipInputData1SelIPV4.setStatus('current')
if mibBuilder.loadTexts: moipInputData1SelIPV4.setDescription('Select this host for DATA1 port. This object replaces moipInputSrcSelectData1Sel for backup and restore purpose and should not be used by any UIs.')
moipInputData2SelIPV4 = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moipInputData2SelIPV4.setStatus('current')
if mibBuilder.loadTexts: moipInputData2SelIPV4.setDescription('Select this host for DATA2 port. This object replaces moipInputSrcSelectData2Sel for backup and restore purpose and should not be used by any UIs.')
moipInputSrcSelectTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 1), )
if mibBuilder.loadTexts: moipInputSrcSelectTable.setStatus('current')
if mibBuilder.loadTexts: moipInputSrcSelectTable.setDescription('MOIP input source IP select table.')
moipInputSrcSelectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 1, 1), ).setIndexNames((0, "CISCO-DMN-DSG-MOIPINPUT-MIB", "moipInputSrcSelectIdx"))
if mibBuilder.loadTexts: moipInputSrcSelectEntry.setStatus('current')
if mibBuilder.loadTexts: moipInputSrcSelectEntry.setDescription('Entry for source IP select table.')
moipInputSrcSelectIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moipInputSrcSelectIdx.setStatus('current')
if mibBuilder.loadTexts: moipInputSrcSelectIdx.setDescription('Host Index.')
moipInputSrcSelectV4IPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moipInputSrcSelectV4IPAddr.setStatus('current')
if mibBuilder.loadTexts: moipInputSrcSelectV4IPAddr.setDescription('Host IP Address.')
moipInputSrcSelectData1Sel = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moipInputSrcSelectData1Sel.setStatus('current')
if mibBuilder.loadTexts: moipInputSrcSelectData1Sel.setDescription('The host selected for DATA1 port. Use moipInputData1SelIPV4 to select.')
moipInputSrcSelectData2Sel = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moipInputSrcSelectData2Sel.setStatus('current')
if mibBuilder.loadTexts: moipInputSrcSelectData2Sel.setDescription('The host selected for DATA2 port. Use moipInputData2SelIPV4 to select.')
moipInputSrcSelectData1Avail = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moipInputSrcSelectData1Avail.setStatus('current')
if mibBuilder.loadTexts: moipInputSrcSelectData1Avail.setDescription('Stream from this host is present on DATA1 port.')
moipInputSrcSelectData2Avail = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moipInputSrcSelectData2Avail.setStatus('current')
if mibBuilder.loadTexts: moipInputSrcSelectData2Avail.setDescription('Stream from this host is present on DATA2 port.')
moipInputSrcSelectData1Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moipInputSrcSelectData1Enabled.setStatus('current')
if mibBuilder.loadTexts: moipInputSrcSelectData1Enabled.setDescription('This host can be selected for DATA1.')
moipInputSrcSelectData2Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moipInputSrcSelectData2Enabled.setStatus('current')
if mibBuilder.loadTexts: moipInputSrcSelectData2Enabled.setDescription('This host can be selected for DATA2.')
moipInputSrcSelectRowEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moipInputSrcSelectRowEnabled.setStatus('current')
if mibBuilder.loadTexts: moipInputSrcSelectRowEnabled.setDescription('Rows disabled should be hidden from user.')
moipInputSrcFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 2), )
if mibBuilder.loadTexts: moipInputSrcFilterTable.setStatus('current')
if mibBuilder.loadTexts: moipInputSrcFilterTable.setDescription('MOIP input source IP filter table.')
moipInputSrcFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 2, 1), ).setIndexNames((0, "CISCO-DMN-DSG-MOIPINPUT-MIB", "moipInputSrcFilterIdx"))
if mibBuilder.loadTexts: moipInputSrcFilterEntry.setStatus('current')
if mibBuilder.loadTexts: moipInputSrcFilterEntry.setDescription('Entry for source IP filter table.')
moipInputSrcFilterIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moipInputSrcFilterIdx.setStatus('current')
if mibBuilder.loadTexts: moipInputSrcFilterIdx.setDescription('Source IP Filter Index.')
moipInputSrcFilterV4IPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moipInputSrcFilterV4IPAddr.setStatus('current')
if mibBuilder.loadTexts: moipInputSrcFilterV4IPAddr.setDescription('Source IP to be filtered.')
moipInputSrcFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moipInputSrcFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: moipInputSrcFilterRowStatus.setDescription('Source Filter IP row status.')
moipInputFlowTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 3), )
if mibBuilder.loadTexts: moipInputFlowTable.setStatus('current')
if mibBuilder.loadTexts: moipInputFlowTable.setDescription('DPM Configuration Table.')
moipInputFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 3, 1), ).setIndexNames((0, "CISCO-DMN-DSG-MOIPINPUT-MIB", "moipInputFlowID"))
if mibBuilder.loadTexts: moipInputFlowEntry.setStatus('current')
if mibBuilder.loadTexts: moipInputFlowEntry.setDescription('Entry for DPM global configuration table.')
moipInputFlowID = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moipInputFlowID.setStatus('current')
if mibBuilder.loadTexts: moipInputFlowID.setDescription('Flow ID.')
moipInputFlowTsAct = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moipInputFlowTsAct.setStatus('current')
if mibBuilder.loadTexts: moipInputFlowTsAct.setDescription('Flow Transport Stream Active.')
moipInputFlowFecColStrmAct = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moipInputFlowFecColStrmAct.setStatus('current')
if mibBuilder.loadTexts: moipInputFlowFecColStrmAct.setDescription('Flow FEC Column Stream Active.')
moipInputFlowFecRowStrmAct = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 41, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moipInputFlowFecRowStrmAct.setStatus('current')
if mibBuilder.loadTexts: moipInputFlowFecRowStrmAct.setDescription('Flow FEC Row Stream Active.')
mibBuilder.exportSymbols("CISCO-DMN-DSG-MOIPINPUT-MIB", moipInputSrcFilterV4IPAddr=moipInputSrcFilterV4IPAddr, moipInputFlowIsMulticast=moipInputFlowIsMulticast, moipInputSrcSelectEntry=moipInputSrcSelectEntry, moipInputRednSwDateTime=moipInputRednSwDateTime, moipInputRednDelRev=moipInputRednDelRev, moipInputData2SelIPV4=moipInputData2SelIPV4, moipInputSrcFilterRowStatus=moipInputSrcFilterRowStatus, moipInputSrcSelectRowEnabled=moipInputSrcSelectRowEnabled, moipInputSrcSelectData1Avail=moipInputSrcSelectData1Avail, moipInputSrcSelectData2Enabled=moipInputSrcSelectData2Enabled, moipInputTable=moipInputTable, moipInputFlowFecMode=moipInputFlowFecMode, moipInputSrcSelectData2Avail=moipInputSrcSelectData2Avail, PYSNMP_MODULE_ID=ciscoDSGMOIPInput, moipInputData1SelIPV4=moipInputData1SelIPV4, moipInputFlowTsUDPPort=moipInputFlowTsUDPPort, moipInputDejitterBufLatency=moipInputDejitterBufLatency, ciscoDSGMOIPInput=ciscoDSGMOIPInput, moipInputFlowFecRowStrmAct=moipInputFlowFecRowStrmAct, moipInputFlowEntry=moipInputFlowEntry, moipInputFlowMulticastDstIPV4=moipInputFlowMulticastDstIPV4, moipInputRednPortInUse=moipInputRednPortInUse, moipInputFlowID=moipInputFlowID, moipInputSrcSelectV4IPAddr=moipInputSrcSelectV4IPAddr, moipInputSrcSelectData1Sel=moipInputSrcSelectData1Sel, moipInputFlowSrcStrmSel=moipInputFlowSrcStrmSel, moipInputFlowFec2UDPPort=moipInputFlowFec2UDPPort, moipInputSrcFilterEntry=moipInputSrcFilterEntry, moipInputSrcSelectData2Sel=moipInputSrcSelectData2Sel, moipInputFlowFecColStrmAct=moipInputFlowFecColStrmAct, moipInputRednMode=moipInputRednMode, moipInputSrcSelectIdx=moipInputSrcSelectIdx, moipInputFlowFec1UDPPort=moipInputFlowFec1UDPPort, moipInputRednSwReason=moipInputRednSwReason, moipInputSrcSelectTable=moipInputSrcSelectTable, moipInputFlowTsAct=moipInputFlowTsAct, moipInputDejitterAlgorithm=moipInputDejitterAlgorithm, moipInputInfo=moipInputInfo, moipInputRednDir=moipInputRednDir, moipInputSrcSelectData1Enabled=moipInputSrcSelectData1Enabled, moipInputFlowSrcFilter=moipInputFlowSrcFilter, moipInputSrcFilterIdx=moipInputSrcFilterIdx, moipInputSrcFilterTable=moipInputSrcFilterTable, moipInputRednDelayDir=moipInputRednDelayDir, moipInputFlowTable=moipInputFlowTable)
