#
# PySNMP MIB module VISM-LAPD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VISM-LAPD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:34:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
voice, = mibBuilder.importSymbols("BASIS-MIB", "voice")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, TimeTicks, Gauge32, MibIdentifier, Integer32, NotificationType, Unsigned32, Bits, Counter32, IpAddress, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "Gauge32", "MibIdentifier", "Integer32", "NotificationType", "Unsigned32", "Bits", "Counter32", "IpAddress", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
vismLapdGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12))
vismLapdTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1), )
if mibBuilder.loadTexts: vismLapdTable.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdTable.setDescription('This table is used for maintaining the configuration of the LAPD channel on VISM. ')
vismLapdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1), ).setIndexNames((0, "VISM-LAPD-MIB", "vismLapdIndex"))
if mibBuilder.loadTexts: vismLapdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdEntry.setDescription('An entry for vismLapdTable.')
vismLapdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdIndex.setDescription('This is the logical index for this table. This is derived from the following formula: index = 31 * (Ds1# - 1) + ds0# where : Ds1# - The T1/E1 line number in the range 1 - 8. ds0# - The ds0 channel number ranging from 1 to 24 for T1 and 1 to 31 for E1. Currently the range of 1 to 248 is used. ')
vismLapdAppType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pri", 1), ("gr-303", 2))).clone('pri')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismLapdAppType.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdAppType.setDescription('This object indicates the type of the LAPD interface. When the user creates a LAPD entry this object need to be specified. After creation it cannot be modified. ')
vismLapdWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismLapdWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdWinSize.setDescription('The window size - maximum number of sequencially numbered I-frames that may be outstanding. VISM support window size range 1 to 127. ')
vismLapdN200 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismLapdN200.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdN200.setDescription('The maximum number of retransmissions of a frame. ')
vismLapdT200 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1023000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismLapdT200.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdT200.setDescription('The maximum number of time in milliseconds to wait for acknowledgement for a transmit frame. Transmission may be initiated. This value should be less than vismLapdT203Timer. For PRI, the range is 1000 ms to 1023000 ms. The default is 1000 ms. For GR-303, the range is 100 ms to 350 ms in increments of 50 ms. The default value is 150 ms. ')
vismLapdT203 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 1023000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismLapdT203.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdT203.setDescription('The maximum time (in milliseconds) allowed without frames being exchanged. This value should be greater than vismLapdT200. For PRI, the range is 1000 to 1023000 and the default is 10000 ms. For GR-303, the range is 10000 to 300000 ms in increments of 10000 ms. The default is 30000 ms. ')
vismLapdType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("ccitt", 1), ("att5EssPRA", 3), ("att4Ess", 4), ("ntDMS100PRA", 6), ("vn2or3", 7), ("insNet", 8), ("tr6MPC", 9), ("tr6PBX", 10), ("ausp", 12), ("ni1", 13), ("etsi", 14), ("bc303TMC", 15), ("bc303CSC", 16), ("ntDMS250", 17), ("bellcore", 18), ("ni2", 19))).clone('ni2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismLapdType.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdType.setDescription('This object specifies what type of interface the LAPD stack will be used with. ccitt(1) : CCITT att5EssPRA(3) : AT&T 5ESS PRA att4Ess(4) : AT&T 4ESS ntDMS100PRA(6) : NT dms100 PRA vn2or3(7) : VN 2 or VN 3 insNet(8) : INS Net tr6MPC(9) : tr6 MPC tr6PBX(10) : tr6 PBX ausp(12) : Austel Primary ni1(13) : National ISDN-1 etsi(14) : ETSI bc303TMC(15) : Bellcorp tr303 tmc bc303CSC(16) : Bellcorp tr303 csc ntDMS250(17) : NT dms250 bellcore(18) : Bellcore ni2(19) : National ISDN-2 ')
vismLapdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismLapdRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdRowStatus.setDescription('Row status allows users to create or delete a LAPD entry. CreateAndGo: Use this to add an entry in this table. Before create a LAPD entry session manager should already be set up. i.e. session set, group and session(s) have been created. Before creating a LAPD entry the entry in Hdlc table will implicitly created first. If the DS0 has already been used then the request of creating a LAPD channel on the same DS0 on the same line will be rejected. After creating the LAPD entry the corresponding entry in vismLapdStatsTable will be implicitly created. active: When an entry is created it becomes active. destory: Use this to delete an entry in this table. After implicitly deleting all the entries(if there is any) in vismLapdDlcEntry table for the specific D channel the entry in vismLapdEntry will be deleted, then the entry in vismLapdStatsTable will be implicitly deleted, followed by the deletion of the Hdlc entry. ')
vismLapdSide = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("user", 2))).clone('network')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismLapdSide.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdSide.setDescription('This object specifies whether LAPD stack is on the user side or network side. This object can be set when the row is created. It can not be modified for an existing row. ')
vismLapdTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backhaul", 1), ("lapdTrunking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTrunkType.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdTrunkType.setDescription('This object indicates if the line is configured for Trunking or PRI Backhaul. This object is set to the appropriate type when the vismRudpSessionType parameter in the vismRudpSessionCnfEntry table is set. The motivation to have similar such objects at two places is for convenience. ')
vismLapdStatsTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2), )
if mibBuilder.loadTexts: vismLapdStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdStatsTable.setDescription('This table contains statistics information for all LAPD (D channel Data Link) interfaces on VISM. ')
vismLapdStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1), ).setIndexNames((0, "VISM-LAPD-MIB", "vismLapdStatsIndex"))
if mibBuilder.loadTexts: vismLapdStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdStatsEntry.setDescription('An entry in the LAPD Table.')
vismLapdStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdStatsIndex.setDescription('This is the logical index for this table. It is the same as vismLapdIndex. An entry of this table will be implicitly created when a LAPD entry is added. ')
vismLapdRxInfoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxInfoFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdRxInfoFrames.setDescription('Information frames received. ')
vismLapdTxInfoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxInfoFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdTxInfoFrames.setDescription('Information frames transmitted. ')
vismLapdRxReadyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxReadyFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdRxReadyFrames.setDescription('Receiver Ready frames received. ')
vismLapdTxReadyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxReadyFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdTxReadyFrames.setDescription('Receiver Ready frames transmitted. ')
vismLapdRxNotReadyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxNotReadyFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdRxNotReadyFrames.setDescription('Receiver Not Ready frames received. ')
vismLapdTxNotReadyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxNotReadyFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdTxNotReadyFrames.setDescription('Receiver Not Ready frames transmitted. ')
vismLapdRxSABMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxSABMFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdRxSABMFrames.setDescription('Set Asynchronous Balanced Mode frames received. ')
vismLapdTxSABMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxSABMFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdTxSABMFrames.setDescription('Set Asynchronous Balanced Mode frames transmitted. ')
vismLapdRxDisconFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxDisconFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdRxDisconFrames.setDescription('Disconnect frames received. ')
vismLapdTxDisconFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxDisconFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdTxDisconFrames.setDescription('Disconnect frames transmitted. ')
vismLapdRxUAFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxUAFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdRxUAFrames.setDescription('Unnumbered Acknowledge frames received. ')
vismLapdTxUAFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxUAFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdTxUAFrames.setDescription('Unnumbered Acknowledge frames transmitted. ')
vismLapdRxDiscModeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxDiscModeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdRxDiscModeFrames.setDescription('Disconnect Mode frames received. ')
vismLapdTxDiscModeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxDiscModeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdTxDiscModeFrames.setDescription('Disconnect Mode frames transmitted. ')
vismLapdRxFrmRejectFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxFrmRejectFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdRxFrmRejectFrames.setDescription('Frame Reject frames received. ')
vismLapdTxFrmRejectFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxFrmRejectFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdTxFrmRejectFrames.setDescription('Frame Reject frames transmitted. ')
vismLapdRxExchIdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxExchIdFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdRxExchIdFrames.setDescription('Exchange Id frames received. ')
vismLapdTxExchIdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxExchIdFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdTxExchIdFrames.setDescription('Exchange Id frames transmitted. ')
vismLapdRxUnumInfoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxUnumInfoFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdRxUnumInfoFrames.setDescription('Unnumbered Information frames received. ')
vismLapdTxUnumInfoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxUnumInfoFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdTxUnumInfoFrames.setDescription('Unnumbered Information frames transmitted. ')
vismLapdRxRejectFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxRejectFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdRxRejectFrames.setDescription('Received Reject Frames. ')
vismLapdTxRejectFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxRejectFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdTxRejectFrames.setDescription('Reject frames transmitted. ')
vismLapdRxInvalidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxInvalidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdRxInvalidFrames.setDescription('Invalid frames received. ')
vismLapdDlcTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 3), )
if mibBuilder.loadTexts: vismLapdDlcTable.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdDlcTable.setDescription('This table is used for maintaining the link state of different DLCs on a LAPD channel. An entry of this table will be implicitly created some time after a LAPD entry is added. ')
vismLapdDlcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 3, 1), ).setIndexNames((0, "VISM-LAPD-MIB", "vismLapdDlcIndex"), (0, "VISM-LAPD-MIB", "vismLapdDlcSapi"), (0, "VISM-LAPD-MIB", "vismLapdDlcTei"))
if mibBuilder.loadTexts: vismLapdDlcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdDlcEntry.setDescription('An entry for vismLapdDlcTable.')
vismLapdDlcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdDlcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdDlcIndex.setDescription('This object identifies the corresponding LAPD index. It is the same as vismLapdIndex. ')
vismLapdDlcSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdDlcSapi.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdDlcSapi.setDescription('This is the SAPI of a specific DLC. ')
vismLapdDlcTei = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdDlcTei.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdDlcTei.setDescription('This is the TEI of a specific DLC. ')
vismLapdDlcLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdDlcLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: vismLapdDlcLinkState.setDescription('This object indicate the linking state on a given DLC. ')
mibBuilder.exportSymbols("VISM-LAPD-MIB", vismLapdGrp=vismLapdGrp, vismLapdStatsTable=vismLapdStatsTable, vismLapdRxReadyFrames=vismLapdRxReadyFrames, vismLapdStatsIndex=vismLapdStatsIndex, vismLapdDlcLinkState=vismLapdDlcLinkState, vismLapdTable=vismLapdTable, vismLapdTxInfoFrames=vismLapdTxInfoFrames, vismLapdTxDisconFrames=vismLapdTxDisconFrames, vismLapdSide=vismLapdSide, vismLapdTxDiscModeFrames=vismLapdTxDiscModeFrames, vismLapdRxDisconFrames=vismLapdRxDisconFrames, vismLapdTxSABMFrames=vismLapdTxSABMFrames, vismLapdTxUAFrames=vismLapdTxUAFrames, vismLapdDlcSapi=vismLapdDlcSapi, vismLapdT203=vismLapdT203, vismLapdRxExchIdFrames=vismLapdRxExchIdFrames, vismLapdTxExchIdFrames=vismLapdTxExchIdFrames, vismLapdRowStatus=vismLapdRowStatus, vismLapdRxUAFrames=vismLapdRxUAFrames, vismLapdDlcEntry=vismLapdDlcEntry, vismLapdTxFrmRejectFrames=vismLapdTxFrmRejectFrames, vismLapdWinSize=vismLapdWinSize, vismLapdAppType=vismLapdAppType, vismLapdRxInvalidFrames=vismLapdRxInvalidFrames, vismLapdRxFrmRejectFrames=vismLapdRxFrmRejectFrames, vismLapdTxReadyFrames=vismLapdTxReadyFrames, vismLapdIndex=vismLapdIndex, vismLapdRxUnumInfoFrames=vismLapdRxUnumInfoFrames, vismLapdDlcIndex=vismLapdDlcIndex, vismLapdRxDiscModeFrames=vismLapdRxDiscModeFrames, vismLapdT200=vismLapdT200, vismLapdTxNotReadyFrames=vismLapdTxNotReadyFrames, vismLapdRxSABMFrames=vismLapdRxSABMFrames, vismLapdRxRejectFrames=vismLapdRxRejectFrames, vismLapdType=vismLapdType, vismLapdRxInfoFrames=vismLapdRxInfoFrames, vismLapdN200=vismLapdN200, vismLapdRxNotReadyFrames=vismLapdRxNotReadyFrames, vismLapdEntry=vismLapdEntry, vismLapdDlcTable=vismLapdDlcTable, vismLapdDlcTei=vismLapdDlcTei, vismLapdTxRejectFrames=vismLapdTxRejectFrames, vismLapdStatsEntry=vismLapdStatsEntry, vismLapdTrunkType=vismLapdTrunkType, vismLapdTxUnumInfoFrames=vismLapdTxUnumInfoFrames)
