#
# PySNMP MIB module AP80-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AP80-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, NotificationType, Gauge32, ObjectIdentity, ModuleIdentity, Bits, Counter64, TimeTicks, MibIdentifier, enterprises, mgmt, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "NotificationType", "Gauge32", "ObjectIdentity", "ModuleIdentity", "Bits", "Counter64", "TimeTicks", "MibIdentifier", "enterprises", "mgmt", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class DisplayString(OctetString):
    pass

class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 1))
    namedValues = NamedValues(("false", 2), ("true", 1))

aruba = MibIdentifier((1, 3, 6, 1, 4, 1, 14823))
arubaEnterpriseMibModules = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2))
arubaAp = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3))
wlsrOutDoorApMibModules = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2))
enterpriseApSys = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 1))
enterpriseApLineMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 2))
enterpriseApPortMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 3))
enterpriseApFileTransferMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 4))
enterpriseApResetMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 5))
enterpriseApIpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 6))
enterpriseAPdot11 = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7))
enterpriseApAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 8))
enterpriseApVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 9))
enterpriseApFilterControl = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 10))
enterpriseApSNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 11))
enterpriseApDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 12))
enterpriseApSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 13))
enterpriseApSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14))
enterpriseApRadio = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15))
enterpriseApSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16))
enterpriseApSession = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 17))
enterpriseAPVapRadio = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 20))
enterpriseApRadioWds = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 22))
enterpriseApWMM = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24))
enterpriseApSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 25))
swHardwareVer = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHardwareVer.setStatus('current')
if mibBuilder.loadTexts: swHardwareVer.setDescription('Hardware version of the main board.')
swBootRomVer = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBootRomVer.setStatus('current')
if mibBuilder.loadTexts: swBootRomVer.setDescription('Boot ROM code version of the main board.')
swOpCodeVer = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swOpCodeVer.setStatus('current')
if mibBuilder.loadTexts: swOpCodeVer.setDescription('Operation code version of the main board.')
swSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSerialNumber.setStatus('current')
if mibBuilder.loadTexts: swSerialNumber.setDescription('Serial Number of the Access Point.')
sysNotificationTree = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 1, 5))
sysNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 1, 5, 1))
sysNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 1, 5, 2))
sysSystemUp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 1, 5, 2, 1))
if mibBuilder.loadTexts: sysSystemUp.setStatus('current')
if mibBuilder.loadTexts: sysSystemUp.setDescription('The system up notification shall be sent when the AP is fully up and running.')
sysSystemDown = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 1, 5, 2, 2))
if mibBuilder.loadTexts: sysSystemDown.setStatus('current')
if mibBuilder.loadTexts: sysSystemDown.setDescription('The system down notification shall be sent before the AP is about to reboot.')
sysRadiusServerChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 1, 5, 2, 3))
if mibBuilder.loadTexts: sysRadiusServerChanged.setStatus('current')
if mibBuilder.loadTexts: sysRadiusServerChanged.setDescription('The RADIUS server changed notification shall be sent when the RADIUS server has changed from Primary / Secondary to Secondary / Primary.')
sysConfigFileVersionChanged = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 1, 5, 2, 4))
if mibBuilder.loadTexts: sysConfigFileVersionChanged.setStatus('current')
if mibBuilder.loadTexts: sysConfigFileVersionChanged.setDescription("The Config file version changed notification shall be sent when the version of the AP's configuration file has changed.")
lineTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 2, 1), )
if mibBuilder.loadTexts: lineTable.setStatus('current')
if mibBuilder.loadTexts: lineTable.setDescription('Table of descriptive and status information about configuration of each RS-232 line in this system')
lineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 2, 1, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "lineIndex"))
if mibBuilder.loadTexts: lineEntry.setStatus('current')
if mibBuilder.loadTexts: lineEntry.setDescription('An entry in the table, containing information about configuration in one RS232 line of the Access Point.')
lineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: lineIndex.setStatus('current')
if mibBuilder.loadTexts: lineIndex.setDescription('This is defined as RS-232 index.')
lineDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineDataBits.setStatus('current')
if mibBuilder.loadTexts: lineDataBits.setDescription('This is defined as number of data bits for the RS232 interface.')
lineParity = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(99, 1, 2))).clone(namedValues=NamedValues(("none", 99), ("odd", 1), ("even", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineParity.setStatus('current')
if mibBuilder.loadTexts: lineParity.setDescription('This is defined as parity of the RS232 interface.')
lineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineSpeed.setStatus('current')
if mibBuilder.loadTexts: lineSpeed.setDescription('This is defined as the speed of the RS-232 interface.')
lineStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineStopBits.setStatus('current')
if mibBuilder.loadTexts: lineStopBits.setDescription('This is defined as the number of stop bits for the RS-232 interface.')
portTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 3, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
if mibBuilder.loadTexts: portTable.setDescription("Table of descriptive and status information about configuration of each switch port (including expansion slot) in this system. This table also contains information about each trunk (similar to Cisco's EtherChannel).")
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 3, 1, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
if mibBuilder.loadTexts: portEntry.setDescription('An entry in the table, containing information about configuration in one switch port of the switch.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: portIndex.setStatus('current')
if mibBuilder.loadTexts: portIndex.setDescription('This is defined as ifIndex in the IF-MIB.')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portName.setStatus('current')
if mibBuilder.loadTexts: portName.setDescription('Indicates the port name. This is same as ifAlias in the IF-MIB (RFC2863 or later).')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("hundredBaseTX", 2), ("hundredBaseFX", 3), ("thousandBaseSX", 4), ("thousandBaseLX", 5), ("thousandBaseT", 6), ("thousandBaseGBIC", 7), ("thousandBaseMiniGBIC", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
if mibBuilder.loadTexts: portType.setDescription('Indicates the port type.')
portSpeedDpxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reserved", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7))).clone('halfDuplex10')).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeedDpxCfg.setStatus('current')
if mibBuilder.loadTexts: portSpeedDpxCfg.setDescription('Indicates the port speed and duplex mode as follows: halfDuplex10(2) - 10Mbps and half duplex mode fullDuplex10(3) - 10Mbps and full duplex mode halfDuplex100(4) - 100Mbps and half duplex mode fullDuplex100(5) - 100Mbps and full duplex mode halfDuplex1000(6) - 1000Mbps and half duplex mode fullDuplex1000(7) - 1000Mbps and full duplex mode hundredBaseTX port can be set as halfDuplex10(2) fullDuplex10(3) halfDuplex100(4) fullDuplex100(5) hundredBaseFX port can be set as halfDuplex100(4) fullDuplex100(5) thousandBaseSX port can be set as halfDuplex1000(6) fullDuplex1000(7) The actual operating speed and duplex of the port is given by portSpeedDpxStatus.')
portFlowCtrlCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("backPressure", 3), ("dot3xFlowControl", 4))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFlowCtrlCfg.setStatus('current')
if mibBuilder.loadTexts: portFlowCtrlCfg.setDescription('(1) Flow control mechanism is enabled. If the port type is hundredBaseTX or thousandBaseSX: When the port is operating in halfDuplex mode, the port uses backPressure flow control mechanism. When the port is operating in fullDuplex mode, the port uses IEEE 802.3x flow control mechanism. If the port type is hundredBaseFX: When the port is operating in halfDuplex mode, the port uses backPressure flow control mechanism. When the port is operating in fullDuplex mode, Flow control mechanism will not function. (2) Flow control mechanism is disabled. (3) Flow control mechanism is backPressure. when the port is in fullDuplex mode.This flow control mechanism will not function. (4) Flow control mechanism is IEEE 802.3x flow control. when the port is in halfDuplex mode.This flow control mechanism will not function. hundredBaseTX and thousandBaseSX port can be set as: enabled(1), disabled(2), backPressure(3), dot3xFlowControl(4). hundredBaseFX port can be set as: enabled(1), disabled(2), backPressure(3). The actual flow control mechanism is used given by portFlowCtrlStatus.')
portCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(99, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("portCap10half", 99), ("portCap10full", 1), ("portCap100half", 2), ("portCap100full", 3), ("portCap1000half", 4), ("portCap1000full", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("portCapSym", 14), ("portCapFlowCtrl", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCapabilities.setStatus('current')
if mibBuilder.loadTexts: portCapabilities.setDescription('Port capabilities.')
portAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: portAutonegotiation.setDescription('Whether autonegotiation is enabled.')
portSpeedDpxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("error", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeedDpxStatus.setStatus('current')
if mibBuilder.loadTexts: portSpeedDpxStatus.setDescription('The operating speed and duplex mode of the switched port. If this index is a trunk, the speed is the speed of its individual members. If this index is a trunk and the result is inconsistent among its member ports, this value is error(1).')
portFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 1), ("backPressure", 2), ("dot3xFlowControl", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFlowCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: portFlowCtrlStatus.setDescription('(2) BackPressure flow control machanism is used. (3) IEEE 802.3 flow control machanism is used. (4) Flow control mechanism is disabled. If this index is a trunk and the result is inconsistent among its member ports, this value is error(1).')
transferType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ftp", 1), ("tftp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferType.setStatus('current')
if mibBuilder.loadTexts: transferType.setDescription('Type of file to transfer.')
fileType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("application", 1), ("config", 2), ("bootcode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileType.setStatus('current')
if mibBuilder.loadTexts: fileType.setDescription('Type of file to transfer.')
srcFile = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srcFile.setStatus('current')
if mibBuilder.loadTexts: srcFile.setDescription('The source file name for TFTP transfer when a transfer is next requested via this MIB. This value is set to the zero length string when no file name has been specified.')
destFile = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destFile.setStatus('current')
if mibBuilder.loadTexts: destFile.setDescription('The destination file name for TFTP transfer when a transfer is next requested via this MIB. This value is set to the zero length string when no file name has been specified.')
fileServer = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 4, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServer.setStatus('current')
if mibBuilder.loadTexts: fileServer.setDescription("The IP address of the TFTP server for transfer when a download is next requested via this MIB. This value is set to `0.0.0.0' when no IP address has been specified.")
userName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('The username specified for an FTP Transfer.')
password = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: password.setStatus('current')
if mibBuilder.loadTexts: password.setDescription('The password specified for an FTP Transfer.')
status = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10, 11, 12, 13, 20, 30))).clone(namedValues=NamedValues(("running", 1), ("success", 2), ("failureGeneric", 3), ("flashOpenError", 10), ("flashMallocError", 11), ("flashReadError", 12), ("flashFtypeError", 13), ("socketWriteError", 20), ("protocolError", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: status.setStatus('current')
if mibBuilder.loadTexts: status.setDescription('The status of the transfer.')
transferStart = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nothing", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferStart.setStatus('current')
if mibBuilder.loadTexts: transferStart.setDescription('Set to go(1) to start a transfer.')
restartOpCodeFile = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartOpCodeFile.setStatus('current')
if mibBuilder.loadTexts: restartOpCodeFile.setDescription('Name of op-code file for start-up.')
restartControl = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("warmBoot", 2), ("coldBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartControl.setStatus('current')
if mibBuilder.loadTexts: restartControl.setDescription('Setting this object to warmBoot(2) causes the device to restart the application software with current configuration parameters saved in non-volatile memory. Setting this object to coldBoot(3) causes the device to reinitialize configuration parameters in non-volatile memory to default values and restart the application software. When the device is running normally, this variable has a value of running(1).')
netConfigIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 6, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigIPAddress.setStatus('current')
if mibBuilder.loadTexts: netConfigIPAddress.setDescription('The IP address of this Net interface. The default value for this object is 0.0.0.0. If either the netConfigIPAddress or netConfigSubnetMask are 0.0.0.0, then when the device boots, it may use DHCP to try to figure out what these values should be. If DHCP fails, before the device can talk on the network, this value must be configured (e.g., through a terminal attached to the device).')
netConfigSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigSubnetMask.setStatus('current')
if mibBuilder.loadTexts: netConfigSubnetMask.setDescription('The subnet mask of this Net interface. The default value for this object is 0.0.0.0. If either the netConfigIPAddress or netConfigSubnetMask are 0.0.0.0, then when the device boots, it may use DHCP to try to figure out what these values should be. If DHCP fails, before the device can talk on the network, this value must be configured (e.g., through a terminal attached to the device).')
netConfigDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: netConfigDefaultGateway.setDescription('The IP Address of the default gateway. If this value is undefined or unknown, it shall have the value 0.0.0.0.')
netConfigHttpState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigHttpState.setStatus('current')
if mibBuilder.loadTexts: netConfigHttpState.setDescription('Whether HTTP is enabled.')
netConfigHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigHttpPort.setStatus('current')
if mibBuilder.loadTexts: netConfigHttpPort.setDescription('The port number for HTTP. Default port number is 80.')
netConfigHttpsState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigHttpsState.setStatus('current')
if mibBuilder.loadTexts: netConfigHttpsState.setDescription('Whether Secure HTTP is enabled.')
netConfigHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigHttpsPort.setStatus('current')
if mibBuilder.loadTexts: netConfigHttpsPort.setDescription('The port number for Secure HTTP. Default port number is 443.')
netConfigDHCPState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netConfigDHCPState.setStatus('current')
if mibBuilder.loadTexts: netConfigDHCPState.setDescription('Whether DHCP is enabled.')
dot11AuthenticationEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 1))
dot118021xState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("supported", 1), ("required", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot118021xState.setStatus('obsolete')
if mibBuilder.loadTexts: dot118021xState.setDescription('This attribute indicates that the Enterprise the state of the 802.1x authentication algorithm.')
dot118021xBroadcastKeyRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot118021xBroadcastKeyRefreshRate.setStatus('obsolete')
if mibBuilder.loadTexts: dot118021xBroadcastKeyRefreshRate.setDescription('The number (in minutes) between changing the broadcast key for 802.1x and WPA clients')
dot118021xSessionKeyRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot118021xSessionKeyRefreshRate.setStatus('obsolete')
if mibBuilder.loadTexts: dot118021xSessionKeyRefreshRate.setDescription('The number (in minutes) between changing session keys for 802.1x and WPA clients')
dot118021xReauthenticationTimeout = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot118021xReauthenticationTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: dot118021xReauthenticationTimeout.setDescription('The number (in minutes) between forcing 802.1x clients to reauthenticate')
dot11MACAuthenticationType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("local", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MACAuthenticationType.setStatus('obsolete')
if mibBuilder.loadTexts: dot11MACAuthenticationType.setDescription('This value indicates the type of mac authentication in use.')
dot11AuthenticationServerTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 2), )
if mibBuilder.loadTexts: dot11AuthenticationServerTable.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationServerTable.setDescription('Table of descriptive and status information about configuration of each authentication server.')
dot11AuthenticationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 2, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "dot11AuthenticationServerIndex"))
if mibBuilder.loadTexts: dot11AuthenticationServerEntry.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationServerEntry.setDescription('An entry in the table, containing information about configuration of one authentication server of the AP.')
dot11AuthenticationServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11AuthenticationServerIndex.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationServerIndex.setDescription('Index of the Authentication Server')
dot11AuthenticationServer = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationServer.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationServer.setDescription('This value indicates the IP address of the authentication server.')
dot11AuthenticationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationPort.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationPort.setDescription('This value indicates the UDP Port used by the authentication server.')
dot11AuthenticationKey = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationKey.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationKey.setDescription('This value indicates the shared key used by the authentication server.')
dot11AuthenticationRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationRetransmit.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationRetransmit.setDescription('This value indicates the retransmit timer length used by the authentication server.')
dot11AuthenticationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationTimeout.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationTimeout.setDescription('This value indicates the Timeout value(sec) used by the authentication server.')
dot11AuthenticationAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535)).clone(1813)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationAcctPort.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationAcctPort.setDescription('The port number for radius server accounting.')
dot11AuthenticationAcctInterimUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationAcctInterimUpdate.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationAcctInterimUpdate.setDescription('This value indicates the Timeout value(sec) used by the radius server interim update.')
dot11AuthenticationMACAddressFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-delimiter", 1), ("single-dash", 2), ("multi-dash", 3), ("multi-colon", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationMACAddressFormat.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationMACAddressFormat.setDescription('This value indicates the MAC address format from Radius MAC authentication. no-delimiter format: aabbccddeeff single-dash format: aabbcc-ddeeff multi-dash format: aa-bb-cc-dd-ee-ff multi-colon format: aa:bb:cc:dd:ee:ff')
dot11AuthenticationVLANIDFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hex", 1), ("ascii", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AuthenticationVLANIDFormat.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationVLANIDFormat.setDescription('This value indicates the VLAN ID format from Radius server.')
dot11MACAuthenticationFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 3))
dot11FilterDefault = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11FilterDefault.setStatus('current')
if mibBuilder.loadTexts: dot11FilterDefault.setDescription('This value indicates the default access for local mac filters.')
dot11FilterTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 3, 2), )
if mibBuilder.loadTexts: dot11FilterTable.setStatus('current')
if mibBuilder.loadTexts: dot11FilterTable.setDescription('Table of status information about each configured MAC Address Filtering Entry.')
dot11FilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 3, 2, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "dot11FilterAddress"))
if mibBuilder.loadTexts: dot11FilterEntry.setStatus('current')
if mibBuilder.loadTexts: dot11FilterEntry.setDescription('An entry in the table, containing information about configuration in one radio of the AP.')
dot11FilterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 3, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: dot11FilterAddress.setStatus('current')
if mibBuilder.loadTexts: dot11FilterAddress.setDescription('This value indicates the MAC address of the filter entry.')
dot11FilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 31, 32))).clone(namedValues=NamedValues(("allowed", 30), ("denied", 31), ("delete", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11FilterStatus.setStatus('current')
if mibBuilder.loadTexts: dot11FilterStatus.setDescription('This value indicates the Status of the filter entry. Ifallowed, the client is allowed access to the network. If disallowed, the no frames will be forwarded to the network from the client.')
dot11NotificationTree = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4))
dot11NotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 1))
dot11MacAddr = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: dot11MacAddr.setStatus('current')
if mibBuilder.loadTexts: dot11MacAddr.setDescription('Mac Address of the affected interface, returned with traps only.')
dot11Station = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 1, 2), MacAddress())
if mibBuilder.loadTexts: dot11Station.setStatus('current')
if mibBuilder.loadTexts: dot11Station.setDescription('This attribute holds the MAC address of the wireless station')
dot11RequestType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("association", 2), ("reAssociation", 3), ("authentication", 4))))
if mibBuilder.loadTexts: dot11RequestType.setStatus('current')
if mibBuilder.loadTexts: dot11RequestType.setDescription('This attribute defines the request type sent by the station. Value = 1: Unknown request type Value = 2: Association Request Value = 3: Re-association Request Value = 4: Authentication')
dot11ReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("invalidModeOrState", 1), ("unAuthenticatedStation", 2), ("internalError", 3), ("outOfSequenceFrame", 4), ("unsupportedAlgorithm", 5), ("invalidFrameLngth", 6), ("wepRequiredOnAP", 7), ("wepNotAllowed", 8), ("challengeTextMismatch", 9))))
if mibBuilder.loadTexts: dot11ReasonCode.setStatus('current')
if mibBuilder.loadTexts: dot11ReasonCode.setDescription('This attribute defines the reason for the failure of an operation. Value = 1: Invalid mode/state Value = 2: Station not authenticated. Value = 3: Internal error Value = 4: Out of sequence frame Value = 5: Un-supportd algorithm Value = 6: Invalid frame length Value = 7: WEP is required on the AP Value = 8: WEP not allowed Value = 9: Challenge text mismatch')
dot11ApIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 1, 5), IpAddress())
if mibBuilder.loadTexts: dot11ApIpAddress.setStatus('current')
if mibBuilder.loadTexts: dot11ApIpAddress.setDescription('This value indicates the IP address of the Access Point')
dot1xAuthenticatorMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 1, 6), MacAddress())
if mibBuilder.loadTexts: dot1xAuthenticatorMacAddr.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthenticatorMacAddr.setDescription('This attribute holds the MAC address of the authenticator for the AP.')
dot11Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2))
dot11StationAssociation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2, 1)).setObjects(("AP80-PRIVATE-MIB", "dot11Station"))
if mibBuilder.loadTexts: dot11StationAssociation.setStatus('current')
if mibBuilder.loadTexts: dot11StationAssociation.setDescription('The associate notification shall be sent when a station successfully associates with the Access Point. The value of the notification shall include the MAC address of the station that has associated.')
dot11StationReAssociation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2, 2)).setObjects(("AP80-PRIVATE-MIB", "dot11Station"))
if mibBuilder.loadTexts: dot11StationReAssociation.setStatus('current')
if mibBuilder.loadTexts: dot11StationReAssociation.setDescription('The re-associate notification shall be sent when a station successfully re-associates with the Access Point. The value of the notification shall include the MAC address of the station that has associated.')
dot11StationAuthentication = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2, 3)).setObjects(("AP80-PRIVATE-MIB", "dot11Station"))
if mibBuilder.loadTexts: dot11StationAuthentication.setStatus('current')
if mibBuilder.loadTexts: dot11StationAuthentication.setDescription('The authentication notification shall be sent when a station successfully authenticates with the Access Point. The value of the notification shall include the MAC address of the station that has authenticated.')
dot11StationRequestFail = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2, 4)).setObjects(("AP80-PRIVATE-MIB", "dot11Station"), ("AP80-PRIVATE-MIB", "dot11RequestType"), ("AP80-PRIVATE-MIB", "dot11ReasonCode"))
if mibBuilder.loadTexts: dot11StationRequestFail.setStatus('current')
if mibBuilder.loadTexts: dot11StationRequestFail.setDescription('The station request fail shall be sent out when a station fails to associate / re-associate / authenticate with the Access Point. The notification shall include the MAC address of the station and the reason code for the failure.')
dot11InterfaceBFail = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2, 5))
if mibBuilder.loadTexts: dot11InterfaceBFail.setStatus('current')
if mibBuilder.loadTexts: dot11InterfaceBFail.setDescription('The InterfaceBFail notification shall be sent out when 802.11b wireless interface has failed.')
dot11InterfaceAGFail = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2, 6))
if mibBuilder.loadTexts: dot11InterfaceAGFail.setStatus('current')
if mibBuilder.loadTexts: dot11InterfaceAGFail.setDescription('The InterfaceAGFail notification shall be sent out when 802.11a/802.11g wireless interface has failed.')
dot1xMacAddrAuthSuccess = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2, 7)).setObjects(("AP80-PRIVATE-MIB", "dot11Station"))
if mibBuilder.loadTexts: dot1xMacAddrAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: dot1xMacAddrAuthSuccess.setDescription('The 802.1x MAC address authentication success notification shall be sent when a station successfully authenticates the MAC address with the RADIUS server. The value of the notification shall include the MAC address of the station that has authenticated.')
dot1xMacAddrAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2, 8)).setObjects(("AP80-PRIVATE-MIB", "dot11Station"))
if mibBuilder.loadTexts: dot1xMacAddrAuthFail.setStatus('current')
if mibBuilder.loadTexts: dot1xMacAddrAuthFail.setDescription('The 802.1x MAC address authentication failure notification shall be sent when a station fails to authenticate the MAC address with the RADIUS server. The value of the notification shall include the MAC address of the station that failed to authenticate.')
dot1xAuthNotInitiated = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2, 9)).setObjects(("AP80-PRIVATE-MIB", "dot11Station"))
if mibBuilder.loadTexts: dot1xAuthNotInitiated.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthNotInitiated.setDescription('The 802.1x authentication not initiated notification shall be sent when a station did not initiate 802.1x authentication with the RADIUS server. The value of the notification shall include the MAC address of the station that did not initiate 802.1x authentication.')
dot1xAuthSuccess = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2, 10)).setObjects(("AP80-PRIVATE-MIB", "dot11Station"))
if mibBuilder.loadTexts: dot1xAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthSuccess.setDescription('The 802.1x authentication success notification shall be sent when a station successfully authenticates with the RADIUS server. The value of the notification shall include the MAC address of the station that has authenticated.')
dot1xAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2, 11)).setObjects(("AP80-PRIVATE-MIB", "dot11Station"))
if mibBuilder.loadTexts: dot1xAuthFail.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthFail.setDescription('The 802.1x authentication failure notification shall be sent when a station fails to authenticate with the RADIUS server. The value of the notification shall include the MAC address of the station that failed to authenticate.')
localMacAddrAuthSuccess = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2, 12)).setObjects(("AP80-PRIVATE-MIB", "dot11Station"))
if mibBuilder.loadTexts: localMacAddrAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: localMacAddrAuthSuccess.setDescription('The Local MAC address authentication success notification shall be sent when a station successfully authenticates the MAC address with the database stored locally within the AP. The value of the notification shall include the MAC address of the station that has authenticated.')
localMacAddrAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2, 13)).setObjects(("AP80-PRIVATE-MIB", "dot11Station"))
if mibBuilder.loadTexts: localMacAddrAuthFail.setStatus('current')
if mibBuilder.loadTexts: localMacAddrAuthFail.setDescription('The Local MAC address authentication failure notification shall be sent when a station fails to authenticate the MAC address with the database stored locally within the AP. The value of the notification shall include the MAC address of the station that has authenticated.')
pppLogonFail = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2, 14))
if mibBuilder.loadTexts: pppLogonFail.setStatus('current')
if mibBuilder.loadTexts: pppLogonFail.setDescription('The PPP Logon failure notification shall be sent out when the AP fails to login successfully to the PPP peer using the supplied username and password.')
iappStationRoamedFrom = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2, 15)).setObjects(("AP80-PRIVATE-MIB", "dot11Station"), ("AP80-PRIVATE-MIB", "dot11ApIpAddress"))
if mibBuilder.loadTexts: iappStationRoamedFrom.setStatus('current')
if mibBuilder.loadTexts: iappStationRoamedFrom.setDescription('The IAPP Station Roamed-From Notification shall be sent out whenever a station roams from another Access Point (AP) to this AP. The notification shall include the MAC address of the station and the IP address of the old AP.')
iappStationRoamedTo = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2, 16)).setObjects(("AP80-PRIVATE-MIB", "dot11Station"), ("AP80-PRIVATE-MIB", "dot11ApIpAddress"))
if mibBuilder.loadTexts: iappStationRoamedTo.setStatus('current')
if mibBuilder.loadTexts: iappStationRoamedTo.setDescription('The IAPP Station Roamed-To Notification shall be sent out whenever a station roams to another Access Point (AP) from this AP. The notification shall include the MAC address of the station and the IP address of the new AP.')
iappContextDataSent = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2, 17)).setObjects(("AP80-PRIVATE-MIB", "dot11Station"), ("AP80-PRIVATE-MIB", "dot11ApIpAddress"))
if mibBuilder.loadTexts: iappContextDataSent.setStatus('current')
if mibBuilder.loadTexts: iappContextDataSent.setDescription('The IAPP Context Data Sent notification shall be sent out whenever the context data for a station has been sent to the new AP with which the station has associated. The notification shall include the MAC address of the station and the IP address of the new AP.')
dot1xSupplicantAuthenticated = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 4, 2, 18)).setObjects(("AP80-PRIVATE-MIB", "dot11AuthenticatorMacAddr"))
if mibBuilder.loadTexts: dot1xSupplicantAuthenticated.setStatus('current')
if mibBuilder.loadTexts: dot1xSupplicantAuthenticated.setDescription('The notification shall be sent when the AP has successfully authenticated with the switch. The value of the notification shall include the MAC address of the switch (authenticator) that the AP has authenticated with.')
dot11AuthenticationSupplicantTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 5), )
if mibBuilder.loadTexts: dot11AuthenticationSupplicantTable.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationSupplicantTable.setDescription('Table of descriptive and status information about configuration of supplicant')
dot11AuthenticationSupplicantEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 5, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "dot11AuthenticationSuppIndex"))
if mibBuilder.loadTexts: dot11AuthenticationSupplicantEntry.setStatus('current')
if mibBuilder.loadTexts: dot11AuthenticationSupplicantEntry.setDescription('An entry in the table, containing information about configuration of one supplicant.')
dot118021xSuppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: dot118021xSuppIndex.setStatus('current')
if mibBuilder.loadTexts: dot118021xSuppIndex.setDescription('Index of the interface for which this supplicant is running. Currently only the ethernet interface.')
dot118021xSuppState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot118021xSuppState.setStatus('current')
if mibBuilder.loadTexts: dot118021xSuppState.setDescription('This object is used to enable or disable the 802.1x supplicant.')
dot118021xSuppUser = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot118021xSuppUser.setStatus('current')
if mibBuilder.loadTexts: dot118021xSuppUser.setDescription('This value indicates the username for supplicant. If value is configured, will display ****. Else will display EMPTY.')
dot118021xSuppPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot118021xSuppPasswd.setStatus('current')
if mibBuilder.loadTexts: dot118021xSuppPasswd.setDescription('This value indicates the password for supplicant. If value is configured, will display ****. Else will display EMPTY.')
dot11VapAuthenticationTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 6), )
if mibBuilder.loadTexts: dot11VapAuthenticationTable.setStatus('current')
if mibBuilder.loadTexts: dot11VapAuthenticationTable.setDescription('Table of descriptive and status information about configuration of 8021x for each Vap.')
dot11VapAuthenticationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 6, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "dot11Vap8021xIndex"))
if mibBuilder.loadTexts: dot11VapAuthenticationEntry.setStatus('current')
if mibBuilder.loadTexts: dot11VapAuthenticationEntry.setDescription('An entry in the table, containing information about configuration of 8021x for each Vap of the AP.')
dot11Vap8021xIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11Vap8021xIndex.setStatus('current')
if mibBuilder.loadTexts: dot11Vap8021xIndex.setDescription('Index for configuration.')
dot11Vap8021xState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("supported", 1), ("required", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Vap8021xState.setStatus('current')
if mibBuilder.loadTexts: dot11Vap8021xState.setDescription('This attribute indicates that the Enterprise the state of the 802.1x authentication algorithm.')
dot11Vap8021xBroadcastKeyRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Vap8021xBroadcastKeyRefreshRate.setStatus('current')
if mibBuilder.loadTexts: dot11Vap8021xBroadcastKeyRefreshRate.setDescription('The number (in minutes) between changing the broadcast key for 802.1x and WPA clients')
dot11Vap8021xSessionKeyRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Vap8021xSessionKeyRefreshRate.setStatus('current')
if mibBuilder.loadTexts: dot11Vap8021xSessionKeyRefreshRate.setDescription('The number (in minutes) between changing session keys for 802.1x and WPA clients')
dot11Vap8021xReauthenticationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Vap8021xReauthenticationTimeout.setStatus('current')
if mibBuilder.loadTexts: dot11Vap8021xReauthenticationTimeout.setDescription('The number (in minutes) between forcing 802.1x clients to reauthenticate')
dot11VapAuthMACAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("local", 1), ("remote", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11VapAuthMACAuthenticationType.setStatus('current')
if mibBuilder.loadTexts: dot11VapAuthMACAuthenticationType.setDescription('This value indicates the type of mac authentication in use.')
dot11VapAuthMACAuthenticationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 7, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11VapAuthMACAuthenticationTimeout.setStatus('current')
if mibBuilder.loadTexts: dot11VapAuthMACAuthenticationTimeout.setDescription('The number (in minutes) between forcing Radius MAC to authenticate.')
enterpriseApAdminUser = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApAdminUser.setStatus('current')
if mibBuilder.loadTexts: enterpriseApAdminUser.setDescription('This value indicates the username for management login.')
enterpriseApAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApAdminPassword.setStatus('current')
if mibBuilder.loadTexts: enterpriseApAdminPassword.setDescription("This value indicates the password for management login. The password length is betwen 3 and 16. 'Zero-length' indicates 'no password'.")
enterpriseApVLANNativeId = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApVLANNativeId.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVLANNativeId.setDescription('This value indicates the native VLAN id.')
enterpriseApVLANState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApVLANState.setStatus('current')
if mibBuilder.loadTexts: enterpriseApVLANState.setDescription('This value indicates whether VLANs are enabled or disabled.')
enterpriseApNativeVlanTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 9, 3), )
if mibBuilder.loadTexts: enterpriseApNativeVlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: enterpriseApNativeVlanTable.setDescription('Table used to manage the Vlans for each wireless interface.')
enterpriseApNativeVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 9, 3, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "nativeVlanIfIndex"), (0, "AP80-PRIVATE-MIB", "nativeVlanSsidNumber"))
if mibBuilder.loadTexts: enterpriseApNativeVlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: enterpriseApNativeVlanEntry.setDescription('An entry in the table, containing information about vlan configuration of one wireless interface.')
nativeVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 9, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: nativeVlanIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nativeVlanIfIndex.setDescription('Interface Index of the wireless interface for which the vlan is assigned to.')
nativeVlanSsidNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 9, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: nativeVlanSsidNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nativeVlanSsidNumber.setDescription('Associated Number for Service Set Id (SSID) of the wireless interface for which the vlan is assigned to. Note: This is for future support of multiple SSIDs per radio interface.')
nativeVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 9, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nativeVlanVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: nativeVlanVlanId.setDescription('This value indicates the native VLAN id of the wireless interface associated with the if index and the SSID number(if it is not 0).')
enterpriseApFilterControlInterClientSTAsCommun = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("PreventIntraVAPClient", 2), ("PreventInterAndIntraVAPClient", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApFilterControlInterClientSTAsCommun.setStatus('current')
if mibBuilder.loadTexts: enterpriseApFilterControlInterClientSTAsCommun.setDescription('This value indicates the Inter Client STAs Communication Filter setting. disabled (1) To disable the Inter Client STAs Communication Filter PreventIntraVAPClient (2) To set filter to prevent intra VAP client communication PreventInterAndIntraVAPClient(3) To set filter to prevent inter and intra VAP client communication')
enterpriseApFilterControlAPManage = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApFilterControlAPManage.setStatus('current')
if mibBuilder.loadTexts: enterpriseApFilterControlAPManage.setDescription('This value indicates the AP management filter setting.')
enterpriseApFilterControlEthernet = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApFilterControlEthernet.setStatus('current')
if mibBuilder.loadTexts: enterpriseApFilterControlEthernet.setDescription('This value indicates the ethernet filter setting.')
enterpriseApFilterProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 10, 4), )
if mibBuilder.loadTexts: enterpriseApFilterProtocolTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApFilterProtocolTable.setDescription('Table of descriptive and status information about configuration of the filter protocol table.')
enterpriseApFilterProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 10, 4, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "enterpriseApFilterProtocolIndex"))
if mibBuilder.loadTexts: enterpriseApFilterProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApFilterProtocolEntry.setDescription('An entry in the filter protocol table, containing information about configuration of one filter table entry.')
enterpriseApFilterProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 10, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: enterpriseApFilterProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApFilterProtocolIndex.setDescription('Index of the Protocol Filters.')
enterpriseApFilterProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 10, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApFilterProtocolName.setStatus('current')
if mibBuilder.loadTexts: enterpriseApFilterProtocolName.setDescription('This value indicates the name of the protocol filter. One of the following: Aironet_DDP, Appletalk_ARP, ARP, Banyan, Berkeley_Trailer_Negotiation, CDP, DEC_LAT, DEC_MOP, DEC_MOP_Dump_Load, DEC_XNS, EAPOL, Enet_Config_Test, Ethertalk, IP, LAN_Test, NetBEUI, Novell_IPX(new), Novell_IPX(old), RARP, Telxon_TXP, X.25_Level3 ')
enterpriseApFilterProtocolISODesignator = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 10, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApFilterProtocolISODesignator.setStatus('current')
if mibBuilder.loadTexts: enterpriseApFilterProtocolISODesignator.setDescription('This value indicates the name of the protocol filter.')
enterpriseApFilterProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApFilterProtocolState.setStatus('current')
if mibBuilder.loadTexts: enterpriseApFilterProtocolState.setDescription('This value indicates whether the protocol filter is enabled.')
enterpriseApFilterUplinkPortMACAddrFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 10, 5))
uplinkPortMACAddrFilterStatus = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 10, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uplinkPortMACAddrFilterStatus.setStatus('current')
if mibBuilder.loadTexts: uplinkPortMACAddrFilterStatus.setDescription('This value indicates whether the Uplink Port MAC Address Filter Table is enabled or not.')
uplinkPortMACAddrFilterAddMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 10, 5, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uplinkPortMACAddrFilterAddMac.setStatus('current')
if mibBuilder.loadTexts: uplinkPortMACAddrFilterAddMac.setDescription('To add mac address to Uplink Port MAC Address Filter Table. (Mac Address format: xx-xx-xx-xx-xx-xx or xx:xx:xx:xx:xx:xx)')
uplinkPortMACAddrFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 10, 5, 3), )
if mibBuilder.loadTexts: uplinkPortMACAddrFilteringTable.setStatus('current')
if mibBuilder.loadTexts: uplinkPortMACAddrFilteringTable.setDescription('Table of descriptive and status information about configuration of the Uplink Port MAC Address Filter Table. ')
uplinkPortMACAddrFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 10, 5, 3, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "uplinkPortMacAddrIndex"))
if mibBuilder.loadTexts: uplinkPortMACAddrFilteringEntry.setStatus('current')
if mibBuilder.loadTexts: uplinkPortMACAddrFilteringEntry.setDescription('An entry in Uplink Port MAC Address Filter Table.')
uplinkPortMacAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 10, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplinkPortMacAddrIndex.setStatus('current')
if mibBuilder.loadTexts: uplinkPortMacAddrIndex.setDescription('The index for Uplink Port MAC Address Filter Table.')
uplinkPortMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 10, 5, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplinkPortMACAddr.setStatus('current')
if mibBuilder.loadTexts: uplinkPortMACAddr.setDescription('The MAC Address of wireless clients which allowed to communicate on subnet.')
deleteMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 10, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("Delete", 1), ("Nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deleteMacAddr.setStatus('current')
if mibBuilder.loadTexts: deleteMacAddr.setDescription('To delete the MAC Address from Uplink Port MAC Address Filter Table. Delete(1) To start delete MAC address. Nothing(2) Nothing occur.')
enterpriseApSNTPState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSNTPState.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSNTPState.setDescription('This value indicates whether SNTP is enabled or not. At least one of the SNTP servers must have a valid IP address before SNTP can be enabled.')
enterpriseApSNTPPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 11, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSNTPPrimaryServer.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSNTPPrimaryServer.setDescription('This value indicates the IP address of the primary SNTP server.')
enterpriseApSNTPSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 11, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSNTPSecondaryServer.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSNTPSecondaryServer.setDescription('This value indicates the IP address of the secondary SNTP server.')
enterpriseApSNTPTimezone = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53))).clone(namedValues=NamedValues(("enewetakKwajalein", 0), ("midwayIsland", 1), ("hawaii", 2), ("alaska", 3), ("pacific", 4), ("arizona", 5), ("mountain", 6), ("central", 7), ("mexicoCity", 8), ("saskatchewan", 9), ("bogota", 10), ("eastern", 11), ("indiana", 12), ("atlantic", 13), ("caracas", 14), ("santiago", 15), ("newfoundland", 16), ("brasilia", 17), ("buenos", 18), ("midAtlantic", 19), ("azores", 20), ("casablanca", 21), ("greenwichMeanTimeDublin", 22), ("greenwichMeanTimeLisbon", 23), ("amsterdam", 24), ("stockhoim", 25), ("bratislava", 26), ("prague", 27), ("paris", 28), ("sofija", 29), ("athens", 30), ("bucharest", 31), ("cairo", 32), ("harare", 33), ("helsinki", 34), ("israel", 35), ("baghdad", 36), ("moscow", 37), ("tehran", 38), ("abuDhabi", 39), ("vogograd", 40), ("islamabad", 41), ("almaty", 42), ("bangkok", 43), ("beijing", 44), ("taipei", 45), ("tokyo", 46), ("brisbane", 47), ("canberra", 48), ("guam", 49), ("hobart", 50), ("magadan", 51), ("fiji", 52), ("wellington", 53)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSNTPTimezone.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSNTPTimezone.setDescription('This value indicates which timezone to use.')
enterpriseApSNTPDST = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSNTPDST.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSNTPDST.setDescription('This value indicates whether Daylight Savings Time is enabled or not.')
enterpriseApSNTPDSTStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 11, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSNTPDSTStartMonth.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSNTPDSTStartMonth.setDescription('This value indicates the starting month for Daylight Savings Time.')
enterpriseApSNTPDSTStartDay = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 11, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSNTPDSTStartDay.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSNTPDSTStartDay.setDescription('This value indicates the starting day for Daylight Savings Time.')
enterpriseApSNTPDSTEndMonth = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 11, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSNTPDSTEndMonth.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSNTPDSTEndMonth.setDescription('This value indicates the ending month for Daylight Savings Time.')
enterpriseApSNTPDSTEndDay = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 11, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSNTPDSTEndDay.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSNTPDSTEndDay.setDescription('This value indicates the ending day for Daylight Savings Time.')
sntpNotificationTree = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 11, 10))
sntpNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 11, 10, 1))
sntpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 11, 10, 2))
sntpServerFail = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 11, 10, 2, 1))
if mibBuilder.loadTexts: sntpServerFail.setStatus('current')
if mibBuilder.loadTexts: sntpServerFail.setDescription('The sntpServerFail notification shall be sent when the AP fails to get time from the configured SNTP server.')
enterpriseApDNSPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 12, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApDNSPrimaryServer.setStatus('current')
if mibBuilder.loadTexts: enterpriseApDNSPrimaryServer.setDescription('This value indicates the IP address of the primary DNS server.')
enterpriseApDNSSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 12, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApDNSSecondaryServer.setStatus('current')
if mibBuilder.loadTexts: enterpriseApDNSSecondaryServer.setDescription('This value indicates the IP address of the secondary DNS server.')
enterpriseApSyslogState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSyslogState.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSyslogState.setDescription('This value indicates whether syslog is enabled.')
enterpriseApSyslogConsoleState = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSyslogConsoleState.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSyslogConsoleState.setDescription('This value indicates whether syslog console logging is enabled.')
enterpriseApSyslogLevel = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSyslogLevel.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSyslogLevel.setDescription('This value indicates the syslog logging level.')
enterpriseApSyslogServerTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 13, 4), )
if mibBuilder.loadTexts: enterpriseApSyslogServerTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSyslogServerTable.setDescription('Table of descriptive and status information about configuration of each syslog server.')
enterpriseApSyslogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 13, 4, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "enterpriseApSyslogServerIndex"))
if mibBuilder.loadTexts: enterpriseApSyslogServerEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSyslogServerEntry.setDescription('An entry in the table, containing information about configuration of one syslog server of the AP.')
enterpriseApSyslogServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 13, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: enterpriseApSyslogServerIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSyslogServerIndex.setDescription('Index of the Syslog Server')
enterpriseApSyslogServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSyslogServerState.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSyslogServerState.setDescription('This value indicates whether the syslog server is enabled.')
enterpriseApSyslogServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 13, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSyslogServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSyslogServerIPAddress.setDescription('This value indicates the IP address of the syslog server.')
enterpriseApSyslogServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 13, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSyslogServerPort.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSyslogServerPort.setDescription('This value indicates the UDP Port used by the syslog server.')
enterpriseApSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 1), )
if mibBuilder.loadTexts: enterpriseApSecurityTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityTable.setDescription('Table of descriptive and status information about configuration of each radio in terms of security settings.')
enterpriseApSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 1, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "enterpriseApSecurityIndex"))
if mibBuilder.loadTexts: enterpriseApSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityEntry.setDescription('An entry in the table, containing information about configuration of one radio of the AP.')
enterpriseApSecurityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: enterpriseApSecurityIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityIndex.setDescription('Radio Index for security settings.')
enterpriseApSecurityAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("opensystem", 0), ("sharedkey", 1), ("wpa", 2), ("wpapsk", 3), ("wpawpa2mixed", 4), ("wpawpa2pskmixed", 5), ("wpa2", 6), ("wpa2psk", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityAuthType.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityAuthType.setDescription('This value indicates the type of authentication in use for this radio interface. opensystem(0) Set authentication open sharedkey(1) Set authentication shared wpa(2) Set WPA Mode wpapsk(3) Set WPA-PSK Mode wpa-wpa2-mixed(4) Set WPA-WPA2-Mixed Mode wpawpa2pskmixed(5) Set WPA-WPA2 PSK Mixed Mode wpa2(6) Set WPA2 Mode wpa2psk(7) Set WPA2-PSK Mode ')
enterpriseApSecuritySharedKeyLen = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("sixtyFour", 1), ("oneHundredTwentyEight", 2), ("oneHundredFiftyTwo", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApSecuritySharedKeyLen.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecuritySharedKeyLen.setDescription('This value indicates the shared key length for this radio interface.')
enterpriseApSecurityWPAMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("supported", 0), ("required", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityWPAMode.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityWPAMode.setDescription('This value indicates the state of WPA for this radio interface.')
enterpriseApSecurityWPAKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dot1x", 0), ("presharedkey", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityWPAKeyType.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityWPAKeyType.setDescription('This value indicates the type of WPA Key Management in use for this radio interface.')
enterpriseApSecurityWPACipher = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("wep", 0), ("tkip", 1), ("aes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityWPACipher.setStatus('obsolete')
if mibBuilder.loadTexts: enterpriseApSecurityWPACipher.setDescription('This value indicates the type of WPA Cipher in use for this radio interface.')
enterpriseApSecurityWPAPSKType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hex", 0), ("alphanumeric", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityWPAPSKType.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityWPAPSKType.setDescription('This value indicates the type of WPA Pre Shared Key in use for this radio interface.')
enterpriseApSecurityWPAPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityWPAPSK.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityWPAPSK.setDescription('This value indicates WPA Pre Shared Key in use for this radio interface.')
enterpriseApSecurityWEPKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hexadecimal", 0), ("alphanumeric", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityWEPKeyType.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityWEPKeyType.setDescription('This value indicates the type of WEP Key in use for this radio interface.')
enterpriseApSecurityWEPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityWEPEnabled.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityWEPEnabled.setDescription('This value indicates whether WEP is enabled.')
enterpriseApSecurityWPACipherSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("aes-ccmp", 0), ("tkip", 1), ("wep", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityWPACipherSuite.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityWPACipherSuite.setDescription('This value indicates the type of WPA Cipher Suite in use for this radio interface.')
enterpriseApSecurityWPAPreAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityWPAPreAuthentication.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityWPAPreAuthentication.setDescription('Whether Pre-Authentication is enabled.')
enterpriseApSecurityWPAPmksaLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSecurityWPAPmksaLifetime.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSecurityWPAPmksaLifetime.setDescription('The number (in minutes) for Pmksa-Lifetime.')
enterpriseApSsh = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 2))
enterpriseApSshServerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSshServerEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: enterpriseApSshServerEnabled.setDescription('This value indicates whether SSH server is enabled.')
enterpriseApSshServerPort = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 2, 2), Integer32().clone(22)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSshServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: enterpriseApSshServerPort.setDescription("This value indicates SSH server's port number.")
enterpriseApSshTelnetServerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 14, 2, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSshTelnetServerEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: enterpriseApSshTelnetServerEnabled.setDescription('This value indicates whether telnet server is enabled.')
enterpriseApRadioTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1), )
if mibBuilder.loadTexts: enterpriseApRadioTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioTable.setDescription('Table of descriptive and status information about configuration of each radio.')
enterpriseApRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "enterpriseApRadioIndex"))
if mibBuilder.loadTexts: enterpriseApRadioEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioEntry.setDescription('An entry in the table, containing information about configuration of one radio of the AP.')
enterpriseApRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: enterpriseApRadioIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioIndex.setDescription('Radio Index for configuration.')
enterpriseApRadioState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioState.setStatus('obsolete')
if mibBuilder.loadTexts: enterpriseApRadioState.setDescription('This value indicates the state of the radio interface.')
enterpriseApRadioAutoChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioAutoChannel.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAutoChannel.setDescription('This value indicates whether auto channel selection is enabled or not for this radio interface')
enterpriseApRadioTransmitPower = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("min", 0), ("eighth", 1), ("quarter", 2), ("half", 3), ("full", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioTransmitPower.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioTransmitPower.setDescription('This value indicates the transmit power for this radio interface.')
enterpriseApRadioClosedSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioClosedSystem.setStatus('obsolete')
if mibBuilder.loadTexts: enterpriseApRadioClosedSystem.setDescription('This value indicates whether closed system is enabled for this radio interface.')
enterpriseApRadioMaxAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioMaxAssoc.setStatus('obsolete')
if mibBuilder.loadTexts: enterpriseApRadioMaxAssoc.setDescription('This value indicates the max number of clients allowed on this radio interface.')
enterpriseApRadioTransmitKey = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioTransmitKey.setStatus('obsolete')
if mibBuilder.loadTexts: enterpriseApRadioTransmitKey.setDescription('This value indicates default transmit key in use for this radio interface.')
enterpriseApRadioTurboMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("static-turbo", 2), ("dynamic-turbo", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioTurboMode.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioTurboMode.setDescription('This value indicates whether turbo mode is enabled for this radio interface.')
enterpriseApRadioDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioDescription.setStatus('obsolete')
if mibBuilder.loadTexts: enterpriseApRadioDescription.setDescription('This value indicates the description for this radio interface.')
enterpriseApRadioDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 9, 11, 12, 18, 24, 36, 48, 54, 255))).clone(namedValues=NamedValues(("oneMbps", 1), ("twoMbps", 2), ("fiveAndHalfMbps", 5), ("sixMbps", 6), ("nineMbps", 9), ("elevenMbps", 11), ("twelveMbps", 12), ("eighteenMbps", 18), ("twentyFourMbps", 24), ("thirtySixMbps", 36), ("fourtyEightMbps", 48), ("fiftyFourMbps", 54), ("auto", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioDataRate.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioDataRate.setDescription('This value indicates the data rate for this radio interface. Radio interface A operates at 6, 9, 12, 18, 24, 36, 48, 54. Radio interface G operates all listed data rates. The auto setting will attempt to set the best data rate for the interface')
enterpriseApRadioGMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bOnly", 1), ("gOnly", 2), ("bg", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioGMode.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioGMode.setDescription('This value indicates the radio mode for the 802.11g radio. This setting is only valid for the 802.11g interface.')
enterpriseApRadioAntennaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("external", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioAntennaMode.setStatus('mandatory')
if mibBuilder.loadTexts: enterpriseApRadioAntennaMode.setDescription('This value indicates the antenna mode in use for the G-radio. The values are interpreted as follows: fixed(1) means use both built-in antennas, external(2) means use one external antenna on the right side. This setting is only valid for the 802.11g interface.')
enterpriseApRadioAntennaId = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApRadioAntennaId.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAntennaId.setDescription(' ')
enterpriseApRadioAntennaControlMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("Diversity", 1), ("Left", 2), ("Right", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioAntennaControlMethod.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAntennaControlMethod.setDescription('This value indicates the antenna control method for the radio index. Diversity(1) AP select the antenna automatically. Left (2) Use the left antenna. Right (3) Use the right antenna.')
enterpriseApRadioAntennaLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("Indoor", 1), ("Outdoor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioAntennaLocation.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAntennaLocation.setDescription('This value indicates the location of antenna for each radio index.')
enterpriseApRadioRogueApDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioRogueApDetection.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioRogueApDetection.setDescription('The status of Rogue AP detection for each index. enabled(1) To set rogue Ap detection enabled. disabled(2) To set rogue Ap detection disabled.')
enterpriseApRadioRogueApScanInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 10080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioRogueApScanInterval.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioRogueApScanInterval.setDescription('This value indicates the interval between each rogue AP scan.(unit: minutes)')
enterpriseApRadioRogueApScanDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioRogueApScanDuration.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioRogueApScanDuration.setDescription('This value indicates the rogue AP scan duratoin.(unit: minutes)')
enterpriseApRadioRogueApScanNow = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioRogueApScanNow.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioRogueApScanNow.setDescription('To force Ap to do rogue AP scan right away. enabled(1) To do Rogue AP scan right now. disabled(2) To set rogue Ap.')
enterpriseApRadioMICMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioMICMode.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioMICMode.setDescription('This value indicates the MIC mode status for this radio index. software(1) To set MIC mode to software. hardware(2) To set MIC mode to hardware.')
enterpriseApRadioSuperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioSuperMode.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioSuperMode.setDescription('This value indicates the super mode status for this radio index. enabled (1) To set super mode enabled. disabled(2) To set super mode disabled.')
enterpriseApRadioBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioBeaconInterval.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioBeaconInterval.setDescription('This value indicates the beacon interval for this radio index.')
enterpriseApRadioDataBeaconRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioDataBeaconRate.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioDataBeaconRate.setDescription('This value indicates the data beacon rate for the radio index.')
enterpriseApRadioChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioChannel.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioChannel.setDescription("This valud indicates the radio channel for the radio index. set channel 42/50/58/152/160 for static turbo mode, set channel 40/48/56/153/161 for dynamic turbo mode, set channel 36/40/44/48/52/56/60/64/149/153/157/161/165 when turbo mode is disabled. The value '0' indicates the radio interface cannot be enable in current country code.")
enterpriseApRadioFragmentLength = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioFragmentLength.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioFragmentLength.setDescription('This value indicates the fragment length for the radio index.(unit: Byte)')
enterpriseApRadioRTSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2347))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioRTSThreshold.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioRTSThreshold.setDescription('This value indicates the RTS Threshold for the radio index.(unit: Byte)')
enterpriseApRadioAntennaGainReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 15, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 29))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApRadioAntennaGainReduction.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioAntennaGainReduction.setDescription('This value indicates the antenna gain reduction for the radio index.(unit: dB)')
enterpriseApSNMPCommunityReadOnly = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSNMPCommunityReadOnly.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSNMPCommunityReadOnly.setDescription('The SNMP Read Only Community. The value if read, will only show ******.')
enterpriseApSNMPCommunityReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSNMPCommunityReadWrite.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSNMPCommunityReadWrite.setDescription('The SNMP Read Write Community. The value if read, will only show *****.')
enterpriseApSNMPTrapDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 3), )
if mibBuilder.loadTexts: enterpriseApSNMPTrapDestinationTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSNMPTrapDestinationTable.setDescription('Table of descriptive and status information about configuration of each trap receiving server.')
enterpriseApSNMPTrapDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 3, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "enterpriseApSNMPTrapDestinationIndex"))
if mibBuilder.loadTexts: enterpriseApSNMPTrapDestinationEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSNMPTrapDestinationEntry.setDescription('An entry in the table, containing information about configuration of one trap receiving server.')
enterpriseApSNMPTrapDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: enterpriseApSNMPTrapDestinationIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSNMPTrapDestinationIndex.setDescription('Index of the Trap Destination Table.')
enterpriseApSNMPTrapDestinationCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSNMPTrapDestinationCommunity.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSNMPTrapDestinationCommunity.setDescription('The SNMP Trap Community')
enterpriseApSNMPTrapDestinationIP = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSNMPTrapDestinationIP.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSNMPTrapDestinationIP.setDescription('The IP address of the trap receiving server.')
enterpriseApSNMPTrapDestinationState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSNMPTrapDestinationState.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSNMPTrapDestinationState.setDescription('This value indicates whether the trap receiving server is enabled.')
enterpriseApSNMPTrapFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4))
sysSystemUpTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSystemUpTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: sysSystemUpTrapEnabled.setDescription('This value indicates whether the sysSystemUp trap is enabled.')
sysSystemDownTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSystemDownTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: sysSystemDownTrapEnabled.setDescription('This value indicates whether the sysSystemDowntrap is enabled.')
sysRadiusServerChangedTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRadiusServerChangedTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: sysRadiusServerChangedTrapEnabled.setDescription('This value indicates whether the sysRadiusServerChanged trap is enabled.')
sysConfigFileVersionChangedTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigFileVersionChangedTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: sysConfigFileVersionChangedTrapEnabled.setDescription('This value indicates whether the sysConfigFileVersionChanged trap is enabled.')
dot11StationAssociationTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11StationAssociationTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: dot11StationAssociationTrapEnabled.setDescription('This value indicates whether the dot11StationAssociation trap is enabled.')
dot11StationReAssociationTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11StationReAssociationTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: dot11StationReAssociationTrapEnabled.setDescription('This value indicates whether the dot11StationReAssociation trap is enabled.')
dot11StationAuthenticationTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11StationAuthenticationTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: dot11StationAuthenticationTrapEnabled.setDescription('This value indicates whether the dot11StationAuthentication trap is enabled.')
dot11StationRequestFailTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11StationRequestFailTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: dot11StationRequestFailTrapEnabled.setDescription('This value indicates whether the dot11StationRequestFail trap is enabled.')
dot11InterfaceBFailTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11InterfaceBFailTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: dot11InterfaceBFailTrapEnabled.setDescription('This value indicates whether the dot11InterfaceBFail trap is enabled.')
dot11InterfaceAGFailTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11InterfaceAGFailTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: dot11InterfaceAGFailTrapEnabled.setDescription('This value indicates whether the dot11InterfaceAGFail trap is enabled.')
dot1xMacAddrAuthSuccessTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xMacAddrAuthSuccessTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: dot1xMacAddrAuthSuccessTrapEnabled.setDescription('This value indicates whether the dot1xMacAddrAuthSuccess trap is enabled.')
dot1xMacAddrAuthFailTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xMacAddrAuthFailTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: dot1xMacAddrAuthFailTrapEnabled.setDescription('This value indicates whether the dot1xMacAddrAuthFail trap is enabled.')
dot1xAuthNotInitiatedTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthNotInitiatedTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthNotInitiatedTrapEnabled.setDescription('This value indicates whether the dot1xAuthNotInitiated trap is enabled.')
dot1xAuthSuccessTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthSuccessTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthSuccessTrapEnabled.setDescription('This value indicates whether the dot1xAuthSuccess trap is enabled.')
dot1xAuthFailTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthFailTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthFailTrapEnabled.setDescription('This value indicates whether the dot1xAuthFail trap is enabled.')
localMacAddrAuthSuccessTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localMacAddrAuthSuccessTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: localMacAddrAuthSuccessTrapEnabled.setDescription('This value indicates whether the localMacAddrAuthSuccess trap is enabled.')
localMacAddrAuthFailTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localMacAddrAuthFailTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: localMacAddrAuthFailTrapEnabled.setDescription('This value indicates whether the localMacAddrAuthFail trap is enabled.')
pppLogonFailTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLogonFailTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: pppLogonFailTrapEnabled.setDescription('This value indicates whether the pppLogonFail trap is enabled.')
iappStationRoamedFromTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iappStationRoamedFromTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: iappStationRoamedFromTrapEnabled.setDescription('This value indicates whether the iappStationRoamedFrom trap is enabled.')
iappStationRoamedToTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iappStationRoamedToTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: iappStationRoamedToTrapEnabled.setDescription('This value indicates whether the iappStationRoamedTo trap is enabled.')
iappContextDataSentTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iappContextDataSentTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: iappContextDataSentTrapEnabled.setDescription('This value indicates whether the iappContextDataSent trap is enabled.')
sntpServerFailTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServerFailTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: sntpServerFailTrapEnabled.setDescription('This value indicates whether the sntpServerFail trap is enabled.')
dot1xSuppAuthenticatedTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xSuppAuthenticatedTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: dot1xSuppAuthenticatedTrapEnabled.setDescription('This value indicates whether the dot1xSupplicantAuthenticated trap is enabled.')
dot11FailedTransmitsTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11FailedTransmitsTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: dot11FailedTransmitsTrapEnabled.setDescription('This value indicates whether the dot11FailedTransmitsTrapEnabled trap is enabled.')
dot11AckFailuresTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AckFailuresTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: dot11AckFailuresTrapEnabled.setDescription('This value indicates whether the dot11AckFailuresTrapEnabled trap is enabled.')
dot11FcsErrorsTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11FcsErrorsTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: dot11FcsErrorsTrapEnabled.setDescription('This value indicates whether the dot11FcsErrorsTrapEnabled trap is enabled.')
rogueAPDetectedTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rogueAPDetectedTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: rogueAPDetectedTrapEnabled.setDescription('This value indicates whether the RogueAPDetectedTrapEnabled trap is enabled.')
possibleRogueAPDetectedTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 16, 4, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: possibleRogueAPDetectedTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: possibleRogueAPDetectedTrapEnabled.setDescription('This value indicates whether the RogueAPDetectedTrapEnabled trap is enabled.')
enterpriseApSessionTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 17, 1), )
if mibBuilder.loadTexts: enterpriseApSessionTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSessionTable.setDescription('This table list all sessions (wireless stations) status')
enterpriseApSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 17, 1, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "enterpriseApSessionIfIndex"), (0, "AP80-PRIVATE-MIB", "enterpriseApSessionStationAddres"))
if mibBuilder.loadTexts: enterpriseApSessionEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSessionEntry.setDescription('An entry in the table, containing information about status and statistics of the wireless station.')
enterpriseApSessionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 17, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: enterpriseApSessionIfIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSessionIfIndex.setDescription('Interface index for the radio this session is associated with.')
enterpriseApSessionStationAddres = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 17, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: enterpriseApSessionStationAddres.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSessionStationAddres.setDescription('The unique MAC Address of the station for this session.')
enterpriseApSessionAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 17, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApSessionAuthenticated.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSessionAuthenticated.setDescription('Whether the session is authenticated or not.')
enterpriseApSessionAssociated = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 17, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApSessionAssociated.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSessionAssociated.setDescription('Whether the session is associated or not. It is rare case that not associated stations show up in the table.')
enterpriseApSessionIsForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 17, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApSessionIsForwarding.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSessionIsForwarding.setDescription('Whether the AP is forwarding the client station traffic (higher level authentication)')
enterpriseApSessionKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("staticWep", 2), ("dynamicWep", 3), ("wpaWep", 4), ("wpaTkip", 5), ("wpaAes", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApSessionKeyType.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSessionKeyType.setDescription('The encryption key type used by the station. Note that wpa-wep is not supported')
enterpriseApSessionAssociationId = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 17, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApSessionAssociationId.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSessionAssociationId.setDescription('The internal association identify number')
enterpriseApSessionLastAuthenticatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 17, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApSessionLastAuthenticatedTime.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSessionLastAuthenticatedTime.setDescription('This is the time in hundredths of a second last time the client is authenticated. Note that a session may be authenticated multiple times. The value is related to the system startup')
enterpriseApSessionAssociatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 17, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApSessionAssociatedTime.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSessionAssociatedTime.setDescription('This is the time in hundredths of a second since the client associated. The value is related to the system startup')
enterpriseApSessionLastAssociatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 17, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApSessionLastAssociatedTime.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSessionLastAssociatedTime.setDescription('This is the time in hundredths of a second when the client associated in last session. The value is related to the system startup')
enterpriseApSessionLastDisassociatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 17, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApSessionLastDisassociatedTime.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSessionLastDisassociatedTime.setDescription('This is the time in hundredths of a second when the client disassociated in last session. The value is related to the system startup')
enterpriseApSessionTxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 17, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApSessionTxPacketCount.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSessionTxPacketCount.setDescription('This is the number of packets transmitted from the client to the AP. It includes data, control and management packets.')
enterpriseApSessionRxPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 17, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApSessionRxPacketCount.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSessionRxPacketCount.setDescription('This is the number of unicast packets transmitted from the AP to the client. It includes data, control and management packets.')
enterpriseApSessionTxByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 17, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApSessionTxByteCount.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSessionTxByteCount.setDescription('This is the number of bytes transmitted from the client to the AP. It includes the bytes of data, control and management packets.')
enterpriseApSessionRxByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 17, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApSessionRxByteCount.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSessionRxByteCount.setDescription('This is the number of unicast bytes transmitted from the AP to the client. It includes the bytes of data, control and management packets.')
enterpriseAPVapRadioTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 20, 1), )
if mibBuilder.loadTexts: enterpriseAPVapRadioTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseAPVapRadioTable.setDescription('Table of descriptive and status information about configuration of each radio.')
enterpriseAPVapRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 20, 1, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "enterpriseAPVapRadioIndex"))
if mibBuilder.loadTexts: enterpriseAPVapRadioEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseAPVapRadioEntry.setDescription('An entry in the table, containing information about configuration of one radio of the AP.')
enterpriseAPVapRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 20, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: enterpriseAPVapRadioIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseAPVapRadioIndex.setDescription('Radio Index for configuration.')
enterpriseAPVapRadioState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseAPVapRadioState.setStatus('current')
if mibBuilder.loadTexts: enterpriseAPVapRadioState.setDescription('This value indicates the state of the radio interface.')
enterpriseAPVapRadioClosedSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseAPVapRadioClosedSystem.setStatus('current')
if mibBuilder.loadTexts: enterpriseAPVapRadioClosedSystem.setDescription('This value indicates whether closed system is enabled for this radio interface.')
enterpriseAPVapRadioMaxAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseAPVapRadioMaxAssoc.setStatus('current')
if mibBuilder.loadTexts: enterpriseAPVapRadioMaxAssoc.setDescription('This value indicates the max number of clients allowed on this radio interface.')
enterpriseAPVapRadioTransmitKey = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseAPVapRadioTransmitKey.setStatus('current')
if mibBuilder.loadTexts: enterpriseAPVapRadioTransmitKey.setDescription('This value indicates default transmit key in use for this radio interface.')
enterpriseAPVapRadioDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 20, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseAPVapRadioDescription.setStatus('current')
if mibBuilder.loadTexts: enterpriseAPVapRadioDescription.setDescription('This value indicates the description for this radio interface.')
enterpriseAPVapRadioAuthTimeoutInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 20, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseAPVapRadioAuthTimeoutInterval.setStatus('current')
if mibBuilder.loadTexts: enterpriseAPVapRadioAuthTimeoutInterval.setDescription('This value indicates the Authentication Timeout interval for this radio interface.')
enterpriseAPVapRadioAssocTimeoutInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 20, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseAPVapRadioAssocTimeoutInterval.setStatus('current')
if mibBuilder.loadTexts: enterpriseAPVapRadioAssocTimeoutInterval.setDescription('This value indicates the Association Timeout interval for this radio interface.')
enterpriseAPVapRadioWPA2PMKSALifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 20, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseAPVapRadioWPA2PMKSALifeTime.setStatus('current')
if mibBuilder.loadTexts: enterpriseAPVapRadioWPA2PMKSALifeTime.setDescription('This value indicates the WPA2 PMSA Life Time for this radio interface.')
enterpriseApRadioWdsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 22, 1), )
if mibBuilder.loadTexts: enterpriseApRadioWdsTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioWdsTable.setDescription('Table of configuration information for Wds for each Radio interface.')
enterpriseApRadioWdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 22, 1, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "enterpriseApRadioIndex"))
if mibBuilder.loadTexts: enterpriseApRadioWdsEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioWdsEntry.setDescription('An entry in the table, containing information about configuration of peer Bridging for one radio of the AP. The table is indexed by radio Index (corresponding to enterpriseApRadioTable). The table does not contain the radio index as a member of the table.')
wdsApRole = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("roleAp", 1), ("roleBridgeMaster", 2), ("roleBridge", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsApRole.setStatus('current')
if mibBuilder.loadTexts: wdsApRole.setDescription('This value indicates the role of the Ap for this radio, roleAp(1): AP operation. roleBridgeMaster(2): Root-Bridge mode. roleBridge(4): Bridge Mode. relay wireless traffic.')
wdsChannelAutoSync = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 22, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsChannelAutoSync.setStatus('current')
if mibBuilder.loadTexts: wdsChannelAutoSync.setDescription('This value indicates the states of channel auto synchronize for this radio.')
wdsMasterSlaveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 22, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsMasterSlaveMode.setStatus('current')
if mibBuilder.loadTexts: wdsMasterSlaveMode.setDescription('This value indicates the Master/Slave mode for this radio. master (1) To set to master mode. slave (2) To set to slave mode.')
enterpriseApRadioWdsPeerTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 22, 2), )
if mibBuilder.loadTexts: enterpriseApRadioWdsPeerTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioWdsPeerTable.setDescription('Table of configuration information for Wds Peers for each Radio interface.')
enterpriseApRadioWdsPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 22, 2, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "enterpriseApRadioIndex"), (0, "AP80-PRIVATE-MIB", "wdsPeerIndex"))
if mibBuilder.loadTexts: enterpriseApRadioWdsPeerEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApRadioWdsPeerEntry.setDescription('An entry in the table, containing information about configuration of peer Bridging for one radio of the AP. The table is indexed by radio Index (corresponding to enterpriseApRadioTable) and the peer index (Up to 8). The table does not contain the radio index as a member of the table.')
wdsPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 22, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: wdsPeerIndex.setStatus('current')
if mibBuilder.loadTexts: wdsPeerIndex.setDescription('Peer Index for the radio interface.')
wdsPeerBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 22, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsPeerBssid.setStatus('current')
if mibBuilder.loadTexts: wdsPeerBssid.setDescription('The BSSID for this peer.')
enterpriseApWMMTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 1), )
if mibBuilder.loadTexts: enterpriseApWMMTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMTable.setDescription('The table of WMM information for each radio interface.')
enterpriseApWMMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 1, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "enterpriseApWMMModeIndex"))
if mibBuilder.loadTexts: enterpriseApWMMEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMEntry.setDescription('An entry of table, contains the WMM information.')
enterpriseApWMMModeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: enterpriseApWMMModeIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMModeIndex.setDescription('Peer Index for the radio interface.')
enterpriseApWMMMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("support", 2), ("required", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApWMMMode.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMMode.setDescription('This value indicates the WMM mode for the radio interface. disabled(1) To set WMM mode disabled. support (2) To set WMM mode supported. required(3) To set WMM mode required.')
enterpriseApWMMAckPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 2), )
if mibBuilder.loadTexts: enterpriseApWMMAckPolicyTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMAckPolicyTable.setDescription('The table of WMM Ack Policy information for each ac number on the radio interface.')
enterpriseApWMMAckPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 2, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "enterpriseApWMMAckPolicyIndex"))
if mibBuilder.loadTexts: enterpriseApWMMAckPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMAckPolicyEntry.setDescription('An entry of table, contains the WMM Ack Policy information.')
enterpriseApWMMAckPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApWMMAckPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMAckPolicyIndex.setDescription('The value indicates the AC number for each radio interface. 0 --> AC0 (Best Effect) 1 --> AC1 (Background) 2 --> AC2 (Video) 3 --> AC3 (Voice)')
enterpriseApWMMACKPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("acknowledge", 1), ("NoAcknowledge", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApWMMACKPolicy.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMACKPolicy.setDescription('This value indicates WMM Ack Policy state of each ac number for the radio interface.')
enterpriseApWMMBSSParamTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 3), )
if mibBuilder.loadTexts: enterpriseApWMMBSSParamTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMBSSParamTable.setDescription('The table of WMM BSS parameter information.')
enterpriseApWMMBSSParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 3, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "enterpriseApWMMBSSParamIndex"))
if mibBuilder.loadTexts: enterpriseApWMMBSSParamEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMBSSParamEntry.setDescription('An entry of table, contains the WMM BSS parameter information for each ac number on the radio interface.')
enterpriseApWMMBSSParamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApWMMBSSParamIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMBSSParamIndex.setDescription('The value indicates the AC number for each radio interface. 0 --> AC0 (Best Effort) 1 --> AC1 (Background) 2 --> AC2 (Video) 3 --> AC3 (Voice)')
enterpriseApWMMBSSParamLogCwMin = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApWMMBSSParamLogCwMin.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMBSSParamLogCwMin.setDescription('This value indicates the WMM BSS parameter logCwMin of AC number for the radio interface.')
enterpriseApWMMBSSParamLogCwMax = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApWMMBSSParamLogCwMax.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMBSSParamLogCwMax.setDescription('This value indicates the WMM BSS parameter logCwMax of each AC number for the radio interface.')
enterpriseApWMMBSSParamAIFSN = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApWMMBSSParamAIFSN.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMBSSParamAIFSN.setDescription('This value indicates the WMM BSS parameters AIFSN of each AC number for the radio interface.')
enterpriseApWMMBSSParamTXOPLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApWMMBSSParamTXOPLimit.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMBSSParamTXOPLimit.setDescription('This value indicates the WMM BSS parameters TXOP Limit of each AC number for the radio interface.')
enterpriseApWMMBSSParamAdmissionCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ebabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApWMMBSSParamAdmissionCtrl.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMBSSParamAdmissionCtrl.setDescription('This value indicates the BSS parameters Admission Control of each AC number for the radio interface.')
enterpriseApWMMAPParamTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 4), )
if mibBuilder.loadTexts: enterpriseApWMMAPParamTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMAPParamTable.setDescription('The table of configuration information for WMM AP parameters for each ac number on the radio interface.')
enterpriseApWMMAPParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 4, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "enterpriseApWMMAPParamIndex"))
if mibBuilder.loadTexts: enterpriseApWMMAPParamEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMAPParamEntry.setDescription('An entry table, include the Ap parameter information for each ac numbers.')
enterpriseApWMMAPParamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enterpriseApWMMAPParamIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMAPParamIndex.setDescription('The value indicates the AC number for each radio interface. 0 --> AC0 (Best Effort) 1 --> AC1 (Background) 2 --> AC2 (Video) 3 --> AC3 (Voice)')
enterpriseApWMMAPParamLogCwMin = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApWMMAPParamLogCwMin.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMAPParamLogCwMin.setDescription('This value indicates the LogCwMin of AP parameter for each AC number on the radio interface.')
enterpriseApWMMAPParamLogCwMax = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApWMMAPParamLogCwMax.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMAPParamLogCwMax.setDescription('This value indicates the LogCwMax of AP parameter for each AC number on the radio interface.')
enterpriseApWMMAPParamAIFSN = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApWMMAPParamAIFSN.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMAPParamAIFSN.setDescription('This value indicates the AIFSN of AP parameter for each AC number on the radio interface.')
enterpriseApWMMAPParamTXOPLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApWMMAPParamTXOPLimit.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMAPParamTXOPLimit.setDescription('This value indicates the TXOP Limit of AP parameter for each AC number on the radio interface.')
enterpriseApWMMAPParamAdmissionCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 24, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ebabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApWMMAPParamAdmissionCtrl.setStatus('current')
if mibBuilder.loadTexts: enterpriseApWMMAPParamAdmissionCtrl.setDescription('This value indicates the admission control of AP parameter for each AC number on the radio interface.')
enterpriseApSTPBridgeStatus = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSTPBridgeStatus.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSTPBridgeStatus.setDescription('This value indicates the STP bridge status for the radio interface.')
enterpriseApSTPBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 25, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSTPBridgePriority.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSTPBridgePriority.setDescription('This value indicates the STP bridge priority for the radio interface.')
enterpriseApSTPBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 25, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSTPBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSTPBridgeMaxAge.setDescription('This value indicates the STP bridge max age for the radio interface.(unit: second)')
enterpriseApSTPHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 25, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSTPHelloTime.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSTPHelloTime.setDescription('This value indicates the STP hello time for the radio interface.(unit: second)')
enterpriseApSTPBridgeForwardingDelay = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 25, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSTPBridgeForwardingDelay.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSTPBridgeForwardingDelay.setDescription('This value indicates the STP forwarding delay for the radio interface.(unit: second)')
enterpriseApSTPRadioInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 25, 6))
enterpriseApSTPNodeTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 25, 6, 1), )
if mibBuilder.loadTexts: enterpriseApSTPNodeTable.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSTPNodeTable.setDescription('The table of STP link Path Cost and link port priority information for each nodes on radio interface.')
enterpriseApSTPNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 25, 6, 1, 1), ).setIndexNames((0, "AP80-PRIVATE-MIB", "enterpriseApSTPNodeIndex"))
if mibBuilder.loadTexts: enterpriseApSTPNodeEntry.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSTPNodeEntry.setDescription('An entry in a table, contain the link path cost and link port priroity information.')
enterpriseApSTPNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 25, 6, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: enterpriseApSTPNodeIndex.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSTPNodeIndex.setDescription('Peer Index for the nodes on the radio interface.')
enterpriseApSTPNodeLinkPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 25, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSTPNodeLinkPathCost.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSTPNodeLinkPathCost.setDescription('This value indicates the link path cost for the node on this radio interface.')
enterpriseApSTPNodeLinkPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 25, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSTPNodeLinkPortPriority.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSTPNodeLinkPortPriority.setDescription('This value indicates the link path cost for the node on this radio interface.')
enterpriseApSTPEthernetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 25, 7))
enterpriseApSTPEthernetLinkPathCost = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 25, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSTPEthernetLinkPathCost.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSTPEthernetLinkPathCost.setDescription('This value indicates link path cost for ethernet interface.')
enterpriseApSTPEthernetLinkPortPriority = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 2, 25, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseApSTPEthernetLinkPortPriority.setStatus('current')
if mibBuilder.loadTexts: enterpriseApSTPEthernetLinkPortPriority.setDescription('This value indicates link port prirorty for ethernet interface.')
mibBuilder.exportSymbols("AP80-PRIVATE-MIB", enterpriseApFilterProtocolEntry=enterpriseApFilterProtocolEntry, dot11AuthenticationKey=dot11AuthenticationKey, enterpriseAPVapRadio=enterpriseAPVapRadio, localMacAddrAuthFail=localMacAddrAuthFail, enterpriseApNativeVlanTable=enterpriseApNativeVlanTable, enterpriseApSTPEthernetLinkPortPriority=enterpriseApSTPEthernetLinkPortPriority, lineDataBits=lineDataBits, enterpriseApRadioEntry=enterpriseApRadioEntry, enterpriseApSyslog=enterpriseApSyslog, enterpriseApRadioRTSThreshold=enterpriseApRadioRTSThreshold, enterpriseApSessionRxByteCount=enterpriseApSessionRxByteCount, sysSystemDownTrapEnabled=sysSystemDownTrapEnabled, dot11StationAuthenticationTrapEnabled=dot11StationAuthenticationTrapEnabled, localMacAddrAuthFailTrapEnabled=localMacAddrAuthFailTrapEnabled, portFlowCtrlCfg=portFlowCtrlCfg, enterpriseApWMMAckPolicyIndex=enterpriseApWMMAckPolicyIndex, enterpriseApRadioAntennaLocation=enterpriseApRadioAntennaLocation, netConfigDefaultGateway=netConfigDefaultGateway, netConfigSubnetMask=netConfigSubnetMask, enterpriseApWMMBSSParamEntry=enterpriseApWMMBSSParamEntry, swBootRomVer=swBootRomVer, enterpriseApSTPEthernetLinkPathCost=enterpriseApSTPEthernetLinkPathCost, userName=userName, enterpriseApWMMAPParamEntry=enterpriseApWMMAPParamEntry, dot11AuthenticationAcctInterimUpdate=dot11AuthenticationAcctInterimUpdate, enterpriseApFilterProtocolIndex=enterpriseApFilterProtocolIndex, enterpriseApRadioWds=enterpriseApRadioWds, enterpriseApWMMAckPolicyTable=enterpriseApWMMAckPolicyTable, enterpriseApWMMAPParamLogCwMin=enterpriseApWMMAPParamLogCwMin, iappStationRoamedFromTrapEnabled=iappStationRoamedFromTrapEnabled, enterpriseApSessionIfIndex=enterpriseApSessionIfIndex, portIndex=portIndex, enterpriseApSTPNodeTable=enterpriseApSTPNodeTable, enterpriseAPVapRadioTransmitKey=enterpriseAPVapRadioTransmitKey, dot11Vap8021xSessionKeyRefreshRate=dot11Vap8021xSessionKeyRefreshRate, dot11StationReAssociationTrapEnabled=dot11StationReAssociationTrapEnabled, enterpriseApWMMAPParamTXOPLimit=enterpriseApWMMAPParamTXOPLimit, dot11InterfaceBFailTrapEnabled=dot11InterfaceBFailTrapEnabled, enterpriseApSessionLastAssociatedTime=enterpriseApSessionLastAssociatedTime, dot118021xReauthenticationTimeout=dot118021xReauthenticationTimeout, dot11AuthenticationAcctPort=dot11AuthenticationAcctPort, dot1xAuthenticatorMacAddr=dot1xAuthenticatorMacAddr, enterpriseApSNTPDSTStartDay=enterpriseApSNTPDSTStartDay, enterpriseApFilterProtocolName=enterpriseApFilterProtocolName, dot11AuthenticationVLANIDFormat=dot11AuthenticationVLANIDFormat, enterpriseApSNMPTrapDestinationEntry=enterpriseApSNMPTrapDestinationEntry, sysNotificationTree=sysNotificationTree, enterpriseApDNSPrimaryServer=enterpriseApDNSPrimaryServer, enterpriseApWMMAckPolicyEntry=enterpriseApWMMAckPolicyEntry, sntpServerFail=sntpServerFail, transferType=transferType, enterpriseApSecurityWPAMode=enterpriseApSecurityWPAMode, dot1xMacAddrAuthFail=dot1xMacAddrAuthFail, enterpriseApWMMModeIndex=enterpriseApWMMModeIndex, lineTable=lineTable, dot11Vap8021xIndex=dot11Vap8021xIndex, enterpriseApRadioDataRate=enterpriseApRadioDataRate, iappContextDataSent=iappContextDataSent, enterpriseApRadioDescription=enterpriseApRadioDescription, enterpriseApRadioRogueApScanDuration=enterpriseApRadioRogueApScanDuration, pppLogonFailTrapEnabled=pppLogonFailTrapEnabled, enterpriseApSTPBridgePriority=enterpriseApSTPBridgePriority, enterpriseApSyslogServerIndex=enterpriseApSyslogServerIndex, uplinkPortMACAddrFilteringTable=uplinkPortMACAddrFilteringTable, enterpriseApSessionAssociated=enterpriseApSessionAssociated, portType=portType, wdsApRole=wdsApRole, dot1xSupplicantAuthenticated=dot1xSupplicantAuthenticated, arubaAp=arubaAp, enterpriseAPVapRadioAuthTimeoutInterval=enterpriseAPVapRadioAuthTimeoutInterval, dot11VapAuthMACAuthenticationTimeout=dot11VapAuthMACAuthenticationTimeout, dot11Vap8021xState=dot11Vap8021xState, enterpriseApRadioTransmitPower=enterpriseApRadioTransmitPower, enterpriseApSTP=enterpriseApSTP, enterpriseApSyslogConsoleState=enterpriseApSyslogConsoleState, enterpriseApWMMAPParamAdmissionCtrl=enterpriseApWMMAPParamAdmissionCtrl, dot11NotificationObjects=dot11NotificationObjects, wdsPeerBssid=wdsPeerBssid, dot11AuthenticationRetransmit=dot11AuthenticationRetransmit, swHardwareVer=swHardwareVer, dot1xAuthNotInitiated=dot1xAuthNotInitiated, enterpriseApSessionTxByteCount=enterpriseApSessionTxByteCount, uplinkPortMACAddrFilterAddMac=uplinkPortMACAddrFilterAddMac, uplinkPortMacAddrIndex=uplinkPortMacAddrIndex, enterpriseApDNS=enterpriseApDNS, dot1xMacAddrAuthFailTrapEnabled=dot1xMacAddrAuthFailTrapEnabled, enterpriseApRadioAntennaControlMethod=enterpriseApRadioAntennaControlMethod, dot11AuthenticationSupplicantEntry=dot11AuthenticationSupplicantEntry, dot11Station=dot11Station, enterpriseApSNMP=enterpriseApSNMP, enterpriseAPVapRadioState=enterpriseAPVapRadioState, enterpriseApSyslogServerIPAddress=enterpriseApSyslogServerIPAddress, dot11AuthenticationServerEntry=dot11AuthenticationServerEntry, enterpriseApSecurityWEPEnabled=enterpriseApSecurityWEPEnabled, enterpriseApSessionAssociationId=enterpriseApSessionAssociationId, enterpriseApRadioMaxAssoc=enterpriseApRadioMaxAssoc, enterpriseApSTPBridgeForwardingDelay=enterpriseApSTPBridgeForwardingDelay, dot11Notifications=dot11Notifications, portName=portName, iappStationRoamedTo=iappStationRoamedTo, sysRadiusServerChanged=sysRadiusServerChanged, dot11AuthenticationPort=dot11AuthenticationPort, enterpriseApSNMPTrapFilters=enterpriseApSNMPTrapFilters, lineIndex=lineIndex, enterpriseApSNTPSecondaryServer=enterpriseApSNTPSecondaryServer, enterpriseApSshServerPort=enterpriseApSshServerPort, enterpriseApSessionIsForwarding=enterpriseApSessionIsForwarding, enterpriseApSNTPState=enterpriseApSNTPState, enterpriseApSessionTxPacketCount=enterpriseApSessionTxPacketCount, enterpriseApAdmin=enterpriseApAdmin, portFlowCtrlStatus=portFlowCtrlStatus, sysRadiusServerChangedTrapEnabled=sysRadiusServerChangedTrapEnabled, dot11AuthenticationSupplicantTable=dot11AuthenticationSupplicantTable, portAutonegotiation=portAutonegotiation, dot11AuthenticationMACAddressFormat=dot11AuthenticationMACAddressFormat, enterpriseApFilterUplinkPortMACAddrFilter=enterpriseApFilterUplinkPortMACAddrFilter, enterpriseApSTPNodeEntry=enterpriseApSTPNodeEntry, sysConfigFileVersionChanged=sysConfigFileVersionChanged, pppLogonFail=pppLogonFail, nativeVlanIfIndex=nativeVlanIfIndex, enterpriseApFilterControlInterClientSTAsCommun=enterpriseApFilterControlInterClientSTAsCommun, enterpriseApRadioDataBeaconRate=enterpriseApRadioDataBeaconRate, dot11NotificationTree=dot11NotificationTree, deleteMacAddr=deleteMacAddr, enterpriseApWMMAPParamIndex=enterpriseApWMMAPParamIndex, dot11AckFailuresTrapEnabled=dot11AckFailuresTrapEnabled, iappStationRoamedFrom=iappStationRoamedFrom, nativeVlanVlanId=nativeVlanVlanId, dot11AuthenticationServer=dot11AuthenticationServer, dot1xMacAddrAuthSuccessTrapEnabled=dot1xMacAddrAuthSuccessTrapEnabled, lineParity=lineParity, enterpriseApSessionAssociatedTime=enterpriseApSessionAssociatedTime, enterpriseApRadioTurboMode=enterpriseApRadioTurboMode, enterpriseApSecurityAuthType=enterpriseApSecurityAuthType, enterpriseApSNMPTrapDestinationTable=enterpriseApSNMPTrapDestinationTable, enterpriseApWMMBSSParamAIFSN=enterpriseApWMMBSSParamAIFSN, DisplayString=DisplayString, wdsMasterSlaveMode=wdsMasterSlaveMode, enterpriseApFilterProtocolISODesignator=enterpriseApFilterProtocolISODesignator, enterpriseApSecurityWEPKeyType=enterpriseApSecurityWEPKeyType, uplinkPortMACAddr=uplinkPortMACAddr, enterpriseApPortMgnt=enterpriseApPortMgnt, enterpriseApAdminPassword=enterpriseApAdminPassword, dot11FilterStatus=dot11FilterStatus, restartOpCodeFile=restartOpCodeFile, enterpriseApRadioIndex=enterpriseApRadioIndex, dot118021xSuppIndex=dot118021xSuppIndex, uplinkPortMACAddrFilterStatus=uplinkPortMACAddrFilterStatus, iappContextDataSentTrapEnabled=iappContextDataSentTrapEnabled, dot1xAuthSuccessTrapEnabled=dot1xAuthSuccessTrapEnabled, enterpriseApSyslogLevel=enterpriseApSyslogLevel, enterpriseApRadioAutoChannel=enterpriseApRadioAutoChannel, rogueAPDetectedTrapEnabled=rogueAPDetectedTrapEnabled, localMacAddrAuthSuccess=localMacAddrAuthSuccess, enterpriseApVLANState=enterpriseApVLANState, enterpriseApSecurity=enterpriseApSecurity, enterpriseApSyslogServerPort=enterpriseApSyslogServerPort, enterpriseApSyslogServerEntry=enterpriseApSyslogServerEntry, enterpriseApRadioState=enterpriseApRadioState, portTable=portTable, enterpriseApRadioRogueApScanNow=enterpriseApRadioRogueApScanNow, enterpriseApLineMgnt=enterpriseApLineMgnt, enterpriseAPVapRadioMaxAssoc=enterpriseAPVapRadioMaxAssoc, enterpriseApSecurityWPAKeyType=enterpriseApSecurityWPAKeyType, enterpriseApSNMPTrapDestinationIndex=enterpriseApSNMPTrapDestinationIndex, enterpriseApRadioTransmitKey=enterpriseApRadioTransmitKey, enterpriseApSessionKeyType=enterpriseApSessionKeyType, dot11VapAuthenticationTable=dot11VapAuthenticationTable, dot11MACAuthenticationFilter=dot11MACAuthenticationFilter, dot11AuthenticationServerIndex=dot11AuthenticationServerIndex, portEntry=portEntry, enterpriseApSession=enterpriseApSession, enterpriseApFilterControlEthernet=enterpriseApFilterControlEthernet, dot11StationAuthentication=dot11StationAuthentication, lineSpeed=lineSpeed, enterpriseApRadio=enterpriseApRadio, enterpriseApSTPHelloTime=enterpriseApSTPHelloTime, enterpriseApRadioAntennaMode=enterpriseApRadioAntennaMode, enterpriseApWMMAPParamLogCwMax=enterpriseApWMMAPParamLogCwMax, enterpriseApSyslogState=enterpriseApSyslogState, dot1xAuthSuccess=dot1xAuthSuccess, enterpriseApRadioAntennaId=enterpriseApRadioAntennaId, netConfigHttpsPort=netConfigHttpsPort, enterpriseApSecurityWPACipherSuite=enterpriseApSecurityWPACipherSuite, enterpriseApSTPNodeLinkPathCost=enterpriseApSTPNodeLinkPathCost, enterpriseApSessionRxPacketCount=enterpriseApSessionRxPacketCount, enterpriseApSessionLastAuthenticatedTime=enterpriseApSessionLastAuthenticatedTime, password=password, enterpriseApSNTPDSTEndDay=enterpriseApSNTPDSTEndDay, enterpriseApSNTPDSTEndMonth=enterpriseApSNTPDSTEndMonth, sysSystemDown=sysSystemDown, enterpriseApSNMPTrapDestinationIP=enterpriseApSNMPTrapDestinationIP, dot11AuthenticationEntry=dot11AuthenticationEntry, enterpriseApSshTelnetServerEnabled=enterpriseApSshTelnetServerEnabled, dot1xAuthNotInitiatedTrapEnabled=dot1xAuthNotInitiatedTrapEnabled, dot11StationRequestFail=dot11StationRequestFail, dot11InterfaceAGFail=dot11InterfaceAGFail, enterpriseApFilterProtocolState=enterpriseApFilterProtocolState, enterpriseAPVapRadioEntry=enterpriseAPVapRadioEntry, dot118021xSessionKeyRefreshRate=dot118021xSessionKeyRefreshRate, arubaEnterpriseMibModules=arubaEnterpriseMibModules, dot11InterfaceAGFailTrapEnabled=dot11InterfaceAGFailTrapEnabled, fileServer=fileServer, enterpriseAPVapRadioDescription=enterpriseAPVapRadioDescription, enterpriseApSessionEntry=enterpriseApSessionEntry, enterpriseAPVapRadioTable=enterpriseAPVapRadioTable, enterpriseApSNMPTrapDestinationCommunity=enterpriseApSNMPTrapDestinationCommunity, netConfigDHCPState=netConfigDHCPState, dot11FilterAddress=dot11FilterAddress, enterpriseApWMMTable=enterpriseApWMMTable, enterpriseApSecurityWPACipher=enterpriseApSecurityWPACipher, enterpriseAPdot11=enterpriseAPdot11, enterpriseApRadioWdsEntry=enterpriseApRadioWdsEntry, wdsPeerIndex=wdsPeerIndex, netConfigIPAddress=netConfigIPAddress, enterpriseApSTPBridgeStatus=enterpriseApSTPBridgeStatus, enterpriseApRadioRogueApDetection=enterpriseApRadioRogueApDetection, dot11FilterEntry=dot11FilterEntry, fileType=fileType, dot11StationAssociation=dot11StationAssociation, MacAddress=MacAddress, portCapabilities=portCapabilities, dot11VapAuthMACAuthenticationType=dot11VapAuthMACAuthenticationType, swSerialNumber=swSerialNumber, sysNotifications=sysNotifications, transferStart=transferStart, enterpriseApVLAN=enterpriseApVLAN, enterpriseApSNTPPrimaryServer=enterpriseApSNTPPrimaryServer, enterpriseApFileTransferMgt=enterpriseApFileTransferMgt, portSpeedDpxStatus=portSpeedDpxStatus, dot11Vap8021xReauthenticationTimeout=dot11Vap8021xReauthenticationTimeout, netConfigHttpState=netConfigHttpState, enterpriseApRadioMICMode=enterpriseApRadioMICMode, enterpriseApWMMBSSParamLogCwMin=enterpriseApWMMBSSParamLogCwMin, destFile=destFile, enterpriseApSTPRadioInterface=enterpriseApSTPRadioInterface, localMacAddrAuthSuccessTrapEnabled=localMacAddrAuthSuccessTrapEnabled, dot11Vap8021xBroadcastKeyRefreshRate=dot11Vap8021xBroadcastKeyRefreshRate, enterpriseApSecurityWPAPSKType=enterpriseApSecurityWPAPSKType, enterpriseApRadioSuperMode=enterpriseApRadioSuperMode, iappStationRoamedToTrapEnabled=iappStationRoamedToTrapEnabled, wlsrOutDoorApMibModules=wlsrOutDoorApMibModules, sysSystemUp=sysSystemUp, enterpriseApFilterProtocolTable=enterpriseApFilterProtocolTable, dot11AuthenticationTimeout=dot11AuthenticationTimeout, enterpriseApSecurityWPAPreAuthentication=enterpriseApSecurityWPAPreAuthentication, enterpriseApVLANNativeId=enterpriseApVLANNativeId, enterpriseApSshServerEnabled=enterpriseApSshServerEnabled, dot11RequestType=dot11RequestType, sysNotificationObjects=sysNotificationObjects, dot118021xState=dot118021xState, enterpriseApAdminUser=enterpriseApAdminUser, enterpriseApSNTPTimezone=enterpriseApSNTPTimezone, enterpriseApWMMBSSParamAdmissionCtrl=enterpriseApWMMBSSParamAdmissionCtrl)
mibBuilder.exportSymbols("AP80-PRIVATE-MIB", enterpriseApSTPBridgeMaxAge=enterpriseApSTPBridgeMaxAge, sysConfigFileVersionChangedTrapEnabled=sysConfigFileVersionChangedTrapEnabled, netConfigHttpPort=netConfigHttpPort, portSpeedDpxCfg=portSpeedDpxCfg, enterpriseApWMMMode=enterpriseApWMMMode, enterpriseApSessionLastDisassociatedTime=enterpriseApSessionLastDisassociatedTime, dot118021xSuppUser=dot118021xSuppUser, enterpriseApSyslogServerTable=enterpriseApSyslogServerTable, enterpriseApSecurityIndex=enterpriseApSecurityIndex, restartControl=restartControl, dot1xAuthFailTrapEnabled=dot1xAuthFailTrapEnabled, wdsChannelAutoSync=wdsChannelAutoSync, srcFile=srcFile, enterpriseApSecurityWPAPSK=enterpriseApSecurityWPAPSK, enterpriseApSNTPDSTStartMonth=enterpriseApSNTPDSTStartMonth, enterpriseAPVapRadioClosedSystem=enterpriseAPVapRadioClosedSystem, dot118021xBroadcastKeyRefreshRate=dot118021xBroadcastKeyRefreshRate, dot11FilterDefault=dot11FilterDefault, enterpriseApRadioGMode=enterpriseApRadioGMode, dot11StationAssociationTrapEnabled=dot11StationAssociationTrapEnabled, netConfigHttpsState=netConfigHttpsState, enterpriseApRadioAntennaGainReduction=enterpriseApRadioAntennaGainReduction, enterpriseApSyslogServerState=enterpriseApSyslogServerState, enterpriseApSNMPCommunityReadOnly=enterpriseApSNMPCommunityReadOnly, enterpriseApSecurityTable=enterpriseApSecurityTable, enterpriseApWMM=enterpriseApWMM, sntpNotificationTree=sntpNotificationTree, enterpriseApWMMACKPolicy=enterpriseApWMMACKPolicy, dot11FailedTransmitsTrapEnabled=dot11FailedTransmitsTrapEnabled, enterpriseAPVapRadioWPA2PMKSALifeTime=enterpriseAPVapRadioWPA2PMKSALifeTime, enterpriseApWMMBSSParamTable=enterpriseApWMMBSSParamTable, enterpriseApSNTPDST=enterpriseApSNTPDST, dot11StationReAssociation=dot11StationReAssociation, enterpriseApSTPEthernetInterface=enterpriseApSTPEthernetInterface, enterpriseApSessionTable=enterpriseApSessionTable, enterpriseApSessionStationAddres=enterpriseApSessionStationAddres, dot1xAuthFail=dot1xAuthFail, dot11FilterTable=dot11FilterTable, enterpriseApSNMPTrapDestinationState=enterpriseApSNMPTrapDestinationState, dot118021xSuppPasswd=dot118021xSuppPasswd, enterpriseApSecurityWPAPmksaLifetime=enterpriseApSecurityWPAPmksaLifetime, enterpriseApWMMAPParamAIFSN=enterpriseApWMMAPParamAIFSN, dot11ApIpAddress=dot11ApIpAddress, dot11InterfaceBFail=dot11InterfaceBFail, enterpriseApSecuritySharedKeyLen=enterpriseApSecuritySharedKeyLen, dot11FcsErrorsTrapEnabled=dot11FcsErrorsTrapEnabled, dot11AuthenticationServerTable=dot11AuthenticationServerTable, enterpriseApFilterControl=enterpriseApFilterControl, enterpriseApDNSSecondaryServer=enterpriseApDNSSecondaryServer, enterpriseApFilterControlAPManage=enterpriseApFilterControlAPManage, enterpriseApResetMgt=enterpriseApResetMgt, possibleRogueAPDetectedTrapEnabled=possibleRogueAPDetectedTrapEnabled, enterpriseApRadioChannel=enterpriseApRadioChannel, enterpriseApWMMAPParamTable=enterpriseApWMMAPParamTable, status=status, enterpriseApSNMPCommunityReadWrite=enterpriseApSNMPCommunityReadWrite, lineStopBits=lineStopBits, enterpriseApRadioWdsTable=enterpriseApRadioWdsTable, enterpriseApRadioWdsPeerEntry=enterpriseApRadioWdsPeerEntry, dot1xMacAddrAuthSuccess=dot1xMacAddrAuthSuccess, enterpriseApRadioWdsPeerTable=enterpriseApRadioWdsPeerTable, enterpriseApNativeVlanEntry=enterpriseApNativeVlanEntry, enterpriseAPVapRadioIndex=enterpriseAPVapRadioIndex, enterpriseApRadioClosedSystem=enterpriseApRadioClosedSystem, enterpriseApWMMBSSParamIndex=enterpriseApWMMBSSParamIndex, dot11MacAddr=dot11MacAddr, enterpriseApWMMEntry=enterpriseApWMMEntry, dot118021xSuppState=dot118021xSuppState, sntpNotificationObjects=sntpNotificationObjects, enterpriseApRadioFragmentLength=enterpriseApRadioFragmentLength, enterpriseApRadioBeaconInterval=enterpriseApRadioBeaconInterval, sysSystemUpTrapEnabled=sysSystemUpTrapEnabled, aruba=aruba, dot11MACAuthenticationType=dot11MACAuthenticationType, enterpriseApRadioRogueApScanInterval=enterpriseApRadioRogueApScanInterval, enterpriseApSsh=enterpriseApSsh, sntpNotifications=sntpNotifications, dot11StationRequestFailTrapEnabled=dot11StationRequestFailTrapEnabled, dot1xSuppAuthenticatedTrapEnabled=dot1xSuppAuthenticatedTrapEnabled, enterpriseAPVapRadioAssocTimeoutInterval=enterpriseAPVapRadioAssocTimeoutInterval, sntpServerFailTrapEnabled=sntpServerFailTrapEnabled, TruthValue=TruthValue, swOpCodeVer=swOpCodeVer, enterpriseApWMMBSSParamLogCwMax=enterpriseApWMMBSSParamLogCwMax, enterpriseApWMMBSSParamTXOPLimit=enterpriseApWMMBSSParamTXOPLimit, enterpriseApSecurityEntry=enterpriseApSecurityEntry, enterpriseApSessionAuthenticated=enterpriseApSessionAuthenticated, enterpriseApSys=enterpriseApSys, dot11ReasonCode=dot11ReasonCode, enterpriseApSNTP=enterpriseApSNTP, uplinkPortMACAddrFilteringEntry=uplinkPortMACAddrFilteringEntry, enterpriseApIpMgt=enterpriseApIpMgt, nativeVlanSsidNumber=nativeVlanSsidNumber, enterpriseApSTPNodeIndex=enterpriseApSTPNodeIndex, enterpriseApSTPNodeLinkPortPriority=enterpriseApSTPNodeLinkPortPriority, lineEntry=lineEntry, dot11VapAuthenticationEntry=dot11VapAuthenticationEntry, enterpriseApRadioTable=enterpriseApRadioTable)
