#
# PySNMP MIB module HIRSCHMANN-GENERIC-ERROR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HIRSCHMANN-GENERIC-ERROR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:30:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Unsigned32, ObjectIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, IpAddress, iso, ModuleIdentity, Counter32, MibIdentifier, Counter64, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "ObjectIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "IpAddress", "iso", "ModuleIdentity", "Counter32", "MibIdentifier", "Counter64", "Gauge32", "Bits")
TextualConvention, DisplayString, AutonomousType, TestAndIncr = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "AutonomousType", "TestAndIncr")
hirschmann = MibIdentifier((1, 3, 6, 1, 4, 1, 248))
hmMgmtSEEErrorIDGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 16, 2))
hmMgmtSEInfoIDGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 16, 3))
hmRedundancyConflict = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 1))
if mibBuilder.loadTexts: hmRedundancyConflict.setStatus('current')
if mibBuilder.loadTexts: hmRedundancyConflict.setDescription('Conflict Redundancy Protocols: Cannot enable {0} because of enabled {1}.')
hmRedundancyConflictPort = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 2))
if mibBuilder.loadTexts: hmRedundancyConflictPort.setStatus('current')
if mibBuilder.loadTexts: hmRedundancyConflictPort.setDescription('Conflict Redundancy Protocols: Cannot enable {0} because of enabled {1} on Ring Port {2}.')
hmMaxNumExceeded = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 3))
if mibBuilder.loadTexts: hmMaxNumExceeded.setStatus('current')
if mibBuilder.loadTexts: hmMaxNumExceeded.setDescription('Max. number exceeded for {0}.')
hmAlreadyCreated = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 4))
if mibBuilder.loadTexts: hmAlreadyCreated.setStatus('current')
if mibBuilder.loadTexts: hmAlreadyCreated.setDescription('Instance already created.')
hmRedundancyConflictFpgaPort = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 5))
if mibBuilder.loadTexts: hmRedundancyConflictFpgaPort.setStatus('current')
if mibBuilder.loadTexts: hmRedundancyConflictFpgaPort.setDescription('Conflict Redundancy Protocols: Cannot enable {0} on configured ports.')
hmVlanUnawareConflict = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 6))
if mibBuilder.loadTexts: hmVlanUnawareConflict.setStatus('current')
if mibBuilder.loadTexts: hmVlanUnawareConflict.setDescription('Cannot enable {0} because {1} is enabled.')
hmRedundancyConflictPortShort = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 7))
if mibBuilder.loadTexts: hmRedundancyConflictPortShort.setStatus('current')
if mibBuilder.loadTexts: hmRedundancyConflictPortShort.setDescription('Cannot enable {0} on configured ports. Reason: {1}')
hmTableFullError = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 8))
if mibBuilder.loadTexts: hmTableFullError.setStatus('current')
if mibBuilder.loadTexts: hmTableFullError.setDescription('{0} table is full. Maximum allowed: {1}.')
hmFunctionNotUsableWithInterface = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 9))
if mibBuilder.loadTexts: hmFunctionNotUsableWithInterface.setStatus('current')
if mibBuilder.loadTexts: hmFunctionNotUsableWithInterface.setDescription('This function cannot be used with this interface.')
hmGeneralConflict = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 10))
if mibBuilder.loadTexts: hmGeneralConflict.setStatus('current')
if mibBuilder.loadTexts: hmGeneralConflict.setDescription('{0} conflicts with {1}. {2}.')
hmGeneralExceededRange = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 11))
if mibBuilder.loadTexts: hmGeneralExceededRange.setStatus('current')
if mibBuilder.loadTexts: hmGeneralExceededRange.setDescription('The {0} is exceeding the range. Maximum permissable range is {1}..{2}.')
hmRmonAlarmTableFullErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 100))
if mibBuilder.loadTexts: hmRmonAlarmTableFullErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hmRmonAlarmTableFullErrorReturn.setDescription('Alarm table full. Only {0} entries are allowed.')
hmMgmtUdpPortInUse = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 200))
if mibBuilder.loadTexts: hmMgmtUdpPortInUse.setStatus('current')
if mibBuilder.loadTexts: hmMgmtUdpPortInUse.setDescription('Given UDP port is already in use.')
hmMgmtTcpPortInUse = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 201))
if mibBuilder.loadTexts: hmMgmtTcpPortInUse.setStatus('current')
if mibBuilder.loadTexts: hmMgmtTcpPortInUse.setDescription('Given TCP port is already in use.')
hmMgmtIPAddressConflictWithMgmtIP = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 202))
if mibBuilder.loadTexts: hmMgmtIPAddressConflictWithMgmtIP.setStatus('current')
if mibBuilder.loadTexts: hmMgmtIPAddressConflictWithMgmtIP.setDescription('Given IP address/netmask {0}/{1} conflicts with the management IP address/netmask.')
hmMgmtIPAddressConflictWithOobIP = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 203))
if mibBuilder.loadTexts: hmMgmtIPAddressConflictWithOobIP.setStatus('current')
if mibBuilder.loadTexts: hmMgmtIPAddressConflictWithOobIP.setDescription('Given IP address/netmask {0}/{1} conflicts with the out-of-band management IP address/netmask.')
hmMgmtIPAddressConflictWithRouterIP = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 204))
if mibBuilder.loadTexts: hmMgmtIPAddressConflictWithRouterIP.setStatus('current')
if mibBuilder.loadTexts: hmMgmtIPAddressConflictWithRouterIP.setDescription('Given IP address/netmask {0}/{1} conflicts with a routing interface IP address/netmask.')
hm2NetIPAddrInvalid = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 300))
if mibBuilder.loadTexts: hm2NetIPAddrInvalid.setStatus('current')
if mibBuilder.loadTexts: hm2NetIPAddrInvalid.setDescription('The {0} IP address is not valid.')
hm2NetIPAddrAndGateway = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 301))
if mibBuilder.loadTexts: hm2NetIPAddrAndGateway.setStatus('current')
if mibBuilder.loadTexts: hm2NetIPAddrAndGateway.setDescription('Management IP address and gateway are not on the same subnet.')
hm2NetIPAddrAndSubnet = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 302))
if mibBuilder.loadTexts: hm2NetIPAddrAndSubnet.setStatus('current')
if mibBuilder.loadTexts: hm2NetIPAddrAndSubnet.setDescription('The {0} IP address and subnet mask combination is not valid.')
hm2NetPrefixLengthInvalid = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 2, 303))
if mibBuilder.loadTexts: hm2NetPrefixLengthInvalid.setStatus('current')
if mibBuilder.loadTexts: hm2NetPrefixLengthInvalid.setDescription('Subnet mask must have contiguous ones and be no longer than 30 bits.')
hmMgmtSEInfoValueChanged = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 16, 3, 1))
if mibBuilder.loadTexts: hmMgmtSEInfoValueChanged.setStatus('current')
if mibBuilder.loadTexts: hmMgmtSEInfoValueChanged.setDescription('Note: Value changed from {0} to {1}')
mibBuilder.exportSymbols("HIRSCHMANN-GENERIC-ERROR-MIB", hmMgmtSEInfoIDGroup=hmMgmtSEInfoIDGroup, hirschmann=hirschmann, hmVlanUnawareConflict=hmVlanUnawareConflict, hmRmonAlarmTableFullErrorReturn=hmRmonAlarmTableFullErrorReturn, hmFunctionNotUsableWithInterface=hmFunctionNotUsableWithInterface, hmGeneralConflict=hmGeneralConflict, hmMgmtIPAddressConflictWithRouterIP=hmMgmtIPAddressConflictWithRouterIP, hmRedundancyConflictPort=hmRedundancyConflictPort, hmMgmtTcpPortInUse=hmMgmtTcpPortInUse, hmMgmtIPAddressConflictWithMgmtIP=hmMgmtIPAddressConflictWithMgmtIP, hmTableFullError=hmTableFullError, hmMgmtIPAddressConflictWithOobIP=hmMgmtIPAddressConflictWithOobIP, hmMgmtUdpPortInUse=hmMgmtUdpPortInUse, hm2NetIPAddrAndSubnet=hm2NetIPAddrAndSubnet, hm2NetIPAddrAndGateway=hm2NetIPAddrAndGateway, hmMgmtSEEErrorIDGroup=hmMgmtSEEErrorIDGroup, hmRedundancyConflict=hmRedundancyConflict, hmGeneralExceededRange=hmGeneralExceededRange, hm2NetIPAddrInvalid=hm2NetIPAddrInvalid, hmRedundancyConflictPortShort=hmRedundancyConflictPortShort, hmMgmtSEInfoValueChanged=hmMgmtSEInfoValueChanged, hmMaxNumExceeded=hmMaxNumExceeded, hmAlreadyCreated=hmAlreadyCreated, hmRedundancyConflictFpgaPort=hmRedundancyConflictFpgaPort, hm2NetPrefixLengthInvalid=hm2NetPrefixLengthInvalid)
