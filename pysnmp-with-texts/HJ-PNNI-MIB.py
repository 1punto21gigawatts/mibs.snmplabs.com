#
# PySNMP MIB module HJ-PNNI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HJ-PNNI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:31:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pnniLinkPortId, pnniNbrPeerRemoteNodeId, pnniNodeIndex = mibBuilder.importSymbols("PNNI-MIB", "pnniLinkPortId", "pnniNbrPeerRemoteNodeId", "pnniNodeIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter64, Counter32, Gauge32, Integer32, IpAddress, iso, ModuleIdentity, mgmt, Bits, ObjectIdentity, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "Counter32", "Gauge32", "Integer32", "IpAddress", "iso", "ModuleIdentity", "mgmt", "Bits", "ObjectIdentity", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

class Counter32(Counter32):
    pass

class Integer32(Integer32):
    pass

class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class Unsigned32(Gauge32):
    pass

class PnniPortId(Unsigned32):
    pass

org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
harrisjeffries = MibIdentifier((1, 3, 6, 1, 4, 1, 603))
hjStdExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 603, 2))
hjTransmission = MibIdentifier((1, 3, 6, 1, 4, 1, 603, 2, 10))
hjAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 603, 2, 10, 2))
hjAtmPnni = MibIdentifier((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7))
class HjPnniIfResourceIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 5)

hjPnniBaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 2))
hjPnniLoggingFile = MibScalar((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniLoggingFile.setReference('Harris & Jeffries PNNI Routing External Specification')
if mibBuilder.loadTexts: hjPnniLoggingFile.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniLoggingFile.setDescription('The name of the debug logging file for diagnostic messages. This must be set to a non-null string in order for diagnostic messages to be produced.')
hjPnniLoggingMask = MibScalar((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 2, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniLoggingMask.setReference('Harris & Jeffries PNNI Routing External Specification')
if mibBuilder.loadTexts: hjPnniLoggingMask.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniLoggingMask.setDescription('A bit-mask indicating which classes of debug diagnostics are to be printed. The bit mask positions are defined by symbols HJ_PNNI_LC_* in the Harris and Jeffries External Specification for PNNI.')
hjPnniAddressRoundRobin = MibScalar((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 2, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniAddressRoundRobin.setReference('Harris & Jeffries PNNI Routing External Specification')
if mibBuilder.loadTexts: hjPnniAddressRoundRobin.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniAddressRoundRobin.setDescription('A flag which (when set to TRUE) enables Round Robin Address Selection for multi-homed ATM Addresses. Using this feature, when multiple PNNI nodes advertise the best-match ATM Address prefix for a given ATM Address destination, the HJ-PNNI node will choose node destinations in a round-robin manner (among those best advertisers). When this flag is disabled (set to FALSE), the node selected will be the first one found.')
hjPnniRoundRobinNbrPortUse = MibScalar((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 2, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniRoundRobinNbrPortUse.setReference('Harris & Jeffries PNNI Routing External Specification')
if mibBuilder.loadTexts: hjPnniRoundRobinNbrPortUse.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniRoundRobinNbrPortUse.setDescription('A flag which (when set to true) enables Round Robin Selection of ports for PNNI database (PTSE) exchanges with neighbors. This flag only has effect when multiple port connections to a neighbor exist and are in 2-Way Inside (hello) state. When this attribute is set to true, then database exchanges with a neighbor will use all available RCCs, in a round-robin manner for transmission. When this attribute is set to false, then only a single RCC (usually the first one which became active) will be used.')
hjPnniCacheTimerFreq = MibScalar((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniCacheTimerFreq.setReference('Harris & Jeffries PNNI Routing External Specification')
if mibBuilder.loadTexts: hjPnniCacheTimerFreq.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniCacheTimerFreq.setDescription('The frequency of the Cache Timer. The cache timer is used to age out and, possibly, recalculate cached paths, when this feature is enabled in the switching system.')
hjPnniCacheAge = MibScalar((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniCacheAge.setReference('Harris & Jeffries PNNI Routing External Specification')
if mibBuilder.loadTexts: hjPnniCacheAge.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniCacheAge.setDescription('The age of a set of cached routes to a destination when the cache is considered old. When a destination cache is discovered to be old, the cache timer will flush the cache of paths to that destination, and may choose to recalculate a new cache, depending on whether the cache has been used recently.')
hjPnniCacheRecentInt = MibScalar((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniCacheRecentInt.setReference('Harris & Jeffries PNNI Routing External Specification')
if mibBuilder.loadTexts: hjPnniCacheRecentInt.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniCacheRecentInt.setDescription('The maximum interval of time since a cache of paths to a destination node was referenced (by a route calculation) which is considered a recent reference to the cache. When a set of cached paths is flushed by the cache timer, the cache to that destination will be automatically recalculated if the cache was referenced recently.')
hjPnniCacheNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hjPnniCacheNumEntries.setReference('Harris & Jeffries PNNI Routing External Specification')
if mibBuilder.loadTexts: hjPnniCacheNumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniCacheNumEntries.setDescription('The current number of cached paths being maintained by the path-caching logic of the switching system.')
hjPnniCacheMaxPaths = MibScalar((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniCacheMaxPaths.setReference('Harris & Jeffries PNNI Routing External Specification')
if mibBuilder.loadTexts: hjPnniCacheMaxPaths.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniCacheMaxPaths.setDescription('The maximum of paths per destination node which will be calculated to each node destination, when path-caching is enabled.')
hjPnniCacheMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniCacheMaxEntries.setReference('Harris & Jeffries PNNI Routing External Specification')
if mibBuilder.loadTexts: hjPnniCacheMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniCacheMaxEntries.setDescription('The maximum of nodal destinations which can contain cached paths, when this feature is enabled. If a cache is needed to a new destination, and there are already this number of cached destinations present, the least-recently referenced cache will be flushed to make room for the new cache.')
hjPnniCacheEnable = MibScalar((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 2, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniCacheEnable.setReference('Harris & Jeffries PNNI Routing External Specification')
if mibBuilder.loadTexts: hjPnniCacheEnable.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniCacheEnable.setDescription('Enables path-caching for this switch system. The feature must also be enabled by compile-time switches to allow enabling path-caching.')
hjPnniAllowLGNPathLoops = MibScalar((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 2, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniAllowLGNPathLoops.setReference('Harris & Jeffries PNNI Routing External Specification')
if mibBuilder.loadTexts: hjPnniAllowLGNPathLoops.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniAllowLGNPathLoops.setDescription("Modifies the Dijkstra (path-calculation) algorithm in this switch system to allow or disallow loops of paths when computing paths through Logical Group Nodes. When loops are disallowed (this parameter set to false), no path will be considered which enters the same Logical Group Node twice. This considerably lessens the time needed to compute the paths in complicated networks. However, under some crankback situations, this might fail to find a viable path to the desired nodal destination. Note that loops between lowest-level nodes (nodes within the local node's lowest-level peer group members) are always disallowed, regardless of the setting of this parameter.")
hjPnniNodeTable = MibTable((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 3), )
if mibBuilder.loadTexts: hjPnniNodeTable.setReference('Harris & Jeffries PNNI Routing External Specification')
if mibBuilder.loadTexts: hjPnniNodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNodeTable.setDescription('H&J supplemental information for a PNNI node in this switching system.')
hjPnniNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 3, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"))
if mibBuilder.loadTexts: hjPnniNodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNodeEntry.setDescription('An entry in the table, supplemental information of a PNNI logical node in this switching system.')
hjPnniNodeLoggingMask = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 3, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniNodeLoggingMask.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNodeLoggingMask.setDescription('A bit-mask indicating which classes of debug diagnostics are to be printed for this node. This mask is logically ANDed with the global mask hjPnniLoggingMask before bit positions are checked. The bit mask positions are defined by symbols HJ_PNNI_LC_* in the Harris and Jeffries External Specification for PNNI.')
hjPnniNodeMinDynamicPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 3, 1, 2), PnniPortId().clone(2147483648)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniNodeMinDynamicPortId.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNodeMinDynamicPortId.setDescription('The minimum value this node will assign to dynamically created port IDs, based on receipt of information over SVCC-based RCCs. For lowest-level nodes, the range defined by this parameter and hjPnniNodeMaxDynamicPortId must not intersect with Port IDs assigned to PVC-based ports. The default value of this parameter may be changed by modifying a symbol in the customer modifiable file, pnni_def.h.')
hjPnniNodeMaxDynamicPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 3, 1, 3), PnniPortId().clone(4294967294)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniNodeMaxDynamicPortId.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNodeMaxDynamicPortId.setDescription('The maximum value this node will assign to dynamically created port IDs, based on receipt of information over SVCC-based RCCs. For lowest-level nodes, the range defined by this parameter and hjPnniNodeMinDynamicPortId must not intersect with Port IDs assigned to PVC-based ports. The default value of this parameter may be changed by modifying a symbol in the customer modifiable file, pnni_def.h.')
hjPnniNodeSvccCellTransferDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniNodeSvccCellTransferDelay.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNodeSvccCellTransferDelay.setDescription('Defines the maximum acceptible Cell Transfer Delay for SVCC-based RCCs initiated by this node as the calling party. Used only when initiating an SVCC-based RCC, and CTD is an acceptible call metric for the ATM service class of the VCC. The distinguished value zero means that there is no Cell Transfer Delay restriction for SVCC-based RCCs.')
hjPnniNodeSvccCellDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniNodeSvccCellDelayVariation.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNodeSvccCellDelayVariation.setDescription('Defines the maximum acceptible Cell Delay Variation for SVCC-based RCCs initiated by this node as the calling party. Used only when initiating an SVCC-based RCC, and EQOS is an acceptible call metric for the ATM service class of the VCC. The distinguished value zero for this parameter and hjPnniNodeSvccCellLossRatio means that there is no EQOS restriction for SVCC-based RCCs.')
hjPnniNodeSvccCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniNodeSvccCellLossRatio.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNodeSvccCellLossRatio.setDescription('Defines the maximum acceptible Cell Loss Ratio for SVCC-based RCCs initiated by this node as the calling party. Used only when initiating an SVCC-based RCC, and EQOS is an acceptible call metric for the ATM service class of the VCC. The distinguished value zero for this parameter and hjPnniNodeSvccCellDelayVariation means that there is no EQOS restriction for SVCC-based RCCs.')
hjPnniNodeSvccAbrInitialCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniNodeSvccAbrInitialCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNodeSvccAbrInitialCellRate.setDescription('Defines the Initial Cell Rate subfield for inclusion in the ABR Setup Parameters information element within Setup messages when initiating an ABR SVCC-based RCC. This parameter is only used when using ABR service for establishing SVCC-based RCCs, and is ignored otherwise. The value of this parameter specifies the requested initial cell rate, in cells per second.')
hjPnniNodeSvccAbrTransientBufferExposure = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215)).clone(16777215)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniNodeSvccAbrTransientBufferExposure.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNodeSvccAbrTransientBufferExposure.setDescription('Defines the Transient Buffer Exposure subfield for inclusion in the ABR Setup Parameters information element within Setup messages when initiating an ABR SVCC-based RCC. This parameter is only used when using ABR service for establishing SVCC-based RCCs, and is ignored otherwise. The value of this parameter specifies the requested transient buffer exposure, in cells.')
hjPnniNodeSvccAbrRateIncreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniNodeSvccAbrRateIncreaseFactor.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNodeSvccAbrRateIncreaseFactor.setDescription('Defines the Rate Increase Factor subfield for inclusion in the ABR Setup Parameters information element within Setup messages when initiating an ABR SVCC-based RCC. This parameter is only used when using ABR service for establishing SVCC-based RCCs, and is ignored otherwise. The value of this parameter specifies the requested rate increase factor, as calculated by log2(32768 * RIF).')
hjPnniNodeSvccAbrRateDecreaseFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniNodeSvccAbrRateDecreaseFactor.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNodeSvccAbrRateDecreaseFactor.setDescription('Defines the Rate Decrease Factor subfield for inclusion in the ABR Setup Parameters information element within Setup messages when initiating an ABR SVCC-based RCC. This parameter is only used when using ABR service for establishing SVCC-based RCCs, and is ignored otherwise. The value of this parameter specifies the requested rate decrease factor, as calculated by log2(32768 * RDF).')
hjPnniIfTable = MibTable((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 4), )
if mibBuilder.loadTexts: hjPnniIfTable.setReference('Harris & Jeffries PNNI Routing External Specification')
if mibBuilder.loadTexts: hjPnniIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfTable.setDescription('H&J supplemental information for a PNNI interface in this switching system.')
hjPnniIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hjPnniIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfEntry.setDescription('An entry in the table, supplemental information of a PNNI interface in this switching system.')
hjPnniIfLoggingMask = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 4, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniIfLoggingMask.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfLoggingMask.setDescription('A bit-mask indicating which classes of debug diagnostics are to be printed for this interface. This mask is logically ANDed with the global mask hjPnniLoggingMask before bit positions are checked. The bit mask positions are defined by symbols HJ_PNNI_LC_* in the Harris and Jeffries External Specification for PNNI.')
hjPnniIfMaxRccPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 8192)).clone(8192)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniIfMaxRccPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfMaxRccPacketSize.setDescription('The maximum size, in bytes, of PNNI packets transmitted on this interface.')
hjPnniIfCbrResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 4, 1, 3), HjPnniIfResourceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniIfCbrResourceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfCbrResourceIndex.setDescription('If non-zero, this specifies the second index in the hjPnniIfResourceTable, which defines a set of resource availability characteristics to define the availability of this interface to carry CBR traffic. The value zero specifies that this interface is incapable of carrying CBR traffic. The default value to be used for this object (when the lowest-level Hello instance is created) is defined at compile time, via a user-defined symbol in file pnni_def.h.')
hjPnniIfRtVbrResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 4, 1, 4), HjPnniIfResourceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniIfRtVbrResourceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfRtVbrResourceIndex.setDescription('If non-zero, this specifies the second index in the hjPnniIfResourceTable, which defines a set of resource availability characteristics to define the availability of this interface to carry rt-VBR traffic. The value zero specifies that this interface is incapable of carrying rt-VBR traffic. The default value to be used for this object (when the lowest-level Hello instance is created) is defined at compile time, via a user-defined symbol in file pnni_def.h.')
hjPnniIfNrtVbrResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 4, 1, 5), HjPnniIfResourceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniIfNrtVbrResourceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfNrtVbrResourceIndex.setDescription('If non-zero, this specifies the second index in the hjPnniIfResourceTable, which defines a set of resource availability characteristics to define the availability of this interface to carry nrt-VBR traffic. The value zero specifies that this interface is incapable of carrying nrt-VBR traffic. The default value to be used for this object (when the lowest-level Hello instance is created) is defined at compile time, via a user-defined symbol in file pnni_def.h.')
hjPnniIfAbrResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 4, 1, 6), HjPnniIfResourceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniIfAbrResourceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfAbrResourceIndex.setDescription('If non-zero, this specifies the second index in the hjPnniIfResourceTable, which defines a set of resource availability characteristics to define the availability of this interface to carry ABR traffic. The value zero specifies that this interface is incapable of carrying ABR traffic. The default value to be used for this object (when the lowest-level Hello instance is created) is defined at compile time, via a user-defined symbol in file pnni_def.h.')
hjPnniIfUbrResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 4, 1, 7), HjPnniIfResourceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniIfUbrResourceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfUbrResourceIndex.setDescription('If non-zero, this specifies the second index in the hjPnniIfResourceTable, which defines a set of resource availability characteristics to define the availability of this interface to carry UBR traffic. The value zero specifies that this interface is incapable of carrying UBR traffic. The default value to be used for this object (when the lowest-level Hello instance is created) is defined at compile time, via a user-defined symbol in file pnni_def.h.')
hjPnniIfResourceTable = MibTable((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 7), )
if mibBuilder.loadTexts: hjPnniIfResourceTable.setReference('Harris & Jeffries PNNI Routing External Specification')
if mibBuilder.loadTexts: hjPnniIfResourceTable.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfResourceTable.setDescription('This table contains Resource Availability parameters which can be used to describe the ability of an interface to accept user traffic, on a per-service-class basis. This table is accessed by an ifIndex defining a valid PNNI interface in the pnniIfTable, and a Resource Index value in the range 1-5, which is used to distinguish among up to five different sets of Resource characteristics, (if necessary) for this interface. Several service classes can share the same Resource Index, if this is acceptable to the switching system.')
hjPnniIfResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HJ-PNNI-MIB", "hjPnniIfResourceIndex"))
if mibBuilder.loadTexts: hjPnniIfResourceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfResourceEntry.setDescription('An entry in the table, containing resource availability information for interfaces in this switching system.')
hjPnniIfResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 7, 1, 1), HjPnniIfResourceIndex())
if mibBuilder.loadTexts: hjPnniIfResourceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfResourceIndex.setDescription('Identifies a set of Resource Availability characteristics which can be used to define availability of one or more ATM service classes on the specified interface.')
hjPnniIfResourceGCACCLPAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 7, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniIfResourceGCACCLPAttribute.setReference('ATM Forum PNNI 1.0 Section 5.8.1.1.3.1 and Table 5-23.')
if mibBuilder.loadTexts: hjPnniIfResourceGCACCLPAttribute.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfResourceGCACCLPAttribute.setDescription('Indicates if the GCAC CLP Attribute should be set for the service classes assigned to this table entry. The default value for this object (created when the interface is created) is defined by compile-time symbols in file pnni_def.h.')
hjPnniIfResourceAdmWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 7, 1, 3), Unsigned32().clone(5040)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniIfResourceAdmWeight.setReference('ATM Forum PNNI 1.0 Section 5.8.1.1.3.4')
if mibBuilder.loadTexts: hjPnniIfResourceAdmWeight.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfResourceAdmWeight.setDescription('The Administrative Weight of this interface for the service classes assigned to this table entry. The default value for this object (created when the interface is created) is defined by compile-time symbols in file pnni_def.h.')
hjPnniIfResourceMaximumCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 7, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniIfResourceMaximumCellRate.setReference('ATM Forum PNNI 1.0 Section 5.8.1.1.3.7')
if mibBuilder.loadTexts: hjPnniIfResourceMaximumCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfResourceMaximumCellRate.setDescription('The Maximum Cell Rate (in cells per second) of this interface for the service classes assigned to this table entry. The default value for this object (created when the interface is created) is defined by compile-time symbols in file pnni_def.h.')
hjPnniIfResourceAvailableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 7, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniIfResourceAvailableCellRate.setReference('ATM Forum PNNI 1.0 Section 5.8.1.1.3.8')
if mibBuilder.loadTexts: hjPnniIfResourceAvailableCellRate.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfResourceAvailableCellRate.setDescription('The Available Cell Rate (in cells per second) of this interface for the service classes assigned to this table entry. The default value for this object (created when the interface is created) is defined by compile-time symbols in file pnni_def.h.')
hjPnniIfResourceCellTransferDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 7, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniIfResourceCellTransferDelay.setReference('ATM Forum PNNI 1.0 Section 5.8.1.1.3.3')
if mibBuilder.loadTexts: hjPnniIfResourceCellTransferDelay.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfResourceCellTransferDelay.setDescription('The maximum Cell Transfer Delay (in microseconds) of this interface for the service classes assigned to this table entry. The default value for this object (created when the interface is created) is defined by compile-time symbols in file pnni_def.h.')
hjPnniIfResourceCellDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 7, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniIfResourceCellDelayVariation.setReference('ATM Forum PNNI 1.0 Section 5.8.1.1.3.2')
if mibBuilder.loadTexts: hjPnniIfResourceCellDelayVariation.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfResourceCellDelayVariation.setDescription('The peak-to-peak Cell Delay Variation (in microseconds) of this interface for the service classes assigned to this table entry. The default value for this object (created when the interface is created) is defined by compile-time symbols in file pnni_def.h.')
hjPnniIfResourceCellLossRatioCLP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 7, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniIfResourceCellLossRatioCLP0.setReference('ATM Forum PNNI 1.0 Section 5.8.1.1.3.5')
if mibBuilder.loadTexts: hjPnniIfResourceCellLossRatioCLP0.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfResourceCellLossRatioCLP0.setDescription('The maximum cell loss ratio (CLR) objective for CLP=0 traffic of this interface for the service classes assigned to this table entry. The default value for this object (created when the interface is created) is defined by compile-time symbols in file pnni_def.h.')
hjPnniIfResourceCellLossRatioCLP01 = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 7, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniIfResourceCellLossRatioCLP01.setReference('ATM Forum PNNI 1.0 Section 5.8.1.1.3.6')
if mibBuilder.loadTexts: hjPnniIfResourceCellLossRatioCLP01.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfResourceCellLossRatioCLP01.setDescription('The maximum cell loss ratio (CLR) objective for CLP=0+1 traffic of this interface for the service classes assigned to this table entry. The default value for this object (created when the interface is created) is defined by compile-time symbols in file pnni_def.h.')
hjPnniIfResourceUseOptionalGCAC = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 7, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniIfResourceUseOptionalGCAC.setReference('ATM Forum PNNI 1.0 Sections 5.8.1.1.3.9 and 5.8.1.1.3.10, and Table 5-22.')
if mibBuilder.loadTexts: hjPnniIfResourceUseOptionalGCAC.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfResourceUseOptionalGCAC.setDescription("Specifies whether the service classes assigned to this table entry should use the optional GCAC parameters, Cell Rate Margin and Variance Factor to describe their availability. A value of 'true' specifies that these optional parameters are used for GCAC purposes. A value of 'false' specifies that the normal GCAC procedures are to be followed. The default value for this object (created when the interface is created) is defined by compile-time symbols in file pnni_def.h.")
hjPnniIfResourceCellRateMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 7, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniIfResourceCellRateMargin.setReference('ATM Forum PNNI 1.0 Section 5.8.1.1.3.9')
if mibBuilder.loadTexts: hjPnniIfResourceCellRateMargin.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfResourceCellRateMargin.setDescription("This parameter is only applicable if the value of hjPnniIfResourceUseOptionalGCAC is set to 'true'. Cell Rate Margin is a measure of the difference between the effective bandwidth allocation and the allocation for sustainable cell rate in cells per second. The default value for this object (created when the interface is created) is defined by compile-time symbols in file pnni_def.h.")
hjPnniIfResourceVarianceFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 7, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hjPnniIfResourceVarianceFactor.setReference('ATM Forum PNNI 1.0 Section 5.8.1.1.3.10')
if mibBuilder.loadTexts: hjPnniIfResourceVarianceFactor.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniIfResourceVarianceFactor.setDescription("This parameter is only applicable if the value of hjPnniIfResourceUseOptionalGCAC is set to 'true'. Variance Factor is a realtive measure of the square of the cell rate margin normalized by the variance of the sum of the cell rates of all existing connections. The default value for this object (created when the interface is created) is defined by compile-time symbols in file pnni_def.h.")
hjPnniNbrPeerTable = MibTable((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 5), )
if mibBuilder.loadTexts: hjPnniNbrPeerTable.setReference('Harris & Jeffries PNNI Routing External Specification')
if mibBuilder.loadTexts: hjPnniNbrPeerTable.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNbrPeerTable.setDescription('H&J supplemental information for a PNNI neighbor in this switching system.')
hjPnniNbrPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 5, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "PNNI-MIB", "pnniNbrPeerRemoteNodeId"))
if mibBuilder.loadTexts: hjPnniNbrPeerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNbrPeerEntry.setDescription('An entry in the table, supplemental information of a PNNI neighbor in this switching system.')
hjPnniNbrPeerRcvPtses = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hjPnniNbrPeerRcvPtses.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNbrPeerRcvPtses.setDescription('A count of the number of PTSEs received from the neighboring peer. Includes PTSEs received within PTSPs as well as expired PTSE headers received during the database exchange phase of processing.')
hjPnniNbrPeerXmtPtses = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hjPnniNbrPeerXmtPtses.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNbrPeerXmtPtses.setDescription('A count of the number of PTSEs transmitted to the neighboring peer.')
hjPnniNbrPeerRcvPtseErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hjPnniNbrPeerRcvPtseErrs.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNbrPeerRcvPtseErrs.setDescription('A count of the number of PTSEs received from the neighboring peer which had bad PTSE Header Checksums.')
hjPnniNbrPeerRcvDbSummErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hjPnniNbrPeerRcvDbSummErrs.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNbrPeerRcvDbSummErrs.setDescription('A count of the number of Database Summary packets received from the neighboring peer which had syntax errors.')
hjPnniNbrPeerRcvPtspErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hjPnniNbrPeerRcvPtspErrs.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNbrPeerRcvPtspErrs.setDescription('A count of the number of PTSPs received from the neighboring peer which had syntax errors.')
hjPnniNbrPeerRcvPtseReqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hjPnniNbrPeerRcvPtseReqErrs.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNbrPeerRcvPtseReqErrs.setDescription('A count of the number of PTSE Request packets received from the neighboring peer which had syntax errors.')
hjPnniNbrPeerRcvPtseAckErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hjPnniNbrPeerRcvPtseAckErrs.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNbrPeerRcvPtseAckErrs.setDescription('A count of the number of PTSE Ack packets received from the neighboring peer which had syntax errors.')
hjPnniNbrPeerDSMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hjPnniNbrPeerDSMismatches.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNbrPeerDSMismatches.setDescription('A count of the number of Database Summary packets received from the neighboring peer which caused a Database Summary Mismatch condition. This condition is caused by an error in the sequence numbers detected by this node, while exchanging Database Summaries with the neighboring peer.')
hjPnniNbrPeerBadPtseReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hjPnniNbrPeerBadPtseReqs.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniNbrPeerBadPtseReqs.setDescription('A count of the number of times this node received a PTSE Request from the neighboring peer which this node did not advertise. This condition (occurring during the Database Exchange phase) indicates an error in the neighboring peer Database Exchange protocol.')
hjPnniLinkTable = MibTable((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 6), )
if mibBuilder.loadTexts: hjPnniLinkTable.setReference('Harris & Jeffries PNNI Routing External Specification')
if mibBuilder.loadTexts: hjPnniLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniLinkTable.setDescription('H&J supplemental information for a PNNI interface in this switching system.')
hjPnniLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 6, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "PNNI-MIB", "pnniLinkPortId"))
if mibBuilder.loadTexts: hjPnniLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniLinkEntry.setDescription('An entry in the table, supplemental information of a PNNI link in this switching system.')
hjPnniLinkRcvUnknownPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hjPnniLinkRcvUnknownPkts.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniLinkRcvUnknownPkts.setDescription('This attribute contains a count of the number of received packets on the specified link which were unrecognized as any of the known PNNI packet types: Hello, PTSP, PTSE Ack, DB Summary, or PTSE Request.')
hjPnniLinkRcvHelloMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hjPnniLinkRcvHelloMismatches.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniLinkRcvHelloMismatches.setDescription("This attribute contains a count of the number of received Hello packets on the specified link which were detected as having a Hello Mismatch error. A Hello mismatch occurs when a Hello has been received from the neighbor in which one of the Version, originating Node ID, peer group ID, and port ID is different from the corresponding information in the local hello data structure. Alternatively, a Hello has been received in which the remote node ID, and/or remote port ID are different from this node's own node ID or this node's port ID for the receiving link, respectively, and are not both set to zero.")
hjPnniLinkRcvHelloErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 603, 2, 10, 2, 7, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hjPnniLinkRcvHelloErrors.setStatus('mandatory')
if mibBuilder.loadTexts: hjPnniLinkRcvHelloErrors.setDescription('This attribute contains a count of the number of received Hello packets on the specified link which were detected as being malformed in some way. Examples are runt packets or packets missing required fields.')
mibBuilder.exportSymbols("HJ-PNNI-MIB", hjPnniIfCbrResourceIndex=hjPnniIfCbrResourceIndex, hjPnniNbrPeerEntry=hjPnniNbrPeerEntry, org=org, harrisjeffries=harrisjeffries, hjPnniNodeLoggingMask=hjPnniNodeLoggingMask, hjPnniNbrPeerXmtPtses=hjPnniNbrPeerXmtPtses, hjPnniIfResourceAvailableCellRate=hjPnniIfResourceAvailableCellRate, hjPnniIfAbrResourceIndex=hjPnniIfAbrResourceIndex, hjPnniNbrPeerTable=hjPnniNbrPeerTable, hjTransmission=hjTransmission, hjPnniAddressRoundRobin=hjPnniAddressRoundRobin, hjPnniIfUbrResourceIndex=hjPnniIfUbrResourceIndex, hjPnniIfResourceTable=hjPnniIfResourceTable, hjPnniIfResourceCellRateMargin=hjPnniIfResourceCellRateMargin, hjPnniIfResourceAdmWeight=hjPnniIfResourceAdmWeight, private=private, DisplayString=DisplayString, hjStdExtensions=hjStdExtensions, hjPnniNodeSvccAbrRateIncreaseFactor=hjPnniNodeSvccAbrRateIncreaseFactor, hjPnniNbrPeerDSMismatches=hjPnniNbrPeerDSMismatches, Unsigned32=Unsigned32, hjPnniCacheNumEntries=hjPnniCacheNumEntries, hjPnniNbrPeerRcvPtspErrs=hjPnniNbrPeerRcvPtspErrs, hjPnniIfNrtVbrResourceIndex=hjPnniIfNrtVbrResourceIndex, hjPnniNbrPeerRcvDbSummErrs=hjPnniNbrPeerRcvDbSummErrs, TruthValue=TruthValue, PnniPortId=PnniPortId, hjPnniBaseGroup=hjPnniBaseGroup, hjPnniNbrPeerBadPtseReqs=hjPnniNbrPeerBadPtseReqs, hjPnniCacheAge=hjPnniCacheAge, hjPnniNbrPeerRcvPtseErrs=hjPnniNbrPeerRcvPtseErrs, hjPnniNodeSvccAbrInitialCellRate=hjPnniNodeSvccAbrInitialCellRate, hjPnniIfResourceCellTransferDelay=hjPnniIfResourceCellTransferDelay, dod=dod, hjPnniLinkRcvHelloErrors=hjPnniLinkRcvHelloErrors, hjPnniNodeMaxDynamicPortId=hjPnniNodeMaxDynamicPortId, hjPnniLinkRcvHelloMismatches=hjPnniLinkRcvHelloMismatches, hjPnniNodeSvccAbrTransientBufferExposure=hjPnniNodeSvccAbrTransientBufferExposure, hjPnniLinkTable=hjPnniLinkTable, hjPnniRoundRobinNbrPortUse=hjPnniRoundRobinNbrPortUse, hjPnniIfResourceCellLossRatioCLP01=hjPnniIfResourceCellLossRatioCLP01, hjPnniIfResourceUseOptionalGCAC=hjPnniIfResourceUseOptionalGCAC, hjPnniIfResourceCellLossRatioCLP0=hjPnniIfResourceCellLossRatioCLP0, hjAtm=hjAtm, hjPnniNodeSvccAbrRateDecreaseFactor=hjPnniNodeSvccAbrRateDecreaseFactor, Counter32=Counter32, hjPnniNbrPeerRcvPtses=hjPnniNbrPeerRcvPtses, hjPnniIfResourceGCACCLPAttribute=hjPnniIfResourceGCACCLPAttribute, hjPnniNodeEntry=hjPnniNodeEntry, HjPnniIfResourceIndex=HjPnniIfResourceIndex, hjPnniNodeSvccCellTransferDelay=hjPnniNodeSvccCellTransferDelay, hjPnniIfMaxRccPacketSize=hjPnniIfMaxRccPacketSize, hjAtmPnni=hjAtmPnni, hjPnniLoggingMask=hjPnniLoggingMask, internet=internet, hjPnniCacheEnable=hjPnniCacheEnable, hjPnniIfLoggingMask=hjPnniIfLoggingMask, hjPnniIfTable=hjPnniIfTable, hjPnniIfResourceCellDelayVariation=hjPnniIfResourceCellDelayVariation, hjPnniLinkEntry=hjPnniLinkEntry, hjPnniNodeSvccCellLossRatio=hjPnniNodeSvccCellLossRatio, hjPnniIfRtVbrResourceIndex=hjPnniIfRtVbrResourceIndex, hjPnniIfResourceEntry=hjPnniIfResourceEntry, hjPnniLoggingFile=hjPnniLoggingFile, hjPnniLinkRcvUnknownPkts=hjPnniLinkRcvUnknownPkts, hjPnniIfResourceMaximumCellRate=hjPnniIfResourceMaximumCellRate, hjPnniNodeTable=hjPnniNodeTable, hjPnniIfResourceIndex=hjPnniIfResourceIndex, hjPnniIfResourceVarianceFactor=hjPnniIfResourceVarianceFactor, hjPnniIfEntry=hjPnniIfEntry, hjPnniNodeMinDynamicPortId=hjPnniNodeMinDynamicPortId, Integer32=Integer32, hjPnniNbrPeerRcvPtseAckErrs=hjPnniNbrPeerRcvPtseAckErrs, hjPnniCacheMaxPaths=hjPnniCacheMaxPaths, hjPnniCacheRecentInt=hjPnniCacheRecentInt, hjPnniCacheMaxEntries=hjPnniCacheMaxEntries, enterprises=enterprises, hjPnniAllowLGNPathLoops=hjPnniAllowLGNPathLoops, hjPnniCacheTimerFreq=hjPnniCacheTimerFreq, hjPnniNodeSvccCellDelayVariation=hjPnniNodeSvccCellDelayVariation, hjPnniNbrPeerRcvPtseReqErrs=hjPnniNbrPeerRcvPtseReqErrs)
