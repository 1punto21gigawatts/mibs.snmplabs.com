#
# PySNMP MIB module UTILIZATION-MANAGEMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/UTILIZATION-MANAGEMENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:30:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
avayaSystemStats, = mibBuilder.importSymbols("AVAYAGEN-MIB", "avayaSystemStats")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, TimeTicks, Integer32, Bits, NotificationType, Gauge32, Unsigned32, MibIdentifier, IpAddress, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "Integer32", "Bits", "NotificationType", "Gauge32", "Unsigned32", "MibIdentifier", "IpAddress", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
genStats = ModuleIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1))
genStats.setRevisions(('2003-05-18 16:16',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: genStats.setRevisionsDescriptions(('New element was added to support Memory Utilization per module display. The New Mib Object is genMemUtilizationTable that presents per module Physical Ram and Percentage of used memory - designed by P. Spector',))
if mibBuilder.loadTexts: genStats.setLastUpdated('190208200000Z')
if mibBuilder.loadTexts: genStats.setOrganization("Avaya's Concord Technology Center (CTC)")
if mibBuilder.loadTexts: genStats.setContactInfo('Keling Sun -- kelingsun@avaya.com')
if mibBuilder.loadTexts: genStats.setDescription('Generic Utilization Mib.')
class MBytes(TextualConvention, Integer32):
    description = 'Storage size, expressed in units of megabytes.'
    status = 'current'

genCpuUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 1))
genCpuUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 1, 1), )
if mibBuilder.loadTexts: genCpuUtilizationTable.setStatus('current')
if mibBuilder.loadTexts: genCpuUtilizationTable.setDescription('A list of CPU utilization entries.')
genCpuUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 1, 1, 1), ).setIndexNames((0, "UTILIZATION-MANAGEMENT-MIB", "genCpuIndex"))
if mibBuilder.loadTexts: genCpuUtilizationEntry.setStatus('current')
if mibBuilder.loadTexts: genCpuUtilizationEntry.setDescription('A collection of CPU utilization.')
genCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCpuIndex.setStatus('current')
if mibBuilder.loadTexts: genCpuIndex.setDescription('An index that uniquely identifies the CPU.')
genCpuUtilizationEnableMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genCpuUtilizationEnableMonitoring.setStatus('current')
if mibBuilder.loadTexts: genCpuUtilizationEnableMonitoring.setDescription('Enable or disable CPU utilization monitoring. The default is disabled(1).')
genCpuUtilizationEnableEventGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genCpuUtilizationEnableEventGeneration.setStatus('current')
if mibBuilder.loadTexts: genCpuUtilizationEnableEventGeneration.setDescription('Enable or disable event generation for CPU utilization. The default is disable (1).')
genCpuUtilizationHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genCpuUtilizationHighThreshold.setStatus('current')
if mibBuilder.loadTexts: genCpuUtilizationHighThreshold.setDescription('The high threshold of CPU utilization in percentage, which can be from 50% to 99%. If event generation is enabled while the utilization is above the threshold, an event will be generated. The default value of this threshold is 95%. No event will be generated when the utilization crosses below the high threshold.')
genCpuAverageUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCpuAverageUtilization.setStatus('current')
if mibBuilder.loadTexts: genCpuAverageUtilization.setDescription('The curent average CPU utilization in percentage if the monitoring is enabled and full window of results has been captured. Sample window is 60 seconds. Number of samples is 12, which results a sample interval of 5 seconds.')
genCpuCurrentUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCpuCurrentUtilization.setStatus('obsolete')
if mibBuilder.loadTexts: genCpuCurrentUtilization.setDescription('The current CPU utilization in percentage if the monitoring is enabled. The sample interval is 5 seconds.')
genCpuUtilizationHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 1, 2), )
if mibBuilder.loadTexts: genCpuUtilizationHistoryTable.setStatus('current')
if mibBuilder.loadTexts: genCpuUtilizationHistoryTable.setDescription('A list of CPU utilization history entries.')
genCpuUtilizationHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 1, 2, 1), ).setIndexNames((0, "UTILIZATION-MANAGEMENT-MIB", "genCpuIndex"), (0, "UTILIZATION-MANAGEMENT-MIB", "genCpuUtilizationHistorySampleIndex"))
if mibBuilder.loadTexts: genCpuUtilizationHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: genCpuUtilizationHistoryEntry.setDescription('A collection of CPU utilization history.')
genCpuUtilizationHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCpuUtilizationHistorySampleIndex.setStatus('current')
if mibBuilder.loadTexts: genCpuUtilizationHistorySampleIndex.setDescription('An index that uniquely identifies the particular sample. This index starts at 1 and increases by one as each new sample is taken.')
genCpuHistoryUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCpuHistoryUtilization.setStatus('current')
if mibBuilder.loadTexts: genCpuHistoryUtilization.setDescription('The cpu utiliztion in percentage of a particular sample. The number of samples is 12, which results in a sample interval of 5 seconds. The sample window is 60 seconds.')
genMemUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 2))
genMemUtilizationTotalRAM = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 2, 1), MBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genMemUtilizationTotalRAM.setStatus('current')
if mibBuilder.loadTexts: genMemUtilizationTotalRAM.setDescription('The total size of the ram in MBytes.')
genMemUtilizationOperationalImage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 2, 2), MBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genMemUtilizationOperationalImage.setStatus('current')
if mibBuilder.loadTexts: genMemUtilizationOperationalImage.setDescription('The total size of the operational image in Bytes.')
genMemUtilizationDynAllocMem = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 2, 3))
genMemUtilizationDynAllocMemUsed = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 2, 3, 1), MBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genMemUtilizationDynAllocMemUsed.setStatus('current')
if mibBuilder.loadTexts: genMemUtilizationDynAllocMemUsed.setDescription('The dynamically allocated memory has been used in Bytes.')
genMemUtilizationDynAllocMemMaxUsed = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 2, 3, 2), MBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genMemUtilizationDynAllocMemMaxUsed.setStatus('current')
if mibBuilder.loadTexts: genMemUtilizationDynAllocMemMaxUsed.setDescription('The dynamically allocated memory has been used maximally in Bytes.')
genMemUtilizationDynAllocMemAvailable = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 2, 3, 3), MBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genMemUtilizationDynAllocMemAvailable.setStatus('current')
if mibBuilder.loadTexts: genMemUtilizationDynAllocMemAvailable.setDescription('The available dynamically allocated memory in Bytes.')
genMemUtilizationAllocationFailures = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 2, 4), MBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genMemUtilizationAllocationFailures.setStatus('current')
if mibBuilder.loadTexts: genMemUtilizationAllocationFailures.setDescription('The total number of the memory that fails allocation.')
genMemUtilizationSysRAMTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 2, 5))
genMemUtilizationSysRAMNotificationHighWaterMark = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 2, 5, 1), MBytes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genMemUtilizationSysRAMNotificationHighWaterMark.setStatus('current')
if mibBuilder.loadTexts: genMemUtilizationSysRAMNotificationHighWaterMark.setDescription("The high water mark for ram allocation in Bytes. If this value has been exceeded, a trap will be generated. This value can't be higher than Total System RAM.")
genMemUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 2, 6), )
if mibBuilder.loadTexts: genMemUtilizationTable.setStatus('current')
if mibBuilder.loadTexts: genMemUtilizationTable.setDescription('Memory Utilization by module in stack or blade in modular solution')
genMemUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 2, 6, 1), ).setIndexNames((0, "UTILIZATION-MANAGEMENT-MIB", "genMemUtilizationID"))
if mibBuilder.loadTexts: genMemUtilizationEntry.setStatus('current')
if mibBuilder.loadTexts: genMemUtilizationEntry.setDescription('Memory Utilization Table indexed by Module ID')
genMemUtilizationID = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: genMemUtilizationID.setStatus('current')
if mibBuilder.loadTexts: genMemUtilizationID.setDescription('Module/Blade/SubAgent ID index')
genMemUtilizationPhyRam = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 2, 6, 1, 2), MBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genMemUtilizationPhyRam.setStatus('current')
if mibBuilder.loadTexts: genMemUtilizationPhyRam.setDescription('The total size of the physical ram in Bytes.')
genMemUtilizationPercentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 11, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genMemUtilizationPercentUsed.setStatus('current')
if mibBuilder.loadTexts: genMemUtilizationPercentUsed.setDescription('The percenatge of memory used.')
mibBuilder.exportSymbols("UTILIZATION-MANAGEMENT-MIB", genCpuUtilizationHistorySampleIndex=genCpuUtilizationHistorySampleIndex, genCpuUtilizationEntry=genCpuUtilizationEntry, genMemUtilizationAllocationFailures=genMemUtilizationAllocationFailures, genCpuUtilizationHistoryEntry=genCpuUtilizationHistoryEntry, genMemUtilizationSysRAMNotificationHighWaterMark=genMemUtilizationSysRAMNotificationHighWaterMark, genCpuUtilizationHistoryTable=genCpuUtilizationHistoryTable, genCpuAverageUtilization=genCpuAverageUtilization, MBytes=MBytes, genMemUtilizationEntry=genMemUtilizationEntry, genStats=genStats, genCpuUtilization=genCpuUtilization, genCpuHistoryUtilization=genCpuHistoryUtilization, genCpuUtilizationEnableMonitoring=genCpuUtilizationEnableMonitoring, genMemUtilization=genMemUtilization, genMemUtilizationPercentUsed=genMemUtilizationPercentUsed, genMemUtilizationOperationalImage=genMemUtilizationOperationalImage, genMemUtilizationDynAllocMem=genMemUtilizationDynAllocMem, genMemUtilizationSysRAMTrap=genMemUtilizationSysRAMTrap, genMemUtilizationTable=genMemUtilizationTable, genCpuUtilizationHighThreshold=genCpuUtilizationHighThreshold, genCpuUtilizationEnableEventGeneration=genCpuUtilizationEnableEventGeneration, genMemUtilizationDynAllocMemUsed=genMemUtilizationDynAllocMemUsed, genMemUtilizationID=genMemUtilizationID, genMemUtilizationDynAllocMemMaxUsed=genMemUtilizationDynAllocMemMaxUsed, genMemUtilizationDynAllocMemAvailable=genMemUtilizationDynAllocMemAvailable, genCpuUtilizationTable=genCpuUtilizationTable, PYSNMP_MODULE_ID=genStats, genMemUtilizationTotalRAM=genMemUtilizationTotalRAM, genCpuCurrentUtilization=genCpuCurrentUtilization, genCpuIndex=genCpuIndex, genMemUtilizationPhyRam=genMemUtilizationPhyRam)
