#
# PySNMP MIB module CXPortManager-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXPortManager-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
cxPortManager, = mibBuilder.importSymbols("CXProduct-SMI", "cxPortManager")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, TimeTicks, Gauge32, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Unsigned32, ObjectIdentity, IpAddress, Bits, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "Gauge32", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "IpAddress", "Bits", "MibIdentifier", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cxPrtMPlannedCfgTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 16, 1), )
if mibBuilder.loadTexts: cxPrtMPlannedCfgTable.setReference(' ')
if mibBuilder.loadTexts: cxPrtMPlannedCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: cxPrtMPlannedCfgTable.setDescription('A table that defines planned port configuration.')
cxPrtMPlannedCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 16, 1, 1), ).setIndexNames((0, "CXPortManager-MIB", "cxPrtMPrtNum"))
if mibBuilder.loadTexts: cxPrtMPlannedCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cxPrtMPlannedCfgEntry.setDescription('')
cxPrtMPrtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxPrtMPrtNum.setStatus('mandatory')
if mibBuilder.loadTexts: cxPrtMPrtNum.setDescription('Displays the port number. You cannot modify this object. It is a display that the software provides. Options: - CX900: 11, 21, 31, 41, 51, 61 or 71. The first digit identifies the slot number the I/O board resides in, the second digit identifies the port number on the I/O board. - CX1000: a single digit from 1 to 4. The port numbers available vary depending on the type of module. For example, the LAN module supports only one port per I/O board and the Voice module supports only two ports per I/O board, but the Frame Relay module supports 4 ports per I/O board. You distinguish between module port numbers by specifying the slot number of the I/O board using a different object. Default Value: none')
cxPrtMPrtType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxPrtMPrtType.setStatus('mandatory')
if mibBuilder.loadTexts: cxPrtMPrtType.setDescription('Determines the data link layer type for the port. The setting of this object is dynamic. The port immediately implements the setting that you enter. Options: other (1): removes the link layer configuration for the associated port ethernet (6) token_ring (9) lapb (16) sdlc (17) T1 (18) E1 (19) basic_isdn (20) async (22) frame_relay (32) bop (33) bisync (83) voice (100) Default Value: none Configuration Changed: operative')
cxPrtMAdminTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 16, 2), )
if mibBuilder.loadTexts: cxPrtMAdminTable.setReference(' ')
if mibBuilder.loadTexts: cxPrtMAdminTable.setStatus('mandatory')
if mibBuilder.loadTexts: cxPrtMAdminTable.setDescription('A table that controls ports.')
cxPrtMAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 16, 2, 1), ).setIndexNames((0, "CXPortManager-MIB", "cxPrtMPrtNum"))
if mibBuilder.loadTexts: cxPrtMAdminEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cxPrtMAdminEntry.setDescription('The index of the table is a port number which is in either the IF table or the planned CFG table.')
cxPrtMAdminPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("activate", 1), ("deactivate", 2), ("reinitialize", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cxPrtMAdminPortControl.setStatus('mandatory')
if mibBuilder.loadTexts: cxPrtMAdminPortControl.setDescription('Determines the state of the administrative configuration associated with the port. The setting of this object is dynamic. The port immediately implements the option you enter. Options: activate (1): activates the administrative configuration for a port which does not have any configuration. deactivate (2): puts a running port into a no configuration state. reintialize (3): activates a new administrative configuration for a port currently running an operative configuration. Default Value: none Configuration Changed: operative')
mibBuilder.exportSymbols("CXPortManager-MIB", cxPrtMPlannedCfgEntry=cxPrtMPlannedCfgEntry, cxPrtMAdminPortControl=cxPrtMAdminPortControl, cxPrtMAdminEntry=cxPrtMAdminEntry, cxPrtMPrtType=cxPrtMPrtType, cxPrtMPrtNum=cxPrtMPrtNum, cxPrtMAdminTable=cxPrtMAdminTable, cxPrtMPlannedCfgTable=cxPrtMPlannedCfgTable)
