#
# PySNMP MIB module GMPLS-LSR-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GMPLS-LSR-STD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:19:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
GmplsSegmentDirectionTC, = mibBuilder.importSymbols("GMPLS-TC-STD-MIB", "GmplsSegmentDirectionTC")
ifGeneralInformationGroup, ifCounterDiscontinuityGroup = mibBuilder.importSymbols("IF-MIB", "ifGeneralInformationGroup", "ifCounterDiscontinuityGroup")
mplsOutSegmentIndex, mplsPerfGroup, mplsXCGroup, mplsInterfaceGroup, mplsOutSegmentGroup, mplsInterfaceIndex, mplsLsrNotificationGroup, mplsInSegmentIndex, mplsInSegmentGroup = mibBuilder.importSymbols("MPLS-LSR-STD-MIB", "mplsOutSegmentIndex", "mplsPerfGroup", "mplsXCGroup", "mplsInterfaceGroup", "mplsOutSegmentGroup", "mplsInterfaceIndex", "mplsLsrNotificationGroup", "mplsInSegmentIndex", "mplsInSegmentGroup")
mplsStdMIB, = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "mplsStdMIB")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Unsigned32, iso, Counter32, Counter64, ObjectIdentity, Gauge32, NotificationType, Integer32, TimeTicks, Bits, zeroDotZero, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "Counter32", "Counter64", "ObjectIdentity", "Gauge32", "NotificationType", "Integer32", "TimeTicks", "Bits", "zeroDotZero", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
DisplayString, TextualConvention, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowPointer")
gmplsLsrStdMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 166, 15))
gmplsLsrStdMIB.setRevisions(('2007-02-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: gmplsLsrStdMIB.setRevisionsDescriptions(('Initial version issued as part of RFC 4803.',))
if mibBuilder.loadTexts: gmplsLsrStdMIB.setLastUpdated('200702270000Z')
if mibBuilder.loadTexts: gmplsLsrStdMIB.setOrganization('IETF Common Control And Measurement Plane (CCAMP) Working Group')
if mibBuilder.loadTexts: gmplsLsrStdMIB.setContactInfo(' Thomas D. Nadeau Cisco Systems, Inc. Email: tnadeau@cisco.com Adrian Farrel Old Dog Consulting Email: adrian@olddog.co.uk Comments about this document should be emailed directly to the CCAMP working group mailing list at ccamp@ops.ietf.org.')
if mibBuilder.loadTexts: gmplsLsrStdMIB.setDescription('Copyright (C) The IETF Trust (2007). This version of this MIB module is part of RFC 4803; see the RFC itself for full legal notices. This MIB module contains managed object definitions for the Generalized Multiprotocol (GMPLS) Label Switching Router as defined in Generalized Multi-Protocol Label Switching (GMPLS) Architecture, Mannie et al., RFC 3945, October 2004.')
gmplsLsrObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 15, 1))
gmplsLsrConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 15, 2))
gmplsInterfaceTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 15, 1, 1), )
if mibBuilder.loadTexts: gmplsInterfaceTable.setReference('1. Multiprotocol Label Switching (MPLS) Label Switching Router (LSR) Management Information Base (MIB), RFC 3813.')
if mibBuilder.loadTexts: gmplsInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: gmplsInterfaceTable.setDescription('This table specifies per-interface GMPLS capability and associated information. It extends the information in the mplsInterfaceTable of MPLS-LSR-STD-MIB through a sparse augmentation relationship.')
gmplsInterfaceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 15, 1, 1, 1), ).setIndexNames((0, "MPLS-LSR-STD-MIB", "mplsInterfaceIndex"))
if mibBuilder.loadTexts: gmplsInterfaceEntry.setReference('1. Multiprotocol Label Switching (MPLS) Label Switching Router (LSR) Management Information Base (MIB), RFC 3813.')
if mibBuilder.loadTexts: gmplsInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: gmplsInterfaceEntry.setDescription('A conceptual row in this table is created automatically by an LSR for each interface that is both capable of supporting GMPLS and configured to support GMPLS. Note that support of GMPLS is not limited to control plane signaling, but may include data-plane-only function configured through SNMP SET commands performed on this MIB module. A conceptual row in this table may also be created via SNMP SET commands or automatically by the LSR to supplement a conceptual row in the mplsInterfaceTable where the interface is not capable of GMPLS but where the other objects carried in this row provide useful additional information for an MPLS interface. A conceptual row in this table will exist if and only if a corresponding entry in the mplsInterfaceTable exists, and a corresponding entry in the ifTable exists with ifType = mpls(166). If the associated entry in the ifTable is operationally disabled (thus removing the GMPLS capabilities on the interface) or the entry in the mplsInterfaceTable is deleted, the corresponding entry in this table MUST be deleted shortly thereafter. The indexes are the same as for the mplsInterfaceTable. Thus, the entry with index 0 represents the per-platform label space and contains parameters that apply to all interfaces that participate in the per-platform label space.')
gmplsInterfaceSignalingCaps = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 15, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("unknown", 0), ("rsvpGmpls", 1), ("crldpGmpls", 2), ("otherGmpls", 3))).clone(namedValues=NamedValues(("rsvpGmpls", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gmplsInterfaceSignalingCaps.setReference('1. Generalized MPLS Signaling - CR-LDP Extensions, RFC 3472. 2. The Multiprotocol Label Switching (MPLS) Working Group decision on MPLS signaling protocols, RFC 3468. 3. Generalized MPLS Signaling - RSVP-TE Extensions, RFC 3473.')
if mibBuilder.loadTexts: gmplsInterfaceSignalingCaps.setStatus('current')
if mibBuilder.loadTexts: gmplsInterfaceSignalingCaps.setDescription("Defines the signaling capabilities on this interface. Multiple bits may legitimately be set at once, but if 'unknown' is set then no other bit may be set. Setting no bits implies that GMPLS signaling cannot be performed on this interface and all LSPs must be manually provisioned or that this table entry is only present to supplement an entry in the mplsInterfaceTable by providing the information carried in other objects in this row.")
gmplsInterfaceRsvpHelloPeriod = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 15, 1, 1, 1, 2), Unsigned32().clone(3000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: gmplsInterfaceRsvpHelloPeriod.setReference('1. RSVP-TE: Extensions to RSVP for LSP Tunnels, RFC 3209, section 5. 2. Generalized MPLS Signaling - RSVP-TE Extensions, RFC 3473, section 9.3.')
if mibBuilder.loadTexts: gmplsInterfaceRsvpHelloPeriod.setStatus('current')
if mibBuilder.loadTexts: gmplsInterfaceRsvpHelloPeriod.setDescription('Period, in milliseconds, between sending Resource Reservation Protocol (RSVP) Hello messages on this interface. A value of 0 indicates that no Hello messages should be sent on this interface. This object is only valid if gmplsInterfaceSignalingCaps has no bits set or includes the rsvpGmpls bit.')
gmplsInSegmentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 15, 1, 2), )
if mibBuilder.loadTexts: gmplsInSegmentTable.setReference('1. Multiprotocol Label Switching (MPLS) Label Switching Router (LSR) Management Information Base (MIB), RFC 3813.')
if mibBuilder.loadTexts: gmplsInSegmentTable.setStatus('current')
if mibBuilder.loadTexts: gmplsInSegmentTable.setDescription('This table sparse augments the mplsInSegmentTable of MPLS-LSR-STD-MIB to provide GMPLS-specific information about incoming segments to an LSR.')
gmplsInSegmentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 15, 1, 2, 1), ).setIndexNames((0, "MPLS-LSR-STD-MIB", "mplsInSegmentIndex"))
if mibBuilder.loadTexts: gmplsInSegmentEntry.setReference('1. Multiprotocol Label Switching (MPLS) Label Switching Router (LSR) Management Information Base (MIB), RFC 3813.')
if mibBuilder.loadTexts: gmplsInSegmentEntry.setStatus('current')
if mibBuilder.loadTexts: gmplsInSegmentEntry.setDescription('An entry in this table extends the representation of an incoming segment represented by an entry in the mplsInSegmentTable in MPLS-LSR-STD-MIB through a sparse augmentation. An entry can be created by a network administrator via SNMP SET commands, or in response to signaling protocol events. Note that the storage type for this entry is given by the value of mplsInSegmentStorageType in the corresponding entry of the mplsInSegmentTable.')
gmplsInSegmentDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 15, 1, 2, 1, 1), GmplsSegmentDirectionTC().clone('forward')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gmplsInSegmentDirection.setReference('1. Multiprotocol Label Switching (MPLS) Label Switching Router (LSR) Management Information Base (MIB), RFC 3813.')
if mibBuilder.loadTexts: gmplsInSegmentDirection.setStatus('current')
if mibBuilder.loadTexts: gmplsInSegmentDirection.setDescription('This object indicates the direction of data flow on this segment. This object cannot be modified if mplsInSegmentRowStatus for the corresponding entry in the mplsInSegmentTable is active(1).')
gmplsInSegmentExtraParamsPtr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 15, 1, 2, 1, 2), RowPointer().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gmplsInSegmentExtraParamsPtr.setStatus('current')
if mibBuilder.loadTexts: gmplsInSegmentExtraParamsPtr.setDescription('Some tunnels will run over transports that can usefully support technology-specific additional parameters (for example, Synchronous Optical Network (SONET) resource usage). Such can be supplied from an external table and referenced from here. A value of zeroDotZero in this attribute indicates that there is no such additional information.')
gmplsOutSegmentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 15, 1, 3), )
if mibBuilder.loadTexts: gmplsOutSegmentTable.setReference('1. Multiprotocol Label Switching (MPLS) Label Switching Router (LSR) Management Information Base (MIB), RFC 3813.')
if mibBuilder.loadTexts: gmplsOutSegmentTable.setStatus('current')
if mibBuilder.loadTexts: gmplsOutSegmentTable.setDescription('This table sparse augments the mplsOutSegmentTable of MPLS-LSR-STD-MIB to provide GMPLS-specific information about outgoing segments from an LSR.')
gmplsOutSegmentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 15, 1, 3, 1), ).setIndexNames((0, "MPLS-LSR-STD-MIB", "mplsOutSegmentIndex"))
if mibBuilder.loadTexts: gmplsOutSegmentEntry.setReference('1. Multiprotocol Label Switching (MPLS) Label Switching Router (LSR) Management Information Base (MIB), RFC 3813.')
if mibBuilder.loadTexts: gmplsOutSegmentEntry.setStatus('current')
if mibBuilder.loadTexts: gmplsOutSegmentEntry.setDescription('An entry in this table extends the representation of an outgoing segment represented by an entry in the mplsOutSegmentTable of MPLS-LSR-STD-MIB through a sparse augmentation. An entry can be created by a network administrator via SNMP SET commands, or in response to signaling protocol events. Note that the storage type for this entry is given by the value of mplsOutSegmentStorageType in the corresponding entry of the mplsOutSegmentTable.')
gmplsOutSegmentDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 15, 1, 3, 1, 1), GmplsSegmentDirectionTC().clone('forward')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gmplsOutSegmentDirection.setReference('1. Multiprotocol Label Switching (MPLS) Label Switching Router (LSR) Management Information Base (MIB), RFC 3813.')
if mibBuilder.loadTexts: gmplsOutSegmentDirection.setStatus('current')
if mibBuilder.loadTexts: gmplsOutSegmentDirection.setDescription('This object indicates the direction of data flow on this segment. This object cannot be modified if mplsOutSegmentRowStatus for the corresponding entry in the mplsOutSegmentTable is active(1).')
gmplsOutSegmentTTLDecrement = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 15, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gmplsOutSegmentTTLDecrement.setReference('1. Time To Live (TTL) Processing in Multi-Protocol Label Switching (MPLS) Networks, RFC 3443. 2. Generalized Multiprotocol Label Switching (GMPLS) Traffic Engineering Management Information Base, RFC 4802.')
if mibBuilder.loadTexts: gmplsOutSegmentTTLDecrement.setStatus('current')
if mibBuilder.loadTexts: gmplsOutSegmentTTLDecrement.setDescription('This object indicates the amount by which to decrement the Time to Live (TTL) of any payload packets forwarded on this segment if per-hop decrementing is being done. A value of zero indicates that no decrement should be made or that per-hop decrementing is not in use. See the gmplsTunnelTTLDecrement object in the gmplsTunnelTable of GMPLS-TE-STD-MIB for a value by which to decrement the TTL for the whole of a tunnel. This object cannot be modified if mplsOutSegmentRowStatus for the associated entry in the mplsOutSegmentTable is active(1).')
gmplsOutSegmentExtraParamsPtr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 15, 1, 3, 1, 3), RowPointer().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gmplsOutSegmentExtraParamsPtr.setStatus('current')
if mibBuilder.loadTexts: gmplsOutSegmentExtraParamsPtr.setDescription('Some tunnels will run over transports that can usefully support technology-specific additional parameters (for example, SONET resource usage). Such can be supplied from an external table and referenced from here. A value of zeroDotZero in this attribute indicates that there is no such additional information.')
gmplsLsrGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 15, 2, 1))
gmplsLsrCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 15, 2, 2))
gmplsLsrModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 166, 15, 2, 2, 1)).setObjects(("IF-MIB", "ifGeneralInformationGroup"), ("IF-MIB", "ifCounterDiscontinuityGroup"), ("MPLS-LSR-STD-MIB", "mplsInterfaceGroup"), ("MPLS-LSR-STD-MIB", "mplsInSegmentGroup"), ("MPLS-LSR-STD-MIB", "mplsOutSegmentGroup"), ("MPLS-LSR-STD-MIB", "mplsXCGroup"), ("MPLS-LSR-STD-MIB", "mplsPerfGroup"), ("MPLS-LSR-STD-MIB", "mplsLsrNotificationGroup"), ("GMPLS-LSR-STD-MIB", "gmplsInterfaceGroup"), ("GMPLS-LSR-STD-MIB", "gmplsInSegmentGroup"), ("GMPLS-LSR-STD-MIB", "gmplsOutSegmentGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gmplsLsrModuleFullCompliance = gmplsLsrModuleFullCompliance.setStatus('current')
if mibBuilder.loadTexts: gmplsLsrModuleFullCompliance.setDescription('Compliance statement for agents that provide full support for GMPLS-LSR-STD-MIB. The mandatory group has to be implemented by all LSRs that originate, terminate, or act as transit for TE-LSPs/tunnels. In addition, depending on the type of tunnels supported, other groups become mandatory as explained below.')
gmplsLsrModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 166, 15, 2, 2, 2)).setObjects(("IF-MIB", "ifGeneralInformationGroup"), ("IF-MIB", "ifCounterDiscontinuityGroup"), ("MPLS-LSR-STD-MIB", "mplsInterfaceGroup"), ("MPLS-LSR-STD-MIB", "mplsInSegmentGroup"), ("MPLS-LSR-STD-MIB", "mplsOutSegmentGroup"), ("MPLS-LSR-STD-MIB", "mplsXCGroup"), ("MPLS-LSR-STD-MIB", "mplsPerfGroup"), ("GMPLS-LSR-STD-MIB", "gmplsInterfaceGroup"), ("GMPLS-LSR-STD-MIB", "gmplsInSegmentGroup"), ("GMPLS-LSR-STD-MIB", "gmplsOutSegmentGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gmplsLsrModuleReadOnlyCompliance = gmplsLsrModuleReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: gmplsLsrModuleReadOnlyCompliance.setDescription('Compliance requirement for implementations that only provide read-only support for GMPLS-LSR-STD-MIB. Such devices can then be monitored but cannot be configured using this MIB module.')
gmplsInterfaceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 15, 2, 1, 1)).setObjects(("GMPLS-LSR-STD-MIB", "gmplsInterfaceSignalingCaps"), ("GMPLS-LSR-STD-MIB", "gmplsInterfaceRsvpHelloPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gmplsInterfaceGroup = gmplsInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: gmplsInterfaceGroup.setDescription('Collection of objects that provide additional information for an MPLS interface and are needed for GMPLS interface configuration and performance information.')
gmplsInSegmentGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 15, 2, 1, 2)).setObjects(("GMPLS-LSR-STD-MIB", "gmplsInSegmentDirection"), ("GMPLS-LSR-STD-MIB", "gmplsInSegmentExtraParamsPtr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gmplsInSegmentGroup = gmplsInSegmentGroup.setStatus('current')
if mibBuilder.loadTexts: gmplsInSegmentGroup.setDescription('Collection of objects that provide additional information for an MPLS in-segment and are needed for GMPLS in-segment configuration and performance information.')
gmplsOutSegmentGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 15, 2, 1, 3)).setObjects(("GMPLS-LSR-STD-MIB", "gmplsOutSegmentDirection"), ("GMPLS-LSR-STD-MIB", "gmplsOutSegmentTTLDecrement"), ("GMPLS-LSR-STD-MIB", "gmplsOutSegmentExtraParamsPtr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gmplsOutSegmentGroup = gmplsOutSegmentGroup.setStatus('current')
if mibBuilder.loadTexts: gmplsOutSegmentGroup.setDescription('Collection of objects that provide additional information for an MPLS out-segment and are needed for GMPLS out-segment configuration and performance information.')
mibBuilder.exportSymbols("GMPLS-LSR-STD-MIB", gmplsOutSegmentTTLDecrement=gmplsOutSegmentTTLDecrement, gmplsLsrObjects=gmplsLsrObjects, gmplsInSegmentGroup=gmplsInSegmentGroup, gmplsInterfaceSignalingCaps=gmplsInterfaceSignalingCaps, gmplsInSegmentDirection=gmplsInSegmentDirection, gmplsInterfaceTable=gmplsInterfaceTable, gmplsOutSegmentTable=gmplsOutSegmentTable, gmplsLsrConformance=gmplsLsrConformance, gmplsOutSegmentGroup=gmplsOutSegmentGroup, gmplsLsrModuleFullCompliance=gmplsLsrModuleFullCompliance, gmplsInSegmentEntry=gmplsInSegmentEntry, gmplsLsrGroups=gmplsLsrGroups, gmplsInSegmentExtraParamsPtr=gmplsInSegmentExtraParamsPtr, gmplsOutSegmentDirection=gmplsOutSegmentDirection, gmplsOutSegmentExtraParamsPtr=gmplsOutSegmentExtraParamsPtr, gmplsOutSegmentEntry=gmplsOutSegmentEntry, gmplsLsrModuleReadOnlyCompliance=gmplsLsrModuleReadOnlyCompliance, PYSNMP_MODULE_ID=gmplsLsrStdMIB, gmplsLsrCompliances=gmplsLsrCompliances, gmplsInterfaceEntry=gmplsInterfaceEntry, gmplsLsrStdMIB=gmplsLsrStdMIB, gmplsInterfaceRsvpHelloPeriod=gmplsInterfaceRsvpHelloPeriod, gmplsInterfaceGroup=gmplsInterfaceGroup, gmplsInSegmentTable=gmplsInSegmentTable)
