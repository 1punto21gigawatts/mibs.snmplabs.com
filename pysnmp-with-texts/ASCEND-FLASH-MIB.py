#
# PySNMP MIB module ASCEND-FLASH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-FLASH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:26:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
flashGroup, = mibBuilder.importSymbols("ASCEND-MIB", "flashGroup")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Counter64, MibIdentifier, ModuleIdentity, Integer32, NotificationType, Unsigned32, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "MibIdentifier", "ModuleIdentity", "Integer32", "NotificationType", "Unsigned32", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "Gauge32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
flashDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 22, 1))
class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

flashDevices = MibScalar((1, 3, 6, 1, 4, 1, 529, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDevices.setStatus('mandatory')
if mibBuilder.loadTexts: flashDevices.setDescription('The maximum number of flash devices that are presented in the flashDeviceTable. The maximum flashDeviceSocket. A value of 0 indicates that the agent does not support any flashDevices')
flashDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 529, 22, 1, 2), )
if mibBuilder.loadTexts: flashDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: flashDeviceTable.setDescription('This table contains one entry for each flash socket being mangaged via SNMP agent in this system.')
flashDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 22, 1, 2, 1), ).setIndexNames((0, "ASCEND-FLASH-MIB", "flashDeviceSocket"))
if mibBuilder.loadTexts: flashDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: flashDeviceEntry.setDescription('An entry in the flashDeviceTable. For each managed flashDevice there is one entry present. It provides information for a single flashDevice as indexed via the flashDeviceSocket.')
flashDeviceSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 22, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDeviceSocket.setStatus('mandatory')
if mibBuilder.loadTexts: flashDeviceSocket.setDescription('A value that uniquely identifies a single entry in the flashDeviceTable.')
flashDeviceController = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 22, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDeviceController.setStatus('mandatory')
if mibBuilder.loadTexts: flashDeviceController.setDescription('Uniquely identifies the controller that manages this flash device. One or more devices can be managed by a single controller. The devices managed by this agent might have one or more controllers associated to them.')
flashDeviceControllerSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 22, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDeviceControllerSocket.setStatus('mandatory')
if mibBuilder.loadTexts: flashDeviceControllerSocket.setDescription('Identifies the socket of the flashDeviceController for this flashDeviceSocket. One or more sockets can be managed by the controller identified via flashDeviceController. Each socket of a given controller has a unique flashDeviceControllerSocket.')
flashDeviceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 22, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDeviceSize.setStatus('mandatory')
if mibBuilder.loadTexts: flashDeviceSize.setDescription('The maximum number of bytes this flashDevice can store.')
flashDeviceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 22, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDeviceUsed.setStatus('mandatory')
if mibBuilder.loadTexts: flashDeviceUsed.setDescription('The Total number of bytes currently stored in this flashDevice.')
flashDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 22, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inserted", 1), ("removed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDeviceState.setStatus('mandatory')
if mibBuilder.loadTexts: flashDeviceState.setDescription('The current state of this given flashDevice.')
flashDeviceMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 22, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDeviceMaster.setStatus('mandatory')
if mibBuilder.loadTexts: flashDeviceMaster.setDescription('Identifies if this entry is controlled by the master controller or a slave controller. flashDeviceMaster is true if this socket is managed by the master controller and false otherwise.')
flashDeviceFormatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 22, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99, 100))).clone(namedValues=NamedValues(("format-v1", 1), ("format-v2", 2), ("format-v3", 3), ("format-other", 99), ("unformatted", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDeviceFormatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: flashDeviceFormatStatus.setDescription('The format present on the flashDevice.')
flashDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 22, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDeviceDescription.setStatus('mandatory')
if mibBuilder.loadTexts: flashDeviceDescription.setDescription('Textual description of the flashDevice.')
flashFileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 22, 2), )
if mibBuilder.loadTexts: flashFileTable.setStatus('mandatory')
if mibBuilder.loadTexts: flashFileTable.setDescription('Contains information about all files that are managed via the agent on this system.')
flashFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 22, 2, 1), ).setIndexNames((0, "ASCEND-FLASH-MIB", "flashFileSocket"), (0, "ASCEND-FLASH-MIB", "flashFileIndex"))
if mibBuilder.loadTexts: flashFileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: flashFileEntry.setDescription('Information about a single file on a given socket. A socket is a single access entity.')
flashFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 22, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashFileIndex.setStatus('mandatory')
if mibBuilder.loadTexts: flashFileIndex.setDescription('The unique index for a given socket that identifies this file.')
flashFileSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 22, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashFileSocket.setStatus('mandatory')
if mibBuilder.loadTexts: flashFileSocket.setDescription('The socket on which the file resides.')
flashFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 22, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: flashFileSize.setDescription('The size of the file in bytes.')
flashFileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 22, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("open-read", 3), ("open-write", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashFileStatus.setStatus('mandatory')
if mibBuilder.loadTexts: flashFileStatus.setDescription('The current status of the file.')
flashFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 22, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashFileName.setStatus('mandatory')
if mibBuilder.loadTexts: flashFileName.setDescription('The name used by the system to idenfity the file')
flashFileChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 22, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashFileChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: flashFileChecksum.setDescription('The checksum for this file.')
flashFileVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 22, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashFileVersion.setStatus('mandatory')
if mibBuilder.loadTexts: flashFileVersion.setDescription('The version of the file')
flashFileAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 22, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashFileAccess.setStatus('mandatory')
if mibBuilder.loadTexts: flashFileAccess.setDescription('Access flags for the file.')
flashFileDateTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 22, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashFileDateTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: flashFileDateTimeStamp.setDescription('The timestamp of the file when it was written to the flash')
flashOperation = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 22, 3))
flashOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 529, 22, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 50, 51, 52, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162))).clone(namedValues=NamedValues(("idle", 1), ("activeFormating", 2), ("activeFileUpload", 3), ("activeConfigUpload", 4), ("activeConfigDownload", 5), ("activeInProgress", 6), ("success", 50), ("errorGeneric", 51), ("errorFilenameNotValid", 52), ("errorTftpEnotFound", 101), ("errorTftpEaccess", 102), ("errorTftpEnoSpace", 103), ("errorTftpEbadOp", 104), ("errorTftpEbadTid", 105), ("errorTftpEexists", 106), ("errorTftpEnouser", 107), ("errorTftpEparm", 108), ("errorTftpEbusy", 109), ("errorTftpEresource", 110), ("errorTftpEtimeout", 111), ("errorTftpEuerror", 112), ("errorTftpEretries", 113), ("errorTftpCreateFile", 114), ("errorTftpOpenFile", 115), ("errorTftpReadData", 116), ("errorTftpWriteData", 117), ("errorFlashResultBadParam", 151), ("errorFlashResultNotFound", 152), ("errorFlashResultTooManyOpen", 153), ("errorFlashResultAlreadyOpen", 154), ("errorFlashResultNullFile", 155), ("errorFlashResultNoCard", 156), ("errorFlashResultNoFormat", 157), ("errorFlashResultOldFormat", 158), ("errorFlashResultReadOnly", 159), ("errorFlashResultNoSpace", 160), ("errorFlashResultUnavail", 161), ("errorFlashResultInternalError", 162)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashOperationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: flashOperationStatus.setDescription("Status of the current operation in progress or the appropiate error indication for the last operation performed. If the operation was performed successfully 'no-operation-in-progress' is returned.")
flashOperationCommand = MibScalar((1, 3, 6, 1, 4, 1, 529, 22, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("format-card", 1), ("tftp-upload", 2), ("no-command", 3), ("load-config", 4), ("save-config", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flashOperationCommand.setStatus('mandatory')
if mibBuilder.loadTexts: flashOperationCommand.setDescription('The object indicates the current operation. A set to the object triggers the operation to be performed. If an operation is in progress a set operation to this object causes a generic error. format-card formats the card in the given socket. tftp-upload describes the upload of a file from a TFTP host to the system. load-config reads the file described in flashOperationSrcFileName into the system. save-config sends the config to the TFTP host. Note that the TFTP host must allow write operations to take advantage of this feature.')
flashOperationHost = MibScalar((1, 3, 6, 1, 4, 1, 529, 22, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flashOperationHost.setStatus('mandatory')
if mibBuilder.loadTexts: flashOperationHost.setDescription('Ip address of the TFTP host associated with an operation. If an operation is in progress a set operation to this object causes a generic error. For save operation this host must allow TFTP write operation.')
flashOperationDestFileName = MibScalar((1, 3, 6, 1, 4, 1, 529, 22, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flashOperationDestFileName.setStatus('mandatory')
if mibBuilder.loadTexts: flashOperationDestFileName.setDescription('Destination filename for operations. For a save operation this is the filename to be written to on the TFTP host. For load operations this is the filename on the system. If an operation is in progress a set operation to this object causes a generic error.')
flashOperationSrcFileName = MibScalar((1, 3, 6, 1, 4, 1, 529, 22, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flashOperationSrcFileName.setStatus('mandatory')
if mibBuilder.loadTexts: flashOperationSrcFileName.setDescription('Source filename for operations. For a save operation this is the filename on the system. For load operations this is the filename to be read from to on the TFTP host. If an operation is in progress a set operation to this object causes a generic error.')
flashOperationSocket = MibScalar((1, 3, 6, 1, 4, 1, 529, 22, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flashOperationSocket.setStatus('mandatory')
if mibBuilder.loadTexts: flashOperationSocket.setDescription('The flash socket to operate on. If an operation is in progress a set operation to this object causes a generic error.')
flashOperationTftpPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 22, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flashOperationTftpPort.setStatus('mandatory')
if mibBuilder.loadTexts: flashOperationTftpPort.setDescription('This object defines the port # to use on the remote system when starting a TFTP operation using a flashOperationCommand. The default port is 69/(tcp/udp) Trivial File Transfer. The port numbers allowed for configuration range from 1..65535')
mibBuilder.exportSymbols("ASCEND-FLASH-MIB", flashDevices=flashDevices, flashFileIndex=flashFileIndex, flashFileSocket=flashFileSocket, flashFileVersion=flashFileVersion, flashDeviceFormatStatus=flashDeviceFormatStatus, flashOperationSocket=flashOperationSocket, flashOperationHost=flashOperationHost, flashFileTable=flashFileTable, flashDeviceTable=flashDeviceTable, flashOperation=flashOperation, flashFileEntry=flashFileEntry, flashOperationCommand=flashOperationCommand, flashDeviceSocket=flashDeviceSocket, TruthValue=TruthValue, flashFileName=flashFileName, flashFileAccess=flashFileAccess, flashOperationStatus=flashOperationStatus, flashDeviceState=flashDeviceState, flashDeviceMaster=flashDeviceMaster, flashDevice=flashDevice, flashDeviceController=flashDeviceController, flashDeviceUsed=flashDeviceUsed, flashOperationTftpPort=flashOperationTftpPort, flashOperationDestFileName=flashOperationDestFileName, flashFileStatus=flashFileStatus, flashDeviceEntry=flashDeviceEntry, flashOperationSrcFileName=flashOperationSrcFileName, flashFileSize=flashFileSize, flashFileChecksum=flashFileChecksum, flashFileDateTimeStamp=flashFileDateTimeStamp, flashDeviceControllerSocket=flashDeviceControllerSocket, flashDeviceDescription=flashDeviceDescription, flashDeviceSize=flashDeviceSize)
