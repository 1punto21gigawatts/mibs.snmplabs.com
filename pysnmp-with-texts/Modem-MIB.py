#
# PySNMP MIB module Modem-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Modem-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, Gauge32, ModuleIdentity, Unsigned32, Counter64, MibIdentifier, mib_2, ObjectIdentity, Counter32, iso, Bits, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "ModuleIdentity", "Unsigned32", "Counter64", "MibIdentifier", "mib-2", "ObjectIdentity", "Counter32", "iso", "Bits", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
mdmMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 38, 1))
if mibBuilder.loadTexts: mdmMIB.setLastUpdated('9406120000Z')
if mibBuilder.loadTexts: mdmMIB.setOrganization('IETF Modem Management Working Group')
if mibBuilder.loadTexts: mdmMIB.setContactInfo(' Steven Waldbusser Postal: Carnegie Mellon University 5000 Forbes Ave Pittsburgh, PA, 15213 US Tel: +1 412 268 6628 Fax: +1 412 268 4987 E-mail: waldbusser@cmu.edu')
if mibBuilder.loadTexts: mdmMIB.setDescription('The MIB module for management of dial-up modems.')
mdmMib = MibIdentifier((1, 3, 6, 1, 2, 1, 38))
mdmMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 38, 1, 1))
mdmConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 38, 1, 2))
mdmCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 38, 1, 2, 1))
mdmGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 38, 1, 2, 2))
mdmIDGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 38, 1, 2, 2, 1)).setObjects(("Modem-MIB", "mdmIDManufacturerOID"), ("Modem-MIB", "mdmIDProductDetails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mdmIDGroup = mdmIDGroup.setStatus('current')
if mibBuilder.loadTexts: mdmIDGroup.setDescription('A collection of objects that identify the manufacturer and model information for a modem.')
mdmLineInterfaceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 38, 1, 2, 2, 2)).setObjects(("Modem-MIB", "mdmLineCarrierLossTime"), ("Modem-MIB", "mdmLineState"), ("Modem-MIB", "mdmLineCapabilitiesID"), ("Modem-MIB", "mdmLineCapabilitiesEnableRequested"), ("Modem-MIB", "mdmLineCapabilitiesEnableGranted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mdmLineInterfaceGroup = mdmLineInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: mdmLineInterfaceGroup.setDescription("A collection of objects that describe the configuration and state of the modem's line interface.")
mdmDTEInterfaceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 38, 1, 2, 2, 3)).setObjects(("Modem-MIB", "mdmDTEActionDTROnToOff"), ("Modem-MIB", "mdmDTEActionDTROffToOn"), ("Modem-MIB", "mdmDTESyncTimingSource"), ("Modem-MIB", "mdmDTESyncAsyncMode"), ("Modem-MIB", "mdmDTEInactivityTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mdmDTEInterfaceGroup = mdmDTEInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: mdmDTEInterfaceGroup.setDescription("A collection of objects that describe the configuration and state of the modem's DTE interface.")
mdmCallControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 38, 1, 2, 2, 4)).setObjects(("Modem-MIB", "mdmCCRingsBeforeAnswer"), ("Modem-MIB", "mdmCCCallSetUpFailTimer"), ("Modem-MIB", "mdmCCResultCodeEnable"), ("Modem-MIB", "mdmCCEscapeAction"), ("Modem-MIB", "mdmCCCallDuration"), ("Modem-MIB", "mdmCCConnectionFailReason"), ("Modem-MIB", "mdmCCStoredDialString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mdmCallControlGroup = mdmCallControlGroup.setStatus('current')
if mibBuilder.loadTexts: mdmCallControlGroup.setDescription('A collection of objects that describe the configuration of call control capabilities on the modem and the status of calls placed with this modem.')
mdmErrorControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 38, 1, 2, 2, 5)).setObjects(("Modem-MIB", "mdmECErrorControlUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mdmErrorControlGroup = mdmErrorControlGroup.setStatus('current')
if mibBuilder.loadTexts: mdmErrorControlGroup.setDescription('A collection of objects that describe the configuration and state of error control on a modem.')
mdmDataCompressionGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 38, 1, 2, 2, 6)).setObjects(("Modem-MIB", "mdmDCCompressionTypeUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mdmDataCompressionGroup = mdmDataCompressionGroup.setStatus('current')
if mibBuilder.loadTexts: mdmDataCompressionGroup.setDescription('A collection of objects that describe the configuration and state of data compression on a modem.')
mdmSignalConvertorGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 38, 1, 2, 2, 7)).setObjects(("Modem-MIB", "mdmSCCurrentLineReceiveRate"), ("Modem-MIB", "mdmSCCurrentLineTransmitRate"), ("Modem-MIB", "mdmSCInitialLineReceiveRate"), ("Modem-MIB", "mdmSCInitialLineTransmitRate"), ("Modem-MIB", "mdmSCModulationSchemeUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mdmSignalConvertorGroup = mdmSignalConvertorGroup.setStatus('current')
if mibBuilder.loadTexts: mdmSignalConvertorGroup.setDescription('A collection of objects that describe the configuration and state of error control on a modem.')
mdmStatisticsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 38, 1, 2, 2, 8)).setObjects(("Modem-MIB", "mdmStatsRingNoAnswers"), ("Modem-MIB", "mdmStatsIncomingConnectionFailures"), ("Modem-MIB", "mdmStatsIncomingConnectionCompletions"), ("Modem-MIB", "mdmStatsFailedDialAttempts"), ("Modem-MIB", "mdmStatsOutgoingConnectionFailures"), ("Modem-MIB", "mdmStatsOutgoingConnectionCompletions"), ("Modem-MIB", "mdmStatsRetrains"), ("Modem-MIB", "mdmStats2400OrLessConnections"), ("Modem-MIB", "mdmStats2400To14400Connections"), ("Modem-MIB", "mdmStatsGreaterThan14400Connections"), ("Modem-MIB", "mdmStatsErrorControlledConnections"), ("Modem-MIB", "mdmStatsCompressedConnections"), ("Modem-MIB", "mdmStatsCompressionEfficiency"), ("Modem-MIB", "mdmStatsSentOctets"), ("Modem-MIB", "mdmStatsReceivedOctets"), ("Modem-MIB", "mdmStatsSentDataFrames"), ("Modem-MIB", "mdmStatsReceivedDataFrames"), ("Modem-MIB", "mdmStatsResentFrames"), ("Modem-MIB", "mdmStatsErrorFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mdmStatisticsGroup = mdmStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: mdmStatisticsGroup.setDescription('A collection of objects that describe the state of calls on this modem.')
mdmNumber = MibScalar((1, 3, 6, 1, 2, 1, 38, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmNumber.setStatus('current')
if mibBuilder.loadTexts: mdmNumber.setDescription('The number of modem rows in the modem table. This value defines the maximum value of the mdmIndex object.')
mdmIDTable = MibTable((1, 3, 6, 1, 2, 1, 38, 1, 1, 2), )
if mibBuilder.loadTexts: mdmIDTable.setStatus('current')
if mibBuilder.loadTexts: mdmIDTable.setDescription('The base table for the modems managed by this MIB. The mdmLineTable, mdmDTEInterfaceTable, mdmCallControlTable, and mdmStatsTable all augment the rows defined in this table.')
mdmIDEntry = MibTableRow((1, 3, 6, 1, 2, 1, 38, 1, 1, 2, 1), ).setIndexNames((0, "Modem-MIB", "mdmIndex"))
if mibBuilder.loadTexts: mdmIDEntry.setStatus('current')
if mibBuilder.loadTexts: mdmIDEntry.setDescription('Entries in this table are created only by the agent. One entry exists for each modem managed by the agent.')
mdmIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mdmIndex.setStatus('current')
if mibBuilder.loadTexts: mdmIndex.setDescription('A unique number for each modem that ranges from 1 to mdmNumber. The value must remain constant at least from one re-initialization of the network management agent to the next.')
mdmIDManufacturerOID = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIDManufacturerOID.setReference('V.58 attribute manufacturerID subfield ManufacturerOI')
if mibBuilder.loadTexts: mdmIDManufacturerOID.setStatus('current')
if mibBuilder.loadTexts: mdmIDManufacturerOID.setDescription('This value is intended to identify the manufacturer, model, and version of this modem. This may be used to identify the existance of enterprise-specific functions and behaviours.')
mdmIDProductDetails = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIDProductDetails.setReference('V.58 attribute manufacturerID subfield productDetails')
if mibBuilder.loadTexts: mdmIDProductDetails.setStatus('current')
if mibBuilder.loadTexts: mdmIDProductDetails.setDescription("A textual description of this device, including the manufacturer's name, modem model name, hardware revision, firmware revision, and optionally, its serial number. The exact format of this description is defined by the vendor. This description may only contain characters from the NVT ASCII character set.")
mdmLineTable = MibTable((1, 3, 6, 1, 2, 1, 38, 1, 1, 3), )
if mibBuilder.loadTexts: mdmLineTable.setStatus('current')
if mibBuilder.loadTexts: mdmLineTable.setDescription('The modem Line Table augments the modem ID table.')
mdmLineEntry = MibTableRow((1, 3, 6, 1, 2, 1, 38, 1, 1, 3, 1), )
mdmIDEntry.registerAugmentions(("Modem-MIB", "mdmLineEntry"))
mdmLineEntry.setIndexNames(*mdmIDEntry.getIndexNames())
if mibBuilder.loadTexts: mdmLineEntry.setStatus('current')
if mibBuilder.loadTexts: mdmLineEntry.setDescription('Entries in this table are created only by the agent. One entry exists for each modem managed by the agent.')
mdmLineCarrierLossTime = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLineCarrierLossTime.setReference('V.58 lineSignalFailDisconnectTimer')
if mibBuilder.loadTexts: mdmLineCarrierLossTime.setStatus('current')
if mibBuilder.loadTexts: mdmLineCarrierLossTime.setDescription("Duration in 10ths of a second the modem waits after loss of carrier before hanging up. If this value is set to `255', the modem will not hang up upon loss of carrier. This allows the modem to distinguish between a momentary lapse in line quality and a true disconnect and can be useful to tune the tolerance of the modem to lines of poor quality.")
mdmLineState = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("onHook", 2), ("offHook", 3), ("connected", 4), ("busiedOut", 5), ("reset", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLineState.setStatus('current')
if mibBuilder.loadTexts: mdmLineState.setDescription("Allows the inspection and alteration of the state of the modem. Management commands may change the state to `on- hook', `busied-out', or `reset' from any state. No other alterations are permitted from the management protocol. When this object is set to reset, the modem shall be reset and the value will change to the modem's new, implementation dependent state.")
mdmLineCapabilitiesTable = MibTable((1, 3, 6, 1, 2, 1, 38, 1, 1, 4), )
if mibBuilder.loadTexts: mdmLineCapabilitiesTable.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesTable.setDescription('A list of protocol capabilities for this modem.')
mdmLineCapabilitiesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 38, 1, 1, 4, 1), ).setIndexNames((0, "Modem-MIB", "mdmIndex"), (0, "Modem-MIB", "mdmLineCapabilitiesIndex"))
if mibBuilder.loadTexts: mdmLineCapabilitiesEntry.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesEntry.setDescription('A listing of the protocol(s) that this modem is capable of. Entries in this table are created only by the agent. One entry exists for each protocol that the modem is capable of, regardless of whether that protocol is enabled or not. This table is useful for providing an inventory of the capabilities on a modem, and allowing the manager to enable or disable capabilities from the menu of available possibilities. Row creation is not required to enable or disable capabilities.')
mdmLineCapabilitiesIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: mdmLineCapabilitiesIndex.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesIndex.setDescription('A unique index for this capabilities entry.')
mdmLineCapabilitiesID = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 4, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmLineCapabilitiesID.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesID.setDescription('An identifier for this capability. Standard protocol capabilities will have identifiers registered in this document or other companion standards documents. Proprietary protocol capabilities will be registered by their respective organization. All capabilities, standard or vendor-specific, shall be registered in this table.')
mdmLineCapabilitiesEnableRequested = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("optional", 2), ("preferred", 3))).clone('preferred')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLineCapabilitiesEnableRequested.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesEnableRequested.setDescription("The requested configuration of this capability. If this value is 'disabled(1)', this is a request to disable this protocol. If this value is 'preferred(3)', this is a request to enable this protocol, and to prefer it in any negotiation over other appropriate protocols that have a value of 'optional(2)'.")
mdmLineCapabilitiesEnableGranted = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("optional", 2), ("preferred", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmLineCapabilitiesEnableGranted.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesEnableGranted.setDescription("The actual configuration of this capability. The agent shall attempt to set this as close as possible to the associated mdmLineCapabilitiesEnableRequested value. The agent shall make this determination in an implementation- specific manner that may take into account the configuration of other capabilities or other considerations. The modem will choose in an implementation-specific manner between multiple mutually-exclusive capabilities that each have the same (non-disabled) value. However, the modem must prefer all capabilities with a value of 'preferred(3)' over all capabilities with a value of 'optional(2)'. In other words, if there are one or more mutually-exclusive capabilities (e.g. V.32 and V.32bis) that are set to `preferred', the agent must choose one in an implementation-specific manner. Otherwise, if there are one or more mutually-exclusive capabilities that are set to `optional', the agent must choose one in an implementation- specific manner.")
mdmLineCapabilities = MibIdentifier((1, 3, 6, 1, 2, 1, 38, 1, 1, 5))
mdmLineCapabilitiesV21 = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 1))
if mibBuilder.loadTexts: mdmLineCapabilitiesV21.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesV21.setDescription('ITU V.21')
mdmLineCapabilitiesV22 = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 2))
if mibBuilder.loadTexts: mdmLineCapabilitiesV22.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesV22.setDescription('ITU V.22')
mdmLineCapabilitiesV22bis = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 3))
if mibBuilder.loadTexts: mdmLineCapabilitiesV22bis.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesV22bis.setDescription('ITU V.22bis')
mdmLineCapabilitiesV23CC = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 4))
if mibBuilder.loadTexts: mdmLineCapabilitiesV23CC.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesV23CC.setDescription('ITU V.23CC')
mdmLineCapabilitiesV23SC = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 5))
if mibBuilder.loadTexts: mdmLineCapabilitiesV23SC.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesV23SC.setDescription('ITU V.23SC')
mdmLineCapabilitiesV25bis = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 6))
if mibBuilder.loadTexts: mdmLineCapabilitiesV25bis.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesV25bis.setDescription('ITU V.25bis')
mdmLineCapabilitiesV26bis = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 7))
if mibBuilder.loadTexts: mdmLineCapabilitiesV26bis.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesV26bis.setDescription('ITU V.26bis')
mdmLineCapabilitiesV26ter = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 8))
if mibBuilder.loadTexts: mdmLineCapabilitiesV26ter.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesV26ter.setDescription('ITU V.26ter')
mdmLineCapabilitiesV27ter = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 9))
if mibBuilder.loadTexts: mdmLineCapabilitiesV27ter.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesV27ter.setDescription('ITU V.27ter')
mdmLineCapabilitiesV32 = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 10))
if mibBuilder.loadTexts: mdmLineCapabilitiesV32.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesV32.setDescription('ITU V.32')
mdmLineCapabilitiesV32bis = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 11))
if mibBuilder.loadTexts: mdmLineCapabilitiesV32bis.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesV32bis.setDescription('ITU V.32bis')
mdmLineCapabilitiesV32terbo = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 12))
if mibBuilder.loadTexts: mdmLineCapabilitiesV32terbo.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesV32terbo.setDescription('ITU V.32terbo')
mdmLineCapabilitiesVFC = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 13))
if mibBuilder.loadTexts: mdmLineCapabilitiesVFC.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesVFC.setDescription('ITU V.FC')
mdmLineCapabilitiesV34 = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 14))
if mibBuilder.loadTexts: mdmLineCapabilitiesV34.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesV34.setDescription('ITU V.34')
mdmLineCapabilitiesV42 = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 15))
if mibBuilder.loadTexts: mdmLineCapabilitiesV42.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesV42.setDescription('ITU V.42')
mdmLineCapabilitiesV42bis = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 16))
if mibBuilder.loadTexts: mdmLineCapabilitiesV42bis.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesV42bis.setDescription('ITU V.42bis')
mdmLineCapabilitiesMNP1 = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 17))
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP1.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP1.setDescription('MNP1')
mdmLineCapabilitiesMNP2 = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 18))
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP2.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP2.setDescription('MNP2')
mdmLineCapabilitiesMNP3 = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 19))
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP3.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP3.setDescription('MNP3')
mdmLineCapabilitiesMNP4 = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 20))
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP4.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP4.setDescription('MNP4')
mdmLineCapabilitiesMNP5 = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 21))
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP5.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP5.setDescription('MNP5')
mdmLineCapabilitiesMNP6 = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 22))
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP6.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP6.setDescription('MNP6')
mdmLineCapabilitiesMNP7 = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 23))
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP7.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP7.setDescription('MNP7')
mdmLineCapabilitiesMNP8 = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 24))
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP8.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP8.setDescription('MNP8')
mdmLineCapabilitiesMNP9 = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 25))
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP9.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP9.setDescription('MNP9')
mdmLineCapabilitiesMNP10 = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 26))
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP10.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesMNP10.setDescription('MNP10')
mdmLineCapabilitiesV29 = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 27))
if mibBuilder.loadTexts: mdmLineCapabilitiesV29.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesV29.setDescription('ITU V.29')
mdmLineCapabilitiesV33 = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 28))
if mibBuilder.loadTexts: mdmLineCapabilitiesV33.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesV33.setDescription('ITU V.33')
mdmLineCapabilitiesBell208 = ObjectIdentity((1, 3, 6, 1, 2, 1, 38, 1, 1, 5, 29))
if mibBuilder.loadTexts: mdmLineCapabilitiesBell208.setStatus('current')
if mibBuilder.loadTexts: mdmLineCapabilitiesBell208.setDescription('Bell 208')
mdmDTEInterfaceTable = MibTable((1, 3, 6, 1, 2, 1, 38, 1, 1, 6), )
if mibBuilder.loadTexts: mdmDTEInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: mdmDTEInterfaceTable.setDescription('The modem DTE Interface Table augments the modem ID table.')
mdmDTEInterfaceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 38, 1, 1, 6, 1), )
mdmIDEntry.registerAugmentions(("Modem-MIB", "mdmDTEInterfaceEntry"))
mdmDTEInterfaceEntry.setIndexNames(*mdmIDEntry.getIndexNames())
if mibBuilder.loadTexts: mdmDTEInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: mdmDTEInterfaceEntry.setDescription('Entries in this table are created only by the agent. One entry exists for each modem managed by the agent.')
mdmDTEActionDTROnToOff = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ignore", 1), ("escapeToCommandMode", 2), ("disconnectCall", 3), ("resetModem", 4))).clone('disconnectCall')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDTEActionDTROnToOff.setStatus('current')
if mibBuilder.loadTexts: mdmDTEActionDTROnToOff.setDescription('Defines the action the modem will take when DTR drops. If the value is set to ignore(1), the modem takes no action when DTR drops. Typically, mdmDTEActionDTROffToOn would also be set to ignore(1) if this object is set to ignore(1). If the value is escapeToCommandMode(2), the modem remains connected and enters command mode. If the value is disconnectCall(3), the current call (if any) is terminated and the modem will not auto-answer while DTR is off. If the value is resetModem(4), the current call (if any) is terminated and the modem is reset.')
mdmDTEActionDTROffToOn = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ignore", 1), ("enableDial", 2), ("autoAnswerEnable", 3), ("establishConnection", 4))).clone('autoAnswerEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDTEActionDTROffToOn.setStatus('current')
if mibBuilder.loadTexts: mdmDTEActionDTROffToOn.setDescription('Defines the action the modem will take when DTR is raised. If the value is set to ignore(1), the modem takes no action when DTR is raised. Typically, mdmDTEActionDTROnToOff would also be set to ignore(1) if this object is set to ignore(1). If the value is set to enableDial(2), the modem prepares to dial an outgoing call. If the value is set to autoAnswerEnable(3), the modem will be configured to answer any incoming call. If the value is set to establishConnection(4), the modem dials an implementation specific number. Immediately after any reset or power-on of the modem, if the DTR is high, the action specified here will be executed.')
mdmDTESyncTimingSource = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("loopback", 3), ("network", 4))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDTESyncTimingSource.setReference('V.58 transmitClockSource')
if mibBuilder.loadTexts: mdmDTESyncTimingSource.setStatus('current')
if mibBuilder.loadTexts: mdmDTESyncTimingSource.setDescription('The clock source for synchronous transmissions. If set to internal(1), the modem is the clock source and sends the clock signals to the DTE. If set to external(2), the transmit clock signals are provided by the DTE. If loopback(3), the modem receiver clock is used for the transmit clock. If network(4), the clock signals are supplied by the DCE interface. If the modem is not in synchronous mode, setting this object will have no effect on the current operations of the modem.')
mdmDTESyncAsyncMode = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("async", 1), ("sync", 2), ("syncAfterDial", 3))).clone('async')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDTESyncAsyncMode.setStatus('current')
if mibBuilder.loadTexts: mdmDTESyncAsyncMode.setDescription('The operational mode of the modem. If the value is syncAfterDial(3), the modem will accept commands in asynchronous mode and change to synchronous mode to pass data after a dial sequence has been executed.')
mdmDTEInactivityTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDTEInactivityTimeout.setReference('V.58 inactivityTimerSelect')
if mibBuilder.loadTexts: mdmDTEInactivityTimeout.setStatus('current')
if mibBuilder.loadTexts: mdmDTEInactivityTimeout.setDescription('The amount of idle time in minutes that the modem will wait before disconnecting a connection. When a call is connected and no data is transferred (continuous marking condition) on both circuits 103 and 104 for the specified time, the DCE disconnects the call. If the value is 0, no idle disconnect will occur. This function applies to asynchronous dial operations only and is intended for administrative control over idle connections.')
mdmCallControlTable = MibTable((1, 3, 6, 1, 2, 1, 38, 1, 1, 7), )
if mibBuilder.loadTexts: mdmCallControlTable.setStatus('current')
if mibBuilder.loadTexts: mdmCallControlTable.setDescription('The modem Call Control Table augments the modem ID table.')
mdmCallControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 38, 1, 1, 7, 1), )
mdmIDEntry.registerAugmentions(("Modem-MIB", "mdmCallControlEntry"))
mdmCallControlEntry.setIndexNames(*mdmIDEntry.getIndexNames())
if mibBuilder.loadTexts: mdmCallControlEntry.setStatus('current')
if mibBuilder.loadTexts: mdmCallControlEntry.setDescription('Entries in this table are created only by the agent. One entry exists for each modem managed by the agent.')
mdmCCRingsBeforeAnswer = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 7, 1, 1), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCCRingsBeforeAnswer.setReference('V.58 ringsBeforeAnswer')
if mibBuilder.loadTexts: mdmCCRingsBeforeAnswer.setStatus('current')
if mibBuilder.loadTexts: mdmCCRingsBeforeAnswer.setDescription("Determines which ring the modem will wait to answer the phone on. If this value is `0', the modem will not go offhook and answer a call when a ring signal is detected.")
mdmCCCallSetUpFailTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCCCallSetUpFailTimer.setReference('V.58 callSetUpFailTimer')
if mibBuilder.loadTexts: mdmCCCallSetUpFailTimer.setStatus('current')
if mibBuilder.loadTexts: mdmCCCallSetUpFailTimer.setDescription('This parameter specifies the amount of time, in seconds, that the modem shall allow between either answering a call (automatically or manually) or completion of dialing, and establishment of a connection with the remote modem. If no connection is established during this time, the modem disconnects from the line and returns a result code indicating the cause of the disconnection. In TIA-602, this is controlled by the value in the S7 register.')
mdmCCResultCodeEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("numericEnabled", 2), ("verboseEnabled", 3))).clone('verboseEnabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCCResultCodeEnable.setReference('V.58 responseModeSelect')
if mibBuilder.loadTexts: mdmCCResultCodeEnable.setStatus('current')
if mibBuilder.loadTexts: mdmCCResultCodeEnable.setDescription("When disabled, the DCE shall issue no 'result codes' of any kind to the DTE either in response to unsolicited events (eg. ring signal), or commands. In TIA-602, this is controlled by the ATQ command. When numericEnabled, the DCE shall issue result codes in numeric form. When verboseEnabled, the DCE shall issue result codes in a verbose, textual form.")
mdmCCEscapeAction = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignoreEscape", 1), ("hangUp", 2), ("enterCommandMode", 3))).clone('ignoreEscape')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCCEscapeAction.setStatus('current')
if mibBuilder.loadTexts: mdmCCEscapeAction.setDescription("The modem's action upon successfully recognizing the 'escape to command mode' character sequence.")
mdmCCCallDuration = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCCCallDuration.setStatus('current')
if mibBuilder.loadTexts: mdmCCCallDuration.setDescription('Present or last completed connection time in seconds. If there have been no previous connections, this value should be -1.')
mdmCCConnectionFailReason = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 10, 11, 20, 30, 31, 32, 33, 40, 41, 42))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("managementCommand", 3), ("inactivityTimeout", 4), ("mnpIncompatibility", 5), ("protocolError", 6), ("powerLoss", 10), ("equipmentFailure", 11), ("dtrDrop", 20), ("noDialTone", 30), ("lineBusy", 31), ("noAnswer", 32), ("voiceDetected", 33), ("carrierLost", 40), ("trainingFailed", 41), ("faxDetected", 42)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCCConnectionFailReason.setReference('V.58 callCleared')
if mibBuilder.loadTexts: mdmCCConnectionFailReason.setStatus('current')
if mibBuilder.loadTexts: mdmCCConnectionFailReason.setDescription("Indicates the reason that the last connection or attempt failed. The meaning of each reason code is explained below. unknown: This code means the failure reason is unknown or there has been no previous call. other: This code used when no other code is applicable. Additional vendor information may be available elsewhere. managementCommand: A management command terminated the call. These commands include escaping to command mode, initiating dialing, restoring lines, and disconnecting. inactivityTimeout: The call was terminated because it was inactive for at the minimum duration specified. mnpIncompatibility: The modems are unable to resolve MNP protocol differences. protocolError: An error occured in one of protocol in use. Further information is required to determine in which protocol the error occurred, and the exact nature of the error. powerLoss: The modem lost power and disconnected the call. equipmentFailure: The modem equipment failed. dtrDrop: DTR has been turned off while the modem is to disconnect on DTR drop. (Ref: V.58 cct108TurnedOff) noDialTone: If the modem is to monitor for call progress tones, but the modem has failed to detect dial tone while attempting to dial a number. lineBusy: Busy signal is detected while busy signal detection is enabled, or while the 'W' or '@' dial modifier is used. (Ref: V.58 engagedTone) noAnswer: The call was not answered. voiceDetected: A voice was detected on the call. carrierLost: Indicates that the modem has disconnected due to detection of loss of carrier. In TIA-602, the S10 register determines the time that loss of carrier must be detected before the modem disconnects. trainingFailed: Indicates that the modems did not successfully train and reach data mode on the previous connection. faxDetected: A fax was detected on the call.")
mdmCCStoredDialStringTable = MibTable((1, 3, 6, 1, 2, 1, 38, 1, 1, 8), )
if mibBuilder.loadTexts: mdmCCStoredDialStringTable.setReference('V.58 telephoneNumbers')
if mibBuilder.loadTexts: mdmCCStoredDialStringTable.setStatus('current')
if mibBuilder.loadTexts: mdmCCStoredDialStringTable.setDescription('The table of stored dial strings.')
mdmCCStoredDialStringEntry = MibTableRow((1, 3, 6, 1, 2, 1, 38, 1, 1, 8, 1), ).setIndexNames((0, "Modem-MIB", "mdmIndex"), (0, "Modem-MIB", "mdmCCStoredDialStringIndex"))
if mibBuilder.loadTexts: mdmCCStoredDialStringEntry.setStatus('current')
if mibBuilder.loadTexts: mdmCCStoredDialStringEntry.setDescription('A stored dial string.')
mdmCCStoredDialStringIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: mdmCCStoredDialStringIndex.setStatus('current')
if mibBuilder.loadTexts: mdmCCStoredDialStringIndex.setDescription('The unique index of a particular dial string.')
mdmCCStoredDialString = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCCStoredDialString.setStatus('current')
if mibBuilder.loadTexts: mdmCCStoredDialString.setDescription('A dial string stored in the modem.')
mdmECTable = MibTable((1, 3, 6, 1, 2, 1, 38, 1, 1, 9), )
if mibBuilder.loadTexts: mdmECTable.setStatus('current')
if mibBuilder.loadTexts: mdmECTable.setDescription('The modem error correcting table augments the modem ID table.')
mdmECEntry = MibTableRow((1, 3, 6, 1, 2, 1, 38, 1, 1, 9, 1), )
mdmIDEntry.registerAugmentions(("Modem-MIB", "mdmECEntry"))
mdmECEntry.setIndexNames(*mdmIDEntry.getIndexNames())
if mibBuilder.loadTexts: mdmECEntry.setStatus('current')
if mibBuilder.loadTexts: mdmECEntry.setDescription('Entries in this table are created only by the agent. One entry exists for each modem managed by the agent.')
mdmECErrorControlUsed = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 9, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmECErrorControlUsed.setReference('V.58 errorControlActive')
if mibBuilder.loadTexts: mdmECErrorControlUsed.setStatus('current')
if mibBuilder.loadTexts: mdmECErrorControlUsed.setDescription("Indicates the error control method used during the current or previous call. This shall be one of the values for error control protocols registered in the capabilities table for this modem. If no error control protocol is in use, this object shall have the value '{0 0}'.")
mdmDCTable = MibTable((1, 3, 6, 1, 2, 1, 38, 1, 1, 10), )
if mibBuilder.loadTexts: mdmDCTable.setStatus('current')
if mibBuilder.loadTexts: mdmDCTable.setDescription('The modem data compression table augments the modem ID table.')
mdmDCEntry = MibTableRow((1, 3, 6, 1, 2, 1, 38, 1, 1, 10, 1), )
mdmIDEntry.registerAugmentions(("Modem-MIB", "mdmDCEntry"))
mdmDCEntry.setIndexNames(*mdmIDEntry.getIndexNames())
if mibBuilder.loadTexts: mdmDCEntry.setStatus('current')
if mibBuilder.loadTexts: mdmDCEntry.setDescription('Entries in this table are created only by the agent. One entry exists for each modem managed by the agent.')
mdmDCCompressionTypeUsed = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 10, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDCCompressionTypeUsed.setStatus('current')
if mibBuilder.loadTexts: mdmDCCompressionTypeUsed.setDescription("Indicates the data compression method used during the current or previous call. This shall be one of the values for compression protocols registered in the capabilities table for this modem. If no compression protocol is in use, this object shall have the value '{0 0}'.")
mdmSCTable = MibTable((1, 3, 6, 1, 2, 1, 38, 1, 1, 11), )
if mibBuilder.loadTexts: mdmSCTable.setStatus('current')
if mibBuilder.loadTexts: mdmSCTable.setDescription('The modem signal convertor table augments the modem ID table.')
mdmSCEntry = MibTableRow((1, 3, 6, 1, 2, 1, 38, 1, 1, 11, 1), )
mdmIDEntry.registerAugmentions(("Modem-MIB", "mdmSCEntry"))
mdmSCEntry.setIndexNames(*mdmIDEntry.getIndexNames())
if mibBuilder.loadTexts: mdmSCEntry.setStatus('current')
if mibBuilder.loadTexts: mdmSCEntry.setDescription('Entries in this table are created only by the agent. One entry exists for each modem managed by the agent.')
mdmSCCurrentLineTransmitRate = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmSCCurrentLineTransmitRate.setReference('V.58 transmissionSignallingRateActive')
if mibBuilder.loadTexts: mdmSCCurrentLineTransmitRate.setStatus('current')
if mibBuilder.loadTexts: mdmSCCurrentLineTransmitRate.setDescription('The current link transmit rate of a connection, or the last link transmit rate of the last connection in bits per second.')
mdmSCCurrentLineReceiveRate = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmSCCurrentLineReceiveRate.setReference('V.58 transmissionSignallingRateActive')
if mibBuilder.loadTexts: mdmSCCurrentLineReceiveRate.setStatus('current')
if mibBuilder.loadTexts: mdmSCCurrentLineReceiveRate.setDescription('The current link receive rate of a connection, or the last link receive rate of the last connection in bits per second.')
mdmSCInitialLineTransmitRate = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmSCInitialLineTransmitRate.setStatus('current')
if mibBuilder.loadTexts: mdmSCInitialLineTransmitRate.setDescription('The initial link transmit rate of the current connection, or the initial link transmit rate of the last connection in bits per second.')
mdmSCInitialLineReceiveRate = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmSCInitialLineReceiveRate.setStatus('current')
if mibBuilder.loadTexts: mdmSCInitialLineReceiveRate.setDescription('The initial link receive rate of the current connection, or the initial link receive rate of the last connection in bits per second.')
mdmSCModulationSchemeUsed = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 11, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmSCModulationSchemeUsed.setReference('V.58 gstnModulationSchemeActive')
if mibBuilder.loadTexts: mdmSCModulationSchemeUsed.setStatus('current')
if mibBuilder.loadTexts: mdmSCModulationSchemeUsed.setDescription('The modulation scheme of the current or previous call. This shall be one of the values for modulation protocols registered in the capabilities table for this modem.')
mdmStatsTable = MibTable((1, 3, 6, 1, 2, 1, 38, 1, 1, 12), )
if mibBuilder.loadTexts: mdmStatsTable.setStatus('current')
if mibBuilder.loadTexts: mdmStatsTable.setDescription('The modem statistics Table augments the modem ID table.')
mdmStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1), )
mdmIDEntry.registerAugmentions(("Modem-MIB", "mdmStatsEntry"))
mdmStatsEntry.setIndexNames(*mdmIDEntry.getIndexNames())
if mibBuilder.loadTexts: mdmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: mdmStatsEntry.setDescription('Entries in this table are created only by the agent. One entry exists for each modem managed by the agent.')
mdmStatsRingNoAnswers = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatsRingNoAnswers.setStatus('current')
if mibBuilder.loadTexts: mdmStatsRingNoAnswers.setDescription('The number of events in which ringing was detected but the call was not answered.')
mdmStatsIncomingConnectionFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatsIncomingConnectionFailures.setStatus('current')
if mibBuilder.loadTexts: mdmStatsIncomingConnectionFailures.setDescription('The number of incoming connection requests that this modem answered in which it could not train with the other DCE.')
mdmStatsIncomingConnectionCompletions = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatsIncomingConnectionCompletions.setStatus('current')
if mibBuilder.loadTexts: mdmStatsIncomingConnectionCompletions.setDescription('The number of incoming connection requests that this modem answered and successfully trained with the other DCE.')
mdmStatsFailedDialAttempts = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatsFailedDialAttempts.setStatus('current')
if mibBuilder.loadTexts: mdmStatsFailedDialAttempts.setDescription("The number of call attempts that failed because the modem didn't go off hook, or there was no dialtone.")
mdmStatsOutgoingConnectionFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatsOutgoingConnectionFailures.setStatus('current')
if mibBuilder.loadTexts: mdmStatsOutgoingConnectionFailures.setDescription('The number of outgoing calls from this modem which sucessfully went off hook and dialed, in which it could not train with the other DCE.')
mdmStatsOutgoingConnectionCompletions = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatsOutgoingConnectionCompletions.setStatus('current')
if mibBuilder.loadTexts: mdmStatsOutgoingConnectionCompletions.setDescription('The number of outgoing calls from this modem which resulted in successfully training with the other DCE.')
mdmStatsRetrains = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatsRetrains.setStatus('current')
if mibBuilder.loadTexts: mdmStatsRetrains.setDescription('The number of retrains experienced on connections on this line.')
mdmStats2400OrLessConnections = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStats2400OrLessConnections.setStatus('current')
if mibBuilder.loadTexts: mdmStats2400OrLessConnections.setDescription('The number of connections initially established at a modulation speed of 2400 bits per second or less.')
mdmStats2400To14400Connections = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStats2400To14400Connections.setStatus('current')
if mibBuilder.loadTexts: mdmStats2400To14400Connections.setDescription('The number of connections initially established at a modulation speed of greater than 2400 bits per second and less than 14400 bits per second.')
mdmStatsGreaterThan14400Connections = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatsGreaterThan14400Connections.setStatus('current')
if mibBuilder.loadTexts: mdmStatsGreaterThan14400Connections.setDescription('The number of connections initially established at a modulation speed of greater than 14400 bits per second.')
mdmStatsErrorControlledConnections = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatsErrorControlledConnections.setStatus('current')
if mibBuilder.loadTexts: mdmStatsErrorControlledConnections.setDescription('The number of established connections using an error control protocol.')
mdmStatsCompressedConnections = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatsCompressedConnections.setStatus('current')
if mibBuilder.loadTexts: mdmStatsCompressedConnections.setDescription('The number of established connections using a compression protocol.')
mdmStatsCompressionEfficiency = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatsCompressionEfficiency.setReference('V.58 compressionEfficiency')
if mibBuilder.loadTexts: mdmStatsCompressionEfficiency.setStatus('current')
if mibBuilder.loadTexts: mdmStatsCompressionEfficiency.setDescription("The number of bytes transferred into the compression encoder divided by the number of bytes transferred out of the encoder, multiplied by 100 for either the current or last call. If a data compression protocol is not in use, this value shall be `100'.")
mdmStatsSentOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatsSentOctets.setStatus('current')
if mibBuilder.loadTexts: mdmStatsSentOctets.setDescription('The number of octets presented to the modem by the DTE.')
mdmStatsReceivedOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatsReceivedOctets.setStatus('current')
if mibBuilder.loadTexts: mdmStatsReceivedOctets.setDescription('The number of octets presented to the DTE by the modem.')
mdmStatsSentDataFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatsSentDataFrames.setStatus('current')
if mibBuilder.loadTexts: mdmStatsSentDataFrames.setDescription('The number of data frames sent on the line interface. If there is no frame-oriented protocol in use on the line interface, this counter shall not increment.')
mdmStatsReceivedDataFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatsReceivedDataFrames.setStatus('current')
if mibBuilder.loadTexts: mdmStatsReceivedDataFrames.setDescription('The number of data frames received on the line interface. If there is no frame-oriented protocol in use on the line interface, this counter shall not increment.')
mdmStatsResentFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatsResentFrames.setStatus('current')
if mibBuilder.loadTexts: mdmStatsResentFrames.setDescription('The number of times this modem retransmits frames on the line interface. If there is no frame-oriented protocol in use on the line interface, this counter shall not increment.')
mdmStatsErrorFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 38, 1, 1, 12, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatsErrorFrames.setStatus('current')
if mibBuilder.loadTexts: mdmStatsErrorFrames.setDescription('The number of block errors received on the link. If there is no frame-oriented protocol in use on the line interface, this counter shall not increment.')
mdmCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 38, 1, 2, 1, 1)).setObjects(("Modem-MIB", "mdmIDGroup"), ("Modem-MIB", "mdmLineInterfaceGroup"), ("Modem-MIB", "mdmDTEInterfaceGroup"), ("Modem-MIB", "mdmCallControlGroup"), ("Modem-MIB", "mdmSignalConvertorGroup"), ("Modem-MIB", "mdmStatisticsGroup"), ("Modem-MIB", "mdmErrorControlGroup"), ("Modem-MIB", "mdmDataCompressionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mdmCompliance = mdmCompliance.setStatus('current')
if mibBuilder.loadTexts: mdmCompliance.setDescription('The compliance statement for SNMPv2 entities which implement the modem MIB.')
mibBuilder.exportSymbols("Modem-MIB", mdmLineCapabilitiesV33=mdmLineCapabilitiesV33, mdmLineCapabilitiesVFC=mdmLineCapabilitiesVFC, mdmCCStoredDialString=mdmCCStoredDialString, mdmLineTable=mdmLineTable, mdmNumber=mdmNumber, mdmDTEInterfaceEntry=mdmDTEInterfaceEntry, mdmDTESyncAsyncMode=mdmDTESyncAsyncMode, mdmSCTable=mdmSCTable, mdmECTable=mdmECTable, mdmLineCapabilitiesEntry=mdmLineCapabilitiesEntry, mdmIDGroup=mdmIDGroup, mdmMIBObjects=mdmMIBObjects, mdmSCEntry=mdmSCEntry, mdmSignalConvertorGroup=mdmSignalConvertorGroup, mdmLineCapabilitiesEnableRequested=mdmLineCapabilitiesEnableRequested, mdmStatsEntry=mdmStatsEntry, mdmLineCapabilitiesMNP10=mdmLineCapabilitiesMNP10, mdmCCRingsBeforeAnswer=mdmCCRingsBeforeAnswer, mdmECEntry=mdmECEntry, mdmErrorControlGroup=mdmErrorControlGroup, mdmLineCapabilitiesV32bis=mdmLineCapabilitiesV32bis, mdmSCInitialLineTransmitRate=mdmSCInitialLineTransmitRate, mdmSCModulationSchemeUsed=mdmSCModulationSchemeUsed, mdmLineCapabilitiesV21=mdmLineCapabilitiesV21, mdmLineCapabilitiesV26bis=mdmLineCapabilitiesV26bis, mdmLineInterfaceGroup=mdmLineInterfaceGroup, mdmLineCapabilitiesMNP9=mdmLineCapabilitiesMNP9, mdmLineCapabilitiesV27ter=mdmLineCapabilitiesV27ter, mdmStatsResentFrames=mdmStatsResentFrames, mdmStatsErrorControlledConnections=mdmStatsErrorControlledConnections, mdmLineCapabilitiesV23SC=mdmLineCapabilitiesV23SC, mdmLineCapabilities=mdmLineCapabilities, mdmLineCapabilitiesIndex=mdmLineCapabilitiesIndex, mdmDTEActionDTROffToOn=mdmDTEActionDTROffToOn, mdmSCCurrentLineReceiveRate=mdmSCCurrentLineReceiveRate, mdmDTEInterfaceGroup=mdmDTEInterfaceGroup, mdmIDTable=mdmIDTable, mdmCCConnectionFailReason=mdmCCConnectionFailReason, mdmLineCapabilitiesEnableGranted=mdmLineCapabilitiesEnableGranted, mdmLineCapabilitiesTable=mdmLineCapabilitiesTable, mdmLineEntry=mdmLineEntry, mdmLineCapabilitiesV26ter=mdmLineCapabilitiesV26ter, mdmIDEntry=mdmIDEntry, mdmDataCompressionGroup=mdmDataCompressionGroup, mdmLineCapabilitiesV32=mdmLineCapabilitiesV32, mdmStatsFailedDialAttempts=mdmStatsFailedDialAttempts, mdmStatsRingNoAnswers=mdmStatsRingNoAnswers, mdmStatsRetrains=mdmStatsRetrains, mdmLineCapabilitiesV42=mdmLineCapabilitiesV42, mdmCallControlTable=mdmCallControlTable, mdmStatsReceivedDataFrames=mdmStatsReceivedDataFrames, mdmLineCapabilitiesBell208=mdmLineCapabilitiesBell208, mdmStatsReceivedOctets=mdmStatsReceivedOctets, mdmCCCallSetUpFailTimer=mdmCCCallSetUpFailTimer, mdmCCStoredDialStringEntry=mdmCCStoredDialStringEntry, mdmStatsCompressedConnections=mdmStatsCompressedConnections, mdmDCCompressionTypeUsed=mdmDCCompressionTypeUsed, PYSNMP_MODULE_ID=mdmMIB, mdmMib=mdmMib, mdmCallControlEntry=mdmCallControlEntry, mdmLineCapabilitiesV32terbo=mdmLineCapabilitiesV32terbo, mdmStatisticsGroup=mdmStatisticsGroup, mdmDTEInactivityTimeout=mdmDTEInactivityTimeout, mdmLineCapabilitiesV22=mdmLineCapabilitiesV22, mdmStats2400OrLessConnections=mdmStats2400OrLessConnections, mdmCompliance=mdmCompliance, mdmStatsGreaterThan14400Connections=mdmStatsGreaterThan14400Connections, mdmLineCapabilitiesV23CC=mdmLineCapabilitiesV23CC, mdmCallControlGroup=mdmCallControlGroup, mdmLineCapabilitiesMNP2=mdmLineCapabilitiesMNP2, mdmCCResultCodeEnable=mdmCCResultCodeEnable, mdmIndex=mdmIndex, mdmSCInitialLineReceiveRate=mdmSCInitialLineReceiveRate, mdmCompliances=mdmCompliances, mdmStatsOutgoingConnectionCompletions=mdmStatsOutgoingConnectionCompletions, mdmDTEInterfaceTable=mdmDTEInterfaceTable, mdmDTEActionDTROnToOff=mdmDTEActionDTROnToOff, mdmDTESyncTimingSource=mdmDTESyncTimingSource, mdmLineCapabilitiesV29=mdmLineCapabilitiesV29, mdmLineState=mdmLineState, mdmLineCapabilitiesMNP1=mdmLineCapabilitiesMNP1, mdmLineCapabilitiesMNP6=mdmLineCapabilitiesMNP6, mdmStatsErrorFrames=mdmStatsErrorFrames, mdmGroups=mdmGroups, mdmConformance=mdmConformance, mdmLineCapabilitiesMNP3=mdmLineCapabilitiesMNP3, mdmLineCapabilitiesV42bis=mdmLineCapabilitiesV42bis, mdmLineCapabilitiesMNP8=mdmLineCapabilitiesMNP8, mdmStatsSentOctets=mdmStatsSentOctets, mdmIDManufacturerOID=mdmIDManufacturerOID, mdmLineCapabilitiesMNP7=mdmLineCapabilitiesMNP7, mdmCCEscapeAction=mdmCCEscapeAction, mdmMIB=mdmMIB, mdmStatsTable=mdmStatsTable, mdmLineCapabilitiesID=mdmLineCapabilitiesID, mdmLineCarrierLossTime=mdmLineCarrierLossTime, mdmCCStoredDialStringTable=mdmCCStoredDialStringTable, mdmECErrorControlUsed=mdmECErrorControlUsed, mdmStatsSentDataFrames=mdmStatsSentDataFrames, mdmStatsIncomingConnectionCompletions=mdmStatsIncomingConnectionCompletions, mdmStats2400To14400Connections=mdmStats2400To14400Connections, mdmCCCallDuration=mdmCCCallDuration, mdmDCTable=mdmDCTable, mdmSCCurrentLineTransmitRate=mdmSCCurrentLineTransmitRate, mdmCCStoredDialStringIndex=mdmCCStoredDialStringIndex, mdmDCEntry=mdmDCEntry, mdmStatsOutgoingConnectionFailures=mdmStatsOutgoingConnectionFailures, mdmLineCapabilitiesV34=mdmLineCapabilitiesV34, mdmLineCapabilitiesMNP4=mdmLineCapabilitiesMNP4, mdmLineCapabilitiesMNP5=mdmLineCapabilitiesMNP5, mdmIDProductDetails=mdmIDProductDetails, mdmStatsCompressionEfficiency=mdmStatsCompressionEfficiency, mdmLineCapabilitiesV22bis=mdmLineCapabilitiesV22bis, mdmLineCapabilitiesV25bis=mdmLineCapabilitiesV25bis, mdmStatsIncomingConnectionFailures=mdmStatsIncomingConnectionFailures)
