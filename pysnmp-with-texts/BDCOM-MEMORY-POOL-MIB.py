#
# PySNMP MIB module BDCOM-MEMORY-POOL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BDCOM-MEMORY-POOL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:36:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
Percent, = mibBuilder.importSymbols("BDCOM-QOS-PIB-MIB", "Percent")
bdMgmt, = mibBuilder.importSymbols("BDCOM-SMI", "bdMgmt")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Bits, ModuleIdentity, Counter32, Unsigned32, ObjectIdentity, Integer32, iso, Counter64, IpAddress, Gauge32, TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "ModuleIdentity", "Counter32", "Unsigned32", "ObjectIdentity", "Integer32", "iso", "Counter64", "IpAddress", "Gauge32", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
bdcomMemoryPoolMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3320, 9, 48))
bdcomMemoryPoolMIB.setRevisions(('2003-10-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bdcomMemoryPoolMIB.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: bdcomMemoryPoolMIB.setLastUpdated('200310160000Z')
if mibBuilder.loadTexts: bdcomMemoryPoolMIB.setOrganization('BDCOM, Inc.')
if mibBuilder.loadTexts: bdcomMemoryPoolMIB.setContactInfo(' Tel: +86-21-50800666 Postal: No.123,Juli RD,Zhangjiang Hitech Park, Shanghai Baud Data Communication Corporation Inc, Shanghai City 201203, P.R.C ')
if mibBuilder.loadTexts: bdcomMemoryPoolMIB.setDescription('MIB module for monitoring memory pools')
class BDCOMMemoryPoolTypes(TextualConvention, Integer32):
    description = 'Represents the different types of memory pools that may be present in a managed device. Memory pools can be roughly categorized into two groups, predefined pools and dynamic pools. The following pool types are currently predefined: 1: processor memory 2: i/o memory 3: pci memory 4: fast memory 5: multibus memory Dynamic pools will have a pool type value greater than any of the predefined types listed above. Note that only the processor pool is required to be supported by all devices. Support for other pool types is dependent on the device being managed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

bdcomMemoryPoolObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 9, 48, 1))
bdcomMemoryPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 9, 48, 1, 1), )
if mibBuilder.loadTexts: bdcomMemoryPoolTable.setStatus('current')
if mibBuilder.loadTexts: bdcomMemoryPoolTable.setDescription('A table of memory pool monitoring entries.')
bdcomMemoryPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 9, 48, 1, 1, 1), ).setIndexNames((0, "BDCOM-MEMORY-POOL-MIB", "bdcomMemoryPoolType"))
if mibBuilder.loadTexts: bdcomMemoryPoolEntry.setStatus('current')
if mibBuilder.loadTexts: bdcomMemoryPoolEntry.setDescription('An entry in the memory pool monitoring table.')
bdcomMemoryPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 48, 1, 1, 1, 1), BDCOMMemoryPoolTypes())
if mibBuilder.loadTexts: bdcomMemoryPoolType.setStatus('current')
if mibBuilder.loadTexts: bdcomMemoryPoolType.setDescription('The type of memory pool for which this entry contains information.')
bdcomMemoryPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 48, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdcomMemoryPoolName.setStatus('current')
if mibBuilder.loadTexts: bdcomMemoryPoolName.setDescription('A textual name assigned to the memory pool. This object is suitable for output to a human operator, and may also be used to distinguish among the various pool types, especially among dynamic pools.')
bdcomMemoryPoolAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 48, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdcomMemoryPoolAlternate.setStatus('current')
if mibBuilder.loadTexts: bdcomMemoryPoolAlternate.setDescription('Indicates whether or not this memory pool has an alternate pool configured. Alternate pools are used for fallback when the current pool runs out of memory. If an instance of this object has a value of zero, then this pool does not have an alternate. Otherwise the value of this object is the same as the value of bdcomMemoryPoolType of the alternate pool.')
bdcomMemoryPoolValid = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 48, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdcomMemoryPoolValid.setStatus('current')
if mibBuilder.loadTexts: bdcomMemoryPoolValid.setDescription('Indicates whether or not the remaining objects in this entry contain accurate data. If an instance of this object has the value false (which in and of itself indicates an internal error condition), the values of the remaining objects in the conceptual row may contain inaccurate information (specifically, the reported values may be less than the actual values).')
bdcomMemoryPoolUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 48, 1, 1, 1, 5), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: bdcomMemoryPoolUsed.setStatus('current')
if mibBuilder.loadTexts: bdcomMemoryPoolUsed.setDescription('Indicates the number of bytes from the memory pool that are currently in use by applications on the managed device.')
bdcomMemoryPoolFree = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 48, 1, 1, 1, 6), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: bdcomMemoryPoolFree.setStatus('current')
if mibBuilder.loadTexts: bdcomMemoryPoolFree.setDescription('Indicates the number of bytes from the memory pool that are currently unused on the managed device. Note that the sum of bdcomMemoryPoolUsed and bdcomMemoryPoolFree is the total amount of memory in the pool')
bdcomMemoryPoolLargestFree = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 48, 1, 1, 1, 7), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: bdcomMemoryPoolLargestFree.setStatus('current')
if mibBuilder.loadTexts: bdcomMemoryPoolLargestFree.setDescription('Indicates the largest number of contiguous bytes from the memory pool that are currently unused on the managed device.')
bdcomMemoryPoolUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 9, 48, 1, 2), )
if mibBuilder.loadTexts: bdcomMemoryPoolUtilizationTable.setStatus('current')
if mibBuilder.loadTexts: bdcomMemoryPoolUtilizationTable.setDescription('A table of memory pool utilization entries. Each of the objects provides a general idea of how much of the memory pool has been used over a given period of time. It is determined as a weighted decaying average.')
bdcomMemoryPoolUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 9, 48, 1, 2, 1), )
bdcomMemoryPoolEntry.registerAugmentions(("BDCOM-MEMORY-POOL-MIB", "bdcomMemoryPoolUtilizationEntry"))
bdcomMemoryPoolUtilizationEntry.setIndexNames(*bdcomMemoryPoolEntry.getIndexNames())
if mibBuilder.loadTexts: bdcomMemoryPoolUtilizationEntry.setStatus('current')
if mibBuilder.loadTexts: bdcomMemoryPoolUtilizationEntry.setDescription('An entry in the memory pool utilization table.')
bdcomMemoryPoolUtilization1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 48, 1, 2, 1, 1), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdcomMemoryPoolUtilization1Min.setStatus('current')
if mibBuilder.loadTexts: bdcomMemoryPoolUtilization1Min.setDescription('This is the memory pool utilization for 1 minute.')
bdcomMemoryPoolUtilization5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 48, 1, 2, 1, 2), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdcomMemoryPoolUtilization5Min.setStatus('current')
if mibBuilder.loadTexts: bdcomMemoryPoolUtilization5Min.setDescription('This is the memory pool utilization for 5 minutes.')
bdcomMemoryPoolUtilization10Min = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 9, 48, 1, 2, 1, 3), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdcomMemoryPoolUtilization10Min.setStatus('current')
if mibBuilder.loadTexts: bdcomMemoryPoolUtilization10Min.setDescription('This is the memory pool utilization for 10 minutes.')
bdcomMemoryPoolNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 9, 48, 2))
bdcomMemoryPoolConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 9, 48, 3))
bdcomMemoryPoolCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 9, 48, 3, 1))
bdcomMemoryPoolGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 9, 48, 3, 2))
bdcomMemoryPoolCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3320, 9, 48, 3, 1, 1)).setObjects(("BDCOM-MEMORY-POOL-MIB", "bdcomMemoryPoolGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bdcomMemoryPoolCompliance = bdcomMemoryPoolCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: bdcomMemoryPoolCompliance.setDescription('The compliance statement for entities which implement the BDCOM Memory Pool MIB')
bdcomMemoryPoolComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 3320, 9, 48, 3, 1, 2)).setObjects(("BDCOM-MEMORY-POOL-MIB", "bdcomMemoryPoolGroup"), ("BDCOM-MEMORY-POOL-MIB", "bdcomMemoryPoolUtilizationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bdcomMemoryPoolComplianceRev1 = bdcomMemoryPoolComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: bdcomMemoryPoolComplianceRev1.setDescription('The compliance statement for entities which implement the BDCOM Memory Pool MIB')
bdcomMemoryPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 9, 48, 3, 2, 1)).setObjects(("BDCOM-MEMORY-POOL-MIB", "bdcomMemoryPoolName"), ("BDCOM-MEMORY-POOL-MIB", "bdcomMemoryPoolAlternate"), ("BDCOM-MEMORY-POOL-MIB", "bdcomMemoryPoolValid"), ("BDCOM-MEMORY-POOL-MIB", "bdcomMemoryPoolUsed"), ("BDCOM-MEMORY-POOL-MIB", "bdcomMemoryPoolFree"), ("BDCOM-MEMORY-POOL-MIB", "bdcomMemoryPoolLargestFree"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bdcomMemoryPoolGroup = bdcomMemoryPoolGroup.setStatus('current')
if mibBuilder.loadTexts: bdcomMemoryPoolGroup.setDescription('A collection of objects providing memory pool monitoring.')
bdcomMemoryPoolUtilizationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3320, 9, 48, 3, 2, 2)).setObjects(("BDCOM-MEMORY-POOL-MIB", "bdcomMemoryPoolUtilization1Min"), ("BDCOM-MEMORY-POOL-MIB", "bdcomMemoryPoolUtilization5Min"), ("BDCOM-MEMORY-POOL-MIB", "bdcomMemoryPoolUtilization10Min"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bdcomMemoryPoolUtilizationGroup = bdcomMemoryPoolUtilizationGroup.setStatus('current')
if mibBuilder.loadTexts: bdcomMemoryPoolUtilizationGroup.setDescription('An optional group providing a collection of memory pool utilization objects.')
mibBuilder.exportSymbols("BDCOM-MEMORY-POOL-MIB", bdcomMemoryPoolUsed=bdcomMemoryPoolUsed, bdcomMemoryPoolLargestFree=bdcomMemoryPoolLargestFree, bdcomMemoryPoolComplianceRev1=bdcomMemoryPoolComplianceRev1, bdcomMemoryPoolCompliance=bdcomMemoryPoolCompliance, bdcomMemoryPoolObjects=bdcomMemoryPoolObjects, bdcomMemoryPoolUtilizationEntry=bdcomMemoryPoolUtilizationEntry, bdcomMemoryPoolNotifications=bdcomMemoryPoolNotifications, bdcomMemoryPoolUtilizationTable=bdcomMemoryPoolUtilizationTable, bdcomMemoryPoolUtilizationGroup=bdcomMemoryPoolUtilizationGroup, PYSNMP_MODULE_ID=bdcomMemoryPoolMIB, bdcomMemoryPoolAlternate=bdcomMemoryPoolAlternate, bdcomMemoryPoolUtilization10Min=bdcomMemoryPoolUtilization10Min, bdcomMemoryPoolType=bdcomMemoryPoolType, bdcomMemoryPoolGroup=bdcomMemoryPoolGroup, bdcomMemoryPoolName=bdcomMemoryPoolName, bdcomMemoryPoolUtilization1Min=bdcomMemoryPoolUtilization1Min, bdcomMemoryPoolUtilization5Min=bdcomMemoryPoolUtilization5Min, bdcomMemoryPoolConformance=bdcomMemoryPoolConformance, bdcomMemoryPoolCompliances=bdcomMemoryPoolCompliances, BDCOMMemoryPoolTypes=BDCOMMemoryPoolTypes, bdcomMemoryPoolMIB=bdcomMemoryPoolMIB, bdcomMemoryPoolTable=bdcomMemoryPoolTable, bdcomMemoryPoolFree=bdcomMemoryPoolFree, bdcomMemoryPoolEntry=bdcomMemoryPoolEntry, bdcomMemoryPoolValid=bdcomMemoryPoolValid, bdcomMemoryPoolGroups=bdcomMemoryPoolGroups)
