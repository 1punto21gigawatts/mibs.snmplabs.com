#
# PySNMP MIB module HUAWEI-KOMPELLA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-KOMPELLA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:45:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
HWL2VpnStateChangeReason, HWL2VpnVcEncapsType, HWEnableValue = mibBuilder.importSymbols("HUAWEI-VPLS-EXT-MIB", "HWL2VpnStateChangeReason", "HWL2VpnVcEncapsType", "HWEnableValue")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, ModuleIdentity, Gauge32, MibIdentifier, Bits, TimeTicks, Counter32, iso, Integer32, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "Gauge32", "MibIdentifier", "Bits", "TimeTicks", "Counter32", "iso", "Integer32", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32")
TruthValue, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus")
hwL2VpnKompella = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2))
if mibBuilder.loadTexts: hwL2VpnKompella.setLastUpdated('200605090900Z')
if mibBuilder.loadTexts: hwL2VpnKompella.setOrganization('Huawei Technologies Co., Ltd.')
if mibBuilder.loadTexts: hwL2VpnKompella.setContactInfo('R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com')
if mibBuilder.loadTexts: hwL2VpnKompella.setDescription('The HUAWEI-KOMPELLA-MIB contains objects to manage KOMPELLA.')
hwL2Vpn = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119))
hwKompellaMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1))
hwKompellaVpnTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 1), )
if mibBuilder.loadTexts: hwKompellaVpnTable.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVpnTable.setDescription("This table is the VPN's configuration table. Users can create or delete the VPN by it.")
hwKompellaVpnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 1, 1), ).setIndexNames((0, "HUAWEI-KOMPELLA-MIB", "hwKompellaVpnName"))
if mibBuilder.loadTexts: hwKompellaVpnEntry.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVpnEntry.setDescription('Provides the information of a Vpn entry.')
hwKompellaVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwKompellaVpnName.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVpnName.setDescription('The human-readable name of this VPN.')
hwKompellaVpnVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 1, 1, 2), HWL2VpnVcEncapsType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwKompellaVpnVcType.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVpnVcType.setDescription('This value indicates the service to be carried.')
hwKompellaVpnRouteDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 21))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwKompellaVpnRouteDistinguisher.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVpnRouteDistinguisher.setDescription("The route distinguisher for this VPN. This value must be exclusive on the whole. If this node hasn't been configured, the entry of hwKompellaCeTable or hwKompellaVcTable can not be created.")
hwKompellaVpnCtrlWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 1, 1, 4), HWEnableValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwKompellaVpnCtrlWord.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVpnCtrlWord.setDescription('This value indicates the control word capability.')
hwKompellaVpnMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(46, 16352), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwKompellaVpnMtu.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVpnMtu.setDescription('This object specifies max transport unit.')
hwKompellaVpnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 1, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwKompellaVpnRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVpnRowStatus.setDescription('RowStatus for this Table. Restriction: If delete a VPN, the entries of hwKompellaCeTable and hwKompellaVcTable under this VPN will be deleted too.')
hwKompellaVpnTargetTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 2), )
if mibBuilder.loadTexts: hwKompellaVpnTargetTable.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVpnTargetTable.setDescription("This table is the VPN Target's configuration table. Users can create or delete the Vpn target of a VPN by it.")
hwKompellaVpnTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 2, 1), ).setIndexNames((0, "HUAWEI-KOMPELLA-MIB", "hwKompellaVpnName"), (0, "HUAWEI-KOMPELLA-MIB", "hwKompellaVpnTargetType"), (0, "HUAWEI-KOMPELLA-MIB", "hwKompellaVpnTarget"))
if mibBuilder.loadTexts: hwKompellaVpnTargetEntry.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVpnTargetEntry.setDescription('Provides the information of a Vpn target entry.')
hwKompellaVpnTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("import", 1), ("export", 2))))
if mibBuilder.loadTexts: hwKompellaVpnTargetType.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVpnTargetType.setDescription('The route target export distribution type.')
hwKompellaVpnTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 21)))
if mibBuilder.loadTexts: hwKompellaVpnTarget.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVpnTarget.setDescription('The route target distribution policy.')
hwKompellaVpnTargetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 2, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwKompellaVpnTargetRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVpnTargetRowStatus.setDescription('RowStatus for this Table. Restriction: The VPN designated by hwKompellaVpnName must be created first. Not support modifying configuration.')
hwKompellaCeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 3), )
if mibBuilder.loadTexts: hwKompellaCeTable.setStatus('current')
if mibBuilder.loadTexts: hwKompellaCeTable.setDescription('This table is the CE configuration table. Users can create or delete the CE of a VPN by it.')
hwKompellaCeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 3, 1), ).setIndexNames((0, "HUAWEI-KOMPELLA-MIB", "hwKompellaVpnName"), (0, "HUAWEI-KOMPELLA-MIB", "hwKompellaCeID"))
if mibBuilder.loadTexts: hwKompellaCeEntry.setStatus('current')
if mibBuilder.loadTexts: hwKompellaCeEntry.setDescription('Provides the information of a CE entry.')
hwKompellaCeID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 249)))
if mibBuilder.loadTexts: hwKompellaCeID.setStatus('current')
if mibBuilder.loadTexts: hwKompellaCeID.setDescription('The unique ID in a VPN identifies a local CE.')
hwKompellaCeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwKompellaCeName.setStatus('current')
if mibBuilder.loadTexts: hwKompellaCeName.setDescription('The human-readable name of this CE.')
hwKompellaCeIDRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwKompellaCeIDRange.setStatus('current')
if mibBuilder.loadTexts: hwKompellaCeIDRange.setDescription('The CE ID range available.')
hwKompellaCeIDDefaultOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwKompellaCeIDDefaultOffset.setStatus('current')
if mibBuilder.loadTexts: hwKompellaCeIDDefaultOffset.setDescription('Value of default original CE offset, default value is 0.')
hwKompellaCeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 3, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwKompellaCeRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwKompellaCeRowStatus.setDescription('RowStatus for this Table. Restriction: The VPN designated by hwKompellaVpnName must be created first. Not support modifying configuration. If delete a CE, the entries of hwKompellaVcTable under this CE will be deleted too.')
hwKompellaVcTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4), )
if mibBuilder.loadTexts: hwKompellaVcTable.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcTable.setDescription('This table is the VC configuration table. Users can create or delete the VC of a VPN by it.')
hwKompellaVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1), ).setIndexNames((0, "HUAWEI-KOMPELLA-MIB", "hwKompellaVpnName"), (0, "HUAWEI-KOMPELLA-MIB", "hwKompellaCeID"), (0, "HUAWEI-KOMPELLA-MIB", "hwKompellaVcIfIndex"), (0, "HUAWEI-KOMPELLA-MIB", "hwKompellaVcRmtCeID"))
if mibBuilder.loadTexts: hwKompellaVcEntry.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcEntry.setDescription('Provides the information of a VC entry.')
hwKompellaVcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwKompellaVcIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcIfIndex.setDescription('If the vc is represented in the ifTable as an ifIndex, this item holds the ifIndex of the vc in the ifTable, otherwise it MUST be set to zero.')
hwKompellaVcRmtCeID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 249)))
if mibBuilder.loadTexts: hwKompellaVcRmtCeID.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcRmtCeID.setDescription('This item holds the remote ce id.')
hwKompellaVcInboundLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVcInboundLabel.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcInboundLabel.setDescription('This object indicates the inbound label.')
hwKompellaVcOutboundLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVcOutboundLabel.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcOutboundLabel.setDescription('This object indicates the outbound label.')
hwKompellaVcCtrlWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 5), HWEnableValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwKompellaVcCtrlWord.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcCtrlWord.setDescription('This value indicates the control word capability.')
hwKompellaVcTnlPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwKompellaVcTnlPolicyName.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcTnlPolicyName.setDescription('This object indicates the tunnel policy name used.')
hwKompellaVcVlanTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("raw", 1), ("tagged", 2), ("rawTagNotConfiged", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwKompellaVcVlanTagMode.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcVlanTagMode.setDescription('This object indicates VLAN tag is stripped(raw) , attached(tagged) or invalid(rawTagNotConfiged).')
hwKompellaVcSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwKompellaVcSecondary.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcSecondary.setDescription('Denotes the VC is the repetition or not.')
hwKompellaOAMSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwKompellaOAMSync.setStatus('current')
if mibBuilder.loadTexts: hwKompellaOAMSync.setDescription('Denotes the AC and PSN are enable or not.')
hwKompellaVCForBFDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVCForBFDIndex.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVCForBFDIndex.setDescription('The index of pw for BFD.')
hwKompellaVcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVcOperStatus.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcOperStatus.setDescription('Denotes the vc is operational or not.')
hwKompellaVcRerouteDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwKompellaVcRerouteDelayTime.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcRerouteDelayTime.setDescription('The reroute delay time.')
hwKompellaVcRerouteResumeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwKompellaVcRerouteResumeTime.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcRerouteResumeTime.setDescription('the reroute resume time.')
hwKompellaVcReroutePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("delay", 1), ("immediately", 2), ("never", 3), ("none", 4), ("err", 5), ("invalid", 6), ("immediatelySwitch", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVcReroutePolicy.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcReroutePolicy.setDescription('reroute policy.')
hwKompellaVcRerouteReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 15), HWL2VpnStateChangeReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVcRerouteReason.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcRerouteReason.setDescription('the reroute reason.')
hwKompellaVcLastRerouteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVcLastRerouteTime.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcLastRerouteTime.setDescription('last reroute time.')
hwKompellaVcManualSetFault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVcManualSetFault.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcManualSetFault.setDescription('Denotes the manual has been set or not.')
hwKompellaVcIsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVcIsActive.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcIsActive.setDescription('Denotes the current vc is active or not.')
hwKompellaACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notify", 4), ("notifyDown", 5), ("downNotify", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaACStatus.setStatus('current')
if mibBuilder.loadTexts: hwKompellaACStatus.setDescription("Denotes the AC's physical status is operational or not.")
hwKompellaACOAMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaACOAMStatus.setStatus('current')
if mibBuilder.loadTexts: hwKompellaACOAMStatus.setDescription("Denotes the AC's protocol is operational or not.")
hwKompellaVcBFDDetectMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 21), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 50), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVcBFDDetectMultiplier.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcBFDDetectMultiplier.setDescription('The multiple of detection time.')
hwKompellaVcBFDMinReceiveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 1000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVcBFDMinReceiveInterval.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcBFDMinReceiveInterval.setDescription('The minimum interval of BFD messages to be received.')
hwKompellaVcBFDMinTransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 1000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVcBFDMinTransmitInterval.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcBFDMinTransmitInterval.setDescription('The minimum interval of BFD messages to be sent.')
hwKompellaVcDynamicBFDDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVcDynamicBFDDetect.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcDynamicBFDDetect.setDescription('This value indicates the capacitability to support dynamic BFD detect.')
hwKompellaEthOamType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethOam1ag", 1), ("ethOam3ah", 2), ("noEthOamCfg", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaEthOamType.setStatus('current')
if mibBuilder.loadTexts: hwKompellaEthOamType.setDescription('This value indicates the type of ETH OAM.')
hwKompellaCfmMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaCfmMaIndex.setStatus('current')
if mibBuilder.loadTexts: hwKompellaCfmMaIndex.setDescription('This value indicates the CFM MA Index.')
hwKompellaVcPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVcPeerAddr.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcPeerAddr.setDescription('This object contain the value of the peer node address of the VC/PE maintenance protocol entity. ')
hwKompellaVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 4, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwKompellaVcRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcRowStatus.setDescription('RowStatus for this Table. Restriction: The VPN designated by hwKompellaVpnName must be created first. The CE designated by hwKompellaVpnName and hwKompellaCeID must be created first. Not support modifying configuration.')
hwKompellaVcTnlTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 5), )
if mibBuilder.loadTexts: hwKompellaVcTnlTable.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcTnlTable.setDescription('This table is used to search the tunnel index of a VC.')
hwKompellaVcTnlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 5, 1), ).setIndexNames((0, "HUAWEI-KOMPELLA-MIB", "hwKompellaVpnName"), (0, "HUAWEI-KOMPELLA-MIB", "hwKompellaCeID"), (0, "HUAWEI-KOMPELLA-MIB", "hwKompellaVcIfIndex"), (0, "HUAWEI-KOMPELLA-MIB", "hwKompellaVcRmtCeID"), (0, "HUAWEI-KOMPELLA-MIB", "hwKompellaVcTnlIndex"))
if mibBuilder.loadTexts: hwKompellaVcTnlEntry.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcTnlEntry.setDescription('Provides the information of a VC tunnel entry.')
hwKompellaVcTnlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwKompellaVcTnlIndex.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcTnlIndex.setDescription('This object indicates the tunnel index of a VC.')
hwKompellaVcTnlType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lsp", 1), ("gre", 2), ("l2tp", 3), ("ipsec", 4), ("crLsp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVcTnlType.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcTnlType.setDescription('This object indicates the type of the VC tunnel.')
hwKompellaTnlForBfdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaTnlForBfdIndex.setStatus('current')
if mibBuilder.loadTexts: hwKompellaTnlForBfdIndex.setDescription('This object indicates the index of LSP for BFD.')
hwKompellaVcStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 6), )
if mibBuilder.loadTexts: hwKompellaVcStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcStatisticsTable.setDescription("This table contains the KOMPELLA's VC packets statistics.")
hwKompellaVcStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 6, 1), ).setIndexNames((0, "HUAWEI-KOMPELLA-MIB", "hwKompellaVpnName"), (0, "HUAWEI-KOMPELLA-MIB", "hwKompellaCeID"), (0, "HUAWEI-KOMPELLA-MIB", "hwKompellaVcIfIndex"), (0, "HUAWEI-KOMPELLA-MIB", "hwKompellaVcRmtCeID"))
if mibBuilder.loadTexts: hwKompellaVcStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcStatisticsEntry.setDescription("Provides the information of the KOMPELLA's VC packets statistics.")
hwKompellaVcStatisticsRcvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVcStatisticsRcvPkts.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcStatisticsRcvPkts.setDescription('The total number of packets received on this VC.')
hwKompellaVcStatisticsRcvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVcStatisticsRcvBytes.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcStatisticsRcvBytes.setDescription('The total number of bytes received on this VC.')
hwKompellaVcStatisticsSndPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVcStatisticsSndPkts.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcStatisticsSndPkts.setDescription('The total number of packets sent on this VC.')
hwKompellaVcStatisticsSndBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwKompellaVcStatisticsSndBytes.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcStatisticsSndBytes.setDescription('The total number of bytes sent on the VC.')
hwKompellaVcUpDownNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 7), HWEnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwKompellaVcUpDownNotifEnable.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcUpDownNotifEnable.setDescription('This object indicates the enable sign of KOMPELLA VC state change notification. The default value is disable (2).')
hwKompellaVcDeletedNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 8), HWEnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwKompellaVcDeletedNotifEnable.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcDeletedNotifEnable.setDescription('This object indicates the enable sign of KOMPELLA VC deletion notification. The default value is disable (2).')
hwKompellaSwitchNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 9), HWEnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwKompellaSwitchNotifEnable.setStatus('current')
if mibBuilder.loadTexts: hwKompellaSwitchNotifEnable.setDescription('If this object is set to enable(1),then it enbables this emission of hwKompellaSwitchWtoP and hwKompellaSwitchPtoW notifications;otherwise these notifications are not emitted. The default value is disable (2).')
hwKompellaVcStateChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 10), HWL2VpnStateChangeReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwKompellaVcStateChangeReason.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcStateChangeReason.setDescription('This object indicates the reason of KOMPELLA VC state change.')
hwKompellaSwitchRmtCEID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 249))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwKompellaSwitchRmtCEID.setStatus('current')
if mibBuilder.loadTexts: hwKompellaSwitchRmtCEID.setDescription('This object indicates the remote CE ID of KOMPELLA VC switch from working pw to protect pw .')
hwKompellaMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 2))
hwKompellaVcDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 2, 1)).setObjects(("HUAWEI-KOMPELLA-MIB", "hwKompellaVcSecondary"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcStateChangeReason"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcPeerAddr"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcTnlPolicyName"))
if mibBuilder.loadTexts: hwKompellaVcDown.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcDown.setDescription("This notification indicates the VC's state changes to down.")
hwKompellaVcUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 2, 2)).setObjects(("HUAWEI-KOMPELLA-MIB", "hwKompellaVcSecondary"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcStateChangeReason"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcPeerAddr"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcTnlPolicyName"))
if mibBuilder.loadTexts: hwKompellaVcUp.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcUp.setDescription("This notification indicates the VC's state changes to up.")
hwKompellaSwitchWtoP = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 2, 3)).setObjects(("HUAWEI-KOMPELLA-MIB", "hwKompellaVcCtrlWord"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaSwitchRmtCEID"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcStateChangeReason"))
if mibBuilder.loadTexts: hwKompellaSwitchWtoP.setStatus('current')
if mibBuilder.loadTexts: hwKompellaSwitchWtoP.setDescription('This notification is generated when switch from working pw to protect pw happens.')
hwKompellaSwitchPtoW = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 2, 4)).setObjects(("HUAWEI-KOMPELLA-MIB", "hwKompellaVcCtrlWord"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaSwitchRmtCEID"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcStateChangeReason"))
if mibBuilder.loadTexts: hwKompellaSwitchPtoW.setStatus('current')
if mibBuilder.loadTexts: hwKompellaSwitchPtoW.setDescription('This notification is generated when switch from protect pw to working pw happens.')
hwKompellaVcDeleted = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 2, 5)).setObjects(("HUAWEI-KOMPELLA-MIB", "hwKompellaVcSecondary"))
if mibBuilder.loadTexts: hwKompellaVcDeleted.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcDeleted.setDescription('This notification indicates the VC is deleted.')
hwKompellaMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 3))
hwKompellaMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 3, 1))
hwKompellaMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 3, 1, 1)).setObjects(("HUAWEI-KOMPELLA-MIB", "hwKompellaVpnGroup"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVpnTargetGroup"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaCeGroup"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcGroup"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcTnlGroup"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcStatisticsGroup"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaNotificationControlGroup"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVCSwitchControlGroup"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcStateChangeReasonGroup"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaSwitchRmtCEIDGroup"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwKompellaMIBCompliance = hwKompellaMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hwKompellaMIBCompliance.setDescription('The compliance statement for systems supporting the HUAWEI-KOMPELLA-MIB.')
hwKompellaMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 3, 2))
hwKompellaVpnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 3, 2, 1)).setObjects(("HUAWEI-KOMPELLA-MIB", "hwKompellaVpnVcType"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVpnRouteDistinguisher"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVpnCtrlWord"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVpnMtu"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVpnRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwKompellaVpnGroup = hwKompellaVpnGroup.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVpnGroup.setDescription("The KOMPELLA's Vpn group.")
hwKompellaVpnTargetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 3, 2, 2)).setObjects(("HUAWEI-KOMPELLA-MIB", "hwKompellaVpnTargetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwKompellaVpnTargetGroup = hwKompellaVpnTargetGroup.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVpnTargetGroup.setDescription("The KOMPELLA's Vpn Target group.")
hwKompellaCeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 3, 2, 3)).setObjects(("HUAWEI-KOMPELLA-MIB", "hwKompellaCeName"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaCeIDRange"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaCeIDDefaultOffset"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaCeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwKompellaCeGroup = hwKompellaCeGroup.setStatus('current')
if mibBuilder.loadTexts: hwKompellaCeGroup.setDescription("The KOMPELLA's CE group.")
hwKompellaVcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 3, 2, 4)).setObjects(("HUAWEI-KOMPELLA-MIB", "hwKompellaVcInboundLabel"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcOutboundLabel"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcCtrlWord"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcTnlPolicyName"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcVlanTagMode"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcSecondary"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaOAMSync"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVCForBFDIndex"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcOperStatus"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcRerouteDelayTime"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcRerouteResumeTime"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcReroutePolicy"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcRerouteReason"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcLastRerouteTime"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcManualSetFault"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcIsActive"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaACStatus"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaACOAMStatus"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcBFDDetectMultiplier"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcBFDMinReceiveInterval"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcBFDMinTransmitInterval"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcDynamicBFDDetect"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaEthOamType"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaCfmMaIndex"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwKompellaVcGroup = hwKompellaVcGroup.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcGroup.setDescription("The KOMPELLA's VC group.")
hwKompellaVcTnlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 3, 2, 5)).setObjects(("HUAWEI-KOMPELLA-MIB", "hwKompellaVcTnlType"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaTnlForBfdIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwKompellaVcTnlGroup = hwKompellaVcTnlGroup.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcTnlGroup.setDescription("The KOMPELLA's VC Tunnel group.")
hwKompellaVcStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 3, 2, 6)).setObjects(("HUAWEI-KOMPELLA-MIB", "hwKompellaVcStatisticsRcvPkts"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcStatisticsRcvBytes"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcStatisticsSndPkts"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcStatisticsSndBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwKompellaVcStatisticsGroup = hwKompellaVcStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcStatisticsGroup.setDescription("The KOMPELLA's VC Statistic group.")
hwKompellaNotificationControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 3, 2, 7)).setObjects(("HUAWEI-KOMPELLA-MIB", "hwKompellaVcUpDownNotifEnable"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcDeletedNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwKompellaNotificationControlGroup = hwKompellaNotificationControlGroup.setStatus('current')
if mibBuilder.loadTexts: hwKompellaNotificationControlGroup.setDescription("The KOMPELLA's Notification Control group.")
hwKompellaVCSwitchControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 3, 2, 8)).setObjects(("HUAWEI-KOMPELLA-MIB", "hwKompellaSwitchNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwKompellaVCSwitchControlGroup = hwKompellaVCSwitchControlGroup.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVCSwitchControlGroup.setDescription("The KOMPELLA's Switch Notification Control group.")
hwKompellaVcStateChangeReasonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 3, 2, 9)).setObjects(("HUAWEI-KOMPELLA-MIB", "hwKompellaVcStateChangeReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwKompellaVcStateChangeReasonGroup = hwKompellaVcStateChangeReasonGroup.setStatus('current')
if mibBuilder.loadTexts: hwKompellaVcStateChangeReasonGroup.setDescription("The KOMPELLA's Vc State Change Reason group.")
hwKompellaSwitchRmtCEIDGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 3, 2, 10)).setObjects(("HUAWEI-KOMPELLA-MIB", "hwKompellaSwitchRmtCEID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwKompellaSwitchRmtCEIDGroup = hwKompellaSwitchRmtCEIDGroup.setStatus('current')
if mibBuilder.loadTexts: hwKompellaSwitchRmtCEIDGroup.setDescription("The KOMPELLA's Remote CE ID group.")
hwKompellaNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 119, 2, 3, 2, 11)).setObjects(("HUAWEI-KOMPELLA-MIB", "hwKompellaVcDown"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcUp"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaSwitchWtoP"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaSwitchPtoW"), ("HUAWEI-KOMPELLA-MIB", "hwKompellaVcDeleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwKompellaNotificationGroup = hwKompellaNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwKompellaNotificationGroup.setDescription('The KOMPELLA Notification group.')
mibBuilder.exportSymbols("HUAWEI-KOMPELLA-MIB", hwKompellaVcDeletedNotifEnable=hwKompellaVcDeletedNotifEnable, hwKompellaVcDynamicBFDDetect=hwKompellaVcDynamicBFDDetect, hwKompellaVpnTargetRowStatus=hwKompellaVpnTargetRowStatus, hwKompellaVcReroutePolicy=hwKompellaVcReroutePolicy, hwKompellaCfmMaIndex=hwKompellaCfmMaIndex, hwKompellaVpnTable=hwKompellaVpnTable, hwKompellaVpnTargetEntry=hwKompellaVpnTargetEntry, hwKompellaOAMSync=hwKompellaOAMSync, hwKompellaACStatus=hwKompellaACStatus, hwKompellaSwitchRmtCEID=hwKompellaSwitchRmtCEID, hwKompellaVcOperStatus=hwKompellaVcOperStatus, hwKompellaVcTnlPolicyName=hwKompellaVcTnlPolicyName, hwKompellaVcTable=hwKompellaVcTable, hwKompellaVCForBFDIndex=hwKompellaVCForBFDIndex, hwKompellaVcPeerAddr=hwKompellaVcPeerAddr, hwKompellaCeGroup=hwKompellaCeGroup, hwL2VpnKompella=hwL2VpnKompella, hwKompellaSwitchRmtCEIDGroup=hwKompellaSwitchRmtCEIDGroup, hwKompellaEthOamType=hwKompellaEthOamType, hwKompellaVpnVcType=hwKompellaVpnVcType, hwKompellaVpnTarget=hwKompellaVpnTarget, hwKompellaMIBTraps=hwKompellaMIBTraps, hwKompellaCeID=hwKompellaCeID, hwKompellaVcLastRerouteTime=hwKompellaVcLastRerouteTime, hwKompellaCeIDDefaultOffset=hwKompellaCeIDDefaultOffset, hwKompellaVcUpDownNotifEnable=hwKompellaVcUpDownNotifEnable, hwKompellaMIBCompliances=hwKompellaMIBCompliances, hwKompellaVcCtrlWord=hwKompellaVcCtrlWord, hwKompellaVcStateChangeReasonGroup=hwKompellaVcStateChangeReasonGroup, hwKompellaVpnGroup=hwKompellaVpnGroup, hwKompellaVcRowStatus=hwKompellaVcRowStatus, hwKompellaVcIsActive=hwKompellaVcIsActive, hwKompellaMIBObjects=hwKompellaMIBObjects, hwKompellaVcBFDMinReceiveInterval=hwKompellaVcBFDMinReceiveInterval, hwKompellaVpnTargetType=hwKompellaVpnTargetType, hwKompellaVcDown=hwKompellaVcDown, hwKompellaSwitchNotifEnable=hwKompellaSwitchNotifEnable, hwKompellaVpnCtrlWord=hwKompellaVpnCtrlWord, hwKompellaVcTnlGroup=hwKompellaVcTnlGroup, hwKompellaVcSecondary=hwKompellaVcSecondary, hwKompellaVpnTargetGroup=hwKompellaVpnTargetGroup, hwKompellaVcInboundLabel=hwKompellaVcInboundLabel, hwKompellaVpnEntry=hwKompellaVpnEntry, hwKompellaVcTnlEntry=hwKompellaVcTnlEntry, hwKompellaVcStatisticsSndPkts=hwKompellaVcStatisticsSndPkts, hwKompellaVcRerouteDelayTime=hwKompellaVcRerouteDelayTime, hwKompellaVcStatisticsRcvPkts=hwKompellaVcStatisticsRcvPkts, hwKompellaVcStateChangeReason=hwKompellaVcStateChangeReason, hwKompellaVcEntry=hwKompellaVcEntry, hwKompellaSwitchPtoW=hwKompellaSwitchPtoW, hwKompellaCeIDRange=hwKompellaCeIDRange, hwKompellaVcUp=hwKompellaVcUp, hwKompellaVcStatisticsEntry=hwKompellaVcStatisticsEntry, hwKompellaVcBFDMinTransmitInterval=hwKompellaVcBFDMinTransmitInterval, hwKompellaMIBConformance=hwKompellaMIBConformance, hwL2Vpn=hwL2Vpn, hwKompellaVpnRowStatus=hwKompellaVpnRowStatus, hwKompellaNotificationGroup=hwKompellaNotificationGroup, hwKompellaVcManualSetFault=hwKompellaVcManualSetFault, hwKompellaMIBCompliance=hwKompellaMIBCompliance, hwKompellaVcRmtCeID=hwKompellaVcRmtCeID, hwKompellaVcStatisticsRcvBytes=hwKompellaVcStatisticsRcvBytes, hwKompellaSwitchWtoP=hwKompellaSwitchWtoP, hwKompellaVpnRouteDistinguisher=hwKompellaVpnRouteDistinguisher, hwKompellaVcRerouteReason=hwKompellaVcRerouteReason, hwKompellaNotificationControlGroup=hwKompellaNotificationControlGroup, hwKompellaVcBFDDetectMultiplier=hwKompellaVcBFDDetectMultiplier, hwKompellaVcStatisticsTable=hwKompellaVcStatisticsTable, hwKompellaVpnTargetTable=hwKompellaVpnTargetTable, hwKompellaVcStatisticsGroup=hwKompellaVcStatisticsGroup, hwKompellaVcTnlTable=hwKompellaVcTnlTable, hwKompellaCeRowStatus=hwKompellaCeRowStatus, hwKompellaVcTnlIndex=hwKompellaVcTnlIndex, hwKompellaVcRerouteResumeTime=hwKompellaVcRerouteResumeTime, hwKompellaVpnMtu=hwKompellaVpnMtu, hwKompellaMIBGroups=hwKompellaMIBGroups, hwKompellaCeTable=hwKompellaCeTable, hwKompellaVcOutboundLabel=hwKompellaVcOutboundLabel, hwKompellaVcGroup=hwKompellaVcGroup, hwKompellaVpnName=hwKompellaVpnName, hwKompellaACOAMStatus=hwKompellaACOAMStatus, hwKompellaVcVlanTagMode=hwKompellaVcVlanTagMode, hwKompellaVcDeleted=hwKompellaVcDeleted, hwKompellaVcStatisticsSndBytes=hwKompellaVcStatisticsSndBytes, hwKompellaVCSwitchControlGroup=hwKompellaVCSwitchControlGroup, hwKompellaTnlForBfdIndex=hwKompellaTnlForBfdIndex, hwKompellaCeName=hwKompellaCeName, PYSNMP_MODULE_ID=hwL2VpnKompella, hwKompellaVcTnlType=hwKompellaVcTnlType, hwKompellaVcIfIndex=hwKompellaVcIfIndex, hwKompellaCeEntry=hwKompellaCeEntry)
