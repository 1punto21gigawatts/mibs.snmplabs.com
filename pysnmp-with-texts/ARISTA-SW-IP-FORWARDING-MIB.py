#
# PySNMP MIB module ARISTA-SW-IP-FORWARDING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ARISTA-SW-IP-FORWARDING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:25:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
aristaMibs, = mibBuilder.importSymbols("ARISTA-SMI-MIB", "aristaMibs")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
InetVersion, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetVersion")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, Counter64, iso, Gauge32, ObjectIdentity, Integer32, Bits, TimeTicks, ModuleIdentity, Unsigned32, NotificationType, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "iso", "Gauge32", "ObjectIdentity", "Integer32", "Bits", "TimeTicks", "ModuleIdentity", "Unsigned32", "NotificationType", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DisplayString")
aristaSwIpForwardingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 30065, 3, 1))
aristaSwIpForwardingMIB.setRevisions(('2014-08-15 00:00', '2011-03-31 13:00', '2010-01-31 00:00', '2009-03-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: aristaSwIpForwardingMIB.setRevisionsDescriptions(('Updated postal and e-mail addresses', 'Updated postal address and telephone', 'Revised to correct syntax of the aristaSwFwdIp definition.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: aristaSwIpForwardingMIB.setLastUpdated('201408150000Z')
if mibBuilder.loadTexts: aristaSwIpForwardingMIB.setOrganization('Arista Networks, Inc.')
if mibBuilder.loadTexts: aristaSwIpForwardingMIB.setContactInfo('Arista Networks, Inc. Postal: 5453 Great America Parkway Santa Clara, CA 95054 Tel: +1 408 547-5500 E-mail: snmp@arista.com')
if mibBuilder.loadTexts: aristaSwIpForwardingMIB.setDescription('This MIB contains counters for software-forwarded packets.')
aristaSwFwdIp = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1))
aristaSwFwdIpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1), )
if mibBuilder.loadTexts: aristaSwFwdIpStatsTable.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsTable.setDescription('The table containing system wide, IP version specific traffic statistics. This table and the ipIfStatsTable contain similar objects whose difference is in their granularity. Where this table contains system wide traffic statistics, the ipIfStatsTable contains the same statistics but counted on a per-interface basis.')
aristaSwFwdIpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1), ).setIndexNames((0, "ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsIPVersion"))
if mibBuilder.loadTexts: aristaSwFwdIpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsEntry.setDescription('A statistics entry containing system-wide objects for a particular IP version.')
aristaSwFwdIpStatsIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 1), InetVersion())
if mibBuilder.loadTexts: aristaSwFwdIpStatsIPVersion.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsIPVersion.setDescription('The IP version of this row.')
aristaSwFwdIpStatsInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsInReceives.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsInReceives.setDescription('The total number of input IP datagrams received in software, including those received in error. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsHCInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCInReceives.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCInReceives.setDescription('The total number of input IP datagrams received in software, including those received in error. This object counts the same datagrams as aristaSwFwdIpStatsInReceives, but allows for larger values. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsInOctets.setDescription('The total number of octets received in software in input IP datagrams, including those received in error. Octets from datagrams counted in aristaSwFwdIpStatsInReceives MUST be counted here. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsHCInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCInOctets.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCInOctets.setDescription('The total number of octets received in software in input IP datagrams, including those received in error. This object counts the same octets as aristaSwFwdIpStatsInOctets, but allows for larger values. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsInHdrErrors.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsInHdrErrors.setDescription('The number of input IP datagrams discarded in software due to errors in their IP headers, including version number mismatch, other format errors, hop count exceeded, errors discovered in processing their IP options, etc. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsInNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsInNoRoutes.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsInNoRoutes.setDescription('The number of input IP datagrams discarded in software because no route could be found to transmit them to their destination. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsInAddrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsInAddrErrors.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsInAddrErrors.setDescription("The number of input IP datagrams discarded in software because the IP address in their IP header's destination field was not a valid address to be received at this entity. This count includes invalid addresses (e.g., ::0). For entities that are not IP routers and therefore do not forward datagrams, this counter includes datagrams discarded because the destination address was not a local address. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.")
aristaSwFwdIpStatsInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsInUnknownProtos.setDescription('The number of locally-addressed IP datagrams received successfully in software but discarded because of an unknown or unsupported protocol. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsInTruncatedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsInTruncatedPkts.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsInTruncatedPkts.setDescription("The number of input IP datagrams discarded in software because the datagram frame didn't carry enough data. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.")
aristaSwFwdIpStatsInForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsInForwDatagrams.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsInForwDatagrams.setDescription('The number of input datagrams for which this entity was not their final IP destination and for which this entity attempted in software to find a route to forward them to that final destination. In entities that do not act as IP routers, this counter will include only those datagrams that were Source-Routed via this entity, and the Source-Route processing was successful. When tracking interface statistics, the counter of the incoming interface is incremented for each datagram. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsHCInForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCInForwDatagrams.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCInForwDatagrams.setDescription('The number of input datagrams for which this entity was not their final IP destination and for which this entity attempted in software to find a route to forward them to that final destination. This object counts the same packets as aristaSwFwdIpStatsInForwDatagrams, but allows for larger values. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsReasmReqds = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsReasmReqds.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsReasmReqds.setDescription('The number of IP fragments received that needed to be reassembled at this interface. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsReasmOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsReasmOKs.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsReasmOKs.setDescription('The number of IP datagrams successfully reassembled. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsReasmFails.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsReasmFails.setDescription('The number of failures detected by the IP re-assembly algorithm (for whatever reason: timed out, errors, etc.). Note that this is not necessarily a count of discarded IP fragments since some algorithms (notably the algorithm in RFC 815) can lose track of the number of fragments by combining them as they are received. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsInDiscards.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsInDiscards.setDescription('The number of input IP datagrams received in software for which no problems were encountered to prevent their continued processing, but were discarded (e.g., for lack of buffer space). Note that this counter does not include any datagrams discarded while awaiting re-assembly. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsInDelivers.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsInDelivers.setDescription('The total number of datagrams successfully delivered to IP user-protocols (including ICMP). Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsHCInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCInDelivers.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCInDelivers.setDescription('The total number of datagrams successfully delivered to IP user-protocols (including ICMP). This object counts the same packets as aristaSwFwdIpStatsInDelivers, but allows for larger values. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutRequests.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutRequests.setDescription('The total number of IP datagrams that local IP user- protocols (including ICMP) supplied to IP in requests for transmission. Note that this counter does not include any datagrams counted in aristaSwFwdIpStatsOutForwDatagrams. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsHCOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCOutRequests.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCOutRequests.setDescription('The total number of IP datagrams that local IP user- protocols (including ICMP) supplied to IP in requests for transmission. This object counts the same packets as aristaSwFwdIpStatsOutRequests, but allows for larger values. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsOutNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutNoRoutes.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutNoRoutes.setDescription('The number of locally generated IP datagrams discarded because no route could be found to transmit them to their destination. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsOutForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutForwDatagrams.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutForwDatagrams.setDescription('The number of datagrams for which this entity was not their final IP destination and for which it was successful in finding a path to their final destination in software. In entities that do not act as IP routers, this counter will include only those datagrams that were Source-Routed via this entity, and the Source-Route processing was successful. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsHCOutForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCOutForwDatagrams.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCOutForwDatagrams.setDescription('The number of datagrams for which this entity was not their final IP destination and for which it was successful in finding a path to their final destination in software. This object counts the same packets as aristaSwFwdIpStatsOutForwDatagrams, but allows for larger values. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutDiscards.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutDiscards.setDescription('The number of output IP datagrams for which no problem was encountered to prevent their transmission to their destination, but were discarded in software (e.g., for lack of buffer space). Note that this counter would include datagrams counted in aristaSwFwdIpStatsOutForwDatagrams if any such datagrams met this (discretionary) discard criterion. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsOutFragReqds = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutFragReqds.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutFragReqds.setDescription('The number of IP datagrams that would require fragmentation in order to be transmitted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsOutFragOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutFragOKs.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutFragOKs.setDescription('The number of IP datagrams that have been successfully fragmented. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsOutFragFails = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutFragFails.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutFragFails.setDescription('The number of IP datagrams that have been discarded because they needed to be fragmented but could not be. This includes IPv4 packets that have the DF bit set and IPv6 packets that are being forwarded and exceed the outgoing link MTU. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsOutFragCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutFragCreates.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutFragCreates.setDescription('The number of output datagram fragments that have been generated as a result of IP fragmentation. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsOutTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutTransmits.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutTransmits.setDescription('The total number of IP datagrams that this entity supplied by software to the lower layers for transmission. This includes datagrams generated locally and those forwarded in software by this entity. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsHCOutTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCOutTransmits.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCOutTransmits.setDescription('The total number of IP datagrams that this entity supplied by software to the lower layers for transmission. This object counts the same datagrams as aristaSwFwdIpStatsOutTransmits, but allows for larger values. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutOctets.setDescription('The total number of octets in IP datagrams delivered by software to the lower layers for transmission. Octets from datagrams counted in aristaSwFwdIpStatsOutTransmits MUST be counted here. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCOutOctets.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCOutOctets.setDescription('The total number of octets in IP datagrams delivered by software to the lower layers for transmission. This objects counts the same octets as aristaSwFwdIpStatsOutOctets, but allows for larger values. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsInMcastPkts.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsInMcastPkts.setDescription('The number of IP multicast datagrams received by software. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsHCInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCInMcastPkts.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCInMcastPkts.setDescription('The number of IP multicast datagrams received by software. This object counts the same datagrams as aristaSwFwdIpStatsInMcastPkts but allows for larger values. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsInMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsInMcastOctets.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsInMcastOctets.setDescription('The total number of octets received by software in IP multicast datagrams. Octets from datagrams counted in aristaSwFwdIpStatsInMcastPkts MUST be counted here. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsHCInMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCInMcastOctets.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCInMcastOctets.setDescription('The total number of octets received by software in IP multicast datagrams. This object counts the same octets as aristaSwFwdIpStatsInMcastOctets, but allows for larger values. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutMcastPkts.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutMcastPkts.setDescription('The number of IP multicast datagrams transmitted by software. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsHCOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCOutMcastPkts.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCOutMcastPkts.setDescription('The number of IP multicast datagrams transmitted by software. This object counts the same datagrams as aristaSwFwdIpStatsOutMcastPkts, but allows for larger values. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsOutMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutMcastOctets.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutMcastOctets.setDescription('The total number of octets transmitted by software in IP multicast datagrams. Octets from datagrams counted in aristaSwFwdIpStatsOutMcastPkts MUST be counted here. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsHCOutMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCOutMcastOctets.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCOutMcastOctets.setDescription('The total number of octets transmitted by software in IP multicast datagrams. This object counts the same octets as aristaSwFwdIpStatsOutMcastOctets, but allows for larger values. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsInBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsInBcastPkts.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsInBcastPkts.setDescription('The number of IP broadcast datagrams received by software. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsHCInBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCInBcastPkts.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCInBcastPkts.setDescription('The number of IP broadcast datagrams received by software. This object counts the same datagrams as aristaSwFwdIpStatsInBcastPkts but allows for larger values. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsOutBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutBcastPkts.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsOutBcastPkts.setDescription('The number of IP broadcast datagrams transmitted by software. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsHCOutBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCOutBcastPkts.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsHCOutBcastPkts.setDescription('The number of IP broadcast datagrams transmitted by software. This object counts the same datagrams as aristaSwFwdIpStatsOutBcastPkts, but allows for larger values. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of aristaSwFwdIpStatsDiscontinuityTime.')
aristaSwFwdIpStatsDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 46), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any one or more of this entry's counters suffered a discontinuity. If no such discontinuities have occurred since the last re- initialization of the local management subsystem, then this object contains a zero value.")
aristaSwFwdIpStatsRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 1, 1, 1, 1, 47), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaSwFwdIpStatsRefreshRate.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsRefreshRate.setDescription('The minimum reasonable polling interval for this entry. This object provides an indication of the minimum amount of time required to update the counters in this entry.')
aristaSwIpFwdMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 1, 2))
aristaSwIpFwdMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 1, 2, 1))
aristaSwIpFwdMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 1, 2, 2))
aristaSwIpFwdMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 30065, 3, 1, 2, 1, 2)).setObjects(("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsGroup"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpOctetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aristaSwIpFwdMIBCompliance = aristaSwIpFwdMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: aristaSwIpFwdMIBCompliance.setDescription('The compliance statement for Arista switches that support software forwarding of IPv4 and/or IPv6 packets.')
aristaSwFwdIpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 30065, 3, 1, 2, 2, 1)).setObjects(("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsInReceives"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsHCInReceives"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsInHdrErrors"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsInNoRoutes"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsInAddrErrors"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsInUnknownProtos"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsInTruncatedPkts"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsInForwDatagrams"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsHCInForwDatagrams"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsReasmReqds"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsReasmOKs"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsReasmFails"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsInDiscards"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsInDelivers"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsHCInDelivers"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsOutRequests"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsHCOutRequests"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsOutNoRoutes"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsOutForwDatagrams"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsHCOutForwDatagrams"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsOutDiscards"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsOutFragReqds"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsOutFragOKs"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsOutFragFails"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsOutFragCreates"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsOutTransmits"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsHCOutTransmits"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsInMcastPkts"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsHCInMcastPkts"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsOutMcastPkts"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsHCOutMcastPkts"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsInBcastPkts"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsHCInBcastPkts"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsOutBcastPkts"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsHCOutBcastPkts"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsDiscontinuityTime"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsRefreshRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aristaSwFwdIpStatsGroup = aristaSwFwdIpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpStatsGroup.setDescription('The group of required statistics objects.')
aristaSwFwdIpOctetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 30065, 3, 1, 2, 2, 2)).setObjects(("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsInOctets"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsHCInOctets"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsOutOctets"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsHCOutOctets"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsInMcastOctets"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsHCInMcastOctets"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsOutMcastOctets"), ("ARISTA-SW-IP-FORWARDING-MIB", "aristaSwFwdIpStatsHCOutMcastOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aristaSwFwdIpOctetGroup = aristaSwFwdIpOctetGroup.setStatus('current')
if mibBuilder.loadTexts: aristaSwFwdIpOctetGroup.setDescription('Octet counters, which are not supported on all systems.')
mibBuilder.exportSymbols("ARISTA-SW-IP-FORWARDING-MIB", aristaSwFwdIpStatsRefreshRate=aristaSwFwdIpStatsRefreshRate, aristaSwFwdIpStatsHCInDelivers=aristaSwFwdIpStatsHCInDelivers, aristaSwFwdIpStatsOutFragReqds=aristaSwFwdIpStatsOutFragReqds, aristaSwFwdIpStatsOutFragOKs=aristaSwFwdIpStatsOutFragOKs, aristaSwFwdIpStatsEntry=aristaSwFwdIpStatsEntry, aristaSwFwdIpStatsOutForwDatagrams=aristaSwFwdIpStatsOutForwDatagrams, aristaSwFwdIpStatsReasmReqds=aristaSwFwdIpStatsReasmReqds, aristaSwFwdIpStatsInNoRoutes=aristaSwFwdIpStatsInNoRoutes, aristaSwFwdIpStatsOutNoRoutes=aristaSwFwdIpStatsOutNoRoutes, aristaSwFwdIpStatsHCInMcastPkts=aristaSwFwdIpStatsHCInMcastPkts, aristaSwFwdIpStatsGroup=aristaSwFwdIpStatsGroup, aristaSwFwdIpStatsHCInReceives=aristaSwFwdIpStatsHCInReceives, aristaSwFwdIpStatsHCOutForwDatagrams=aristaSwFwdIpStatsHCOutForwDatagrams, aristaSwFwdIpStatsReasmFails=aristaSwFwdIpStatsReasmFails, aristaSwIpFwdMIBCompliances=aristaSwIpFwdMIBCompliances, aristaSwFwdIpStatsOutMcastOctets=aristaSwFwdIpStatsOutMcastOctets, aristaSwFwdIpStatsHCInOctets=aristaSwFwdIpStatsHCInOctets, aristaSwFwdIpStatsIPVersion=aristaSwFwdIpStatsIPVersion, aristaSwFwdIpStatsHCOutTransmits=aristaSwFwdIpStatsHCOutTransmits, aristaSwFwdIpStatsInUnknownProtos=aristaSwFwdIpStatsInUnknownProtos, aristaSwIpFwdMIBConformance=aristaSwIpFwdMIBConformance, aristaSwIpFwdMIBCompliance=aristaSwIpFwdMIBCompliance, aristaSwFwdIpStatsOutFragCreates=aristaSwFwdIpStatsOutFragCreates, aristaSwFwdIpStatsInMcastPkts=aristaSwFwdIpStatsInMcastPkts, aristaSwFwdIpStatsHCInBcastPkts=aristaSwFwdIpStatsHCInBcastPkts, aristaSwFwdIpStatsInOctets=aristaSwFwdIpStatsInOctets, aristaSwFwdIpStatsHCOutMcastPkts=aristaSwFwdIpStatsHCOutMcastPkts, aristaSwFwdIpStatsInReceives=aristaSwFwdIpStatsInReceives, aristaSwIpFwdMIBGroups=aristaSwIpFwdMIBGroups, aristaSwFwdIpStatsHCInMcastOctets=aristaSwFwdIpStatsHCInMcastOctets, aristaSwFwdIpStatsInAddrErrors=aristaSwFwdIpStatsInAddrErrors, aristaSwFwdIpStatsOutOctets=aristaSwFwdIpStatsOutOctets, aristaSwFwdIpStatsInHdrErrors=aristaSwFwdIpStatsInHdrErrors, aristaSwFwdIpStatsInForwDatagrams=aristaSwFwdIpStatsInForwDatagrams, aristaSwFwdIpStatsHCOutRequests=aristaSwFwdIpStatsHCOutRequests, aristaSwFwdIpStatsInBcastPkts=aristaSwFwdIpStatsInBcastPkts, aristaSwFwdIpStatsOutBcastPkts=aristaSwFwdIpStatsOutBcastPkts, aristaSwFwdIp=aristaSwFwdIp, aristaSwFwdIpStatsOutDiscards=aristaSwFwdIpStatsOutDiscards, aristaSwFwdIpStatsHCOutBcastPkts=aristaSwFwdIpStatsHCOutBcastPkts, aristaSwFwdIpStatsInDelivers=aristaSwFwdIpStatsInDelivers, aristaSwIpForwardingMIB=aristaSwIpForwardingMIB, aristaSwFwdIpOctetGroup=aristaSwFwdIpOctetGroup, aristaSwFwdIpStatsReasmOKs=aristaSwFwdIpStatsReasmOKs, aristaSwFwdIpStatsOutRequests=aristaSwFwdIpStatsOutRequests, aristaSwFwdIpStatsOutFragFails=aristaSwFwdIpStatsOutFragFails, aristaSwFwdIpStatsTable=aristaSwFwdIpStatsTable, aristaSwFwdIpStatsHCInForwDatagrams=aristaSwFwdIpStatsHCInForwDatagrams, aristaSwFwdIpStatsInDiscards=aristaSwFwdIpStatsInDiscards, aristaSwFwdIpStatsInMcastOctets=aristaSwFwdIpStatsInMcastOctets, aristaSwFwdIpStatsOutMcastPkts=aristaSwFwdIpStatsOutMcastPkts, aristaSwFwdIpStatsDiscontinuityTime=aristaSwFwdIpStatsDiscontinuityTime, aristaSwFwdIpStatsHCOutOctets=aristaSwFwdIpStatsHCOutOctets, aristaSwFwdIpStatsInTruncatedPkts=aristaSwFwdIpStatsInTruncatedPkts, aristaSwFwdIpStatsOutTransmits=aristaSwFwdIpStatsOutTransmits, PYSNMP_MODULE_ID=aristaSwIpForwardingMIB, aristaSwFwdIpStatsHCOutMcastOctets=aristaSwFwdIpStatsHCOutMcastOctets)
