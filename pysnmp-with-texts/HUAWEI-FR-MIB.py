#
# PySNMP MIB module HUAWEI-FR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-FR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:44:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Unsigned32, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, Gauge32, ModuleIdentity, Counter64, iso, IpAddress, Counter32, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "Gauge32", "ModuleIdentity", "Counter64", "iso", "IpAddress", "Counter32", "Bits", "Integer32")
TruthValue, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus")
hwFrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168))
if mibBuilder.loadTexts: hwFrMIB.setLastUpdated('201009102030Z')
if mibBuilder.loadTexts: hwFrMIB.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwFrMIB.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwFrMIB.setDescription('This MIB is mainly used to indicate the information of Fr interface')
hwFrObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1))
hwFrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1), )
if mibBuilder.loadTexts: hwFrTable.setStatus('current')
if mibBuilder.loadTexts: hwFrTable.setDescription('This table is used to indicate the parameters of the Fr interface. The index of this table is hwFrIfIndex.')
hwFrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1, 1), ).setIndexNames((0, "HUAWEI-FR-MIB", "hwFrIfIndex"))
if mibBuilder.loadTexts: hwFrEntry.setStatus('current')
if mibBuilder.loadTexts: hwFrEntry.setDescription('This table is used to indicate the parameters of the Fr interface. The index of this entry is hwFrIfIndex.')
hwFrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwFrIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwFrIfIndex.setDescription('Indicates the interface index.')
hwFrEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonstandard", 1), ("ietf", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrEncapType.setStatus('current')
if mibBuilder.loadTexts: hwFrEncapType.setDescription('Indicates the interface fr encapsulation type. Options: 1.nonstandard(1) - nonstandard encapsulation 2.ietf(2) - RFC1490 encapsulation')
hwFrIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("nni", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrIfType.setStatus('current')
if mibBuilder.loadTexts: hwFrIfType.setDescription('Indicates fr interface type. Options: 1.dte(1) - DTE type 2.dce(2) - DCE type 3.nni(3) - NNI type')
hwFrLmiType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notset", 1), ("nonstandard", 2), ("ansi", 3), ("q933a", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrLmiType.setStatus('current')
if mibBuilder.loadTexts: hwFrLmiType.setDescription('Indicates the Lmi protocol type. Options: 1.notset(1) - NotSet 2.nonstandard(2) - nonstandard type 3.ansi(3) - ANSI type 4.q933a(4) - Q.933a type')
hwFrLmiN391DteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrLmiN391DteValue.setStatus('current')
if mibBuilder.loadTexts: hwFrLmiN391DteValue.setDescription('Indicates the parameter of DTE N391. Get 65535 when the fr interface type is DCE. Range: 1-255 Default: 6 Unit: count')
hwFrLmiN392DteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrLmiN392DteValue.setStatus('current')
if mibBuilder.loadTexts: hwFrLmiN392DteValue.setDescription('Indicates the parameter of DTE N392. Get 65535 when the fr interface type is DCE. Range: 1-10 Default: 3 Unit: count')
hwFrLmiN392DceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrLmiN392DceValue.setStatus('current')
if mibBuilder.loadTexts: hwFrLmiN392DceValue.setDescription('Indicates the parameter of DCE N392. Get 65535 when the fr interface type is DTE. Range: 1-10 Default: 3 Unit: count')
hwFrLmiN393DteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrLmiN393DteValue.setStatus('current')
if mibBuilder.loadTexts: hwFrLmiN393DteValue.setDescription('Indicates the parameter of DTE N393. Get 65535 when the fr interface type is DCE. Range: 1-10 Default: 4 Unit: count ')
hwFrLmiN393DceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrLmiN393DceValue.setStatus('current')
if mibBuilder.loadTexts: hwFrLmiN393DceValue.setDescription('Indicates the parameter of DCE N393. Get 65535 when the fr interface type is DTE. Range: 1-10 Default: 4 Unit: count ')
hwFrLmiT391DteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 32767), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrLmiT391DteValue.setStatus('current')
if mibBuilder.loadTexts: hwFrLmiT391DteValue.setDescription('Indicates the parameter of DTE T391. Get 65535 when the fr interface type is DCE. Range: 1-32767 Default: 10 Unit: second')
hwFrLmiT392DceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 30), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrLmiT392DceValue.setStatus('current')
if mibBuilder.loadTexts: hwFrLmiT392DceValue.setDescription('Indicates the parameter of DCE T392. Get 65535 when the fr interface type is DTE. Range: 5-30 Default: 15 Unit: second')
hwFrIphcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrIphcEnable.setStatus('current')
if mibBuilder.loadTexts: hwFrIphcEnable.setDescription('Indicates IPHC is enabled or disabled. By default, RTP header compression with IPHC format is disabled. true: enable RTP header compression with IPHC format. false: disable RTP header compression with IPHC format.')
hwFrIphcNonstandardFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrIphcNonstandardFormat.setStatus('current')
if mibBuilder.loadTexts: hwFrIphcNonstandardFormat.setDescription("Indicates nonstandard-format compressing is enabled or disabled. By default, don't support nonstandard-format while compressing. true: support nonstandard-format while compressing. false: don't support nonstandard-format while compressing.")
hwFrIphcTcpInclude = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrIphcTcpInclude.setStatus('current')
if mibBuilder.loadTexts: hwFrIphcTcpInclude.setDescription('Indicates TCP header compression is enabled or disabled. By default, exclude TCP header compression while compressing RTP. true: include TCP header compression while compressing RTP. false: exclude TCP header compression while compressing RTP.')
hwFrInarpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrInarpEnable.setStatus('current')
if mibBuilder.loadTexts: hwFrInarpEnable.setDescription('Indicates inverse address resolution protocol is enabled or disabled. By default, inverse address resolution protocol is enabled. true: inverse address resolution protocol is enabled. false: inverse address resolution protocol is disabled.')
hwFrIphcTcpConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(3, 255), ValueRangeConstraint(256, 256), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrIphcTcpConnection.setStatus('current')
if mibBuilder.loadTexts: hwFrIphcTcpConnection.setDescription('Indicates the number of tcp compression connections. 256 is a valid connection number, get 256 when IPHC is enabled. Get 65535 when IPHC is disabled. Range: 3-255 Default: 256 Unit: count')
hwFrIphcRtpConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(3, 255), ValueRangeConstraint(256, 256), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrIphcRtpConnection.setStatus('current')
if mibBuilder.loadTexts: hwFrIphcRtpConnection.setDescription('Indicates the number of rtp compression connections. 256 is a valid connection number, get 256 when IPHC is enabled. Get 65535 when IPHC is disabled. Range: 3-255 Default: 256 Unit: count')
hwFrPvcTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 2), )
if mibBuilder.loadTexts: hwFrPvcTable.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcTable.setDescription('This table is used to indicate the PVC for the Fr interface. The index of this table are hwFrPvcIfIndex and hwFrPvcDlciNumber.')
hwFrPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 2, 1), ).setIndexNames((0, "HUAWEI-FR-MIB", "hwFrPvcIfIndex"), (0, "HUAWEI-FR-MIB", "hwFrPvcDlciNumber"))
if mibBuilder.loadTexts: hwFrPvcEntry.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcEntry.setDescription('This table is used to indicate the PVC for the Fr interface. The index of this entry are hwFrPvcIfIndex and hwFrPvcDlciNumber.')
hwFrPvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwFrPvcIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcIfIndex.setDescription('Indicates the interface index.')
hwFrPvcDlciNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1022))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcDlciNumber.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcDlciNumber.setDescription('Indicates the Dlci number.')
hwFrPvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcState.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcState.setDescription('Indicates the state of the PVC. Options: 1.inactive(1) - inactive 2.active(2) - active')
hwFrPvcInarpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcInarpEnable.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcInarpEnable.setDescription('Indicates the inarp is enabled or disabled. By default, the inarp of the PVC is enabled. true: enable inarp. false: disable inarp.')
hwFrPvcGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 3), )
if mibBuilder.loadTexts: hwFrPvcGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupTable.setDescription('This table is used to indicate the pvc-group on the interface. The index of this table are hwFrPvcGroupIfIndex and hwFrPvcGroupName.')
hwFrPvcGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 3, 1), ).setIndexNames((0, "HUAWEI-FR-MIB", "hwFrPvcGroupIfIndex"), (0, "HUAWEI-FR-MIB", "hwFrPvcGroupName"))
if mibBuilder.loadTexts: hwFrPvcGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupEntry.setDescription('This table is used to indicate the pvc-group on the interface. The index of this entry are hwFrPvcGroupIfIndex and hwFrPvcGroupName.')
hwFrPvcGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwFrPvcGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupIfIndex.setDescription('Indicates the interface index.')
hwFrPvcGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcGroupName.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupName.setDescription('Indicates the name of the pvc-group. The name is a string of 1 to 16 characters. Only support visible characters.')
hwFrPvcGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcGroupState.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupState.setDescription('Indicates the state of a pvc-group. Options: 1.inactive(1) - inactive 2.active(2) - active')
hwFrPvcGroupTosType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("precedence", 2), ("dscp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcGroupTosType.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupTosType.setDescription('Indicates the TOS type of a pvc-group. Options: 1.none(1) - none 2.precedence(2) - precedence 3.dscp(3) - DSCP')
hwFrPvcGroupInArpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcGroupInArpEnable.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupInArpEnable.setDescription('Indicates inarp is enabled or disabled. By default, the inarp of the pvc-group is enabled. true: enable inarp. false: disable inarp.')
hwFrPvcGroupMemTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 4), )
if mibBuilder.loadTexts: hwFrPvcGroupMemTable.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMemTable.setDescription('This table is used to indicate the member of the pvc-group. The index of this table are hwFrPvcGroupMemIfIndex, hwFrPvcGroupMemPvcGroupName and hwFrPvcGroupMemDlciNumber.')
hwFrPvcGroupMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 4, 1), ).setIndexNames((0, "HUAWEI-FR-MIB", "hwFrPvcGroupMemIfIndex"), (0, "HUAWEI-FR-MIB", "hwFrPvcGroupMemPvcGroupName"), (0, "HUAWEI-FR-MIB", "hwFrPvcGroupMemDlciNumber"))
if mibBuilder.loadTexts: hwFrPvcGroupMemEntry.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMemEntry.setDescription('This table is used to indicate the member of the pvc-group. The index of this entry are hwFrPvcGroupMemIfIndex, hwFrPvcGroupMemPvcGroupName and hwFrPvcGroupMemDlciNumber.')
hwFrPvcGroupMemIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwFrPvcGroupMemIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMemIfIndex.setDescription('Indicates the interface index.')
hwFrPvcGroupMemPvcGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcGroupMemPvcGroupName.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMemPvcGroupName.setDescription('Indicates the name of the pvc-group. The name is a string of 1 to 16 characters. Only support visible characters.')
hwFrPvcGroupMemDlciNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1022))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcGroupMemDlciNumber.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMemDlciNumber.setDescription('Indicates the DLCI of the PVC.')
hwFrPvcGroupMemTosType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("precedence", 2), ("dscp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcGroupMemTosType.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMemTosType.setDescription('Indicates the TOS type of a PVC belong to the pvc-group. Options: 1.none(1) - none 2.precedence(2) - precedence 3.dscp(3) - DSCP')
hwFrPvcGroupMemDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcGroupMemDefault.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMemDefault.setDescription('Indicates the TOS value of the PVC whether is default or not. true: default TOS value. false: none default TOS value.')
hwFrPvcGroupMemMinGrade = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcGroupMemMinGrade.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMemMinGrade.setDescription('Indicates the minimum value of the TOS with one member PVC. If the TOS type is precedence, the maximum value cannot be larger than 7. Get 255 when this value is not configed.')
hwFrPvcGroupMemMaxGrade = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcGroupMemMaxGrade.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMemMaxGrade.setDescription('Indicates the maximum value of the TOS with one member PVC. If the TOS type is precedence, the maximum value cannot be larger than 7. Get 255 when this value is not configed.')
hwFrPvcGroupMapIpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 5), )
if mibBuilder.loadTexts: hwFrPvcGroupMapIpTable.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMapIpTable.setDescription('This table is used to indicate the bridge mapping on the pvc-group. The index of this table are hwFrPvcGroupMapIpIfIndex, hwFrPvcGroupMapIpName and hwFrPvcGroupMapIpIpAddr.')
hwFrPvcGroupMapIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 5, 1), ).setIndexNames((0, "HUAWEI-FR-MIB", "hwFrPvcGroupMapIpIfIndex"), (0, "HUAWEI-FR-MIB", "hwFrPvcGroupMapIpName"), (0, "HUAWEI-FR-MIB", "hwFrPvcGroupMapIpIpAddr"))
if mibBuilder.loadTexts: hwFrPvcGroupMapIpEntry.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMapIpEntry.setDescription('This table is used to indicate the bridge mapping on the pvc-group. The index of this entry are hwFrPvcGroupMapIpIfIndex, hwFrPvcGroupMapIpName and hwFrPvcGroupMapIpIpAddr.')
hwFrPvcGroupMapIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwFrPvcGroupMapIpIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMapIpIfIndex.setDescription('Indicates the interface index.')
hwFrPvcGroupMapIpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcGroupMapIpName.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMapIpName.setDescription('Indicates the name of the pvc-group. The name is a string of 1 to 16 characters.')
hwFrPvcGroupMapIpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcGroupMapIpIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMapIpIpAddr.setDescription('Indicates the peer IP address mapped to the pvc-group. Get 0.0.0.0 when the map is default map.')
hwFrPvcGroupMapIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcGroupMapIpMask.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMapIpMask.setDescription('Indicates the IP address mask mapped to the pvc-group. Get 255.255.255.255 when the map is default map.')
hwFrPvcGroupMapIpEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonstandard", 1), ("ietf", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcGroupMapIpEncapType.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMapIpEncapType.setDescription('Indicates the encapsulation type of the PVC mapped by pvc-group. 1.nonstandard(1) - nonstandard encapsulation 2.ietf(2) - RFC1490 encapsulation')
hwFrPvcGroupMapIpBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 5, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcGroupMapIpBroadcast.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMapIpBroadcast.setDescription('Indicates sending broadcast packets is enabled or disabled. By default, sending broadcast packets is disabled. true: enable sending broadcast packets. false: disable sending broadcast packets.')
hwFrPvcGroupMapIpDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 5, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrPvcGroupMapIpDefault.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMapIpDefault.setDescription('Indicates the map is default map or not. By default, the map is not default map. true: the map is default map. false: the map is not default map.')
hwFrMapIpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 6), )
if mibBuilder.loadTexts: hwFrMapIpTable.setStatus('current')
if mibBuilder.loadTexts: hwFrMapIpTable.setDescription('This table is used to indicate the static address mapping for a PVC. The index of this table are hwFrMapIpIfIndex, hwFrMapIpDlciNumber and hwFrMapIpAddress.')
hwFrMapIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 6, 1), ).setIndexNames((0, "HUAWEI-FR-MIB", "hwFrMapIpIfIndex"), (0, "HUAWEI-FR-MIB", "hwFrMapIpDlciNumber"), (0, "HUAWEI-FR-MIB", "hwFrMapIpAddress"))
if mibBuilder.loadTexts: hwFrMapIpEntry.setStatus('current')
if mibBuilder.loadTexts: hwFrMapIpEntry.setDescription('This table is used to indicate the static address mapping for a PVC. The index of this entry are hwFrMapIpIfIndex, hwFrMapIpDlciNumber and hwFrMapIpAddress.')
hwFrMapIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwFrMapIpIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwFrMapIpIfIndex.setDescription('Indicates the interface index.')
hwFrMapIpDlciNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1022))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrMapIpDlciNumber.setStatus('current')
if mibBuilder.loadTexts: hwFrMapIpDlciNumber.setDescription('Indicates the Dlci number.')
hwFrMapIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrMapIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwFrMapIpAddress.setDescription('Indicates the peer IP address mapped to the PVC. Get 0.0.0.0 when the map is default map.')
hwFrMapIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrMapIpMask.setStatus('current')
if mibBuilder.loadTexts: hwFrMapIpMask.setDescription('Indicates the IP address mask. Get 255.255.255.255 when the map is default map.')
hwFrMapIpBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 6, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrMapIpBroadcast.setStatus('current')
if mibBuilder.loadTexts: hwFrMapIpBroadcast.setDescription('Indicates sending broadcast packets is enabled or disabled. By default, sending broadcast packets is disabled. true: enable sending broadcast packets. false: disable sending broadcast packets.')
hwFrMapIpEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonstandard", 1), ("ietf", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrMapIpEncapType.setStatus('current')
if mibBuilder.loadTexts: hwFrMapIpEncapType.setDescription('Indicates the encapsulation type of map. Option: 1.nonstandard(1) - nonstandard encapsulation 2.ietf(2) - RFC1490 encapsulation')
hwFrMapIpDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 6, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrMapIpDefault.setStatus('current')
if mibBuilder.loadTexts: hwFrMapIpDefault.setDescription('Indicates the map is default map or not. By default, the map is not default map. true: the map is default map. false: the map is not default map.')
hwFrMapIpFrf9Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 6, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrMapIpFrf9Enable.setStatus('current')
if mibBuilder.loadTexts: hwFrMapIpFrf9Enable.setDescription('Indicates frf9 on the map is enabled or disabled. By default, payload data compression is disabled. true: enable payload data compression. false: disable payload data compression.')
hwFrMapIpIphcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 6, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrMapIpIphcEnable.setStatus('current')
if mibBuilder.loadTexts: hwFrMapIpIphcEnable.setDescription('Indicates iphc on the map is enabled or disabled. By default, compress IP/UDP/RTP head with iphc-compression is disabled. true: enable compress IP/UDP/RTP head with iphc-compression. false: disable compress IP/UDP/RTP head with iphc-compression.')
hwFrMapIpRtpConnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(3, 256), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrMapIpRtpConnNumber.setStatus('current')
if mibBuilder.loadTexts: hwFrMapIpRtpConnNumber.setDescription('Indicates the number of rtp compression connections. Get 65535 when IPHC is disabled. Range: 3-256 Default: 65535 Unit: count')
hwFrMapPppTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 7), )
if mibBuilder.loadTexts: hwFrMapPppTable.setStatus('current')
if mibBuilder.loadTexts: hwFrMapPppTable.setDescription('This table is used to indicate the PPPoFR mapping on the PVC. The index of this table are hwFrMapPppIfIndex and hwFrMapPppDlciNumber.')
hwFrMapPppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 7, 1), ).setIndexNames((0, "HUAWEI-FR-MIB", "hwFrMapPppIfIndex"), (0, "HUAWEI-FR-MIB", "hwFrMapPppDlciNumber"))
if mibBuilder.loadTexts: hwFrMapPppEntry.setStatus('current')
if mibBuilder.loadTexts: hwFrMapPppEntry.setDescription('This table is used to indicate the PPPoFR mapping on the PVC. The index of this entry are hwFrMapPppIfIndex and hwFrMapPppDlciNumber.')
hwFrMapPppIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwFrMapPppIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwFrMapPppIfIndex.setDescription('Indicates the interface index.')
hwFrMapPppDlciNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1022))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrMapPppDlciNumber.setStatus('current')
if mibBuilder.loadTexts: hwFrMapPppDlciNumber.setDescription('Indicates the DLCI of the PVC mapped by PPP.')
hwFrMapPppVTIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrMapPppVTIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwFrMapPppVTIfIndex.setDescription('Indicates the index of the VT interface.')
hwFrMapPppState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrMapPppState.setStatus('current')
if mibBuilder.loadTexts: hwFrMapPppState.setDescription('Indicates the state of the PPP map. Options: 1.inactive(1) - inactive 2.active(2) - active')
hwFrMapBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 8), )
if mibBuilder.loadTexts: hwFrMapBridgeTable.setStatus('current')
if mibBuilder.loadTexts: hwFrMapBridgeTable.setDescription('This table is used to indicate the bridge mapping on the PVC. The index of this table are hwFrMapBridgeIfIndex and hwFrMapBridgeDlciNumber.')
hwFrMapBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 8, 1), ).setIndexNames((0, "HUAWEI-FR-MIB", "hwFrMapBridgeIfIndex"), (0, "HUAWEI-FR-MIB", "hwFrMapBridgeDlciNumber"))
if mibBuilder.loadTexts: hwFrMapBridgeEntry.setStatus('current')
if mibBuilder.loadTexts: hwFrMapBridgeEntry.setDescription('This table is used to indicate the bridge mapping on the PVC. The index of this entry are hwFrMapBridgeIfIndex and hwFrMapBridgeDlciNumber.')
hwFrMapBridgeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwFrMapBridgeIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwFrMapBridgeIfIndex.setDescription('Indicates the interface index.')
hwFrMapBridgeDlciNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1022))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrMapBridgeDlciNumber.setStatus('current')
if mibBuilder.loadTexts: hwFrMapBridgeDlciNumber.setDescription('Indicates the DLCI of the PVC mapped by bridge.')
hwFrMapBridgeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrMapBridgeState.setStatus('current')
if mibBuilder.loadTexts: hwFrMapBridgeState.setDescription('Indicates the state of the PVC mapped by bridge. Options: 1.inactive(1) - inactive 2.active(2) - active')
hwFrConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 2))
hwFrCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 2, 1))
hwFrCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 2, 1, 1)).setObjects(("HUAWEI-FR-MIB", "hwFrObjectGroup"), ("HUAWEI-FR-MIB", "hwFrPvcObjectGroup"), ("HUAWEI-FR-MIB", "hwFrPvcGroupObjectGroup"), ("HUAWEI-FR-MIB", "hwFrPvcGroupMemObjectGroup"), ("HUAWEI-FR-MIB", "hwFrPvcGroupMapIpObjectGroup"), ("HUAWEI-FR-MIB", "hwFrMapIpObjectGroup"), ("HUAWEI-FR-MIB", "hwFrMapPppObjectGroup"), ("HUAWEI-FR-MIB", "hwFrMapBridgeObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwFrCompliance = hwFrCompliance.setStatus('current')
if mibBuilder.loadTexts: hwFrCompliance.setDescription('The compliance statement for systems supporting the HUAWEI-Fr-MIB.')
hwFrGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 2, 2))
hwFrObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 2, 2, 1)).setObjects(("HUAWEI-FR-MIB", "hwFrIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwFrObjectGroup = hwFrObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwFrObjectGroup.setDescription('The fr attribute group.')
hwFrPvcObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 2, 2, 2)).setObjects(("HUAWEI-FR-MIB", "hwFrPvcIfIndex"), ("HUAWEI-FR-MIB", "hwFrPvcDlciNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwFrPvcObjectGroup = hwFrPvcObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcObjectGroup.setDescription('The fr PVC attribute group.')
hwFrPvcGroupObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 2, 2, 3)).setObjects(("HUAWEI-FR-MIB", "hwFrPvcGroupIfIndex"), ("HUAWEI-FR-MIB", "hwFrPvcGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwFrPvcGroupObjectGroup = hwFrPvcGroupObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupObjectGroup.setDescription('The fr pvc-group attribute group.')
hwFrPvcGroupMemObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 2, 2, 4)).setObjects(("HUAWEI-FR-MIB", "hwFrPvcGroupMemIfIndex"), ("HUAWEI-FR-MIB", "hwFrPvcGroupMemPvcGroupName"), ("HUAWEI-FR-MIB", "hwFrPvcGroupMemDlciNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwFrPvcGroupMemObjectGroup = hwFrPvcGroupMemObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMemObjectGroup.setDescription('The fr pvc-group member attribute group.')
hwFrPvcGroupMapIpObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 2, 2, 5)).setObjects(("HUAWEI-FR-MIB", "hwFrPvcGroupMapIpIfIndex"), ("HUAWEI-FR-MIB", "hwFrPvcGroupMapIpName"), ("HUAWEI-FR-MIB", "hwFrPvcGroupMapIpIpAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwFrPvcGroupMapIpObjectGroup = hwFrPvcGroupMapIpObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwFrPvcGroupMapIpObjectGroup.setDescription('The fr pvc-group mapping attribute group.')
hwFrMapIpObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 2, 2, 6)).setObjects(("HUAWEI-FR-MIB", "hwFrMapIpIfIndex"), ("HUAWEI-FR-MIB", "hwFrMapIpAddress"), ("HUAWEI-FR-MIB", "hwFrMapIpDlciNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwFrMapIpObjectGroup = hwFrMapIpObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwFrMapIpObjectGroup.setDescription('The fr ip mapping attribute group.')
hwFrMapPppObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 2, 2, 7)).setObjects(("HUAWEI-FR-MIB", "hwFrMapPppIfIndex"), ("HUAWEI-FR-MIB", "hwFrMapPppDlciNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwFrMapPppObjectGroup = hwFrMapPppObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwFrMapPppObjectGroup.setDescription('The fr ppp mapping attribute group.')
hwFrMapBridgeObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 168, 2, 2, 8)).setObjects(("HUAWEI-FR-MIB", "hwFrMapBridgeIfIndex"), ("HUAWEI-FR-MIB", "hwFrMapBridgeDlciNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwFrMapBridgeObjectGroup = hwFrMapBridgeObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwFrMapBridgeObjectGroup.setDescription('The fr bridge mapping attribute group.')
mibBuilder.exportSymbols("HUAWEI-FR-MIB", hwFrMapIpEncapType=hwFrMapIpEncapType, hwFrLmiN393DceValue=hwFrLmiN393DceValue, hwFrPvcGroupMemTable=hwFrPvcGroupMemTable, hwFrMapIpIphcEnable=hwFrMapIpIphcEnable, hwFrPvcGroupMemMaxGrade=hwFrPvcGroupMemMaxGrade, hwFrMapPppDlciNumber=hwFrMapPppDlciNumber, hwFrEntry=hwFrEntry, hwFrMIB=hwFrMIB, hwFrMapIpBroadcast=hwFrMapIpBroadcast, hwFrCompliances=hwFrCompliances, hwFrMapIpFrf9Enable=hwFrMapIpFrf9Enable, hwFrPvcGroupEntry=hwFrPvcGroupEntry, hwFrMapIpEntry=hwFrMapIpEntry, hwFrMapIpDlciNumber=hwFrMapIpDlciNumber, hwFrPvcGroupState=hwFrPvcGroupState, hwFrPvcGroupMapIpEncapType=hwFrPvcGroupMapIpEncapType, hwFrPvcGroupMemEntry=hwFrPvcGroupMemEntry, hwFrPvcGroupMapIpObjectGroup=hwFrPvcGroupMapIpObjectGroup, hwFrCompliance=hwFrCompliance, hwFrPvcGroupName=hwFrPvcGroupName, hwFrPvcGroupMemMinGrade=hwFrPvcGroupMemMinGrade, hwFrMapPppState=hwFrMapPppState, hwFrMapBridgeTable=hwFrMapBridgeTable, hwFrPvcGroupMemObjectGroup=hwFrPvcGroupMemObjectGroup, hwFrLmiT392DceValue=hwFrLmiT392DceValue, hwFrPvcTable=hwFrPvcTable, hwFrLmiN391DteValue=hwFrLmiN391DteValue, hwFrMapIpDefault=hwFrMapIpDefault, hwFrIphcTcpInclude=hwFrIphcTcpInclude, PYSNMP_MODULE_ID=hwFrMIB, hwFrConformance=hwFrConformance, hwFrPvcEntry=hwFrPvcEntry, hwFrLmiN393DteValue=hwFrLmiN393DteValue, hwFrMapIpRtpConnNumber=hwFrMapIpRtpConnNumber, hwFrObjects=hwFrObjects, hwFrPvcGroupTable=hwFrPvcGroupTable, hwFrPvcGroupObjectGroup=hwFrPvcGroupObjectGroup, hwFrPvcObjectGroup=hwFrPvcObjectGroup, hwFrPvcInarpEnable=hwFrPvcInarpEnable, hwFrPvcGroupInArpEnable=hwFrPvcGroupInArpEnable, hwFrPvcGroupMapIpName=hwFrPvcGroupMapIpName, hwFrPvcGroupMapIpEntry=hwFrPvcGroupMapIpEntry, hwFrEncapType=hwFrEncapType, hwFrLmiType=hwFrLmiType, hwFrPvcGroupMemIfIndex=hwFrPvcGroupMemIfIndex, hwFrPvcGroupMapIpIfIndex=hwFrPvcGroupMapIpIfIndex, hwFrPvcGroupMemDlciNumber=hwFrPvcGroupMemDlciNumber, hwFrIfType=hwFrIfType, hwFrPvcGroupMemTosType=hwFrPvcGroupMemTosType, hwFrPvcGroupMapIpMask=hwFrPvcGroupMapIpMask, hwFrMapPppObjectGroup=hwFrMapPppObjectGroup, hwFrInarpEnable=hwFrInarpEnable, hwFrPvcGroupMemPvcGroupName=hwFrPvcGroupMemPvcGroupName, hwFrMapIpAddress=hwFrMapIpAddress, hwFrGroups=hwFrGroups, hwFrPvcIfIndex=hwFrPvcIfIndex, hwFrPvcGroupMapIpTable=hwFrPvcGroupMapIpTable, hwFrPvcGroupTosType=hwFrPvcGroupTosType, hwFrLmiN392DceValue=hwFrLmiN392DceValue, hwFrIphcRtpConnection=hwFrIphcRtpConnection, hwFrMapBridgeEntry=hwFrMapBridgeEntry, hwFrMapBridgeDlciNumber=hwFrMapBridgeDlciNumber, hwFrPvcState=hwFrPvcState, hwFrIphcNonstandardFormat=hwFrIphcNonstandardFormat, hwFrLmiN392DteValue=hwFrLmiN392DteValue, hwFrPvcGroupMemDefault=hwFrPvcGroupMemDefault, hwFrMapPppVTIfIndex=hwFrMapPppVTIfIndex, hwFrMapBridgeState=hwFrMapBridgeState, hwFrIphcEnable=hwFrIphcEnable, hwFrIphcTcpConnection=hwFrIphcTcpConnection, hwFrMapPppTable=hwFrMapPppTable, hwFrMapBridgeIfIndex=hwFrMapBridgeIfIndex, hwFrLmiT391DteValue=hwFrLmiT391DteValue, hwFrPvcGroupIfIndex=hwFrPvcGroupIfIndex, hwFrPvcGroupMapIpIpAddr=hwFrPvcGroupMapIpIpAddr, hwFrMapBridgeObjectGroup=hwFrMapBridgeObjectGroup, hwFrMapIpObjectGroup=hwFrMapIpObjectGroup, hwFrPvcDlciNumber=hwFrPvcDlciNumber, hwFrMapPppIfIndex=hwFrMapPppIfIndex, hwFrMapIpIfIndex=hwFrMapIpIfIndex, hwFrIfIndex=hwFrIfIndex, hwFrMapIpTable=hwFrMapIpTable, hwFrMapPppEntry=hwFrMapPppEntry, hwFrTable=hwFrTable, hwFrPvcGroupMapIpBroadcast=hwFrPvcGroupMapIpBroadcast, hwFrObjectGroup=hwFrObjectGroup, hwFrMapIpMask=hwFrMapIpMask, hwFrPvcGroupMapIpDefault=hwFrPvcGroupMapIpDefault)
