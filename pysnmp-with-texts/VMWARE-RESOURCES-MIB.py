#
# PySNMP MIB module VMWARE-RESOURCES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VMWARE-RESOURCES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:34:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, Bits, ModuleIdentity, Unsigned32, ObjectIdentity, Counter32, MibIdentifier, Integer32, NotificationType, iso, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "Bits", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "Counter32", "MibIdentifier", "Integer32", "NotificationType", "iso", "Gauge32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
vmwResources, = mibBuilder.importSymbols("VMWARE-ROOT-MIB", "vmwResources")
vmwCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 3, 1))
numCPUs = MibScalar((1, 3, 6, 1, 4, 1, 6876, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numCPUs.setStatus('mandatory')
if mibBuilder.loadTexts: numCPUs.setDescription('Number of physical CPUs on the system.')
cpuTable = MibTable((1, 3, 6, 1, 4, 1, 6876, 3, 1, 2), )
if mibBuilder.loadTexts: cpuTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpuTable.setDescription('CPU Usage table by virtual machine.')
cpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6876, 3, 1, 2, 1), ).setIndexNames((0, "VMWARE-RESOURCES-MIB", "cpuVMID"))
if mibBuilder.loadTexts: cpuEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpuEntry.setDescription('A record for CPU usage by a single virtual machine.')
cpuVMID = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuVMID.setStatus('mandatory')
if mibBuilder.loadTexts: cpuVMID.setDescription('ID allocated to running vm by the vmkernel.')
cpuShares = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuShares.setStatus('mandatory')
if mibBuilder.loadTexts: cpuShares.setDescription('Share of CPU allocated to vm by vmkernel.')
cpuUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtil.setStatus('mandatory')
if mibBuilder.loadTexts: cpuUtil.setDescription('Time the virtual machine has been running on the CPU (seconds).')
vmwMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 6876, 3, 2))
memSize = MibScalar((1, 3, 6, 1, 4, 1, 6876, 3, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSize.setStatus('mandatory')
if mibBuilder.loadTexts: memSize.setDescription('Amount of physical memory present on machine (KB).')
memCOS = MibScalar((1, 3, 6, 1, 4, 1, 6876, 3, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memCOS.setStatus('mandatory')
if mibBuilder.loadTexts: memCOS.setDescription('Amount of physical memory used by the console OS (KB).')
memAvail = MibScalar((1, 3, 6, 1, 4, 1, 6876, 3, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memAvail.setStatus('mandatory')
if mibBuilder.loadTexts: memAvail.setDescription('Amount of physical memory available/free (KB).')
memTable = MibTable((1, 3, 6, 1, 4, 1, 6876, 3, 2, 4), )
if mibBuilder.loadTexts: memTable.setStatus('mandatory')
if mibBuilder.loadTexts: memTable.setDescription('Table of memory usage by virtual machine.')
memEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6876, 3, 2, 4, 1), ).setIndexNames((0, "VMWARE-RESOURCES-MIB", "memVMID"))
if mibBuilder.loadTexts: memEntry.setStatus('mandatory')
if mibBuilder.loadTexts: memEntry.setDescription('A record for memory usage by a single virtual machine.')
memVMID = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memVMID.setStatus('mandatory')
if mibBuilder.loadTexts: memVMID.setDescription('ID allocated to running vm by the vmkernel.')
memShares = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 2, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memShares.setStatus('mandatory')
if mibBuilder.loadTexts: memShares.setDescription('Shares of memory allocated to vm by vmkernel.')
memConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 2, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memConfigured.setStatus('mandatory')
if mibBuilder.loadTexts: memConfigured.setDescription('Amount of memory the vm was configured with. (KB)')
memUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 2, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memUtil.setStatus('mandatory')
if mibBuilder.loadTexts: memUtil.setDescription('Amount of memory utilized by the vm. (KB; instantaneous)')
vmwHBATable = MibTable((1, 3, 6, 1, 4, 1, 6876, 3, 3), )
if mibBuilder.loadTexts: vmwHBATable.setStatus('mandatory')
if mibBuilder.loadTexts: vmwHBATable.setDescription('Disk adapter and target information table.')
hbaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6876, 3, 3, 1), ).setIndexNames((0, "VMWARE-RESOURCES-MIB", "hbaIdx"))
if mibBuilder.loadTexts: hbaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hbaEntry.setDescription('A record for a single hba on the machine.')
hbaIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hbaIdx.setStatus('mandatory')
if mibBuilder.loadTexts: hbaIdx.setDescription('Index for HBA table.')
hbaName = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hbaName.setStatus('mandatory')
if mibBuilder.loadTexts: hbaName.setDescription('String describing the disk. Format: <devname#>:<tgt>:<lun> ')
hbaVMID = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hbaVMID.setStatus('mandatory')
if mibBuilder.loadTexts: hbaVMID.setDescription('ID assigned to running vm by the vmkernel.')
diskShares = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskShares.setStatus('mandatory')
if mibBuilder.loadTexts: diskShares.setDescription('Share of disk bandwidth allocated to this vm.')
numReads = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numReads.setStatus('mandatory')
if mibBuilder.loadTexts: numReads.setDescription('Number of reads to this disk since disk module was loaded.')
kbRead = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbRead.setStatus('mandatory')
if mibBuilder.loadTexts: kbRead.setDescription('Kilobytes read from this disk since disk module was loaded.')
numWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numWrites.setStatus('mandatory')
if mibBuilder.loadTexts: numWrites.setDescription('Number of writes to this disk since disk module was loaded.')
kbWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbWritten.setStatus('mandatory')
if mibBuilder.loadTexts: kbWritten.setDescription('Kilobytes written to this disk since disk module was loaded.')
vmwNetTable = MibTable((1, 3, 6, 1, 4, 1, 6876, 3, 4), )
if mibBuilder.loadTexts: vmwNetTable.setStatus('mandatory')
if mibBuilder.loadTexts: vmwNetTable.setDescription('Network adapter statistics.')
netEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1), ).setIndexNames((0, "VMWARE-RESOURCES-MIB", "netIdx"))
if mibBuilder.loadTexts: netEntry.setStatus('mandatory')
if mibBuilder.loadTexts: netEntry.setDescription('A record for a single nic on the machine.')
netIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netIdx.setStatus('mandatory')
if mibBuilder.loadTexts: netIdx.setDescription('Index for net table.')
netName = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netName.setStatus('mandatory')
if mibBuilder.loadTexts: netName.setDescription('String describing the network adapter. Format: vmnic*')
netVMID = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netVMID.setStatus('mandatory')
if mibBuilder.loadTexts: netVMID.setDescription('ID assigned to running vm by the vmkernel.')
ifAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ifAddr.setDescription("MAC address of vm's virtual NIC.")
netShares = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1, 5), Gauge32())
if mibBuilder.loadTexts: netShares.setStatus('mandatory')
if mibBuilder.loadTexts: netShares.setDescription('Share of net bandwidth allocated to this vm. (NOT IMPLEMENTED)')
pktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktsTx.setStatus('mandatory')
if mibBuilder.loadTexts: pktsTx.setDescription('Number of pkts transmitted on this NIC since network module was loaded. See SMIv2 version for 64 bit packets')
kbTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbTx.setStatus('mandatory')
if mibBuilder.loadTexts: kbTx.setDescription('Kilobytes sent from this NIC since network module was loaded. See SMIv2 version for 64 bit packets.')
pktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktsRx.setStatus('mandatory')
if mibBuilder.loadTexts: pktsRx.setDescription('Number of pkts received on this NIC since network module was loaded. See SMIv2 version for 64 bit packets.')
kbRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6876, 3, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kbRx.setStatus('mandatory')
if mibBuilder.loadTexts: kbRx.setDescription('Kilobytes received on this NIC since network module was loaded. See SMIv2 version for 64 bit packets.')
mibBuilder.exportSymbols("VMWARE-RESOURCES-MIB", kbWritten=kbWritten, pktsRx=pktsRx, kbTx=kbTx, cpuEntry=cpuEntry, cpuTable=cpuTable, netVMID=netVMID, numWrites=numWrites, diskShares=diskShares, memTable=memTable, cpuShares=cpuShares, memEntry=memEntry, vmwHBATable=vmwHBATable, cpuVMID=cpuVMID, memAvail=memAvail, kbRx=kbRx, memSize=memSize, hbaIdx=hbaIdx, memUtil=memUtil, ifAddr=ifAddr, memCOS=memCOS, memConfigured=memConfigured, netShares=netShares, vmwCPU=vmwCPU, pktsTx=pktsTx, netName=netName, hbaName=hbaName, hbaVMID=hbaVMID, netEntry=netEntry, cpuUtil=cpuUtil, numCPUs=numCPUs, kbRead=kbRead, hbaEntry=hbaEntry, memVMID=memVMID, vmwMemory=vmwMemory, memShares=memShares, vmwNetTable=vmwNetTable, numReads=numReads, netIdx=netIdx)
