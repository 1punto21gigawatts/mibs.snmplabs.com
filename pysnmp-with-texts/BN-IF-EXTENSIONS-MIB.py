#
# PySNMP MIB module BN-IF-EXTENSIONS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BN-IF-EXTENSIONS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:40:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
s5IfExt, = mibBuilder.importSymbols("S5-ROOT-MIB", "s5IfExt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, NotificationType, Counter32, MibIdentifier, Gauge32, Unsigned32, Counter64, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "Counter32", "MibIdentifier", "Gauge32", "Unsigned32", "Counter64", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "Integer32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bnIfExtensionsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 1, 6, 15, 2))
bnIfExtensionsMib.setRevisions(('2013-07-26 00:00', '2011-10-05 00:00', '2011-09-16 00:00', '2004-07-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bnIfExtensionsMib.setRevisionsDescriptions(('Version 108: Added advertise40000Full to bnIfExtnAutoNegotiationExtAdv and bnIfExtnExtHwAdvCapability objects.', 'Version 107: Added bnIfExtnPoweredDeviceDetectType new values', 'Version 106: Added advertise10000Full to bnIfExtnAutoNegotiationExtAdv and bnIfExtnExtHwAdvCapability objects', 'Version 105: Added version info',))
if mibBuilder.loadTexts: bnIfExtensionsMib.setLastUpdated('201307260000Z')
if mibBuilder.loadTexts: bnIfExtensionsMib.setOrganization('Avaya')
if mibBuilder.loadTexts: bnIfExtensionsMib.setContactInfo('Avaya')
if mibBuilder.loadTexts: bnIfExtensionsMib.setDescription("Interface Extension MIB Copyright 1997 - 2013 Avaya, Inc. All rights reserved. This Bay Networks SNMP Management Information Base Specification (Specification) embodies Bay Networks' confidential and proprietary intellectual property. Bay Networks retains all title and ownership in the Specification, including any revisions. This Specification is supplied 'AS IS,' and Bay Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
bnIfExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 6, 15, 1))
bnIfExtnTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 15, 1, 1), )
if mibBuilder.loadTexts: bnIfExtnTable.setStatus('current')
if mibBuilder.loadTexts: bnIfExtnTable.setDescription('A list of interface entries. The number of entries is given by the value of ifNumber.')
bnIfExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 15, 1, 1, 1), ).setIndexNames((0, "BN-IF-EXTENSIONS-MIB", "bnIfExtnIndex"))
if mibBuilder.loadTexts: bnIfExtnEntry.setStatus('current')
if mibBuilder.loadTexts: bnIfExtnEntry.setDescription('An interface entry containing objects at the subnetwork layer and below for a particular interface.')
bnIfExtnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 15, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnIfExtnIndex.setStatus('current')
if mibBuilder.loadTexts: bnIfExtnIndex.setDescription('A unique value for each interface corresponding to the ifIndex value for the same interface.')
bnIfExtnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 15, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnIfExtnSlot.setStatus('current')
if mibBuilder.loadTexts: bnIfExtnSlot.setDescription('The unit number associated with this particular interface.')
bnIfExtnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 15, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnIfExtnPort.setStatus('current')
if mibBuilder.loadTexts: bnIfExtnPort.setDescription('The port number within a unit or slot.')
bnIfExtnIsPortShared = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 15, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portShared", 1), ("portNotShared", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnIfExtnIsPortShared.setStatus('current')
if mibBuilder.loadTexts: bnIfExtnIsPortShared.setDescription("Indicates whether the port is considered a 'shared' port or not. Multiple physical ports that are logically represented as a single port are considered shared. Only one of the physical ports is active at any given time.")
bnIfExtnPortActiveComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 15, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fixedPort", 1), ("gbicPort", 2), ("mdaPort", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bnIfExtnPortActiveComponent.setStatus('current')
if mibBuilder.loadTexts: bnIfExtnPortActiveComponent.setDescription("Indicates which physical port component is currently active for ports that are 'shared'. The ability to set this object and thus specify the active physical component of a single logical port is implmentation dependent. This object will be read-only is this capability is not supported.")
bnIfExtnPoweredDeviceDetectType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 15, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("compliantWith802dot3af", 1), ("compliantWith802dot3afAndLegacySupport", 2), ("compliantWith802dot3at", 3), ("compliantWith802dot3atAndLegacySupport", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bnIfExtnPoweredDeviceDetectType.setStatus('current')
if mibBuilder.loadTexts: bnIfExtnPoweredDeviceDetectType.setDescription('This object is used to specify the mechanism used to detect powered ethernet devices attached to a powered ethernet port. This object should only be instantiated for values of ifIndex that represent ports that support powered ethernet.')
bnIfExtnAutoNegotiationExtAdv = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 15, 1, 1, 1, 7), Bits().clone(namedValues=NamedValues(("advertise10Half", 0), ("advertise10Full", 1), ("advertise100Half", 2), ("advertise100Full", 3), ("advertise1000Half", 4), ("advertise1000Full", 5), ("advertisePauseFrame", 6), ("advertiseAsymmPauseFrame", 7), ("advertise10000Full", 8), ("advertise40000Full", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bnIfExtnAutoNegotiationExtAdv.setStatus('current')
if mibBuilder.loadTexts: bnIfExtnAutoNegotiationExtAdv.setDescription('This object is used to specify the port speed and duplex abilities to be advertised during link negotiation. bit 0 - 10 half duplex advertised bit 1 - 10 full duplex advertised bit 2 - 100 half duplex advertised bit 3 - 100 full duplex advertised bit 4 - 1000 half duplex advertised bit 5 - 1000 full duplex advertised bit 6 - PAUSE frame support advertised bit 7 - Asymmetric PAUSE frame support advertised bit 8 - 10000 full duplex advertised bit 9 - 40000 full duplex advertised The abilities specified in this object are only used when auto-negotiation is enabled on the port. If all bits in this object are disabled, and auto-negotiation is enabled on the port, then the physical link process on the port will be disabled. Any change in the value of this bit map will force the PHY to restart the auto-negotiation process. This will have the same effect as physically unplugging and reattaching the cable plant attached to this port. Only capabilities present in the hardware as indicated by bnIfExtnExtHwAdvCapability can be advertised. The default value for this object will be the value of the associated instance of bnIfExtnExtHwAdvCapability.')
bnIfExtnExtHwAdvCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 15, 1, 1, 1, 8), Bits().clone(namedValues=NamedValues(("advertise10Half", 0), ("advertise10Full", 1), ("advertise100Half", 2), ("advertise100Full", 3), ("advertise1000Half", 4), ("advertise1000Full", 5), ("advertisePauseFrame", 6), ("advertiseAsymmPauseFrame", 7), ("advertise10000Full", 8), ("advertise40000Full", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnIfExtnExtHwAdvCapability.setStatus('current')
if mibBuilder.loadTexts: bnIfExtnExtHwAdvCapability.setDescription('This object indicates the port speed and duplex capabilities that hardware can actually support on a port, and which may be advertised by the port using auto-negotiation. Bit 7 tells if a port supports pause frame capabilities (for full-duplex links) as a part of the advertisement. bit 0 - 10 half duplex advertisements bit 1 - 10 full duplex advertisements bit 2 - 100 half duplex advertisements bit 3 - 100 full duplex advertisements bit 4 - 1000 half duplex advertisements bit 5 - 1000 full duplex advertisements bit 6 - PAUSE frame support advertisements bit 7 - Asymmetric PAUSE frame support advertisements bit 8 - 10000 full duplex advertisements bit 9 - 40000 full duplex advertisements If auto negotiation is not supported by the port hardware, then all bits will reflect a value of zero.')
mibBuilder.exportSymbols("BN-IF-EXTENSIONS-MIB", bnIfExtnPortActiveComponent=bnIfExtnPortActiveComponent, bnIfExtnIsPortShared=bnIfExtnIsPortShared, PYSNMP_MODULE_ID=bnIfExtensionsMib, bnIfExtnEntry=bnIfExtnEntry, bnIfExtnExtHwAdvCapability=bnIfExtnExtHwAdvCapability, bnIfExtnIndex=bnIfExtnIndex, bnIfExtnPort=bnIfExtnPort, bnIfExtnAutoNegotiationExtAdv=bnIfExtnAutoNegotiationExtAdv, bnIfExtnSlot=bnIfExtnSlot, bnIfExtensionsMib=bnIfExtensionsMib, bnIfExtensions=bnIfExtensions, bnIfExtnPoweredDeviceDetectType=bnIfExtnPoweredDeviceDetectType, bnIfExtnTable=bnIfExtnTable)
