#
# PySNMP MIB module CISCO-CACHE-ENGINE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CACHE-ENGINE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, Unsigned32, ObjectIdentity, NotificationType, Bits, TimeTicks, ModuleIdentity, Integer32, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "ObjectIdentity", "NotificationType", "Bits", "TimeTicks", "ModuleIdentity", "Integer32", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32", "Gauge32")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ciscoCacheEngineMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 39))
if mibBuilder.loadTexts: ciscoCacheEngineMIB.setLastUpdated('9811041200Z')
if mibBuilder.loadTexts: ciscoCacheEngineMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCacheEngineMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 408 526 4000 E-mail: cs-webcache@cisco.com')
if mibBuilder.loadTexts: ciscoCacheEngineMIB.setDescription('The MIB module for the Cisco Cache Engine from Cisco Systems, Inc.')
ciscoCacheEngineMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1))
ciscoCacheEngineConf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1))
cceConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1))
cceTuningGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2))
cceAccessGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 3))
cceReportGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4))
cceStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5))
cceHardwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 6))
cceFarm = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 1))
cceBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 2))
cceDns = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 3))
cceIcpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4))
cceIcpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 5))
cceProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 6))
cceTime = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 7))
cceCacheFarm = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 1))
cceFreshness = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2))
cceTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3))
cceUrlFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 3, 1))
cceEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1))
cceLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 2))
cceDiagDump = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1))
cceIms = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2))
ccePerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3))
cceRequests = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4))
cceSavings = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 5))
cceUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6))
cceInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 6, 1))
cceFarmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 1, 1), )
if mibBuilder.loadTexts: cceFarmTable.setStatus('current')
if mibBuilder.loadTexts: cceFarmTable.setDescription('Cache farm table. A cache farm consists of all the cache engines attached to a single router.')
cceFarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-CACHE-ENGINE-MIB", "cceFarmEntryIndex"))
if mibBuilder.loadTexts: cceFarmEntry.setStatus('current')
if mibBuilder.loadTexts: cceFarmEntry.setDescription('Information on a single cache engine in the cache farm.')
cceFarmEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: cceFarmEntryIndex.setStatus('current')
if mibBuilder.loadTexts: cceFarmEntryIndex.setDescription('Arbitrary index into the cache farm table.')
cceFarmEntryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFarmEntryIpAddress.setStatus('current')
if mibBuilder.loadTexts: cceFarmEntryIpAddress.setDescription('Cache engine IP address.')
cceBasicIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceBasicIPAddress.setStatus('current')
if mibBuilder.loadTexts: cceBasicIPAddress.setDescription('IP address of the cache engine.')
cceBasicNetMask = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceBasicNetMask.setStatus('current')
if mibBuilder.loadTexts: cceBasicNetMask.setDescription('Network mask of the cache engine.')
cceBasicGatewayIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceBasicGatewayIpAddress.setStatus('current')
if mibBuilder.loadTexts: cceBasicGatewayIpAddress.setDescription("IP address of the default gateway of the cache engine. This is the IP address of the router that allows connections to the engine from web browsers, and that allows the cache engine to be connected to the network. If '0.0.0.0', the default gateway address is not configured.")
cceBasicCacheName = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceBasicCacheName.setStatus('current')
if mibBuilder.loadTexts: cceBasicCacheName.setDescription('Human-readable name for the cache engine.')
cceBasicFarmName = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceBasicFarmName.setStatus('current')
if mibBuilder.loadTexts: cceBasicFarmName.setDescription('Administratively assigned human-readable name associated with the router that the cache engine is attached to. All cache engines attached to a single router form a cache farm.')
cceDnsDomain = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDnsDomain.setStatus('current')
if mibBuilder.loadTexts: cceDnsDomain.setDescription('Domain Name System (DNS) domain of the cache engine.')
cceDnsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 3, 2), )
if mibBuilder.loadTexts: cceDnsTable.setStatus('current')
if mibBuilder.loadTexts: cceDnsTable.setDescription('DNS server table.')
cceDnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-CACHE-ENGINE-MIB", "cceDnsEntryIndex"))
if mibBuilder.loadTexts: cceDnsEntry.setStatus('current')
if mibBuilder.loadTexts: cceDnsEntry.setDescription('Information on a DNS server that the cache engine has been configured to use. When resolving DNS names, each DNS server is tried in table entry order until the name is resolved. The table entry order is determined by user configuration.')
cceDnsEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: cceDnsEntryIndex.setStatus('current')
if mibBuilder.loadTexts: cceDnsEntryIndex.setDescription('Arbitrary index into the DNS server table.')
cceDnsEntryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDnsEntryIpAddress.setStatus('current')
if mibBuilder.loadTexts: cceDnsEntryIpAddress.setDescription('DNS server IP address.')
cceIcpClientEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientEnabled.setStatus('current')
if mibBuilder.loadTexts: cceIcpClientEnabled.setDescription('If true(1), the ICP Client is enabled. If false(2), the ICP Client is disabled. ICP is the Internet Cache Protocol as defined by RFC 2186 and RFC 2187.')
cceIcpClientWait = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientWait.setStatus('current')
if mibBuilder.loadTexts: cceIcpClientWait.setDescription('The timeout period for ICP responses. If object retrieval has not commenced when the timeout occurs, a new source is selected.')
cceIcpClientRetry = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientRetry.setStatus('current')
if mibBuilder.loadTexts: cceIcpClientRetry.setDescription('The number of retries to be attempted before it is assumed that an ICP server is down.')
cceIcpClientLocalDomains = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientLocalDomains.setStatus('current')
if mibBuilder.loadTexts: cceIcpClientLocalDomains.setDescription('Local domains for which ICP requests shall not be made. These are the domains for which the cache engine is closer to the actual server than the other caches and would not benefit from the ICP interaction.')
cceIcpClientRemServTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 5), )
if mibBuilder.loadTexts: cceIcpClientRemServTable.setStatus('current')
if mibBuilder.loadTexts: cceIcpClientRemServTable.setDescription('The remote server table contains information on remote servers (cache engines) to which ICP requests should be sent.')
cceIcpClientRemServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 5, 1), ).setIndexNames((0, "CISCO-CACHE-ENGINE-MIB", "cceIcpClientRemServIndex"))
if mibBuilder.loadTexts: cceIcpClientRemServEntry.setStatus('current')
if mibBuilder.loadTexts: cceIcpClientRemServEntry.setDescription('Information on an ICP remote server.')
cceIcpClientRemServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: cceIcpClientRemServIndex.setStatus('current')
if mibBuilder.loadTexts: cceIcpClientRemServIndex.setDescription('Arbitrary index into the remote server table. The ICP requests are sent simultaneously to all the remote servers that are present.')
cceIcpClientRemServIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientRemServIpAddress.setStatus('current')
if mibBuilder.loadTexts: cceIcpClientRemServIpAddress.setDescription('IP address of the ICP remote server where all ICP requests shall be sent.')
cceIcpClientRemServState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientRemServState.setStatus('current')
if mibBuilder.loadTexts: cceIcpClientRemServState.setDescription('ICP state of the remote server. If normal(1), this remote server is operating normally. If warning(2), this remote server has stopped responding to ICP requests. If critical(3), this remote server is sending an ICP deny response.')
cceIcpClientRemServType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("parent", 1), ("sibling", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientRemServType.setStatus('current')
if mibBuilder.loadTexts: cceIcpClientRemServType.setDescription('Configured ICP server type of the cache engine. If parent(1), the cache engine is allowed to retrieve objects when an ICP miss has occurred. If sibling(2), the cache engine is not allowed to retrieve objects when an ICP miss has occurred.')
cceIcpClientRemServIcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientRemServIcpPort.setStatus('current')
if mibBuilder.loadTexts: cceIcpClientRemServIcpPort.setDescription('Port on a remote ICP server to which ICP requests will be sent.')
cceIcpClientRemServHttpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientRemServHttpPort.setStatus('current')
if mibBuilder.loadTexts: cceIcpClientRemServHttpPort.setDescription('HTTP port to which proxy-style HTTP requests will be forwarded.')
cceIcpClientRemServSelDomains = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 4, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpClientRemServSelDomains.setStatus('current')
if mibBuilder.loadTexts: cceIcpClientRemServSelDomains.setDescription('Set of domains for which ICP requests will be forwarded to this ICP remote server. List of domains is represented as a space-delimited string.')
cceIcpServerEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 5, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpServerEnabled.setStatus('current')
if mibBuilder.loadTexts: cceIcpServerEnabled.setDescription('If true(1), the ICP server protocol functionality is enabled. If false(2), the ICP server protocol functionality is disabled.')
cceIcpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpServerPort.setStatus('current')
if mibBuilder.loadTexts: cceIcpServerPort.setDescription('ICP port that the server is listening on. The port to which other ICP clients can send ICP requests.')
cceIcpServerRemClntTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 5, 3), )
if mibBuilder.loadTexts: cceIcpServerRemClntTable.setStatus('current')
if mibBuilder.loadTexts: cceIcpServerRemClntTable.setDescription('List of remote clients which are allowed to send ICP requests to this cache engine.')
cceIcpServerRemClntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 5, 3, 1), ).setIndexNames((0, "CISCO-CACHE-ENGINE-MIB", "cceIcpServerRemClntIndex"))
if mibBuilder.loadTexts: cceIcpServerRemClntEntry.setStatus('current')
if mibBuilder.loadTexts: cceIcpServerRemClntEntry.setDescription('Information on a remote ICP server.')
cceIcpServerRemClntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: cceIcpServerRemClntIndex.setStatus('current')
if mibBuilder.loadTexts: cceIcpServerRemClntIndex.setDescription('Arbitrary index into the remote client table.')
cceIcpServerRemClntIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 5, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpServerRemClntIPAddress.setStatus('current')
if mibBuilder.loadTexts: cceIcpServerRemClntIPAddress.setDescription('IP address of a remote client that is allowed to send ICP requests to this cache engine.')
cceIcpServerRemClntFetch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 5, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIcpServerRemClntFetch.setStatus('current')
if mibBuilder.loadTexts: cceIcpServerRemClntFetch.setDescription('If true(1), the remote ICP client is allowed to request the HTTP object from the cache engine. If false(2), the remote ICP client is not allowed to request the HTTP object from the cache engine.')
cceProxyIncomingPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceProxyIncomingPort.setStatus('current')
if mibBuilder.loadTexts: cceProxyIncomingPort.setDescription('If non-zero, the cache engine is enabled to accept incoming proxy server requests on this port number. Incoming proxy server requests originate from web browsers that are configured to use the cache engine as a proxy server. If zero, the cache engine is not enabled to act as a proxy server.')
cceProxyOutgoingAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceProxyOutgoingAddress.setStatus('current')
if mibBuilder.loadTexts: cceProxyOutgoingAddress.setDescription("IP address or name of an upstream proxy server. Outgoing client HTTP requests (for misses) from the proxy server are redirected to the upstream proxy server identified by this IP address or name. 'Upstream' means a server closer to the actual source where the object resides.")
cceProxyOutgoingPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceProxyOutgoingPort.setStatus('current')
if mibBuilder.loadTexts: cceProxyOutgoingPort.setDescription('If non-zero, the cache engine is enabled for outgoing proxy mode and this value is the port number used to communicate with the upstream proxy server. If 0, outgoing proxy mode is disabled.')
cceTimeGmtTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTimeGmtTime.setStatus('current')
if mibBuilder.loadTexts: cceTimeGmtTime.setDescription('Current GMT (Greenwich Mean Time) military format (HH:MM:SS).')
cceTimeGmtDate = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTimeGmtDate.setStatus('current')
if mibBuilder.loadTexts: cceTimeGmtDate.setDescription('The GMT date in (MM/DD/YYYY) format.')
cceTimeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 7, 3), )
if mibBuilder.loadTexts: cceTimeTable.setStatus('current')
if mibBuilder.loadTexts: cceTimeTable.setDescription('The Network Time Protocol (NTP) server table.')
cceTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 7, 3, 1), ).setIndexNames((0, "CISCO-CACHE-ENGINE-MIB", "cceTimeEntryIndex"))
if mibBuilder.loadTexts: cceTimeEntry.setStatus('current')
if mibBuilder.loadTexts: cceTimeEntry.setDescription('Information on an NTP server.')
cceTimeEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: cceTimeEntryIndex.setStatus('current')
if mibBuilder.loadTexts: cceTimeEntryIndex.setDescription('Arbitrary index into the NTP server table. NTP requests are sent to each server in table order, until a request is satisfied.')
cceTimeEntryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 1, 7, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTimeEntryIpAddress.setStatus('current')
if mibBuilder.loadTexts: cceTimeEntryIpAddress.setDescription('IP address of the NTP server.')
cceCacheFarmHealingModeWait = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceCacheFarmHealingModeWait.setStatus('current')
if mibBuilder.loadTexts: cceCacheFarmHealingModeWait.setDescription('Maximum time the cache engine shall wait for objects to be retrieved from the other caches in the farm during cache engine initialization.')
cceCacheFarmHealingModeRetry = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceCacheFarmHealingModeRetry.setStatus('current')
if mibBuilder.loadTexts: cceCacheFarmHealingModeRetry.setDescription("Number of times the cache engine will ask its neighbor caches in the farm for misses before it determines that the caches 'knows nothing', and stops asking. Initial default value is 200.")
cceCacheFarmVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceCacheFarmVersion.setStatus('current')
if mibBuilder.loadTexts: cceCacheFarmVersion.setDescription('Version description of the currently executing cache engine object code image.')
cceFreshnessTextAgeMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFreshnessTextAgeMultiplier.setStatus('current')
if mibBuilder.loadTexts: cceFreshnessTextAgeMultiplier.setDescription('Percentage multiplier used to calculate the expiration date of a text object if the expiration date is not explicitly specified. This percentage is multiplied by the age of the object to calculate the freshness time of the object. The expiration date is the sum of the freshness time and the date the object was last retrieved from the server or verified was up-to-date. The object will be considered stale after its expiration date and a subsequent If-Modified-Since (IMS) request will be revalidated with the server by the cache engine. If zero, the calculated expiration time will indicate that the the object expires immediately.')
cceFreshnessBinaryAgeMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFreshnessBinaryAgeMultiplier.setStatus('current')
if mibBuilder.loadTexts: cceFreshnessBinaryAgeMultiplier.setDescription('Percentage multiplier used to calculate the expiration date of a binary object if the expiration date is not explicitly specified. This percentage is multiplied by the age of the object to calculate the freshness time of the object. The expiration date is the sum of the freshness time and the date the object was last retrieved from the server or verified was up-to-date. The object will be considered stale after its expiration date and a subsequent If-Modified-Since (IMS) request will be revalidated with the server by the cache engine. If zero, the calculated expiration time will indicate that the the object expires immediately.')
cceFreshnessTextMaximumTTL = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFreshnessTextMaximumTTL.setStatus('current')
if mibBuilder.loadTexts: cceFreshnessTextMaximumTTL.setDescription('Maximum Time-to-Live for any text object for which the cache engine has to calculate an expiration date. Used to impose an upper limit on the calculated expiration date. If zero, the text object will never be cached. Units are specified in cceFreshnessUnitsMaximumTTL.')
cceFreshnessBinaryMaximumTTL = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFreshnessBinaryMaximumTTL.setStatus('current')
if mibBuilder.loadTexts: cceFreshnessBinaryMaximumTTL.setDescription('Maximum Time-to-Live for any binary object for which the cache engine has to calculate an expiration date. Used to impose an upper limit on the calculated expiration date. If zero, the binary object will never be cached. Units are specified in cceFreshnessUnitsMaximumTTL.')
cceFreshnessUnitsMaximumTTL = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("seconds", 1), ("minutes", 2), ("hours", 3), ("days", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFreshnessUnitsMaximumTTL.setStatus('current')
if mibBuilder.loadTexts: cceFreshnessUnitsMaximumTTL.setDescription('Units in which Maximum TTL for text and binary objects should be interpreted.')
cceFreshnessCacheCookies = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFreshnessCacheCookies.setStatus('current')
if mibBuilder.loadTexts: cceFreshnessCacheCookies.setDescription('If true(1), text objects associated with cookies are cached. If false(2), text objects associated with cookies are not cached. Cacheable, binary objects associated with cookies are always cached.')
cceFreshnessTextMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFreshnessTextMaxAge.setStatus('current')
if mibBuilder.loadTexts: cceFreshnessTextMaxAge.setDescription('Percentage of the maximum Time-To-Live of text objects used to calculate the minimum age that a text object must be before an up-to-date check is performed with the server as a result of an IMS request. If the age of a text object is less than this percentage of the maximum Time-To-Live for text objects, then an IMS request is served out of the cache. If zero, an IMS request is always sent to the server.')
cceFreshnessBinaryMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFreshnessBinaryMaxAge.setStatus('current')
if mibBuilder.loadTexts: cceFreshnessBinaryMaxAge.setDescription('Percentage of the maximum Time-To-Live of binary objects used to calculate the minimum age that a binary object must be before an up-to-date check is performed with the server as a result of an IMS request. If the age of a binary object is less than this percentage of the maximum Time-To-Live for binary objects, then an IMS request is served out of the cache. If zero, an IMS request is always sent to the server.')
cceFreshnessForceMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revalidate", 1), ("retrieve", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceFreshnessForceMiss.setStatus('current')
if mibBuilder.loadTexts: cceFreshnessForceMiss.setDescription('If revalidate(1), then on a forced cache miss from the client browser the cache engine shall send an If-Modified-Since (IMS) HTTP request to revalidate the object. If retrieve(2), then on a forced cache miss from the client browser the cache engine shall send a Pragma:No-Cache HTTP request to retrieve a fresh copy.')
cceTcpServerSendBuffer = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 256))).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTcpServerSendBuffer.setStatus('current')
if mibBuilder.loadTexts: cceTcpServerSendBuffer.setDescription('The size of the TCP send buffer socket for the server.')
cceTcpClientSendBuffer = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 256))).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTcpClientSendBuffer.setStatus('current')
if mibBuilder.loadTexts: cceTcpClientSendBuffer.setDescription('The size of the TCP send buffer socket for the client.')
cceTcpServerRecvBuffer = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 256))).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTcpServerRecvBuffer.setStatus('current')
if mibBuilder.loadTexts: cceTcpServerRecvBuffer.setDescription('The size of the TCP receive buffer socket for the server.')
cceTcpClientRecvBuffer = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 256))).setUnits('kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTcpClientRecvBuffer.setStatus('current')
if mibBuilder.loadTexts: cceTcpClientRecvBuffer.setDescription('The size of the TCP receive buffer socket for the client.')
cceTcpServerReadWriteTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTcpServerReadWriteTimeout.setStatus('current')
if mibBuilder.loadTexts: cceTcpServerReadWriteTimeout.setDescription('Read/write timeout for the server.')
cceTcpClientReadWriteTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTcpClientReadWriteTimeout.setStatus('current')
if mibBuilder.loadTexts: cceTcpClientReadWriteTimeout.setDescription('Read/write timeout for the client.')
cceTcpConnectionIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 7200))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTcpConnectionIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: cceTcpConnectionIdleTimeout.setDescription('Idle timeout for connection.')
cceTcpConnectionWaitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 7200))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTcpConnectionWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: cceTcpConnectionWaitTimeout.setDescription('Wait timeout for connection.')
cceTcpConnectionRetry = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 2, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceTcpConnectionRetry.setStatus('current')
if mibBuilder.loadTexts: cceTcpConnectionRetry.setDescription('Number of times to retry the TCP connection.')
cceUrlFilterState = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("blockBad", 2), ("allowGood", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUrlFilterState.setStatus('current')
if mibBuilder.loadTexts: cceUrlFilterState.setDescription('If off(1), the cache engine can serve any URL. If blockBad(2), the cache engine can not serve those URLs that are present in the bad URL list which resides in a file on the cache engine. If allowGood(3), the cache engine can serve only those URLs that are present in the good URL list which resides in the file on the cache engine.')
cceEventsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceEventsTotal.setStatus('current')
if mibBuilder.loadTexts: cceEventsTotal.setDescription('Maximum number of event entries that can be viewed at this time.')
cceEventsCritical = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceEventsCritical.setStatus('current')
if mibBuilder.loadTexts: cceEventsCritical.setDescription('If true(1), include event entries with the event entry type of critical in the event table if any exist. If false(2), do not include event entries with the event entry type of critical in the event table.')
cceEventsWarning = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceEventsWarning.setStatus('current')
if mibBuilder.loadTexts: cceEventsWarning.setDescription('If true(1), include event entries with the event entry type of warning in the event table if any exist. If false(2), do not include event entries with the event entry type of warning in the event table.')
cceEventsNotice = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceEventsNotice.setStatus('current')
if mibBuilder.loadTexts: cceEventsNotice.setDescription('If true(1), include event entries with the event entry type of notice in the event table if any exist. If false(2), do not include event entries with the event entry type of notice in the event table.')
cceEventsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 5), )
if mibBuilder.loadTexts: cceEventsTable.setStatus('current')
if mibBuilder.loadTexts: cceEventsTable.setDescription('Events logged.')
cceEventsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 5, 1), ).setIndexNames((0, "CISCO-CACHE-ENGINE-MIB", "cceEventsEntryIndex"))
if mibBuilder.loadTexts: cceEventsEntry.setStatus('current')
if mibBuilder.loadTexts: cceEventsEntry.setDescription('Each entry contains information on a single event.')
cceEventsEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 999), )))
if mibBuilder.loadTexts: cceEventsEntryIndex.setStatus('current')
if mibBuilder.loadTexts: cceEventsEntryIndex.setDescription('Arbitrary index into the event table. Entries are in reverse chronological order. Index range is 1 to cceEventsTotal. If 0, there are no events.')
cceEventsEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notice", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceEventsEntryType.setStatus('current')
if mibBuilder.loadTexts: cceEventsEntryType.setDescription('Events message type. If notice(1), the message is an informational message. If warning(2), the message is a warning message. If critical(3),the message is critical message.')
cceEventsEntryMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceEventsEntryMessage.setStatus('current')
if mibBuilder.loadTexts: cceEventsEntryMessage.setDescription('Event message.')
cceEventsEntryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 1, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceEventsEntryTime.setStatus('current')
if mibBuilder.loadTexts: cceEventsEntryTime.setDescription("Time when the message was logged. Format is 'WWW, DD MMM YYYY HH:MM:SS GMT'.")
cceLoggingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 2, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceLoggingEnabled.setStatus('current')
if mibBuilder.loadTexts: cceLoggingEnabled.setDescription('If true(1), transaction logging is on. If false(2), transaction logging is off. Transactions are logged in squid log format.')
cceLoggingInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999999))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceLoggingInterval.setStatus('current')
if mibBuilder.loadTexts: cceLoggingInterval.setDescription('Amount of time that must elapse before the working log will be cleared by moving the data into the archive log which overwrites the previous archive log.')
cceLoggingWorkingLogPresent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 2, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceLoggingWorkingLogPresent.setStatus('current')
if mibBuilder.loadTexts: cceLoggingWorkingLogPresent.setDescription('If true(1), the working log is present. If false(2), the working log is not present. The working log is a file that logs information on cache engine transactions.')
cceLoggingSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceLoggingSize.setStatus('current')
if mibBuilder.loadTexts: cceLoggingSize.setDescription('Current size of the working log if present.')
cceLoggingAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999999))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceLoggingAge.setStatus('current')
if mibBuilder.loadTexts: cceLoggingAge.setDescription('Age of the working log.')
cceLoggingArchiveLogPresent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 2, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceLoggingArchiveLogPresent.setStatus('current')
if mibBuilder.loadTexts: cceLoggingArchiveLogPresent.setDescription('If true(1), archive log is present. If false(2), archive log is not present. The archive log is overwritten with a copy of the working log at the interval of time specified in cceLoggingInterval.')
cceLoggingArchiveLogSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceLoggingArchiveLogSize.setStatus('current')
if mibBuilder.loadTexts: cceLoggingArchiveLogSize.setDescription('The current archive log size if present.')
cceLoggingWriteFailReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 4, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceLoggingWriteFailReason.setStatus('current')
if mibBuilder.loadTexts: cceLoggingWriteFailReason.setDescription('The reason for the failure of the last translog write operation.If the last operation was successful, then this object will be displayed as NotApplicable.')
cceDiagDumpDiskCreates = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskCreates.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpDiskCreates.setDescription('Number of new files created.')
cceDiagDumpDiskOpens = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskOpens.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpDiskOpens.setDescription('Number of existing files opened.')
cceDiagDumpDiskCloses = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskCloses.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpDiskCloses.setDescription('Number of completed file operations.')
cceDiagDumpDiskDeletes = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskDeletes.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpDiskDeletes.setDescription('Number of files deleted.')
cceDiagDumpDiskReads = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskReads.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpDiskReads.setDescription('Number of file system reads.')
cceDiagDumpDiskWrites = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskWrites.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpDiskWrites.setDescription('Number of file system writes.')
cceDiagDumpDiskStats = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskStats.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpDiskStats.setDescription('Number of times we got system info about a file.')
cceDiagDumpDiskFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskFree.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpDiskFree.setDescription('Total free disk space.')
cceDiagDumpDiskWraps = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskWraps.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpDiskWraps.setDescription('Number of times a disk partition has been wrapped in the cache engine file system.')
cceDiagDumpDiskOverWrites = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskOverWrites.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpDiskOverWrites.setDescription('Number of files greater than 48 kilo bytes in size which arrived in a HTTP response without the content length being sent explicitly.')
cceDiagDumpDiskTruncReads = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskTruncReads.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpDiskTruncReads.setDescription('Number of files which were deemed truncated when end of file was reached prematurely on a read.')
cceDiagDumpDiskInodeErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskInodeErrors.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpDiskInodeErrors.setDescription('Number of times a file has not been found at the expected location.')
cceDiagDumpDiskCrcErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskCrcErrors.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpDiskCrcErrors.setDescription('Number of times the Cyclic Redundancy Check (CRC) of the file did not match.')
cceDiagDumpDiskDirCollisions = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpDiskDirCollisions.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpDiskDirCollisions.setDescription('Number of directory lookup failures because of collision.')
cceDiagDumpBufferReads = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpBufferReads.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpBufferReads.setDescription('Number of physical disk reads occurred.')
cceDiagDumpBufferReadErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpBufferReadErrors.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpBufferReadErrors.setDescription('Number of times a failure to read from disk occurred.')
cceDiagDumpBufferWrites = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpBufferWrites.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpBufferWrites.setDescription('Number of physical disk writes.')
cceDiagDumpBufferWriteErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpBufferWriteErrors.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpBufferWriteErrors.setDescription('Number of times a failure to write to disk occurred.')
cceDiagDumpBufferHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpBufferHits.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpBufferHits.setDescription('Number of objects retrieved from buffer.')
cceDiagDumpBufferMisses = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpBufferMisses.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpBufferMisses.setDescription('Number of objects retrieved from physical drive.')
cceDiagDumpBufferSeekErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceDiagDumpBufferSeekErrors.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpBufferSeekErrors.setDescription('The number of times a failure occurred in positioning the disk head.')
cceImsClientRequestTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientRequestTotal.setStatus('current')
if mibBuilder.loadTexts: cceImsClientRequestTotal.setDescription('The total number of requests from the client to the cache engine.')
cceImsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsReceived.setStatus('current')
if mibBuilder.loadTexts: cceImsReceived.setDescription('The total number of requests received from the client that were IMS requests.')
cceImsClientTotalFromCache = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientTotalFromCache.setStatus('current')
if mibBuilder.loadTexts: cceImsClientTotalFromCache.setDescription("The total number of IMS requests from the client served directly from the cache engine's cache without revalidation.")
cceImsClientFreshFromCache = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientFreshFromCache.setStatus('current')
if mibBuilder.loadTexts: cceImsClientFreshFromCache.setDescription("The number of times the client's requested IMS object was found to be fresh (304-Not Modified).")
cceImsClientStaleFromCache = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientStaleFromCache.setStatus('current')
if mibBuilder.loadTexts: cceImsClientStaleFromCache.setDescription("The number of times the client's requested IMS object was found to be stale. If stale, an updated object was returned to the client.")
cceImsClientTotalCacheMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientTotalCacheMiss.setStatus('current')
if mibBuilder.loadTexts: cceImsClientTotalCacheMiss.setDescription('The total number of IMS requests which had to be forwarded to the actual server.')
cceImsClientFreshCacheMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientFreshCacheMiss.setStatus('current')
if mibBuilder.loadTexts: cceImsClientFreshCacheMiss.setDescription('The number of IMS requests which had to be forwarded to the actual server but were found to be fresh.')
cceImsClientStaleCacheMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientStaleCacheMiss.setStatus('current')
if mibBuilder.loadTexts: cceImsClientStaleCacheMiss.setDescription('The number of IMS requests which had to be forwarded to the actual server but were found to be stale.')
cceImsClientTotalReval = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientTotalReval.setStatus('current')
if mibBuilder.loadTexts: cceImsClientTotalReval.setDescription('The number of IMS requests from the client found in the cache, and revalidated with an IMS to the server.')
cceImsClientFreshReval = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientFreshReval.setStatus('current')
if mibBuilder.loadTexts: cceImsClientFreshReval.setDescription('The number of IMS requests from the client found in the cache, and revalidated with an IMS to the server and found fresh.')
cceImsClientStaleReval = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientStaleReval.setStatus('current')
if mibBuilder.loadTexts: cceImsClientStaleReval.setDescription('The number of IMS requests from the client found in the cache, and revalidated with an IMS to the server and found stale.')
cceImsClientRequestToServer = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientRequestToServer.setStatus('current')
if mibBuilder.loadTexts: cceImsClientRequestToServer.setDescription('The total number of requests from the cache engine to remote servers.')
cceImsServerTotalIssued = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsServerTotalIssued.setStatus('current')
if mibBuilder.loadTexts: cceImsServerTotalIssued.setDescription('The total number of requests sent from the cache to servers that were IMS requests.')
cceImsServerTotalDueClient = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsServerTotalDueClient.setStatus('current')
if mibBuilder.loadTexts: cceImsServerTotalDueClient.setDescription('The number of IMS requests sent to servers because of an IMS request from the client.')
cceImsServerFreshDueClient = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsServerFreshDueClient.setStatus('current')
if mibBuilder.loadTexts: cceImsServerFreshDueClient.setDescription("The number of times the cache's requested IMS object was found to be fresh (304-Not Modified).")
cceImsServerStaleDueClient = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsServerStaleDueClient.setStatus('current')
if mibBuilder.loadTexts: cceImsServerStaleDueClient.setDescription("The number of times the cache's requested IMS object was found to be stale. If stale, a new object was retrieved from the server.")
cceImsServerTotalDueExpiration = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsServerTotalDueExpiration.setStatus('current')
if mibBuilder.loadTexts: cceImsServerTotalDueExpiration.setDescription("The number of IMS requests sent to servers because the requested object was determined to be stale according to the cache engine's freshness settings.")
cceImsClientFreshDueExpiration = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsClientFreshDueExpiration.setStatus('current')
if mibBuilder.loadTexts: cceImsClientFreshDueExpiration.setDescription("The number of times the cache's requested IMS object was found to be fresh (304-Not Modified) even when the object's age had expired.")
cceImsServerStaleDueExpiration = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 2, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceImsServerStaleDueExpiration.setStatus('current')
if mibBuilder.loadTexts: cceImsServerStaleDueExpiration.setDescription("The number of times the cache's requested IMS object was found to be stale when the object's age had expired. If stale, a new object was retrieved from the server.")
ccePerformanceReqPerSecMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceReqPerSecMax.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceReqPerSecMax.setDescription('Maximum number of requests per second the cache engine has been servicing.')
ccePerformanceReqPerSecLast = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceReqPerSecLast.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceReqPerSecLast.setDescription('Number of requests per second the cache engine has been servicing in the last sampling time.')
ccePerformanceBytesPerSecMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 3), Gauge32()).setUnits('Bytes-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceBytesPerSecMax.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceBytesPerSecMax.setDescription('Maximum bytes per second served.')
ccePerformanceBytesPerSecLast = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Bytes-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceBytesPerSecLast.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceBytesPerSecLast.setDescription('Bytes per second served in the last sampling time.')
ccePerformanceSecPerReqAvg = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceSecPerReqAvg.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceSecPerReqAvg.setDescription('Average duration of each connection serviced by the cache engine.')
ccePerformanceSecPerReqMin = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceSecPerReqMin.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceSecPerReqMin.setDescription('Shortest duration of each connection serviced by the cache engine.')
ccePerformanceSecPerReqMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 7), Gauge32()).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceSecPerReqMax.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceSecPerReqMax.setDescription('Longest duration of each connection serviced by the cache engine.')
ccePerformanceSecPerReqLast = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceSecPerReqLast.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceSecPerReqLast.setDescription('Average duration of each connection serviced by the cache engine in the last sampling time.')
ccePerformanceHitsSecPerReqAvg = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceHitsSecPerReqAvg.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceHitsSecPerReqAvg.setDescription('Average duration required for the cache engine to send a hit response. A hit response is a response when the object can be serviced from the cache engine.')
ccePerformanceHitsSecPerReqMin = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceHitsSecPerReqMin.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceHitsSecPerReqMin.setDescription('Shortest duration required for the cache engine to send a hit response.')
ccePerformanceHitsSecPerReqMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 11), Gauge32()).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceHitsSecPerReqMax.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceHitsSecPerReqMax.setDescription('Longest duration required for the cache engine to send a hit response.')
ccePerformanceHitsSecPerReqLast = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceHitsSecPerReqLast.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceHitsSecPerReqLast.setDescription('Average duration required for the cache engine to send a hit response in the last sampling time.')
ccePerformanceMissSecPerReqAvg = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceMissSecPerReqAvg.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceMissSecPerReqAvg.setDescription('Average duration required for the cache engine to send a miss response. A miss response is a response when the object cannot be serviced from the cache engine.')
ccePerformanceMissSecPerReqMin = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceMissSecPerReqMin.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceMissSecPerReqMin.setDescription('Shortest duration required for the cache engine to send a miss response.')
ccePerformanceMissSecPerReqMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 15), Gauge32()).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceMissSecPerReqMax.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceMissSecPerReqMax.setDescription('Longest duration required for the cache engine to send a miss response.')
ccePerformanceMissSecPerReqLast = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds-per-req').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceMissSecPerReqLast.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceMissSecPerReqLast.setDescription('Average duration required for the cache engine to send a miss response in the last sampling time.')
ccePerformanceObjectSizeAvg = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('byte/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceObjectSizeAvg.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceObjectSizeAvg.setDescription('Average size of the object served from the cache engine.')
ccePerformanceObjectSizeMin = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceObjectSizeMin.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceObjectSizeMin.setDescription('Minimum size of the object served from the cache engine.')
ccePerformanceObjectSizeMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 19), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceObjectSizeMax.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceObjectSizeMax.setDescription('Maximum size of the object served from the cache engine.')
ccePerformanceObjectSizeLast = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('bytes/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccePerformanceObjectSizeLast.setStatus('current')
if mibBuilder.loadTexts: ccePerformanceObjectSizeLast.setDescription('Average size of the object served from the cache engine in the last sampling time.')
cceRequestsForcedReloadTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsForcedReloadTotal.setStatus('current')
if mibBuilder.loadTexts: cceRequestsForcedReloadTotal.setDescription('Total number of times a client browser has requested a fresh copy of an object regardless of its freshness.')
cceRequestsForcedReloadPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percentage/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsForcedReloadPercent.setStatus('current')
if mibBuilder.loadTexts: cceRequestsForcedReloadPercent.setDescription('Total number of times a client browser has requested a fresh copy of an object regardless of its freshness.')
cceRequestsNearHitsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsNearHitsTotal.setStatus('current')
if mibBuilder.loadTexts: cceRequestsNearHitsTotal.setDescription('Total number of times a cache engine does not find the requested object(s) in its cache, but is able to retrieve the object from a neighboring cache engine in the farm.')
cceRequestsNearHitsPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percentage/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsNearHitsPercent.setStatus('current')
if mibBuilder.loadTexts: cceRequestsNearHitsPercent.setDescription('Total number of times a cache engine does not find the requested object(s) in its cache, but is able to retrieve the object from a neighboring cache engine in the farm.')
cceRequestsServerErrorTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsServerErrorTotal.setStatus('current')
if mibBuilder.loadTexts: cceRequestsServerErrorTotal.setDescription('Total number of times the cache engine has failed to fulfill a request due to a web host problem or network problem and has generated and logged an error.')
cceRequestsServerErrorPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percentage/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsServerErrorPercent.setStatus('current')
if mibBuilder.loadTexts: cceRequestsServerErrorPercent.setDescription('Total number of times the cache engine has failed to fulfill a request due to a web host problem or network problem and has generated and logged an error.')
cceRequestsUrlBlockedTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsUrlBlockedTotal.setStatus('current')
if mibBuilder.loadTexts: cceRequestsUrlBlockedTotal.setDescription('Total number of times a client browser has attempted to access an administratively blocked URL via the cache engine.')
cceRequestsUrlBlockedPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percentage/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsUrlBlockedPercent.setStatus('current')
if mibBuilder.loadTexts: cceRequestsUrlBlockedPercent.setDescription('Total number of times a client browser has attempted to access an administratively blocked URL via the cache engine.')
cceRequestsIcpClientHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsIcpClientHits.setStatus('current')
if mibBuilder.loadTexts: cceRequestsIcpClientHits.setDescription('The number of times the cache engine was able to satisfy a client request by getting an ICP hit from some other cache.')
cceRequestsIcpClientPercentage = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percentage/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsIcpClientPercentage.setStatus('current')
if mibBuilder.loadTexts: cceRequestsIcpClientPercentage.setDescription('The percentage of total number of ICP client requests that were ICP hits.')
cceRequestsIcpServerHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsIcpServerHits.setStatus('current')
if mibBuilder.loadTexts: cceRequestsIcpServerHits.setDescription("The number of times the cache engine was able to satisfy another cache's ICP requests by issuing ICP hits.")
cceRequestsIcpServerPercentage = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percentage/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceRequestsIcpServerPercentage.setStatus('current')
if mibBuilder.loadTexts: cceRequestsIcpServerPercentage.setDescription('The percentage of total number of ICP server requests that were ICP hits.')
cceSavingsRequestsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 5, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceSavingsRequestsTotal.setStatus('current')
if mibBuilder.loadTexts: cceSavingsRequestsTotal.setDescription('Total number of end-user requests the cache engine has serviced.')
cceSavingsRequestsHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 5, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceSavingsRequestsHits.setStatus('current')
if mibBuilder.loadTexts: cceSavingsRequestsHits.setDescription('Total number of end-user requests the cache engine has serviced as hits.')
cceSavingsRequestsMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 5, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceSavingsRequestsMiss.setStatus('current')
if mibBuilder.loadTexts: cceSavingsRequestsMiss.setDescription('The number of requests the cache engine retrieved from the internet.')
cceSavingsRequestsSavings = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percentage/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceSavingsRequestsSavings.setStatus('current')
if mibBuilder.loadTexts: cceSavingsRequestsSavings.setDescription('Percentage of hits out of the total.')
cceSavingsBytesServedTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 5, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceSavingsBytesServedTotal.setStatus('current')
if mibBuilder.loadTexts: cceSavingsBytesServedTotal.setDescription('Total number of bytes served.')
cceSavingsBytesServedHits = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 5, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceSavingsBytesServedHits.setStatus('current')
if mibBuilder.loadTexts: cceSavingsBytesServedHits.setDescription('Total number of bytes the cache engine was able to satisfy directly from its populated cache.')
cceSavingsBytesServedMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 5, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceSavingsBytesServedMiss.setStatus('current')
if mibBuilder.loadTexts: cceSavingsBytesServedMiss.setDescription('The number of bytes the cache engine retrieved from the internet.')
cceSavingsBytesServedSavings = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percentage/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceSavingsBytesServedSavings.setStatus('current')
if mibBuilder.loadTexts: cceSavingsBytesServedSavings.setDescription('Percentage of bytes served from the cache out of the total.')
cceUsageCPUCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageCPUCurrent.setStatus('current')
if mibBuilder.loadTexts: cceUsageCPUCurrent.setDescription('Current CPU usage.')
cceUsageCPUPeak = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 2), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageCPUPeak.setStatus('current')
if mibBuilder.loadTexts: cceUsageCPUPeak.setDescription('Peak CPU usage. Calculated based on the amount of time the CPU is busy in the last 10 seconds.')
cceUsageDiskCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDiskCurrent.setStatus('obsolete')
if mibBuilder.loadTexts: cceUsageDiskCurrent.setDescription('This object is obsolete and will always return zero. It has been replaced by cceUsageDiskVolumeCurrent in the CFS per-volume entry cceUsageDiskVolumeEntry in the table cceUsageDiskVolumeTable.')
cceUsageDiskPeak = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 4), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDiskPeak.setStatus('obsolete')
if mibBuilder.loadTexts: cceUsageDiskPeak.setDescription('This object is obsolete and will always return zero. It has been replaced by cceUsageDiskVolumePeak in the CFS per-volume entry cceUsageDiskVolumeEntry in the table cceUsageDiskVolumeTable.')
cceUsageNetCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageNetCurrent.setStatus('current')
if mibBuilder.loadTexts: cceUsageNetCurrent.setDescription('Current network interface card usage.')
cceUsageNetPeak = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 6), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageNetPeak.setStatus('current')
if mibBuilder.loadTexts: cceUsageNetPeak.setDescription('Peak network interface card usage.')
cceUsageConnsCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageConnsCurrent.setStatus('current')
if mibBuilder.loadTexts: cceUsageConnsCurrent.setDescription('Current connections usage.')
cceUsageConnsPeak = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageConnsPeak.setStatus('current')
if mibBuilder.loadTexts: cceUsageConnsPeak.setDescription('Peak connections usage.')
cceUsageDiskVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 9), )
if mibBuilder.loadTexts: cceUsageDiskVolumeTable.setStatus('current')
if mibBuilder.loadTexts: cceUsageDiskVolumeTable.setDescription('Disk volume usage table which contains information for the Cache File System (CFS) volumes.')
cceUsageDiskVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 9, 1), ).setIndexNames((0, "CISCO-CACHE-ENGINE-MIB", "cceUsageDiskVolumeEntryIndex"))
if mibBuilder.loadTexts: cceUsageDiskVolumeEntry.setStatus('current')
if mibBuilder.loadTexts: cceUsageDiskVolumeEntry.setDescription('Utilization information for a CFS volume.')
cceUsageDiskVolumeEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: cceUsageDiskVolumeEntryIndex.setStatus('current')
if mibBuilder.loadTexts: cceUsageDiskVolumeEntryIndex.setDescription('Arbitrary index into the disk usage table.')
cceUsageDiskVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDiskVolumeName.setStatus('current')
if mibBuilder.loadTexts: cceUsageDiskVolumeName.setDescription('Disk volume name.')
cceUsageDiskVolumeEverMounted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 9, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDiskVolumeEverMounted.setStatus('current')
if mibBuilder.loadTexts: cceUsageDiskVolumeEverMounted.setDescription('If true (1), the CFS volume has been mounted at least once since system load. If false (2), the CFS volume has not been mounted since system load.')
cceUsageDiskVolumeCurrentlyMounted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 9, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDiskVolumeCurrentlyMounted.setStatus('current')
if mibBuilder.loadTexts: cceUsageDiskVolumeCurrentlyMounted.setDescription('If true (1), the CFS volume is currently mounted. If false (2), The CFS volume is currently unmounted.')
cceUsageDiskVolumeUnmountReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("normal", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDiskVolumeUnmountReason.setStatus('current')
if mibBuilder.loadTexts: cceUsageDiskVolumeUnmountReason.setDescription('If cceUsageDiskVolumeEverMounted is false(2) or cceUsageDiskVolumeCurrentlyMounted is true(1), then this object is notApplicable(0). If cceUsageDiskVolumeEverMounted is true(1) and cceUsageDiskVolumeCurrentlyMounted is false(2), then this object the reason the CVS volume is not mounted. If the reason is normal(1), then the volume was unmounted by the administrator issuing the cfs umount command. If the reason is error(2), then volume was unmounted by the Cache File System due to an error.')
cceUsageDiskVolumeCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDiskVolumeCurrent.setStatus('current')
if mibBuilder.loadTexts: cceUsageDiskVolumeCurrent.setDescription("Current utilization of the cache engine's disk controller for this CFS volume.")
cceUsageDiskVolumePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 9, 1, 7), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDiskVolumePeak.setStatus('current')
if mibBuilder.loadTexts: cceUsageDiskVolumePeak.setDescription("Peak utilization of the cache engine's disk controller for this CFS volume.")
cceUsageDosfsVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 10), )
if mibBuilder.loadTexts: cceUsageDosfsVolumeTable.setStatus('current')
if mibBuilder.loadTexts: cceUsageDosfsVolumeTable.setDescription('DOSFS volume usage table which contains information for the DOS File System (DOSFS) volumes.')
cceUsageDosfsVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 10, 1), ).setIndexNames((0, "CISCO-CACHE-ENGINE-MIB", "cceUsageDosfsVolumeEntryIndex"))
if mibBuilder.loadTexts: cceUsageDosfsVolumeEntry.setStatus('current')
if mibBuilder.loadTexts: cceUsageDosfsVolumeEntry.setDescription('Utilization information for a DOSFS volume.')
cceUsageDosfsVolumeEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: cceUsageDosfsVolumeEntryIndex.setStatus('current')
if mibBuilder.loadTexts: cceUsageDosfsVolumeEntryIndex.setDescription('Arbitrary index into the DOSFS volume table.')
cceUsageDosfsVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDosfsVolumeName.setStatus('current')
if mibBuilder.loadTexts: cceUsageDosfsVolumeName.setDescription('DOSFS volume name.')
cceUsageDosfsVolumeState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDosfsVolumeState.setStatus('current')
if mibBuilder.loadTexts: cceUsageDosfsVolumeState.setDescription('State of the DOSFS volume . 0 - DOSFS volume not accessed since ready change, 1 - DOSFS volume reset but not mounted, 2 - DOSFS volume mounted, 3 - DOSFS volume reset failed, 4 - DOSFS volume mount failed, 5 - DOSFS volume is being unmounted, 6 - DOSFS volume has been unmounted, 7 - Unmounts on DOSFS volume disabled.')
cceUsageDosfsVolumeFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 10, 1, 4), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDosfsVolumeFreeSpace.setStatus('current')
if mibBuilder.loadTexts: cceUsageDosfsVolumeFreeSpace.setDescription('Amount of free space available on the DOSFS volume.')
cceUsageDosfsVolumeTotalSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 5, 6, 10, 1, 5), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cceUsageDosfsVolumeTotalSpace.setStatus('current')
if mibBuilder.loadTexts: cceUsageDosfsVolumeTotalSpace.setDescription('The total space available on the DOSFS volume.')
cceIfFullDuplex = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 39, 1, 1, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cceIfFullDuplex.setStatus('current')
if mibBuilder.loadTexts: cceIfFullDuplex.setDescription('If true (1), Full Duplex. If false (2), Half Duplex.')
ciscoCacheEngineMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 2))
ciscoCacheEngineMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 2, 0))
cacheTrapReadDiskError = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 39, 2, 0, 1))
if mibBuilder.loadTexts: cacheTrapReadDiskError.setStatus('current')
if mibBuilder.loadTexts: cacheTrapReadDiskError.setDescription('First read error occurred on the disk that is being accessed.')
cacheTrapWriteDiskError = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 39, 2, 0, 2))
if mibBuilder.loadTexts: cacheTrapWriteDiskError.setStatus('current')
if mibBuilder.loadTexts: cacheTrapWriteDiskError.setDescription('First write error occurred on the disk that is being accessed.')
cacheTrapWriteTransFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 39, 2, 0, 3))
if mibBuilder.loadTexts: cacheTrapWriteTransFailed.setStatus('current')
if mibBuilder.loadTexts: cacheTrapWriteTransFailed.setDescription('Failed writing to working transaction log. Possible causes are system errors or the log having been removed.')
cacheTrapTooManyThreadsDead = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 39, 2, 0, 4))
if mibBuilder.loadTexts: cacheTrapTooManyThreadsDead.setStatus('current')
if mibBuilder.loadTexts: cacheTrapTooManyThreadsDead.setDescription('Too many threads are dead. This causes a reboot to happen.')
cacheTrapWccpDisabled = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 39, 2, 0, 5))
if mibBuilder.loadTexts: cacheTrapWccpDisabled.setStatus('current')
if mibBuilder.loadTexts: cacheTrapWccpDisabled.setDescription('WCCP (Web Cache Control Protocol) is enabled and then disabled due to blocked cache.')
cacheTrapDiskVolUnmounted = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 39, 2, 0, 6)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceUsageDiskVolumeName"))
if mibBuilder.loadTexts: cacheTrapDiskVolUnmounted.setStatus('current')
if mibBuilder.loadTexts: cacheTrapDiskVolUnmounted.setDescription('A CFS disk volume has been unmounted due to an error condition. Any DOSFS volume on this disk has also been unmounted.')
cacheTrapDosfsVolFull = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 39, 2, 0, 7)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceUsageDosfsVolumeName"))
if mibBuilder.loadTexts: cacheTrapDosfsVolFull.setStatus('current')
if mibBuilder.loadTexts: cacheTrapDosfsVolFull.setDescription('DOSFS Volume is full.')
ciscoCacheEngineMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 3))
ciscoCacheEngineMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 1))
ciscoCacheEngineMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2))
ciscoCacheEngineMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 1, 1)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceFarmGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceBasicGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceDnsGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpServerGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceProxyGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceTimeGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceCacheFarmGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceFreshGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceTCPGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceUrlGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceEventsGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceLogGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceImsGroup"), ("CISCO-CACHE-ENGINE-MIB", "ccePerfGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceReqGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceSaveGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageGroup"), ("CISCO-CACHE-ENGINE-MIB", "cceInterfacesGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCacheEngineMIBCompliance = ciscoCacheEngineMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoCacheEngineMIBCompliance.setDescription('The compliance statement for Cisco Systems entities which implement the cache engine model.')
cceFarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 1)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceFarmEntryIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceFarmGroup = cceFarmGroup.setStatus('current')
if mibBuilder.loadTexts: cceFarmGroup.setDescription('Cache engine farm group.')
cceBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 2)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceBasicIPAddress"), ("CISCO-CACHE-ENGINE-MIB", "cceBasicNetMask"), ("CISCO-CACHE-ENGINE-MIB", "cceBasicGatewayIpAddress"), ("CISCO-CACHE-ENGINE-MIB", "cceBasicCacheName"), ("CISCO-CACHE-ENGINE-MIB", "cceBasicFarmName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceBasicGroup = cceBasicGroup.setStatus('current')
if mibBuilder.loadTexts: cceBasicGroup.setDescription('Cache engine basic group.')
cceDnsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 3)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceDnsDomain"), ("CISCO-CACHE-ENGINE-MIB", "cceDnsEntryIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceDnsGroup = cceDnsGroup.setStatus('current')
if mibBuilder.loadTexts: cceDnsGroup.setDescription('Cache engine DNS group.')
cceIcpClientGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 4)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceIcpClientEnabled"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientWait"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientRetry"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientLocalDomains"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientRemServIpAddress"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientRemServState"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientRemServType"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientRemServIcpPort"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientRemServHttpPort"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpClientRemServSelDomains"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceIcpClientGroup = cceIcpClientGroup.setStatus('current')
if mibBuilder.loadTexts: cceIcpClientGroup.setDescription('Cache engine ICP client group.')
cceIcpServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 5)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceIcpServerEnabled"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpServerPort"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpServerRemClntIPAddress"), ("CISCO-CACHE-ENGINE-MIB", "cceIcpServerRemClntFetch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceIcpServerGroup = cceIcpServerGroup.setStatus('current')
if mibBuilder.loadTexts: cceIcpServerGroup.setDescription('Cache engine ICP server group.')
cceProxyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 6)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceProxyIncomingPort"), ("CISCO-CACHE-ENGINE-MIB", "cceProxyOutgoingAddress"), ("CISCO-CACHE-ENGINE-MIB", "cceProxyOutgoingPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceProxyGroup = cceProxyGroup.setStatus('current')
if mibBuilder.loadTexts: cceProxyGroup.setDescription('Cache engine proxy group.')
cceTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 7)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceTimeGmtTime"), ("CISCO-CACHE-ENGINE-MIB", "cceTimeGmtDate"), ("CISCO-CACHE-ENGINE-MIB", "cceTimeEntryIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceTimeGroup = cceTimeGroup.setStatus('current')
if mibBuilder.loadTexts: cceTimeGroup.setDescription('Cache engine Time group.')
cceCacheFarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 8)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceCacheFarmHealingModeWait"), ("CISCO-CACHE-ENGINE-MIB", "cceCacheFarmHealingModeRetry"), ("CISCO-CACHE-ENGINE-MIB", "cceCacheFarmVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceCacheFarmGroup = cceCacheFarmGroup.setStatus('current')
if mibBuilder.loadTexts: cceCacheFarmGroup.setDescription('Cache engine farm group.')
cceFreshGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 9)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceFreshnessTextAgeMultiplier"), ("CISCO-CACHE-ENGINE-MIB", "cceFreshnessBinaryAgeMultiplier"), ("CISCO-CACHE-ENGINE-MIB", "cceFreshnessTextMaximumTTL"), ("CISCO-CACHE-ENGINE-MIB", "cceFreshnessBinaryMaximumTTL"), ("CISCO-CACHE-ENGINE-MIB", "cceFreshnessUnitsMaximumTTL"), ("CISCO-CACHE-ENGINE-MIB", "cceFreshnessCacheCookies"), ("CISCO-CACHE-ENGINE-MIB", "cceFreshnessTextMaxAge"), ("CISCO-CACHE-ENGINE-MIB", "cceFreshnessBinaryMaxAge"), ("CISCO-CACHE-ENGINE-MIB", "cceFreshnessForceMiss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceFreshGroup = cceFreshGroup.setStatus('current')
if mibBuilder.loadTexts: cceFreshGroup.setDescription('Cache engine fresh group.')
cceTCPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 10)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceTcpServerSendBuffer"), ("CISCO-CACHE-ENGINE-MIB", "cceTcpClientSendBuffer"), ("CISCO-CACHE-ENGINE-MIB", "cceTcpServerRecvBuffer"), ("CISCO-CACHE-ENGINE-MIB", "cceTcpClientRecvBuffer"), ("CISCO-CACHE-ENGINE-MIB", "cceTcpServerReadWriteTimeout"), ("CISCO-CACHE-ENGINE-MIB", "cceTcpClientReadWriteTimeout"), ("CISCO-CACHE-ENGINE-MIB", "cceTcpConnectionIdleTimeout"), ("CISCO-CACHE-ENGINE-MIB", "cceTcpConnectionWaitTimeout"), ("CISCO-CACHE-ENGINE-MIB", "cceTcpConnectionRetry"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceTCPGroup = cceTCPGroup.setStatus('current')
if mibBuilder.loadTexts: cceTCPGroup.setDescription('Cache engine TCP group.')
cceUrlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 11)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceUrlFilterState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceUrlGroup = cceUrlGroup.setStatus('current')
if mibBuilder.loadTexts: cceUrlGroup.setDescription('Cache engine URL group.')
cceEventsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 12)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceEventsTotal"), ("CISCO-CACHE-ENGINE-MIB", "cceEventsCritical"), ("CISCO-CACHE-ENGINE-MIB", "cceEventsWarning"), ("CISCO-CACHE-ENGINE-MIB", "cceEventsNotice"), ("CISCO-CACHE-ENGINE-MIB", "cceEventsEntryType"), ("CISCO-CACHE-ENGINE-MIB", "cceEventsEntryMessage"), ("CISCO-CACHE-ENGINE-MIB", "cceEventsEntryTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceEventsGroup = cceEventsGroup.setStatus('current')
if mibBuilder.loadTexts: cceEventsGroup.setDescription('Cache engine events group.')
cceLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 13)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceLoggingEnabled"), ("CISCO-CACHE-ENGINE-MIB", "cceLoggingInterval"), ("CISCO-CACHE-ENGINE-MIB", "cceLoggingWorkingLogPresent"), ("CISCO-CACHE-ENGINE-MIB", "cceLoggingSize"), ("CISCO-CACHE-ENGINE-MIB", "cceLoggingAge"), ("CISCO-CACHE-ENGINE-MIB", "cceLoggingArchiveLogPresent"), ("CISCO-CACHE-ENGINE-MIB", "cceLoggingArchiveLogSize"), ("CISCO-CACHE-ENGINE-MIB", "cceLoggingWriteFailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceLogGroup = cceLogGroup.setStatus('current')
if mibBuilder.loadTexts: cceLogGroup.setDescription('Cache engine transaction log group.')
cceDiagDumpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 14)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskCreates"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskOpens"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskCloses"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskDeletes"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskReads"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskWrites"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskStats"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskFree"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskWraps"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskOverWrites"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskTruncReads"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskInodeErrors"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskCrcErrors"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpDiskDirCollisions"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpBufferReads"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpBufferReadErrors"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpBufferWrites"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpBufferWriteErrors"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpBufferHits"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpBufferMisses"), ("CISCO-CACHE-ENGINE-MIB", "cceDiagDumpBufferSeekErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceDiagDumpGroup = cceDiagDumpGroup.setStatus('current')
if mibBuilder.loadTexts: cceDiagDumpGroup.setDescription('Cache engine diagdump group.')
cceImsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 15)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceImsClientRequestTotal"), ("CISCO-CACHE-ENGINE-MIB", "cceImsReceived"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientTotalFromCache"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientFreshFromCache"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientStaleFromCache"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientTotalCacheMiss"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientFreshCacheMiss"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientStaleCacheMiss"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientTotalReval"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientFreshReval"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientStaleReval"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientRequestToServer"), ("CISCO-CACHE-ENGINE-MIB", "cceImsServerTotalIssued"), ("CISCO-CACHE-ENGINE-MIB", "cceImsServerTotalDueClient"), ("CISCO-CACHE-ENGINE-MIB", "cceImsServerFreshDueClient"), ("CISCO-CACHE-ENGINE-MIB", "cceImsServerStaleDueClient"), ("CISCO-CACHE-ENGINE-MIB", "cceImsServerTotalDueExpiration"), ("CISCO-CACHE-ENGINE-MIB", "cceImsClientFreshDueExpiration"), ("CISCO-CACHE-ENGINE-MIB", "cceImsServerStaleDueExpiration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceImsGroup = cceImsGroup.setStatus('current')
if mibBuilder.loadTexts: cceImsGroup.setDescription('Cache engine IMS group.')
ccePerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 16)).setObjects(("CISCO-CACHE-ENGINE-MIB", "ccePerformanceReqPerSecMax"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceReqPerSecLast"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceBytesPerSecMax"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceBytesPerSecLast"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceSecPerReqAvg"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceSecPerReqMin"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceSecPerReqMax"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceSecPerReqLast"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceHitsSecPerReqAvg"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceHitsSecPerReqMin"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceHitsSecPerReqMax"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceHitsSecPerReqLast"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceMissSecPerReqAvg"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceMissSecPerReqMin"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceMissSecPerReqMax"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceMissSecPerReqLast"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceObjectSizeAvg"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceObjectSizeMin"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceObjectSizeMax"), ("CISCO-CACHE-ENGINE-MIB", "ccePerformanceObjectSizeLast"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccePerfGroup = ccePerfGroup.setStatus('current')
if mibBuilder.loadTexts: ccePerfGroup.setDescription('Cache engine performance group.')
cceReqGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 17)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceRequestsForcedReloadTotal"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsForcedReloadPercent"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsNearHitsTotal"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsNearHitsPercent"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsServerErrorTotal"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsServerErrorPercent"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsUrlBlockedTotal"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsUrlBlockedPercent"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsIcpClientHits"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsIcpClientPercentage"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsIcpServerHits"), ("CISCO-CACHE-ENGINE-MIB", "cceRequestsIcpServerPercentage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceReqGroup = cceReqGroup.setStatus('current')
if mibBuilder.loadTexts: cceReqGroup.setDescription('Cache engine request group.')
cceSaveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 18)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceSavingsRequestsTotal"), ("CISCO-CACHE-ENGINE-MIB", "cceSavingsRequestsHits"), ("CISCO-CACHE-ENGINE-MIB", "cceSavingsRequestsMiss"), ("CISCO-CACHE-ENGINE-MIB", "cceSavingsRequestsSavings"), ("CISCO-CACHE-ENGINE-MIB", "cceSavingsBytesServedTotal"), ("CISCO-CACHE-ENGINE-MIB", "cceSavingsBytesServedHits"), ("CISCO-CACHE-ENGINE-MIB", "cceSavingsBytesServedMiss"), ("CISCO-CACHE-ENGINE-MIB", "cceSavingsBytesServedSavings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceSaveGroup = cceSaveGroup.setStatus('current')
if mibBuilder.loadTexts: cceSaveGroup.setDescription('Cache engine savings group.')
cceUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 19)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceUsageCPUCurrent"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageCPUPeak"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDiskCurrent"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDiskPeak"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageNetCurrent"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageNetPeak"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageConnsCurrent"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageConnsPeak"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDiskVolumeName"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDiskVolumeEverMounted"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDiskVolumeCurrentlyMounted"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDiskVolumeUnmountReason"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDiskVolumeCurrent"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDiskVolumePeak"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDosfsVolumeName"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDosfsVolumeState"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDosfsVolumeFreeSpace"), ("CISCO-CACHE-ENGINE-MIB", "cceUsageDosfsVolumeTotalSpace"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceUsageGroup = cceUsageGroup.setStatus('current')
if mibBuilder.loadTexts: cceUsageGroup.setDescription('Cache engine usage group.')
cceInterfacesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 39, 3, 2, 20)).setObjects(("CISCO-CACHE-ENGINE-MIB", "cceIfFullDuplex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cceInterfacesGroup = cceInterfacesGroup.setStatus('current')
if mibBuilder.loadTexts: cceInterfacesGroup.setDescription('Cache engine Interfaces group.')
mibBuilder.exportSymbols("CISCO-CACHE-ENGINE-MIB", cceTimeGmtTime=cceTimeGmtTime, cceUsageDiskPeak=cceUsageDiskPeak, cceDiagDumpBufferHits=cceDiagDumpBufferHits, cceUsageCPUPeak=cceUsageCPUPeak, cceBasic=cceBasic, cceTcp=cceTcp, cceLoggingArchiveLogPresent=cceLoggingArchiveLogPresent, cceProxyOutgoingPort=cceProxyOutgoingPort, cceRequestsServerErrorPercent=cceRequestsServerErrorPercent, cceTuningGroup=cceTuningGroup, cceEventsEntryIndex=cceEventsEntryIndex, ccePerformanceHitsSecPerReqMax=ccePerformanceHitsSecPerReqMax, cacheTrapReadDiskError=cacheTrapReadDiskError, ciscoCacheEngineMIBObjects=ciscoCacheEngineMIBObjects, ciscoCacheEngineConf=ciscoCacheEngineConf, cceUsageConnsPeak=cceUsageConnsPeak, cceEventsWarning=cceEventsWarning, cceLoggingEnabled=cceLoggingEnabled, cceFreshnessForceMiss=cceFreshnessForceMiss, cceIcpClient=cceIcpClient, cceDiagDumpDiskCloses=cceDiagDumpDiskCloses, cceImsClientStaleFromCache=cceImsClientStaleFromCache, cceRequestsServerErrorTotal=cceRequestsServerErrorTotal, cceUsageDiskVolumeEntryIndex=cceUsageDiskVolumeEntryIndex, cceDiagDumpBufferMisses=cceDiagDumpBufferMisses, cceReportGroup=cceReportGroup, cceFreshnessBinaryMaxAge=cceFreshnessBinaryMaxAge, ciscoCacheEngineMIBConformance=ciscoCacheEngineMIBConformance, cceTimeGroup=cceTimeGroup, cceBasicIPAddress=cceBasicIPAddress, ccePerformanceSecPerReqMin=ccePerformanceSecPerReqMin, cceIcpClientRemServTable=cceIcpClientRemServTable, cceRequestsIcpServerHits=cceRequestsIcpServerHits, ccePerformanceSecPerReqAvg=ccePerformanceSecPerReqAvg, cceUsageDosfsVolumeTotalSpace=cceUsageDosfsVolumeTotalSpace, cceRequestsNearHitsTotal=cceRequestsNearHitsTotal, cceIcpClientRetry=cceIcpClientRetry, cceFarm=cceFarm, ciscoCacheEngineMIBTraps=ciscoCacheEngineMIBTraps, cceUsageDosfsVolumeEntryIndex=cceUsageDosfsVolumeEntryIndex, cceIms=cceIms, cceImsClientRequestToServer=cceImsClientRequestToServer, cceImsClientRequestTotal=cceImsClientRequestTotal, cceUrlFilterState=cceUrlFilterState, cceRequestsUrlBlockedTotal=cceRequestsUrlBlockedTotal, cceProxyOutgoingAddress=cceProxyOutgoingAddress, cceEventsEntryType=cceEventsEntryType, cceAccessGroup=cceAccessGroup, cceIcpClientWait=cceIcpClientWait, ccePerformance=ccePerformance, cceImsClientFreshFromCache=cceImsClientFreshFromCache, cceIcpClientRemServState=cceIcpClientRemServState, cacheTrapTooManyThreadsDead=cacheTrapTooManyThreadsDead, cceTcpClientSendBuffer=cceTcpClientSendBuffer, cceDiagDumpBufferReadErrors=cceDiagDumpBufferReadErrors, cceHardwareGroup=cceHardwareGroup, cceRequestsForcedReloadPercent=cceRequestsForcedReloadPercent, cceUsageDosfsVolumeTable=cceUsageDosfsVolumeTable, cceFarmGroup=cceFarmGroup, cceDnsDomain=cceDnsDomain, cceUsageNetPeak=cceUsageNetPeak, ccePerformanceMissSecPerReqMax=ccePerformanceMissSecPerReqMax, cceBasicCacheName=cceBasicCacheName, cceLoggingAge=cceLoggingAge, cceRequestsUrlBlockedPercent=cceRequestsUrlBlockedPercent, ccePerformanceSecPerReqMax=ccePerformanceSecPerReqMax, ccePerformanceMissSecPerReqMin=ccePerformanceMissSecPerReqMin, ciscoCacheEngineMIBGroups=ciscoCacheEngineMIBGroups, cceEvents=cceEvents, cceLoggingWorkingLogPresent=cceLoggingWorkingLogPresent, cceRequestsIcpClientHits=cceRequestsIcpClientHits, cceFreshnessBinaryMaximumTTL=cceFreshnessBinaryMaximumTTL, cceUsageDiskCurrent=cceUsageDiskCurrent, ciscoCacheEngineMIBTrapPrefix=ciscoCacheEngineMIBTrapPrefix, cceTcpServerRecvBuffer=cceTcpServerRecvBuffer, ccePerformanceReqPerSecLast=ccePerformanceReqPerSecLast, ccePerformanceHitsSecPerReqAvg=ccePerformanceHitsSecPerReqAvg, cceDiagDumpDiskReads=cceDiagDumpDiskReads, cceCacheFarmVersion=cceCacheFarmVersion, cceIcpClientRemServIpAddress=cceIcpClientRemServIpAddress, cceRequestsNearHitsPercent=cceRequestsNearHitsPercent, cceUsageDosfsVolumeFreeSpace=cceUsageDosfsVolumeFreeSpace, cacheTrapWriteTransFailed=cacheTrapWriteTransFailed, cceTcpServerReadWriteTimeout=cceTcpServerReadWriteTimeout, ccePerformanceObjectSizeLast=ccePerformanceObjectSizeLast, cceUsageDiskVolumeTable=cceUsageDiskVolumeTable, cceImsClientTotalReval=cceImsClientTotalReval, ciscoCacheEngineMIBCompliance=ciscoCacheEngineMIBCompliance, cceUsageGroup=cceUsageGroup, cceSavingsRequestsHits=cceSavingsRequestsHits, cceLogging=cceLogging, cceEventsNotice=cceEventsNotice, cceImsServerTotalDueClient=cceImsServerTotalDueClient, cceReqGroup=cceReqGroup, cceImsClientStaleCacheMiss=cceImsClientStaleCacheMiss, cceSaveGroup=cceSaveGroup, cceIcpClientRemServIndex=cceIcpClientRemServIndex, cceUsageDiskVolumeEverMounted=cceUsageDiskVolumeEverMounted, cceImsServerTotalIssued=cceImsServerTotalIssued, cceTcpConnectionWaitTimeout=cceTcpConnectionWaitTimeout, cceIcpClientRemServHttpPort=cceIcpClientRemServHttpPort, ccePerformanceReqPerSecMax=ccePerformanceReqPerSecMax, cceDiagDumpGroup=cceDiagDumpGroup, cceTimeGmtDate=cceTimeGmtDate, cceTCPGroup=cceTCPGroup, cceDnsEntryIpAddress=cceDnsEntryIpAddress, cceTime=cceTime, cceBasicNetMask=cceBasicNetMask, cceBasicGatewayIpAddress=cceBasicGatewayIpAddress, cceDiagDumpBufferWriteErrors=cceDiagDumpBufferWriteErrors, cceIcpClientLocalDomains=cceIcpClientLocalDomains, cceDiagDumpDiskTruncReads=cceDiagDumpDiskTruncReads, cceDnsTable=cceDnsTable, cceFreshnessTextMaxAge=cceFreshnessTextMaxAge, cceUsageNetCurrent=cceUsageNetCurrent, cceSavingsRequestsMiss=cceSavingsRequestsMiss, cceRequestsIcpServerPercentage=cceRequestsIcpServerPercentage, cceSavingsBytesServedHits=cceSavingsBytesServedHits, cceImsClientFreshDueExpiration=cceImsClientFreshDueExpiration, cceLogGroup=cceLogGroup, cceRequestsIcpClientPercentage=cceRequestsIcpClientPercentage, cceDiagDumpBufferWrites=cceDiagDumpBufferWrites, cceFreshnessCacheCookies=cceFreshnessCacheCookies, cceTimeEntry=cceTimeEntry, cceProxy=cceProxy, cceImsClientFreshCacheMiss=cceImsClientFreshCacheMiss, cceEventsCritical=cceEventsCritical, cceTcpServerSendBuffer=cceTcpServerSendBuffer, cceUrlGroup=cceUrlGroup, cceIcpServerRemClntIndex=cceIcpServerRemClntIndex, cceIcpClientRemServSelDomains=cceIcpClientRemServSelDomains, ccePerformanceObjectSizeMax=ccePerformanceObjectSizeMax, cceSavingsRequestsTotal=cceSavingsRequestsTotal, cceBasicGroup=cceBasicGroup, cceLoggingSize=cceLoggingSize, cacheTrapDosfsVolFull=cacheTrapDosfsVolFull, cceEventsGroup=cceEventsGroup, cceIcpServerGroup=cceIcpServerGroup, cceIcpServerPort=cceIcpServerPort, cceDnsEntry=cceDnsEntry, cceDiagDumpDiskFree=cceDiagDumpDiskFree, cceUsageConnsCurrent=cceUsageConnsCurrent, ccePerformanceMissSecPerReqLast=ccePerformanceMissSecPerReqLast, cceDnsGroup=cceDnsGroup, cceImsGroup=cceImsGroup, cceDnsEntryIndex=cceDnsEntryIndex, cceTcpConnectionRetry=cceTcpConnectionRetry, cceUsageDosfsVolumeName=cceUsageDosfsVolumeName, cceDiagDumpDiskOpens=cceDiagDumpDiskOpens, ccePerformanceObjectSizeMin=ccePerformanceObjectSizeMin, PYSNMP_MODULE_ID=ciscoCacheEngineMIB, cceDiagDumpDiskCreates=cceDiagDumpDiskCreates, cceFreshness=cceFreshness, ciscoCacheEngineMIB=ciscoCacheEngineMIB, cceUsageDiskVolumeCurrentlyMounted=cceUsageDiskVolumeCurrentlyMounted, cceIfFullDuplex=cceIfFullDuplex, cceTcpClientReadWriteTimeout=cceTcpClientReadWriteTimeout, cceBasicFarmName=cceBasicFarmName, cceLoggingWriteFailReason=cceLoggingWriteFailReason, ccePerformanceObjectSizeAvg=ccePerformanceObjectSizeAvg, cceImsServerStaleDueExpiration=cceImsServerStaleDueExpiration, cceDiagDumpDiskOverWrites=cceDiagDumpDiskOverWrites, cceFreshGroup=cceFreshGroup, cceIcpServerRemClntFetch=cceIcpServerRemClntFetch, ccePerformanceHitsSecPerReqMin=ccePerformanceHitsSecPerReqMin, cacheTrapDiskVolUnmounted=cacheTrapDiskVolUnmounted, cceProxyGroup=cceProxyGroup, cceImsServerTotalDueExpiration=cceImsServerTotalDueExpiration, cceStatsGroup=cceStatsGroup, cceEventsEntry=cceEventsEntry, cceTimeTable=cceTimeTable, cceEventsTotal=cceEventsTotal, cceSavings=cceSavings, cceDiagDumpDiskWraps=cceDiagDumpDiskWraps, cceUsageDiskVolumeCurrent=cceUsageDiskVolumeCurrent, cceIcpServerRemClntEntry=cceIcpServerRemClntEntry, cceLoggingArchiveLogSize=cceLoggingArchiveLogSize, cceDiagDumpDiskWrites=cceDiagDumpDiskWrites, cceSavingsBytesServedMiss=cceSavingsBytesServedMiss, ccePerformanceBytesPerSecLast=ccePerformanceBytesPerSecLast, cceSavingsBytesServedTotal=cceSavingsBytesServedTotal, cceUsageDiskVolumePeak=cceUsageDiskVolumePeak, cceUsageDosfsVolumeEntry=cceUsageDosfsVolumeEntry, cceIcpClientRemServEntry=cceIcpClientRemServEntry, ccePerformanceSecPerReqLast=ccePerformanceSecPerReqLast, cceIcpClientGroup=cceIcpClientGroup, cceIcpClientRemServIcpPort=cceIcpClientRemServIcpPort, cceUrlFilter=cceUrlFilter, cceRequestsForcedReloadTotal=cceRequestsForcedReloadTotal, cceTimeEntryIndex=cceTimeEntryIndex, cceCacheFarmHealingModeWait=cceCacheFarmHealingModeWait, cceIcpServer=cceIcpServer, cceTcpConnectionIdleTimeout=cceTcpConnectionIdleTimeout, cceDiagDumpDiskStats=cceDiagDumpDiskStats, cceInterfacesGroup=cceInterfacesGroup, cceUsageCPUCurrent=cceUsageCPUCurrent, cceDiagDumpDiskInodeErrors=cceDiagDumpDiskInodeErrors, cceDiagDumpDiskDirCollisions=cceDiagDumpDiskDirCollisions, cceImsClientTotalFromCache=cceImsClientTotalFromCache, cceIcpServerRemClntTable=cceIcpServerRemClntTable, cceRequests=cceRequests, cceCacheFarmHealingModeRetry=cceCacheFarmHealingModeRetry, cceFarmEntryIpAddress=cceFarmEntryIpAddress, cceFreshnessUnitsMaximumTTL=cceFreshnessUnitsMaximumTTL, cceEventsTable=cceEventsTable, cceImsClientTotalCacheMiss=cceImsClientTotalCacheMiss, cceDns=cceDns, cceProxyIncomingPort=cceProxyIncomingPort, cceUsageDosfsVolumeState=cceUsageDosfsVolumeState, cceImsReceived=cceImsReceived, cceUsageDiskVolumeName=cceUsageDiskVolumeName, cceEventsEntryTime=cceEventsEntryTime, cceUsage=cceUsage, ccePerformanceBytesPerSecMax=ccePerformanceBytesPerSecMax, ccePerformanceHitsSecPerReqLast=ccePerformanceHitsSecPerReqLast, cceDiagDump=cceDiagDump, cceDiagDumpDiskDeletes=cceDiagDumpDiskDeletes, cceDiagDumpBufferSeekErrors=cceDiagDumpBufferSeekErrors, cceInterfaces=cceInterfaces, cceIcpClientEnabled=cceIcpClientEnabled, cceIcpServerRemClntIPAddress=cceIcpServerRemClntIPAddress, cceFreshnessBinaryAgeMultiplier=cceFreshnessBinaryAgeMultiplier, cceFarmEntryIndex=cceFarmEntryIndex, ccePerformanceMissSecPerReqAvg=ccePerformanceMissSecPerReqAvg, cceFreshnessTextMaximumTTL=cceFreshnessTextMaximumTTL, cceFarmTable=cceFarmTable, ciscoCacheEngineMIBCompliances=ciscoCacheEngineMIBCompliances, ccePerfGroup=ccePerfGroup, cceIcpServerEnabled=cceIcpServerEnabled, cceFarmEntry=cceFarmEntry, cceCacheFarm=cceCacheFarm, cceEventsEntryMessage=cceEventsEntryMessage, cceImsServerFreshDueClient=cceImsServerFreshDueClient, cceSavingsBytesServedSavings=cceSavingsBytesServedSavings, cceDiagDumpDiskCrcErrors=cceDiagDumpDiskCrcErrors, cceImsServerStaleDueClient=cceImsServerStaleDueClient, cceUsageDiskVolumeEntry=cceUsageDiskVolumeEntry, cceIcpClientRemServType=cceIcpClientRemServType, cacheTrapWccpDisabled=cacheTrapWccpDisabled, cceTcpClientRecvBuffer=cceTcpClientRecvBuffer, cceLoggingInterval=cceLoggingInterval, cceDiagDumpBufferReads=cceDiagDumpBufferReads, cceImsClientStaleReval=cceImsClientStaleReval, cceUsageDiskVolumeUnmountReason=cceUsageDiskVolumeUnmountReason, cceTimeEntryIpAddress=cceTimeEntryIpAddress, cceSavingsRequestsSavings=cceSavingsRequestsSavings, cacheTrapWriteDiskError=cacheTrapWriteDiskError, cceImsClientFreshReval=cceImsClientFreshReval, cceCacheFarmGroup=cceCacheFarmGroup, cceConfigGroup=cceConfigGroup, cceFreshnessTextAgeMultiplier=cceFreshnessTextAgeMultiplier)
