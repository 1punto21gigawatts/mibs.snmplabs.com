#
# PySNMP MIB module GWSMTPMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GWSMTPMIB
# Produced by pysmi-0.3.4 at Wed May  1 13:20:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, IpAddress, MibIdentifier, enterprises, TimeTicks, Gauge32, iso, ModuleIdentity, Bits, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "IpAddress", "MibIdentifier", "enterprises", "TimeTicks", "Gauge32", "iso", "ModuleIdentity", "Bits", "Unsigned32", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
novell = MibIdentifier((1, 3, 6, 1, 4, 1, 23))
gateways = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2))
gwsmtp = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 51))
gwsmtpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 51, 1))
gwsmtpTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 51, 2))
gwsmtpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 51, 3))
gwsmtpGatewayName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpGatewayName.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpGatewayName.setDescription('The GroupWise SMTP Gateway name.')
gwsmtpTimeUp = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpTimeUp.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpTimeUp.setDescription('Uptime of the GroupWise SMTP Gateway.')
gwsmtpLinkGroupWise = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpLinkGroupWise.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpLinkGroupWise.setDescription('GroupWise SMTP Gateway Link: UP or DOWN')
gwsmtpLinkFrgn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpLinkFrgn.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpLinkFrgn.setDescription('GroupWise SMTP Gateway Foreign Link: UP or DOWN')
gwsmtpStatBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpStatBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpStatBytesOut.setDescription('The number of message bytes sent to GroupWise SMTP.')
gwsmtpStatBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpStatBytesIn.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpStatBytesIn.setDescription('The number of message bytes received from GroupWise SMTP.')
gwsmtpStatMsgsOut = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpStatMsgsOut.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpStatMsgsOut.setDescription('The number of messages sent to GroupWise SMTP.')
gwsmtpStatMsgsIn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpStatMsgsIn.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpStatMsgsIn.setDescription('The number of messages received from SMTP.')
gwsmtpStatStatusesOut = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpStatStatusesOut.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpStatStatusesOut.setDescription('The number of statuses sent to SMTP.')
gwsmtpStatStatusesIn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpStatStatusesIn.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpStatStatusesIn.setDescription('The number of statuses received from SMTP.')
gwsmtpStatErrorsOut = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpStatErrorsOut.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpStatErrorsOut.setDescription('The number of failed transfers to SMTP.')
gwsmtpStatErrorsIn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpStatErrorsIn.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpStatErrorsIn.setDescription('The number of failed transfers from SMTP.')
gwsmtpStatTimeReset = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpStatTimeReset.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpStatTimeReset.setDescription('Time since statistics were reset on SMTP Gateway.')
gwsmtpQueueWpcsout = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpQueueWpcsout.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpQueueWpcsout.setDescription('The number of messages to be processed by SMTP (WPCSOUT).')
gwsmtpQueueWpcsin = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpQueueWpcsin.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpQueueWpcsin.setDescription('The number of messages to be processed by GroupWise Message Server (WPCSIN).')
gwsmtpQueueGwhold = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpQueueGwhold.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpQueueGwhold.setDescription('The number messages holding for later processing by SMTP (GWHOLD).')
gwsmtpQueueGwprob = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpQueueGwprob.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpQueueGwprob.setDescription("The number messages in SMTP's problem directory (GWPROB).")
gwsmtpStatInterval = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpStatInterval.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpStatInterval.setDescription('Statistics interval for the GroupWise SMTP Gateway.')
gwsmtpStatIntervalMsgsOut = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpStatIntervalMsgsOut.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpStatIntervalMsgsOut.setDescription('The number of messages sent to GroupWise SMTP in statistics interval.')
gwsmtpStatIntervalMsgsIn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpStatIntervalMsgsIn.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpStatIntervalMsgsIn.setDescription('The number of messages received from SMTP in statistics interval.')
gwsmtpStatIntervalStatusesOut = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpStatIntervalStatusesOut.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpStatIntervalStatusesOut.setDescription('The number of statuses sent to SMTP in statistics interval.')
gwsmtpStatIntervalStatusesIn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpStatIntervalStatusesIn.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpStatIntervalStatusesIn.setDescription('The number of statuses received from SMTP in statistics interval.')
gwsmtpStatIntervalErrorsOut = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpStatIntervalErrorsOut.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpStatIntervalErrorsOut.setDescription('The number of failed transfers to SMTP in statistics interval.')
gwsmtpStatIntervalErrorsIn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpStatIntervalErrorsIn.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpStatIntervalErrorsIn.setDescription('The number of failed transfers from SMTP in statistics interval.')
gwsmtpQThresholdCheckInterval = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 25), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwsmtpQThresholdCheckInterval.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpQThresholdCheckInterval.setDescription('The number of minutes between directory scans or directory threshold traps for SMTP.')
gwsmtpQThresholdWpcsout = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 26), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwsmtpQThresholdWpcsout.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpQThresholdWpcsout.setDescription('The number of messages waiting for SMTP gateway before firing threshold trap (WPCSOUT).')
gwsmtpQThresholdWpcsin = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 27), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwsmtpQThresholdWpcsin.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpQThresholdWpcsin.setDescription('The number of messages waiting for Message Server from SMTP before firing threshold trap (WPCSIN).')
gwsmtpQThresholdGwhold = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 28), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwsmtpQThresholdGwhold.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpQThresholdGwhold.setDescription('The number of defered messages waiting for SMTP gateway before firing threshold trap (GWHOLD).')
gwsmtpQThresholdGwprob = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 29), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwsmtpQThresholdGwprob.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpQThresholdGwprob.setDescription('The number of problem messages SMTP gateway moved before firing threshold trap (GWPROB).')
gwsmtpThresholdMsgSizeIn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 30), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwsmtpThresholdMsgSizeIn.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpThresholdMsgSizeIn.setDescription('The max size of an incoming message the SMTP gateway can process before firing threshold trap.')
gwsmtpThresholdMsgSizeOut = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 31), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwsmtpThresholdMsgSizeOut.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpThresholdMsgSizeOut.setDescription('The max size of an outgoing message the SMTP gateway can process before firing threshold trap.')
gwsmtpActionResetStats = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: gwsmtpActionResetStats.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpActionResetStats.setDescription('Reset the SMTP gateway statistics.')
gwsmtpActionRestartGateway = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("restart", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: gwsmtpActionRestartGateway.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpActionRestartGateway.setDescription('Restart the SMTP gateway.')
gwsmtpdThreadsAvailSend = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpdThreadsAvailSend.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpdThreadsAvailSend.setDescription('The number of SMTP Daemon send threads available.')
gwsmtpdThreadsAvailReceive = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpdThreadsAvailReceive.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpdThreadsAvailReceive.setDescription('The number of SMTP Daemon receive threads available.')
gwsmtpdThreadsActiveSend = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpdThreadsActiveSend.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpdThreadsActiveSend.setDescription('The number of SMTP Daemon send threads active.')
gwsmtpdThreadsActiveReceive = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpdThreadsActiveReceive.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpdThreadsActiveReceive.setDescription('The number of SMTP Daemon receive threads active.')
gwsmtpdErrorsMXLookup = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpdErrorsMXLookup.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpdErrorsMXLookup.setDescription('The number of SMTP Daemon DNS MX lookup errors.')
gwsmtpdErrorsHostsUnknown = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpdErrorsHostsUnknown.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpdErrorsHostsUnknown.setDescription('The number of SMTP Daemon unknown destination hosts.')
gwsmtpdErrorsHostsDown = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpdErrorsHostsDown.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpdErrorsHostsDown.setDescription('The number of SMTP Daemon TCP/IP connect errors.')
gwsmtpdErrorsTCPRead = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpdErrorsTCPRead.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpdErrorsTCPRead.setDescription('The number of SMTP Daemon TCP/IP read errors.')
gwsmtpdErrorsTCPWrite = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpdErrorsTCPWrite.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpdErrorsTCPWrite.setDescription('The number of SMTP Daemon TCP/IP write errors.')
gwsmtpdMessagesIn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpdMessagesIn.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpdMessagesIn.setDescription('The number of SMTP Daemon messages received.')
gwsmtpdMessagesOut = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpdMessagesOut.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpdMessagesOut.setDescription('The number of SMTP Daemon messages sent.')
gwsmtpQThresholdSend = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 59), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwsmtpQThresholdSend.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpQThresholdSend.setDescription('The number of send messages SMTP gateway can queue to daemon before firing threshold trap (SEND).')
gwsmtpQThresholdReceive = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 60), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwsmtpQThresholdReceive.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpQThresholdReceive.setDescription('The number of messages queued by daemon for SMTP gateway before firing threshold trap (RECEIVE).')
gwsmtpQThresholdDefer = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 61), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwsmtpQThresholdDefer.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpQThresholdDefer.setDescription('The number of messages to have daemon retry sending for SMTP gateway before firing threshold trap (DEFER).')
gwsmtpQueueSend = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpQueueSend.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpQueueSend.setDescription('The number of messages queued to daemon for SMTP gateway (SEND).')
gwsmtpQueueReceive = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpQueueReceive.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpQueueReceive.setDescription('The number of messages queued to SMTP gateway from daemon (RECEIVE).')
gwsmtpQueueDefer = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwsmtpQueueDefer.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpQueueDefer.setDescription('The number of messages queued to retry for daemon on SMTP gateway (DEFER).')
gwsmtpTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 2, 1), Integer32())
if mibBuilder.loadTexts: gwsmtpTrapTime.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpTrapTime.setDescription('The time the trap occurred. Seconds since Jan 1, 1970 (GMT)')
gwsmtpTrapDomainName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 51, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: gwsmtpTrapDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: gwsmtpTrapDomainName.setDescription('The Domain for which this gateway operates.')
gwsmtpStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 51, 3) + (0,1)).setObjects(("GWSMTPMIB", "gwsmtpTrapTime"), ("GWSMTPMIB", "gwsmtpGatewayName"))
if mibBuilder.loadTexts: gwsmtpStartTrap.setDescription('GroupWise SMTP Gateway start.')
gwsmtpStopTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 51, 3) + (0,2)).setObjects(("GWSMTPMIB", "gwsmtpTrapTime"), ("GWSMTPMIB", "gwsmtpGatewayName"))
if mibBuilder.loadTexts: gwsmtpStopTrap.setDescription('GroupWise SMTP Gateway stop.')
gwsmtpRestartTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 51, 3) + (0,3)).setObjects(("GWSMTPMIB", "gwsmtpTrapTime"), ("GWSMTPMIB", "gwsmtpGatewayName"))
if mibBuilder.loadTexts: gwsmtpRestartTrap.setDescription('GroupWise SMTP Gateway restart.')
gwsmtpGroupWiseLinkTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 51, 3) + (0,4)).setObjects(("GWSMTPMIB", "gwsmtpTrapTime"), ("GWSMTPMIB", "gwsmtpGatewayName"))
if mibBuilder.loadTexts: gwsmtpGroupWiseLinkTrap.setDescription('GroupWise Link lost by GroupWise SMTP Gateway')
gwsmtpMovedToProbTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 51, 3) + (0,6)).setObjects(("GWSMTPMIB", "gwsmtpTrapTime"), ("GWSMTPMIB", "gwsmtpGatewayName"))
if mibBuilder.loadTexts: gwsmtpMovedToProbTrap.setDescription('Problem message moved to GWPROB directory for SMTP gateway')
gwsmtpWpcsoutThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 51, 3) + (0,7)).setObjects(("GWSMTPMIB", "gwsmtpTrapTime"), ("GWSMTPMIB", "gwsmtpGatewayName"))
if mibBuilder.loadTexts: gwsmtpWpcsoutThreshTrap.setDescription('Threshold for messages to be processed by SMTP gateway has been exceeded (WPCSOUT)')
gwsmtpWpcsinThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 51, 3) + (0,8)).setObjects(("GWSMTPMIB", "gwsmtpTrapTime"), ("GWSMTPMIB", "gwsmtpGatewayName"))
if mibBuilder.loadTexts: gwsmtpWpcsinThreshTrap.setDescription('The threshold for processed messages by SMTP gateway has been exceeded (WPCSIN)')
gwsmtpGwholdThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 51, 3) + (0,9)).setObjects(("GWSMTPMIB", "gwsmtpTrapTime"), ("GWSMTPMIB", "gwsmtpGatewayName"))
if mibBuilder.loadTexts: gwsmtpGwholdThreshTrap.setDescription('The threshold for defered messages in hold area for SMTP gateway has been exceeded (GWHOLD)')
gwsmtpGwprobThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 51, 3) + (0,10)).setObjects(("GWSMTPMIB", "gwsmtpTrapTime"), ("GWSMTPMIB", "gwsmtpGatewayName"))
if mibBuilder.loadTexts: gwsmtpGwprobThreshTrap.setDescription('The threshold for problem messages in problem area for SMTP gateway has been exceeded (GWPROB)')
gwsmtpInSizeThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 51, 3) + (0,11)).setObjects(("GWSMTPMIB", "gwsmtpTrapTime"), ("GWSMTPMIB", "gwsmtpGatewayName"))
if mibBuilder.loadTexts: gwsmtpInSizeThreshTrap.setDescription('The threshold for a incomming message for SMTP gateway has been exceeded')
gwsmtpOutSizeThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 51, 3) + (0,12)).setObjects(("GWSMTPMIB", "gwsmtpTrapTime"), ("GWSMTPMIB", "gwsmtpGatewayName"))
if mibBuilder.loadTexts: gwsmtpOutSizeThreshTrap.setDescription('The threshold for a outgoing message for SMTP gateway has been exceeded')
gwsmtpReadErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 51, 3) + (0,32)).setObjects(("GWSMTPMIB", "gwsmtpTrapTime"), ("GWSMTPMIB", "gwsmtpGatewayName"))
if mibBuilder.loadTexts: gwsmtpReadErrorTrap.setDescription('TCP/IP read error on GroupWise SMTP Gateway daemon')
gwsmtpWriteErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 51, 3) + (0,33)).setObjects(("GWSMTPMIB", "gwsmtpTrapTime"), ("GWSMTPMIB", "gwsmtpGatewayName"))
if mibBuilder.loadTexts: gwsmtpWriteErrorTrap.setDescription('TCP/IP write error on GroupWise SMTP Gateway daemon')
gwsmtpSendThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 51, 3) + (0,34)).setObjects(("GWSMTPMIB", "gwsmtpTrapTime"), ("GWSMTPMIB", "gwsmtpGatewayName"))
if mibBuilder.loadTexts: gwsmtpSendThreshTrap.setDescription('The threshold for messages in daemon send area for SMTP gateway has been exceeded (SEND)')
gwsmtpReceiveThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 51, 3) + (0,35)).setObjects(("GWSMTPMIB", "gwsmtpTrapTime"), ("GWSMTPMIB", "gwsmtpGatewayName"))
if mibBuilder.loadTexts: gwsmtpReceiveThreshTrap.setDescription('The threshold for messages in daemon receive area for SMTP gateway has been exceeded (RECEIVE)')
gwsmtpDeferThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 51, 3) + (0,36)).setObjects(("GWSMTPMIB", "gwsmtpTrapTime"), ("GWSMTPMIB", "gwsmtpGatewayName"))
if mibBuilder.loadTexts: gwsmtpDeferThreshTrap.setDescription('The threshold for messages in daemon defer area for SMTP gateway has been exceeded (DEFER)')
mibBuilder.exportSymbols("GWSMTPMIB", gwsmtpQueueReceive=gwsmtpQueueReceive, gwsmtpQueueWpcsin=gwsmtpQueueWpcsin, gwsmtpRestartTrap=gwsmtpRestartTrap, gwsmtpQThresholdGwhold=gwsmtpQThresholdGwhold, gwsmtp=gwsmtp, gwsmtpStatInterval=gwsmtpStatInterval, gwsmtpInSizeThreshTrap=gwsmtpInSizeThreshTrap, gwsmtpQThresholdCheckInterval=gwsmtpQThresholdCheckInterval, gwsmtpStatErrorsIn=gwsmtpStatErrorsIn, gwsmtpGwprobThreshTrap=gwsmtpGwprobThreshTrap, gwsmtpDeferThreshTrap=gwsmtpDeferThreshTrap, gwsmtpStopTrap=gwsmtpStopTrap, gwsmtpReadErrorTrap=gwsmtpReadErrorTrap, gwsmtpStatIntervalMsgsOut=gwsmtpStatIntervalMsgsOut, gwsmtpActionResetStats=gwsmtpActionResetStats, gwsmtpdErrorsMXLookup=gwsmtpdErrorsMXLookup, gwsmtpTraps=gwsmtpTraps, gwsmtpThresholdMsgSizeOut=gwsmtpThresholdMsgSizeOut, gwsmtpdThreadsAvailSend=gwsmtpdThreadsAvailSend, gwsmtpdErrorsHostsDown=gwsmtpdErrorsHostsDown, gwsmtpQueueDefer=gwsmtpQueueDefer, gwsmtpTrapInfo=gwsmtpTrapInfo, gwsmtpQThresholdReceive=gwsmtpQThresholdReceive, gwsmtpTrapTime=gwsmtpTrapTime, gwsmtpStatTimeReset=gwsmtpStatTimeReset, gwsmtpQThresholdGwprob=gwsmtpQThresholdGwprob, gwsmtpThresholdMsgSizeIn=gwsmtpThresholdMsgSizeIn, gwsmtpdThreadsAvailReceive=gwsmtpdThreadsAvailReceive, gwsmtpInfo=gwsmtpInfo, gwsmtpdErrorsTCPRead=gwsmtpdErrorsTCPRead, gwsmtpdMessagesOut=gwsmtpdMessagesOut, gwsmtpStatIntervalErrorsIn=gwsmtpStatIntervalErrorsIn, gwsmtpStatMsgsOut=gwsmtpStatMsgsOut, gwsmtpStatIntervalErrorsOut=gwsmtpStatIntervalErrorsOut, gwsmtpStatIntervalStatusesIn=gwsmtpStatIntervalStatusesIn, gwsmtpStatIntervalMsgsIn=gwsmtpStatIntervalMsgsIn, gwsmtpActionRestartGateway=gwsmtpActionRestartGateway, gwsmtpQThresholdWpcsin=gwsmtpQThresholdWpcsin, gwsmtpTrapDomainName=gwsmtpTrapDomainName, gwsmtpOutSizeThreshTrap=gwsmtpOutSizeThreshTrap, gwsmtpWriteErrorTrap=gwsmtpWriteErrorTrap, novell=novell, gwsmtpQueueGwprob=gwsmtpQueueGwprob, gwsmtpQThresholdSend=gwsmtpQThresholdSend, gwsmtpdThreadsActiveSend=gwsmtpdThreadsActiveSend, gwsmtpLinkFrgn=gwsmtpLinkFrgn, gwsmtpQueueWpcsout=gwsmtpQueueWpcsout, gwsmtpQueueGwhold=gwsmtpQueueGwhold, gwsmtpStatStatusesOut=gwsmtpStatStatusesOut, gwsmtpQThresholdDefer=gwsmtpQThresholdDefer, gwsmtpGwholdThreshTrap=gwsmtpGwholdThreshTrap, gwsmtpStatStatusesIn=gwsmtpStatStatusesIn, gwsmtpMovedToProbTrap=gwsmtpMovedToProbTrap, gwsmtpWpcsinThreshTrap=gwsmtpWpcsinThreshTrap, gwsmtpGroupWiseLinkTrap=gwsmtpGroupWiseLinkTrap, gwsmtpGatewayName=gwsmtpGatewayName, gwsmtpStatBytesOut=gwsmtpStatBytesOut, gwsmtpStatIntervalStatusesOut=gwsmtpStatIntervalStatusesOut, gwsmtpStatMsgsIn=gwsmtpStatMsgsIn, gwsmtpdMessagesIn=gwsmtpdMessagesIn, gwsmtpLinkGroupWise=gwsmtpLinkGroupWise, gwsmtpStatErrorsOut=gwsmtpStatErrorsOut, gwsmtpQThresholdWpcsout=gwsmtpQThresholdWpcsout, gwsmtpQueueSend=gwsmtpQueueSend, gwsmtpStartTrap=gwsmtpStartTrap, gateways=gateways, gwsmtpdThreadsActiveReceive=gwsmtpdThreadsActiveReceive, gwsmtpWpcsoutThreshTrap=gwsmtpWpcsoutThreshTrap, gwsmtpTimeUp=gwsmtpTimeUp, gwsmtpReceiveThreshTrap=gwsmtpReceiveThreshTrap, gwsmtpdErrorsHostsUnknown=gwsmtpdErrorsHostsUnknown, gwsmtpdErrorsTCPWrite=gwsmtpdErrorsTCPWrite, gwsmtpSendThreshTrap=gwsmtpSendThreshTrap, gwsmtpStatBytesIn=gwsmtpStatBytesIn)
