#
# PySNMP MIB module MIDCOM-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MIDCOM-SERVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:12:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
midcomRuleIndex, midcomGroupIndex, midcomSessionOwner = mibBuilder.importSymbols("MIDCOM-MIB", "midcomRuleIndex", "midcomGroupIndex", "midcomSessionOwner")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, Counter32, ObjectIdentity, Unsigned32, mib_2, TimeTicks, iso, Bits, IpAddress, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "ObjectIdentity", "Unsigned32", "mib-2", "TimeTicks", "iso", "Bits", "IpAddress", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
midcomSrvMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 44445))
midcomSrvMIB.setRevisions(('2003-11-24 09:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: midcomSrvMIB.setRevisionsDescriptions(('Initial version, published as RFC yyyy.',))
if mibBuilder.loadTexts: midcomSrvMIB.setLastUpdated('200311240930Z')
if mibBuilder.loadTexts: midcomSrvMIB.setOrganization('IETF Middlebox Communication Working Group')
if mibBuilder.loadTexts: midcomSrvMIB.setContactInfo('WG charter: http://www.ietf.org/html.charters/midcom-charter.html Mailing Lists: General Discussion: midcom@ietf.org To Subscribe: midcom-request@ietf.org In Body: subscribe your_email_address Editor: Martin Stiemerling NEC Europe Ltd. Network Laboratories Kurfuersten-Anlage 36 69221 Heidelberg Germany Tel: +49 6221 90511-13 Email: stiemerling@netlab.nec.de')
if mibBuilder.loadTexts: midcomSrvMIB.setDescription('This MIB module defines a set of basic objects for monitoring and configuring MIDCOM servers on middleboxes that support MIDCOM. Such middleboxes may be firewalls and network address translators. This MIB module does not implement portions of the MIDCOM protocol, but is the MIDCOM SERVER MIB module for monitoring instances of the MIDCOM protocol. There are three groups of managed objects defined by this MIB module: - objects describing the used middlebox resources on a per MIDCOM policy rule base - objects describing the used firewall configuration on a per MIDCOM policy rule base - objects providing statistical information about the MIDCOM MIB module Copyright (C) The Internet Society (2003). This version of this MIB module is part of RFC yyyy; see the RFC itself for full legal notices.')
class MidcomNatBindMode(TextualConvention, Integer32):
    description = 'An indication whether the NAT bind is an address bind or an address-port bind.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("addressBind", 1), ("addressPortBind", 2))

class MidcomNatBindId(TextualConvention, Unsigned32):
    description = 'A unique ID that is assigned to each NAT bind by a NAT enabled device.'
    status = 'current'

class MidcomNatSessionId(TextualConvention, Unsigned32):
    description = 'A unique ID that is assigned to each NAT session by a NAT enabled device.'
    status = 'current'

midcomSrvObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 44445, 1))
midcomSrvConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 44445, 2))
midcomSrvResources = MibIdentifier((1, 3, 6, 1, 2, 1, 44445, 1, 1))
midcomSrvResourceTable = MibTable((1, 3, 6, 1, 2, 1, 44445, 1, 1, 1), )
if mibBuilder.loadTexts: midcomSrvResourceTable.setStatus('current')
if mibBuilder.loadTexts: midcomSrvResourceTable.setDescription('This table lists all used middlebox resources per MIDCOM policy rule. The midcomSrvMBTable is indexed by session owner, group index, rule index. ')
midcomSrvResourceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44445, 1, 1, 1, 1), ).setIndexNames((0, "MIDCOM-MIB", "midcomSessionOwner"), (0, "MIDCOM-MIB", "midcomGroupIndex"), (0, "MIDCOM-MIB", "midcomRuleIndex"))
if mibBuilder.loadTexts: midcomSrvResourceEntry.setStatus('current')
if mibBuilder.loadTexts: midcomSrvResourceEntry.setDescription('An entry describing a particular set of middlebox resources.')
natSrcBindMode = MibTableColumn((1, 3, 6, 1, 2, 1, 44445, 1, 1, 1, 1, 4), MidcomNatBindMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSrcBindMode.setStatus('current')
if mibBuilder.loadTexts: natSrcBindMode.setDescription('An indication whether this policy rule uses an address NAT bind or an address-port NAT bind for the source address.')
natSrcBindId = MibTableColumn((1, 3, 6, 1, 2, 1, 44445, 1, 1, 1, 1, 5), MidcomNatBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSrcBindId.setStatus('current')
if mibBuilder.loadTexts: natSrcBindId.setDescription('The allocated NAT bind for the source address used by this policy rule.')
natDstBindMode = MibTableColumn((1, 3, 6, 1, 2, 1, 44445, 1, 1, 1, 1, 6), MidcomNatBindMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natDstBindMode.setStatus('current')
if mibBuilder.loadTexts: natDstBindMode.setDescription('An indication whether this policy rule uses an address NAT bind or an address-port NAT bind for the destination address.')
natDstBindId = MibTableColumn((1, 3, 6, 1, 2, 1, 44445, 1, 1, 1, 1, 7), MidcomNatBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natDstBindId.setStatus('current')
if mibBuilder.loadTexts: natDstBindId.setDescription('The allocated NAT bind for the destination address used by this policy rule.')
natSessionId1 = MibTableColumn((1, 3, 6, 1, 2, 1, 44445, 1, 1, 1, 1, 8), MidcomNatSessionId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionId1.setStatus('current')
if mibBuilder.loadTexts: natSessionId1.setDescription('A unique ID that is assigned to this specific NAT session at the NAT for this policy rule. A maximum of two NAT sessions can be assigned to one policy rule.')
natSessionId2 = MibTableColumn((1, 3, 6, 1, 2, 1, 44445, 1, 1, 1, 1, 9), MidcomNatSessionId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natSessionId2.setStatus('current')
if mibBuilder.loadTexts: natSessionId2.setDescription('A unique ID that is assigned to this specific NAT session at the NAT for this policy rule. A maximum of two NAT sessions can be assigned to one policy rule.')
fwRuleId = MibTableColumn((1, 3, 6, 1, 2, 1, 44445, 1, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwRuleId.setStatus('current')
if mibBuilder.loadTexts: fwRuleId.setDescription('A unique ID that is assigned to this specific firewall rule at the firewall for this policy rule.')
midcomSrvFwTable = MibTable((1, 3, 6, 1, 2, 1, 44445, 1, 1, 2), )
if mibBuilder.loadTexts: midcomSrvFwTable.setStatus('current')
if mibBuilder.loadTexts: midcomSrvFwTable.setDescription('This table lists the firewal configuration per interface. The midcomSrvFwTable is indexed by midcomifIndex ')
midcomSrvFwEntry = MibTableRow((1, 3, 6, 1, 2, 1, 44445, 1, 1, 2, 1), ).setIndexNames((0, "MIDCOM-SERVER-MIB", "midcomifIndex"))
if mibBuilder.loadTexts: midcomSrvFwEntry.setStatus('current')
if mibBuilder.loadTexts: midcomSrvFwEntry.setDescription('An entry describing a particular set of firewall resources.')
midcomifIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 44445, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: midcomifIndex.setStatus('current')
if mibBuilder.loadTexts: midcomifIndex.setDescription('The corresponding interface of the middlebox.')
fwGroup = MibTableColumn((1, 3, 6, 1, 2, 1, 44445, 1, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fwGroup.setStatus('current')
if mibBuilder.loadTexts: fwGroup.setDescription('The firewall rule group to which all firewall rules of the MIDCOM server are assigned.')
fwPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 44445, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fwPriority.setStatus('current')
if mibBuilder.loadTexts: fwPriority.setDescription('The priority assigned to all firewall rules of the MIDCOM server.')
midcomSrvStatistics = MibIdentifier((1, 3, 6, 1, 2, 1, 44445, 1, 2))
midcomSrvSessionsRejected = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvSessionsRejected.setStatus('current')
if mibBuilder.loadTexts: midcomSrvSessionsRejected.setDescription('The number of rejected MIDCOM sessions. The MIDCOM MIB module can rejected sessions that are not authorized or unknown.')
midcomSrvSessionsCurrent = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvSessionsCurrent.setStatus('current')
if mibBuilder.loadTexts: midcomSrvSessionsCurrent.setDescription('The number of currently established MIDCOM sessions. This object equals the number of rows in the midcomSessionTable and gives the number of MIDCOM agents (=SNMP managers) that are allowed to read, create, or modify entries in the MIDCOM MIB module.')
midcomSrvSessionsTotal = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvSessionsTotal.setStatus('current')
if mibBuilder.loadTexts: midcomSrvSessionsTotal.setDescription('The summarized number of all current and past established MIDCOM sessions.')
midcomSrvRuleEntriesRejected = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvRuleEntriesRejected.setStatus('current')
if mibBuilder.loadTexts: midcomSrvRuleEntriesRejected.setDescription('The number of policy rule entries rejected without any further detailed reason. Policy rules may be rejected due to several reasons. This object counts policy rules rejected without any other specific reason.')
midcomSrvRulesIncomplete = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvRulesIncomplete.setStatus('current')
if mibBuilder.loadTexts: midcomSrvRulesIncomplete.setDescription('The total number of policy rules that are incomplete. Policy rules are loaded via row entries in midcomRuleTable. This object counts policy rules that are loaded but not fully specified, i.e. the associated action (reserved or enable) is not set. Those rule are typically removed after sometime and counted.')
midcomSrvResRulesRejected = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvResRulesRejected.setStatus('current')
if mibBuilder.loadTexts: midcomSrvResRulesRejected.setDescription('The total number of reserved policy rules that are loaded, but are rejected.')
midcomSrvResRulesFailed = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvResRulesFailed.setStatus('current')
if mibBuilder.loadTexts: midcomSrvResRulesFailed.setDescription('The total number of failed reserved policy rules.')
midcomSrvResRulesActive = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvResRulesActive.setStatus('current')
if mibBuilder.loadTexts: midcomSrvResRulesActive.setDescription('The number of currently active reserved policy rules.')
midcomSrvResRulesExpired = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvResRulesExpired.setStatus('current')
if mibBuilder.loadTexts: midcomSrvResRulesExpired.setDescription('The number of currently expired reserved policy rules.')
midcomSrvResRulesTerminated = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvResRulesTerminated.setStatus('current')
if mibBuilder.loadTexts: midcomSrvResRulesTerminated.setDescription('The number of currently terminated reserved policy rules.')
midcomSrvResRulesOnRequest = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvResRulesOnRequest.setStatus('current')
if mibBuilder.loadTexts: midcomSrvResRulesOnRequest.setDescription('The number of currently on-request reserved policy rules.')
midcomSrvEnabledRulesRejected = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvEnabledRulesRejected.setStatus('current')
if mibBuilder.loadTexts: midcomSrvEnabledRulesRejected.setDescription('The total number of rejected enabled policy rules.')
midcomSrvEnabledRulesFailed = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvEnabledRulesFailed.setStatus('current')
if mibBuilder.loadTexts: midcomSrvEnabledRulesFailed.setDescription('The total number of failed enabled policy rules.')
midcomSrvEnabledRulesActive = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvEnabledRulesActive.setStatus('current')
if mibBuilder.loadTexts: midcomSrvEnabledRulesActive.setDescription('The number of currently active enabled policy rules.')
midcomSrvEnabledRulesExpired = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvEnabledRulesExpired.setStatus('current')
if mibBuilder.loadTexts: midcomSrvEnabledRulesExpired.setDescription('The number of currently expired enabled policy rules.')
midcomSrvEnabledRulesTerminated = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvEnabledRulesTerminated.setStatus('current')
if mibBuilder.loadTexts: midcomSrvEnabledRulesTerminated.setDescription('The number of currently terminated enabled policy rules.')
midcomSrvEnabledRulesOnRequest = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvEnabledRulesOnRequest.setStatus('current')
if mibBuilder.loadTexts: midcomSrvEnabledRulesOnRequest.setDescription('The number of currently on-request enabled policy rules.')
midcomSrvTransRejected = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvTransRejected.setStatus('current')
if mibBuilder.loadTexts: midcomSrvTransRejected.setDescription('The total number of rejected transactions.')
midcomSrvTransFailed = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvTransFailed.setStatus('current')
if mibBuilder.loadTexts: midcomSrvTransFailed.setDescription('The total number of failed transactions.')
midcomSrvTransCompleted = MibScalar((1, 3, 6, 1, 2, 1, 44445, 1, 2, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: midcomSrvTransCompleted.setStatus('current')
if mibBuilder.loadTexts: midcomSrvTransCompleted.setDescription('The total number of completed transactions.')
midcomSrvCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 44445, 2, 1))
midcomSrvGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 44445, 2, 2))
midcomSrvCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 44445, 2, 1, 1)).setObjects(("MIDCOM-SERVER-MIB", "midcomSrvResourceGroup"), ("MIDCOM-SERVER-MIB", "midcomSrvFwGroup"), ("MIDCOM-SERVER-MIB", "midcomSrvStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    midcomSrvCompliance = midcomSrvCompliance.setStatus('current')
if mibBuilder.loadTexts: midcomSrvCompliance.setDescription('The compliance statement for SNMP entities that implement the MIDCOM SERVER MIB.')
midcomSrvResourceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44445, 2, 2, 1)).setObjects(("MIDCOM-SERVER-MIB", "natSrcBindMode"), ("MIDCOM-SERVER-MIB", "natSrcBindId"), ("MIDCOM-SERVER-MIB", "natDstBindMode"), ("MIDCOM-SERVER-MIB", "natDstBindId"), ("MIDCOM-SERVER-MIB", "natSessionId1"), ("MIDCOM-SERVER-MIB", "natSessionId2"), ("MIDCOM-SERVER-MIB", "fwRuleId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    midcomSrvResourceGroup = midcomSrvResourceGroup.setStatus('current')
if mibBuilder.loadTexts: midcomSrvResourceGroup.setDescription('A collection of objects providing information about the used NAT resources.')
midcomSrvFwGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44445, 2, 2, 2)).setObjects(("MIDCOM-SERVER-MIB", "fwGroup"), ("MIDCOM-SERVER-MIB", "fwPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    midcomSrvFwGroup = midcomSrvFwGroup.setStatus('current')
if mibBuilder.loadTexts: midcomSrvFwGroup.setDescription('A collection of objects providing information about the used firewall resources.')
midcomSrvStatisticsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 44445, 2, 2, 3)).setObjects(("MIDCOM-SERVER-MIB", "midcomSrvSessionsRejected"), ("MIDCOM-SERVER-MIB", "midcomSrvSessionsCurrent"), ("MIDCOM-SERVER-MIB", "midcomSrvSessionsTotal"), ("MIDCOM-SERVER-MIB", "midcomSrvRuleEntriesRejected"), ("MIDCOM-SERVER-MIB", "midcomSrvRulesIncomplete"), ("MIDCOM-SERVER-MIB", "midcomSrvResRulesRejected"), ("MIDCOM-SERVER-MIB", "midcomSrvResRulesFailed"), ("MIDCOM-SERVER-MIB", "midcomSrvResRulesActive"), ("MIDCOM-SERVER-MIB", "midcomSrvResRulesExpired"), ("MIDCOM-SERVER-MIB", "midcomSrvResRulesTerminated"), ("MIDCOM-SERVER-MIB", "midcomSrvResRulesOnRequest"), ("MIDCOM-SERVER-MIB", "midcomSrvEnabledRulesRejected"), ("MIDCOM-SERVER-MIB", "midcomSrvEnabledRulesFailed"), ("MIDCOM-SERVER-MIB", "midcomSrvEnabledRulesActive"), ("MIDCOM-SERVER-MIB", "midcomSrvEnabledRulesExpired"), ("MIDCOM-SERVER-MIB", "midcomSrvEnabledRulesTerminated"), ("MIDCOM-SERVER-MIB", "midcomSrvEnabledRulesOnRequest"), ("MIDCOM-SERVER-MIB", "midcomSrvTransRejected"), ("MIDCOM-SERVER-MIB", "midcomSrvTransFailed"), ("MIDCOM-SERVER-MIB", "midcomSrvTransCompleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    midcomSrvStatisticsGroup = midcomSrvStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: midcomSrvStatisticsGroup.setDescription('A collection of objects providing statistical information about the MIDCOM server.')
mibBuilder.exportSymbols("MIDCOM-SERVER-MIB", midcomSrvEnabledRulesExpired=midcomSrvEnabledRulesExpired, midcomSrvEnabledRulesOnRequest=midcomSrvEnabledRulesOnRequest, midcomSrvTransFailed=midcomSrvTransFailed, midcomSrvGroups=midcomSrvGroups, midcomSrvResRulesExpired=midcomSrvResRulesExpired, MidcomNatSessionId=MidcomNatSessionId, midcomSrvResourceEntry=midcomSrvResourceEntry, midcomSrvResRulesFailed=midcomSrvResRulesFailed, midcomSrvResourceGroup=midcomSrvResourceGroup, midcomSrvConformance=midcomSrvConformance, PYSNMP_MODULE_ID=midcomSrvMIB, midcomSrvResources=midcomSrvResources, midcomSrvTransCompleted=midcomSrvTransCompleted, midcomSrvObjects=midcomSrvObjects, midcomSrvEnabledRulesRejected=midcomSrvEnabledRulesRejected, natSrcBindId=natSrcBindId, fwRuleId=fwRuleId, MidcomNatBindMode=MidcomNatBindMode, midcomSrvResRulesActive=midcomSrvResRulesActive, natSessionId2=natSessionId2, midcomSrvRulesIncomplete=midcomSrvRulesIncomplete, midcomSrvResRulesOnRequest=midcomSrvResRulesOnRequest, MidcomNatBindId=MidcomNatBindId, midcomSrvResourceTable=midcomSrvResourceTable, natDstBindId=natDstBindId, midcomSrvEnabledRulesActive=midcomSrvEnabledRulesActive, midcomSrvStatisticsGroup=midcomSrvStatisticsGroup, midcomSrvTransRejected=midcomSrvTransRejected, midcomSrvSessionsRejected=midcomSrvSessionsRejected, midcomSrvSessionsTotal=midcomSrvSessionsTotal, midcomSrvFwGroup=midcomSrvFwGroup, midcomSrvCompliance=midcomSrvCompliance, midcomSrvStatistics=midcomSrvStatistics, midcomifIndex=midcomifIndex, midcomSrvMIB=midcomSrvMIB, natSessionId1=natSessionId1, midcomSrvResRulesRejected=midcomSrvResRulesRejected, midcomSrvEnabledRulesFailed=midcomSrvEnabledRulesFailed, midcomSrvEnabledRulesTerminated=midcomSrvEnabledRulesTerminated, midcomSrvSessionsCurrent=midcomSrvSessionsCurrent, fwPriority=fwPriority, natSrcBindMode=natSrcBindMode, midcomSrvFwEntry=midcomSrvFwEntry, natDstBindMode=natDstBindMode, midcomSrvFwTable=midcomSrvFwTable, fwGroup=fwGroup, midcomSrvCompliances=midcomSrvCompliances, midcomSrvResRulesTerminated=midcomSrvResRulesTerminated, midcomSrvRuleEntriesRejected=midcomSrvRuleEntriesRejected)
