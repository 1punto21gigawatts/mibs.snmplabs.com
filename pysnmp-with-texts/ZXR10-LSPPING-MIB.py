#
# PySNMP MIB module ZXR10-LSPPING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZXR10-LSPPING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:48:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, experimental, TimeTicks, MibIdentifier, Gauge32, Bits, NotificationType, Counter32, Integer32, mgmt, IpAddress, enterprises, ObjectIdentity, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "experimental", "TimeTicks", "MibIdentifier", "Gauge32", "Bits", "NotificationType", "Counter32", "Integer32", "mgmt", "IpAddress", "enterprises", "ObjectIdentity", "Unsigned32", "ModuleIdentity")
TruthValue, DisplayString, MacAddress, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "MacAddress", "RowStatus", "TextualConvention")
zxr10L2vpn, = mibBuilder.importSymbols("ZXR10-SMI", "zxr10L2vpn")
zxr10LspPingMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5))
class DisplayString(OctetString):
    pass

lspPingTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1), )
if mibBuilder.loadTexts: lspPingTable.setStatus('current')
if mibBuilder.loadTexts: lspPingTable.setDescription('lsp ping information table.')
lspPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1), ).setIndexNames((0, "ZXR10-LSPPING-MIB", "lspPingSerial"))
if mibBuilder.loadTexts: lspPingEntry.setStatus('current')
if mibBuilder.loadTexts: lspPingEntry.setDescription('')
lspPingSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingSerial.setStatus('current')
if mibBuilder.loadTexts: lspPingSerial.setDescription('')
lspPingType = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ldp", 0), ("rsvp-te", 1), ("vccv", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingType.setStatus('current')
if mibBuilder.loadTexts: lspPingType.setDescription('lsp ping type (0:ldp,1:rsvp-te,2:vccv)')
lspPingLdpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingLdpPrefix.setStatus('current')
if mibBuilder.loadTexts: lspPingLdpPrefix.setDescription('ldp prefix')
lspPingLdpPrefixlen = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingLdpPrefixlen.setStatus('current')
if mibBuilder.loadTexts: lspPingLdpPrefixlen.setDescription('ldp prefix length')
lspPingMplsTeTunnelIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingMplsTeTunnelIfName.setStatus('current')
if mibBuilder.loadTexts: lspPingMplsTeTunnelIfName.setDescription('tunnel if index ')
lspPingAtomDesAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingAtomDesAddr.setStatus('current')
if mibBuilder.loadTexts: lspPingAtomDesAddr.setDescription('vccv remote address')
lspPingAtomVcid = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingAtomVcid.setStatus('current')
if mibBuilder.loadTexts: lspPingAtomVcid.setDescription('vc id ')
lspPingIfOption = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("option", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingIfOption.setStatus('current')
if mibBuilder.loadTexts: lspPingIfOption.setDescription('if select option,default:none ')
lspPingPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 9), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingPacketCount.setStatus('current')
if mibBuilder.loadTexts: lspPingPacketCount.setDescription('send packets count,default:5 ')
lspPingTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingTimeOut.setStatus('current')
if mibBuilder.loadTexts: lspPingTimeOut.setDescription('timeout,defalt:2 ')
lspPingDataLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 8192)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingDataLen.setStatus('current')
if mibBuilder.loadTexts: lspPingDataLen.setDescription('data len,default:100 ')
lspPingTrapOncompletion = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 12), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingTrapOncompletion.setStatus('current')
if mibBuilder.loadTexts: lspPingTrapOncompletion.setDescription('if trap ')
lspPingRosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-active", 1), ("start-ping", 2), ("ping-processing", 3), ("ping-completed", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingRosStatus.setStatus('current')
if mibBuilder.loadTexts: lspPingRosStatus.setDescription('')
lspPingEntryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lspPingEntryOwner.setStatus('current')
if mibBuilder.loadTexts: lspPingEntryOwner.setDescription('')
lspPingResultTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2), )
if mibBuilder.loadTexts: lspPingResultTable.setStatus('current')
if mibBuilder.loadTexts: lspPingResultTable.setDescription('lsp ping result table.')
lspPingResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1), ).setIndexNames((0, "ZXR10-LSPPING-MIB", "lspPingResultSerial"))
if mibBuilder.loadTexts: lspPingResultEntry.setStatus('current')
if mibBuilder.loadTexts: lspPingResultEntry.setDescription('')
lspPingResultSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultSerial.setStatus('current')
if mibBuilder.loadTexts: lspPingResultSerial.setDescription('')
lspPingResultSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultSentPkts.setStatus('current')
if mibBuilder.loadTexts: lspPingResultSentPkts.setDescription('send packet')
lspPingResultRcvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultRcvPkts.setStatus('current')
if mibBuilder.loadTexts: lspPingResultRcvPkts.setDescription('receive packet')
lspPingResultRoundTripMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultRoundTripMinTime.setStatus('current')
if mibBuilder.loadTexts: lspPingResultRoundTripMinTime.setDescription('min RTT')
lspPingResultRoundTripMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultRoundTripMaxTime.setStatus('current')
if mibBuilder.loadTexts: lspPingResultRoundTripMaxTime.setDescription('max RTT')
lspPingResultRoundTripAvgTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultRoundTripAvgTime.setStatus('current')
if mibBuilder.loadTexts: lspPingResultRoundTripAvgTime.setDescription('average RTT')
lspPingResultEntryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultEntryOwner.setStatus('current')
if mibBuilder.loadTexts: lspPingResultEntryOwner.setDescription('')
lspPingResultRoundWobbleMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultRoundWobbleMinTime.setStatus('current')
if mibBuilder.loadTexts: lspPingResultRoundWobbleMinTime.setDescription('max RWT')
lspPingResultRoundWobbleMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultRoundWobbleMaxTime.setStatus('current')
if mibBuilder.loadTexts: lspPingResultRoundWobbleMaxTime.setDescription('max RWT')
lspPingResultRoundWobbleAvgTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lspPingResultRoundWobbleAvgTime.setStatus('current')
if mibBuilder.loadTexts: lspPingResultRoundWobbleAvgTime.setDescription('max RWT')
lsppingNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 3))
lsppingTrapResult = NotificationType((1, 3, 6, 1, 4, 1, 3902, 3, 104, 5, 3, 1)).setObjects(("ZXR10-LSPPING-MIB", "lspPingResultSerial"), ("ZXR10-LSPPING-MIB", "lspPingResultSentPkts"), ("ZXR10-LSPPING-MIB", "lspPingResultRcvPkts"), ("ZXR10-LSPPING-MIB", "lspPingResultRoundTripMinTime"), ("ZXR10-LSPPING-MIB", "lspPingResultRoundTripMaxTime"), ("ZXR10-LSPPING-MIB", "lspPingResultRoundTripAvgTime"))
if mibBuilder.loadTexts: lsppingTrapResult.setStatus('current')
if mibBuilder.loadTexts: lsppingTrapResult.setDescription("The newMaster trap indicates that the sending agent has transitioned to 'Master' state.")
mibBuilder.exportSymbols("ZXR10-LSPPING-MIB", lspPingResultRoundTripMinTime=lspPingResultRoundTripMinTime, lspPingLdpPrefixlen=lspPingLdpPrefixlen, lspPingEntryOwner=lspPingEntryOwner, lsppingNotifications=lsppingNotifications, lspPingResultRoundTripMaxTime=lspPingResultRoundTripMaxTime, lspPingResultRcvPkts=lspPingResultRcvPkts, lspPingDataLen=lspPingDataLen, lspPingResultTable=lspPingResultTable, lspPingRosStatus=lspPingRosStatus, lspPingResultRoundWobbleAvgTime=lspPingResultRoundWobbleAvgTime, lspPingResultRoundWobbleMaxTime=lspPingResultRoundWobbleMaxTime, lspPingPacketCount=lspPingPacketCount, lspPingMplsTeTunnelIfName=lspPingMplsTeTunnelIfName, lspPingType=lspPingType, lspPingIfOption=lspPingIfOption, lspPingTrapOncompletion=lspPingTrapOncompletion, lspPingAtomDesAddr=lspPingAtomDesAddr, lspPingSerial=lspPingSerial, lspPingResultEntryOwner=lspPingResultEntryOwner, lsppingTrapResult=lsppingTrapResult, lspPingResultRoundTripAvgTime=lspPingResultRoundTripAvgTime, lspPingResultRoundWobbleMinTime=lspPingResultRoundWobbleMinTime, lspPingLdpPrefix=lspPingLdpPrefix, lspPingResultSentPkts=lspPingResultSentPkts, zxr10LspPingMIB=zxr10LspPingMIB, DisplayString=DisplayString, lspPingTimeOut=lspPingTimeOut, lspPingResultEntry=lspPingResultEntry, lspPingTable=lspPingTable, lspPingResultSerial=lspPingResultSerial, lspPingAtomVcid=lspPingAtomVcid, lspPingEntry=lspPingEntry)
