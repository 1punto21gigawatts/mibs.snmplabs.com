#
# PySNMP MIB module FD-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FD-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:13:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
DeviceOperation, DeviceType, LedStatus, DeviceStatus, epon = mibBuilder.importSymbols("EPON-EOC-MIB", "DeviceOperation", "DeviceType", "LedStatus", "DeviceStatus", "epon")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, ModuleIdentity, IpAddress, Integer32, Counter64, ObjectIdentity, iso, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "IpAddress", "Integer32", "Counter64", "ObjectIdentity", "iso", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "TimeTicks", "Counter32")
MacAddress, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString", "RowStatus")
systemInfo = ModuleIdentity((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1))
if mibBuilder.loadTexts: systemInfo.setLastUpdated('201005271056Z')
if mibBuilder.loadTexts: systemInfo.setOrganization('epon eoc factory.')
if mibBuilder.loadTexts: systemInfo.setContactInfo('')
if mibBuilder.loadTexts: systemInfo.setDescription('system mib module')
sysBaseInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 1))
sysModel = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 1, 1), DeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModel.setStatus('current')
if mibBuilder.loadTexts: sysModel.setDescription('OLT platform system model')
sysDesc = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDesc.setStatus('current')
if mibBuilder.loadTexts: sysDesc.setDescription('Used for system manager to give a brief system description information')
sysLocation = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocation.setStatus('current')
if mibBuilder.loadTexts: sysLocation.setDescription('Used for system manager to input the device(olt platform) location information')
sysContact = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysContact.setStatus('current')
if mibBuilder.loadTexts: sysContact.setDescription('system manager contact information')
sysMajAlarmLed = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 1, 5), LedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMajAlarmLed.setStatus('current')
if mibBuilder.loadTexts: sysMajAlarmLed.setDescription('Status of main card MAJ led')
sysCriAlarmLed = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 1, 6), LedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCriAlarmLed.setStatus('current')
if mibBuilder.loadTexts: sysCriAlarmLed.setDescription('Status of main card CRJ led')
sysAlarmDesc = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAlarmDesc.setStatus('current')
if mibBuilder.loadTexts: sysAlarmDesc.setDescription('Meaning of MAJ and CRI alarm leds. Normally, you can get alarm meaning from this object when one of or both the MAJ and CRI alarm leds are lip')
sysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 2))
consolePortSpd = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("bps2400", 1), ("bps4800", 2), ("bps9600", 3), ("bps19200", 4), ("bps38400", 5), ("bps57600", 6), ("bps115200", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: consolePortSpd.setStatus('current')
if mibBuilder.loadTexts: consolePortSpd.setDescription('Main card CONSOLE port access speed')
manageIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manageIpAddr.setStatus('current')
if mibBuilder.loadTexts: manageIpAddr.setDescription('The IP Address of outband network management port')
manageNetMask = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manageNetMask.setStatus('current')
if mibBuilder.loadTexts: manageNetMask.setDescription('The network mask of outband network management port')
manageGateway = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: manageGateway.setStatus('current')
if mibBuilder.loadTexts: manageGateway.setDescription('The Default Gateway Address of outband network management port')
snmpReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpReadCommunity.setDescription('The read-only community used on the embedded snmp agent')
snmpRWCommunity = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 2, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpRWCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpRWCommunity.setDescription('The read-write community used on the embedded snmp agent')
trapDstIpAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 2, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDstIpAddr1.setStatus('current')
if mibBuilder.loadTexts: trapDstIpAddr1.setDescription('The first destination IP Address to which the system trap will send')
trapDstIpAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 2, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDstIpAddr2.setStatus('current')
if mibBuilder.loadTexts: trapDstIpAddr2.setDescription('The second destination IP Address to which the system trap will send')
trapDstIpAddr3 = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 2, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDstIpAddr3.setStatus('current')
if mibBuilder.loadTexts: trapDstIpAddr3.setDescription('The third destination IP Address to which the system trap will send')
trapDstIpAddr4 = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 2, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDstIpAddr4.setStatus('current')
if mibBuilder.loadTexts: trapDstIpAddr4.setDescription('The fourth destination IP Address to which the system trap will send')
sysOperate = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 2, 12), DeviceOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysOperate.setStatus('current')
if mibBuilder.loadTexts: sysOperate.setDescription("Set the value of this object to 'save(1)' to save all system configurations. Return 'noOperation(2)' when read. Set the value to 'noOperation(2)'will take nothing effect")
chassisInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 3))
chassisType = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 3, 1), DeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisType.setStatus('current')
if mibBuilder.loadTexts: chassisType.setDescription('type of the olt platform chassis')
chassisFactorySerial = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFactorySerial.setStatus('current')
if mibBuilder.loadTexts: chassisFactorySerial.setDescription('Description. Chassis factory serial,reserved for future use.')
chassisRevision = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisRevision.setStatus('current')
if mibBuilder.loadTexts: chassisRevision.setDescription('Description.')
chassisTemperature = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperature.setStatus('current')
if mibBuilder.loadTexts: chassisTemperature.setDescription('chassis temperature')
powerStatusBit = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 3, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStatusBit.setStatus('current')
if mibBuilder.loadTexts: powerStatusBit.setDescription('Power status bit masks; value & 1 == 1 indicating power A on else off value & 2 == 2 indicating power B on else off ')
fanStatusBit = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanStatusBit.setStatus('current')
if mibBuilder.loadTexts: fanStatusBit.setDescription('Fan stauts bit masks value & 1 == 1 indicating fan 1 on else off value & 2 == 2 indicating fan 2 on else off value & 4 == 4 indicating fan 3 on else off value & 8 == 8 indicating fan 4 on else off')
cardModule = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5))
mainCard = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 1))
mainCardType = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 1, 1), DeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainCardType.setStatus('current')
if mibBuilder.loadTexts: mainCardType.setDescription('type of main card (it is also called control and switch card)')
mainCardFactorySerial = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainCardFactorySerial.setStatus('current')
if mibBuilder.loadTexts: mainCardFactorySerial.setDescription('Description. Main card factory serial, reserved for future use')
mainCardHWRevision = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainCardHWRevision.setStatus('current')
if mibBuilder.loadTexts: mainCardHWRevision.setDescription('main card hardware revision')
mainCardSWVersion = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainCardSWVersion.setStatus('current')
if mibBuilder.loadTexts: mainCardSWVersion.setDescription('software version running on main card')
mainCardRunningStatus = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 1, 5), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainCardRunningStatus.setStatus('current')
if mibBuilder.loadTexts: mainCardRunningStatus.setDescription('The running status of main card, it can only be normal or abnormal, since the main card is always online')
mainCardRunningTime = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainCardRunningTime.setStatus('current')
if mibBuilder.loadTexts: mainCardRunningTime.setDescription('The running time since the main card was last powered')
mainCardOperate = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 1, 7), DeviceOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainCardOperate.setStatus('current')
if mibBuilder.loadTexts: mainCardOperate.setDescription('The operation collection, such as reset, restore...')
ponCard = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 2))
ponCardTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 2, 1), )
if mibBuilder.loadTexts: ponCardTable.setStatus('current')
if mibBuilder.loadTexts: ponCardTable.setDescription('This table defines base para objects of PON cards installed in the chassis')
ponCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 2, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"))
if mibBuilder.loadTexts: ponCardEntry.setStatus('current')
if mibBuilder.loadTexts: ponCardEntry.setDescription('Each entry defines a sole PON card objects')
ponCardSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: ponCardSlotId.setStatus('current')
if mibBuilder.loadTexts: ponCardSlotId.setDescription('PON card slot index, defined begin from 1 to max slot number')
ponCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 2, 1, 1, 2), DeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ponCardType.setStatus('current')
if mibBuilder.loadTexts: ponCardType.setDescription('PON card type value')
ponCardFactorySerial = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ponCardFactorySerial.setStatus('current')
if mibBuilder.loadTexts: ponCardFactorySerial.setDescription('Description. PON card factory serial, reserved for future use')
ponCardHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ponCardHwRev.setStatus('current')
if mibBuilder.loadTexts: ponCardHwRev.setDescription('PON card hardware revision')
ponCardFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ponCardFwVer.setStatus('current')
if mibBuilder.loadTexts: ponCardFwVer.setDescription('PON card software version')
ponCardRunningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 2, 1, 1, 7), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ponCardRunningStatus.setStatus('current')
if mibBuilder.loadTexts: ponCardRunningStatus.setDescription('pon card on-line status, each pon card may have following status: not installed (present) installed but can not be connected by main card installed and can be connected by main card')
ponCardRuningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 2, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ponCardRuningTime.setStatus('current')
if mibBuilder.loadTexts: ponCardRuningTime.setDescription('The running time since the pon card last powered')
ponCardOperate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 2, 1, 1, 9), DeviceOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ponCardOperate.setStatus('current')
if mibBuilder.loadTexts: ponCardOperate.setDescription('Operate action taken on PON card')
ponCardUpgradeStat = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("booting", 1), ("normalRun", 2), ("rcvFileIng", 3), ("rcvFileOk", 4), ("rcvFileErr", 5), ("upgrading", 6), ("upgradeOk", 7), ("upgradeErr", 8), ("upgradeOlt", 9), ("upgradeOnu", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ponCardUpgradeStat.setStatus('current')
if mibBuilder.loadTexts: ponCardUpgradeStat.setDescription('Description.')
onuAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 6))
authMethod = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blackList", 1), ("whiteList", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authMethod.setStatus('current')
if mibBuilder.loadTexts: authMethod.setDescription('Which method that the manager will take to authenticate accessed ONUs, When set to blackList, the OLT will allow only the ONUs that their MAC is not included in the black MAC table. When set to whiteList,the OLT will allow only the ONUs that their MAC is included in the white MAC table.')
nonAuthOper = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("clearNonAuthMacList", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonAuthOper.setStatus('current')
if mibBuilder.loadTexts: nonAuthOper.setDescription('ONU MAC Authentication operation object, now, it can only be used to clear the MAC list which had tried to register but had not been authenticated')
onuAuthMacCfgTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 6, 3), )
if mibBuilder.loadTexts: onuAuthMacCfgTable.setStatus('current')
if mibBuilder.loadTexts: onuAuthMacCfgTable.setDescription('MAC list table which contain the ONU MAC address list, these MAC address will be used to authenticate accessed ONUs.')
onuAuthMacCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 6, 3, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "authMacEntryId"))
if mibBuilder.loadTexts: onuAuthMacCfgEntry.setStatus('current')
if mibBuilder.loadTexts: onuAuthMacCfgEntry.setDescription('Each entry in this table defines a sole MAC (when the beginMAC is equal to the endMAC or the endMAC is blank/zero) or a MAC range.')
authMacEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 6, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: authMacEntryId.setStatus('current')
if mibBuilder.loadTexts: authMacEntryId.setDescription('Description. entry serial ID, which used to identify an entry uniquely')
beginMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 6, 3, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: beginMacAddr.setStatus('current')
if mibBuilder.loadTexts: beginMacAddr.setDescription('begin MAC address, this object must be set to effect this entry')
endMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 6, 3, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: endMacAddr.setStatus('current')
if mibBuilder.loadTexts: endMacAddr.setDescription('End MAC address of a MAC range entry. Set this value to zero will result that this entry only indicate a unique MAC.')
macAttr = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blackMac", 1), ("whiteMac", 2), ("obsolete", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macAttr.setStatus('current')
if mibBuilder.loadTexts: macAttr.setDescription("This object is used to decide that the MAC(s) introduced in this entry should be classified into blackList or whiteList. When set to 'obsolete', this entry is not in use. This option is reserved for future use.")
onuAuthMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 6, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: onuAuthMacRowStatus.setStatus('current')
if mibBuilder.loadTexts: onuAuthMacRowStatus.setDescription('This object is used to create or delete a MAC entry')
nonAuthOnuListTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 6, 4), )
if mibBuilder.loadTexts: nonAuthOnuListTable.setStatus('current')
if mibBuilder.loadTexts: nonAuthOnuListTable.setDescription('This table contain illegal ONU MAC list which try to register on OLT')
nonAuthOnuListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 6, 4, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "nonAuthOnuMacIndex"))
if mibBuilder.loadTexts: nonAuthOnuListEntry.setStatus('current')
if mibBuilder.loadTexts: nonAuthOnuListEntry.setDescription('Each entry in this table contain a nonAuth onu MAC info')
nonAuthOnuMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 6, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nonAuthOnuMacIndex.setStatus('current')
if mibBuilder.loadTexts: nonAuthOnuMacIndex.setDescription('Administrativly assigned entry index')
nonAuthOnuMac = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 6, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nonAuthOnuMac.setStatus('current')
if mibBuilder.loadTexts: nonAuthOnuMac.setDescription('The MAC address which tried to register')
nonAuthOnuTries = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 6, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nonAuthOnuTries.setStatus('current')
if mibBuilder.loadTexts: nonAuthOnuTries.setDescription('The times that the illegal ONU try to register')
userManage = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 7))
userManageTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 7, 1), )
if mibBuilder.loadTexts: userManageTable.setStatus('current')
if mibBuilder.loadTexts: userManageTable.setDescription('Description. Access user management table. The table defined the users who can access the system shell management interface, including local CLI and remote telnet access. The users defined in this table is independent with those defined in EMS.')
userManageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 7, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "userId"))
if mibBuilder.loadTexts: userManageEntry.setStatus('current')
if mibBuilder.loadTexts: userManageEntry.setDescription('Description. One entry contains one user attributes, up to 5 entries can be created in this table.')
userId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: userId.setStatus('current')
if mibBuilder.loadTexts: userId.setDescription('Administrativly assigned entry index')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 7, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('user name')
userPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 7, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userPassword.setStatus('current')
if mibBuilder.loadTexts: userPassword.setDescription('user password')
userPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 7, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userPermission.setStatus('current')
if mibBuilder.loadTexts: userPermission.setDescription('Description. This object define the user priority and other permission attributes')
userAccessDeviceMap = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 7, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAccessDeviceMap.setStatus('current')
if mibBuilder.loadTexts: userAccessDeviceMap.setDescription('This object is defined for future use. It is a bit map value which defines which devices in the system can be accessed by a user. Temporary definitions: ---------------------------------------------- |sys level | swithch module | olt module| onu |............ ---------------------------------------------- high 2b 2b 5b 7b reserved low when the map bit set to 1, the user can access the corresponding device otherwise can not')
loginTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 7, 1, 1, 6), Unsigned32().clone(300)).setMaxAccess("readonly")
if mibBuilder.loadTexts: loginTimeout.setStatus('current')
if mibBuilder.loadTexts: loginTimeout.setDescription('Description. Time out time since one accessed user last operation, when this time elapse, the user will be kicked off')
userEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 7, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: userEntryRowStatus.setDescription('Use this object to create or delete a user info')
upgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 8))
ftpServerIp = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpServerIp.setStatus('current')
if mibBuilder.loadTexts: ftpServerIp.setDescription('The host IP Address on which FTP server running and this host will be used as the server to do FTP operation')
ftpServerUserName = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpServerUserName.setStatus('current')
if mibBuilder.loadTexts: ftpServerUserName.setDescription('The user name used to access ftp server ')
ftpServerUserPasswd = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpServerUserPasswd.setStatus('current')
if mibBuilder.loadTexts: ftpServerUserPasswd.setDescription('The user password which will be used to access ftp server ')
ftpOperFileName = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpOperFileName.setStatus('current')
if mibBuilder.loadTexts: ftpOperFileName.setDescription('The file name which will be download to or upload from device. When the operation is download, the operation file should located on the host; When the operation is upload the file should located on the target device; ')
ftpOperTarget = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ctrlCardImage", 1), ("ponCardImage", 2), ("oltApp", 3), ("oltPers", 4), ("oltBoot", 5), ("onuApp", 6), ("onuPers", 7), ("onuBoot", 8), ("otherSpecifiedFile", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpOperTarget.setStatus('current')
if mibBuilder.loadTexts: ftpOperTarget.setDescription('The operate target, which are device firmware or configuration file. When do upgrade or download,one of these file targets should be selected to operate. ctrlCardImage(1), ponCardImage(2), oltApp(3), oltPers(4), oltBoot(5), onuApp(6), onuPers(7), onuBoot(8), otherSpecifiedFile(9) ')
dwLoadFileCrcCheck = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checkCrc", 1), ("dontCheckCrc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dwLoadFileCrcCheck.setStatus('current')
if mibBuilder.loadTexts: dwLoadFileCrcCheck.setDescription("This object is used to indicate the target device should or not to do crc check operation,if 'checkCrc' the operator should give the download file's crc calculate result on the 'dwLoadFileCrcValue' object. Crc check is now only useful when do download operation. ")
dwLoadFileCrcValue = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 8, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dwLoadFileCrcValue.setStatus('current')
if mibBuilder.loadTexts: dwLoadFileCrcValue.setDescription(' CRC value of the download file, this value will be used to compare with the CRC result calculated by the firmware running on device to check if error occurred during file transmission')
operDeviceMap = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 8, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operDeviceMap.setStatus('current')
if mibBuilder.loadTexts: operDeviceMap.setDescription('This object defines the upgrade or download device objects,when do upgrade operation one or more device can be selected as operate objects. The data format defined as following: --------------------------------- | slot | olt | onu | --------------------------------- 1byte 1byte 8byte All these 10 bytes used as bit map for device selecting, when selected set the according bit to 1, else set to 0 The bit sequence in each used from low to high: For example: slot:0000 0101, select slot 1 and 3, dont select slot 2 and 4 and others(reserved) olt: 0000 0011 select olt(pon port) 1 and 2, dont select others(reserved) onu: byte[0] map to onuId 1~8; byte[1] map to onuId 9~16,..., byte[7] map to onuId 56~63 Bit map in byte[0]: b0~b7 map to onuId1~onuId8, etc.')
upgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("paraErr", 1), ("initFtpErr", 2), ("transmitting", 3), ("transmitErr", 4), ("transmitOk", 5), ("upgrading", 6), ("upgradeErr", 7), ("upgradeOk", 8), ("uploading", 9), ("uploadErr", 10), ("uploadOk", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upgradeStatus.setStatus('current')
if mibBuilder.loadTexts: upgradeStatus.setDescription('Upgrade process status ')
upgradeOperation = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("downloadFile", 1), ("upgrade", 2), ("reboot", 3), ("uploadFile", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upgradeOperation.setStatus('current')
if mibBuilder.loadTexts: upgradeOperation.setDescription('This object defines an operation collection, which are used to do downlaod,upgrade or get file(upload) operations. ')
ftpProgress = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 8, 12), Integer32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpProgress.setStatus('current')
if mibBuilder.loadTexts: ftpProgress.setDescription('Description.')
fdSysConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 13))
fdSystemGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 13, 1))
sysBaseManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 13, 1, 1)).setObjects(("FD-SYSTEM-MIB", "sysModel"), ("FD-SYSTEM-MIB", "sysDesc"), ("FD-SYSTEM-MIB", "sysLocation"), ("FD-SYSTEM-MIB", "sysContact"), ("FD-SYSTEM-MIB", "sysMajAlarmLed"), ("FD-SYSTEM-MIB", "sysCriAlarmLed"), ("FD-SYSTEM-MIB", "sysAlarmDesc"), ("FD-SYSTEM-MIB", "consolePortSpd"), ("FD-SYSTEM-MIB", "manageIpAddr"), ("FD-SYSTEM-MIB", "manageNetMask"), ("FD-SYSTEM-MIB", "manageGateway"), ("FD-SYSTEM-MIB", "snmpReadCommunity"), ("FD-SYSTEM-MIB", "snmpRWCommunity"), ("FD-SYSTEM-MIB", "trapDstIpAddr1"), ("FD-SYSTEM-MIB", "trapDstIpAddr2"), ("FD-SYSTEM-MIB", "trapDstIpAddr3"), ("FD-SYSTEM-MIB", "trapDstIpAddr4"), ("FD-SYSTEM-MIB", "sysOperate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sysBaseManageGroup = sysBaseManageGroup.setStatus('current')
if mibBuilder.loadTexts: sysBaseManageGroup.setDescription('A collection of objects providing fd system basic features management')
chassisInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 13, 1, 2)).setObjects(("FD-SYSTEM-MIB", "chassisType"), ("FD-SYSTEM-MIB", "chassisFactorySerial"), ("FD-SYSTEM-MIB", "chassisRevision"), ("FD-SYSTEM-MIB", "chassisTemperature"), ("FD-SYSTEM-MIB", "powerStatusBit"), ("FD-SYSTEM-MIB", "fanStatusBit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chassisInfoGroup = chassisInfoGroup.setStatus('current')
if mibBuilder.loadTexts: chassisInfoGroup.setDescription('A collection of objects providing chassis information management')
cardModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 13, 1, 3)).setObjects(("FD-SYSTEM-MIB", "mainCardType"), ("FD-SYSTEM-MIB", "mainCardFactorySerial"), ("FD-SYSTEM-MIB", "mainCardHWRevision"), ("FD-SYSTEM-MIB", "mainCardSWVersion"), ("FD-SYSTEM-MIB", "mainCardRunningStatus"), ("FD-SYSTEM-MIB", "mainCardRunningTime"), ("FD-SYSTEM-MIB", "mainCardOperate"), ("FD-SYSTEM-MIB", "ponCardType"), ("FD-SYSTEM-MIB", "ponCardFactorySerial"), ("FD-SYSTEM-MIB", "ponCardHwRev"), ("FD-SYSTEM-MIB", "ponCardFwVer"), ("FD-SYSTEM-MIB", "ponCardRunningStatus"), ("FD-SYSTEM-MIB", "ponCardRuningTime"), ("FD-SYSTEM-MIB", "ponCardOperate"), ("FD-SYSTEM-MIB", "ponCardUpgradeStat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cardModuleGroup = cardModuleGroup.setStatus('current')
if mibBuilder.loadTexts: cardModuleGroup.setDescription('A collection of objects providing installed card module basic features management')
onuAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 13, 1, 4)).setObjects(("FD-SYSTEM-MIB", "authMethod"), ("FD-SYSTEM-MIB", "nonAuthOper"), ("FD-SYSTEM-MIB", "beginMacAddr"), ("FD-SYSTEM-MIB", "endMacAddr"), ("FD-SYSTEM-MIB", "macAttr"), ("FD-SYSTEM-MIB", "onuAuthMacRowStatus"), ("FD-SYSTEM-MIB", "nonAuthOnuMac"), ("FD-SYSTEM-MIB", "nonAuthOnuTries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    onuAuthGroup = onuAuthGroup.setStatus('current')
if mibBuilder.loadTexts: onuAuthGroup.setDescription('A collection of objects providing ONU authentication MAC list management')
userManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 13, 1, 5)).setObjects(("FD-SYSTEM-MIB", "userName"), ("FD-SYSTEM-MIB", "userPassword"), ("FD-SYSTEM-MIB", "userPermission"), ("FD-SYSTEM-MIB", "userAccessDeviceMap"), ("FD-SYSTEM-MIB", "loginTimeout"), ("FD-SYSTEM-MIB", "userEntryRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    userManageGroup = userManageGroup.setStatus('current')
if mibBuilder.loadTexts: userManageGroup.setDescription('A collection of objects providing system user management')
systemUpgradeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 13, 1, 6)).setObjects(("FD-SYSTEM-MIB", "ftpServerIp"), ("FD-SYSTEM-MIB", "ftpServerUserName"), ("FD-SYSTEM-MIB", "ftpServerUserPasswd"), ("FD-SYSTEM-MIB", "ftpOperFileName"), ("FD-SYSTEM-MIB", "dwLoadFileCrcCheck"), ("FD-SYSTEM-MIB", "dwLoadFileCrcValue"), ("FD-SYSTEM-MIB", "operDeviceMap"), ("FD-SYSTEM-MIB", "upgradeStatus"), ("FD-SYSTEM-MIB", "ftpProgress"), ("FD-SYSTEM-MIB", "upgradeOperation"), ("FD-SYSTEM-MIB", "ftpOperTarget"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemUpgradeGroup = systemUpgradeGroup.setStatus('current')
if mibBuilder.loadTexts: systemUpgradeGroup.setDescription('A collection of objects providing system device upgrade management')
fdSystemCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 13, 2))
fdSystemCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 34592, 1, 3, 1, 13, 2, 1)).setObjects(("FD-SYSTEM-MIB", "sysBaseManageGroup"), ("FD-SYSTEM-MIB", "chassisInfoGroup"), ("FD-SYSTEM-MIB", "cardModuleGroup"), ("FD-SYSTEM-MIB", "onuAuthGroup"), ("FD-SYSTEM-MIB", "userManageGroup"), ("FD-SYSTEM-MIB", "systemUpgradeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fdSystemCompliance = fdSystemCompliance.setStatus('current')
if mibBuilder.loadTexts: fdSystemCompliance.setDescription('The compliance statement')
mibBuilder.exportSymbols("FD-SYSTEM-MIB", chassisRevision=chassisRevision, userAccessDeviceMap=userAccessDeviceMap, onuAuthGroup=onuAuthGroup, mainCardOperate=mainCardOperate, ponCardRuningTime=ponCardRuningTime, ponCardFactorySerial=ponCardFactorySerial, manageIpAddr=manageIpAddr, ponCardTable=ponCardTable, onuAuthMacCfgTable=onuAuthMacCfgTable, sysAlarmDesc=sysAlarmDesc, ftpServerUserPasswd=ftpServerUserPasswd, nonAuthOnuMacIndex=nonAuthOnuMacIndex, ftpServerIp=ftpServerIp, dwLoadFileCrcValue=dwLoadFileCrcValue, ponCardUpgradeStat=ponCardUpgradeStat, userId=userId, fdSystemGroups=fdSystemGroups, ftpServerUserName=ftpServerUserName, onuAuth=onuAuth, userManage=userManage, mainCardFactorySerial=mainCardFactorySerial, snmpRWCommunity=snmpRWCommunity, manageNetMask=manageNetMask, ponCardFwVer=ponCardFwVer, userManageTable=userManageTable, chassisInfo=chassisInfo, sysMajAlarmLed=sysMajAlarmLed, chassisType=chassisType, ponCard=ponCard, userEntryRowStatus=userEntryRowStatus, ponCardOperate=ponCardOperate, upgrade=upgrade, upgradeOperation=upgradeOperation, userName=userName, ftpProgress=ftpProgress, mainCardRunningStatus=mainCardRunningStatus, systemInfo=systemInfo, sysCriAlarmLed=sysCriAlarmLed, sysContact=sysContact, authMethod=authMethod, cardModule=cardModule, chassisFactorySerial=chassisFactorySerial, nonAuthOper=nonAuthOper, mainCardSWVersion=mainCardSWVersion, sysModel=sysModel, trapDstIpAddr2=trapDstIpAddr2, ponCardRunningStatus=ponCardRunningStatus, macAttr=macAttr, sysOperate=sysOperate, trapDstIpAddr1=trapDstIpAddr1, mainCardType=mainCardType, upgradeStatus=upgradeStatus, fdSystemCompliance=fdSystemCompliance, authMacEntryId=authMacEntryId, trapDstIpAddr3=trapDstIpAddr3, mainCardRunningTime=mainCardRunningTime, loginTimeout=loginTimeout, sysLocation=sysLocation, onuAuthMacCfgEntry=onuAuthMacCfgEntry, ponCardSlotId=ponCardSlotId, chassisTemperature=chassisTemperature, ftpOperFileName=ftpOperFileName, PYSNMP_MODULE_ID=systemInfo, userPermission=userPermission, sysBaseManageGroup=sysBaseManageGroup, ponCardEntry=ponCardEntry, fdSystemCompliances=fdSystemCompliances, endMacAddr=endMacAddr, onuAuthMacRowStatus=onuAuthMacRowStatus, beginMacAddr=beginMacAddr, sysConfig=sysConfig, nonAuthOnuMac=nonAuthOnuMac, mainCard=mainCard, powerStatusBit=powerStatusBit, cardModuleGroup=cardModuleGroup, sysDesc=sysDesc, userManageGroup=userManageGroup, ftpOperTarget=ftpOperTarget, dwLoadFileCrcCheck=dwLoadFileCrcCheck, systemUpgradeGroup=systemUpgradeGroup, ponCardHwRev=ponCardHwRev, trapDstIpAddr4=trapDstIpAddr4, operDeviceMap=operDeviceMap, nonAuthOnuTries=nonAuthOnuTries, ponCardType=ponCardType, sysBaseInfo=sysBaseInfo, snmpReadCommunity=snmpReadCommunity, fanStatusBit=fanStatusBit, userPassword=userPassword, nonAuthOnuListEntry=nonAuthOnuListEntry, manageGateway=manageGateway, fdSysConformance=fdSysConformance, mainCardHWRevision=mainCardHWRevision, chassisInfoGroup=chassisInfoGroup, consolePortSpd=consolePortSpd, nonAuthOnuListTable=nonAuthOnuListTable, userManageEntry=userManageEntry)
