#
# PySNMP MIB module MRV-IN-REACH-APPLETALK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MRV-IN-REACH-APPLETALK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:15:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
mrvInReachProductDivision, = mibBuilder.importSymbols("MRV-IN-REACH-PRODUCT-DIVISION-MIB", "mrvInReachProductDivision")
DdpAddress, = mibBuilder.importSymbols("RFC1243-MIB", "DdpAddress")
charPortIndex, = mibBuilder.importSymbols("RFC1316-MIB", "charPortIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Gauge32, Counter32, IpAddress, MibIdentifier, TimeTicks, NotificationType, Unsigned32, Counter64, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "Counter32", "IpAddress", "MibIdentifier", "TimeTicks", "NotificationType", "Unsigned32", "Counter64", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xApple = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 21))
xAppleSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 21, 1))
xApplePort = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 21, 2))
xApplePolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 21, 3))
xAppleNbp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 21, 4))
xAppleTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 21, 5))
xAppleRemoteAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 21, 6))
appleState = MibScalar((1, 3, 6, 1, 4, 1, 33, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appleState.setStatus('mandatory')
if mibBuilder.loadTexts: appleState.setDescription('Controls whether the router will perform AppleTalk routing.')
appleStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("active", 2), ("noInterface", 3), ("badConfig", 4), ("noInterfaceActive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: appleStatus.setDescription('Indicates whether the router is performing AppleTalk routing.')
appleStatusIf = MibScalar((1, 3, 6, 1, 4, 1, 33, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleStatusIf.setStatus('mandatory')
if mibBuilder.loadTexts: appleStatusIf.setDescription("The ifIndex of the bad interface if appleStatus is 'badConfig'.")
applePortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 21, 2, 1), )
if mibBuilder.loadTexts: applePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: applePortTable.setDescription('Table of fields indexed by interface.')
applePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-APPLETALK-MIB", "applePortIndex"))
if mibBuilder.loadTexts: applePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: applePortEntry.setDescription('A particular entry.')
applePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: applePortIndex.setDescription('The index of the interface; same as IfIndex.')
applePortProtocolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5))).clone(namedValues=NamedValues(("low", 1), ("medium", 3), ("high", 5))).clone('medium')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortProtocolPriority.setStatus('mandatory')
if mibBuilder.loadTexts: applePortProtocolPriority.setDescription('This value defines the priority at which all Apple routed packets will be placed on the WAN output queue.')
applePortArpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(33, 65535)).clone(33)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortArpInterval.setStatus('mandatory')
if mibBuilder.loadTexts: applePortArpInterval.setDescription('The interval at which ARP messages should be sent during the process of selecting a network address.')
applePortArpRetransmitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortArpRetransmitCount.setStatus('mandatory')
if mibBuilder.loadTexts: applePortArpRetransmitCount.setDescription('The number of ARP messages that should be sent during the process of selecting a network address.')
applePortChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: applePortChecksum.setDescription('Controls whether checksums are generated on all DDP packets sent out the interface.')
applePortPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortPacketsIn.setStatus('mandatory')
if mibBuilder.loadTexts: applePortPacketsIn.setDescription('The number of AppleTalk packets received on this interface.')
applePortPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortPacketsOut.setStatus('mandatory')
if mibBuilder.loadTexts: applePortPacketsOut.setDescription('The number of AppleTalk packets transmitted on this interface.')
applePortForwardsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortForwardsIn.setStatus('mandatory')
if mibBuilder.loadTexts: applePortForwardsIn.setDescription('The number of AppleTalk packets received on this interface which were not addressed to this router.')
applePortForwardsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortForwardsOut.setStatus('mandatory')
if mibBuilder.loadTexts: applePortForwardsOut.setDescription('The number of AppleTalk packets transmitted on this interface which were not originated by this router.')
applePortNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 10), DdpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: applePortNetAddress.setDescription('The actual address used by this port.')
applePortNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortNetStart.setStatus('mandatory')
if mibBuilder.loadTexts: applePortNetStart.setDescription('The start of the actual network range used by this port.')
applePortNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortNetEnd.setStatus('mandatory')
if mibBuilder.loadTexts: applePortNetEnd.setDescription('The end of the actual network range used by this port.')
applePortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortErrors.setStatus('mandatory')
if mibBuilder.loadTexts: applePortErrors.setDescription('The number of AppleTalk packets received in error.')
applePortLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("broadcast", 1), ("checksum", 2), ("hopCount", 3), ("noProtocol", 4), ("noRoute", 5), ("shortDDP", 6), ("tooLong", 7), ("tooShort", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortLastError.setStatus('mandatory')
if mibBuilder.loadTexts: applePortLastError.setDescription('The type of the most recent error counted in applePortErrors. A value of zero means no error.')
applePortLastErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortLastErrorTime.setStatus('mandatory')
if mibBuilder.loadTexts: applePortLastErrorTime.setDescription('The value of sysUptime when applePortLastError last occured.')
applePortLastErrorData = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(22, 22)).setFixedLength(22)).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortLastErrorData.setStatus('mandatory')
if mibBuilder.loadTexts: applePortLastErrorData.setDescription('The first 22 bytes of the packet from applePortLastError.')
applePortBringBackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortBringBackTime.setStatus('mandatory')
if mibBuilder.loadTexts: applePortBringBackTime.setDescription('The number of seconds to shut down an interface while waiting for a manager-initiated configuration change to propagate.')
applePortUseNeighborNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortUseNeighborNotify.setStatus('mandatory')
if mibBuilder.loadTexts: applePortUseNeighborNotify.setDescription('Controls generation of neighbor notify messages when an interface is disabled or system is shut down.')
applePortRouterType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortRouterType.setStatus('mandatory')
if mibBuilder.loadTexts: applePortRouterType.setDescription('Type of router operation over this port.')
applePortZoneTable = MibTable((1, 3, 6, 1, 4, 1, 33, 21, 2, 2), )
if mibBuilder.loadTexts: applePortZoneTable.setStatus('mandatory')
if mibBuilder.loadTexts: applePortZoneTable.setDescription('Table of fields indexed by interface and zone.')
applePortZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 21, 2, 2, 1), ).setIndexNames((0, "MRV-IN-REACH-APPLETALK-MIB", "applePortZoneIndex"), (0, "MRV-IN-REACH-APPLETALK-MIB", "applePortZoneName"))
if mibBuilder.loadTexts: applePortZoneEntry.setStatus('mandatory')
if mibBuilder.loadTexts: applePortZoneEntry.setDescription('A particular entry.')
applePortZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortZoneIndex.setStatus('mandatory')
if mibBuilder.loadTexts: applePortZoneIndex.setDescription('The index of the interface; same as IfIndex.')
applePortZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortZoneName.setStatus('mandatory')
if mibBuilder.loadTexts: applePortZoneName.setDescription('The name of the zone.')
applePortZoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortZoneStatus.setStatus('mandatory')
if mibBuilder.loadTexts: applePortZoneStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry.")
applePortExportTable = MibTable((1, 3, 6, 1, 4, 1, 33, 21, 3, 1), )
if mibBuilder.loadTexts: applePortExportTable.setStatus('mandatory')
if mibBuilder.loadTexts: applePortExportTable.setDescription('Table of fields indexed by interface and zone.')
applePortExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 21, 3, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-APPLETALK-MIB", "applePortExportIndex"), (0, "MRV-IN-REACH-APPLETALK-MIB", "applePortExportZone"), (0, "MRV-IN-REACH-APPLETALK-MIB", "applePortExportName"), (0, "MRV-IN-REACH-APPLETALK-MIB", "applePortExportType"))
if mibBuilder.loadTexts: applePortExportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: applePortExportEntry.setDescription('A particular entry.')
applePortExportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortExportIndex.setStatus('mandatory')
if mibBuilder.loadTexts: applePortExportIndex.setDescription('The index of the interface; same as IfIndex.')
applePortExportZone = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortExportZone.setStatus('mandatory')
if mibBuilder.loadTexts: applePortExportZone.setDescription('The name of the zone.')
applePortExportName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortExportName.setStatus('mandatory')
if mibBuilder.loadTexts: applePortExportName.setDescription('The name of the name.')
applePortExportType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortExportType.setStatus('mandatory')
if mibBuilder.loadTexts: applePortExportType.setDescription('The name of the type.')
applePortExportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortExportAction.setStatus('mandatory')
if mibBuilder.loadTexts: applePortExportAction.setDescription('Control whether the data will be hidden or advertised.')
applePortExportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortExportStatus.setStatus('mandatory')
if mibBuilder.loadTexts: applePortExportStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry.")
applePortImportTable = MibTable((1, 3, 6, 1, 4, 1, 33, 21, 3, 2), )
if mibBuilder.loadTexts: applePortImportTable.setStatus('mandatory')
if mibBuilder.loadTexts: applePortImportTable.setDescription('Table of fields indexed by interface and zone.')
applePortImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 21, 3, 2, 1), ).setIndexNames((0, "MRV-IN-REACH-APPLETALK-MIB", "applePortImportIndex"), (0, "MRV-IN-REACH-APPLETALK-MIB", "applePortImportZone"), (0, "MRV-IN-REACH-APPLETALK-MIB", "applePortImportName"), (0, "MRV-IN-REACH-APPLETALK-MIB", "applePortImportType"))
if mibBuilder.loadTexts: applePortImportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: applePortImportEntry.setDescription('A particular entry.')
applePortImportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortImportIndex.setStatus('mandatory')
if mibBuilder.loadTexts: applePortImportIndex.setDescription('The index of the interface; same as IfIndex.')
applePortImportZone = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortImportZone.setStatus('mandatory')
if mibBuilder.loadTexts: applePortImportZone.setDescription('The name of the zone.')
applePortImportName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortImportName.setStatus('mandatory')
if mibBuilder.loadTexts: applePortImportName.setDescription('The name of the name.')
applePortImportType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: applePortImportType.setStatus('mandatory')
if mibBuilder.loadTexts: applePortImportType.setDescription('The name of the type.')
applePortImportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortImportAction.setStatus('mandatory')
if mibBuilder.loadTexts: applePortImportAction.setDescription('Control whether the data will be discarded or accepted.')
applePortImportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applePortImportStatus.setStatus('mandatory')
if mibBuilder.loadTexts: applePortImportStatus.setDescription("The status of the entry. Set to 'invalid' to remove the entry.")
appleNbpTable = MibTable((1, 3, 6, 1, 4, 1, 33, 21, 4, 1), )
if mibBuilder.loadTexts: appleNbpTable.setStatus('mandatory')
if mibBuilder.loadTexts: appleNbpTable.setDescription('Table of fields indexed by interface and zone.')
appleNbpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 21, 4, 1, 1), ).setIndexNames((0, "MRV-IN-REACH-APPLETALK-MIB", "appleNbpZone"), (0, "MRV-IN-REACH-APPLETALK-MIB", "appleNbpName"), (0, "MRV-IN-REACH-APPLETALK-MIB", "appleNbpType"))
if mibBuilder.loadTexts: appleNbpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: appleNbpEntry.setDescription('A particular entry.')
appleNbpZone = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleNbpZone.setStatus('mandatory')
if mibBuilder.loadTexts: appleNbpZone.setDescription('The name of the zone.')
appleNbpName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleNbpName.setStatus('mandatory')
if mibBuilder.loadTexts: appleNbpName.setDescription('The name of the name.')
appleNbpType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleNbpType.setStatus('mandatory')
if mibBuilder.loadTexts: appleNbpType.setDescription('The name of the type.')
appleNbpNode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 4, 1, 1, 4), DdpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleNbpNode.setStatus('mandatory')
if mibBuilder.loadTexts: appleNbpNode.setDescription('The address of the node who offers the service associated with this entry.')
appleNbpSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleNbpSocket.setStatus('mandatory')
if mibBuilder.loadTexts: appleNbpSocket.setDescription('The socket of the service associated with this entry. The value 0 means no socket.')
appleTrafficSort = MibScalar((1, 3, 6, 1, 4, 1, 33, 21, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appleTrafficSort.setStatus('mandatory')
if mibBuilder.loadTexts: appleTrafficSort.setDescription('Setting to EXECUTE causes the most recent traffic information to be sorted into the appleTrafficTable. The sorting precedence is: decreasing percentage, increasing destination address, increasing source address, and increasing interface number. Setting to READY has no effect.')
appleTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 33, 21, 5, 2), )
if mibBuilder.loadTexts: appleTrafficTable.setStatus('mandatory')
if mibBuilder.loadTexts: appleTrafficTable.setDescription('A list of traffic entries, sorted in the order specified by appleTrafficSort.')
appleTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 21, 5, 2, 1), ).setIndexNames((0, "MRV-IN-REACH-APPLETALK-MIB", "appleTrafficIndex"))
if mibBuilder.loadTexts: appleTrafficEntry.setStatus('mandatory')
if mibBuilder.loadTexts: appleTrafficEntry.setDescription('Parameter values for an Filter filter.')
appleTrafficIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleTrafficIndex.setStatus('mandatory')
if mibBuilder.loadTexts: appleTrafficIndex.setDescription('Identification of a traffic entry.')
appleTrafficPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleTrafficPercent.setStatus('mandatory')
if mibBuilder.loadTexts: appleTrafficPercent.setDescription('The percent of total traffic that this traffic entryrepresents, in tenths of a percent.')
appleTrafficDst = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 5, 2, 1, 3), DdpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleTrafficDst.setStatus('mandatory')
if mibBuilder.loadTexts: appleTrafficDst.setDescription('The destination to which the traffic entry applies.')
appleTrafficSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 5, 2, 1, 4), DdpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleTrafficSrc.setStatus('mandatory')
if mibBuilder.loadTexts: appleTrafficSrc.setDescription('The source to which the traffic entry applies.')
appleTrafficIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appleTrafficIntf.setStatus('mandatory')
if mibBuilder.loadTexts: appleTrafficIntf.setDescription('The inbound interface to which the traffic entry applies.')
appleTrafficMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 33, 21, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appleTrafficMonitoring.setStatus('mandatory')
if mibBuilder.loadTexts: appleTrafficMonitoring.setDescription('Controls whether internet traffic information will be recorded.')
arapPassword = MibScalar((1, 3, 6, 1, 4, 1, 33, 21, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arapPassword.setStatus('mandatory')
if mibBuilder.loadTexts: arapPassword.setDescription("The server's ARAP password. To increase security, Gets of this object return the NULL string.")
arapDefaultZoneName = MibScalar((1, 3, 6, 1, 4, 1, 33, 21, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arapDefaultZoneName.setStatus('mandatory')
if mibBuilder.loadTexts: arapDefaultZoneName.setDescription('The name of the AppleTalk zone that the server should try to choose at boot time.')
arapPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 21, 6, 3), )
if mibBuilder.loadTexts: arapPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: arapPortTable.setDescription('A list of ARAP port entries.')
arapPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 21, 6, 3, 1), ).setIndexNames((0, "RFC1316-MIB", "charPortIndex"))
if mibBuilder.loadTexts: arapPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: arapPortEntry.setDescription('ARAP parameter values for a port.')
arapPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arapPortEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: arapPortEnabled.setDescription('Indicates if ARAP connections are allowed on this port.')
arapPortZoneAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("all", 1), ("local", 2), ("none", 3), ("namedzone", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arapPortZoneAccess.setStatus('mandatory')
if mibBuilder.loadTexts: arapPortZoneAccess.setDescription('Indicates the AppleTalk zones that ARAP connections on this port may access: none, local, all, or named zone.')
arapPortZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 6, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arapPortZoneName.setStatus('mandatory')
if mibBuilder.loadTexts: arapPortZoneName.setDescription("If this port's arapPortZoneAccess field indicates a named zone, this field contains the zone name.")
arapPortMaxConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 6, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arapPortMaxConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: arapPortMaxConnectTime.setDescription('Maximum number of minutes a single ARAP connection may exist on the port before a server initiated disconnect. To set no limit on the amount of time that an ARAP user may be connected, set this object to -1.')
arapPortGuestLoginsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arapPortGuestLoginsOk.setStatus('mandatory')
if mibBuilder.loadTexts: arapPortGuestLoginsOk.setDescription("Indicates if 'Guest' logins (with no password) are allowed on the port.")
arapPortTimeConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 6, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arapPortTimeConnected.setStatus('mandatory')
if mibBuilder.loadTexts: arapPortTimeConnected.setDescription('Indicates the number of minutes the current ARAP connection has been established on the port, rounded up to the nearest minute. Gets return -1 if no ARAP user is currently connected on the port or if ARAP is not enabled on the port.')
arapPortTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 21, 6, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arapPortTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: arapPortTimeRemaining.setDescription('Indicates the number of minutes the current ARAP connection may remain on the port before a server initiated disconnect will occur, rounded up to the nearest minute. To set no limit on the amount of time that the current ARAP user may continue to be connected, set this object to the maximum value in the range. Gets return -1 if no ARAP user is currently connected on the port or if ARAP is not enabled on the port. Gets also return -1 if there is a user connected and there is no limit on the amount of time that the current user may be connected.')
mibBuilder.exportSymbols("MRV-IN-REACH-APPLETALK-MIB", applePortZoneTable=applePortZoneTable, applePortArpRetransmitCount=applePortArpRetransmitCount, xApplePort=xApplePort, applePortExportIndex=applePortExportIndex, appleNbpType=appleNbpType, applePortPacketsOut=applePortPacketsOut, applePortExportAction=applePortExportAction, applePortImportType=applePortImportType, appleTrafficSort=appleTrafficSort, arapPortMaxConnectTime=arapPortMaxConnectTime, applePortExportEntry=applePortExportEntry, applePortImportName=applePortImportName, applePortProtocolPriority=applePortProtocolPriority, applePortArpInterval=applePortArpInterval, arapPortTimeConnected=arapPortTimeConnected, arapDefaultZoneName=arapDefaultZoneName, applePortNetAddress=applePortNetAddress, applePortForwardsIn=applePortForwardsIn, applePortExportName=applePortExportName, applePortZoneStatus=applePortZoneStatus, applePortZoneEntry=applePortZoneEntry, xAppleRemoteAccess=xAppleRemoteAccess, applePortIndex=applePortIndex, appleNbpName=appleNbpName, applePortRouterType=applePortRouterType, arapPortZoneName=arapPortZoneName, applePortForwardsOut=applePortForwardsOut, xAppleNbp=xAppleNbp, applePortLastErrorTime=applePortLastErrorTime, applePortExportTable=applePortExportTable, applePortImportAction=applePortImportAction, appleTrafficIntf=appleTrafficIntf, appleState=appleState, appleNbpSocket=appleNbpSocket, appleStatus=appleStatus, arapPortZoneAccess=arapPortZoneAccess, applePortBringBackTime=applePortBringBackTime, appleTrafficIndex=appleTrafficIndex, applePortNetStart=applePortNetStart, appleTrafficEntry=appleTrafficEntry, arapPassword=arapPassword, xApplePolicy=xApplePolicy, applePortImportZone=applePortImportZone, arapPortGuestLoginsOk=arapPortGuestLoginsOk, applePortExportType=applePortExportType, appleNbpTable=appleNbpTable, appleTrafficSrc=appleTrafficSrc, appleTrafficMonitoring=appleTrafficMonitoring, appleNbpZone=appleNbpZone, xAppleTraffic=xAppleTraffic, applePortChecksum=applePortChecksum, appleNbpEntry=appleNbpEntry, arapPortTable=arapPortTable, arapPortEntry=arapPortEntry, applePortTable=applePortTable, applePortImportEntry=applePortImportEntry, xAppleSystem=xAppleSystem, applePortPacketsIn=applePortPacketsIn, appleNbpNode=appleNbpNode, arapPortTimeRemaining=arapPortTimeRemaining, appleTrafficDst=appleTrafficDst, applePortImportTable=applePortImportTable, applePortLastError=applePortLastError, applePortExportStatus=applePortExportStatus, applePortEntry=applePortEntry, applePortZoneIndex=applePortZoneIndex, applePortErrors=applePortErrors, applePortImportIndex=applePortImportIndex, appleTrafficTable=appleTrafficTable, applePortLastErrorData=applePortLastErrorData, appleStatusIf=appleStatusIf, applePortImportStatus=applePortImportStatus, applePortExportZone=applePortExportZone, appleTrafficPercent=appleTrafficPercent, applePortUseNeighborNotify=applePortUseNeighborNotify, applePortNetEnd=applePortNetEnd, applePortZoneName=applePortZoneName, xApple=xApple, arapPortEnabled=arapPortEnabled)
