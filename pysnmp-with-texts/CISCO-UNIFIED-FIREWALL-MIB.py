#
# PySNMP MIB module CISCO-UNIFIED-FIREWALL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-UNIFIED-FIREWALL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:18:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
dot1dTpFdbPort, dot1dTpFdbStatus = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dTpFdbPort", "dot1dTpFdbStatus")
CFWPolicyTargetType, CFWNetworkProtocol, CFWUrlServerStatus, CFWUrlfVendorId, CFWPolicyTarget, CFWPolicy, CFWApplicationProtocol = mibBuilder.importSymbols("CISCO-FIREWALL-TC", "CFWPolicyTargetType", "CFWNetworkProtocol", "CFWUrlServerStatus", "CFWUrlfVendorId", "CFWPolicyTarget", "CFWPolicy", "CFWApplicationProtocol")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter32, Unsigned32, MibIdentifier, Gauge32, IpAddress, Bits, Counter64, ModuleIdentity, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "Unsigned32", "MibIdentifier", "Gauge32", "IpAddress", "Bits", "Counter64", "ModuleIdentity", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32")
TimeStamp, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TruthValue", "TextualConvention")
ciscoUnifiedFirewallMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 491))
ciscoUnifiedFirewallMIB.setRevisions(('2005-09-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoUnifiedFirewallMIB.setRevisionsDescriptions(('Initial version of this module. ',))
if mibBuilder.loadTexts: ciscoUnifiedFirewallMIB.setLastUpdated('200509220000Z')
if mibBuilder.loadTexts: ciscoUnifiedFirewallMIB.setOrganization('Cisco Systems')
if mibBuilder.loadTexts: ciscoUnifiedFirewallMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-firewalls@cisco.com')
if mibBuilder.loadTexts: ciscoUnifiedFirewallMIB.setDescription("Overview of Cisco Firewall MIB ============================== This MIB Module models status and performance statistics pertaining to the common features supported by Cisco firewall implementations. For each firewall feature, capability (if applicable) and statistics are defined. Supporting the configuration of firewall features is outside the scope of this MIB. Following are the major firewall features: 1) 'Stateful Packet Filtering' Creating and maintaining the state of authorized traffic flows dynamically to permit only flows authorized by the policy is a mandatory function of a firewall. This MIB instruments the activity and memory usage by this function. 2) 'Application Inspection' This refers to the function of inspecting the headers of layer 3 and layer 4 protocols and creating dynamic entries in the connection table for traffic flows spawned by an already established traffic flow. This MIB reflects the protocols that are being inspected. 3) 'URL Filtering' This refers to the function of facilitating or restricting URL access requests through the firewall by consulting either local policy or that configured on a dedicated URL filtering server. This MIB instruments the URL filtering activity, the status and activity of distinct URL filtering servers configured on the firewall and the impact of the performance of the URL filtering servers on the latency and throughput of the firewall. 4) 'Proxy Authentication' This refers to the function of authenticating and/or authorizing users on behalf of servers on the secure side of the firewall. This operation could affect the throughput of the firewall. The MIB objects pertaining to Proxy Authentication will be defined in a subsequent revision of this MIB. 5) 'Transparent Mode Operation' A firewall could operate as a bridge and yet filter traffic based on layer 3-layer 7 control and payload information. Operating in this mode makes it easy to implement a firewall without fragmenting existing subnets. Another advantage of this mode of operation is enhanced security. This MIB instruments the status, activity, and performance of the firewall in this mode. Please note that to fully manage a firewall operating in this mode, the firewall must also support the bridge MIB (BRIDGE-MIB). 6) 'Advanced Application Inspection and Control' This function is also termed 'Application Firewall' and pertains to inspecting payload and headers of application traffic to make sure the traffic flows conform to the configured security policy. Monitoring this function entails identifying the security alerts generated by this function and measuring the impact on firewall performance by this task. Application Firewall will be instrumented in a separate MIB dedicated for the function. 7) 'Failover' or 'Redundancy' Redundancy configuration is essential for business critical firewalls. Instrumenting this function entails reflecting the configuration of redundancy and identifying failover events. The MIB objects pertaining to Proxy Authentication will be defined in a subsequent revision of this MIB. The management information for each firewall feature is defined in a distinct module compliance unit. The compliance units corresponding to basic features of firewalls are defined as mandatory. Acronyms ======== Following are definitions of some terms used in this module. Please refer to the module conformance for a glossary of feature-specific terms. `Firewall' A firewall is a set of related programs, implemented on a host or a network device, that protects the resources of a private network from users from other networks. Common firewalling functions include stateful packet filtering, proxy authentication of users on behalf of applications on the secure side of the firewall, URL access control, inspection of payload of traffic streams to determine security threats. `Layer2 Firewall' or 'Transparent Firewall' A firewall device that operates as a bridge while performing firewalling function. `Connection' The record in the firewall of a traffic strean that has been authorized to flow through the firewall. `Half Open Connection' For a connection oriented protocol: a connection that has not reached the established on both the sides of the connection. For a connection-less protocol: the connection corresponding to a traffic stream where traffic flow has occurred (since the establishment of the connection entry) only on one direction. `Embryonic Connection' The connection entry corresponding to an application layer protocol in which the signaling channel has been established while the setup of the data channel is underway. `Policy' An element of firewall configuration that identifies the access rights to a resource by a traffic source. An example of a policy is an Access Control Rule. `Policy Target' An entity to which a policy is applied so that the action corresponding to the policy is taken only on traffic streams associated with the entity. An example of a policy target is an interface. `URL Filtering Server' A server which is employed by the firewall to enforce URL access policies. `Protocol Data Unit' or PDU An instance of the unit of information using which a protocol operates is called the Protocol Data Unit or the PDU of the protocol. `Deep Packet Inspection' The task of examining the contents of the payloads of one or more layer 7 application protocols with a view to enforcing the local security policies termed 'Deep Packet Inspection'. `Advanced Application Inspection and Control' An entity that performs deep packet inspection of layer 7 application protocol data units is termed an 'Application Firewall'. ")
ciscoUnifiedFirewallMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 0))
ciscoUnifiedFirewallMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1))
ciscoUnifiedFirewallMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 2))
cuFwConnectionGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1))
cuFwApplInspectionGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 2))
cuFwUrlFilterGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3))
cuFwFailoverGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 4))
cuFwAaicGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 5))
cuFwL2FwGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 6))
cuFwNotifCntlGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 7))
cuFwConnectionGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 1))
cuFwConnectionResources = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 2))
cuFwConnectionReportSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 3))
cuFwConnectionSummaryTables = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4))
cufwConnGlobalNumAttempted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 1, 1), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnGlobalNumAttempted.setStatus('current')
if mibBuilder.loadTexts: cufwConnGlobalNumAttempted.setDescription(" Connection Statistics Aggregation Connection 1 +-----------+ ------------->| |-------> Global Connection Summary Connection 2 | | ------------->| | Connection 3 | | ------------->| First |------------> ConnSummary | Level | (i.e, L-3/4 Protocol Connection 4 |Aggregation| Connection Summary) ------------->| | . | | . | |---------------> PolicyConnSummary Connection N | | (i.e, L-3/4 Policy Target based ------------->| | Protocol Connection Summary) +-----------+ +-----------+ L-3/4 Protocol | | Connection Summary | | ------------------>| |---------> AppConnSummary | | (i.e, L-7 Protocol | Second | Connection Summary) |---Level---| L-3/4 Policy Target |Aggregation| based Protocol | | Connection Summary | | ------------------>| |---------------> PolicyAppConnSummary | | (i.e, L-7 Policy Target based | | Protocol Connection Summary) +-----------+ Specifically, the object 'cufwConnGlobalNumAttempted' models the number of connections which are attempted to be set up through the firewall. This value is accumulated from the last reboot of the firewall. ")
cufwConnGlobalNumSetupsAborted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 1, 2), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnGlobalNumSetupsAborted.setStatus('current')
if mibBuilder.loadTexts: cufwConnGlobalNumSetupsAborted.setDescription("The number of connection setup attempts that were aborted before the connection could proceed to completion. The counter includes setup attempts aborted by the firewall as well as those aborted by the initiator and/or the responder(s) of/to the connection setup attempt. Consequently, this value subsumes the values of objects 'cufwConnGlobalNumPolicyDeclined' and 'cufwConnGlobalNumResDeclined'. This value is accumulated from the last reboot of the firewall. ")
cufwConnGlobalNumPolicyDeclined = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 1, 3), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnGlobalNumPolicyDeclined.setStatus('current')
if mibBuilder.loadTexts: cufwConnGlobalNumPolicyDeclined.setDescription('The number of connections which were attempted to be setup but which were declined due to reasons of security policy. This includes the connections that failed authentication. This value is accumulated from the last reboot of the firewall. ')
cufwConnGlobalNumResDeclined = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 1, 4), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnGlobalNumResDeclined.setStatus('current')
if mibBuilder.loadTexts: cufwConnGlobalNumResDeclined.setDescription('The number of connections which were attempted to be setup but which were declined due to non-availability of required resources. This value is accumulated from the last reboot of the firewall. ')
cufwConnGlobalNumHalfOpen = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 1, 5), Gauge32()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnGlobalNumHalfOpen.setStatus('current')
if mibBuilder.loadTexts: cufwConnGlobalNumHalfOpen.setDescription('The number of connections which are in the process of being setup but which have not yet reached the established state in the connection table. ')
cufwConnGlobalNumActive = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 1, 6), Gauge32()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnGlobalNumActive.setStatus('current')
if mibBuilder.loadTexts: cufwConnGlobalNumActive.setDescription('The number of connections which are currently active. ')
cufwConnGlobalNumExpired = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 1, 7), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnGlobalNumExpired.setStatus('current')
if mibBuilder.loadTexts: cufwConnGlobalNumExpired.setDescription('The number of connections which were active but which were since normally terminated. This value is accumulated from the last reboot of the firewall. ')
cufwConnGlobalNumAborted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 1, 8), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnGlobalNumAborted.setStatus('current')
if mibBuilder.loadTexts: cufwConnGlobalNumAborted.setDescription('The number of connections which were active but which were aborted by the firewall due to reasons of policy or resource rationing. This value is accumulated from the last reboot of the firewall. ')
cufwConnGlobalNumEmbryonic = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 1, 9), Gauge32()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnGlobalNumEmbryonic.setStatus('current')
if mibBuilder.loadTexts: cufwConnGlobalNumEmbryonic.setDescription('The number of embryonic application layer connections (that is, connections in which the signaling channel has been established while the data channel is awaiting setup). This value is accumulated from the last reboot of the firewall. ')
cufwConnGlobalConnSetupRate1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 1, 10), Gauge32()).setUnits('Connections per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnGlobalConnSetupRate1.setStatus('current')
if mibBuilder.loadTexts: cufwConnGlobalConnSetupRate1.setDescription('The averaged number of connections which the firewall establishing per second, averaged over the last 60 seconds. ')
cufwConnGlobalConnSetupRate5 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 1, 11), Gauge32()).setUnits('Connections per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnGlobalConnSetupRate5.setStatus('current')
if mibBuilder.loadTexts: cufwConnGlobalConnSetupRate5.setDescription('The averaged number of connections which the firewall establishing per second, averaged over the last 300 seconds. ')
cufwConnGlobalNumRemoteAccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 1, 12), Gauge32()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnGlobalNumRemoteAccess.setStatus('current')
if mibBuilder.loadTexts: cufwConnGlobalNumRemoteAccess.setDescription('The number of active connections which correspond to remote access applications. Specifically, the protocol for which the connection is established must be one of PPP, PPTP, L2TP or remote access IPsec (IPsec connections employing extended authentication). This value is accumulated from the last reboot of the firewall. ')
cufwConnResMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 2, 1), Gauge32()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnResMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: cufwConnResMemoryUsage.setDescription('The amount of memory occupied by all structures required to maintain the state of all connections which are either being established or are active. ')
cufwConnResActiveConnMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 2, 2), Gauge32()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnResActiveConnMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: cufwConnResActiveConnMemoryUsage.setDescription('The amount of memory occupied by all structures required to maintain the state of all active connections. ')
cufwConnResHOConnMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 2, 3), Gauge32()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnResHOConnMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: cufwConnResHOConnMemoryUsage.setDescription('The amount of memory occupied by all structures required to maintain the state of all half open connections. ')
cufwConnResEmbrConnMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 2, 4), Gauge32()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnResEmbrConnMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: cufwConnResEmbrConnMemoryUsage.setDescription('The amount of memory occupied by all structures required to maintain the state of all embryonic connections. ')
cufwConnReptAppStats = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cufwConnReptAppStats.setStatus('current')
if mibBuilder.loadTexts: cufwConnReptAppStats.setDescription("Setting this object to 'true' enables the MIB to report connection activity statistics pertaining to application protocols. If this object is set to 'false', the agent should stop updating the objects defined in this module pertaining to application protocols. Application monitoring could be a resource intensive operation. It is expected that the administrators would use this control to disable application monitoring when the performance of the firewall is degrading. ")
cufwConnReptAppStatsLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 3, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnReptAppStatsLastChanged.setStatus('current')
if mibBuilder.loadTexts: cufwConnReptAppStatsLastChanged.setDescription('The time at which the value of cufwConnReptAppStats was last changed. ')
cufwConnSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 1), )
if mibBuilder.loadTexts: cufwConnSummaryTable.setStatus('current')
if mibBuilder.loadTexts: cufwConnSummaryTable.setDescription('This table summarizes the connection activity on the firewall per layer3-layer 4 protocol instance. Each entry in the table lists the connection summary of a distinct network protocol. For instance, the conceptual row corresponding to the index cufwConnProtocol = fwpTcp yields the summary of TCP connection activity on the firewall since its reboot. ')
cufwConnSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-UNIFIED-FIREWALL-MIB", "cufwConnProtocol"))
if mibBuilder.loadTexts: cufwConnSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: cufwConnSummaryEntry.setDescription('Each entry contains the summary of connection activity for a layer3-layer4 network protocol. ')
cufwConnProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 1, 1, 1), CFWNetworkProtocol())
if mibBuilder.loadTexts: cufwConnProtocol.setStatus('current')
if mibBuilder.loadTexts: cufwConnProtocol.setDescription('The (L3-L4) protocol for which this conceptual row summarizes the connection activity on the managed entity. ')
cufwConnNumAttempted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 1, 1, 2), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnNumAttempted.setStatus('current')
if mibBuilder.loadTexts: cufwConnNumAttempted.setDescription("The number of connections attempted since the last reboot of the firewall, corresponding to the protocol denoted by 'cufwConnProtocol'. This value is accumulated from the last reboot of the firewall. ")
cufwConnNumSetupsAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 1, 1, 3), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnNumSetupsAborted.setStatus('current')
if mibBuilder.loadTexts: cufwConnNumSetupsAborted.setDescription("The number of connection setup attempts, corresponding to the protocol denoted by 'cufwConnProtocol', that were aborted before the connection could proceed to completion. The counter includes setup attempts aborted by the firewall as well as those aborted by the initiator and/or the responder(s) of/to the connection setup attempt. Consequently, this value subsumes the values of objects 'cufwConnNumPolicyDeclined' and 'cufwConnNumResDeclined'. This value is accumulated from the last reboot of the firewall. ")
cufwConnNumPolicyDeclined = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 1, 1, 4), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnNumPolicyDeclined.setStatus('current')
if mibBuilder.loadTexts: cufwConnNumPolicyDeclined.setDescription("The number of connection attempts that were declined due to security policy, corresponding to the protocol denoted by 'cufwConnProtocol'. This value is accumulated from the last reboot of the firewall. ")
cufwConnNumResDeclined = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 1, 1, 5), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnNumResDeclined.setStatus('current')
if mibBuilder.loadTexts: cufwConnNumResDeclined.setDescription("The number of connection attempts that were declined due to resource unavailability, corresponding to the protocol denoted by 'cufwConnProtocol'. This value is accumulated from the last reboot of the firewall. ")
cufwConnNumHalfOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 1, 1, 6), Gauge32()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnNumHalfOpen.setStatus('current')
if mibBuilder.loadTexts: cufwConnNumHalfOpen.setDescription("The number of connections that are currently in the process of being established, corresponding to the protocol denoted by 'cufwConnProtocol'. ")
cufwConnNumActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 1, 1, 7), Gauge32()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnNumActive.setStatus('current')
if mibBuilder.loadTexts: cufwConnNumActive.setDescription("The number of connections that are currently active, corresponding to the protocol denoted by 'cufwConnProtocol'. ")
cufwConnNumAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 1, 1, 8), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnNumAborted.setStatus('current')
if mibBuilder.loadTexts: cufwConnNumAborted.setDescription("The number of connections that were abnormally terminated after successful establishment, corresponding to the protocol denoted by 'cufwConnProtocol'. This value is accumulated from the last reboot of the firewall. ")
cufwConnSetupRate1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 1, 1, 9), Gauge32()).setUnits('Connections Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnSetupRate1.setStatus('current')
if mibBuilder.loadTexts: cufwConnSetupRate1.setDescription("The connection setup rate averaged over the last 60 seconds corresponding to the protocol denoted by 'cufwConnProtocol'. ")
cufwConnSetupRate5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 1, 1, 10), Gauge32()).setUnits('Connections Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwConnSetupRate5.setStatus('current')
if mibBuilder.loadTexts: cufwConnSetupRate5.setDescription("The connection setup rate averaged over the last 300 seconds corresponding to the protocol denoted by 'cufwConnProtocol'. ")
cufwAppConnSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 2), )
if mibBuilder.loadTexts: cufwAppConnSummaryTable.setStatus('current')
if mibBuilder.loadTexts: cufwAppConnSummaryTable.setDescription('This table lists the summary of firewall connections pertaining to Layer 7 protocols, catalogued by distinct application protocols. Each entry in the table lists the connection summary corresponding to a distinct application protocol. For instance, to obtain the connection summary for SMTP on the firewall since the last reboot of the device, use the conceptual row corresponding to cufwAppConnProtocol = fwApSmtp ')
cufwAppConnSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-UNIFIED-FIREWALL-MIB", "cufwAppConnProtocol"))
if mibBuilder.loadTexts: cufwAppConnSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: cufwAppConnSummaryEntry.setDescription("Each entry contains the summary of connection activity for a distinct layer 7 protocol identified by the index element 'cufwAppConnProtocol'. ")
cufwAppConnProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 2, 1, 1), CFWApplicationProtocol())
if mibBuilder.loadTexts: cufwAppConnProtocol.setStatus('current')
if mibBuilder.loadTexts: cufwAppConnProtocol.setDescription('The layer7 protocol for which this conceptual row summarizes the connection activity for this firewall. ')
cufwAppConnNumAttempted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 2, 1, 2), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAppConnNumAttempted.setStatus('current')
if mibBuilder.loadTexts: cufwAppConnNumAttempted.setDescription("The number of connections attempted since the last reboot of the firewall, corresponding to the protocol denoted by 'cufwAppConnProtocol'. This value is accumulated from the last reboot of the firewall subject to the control exercised by cufwConnReptAppStats. ")
cufwAppConnNumSetupsAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 2, 1, 3), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAppConnNumSetupsAborted.setStatus('current')
if mibBuilder.loadTexts: cufwAppConnNumSetupsAborted.setDescription("The number of connection setup attempts, corresponding to the protocol denoted by 'cufwAppConnProtocol', that were aborted before the connection could proceed to completion. The counter includes setup attempts aborted by the firewall as well as those aborted by the initiator and/or the responder(s) of/to the connection setup attempt. Consequently, this value subsumes the values of objects 'cufwAppConnNumPolicyDeclined' and 'cufwAppConnNumResDeclined'. This value is accumulated from the last reboot of the firewall subject to the control exercised by cufwConnReptAppStats. ")
cufwAppConnNumPolicyDeclined = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 2, 1, 4), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAppConnNumPolicyDeclined.setStatus('current')
if mibBuilder.loadTexts: cufwAppConnNumPolicyDeclined.setDescription("The number of connection attempts that were declined due to security policy, corresponding to the protocol denoted by 'cufwAppConnProtocol'. This value is accumulated from the last reboot of the firewall subject to the control exercised by cufwConnReptAppStats. ")
cufwAppConnNumResDeclined = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 2, 1, 5), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAppConnNumResDeclined.setStatus('current')
if mibBuilder.loadTexts: cufwAppConnNumResDeclined.setDescription("The number of connection attempts that were declined due to resource unavailability, corresponding to the protocol denoted by 'cufwAppConnProtocol'. This value is accumulated from the last reboot of the firewall subject to the control exercised by cufwConnReptAppStats. ")
cufwAppConnNumHalfOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 2, 1, 6), Gauge32()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAppConnNumHalfOpen.setStatus('current')
if mibBuilder.loadTexts: cufwAppConnNumHalfOpen.setDescription("The number of connections that are currently in the process of being established, corresponding to the protocol denoted by 'cufwAppConnProtocol'. ")
cufwAppConnNumActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 2, 1, 7), Gauge32()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAppConnNumActive.setStatus('current')
if mibBuilder.loadTexts: cufwAppConnNumActive.setDescription("The number of connections that are currently active, corresponding to the protocol denoted by 'cufwAppConnProtocol'. ")
cufwAppConnNumAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 2, 1, 8), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAppConnNumAborted.setStatus('current')
if mibBuilder.loadTexts: cufwAppConnNumAborted.setDescription("The number of connections that were terminated by the firewall successful establishment, corresponding to the protocol denoted by 'cufwAppConnProtocol'. This value is accumulated from the last reboot of the firewall subject to the control exercised by cufwConnReptAppStats. ")
cufwAppConnSetupRate1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 2, 1, 9), Gauge32()).setUnits('Connections Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAppConnSetupRate1.setStatus('current')
if mibBuilder.loadTexts: cufwAppConnSetupRate1.setDescription("The connection setup rate averaged over the last 60 seconds corresponding to the protocol denoted by 'cufwAppConnProtocol'. ")
cufwAppConnSetupRate5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 2, 1, 10), Gauge32()).setUnits('Connections Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAppConnSetupRate5.setStatus('current')
if mibBuilder.loadTexts: cufwAppConnSetupRate5.setDescription("The connection setup rate averaged over the last 300 seconds corresponding to the protocol denoted by 'cufwAppConnProtocol'. ")
cufwPolicyConnSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 3), )
if mibBuilder.loadTexts: cufwPolicyConnSummaryTable.setStatus('current')
if mibBuilder.loadTexts: cufwPolicyConnSummaryTable.setDescription("This table lists the summary of firewall connections for layer3-layer 4 protocols catalogued on a per policy basis. Each entry in the table lists the connection summary of a distinct network protocol, configured on the specified policy on the firewall, and pertaining to a specified target to which the policy is currently applied. If a policy is bound to a target, it would have one or more entries in this table. If the policy is detached from the target, all entries corresponding to the association between the policy and the target are elminated from this table. Although the information is indexed by policy targets as well, one may aggregate the connection summary for a specific policy across all the target to which the policy is currently applied by setting cufwConnPolicyTargetType = 'targetAll' ")
cufwPolicyConnSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-UNIFIED-FIREWALL-MIB", "cufwPolConnPolicy"), (0, "CISCO-UNIFIED-FIREWALL-MIB", "cufwPolConnPolicyTargetType"), (0, "CISCO-UNIFIED-FIREWALL-MIB", "cufwPolConnPolicyTarget"), (0, "CISCO-UNIFIED-FIREWALL-MIB", "cufwPolConnProtocol"))
if mibBuilder.loadTexts: cufwPolicyConnSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: cufwPolicyConnSummaryEntry.setDescription('Each entry contains the summary of connection activity for a specific protocol in a specific policy applied to the specified policy target. ')
cufwPolConnPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 3, 1, 1), CFWPolicy())
if mibBuilder.loadTexts: cufwPolConnPolicy.setStatus('current')
if mibBuilder.loadTexts: cufwPolConnPolicy.setDescription('The identity of the firewall policy for which this conceptual row contains the connection activity summary. ')
cufwPolConnPolicyTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 3, 1, 2), CFWPolicyTargetType())
if mibBuilder.loadTexts: cufwPolConnPolicyTargetType.setStatus('current')
if mibBuilder.loadTexts: cufwPolConnPolicyTargetType.setDescription("The type of the entity to which the firewall policy 'cufwPolConnPolicy' has been applied. This could be an interface type (most commonly), the type of another object or a group of objects defined in the firewall configuration. When this object is set to 'targetALL', the value of index object cufwConnPolicyTarget is ignored. ")
cufwPolConnPolicyTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 3, 1, 3), CFWPolicyTarget().subtype(subtypeSpec=ValueSizeConstraint(0, 128)))
if mibBuilder.loadTexts: cufwPolConnPolicyTarget.setStatus('current')
if mibBuilder.loadTexts: cufwPolConnPolicyTarget.setDescription("The identity of the entity to which the firewall policy 'cufwPolConnPolicy' is applied. This could be an interface object (most commonly), another object or group of objects defined in the firewall configuration. ")
cufwPolConnProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 3, 1, 4), CFWNetworkProtocol())
if mibBuilder.loadTexts: cufwPolConnProtocol.setStatus('current')
if mibBuilder.loadTexts: cufwPolConnProtocol.setDescription('The (L3-L4) protocol corresponding to which this conceptual row summarizes the connection activity on the firewall. ')
cufwPolConnNumAttempted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 3, 1, 5), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwPolConnNumAttempted.setStatus('current')
if mibBuilder.loadTexts: cufwPolConnNumAttempted.setDescription("The number of connections attempted since the last reboot of the firewall, corresponding to the protocol denoted by 'cufwPolConnProtocol', in the policy 'cufwPolConnPolicy' applied to the entity identified by 'cufwPolConnPolicyTarget'. ")
cufwPolConnNumSetupsAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 3, 1, 6), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwPolConnNumSetupsAborted.setStatus('current')
if mibBuilder.loadTexts: cufwPolConnNumSetupsAborted.setDescription("The number of connection setup attempts, corresponding to the protocol denoted by 'cufwPolConnProtocol', associated with the policy 'cufwPolConnPolicy' applied to the entity identified by 'cufwPolConnPolicyTarget', that were aborted before the connection could proceed to completion. The counter includes setup attempts aborted by the firewall as well as those aborted by the initiator and/or the responder(s) of/to the connection setup attempt. Consequently, this value subsumes the values of objects 'cufwPolConnNumPolicyDeclined' and 'cufwPolConnNumResDeclined'. ")
cufwPolConnNumPolicyDeclined = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 3, 1, 7), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwPolConnNumPolicyDeclined.setStatus('current')
if mibBuilder.loadTexts: cufwPolConnNumPolicyDeclined.setDescription("The number of connection attempts that were declined due to security policy, corresponding to the protocol denoted by 'cufwPolConnProtocol', in the policy 'cufwPolConnPolicy' applied to the entity identified by 'cufwPolConnPolicyTarget'. ")
cufwPolConnNumResDeclined = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 3, 1, 8), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwPolConnNumResDeclined.setStatus('current')
if mibBuilder.loadTexts: cufwPolConnNumResDeclined.setDescription("The number of connection attempts that were declined due to resource unavailability, corresponding to the protocol denoted by 'cufwPolConnProtocol', in the policy 'cufwPolConnPolicy' applied to the entity identified by 'cufwPolConnPolicyTarget'. ")
cufwPolConnNumHalfOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 3, 1, 9), Gauge32()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwPolConnNumHalfOpen.setStatus('current')
if mibBuilder.loadTexts: cufwPolConnNumHalfOpen.setDescription("The number of connections that are currently in the process of being established, corresponding to the protocol denoted by 'cufwPolConnProtocol', in the policy 'cufwPolConnPolicy' applied to the entity identified by 'cufwPolConnPolicyTarget'. ")
cufwPolConnNumActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 3, 1, 10), Gauge32()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwPolConnNumActive.setStatus('current')
if mibBuilder.loadTexts: cufwPolConnNumActive.setDescription("The number of connections that are currently active, corresponding to the protocol denoted by 'cufwPolConnProtocol', in the policy 'cufwPolConnPolicy' applied to the entity identified by 'cufwPolConnPolicyTarget'. ")
cufwPolConnNumAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 3, 1, 11), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwPolConnNumAborted.setStatus('current')
if mibBuilder.loadTexts: cufwPolConnNumAborted.setDescription("The number of connections that were abnormally terminated after successful establishment, corresponding to the protocol denoted by 'cufwPolConnProtocol', in the policy 'cufwPolConnPolicy' applied to the entity identified by 'cufwPolConnPolicyTarget'. ")
cufwPolicyAppConnSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 4), )
if mibBuilder.loadTexts: cufwPolicyAppConnSummaryTable.setStatus('current')
if mibBuilder.loadTexts: cufwPolicyAppConnSummaryTable.setDescription("This table lists the summary of firewall connections pertaining to Layer 7 protocols, catalogued on a per policy basis Each entry in the table lists the connection summary of a distinct application protocol, configured on the specified policy on the firewall, and pertaining to a specified target to which the policy has been applied. If a policy is bound to a target, it would have one or more entries in this table. If the policy is detached from the target, all entries corresponding to the association between the policy and the target are elminated from this table. Although the information is indexed by policy targets as well, one may aggregate the connection summary for a specific policy across all the target to which the policy is currently applied by setting cufwAppConnPolicyTargetType = 'targetALL' ")
cufwPolicyAppConnSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 4, 1), ).setIndexNames((0, "CISCO-UNIFIED-FIREWALL-MIB", "cufwPolAppConnPolicy"), (0, "CISCO-UNIFIED-FIREWALL-MIB", "cufwPolAppConnPolicyTargetType"), (0, "CISCO-UNIFIED-FIREWALL-MIB", "cufwPolAppConnPolicyTarget"), (0, "CISCO-UNIFIED-FIREWALL-MIB", "cufwPolAppConnProtocol"))
if mibBuilder.loadTexts: cufwPolicyAppConnSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: cufwPolicyAppConnSummaryEntry.setDescription('Each entry contains the summary of connection activity for a specific layer 7 protocol in a specific policy applied to the specified policy target. ')
cufwPolAppConnPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 4, 1, 1), CFWPolicy())
if mibBuilder.loadTexts: cufwPolAppConnPolicy.setStatus('current')
if mibBuilder.loadTexts: cufwPolAppConnPolicy.setDescription('The identity of the firewall policy for which this conceptual row contains the connection activity summary. ')
cufwPolAppConnPolicyTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 4, 1, 2), CFWPolicyTargetType())
if mibBuilder.loadTexts: cufwPolAppConnPolicyTargetType.setStatus('current')
if mibBuilder.loadTexts: cufwPolAppConnPolicyTargetType.setDescription("The type of the entity to which the firewall policy 'cufwPolAppConnPolicy' has been applied. This could be an interface type (most commonly), the type of another object or a group of objects defined in the firewall configuration. When this object is set to 'targetALL', the value of index object cufwAppConnPolicyTarget is ignored. ")
cufwPolAppConnPolicyTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 4, 1, 3), CFWPolicyTarget().subtype(subtypeSpec=ValueSizeConstraint(0, 128)))
if mibBuilder.loadTexts: cufwPolAppConnPolicyTarget.setStatus('current')
if mibBuilder.loadTexts: cufwPolAppConnPolicyTarget.setDescription("The identity of the entity to which the firewall policy 'cufwPolAppProtocol' refers. This could be an interface object (most commonly), another object or group of objects defined in the firewall configuration. ")
cufwPolAppConnProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 4, 1, 4), CFWApplicationProtocol())
if mibBuilder.loadTexts: cufwPolAppConnProtocol.setStatus('current')
if mibBuilder.loadTexts: cufwPolAppConnProtocol.setDescription('The layer7 protocol for which this conceptual row summarizes the connection activity for this firewall. ')
cufwPolAppConnNumAttempted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 4, 1, 5), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwPolAppConnNumAttempted.setStatus('current')
if mibBuilder.loadTexts: cufwPolAppConnNumAttempted.setDescription("The number of connections attempted since the last reboot of the firewall, corresponding to the protocol denoted by 'cufwPolAppConnProtocol', in the policy 'cufwPolAppConnPolicy' applied to the entity identified by 'cufwPolAppConnPolicyTarget'. This value is accumulated from the last reboot of the firewall subject to the control exercised by cufwConnReptAppStats. ")
cufwPolAppConnNumSetupsAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 4, 1, 6), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwPolAppConnNumSetupsAborted.setStatus('current')
if mibBuilder.loadTexts: cufwPolAppConnNumSetupsAborted.setDescription("The number of connection setup attempts, corresponding to the protocol denoted by 'cufwPolAppConnProtocol', associated with the policy 'cufwPolAppConnPolicy' applied to the entity identified by 'cufwPolAppConnPolicyTarget', that were aborted before the connections could proceed to completion. The counter includes setup attempts aborted by the firewall as well as those aborted by the initiator and/or the responder(s) of/to the connection setup attempt. Consequently, this value subsumes the values of objects 'cufwPolAppConnNumPolicyDeclined' and 'cufwPolAppConnNumResDeclined'. This value is accumulated from the last reboot of the firewall subject to the control exercised by cufwConnReptAppStats. ")
cufwPolAppConnNumPolicyDeclined = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 4, 1, 7), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwPolAppConnNumPolicyDeclined.setStatus('current')
if mibBuilder.loadTexts: cufwPolAppConnNumPolicyDeclined.setDescription("The number of connection attempts that were declined due to security policy, corresponding to the protocol denoted by 'cufwPolAppConnProtocol', in the policy 'cufwPolAppConnPolicy' applied to the entity identified by 'cufwPolAppConnPolicyTarget'. This value is accumulated from the last reboot of the firewall subject to the control exercised by cufwConnReptAppStats. ")
cufwPolAppConnNumResDeclined = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 4, 1, 8), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwPolAppConnNumResDeclined.setStatus('current')
if mibBuilder.loadTexts: cufwPolAppConnNumResDeclined.setDescription("The number of connection attempts that were declined due to resource unavailability, corresponding to the protocol denoted by 'cufwPolAppConnProtocol', in the policy 'cufwPolAppConnPolicy' applied to the entity identified by 'cufwPolAppConnPolicyTarget'. This value is accumulated from the last reboot of the firewall subject to the control exercised by cufwConnReptAppStats. ")
cufwPolAppConnNumHalfOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 4, 1, 9), Gauge32()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwPolAppConnNumHalfOpen.setStatus('current')
if mibBuilder.loadTexts: cufwPolAppConnNumHalfOpen.setDescription("The number of connections that are currently in the process of being established, corresponding to the protocol denoted by 'cufwPolAppConnProtocol', in the policy 'cufwPolAppConnPolicy' applied to the entity identified by 'cufwPolAppConnPolicyTarget'. ")
cufwPolAppConnNumActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 4, 1, 10), Gauge32()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwPolAppConnNumActive.setStatus('current')
if mibBuilder.loadTexts: cufwPolAppConnNumActive.setDescription("The number of connections that are currently active, corresponding to the protocol denoted by 'cufwPolAppConnProtocol', in the policy 'cufwPolAppConnPolicy' applied to the entity identified by 'cufwPolAppConnPolicyTarget'. ")
cufwPolAppConnNumAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 1, 4, 4, 1, 11), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwPolAppConnNumAborted.setStatus('current')
if mibBuilder.loadTexts: cufwPolAppConnNumAborted.setDescription("The number of connections that were abnormally terminated after successful establishment, corresponding to the protocol denoted by 'cufwPolAppConnProtocol', in the policy 'cufwPolAppConnPolicy' applied to the entity identified by 'cufwPolAppConnPolicyTarget'. ")
cufwAIAuditTrailEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cufwAIAuditTrailEnabled.setStatus('current')
if mibBuilder.loadTexts: cufwAIAuditTrailEnabled.setDescription('The value identifies if audit trail in application inspection has been globally enabled or disabled. ')
cufwAIAlertEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 2, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cufwAIAlertEnabled.setStatus('current')
if mibBuilder.loadTexts: cufwAIAlertEnabled.setDescription('The value identifies if application inspection alerts have been globally enabled or disabled. ')
cufwInspectionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 2, 3), )
if mibBuilder.loadTexts: cufwInspectionTable.setStatus('current')
if mibBuilder.loadTexts: cufwInspectionTable.setDescription('This table identifies if an application protocol has been configured for inspection and if so, the name of the firewall policy or the inspection configuration that configures the specified protocol for inspection. The table also identifies if the specified protocol is actively being inspected. This table may be used by an administrator to quickly identify if a protocol is being subjected to application inspection by the managed firewall. ')
cufwInspectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-UNIFIED-FIREWALL-MIB", "cufwInspectionPolicyName"), (0, "CISCO-UNIFIED-FIREWALL-MIB", "cufwInspectionProtocol"))
if mibBuilder.loadTexts: cufwInspectionEntry.setStatus('current')
if mibBuilder.loadTexts: cufwInspectionEntry.setDescription('Each entry contains the configuration of a specific application inspection element. ')
cufwInspectionPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 2, 3, 1, 1), CFWPolicy().subtype(subtypeSpec=ValueSizeConstraint(0, 128)))
if mibBuilder.loadTexts: cufwInspectionPolicyName.setStatus('current')
if mibBuilder.loadTexts: cufwInspectionPolicyName.setDescription("The name of the policy that configures the device inspect the protocol specified by 'cufwInspectionProtocol'. ")
cufwInspectionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 2, 3, 1, 2), CFWApplicationProtocol())
if mibBuilder.loadTexts: cufwInspectionProtocol.setStatus('current')
if mibBuilder.loadTexts: cufwInspectionProtocol.setDescription('The application protocol that is configured for inspection. ')
cufwInspectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 2, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwInspectionStatus.setStatus('current')
if mibBuilder.loadTexts: cufwInspectionStatus.setDescription("This MIB object identifies if the directive to inspect the protocol specified by 'cufwInspectionProtocol' by the policy corresponding to this conceptual row is enabled or disabled. ")
cufwUrlFilterGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1))
cufwUrlFilterResourceUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 2))
cufwUrlFilterServers = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 3))
cufwUrlfFunctionEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cufwUrlfFunctionEnabled.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfFunctionEnabled.setDescription(" URL Filtering Operation _________ 2.2 Request | | |---------->| Server | | | | _________ __|_ |_________| | |<--(5. Response )---| | 3. Response | | | | |<-------------| | Client |---(1. Request )--->|FW | |_________| |____|<--------------| | 4. URLF Resp ____|______ | | | |------------>|URLF Server| 2.1 URLF Req |___________| 1) Client sends a Request containing a URL to the Server 2.1) FW extracts the URL from the Request and sends it to URL Filtering Server (or Verifies the URL locally) 2.2) FW also forwards the original Request from the Client to the Server 3) Any Responses from the Server received before receiving a response from URLF Server are cached by the FW 4) URLF Response indicates whether the URL access should be allowed or denied 5) If the URLF Response allows the URL, FW forwards the URL Access responses from the Server to the Client 6) If the URLF Response indicates that the URL access should be denied, FW drops all the cached URL responses and forces the connection between the Client and the Server to be terminated Specifically, the object cufwUrlfFunctionEnabled indicates if the URL filtering function is enabled. When this MIB object contains the value 'false', the firewall device will not perform URL filtering function, even if it contains configuration pertaining to other aspects of URL filtering. ")
cufwUrlfRequestsNumProcessed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 2), Counter64()).setUnits('Requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfRequestsNumProcessed.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfRequestsNumProcessed.setDescription('The number of URL access requests processed by this firewall. This value is accumulated from the last reboot of the firewall. ')
cufwUrlfRequestsProcRate1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 3), Gauge32()).setUnits('Requests per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfRequestsProcRate1.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfRequestsProcRate1.setDescription('The number of URL access requests processed per seconds by this firewall averaged over the last 60 seconds. ')
cufwUrlfRequestsProcRate5 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 4), Gauge32()).setUnits('Requests per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfRequestsProcRate5.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfRequestsProcRate5.setDescription('The number of URL access requests processed per second by this firewall averaged over the last 300 seconds. ')
cufwUrlfRequestsNumAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 5), Counter64()).setUnits('Requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfRequestsNumAllowed.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfRequestsNumAllowed.setDescription('The number of URL access requests allowed by this firewall, due to a directive from a URL filtering server or a static policy configured on the firewall. This value is accumulated from the last reboot of the firewall. ')
cufwUrlfRequestsNumDenied = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 6), Counter64()).setUnits('Requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfRequestsNumDenied.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfRequestsNumDenied.setDescription('The number of URL access requests declined by this firewall, due to a directive from a URL filtering server, a static policy configured on the firewall, due to resource constraints or any other reason. This value is accumulated from the last reboot of the firewall. ')
cufwUrlfRequestsDeniedRate1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 7), Gauge32()).setUnits('Requests per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfRequestsDeniedRate1.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfRequestsDeniedRate1.setDescription('The rate at which URL access requests were denied by this firewall, due to a directive from a URL filtering server, a static policy configured on the firewall, due to resource constraints or any other reason, averaged over the last 60 seconds. ')
cufwUrlfRequestsDeniedRate5 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 8), Gauge32()).setUnits('Requests Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfRequestsDeniedRate5.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfRequestsDeniedRate5.setDescription('The rate at which URL access requests were denied by this firewall, due to a directive from a URL filtering server, a static policy configured on the firewall, due to resource constraints or any other reason, averaged over the last 300 seconds. ')
cufwUrlfRequestsNumCacheAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 9), Counter64()).setUnits('Requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfRequestsNumCacheAllowed.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfRequestsNumCacheAllowed.setDescription('The number of URL access requests allowed by the firewall because of a cached entry holding the result from a previous URL access request that was handled either by a URLF Server or exclusive domain configuration. This value is accumulated from the last reboot of the firewall. ')
cufwUrlfRequestsNumCacheDenied = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 10), Counter64()).setUnits('Requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfRequestsNumCacheDenied.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfRequestsNumCacheDenied.setDescription('The number of URL access requests denied by the firewall because of a cached entry holding the result from a previous URL access request that was handled either by a URLF Server or exclusive domain configuration. This value is accumulated from the last reboot of the firewall. ')
cufwUrlfAllowModeReqNumAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 11), Counter64()).setUnits('Requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfAllowModeReqNumAllowed.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfAllowModeReqNumAllowed.setDescription('The number of URL access requests that were allowed by the firewall when the URL filtering server was not available. This value is accumulated from the last reboot of the firewall. ')
cufwUrlfAllowModeReqNumDenied = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 12), Counter64()).setUnits('Requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfAllowModeReqNumDenied.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfAllowModeReqNumDenied.setDescription('The number of URL access requests that were declined by the firewall when the URL filtering server was not available. This value is accumulated from the last reboot of the firewall. ')
cufwUrlfRequestsNumResDropped = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 13), Counter64()).setUnits('Requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfRequestsNumResDropped.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfRequestsNumResDropped.setDescription('The number of incoming URL access requests that were dropped by the firewall because of resource constraints. This value is accumulated from the last reboot of the firewall. ')
cufwUrlfRequestsResDropRate1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 14), Gauge32()).setUnits('Requests Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfRequestsResDropRate1.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfRequestsResDropRate1.setDescription('The rate at which incoming URL access requests were dropped by the firewall because of resource constraints, averaged over the last 60 seconds. ')
cufwUrlfRequestsResDropRate5 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 15), Gauge32()).setUnits('Requests Per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfRequestsResDropRate5.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfRequestsResDropRate5.setDescription('The rate at which incoming URL access requests were dropped by the firewall because of resource constraints, averaged over the last 300 seconds. ')
cufwUrlfNumServerTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfNumServerTimeouts.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfNumServerTimeouts.setDescription('The number of times the firewall failed to receive a response from the configured URL filtering servers for a request to authorize a URL access request. This is equal to the number of times a firewall removed a URL access request from the queue of pending requests because no response was received from the URL filtering server(s). This value is accumulated from the last reboot of the firewall. ')
cufwUrlfNumServerRetries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfNumServerRetries.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfNumServerRetries.setDescription('The number of URL access authorization requests re-sent by the firewall to the URL Filtering Servers because a response was not received within the configured time interval. This value is accumulated from the last reboot of the firewall. ')
cufwUrlfResponsesNumLate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 18), Counter64()).setUnits('Responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfResponsesNumLate.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfResponsesNumLate.setDescription('The number of responses from URL filtering servers which were received after the original URL access request was removed from the queue of pending requests. This value is accumulated from the last reboot of the firewall. ')
cufwUrlfUrlAccRespsNumResDropped = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 1, 19), Counter64()).setUnits('Responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfUrlAccRespsNumResDropped.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfUrlAccRespsNumResDropped.setDescription('The number of transport packets constituting responses to URL access requests that were dropped by the firewall due to resource constraints waiting for a response from the filtering server. This value is accumulated from the last reboot of the firewall. ')
cufwUrlfResTotalRequestCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 2, 1), Gauge32()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfResTotalRequestCacheSize.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfResTotalRequestCacheSize.setDescription('The amount of memory occupied by all the caches used in the firewall to cache pending URL access requests. ')
cufwUrlfResTotalRespCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 2, 2), Gauge32()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfResTotalRespCacheSize.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfResTotalRespCacheSize.setDescription('The amount of memory occupied by all the caches used in the firewall to cache responses for URL requests received from servers while awaiting a response from URL filter server. ')
cufwUrlfServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 3, 1), )
if mibBuilder.loadTexts: cufwUrlfServerTable.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfServerTable.setDescription('This table lists the URL filtering servers configured on the managed device and their performance statistics. This table is not meant as a device to configure URL filtering servers. ')
cufwUrlfServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 3, 1, 1), ).setIndexNames((0, "CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfServerAddrType"), (0, "CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfServerAddress"), (0, "CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfServerPort"))
if mibBuilder.loadTexts: cufwUrlfServerEntry.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfServerEntry.setDescription('Each entry contains the configuration of a specific URL filtering server. ')
cufwUrlfServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 3, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cufwUrlfServerAddrType.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfServerAddrType.setDescription('The type of the IP address of the URL filtering server. ')
cufwUrlfServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 3, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cufwUrlfServerAddress.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfServerAddress.setDescription('The value of the IP address of the URL filtering server. ')
cufwUrlfServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 3, 1, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: cufwUrlfServerPort.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfServerPort.setDescription('The value of the port at which the URL filtering server listens for incoming requests. ')
cufwUrlfServerVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 3, 1, 1, 4), CFWUrlfVendorId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfServerVendor.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfServerVendor.setDescription('The vendor type of the URL filtering server. ')
cufwUrlfServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 3, 1, 1, 5), CFWUrlServerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfServerStatus.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfServerStatus.setDescription('The status of the URL filtering server corresponding to this conceptual row. ')
cufwUrlfServerReqsNumProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfServerReqsNumProcessed.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfServerReqsNumProcessed.setDescription('The number of URL access requests forwarded by the managed firewall device to the URL filtering server corresponding to this conceptual row. This value is counted from the last reboot of the managed device. ')
cufwUrlfServerReqsNumAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfServerReqsNumAllowed.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfServerReqsNumAllowed.setDescription('The number of URL access requests allowed by the URL filtering server corresponding to this conceptual row. This counter does not include late responses. This value is counted from the last reboot of the managed device. ')
cufwUrlfServerReqsNumDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfServerReqsNumDenied.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfServerReqsNumDenied.setDescription('The number of URL access requests denied by the URL filtering server corresponding to this conceptual row. This counter does not include late responses. This value is counted from the last reboot of the managed device. ')
cufwUrlfServerNumTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfServerNumTimeouts.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfServerNumTimeouts.setDescription('The number of times the firewall failed to receive a response from the URL filtering server corresponding to this conceptual row, for a request to authorize a URL access request. This is equal to the number of times a firewall removed a URL access request from the queue of pending requests because no response was received from the URL filtering server. This value is accumulated from the last reboot of the firewall. ')
cufwUrlfServerNumRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfServerNumRetries.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfServerNumRetries.setDescription('The number of URL access authorization requests re-sent by the firewall to the URL Filtering Server corresponding to this conceptual row, because a response was not received within the configured time interval from the server. This value is counted from the last reboot of the managed device. ')
cufwUrlfServerRespsNumReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 3, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfServerRespsNumReceived.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfServerRespsNumReceived.setDescription('The number of URL access responses received by the firewall from the URL filtering server corresponding to this conceptual row. This counter does not include late responses. This value is counted from the last reboot of the managed device. ')
cufwUrlfServerRespsNumLate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfServerRespsNumLate.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfServerRespsNumLate.setDescription('The number of URL access responses received by the managed firewall from the URL filtering server corresponding to this conceptual row after the original URL access request was removed from the queue of pending requests. This value is counted from the last reboot of the managed device. ')
cufwUrlfServerAvgRespTime1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 3, 1, 1, 13), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfServerAvgRespTime1.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfServerAvgRespTime1.setDescription('The average round-trip response time of the URL filtering server computed over the last 60 seconds. A value of zero indicates that there was insufficient data to compute this value over the last time interval. ')
cufwUrlfServerAvgRespTime5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 3, 3, 1, 1, 14), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwUrlfServerAvgRespTime5.setStatus('current')
if mibBuilder.loadTexts: cufwUrlfServerAvgRespTime5.setDescription('The average round-trip response time of the URL filtering server computed over the last 300 seconds. A value of zero indicates that there was insufficient data to compute this value over the last time interval. ')
cufwAaicGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 5, 1))
cufwAaicGlobalNumBadProtocolOps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 5, 1, 1), Counter64()).setUnits('Protocol Data Units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAaicGlobalNumBadProtocolOps.setStatus('current')
if mibBuilder.loadTexts: cufwAaicGlobalNumBadProtocolOps.setDescription("'Protocol Operation' is the application protocol specific operation that the PDU is intended to perform. An example of 'protocol operation' is the HELO command of SMTP protocol. This MIB object records the number of application protocol data units that contained a protocol operation which was disallowed by the local security policy. For this MIB to be implemented, the managed firewall must be implementing deep packet inspection of application traffic payloads. This value is accumulated from the last reboot of the firewall. ")
cufwAaicGlobalNumBadPDUSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 5, 1, 2), Counter64()).setUnits('Protocol Data Units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAaicGlobalNumBadPDUSize.setStatus('current')
if mibBuilder.loadTexts: cufwAaicGlobalNumBadPDUSize.setDescription('This MIB object records the number of application protocol data units (PDU) that had either an invalid header size or an invalid payload size, as determined by the local security policy. For this MIB to be implemented, the managed firewall must be implementing deep packet inspection of application traffic payloads. This value is accumulated from the last reboot of the firewall. ')
cufwAaicGlobalNumBadPortRange = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 5, 1, 3), Counter64()).setUnits('Protocol Data Units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAaicGlobalNumBadPortRange.setStatus('current')
if mibBuilder.loadTexts: cufwAaicGlobalNumBadPortRange.setDescription('Number of application protocol units that attempted to advertise illegal port ranges for secondary connections. An example of such an occurrence would be a passive FTP connection, where the server advertises a disallowed port range for data connection. For this MIB to be implemented, the managed firewall must be implementing deep packet inspection of application traffic payloads. This value is accumulated from the last reboot of the firewall. ')
cufwAaicProtocolStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 5, 2))
cufwAaicHttpProtocolStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 5, 2, 1))
cufwAaicHttpNumBadProtocolOps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 5, 2, 1, 1), Counter64()).setUnits('HTTP Protocol Data Units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAaicHttpNumBadProtocolOps.setStatus('current')
if mibBuilder.loadTexts: cufwAaicHttpNumBadProtocolOps.setDescription('The number of PDUs corresponding to HTTP protocol which were detected to be containing HTTP protocol methods which are disallowed by the local security policy. For this MIB to be implemented, the managed firewall must be implementing deep packet inspection of HTTP traffic payloads. This value is accumulated from the last reboot of the firewall. ')
cufwAaicHttpNumBadPDUSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 5, 2, 1, 2), Counter64()).setUnits('HTTP Protocol Data Units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAaicHttpNumBadPDUSize.setStatus('current')
if mibBuilder.loadTexts: cufwAaicHttpNumBadPDUSize.setDescription('The number of PDUs corresponding to HTTP protocol that had either an invalid header size or an invalid payload size, as determined by the local security policy. For this MIB to be implemented, the managed firewall must be implementing deep packet inspection of HTTP traffic payloads. This value is accumulated from the last reboot of the firewall. ')
cufwAaicHttpNumTunneledConns = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 5, 2, 1, 3), Counter64()).setUnits('Connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAaicHttpNumTunneledConns.setStatus('current')
if mibBuilder.loadTexts: cufwAaicHttpNumTunneledConns.setDescription('The number of connections corresponding to HTTP protocol which were detected to be tunneling other application traffic streams. An instance of this would be InstantMessenger traffic running on HTTP. For this MIB to be implemented, the managed firewall must be implementing deep packet inspection of HTTP traffic payloads. This value is accumulated from the last reboot of the firewall. ')
cufwAaicHttpNumLargeURIs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 5, 2, 1, 4), Counter64()).setUnits('HTTP Protocol Data Units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAaicHttpNumLargeURIs.setStatus('current')
if mibBuilder.loadTexts: cufwAaicHttpNumLargeURIs.setDescription('The number of PDUs corresponding to HTTP protocol which were detected to be containing a URI of size not permitted by the local security policy. For this MIB to be implemented, the managed firewall must be implementing deep packet inspection of HTTP traffic payloads. This value is accumulated from the last reboot of the firewall. ')
cufwAaicHttpNumBadContent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 5, 2, 1, 5), Counter64()).setUnits('HTTP Protocol Data Units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAaicHttpNumBadContent.setStatus('current')
if mibBuilder.loadTexts: cufwAaicHttpNumBadContent.setDescription('The number of PDUs corresponding to HTTP protocol which were detected to be containing content whose type disallowed by the local security policy. For this MIB to be implemented, the managed firewall must be implementing deep packet inspection of HTTP traffic payloads. This value is accumulated from the last reboot of the firewall. ')
cufwAaicHttpNumMismatchContent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 5, 2, 1, 6), Counter64()).setUnits('HTTP Protocol Data Units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAaicHttpNumMismatchContent.setStatus('current')
if mibBuilder.loadTexts: cufwAaicHttpNumMismatchContent.setDescription('The number of PDUs corresponding to HTTP protocol which were detected to be containing content whose type was different from the content type specified in the header of the PDU. For this MIB to be implemented, the managed firewall must be implementing deep packet inspection of HTTP traffic payloads. This value is accumulated from the last reboot of the firewall. ')
cufwAaicHttpNumDoubleEncodedPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 5, 2, 1, 7), Counter64()).setUnits('HTTP Protocol Data Units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwAaicHttpNumDoubleEncodedPkts.setStatus('current')
if mibBuilder.loadTexts: cufwAaicHttpNumDoubleEncodedPkts.setDescription('The number of PDUs corresponding to HTTP protocol which were detected to be containing double encoding. Double encoding is a mechanism to obfuscate content in which a encoded data is re-encoded so as to evade deep packet inspections. For this MIB to be implemented, the managed firewall must be implementing deep packet inspection of HTTP traffic payloads. This value is accumulated from the last reboot of the firewall. ')
cufwL2FwGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 6, 1))
cufwL2GlobalEnableStealthMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwL2GlobalEnableStealthMode.setStatus('current')
if mibBuilder.loadTexts: cufwL2GlobalEnableStealthMode.setDescription('The value indicates if the firewall is operating in transparent (layer 2) mode or not. When operating in transparent mode, the firewall operates as a bridge while performing firewalling functions. ')
cufwL2GlobalArpCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('ARP entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwL2GlobalArpCacheSize.setStatus('current')
if mibBuilder.loadTexts: cufwL2GlobalArpCacheSize.setDescription('The value indicates the configured maximum size of the ARP cache used for management traffic. ')
cufwL2GlobalEnableArpInspection = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 6, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cufwL2GlobalEnableArpInspection.setStatus('current')
if mibBuilder.loadTexts: cufwL2GlobalEnableArpInspection.setDescription('The value indicates if ARP inspection, which is a security feature, is enabled globally on the managed firewall. ')
cufwL2GlobalNumArpRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 6, 1, 5), Counter64()).setUnits('ARP Requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwL2GlobalNumArpRequests.setStatus('current')
if mibBuilder.loadTexts: cufwL2GlobalNumArpRequests.setDescription('The number of ARP requests issued by the transparent firewall to resolve a destination IP address. This counter is accumulated since the last reboot of the firewall. ')
cufwL2GlobalNumIcmpRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 6, 1, 6), Counter64()).setUnits('ICMP Traceroute Requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwL2GlobalNumIcmpRequests.setStatus('current')
if mibBuilder.loadTexts: cufwL2GlobalNumIcmpRequests.setDescription('The number of ICMP traceroute requests issued by the transparent firewall to resolve a destination IP address. This counter is accumulated since the last reboot of the firewall. ')
cufwL2GlobalNumFloods = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwL2GlobalNumFloods.setStatus('current')
if mibBuilder.loadTexts: cufwL2GlobalNumFloods.setDescription('The number of times the firewall floods a frame to be forwarded to the egress interfaces because the destination MAC address is missing in the bridge table. This counter is accumulated since the last reboot of the firewall. ')
cufwL2GlobalNumDrops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwL2GlobalNumDrops.setStatus('current')
if mibBuilder.loadTexts: cufwL2GlobalNumDrops.setDescription('The number of times the firewall dropped an incoming frame because the destination MAC address is missing in the bridge table. This counter is accumulated since the last reboot of the firewall. ')
cufwL2GlobalArpOverflowRate5 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 6, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwL2GlobalArpOverflowRate5.setStatus('current')
if mibBuilder.loadTexts: cufwL2GlobalArpOverflowRate5.setDescription('The number of times an existing entry from the ARP cache had to be ejected in order to insert a new entry in the last 300 seconds. This counter is accumulated since the last reboot of the firewall. ')
cufwL2GlobalNumBadArpResponses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 6, 1, 10), Counter64()).setUnits('ARP Responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwL2GlobalNumBadArpResponses.setStatus('current')
if mibBuilder.loadTexts: cufwL2GlobalNumBadArpResponses.setDescription('The number of malformed ARP responses received by the firewall in trying to resolve the MAC address of the destination IP address in an incoming frame. This counter is accumulated since the last reboot of the firewall. ')
cufwL2GlobalNumSpoofedArpResps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 6, 1, 11), Counter64()).setUnits('ARP Responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cufwL2GlobalNumSpoofedArpResps.setStatus('current')
if mibBuilder.loadTexts: cufwL2GlobalNumSpoofedArpResps.setDescription('The number of spoofed ARP responses received by the firewall. Such an event would occur when the firewall encounters an ARP response mapping an IP address to a different MAC Address from the one present in the local ARP cache. This counter is accumulated since the last reboot of the firewall. ')
cufwCntlUrlfServerStatusChange = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 7, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cufwCntlUrlfServerStatusChange.setStatus('current')
if mibBuilder.loadTexts: cufwCntlUrlfServerStatusChange.setDescription('This object defines the administrative state of sending the SNMP notification to signal the election of a new primary URL filtering server by this firewall. Such a change could occur either as a result of the current primary server becoming unavailable or as a result of explicit management action in nominating a filtering server the primary server. ')
cufwCntlL2StaticMacAddressMoved = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 491, 1, 7, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cufwCntlL2StaticMacAddressMoved.setStatus('current')
if mibBuilder.loadTexts: cufwCntlL2StaticMacAddressMoved.setDescription('This object defines the administrative state of sending the SNMP notification to signal the move of a statically configured MAC address to a new port. Such a change could occur either as a result of physical move of the device with the MAC Address to the new port or due to MAC address spoofing. ')
ciscoUFwUrlfServerStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 491, 0, 1)).setObjects(("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfServerStatus"))
if mibBuilder.loadTexts: ciscoUFwUrlfServerStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoUFwUrlfServerStateChange.setDescription("This notification is generated when the firewall elects a new primary URL filtering server from the existing set of configured servers. Such a change could occur either as a result of the current primary server becoming unavailable or as a result of explicit management action in nominating a filtering server the primary server. The notification is issued just before the change occurs. Consequently, the varbinds identify the attributes corresponding to the old primary server. This notification is issued if and only if the object 'cufwCntlUrlfServerStatusChange' has been set to 'true'. ")
ciscoUFwL2StaticMacAddressMoved = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 491, 0, 2)).setObjects(("BRIDGE-MIB", "dot1dTpFdbPort"), ("BRIDGE-MIB", "dot1dTpFdbStatus"))
if mibBuilder.loadTexts: ciscoUFwL2StaticMacAddressMoved.setStatus('current')
if mibBuilder.loadTexts: ciscoUFwL2StaticMacAddressMoved.setDescription("This notification is generated when the firewall detects the move of a static MAC address to a new port. Such a change could occur either as a result of physical move of the device with the MAC Address to the new port, due to management action of relocating the MAC address at the new location or due to MAC address spoofing. The varbinds identify the new location (port) of the MAC Address and its status at the new location. This notification is issued if and only if the object 'cufwCntlL2StaticMacAddressMoved' has been set to 'true'. ")
ciscoUniFirewallMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 2, 1))
ciscoUniFirewallMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 491, 2, 2))
ciscoUniFirewallMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 491, 2, 1, 1)).setObjects(("CISCO-UNIFIED-FIREWALL-MIB", "ciscoFwConnectionGroup"), ("CISCO-UNIFIED-FIREWALL-MIB", "ciscoFwMibReportingControlGroup"), ("CISCO-UNIFIED-FIREWALL-MIB", "ciscoFwApplInspectionGroup"), ("CISCO-UNIFIED-FIREWALL-MIB", "ciscoFwConnResourceUsageGroup"), ("CISCO-UNIFIED-FIREWALL-MIB", "ciscoFwPolicyConnectionGroup"), ("CISCO-UNIFIED-FIREWALL-MIB", "ciscoFwUrlFilterGroup"), ("CISCO-UNIFIED-FIREWALL-MIB", "ciscoFwUrlFilterResourceGroup"), ("CISCO-UNIFIED-FIREWALL-MIB", "ciscoFwTransparentFwGroup"), ("CISCO-UNIFIED-FIREWALL-MIB", "ciscoFwTransparentNotifGroup"), ("CISCO-UNIFIED-FIREWALL-MIB", "ciscoFwBasicAaicGroup"), ("CISCO-UNIFIED-FIREWALL-MIB", "ciscoFwAaicHttpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoUniFirewallMIBCompliance = ciscoUniFirewallMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoUniFirewallMIBCompliance.setDescription('The compliance statement for SNMP entities the Cisco Firewall MIB. ')
ciscoFwConnectionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 491, 2, 2, 1)).setObjects(("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnGlobalNumAttempted"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnGlobalNumSetupsAborted"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnGlobalNumPolicyDeclined"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnGlobalNumResDeclined"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnGlobalNumHalfOpen"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnGlobalNumActive"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnGlobalNumAborted"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnGlobalNumExpired"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnGlobalNumEmbryonic"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnGlobalConnSetupRate1"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnGlobalConnSetupRate5"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnGlobalNumRemoteAccess"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnNumAttempted"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnNumSetupsAborted"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnNumPolicyDeclined"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnNumResDeclined"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnNumHalfOpen"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnNumActive"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnNumAborted"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnSetupRate1"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnSetupRate5"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwAppConnNumAttempted"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwAppConnNumSetupsAborted"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwAppConnNumPolicyDeclined"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwAppConnNumResDeclined"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwAppConnNumHalfOpen"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwAppConnNumActive"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwAppConnNumAborted"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwAppConnSetupRate1"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwAppConnSetupRate5"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFwConnectionGroup = ciscoFwConnectionGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFwConnectionGroup.setDescription('This group contains the MIB objects required to instrument the firewall stateful connection activity. ')
ciscoFwConnResourceUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 491, 2, 2, 2)).setObjects(("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnResMemoryUsage"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnResActiveConnMemoryUsage"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnResHOConnMemoryUsage"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnResEmbrConnMemoryUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFwConnResourceUsageGroup = ciscoFwConnResourceUsageGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFwConnResourceUsageGroup.setDescription('This group contains the MIB objects required to instrument the resource usage of the stateful packet filtering feature of the managed firewall. ')
ciscoFwPolicyConnectionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 491, 2, 2, 3)).setObjects(("CISCO-UNIFIED-FIREWALL-MIB", "cufwPolConnNumAttempted"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwPolConnNumSetupsAborted"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwPolConnNumPolicyDeclined"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwPolConnNumResDeclined"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwPolConnNumHalfOpen"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwPolConnNumActive"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwPolConnNumAborted"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwPolAppConnNumAttempted"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwPolAppConnNumSetupsAborted"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwPolAppConnNumPolicyDeclined"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwPolAppConnNumResDeclined"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwPolAppConnNumHalfOpen"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwPolAppConnNumActive"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwPolAppConnNumAborted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFwPolicyConnectionGroup = ciscoFwPolicyConnectionGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFwPolicyConnectionGroup.setDescription('This group contains the MIB objects required to instrument policy based summary of firewall connection activity. ')
ciscoFwApplInspectionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 491, 2, 2, 4)).setObjects(("CISCO-UNIFIED-FIREWALL-MIB", "cufwAIAuditTrailEnabled"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwAIAlertEnabled"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwInspectionStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFwApplInspectionGroup = ciscoFwApplInspectionGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFwApplInspectionGroup.setDescription('This group contains the MIB objects required to instrument the firewall Application Inspection function. ')
ciscoFwUrlFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 491, 2, 2, 5)).setObjects(("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfFunctionEnabled"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfRequestsNumProcessed"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfRequestsProcRate1"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfRequestsProcRate5"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfRequestsNumAllowed"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfRequestsNumDenied"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfRequestsDeniedRate1"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfRequestsDeniedRate5"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfRequestsNumCacheAllowed"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfRequestsNumCacheDenied"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfAllowModeReqNumAllowed"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfAllowModeReqNumDenied"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfRequestsNumResDropped"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfRequestsResDropRate1"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfRequestsResDropRate5"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfNumServerTimeouts"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfNumServerRetries"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfResponsesNumLate"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfUrlAccRespsNumResDropped"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfServerVendor"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfServerStatus"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfServerReqsNumProcessed"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfServerReqsNumAllowed"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfServerReqsNumDenied"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfServerNumTimeouts"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfServerNumRetries"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfServerRespsNumReceived"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfServerRespsNumLate"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfServerAvgRespTime1"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfServerAvgRespTime5"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwCntlUrlfServerStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFwUrlFilterGroup = ciscoFwUrlFilterGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFwUrlFilterGroup.setDescription('This group contains the MIB objects required to instrument the firewall URL filtering function. ')
ciscoFwUrlFilterResourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 491, 2, 2, 6)).setObjects(("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfResTotalRequestCacheSize"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwUrlfResTotalRespCacheSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFwUrlFilterResourceGroup = ciscoFwUrlFilterResourceGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFwUrlFilterResourceGroup.setDescription('This group contains the MIB objects required to instrument the resource usage of the URL filtering feature of the managed firewall. ')
ciscoFwTransparentFwGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 491, 2, 2, 7)).setObjects(("CISCO-UNIFIED-FIREWALL-MIB", "cufwL2GlobalEnableStealthMode"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwL2GlobalArpCacheSize"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwL2GlobalEnableArpInspection"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwL2GlobalNumArpRequests"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwL2GlobalNumIcmpRequests"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwL2GlobalNumFloods"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwL2GlobalNumDrops"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwL2GlobalArpOverflowRate5"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwL2GlobalNumBadArpResponses"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwL2GlobalNumSpoofedArpResps"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwCntlL2StaticMacAddressMoved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFwTransparentFwGroup = ciscoFwTransparentFwGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFwTransparentFwGroup.setDescription('This group contains the MIB objects required to instrument the transparent mode (or layer 2) operation of a firewall. ')
ciscoFwNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 491, 2, 2, 8)).setObjects(("CISCO-UNIFIED-FIREWALL-MIB", "ciscoUFwUrlfServerStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFwNotificationsGroup = ciscoFwNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFwNotificationsGroup.setDescription('This group contains notifications defined in the Cisco Firewall MIB pertaining to basic firewall operations. Presently, the list include a notification pertaining to URL filtering alone. ')
ciscoFwTransparentNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 491, 2, 2, 9)).setObjects(("CISCO-UNIFIED-FIREWALL-MIB", "ciscoUFwL2StaticMacAddressMoved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFwTransparentNotifGroup = ciscoFwTransparentNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFwTransparentNotifGroup.setDescription('This group contains the notifications that signal security critical events pertaining to the transparent mode operation of the firewall. ')
ciscoFwBasicAaicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 491, 2, 2, 10)).setObjects(("CISCO-UNIFIED-FIREWALL-MIB", "cufwAaicGlobalNumBadProtocolOps"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwAaicGlobalNumBadPDUSize"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwAaicGlobalNumBadPortRange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFwBasicAaicGroup = ciscoFwBasicAaicGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFwBasicAaicGroup.setDescription('This group contains the MIB objects required to instrument the basic elements of Advanced Application Inspection and Control (AAIC). ')
ciscoFwAaicHttpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 491, 2, 2, 11)).setObjects(("CISCO-UNIFIED-FIREWALL-MIB", "cufwAaicHttpNumBadProtocolOps"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwAaicHttpNumBadPDUSize"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwAaicHttpNumTunneledConns"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwAaicHttpNumLargeURIs"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwAaicHttpNumBadContent"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwAaicHttpNumMismatchContent"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwAaicHttpNumDoubleEncodedPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFwAaicHttpGroup = ciscoFwAaicHttpGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFwAaicHttpGroup.setDescription("This group defines statistics pertaining to deep packet inspection of HTTP payloads. A firewall that implements this group must implement the group 'ciscoFwBasicAaicGroup'. ")
ciscoFwMibReportingControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 491, 2, 2, 12)).setObjects(("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnReptAppStats"), ("CISCO-UNIFIED-FIREWALL-MIB", "cufwConnReptAppStatsLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoFwMibReportingControlGroup = ciscoFwMibReportingControlGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoFwMibReportingControlGroup.setDescription('This group contains the MIB objects that allow the administrator to control the granularity of objects reported by the agent. ')
mibBuilder.exportSymbols("CISCO-UNIFIED-FIREWALL-MIB", cufwL2FwGlobals=cufwL2FwGlobals, cuFwConnectionReportSettings=cuFwConnectionReportSettings, ciscoFwTransparentFwGroup=ciscoFwTransparentFwGroup, cufwL2GlobalNumDrops=cufwL2GlobalNumDrops, cufwUrlfRequestsResDropRate5=cufwUrlfRequestsResDropRate5, ciscoFwApplInspectionGroup=ciscoFwApplInspectionGroup, cufwPolConnNumPolicyDeclined=cufwPolConnNumPolicyDeclined, cufwPolicyAppConnSummaryTable=cufwPolicyAppConnSummaryTable, cufwConnSummaryTable=cufwConnSummaryTable, cufwUrlfServerRespsNumLate=cufwUrlfServerRespsNumLate, cufwPolAppConnNumHalfOpen=cufwPolAppConnNumHalfOpen, cufwConnNumResDeclined=cufwConnNumResDeclined, cufwPolAppConnNumResDeclined=cufwPolAppConnNumResDeclined, cufwInspectionStatus=cufwInspectionStatus, ciscoFwBasicAaicGroup=ciscoFwBasicAaicGroup, cufwInspectionPolicyName=cufwInspectionPolicyName, cufwUrlfServerAddress=cufwUrlfServerAddress, cufwAaicHttpNumBadPDUSize=cufwAaicHttpNumBadPDUSize, cufwUrlfRequestsNumCacheAllowed=cufwUrlfRequestsNumCacheAllowed, cufwConnGlobalNumResDeclined=cufwConnGlobalNumResDeclined, cufwPolConnNumSetupsAborted=cufwPolConnNumSetupsAborted, cuFwConnectionGrp=cuFwConnectionGrp, cufwUrlfAllowModeReqNumAllowed=cufwUrlfAllowModeReqNumAllowed, cufwPolConnPolicy=cufwPolConnPolicy, cufwUrlfFunctionEnabled=cufwUrlfFunctionEnabled, ciscoUnifiedFirewallMIB=ciscoUnifiedFirewallMIB, cuFwConnectionGlobals=cuFwConnectionGlobals, cufwAppConnNumAttempted=cufwAppConnNumAttempted, cufwPolConnNumHalfOpen=cufwPolConnNumHalfOpen, ciscoUnifiedFirewallMIBObjects=ciscoUnifiedFirewallMIBObjects, ciscoFwTransparentNotifGroup=ciscoFwTransparentNotifGroup, PYSNMP_MODULE_ID=ciscoUnifiedFirewallMIB, cufwL2GlobalArpOverflowRate5=cufwL2GlobalArpOverflowRate5, cufwUrlfRequestsNumAllowed=cufwUrlfRequestsNumAllowed, cufwAaicHttpNumBadContent=cufwAaicHttpNumBadContent, cufwUrlfServerTable=cufwUrlfServerTable, ciscoUniFirewallMIBGroups=ciscoUniFirewallMIBGroups, ciscoFwAaicHttpGroup=ciscoFwAaicHttpGroup, cufwConnNumHalfOpen=cufwConnNumHalfOpen, cufwUrlfServerAddrType=cufwUrlfServerAddrType, cufwAppConnNumPolicyDeclined=cufwAppConnNumPolicyDeclined, cufwPolConnPolicyTargetType=cufwPolConnPolicyTargetType, cufwPolConnNumAborted=cufwPolConnNumAborted, cufwAaicHttpProtocolStats=cufwAaicHttpProtocolStats, cufwUrlfNumServerTimeouts=cufwUrlfNumServerTimeouts, cufwAppConnNumResDeclined=cufwAppConnNumResDeclined, cufwInspectionEntry=cufwInspectionEntry, cufwUrlfRequestsNumResDropped=cufwUrlfRequestsNumResDropped, cuFwApplInspectionGrp=cuFwApplInspectionGrp, cufwL2GlobalNumSpoofedArpResps=cufwL2GlobalNumSpoofedArpResps, cufwUrlfServerAvgRespTime1=cufwUrlfServerAvgRespTime1, cufwAaicGlobalNumBadProtocolOps=cufwAaicGlobalNumBadProtocolOps, cuFwConnectionResources=cuFwConnectionResources, cufwUrlfServerVendor=cufwUrlfServerVendor, cufwUrlfServerNumRetries=cufwUrlfServerNumRetries, cuFwAaicGrp=cuFwAaicGrp, cuFwConnectionSummaryTables=cuFwConnectionSummaryTables, cufwAppConnNumActive=cufwAppConnNumActive, cufwUrlFilterGlobals=cufwUrlFilterGlobals, cufwL2GlobalEnableStealthMode=cufwL2GlobalEnableStealthMode, cufwCntlL2StaticMacAddressMoved=cufwCntlL2StaticMacAddressMoved, cufwL2GlobalNumBadArpResponses=cufwL2GlobalNumBadArpResponses, cufwInspectionTable=cufwInspectionTable, ciscoUniFirewallMIBCompliance=ciscoUniFirewallMIBCompliance, cufwAaicHttpNumLargeURIs=cufwAaicHttpNumLargeURIs, ciscoFwUrlFilterResourceGroup=ciscoFwUrlFilterResourceGroup, cufwPolAppConnNumPolicyDeclined=cufwPolAppConnNumPolicyDeclined, cufwPolAppConnProtocol=cufwPolAppConnProtocol, cufwUrlfNumServerRetries=cufwUrlfNumServerRetries, cufwCntlUrlfServerStatusChange=cufwCntlUrlfServerStatusChange, ciscoFwPolicyConnectionGroup=ciscoFwPolicyConnectionGroup, cufwPolAppConnNumActive=cufwPolAppConnNumActive, cufwUrlfRequestsProcRate5=cufwUrlfRequestsProcRate5, cufwUrlfRequestsProcRate1=cufwUrlfRequestsProcRate1, cufwUrlfServerAvgRespTime5=cufwUrlfServerAvgRespTime5, cufwConnGlobalNumRemoteAccess=cufwConnGlobalNumRemoteAccess, cuFwFailoverGrp=cuFwFailoverGrp, cufwL2GlobalArpCacheSize=cufwL2GlobalArpCacheSize, cufwPolAppConnNumAborted=cufwPolAppConnNumAborted, cufwConnGlobalNumAttempted=cufwConnGlobalNumAttempted, cufwConnNumAborted=cufwConnNumAborted, cufwConnSummaryEntry=cufwConnSummaryEntry, cufwConnGlobalConnSetupRate1=cufwConnGlobalConnSetupRate1, cufwUrlfRequestsDeniedRate1=cufwUrlfRequestsDeniedRate1, cufwAppConnSummaryTable=cufwAppConnSummaryTable, cuFwNotifCntlGrp=cuFwNotifCntlGrp, cufwPolConnNumResDeclined=cufwPolConnNumResDeclined, cufwAaicHttpNumDoubleEncodedPkts=cufwAaicHttpNumDoubleEncodedPkts, ciscoFwUrlFilterGroup=ciscoFwUrlFilterGroup, cufwAppConnProtocol=cufwAppConnProtocol, cufwUrlfRequestsResDropRate1=cufwUrlfRequestsResDropRate1, cufwL2GlobalNumIcmpRequests=cufwL2GlobalNumIcmpRequests, cufwPolAppConnPolicy=cufwPolAppConnPolicy, cufwPolicyAppConnSummaryEntry=cufwPolicyAppConnSummaryEntry, cufwAaicHttpNumTunneledConns=cufwAaicHttpNumTunneledConns, cufwAIAuditTrailEnabled=cufwAIAuditTrailEnabled, cufwConnGlobalNumPolicyDeclined=cufwConnGlobalNumPolicyDeclined, cufwUrlfResTotalRequestCacheSize=cufwUrlfResTotalRequestCacheSize, cufwConnNumActive=cufwConnNumActive, cufwL2GlobalNumArpRequests=cufwL2GlobalNumArpRequests, cufwPolAppConnPolicyTargetType=cufwPolAppConnPolicyTargetType, cufwAppConnSetupRate1=cufwAppConnSetupRate1, cufwInspectionProtocol=cufwInspectionProtocol, cufwPolAppConnNumSetupsAborted=cufwPolAppConnNumSetupsAborted, cufwAppConnSetupRate5=cufwAppConnSetupRate5, cufwAppConnNumAborted=cufwAppConnNumAborted, ciscoUFwL2StaticMacAddressMoved=ciscoUFwL2StaticMacAddressMoved, ciscoUniFirewallMIBCompliances=ciscoUniFirewallMIBCompliances, cufwConnNumAttempted=cufwConnNumAttempted, cufwPolConnNumActive=cufwPolConnNumActive, cufwUrlfServerNumTimeouts=cufwUrlfServerNumTimeouts, cufwConnReptAppStatsLastChanged=cufwConnReptAppStatsLastChanged, cufwAaicProtocolStats=cufwAaicProtocolStats, cufwUrlfRequestsNumProcessed=cufwUrlfRequestsNumProcessed, cufwUrlfResTotalRespCacheSize=cufwUrlfResTotalRespCacheSize, cufwUrlfServerReqsNumAllowed=cufwUrlfServerReqsNumAllowed, cufwAaicGlobalNumBadPDUSize=cufwAaicGlobalNumBadPDUSize, cuFwL2FwGrp=cuFwL2FwGrp, ciscoUnifiedFirewallMIBNotifs=ciscoUnifiedFirewallMIBNotifs, cufwL2GlobalNumFloods=cufwL2GlobalNumFloods, cufwConnNumPolicyDeclined=cufwConnNumPolicyDeclined, cufwAppConnNumSetupsAborted=cufwAppConnNumSetupsAborted, ciscoFwNotificationsGroup=ciscoFwNotificationsGroup, cufwPolAppConnNumAttempted=cufwPolAppConnNumAttempted, cufwL2GlobalEnableArpInspection=cufwL2GlobalEnableArpInspection, ciscoFwMibReportingControlGroup=ciscoFwMibReportingControlGroup, cufwPolAppConnPolicyTarget=cufwPolAppConnPolicyTarget, cufwUrlfServerStatus=cufwUrlfServerStatus, cufwConnProtocol=cufwConnProtocol, cufwConnSetupRate5=cufwConnSetupRate5, cufwAaicGlobalNumBadPortRange=cufwAaicGlobalNumBadPortRange, cufwUrlfUrlAccRespsNumResDropped=cufwUrlfUrlAccRespsNumResDropped, cufwConnGlobalNumEmbryonic=cufwConnGlobalNumEmbryonic, cufwUrlFilterResourceUsage=cufwUrlFilterResourceUsage, cufwConnGlobalNumAborted=cufwConnGlobalNumAborted, cufwUrlFilterServers=cufwUrlFilterServers, cufwConnGlobalNumActive=cufwConnGlobalNumActive, cufwPolicyConnSummaryTable=cufwPolicyConnSummaryTable, cufwUrlfRequestsDeniedRate5=cufwUrlfRequestsDeniedRate5, cufwAaicGlobals=cufwAaicGlobals, cufwUrlfRequestsNumCacheDenied=cufwUrlfRequestsNumCacheDenied, cufwConnGlobalNumExpired=cufwConnGlobalNumExpired, cufwConnResActiveConnMemoryUsage=cufwConnResActiveConnMemoryUsage, cufwUrlfServerReqsNumProcessed=cufwUrlfServerReqsNumProcessed, cufwConnResHOConnMemoryUsage=cufwConnResHOConnMemoryUsage, cufwAaicHttpNumBadProtocolOps=cufwAaicHttpNumBadProtocolOps, cufwAppConnNumHalfOpen=cufwAppConnNumHalfOpen, cufwConnNumSetupsAborted=cufwConnNumSetupsAborted, cufwConnGlobalNumSetupsAborted=cufwConnGlobalNumSetupsAborted, cufwAIAlertEnabled=cufwAIAlertEnabled, cufwPolConnPolicyTarget=cufwPolConnPolicyTarget, cufwConnGlobalConnSetupRate5=cufwConnGlobalConnSetupRate5, cufwUrlfRequestsNumDenied=cufwUrlfRequestsNumDenied, cufwAaicHttpNumMismatchContent=cufwAaicHttpNumMismatchContent, cufwConnGlobalNumHalfOpen=cufwConnGlobalNumHalfOpen, ciscoFwConnectionGroup=ciscoFwConnectionGroup, cufwConnReptAppStats=cufwConnReptAppStats, ciscoUnifiedFirewallMIBConform=ciscoUnifiedFirewallMIBConform, cufwConnSetupRate1=cufwConnSetupRate1, cufwPolicyConnSummaryEntry=cufwPolicyConnSummaryEntry, ciscoFwConnResourceUsageGroup=ciscoFwConnResourceUsageGroup, cufwUrlfServerEntry=cufwUrlfServerEntry, cuFwUrlFilterGrp=cuFwUrlFilterGrp, cufwUrlfServerRespsNumReceived=cufwUrlfServerRespsNumReceived, cufwConnResEmbrConnMemoryUsage=cufwConnResEmbrConnMemoryUsage, cufwAppConnSummaryEntry=cufwAppConnSummaryEntry, cufwUrlfAllowModeReqNumDenied=cufwUrlfAllowModeReqNumDenied, cufwUrlfServerPort=cufwUrlfServerPort, cufwPolConnNumAttempted=cufwPolConnNumAttempted, ciscoUFwUrlfServerStateChange=ciscoUFwUrlfServerStateChange, cufwUrlfResponsesNumLate=cufwUrlfResponsesNumLate, cufwConnResMemoryUsage=cufwConnResMemoryUsage, cufwUrlfServerReqsNumDenied=cufwUrlfServerReqsNumDenied, cufwPolConnProtocol=cufwPolConnProtocol)
