#
# PySNMP MIB module BDCOM-SYS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BDCOM-SYS
# Produced by pysmi-0.3.4 at Wed May  1 11:36:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
bdlocal, = mibBuilder.importSymbols("BDCOM-SMI", "bdlocal")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, ObjectIdentity, Bits, Counter32, ModuleIdentity, IpAddress, TimeTicks, Counter64, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "ObjectIdentity", "Bits", "Counter32", "ModuleIdentity", "IpAddress", "TimeTicks", "Counter64", "NotificationType", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bdlsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 2, 1))
bdromId = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdromId.setStatus('mandatory')
if mibBuilder.loadTexts: bdromId.setDescription('This variable contains a printable octet string which contains the System Bootstrap description and version identification.')
bdwhyReload = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdwhyReload.setStatus('mandatory')
if mibBuilder.loadTexts: bdwhyReload.setDescription('This variable contains a printable octet string which contains the reason why the system was last restarted.')
bdhostName = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdhostName.setStatus('mandatory')
if mibBuilder.loadTexts: bdhostName.setDescription('This variable represents the name of the host in printable ascii characters.')
bddomainName = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bddomainName.setStatus('mandatory')
if mibBuilder.loadTexts: bddomainName.setDescription('This variable is the domain portion of the domain name of the host.')
bdauthAddr = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdauthAddr.setStatus('mandatory')
if mibBuilder.loadTexts: bdauthAddr.setDescription('This variable contains the last SNMP authorization failure IP address.')
bdbootHost = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbootHost.setStatus('mandatory')
if mibBuilder.loadTexts: bdbootHost.setDescription('Contains the IP address of the host that supplied the currently running software.')
bdping = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdping.setStatus('obsolete')
if mibBuilder.loadTexts: bdping.setDescription('The ping mib object is obsolete as of IOS 10.2 It has been superseded by the BDCom Ping MIB')
bdfreeMem = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdfreeMem.setStatus('obsolete')
if mibBuilder.loadTexts: bdfreeMem.setDescription('The freeMem mib object is obsolete as of IOS 11.1 It has been replaced with the BDCom memory pool mib')
bdbufferElFree = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferElFree.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferElFree.setDescription('Contains the number of free buffer elements.')
bdbufferElMax = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferElMax.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferElMax.setDescription('Contains the maximum number of buffer elements.')
bdbufferElHit = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferElHit.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferElHit.setDescription('Contains the number of buffer element hits.')
bdbufferElMiss = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferElMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferElMiss.setDescription('Contains the number of buffer element misses.')
bdbufferElCreate = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferElCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferElCreate.setDescription('Contains the number of buffer element creates.')
bdbufferSmSize = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferSmSize.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferSmSize.setDescription('Contains the size of small buffers.')
bdbufferSmTotal = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferSmTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferSmTotal.setDescription('Contains the total number of small buffers.')
bdbufferSmFree = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferSmFree.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferSmFree.setDescription('Contains the number of free small buffers.')
bdbufferSmMax = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferSmMax.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferSmMax.setDescription('Contains the maximum number of small buffers.')
bdbufferSmHit = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferSmHit.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferSmHit.setDescription('Contains the number of small buffer hits.')
bdbufferSmMiss = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferSmMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferSmMiss.setDescription('Contains the number of small buffer misses.')
bdbufferSmTrim = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferSmTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferSmTrim.setDescription('Contains the number of small buffer trims.')
bdbufferSmCreate = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferSmCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferSmCreate.setDescription('Contains the number of small buffer creates.')
bdbufferMdSize = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferMdSize.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferMdSize.setDescription('Contains the size of medium buffers.')
bdbufferMdTotal = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferMdTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferMdTotal.setDescription('Contains the total number of medium buffers.')
bdbufferMdFree = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferMdFree.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferMdFree.setDescription('Contains the number of free medium buffers.')
bdbufferMdMax = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferMdMax.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferMdMax.setDescription('Contains the maximum number of medium buffers.')
bdbufferMdHit = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferMdHit.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferMdHit.setDescription('Contains the number of medium buffer hits.')
bdbufferMdMiss = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferMdMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferMdMiss.setDescription('Contains the number of medium buffer misses.')
bdbufferMdTrim = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferMdTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferMdTrim.setDescription('Contains the number of medium buffer trims.')
bdbufferMdCreate = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferMdCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferMdCreate.setDescription('Contains the number of medium buffer creates.')
bdbufferBgSize = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferBgSize.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferBgSize.setDescription('Contains the size of big buffers.')
bdbufferBgTotal = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferBgTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferBgTotal.setDescription('Contains the total number of big buffers.')
bdbufferBgFree = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferBgFree.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferBgFree.setDescription('Contains the number of free big buffers.')
bdbufferBgMax = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferBgMax.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferBgMax.setDescription('Contains the maximum number of big buffers.')
bdbufferBgHit = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferBgHit.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferBgHit.setDescription('Contains the number of big buffer hits.')
bdbufferBgMiss = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferBgMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferBgMiss.setDescription('Contains the number of big buffer misses.')
bdbufferBgTrim = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferBgTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferBgTrim.setDescription('Contains the number of big buffer trims.')
bdbufferBgCreate = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferBgCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferBgCreate.setDescription('Contains the number of big buffer creates.')
bdbufferLgSize = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferLgSize.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferLgSize.setDescription('Contains the size of large buffers.')
bdbufferLgTotal = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferLgTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferLgTotal.setDescription('Contains the total number of large buffers.')
bdbufferLgFree = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferLgFree.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferLgFree.setDescription('Contains the number of free large buffers.')
bdbufferLgMax = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferLgMax.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferLgMax.setDescription('Contains the maximum number of large buffers.')
bdbufferLgHit = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferLgHit.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferLgHit.setDescription('Contains the number of large buffer hits.')
bdbufferLgMiss = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferLgMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferLgMiss.setDescription('Contains the number of large buffer misses.')
bdbufferLgTrim = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferLgTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferLgTrim.setDescription('Contains the number of large buffer trims.')
bdbufferLgCreate = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferLgCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferLgCreate.setDescription('Contains the number of large buffer creates.')
bdbufferFail = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferFail.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferFail.setDescription('Count of the number of buffer allocation failures.')
bdbufferNoMem = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferNoMem.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferNoMem.setDescription('Count of the number of buffer create failures due to no free memory.')
bdnetConfigAddr = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 48), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdnetConfigAddr.setStatus('mandatory')
if mibBuilder.loadTexts: bdnetConfigAddr.setDescription('Holds the address of the host that supplied the network-confg file.')
bdnetConfigName = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdnetConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: bdnetConfigName.setDescription('Holds the name of the network configuration file.')
bdnetConfigSet = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 50), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bdnetConfigSet.setStatus('mandatory')
if mibBuilder.loadTexts: bdnetConfigSet.setDescription('Cause the loading of a new network-confg file using TFTP.')
bdhostConfigAddr = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 51), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdhostConfigAddr.setStatus('obsolete')
if mibBuilder.loadTexts: bdhostConfigAddr.setDescription('Contains the address of the host that provided the host-config file.')
bdhostConfigName = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdhostConfigName.setStatus('obsolete')
if mibBuilder.loadTexts: bdhostConfigName.setDescription('Contains the name of the last configured host-confg file.')
bdhostConfigSet = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 53), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bdhostConfigSet.setStatus('obsolete')
if mibBuilder.loadTexts: bdhostConfigSet.setDescription('Cause the loading of a new host-confg file using TFTP.')
bdwriteMem = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 54), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bdwriteMem.setStatus('mandatory')
if mibBuilder.loadTexts: bdwriteMem.setDescription('Write configuration into non-volatile memory / erase config memory if 0.')
bdwriteNet = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 55), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bdwriteNet.setStatus('mandatory')
if mibBuilder.loadTexts: bdwriteNet.setDescription('Write configuration to host using TFTP.')
bdbusyPer = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbusyPer.setStatus('mandatory')
if mibBuilder.loadTexts: bdbusyPer.setDescription('CPU busy percentage in the last 5 second period. Not the last 5 realtime seconds but the last 5 second period in the scheduler.')
bdavgBusy1 = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdavgBusy1.setStatus('mandatory')
if mibBuilder.loadTexts: bdavgBusy1.setDescription('1 minute exponentially-decayed moving average of the CPU busy percentage.')
bdavgBusy5 = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdavgBusy5.setStatus('mandatory')
if mibBuilder.loadTexts: bdavgBusy5.setDescription('5 minute exponentially-decayed moving average of the CPU busy percentage.')
bdidleCount = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdidleCount.setStatus('mandatory')
if mibBuilder.loadTexts: bdidleCount.setDescription('BDCom internal variable. not to be used')
bdidleWired = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdidleWired.setStatus('mandatory')
if mibBuilder.loadTexts: bdidleWired.setDescription('BDCom internal variable. not to be used')
bdContactInfo = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdContactInfo.setStatus('mandatory')
if mibBuilder.loadTexts: bdContactInfo.setDescription("BDCom's name and address")
bdbufferHgSize = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferHgSize.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferHgSize.setDescription('Contains the size of huge buffers.')
bdbufferHgTotal = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferHgTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferHgTotal.setDescription('Contains the total number of huge buffers.')
bdbufferHgFree = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferHgFree.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferHgFree.setDescription('Contains the number of free huge buffers.')
bdbufferHgMax = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferHgMax.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferHgMax.setDescription('Contains the maximum number of huge buffers.')
bdbufferHgHit = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferHgHit.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferHgHit.setDescription('Contains the number of huge buffer hits.')
bdbufferHgMiss = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferHgMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferHgMiss.setDescription('Contains the number of huge buffer misses.')
bdbufferHgTrim = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferHgTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferHgTrim.setDescription('Contains the number of huge buffer trims.')
bdbufferHgCreate = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdbufferHgCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bdbufferHgCreate.setDescription('Contains the number of huge buffer creates.')
bdnetConfigProto = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdnetConfigProto.setStatus('mandatory')
if mibBuilder.loadTexts: bdnetConfigProto.setDescription('Holds the protocol that supplied the network-confg file.')
bdhostConfigProto = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdhostConfigProto.setStatus('mandatory')
if mibBuilder.loadTexts: bdhostConfigProto.setDescription('Holds the protocol that supplied the host- confg file.')
bdsysConfigAddr = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 72), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdsysConfigAddr.setStatus('mandatory')
if mibBuilder.loadTexts: bdsysConfigAddr.setDescription('Holds the address of the host that supplied the system boot image.')
bdsysConfigName = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 73), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdsysConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: bdsysConfigName.setDescription('Holds the name of the system boot image.')
bdsysConfigProto = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdsysConfigProto.setStatus('mandatory')
if mibBuilder.loadTexts: bdsysConfigProto.setDescription('Holds the protocol that supplied the system boot image.')
bdsysClearARP = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 75), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bdsysClearARP.setStatus('mandatory')
if mibBuilder.loadTexts: bdsysClearARP.setDescription('Perform a clearing of the entire ARP cache and invalidation of route caches.')
bdsysClearInt = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 76), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bdsysClearInt.setStatus('mandatory')
if mibBuilder.loadTexts: bdsysClearInt.setDescription('Clear interface given IfIndex as value.')
bdenvPresent = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvPresent.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvPresent.setDescription('Is there an environmental monitor card in this box?, 0 - No, 1-AGS card present, wrong firmware, 2-AGS CARD present, firmware ok, 3-7000 support')
bdenvTestPt1Descr = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 78), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt1Descr.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt1Descr.setDescription('Description of the test point 1. Typically ambient air or the temperature of air entering the router')
bdenvTestPt1Measure = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt1Measure.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt1Measure.setDescription('Current value of test point 1. Typically a temperature in centigrade.')
bdenvTestPt2Descr = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 80), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt2Descr.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt2Descr.setDescription('Description of the test point 2. Typically airflow or the temperature of air leaving the router')
bdenvTestPt2Measure = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt2Measure.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt2Measure.setDescription('Current value of test point 2. Typically a temperature in centigrade.')
bdenvTestPt3Descr = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 82), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt3Descr.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt3Descr.setDescription('Description of the test point 3. Typically +5 volt')
bdenvTestPt3Measure = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt3Measure.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt3Measure.setDescription('Current value of test point 3. Typically the value in millivolts of the +5v supply')
bdenvTestPt4Descr = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 84), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt4Descr.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt4Descr.setDescription('Description of the test point 4. Typically +12 volt')
bdenvTestPt4Measure = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt4Measure.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt4Measure.setDescription('Current value of test point 4. Typically the value in millivolts of the +12v supply')
bdenvTestPt5Descr = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 86), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt5Descr.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt5Descr.setDescription('Description of the test point 5. Typically -12 volt')
bdenvTestPt5Measure = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt5Measure.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt5Measure.setDescription('Current value of test point 5. Typically the value in millivolts of the -12v supply')
bdenvTestPt6Descr = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 88), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt6Descr.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt6Descr.setDescription('Description of the test point 6. Typically -5 volt')
bdenvTestPt6Measure = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt6Measure.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt6Measure.setDescription('Current value of test point 6. Typically the value in millivolts of the -5v supply')
bdenvTestPt1MarginVal = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt1MarginVal.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt1MarginVal.setDescription('Value at which the router will shutdown. Typically the ambient air temperature that will shut the router down. (e.g. 43)')
bdenvTestPt2MarginVal = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt2MarginVal.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt2MarginVal.setDescription('Value at which the router will shutdown. Typically the airflow air temperature that will shut the router down. (e.g. 58)')
bdenvTestPt3MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt3MarginPercent.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt3MarginPercent.setDescription('+/- Percentage that will shut the router down, (e.g. 10%) typically +5 volt')
bdenvTestPt4MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt4MarginPercent.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt4MarginPercent.setDescription('+/- Percentage that will shut the router down, (e.g. 15%) typically +12 volt')
bdenvTestPt5MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt5MarginPercent.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt5MarginPercent.setDescription('+/- Percentage that will shut the router down, (e.g. 15%) typically -12 volt')
bdenvTestPt6MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt6MarginPercent.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt6MarginPercent.setDescription('+/- Percentage that will shut the router down, (e.g. 10%) typically -5 volt')
bdenvTestPt1last = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 96), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt1last.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt1last.setDescription('Value of TestPt1 when last shutdown occurred.')
bdenvTestPt2last = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt2last.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt2last.setDescription('Value of TestPt2 when last shutdown occurred.')
bdenvTestPt3last = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 98), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt3last.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt3last.setDescription('Value of TestPt3 when last shutdown occurred.')
bdenvTestPt4last = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt4last.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt4last.setDescription('Value of TestPt4 when last shutdown occurred.')
bdenvTestPt5last = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt5last.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt5last.setDescription('Value of TestPt5 when last shutdown occurred.')
bdenvTestPt6last = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt6last.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt6last.setDescription('Value of TestPt6 when last shutdown occurred.')
bdenvTestPt1warn = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt1warn.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt1warn.setDescription('Is this test point at a warning level?')
bdenvTestPt2warn = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt2warn.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt2warn.setDescription('Is this test point at a warning level?')
bdenvTestPt3warn = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt3warn.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt3warn.setDescription('Is this test point at a warning level?')
bdenvTestPt4warn = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt4warn.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt4warn.setDescription('Is this test point at a warning level?')
bdenvTestPt5warn = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt5warn.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt5warn.setDescription('Is this test point at a warning level?')
bdenvTestPt6warn = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTestPt6warn.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTestPt6warn.setDescription('Is this test point at a warning level?')
bdenvFirmVersion = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 108), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvFirmVersion.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvFirmVersion.setDescription('Description of Environmental Card firmware')
bdenvTechnicianID = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 109), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvTechnicianID.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvTechnicianID.setDescription('Technician ID')
bdenvType = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 110), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvType.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvType.setDescription('The type of environmental card')
bdenvBurnDate = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 111), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvBurnDate.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvBurnDate.setDescription('The calibration / burn in date')
bdenvSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 1, 112), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdenvSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: bdenvSerialNumber.setDescription('Serial Number of environmental monitor card')
mibBuilder.exportSymbols("BDCOM-SYS", bdnetConfigProto=bdnetConfigProto, bdbufferHgCreate=bdbufferHgCreate, bdenvTestPt3Descr=bdenvTestPt3Descr, bdbufferElMiss=bdbufferElMiss, bdenvPresent=bdenvPresent, bdbufferFail=bdbufferFail, bdsysConfigProto=bdsysConfigProto, bdbufferMdHit=bdbufferMdHit, bdidleCount=bdidleCount, bdbufferMdTotal=bdbufferMdTotal, bdenvTestPt2MarginVal=bdenvTestPt2MarginVal, bdbufferLgFree=bdbufferLgFree, bdbufferHgTotal=bdbufferHgTotal, bdenvType=bdenvType, bdhostConfigSet=bdhostConfigSet, bdbufferLgHit=bdbufferLgHit, bdbufferSmSize=bdbufferSmSize, bdenvTestPt1MarginVal=bdenvTestPt1MarginVal, bdbufferSmMiss=bdbufferSmMiss, bdbufferBgMax=bdbufferBgMax, bdwriteMem=bdwriteMem, bdbufferHgHit=bdbufferHgHit, bdbufferElHit=bdbufferElHit, bdbufferHgSize=bdbufferHgSize, bdbufferBgTrim=bdbufferBgTrim, bdbufferSmHit=bdbufferSmHit, bdbufferLgMax=bdbufferLgMax, bdenvTestPt1Descr=bdenvTestPt1Descr, bdbufferBgMiss=bdbufferBgMiss, bdbufferElMax=bdbufferElMax, bdnetConfigSet=bdnetConfigSet, bdenvTestPt2last=bdenvTestPt2last, bdbufferMdMax=bdbufferMdMax, bdbufferBgSize=bdbufferBgSize, bdenvTestPt6last=bdenvTestPt6last, bdenvTestPt4last=bdenvTestPt4last, bdenvTestPt1warn=bdenvTestPt1warn, bdfreeMem=bdfreeMem, bdsysConfigName=bdsysConfigName, bdbufferBgCreate=bdbufferBgCreate, bdbufferMdSize=bdbufferMdSize, bdwhyReload=bdwhyReload, bdhostConfigProto=bdhostConfigProto, bdbusyPer=bdbusyPer, bdhostConfigName=bdhostConfigName, bddomainName=bddomainName, bdenvTestPt3warn=bdenvTestPt3warn, bdenvBurnDate=bdenvBurnDate, bdenvTestPt4Measure=bdenvTestPt4Measure, bdbufferHgTrim=bdbufferHgTrim, bdenvTestPt2warn=bdenvTestPt2warn, bdbufferSmFree=bdbufferSmFree, bdsysClearInt=bdsysClearInt, bdbufferBgFree=bdbufferBgFree, bdnetConfigName=bdnetConfigName, bdenvTestPt2Measure=bdenvTestPt2Measure, bdbufferSmCreate=bdbufferSmCreate, bdenvTestPt2Descr=bdenvTestPt2Descr, bdavgBusy1=bdavgBusy1, bdenvTestPt4MarginPercent=bdenvTestPt4MarginPercent, bdbufferMdFree=bdbufferMdFree, bdbufferSmTotal=bdbufferSmTotal, bdbufferMdTrim=bdbufferMdTrim, bdwriteNet=bdwriteNet, bdenvTestPt6Measure=bdenvTestPt6Measure, bdromId=bdromId, bdbootHost=bdbootHost, bdbufferElFree=bdbufferElFree, bdenvTechnicianID=bdenvTechnicianID, bdauthAddr=bdauthAddr, bdhostName=bdhostName, bdidleWired=bdidleWired, bdbufferNoMem=bdbufferNoMem, bdenvTestPt4Descr=bdenvTestPt4Descr, bdenvTestPt5last=bdenvTestPt5last, bdbufferHgMiss=bdbufferHgMiss, bdContactInfo=bdContactInfo, bdenvTestPt5MarginPercent=bdenvTestPt5MarginPercent, bdbufferLgTotal=bdbufferLgTotal, bdenvFirmVersion=bdenvFirmVersion, bdenvTestPt5Measure=bdenvTestPt5Measure, bdbufferSmMax=bdbufferSmMax, bdbufferMdCreate=bdbufferMdCreate, bdping=bdping, bdbufferLgCreate=bdbufferLgCreate, bdenvTestPt6Descr=bdenvTestPt6Descr, bdenvTestPt3MarginPercent=bdenvTestPt3MarginPercent, bdbufferSmTrim=bdbufferSmTrim, bdenvTestPt6warn=bdenvTestPt6warn, bdenvTestPt3last=bdenvTestPt3last, bdbufferLgMiss=bdbufferLgMiss, bdbufferHgMax=bdbufferHgMax, bdsysConfigAddr=bdsysConfigAddr, bdbufferMdMiss=bdbufferMdMiss, bdbufferBgTotal=bdbufferBgTotal, bdbufferElCreate=bdbufferElCreate, bdenvTestPt6MarginPercent=bdenvTestPt6MarginPercent, bdhostConfigAddr=bdhostConfigAddr, bdenvTestPt5warn=bdenvTestPt5warn, bdnetConfigAddr=bdnetConfigAddr, bdbufferLgTrim=bdbufferLgTrim, bdenvTestPt1Measure=bdenvTestPt1Measure, bdenvTestPt3Measure=bdenvTestPt3Measure, bdbufferHgFree=bdbufferHgFree, bdenvTestPt1last=bdenvTestPt1last, bdenvTestPt4warn=bdenvTestPt4warn, bdavgBusy5=bdavgBusy5, bdbufferLgSize=bdbufferLgSize, bdlsystem=bdlsystem, bdsysClearARP=bdsysClearARP, bdenvTestPt5Descr=bdenvTestPt5Descr, bdenvSerialNumber=bdenvSerialNumber, bdbufferBgHit=bdbufferBgHit)
