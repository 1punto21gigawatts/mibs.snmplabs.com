#
# PySNMP MIB module CISCO-DS3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DS3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:56:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, TimeTicks, Unsigned32, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, ModuleIdentity, Gauge32, ObjectIdentity, Counter32, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "Unsigned32", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "ModuleIdentity", "Gauge32", "ObjectIdentity", "Counter32", "MibIdentifier", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoDs3MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 132))
ciscoDs3MIB.setRevisions(('2002-05-21 00:00', '2001-08-31 00:00', '2000-10-10 00:00', '2000-02-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDs3MIB.setRevisionsDescriptions(('1. Added enumeration notApplicable(3) to following objects: cds3LineAIScBitsCheck, cds3LineOOFCriteria. 2. Imported Unsigned32 from SNMPv2-SMI instead of CISCO-TC.', 'Following enumerations are added to cds3LineType object: ds3cbitfrmronly, ds3m23frmronly, e3g832frmronly and e3g751frmronly.', 'Following enumerations are added to cds3LineType object: dsx3M23, dsx3SYNTRAN, dsx3CbitParity, dsx3ClearChannel, e3Framed, e3Plcp.', 'Initial version of this MIB Module.',))
if mibBuilder.loadTexts: ciscoDs3MIB.setLastUpdated('200205210000Z')
if mibBuilder.loadTexts: ciscoDs3MIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoDs3MIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoDs3MIB.setDescription('The MIB module to describe DS3 line objects. This is an extension to the standard DS3 MIB(RFC 2496).')
ciscoDs3MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 132, 1))
cds3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 1))
cds3Alarm = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2))
cds3Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3))
cds3AlarmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1))
cds3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 1, 1), )
if mibBuilder.loadTexts: cds3ConfigTable.setStatus('current')
if mibBuilder.loadTexts: cds3ConfigTable.setDescription('The DS3 Configuration table. The table has objects for configuring a T3/E3 line.')
cds3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cds3ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cds3ConfigEntry.setDescription("An entry in the table. There is an entry for each available T3/E3 line, with an ifType value of 'ds3'(30). By default, lines are disabled. 'ifAdmin' from ifTable must be used to up the line. The objects in this table can be modified only when the line is up.")
cds3LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("ds3cbitadm", 1), ("ds3cbitplcp", 2), ("e3g832adm", 3), ("e3g751adm", 4), ("e3g751plcp", 5), ("ds3m23adm", 6), ("ds3m23plcp", 7), ("other", 8), ("dsx3M23", 9), ("dsx3SYNTRAN", 10), ("dsx3CbitParity", 11), ("dsx3ClearChannel", 12), ("e3Framed", 13), ("e3Plcp", 14), ("ds3cbitfrmronly", 15), ("ds3m23frmronly", 16), ("e3g832frmronly", 17), ("e3g751frmronly", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3LineType.setReference('ANSI T1.107, ANSI T1.102, CCITT G.751, ETSI T/NA(91)18')
if mibBuilder.loadTexts: cds3LineType.setStatus('current')
if mibBuilder.loadTexts: cds3LineType.setDescription('This variable indicates the variety of DS3 C-bit or E3 application implementing this interface. The type of interface affects the interpretation of the usage and error statistics. The rate of DS3 is 44.736 Mbps and E3 is 34.368 Mbps. The values, in sequence, describe: Following values are applicable to DS3 interfaces only. ds3cbitadm : Indicates C-BIT ADM mode ds3cbitplcp : Indicates C-BIT PLCP mode ds3m23adm : Indicates M23 ADM mode ds3m23plcp : Indicates M23 PLCP mode dsx3M23 : Refer ANSI T1.107-1988 [9] dsx3SYNTRAN : Refer ANSI T1.107-1988 [9] dsx3CbitParity : Refer ANSI T1.107-1988 [9] dsx3ClearChannel : Refer ANSI T1.107-1988 [9] ds3cbitfrmronly : Indicates C-BIT FRAMER-ONLY mode ds3m23frmronly : Indicates M23 FRAMER-ONLY mode Following values are applicable to E3 interfaces only. e3g832adm : Indicates G.832 ADM mode e3g751adm : Indicates G.751 ADM mode e3g751plcp : Indicates G.751 PLCP mode e3Framed : Refer CCITT G.751 [12] e3Plcp : Refer ETSI T/NA(91)19 [14] e3g832frmronly : Indicates G.832 FRAMER-ONLY mode e3g751frmronly : Indicates G.751 FRAMER-ONLY mode.')
cds3LineAIScBitsCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("check", 1), ("ignore", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3LineAIScBitsCheck.setReference('RFC2496')
if mibBuilder.loadTexts: cds3LineAIScBitsCheck.setStatus('current')
if mibBuilder.loadTexts: cds3LineAIScBitsCheck.setDescription("When check(1) is set, then Alarm Indication Signal (AIS) is declared when '1010...'b is found and C-Bits are all zero. When ignore(2) is set, an AIS condition is declared when the '1010...'b is detected irrespective of the state of the C-Bits. Does not apply to the E3 interface. The value notApplicable(3) is used in case of the interfaces where this object is not applicable. The notApplicable(3) is not allowed in write operation.")
cds3LineRcvFEACValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fEACCodes4Of5", 1), ("fEACCodes8Of10", 2), ("disable", 3))).clone('fEACCodes4Of5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3LineRcvFEACValidation.setStatus('current')
if mibBuilder.loadTexts: cds3LineRcvFEACValidation.setDescription("This entry specifies the FEAC (Far End Alarm and Control) code validation criteria. If 'fEACCodes4Of5' is specified, then a valid FEAC code is declared if 4 of 5 codes match. When 'fEACCodes8Of10' is specified, then a valid FEAC code is declared when 8 of 10 codes match. If disable(3) is specified, then FEAC code generation and detection is disabled. Does not apply to the E3 interface.")
cds3LineOOFCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bits3Of8", 1), ("bits3Of16", 2), ("notApplicable", 3))).clone('bits3Of8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3LineOOFCriteria.setStatus('current')
if mibBuilder.loadTexts: cds3LineOOFCriteria.setDescription("This entry specifies the out of frame(OOF) decision criteria. If 'bits3Of8' is specified then an OOF condition is declared if at least 3 of 8 framing bits are in error. When 'bits3Of16' is specified then OOF is declared if 3 of 16 framing bits are found to be in error. OOF is declared when errors are detected in the framing octets for four consecutive frames. This object does not apply to E3 interface. The value notApplicable(3) is used in case of the interfaces where this object is not applicable. The notApplicable(3) is not allowed in write operation.")
cds3TraceToTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3TraceToTransmit.setReference('GR-253-CORE')
if mibBuilder.loadTexts: cds3TraceToTransmit.setStatus('current')
if mibBuilder.loadTexts: cds3TraceToTransmit.setDescription('Transmitted G.832 Trail Trace string.')
cds3TraceToExpect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3TraceToExpect.setReference('GR-253-CORE')
if mibBuilder.loadTexts: cds3TraceToExpect.setStatus('current')
if mibBuilder.loadTexts: cds3TraceToExpect.setDescription('G.832 Trail Trace string that is expected to be received from the other end.')
cds3TraceAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAlarm", 1), ("traceFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3TraceAlarm.setReference('GR-253-CORE')
if mibBuilder.loadTexts: cds3TraceAlarm.setStatus('current')
if mibBuilder.loadTexts: cds3TraceAlarm.setDescription("The value of this object is set to traceFailure(2) when DS3 line receives a trace does not match the 'cds3TraceToExpect'.")
cds3InternalEqualizer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("use", 1), ("byPass", 2))).clone('use')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3InternalEqualizer.setStatus('current')
if mibBuilder.loadTexts: cds3InternalEqualizer.setDescription('This variable indicates whether the internal equalizer is being used or bypassed. Set this value depending on the line equipment to which the receiver is attached. Possible values are : use(1) : Use the internal equalizer byPass(2) : bypass internal equalizer(use external equalizer). This option allows easy interfacing of the device into systems already utilizing the external equalizers.')
cds3NearEndLineLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3NearEndLineLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: cds3NearEndLineLoopbackStatus.setDescription('Indicates the loopback status of the near end DS1 on this DS3 when loopback request is indicated. Following table lists the mapping of Bit position to DS1 or DS3 lines and the value. Bit Position Line number value ---------------------------------------- 0 DS3 Line 0 = no loop(loop down) 1 = loop(loop up) 1 DS1 line 1 0 = loop down 1 = loop up 2 DS1 line 2 0 = loop down 1 = loop up 3 DS1 line 3 0 = loop down 1 = loop up ... ... 28 DS1 line 28 0 = loop down 1 = loop up 29 all DS1 lines 0 = loop up 1 = loop down ')
cds3FarEndLineLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3FarEndLineLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: cds3FarEndLineLoopbackStatus.setDescription('Indicates the loopback status of the far end DS3,DS1 when remote DS1 loopback request is initiated. The remote DS1 loopback is initiated by setting dsx3SendCode object to dsx3SendDS1LoopCode(5). For unchannelized DS3 applications DS1s are unassigned. Following table lists the mapping of Bit position to DS1 or DS3 lines and the value. Bit Position Line number value ---------------------------------------- 0 DS3 Line 0 = line loopback activate 1 = line loopback deactivate 1 DS1 line 1 0 = loop down 1 = loop up 2 DS1 line 2 0 = loop down 1 = loop up 3 DS1 line 3 0 = loop down 1 = loop up ... ... 28 DS1 line 29 0 = loop down 1 = loop up 29 all DS1 lines 0 = loop down 1 = loop up ')
cds3AlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1), )
if mibBuilder.loadTexts: cds3AlarmConfigTable.setStatus('current')
if mibBuilder.loadTexts: cds3AlarmConfigTable.setDescription('The DS3 interface alarm configuration table. This table contains the parameters associated with detecting and declaring alarms for the interface. The parameters include severity of alarm, alarm integration parameters and 15 minute and 24 hour thresholds.')
cds3AlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cds3AlarmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cds3AlarmConfigEntry.setDescription("An entry in the T3/E3 Alarm Configuration Table. The entries are automatically created for an ifType value of 'ds3'(30), with default values for objects. Thresholds may be configured for: Line Code Violations(LCV), LineErrored Seconds(LES), Line Severely Errored Seconds(LSES), P-bit Coding Violations(PCV), P-bit Errored Seconds(PES), P-bit Severely Errored Seconds(PSES), Severely Errored Seconds(SES), Severely Errored Framing Seconds(SEFS), Unavailable Seconds(UAS), C-bit coding violations(CCV), C-bit errored seconds(CES), C-bit errored seconds(CSES). Once these thresholds are exceeded, minor or major alarms are raised. Please refer to RFC2496 for descriptions of these errors.")
cds3NEAlarmUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3NEAlarmUpCount.setStatus('current')
if mibBuilder.loadTexts: cds3NEAlarmUpCount.setDescription("This parameter specifies the increment to the Near End alarm integration counters. The local alarms are LOS and LOF. The Default value is 6 and the integration counter is incremented by this value every 10 ms while the alarm persists. The counter is decremented by the value of 'cds3NEAlarmDownCount' while there is no alarm (the counter does not decrement below zero). When the integration counter exceeds 'cds3NEAlarmThreshold' an Alarm of the severity specified for the particular Near End alarm is declared.")
cds3NEAlarmDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3NEAlarmDownCount.setStatus('current')
if mibBuilder.loadTexts: cds3NEAlarmDownCount.setDescription('This parameter specifies the decrement to the Near End alarm integration counters. The alarms are LOS and LOF. The Default value is 1 and the integration counter is decremented by this value every 10 ms while no alarm persists. The counter is incremented by the value of cds3NEAlarmUpCount while there is no alarm (the counter does not decrement below zero). When the integration counter reaches zero any Alarm previously declared is removed.')
cds3NEAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3NEAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3NEAlarmThreshold.setDescription('The value set in this object determines the value that the alarm integration counter must reach for an near end alarm to be declared. If the up count is 6, and the threshold 150, an Alarm is integrated in 2.5 seconds. If the down count is 1, then alarm will be cleared in 15 seconds.')
cds3FEAlarmUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3FEAlarmUpCount.setStatus('current')
if mibBuilder.loadTexts: cds3FEAlarmUpCount.setDescription('This parameter specifies the increment to the Far End alarm integration counters. The alarms are Remote Alarm Indication (RAI) and Alarm Indication Signal(AIS). The integration counter is incremented by this value every 10 ms while the alarm persists. The counter is decremented by this value while there is no alarm (the counter does not decrement below zero). When the integration counter exceeds cds3FEAlarmThreshold an Alarm of the severity specified for the particular far end alarm is declared.')
cds3FEAlarmDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3FEAlarmDownCount.setStatus('current')
if mibBuilder.loadTexts: cds3FEAlarmDownCount.setDescription('This parameter specifies the decrement to the Far End alarm integration counters. The alarms are Alarm Indication Signal (AIS) and Remote Alarm Indication (RAI). The integration counter is decremented by this value every 10 ms (till zero), while no alarm persists. The counter is incremented by this value while there is no alarm. When the integration counter decrements to zero any previously declared Alarm is removed.')
cds3FEAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3FEAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3FEAlarmThreshold.setDescription('The value set in this object determines the value that the alarm integration counter must reach for an far end Alarm to be declared. If the up count is 6, the down count is 1 and the threshold 150, an Alarm is integrated in 2.5 sec and removed in 15 seconds.')
cds3StatisticalAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("minor", 1), ("major", 2), ("none", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3StatisticalAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: cds3StatisticalAlarmSeverity.setDescription('This variable is used to setup the severity of any of the Statistical alarms. So when a Statistical Counter exceeds its specified threshold the system will send the alarm with appropriate severity. A value of none(3) indicates that no alarm will be raised.')
cds3LCV15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3LCV15MinThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3LCV15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3LCV15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
cds3LCV24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3LCV24HrThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3LCV24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3LCV24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval.')
cds3LES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3LES15MinThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3LES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3LES15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
cds3LES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3LES24HrThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3LES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3LES24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval.')
cds3PCV15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3PCV15MinThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3PCV15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3PCV15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared. Not for E3.')
cds3PCV24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3PCV24HrThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3PCV24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3PCV24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval. Not for E3.')
cds3PES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3PES15MinThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3PES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3PES15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared. Not for E3.')
cds3PES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3PES24HrThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3PES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3PES24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval. Not for E3.')
cds3PSES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3PSES15MinThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3PSES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3PSES15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared. Not for E3.')
cds3PSES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3PSES24HrThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3PSES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3PSES24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval. Not for E3.')
cds3SEFS15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3SEFS15MinThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3SEFS15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3SEFS15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
cds3SEFS24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3SEFS24HrThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3SEFS24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3SEFS24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
cds3UAS15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3UAS15MinThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3UAS15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3UAS15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
cds3UAS24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3UAS24HrThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3UAS24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3UAS24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
cds3CCV15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3CCV15MinThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3CCV15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3CCV15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared. Not for E3.')
cds3CCV24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3CCV24HrThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3CCV24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3CCV24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval. Not for E3.')
cds3CES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3CES15MinThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3CES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3CES15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared. Not for E3.')
cds3CES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3CES24HrThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3CES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3CES24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. Not for E3.')
cds3CSES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3CSES15MinThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3CSES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3CSES15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared. Not for E3.')
cds3CSES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3CSES24HrThreshold.setReference('RFC2496')
if mibBuilder.loadTexts: cds3CSES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3CSES24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. Not for E3.')
cds3LSES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3LSES15MinThreshold.setReference('Bellcore TR-TSV-000773')
if mibBuilder.loadTexts: cds3LSES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3LSES15MinThreshold.setDescription('Used to set the 15 minute threshold for LSES(Line Severely Errored Seconds). The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
cds3LSES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3LSES24HrThreshold.setReference('Bellcore TR-TSV-000773')
if mibBuilder.loadTexts: cds3LSES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3LSES24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared.')
cds3LineStatisticalAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3LineStatisticalAlarmState.setStatus('current')
if mibBuilder.loadTexts: cds3LineStatisticalAlarmState.setDescription('This is a bitmap of the DS3 Line Statistical alarms. It is represented as a sum where value 2^(N-1) is added to the sum if threshold corresponding to bit N is exceeded. Zero indicates no alarms. Itemized below are the individual alarm bits: BitPosition Alarm ----------- ----- 1 PES current 15 minute threshold exceeded 2 PES 24 hour threshold exceeded 3 PSES current 15 minute threshold exceeded 4 PSES 24 hour threshold exceeded 5 SEFS current 15 minute threshold exceeded 6 SEFS 24 hour threshold exceeded 7 UAS current 15 minute threshold exceeded 8 UAS 24 hour threshold exceeded 9 LCV current 15 minute threshold exceeded 10 LCV 24 hour threshold exceeded 11 PCV current 15 minute threshold exceeded 12 PCV 24 hour threshold exceeded 13 LES current 15 minute threshold exceeded 14 LES 24 hour threshold exceeded 15 CCV current 15 minute threshold exceeded 16 CCV 24 hour threshold exceeded 17 CES current 15 minute threshold exceeded 18 CES 24 hour threshold exceeded 19 CSES current 15 minute threshold exceeded 20 CSES 24 hour threshold exceeded 21 LSES current 15 minute threshold exceeded 22 LSES 24 hour threshold exceeded')
cds3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 1), )
if mibBuilder.loadTexts: cds3StatsTable.setStatus('current')
if mibBuilder.loadTexts: cds3StatsTable.setDescription('T3/E3 Statistics table. This table maintains the number of times the line encountered Loss of Signal(LOS), out of frame(LOF), Alarm Indication signals(AIS), Remote alarm indications(RAI), C-bit coding violations(CCV), Framing Errors(FE), from the time it is up. Line fails and goes down as a result of failures. When the line is brought back up again by the user the error statistics are cleared.')
cds3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cds3StatsEntry.setStatus('current')
if mibBuilder.loadTexts: cds3StatsEntry.setDescription('An entry in the T3/E3 Statistics table. Statistics are gathered for each existing T3/E3 line. An entry is created automatically for each T3/E3 line that is activated.')
cds3RcvLOSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3RcvLOSCount.setStatus('current')
if mibBuilder.loadTexts: cds3RcvLOSCount.setDescription('The number of times Loss of Signal was detected with or without integrating to LOS alarm.')
cds3RcvOOFCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3RcvOOFCount.setStatus('current')
if mibBuilder.loadTexts: cds3RcvOOFCount.setDescription('The number of times Out of Frame was detected with or without integrating to OOF alarm.')
cds3RAICount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3RAICount.setStatus('current')
if mibBuilder.loadTexts: cds3RAICount.setDescription('The number of timesRemote Alarm Indication was detected with or without integrating to RAI alarm.')
cds3CCVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3CCVCount.setStatus('current')
if mibBuilder.loadTexts: cds3CCVCount.setDescription('The counter associated with the number of C-Bit Coding Violations encountered by a T3/E3 interface.')
cds3FECount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3FECount.setStatus('current')
if mibBuilder.loadTexts: cds3FECount.setDescription('The number of Framing Errors encountered by a T3/E3 interface.')
cds3EXZSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3EXZSCount.setReference('RFC2496 Section 2.4.1.')
if mibBuilder.loadTexts: cds3EXZSCount.setStatus('current')
if mibBuilder.loadTexts: cds3EXZSCount.setDescription('The number of Excessive Zeros(EXZ) by a T3/E3 interface. An EXZ is the occurrence of any string of zeros having length equal to or greater than 3 for B3ZS, or any string of zeros having length greater than 4 for HDB3.')
cds3LCVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3LCVCount.setReference('RFC2496 Section 2.4.1.')
if mibBuilder.loadTexts: cds3LCVCount.setStatus('current')
if mibBuilder.loadTexts: cds3LCVCount.setDescription('The count of both BPVs(Bipolar Violations) and EXZs(Excessive Zeros) encountered by a T3/E3 interface.An EXZ increments the LCV by one regardless of the length of the zero string.')
cds3PCVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PCVCount.setReference('RFC2496 Section 2.4.1.')
if mibBuilder.loadTexts: cds3PCVCount.setStatus('current')
if mibBuilder.loadTexts: cds3PCVCount.setDescription('This is the count of P-bit Coding Violation(PCV) error event encountered by DS3 interface. For all DS3 applications, a coding violation error event is a P-bit Parity Error(PERR) event. The parity errors occur when the calculated parity in the information bits of the DS3 frame does not match up with an expected parity value.')
cds3CPECount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3CPECount.setStatus('current')
if mibBuilder.loadTexts: cds3CPECount.setDescription('The number of C-bit parity errors(CPERR) on a DS3 interface. This value is calculated over noninformation bits in the DS3 frame.')
cds3FEBECount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3FEBECount.setStatus('current')
if mibBuilder.loadTexts: cds3FEBECount.setDescription('The number of Far End Block Errors(FEBE) encountered by a T3/E3 interface.These include frame alignment errors, multiframe alignment errors, and C-bit parity errors. These errors are generated by the transmitter at the far end, and indicate that the transmitter,cabling or the upstream node is faulty.')
cds3RcvAISCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3RcvAISCount.setReference('RFC2496 Section 2.4.3.')
if mibBuilder.loadTexts: cds3RcvAISCount.setStatus('current')
if mibBuilder.loadTexts: cds3RcvAISCount.setDescription('The number of times Alarm Indication Signals(AIS) were detected. The AIS indicates that an upstream failure has been detected by the far end.')
cds3AlarmConfigPlcpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 2), )
if mibBuilder.loadTexts: cds3AlarmConfigPlcpTable.setStatus('current')
if mibBuilder.loadTexts: cds3AlarmConfigPlcpTable.setDescription('The ATM interface PLCP alarm configuration table. PLCP is a sublayer over the DS3 interface, that carries ATM cells.')
cds3AlarmConfigPlcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cds3AlarmConfigPlcpEntry.setStatus('current')
if mibBuilder.loadTexts: cds3AlarmConfigPlcpEntry.setDescription('An entry in the DS3 PLCP Alarm Configuration table. The entries contain parameters to configure DS3 PLCP error statistics thresholds, so that an alarm is raised whenever any threshold is exceeded. The entries are automatically created for active DS3 interfaces with Plcp framing enabled, with default values for objects.')
cds3PlcpStatisticalAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("minor", 1), ("major", 2), ("none", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3PlcpStatisticalAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpStatisticalAlarmSeverity.setDescription('This variable sets up the severity of PLCP Statistical alarm. So when PLCP Statistical alarm is detected the module will send the alarm with appropriate severity. A value of none(3) indicates that no alarm will be raised.')
cds3PlcpBip8CV15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3PlcpBip8CV15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpBip8CV15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
cds3PlcpBip8CV24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3PlcpBip8CV24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpBip8CV24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval.')
cds3PlcpBip8ES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3PlcpBip8ES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpBip8ES15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
cds3PlcpBip8ES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3PlcpBip8ES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpBip8ES24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval.')
cds3PlcpBip8SES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3PlcpBip8SES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpBip8SES15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
cds3PlcpBip8SES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3PlcpBip8SES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpBip8SES24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval.')
cds3PlcpSEFS15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3PlcpSEFS15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpSEFS15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
cds3PlcpSEFS24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3PlcpSEFS24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpSEFS24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval.')
cds3PlcpUAS15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3PlcpUAS15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpUAS15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
cds3PlcpUAS24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cds3PlcpUAS24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpUAS24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval.')
cds3AlarmPlcpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 2), )
if mibBuilder.loadTexts: cds3AlarmPlcpTable.setStatus('current')
if mibBuilder.loadTexts: cds3AlarmPlcpTable.setDescription('The Plcp interface alarm table. This table maintains the CV,ES,SES, SEFS and UAS for DS3 line with Plcp framing selected. Please refer to RFC2496 for description of these various error statistics.')
cds3AlarmPlcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cds3AlarmPlcpEntry.setStatus('current')
if mibBuilder.loadTexts: cds3AlarmPlcpEntry.setDescription('An entry in the DS3 Plcp Alarm table. Bucket statistics(15 minute and 24 hour interval statistics) are gathered for each existing DS3 line with PLCP frame format selected. An entry is created automatically and is indexed by the DS3 line number. ')
cds3PlcpLineAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpLineAlarmState.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpLineAlarmState.setDescription('This variable is a bitmap of the DS3 Line ALarms. It is represented as sum where value 2^(N-1) is added to the sum if alarm corresponding to bit N is exceeded. A value of zero for this object indicates no alarms. Itemized below are the individual bits: BitPosition Alarm ----------- ----- 1 Receiving RAI 2 Transmitting RAI 3 Receiving OOF 4 Near End Local Loopback in effect 5 Near End Remote Loopback in effect ')
cds3PlcpLineStatisticalAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpLineStatisticalAlarmState.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpLineStatisticalAlarmState.setDescription('This variable is a bitmap of the DS3 Plcp Line Statictical Alarms. It is represented as a sum, where value 2^(N-1) is added to the sum if threshold corresponding to bit N is exceeded. A value of zero for this object indicates no alarms. Itemized below are the individual alarm bits: BitPosition Alarm ----------- ----- 1 Bip8CV 15 minute threshold exceeded 2 Bip8CV 24 hour threshold exceeded 3 Bip8ES 15 minute threshold exceeded 4 Bip8ES 24 hour threshold exceeded 5 Bip8SES 15 minute threshold exceeded 6 Bip8SES 24 hour threshold exceeded 7 Plcp SEFS 15 minute threshold exceeded 8 Plcp SEFS 24 hour threshold exceeded 9 Plcp UAS 15 minute threshold exceeded 10 Plcp UAS 24 hour threshold exceeded')
cds3PlcpBip8CVCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpBip8CVCurrent.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpBip8CVCurrent.setDescription('The number of BIP-8 code violations (CV) encountered by the line in the current 15 minute period.')
cds3PlcpBip8CV24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpBip8CV24HrBucket.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpBip8CV24HrBucket.setDescription('The number of BIP-8 CVs encountered by the line in the last 24 hours.')
cds3PlcpBip8ESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpBip8ESCurrent.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpBip8ESCurrent.setDescription('The number of BIP-8 Errored Seconds(ES) encountered by the line in the current 15 minute period.')
cds3PlcpBip8ES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpBip8ES24HrBucket.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpBip8ES24HrBucket.setDescription('The number of BIP-8 ES encountered by the line in the last 24 hour.')
cds3PlcpBip8SESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpBip8SESCurrent.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpBip8SESCurrent.setDescription('The number of BIP-8 Severely Errored Seconds(ES) encountered by the line in the current 15 minute period.')
cds3PlcpBip8SES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpBip8SES24HrBucket.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpBip8SES24HrBucket.setDescription('The number of BIP-8 SES encountered by the line in the last 24 hour.')
cds3PlcpSEFSCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpSEFSCurrent.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpSEFSCurrent.setDescription('The number of BIP-8 Severely Errored Framing Seconds(SEFS) encountered by the line in the current 15-minute period.')
cds3PlcpSEFS24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpSEFS24HrBucket.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpSEFS24HrBucket.setDescription('The number of BIP-8 SEFS encountered by the line in the last 24 hour.')
cds3PlcpUASCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpUASCurrent.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpUASCurrent.setDescription('The number of Unavailable Seconds(UAS) encountered by the line in the current 15-minute period.')
cds3PlcpUAS24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpUAS24HrBucket.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpUAS24HrBucket.setDescription('The number of BIP-8 UAS encountered by the line in the last 24 hour.')
cds3PlcpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 2), )
if mibBuilder.loadTexts: cds3PlcpStatsTable.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpStatsTable.setDescription('T3 Plcp Statistics table. This table maintains the errors encountered by the T3 line with Plcp frame format selected, from the time the line is up.Line fails and goes down as a result of failures. When the line is brought back up again by the user after eliminating the error conditions, the statistics are cleared.')
cds3PlcpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cds3PlcpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpStatsEntry.setDescription('An entry in the T3 Plcp Stats table. Statistics are gathered for each existing T3 line with PLCP frame format selected. An entry is created automatically and is indexed by the T3 line number.')
cds3PlcpRcvBip8Count = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpRcvBip8Count.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpRcvBip8Count.setDescription('The number of of BIP-8 errors encountered by the line.')
cds3PlcpRcvOOFCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpRcvOOFCount.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpRcvOOFCount.setDescription('The number of times Out of Frame(OOF) was detected with or without integrating to OOF alarm.')
cds3PlcpRcvRAICount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpRcvRAICount.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpRcvRAICount.setDescription('The number of times Remote Alarm Indication(RAI) was detected with or without integrating to RAI alarm.')
cds3PlcpFECount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpFECount.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpFECount.setDescription('The number of Framing Errors detected.')
cds3PlcpFESecCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpFESecCount.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpFESecCount.setDescription('The number of Framing Error errored seconds.')
cds3PlcpSEFSecCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpSEFSecCount.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpSEFSecCount.setDescription('The number of Severely errored Framing error seconds.')
cds3PlcpFEBECount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpFEBECount.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpFEBECount.setDescription('The count of Far End Block Errors (FEBE) detected.')
cds3PlcpFEBESecCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpFEBESecCount.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpFEBESecCount.setDescription('The number of FEBE errored seconds.')
cds3PlcpSEFEBESecCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PlcpSEFEBESecCount.setStatus('current')
if mibBuilder.loadTexts: cds3PlcpSEFEBESecCount.setDescription('The number of Severely errored FEBE seconds.')
cds3IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 4), )
if mibBuilder.loadTexts: cds3IntervalTable.setStatus('current')
if mibBuilder.loadTexts: cds3IntervalTable.setDescription('The DS3 interface interval table.')
cds3IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DS3-MIB", "cds3IntervalNumber"))
if mibBuilder.loadTexts: cds3IntervalEntry.setStatus('current')
if mibBuilder.loadTexts: cds3IntervalEntry.setDescription('An entry in the T3/E3 current interval table.')
cds3IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3IntervalNumber.setStatus('current')
if mibBuilder.loadTexts: cds3IntervalNumber.setDescription('A number between 0 and 96, where 1 is the most recently completed 15 minute interval and 96 is the 15 minute interval completed 23 hours and 45 minutes prior to interval number 1. Interval number 0 refers to the current 15 minute data.')
cds3IntervalLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3IntervalLSESs.setStatus('current')
if mibBuilder.loadTexts: cds3IntervalLSESs.setDescription('The number of LSESs encountered by the line in 15 minute interval.')
cds3Current24HrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 5), )
if mibBuilder.loadTexts: cds3Current24HrTable.setStatus('current')
if mibBuilder.loadTexts: cds3Current24HrTable.setDescription('The DS3 interface current 24 hour table. This table contains counters for current 24 hour interval. Threshold on this counters are configured through cds3AlarmConfigTable table. 24 hour interval is aligned to wall clock.')
cds3Current24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cds3Current24HrEntry.setStatus('current')
if mibBuilder.loadTexts: cds3Current24HrEntry.setDescription("An entry in the T3/E3 current 24 hour counter table. The entries are automatically created for an ifType value of 'ds3'(30), when interface is made active.")
cds3LCVCurrent24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3LCVCurrent24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3LCVCurrent24Hr.setDescription('The number of LCVs encountered by the line since the start of current 24 hour period.')
cds3LESCurrent24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3LESCurrent24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3LESCurrent24Hr.setDescription('The number LESs encountered by the line since the start of current 24 hour period.')
cds3PCVCurrent24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PCVCurrent24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3PCVCurrent24Hr.setDescription('The number PCVs encountered by the line since the start of current 24 hour period.')
cds3PESCurrent24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PESCurrent24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3PESCurrent24Hr.setDescription('The number of PESs encountered by the line since the start of current 24 hour period.')
cds3PSESCurrent24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PSESCurrent24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3PSESCurrent24Hr.setDescription('The number of PSESs encountered by the line since the start of current 24 hour period.')
cds3SEFSCurrent24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3SEFSCurrent24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3SEFSCurrent24Hr.setDescription('The number of SEFSs encountered by the line since the start of the current 24 hour period.')
cds3UASCurrent24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3UASCurrent24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3UASCurrent24Hr.setDescription('The number of UASs encountered by the line since the start of current 24 hour period.')
cds3CCVCurrent24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3CCVCurrent24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3CCVCurrent24Hr.setDescription('The number CCVs encounterd by the line since the start of current 24 hour period.')
cds3CESCurrent24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3CESCurrent24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3CESCurrent24Hr.setDescription('The number of CESs encountered by the line since the start of current 24 hour period.')
cds3CSESCurrent24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3CSESCurrent24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3CSESCurrent24Hr.setDescription('The number of CSESs encountered by the line since th start of current 24 hour period.')
cds3LSESCurrent24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3LSESCurrent24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3LSESCurrent24Hr.setDescription('The number of LSESs (Line severedly errored seconds) encountered by the line since the start of current 24 hour period.')
cds3Previous24HrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 6), )
if mibBuilder.loadTexts: cds3Previous24HrTable.setStatus('current')
if mibBuilder.loadTexts: cds3Previous24HrTable.setDescription('The DS3 interface previous 24 hour table. This table contains counters for previous 24 hour interval. Implementation of this table is optional.')
cds3Previous24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cds3Previous24HrEntry.setStatus('current')
if mibBuilder.loadTexts: cds3Previous24HrEntry.setDescription('An entry in the T3/E3 current 24 hour counter table. The entries are automatically created for an ifType value of ds3(30), when interface is made active.')
cds3LCVPrevious24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3LCVPrevious24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3LCVPrevious24Hr.setDescription('The number of LCVs encountered by the line in the previous 24 hour period.')
cds3LESPrevious24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3LESPrevious24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3LESPrevious24Hr.setDescription('The number LESs encountered by the line in the previous 24 hour period.')
cds3PCVPrevious24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PCVPrevious24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3PCVPrevious24Hr.setDescription('The number PCVs encountered by the line in the previous 24 hour period.')
cds3PESPrevious24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PESPrevious24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3PESPrevious24Hr.setDescription('The number of PESs encountered by the line in the previous 24 hour period.')
cds3PSESPrevious24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3PSESPrevious24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3PSESPrevious24Hr.setDescription('The number of PSESs encountered by the line in the previous 24 hour period.')
cds3SEFSPrevious24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3SEFSPrevious24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3SEFSPrevious24Hr.setDescription('The number of SEFSs encountered by the line in the start of the current 24 hour period.')
cds3UASPrevious24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3UASPrevious24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3UASPrevious24Hr.setDescription('The number of UASs encountered by the line in the previous 24 hour period.')
cds3CCVPrevious24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3CCVPrevious24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3CCVPrevious24Hr.setDescription('The number CCVs encounterd by the line in the previous 24 hour period.')
cds3CESPrevious24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3CESPrevious24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3CESPrevious24Hr.setDescription('The number of CESs encountered by the line in the previous 24 hour period.')
cds3CSESPrevious24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3CSESPrevious24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3CSESPrevious24Hr.setDescription('The number of CSESs encountered by the line in the previous 24 hour period.')
cds3LSESPrevious24Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 132, 1, 3, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cds3LSESPrevious24Hr.setStatus('current')
if mibBuilder.loadTexts: cds3LSESPrevious24Hr.setDescription('The number of LSESs encountered by the line in the previous 24 hour period.')
ciscoDs3MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 132, 8))
ciscoDs3MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 132, 8, 1))
ciscoDs3MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 132, 8, 2))
ciscoDs3MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 132, 8, 1, 1)).setObjects(("CISCO-DS3-MIB", "ciscoDs3ConfMIBGroup"), ("CISCO-DS3-MIB", "cds3StatsMIBGroup"), ("CISCO-DS3-MIB", "ciscoDs3AlarmMIBGroup"), ("CISCO-DS3-MIB", "ciscoPlcpCounterMIBGroup"), ("CISCO-DS3-MIB", "ciscoDs3Previous24HrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs3MIBCompliance = ciscoDs3MIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoDs3MIBCompliance.setDescription('The Compliance statement for ciscoDs3 management group.')
ciscoDs3ConfMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 132, 8, 2, 1)).setObjects(("CISCO-DS3-MIB", "cds3LineType"), ("CISCO-DS3-MIB", "cds3LineAIScBitsCheck"), ("CISCO-DS3-MIB", "cds3LineRcvFEACValidation"), ("CISCO-DS3-MIB", "cds3LineOOFCriteria"), ("CISCO-DS3-MIB", "cds3TraceToTransmit"), ("CISCO-DS3-MIB", "cds3TraceToExpect"), ("CISCO-DS3-MIB", "cds3TraceAlarm"), ("CISCO-DS3-MIB", "cds3InternalEqualizer"), ("CISCO-DS3-MIB", "cds3NearEndLineLoopbackStatus"), ("CISCO-DS3-MIB", "cds3FarEndLineLoopbackStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs3ConfMIBGroup = ciscoDs3ConfMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDs3ConfMIBGroup.setDescription('Collection of DS3/E3 line related configuration parameters.')
cds3StatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 132, 8, 2, 2)).setObjects(("CISCO-DS3-MIB", "cds3RcvLOSCount"), ("CISCO-DS3-MIB", "cds3RcvOOFCount"), ("CISCO-DS3-MIB", "cds3RAICount"), ("CISCO-DS3-MIB", "cds3CCVCount"), ("CISCO-DS3-MIB", "cds3FECount"), ("CISCO-DS3-MIB", "cds3EXZSCount"), ("CISCO-DS3-MIB", "cds3LCVCount"), ("CISCO-DS3-MIB", "cds3PCVCount"), ("CISCO-DS3-MIB", "cds3CPECount"), ("CISCO-DS3-MIB", "cds3FEBECount"), ("CISCO-DS3-MIB", "cds3RcvAISCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cds3StatsMIBGroup = cds3StatsMIBGroup.setStatus('current')
if mibBuilder.loadTexts: cds3StatsMIBGroup.setDescription('Collection of DS3/E3 line related real time counters.')
ciscoDs3AlarmMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 132, 8, 2, 3)).setObjects(("CISCO-DS3-MIB", "cds3NEAlarmUpCount"), ("CISCO-DS3-MIB", "cds3NEAlarmDownCount"), ("CISCO-DS3-MIB", "cds3NEAlarmThreshold"), ("CISCO-DS3-MIB", "cds3FEAlarmUpCount"), ("CISCO-DS3-MIB", "cds3FEAlarmDownCount"), ("CISCO-DS3-MIB", "cds3FEAlarmThreshold"), ("CISCO-DS3-MIB", "cds3StatisticalAlarmSeverity"), ("CISCO-DS3-MIB", "cds3LCV15MinThreshold"), ("CISCO-DS3-MIB", "cds3LCV24HrThreshold"), ("CISCO-DS3-MIB", "cds3LES15MinThreshold"), ("CISCO-DS3-MIB", "cds3LES24HrThreshold"), ("CISCO-DS3-MIB", "cds3PCV15MinThreshold"), ("CISCO-DS3-MIB", "cds3PCV24HrThreshold"), ("CISCO-DS3-MIB", "cds3PES15MinThreshold"), ("CISCO-DS3-MIB", "cds3PES24HrThreshold"), ("CISCO-DS3-MIB", "cds3PSES15MinThreshold"), ("CISCO-DS3-MIB", "cds3PSES24HrThreshold"), ("CISCO-DS3-MIB", "cds3SEFS15MinThreshold"), ("CISCO-DS3-MIB", "cds3SEFS24HrThreshold"), ("CISCO-DS3-MIB", "cds3UAS15MinThreshold"), ("CISCO-DS3-MIB", "cds3UAS24HrThreshold"), ("CISCO-DS3-MIB", "cds3CCV15MinThreshold"), ("CISCO-DS3-MIB", "cds3CCV24HrThreshold"), ("CISCO-DS3-MIB", "cds3CES15MinThreshold"), ("CISCO-DS3-MIB", "cds3CES24HrThreshold"), ("CISCO-DS3-MIB", "cds3CSES15MinThreshold"), ("CISCO-DS3-MIB", "cds3CSES24HrThreshold"), ("CISCO-DS3-MIB", "cds3LSES15MinThreshold"), ("CISCO-DS3-MIB", "cds3LSES24HrThreshold"), ("CISCO-DS3-MIB", "cds3LineStatisticalAlarmState"), ("CISCO-DS3-MIB", "cds3IntervalNumber"), ("CISCO-DS3-MIB", "cds3IntervalLSESs"), ("CISCO-DS3-MIB", "cds3LCVCurrent24Hr"), ("CISCO-DS3-MIB", "cds3LESCurrent24Hr"), ("CISCO-DS3-MIB", "cds3PCVCurrent24Hr"), ("CISCO-DS3-MIB", "cds3PESCurrent24Hr"), ("CISCO-DS3-MIB", "cds3PSESCurrent24Hr"), ("CISCO-DS3-MIB", "cds3SEFSCurrent24Hr"), ("CISCO-DS3-MIB", "cds3UASCurrent24Hr"), ("CISCO-DS3-MIB", "cds3CCVCurrent24Hr"), ("CISCO-DS3-MIB", "cds3CESCurrent24Hr"), ("CISCO-DS3-MIB", "cds3CSESCurrent24Hr"), ("CISCO-DS3-MIB", "cds3LSESCurrent24Hr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs3AlarmMIBGroup = ciscoDs3AlarmMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDs3AlarmMIBGroup.setDescription('Collection of DS3/E3 related interval counters and threshold parameters.')
ciscoPlcpCounterMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 132, 8, 2, 4)).setObjects(("CISCO-DS3-MIB", "cds3PlcpRcvBip8Count"), ("CISCO-DS3-MIB", "cds3PlcpRcvOOFCount"), ("CISCO-DS3-MIB", "cds3PlcpRcvRAICount"), ("CISCO-DS3-MIB", "cds3PlcpFECount"), ("CISCO-DS3-MIB", "cds3PlcpFESecCount"), ("CISCO-DS3-MIB", "cds3PlcpSEFSecCount"), ("CISCO-DS3-MIB", "cds3PlcpFEBECount"), ("CISCO-DS3-MIB", "cds3PlcpFEBESecCount"), ("CISCO-DS3-MIB", "cds3PlcpSEFEBESecCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPlcpCounterMIBGroup = ciscoPlcpCounterMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoPlcpCounterMIBGroup.setDescription('Collection of PLCP related real time counters.')
ciscoPlcpAlarmMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 132, 8, 2, 5)).setObjects(("CISCO-DS3-MIB", "cds3PlcpStatisticalAlarmSeverity"), ("CISCO-DS3-MIB", "cds3PlcpBip8CV15MinThreshold"), ("CISCO-DS3-MIB", "cds3PlcpBip8CV24HrThreshold"), ("CISCO-DS3-MIB", "cds3PlcpBip8ES15MinThreshold"), ("CISCO-DS3-MIB", "cds3PlcpBip8ES24HrThreshold"), ("CISCO-DS3-MIB", "cds3PlcpBip8SES15MinThreshold"), ("CISCO-DS3-MIB", "cds3PlcpBip8SES24HrThreshold"), ("CISCO-DS3-MIB", "cds3PlcpSEFS15MinThreshold"), ("CISCO-DS3-MIB", "cds3PlcpSEFS24HrThreshold"), ("CISCO-DS3-MIB", "cds3PlcpUAS15MinThreshold"), ("CISCO-DS3-MIB", "cds3PlcpUAS24HrThreshold"), ("CISCO-DS3-MIB", "cds3PlcpLineAlarmState"), ("CISCO-DS3-MIB", "cds3PlcpLineStatisticalAlarmState"), ("CISCO-DS3-MIB", "cds3PlcpBip8CVCurrent"), ("CISCO-DS3-MIB", "cds3PlcpBip8CV24HrBucket"), ("CISCO-DS3-MIB", "cds3PlcpBip8ESCurrent"), ("CISCO-DS3-MIB", "cds3PlcpBip8ES24HrBucket"), ("CISCO-DS3-MIB", "cds3PlcpBip8SESCurrent"), ("CISCO-DS3-MIB", "cds3PlcpBip8SES24HrBucket"), ("CISCO-DS3-MIB", "cds3PlcpSEFSCurrent"), ("CISCO-DS3-MIB", "cds3PlcpSEFS24HrBucket"), ("CISCO-DS3-MIB", "cds3PlcpUASCurrent"), ("CISCO-DS3-MIB", "cds3PlcpUAS24HrBucket"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPlcpAlarmMIBGroup = ciscoPlcpAlarmMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoPlcpAlarmMIBGroup.setDescription('Collection of PLCP related interval counters and threshold parameters.')
ciscoDs3Previous24HrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 132, 8, 2, 6)).setObjects(("CISCO-DS3-MIB", "cds3LCVPrevious24Hr"), ("CISCO-DS3-MIB", "cds3LESPrevious24Hr"), ("CISCO-DS3-MIB", "cds3PCVPrevious24Hr"), ("CISCO-DS3-MIB", "cds3PESPrevious24Hr"), ("CISCO-DS3-MIB", "cds3PSESPrevious24Hr"), ("CISCO-DS3-MIB", "cds3SEFSPrevious24Hr"), ("CISCO-DS3-MIB", "cds3UASPrevious24Hr"), ("CISCO-DS3-MIB", "cds3CCVPrevious24Hr"), ("CISCO-DS3-MIB", "cds3CESPrevious24Hr"), ("CISCO-DS3-MIB", "cds3CSESPrevious24Hr"), ("CISCO-DS3-MIB", "cds3LSESPrevious24Hr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDs3Previous24HrGroup = ciscoDs3Previous24HrGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDs3Previous24HrGroup.setDescription('A collection DS3/E3 related previous 24 hour counters.')
mibBuilder.exportSymbols("CISCO-DS3-MIB", cds3StatsEntry=cds3StatsEntry, cds3LESCurrent24Hr=cds3LESCurrent24Hr, cds3PlcpBip8SES15MinThreshold=cds3PlcpBip8SES15MinThreshold, cds3PSESPrevious24Hr=cds3PSESPrevious24Hr, cds3ConfigTable=cds3ConfigTable, cds3PES15MinThreshold=cds3PES15MinThreshold, cds3RcvOOFCount=cds3RcvOOFCount, cds3PlcpUASCurrent=cds3PlcpUASCurrent, cds3IntervalTable=cds3IntervalTable, cds3LES24HrThreshold=cds3LES24HrThreshold, cds3FECount=cds3FECount, cds3FarEndLineLoopbackStatus=cds3FarEndLineLoopbackStatus, cds3TraceToExpect=cds3TraceToExpect, cds3ConfigEntry=cds3ConfigEntry, cds3UAS15MinThreshold=cds3UAS15MinThreshold, cds3AlarmConfigPlcpTable=cds3AlarmConfigPlcpTable, cds3PlcpSEFSecCount=cds3PlcpSEFSecCount, cds3CPECount=cds3CPECount, cds3PlcpFEBECount=cds3PlcpFEBECount, cds3UASPrevious24Hr=cds3UASPrevious24Hr, cds3PlcpBip8CV24HrThreshold=cds3PlcpBip8CV24HrThreshold, cds3PlcpSEFSCurrent=cds3PlcpSEFSCurrent, cds3NEAlarmUpCount=cds3NEAlarmUpCount, cds3PlcpUAS15MinThreshold=cds3PlcpUAS15MinThreshold, cds3PlcpRcvBip8Count=cds3PlcpRcvBip8Count, cds3Previous24HrTable=cds3Previous24HrTable, cds3IntervalLSESs=cds3IntervalLSESs, cds3PlcpStatisticalAlarmSeverity=cds3PlcpStatisticalAlarmSeverity, cds3IntervalEntry=cds3IntervalEntry, cds3LCVCurrent24Hr=cds3LCVCurrent24Hr, cds3PlcpBip8ES24HrBucket=cds3PlcpBip8ES24HrBucket, cds3LineStatisticalAlarmState=cds3LineStatisticalAlarmState, cds3SEFSCurrent24Hr=cds3SEFSCurrent24Hr, cds3CCVCount=cds3CCVCount, cds3PlcpSEFEBESecCount=cds3PlcpSEFEBESecCount, cds3PlcpBip8ES15MinThreshold=cds3PlcpBip8ES15MinThreshold, cds3PlcpBip8ES24HrThreshold=cds3PlcpBip8ES24HrThreshold, cds3TraceAlarm=cds3TraceAlarm, cds3StatsTable=cds3StatsTable, cds3CES15MinThreshold=cds3CES15MinThreshold, ciscoDs3MIB=ciscoDs3MIB, cds3LSES15MinThreshold=cds3LSES15MinThreshold, cds3PSES24HrThreshold=cds3PSES24HrThreshold, cds3LineAIScBitsCheck=cds3LineAIScBitsCheck, cds3PSESCurrent24Hr=cds3PSESCurrent24Hr, ciscoDs3MIBConformance=ciscoDs3MIBConformance, cds3PlcpBip8SESCurrent=cds3PlcpBip8SESCurrent, ciscoDs3Previous24HrGroup=ciscoDs3Previous24HrGroup, cds3CSES24HrThreshold=cds3CSES24HrThreshold, cds3EXZSCount=cds3EXZSCount, cds3PlcpSEFS24HrBucket=cds3PlcpSEFS24HrBucket, cds3InternalEqualizer=cds3InternalEqualizer, cds3CESCurrent24Hr=cds3CESCurrent24Hr, cds3TraceToTransmit=cds3TraceToTransmit, cds3LCVPrevious24Hr=cds3LCVPrevious24Hr, cds3CESPrevious24Hr=cds3CESPrevious24Hr, cds3PlcpBip8CV15MinThreshold=cds3PlcpBip8CV15MinThreshold, cds3LESPrevious24Hr=cds3LESPrevious24Hr, cds3PlcpFECount=cds3PlcpFECount, ciscoDs3MIBGroups=ciscoDs3MIBGroups, cds3PCV15MinThreshold=cds3PCV15MinThreshold, cds3NEAlarmThreshold=cds3NEAlarmThreshold, cds3UASCurrent24Hr=cds3UASCurrent24Hr, cds3LineType=cds3LineType, cds3PlcpUAS24HrBucket=cds3PlcpUAS24HrBucket, cds3PlcpRcvRAICount=cds3PlcpRcvRAICount, cds3PESPrevious24Hr=cds3PESPrevious24Hr, ciscoDs3MIBCompliances=ciscoDs3MIBCompliances, cds3PlcpRcvOOFCount=cds3PlcpRcvOOFCount, cds3StatisticalAlarmSeverity=cds3StatisticalAlarmSeverity, cds3PlcpBip8SES24HrBucket=cds3PlcpBip8SES24HrBucket, cds3RAICount=cds3RAICount, cds3CSES15MinThreshold=cds3CSES15MinThreshold, cds3CES24HrThreshold=cds3CES24HrThreshold, cds3SEFS24HrThreshold=cds3SEFS24HrThreshold, cds3FEAlarmThreshold=cds3FEAlarmThreshold, cds3AlarmConfig=cds3AlarmConfig, cds3FEAlarmUpCount=cds3FEAlarmUpCount, cds3IntervalNumber=cds3IntervalNumber, cds3LCV24HrThreshold=cds3LCV24HrThreshold, cds3PES24HrThreshold=cds3PES24HrThreshold, cds3RcvLOSCount=cds3RcvLOSCount, cds3SEFSPrevious24Hr=cds3SEFSPrevious24Hr, cds3Current24HrTable=cds3Current24HrTable, ciscoDs3AlarmMIBGroup=ciscoDs3AlarmMIBGroup, cds3PlcpBip8SES24HrThreshold=cds3PlcpBip8SES24HrThreshold, cds3CCVCurrent24Hr=cds3CCVCurrent24Hr, ciscoPlcpCounterMIBGroup=ciscoPlcpCounterMIBGroup, cds3PlcpSEFS24HrThreshold=cds3PlcpSEFS24HrThreshold, cds3UAS24HrThreshold=cds3UAS24HrThreshold, cds3Current24HrEntry=cds3Current24HrEntry, cds3CSESCurrent24Hr=cds3CSESCurrent24Hr, cds3LineRcvFEACValidation=cds3LineRcvFEACValidation, cds3LES15MinThreshold=cds3LES15MinThreshold, cds3PSES15MinThreshold=cds3PSES15MinThreshold, cds3CCV15MinThreshold=cds3CCV15MinThreshold, cds3LCVCount=cds3LCVCount, cds3Previous24HrEntry=cds3Previous24HrEntry, cds3LSES24HrThreshold=cds3LSES24HrThreshold, cds3PlcpUAS24HrThreshold=cds3PlcpUAS24HrThreshold, cds3AlarmConfigEntry=cds3AlarmConfigEntry, cds3PlcpLineStatisticalAlarmState=cds3PlcpLineStatisticalAlarmState, cds3PlcpFESecCount=cds3PlcpFESecCount, cds3CCV24HrThreshold=cds3CCV24HrThreshold, cds3PlcpSEFS15MinThreshold=cds3PlcpSEFS15MinThreshold, cds3AlarmPlcpTable=cds3AlarmPlcpTable, cds3LCV15MinThreshold=cds3LCV15MinThreshold, cds3PlcpBip8CV24HrBucket=cds3PlcpBip8CV24HrBucket, cds3PCV24HrThreshold=cds3PCV24HrThreshold, cds3AlarmPlcpEntry=cds3AlarmPlcpEntry, cds3RcvAISCount=cds3RcvAISCount, cds3PlcpBip8CVCurrent=cds3PlcpBip8CVCurrent, cds3PlcpStatsEntry=cds3PlcpStatsEntry, ciscoPlcpAlarmMIBGroup=ciscoPlcpAlarmMIBGroup, cds3PlcpStatsTable=cds3PlcpStatsTable, cds3PlcpFEBESecCount=cds3PlcpFEBESecCount, cds3NearEndLineLoopbackStatus=cds3NearEndLineLoopbackStatus, cds3PCVCurrent24Hr=cds3PCVCurrent24Hr, cds3StatsMIBGroup=cds3StatsMIBGroup, cds3AlarmConfigTable=cds3AlarmConfigTable, cds3CSESPrevious24Hr=cds3CSESPrevious24Hr, ciscoDs3ConfMIBGroup=ciscoDs3ConfMIBGroup, cds3FEAlarmDownCount=cds3FEAlarmDownCount, ciscoDs3MIBObjects=ciscoDs3MIBObjects, cds3LSESCurrent24Hr=cds3LSESCurrent24Hr, cds3FEBECount=cds3FEBECount, cds3PCVPrevious24Hr=cds3PCVPrevious24Hr, PYSNMP_MODULE_ID=ciscoDs3MIB, cds3LineOOFCriteria=cds3LineOOFCriteria, cds3PESCurrent24Hr=cds3PESCurrent24Hr, cds3LSESPrevious24Hr=cds3LSESPrevious24Hr, cds3PlcpBip8ESCurrent=cds3PlcpBip8ESCurrent, cds3Config=cds3Config, cds3SEFS15MinThreshold=cds3SEFS15MinThreshold, cds3PCVCount=cds3PCVCount, cds3Stats=cds3Stats, cds3NEAlarmDownCount=cds3NEAlarmDownCount, cds3CCVPrevious24Hr=cds3CCVPrevious24Hr, cds3Alarm=cds3Alarm, ciscoDs3MIBCompliance=ciscoDs3MIBCompliance, cds3PlcpLineAlarmState=cds3PlcpLineAlarmState, cds3AlarmConfigPlcpEntry=cds3AlarmConfigPlcpEntry)
