#
# PySNMP MIB module EXTREME-MPLS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXTREME-MPLS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:08:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
extremeAgent, = mibBuilder.importSymbols("EXTREME-BASE-MIB", "extremeAgent")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
MplsTunnelIndex, MplsTunnelInstanceIndex, MplsExtendedTunnelId, MplsLdpIdentifier = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsTunnelIndex", "MplsTunnelInstanceIndex", "MplsExtendedTunnelId", "MplsLdpIdentifier")
PwOperStatusTC, PwIndexType, PwStatus = mibBuilder.importSymbols("PW-TC-STD-MIB", "PwOperStatusTC", "PwIndexType", "PwStatus")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, ModuleIdentity, Gauge32, iso, ObjectIdentity, Counter64, Unsigned32, NotificationType, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "Counter64", "Unsigned32", "NotificationType", "Counter32", "Bits")
TextualConvention, DisplayString, TruthValue, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "TimeStamp")
VPNIdOrZero, = mibBuilder.importSymbols("VPN-TC-STD-MIB", "VPNIdOrZero")
extremeMplsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1916, 1, 37))
if mibBuilder.loadTexts: extremeMplsMIB.setLastUpdated('201006280000Z')
if mibBuilder.loadTexts: extremeMplsMIB.setOrganization('Extreme Networks, Inc.')
if mibBuilder.loadTexts: extremeMplsMIB.setContactInfo('www.extremenetworks.com')
if mibBuilder.loadTexts: extremeMplsMIB.setDescription('Extreme extensions to mplsTeStdMIB')
extremeMplsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 37, 0))
extremeMplsScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1))
extremeVplsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 37, 3))
extremeL2VpnMplsNotificationHandler = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 37, 4))
class IndexInteger(TextualConvention, Unsigned32):
    description = 'An integer which may be used as a table index.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

extremePwUpDownNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePwUpDownNotificationEnable.setReference('See also [RFC3413] for explanation that notifications are under the ultimate control of the MIB module in this document.')
if mibBuilder.loadTexts: extremePwUpDownNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: extremePwUpDownNotificationEnable.setDescription('If this object is set to true(1), then it enables the emission of pwUp and pwDown notifications; otherwise these notifications are not emitted.')
extremePwDeletedNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePwDeletedNotificationEnable.setReference('See also [RFC3413] for explanation that notifications are under the ultimate control of the MIB module in this document.')
if mibBuilder.loadTexts: extremePwDeletedNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: extremePwDeletedNotificationEnable.setDescription('If this object is set to true(1), then it enables the emission of pwDeleted notification; otherwise this notification is not emitted.')
extremePwNotificationMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePwNotificationMaxRate.setStatus('current')
if mibBuilder.loadTexts: extremePwNotificationMaxRate.setDescription('This variable indicates the maximum number of notifications issued per second. If events occur more rapidly, the implementation may simply fail to emit these notifications during that period, or may queue them until an appropriate time. A value of 0 means no throttling is applied and events may be notified at the rate at which they occur.')
extremePwNotificationPwIndex = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 8), PwIndexType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremePwNotificationPwIndex.setStatus('current')
if mibBuilder.loadTexts: extremePwNotificationPwIndex.setDescription('This variable indicates the index of the pseudowire that either went up, down, or was deleted as reported by the corresponding notification. To obtain further information regarding the pseudowire, the network administrator should look up the corresponding pseudowire entry in pwTable (RFC 5601).')
extremePwNotificationPwOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 9), PwOperStatusTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremePwNotificationPwOperStatus.setStatus('current')
if mibBuilder.loadTexts: extremePwNotificationPwOperStatus.setDescription('This variable is used to report the value of pwOperStatus in pwTable (RFC 5601) associated with the pseudowire that went up or down.')
extremePwNotificationPeerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 10), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremePwNotificationPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: extremePwNotificationPeerAddrType.setDescription('Denotes the address type of the peer node.')
extremePwNotificationPeerAddr = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 11), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremePwNotificationPeerAddr.setStatus('current')
if mibBuilder.loadTexts: extremePwNotificationPeerAddr.setDescription('This object contains the value of the peer node address.')
extremeMplsNotifTunnelIndex = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 12), MplsTunnelIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeMplsNotifTunnelIndex.setReference('1. RSVP-TE: Extensions to RSVP for LSP Tunnels, Awduche et al, RFC 3209 </rfcs/rfc3209.html>, December 2001 2. Constraint-Based LSP Setup using LDP, Jamoussi (Editor), RFC 3212 </rfcs/rfc3212.html>, January 2002 3. MPLS Traffic Engineering (TE) Management Information Base (MIB). http://www.faqs.org/rfcs/rfc3812.html.')
if mibBuilder.loadTexts: extremeMplsNotifTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: extremeMplsNotifTunnelIndex.setDescription('Uniquely identifies a set of tunnel instances between a pair of ingress and egress LSRs. Contains part of the index of a te tunnel that underwent state change. The same tunnel can also be looked up in the te mib.')
extremeMplsNotifTunnelInstance = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 13), MplsTunnelInstanceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeMplsNotifTunnelInstance.setStatus('current')
if mibBuilder.loadTexts: extremeMplsNotifTunnelInstance.setDescription('Uniquely identifies a particular instance of a tunnel between a pair of ingress and egress LSRs.')
extremeMplsNotifTunnelIngressLSRId = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 14), MplsExtendedTunnelId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeMplsNotifTunnelIngressLSRId.setStatus('current')
if mibBuilder.loadTexts: extremeMplsNotifTunnelIngressLSRId.setDescription('Identity of the ingress LSR associated with this tunnel instance.')
extremeMplsNotifTunnelEgressLSRId = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 15), MplsExtendedTunnelId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeMplsNotifTunnelEgressLSRId.setStatus('current')
if mibBuilder.loadTexts: extremeMplsNotifTunnelEgressLSRId.setDescription('Identity of the egress LSR associated with this tunnel instance.')
extremeMplsNotifTunnelAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeMplsNotifTunnelAdminStatus.setStatus('current')
if mibBuilder.loadTexts: extremeMplsNotifTunnelAdminStatus.setDescription('Reports the desired operational status of this tunnel.')
extremeMplsNotifTunnelOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeMplsNotifTunnelOperStatus.setStatus('current')
if mibBuilder.loadTexts: extremeMplsNotifTunnelOperStatus.setDescription('Reports the actual operational status of this tunnel, which is typically but not limited to, a function of the state of individual segments of this tunnel.')
extremeMplsNotifLdpEntityLdpId = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 18), MplsLdpIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeMplsNotifLdpEntityLdpId.setReference('1. RFC3036: LDP Specification, Section on LDP Identifiers. 2. RFC3815: Definitions of Managed Objects for the Multiprotocol Label Switching (MPLS), Label Distribution Protocol (LDP).')
if mibBuilder.loadTexts: extremeMplsNotifLdpEntityLdpId.setStatus('current')
if mibBuilder.loadTexts: extremeMplsNotifLdpEntityLdpId.setDescription('The LDP identifier. This is the primary index to identify a row in the mplsLdpEntityTable (RFC 3815).')
extremeMplsNotifLdpEntityIndex = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 19), IndexInteger()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeMplsNotifLdpEntityIndex.setStatus('current')
if mibBuilder.loadTexts: extremeMplsNotifLdpEntityIndex.setDescription('This index is used as a secondary index to uniquely identify a row in the mplsLdpEntityTable (RFC 3815). This object is meaningful to some but not all, LDP implementations.')
extremeMplsNotifLdpPeerLdpId = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 20), MplsLdpIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeMplsNotifLdpPeerLdpId.setReference('1. RFC3036: LDP Specification, Section on LDP Identifiers. 2. RFC3815: Definitions of Managed Objects for LDP.')
if mibBuilder.loadTexts: extremeMplsNotifLdpPeerLdpId.setStatus('current')
if mibBuilder.loadTexts: extremeMplsNotifLdpPeerLdpId.setDescription('The LDP identifier of this LDP Peer.')
extremeMplsNotifLdpSessionState = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nonexistent", 1), ("initialized", 2), ("openrec", 3), ("opensent", 4), ("operational", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeMplsNotifLdpSessionState.setReference('1. RFC3036: LDP Specification, Section 2.5.4, Initialization State Machine. 2. RFC3815: Definitions of Managed Objects for LDP.')
if mibBuilder.loadTexts: extremeMplsNotifLdpSessionState.setStatus('current')
if mibBuilder.loadTexts: extremeMplsNotifLdpSessionState.setDescription('The current state of the session, all of the states 1 to 5 are based on the state machine for session negotiation behavior.')
extremeMplsNotifLdpSessionDiscontinuityTime = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 22), TimeStamp()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeMplsNotifLdpSessionDiscontinuityTime.setReference('1. RFC3036: LDP Specification, Section 2.5.4, Initialization State Machine. 2. RFC3815: Definitions of Managed Objects for LDP.')
if mibBuilder.loadTexts: extremeMplsNotifLdpSessionDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: extremeMplsNotifLdpSessionDiscontinuityTime.setDescription('The initial value of this object is the value of sysUpTime when the entry was created in this table. Subsequent notifications report the time when the session between a given Entity and Peer goes away or a new session is established.')
extremeVplsNotifConfigIndex = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeVplsNotifConfigIndex.setReference('vplsGenericDraft01MIB: Generic managed object definitions for Virtual Private LAN Services as in [L2VPN-VPLS-LDP] and [L2VPN-VPLS-BGP] The L2VPN Working Group (email distribution l2vpn@ietf.org, http://www.ietf.org/html.charters/l2vpn-charter.html)')
if mibBuilder.loadTexts: extremeVplsNotifConfigIndex.setStatus('current')
if mibBuilder.loadTexts: extremeVplsNotifConfigIndex.setDescription('Unique index for the conceptual row identifying a VPLS service in the vplsConfigTable.')
extremeVplsNotifConfigVpnId = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 24), VPNIdOrZero()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeVplsNotifConfigVpnId.setStatus('current')
if mibBuilder.loadTexts: extremeVplsNotifConfigVpnId.setDescription('This objects indicates the IEEE 802-1990 VPN ID of the associated VPLS service. This object has the same value as vplsConfigVpnId in the vplsConfigTable for an index value equal to extremeVplsNotifConfigIndex sent in the notification.')
extremeVplsNotifConfigAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeVplsNotifConfigAdminStatus.setStatus('current')
if mibBuilder.loadTexts: extremeVplsNotifConfigAdminStatus.setDescription('The administrative state of the VPLS service. This object has the same value as vplsConfigAdminStatus in the vplsConfigTable for an index value equal to extremeVplsNotifConfigIndex sent in the notification.')
extremeVplsNotifStatusOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("degraded", 2), ("down", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: extremeVplsNotifStatusOperStatus.setStatus('current')
if mibBuilder.loadTexts: extremeVplsNotifStatusOperStatus.setDescription('The current operational state of this VPLS Service. A value of up(1) indicates that all pseudo-wires for this vpls are up and the attachment circuit is up. A value of degraded(2) indicates that at least one pseudo-wires for this vpls is up and the attachment circuit is up. A value of down(3) indicates that all pseudo-wires for this vpls are down or the attachment circuit is down.')
extremePwStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 1916, 1, 37, 0, 1)).setObjects(("EXTREME-MPLS-MIB", "extremePwNotificationPwIndex"), ("EXTREME-MPLS-MIB", "extremePwNotificationPwOperStatus"))
if mibBuilder.loadTexts: extremePwStatusChange.setStatus('current')
if mibBuilder.loadTexts: extremePwStatusChange.setDescription('This notification is generated when the pwOperStatus object for a pseudowire transitions from up(1) to down(2) or from down(2) to up(1).')
extremePwDeleted = NotificationType((1, 3, 6, 1, 4, 1, 1916, 1, 37, 0, 2)).setObjects(("EXTREME-MPLS-MIB", "extremePwNotificationPwIndex"), ("EXTREME-MPLS-MIB", "extremePwNotificationPeerAddrType"), ("EXTREME-MPLS-MIB", "extremePwNotificationPeerAddr"))
if mibBuilder.loadTexts: extremePwDeleted.setStatus('current')
if mibBuilder.loadTexts: extremePwDeleted.setDescription('This notification is generated when a PW has been deleted.')
extremeMplsTunnelStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 1916, 1, 37, 0, 3)).setObjects(("EXTREME-MPLS-MIB", "extremeMplsNotifTunnelIndex"), ("EXTREME-MPLS-MIB", "extremeMplsNotifTunnelInstance"), ("EXTREME-MPLS-MIB", "extremeMplsNotifTunnelIngressLSRId"), ("EXTREME-MPLS-MIB", "extremeMplsNotifTunnelEgressLSRId"), ("EXTREME-MPLS-MIB", "extremeMplsNotifTunnelAdminStatus"), ("EXTREME-MPLS-MIB", "extremeMplsNotifTunnelOperStatus"))
if mibBuilder.loadTexts: extremeMplsTunnelStatusChange.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTunnelStatusChange.setDescription('This notification is generated when the mplsTunnelOperStatus object for a te-lsp transitions from up(1) to down(2) or from down(2) to up(1). This new state is indicated by the included value of mplsTunnelOperStatus.')
extremeMplsLdpSessionStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 1916, 1, 37, 0, 4)).setObjects(("EXTREME-MPLS-MIB", "extremeMplsNotifLdpEntityLdpId"), ("EXTREME-MPLS-MIB", "extremeMplsNotifLdpEntityIndex"), ("EXTREME-MPLS-MIB", "extremeMplsNotifLdpPeerLdpId"), ("EXTREME-MPLS-MIB", "extremeMplsNotifLdpSessionState"), ("EXTREME-MPLS-MIB", "extremeMplsNotifLdpSessionDiscontinuityTime"))
if mibBuilder.loadTexts: extremeMplsLdpSessionStatusChange.setStatus('current')
if mibBuilder.loadTexts: extremeMplsLdpSessionStatusChange.setDescription("This notification is generated when the value of 'mplsLdpSessionState' (rfc3815) enters or leaves the 'operational(5)' state.")
extremeVplsStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 1916, 1, 37, 0, 5)).setObjects(("EXTREME-MPLS-MIB", "extremeVplsNotifConfigIndex"), ("EXTREME-MPLS-MIB", "extremeVplsNotifConfigVpnId"), ("EXTREME-MPLS-MIB", "extremeVplsNotifConfigAdminStatus"), ("EXTREME-MPLS-MIB", "extremeVplsNotifStatusOperStatus"))
if mibBuilder.loadTexts: extremeVplsStatusChange.setStatus('current')
if mibBuilder.loadTexts: extremeVplsStatusChange.setDescription('This notification is generated to inform recepients of the state of the Vpls. When all pseudowires in this Vpls are up or ready and the attachment circuit is up, extremeVplsNotifStatusOperStatus is set to vplsOperStatusUp(1) in the notification. When at least one pseudowire in this Vpls is up or ready and the attachment circuit is up, extremeVplsNotifStatusOperStatus is set to vplsOperStatusDegraded(2) in the notification. When all pseudowires in this Vpls are down or the attachment circuit is down, extremeVplsNotifStatusOperStatus is set to vplsOperStatusDown(3) in the notification. Once a notification has been sent with vplsOperStatusDegraded(2), no further notification will be sent untill extremeVplsNotifStatusOperStatus transitions to vplsOperStatusUp(1) or vplsOperStatusDown(3).')
if mibBuilder.loadTexts: extremeVplsStatusChange.setReference('See also Extreme Networks Concepts Guide for a description of H-VPLS.')
extremeVplsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 37, 3, 1), )
if mibBuilder.loadTexts: extremeVplsConfigTable.setReference('VPLS-GENERIC-DRAFT-01-MIB : Generic information for configuring and monitoring Virtual Private Lan Services (VPLS) ')
if mibBuilder.loadTexts: extremeVplsConfigTable.setStatus('current')
if mibBuilder.loadTexts: extremeVplsConfigTable.setDescription('This table specifies information for configuring and monitoring Virtual Private Lan Services(VPLS). ')
extremeVplsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 37, 3, 1, 1), ).setIndexNames((0, "EXTREME-MPLS-MIB", "extremeVplsConfigIndex"))
if mibBuilder.loadTexts: extremeVplsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: extremeVplsConfigEntry.setDescription('A row in this table represents a Virtual Private Lan Service(VPLS) in a packet network. It is indexed by extremeVplsConfigIndex, which uniquely identifies a single VPLS. ')
extremeVplsConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 37, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: extremeVplsConfigIndex.setStatus('current')
if mibBuilder.loadTexts: extremeVplsConfigIndex.setDescription('Unique index for the conceptual row identifying a VPLS service.')
extremeVplsConfigRedunType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 37, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("esrp", 1), ("eaps", 2), ("stp", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeVplsConfigRedunType.setStatus('current')
if mibBuilder.loadTexts: extremeVplsConfigRedunType.setDescription('This variable indicates the redundancy type for this vpls. Redundacy states can be None, EAPS, ESRP and STP.')
extremeVplsConfigEAPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 37, 3, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeVplsConfigEAPSStatus.setStatus('current')
if mibBuilder.loadTexts: extremeVplsConfigEAPSStatus.setDescription('This variable indicates the EAPS redundancy status for this vpls. It displays Protected if the VLAN is protected, else Not Protected. EAPS Status displays the following values Waiting - if we are waiting on EAPS status Connected - if EAPS ring status is connected to VLAN. PW will not be installed in this state. Disconnected - if EAPS ring state is disconnected. PW will be installed in this state. Unknown - if EAPS is not found ')
extremeVplsConfigESRPState = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 37, 3, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeVplsConfigESRPState.setStatus('current')
if mibBuilder.loadTexts: extremeVplsConfigESRPState.setDescription('This variable indicates the ESRP redundancy state for this vpls. ESRP states can have two values : Master and Slave PW will only be installed when ESRP is in the Master state. ')
extremeVplsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 37, 3, 2), )
if mibBuilder.loadTexts: extremeVplsStatusTable.setReference('VPLS-GENERIC-DRAFT-01-MIB : Generic information for configuring and monitoring Virtual Private Lan Services (VPLS) ')
if mibBuilder.loadTexts: extremeVplsStatusTable.setStatus('current')
if mibBuilder.loadTexts: extremeVplsStatusTable.setDescription('This table specifies information for configuring and monitoring Virtual Private Lan Services(VPLS). ')
extremeVplsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 37, 3, 2, 1), ).setIndexNames((0, "EXTREME-MPLS-MIB", "extremeVplsStatusIndex"))
if mibBuilder.loadTexts: extremeVplsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: extremeVplsStatusEntry.setDescription('A row in this table represents a Virtual Private Lan Service(VPLS) in a packet network. It is indexed by extremeVplsConfigIndex, which uniquely identifies a single VPLS. ')
extremeVplsStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 37, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: extremeVplsStatusIndex.setStatus('current')
if mibBuilder.loadTexts: extremeVplsStatusIndex.setDescription('Unique index for the conceptual row identifying a VPLS service.')
extremeVplsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 37, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("degraded", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeVplsOperStatus.setStatus('current')
if mibBuilder.loadTexts: extremeVplsOperStatus.setDescription('This variable indicates the vpls operation Status. This is a special status provided which has values up,down and degraded. This is different from the vpls pw status shown in the standard mib. Up - all PWs are in the Up or Ready state. Degraded - Atleast one PW is in the Up or Ready state. Down - None of the PWs are in Up or Ready state.')
extremeVplsPeerTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 37, 3, 3), )
if mibBuilder.loadTexts: extremeVplsPeerTable.setReference('PW-STD-MIB : Information for configuring and monitoring Virtual Private Lan Services (VPLS) Peer Entries')
if mibBuilder.loadTexts: extremeVplsPeerTable.setStatus('current')
if mibBuilder.loadTexts: extremeVplsPeerTable.setDescription('This table provides information for monitoring Virtual Private Lan Services(VPLS) Peer Entries.')
extremeVplsPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 37, 3, 3, 1), ).setIndexNames((0, "EXTREME-MPLS-MIB", "extremeVplsIndex"), (0, "EXTREME-MPLS-MIB", "extremeVplsPwBindIndex"))
if mibBuilder.loadTexts: extremeVplsPeerEntry.setStatus('current')
if mibBuilder.loadTexts: extremeVplsPeerEntry.setDescription('This entry contains information of all the peers belonging to a particular VPLS ')
extremeVplsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 37, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: extremeVplsIndex.setStatus('current')
if mibBuilder.loadTexts: extremeVplsIndex.setDescription('Unique index for the conceptual row identifying a VPLS service.')
extremeVplsPwBindIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 37, 3, 3, 1, 2), PwIndexType())
if mibBuilder.loadTexts: extremeVplsPwBindIndex.setStatus('current')
if mibBuilder.loadTexts: extremeVplsPwBindIndex.setDescription("Secondary Index for the conceptual row identifying a pseudowire within the PwEntry which MUST match an entry from the PW-STD-MIB's PwTable which represents an already-provisioned pseuwowire that is then associated with this VPLS instance.")
extremePwInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 37, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePwInstalled.setStatus('current')
if mibBuilder.loadTexts: extremePwInstalled.setDescription('Boolean true or false indicating if PW is installed')
extremePwMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 37, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("coretocore", 1), ("coretospoke", 2), ("spoketocore", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePwMode.setStatus('current')
if mibBuilder.loadTexts: extremePwMode.setDescription('The peer mode of this pw. It indicates its current mode and the mode of the switch it is connected to. It can have the following values : Core-to-core, Core-to-Spoke and Spoke-to-Core.')
extremePwConfiguredRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 37, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("notApplicable", 3))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePwConfiguredRole.setStatus('current')
if mibBuilder.loadTexts: extremePwConfiguredRole.setDescription('The configured role of this pw. It applies only in the case the PWMode is Core-to-core. In this case, the configured role can either be Primary or Secondary. For all the other PW modes, the configured role does not apply.')
extremeMPLSTrapsEnable = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeMPLSTrapsEnable.setStatus('current')
if mibBuilder.loadTexts: extremeMPLSTrapsEnable.setDescription('Mpls Trap status. If enabled then all the mpls related traps will be sent out.')
extremeL2VpnTrapsEnable = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 37, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeL2VpnTrapsEnable.setStatus('current')
if mibBuilder.loadTexts: extremeL2VpnTrapsEnable.setDescription('L2Vpn Trap status. If enabled then all the l2vpn related traps will be sent out.')
mibBuilder.exportSymbols("EXTREME-MPLS-MIB", IndexInteger=IndexInteger, extremePwNotificationPeerAddrType=extremePwNotificationPeerAddrType, extremeVplsStatusEntry=extremeVplsStatusEntry, extremePwConfiguredRole=extremePwConfiguredRole, extremeMPLSTrapsEnable=extremeMPLSTrapsEnable, extremeL2VpnMplsNotificationHandler=extremeL2VpnMplsNotificationHandler, extremeMplsNotifTunnelInstance=extremeMplsNotifTunnelInstance, PYSNMP_MODULE_ID=extremeMplsMIB, extremeMplsNotifLdpSessionDiscontinuityTime=extremeMplsNotifLdpSessionDiscontinuityTime, extremeMplsScalars=extremeMplsScalars, extremeMplsNotifications=extremeMplsNotifications, extremeMplsNotifLdpSessionState=extremeMplsNotifLdpSessionState, extremeMplsNotifTunnelOperStatus=extremeMplsNotifTunnelOperStatus, extremeMplsNotifLdpEntityIndex=extremeMplsNotifLdpEntityIndex, extremeVplsStatusChange=extremeVplsStatusChange, extremeVplsStatusIndex=extremeVplsStatusIndex, extremePwInstalled=extremePwInstalled, extremePwMode=extremePwMode, extremeMplsNotifTunnelIndex=extremeMplsNotifTunnelIndex, extremeMplsLdpSessionStatusChange=extremeMplsLdpSessionStatusChange, extremeVplsConfigIndex=extremeVplsConfigIndex, extremeVplsConfigEAPSStatus=extremeVplsConfigEAPSStatus, extremePwNotificationPwIndex=extremePwNotificationPwIndex, extremePwDeletedNotificationEnable=extremePwDeletedNotificationEnable, extremePwStatusChange=extremePwStatusChange, extremeVplsIndex=extremeVplsIndex, extremeVplsNotifConfigVpnId=extremeVplsNotifConfigVpnId, extremeVplsPwBindIndex=extremeVplsPwBindIndex, extremeVplsObjects=extremeVplsObjects, extremeL2VpnTrapsEnable=extremeL2VpnTrapsEnable, extremeVplsNotifConfigAdminStatus=extremeVplsNotifConfigAdminStatus, extremeMplsMIB=extremeMplsMIB, extremeVplsOperStatus=extremeVplsOperStatus, extremeMplsNotifTunnelEgressLSRId=extremeMplsNotifTunnelEgressLSRId, extremePwNotificationPwOperStatus=extremePwNotificationPwOperStatus, extremePwUpDownNotificationEnable=extremePwUpDownNotificationEnable, extremeVplsPeerTable=extremeVplsPeerTable, extremeVplsConfigTable=extremeVplsConfigTable, extremeVplsNotifConfigIndex=extremeVplsNotifConfigIndex, extremeMplsNotifTunnelIngressLSRId=extremeMplsNotifTunnelIngressLSRId, extremeVplsNotifStatusOperStatus=extremeVplsNotifStatusOperStatus, extremeMplsNotifTunnelAdminStatus=extremeMplsNotifTunnelAdminStatus, extremeMplsTunnelStatusChange=extremeMplsTunnelStatusChange, extremeVplsConfigEntry=extremeVplsConfigEntry, extremePwDeleted=extremePwDeleted, extremeVplsConfigESRPState=extremeVplsConfigESRPState, extremeMplsNotifLdpPeerLdpId=extremeMplsNotifLdpPeerLdpId, extremePwNotificationMaxRate=extremePwNotificationMaxRate, extremeMplsNotifLdpEntityLdpId=extremeMplsNotifLdpEntityLdpId, extremeVplsStatusTable=extremeVplsStatusTable, extremeVplsConfigRedunType=extremeVplsConfigRedunType, extremeVplsPeerEntry=extremeVplsPeerEntry, extremePwNotificationPeerAddr=extremePwNotificationPeerAddr)
