#
# PySNMP MIB module RFC7777-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RFC7777-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:57:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Opaque, enterprises, TimeTicks, Gauge32, iso, ModuleIdentity, ObjectIdentity, Bits, Unsigned32, MibIdentifier, NotificationType, Counter32, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Opaque", "enterprises", "TimeTicks", "Gauge32", "iso", "ModuleIdentity", "ObjectIdentity", "Bits", "Unsigned32", "MibIdentifier", "NotificationType", "Counter32", "Integer32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wellfleet = MibIdentifier((1, 3, 6, 1, 4, 1, 18))
wfOspfGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1))
wfOspfGeneralDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfGeneralDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfGeneralDelete.setDescription(" 'This value determines whether OSPF is configured' ")
wfOspfGeneralDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfGeneralDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfGeneralDisable.setDescription(" 'The administrative status of OSPF in the router. The value 'enabled' denotes that the OSPF Process is active on at least one interface; 'disabled' disables it on all interfaces.' ")
wfOspfGeneralState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfGeneralState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfGeneralState.setDescription(" 'The state of OSPF' ")
wfOspfRouterId = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfRouterId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfRouterId.setDescription(" 'A 32-bit integer uniquely identifying the router in the Autonomous System. By convention, to ensure uniqueness, this should default to the value of one of the router's IP interface addresses.' REFERENCE 'OSPF Version 2, C.1 Global parameters' ")
wfOspfVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVersionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVersionNumber.setDescription(" 'The current version number of the OSPF protocol is 2.' REFERENCE 'OSPF Version 2, Title' ")
wfOspfAreaBdrRtrStatus = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfAreaBdrRtrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaBdrRtrStatus.setDescription(" 'A flag to note whether this router is an area border router.' REFERENCE 'OSPF Version 2, Section 3 Splitting the AS into Areas' ")
wfOspfASBdrRtrStatus = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfASBdrRtrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfASBdrRtrStatus.setDescription(" 'A flag to note whether this router is an Autonomous System border router.' REFERENCE 'OSPF Version 2, Section 3.3 Classification of routers' ")
wfOspfTOSSupport = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfTOSSupport.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfTOSSupport.setDescription(" 'The router's support for type-of-service routing.' REFERENCE 'OSPF Version 2, Appendix F.1.2 Optional TOS support' ")
wfOspfSpfHoldDown = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10))).clone(namedValues=NamedValues(("defval", 1), ("maximum", 10))).clone('defval')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfSpfHoldDown.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfSpfHoldDown.setDescription(' Hold Down Timer for the SPF. The SPF will run at most once per hold down timer value. A value of 0 means no hold down. ')
wfOspfSlotMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4261150720))).clone(namedValues=NamedValues(("slotmask", 4261150720))).clone('slotmask')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfSlotMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfSlotMask.setDescription(' Slot mask for which slots OSPF is eligible to run on. The MSBit represents slot 1, the next most significant bit represents slot 2, and so on... Slots can be 1-14. Default is all slots on a BCN. ')
wfOspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2), )
if mibBuilder.loadTexts: wfOspfAreaTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaTable.setDescription(" -- The OSPF Area Data Structure contains information -- regarding the various areas. The interfaces and -- virtual links are configured as part of these areas. -- Area 0.0.0.0, by definition, is the Backbone Area 'Information describing the configured parameters and cumulative statistics of the router's attached areas.' REFERENCE 'OSPF Version 2, Section 6 The Area Data Structure' ")
wfOspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1), ).setIndexNames((0, "RFC7777-MIB", "wfOspfAreaId"))
if mibBuilder.loadTexts: wfOspfAreaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaEntry.setDescription(" 'Information describing the configured parameters and cumulative statistics of one of the router's attached areas.' ")
wfOspfAreaDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAreaDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaDelete.setDescription(' This value determines if the OSPF router is configured with this area. ')
wfOspfAreaDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAreaDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaDisable.setDescription(' This value indicates the state of this area on the OSPF router. ')
wfOspfAreaState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfAreaState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaState.setDescription(' This value indicates the state of the OSPF Area. ')
wfOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfAreaId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaId.setDescription(" 'A 32-bit integer uniquely identifying an area. Area ID 0.0.0.0 is used for the OSPF backbone.' REFERENCE 'OSPF Version 2, Appendix C.2 Area parameters' ")
wfOspfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nopassword", 1), ("simplepassword", 2))).clone('nopassword')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAuthType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAuthType.setDescription(" 'The authentication type specified for an area. Additional authentication types may be assigned locally on a per Area basis.' REFERENCE 'OSPF Version 2, Appendix E Authentication' -- none (0), -- simplePassword (1) -- reserved for future specification (2..255) -- reserved for AS specific values (> 255) ")
wfOspfImportASExtern = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfImportASExtern.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfImportASExtern.setDescription(" 'The area's support for importing AS external link- state advertisements.' REFERENCE 'OSPF Version 2, Appendix C.2 Area parameters' ")
wfOspfStubMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16777215))).clone(namedValues=NamedValues(("minimum", 1), ("maximum", 16777215))).clone('minimum')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfStubMetric.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfStubMetric.setDescription(" 'The metric value applied at the indicated type of service. By default, this equals the least metric at the type of service among the interfaces to other areas.' ")
wfOspfImportSum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfImportSum.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfImportSum.setDescription(" 'The area's support for importing Summary advertisements into a stub area. This variable should not be set unless wfOspfImportASExtern is set to FALSE' ")
wfOspfSpfCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfSpfCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfSpfCnt.setDescription(' The number of times the OSPF SPF algorithm has been run for this area. ')
wfOspfLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3), )
if mibBuilder.loadTexts: wfOspfLsdbTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbTable.setDescription(" -- OSPF Link State Database -- The Link State Database contains the Link State -- Advertisements from throughout the areas that the -- device is attached to. 'The OSPF Process's Links State Database.' REFERENCE 'OSPF Version 2, Section 12 Link State Advertisements' ")
wfOspfLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1), ).setIndexNames((0, "RFC7777-MIB", "wfOspfLsdbAreaId"), (0, "RFC7777-MIB", "wfOspfLsdbType"), (0, "RFC7777-MIB", "wfOspfLsdbLSID"), (0, "RFC7777-MIB", "wfOspfLsdbRouterId"))
if mibBuilder.loadTexts: wfOspfLsdbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbEntry.setDescription(" 'A single Link State Advertisement.' ")
wfOspfLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbAreaId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbAreaId.setDescription(" 'The 32 bit identifier of the Area from which the LSA was received.' REFERENCE 'OSPF Version 2, Appendix C.2 Area parameters' ")
wfOspfLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("routerlink", 1), ("networklink", 2), ("summarylink", 3), ("assummarylink", 4), ("asexternallink", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbType.setDescription(" 'The type of the link state advertisement. Each link state type has a separate advertisement format.' REFERENCE 'OSPF Version 2, Appendix A.4.1 The Link State Advertisement header' stubLink (0), routerLink (1), networkLink (2), summaryLink (3), asSummaryLink (4), asExternalLink (5) ")
wfOspfLsdbLSID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbLSID.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbLSID.setDescription(" 'The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.' REFERENCE 'OSPF Version 2, Section 12.1.4 Link State ID' ")
wfOspfLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbRouterId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbRouterId.setDescription(" 'The 32 bit number that uniquely identifies the originating router in the Autonomous System.' REFERENCE 'OSPF Version 2, Appendix C.1 Global parameters' ")
wfOspfLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbSequence.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbSequence.setDescription(" -- Note that the OSPF Sequence Number is a 32 bit signed -- integer. It starts with the value '80000001'h, -- or -'7FFFFFFF'h, and increments until '7FFFFFFF'h -- Thus, a typical sequence number will be very negative. 'The sequence number field is a signed 32-bit integer. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.' REFERENCE 'OSPF Version 2, Section 12.1.6 LS sequence number' ")
wfOspfLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3600))).clone(namedValues=NamedValues(("lsdbmaxage", 3600)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbAge.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbAge.setDescription(" 'This field is the age of the link state advertisement in seconds.' (OSPF_LSDBMINAGE = 0) REFERENCE 'OSPF Version 2, Section 12.1.1 LS age' ")
wfOspfLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbChecksum.setDescription(" 'This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.' REFERENCE 'OSPF Version 2, Section 12.1.7 LS checksum' ")
wfOspfLsdbAdvLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbAdvLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbAdvLen.setDescription(" 'The length of entire Link State Advertisement, including its header.' REFERENCE 'OSPF Version 2, Section 12 Link State Advertisements' ")
wfOspfAreaRangeTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 4), )
if mibBuilder.loadTexts: wfOspfAreaRangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaRangeTable.setDescription(" 'A range if IP addresses specified by an IP address/IP network mask pair. For example, class B address range of X.X.X.X with a network mask of 255.255.0.0 includes all IP addresses from X.X.0.0 to X.X.255.255' REFERENCE 'OSPF Version 2, Appendix C.2 Area parameters' ")
wfOspfAreaRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 4, 1), ).setIndexNames((0, "RFC7777-MIB", "wfOspfAreaRangeAreaID"), (0, "RFC7777-MIB", "wfOspfAreaRangeNet"))
if mibBuilder.loadTexts: wfOspfAreaRangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaRangeEntry.setDescription(' ')
wfOspfAreaRangeDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAreaRangeDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaRangeDelete.setDescription(' This value determines if an Area Range has been configured for the OSPF router. ')
wfOspfAreaRangeDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAreaRangeDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaRangeDisable.setDescription(" 'This variable displays the status of the entry. Setting it to 'DISBALED' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.' ")
wfOspfAreaRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfAreaRangeState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaRangeState.setDescription(' The state of the OSPF Area Range. ')
wfOspfAreaRangeAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfAreaRangeAreaID.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaRangeAreaID.setDescription(" 'The Area the Address Range is to be found within.' REFERENCE 'OSPF Version 2, Appendix C.2 Area parameters' ")
wfOspfAreaRangeNet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfAreaRangeNet.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaRangeNet.setDescription(" 'The IP Address of the Net or Subnet indicated by the range.' REFERENCE 'OSPF Version 2, Appendix C.2 Area parameters' ")
wfOspfAreaRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 4, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAreaRangeMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaRangeMask.setDescription(" 'The Subnet Mask that pertains to the Net or Subnet.' REFERENCE 'OSPF Version 2, Appendix C.2 Area parameters' ")
wfOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5), )
if mibBuilder.loadTexts: wfOspfIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfTable.setDescription(" -- OSPF Interface Table -- The OSPF Interface Table augments the ifTable with OSPF -- specific information. 'The OSPF Interface Table describes the interfaces from the viewpoint of OSPF.' REFERENCE 'OSPF Version 2, Appendix C.3 Router interface parameters' ")
wfOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1), ).setIndexNames((0, "RFC7777-MIB", "wfOspfIfIpAddress"), (0, "RFC7777-MIB", "wfOspfAddressLessIf"))
if mibBuilder.loadTexts: wfOspfIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfEntry.setDescription(" 'The OSPF Interface Entry describes one interface from the viewpoint of OSPF.' ")
wfOspfIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfDelete.setDescription(' This variable determines in an OSPF Interface has been configured on the router. ')
wfOspfIfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfDisable.setDescription(" 'The OSPF interface's administrative status. The value 'enabled' denotes that neighbor relationships may be formed on the interface, and the interface will be advertised as an internal route to some area. The value 'disabled' denotes that the interface is external to OSPF.' ")
wfOspfIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("loopback", 2), ("waiting", 3), ("pointtopoint", 4), ("designatedrouter", 5), ("backupdesignatedrouter", 6), ("otherdesignatedrouter", 7))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfState.setDescription(" 'The OSPF Interface State.' down (1), loopback (2), waiting (3), pointToPoint (4), designatedRouter (5), backupDesignatedRouter (6), otherDesignatedRouter (7) ")
wfOspfIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfIpAddress.setDescription(" 'The IP address of this OSPF interface.' ")
wfOspfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfAddressLessIf.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAddressLessIf.setDescription(" 'For the purpose of easing the instancing of addressed and addressless interfaces; This variable takes the value 0 on interfaces with IP Addresses, and the corresponding value of ifIndex for interfaces having no IP Address.' ")
wfOspfIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfAreaId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfAreaId.setDescription(" 'A 32-bit integer uniquely identifying the area to which the interface connects. Area ID 0.0.0.0 is used for the OSPF backbone.' default { '00000000'H } -- 0.0.0.0 ")
wfOspfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointtopoint", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfType.setDescription(" 'The OSPF interface type. By way of a default, this field may be intuited from the corresponding value of ifType. Broadcast LANs, such as Ethernet and IEEE 802.5, take the value 'broadcast', X.25, Frame Relay, and similar technologies take the value 'nbma', and links that are definitively point to point take the value 'pointToPoint'.' broadcast (1), nbma (2), pointToPoint (3) ")
wfOspfIfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("defval", 1), ("maximum", 255))).clone('defval')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfRtrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfRtrPriority.setDescription(" 'The priority of this interface. Used in multi-access networks, this field is used in the designated router election algorithm. The value 0 signifies that the router is not eligible to become the designated router on this particular network. In the event of a tie in this value, routers will use their router id as a tie breaker.' ")
wfOspfIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3600))).clone(namedValues=NamedValues(("minimum", 1), ("maximum", 3600))).clone('minimum')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfTransitDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfTransitDelay.setDescription(" 'The estimated number of seconds it takes to transmit a link- state update packet over this interface.' ")
wfOspfIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 3600))).clone(namedValues=NamedValues(("minimum", 1), ("defval", 5), ("maximum", 3600))).clone('defval')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfRetransInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfRetransInterval.setDescription(" 'The number of seconds between link-state advertisement retransmissions, for adjacencies belonging to this interface. This value is also used when retransmitting database description and link-state request packets.' ")
wfOspfIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 65535))).clone(namedValues=NamedValues(("minimum", 1), ("defval", 10), ("maximum", 65535))).clone('defval')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfHelloInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfHelloInterval.setDescription(" 'The length of time, in seconds, between the Hello packets that the router sends on the interface. This value must be the same for all routers attached to a common network.' ")
wfOspfIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 40, 2147483647))).clone(namedValues=NamedValues(("minimum", 1), ("defval", 40), ("maximum", 2147483647))).clone('defval')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfRtrDeadInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfRtrDeadInterval.setDescription(" 'The number of seconds that a router's Hello packets have not been seen before it's neighbors declare the router down. This should be some multiple of the Hello interval. This value must be the same for all routers attached to a common network.' ")
wfOspfIfPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 120, 2147483647))).clone(namedValues=NamedValues(("minimum", 1), ("defval", 120), ("maximum", 2147483647))).clone('defval')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfPollInterval.setDescription(" 'The larger time interval, in seconds, between the Hello packets sent to an inactive non-broadcast multi- access neighbor.' ")
wfOspfIfDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfDesignatedRouter.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfDesignatedRouter.setDescription(" 'The IP Address of the Designated Router.' default { '00000000'H } -- 0.0.0.0 ")
wfOspfIfBackupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfBackupDesignatedRouter.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfBackupDesignatedRouter.setDescription(" 'The IP Address of the Backup Designated Router.' default { '00000000'H } -- 0.0.0.0 ")
wfOspfIfMetricCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("minimum", 1), ("maximum", 65535))).clone('minimum')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfMetricCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfMetricCost.setDescription(" 'The cost of using this type of service on this interface. The default value of the TOS 0 Metric is 10^8 / ifSpeed. The value FFFF is distinguished to mean 'no route via this TOS'.' ")
wfOspfIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfAuthKey.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfAuthKey.setDescription(" 'The Authentication Key. If the Area's Authorization Type is simplePassword, and the key length is shorter than 8 octets, the agent will left adjust and zero fill to 8 octets. When read, ospfIfAuthKey always returns an Octet String of length zero.' default { '0000000000000000'H } -- 0.0.0.0.0.0.0.0 REFERENCE 'OSPF Version 2, Section 9 The Interface Data Structure' ")
wfOspfIfTxHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfTxHellos.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfTxHellos.setDescription(' Number of OSPF Hello packets transmitted. ')
wfOspfIfTxDBDescripts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfTxDBDescripts.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfTxDBDescripts.setDescription(' Number of OSPF DataBase Description packets transmitted. ')
wfOspfIfTxLinkStateReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfTxLinkStateReqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfTxLinkStateReqs.setDescription(' Number of OSPF Link State Request packets transmitted. ')
wfOspfIfTxLinkStateUpds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfTxLinkStateUpds.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfTxLinkStateUpds.setDescription(' Number of OSPF Link State Update packets transmitted. ')
wfOspfIfTxLinkStateAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfTxLinkStateAcks.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfTxLinkStateAcks.setDescription(' Number of OSPF Link States Acknowledgements transmitted. ')
wfOspfIfRxHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfRxHellos.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfRxHellos.setDescription(' Number of OSPF Hello packets received. ')
wfOspfIfRxDBDescripts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfRxDBDescripts.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfRxDBDescripts.setDescription(' Number of OSPF DataBase Description packets received. ')
wfOspfIfRxLinkStateReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfRxLinkStateReqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfRxLinkStateReqs.setDescription(' Number of OSPF Link State Requests received. ')
wfOspfIfRxLinkStateUpds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfRxLinkStateUpds.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfRxLinkStateUpds.setDescription(' Number of OSPF Link State Updates received. ')
wfOspfIfRxLinkStateAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfRxLinkStateAcks.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfRxLinkStateAcks.setDescription(' Number of OSPF Link State Acknowledgements received. ')
wfOspfIfDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfDrops.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfDrops.setDescription(' Number of OSPF packets dropped because of invalid information in the packet. ')
wfOspfMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10000))).clone(namedValues=NamedValues(("defval", 1), ("min", 2), ("maximum", 10000))).clone('defval')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfMtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfMtuSize.setDescription(' Configure MTU size per OSPF inreface ')
wfOspfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6), )
if mibBuilder.loadTexts: wfOspfVirtIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfTable.setDescription(" -- OSPF Virtual Interface Table -- The Virtual Interface Table describes the virtual -- links that the OSPF Process is configured to -- carry on. 'Information about this router's virtual interfaces.' REFERENCE 'OSPF Version 2, Appendix C.4 Virtual link parameters' ")
wfOspfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1), ).setIndexNames((0, "RFC7777-MIB", "wfOspfVirtIfAreaID"), (0, "RFC7777-MIB", "wfOspfVirtIfNeighbor"))
if mibBuilder.loadTexts: wfOspfVirtIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfEntry.setDescription(" 'Information about a single Virtual Interface.' ")
wfOspfVirtIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfVirtIfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfDelete.setDescription(' ')
wfOspfVirtIfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfVirtIfDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfDisable.setDescription(" 'This variable displays the validity or invalidity of the entry. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.' ")
wfOspfVirtIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("down", 1), ("pointtopoint", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfState.setDescription(" 'OSPF virtual interface states.' down (1), -- these use the same encoding pointToPoint (4) -- as the ospfIfTable ")
wfOspfVirtIfAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfAreaID.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfAreaID.setDescription(" 'The Transit Area that the Virtual Link traverses. By definition, this is not 0.0.0.0' ")
wfOspfVirtIfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfNeighbor.setDescription(" 'The Router ID of the Virtual Neighbor.' ")
wfOspfVirtIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3600))).clone(namedValues=NamedValues(("minimum", 1), ("maximum", 3600))).clone('minimum')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfVirtIfTransitDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfTransitDelay.setDescription(" 'The estimated number of seconds it takes to transmit a link- state update packet over this interface.' ")
wfOspfVirtIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 3600))).clone(namedValues=NamedValues(("minimum", 1), ("defval", 5), ("maximum", 3600))).clone('defval')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfVirtIfRetransInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfRetransInterval.setDescription(" 'The number of seconds between link-state advertisement retransmissions, for adjacencies belonging to this interface. This value is also used when retransmitting database description and link-state request packets. This value should be well over the expected round-trip time.' ")
wfOspfVirtIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 15, 65535))).clone(namedValues=NamedValues(("minimum", 1), ("defval", 15), ("maximum", 65535))).clone('defval')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfVirtIfHelloInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfHelloInterval.setDescription(" 'The length of time, in seconds, between the Hello packets that the router sends on the interface. This value must be the same for the virtual neighbor.' ")
wfOspfVirtIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 60, 2147483647))).clone(namedValues=NamedValues(("minimum", 1), ("defval", 60), ("maximum", 2147483647))).clone('defval')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfVirtIfRtrDeadInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfRtrDeadInterval.setDescription(" 'The number of seconds that a router's Hello packets have not been seen before it's neighbors declare the router down. This should be some multiple of the Hello interval. This value must be the same for the virtual neighbor.' ")
wfOspfVirtIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfVirtIfAuthKey.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfAuthKey.setDescription(" 'If Authentication Type is simplePassword, the device will left adjust and zero fill to 8 octets. When read, ospfVifAuthKey always returns a string of length zero.' REFERENCE 'OSPF Version 2, Section 9 The Interface Data Structure' ")
wfOspfVirtIfTxHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfTxHellos.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfTxHellos.setDescription(' Number of OSPF Hello packets transmitted on Virtual Interfaces. ')
wfOspfVirtIfTxDBDescripts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfTxDBDescripts.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfTxDBDescripts.setDescription(' Number of OSPF DataBase Description packets transmitted on Virtual Interfaces. ')
wfOspfVirtIfTxLinkStateReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfTxLinkStateReqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfTxLinkStateReqs.setDescription(' Number of OSPF Link State Request packets transmitted on Virtual Interfaces. ')
wfOspfVirtIfTxLinkStateUpds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfTxLinkStateUpds.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfTxLinkStateUpds.setDescription(' Number of OSPF Link State Update packets transmitted on Virtual Interfaces. ')
wfOspfVirtIfTxLinkStateAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfTxLinkStateAcks.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfTxLinkStateAcks.setDescription(' Number of OSPF Link State Acknowledgement packets transmitted on Virtual Interfaces. ')
wfOspfVirtIfRxHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfRxHellos.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfRxHellos.setDescription(' Number of OSPF Hello packets received on Virtual Interfaces. ')
wfOspfVirtIfRxDBDescripts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfRxDBDescripts.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfRxDBDescripts.setDescription(' Number of OSPF DataBase Description packets received on Virtual Interfaces. ')
wfOspfVirtIfRxLinkStateReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfRxLinkStateReqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfRxLinkStateReqs.setDescription(' Number of OSPF Link State Request packets recieved on Virtual Interfaces. ')
wfOspfVirtIfRxLinkStateUpds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfRxLinkStateUpds.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfRxLinkStateUpds.setDescription(' Number of OSPF Link State Update packets received on Virtual Interfaces. ')
wfOspfVirtIfRxLinkStateAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfRxLinkStateAcks.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfRxLinkStateAcks.setDescription(' Number of OSPF Link State Acknowledgement packets received on Virtual Interfaces. ')
wfOspfVirtIfDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfDrops.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfDrops.setDescription(' Number of OSPF packets dropped on Virtual Interfaces. ')
wfOspfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7), )
if mibBuilder.loadTexts: wfOspfNbrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrTable.setDescription(" -- OSPF Neighbor Table -- The OSPF Neighbor Table describes all neighbors in -- the locality of the subject router. 'A table of non-virtual neighbor information.' REFERENCE 'OSPF Version 2, Section 10 The Neighbor Data Structure' ")
wfOspfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1), ).setIndexNames((0, "RFC7777-MIB", "wfOspfNbrIpAddr"), (0, "RFC7777-MIB", "wfOspfNbrAddressLessIndex"))
if mibBuilder.loadTexts: wfOspfNbrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrEntry.setDescription(" 'The information regarding a single neighbor.' REFERENCE 'OSPF Version 2, Section 10 The Neighbor Data Structure' ")
wfOspfNbrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfNbrDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrDelete.setDescription(' This variable indicates the existence of a static OSPF neighbor. ')
wfOspfNbrDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfNbrDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrDisable.setDescription(" 'This variable displays the status of the entry. Setting it to 'DISABLED' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.' ")
wfOspfNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoway", 4), ("exchangstart", 5), ("exchange", 6), ("loading", 7), ("full", 8))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfNbrState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrState.setDescription(" 'The State of the relationship with this Neighbor.' REFERENCE 'OSPF Version 2, Section 10.1 Neighbor States' down (1), attempt (2), init (3), twoWay (4), exchangeStart (5), exchange (6), loading (7), full (8) ")
wfOspfNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfNbrIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrIpAddr.setDescription(" 'The IP address of this neighbor.' ")
wfOspfNbrIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfNbrIfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrIfAddr.setDescription(" 'The Interface IP address for this neighbor.' ")
wfOspfNbrAddressLessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfNbrAddressLessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrAddressLessIndex.setDescription(" ' On an interface having an IP Address, zero. On addressless interfaces, the corresponding value of ifIndex in the Internet Standard MIB. On row creation, this can be derived from the instance.' ")
wfOspfNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfNbrRtrId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrRtrId.setDescription(" 'A 32-bit integer (represented as a type IpAddress) uniquely identifying the neighboring router in the Autonomous System.' default { '00000000'H } -- 0.0.0.0 ")
wfOspfNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfNbrOptions.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrOptions.setDescription(" 'A Bit Mask corresponding to the neighbor's options field. Bit 0, if set, indicates that the area accepts and operates on external information; if zero, it is a stub area. Bit 1, if set, indicates that the system will operate on Type of Service metrics other than TOS 0. If zero, the neighbor will ignore all metrics except the TOS 0 metric.' REFERENCE 'OSPF Version 2, Section 12.1.2 Options' ")
wfOspfNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("defval", 1), ("maximum", 255))).clone('defval')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfNbrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrPriority.setDescription(" 'The priority of this neighbor in the designated router election algorithm. The value 0 signifies that the neighbor is not eligible to become the designated router on this particular network.' ")
wfOspfNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfNbrEvents.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrEvents.setDescription(" 'The number of times this neighbor relationship has changed state, or an error has occurred.' ")
wfOspfNbrLSRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfNbrLSRetransQLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrLSRetransQLen.setDescription(" 'The current length of the retransmission queue.' ")
wfOspfVirtNbrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 8), )
if mibBuilder.loadTexts: wfOspfVirtNbrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtNbrTable.setDescription(" -- WFOSPF Virtual Neighbor Table -- This table describes all virtual neighbors. -- Since Virtual Links are configured in the -- virtual interface table, this table is read-only. 'A table of virtual neighbor information.' REFERENCE 'OSPF Version 2, ' ")
wfOspfVirtNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 8, 1), ).setIndexNames((0, "RFC7777-MIB", "wfOspfVirtNbrArea"), (0, "RFC7777-MIB", "wfOspfVirtNbrRtrId"))
if mibBuilder.loadTexts: wfOspfVirtNbrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtNbrEntry.setDescription(" 'Virtual neighbor information.' REFERENCE 'OSPF Version 2, ' ")
wfOspfVirtNbrArea = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtNbrArea.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtNbrArea.setDescription(" 'The Transit Area Identifier.' ")
wfOspfVirtNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtNbrRtrId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtNbrRtrId.setDescription(" 'A 32-bit integer uniquely identifying the neighboring router in the Autonomous System.' ")
wfOspfVirtNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtNbrIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtNbrIpAddr.setDescription(" 'The IP address this Virtual Neighbor is using.' ")
wfOspfVirtNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtNbrOptions.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtNbrOptions.setDescription(" 'A bit map corresponding to the neighbor's options field. Thus, Bit 1, if set, indicates that the neighbor supports Type of Service Routing; if zero, no metrics other than TOS 0 are in use by the neighbor.' ")
wfOspfVirtNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoway", 4), ("exchangstart", 5), ("exchange", 6), ("loading", 7), ("full", 8))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtNbrState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtNbrState.setDescription(" 'The state of the Virtual Neighbor Relationship.' down (1), attempt (2), init (3), twoWay (4), exchangeStart (5), exchange (6), loading (7), full (8) ")
wfOspfVirtNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtNbrEvents.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtNbrEvents.setDescription(" 'The number of times this virtual link has changed its state, or an error has occurred.' ")
wfOspfVirtNbrLSRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 8, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtNbrLSRetransQLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtNbrLSRetransQLen.setDescription(" 'The current length of the retransmission queue.' ")
wfOspfDynNbrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9), )
if mibBuilder.loadTexts: wfOspfDynNbrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrTable.setDescription(" -- OSPF Dynamic Neighbor Table -- The OSPF Dynamic Neighbor Table describes all neighbors in -- the locality of the subject router learned during operation. 'A table of non-virtual neighbor information.' REFERENCE 'OSPF Version 2, Section 10 The Neighbor Data Structure' ")
wfOspfDynNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1), ).setIndexNames((0, "RFC7777-MIB", "wfOspfDynNbrIpAddr"), (0, "RFC7777-MIB", "wfOspfDynNbrAddressLessIndex"))
if mibBuilder.loadTexts: wfOspfDynNbrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrEntry.setDescription(" 'The information regarding a single neighbor.' REFERENCE 'OSPF Version 2, Section 10 The Neighbor Data Structure' ")
wfOspfDynNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoway", 4), ("exchangstart", 5), ("exchange", 6), ("loading", 7), ("full", 8))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfDynNbrState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrState.setDescription(" 'The State of the relationship with this Neighbor.' REFERENCE 'OSPF Version 2, Section 10.1 Neighbor States' down (1), attempt (2), init (3), twoWay (4), exchangeStart (5), exchange (6), loading (7), full (8) ")
wfOspfDynNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfDynNbrIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrIpAddr.setDescription(" 'The IP address of this neighbor.' ")
wfOspfDynNbrIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfDynNbrIfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrIfAddr.setDescription(" 'The Interface IP address for this neighbor.' ")
wfOspfDynNbrAddressLessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfDynNbrAddressLessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrAddressLessIndex.setDescription(" ' On an interface having an IP Address, zero. On addressless interfaces, the corresponding value of ifIndex in the Internet Standard MIB. On row creation, this can be derived from the instance.' ")
wfOspfDynNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfDynNbrRtrId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrRtrId.setDescription(" 'A 32-bit integer (represented as a type IpAddress) uniquely identifying the neighboring router in the Autonomous System.' default { '00000000'H } -- 0.0.0.0 ")
wfOspfDynNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfDynNbrOptions.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrOptions.setDescription(" 'A Bit Mask corresponding to the neighbor's options field. Bit 0, if set, indicates that the area accepts and operates on external information; if zero, it is a stub area. Bit 1, if set, indicates that the system will operate on Type of Service metrics other than TOS 0. If zero, the neighbor will ignore all metrics except the TOS 0 metric.' REFERENCE 'OSPF Version 2, Section 12.1.2 Options' ")
wfOspfDynNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfDynNbrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrPriority.setDescription(" 'The priority of this neighbor in the designated router election algorithm. The value 0 signifies that the neighbor is not eligible to become the designated router on this particular network.' ")
wfOspfDynNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfDynNbrEvents.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrEvents.setDescription(" 'The number of times this neighbor relationship has changed state, or an error has occurred.' ")
wfOspfDynNbrLSRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfDynNbrLSRetransQLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrLSRetransQLen.setDescription(" 'The current length of the retransmission queue.' ")
mibBuilder.exportSymbols("RFC7777-MIB", wfOspfTOSSupport=wfOspfTOSSupport, wfOspfVirtIfTransitDelay=wfOspfVirtIfTransitDelay, wfOspfVirtIfTxLinkStateAcks=wfOspfVirtIfTxLinkStateAcks, wfOspfIfDisable=wfOspfIfDisable, wfOspfVirtIfTable=wfOspfVirtIfTable, wfOspfVirtNbrRtrId=wfOspfVirtNbrRtrId, wfOspfImportSum=wfOspfImportSum, wfOspfIfBackupDesignatedRouter=wfOspfIfBackupDesignatedRouter, wfOspfIfHelloInterval=wfOspfIfHelloInterval, wfOspfIfTxLinkStateUpds=wfOspfIfTxLinkStateUpds, wfOspfVirtIfAreaID=wfOspfVirtIfAreaID, wfOspfVirtIfTxHellos=wfOspfVirtIfTxHellos, wfOspfASBdrRtrStatus=wfOspfASBdrRtrStatus, wfOspfSlotMask=wfOspfSlotMask, wfOspfLsdbTable=wfOspfLsdbTable, wfOspfAddressLessIf=wfOspfAddressLessIf, wfOspfVirtNbrEntry=wfOspfVirtNbrEntry, wfOspfIfTxLinkStateReqs=wfOspfIfTxLinkStateReqs, wfOspfLsdbAreaId=wfOspfLsdbAreaId, wfOspfImportASExtern=wfOspfImportASExtern, wfOspfNbrEvents=wfOspfNbrEvents, wfOspfVersionNumber=wfOspfVersionNumber, wfOspfGeneralDelete=wfOspfGeneralDelete, wfOspfVirtNbrIpAddr=wfOspfVirtNbrIpAddr, wfOspfDynNbrRtrId=wfOspfDynNbrRtrId, wfOspfIfRetransInterval=wfOspfIfRetransInterval, wfOspfIfState=wfOspfIfState, wfOspfIfRxDBDescripts=wfOspfIfRxDBDescripts, wfOspfDynNbrEntry=wfOspfDynNbrEntry, wfOspfIfIpAddress=wfOspfIfIpAddress, wfOspfIfRtrPriority=wfOspfIfRtrPriority, wfOspfVirtNbrEvents=wfOspfVirtNbrEvents, wfOspfLsdbChecksum=wfOspfLsdbChecksum, wfOspfVirtIfNeighbor=wfOspfVirtIfNeighbor, wfOspfIfAreaId=wfOspfIfAreaId, wfOspfNbrAddressLessIndex=wfOspfNbrAddressLessIndex, wfOspfIfEntry=wfOspfIfEntry, wfOspfStubMetric=wfOspfStubMetric, wfOspfLsdbAge=wfOspfLsdbAge, wfOspfIfRtrDeadInterval=wfOspfIfRtrDeadInterval, wfOspfVirtIfDrops=wfOspfVirtIfDrops, wfOspfVirtNbrLSRetransQLen=wfOspfVirtNbrLSRetransQLen, wfOspfVirtIfRxLinkStateAcks=wfOspfVirtIfRxLinkStateAcks, wfOspfVirtIfEntry=wfOspfVirtIfEntry, wfOspfVirtIfRxDBDescripts=wfOspfVirtIfRxDBDescripts, wfOspfNbrTable=wfOspfNbrTable, wfOspfIfRxLinkStateUpds=wfOspfIfRxLinkStateUpds, wfOspfAreaBdrRtrStatus=wfOspfAreaBdrRtrStatus, wfOspfLsdbRouterId=wfOspfLsdbRouterId, wfOspfNbrEntry=wfOspfNbrEntry, wellfleet=wellfleet, wfOspfIfRxLinkStateAcks=wfOspfIfRxLinkStateAcks, wfOspfVirtIfRxLinkStateUpds=wfOspfVirtIfRxLinkStateUpds, wfOspfDynNbrLSRetransQLen=wfOspfDynNbrLSRetransQLen, wfOspfAuthType=wfOspfAuthType, wfOspfIfDesignatedRouter=wfOspfIfDesignatedRouter, wfOspfLsdbLSID=wfOspfLsdbLSID, wfOspfDynNbrTable=wfOspfDynNbrTable, wfOspfIfTxHellos=wfOspfIfTxHellos, wfOspfVirtIfRxLinkStateReqs=wfOspfVirtIfRxLinkStateReqs, wfOspfNbrOptions=wfOspfNbrOptions, wfOspfSpfCnt=wfOspfSpfCnt, wfOspfNbrLSRetransQLen=wfOspfNbrLSRetransQLen, wfOspfIfTxLinkStateAcks=wfOspfIfTxLinkStateAcks, wfOspfVirtIfTxDBDescripts=wfOspfVirtIfTxDBDescripts, wfOspfIfRxLinkStateReqs=wfOspfIfRxLinkStateReqs, wfOspfNbrIfAddr=wfOspfNbrIfAddr, wfOspfAreaDelete=wfOspfAreaDelete, wfOspfVirtIfTxLinkStateUpds=wfOspfVirtIfTxLinkStateUpds, wfOspfNbrIpAddr=wfOspfNbrIpAddr, wfOspfVirtNbrArea=wfOspfVirtNbrArea, wfOspfVirtIfAuthKey=wfOspfVirtIfAuthKey, wfOspfLsdbSequence=wfOspfLsdbSequence, wfOspfMtuSize=wfOspfMtuSize, wfOspfNbrDelete=wfOspfNbrDelete, wfOspfDynNbrEvents=wfOspfDynNbrEvents, wfOspfAreaDisable=wfOspfAreaDisable, wfOspfLsdbEntry=wfOspfLsdbEntry, wfOspfVirtIfDisable=wfOspfVirtIfDisable, wfOspfVirtIfState=wfOspfVirtIfState, wfOspfVirtNbrOptions=wfOspfVirtNbrOptions, wfOspfSpfHoldDown=wfOspfSpfHoldDown, wfOspfVirtIfDelete=wfOspfVirtIfDelete, wfOspfVirtIfRtrDeadInterval=wfOspfVirtIfRtrDeadInterval, wfOspfIfAuthKey=wfOspfIfAuthKey, wfOspfIfTransitDelay=wfOspfIfTransitDelay, wfOspfAreaRangeEntry=wfOspfAreaRangeEntry, wfOspfVirtIfTxLinkStateReqs=wfOspfVirtIfTxLinkStateReqs, wfOspfAreaRangeAreaID=wfOspfAreaRangeAreaID, wfOspfAreaState=wfOspfAreaState, wfOspfVirtIfRxHellos=wfOspfVirtIfRxHellos, wfOspfGeneralGroup=wfOspfGeneralGroup, wfOspfAreaRangeNet=wfOspfAreaRangeNet, wfOspfLsdbType=wfOspfLsdbType, wfOspfNbrPriority=wfOspfNbrPriority, wfOspfIfRxHellos=wfOspfIfRxHellos, wfOspfIfDelete=wfOspfIfDelete, wfOspfAreaRangeState=wfOspfAreaRangeState, wfOspfAreaRangeDelete=wfOspfAreaRangeDelete, wfOspfVirtIfHelloInterval=wfOspfVirtIfHelloInterval, wfOspfVirtNbrTable=wfOspfVirtNbrTable, wfOspfAreaEntry=wfOspfAreaEntry, wfOspfVirtIfRetransInterval=wfOspfVirtIfRetransInterval, wfOspfNbrDisable=wfOspfNbrDisable, wfOspfIfTxDBDescripts=wfOspfIfTxDBDescripts, wfOspfGeneralDisable=wfOspfGeneralDisable, wfOspfIfMetricCost=wfOspfIfMetricCost, wfOspfAreaId=wfOspfAreaId, wfOspfAreaRangeDisable=wfOspfAreaRangeDisable, wfOspfIfType=wfOspfIfType, wfOspfAreaRangeTable=wfOspfAreaRangeTable, wfOspfNbrRtrId=wfOspfNbrRtrId, wfOspfDynNbrState=wfOspfDynNbrState, wfOspfAreaRangeMask=wfOspfAreaRangeMask, wfOspfNbrState=wfOspfNbrState, wfOspfGeneralState=wfOspfGeneralState, wfOspfIfDrops=wfOspfIfDrops, wfOspfIfPollInterval=wfOspfIfPollInterval, wfOspfVirtNbrState=wfOspfVirtNbrState, wfOspfDynNbrPriority=wfOspfDynNbrPriority, wfOspfRouterId=wfOspfRouterId, wfOspfDynNbrIpAddr=wfOspfDynNbrIpAddr, wfOspfAreaTable=wfOspfAreaTable, wfOspfDynNbrOptions=wfOspfDynNbrOptions, wfOspfLsdbAdvLen=wfOspfLsdbAdvLen, wfOspfIfTable=wfOspfIfTable, wfOspfDynNbrIfAddr=wfOspfDynNbrIfAddr, wfOspfDynNbrAddressLessIndex=wfOspfDynNbrAddressLessIndex)
