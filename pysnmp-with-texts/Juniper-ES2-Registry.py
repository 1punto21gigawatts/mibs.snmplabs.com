#
# PySNMP MIB module Juniper-ES2-Registry (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Juniper-ES2-Registry
# Produced by pysmi-0.3.4 at Wed May  1 14:02:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
juniAdmin, = mibBuilder.importSymbols("Juniper-Registry", "juniAdmin")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibIdentifier, TimeTicks, Counter32, Integer32, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Unsigned32, IpAddress, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Counter32", "Integer32", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Unsigned32", "IpAddress", "Bits", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
juniES2Registry = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3))
juniES2Registry.setRevisions(('2008-05-08 11:48', '2006-12-18 21:06', '2006-11-24 09:13', '2006-01-06 18:06', '2005-09-15 13:46', '2005-08-19 11:58', '2005-07-29 18:26', '2004-12-23 11:58', '2004-12-06 10:21', '2004-05-19 17:42', '2003-08-18 20:27',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: juniES2Registry.setRevisionsDescriptions(('Added es2Lm10s support.', 'Added GE20 IOA Support.', 'Added E120 product family support.', 'Added LM10 Access Support.', 'Added LM10 Uplink Support.', 'Added GE8 Support.', 'renamed entity objects, reordered to match rsSystem.mi2 and removed obsoleted boards.', 'Updated for second generation E-series hardware.', 'Renamed E2 MIB objects to ES2 MIB objects.', 'Updated for revised E320 hardware.', 'Initial version of this SNMP management information module.',))
if mibBuilder.loadTexts: juniES2Registry.setLastUpdated('200805081148Z')
if mibBuilder.loadTexts: juniES2Registry.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: juniES2Registry.setContactInfo(' Juniper Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886-3146 USA Tel: +1 978 589 5800 Email: mib@Juniper.net')
if mibBuilder.loadTexts: juniES2Registry.setDescription('Juniper second generation E-series product family system-specific object identification values. This module defines AutonomousType (OID) values for all the physical entity types (entPhysicalVendorType). This module will be updated whenever a new type of module or other hardware becomes available in second generation E-series systems.')
juniES2EntPhysicalType = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1))
es2Chassis = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 1))
if mibBuilder.loadTexts: es2Chassis.setStatus('current')
if mibBuilder.loadTexts: es2Chassis.setDescription("The vendor type ID for a second generation E-series chassis. This identifies an 'overall' physical entity for any second generation E-series system.")
e320BaseChassis = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 1, 1))
if mibBuilder.loadTexts: e320BaseChassis.setStatus('current')
if mibBuilder.loadTexts: e320BaseChassis.setDescription('E320 base chassis with 12 slots for line modules - includes chassis, midplane, DC PDU, and fan tray. The E320 system uses a carrier-class design with a passive midplane, active front-insert line modules(LM) and rear-insert input/output adapters(IOA).')
e120BaseChassis = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 1, 2))
if mibBuilder.loadTexts: e120BaseChassis.setStatus('current')
if mibBuilder.loadTexts: e120BaseChassis.setDescription('E120 base chassis with 6 slots for line modules - includes chassis, midplane, DC PDU, and fan tray. The E120 system uses a carrier-class design with a passive midplane, active front-insert line modules(LM) and rear-insert input/output adapters(IOA).')
es2FanAssembly = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 2))
if mibBuilder.loadTexts: es2FanAssembly.setStatus('current')
if mibBuilder.loadTexts: es2FanAssembly.setDescription('The vendor type ID for a second generation E-series fan assembly.')
e320PrimaryFanTray = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 2, 1))
if mibBuilder.loadTexts: e320PrimaryFanTray.setStatus('current')
if mibBuilder.loadTexts: e320PrimaryFanTray.setDescription('E320 fan tray with 8 fans.')
e320AuxiliaryFanTray = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 2, 2))
if mibBuilder.loadTexts: e320AuxiliaryFanTray.setStatus('current')
if mibBuilder.loadTexts: e320AuxiliaryFanTray.setDescription('E320 fan tray with 8 fans.')
e120PrimaryFanTray = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 2, 3))
if mibBuilder.loadTexts: e120PrimaryFanTray.setStatus('current')
if mibBuilder.loadTexts: e120PrimaryFanTray.setDescription('E120 fan tray with 9 fans.')
es2PowerInput = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 3))
if mibBuilder.loadTexts: es2PowerInput.setStatus('current')
if mibBuilder.loadTexts: es2PowerInput.setDescription('The vendor type ID for a second generation E-series power distribution module.')
e320DcPowerDistributionUnit = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 3, 1))
if mibBuilder.loadTexts: e320DcPowerDistributionUnit.setStatus('current')
if mibBuilder.loadTexts: e320DcPowerDistributionUnit.setDescription('E320 DC power distribution unit (PDU).')
es2Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 4))
if mibBuilder.loadTexts: es2Midplane.setStatus('current')
if mibBuilder.loadTexts: es2Midplane.setDescription('The vendor type ID for a second generation E-series midplane.')
e320Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 4, 1))
if mibBuilder.loadTexts: e320Midplane.setStatus('current')
if mibBuilder.loadTexts: e320Midplane.setDescription('E320 chassis midplane.')
e120Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 4, 2))
if mibBuilder.loadTexts: e120Midplane.setStatus('current')
if mibBuilder.loadTexts: e120Midplane.setDescription('E120 chassis midplane.')
es2SrpModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 5))
if mibBuilder.loadTexts: es2SrpModule.setStatus('current')
if mibBuilder.loadTexts: es2SrpModule.setDescription('The vendor type ID for a second generation E-series system controller/ switch fabric module.')
e320Srp100 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 5, 1))
if mibBuilder.loadTexts: e320Srp100.setStatus('current')
if mibBuilder.loadTexts: e320Srp100.setDescription('E320 100Gb SRP - The Switch Route Processor (SRP) is responsible for running the routing protocols as well as overall system control. The SRP also contains a switch fabric slice that is responsible for packet forwarding.')
e320Srp320 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 5, 2))
if mibBuilder.loadTexts: e320Srp320.setStatus('current')
if mibBuilder.loadTexts: e320Srp320.setDescription('E320 320Gb SRP - The Switch Route Processor (SRP) is responsible for running the routing protocols as well as overall system control. The SRP also contains a switch fabric slice that is responsible for packet forwarding.')
e120Srp120 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 5, 3))
if mibBuilder.loadTexts: e120Srp120.setStatus('current')
if mibBuilder.loadTexts: e120Srp120.setDescription('E120 120Gb SRP - The Switch Route Processor (SRP) is responsible for running the routing protocols as well as overall system control. The SRP also contains a switch fabric slice that is responsible for packet forwarding.')
es2SwitchFabricModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 6))
if mibBuilder.loadTexts: es2SwitchFabricModule.setStatus('current')
if mibBuilder.loadTexts: es2SwitchFabricModule.setDescription('The vendor type ID for a second generation E-series switch fabric module.')
e320Sfm100 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 6, 1))
if mibBuilder.loadTexts: e320Sfm100.setStatus('current')
if mibBuilder.loadTexts: e320Sfm100.setDescription('E320 100Gb switch fabric module. The SFM functions include buffer management, queuing, scheduling and packet processing.')
e320Sfm320 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 6, 2))
if mibBuilder.loadTexts: e320Sfm320.setStatus('current')
if mibBuilder.loadTexts: e320Sfm320.setDescription('E320 320Gb switch fabric module. The SFM functions include buffer management, queuing, scheduling and packet processing.')
e120Sfm120 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 6, 3))
if mibBuilder.loadTexts: e120Sfm120.setStatus('current')
if mibBuilder.loadTexts: e120Sfm120.setDescription('E120 120Gb switch fabric module. The SFM functions include buffer management, queuing, scheduling and packet processing.')
es2SrpIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 7))
if mibBuilder.loadTexts: es2SrpIoa.setStatus('current')
if mibBuilder.loadTexts: es2SrpIoa.setDescription('The vendor type ID for the system controller I/O adapter for a second generation E-series system.')
e320SrpIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 7, 1))
if mibBuilder.loadTexts: e320SrpIoa.setStatus('current')
if mibBuilder.loadTexts: e320SrpIoa.setDescription('E320 SRP IOA. This card provides clocking functions as well as management and alarm interfaces.')
es2ForwardingModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 8))
if mibBuilder.loadTexts: es2ForwardingModule.setStatus('current')
if mibBuilder.loadTexts: es2ForwardingModule.setDescription('The vendor type ID for a second generation E-series forwarding module.')
es2Lm4 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 8, 1))
if mibBuilder.loadTexts: es2Lm4.setStatus('current')
if mibBuilder.loadTexts: es2Lm4.setDescription('E320 4Gb (series 1) line module. This Line Module supports both uplink and customer facing IOAs and is responsible for processing data traffic.')
es2Lm10Uplink = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 8, 2))
if mibBuilder.loadTexts: es2Lm10Uplink.setStatus('current')
if mibBuilder.loadTexts: es2Lm10Uplink.setDescription('E320 10Gb (series 2) uplink line module. This Line Module is primarily focused on uplink IOAs and is responsible for processing data traffic.')
es2Lm10 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 8, 3))
if mibBuilder.loadTexts: es2Lm10.setStatus('current')
if mibBuilder.loadTexts: es2Lm10.setDescription('E320 10Gb (series 3) line module. This Line Module supports both uplink and customer facing IOAs and is responsible for processing data traffic.')
es2Lm10s = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 8, 4))
if mibBuilder.loadTexts: es2Lm10s.setStatus('current')
if mibBuilder.loadTexts: es2Lm10s.setDescription('E320 10Gb (series 4) line module. This Line Module supports both uplink and customer facing IOAs and is responsible for processing data traffic.')
es2ForwardingIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 9))
if mibBuilder.loadTexts: es2ForwardingIoa.setStatus('current')
if mibBuilder.loadTexts: es2ForwardingIoa.setDescription('The vendor type ID for a second generation E-series I/O adapter for a forwarding module.')
es2Ge4S1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 9, 1))
if mibBuilder.loadTexts: es2Ge4S1Ioa.setStatus('current')
if mibBuilder.loadTexts: es2Ge4S1Ioa.setDescription('E320 GE-4 IOA. This is a series 1, half-height, single wide IOA with 4 physical interfaces that require pluggable GE interfaces. This IOA uses the full capacity of a Series 1 line module.')
es2Oc48Stm16PosS1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 9, 2))
if mibBuilder.loadTexts: es2Oc48Stm16PosS1Ioa.setStatus('current')
if mibBuilder.loadTexts: es2Oc48Stm16PosS1Ioa.setDescription('E320 OC48/STM16 POS IOA. This is a series 1, half-height, single wide IOA with 1 physical interface that requires a pluggable OC48/STM16 interface.')
es2ServiceS1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 9, 3))
if mibBuilder.loadTexts: es2ServiceS1Ioa.setStatus('current')
if mibBuilder.loadTexts: es2ServiceS1Ioa.setDescription('E320 service IOA. This is a series 1, full-height, single wide IOA and does not support any physical interfaces.')
es2Oc3Stm1x8AtmS1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 9, 4))
if mibBuilder.loadTexts: es2Oc3Stm1x8AtmS1Ioa.setStatus('current')
if mibBuilder.loadTexts: es2Oc3Stm1x8AtmS1Ioa.setDescription("E320 OC3/STM1-8 ATM IOA. This is a series 1, half-height, single wide IOA that supports 8 physical interfaces that require pluggable OC3/STM1 interfaces. This IOA can be combined with other half-height IOAs (except those that use the full capacity of a slot's bandwidth such as the GE-4 IOA).")
es2RedundancyS1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 9, 5))
if mibBuilder.loadTexts: es2RedundancyS1Ioa.setStatus('current')
if mibBuilder.loadTexts: es2RedundancyS1Ioa.setDescription('E320 redundancy IOA. This is a series 1, full-height, single wide IOA and does not support any physical interfaces.')
es2Oc12Stm4x2PosS1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 9, 6))
if mibBuilder.loadTexts: es2Oc12Stm4x2PosS1Ioa.setStatus('current')
if mibBuilder.loadTexts: es2Oc12Stm4x2PosS1Ioa.setDescription("E320 OC12/STM4-2 POS IOA. This is a series 1, half-height, single wide IOA that supports 2 physical interfaces that require pluggable OC12/STM4 interfaces. This IOA can be combined with other half-height IOAs (except those that use the full capacity of a slot's bandwidth such as the GE-4 IOA).")
es2Oc12Stm4x2AtmS1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 9, 7))
if mibBuilder.loadTexts: es2Oc12Stm4x2AtmS1Ioa.setStatus('current')
if mibBuilder.loadTexts: es2Oc12Stm4x2AtmS1Ioa.setDescription("E320 OC12/STM4-2 ATM IOA. This is a series 1, half-height, single wide IOA that supports 2 physical interfaces that require pluggable OC12/STM4 interfaces. This IOA can be combined with other half-height IOAs (except those that use the full capacity of a slot's bandwidth such as the GE-4 IOA).")
es2dash10GeS1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 9, 8))
if mibBuilder.loadTexts: es2dash10GeS1Ioa.setStatus('current')
if mibBuilder.loadTexts: es2dash10GeS1Ioa.setDescription('E320 10GE IOA. This is a series 1, full-height, single wide IOA that supports 2 physical interface that requires a pluggable 10GE interface.')
es2Ge8S1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 9, 9))
if mibBuilder.loadTexts: es2Ge8S1Ioa.setStatus('current')
if mibBuilder.loadTexts: es2Ge8S1Ioa.setDescription('E320 GE-8 IOA. This is a series 1, half-height, single wide IOA that supports 8 physical interfaces that require pluggable GE transceivers. This IOA will support a configuration of 8 active or 4 active + 4 standby interfaces.')
es2dash10GePrS2Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 9, 10))
if mibBuilder.loadTexts: es2dash10GePrS2Ioa.setStatus('current')
if mibBuilder.loadTexts: es2dash10GePrS2Ioa.setDescription('E320 10GE IOA with port redundancy (PR). This is a series 2, full-height, single wide IOA that supports 2 physical interfaces (1 active + 1 standby) that require pluggable 10GE transceivers.')
es2Ge20S2Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 3, 1, 9, 11))
if mibBuilder.loadTexts: es2Ge20S2Ioa.setStatus('current')
if mibBuilder.loadTexts: es2Ge20S2Ioa.setDescription('E320 GE-20 IOA. This is a series 2, full-height, single wide IOA that supports 20 physical interfaces that require pluggable GE transceivers. This IOA will support a configuration of 20 active or 10 active + 10 standby interfaces.')
mibBuilder.exportSymbols("Juniper-ES2-Registry", e320Midplane=e320Midplane, es2Ge4S1Ioa=es2Ge4S1Ioa, e320Srp100=e320Srp100, e120BaseChassis=e120BaseChassis, es2Chassis=es2Chassis, e320Srp320=e320Srp320, es2Ge20S2Ioa=es2Ge20S2Ioa, es2Lm10s=es2Lm10s, e120Sfm120=e120Sfm120, es2Midplane=es2Midplane, juniES2EntPhysicalType=juniES2EntPhysicalType, es2Oc48Stm16PosS1Ioa=es2Oc48Stm16PosS1Ioa, e320SrpIoa=e320SrpIoa, PYSNMP_MODULE_ID=juniES2Registry, es2PowerInput=es2PowerInput, es2Ge8S1Ioa=es2Ge8S1Ioa, e320BaseChassis=e320BaseChassis, es2SrpModule=es2SrpModule, e320DcPowerDistributionUnit=e320DcPowerDistributionUnit, es2SwitchFabricModule=es2SwitchFabricModule, es2Lm4=es2Lm4, es2Lm10Uplink=es2Lm10Uplink, e320PrimaryFanTray=e320PrimaryFanTray, e320AuxiliaryFanTray=e320AuxiliaryFanTray, e120PrimaryFanTray=e120PrimaryFanTray, es2Oc12Stm4x2AtmS1Ioa=es2Oc12Stm4x2AtmS1Ioa, juniES2Registry=juniES2Registry, e320Sfm320=e320Sfm320, es2SrpIoa=es2SrpIoa, es2dash10GeS1Ioa=es2dash10GeS1Ioa, es2FanAssembly=es2FanAssembly, es2ServiceS1Ioa=es2ServiceS1Ioa, es2Oc3Stm1x8AtmS1Ioa=es2Oc3Stm1x8AtmS1Ioa, e120Midplane=e120Midplane, es2Oc12Stm4x2PosS1Ioa=es2Oc12Stm4x2PosS1Ioa, e320Sfm100=e320Sfm100, es2Lm10=es2Lm10, es2dash10GePrS2Ioa=es2dash10GePrS2Ioa, es2ForwardingModule=es2ForwardingModule, es2ForwardingIoa=es2ForwardingIoa, es2RedundancyS1Ioa=es2RedundancyS1Ioa, e120Srp120=e120Srp120)
