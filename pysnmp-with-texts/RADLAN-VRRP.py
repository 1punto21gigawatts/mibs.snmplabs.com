#
# PySNMP MIB module RADLAN-VRRP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-VRRP
# Produced by pysmi-0.3.4 at Wed May  1 14:50:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ipSpec, = mibBuilder.importSymbols("RADLAN-IP", "ipSpec")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Counter64, ObjectIdentity, TimeTicks, Integer32, mib_2, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, Gauge32, MibIdentifier, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "ObjectIdentity", "TimeTicks", "Integer32", "mib-2", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "Gauge32", "MibIdentifier", "NotificationType", "IpAddress")
DisplayString, TimeInterval, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeInterval", "TextualConvention", "RowStatus")
vrrpv3OperationsEntry, vrrpv3AssociatedIpAddrEntry = mibBuilder.importSymbols("VRRPV3-MIB", "vrrpv3OperationsEntry", "vrrpv3AssociatedIpAddrEntry")
rlVrrp = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 26, 26))
rlVrrp.setRevisions(('2010-12-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlVrrp.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: rlVrrp.setLastUpdated('201012090000Z')
if mibBuilder.loadTexts: rlVrrp.setOrganization('Marvell Semiconductor, Inc.')
if mibBuilder.loadTexts: rlVrrp.setContactInfo('www.marvell.com')
if mibBuilder.loadTexts: rlVrrp.setDescription('The private MIB module definition for VRRPv3 MIB.')
rlVrrpv3OperationsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 26, 1), )
if mibBuilder.loadTexts: rlVrrpv3OperationsTable.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3OperationsTable.setDescription('This table is parallel to vrrpv3OperationsTable, and is used to change VRRP on interface working version, description and display several statuses. It contains private objects.')
rlVrrpv3OperationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 26, 1, 1), )
vrrpv3OperationsEntry.registerAugmentions(("RADLAN-VRRP", "rlVrrpv3OperationsEntry"))
rlVrrpv3OperationsEntry.setIndexNames(*vrrpv3OperationsEntry.getIndexNames())
if mibBuilder.loadTexts: rlVrrpv3OperationsEntry.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3OperationsEntry.setDescription('An operation entry mapping for a particular interface.')
rlVrrpv3OperationsDefaultPrimaryIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 1, 1, 1), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3OperationsDefaultPrimaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3OperationsDefaultPrimaryIpAddr.setDescription("In the case where there are more than one IP Address (associated IP addresses) for a given `ifIndex', this object is used to specify the IP address that will become the vrrpv3OperationsMasterIpAddr', should the virtual router transition from backup state to master and no vrrpv3OperationsDefaultPrimaryIpAddr was configured.")
rlVrrpv3OperationsPrimaryIpAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3OperationsPrimaryIpAddrState.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3OperationsPrimaryIpAddrState.setDescription('This object represents enabled/disabled state of user configured primary address of the virtual router.')
rlVrrpv3OperationsVrDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlVrrpv3OperationsVrDescription.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3OperationsVrDescription.setDescription('The description of the VRRP virtual router.')
rlVrrpv3OperationsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlVrrpv3OperationsAdminState.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3OperationsAdminState.setDescription("This object will enable/disable the virtual router function. Setting the value to `up', will transition the state of the virtual router from `initialize' to `backup' or `master', depending on the value of `vrrpOperPriority'. Setting the value to `down', will transition the router from `master' or `backup' to `initialize'. State transitions may not be immediate; they sometimes depend on other factors, such as the interface (IF) state.")
rlVrrpv3OperationsVrrpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("version2and3", 1), ("version2", 2), ("version3", 3))).clone('version3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlVrrpv3OperationsVrrpVersion.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3OperationsVrrpVersion.setDescription('Current VRRP virtual router version it is working with.')
rlVrrpv3OperationsMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3OperationsMasterPriority.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3OperationsMasterPriority.setDescription('This object specifies the priority which is used by master router.')
rlVrrpv3OperationsMasterAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 1, 1, 7), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3OperationsMasterAdvInterval.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3OperationsMasterAdvInterval.setDescription('The time interval, in centiseconds, which is used by master router for sending advertisement messages. ')
rlVrrpv3OperationsMasterDownInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 1, 1, 8), TimeInterval()).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3OperationsMasterDownInterval.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3OperationsMasterDownInterval.setDescription('Time interval for Backup to declare Master down (centiseconds).')
rlVrrpv3OperationsSkewTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 1, 1, 9), TimeInterval()).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3OperationsSkewTime.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3OperationsSkewTime.setDescription('Time to skew Master_Down_Interval in milliseconds.')
rlVrrpv3AssociatedIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 26, 2), )
if mibBuilder.loadTexts: rlVrrpv3AssociatedIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3AssociatedIpAddrTable.setDescription('This table is parallel to vrrpv3AssociatedIpAddrTable, and is used to display address statuses. It contains private objects.')
rlVrrpv3AssociatedIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 26, 2, 1), )
vrrpv3AssociatedIpAddrEntry.registerAugmentions(("RADLAN-VRRP", "rlVrrpv3AssociatedIpAddrEntry"))
rlVrrpv3AssociatedIpAddrEntry.setIndexNames(*vrrpv3AssociatedIpAddrEntry.getIndexNames())
if mibBuilder.loadTexts: rlVrrpv3AssociatedIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3AssociatedIpAddrEntry.setDescription('An entry in the table contains an IP address that is associated with a virtual router')
rlVrrpv3AssociatedIpAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3AssociatedIpAddrState.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3AssociatedIpAddrState.setDescription('This object represents state of the assosiated IP address, backed up by current virtual router.')
rlVrrpv3CountersTable = MibTable((1, 3, 6, 1, 4, 1, 89, 26, 26, 3), )
if mibBuilder.loadTexts: rlVrrpv3CountersTable.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3CountersTable.setDescription('Table of virtual router statistics.')
rlVrrpv3CountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 26, 26, 3, 1), ).setIndexNames((0, "RADLAN-VRRP", "rlVrrpv3CountersIfIndex"))
if mibBuilder.loadTexts: rlVrrpv3CountersEntry.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3CountersEntry.setDescription('An entry in the table, containing statistics information about a given virtual router.')
rlVrrpv3CountersIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 3, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: rlVrrpv3CountersIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3CountersIfIndex.setDescription('Interface index')
rlVrrpv3CountersChecksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3CountersChecksumErrors.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3CountersChecksumErrors.setDescription('The total number of checksum errors received on this interface. Counter is only valid as long as there is a VRRP router defined on this interface.')
rlVrrpv3CountersRcvdPacketsLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3CountersRcvdPacketsLength.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3CountersRcvdPacketsLength.setDescription('The total number of packet length errors received on this interface. Counter is only valid as long as there is a VRRP router defined on this interface.')
rlVrrpv3CountersIpTtlErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3CountersIpTtlErrors.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3CountersIpTtlErrors.setDescription('The total number of TTL errors received on this interface. Counter is only valid as long as there is a VRRP router defined on this interface.')
rlVrrpv3CountersRcvdInvalidTypePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3CountersRcvdInvalidTypePackets.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3CountersRcvdInvalidTypePackets.setDescription('The total number of invalid VRRP packet type errors received on this interface. Counter is only valid as long as there is a VRRP router defined on this interface.')
rlVrrpv3CountersRcvdInvalidVrrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3CountersRcvdInvalidVrrpId.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3CountersRcvdInvalidVrrpId.setDescription('The total number of invalid VRRP id errors received on this interface. Counter is only valid as long as there is a VRRP router defined on this interface.')
rlVrrpv3CountersProtoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3CountersProtoErrors.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3CountersProtoErrors.setDescription('The total number of invalid VRRP protocol errors received on this interface. Counter is only valid as long as there is a VRRP router defined on this interface.')
rlVrrpv3CountersAddressListErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3CountersAddressListErrors.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3CountersAddressListErrors.setDescription('The total number of invalid IP address list errors received on this interface. Counter is only valid as long as there is a VRRP router defined on this interface.')
rlVrrpv3CountersAdvIntervalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3CountersAdvIntervalErrors.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3CountersAdvIntervalErrors.setDescription('The total number of invalid advertisement interval errors received on this interface. Counter is only valid as long as there is a VRRP router defined on this interface.')
rlVrrpv3CountersAuthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlVrrpv3CountersAuthErrors.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3CountersAuthErrors.setDescription('The total number of authentication errors received on this interface. Counter is only valid as long as there is a VRRP router defined on this interface.')
rlVrrpv3CountersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 26, 26, 3, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlVrrpv3CountersRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlVrrpv3CountersRowStatus.setDescription('Row status of the entry. Used for clearing table by setting.')
mibBuilder.exportSymbols("RADLAN-VRRP", rlVrrpv3OperationsVrDescription=rlVrrpv3OperationsVrDescription, rlVrrpv3OperationsSkewTime=rlVrrpv3OperationsSkewTime, rlVrrpv3CountersEntry=rlVrrpv3CountersEntry, rlVrrpv3CountersIfIndex=rlVrrpv3CountersIfIndex, rlVrrpv3OperationsVrrpVersion=rlVrrpv3OperationsVrrpVersion, rlVrrpv3CountersChecksumErrors=rlVrrpv3CountersChecksumErrors, rlVrrpv3OperationsDefaultPrimaryIpAddr=rlVrrpv3OperationsDefaultPrimaryIpAddr, rlVrrpv3CountersAddressListErrors=rlVrrpv3CountersAddressListErrors, rlVrrpv3OperationsTable=rlVrrpv3OperationsTable, rlVrrpv3AssociatedIpAddrState=rlVrrpv3AssociatedIpAddrState, rlVrrpv3OperationsMasterPriority=rlVrrpv3OperationsMasterPriority, rlVrrpv3CountersRcvdInvalidTypePackets=rlVrrpv3CountersRcvdInvalidTypePackets, rlVrrpv3CountersAdvIntervalErrors=rlVrrpv3CountersAdvIntervalErrors, rlVrrpv3CountersRowStatus=rlVrrpv3CountersRowStatus, rlVrrpv3OperationsEntry=rlVrrpv3OperationsEntry, rlVrrpv3CountersAuthErrors=rlVrrpv3CountersAuthErrors, rlVrrpv3OperationsMasterDownInterval=rlVrrpv3OperationsMasterDownInterval, rlVrrp=rlVrrp, rlVrrpv3AssociatedIpAddrTable=rlVrrpv3AssociatedIpAddrTable, rlVrrpv3OperationsMasterAdvInterval=rlVrrpv3OperationsMasterAdvInterval, rlVrrpv3CountersTable=rlVrrpv3CountersTable, rlVrrpv3CountersRcvdPacketsLength=rlVrrpv3CountersRcvdPacketsLength, rlVrrpv3OperationsPrimaryIpAddrState=rlVrrpv3OperationsPrimaryIpAddrState, rlVrrpv3CountersProtoErrors=rlVrrpv3CountersProtoErrors, PYSNMP_MODULE_ID=rlVrrp, rlVrrpv3OperationsAdminState=rlVrrpv3OperationsAdminState, rlVrrpv3CountersIpTtlErrors=rlVrrpv3CountersIpTtlErrors, rlVrrpv3AssociatedIpAddrEntry=rlVrrpv3AssociatedIpAddrEntry, rlVrrpv3CountersRcvdInvalidVrrpId=rlVrrpv3CountersRcvdInvalidVrrpId)
