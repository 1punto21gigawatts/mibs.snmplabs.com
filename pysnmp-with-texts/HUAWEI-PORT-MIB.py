#
# PySNMP MIB module HUAWEI-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-PORT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:47:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter64, MibIdentifier, NotificationType, IpAddress, ModuleIdentity, TimeTicks, Integer32, Counter32, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "MibIdentifier", "NotificationType", "IpAddress", "ModuleIdentity", "TimeTicks", "Integer32", "Counter32", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity")
TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
hwPortMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157))
if mibBuilder.loadTexts: hwPortMIB.setLastUpdated('200710210930Z')
if mibBuilder.loadTexts: hwPortMIB.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwPortMIB.setContactInfo('VRP Team Huawei Technologies Co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China http://www.huawei.com Zip:100085 ')
if mibBuilder.loadTexts: hwPortMIB.setDescription('The private mib file includes the general extent information of the device.hwDatacomm(157).hwPortMIB')
hwPortMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1))
hwEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1))
hwEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1), )
if mibBuilder.loadTexts: hwEthernetTable.setStatus('current')
if mibBuilder.loadTexts: hwEthernetTable.setDescription('Indicates the physical attributes of the Ethernet interface. This table lists the physical attributes of various Ethernet interfaces.')
hwEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1), ).setIndexNames((0, "HUAWEI-PORT-MIB", "hwEthernetIfIndex"))
if mibBuilder.loadTexts: hwEthernetEntry.setStatus('current')
if mibBuilder.loadTexts: hwEthernetEntry.setDescription('Indicates the physical attributes of the Ethernet interface. This table lists the physical attributes of various Ethernet interfaces.')
hwEthernetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwEthernetIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwEthernetIfIndex.setDescription('Interface index(es) of port(s) present on the device .')
hwEthernetLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("otherLoop", 1), ("stopLoopback", 2), ("local", 3), ("remote", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetLoopback.setStatus('current')
if mibBuilder.loadTexts: hwEthernetLoopback.setDescription('The local loopback of an Ethernet interface is used to test the interface itself. If an interface works in a normal situation, disable the local loopback. By default, stopLoopback is used.')
hwEthernetPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("copper", 2), ("fiber", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetPortType.setStatus('current')
if mibBuilder.loadTexts: hwEthernetPortType.setDescription('Indicates the type of the Ethernet interface: an optical interface or an electrical interface.')
hwEthernetSpeedSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("speed10", 2), ("speed100", 3), ("speed1000", 4), ("speed10000", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetSpeedSet.setStatus('current')
if mibBuilder.loadTexts: hwEthernetSpeedSet.setDescription('Indicates the speed of the Ethernet interface. This parameter takes effect only on some Ethernet electrical interfaces rather than optical interfaces. The parameter can be 10 M, 100 M, 1000 M, 10000 M.')
hwEthernetDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetDuplex.setStatus('current')
if mibBuilder.loadTexts: hwEthernetDuplex.setDescription('Indicates the duplex mode of the Ethernet interface. An electrical Ethernet interface can work in half-duplex mode or full-duplex mode. An optical Ethernet can work only in full-duplex mode.')
hwEthernetNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 15), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetNegotiation.setStatus('current')
if mibBuilder.loadTexts: hwEthernetNegotiation.setDescription('Indicates the auto-negotiation mode of the Ethernet electrical interface. By default, auto-negotiation is enabled. The three objects, hwEthernetSpeedSet, hwEthernetDuplex, and hwEthernetNegotiation are associated with each other. If the auto-negotiation of hwEthernetNegotiation is enabled, the values of hwEthernetSpeedSet and hwEthernetDuplex are auto-negotiated. If hwEthernetSpeedSet is set to a certain value, hwEthernetDuplex is modified to the default value full, and hwEthernetNegotiation is automatically changed to disable. If the auto-negotiation of hwEthernetNegotiation is enabled, hwEthernetDuplex cannot be set.')
hwEthernetPortTypeOperate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("copper", 2), ("fiber100", 3), ("fiber1000", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetPortTypeOperate.setStatus('current')
if mibBuilder.loadTexts: hwEthernetPortTypeOperate.setDescription('Indicates the link type of the Ethernet interface. The type can be optical link or electrical link. This parameter takes effect only on specific Ethernet interfaces.')
hwEthernetClock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetClock.setStatus('current')
if mibBuilder.loadTexts: hwEthernetClock.setDescription('Indicates the mode of the clock. The mode can be master or slave. By default, the mode of a clock is slave. This parameter takes effect only on the WAN board.')
hwEthernetFlagJ0Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("j01ByteMode", 1), ("j016ByteMode", 2), ("j064ByteOrNullMode", 3), ("peer", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetFlagJ0Mode.setStatus('current')
if mibBuilder.loadTexts: hwEthernetFlagJ0Mode.setDescription('Before the 10 GE WAN board processes packets, the overhead byte must be configured on the interface. The overhead byte for the SDH frame, j0: Set section trace byte The default value is j016ByteMode(2)hwEthernetFlagJ0Trace NetEngine')
hwEthernetFlagJ0Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetFlagJ0Value.setStatus('current')
if mibBuilder.loadTexts: hwEthernetFlagJ0Value.setDescription('j01ByteMode Value. When hwEthernetFlagJ0Mode is set to j01ByteMode, this parameter takes effect.')
hwEthernetFlagJ0Trace = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetFlagJ0Trace.setStatus('current')
if mibBuilder.loadTexts: hwEthernetFlagJ0Trace.setDescription('Set section trace byte. When hwEthernetFlagJ0Mode is set to j016ByteMode or j064ByteOrNullMode, this variable takes effect. When hwEthernetFlagJ0Mode is set to j016ByteMode, this variable is up to 15 characters trace byte. When hwEthernetFlagJ0Mode is set to j064ByteOrNullMode, this variable is up to 64 characters trace byte.')
hwEthernetFlagJ1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("j11ByteMode", 1), ("j116ByteMode", 2), ("j164ByteOrNullMode", 3), ("peer", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetFlagJ1Mode.setStatus('current')
if mibBuilder.loadTexts: hwEthernetFlagJ1Mode.setDescription('Indicates the overhead byte of the SDH frame. j1sets path trace byte. The default value is j116ByteMode(2) hwEthernetFlagJ1Trace NetEngine.')
hwEthernetFlagJ1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetFlagJ1Value.setStatus('current')
if mibBuilder.loadTexts: hwEthernetFlagJ1Value.setDescription('j11ByteMode Value. When hwEthernetFlagJ1Mode is set to j11ByteMode, this parameter takes effect.')
hwEthernetFlagJ1Trace = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetFlagJ1Trace.setStatus('current')
if mibBuilder.loadTexts: hwEthernetFlagJ1Trace.setDescription('Set path trace byte. When hwEthernetFlagJ1Mode is set to j116ByteMode or j164ByteOrNullMode, this variable takes effect. When hwEthernetFlagJ1Mode is set to j116ByteMode, this variable is up to 15 characters trace byte. When hwEthernetFlagJ1Mode is set to j164ByteOrNullMode, this variable is up to 64 characters trace byte.')
hwEthernetFlagC2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetFlagC2Value.setStatus('current')
if mibBuilder.loadTexts: hwEthernetFlagC2Value.setDescription('Indicates the overhead byte of the SDH frame. c2: indicates the signal label byte. It is a hexdecimal value ranging from 00 to FF. The default value is 0x02.')
hwEthernetUpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetUpHoldTime.setStatus('current')
if mibBuilder.loadTexts: hwEthernetUpHoldTime.setDescription('Indicates the response time to the event that the port turns Up. The units of hwEthernetUpHoldTime is millisecond.')
hwEthernetDownHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetDownHoldTime.setStatus('current')
if mibBuilder.loadTexts: hwEthernetDownHoldTime.setDescription('Indicates the response time to the event that the port turns Down. The units of hwEthernetDownHoldTime is millisecond.')
hwEthernetSubinterfaceStatisticEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 33), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetSubinterfaceStatisticEnable.setStatus('current')
if mibBuilder.loadTexts: hwEthernetSubinterfaceStatisticEnable.setDescription('Enable the statistical function of the sub-interface.')
hwPos = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2))
hwPosTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1), )
if mibBuilder.loadTexts: hwPosTable.setStatus('current')
if mibBuilder.loadTexts: hwPosTable.setDescription('Indicates the physical attributes of the POS interface. This table lists the physical attributes of the POS interface.')
hwPosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1), ).setIndexNames((0, "HUAWEI-PORT-MIB", "hwPosIfIndex"))
if mibBuilder.loadTexts: hwPosEntry.setStatus('current')
if mibBuilder.loadTexts: hwPosEntry.setDescription('Indicates the physical attributes of the POS interface. This table lists the physical attributes of the POS interface.')
hwPosIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwPosIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPosIfIndex.setDescription('Interface index(es) of port(s) present on the device .')
hwPosLinkProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ietf", 1), ("nonstandard", 2), ("hdlc", 3), ("ppp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosLinkProtocol.setStatus('current')
if mibBuilder.loadTexts: hwPosLinkProtocol.setDescription('Indicates the link layer protocol of the POS interface. By default, on a POS interface, PPP serves as the link layer protocol.')
hwPosFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosFrameFormat.setStatus('current')
if mibBuilder.loadTexts: hwPosFrameFormat.setDescription('Indicates the frame type of the POS interface. By default, the frame type of the POS interface is SDH. This variable identifies whether a SONET or a SDH signal is used across this interface.')
hwPosLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("otherLoop", 1), ("stopLoopback", 2), ("local", 3), ("remote", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosLoopback.setStatus('current')
if mibBuilder.loadTexts: hwPosLoopback.setDescription('The local loopback of a POS interface is used to test the interface itself. If an interface works in a normal situation, disable the local loopback. By default, stopLoopback is used.')
hwPosScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 14), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosScramble.setStatus('current')
if mibBuilder.loadTexts: hwPosScramble.setDescription('Indicates the scramble function of payload. By default, the scramble function of payload is enabled.')
hwPosClock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosClock.setStatus('current')
if mibBuilder.loadTexts: hwPosClock.setDescription('Indicates whether the clock is in master mode or slave mode. By default, the clock is in slave mode.')
hwPosCrcVerifyCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosCrcVerifyCode.setStatus('current')
if mibBuilder.loadTexts: hwPosCrcVerifyCode.setDescription('Indicates the length of the CRC verity code. The default value is 32.')
hwPosFlagJ0Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("j01ByteMode", 1), ("j016ByteMode", 2), ("j064ByteOrNullMode", 3), ("peer", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosFlagJ0Mode.setStatus('current')
if mibBuilder.loadTexts: hwPosFlagJ0Mode.setDescription('Indicates the overhead byte of the SDH frame. j0: sets section trace byte. The default value is j016ByteMode(2);hwPosFlagJ0Trace NetEngine.')
hwPosFlagJ0Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosFlagJ0Value.setStatus('current')
if mibBuilder.loadTexts: hwPosFlagJ0Value.setDescription('Indicates the value of j01ByteMode. When hwPosFlagJ0Mode is set to j01ByteMode, hwPosFlagJ0Value takes effect.')
hwPosFlagJ0Trace = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosFlagJ0Trace.setStatus('current')
if mibBuilder.loadTexts: hwPosFlagJ0Trace.setDescription('Set section trace byte. When hwPosFlagJ0Mode is set to j016ByteMode or j064ByteOrNullMode, this variable takes effect. When hwPosFlagJ0Mode is set to j016ByteMode, the value of this variable is up to 15 characters trace byte. When hwPosFlagJ0Mode is set to j064ByteOrNullMode, the value of this variable is up to 64 characters trace byte.')
hwPosFlagJ1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("j11ByteMode", 1), ("j116ByteMode", 2), ("j164ByteOrNullMode", 3), ("peer", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosFlagJ1Mode.setStatus('current')
if mibBuilder.loadTexts: hwPosFlagJ1Mode.setDescription('Indicates the overhead byte of the SDH frame. j1: sets path trace byte. The default value is j116ByteMode(2);hwPosFlagJ1Trace NetEngine.')
hwPosFlagJ1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosFlagJ1Value.setStatus('current')
if mibBuilder.loadTexts: hwPosFlagJ1Value.setDescription('Indicates the value of j11ByteMode. When hwPosFlagJ1Mode is set to j11ByteMode, hwPosFlagJ1Value takes effect.')
hwPosFlagJ1Trace = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosFlagJ1Trace.setStatus('current')
if mibBuilder.loadTexts: hwPosFlagJ1Trace.setDescription('Set path trace byte. When hwPosFlagJ1Mode is set to j116ByteMode or j164ByteOrNullMode, this variable takes effect. When hwPosFlagJ1Mode is set to j116ByteMode, this variable is up to 15 characters trace byte. When hwPosFlagJ1Mode is set to j164ByteOrNullMode, this variable is up to 64 characters trace byte.')
hwPosFlagC2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosFlagC2Value.setStatus('current')
if mibBuilder.loadTexts: hwPosFlagC2Value.setDescription('Indicates the overhead byte of the SDH frame. c2: indicates the signal label byte. It is a hexdecimal value ranging from 00 to FF. The default value is 0x02.')
hwCpos = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3))
hwCposTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1), )
if mibBuilder.loadTexts: hwCposTable.setStatus('current')
if mibBuilder.loadTexts: hwCposTable.setDescription('Indicates the physical attributes of the CPOS interface. This table lists the physical attributes of the CPOS interface.')
hwCposEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1), ).setIndexNames((0, "HUAWEI-PORT-MIB", "hwCposIfIndex"))
if mibBuilder.loadTexts: hwCposEntry.setStatus('current')
if mibBuilder.loadTexts: hwCposEntry.setDescription('Indicates the physical attributes of the CPOS interface. This table lists the physical attributes of the CPOS interface.')
hwCposIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwCposIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwCposIfIndex.setDescription('Interface index(es) of port(s) present on the device .')
hwCposClock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposClock.setStatus('current')
if mibBuilder.loadTexts: hwCposClock.setDescription('Indicates whether the clock is in master mode or slave mode. By default, the clock is in slave mode.')
hwCposIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stm1", 1), ("stm16", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposIfType.setStatus('current')
if mibBuilder.loadTexts: hwCposIfType.setDescription('Indicates the interface type.')
hwCposFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFrameFormat.setStatus('current')
if mibBuilder.loadTexts: hwCposFrameFormat.setDescription('Indicates the frame type of the CPOS interface. By default, the frame type of the CPOS interface is SDH.')
hwCposMultiplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("au3", 1), ("au4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposMultiplex.setStatus('current')
if mibBuilder.loadTexts: hwCposMultiplex.setDescription('Indicates the multiplex mode of the AUG. By default, the multiplex mode of the AUG is au-4.')
hwCposLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("otherloop", 1), ("stopLoopback", 2), ("local", 3), ("remote", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposLoopback.setStatus('current')
if mibBuilder.loadTexts: hwCposLoopback.setDescription('Indicates the loopback function of the CPOS interface. By default, the loopback function is disabled.')
hwCposFlagJ0Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("j01ByteMode", 1), ("j016ByteMode", 2), ("j064ByteOrNullMode", 3), ("peer", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFlagJ0Mode.setStatus('current')
if mibBuilder.loadTexts: hwCposFlagJ0Mode.setDescription('Indicates the overhead byte of the SDH frame. j0: sets section trace byte. The default value is j016ByteMode(2);hwCposFlagJ0Trace NetEngine.')
hwCposFlagJ0Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFlagJ0Value.setStatus('current')
if mibBuilder.loadTexts: hwCposFlagJ0Value.setDescription('j01ByteMode Value . When hwCposFlagJ0Mode is set to j01ByteMode, hwCposFlagJ0Value takes effect.')
hwCposFlagJ0Trace = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFlagJ0Trace.setStatus('current')
if mibBuilder.loadTexts: hwCposFlagJ0Trace.setDescription('Set section trace byte. When hwCposFlagJ0Mode is set to j016ByteMode or j064ByteOrNullMode, this variable takes effect. When hwCposFlagJ0Mode is set to j016ByteMode, this variable is up to 15 characters trace byte. When hwCposFlagJ0Mode is set to j064ByteOrNullMode, this variable is up to 64 characters trace byte.')
hwCposFlagJ1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("j11ByteMode", 1), ("j116ByteMode", 2), ("j164ByteOrNullMode", 3), ("peer", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFlagJ1Mode.setStatus('current')
if mibBuilder.loadTexts: hwCposFlagJ1Mode.setDescription('Indicates the overhead byte of the SDH frame. j1: sets path trace byte. The default value is j116ByteMode(2);hwCposFlagJ1Trace NetEngine.')
hwCposFlagJ1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFlagJ1Value.setStatus('current')
if mibBuilder.loadTexts: hwCposFlagJ1Value.setDescription('Indicates the value of j11ByteMode. When hwCposFlagJ1Mode is set to j11ByteMode, hwCposFlagJ1Value takes effect.')
hwCposFlagJ1Trace = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFlagJ1Trace.setStatus('current')
if mibBuilder.loadTexts: hwCposFlagJ1Trace.setDescription('Set path trace byte. When hwCposFlagJ1Mode is set to j116ByteMode or j164ByteOrNullMode, this variable takes effect. When hwCposFlagJ1Mode is set to j116ByteMode, this variable is a string up to 15 characters trace byte. When hwCposFlagJ1Mode is set to j164ByteOrNullMode, this variable is a string up to 64 characters trace byte.')
hwCposFlagC2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFlagC2Value.setStatus('current')
if mibBuilder.loadTexts: hwCposFlagC2Value.setDescription('Indicates the overhead byte of the SDH frame. c2: indicates the signal label byte. It is a hexdecimal value ranging from 00 to FF. The default value is 22(0x16).')
hwDs0ChannelBundle = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4))
hwDs0ChannelBundleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1), )
if mibBuilder.loadTexts: hwDs0ChannelBundleTable.setStatus('current')
if mibBuilder.loadTexts: hwDs0ChannelBundleTable.setDescription('This table is used to bundle timeslots of CE1/CT1 interfaces.')
hwDs0ChannelBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1), ).setIndexNames((0, "HUAWEI-PORT-MIB", "hwDs0ChannelBundleParentIfIndex"), (0, "HUAWEI-PORT-MIB", "hwDs0ChannelBundleDs1ChannelId"), (0, "HUAWEI-PORT-MIB", "hwDs0ChannelBundleId"))
if mibBuilder.loadTexts: hwDs0ChannelBundleEntry.setStatus('current')
if mibBuilder.loadTexts: hwDs0ChannelBundleEntry.setDescription('This table is used to bundle timeslots of CE1/CT1 interfaces.')
hwDs0ChannelBundleParentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwDs0ChannelBundleParentIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwDs0ChannelBundleParentIfIndex.setDescription('Indicates the index of the parent interface.')
hwDs0ChannelBundleDs1ChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: hwDs0ChannelBundleDs1ChannelId.setStatus('current')
if mibBuilder.loadTexts: hwDs0ChannelBundleDs1ChannelId.setDescription('Indicates the channel ID.')
hwDs0ChannelBundleId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)))
if mibBuilder.loadTexts: hwDs0ChannelBundleId.setStatus('current')
if mibBuilder.loadTexts: hwDs0ChannelBundleId.setDescription('Indicates the index number of the channel set.')
hwDs0ChannelBundleIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1, 11), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs0ChannelBundleIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwDs0ChannelBundleIfIndex.setDescription('Indicates the index of the serial interface formed by the timeslot binding.')
hwDs0ChannelBundleTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 61))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs0ChannelBundleTimeSlots.setStatus('current')
if mibBuilder.loadTexts: hwDs0ChannelBundleTimeSlots.setDescription("Indicates the number of the range of the timeslot to be bound. The value is an integer ranging from 0 to 31. Multiple timeslots are separated by ','. The range of timeslot is expressed by using '-'. For E1 card mode: If the timeslots are '0-31', it means unframed format, If the timeslots are '0-30', it means framed format, For T1 card mode: If the timeslots are '0-23', it means unframed format, If the timeslots are '0-22', it means framed format, and hwDs0ChannelBundleDs1ChannelId and hwDs0ChannelBundleId should be zero.")
hwDs0ChannelBundleSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("s56", 1), ("s64", 2))).clone(64)).setUnits('kilo bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs0ChannelBundleSpeed.setStatus('current')
if mibBuilder.loadTexts: hwDs0ChannelBundleSpeed.setDescription('Configures the mode to configure the timeslots. If the parameter 56 k is selected, the timeslots are bound in the mode of N x 56 kbit/s. If the parameter 64 k is selected, the timeslots are bound in the mode of N x 64 kbit/s. The default value is 64kbit/s.')
hwDs0ChannelBundleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs0ChannelBundleRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDs0ChannelBundleRowStatus.setDescription('This variable is used to create or delete an object.')
hwDs1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5))
hwDs1Table = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1), )
if mibBuilder.loadTexts: hwDs1Table.setStatus('current')
if mibBuilder.loadTexts: hwDs1Table.setDescription('This table lists all E1/CE1 interfaces or T1/CT1 interfaces. After the mode of E3/CE3 interfaces or T3/CT3 interfaces is set to channelized, this table can be used to create E1/CE1, or T1/CT1, or E3/CE3, or T3/CT3 interfaces.')
hwDs1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1), ).setIndexNames((0, "HUAWEI-PORT-MIB", "hwDs1ParentIfIndex"), (0, "HUAWEI-PORT-MIB", "hwDs1ChannelId"), (0, "HUAWEI-PORT-MIB", "hwDs1IfIndex"))
if mibBuilder.loadTexts: hwDs1Entry.setStatus('current')
if mibBuilder.loadTexts: hwDs1Entry.setDescription('This table lists all E1/CE1 interfaces or T1/CT1 interfaces. After the mode of E3/CE3 interfaces or T3/CT3 interfaces is set to channelized, this table can be used to create E1/CE1, or T1/CT1, or E3/CE3, or T3/CT3 interfaces.')
hwDs1ParentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwDs1ParentIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwDs1ParentIfIndex.setDescription('Indicates the index of the parent interface.')
hwDs1ChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hwDs1ChannelId.setStatus('current')
if mibBuilder.loadTexts: hwDs1ChannelId.setDescription('Indicates the channel ID.')
hwDs1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: hwDs1IfIndex.setStatus('current')
if mibBuilder.loadTexts: hwDs1IfIndex.setDescription('Indicates the interface index.')
hwDs1ChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1ChannelType.setStatus('current')
if mibBuilder.loadTexts: hwDs1ChannelType.setDescription('Indicates the interface type. The type can be E1/CE1 or T1/CT1.')
hwDs1IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("e3", 1), ("t3", 2), ("cpos", 3), ("atm", 4), ("none", 255))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1IfType.setStatus('current')
if mibBuilder.loadTexts: hwDs1IfType.setDescription('Indicates the interface tyep. e3: is multiplexed by CE3 interfaces. t3: is multiplexed by CT3 interfaces. cpos: is multiplexed by CPOS interfaces. atm: is multiplexed by ATM interfaces. none: indicates the physical interface. default:none')
hwDs1Channelized = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 13), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1Channelized.setStatus('current')
if mibBuilder.loadTexts: hwDs1Channelized.setDescription('Indicates the working mode of the interface. true: indicates the channelized mode. false: indicates the clear channel mode. The default is true.')
hwDs1CodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ami", 1), ("hdb3", 2), ("b8zs", 3))).clone('hdb3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1CodeType.setStatus('current')
if mibBuilder.loadTexts: hwDs1CodeType.setDescription('Indicates the code type of the interface. ami: is short for Alternate Mark Inversion. hdb3: is short for High Density Bipolar of Order 3. b8zs: is short for Bipolar with 8-Zero Substitution.')
hwDs1Clock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1Clock.setStatus('current')
if mibBuilder.loadTexts: hwDs1Clock.setDescription('Indicates the clock mode of the interface. master: indicates that the clock works in master mode and uses the internal clock signal. slave: indicates that the clock works in slave mode and uses the line clock signal.')
hwDs1FrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("esf", 1), ("sf", 2), ("noCrc4", 3), ("crc", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1FrameFormat.setStatus('current')
if mibBuilder.loadTexts: hwDs1FrameFormat.setDescription('Indicates the frame format of the interface. crc4: indicates that the frame format is CRC4. no-crc4: indicates that the frame format is no-CRC4. sf: indicates that the frame format is Super Frame. esf: indicates that the frame format is Extended Super Frame. By default, the frame format of an E1 interface is no-crc4. By default, the frame format of a T1 interface is esf.')
hwDs1Cable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("long", 1), ("short", 2))).clone('short')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1Cable.setStatus('current')
if mibBuilder.loadTexts: hwDs1Cable.setDescription('The cable command takes effect only if the E1 interface card uses 75-ohm coaxial cable. The default is short. If no cable is connected, this parameter is displayed as null.')
hwDs1Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("payload", 3), ("cell", 4), ("none", 255))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1Loopback.setStatus('current')
if mibBuilder.loadTexts: hwDs1Loopback.setDescription('Enable the loopback function of the interface. local: enables the local loopback on the interface. remote: enables the remote loopback on the interface. payload: enables the remote payload loopback on the interface. cell: enables the local cell loopback. The local cell loopback is used to test the local physical chip.')
hwDs1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1RowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDs1RowStatus.setDescription('This variable is used to create or delete an object.')
hwDs3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6))
hwDs3Table = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1), )
if mibBuilder.loadTexts: hwDs3Table.setStatus('current')
if mibBuilder.loadTexts: hwDs3Table.setDescription('This table lists all E3/CE3 interfaces or all T3/CT3 interfaces.')
hwDs3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1), ).setIndexNames((0, "HUAWEI-PORT-MIB", "hwDs3ParentIfIndex"), (0, "HUAWEI-PORT-MIB", "hwDs3ChannelId"), (0, "HUAWEI-PORT-MIB", "hwDs3IfIndex"))
if mibBuilder.loadTexts: hwDs3Entry.setStatus('current')
if mibBuilder.loadTexts: hwDs3Entry.setDescription('This table lists all E3/CE3 interfaces or all T3/CT3 interfaces.')
hwDs3ParentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwDs3ParentIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwDs3ParentIfIndex.setDescription('Indicates the index of the parent interface.')
hwDs3ChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: hwDs3ChannelId.setStatus('current')
if mibBuilder.loadTexts: hwDs3ChannelId.setDescription('Indicates the index of the parent interface.')
hwDs3IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: hwDs3IfIndex.setStatus('current')
if mibBuilder.loadTexts: hwDs3IfIndex.setDescription('Indicates the interface index.')
hwDs3ChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t3", 1), ("e3", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3ChannelType.setStatus('current')
if mibBuilder.loadTexts: hwDs3ChannelType.setDescription('Indicates the interface type. The type can be E3/CE3 or T3/CT3.')
hwDs3IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("cpos", 1), ("none", 255))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3IfType.setStatus('current')
if mibBuilder.loadTexts: hwDs3IfType.setDescription('Indicates the parent interface type of the interface. cpos: is multiplexed by CPOS interfaces. none: indicates the interface is a physical interface. The default is none.')
hwDs3Channelized = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 13), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3Channelized.setStatus('current')
if mibBuilder.loadTexts: hwDs3Channelized.setDescription('Indicates the working mode of the interface. true: indicates the channelized mode. false: indicates the clear channel mode. The default is true.')
hwDs3Clock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3Clock.setStatus('current')
if mibBuilder.loadTexts: hwDs3Clock.setDescription('Indicates the clock mode of the interface. master: indicates that the clock works in master mode and uses the internal clock signal. slave: indicates that the clock works in slave mode and uses the line clock signal.')
hwDs3FrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("g832Adm", 1), ("g751Adm", 2), ("g751Plcp", 3), ("cbitAdm", 4), ("cbitPlcp", 5), ("m23Adm", 6), ("m23Plcp", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3FrameFormat.setStatus('current')
if mibBuilder.loadTexts: hwDs3FrameFormat.setDescription('Indicates the frame format of the interface.')
hwDs3Scramble = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3Scramble.setStatus('current')
if mibBuilder.loadTexts: hwDs3Scramble.setDescription('Indicates the scramble function of the interface. true: enables the scramble function. false: disables the scramble function. The default is false.')
hwDs3Cable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("long", 1), ("short", 2))).clone('short')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3Cable.setStatus('current')
if mibBuilder.loadTexts: hwDs3Cable.setDescription('The cable command takes effect only if the E3 interface card uses 75-ohm coaxial cable. The default is short. If no cable is connected, this parameter is displayed as null.')
hwDs3NationalBit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("n0", 1), ("n1", 2))).clone('n0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3NationalBit.setStatus('current')
if mibBuilder.loadTexts: hwDs3NationalBit.setDescription('Indicates the national bit of the E3/CE3 interface. n0: indicates the national bit is 0 and the interface supports only the communication within a country. n1: indicates the national bit is 1 and the interface supports the international communication. ')
hwDs3Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("payload", 3), ("cell", 4), ("none", 255))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3Loopback.setStatus('current')
if mibBuilder.loadTexts: hwDs3Loopback.setDescription('Enable the loopback function of the interface. local: enables the local loopback on the interface. remote: enables the remote loopback on the interface. payload: enables the remote payload loopback on the interface. cell: enables the local cell loopback. The local cell loopback is used to test the local physical chip.')
hwDs3CreateSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3CreateSerial.setStatus('current')
if mibBuilder.loadTexts: hwDs3CreateSerial.setDescription('Create serial interface from Ds3 interface. True create serial interface. False destroy serial interface. ')
hwDs3RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3RowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDs3RowStatus.setDescription('This variable is used to create or delete an object.')
hwBundleSerial = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 7))
hwBundleSerialTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 7, 1), )
if mibBuilder.loadTexts: hwBundleSerialTable.setStatus('current')
if mibBuilder.loadTexts: hwBundleSerialTable.setDescription('Indicates the attribute of the serial interface formed by timeslots. This table lists the physical attributes of the serial interface.')
hwBundleSerialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 7, 1, 1), ).setIndexNames((0, "HUAWEI-PORT-MIB", "hwBundleSerialIfIndex"))
if mibBuilder.loadTexts: hwBundleSerialEntry.setStatus('current')
if mibBuilder.loadTexts: hwBundleSerialEntry.setDescription('Indicates the attribute of the serial interface formed by timeslots. This table lists the physical attributes of the serial interface.')
hwBundleSerialIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 7, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwBundleSerialIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwBundleSerialIfIndex.setDescription('Interface index(es) of serial(s) present on the device .')
hwBundleSerialLinkProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ietf", 1), ("nonstandard", 2), ("hdlc", 3), ("ppp", 4), ("lapb", 5), ("atm", 6), ("tdm", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBundleSerialLinkProtocol.setStatus('current')
if mibBuilder.loadTexts: hwBundleSerialLinkProtocol.setDescription('The link-protocol of interface. The serial(s) always use PPP as its link-protocol for default.')
hwBundleSerialTimerHold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBundleSerialTimerHold.setStatus('current')
if mibBuilder.loadTexts: hwBundleSerialTimerHold.setDescription('Indicates the interval for sending Keepalive packets from the serial interface to the peer. The default is 10 seconds.')
hwBundleSerialLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 7, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBundleSerialLoopback.setStatus('current')
if mibBuilder.loadTexts: hwBundleSerialLoopback.setDescription('true: enables the loopback on the serial interface. false: disables the loopback on the serial interface. By default, the loopback on the serial interface is disabled.')
hwBundleSerialCrcVerifyCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBundleSerialCrcVerifyCode.setStatus('current')
if mibBuilder.loadTexts: hwBundleSerialCrcVerifyCode.setDescription('Indicates the length of the CRC verify code. The default is 32.')
hwPortConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11))
hwPortCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 1))
hwPortCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 1, 1)).setObjects(("HUAWEI-PORT-MIB", "hwEthernetObjectGroup"), ("HUAWEI-PORT-MIB", "hwPosObjectGroup"), ("HUAWEI-PORT-MIB", "hwCposObjectGroup"), ("HUAWEI-PORT-MIB", "hwBundleSerialObjectGroup"), ("HUAWEI-PORT-MIB", "hwDs0ChannelBundleObjectGroup"), ("HUAWEI-PORT-MIB", "hwDs1ObjectGroup"), ("HUAWEI-PORT-MIB", "hwDs3ObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPortCompliance = hwPortCompliance.setStatus('current')
if mibBuilder.loadTexts: hwPortCompliance.setDescription('The compliance statement for systems supporting the HUAWEI-PORT-MIB.')
hwPortGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2))
hwEthernetObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 1)).setObjects(("HUAWEI-PORT-MIB", "hwEthernetLoopback"), ("HUAWEI-PORT-MIB", "hwEthernetPortType"), ("HUAWEI-PORT-MIB", "hwEthernetSpeedSet"), ("HUAWEI-PORT-MIB", "hwEthernetDuplex"), ("HUAWEI-PORT-MIB", "hwEthernetNegotiation"), ("HUAWEI-PORT-MIB", "hwEthernetPortTypeOperate"), ("HUAWEI-PORT-MIB", "hwEthernetClock"), ("HUAWEI-PORT-MIB", "hwEthernetFlagJ0Mode"), ("HUAWEI-PORT-MIB", "hwEthernetFlagJ0Value"), ("HUAWEI-PORT-MIB", "hwEthernetFlagJ0Trace"), ("HUAWEI-PORT-MIB", "hwEthernetFlagJ1Mode"), ("HUAWEI-PORT-MIB", "hwEthernetFlagJ1Value"), ("HUAWEI-PORT-MIB", "hwEthernetFlagJ1Trace"), ("HUAWEI-PORT-MIB", "hwEthernetFlagC2Value"), ("HUAWEI-PORT-MIB", "hwEthernetUpHoldTime"), ("HUAWEI-PORT-MIB", "hwEthernetDownHoldTime"), ("HUAWEI-PORT-MIB", "hwEthernetSubinterfaceStatisticEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwEthernetObjectGroup = hwEthernetObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwEthernetObjectGroup.setDescription('The Port attribute group.')
hwPosObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 2)).setObjects(("HUAWEI-PORT-MIB", "hwPosLinkProtocol"), ("HUAWEI-PORT-MIB", "hwPosFrameFormat"), ("HUAWEI-PORT-MIB", "hwPosLoopback"), ("HUAWEI-PORT-MIB", "hwPosScramble"), ("HUAWEI-PORT-MIB", "hwPosClock"), ("HUAWEI-PORT-MIB", "hwPosCrcVerifyCode"), ("HUAWEI-PORT-MIB", "hwPosFlagJ0Mode"), ("HUAWEI-PORT-MIB", "hwPosFlagJ0Value"), ("HUAWEI-PORT-MIB", "hwPosFlagJ0Trace"), ("HUAWEI-PORT-MIB", "hwPosFlagJ1Mode"), ("HUAWEI-PORT-MIB", "hwPosFlagJ1Value"), ("HUAWEI-PORT-MIB", "hwPosFlagJ1Trace"), ("HUAWEI-PORT-MIB", "hwPosFlagC2Value"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPosObjectGroup = hwPosObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwPosObjectGroup.setDescription('The Port attribute group.')
hwCposObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 3)).setObjects(("HUAWEI-PORT-MIB", "hwCposFrameFormat"), ("HUAWEI-PORT-MIB", "hwCposMultiplex"), ("HUAWEI-PORT-MIB", "hwCposClock"), ("HUAWEI-PORT-MIB", "hwCposIfType"), ("HUAWEI-PORT-MIB", "hwCposLoopback"), ("HUAWEI-PORT-MIB", "hwCposFlagJ0Mode"), ("HUAWEI-PORT-MIB", "hwCposFlagJ0Value"), ("HUAWEI-PORT-MIB", "hwCposFlagJ0Trace"), ("HUAWEI-PORT-MIB", "hwCposFlagJ1Mode"), ("HUAWEI-PORT-MIB", "hwCposFlagJ1Value"), ("HUAWEI-PORT-MIB", "hwCposFlagJ1Trace"), ("HUAWEI-PORT-MIB", "hwCposFlagC2Value"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCposObjectGroup = hwCposObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwCposObjectGroup.setDescription('The Port attribute group.')
hwDs0ChannelBundleObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 4)).setObjects(("HUAWEI-PORT-MIB", "hwDs0ChannelBundleIfIndex"), ("HUAWEI-PORT-MIB", "hwDs0ChannelBundleTimeSlots"), ("HUAWEI-PORT-MIB", "hwDs0ChannelBundleSpeed"), ("HUAWEI-PORT-MIB", "hwDs0ChannelBundleRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDs0ChannelBundleObjectGroup = hwDs0ChannelBundleObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwDs0ChannelBundleObjectGroup.setDescription('The Port attribute group.')
hwDs1ObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 5)).setObjects(("HUAWEI-PORT-MIB", "hwDs1ChannelType"), ("HUAWEI-PORT-MIB", "hwDs1IfType"), ("HUAWEI-PORT-MIB", "hwDs1Channelized"), ("HUAWEI-PORT-MIB", "hwDs1CodeType"), ("HUAWEI-PORT-MIB", "hwDs1Clock"), ("HUAWEI-PORT-MIB", "hwDs1FrameFormat"), ("HUAWEI-PORT-MIB", "hwDs1Cable"), ("HUAWEI-PORT-MIB", "hwDs1Loopback"), ("HUAWEI-PORT-MIB", "hwDs1RowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDs1ObjectGroup = hwDs1ObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwDs1ObjectGroup.setDescription('The Port attribute group.')
hwDs3ObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 6)).setObjects(("HUAWEI-PORT-MIB", "hwDs3ChannelType"), ("HUAWEI-PORT-MIB", "hwDs3IfType"), ("HUAWEI-PORT-MIB", "hwDs3Channelized"), ("HUAWEI-PORT-MIB", "hwDs3Clock"), ("HUAWEI-PORT-MIB", "hwDs3FrameFormat"), ("HUAWEI-PORT-MIB", "hwDs3Scramble"), ("HUAWEI-PORT-MIB", "hwDs3Cable"), ("HUAWEI-PORT-MIB", "hwDs3NationalBit"), ("HUAWEI-PORT-MIB", "hwDs3Loopback"), ("HUAWEI-PORT-MIB", "hwDs3CreateSerial"), ("HUAWEI-PORT-MIB", "hwDs3RowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDs3ObjectGroup = hwDs3ObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwDs3ObjectGroup.setDescription('The Port attribute group.')
hwBundleSerialObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 7)).setObjects(("HUAWEI-PORT-MIB", "hwBundleSerialLinkProtocol"), ("HUAWEI-PORT-MIB", "hwBundleSerialTimerHold"), ("HUAWEI-PORT-MIB", "hwBundleSerialCrcVerifyCode"), ("HUAWEI-PORT-MIB", "hwBundleSerialLoopback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBundleSerialObjectGroup = hwBundleSerialObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwBundleSerialObjectGroup.setDescription('The Port attribute group.')
mibBuilder.exportSymbols("HUAWEI-PORT-MIB", hwEthernetPortType=hwEthernetPortType, hwEthernetTable=hwEthernetTable, hwBundleSerialTimerHold=hwBundleSerialTimerHold, hwEthernetFlagJ0Trace=hwEthernetFlagJ0Trace, hwDs3FrameFormat=hwDs3FrameFormat, hwDs3IfIndex=hwDs3IfIndex, hwDs1Loopback=hwDs1Loopback, hwPosLinkProtocol=hwPosLinkProtocol, hwCposObjectGroup=hwCposObjectGroup, hwBundleSerialCrcVerifyCode=hwBundleSerialCrcVerifyCode, hwPosFlagJ0Mode=hwPosFlagJ0Mode, hwCposFlagJ0Mode=hwCposFlagJ0Mode, hwPosFlagC2Value=hwPosFlagC2Value, hwDs1=hwDs1, hwEthernetUpHoldTime=hwEthernetUpHoldTime, hwDs0ChannelBundleDs1ChannelId=hwDs0ChannelBundleDs1ChannelId, hwDs1Channelized=hwDs1Channelized, hwBundleSerialIfIndex=hwBundleSerialIfIndex, hwEthernetFlagJ0Value=hwEthernetFlagJ0Value, hwPosFlagJ1Trace=hwPosFlagJ1Trace, hwPortMIBObjects=hwPortMIBObjects, hwEthernetLoopback=hwEthernetLoopback, hwCposEntry=hwCposEntry, hwBundleSerialLinkProtocol=hwBundleSerialLinkProtocol, hwDs0ChannelBundleEntry=hwDs0ChannelBundleEntry, hwEthernetFlagJ1Value=hwEthernetFlagJ1Value, hwPosTable=hwPosTable, hwCposFlagJ1Value=hwCposFlagJ1Value, hwEthernetObjectGroup=hwEthernetObjectGroup, hwEthernetClock=hwEthernetClock, hwDs3ObjectGroup=hwDs3ObjectGroup, hwEthernetDownHoldTime=hwEthernetDownHoldTime, hwEthernetSubinterfaceStatisticEnable=hwEthernetSubinterfaceStatisticEnable, hwDs3Channelized=hwDs3Channelized, hwDs3ChannelId=hwDs3ChannelId, hwEthernetPortTypeOperate=hwEthernetPortTypeOperate, hwDs1CodeType=hwDs1CodeType, hwPosFlagJ1Mode=hwPosFlagJ1Mode, hwCposTable=hwCposTable, hwDs3ChannelType=hwDs3ChannelType, hwDs3Clock=hwDs3Clock, hwDs1ObjectGroup=hwDs1ObjectGroup, hwEthernetNegotiation=hwEthernetNegotiation, hwCposClock=hwCposClock, hwDs0ChannelBundleParentIfIndex=hwDs0ChannelBundleParentIfIndex, hwDs1ChannelId=hwDs1ChannelId, hwEthernetEntry=hwEthernetEntry, hwPortMIB=hwPortMIB, hwCposLoopback=hwCposLoopback, hwPosFlagJ0Trace=hwPosFlagJ0Trace, hwPos=hwPos, hwDs1Entry=hwDs1Entry, hwDs1Cable=hwDs1Cable, hwDs0ChannelBundleTimeSlots=hwDs0ChannelBundleTimeSlots, hwDs3Scramble=hwDs3Scramble, hwDs1ChannelType=hwDs1ChannelType, hwCposFlagJ1Trace=hwCposFlagJ1Trace, hwBundleSerialObjectGroup=hwBundleSerialObjectGroup, hwCposFrameFormat=hwCposFrameFormat, hwEthernetFlagJ0Mode=hwEthernetFlagJ0Mode, hwDs1ParentIfIndex=hwDs1ParentIfIndex, hwDs3Cable=hwDs3Cable, hwDs1RowStatus=hwDs1RowStatus, hwPosFrameFormat=hwPosFrameFormat, hwPosFlagJ1Value=hwPosFlagJ1Value, hwDs3ParentIfIndex=hwDs3ParentIfIndex, hwCposIfType=hwCposIfType, hwBundleSerialTable=hwBundleSerialTable, hwEthernet=hwEthernet, hwPosFlagJ0Value=hwPosFlagJ0Value, hwDs1Clock=hwDs1Clock, hwDs3IfType=hwDs3IfType, hwBundleSerialLoopback=hwBundleSerialLoopback, hwPosCrcVerifyCode=hwPosCrcVerifyCode, hwEthernetFlagJ1Trace=hwEthernetFlagJ1Trace, hwDs1IfType=hwDs1IfType, hwDs0ChannelBundleRowStatus=hwDs0ChannelBundleRowStatus, hwCposFlagJ0Value=hwCposFlagJ0Value, hwDs0ChannelBundle=hwDs0ChannelBundle, hwDs0ChannelBundleTable=hwDs0ChannelBundleTable, hwCposFlagJ0Trace=hwCposFlagJ0Trace, hwDs1IfIndex=hwDs1IfIndex, hwDs3=hwDs3, hwPosLoopback=hwPosLoopback, hwPortGroups=hwPortGroups, hwDs0ChannelBundleObjectGroup=hwDs0ChannelBundleObjectGroup, hwPortCompliances=hwPortCompliances, hwDs0ChannelBundleSpeed=hwDs0ChannelBundleSpeed, hwCpos=hwCpos, hwEthernetIfIndex=hwEthernetIfIndex, hwDs1Table=hwDs1Table, hwDs3Entry=hwDs3Entry, hwEthernetSpeedSet=hwEthernetSpeedSet, hwCposFlagJ1Mode=hwCposFlagJ1Mode, PYSNMP_MODULE_ID=hwPortMIB, hwPosScramble=hwPosScramble, hwCposIfIndex=hwCposIfIndex, hwDs3NationalBit=hwDs3NationalBit, hwPosClock=hwPosClock, hwDs3Loopback=hwDs3Loopback, hwDs0ChannelBundleIfIndex=hwDs0ChannelBundleIfIndex, hwCposMultiplex=hwCposMultiplex, hwPosIfIndex=hwPosIfIndex, hwDs1FrameFormat=hwDs1FrameFormat, hwEthernetFlagJ1Mode=hwEthernetFlagJ1Mode, hwPosObjectGroup=hwPosObjectGroup, hwBundleSerial=hwBundleSerial, hwBundleSerialEntry=hwBundleSerialEntry, hwDs3CreateSerial=hwDs3CreateSerial, hwDs0ChannelBundleId=hwDs0ChannelBundleId, hwDs3RowStatus=hwDs3RowStatus, hwCposFlagC2Value=hwCposFlagC2Value, hwDs3Table=hwDs3Table, hwPortCompliance=hwPortCompliance, hwEthernetFlagC2Value=hwEthernetFlagC2Value, hwPortConformance=hwPortConformance, hwPosEntry=hwPosEntry, hwEthernetDuplex=hwEthernetDuplex)
