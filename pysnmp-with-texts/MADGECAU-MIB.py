#
# PySNMP MIB module MADGECAU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MADGECAU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:09:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, enterprises, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, TimeTicks, Unsigned32, MibIdentifier, Gauge32, ModuleIdentity, NotificationType, IpAddress, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "enterprises", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "TimeTicks", "Unsigned32", "MibIdentifier", "Gauge32", "ModuleIdentity", "NotificationType", "IpAddress", "iso", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
madge = MibIdentifier((1, 3, 6, 1, 4, 1, 494))
madgeCau = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 2))
madgeCauTop = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 2, 1))
madgeCauInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 2, 2))
madgeCauLam = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 2, 3))
madgeCauLCD = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 2, 5))
madgeCauAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 2, 6))
madgeCauConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 2, 7))
madgeCauNewConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 2, 8))
madgeCauSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 2, 9))
madgeCauFault = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 2, 10))
madgeCauKill = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 2, 11))
madgeCauTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 2, 12))
madgeCauTopWrap = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("wrap-ri", 2), ("wrap-ro", 3), ("wrap-both", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauTopWrap.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauTopWrap.setDescription('The current wrap state of the cau.')
madgeCauTopWrapCtrl = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("wrap-ri", 2), ("wrap-ro", 3), ("wrap-both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauTopWrapCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauTopWrapCtrl.setDescription('The administratively-assigned wrap state of the cau.')
madgeCauTopRIType = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fibre", 1), ("copper", 2), ("utp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauTopRIType.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauTopRIType.setDescription('The cable type of the Ring In (RI) port.')
madgeCauTopRIState = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSignal", 1), ("yesSignal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauTopRIState.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauTopRIState.setDescription('The state of the Token Ring Signal associated with the Ring In (RI) port.')
madgeCauTopROType = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fibre", 1), ("copper", 2), ("utp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauTopROType.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauTopROType.setDescription('The cable type of the Ring Out (RO) port.')
madgeCauTopROState = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSignal", 1), ("yesSignal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauTopROState.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauTopROState.setDescription('The state of the Token Ring Signal associated with the Ring Out (RO) port.')
madgeCauTopBackupRing = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("beaconing", 1), ("normal", 2), ("badly-cabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauTopBackupRing.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauTopBackupRing.setDescription('The state of the backup ring.')
madgeCauTopBackupUsed = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unUsed", 1), ("used", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauTopBackupUsed.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauTopBackupUsed.setDescription('Whether the backup ring is in use or not.')
madgeCauInfoVersion = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauInfoVersion.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauInfoVersion.setDescription('The version information. It has the following format:- chars[0-12] are the file name of the download image char[13] is the major version number char[14] is the minor version number char[15] is the development version number char[16] is the hardware version number')
madgeCauInfoRemoval = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauInfoRemoval.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauInfoRemoval.setDescription('The removal threshold, this controls how many times a faulty but persistent node is allowed to attempt to insert into the ring before its port is permanently disabled.')
madgeCauInfoSRNet = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauInfoSRNet.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauInfoSRNet.setDescription('The source-routing ring number of the device.')
madgeCauInfoIPXNet = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauInfoIPXNet.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauInfoIPXNet.setDescription('The IPX network number of the device.')
madgeCauInfoFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauInfoFanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauInfoFanSpeed.setDescription('The fan speed of the device in rps (revolutions per second.')
madgeCauInfoTherm = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauInfoTherm.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauInfoTherm.setDescription('The temperature of the device in degrees Celsius.')
madgeCauInfoType = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5, 7))).clone(namedValues=NamedValues(("smartCau", 2), ("smartCauPlus", 3), ("smartRam", 5), ("smartRamPlus", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauInfoType.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauInfoType.setDescription('The product identity of the device.')
madgeCauLamTable = MibTable((1, 3, 6, 1, 4, 1, 494, 2, 3, 1), )
if mibBuilder.loadTexts: madgeCauLamTable.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauLamTable.setDescription('The table of information on all LAMs.')
madgeCauLamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 2, 3, 1, 1), ).setIndexNames((0, "MADGECAU-MIB", "madgeCauLamNo"))
if mibBuilder.loadTexts: madgeCauLamEntry.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauLamEntry.setDescription('Information on one LAM.')
madgeCauLamNo = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauLamNo.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauLamNo.setDescription("The LAM to which this entry's addressing information pertains.")
madgeCauLamType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noLam", 1), ("ibmLam", 2), ("utpLam", 3), ("stpLam", 4), ("node", 5), ("badlyCabled", 6), ("mau", 8), ("userMau", 9), ("raylanLam", 10), ("utpLam2", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauLamType.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauLamType.setDescription('The type of LAM.')
madgeCauLamState = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 7, 8))).clone(namedValues=NamedValues(("noLam", 1), ("nodeInserting", 4), ("inserted", 5), ("wrongSpeed", 7), ("fault", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauLamState.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauLamState.setDescription('The LAM status of the LAM.')
madgeCauLamAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lamEnabled", 1), ("lamDisabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauLamAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauLamAdminState.setDescription('The administrated status of the LAM.')
madgeCauLamAllPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauLamAllPorts.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauLamAllPorts.setDescription('An array of states for all 20 ports on the LAM.')
madgeCauLamSpeedDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sdDisabled", 1), ("sdEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauLamSpeedDetect.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauLamSpeedDetect.setDescription('Whether or not automatic speed detection is enabled.')
madgeCauLCDMax = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauLCDMax.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauLCDMax.setDescription('The maximum number of LCD messages.')
madgeCauLCDCurrent = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauLCDCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauLCDCurrent.setDescription('The current LCD message number.')
madgeCauLCDTable = MibTable((1, 3, 6, 1, 4, 1, 494, 2, 5, 3), )
if mibBuilder.loadTexts: madgeCauLCDTable.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauLCDTable.setDescription('The table of information on all LCDs.')
madgeCauLCDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 2, 5, 3, 1), ).setIndexNames((0, "MADGECAU-MIB", "madgeCauLCDNo"))
if mibBuilder.loadTexts: madgeCauLCDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauLCDEntry.setDescription('Information on one LCD.')
madgeCauLCDNo = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauLCDNo.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauLCDNo.setDescription('The LCD number.')
madgeCauLCDInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauLCDInfo.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauLCDInfo.setDescription('The LCD message.')
madgeCauAddrTable = MibTable((1, 3, 6, 1, 4, 1, 494, 2, 6, 1), )
if mibBuilder.loadTexts: madgeCauAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauAddrTable.setDescription('The table of addresses of all Ports.')
madgeCauAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 2, 6, 1, 1), ).setIndexNames((0, "MADGECAU-MIB", "madgeCauAddrLamNo"), (0, "MADGECAU-MIB", "madgeCauAddrPortNo"))
if mibBuilder.loadTexts: madgeCauAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauAddrEntry.setDescription('Address information on one Port.')
madgeCauAddrLamNo = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauAddrLamNo.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauAddrLamNo.setDescription('The LAM number.')
madgeCauAddrPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauAddrPortNo.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauAddrPortNo.setDescription('The port number. Note that port number 21 refers to the LAM itself.')
madgeCauAddrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 6, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauAddrInfo.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauAddrInfo.setDescription('An array of MacAddresses.')
madgeCauAddrAllowedNode = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 6, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauAddrAllowedNode.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauAddrAllowedNode.setDescription('Node address of node allowed on this LAM port. If this value is 000000000000 then any nodes are allowed.')
madgeCauConfigLAA = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 7, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauConfigLAA.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauConfigLAA.setDescription('The current MacAddresses of the device. This can be set to a LAA (Locally Administrated Address) with an address range of 4000 XXXX XXXX - 7FEF XXXX XXXX.')
madgeCauConfigNodePort = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noActiveNodeMatching", 1), ("doActiveNodeMatching", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauConfigNodePort.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauConfigNodePort.setDescription('Setting this value forces the device to perform a node-port matching algorithm.')
madgeCauConfig24HourClock = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clock12Hour", 1), ("clock24Hour", 2), ("clockNotSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauConfig24HourClock.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauConfig24HourClock.setDescription('Whether the clock displayed on the device is 24 or 12 hour based.')
madgeCauConfigClock = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 7, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauConfigClock.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauConfigClock.setDescription('The time in seconds since 1st Jan 1980.')
madgeCauConfigPromiscousRmon = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("promiscuousRmonOff", 2), ("promiscuousRmonOn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauConfigPromiscousRmon.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauConfigPromiscousRmon.setDescription('The current state of Promiscuous Remote Network Monitoring (RMON) on the device.')
madgeCauNewConfigMauStore = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mauDeduce", 1), ("mauRecall", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauNewConfigMauStore.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauNewConfigMauStore.setDescription('MAU devices attached to the ring may be deduced in real time, however, sometimes the CAU will get it wrong. This is an unsolvable problem. To get round this, the MAU topology may be saved in the configuation ROM so that the calculation does not have to be performed each time. This variable determines how the MAU topology will be found.')
madgeCauNewConfigNonPromiscuousRmon = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonPromiscuousRmonOff", 1), ("nonPromiscuousRmonOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauNewConfigNonPromiscuousRmon.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauNewConfigNonPromiscuousRmon.setDescription('The current state of Non-Promiscuous Remote Network Monitoring (RMON) on the device.')
madgeCauNewConfigSAPControl = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sapsDisabled", 1), ("sapsEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauNewConfigSAPControl.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauNewConfigSAPControl.setDescription('Enables or disables the generation of IPX service advert (SAP) frames.')
madgeCauSecurityPMAnnounce = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pmAnnounceOff", 1), ("pmAnnounceOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauSecurityPMAnnounce.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityPMAnnounce.setDescription('Whether or not to transmit Promiscuous Mode announcement frames when promiscuous RMON is in use.')
madgeCauSecurityPMSafePollTimer = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauSecurityPMSafePollTimer.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityPMSafePollTimer.setDescription('The period, in seconds, between each poll to discover rogue nodes, etc..')
madgeCauSecurityPMSafeReplyTimeout = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauSecurityPMSafeReplyTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityPMSafeReplyTimeout.setDescription('The interval, in seconds, within which a reply must be recieved for a pm-safe? request.')
madgeCauSecurityPMSafeRetries = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauSecurityPMSafeRetries.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityPMSafeRetries.setDescription('The number of attempts which will be made to determine whether a node is pm-safe before giving up.')
madgeCauSecurityAllowedManufacturers = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allManufacturers", 1), ("madgeIBMOnly", 2), ("madgeOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauSecurityAllowedManufacturers.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityAllowedManufacturers.setDescription('Defines which manufacturers are legal on the ring.')
madgeCauSecurityActionPM = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("inform", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauSecurityActionPM.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityActionPM.setDescription("Defines what happens when the CAU detects a node in Promiscuous Mode that shouldn't be.")
madgeCauSecurityActionPMUnsafe = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("inform", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauSecurityActionPMUnsafe.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityActionPMUnsafe.setDescription('Defines what happens when the CAU detects a node that is not PM-safe (unless listed as an exception).')
madgeCauSecurityActionRogueNode = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("inform", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauSecurityActionRogueNode.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityActionRogueNode.setDescription('Defines what happens when the CAU detects a rogue node (unless listed as an exception).')
madgeCauSecurityActionIllegalMF = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("inform", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauSecurityActionIllegalMF.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityActionIllegalMF.setDescription('Defines what happens when the CAU detects a node whose manufacturer is considered illegal (unless the node is listed as an exception).')
madgeCauSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 494, 2, 9, 10), )
if mibBuilder.loadTexts: madgeCauSecurityTable.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityTable.setDescription('Table of information on all nodes which are allowed to be on the ring despite some disqualifying factor. Note that this is a sparse table - see description of madgeCauSecurityNodeAddress.')
madgeCauSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 2, 9, 10, 1), ).setIndexNames((0, "MADGECAU-MIB", "madgeCauSecurityIndex"))
if mibBuilder.loadTexts: madgeCauSecurityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityEntry.setDescription('Information on one node which is allowed to be on the ring despite some disqualifying factor.')
madgeCauSecurityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 9, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauSecurityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityIndex.setDescription("The table entry to which this entry's information pertains.")
madgeCauSecurityNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 9, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauSecurityNodeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityNodeAddress.setDescription('The node address of the node which is allowed on the ring if the right conditions are met. If this entry reads as all zeros then this is an empty table entry. Writing all zeroes to this field will clear the table entry completely (including all exceptions).')
madgeCauSecurityExceptionPM = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 9, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disallow", 1), ("allow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauSecurityExceptionPM.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityExceptionPM.setDescription('Whether or not the CAU allows the node on the ring if it enters Promiscuous Mode.')
madgeCauSecurityExceptionPMUnsafe = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 9, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disallow", 1), ("allow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauSecurityExceptionPMUnsafe.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityExceptionPMUnsafe.setDescription('Whether or not the CAU allows the node on the ring if it is Promiscuous-Mode-Unsafe.')
madgeCauSecurityExceptionRogueNode = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 9, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disallow", 1), ("allow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauSecurityExceptionRogueNode.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityExceptionRogueNode.setDescription('Whether or not the CAU allows the node on the ring if it is considered a rogue node.')
madgeCauSecurityExceptionIllegalMF = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 9, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disallow", 1), ("allow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauSecurityExceptionIllegalMF.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityExceptionIllegalMF.setDescription("Whether or not the CAU allows the node on the ring if it's manufacturer is consdered illegal.")
madgeCauSecurityExceptionWrongNode = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 2, 9, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disallow", 1), ("allow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauSecurityExceptionWrongNode.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityExceptionWrongNode.setDescription('Whether or not the CAU allows the node on the ring if it is plugged into the wrong port.')
madgeCauSecurityActionWrongNode = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 9, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("inform", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauSecurityActionWrongNode.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityActionWrongNode.setDescription('Defines what happens when the CAU detects a node trying to open on a port for which it does not have legal access.')
madgeCauSecurityExtendedException = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oldModeOnly", 1), ("inOldMode", 2), ("inNewMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauSecurityExtendedException.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauSecurityExtendedException.setDescription('The new mode extends the exception list from 24 nodes to 160 nodes. However, to do this it must reduce the location and comments fields and not save the port security data. This might not be possible in some cases and an erase configuration is the only cure. This is supported in microcode 4.20 and later.')
madgeCauFaultRPFailAction = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("inform", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauFaultRPFailAction.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauFaultRPFailAction.setDescription('Defines what happens when the CAU detects a ring poll failure.')
madgeCauFaultBeaconDefault = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauFaultBeaconDefault.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauFaultBeaconDefault.setDescription('DEFAULT number of successive beacon frames from one node before a problem is noticed.')
madgeCauFaultBeaconThreshold = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauFaultBeaconThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauFaultBeaconThreshold.setDescription('Number of successive beacon frames from one node before a problem is noticed.')
madgeCauFaultBeaconAction = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("inform", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauFaultBeaconAction.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauFaultBeaconAction.setDescription('Defines what happens when the CAU detects a succession of beacon frames from the same node.')
madgeCauFaultRingPurgeDefault = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauFaultRingPurgeDefault.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauFaultRingPurgeDefault.setDescription('DEFAULT number of successive ring purge frames from one node before a problem is noticed.')
madgeCauFaultRingPurgeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauFaultRingPurgeThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauFaultRingPurgeThreshold.setDescription('Number of successive ring purge frames from one node before a problem is noticed.')
madgeCauFaultRingPurgeAction = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("inform", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauFaultRingPurgeAction.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauFaultRingPurgeAction.setDescription('Defines what happens when the CAU detects a succession of ring purge frames from the same node.')
madgeCauFaultIsoErrDefault = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 10, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauFaultIsoErrDefault.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauFaultIsoErrDefault.setDescription('DEFAULT number of isolating errors (scaled by a factor of 6) before a problem is noticed.')
madgeCauFaultIsoErrThreshold = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauFaultIsoErrThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauFaultIsoErrThreshold.setDescription('Number of isolating errors (scaled by a factor of 6) before a problem is noticed.')
madgeCauFaultIsoErrAction = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 10, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("inform", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: madgeCauFaultIsoErrAction.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauFaultIsoErrAction.setDescription('Defines what happens when the CAU detects too many isolating errors.')
madgeCauKillNodeAddress = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 11, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauKillNodeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauKillNodeAddress.setDescription('The node address to which the rest of the information in this group pertains.')
madgeCauKillReason = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("reasonUnknown", 1), ("pmViolation", 2), ("pmUnsafe", 3), ("rogueNode", 4), ("illegalManufacturer", 5), ("ringPollFailure", 6), ("beaconing", 7), ("ringPurges", 8), ("isolatingErrors", 9), ("wrongNode", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauKillReason.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauKillReason.setDescription('The reason the node was noticed.')
madgeCauKillStatus = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("information", 1), ("aboutToKill", 2), ("killFailed", 3), ("killed", 4), ("killAbandoned", 5), ("resurrected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauKillStatus.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauKillStatus.setDescription('What exactly has happened to the node.')
madgeCauKillLamNo = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauKillLamNo.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauKillLamNo.setDescription('LAM into which offending node is plugged.')
madgeCauKillPortNo = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 11, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauKillPortNo.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauKillPortNo.setDescription('LAM port into which offending node is plugged.')
madgeCauTrapInfoLamNo = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauTrapInfoLamNo.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauTrapInfoLamNo.setDescription('Relevant LAM number.')
madgeCauTrapInfoPortNo = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauTrapInfoPortNo.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauTrapInfoPortNo.setDescription('Relevant Port number. A port number of 21 refers to the LAM itself')
madgeCauTrapInfoState = MibScalar((1, 3, 6, 1, 4, 1, 494, 2, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noNode", 1), ("inserted", 2), ("wrongSpeed", 3), ("fault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: madgeCauTrapInfoState.setStatus('mandatory')
if mibBuilder.loadTexts: madgeCauTrapInfoState.setDescription('The status of the node.')
backupPathStateChange = NotificationType((1, 3, 6, 1, 4, 1, 494, 2) + (0,1)).setObjects(("MADGECAU-MIB", "madgeCauTopBackupRing"))
if mibBuilder.loadTexts: backupPathStateChange.setDescription('This trap is sent when the state of the backup ring changes.')
backupPathStateUse = NotificationType((1, 3, 6, 1, 4, 1, 494, 2) + (0,2)).setObjects(("MADGECAU-MIB", "madgeCauTopBackupUsed"))
if mibBuilder.loadTexts: backupPathStateUse.setDescription('This trap is sent when the state of the backup usage changes.')
wrapStateChange = NotificationType((1, 3, 6, 1, 4, 1, 494, 2) + (0,3)).setObjects(("MADGECAU-MIB", "madgeCauTopWrap"))
if mibBuilder.loadTexts: wrapStateChange.setDescription('This trap is sent when the wrap state of the cau changes.')
lamPortDisabled = NotificationType((1, 3, 6, 1, 4, 1, 494, 2) + (0,4))
if mibBuilder.loadTexts: lamPortDisabled.setDescription('This trap is sent when a LAM port is disabled due to either a wrong speed node inserting or a faulty node being detected.')
mCaufanSpeedFailed = NotificationType((1, 3, 6, 1, 4, 1, 494, 2) + (0,5)).setObjects(("MADGECAU-MIB", "madgeCauInfoFanSpeed"))
if mibBuilder.loadTexts: mCaufanSpeedFailed.setDescription('This trap is sent when the fan has failed.')
temperatureExceeded = NotificationType((1, 3, 6, 1, 4, 1, 494, 2) + (0,6)).setObjects(("MADGECAU-MIB", "madgeCauInfoTherm"))
if mibBuilder.loadTexts: temperatureExceeded.setDescription('This trap is sent when the temperature of the device has exceeded safe limits.')
killInformation = NotificationType((1, 3, 6, 1, 4, 1, 494, 2) + (0,7)).setObjects(("MADGECAU-MIB", "madgeCauKillNodeAddress"), ("MADGECAU-MIB", "madgeCauKillReason"), ("MADGECAU-MIB", "madgeCauKillStatus"))
if mibBuilder.loadTexts: killInformation.setDescription('A node has been noticed, and possibly removed from or reinserted onto the ring.')
killInformation2 = NotificationType((1, 3, 6, 1, 4, 1, 494, 2) + (0,8)).setObjects(("MADGECAU-MIB", "madgeCauKillNodeAddress"), ("MADGECAU-MIB", "madgeCauKillReason"), ("MADGECAU-MIB", "madgeCauKillStatus"), ("MADGECAU-MIB", "madgeCauKillLamNo"), ("MADGECAU-MIB", "madgeCauKillPortNo"))
if mibBuilder.loadTexts: killInformation2.setDescription('A node has been noticed, and possibly removed from or reinserted onto the ring. Same as killInformation but with extra information.')
lamPortDisabled2 = NotificationType((1, 3, 6, 1, 4, 1, 494, 2) + (0,9)).setObjects(("MADGECAU-MIB", "madgeCauTrapInfoLamNo"), ("MADGECAU-MIB", "madgeCauTrapInfoPortNo"), ("MADGECAU-MIB", "madgeCauTrapInfoState"))
if mibBuilder.loadTexts: lamPortDisabled2.setDescription('This trap is sent when a LAM port is disabled due to either a wrong speed node inserting or a faulty node being detected.')
lamStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 494, 2) + (0,10)).setObjects(("MADGECAU-MIB", "madgeCauTrapInfoLamNo"), ("MADGECAU-MIB", "madgeCauTrapInfoState"))
if mibBuilder.loadTexts: lamStateChanged.setDescription('A LAM has joined or left the ring.')
mibBuilder.exportSymbols("MADGECAU-MIB", madgeCauSecurityPMSafeReplyTimeout=madgeCauSecurityPMSafeReplyTimeout, madgeCauLamNo=madgeCauLamNo, madgeCauFault=madgeCauFault, madgeCauInfoIPXNet=madgeCauInfoIPXNet, madgeCauLamType=madgeCauLamType, madgeCauConfigNodePort=madgeCauConfigNodePort, madgeCauLCDEntry=madgeCauLCDEntry, madgeCauAddrEntry=madgeCauAddrEntry, killInformation2=killInformation2, madgeCauInfoVersion=madgeCauInfoVersion, madgeCau=madgeCau, wrapStateChange=wrapStateChange, madgeCauLamEntry=madgeCauLamEntry, madgeCauSecurityPMAnnounce=madgeCauSecurityPMAnnounce, madgeCauTrapInfoState=madgeCauTrapInfoState, lamPortDisabled2=lamPortDisabled2, madgeCauTopWrapCtrl=madgeCauTopWrapCtrl, temperatureExceeded=temperatureExceeded, madgeCauTrapInfoLamNo=madgeCauTrapInfoLamNo, madgeCauConfig24HourClock=madgeCauConfig24HourClock, madgeCauSecurityAllowedManufacturers=madgeCauSecurityAllowedManufacturers, madgeCauSecurityExtendedException=madgeCauSecurityExtendedException, madgeCauSecurityPMSafePollTimer=madgeCauSecurityPMSafePollTimer, madgeCauKillStatus=madgeCauKillStatus, madge=madge, madgeCauTop=madgeCauTop, lamStateChanged=lamStateChanged, madgeCauAddrPortNo=madgeCauAddrPortNo, madgeCauSecurityTable=madgeCauSecurityTable, madgeCauLCD=madgeCauLCD, madgeCauFaultBeaconDefault=madgeCauFaultBeaconDefault, madgeCauAddrLamNo=madgeCauAddrLamNo, madgeCauAddrTable=madgeCauAddrTable, madgeCauSecurityActionWrongNode=madgeCauSecurityActionWrongNode, madgeCauSecurityIndex=madgeCauSecurityIndex, madgeCauTopRIState=madgeCauTopRIState, madgeCauNewConfig=madgeCauNewConfig, madgeCauNewConfigSAPControl=madgeCauNewConfigSAPControl, backupPathStateChange=backupPathStateChange, madgeCauSecurityActionPM=madgeCauSecurityActionPM, madgeCauSecurityNodeAddress=madgeCauSecurityNodeAddress, madgeCauInfoType=madgeCauInfoType, madgeCauLCDMax=madgeCauLCDMax, madgeCauLCDNo=madgeCauLCDNo, madgeCauFaultRingPurgeThreshold=madgeCauFaultRingPurgeThreshold, madgeCauSecurityExceptionRogueNode=madgeCauSecurityExceptionRogueNode, madgeCauAddr=madgeCauAddr, madgeCauSecurityExceptionPMUnsafe=madgeCauSecurityExceptionPMUnsafe, backupPathStateUse=backupPathStateUse, madgeCauNewConfigNonPromiscuousRmon=madgeCauNewConfigNonPromiscuousRmon, madgeCauInfoTherm=madgeCauInfoTherm, madgeCauFaultRingPurgeAction=madgeCauFaultRingPurgeAction, madgeCauFaultIsoErrAction=madgeCauFaultIsoErrAction, madgeCauTrapInfo=madgeCauTrapInfo, madgeCauSecurityActionRogueNode=madgeCauSecurityActionRogueNode, madgeCauTopRIType=madgeCauTopRIType, madgeCauAddrInfo=madgeCauAddrInfo, madgeCauConfig=madgeCauConfig, madgeCauTopBackupUsed=madgeCauTopBackupUsed, madgeCauTopBackupRing=madgeCauTopBackupRing, madgeCauKill=madgeCauKill, madgeCauSecurityEntry=madgeCauSecurityEntry, madgeCauSecurity=madgeCauSecurity, madgeCauLCDInfo=madgeCauLCDInfo, madgeCauFaultBeaconThreshold=madgeCauFaultBeaconThreshold, madgeCauKillNodeAddress=madgeCauKillNodeAddress, madgeCauFaultIsoErrThreshold=madgeCauFaultIsoErrThreshold, madgeCauFaultRingPurgeDefault=madgeCauFaultRingPurgeDefault, madgeCauLamAdminState=madgeCauLamAdminState, madgeCauTopROState=madgeCauTopROState, madgeCauInfoSRNet=madgeCauInfoSRNet, madgeCauInfo=madgeCauInfo, mCaufanSpeedFailed=mCaufanSpeedFailed, madgeCauNewConfigMauStore=madgeCauNewConfigMauStore, madgeCauSecurityPMSafeRetries=madgeCauSecurityPMSafeRetries, madgeCauLam=madgeCauLam, madgeCauSecurityActionIllegalMF=madgeCauSecurityActionIllegalMF, madgeCauInfoRemoval=madgeCauInfoRemoval, madgeCauConfigPromiscousRmon=madgeCauConfigPromiscousRmon, madgeCauKillReason=madgeCauKillReason, madgeCauLCDTable=madgeCauLCDTable, madgeCauSecurityExceptionIllegalMF=madgeCauSecurityExceptionIllegalMF, madgeCauFaultIsoErrDefault=madgeCauFaultIsoErrDefault, madgeCauTrapInfoPortNo=madgeCauTrapInfoPortNo, madgeCauConfigClock=madgeCauConfigClock, madgeCauTopROType=madgeCauTopROType, madgeCauLamState=madgeCauLamState, madgeCauFaultBeaconAction=madgeCauFaultBeaconAction, lamPortDisabled=lamPortDisabled, madgeCauLamAllPorts=madgeCauLamAllPorts, madgeCauAddrAllowedNode=madgeCauAddrAllowedNode, madgeCauConfigLAA=madgeCauConfigLAA, madgeCauLCDCurrent=madgeCauLCDCurrent, madgeCauInfoFanSpeed=madgeCauInfoFanSpeed, killInformation=killInformation, madgeCauLamTable=madgeCauLamTable, madgeCauSecurityExceptionWrongNode=madgeCauSecurityExceptionWrongNode, madgeCauKillPortNo=madgeCauKillPortNo, madgeCauSecurityActionPMUnsafe=madgeCauSecurityActionPMUnsafe, madgeCauFaultRPFailAction=madgeCauFaultRPFailAction, madgeCauLamSpeedDetect=madgeCauLamSpeedDetect, madgeCauSecurityExceptionPM=madgeCauSecurityExceptionPM, madgeCauKillLamNo=madgeCauKillLamNo, madgeCauTopWrap=madgeCauTopWrap)
