#
# PySNMP MIB module RBN-MEMORY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-MEMORY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:53:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
RbnKBytes, = mibBuilder.importSymbols("RBN-TC", "RbnKBytes")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, ObjectIdentity, IpAddress, Integer32, TimeTicks, NotificationType, MibIdentifier, Gauge32, Counter32, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "IpAddress", "Integer32", "TimeTicks", "NotificationType", "MibIdentifier", "Gauge32", "Counter32", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rbnMemoryMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 16))
rbnMemoryMib.setRevisions(('2004-03-05 17:00', '2002-06-26 00:00', '2002-01-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnMemoryMib.setRevisionsDescriptions(('Obsoleted rbnSmsMemoryTable and corresponding conformance information.', 'Updated CONTACT-INFO. Added rbnMemoryTable, rbnMemoryGroup conformance group, and compliance statements. Deprecated rbnSmsMemoryTable and conformance information relevant to the table.', 'Initial version.',))
if mibBuilder.loadTexts: rbnMemoryMib.setLastUpdated('200403051700Z')
if mibBuilder.loadTexts: rbnMemoryMib.setOrganization('Redback Networks, Inc.')
if mibBuilder.loadTexts: rbnMemoryMib.setContactInfo(' RedBack Networks, Inc. Postal: 300 Holger Way San Jose, CA 95134-1362 USA Phone: +1 408 750 5000 Fax: +1 408 750 5599 E-mail: mib-info@redback.com')
if mibBuilder.loadTexts: rbnMemoryMib.setDescription('Defines the objects necessary to obtain information allowing monitoring of system memory usage in a Redback device.')
rbnMemoryMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 16, 0))
rbnMemoryMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1))
rbnMemoryMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 16, 2))
rbnSmsMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 1), )
if mibBuilder.loadTexts: rbnSmsMemoryTable.setStatus('obsolete')
if mibBuilder.loadTexts: rbnSmsMemoryTable.setDescription('This table contains the objects which identify information about SMS memory usage. This table has been obsoleted. The new rbnMemoryTable must be used instead.')
rbnSmsMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 1, 1), ).setIndexNames((0, "RBN-MEMORY-MIB", "rbnSmsMemoryIndex"))
if mibBuilder.loadTexts: rbnSmsMemoryEntry.setStatus('obsolete')
if mibBuilder.loadTexts: rbnSmsMemoryEntry.setDescription('A conceptual row in the rbnSmsMemoryTable. This Entry has been obsoleted. The new rbnMemoryEntry must be used instead.')
rbnSmsMemoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: rbnSmsMemoryIndex.setStatus('obsolete')
if mibBuilder.loadTexts: rbnSmsMemoryIndex.setDescription('A unique identifier for an entry in this table.')
rbnSmsMemoryModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSmsMemoryModule.setStatus('obsolete')
if mibBuilder.loadTexts: rbnSmsMemoryModule.setDescription("The name of the module. This name is the same as that which would be displayed via the `show memory' CLI command. Examples would be CE, FE, SM 2, CM 3.")
rbnSmsMemoryFreeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSmsMemoryFreeBytes.setStatus('obsolete')
if mibBuilder.loadTexts: rbnSmsMemoryFreeBytes.setDescription('The number of unused bytes of memory in this entry.')
rbnSmsMemoryBytesInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSmsMemoryBytesInUse.setStatus('obsolete')
if mibBuilder.loadTexts: rbnSmsMemoryBytesInUse.setDescription('The number of bytes of memory in use in this entry.')
rbnSmsMemoryBlocksInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSmsMemoryBlocksInUse.setStatus('obsolete')
if mibBuilder.loadTexts: rbnSmsMemoryBlocksInUse.setDescription('The number of blocks of memory in use in this entry. A block of memory is the amount of memory returned by a single call to the memory allocation routine in AOS. Hence the size of a block of memory is variable. This statistic can be used to check for memory leaks. One possible strategy is to note the value, do some operations, undo the operations, then check the value again - the start and end values should match. If they do not, there may be a memory leak.')
rbnSmsMemoryCumulBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSmsMemoryCumulBlocks.setStatus('obsolete')
if mibBuilder.loadTexts: rbnSmsMemoryCumulBlocks.setDescription('The cumulative blocks count for this entry. It is an indication of how many times the memory allocation in AOS has been called since the system booted. It can be used to measure the expense of an operation in terms of calls to allocate memory, which are fairly expensive in terms of CPU time.')
rbnMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 2), )
if mibBuilder.loadTexts: rbnMemoryTable.setStatus('current')
if mibBuilder.loadTexts: rbnMemoryTable.setDescription('This table contains the objects which identify information about memory usage.')
rbnMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 2, 1), ).setIndexNames((0, "RBN-MEMORY-MIB", "rbnMemoryIndex"))
if mibBuilder.loadTexts: rbnMemoryEntry.setStatus('current')
if mibBuilder.loadTexts: rbnMemoryEntry.setDescription('A conceptual row in the rbnMemoryTable.')
rbnMemoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: rbnMemoryIndex.setStatus('current')
if mibBuilder.loadTexts: rbnMemoryIndex.setDescription('A unique identifier for an entry in this table.')
rbnMemoryModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMemoryModule.setStatus('current')
if mibBuilder.loadTexts: rbnMemoryModule.setDescription('The name of the module on which this memory resides.')
rbnMemoryFreeKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 2, 1, 3), RbnKBytes()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMemoryFreeKBytes.setStatus('current')
if mibBuilder.loadTexts: rbnMemoryFreeKBytes.setDescription('The size of unused memory in this entry.')
rbnMemoryKBytesInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 2, 1, 4), RbnKBytes()).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMemoryKBytesInUse.setStatus('current')
if mibBuilder.loadTexts: rbnMemoryKBytesInUse.setDescription('The size of memory in use in this entry.')
rbnMemoryBlocksInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMemoryBlocksInUse.setStatus('current')
if mibBuilder.loadTexts: rbnMemoryBlocksInUse.setDescription('The number of blocks of memory on this module which is in use. A block of memory is a unit of physical/virtual memory that can be allocated or freed by the user. This statistic can be used to check for memory leaks. One possible strategy is to note the value, do some operations, undo the operations, then check the value again - the start and end values should match. If they do not, there may be a memory leak.')
rbnMemoryCumulBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 16, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnMemoryCumulBlocks.setStatus('current')
if mibBuilder.loadTexts: rbnMemoryCumulBlocks.setDescription('The cumulative blocks count for this entry. For example, in some systems, this indicates how many times the memory allocation routine has been called since the system booted. Then, this can be used to measure the expense of an operation because the calls to allocate memory are often considered to be cpu-intensive.')
rbnSmsMemoryCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 16, 2, 1))
rbnSmsMemoryGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 16, 2, 2))
rbnMemoryCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 16, 2, 3))
rbnMemoryGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 16, 2, 4))
rbnMemoryCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 16, 2, 3, 1)).setObjects(("RBN-MEMORY-MIB", "rbnMemoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnMemoryCompliance = rbnMemoryCompliance.setStatus('current')
if mibBuilder.loadTexts: rbnMemoryCompliance.setDescription('The requirements for conformance to the Redback Memory Usage MIB.')
rbnMemoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 16, 2, 4, 1)).setObjects(("RBN-MEMORY-MIB", "rbnMemoryModule"), ("RBN-MEMORY-MIB", "rbnMemoryFreeKBytes"), ("RBN-MEMORY-MIB", "rbnMemoryKBytesInUse"), ("RBN-MEMORY-MIB", "rbnMemoryBlocksInUse"), ("RBN-MEMORY-MIB", "rbnMemoryCumulBlocks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnMemoryGroup = rbnMemoryGroup.setStatus('current')
if mibBuilder.loadTexts: rbnMemoryGroup.setDescription('The collection of objects providing memory usage information.')
rbnSmsMemoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 16, 2, 2, 1)).setObjects(("RBN-MEMORY-MIB", "rbnSmsMemoryModule"), ("RBN-MEMORY-MIB", "rbnSmsMemoryFreeBytes"), ("RBN-MEMORY-MIB", "rbnSmsMemoryBytesInUse"), ("RBN-MEMORY-MIB", "rbnSmsMemoryBlocksInUse"), ("RBN-MEMORY-MIB", "rbnSmsMemoryCumulBlocks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSmsMemoryGroup = rbnSmsMemoryGroup.setStatus('obsolete')
if mibBuilder.loadTexts: rbnSmsMemoryGroup.setDescription('The collection of objects providing SMS memory usage information.')
rbnSmsMemoryCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 16, 2, 1, 1)).setObjects(("RBN-MEMORY-MIB", "rbnSmsMemoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSmsMemoryCompliance = rbnSmsMemoryCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: rbnSmsMemoryCompliance.setDescription('The compliance statement for SNMP entities which implement the Redback SMS memory usage MIB.')
mibBuilder.exportSymbols("RBN-MEMORY-MIB", rbnSmsMemoryGroup=rbnSmsMemoryGroup, rbnMemoryGroups=rbnMemoryGroups, rbnMemoryMIBNotifications=rbnMemoryMIBNotifications, rbnSmsMemoryCompliances=rbnSmsMemoryCompliances, rbnSmsMemoryBlocksInUse=rbnSmsMemoryBlocksInUse, rbnMemoryKBytesInUse=rbnMemoryKBytesInUse, rbnMemoryFreeKBytes=rbnMemoryFreeKBytes, rbnMemoryGroup=rbnMemoryGroup, rbnMemoryBlocksInUse=rbnMemoryBlocksInUse, rbnSmsMemoryFreeBytes=rbnSmsMemoryFreeBytes, rbnSmsMemoryModule=rbnSmsMemoryModule, rbnMemoryIndex=rbnMemoryIndex, rbnMemoryMib=rbnMemoryMib, rbnSmsMemoryEntry=rbnSmsMemoryEntry, rbnMemoryTable=rbnMemoryTable, rbnSmsMemoryIndex=rbnSmsMemoryIndex, rbnSmsMemoryTable=rbnSmsMemoryTable, rbnMemoryCumulBlocks=rbnMemoryCumulBlocks, rbnMemoryCompliance=rbnMemoryCompliance, rbnMemoryEntry=rbnMemoryEntry, PYSNMP_MODULE_ID=rbnMemoryMib, rbnSmsMemoryGroups=rbnSmsMemoryGroups, rbnSmsMemoryBytesInUse=rbnSmsMemoryBytesInUse, rbnMemoryMIBObjects=rbnMemoryMIBObjects, rbnMemoryCompliances=rbnMemoryCompliances, rbnMemoryMIBConformance=rbnMemoryMIBConformance, rbnMemoryModule=rbnMemoryModule, rbnSmsMemoryCumulBlocks=rbnSmsMemoryCumulBlocks, rbnSmsMemoryCompliance=rbnSmsMemoryCompliance)
