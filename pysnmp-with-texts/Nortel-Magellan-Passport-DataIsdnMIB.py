#
# PySNMP MIB module Nortel-Magellan-Passport-DataIsdnMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-DataIsdnMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:26:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
DisplayString, Integer32, StorageType, InterfaceIndex, Unsigned32, RowStatus = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "DisplayString", "Integer32", "StorageType", "InterfaceIndex", "Unsigned32", "RowStatus")
AsciiString, NonReplicated, DigitString = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "AsciiString", "NonReplicated", "DigitString")
passportMIBs, components = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs", "components")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, NotificationType, MibIdentifier, Integer32, ModuleIdentity, Unsigned32, Counter32, Gauge32, TimeTicks, iso, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "NotificationType", "MibIdentifier", "Integer32", "ModuleIdentity", "Unsigned32", "Counter32", "Gauge32", "TimeTicks", "iso", "IpAddress", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dataIsdnMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 113))
dataSigChan = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120))
dataSigChanRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 1), )
if mibBuilder.loadTexts: dataSigChanRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanRowStatusTable.setDescription('This entry controls the addition and deletion of dataSigChan components.')
dataSigChanRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"))
if mibBuilder.loadTexts: dataSigChanRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanRowStatusEntry.setDescription('A single entry in the table represents a single dataSigChan component.')
dataSigChanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataSigChanRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanRowStatus.setDescription('This variable is used as the basis for SNMP naming of dataSigChan components. These components can be added and deleted.')
dataSigChanComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
dataSigChanStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanStorageType.setDescription('This variable represents the storage type value for the dataSigChan tables.')
dataSigChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: dataSigChanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanIndex.setDescription('This variable represents the index for the dataSigChan tables.')
dataSigChanProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 100), )
if mibBuilder.loadTexts: dataSigChanProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanProvTable.setDescription('This group represents the provisionable attributes of a DataSigChan.')
dataSigChanProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"))
if mibBuilder.loadTexts: dataSigChanProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanProvEntry.setDescription('An entry in the dataSigChanProvTable.')
dataSigChanCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 100, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataSigChanCommentText.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCommentText.setDescription('This attribute specifies the name of the customer that is using this DataSigChan. Typical use of this attribute is to store customer name.')
dataSigChanCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 101), )
if mibBuilder.loadTexts: dataSigChanCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
dataSigChanCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 101, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"))
if mibBuilder.loadTexts: dataSigChanCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCidDataEntry.setDescription('An entry in the dataSigChanCidDataTable.')
dataSigChanCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 101, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataSigChanCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
dataSigChanIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 102), )
if mibBuilder.loadTexts: dataSigChanIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
dataSigChanIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 102, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"))
if mibBuilder.loadTexts: dataSigChanIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanIfEntryEntry.setDescription('An entry in the dataSigChanIfEntryTable.')
dataSigChanIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 102, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataSigChanIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
dataSigChanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 102, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
dataSigChanStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 103), )
if mibBuilder.loadTexts: dataSigChanStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
dataSigChanStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 103, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"))
if mibBuilder.loadTexts: dataSigChanStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanStateEntry.setDescription('An entry in the dataSigChanStateTable.')
dataSigChanAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 103, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
dataSigChanOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 103, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
dataSigChanUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 103, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
dataSigChanOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 104), )
if mibBuilder.loadTexts: dataSigChanOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
dataSigChanOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 104, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"))
if mibBuilder.loadTexts: dataSigChanOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanOperStatusEntry.setDescription('An entry in the dataSigChanOperStatusTable.')
dataSigChanSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 104, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
dataSigChanCc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2))
dataSigChanCcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 1), )
if mibBuilder.loadTexts: dataSigChanCcRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcRowStatusTable.setDescription('This entry controls the addition and deletion of dataSigChanCc components.')
dataSigChanCcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcIndex"))
if mibBuilder.loadTexts: dataSigChanCcRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcRowStatusEntry.setDescription('A single entry in the table represents a single dataSigChanCc component.')
dataSigChanCcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcRowStatus.setDescription('This variable is used as the basis for SNMP naming of dataSigChanCc components. These components cannot be added nor deleted.')
dataSigChanCcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
dataSigChanCcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcStorageType.setDescription('This variable represents the storage type value for the dataSigChanCc tables.')
dataSigChanCcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: dataSigChanCcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcIndex.setDescription('This variable represents the index for the dataSigChanCc tables.')
dataSigChanCcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 10), )
if mibBuilder.loadTexts: dataSigChanCcStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcStatsTable.setDescription('This group contains the statistics of the CallControl')
dataSigChanCcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcIndex"))
if mibBuilder.loadTexts: dataSigChanCcStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcStatsEntry.setDescription('An entry in the dataSigChanCcStatsTable.')
dataSigChanCcTotalValidInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcTotalValidInCalls.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTotalValidInCalls.setDescription('This attribute counts the total number of incoming calls (with valid mandatory IE contents and received in a valid ISDN state) from the interface. This counter wraps to zero after reaching its maximum value.')
dataSigChanCcSuccessfullInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcSuccessfullInCalls.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcSuccessfullInCalls.setDescription('This attribute counts the total number of successfull valid incoming calls from the interface. Unsuccessful calls include those that have disallowed Capability (BC, LLC), screening indicator, or calling party number, and calls that are rejected due to requested channel busy. This counter wraps to zero after reaching its maximum value.')
dataSigChanCcInInvalidCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcInInvalidCapability.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcInInvalidCapability.setDescription('This attribute counts the number of valid incoming calls rejected due to an unsupported service capability, such as Information Transfer Rate, Class of Service, Protocol Standard. This counter wraps to zero after reaching its maximum value.')
dataSigChanCcInInvalidScreen = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcInInvalidScreen.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcInInvalidScreen.setDescription("This attribute counts the number of valid incoming calls rejected due to a screening indicator value not provisioned in the channel group's screeningIndicator attribute. This counter wraps to zero after reaching its maximum value.")
dataSigChanCcInInvalidCgpn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcInInvalidCgpn.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcInInvalidCgpn.setDescription('This attribute counts the number of valid incoming calls rejected due to the calling party number not beeing provisioned in any channelGroup component of this call control. This counter wraps to zero after reaching its maximum value.')
dataSigChanCcInChannelBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcInChannelBusy.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcInChannelBusy.setDescription('This attribute counts the number of valid incoming calls rejected due to no available B-Channels. This counter wraps to zero after reaching its maximum value.')
dataSigChanCcLastClearCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcLastClearCause.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcLastClearCause.setDescription('This attribute indicates the Q931 clear cause of the last valid call that is rejected or cleared.')
dataSigChanCcLastClearedCallingPartyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 10, 1, 8), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcLastClearedCallingPartyNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcLastClearedCallingPartyNumber.setDescription('This attribute shows the calling party number of the last valid call that is rejected or cleared.')
dataSigChanCcCg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2))
dataSigChanCcCgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 1), )
if mibBuilder.loadTexts: dataSigChanCcCgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgRowStatusTable.setDescription('This entry controls the addition and deletion of dataSigChanCcCg components.')
dataSigChanCcCgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcCgIndex"))
if mibBuilder.loadTexts: dataSigChanCcCgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgRowStatusEntry.setDescription('A single entry in the table represents a single dataSigChanCcCg component.')
dataSigChanCcCgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataSigChanCcCgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgRowStatus.setDescription('This variable is used as the basis for SNMP naming of dataSigChanCcCg components. These components can be added and deleted.')
dataSigChanCcCgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcCgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
dataSigChanCcCgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcCgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgStorageType.setDescription('This variable represents the storage type value for the dataSigChanCcCg tables.')
dataSigChanCcCgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: dataSigChanCcCgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgIndex.setDescription('This variable represents the index for the dataSigChanCcCg tables.')
dataSigChanCcCgCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 10), )
if mibBuilder.loadTexts: dataSigChanCcCgCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
dataSigChanCcCgCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcCgIndex"))
if mibBuilder.loadTexts: dataSigChanCcCgCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgCidDataEntry.setDescription('An entry in the dataSigChanCcCgCidDataTable.')
dataSigChanCcCgCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataSigChanCcCgCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
dataSigChanCcCgProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 11), )
if mibBuilder.loadTexts: dataSigChanCcCgProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgProvTable.setDescription('This group defines the call admission parameters applied to the group of B-Channels.')
dataSigChanCcCgProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcCgIndex"))
if mibBuilder.loadTexts: dataSigChanCcCgProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgProvEntry.setDescription('An entry in the dataSigChanCcCgProvTable.')
dataSigChanCcCgCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataSigChanCcCgCommentText.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgCommentText.setDescription('This attribute specifies the name of the customer that is using this ChannelGroup. Typical use of this attribute is to store customer name.')
dataSigChanCcCgScreeningIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="50")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataSigChanCcCgScreeningIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgScreeningIndicator.setDescription('This attribute defines the acceptable set of screening modes. The screening mode is carried by the Calling Party Number information element (IE) of the B-Channel request packet. There are four types of mode: upns - User provided, not screened upvp - User provided, verified and passed upvf - User provided, verified and failed np - Network provided When a call is received with a screening indicator not provisioned in the list, the call is cleared. Description of bits: upns(0) upvp(1) upvf(2) np(3)')
dataSigChanCcCgChannelAssignmentOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ascending", 0), ("descending", 1))).clone('ascending')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataSigChanCcCgChannelAssignmentOrder.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgChannelAssignmentOrder.setDescription('This attribute defines the order (ascending or descending) in which the B-Channels are allocated. This attribute is used only when it is not signalled in the call setup message.')
dataSigChanCcCgChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataSigChanCcCgChannelList.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgChannelList.setDescription('This attribute contains the list of B-Channel numbers forming the channel group. At least one channel must be specified. Description of bits: notused0(0) n1(1) n2(2) n3(3) n4(4) n5(5) n6(6) n7(7) n8(8) n9(9) n10(10) n11(11) n12(12) n13(13) n14(14) n15(15) n16(16) n17(17) n18(18) n19(19) n20(20) n21(21) n22(22) n23(23) n24(24) n25(25) n26(26) n27(27) n28(28) n29(29) n30(30) n31(31)')
dataSigChanCcCgStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 12), )
if mibBuilder.loadTexts: dataSigChanCcCgStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgStatsTable.setDescription('This group contains the statistics for a ChannelGroup')
dataSigChanCcCgStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcCgIndex"))
if mibBuilder.loadTexts: dataSigChanCcCgStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgStatsEntry.setDescription('An entry in the dataSigChanCcCgStatsTable.')
dataSigChanCcCgTotalInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcCgTotalInCalls.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgTotalInCalls.setDescription('This attribute counts the total number of incoming calls (with valid mandatory IE contents and received in a valid ISDN state) from the interface for this channelGroup. This counter wraps to zero after reaching its maximum value.')
dataSigChanCcCgSuccessfullInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcCgSuccessfullInCalls.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgSuccessfullInCalls.setDescription('This attribute counts the number of valid incoming calls for this channelGroup. This counter wraps to zero after reaching its maximum value. DESCRIPTION')
dataSigChanCcCgRejectedNoChanAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcCgRejectedNoChanAvail.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgRejectedNoChanAvail.setDescription('This attribute counts the number of rejected call because no channel were available under the selected channel group. This counter wraps to zero after reaching its maximum value. DESCRIPTION')
dataSigChanCcCgIdleChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcCgIdleChannelCount.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgIdleChannelCount.setDescription('This attribute shows the number of B-channels in the channel group that are in idle state.')
dataSigChanCcCgBusyChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcCgBusyChannelCount.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgBusyChannelCount.setDescription('This attribute shows the number of B-Channels in this channel group that are in busy state.')
dataSigChanCcCgCgpn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 2))
dataSigChanCcCgCgpnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 2, 1), )
if mibBuilder.loadTexts: dataSigChanCcCgCgpnRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgCgpnRowStatusTable.setDescription('This entry controls the addition and deletion of dataSigChanCcCgCgpn components.')
dataSigChanCcCgCgpnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcCgIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcCgCgpnIndex"))
if mibBuilder.loadTexts: dataSigChanCcCgCgpnRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgCgpnRowStatusEntry.setDescription('A single entry in the table represents a single dataSigChanCcCgCgpn component.')
dataSigChanCcCgCgpnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataSigChanCcCgCgpnRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgCgpnRowStatus.setDescription('This variable is used as the basis for SNMP naming of dataSigChanCcCgCgpn components. These components can be added and deleted.')
dataSigChanCcCgCgpnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcCgCgpnComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgCgpnComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
dataSigChanCcCgCgpnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcCgCgpnStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgCgpnStorageType.setDescription('This variable represents the storage type value for the dataSigChanCcCgCgpn tables.')
dataSigChanCcCgCgpnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 2, 1, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 14)))
if mibBuilder.loadTexts: dataSigChanCcCgCgpnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgCgpnIndex.setDescription('This variable represents the index for the dataSigChanCcCgCgpn tables.')
dataSigChanCcCgBch = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 3))
dataSigChanCcCgBchRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 3, 1), )
if mibBuilder.loadTexts: dataSigChanCcCgBchRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgBchRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of dataSigChanCcCgBch components.')
dataSigChanCcCgBchRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcCgIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcCgBchIndex"))
if mibBuilder.loadTexts: dataSigChanCcCgBchRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgBchRowStatusEntry.setDescription('A single entry in the table represents a single dataSigChanCcCgBch component.')
dataSigChanCcCgBchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcCgBchRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgBchRowStatus.setDescription('This variable is used as the basis for SNMP naming of dataSigChanCcCgBch components. These components cannot be added nor deleted.')
dataSigChanCcCgBchComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcCgBchComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgBchComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
dataSigChanCcCgBchStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcCgBchStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgBchStorageType.setDescription('This variable represents the storage type value for the dataSigChanCcCgBch tables.')
dataSigChanCcCgBchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: dataSigChanCcCgBchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgBchIndex.setDescription('This variable represents the index for the dataSigChanCcCgBch tables.')
dataSigChanCcCgBchBchanOpDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 3, 2), )
if mibBuilder.loadTexts: dataSigChanCcCgBchBchanOpDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgBchBchanOpDataTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the operational data of a B-Channel.')
dataSigChanCcCgBchBchanOpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 3, 2, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcCgIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcCgBchIndex"))
if mibBuilder.loadTexts: dataSigChanCcCgBchBchanOpDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgBchBchanOpDataEntry.setDescription('An entry in the dataSigChanCcCgBchBchanOpDataTable.')
dataSigChanCcCgBchState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("busy", 1), ("disabled", 2), ("noProtocolProvisioned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcCgBchState.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgBchState.setDescription('This attribute indicates the state of the B-channel. A B-channel is in idle state when it is available for a call. The busy state indicate that the B-channel is presently in use. The disabled state means that the access service is not enabled because it is locked or the port is down. The state noProtocolProvisioned means that the call control did not yet received the registration for this B-channel.')
dataSigChanCcCgBchCallingPartyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 3, 2, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcCgBchCallingPartyNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgBchCallingPartyNumber.setDescription('This attribute indicates the calling party number of the last valid call request for this channel.')
dataSigChanCcCgBchLastQ931ClearCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcCgBchLastQ931ClearCause.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgBchLastQ931ClearCause.setDescription('The clear cause of the last call on this B-channel.')
dataSigChanCcCgBchRunningApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 2, 3, 2, 1, 4), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcCgBchRunningApplication.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcCgBchRunningApplication.setDescription('The name of the application running on this B-channel.')
dataSigChanCcTr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3))
dataSigChanCcTrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 1), )
if mibBuilder.loadTexts: dataSigChanCcTrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTrRowStatusTable.setDescription('This entry controls the addition and deletion of dataSigChanCcTr components.')
dataSigChanCcTrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcTrIndex"))
if mibBuilder.loadTexts: dataSigChanCcTrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTrRowStatusEntry.setDescription('A single entry in the table represents a single dataSigChanCcTr component.')
dataSigChanCcTrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataSigChanCcTrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTrRowStatus.setDescription('This variable is used as the basis for SNMP naming of dataSigChanCcTr components. These components can be added and deleted.')
dataSigChanCcTrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcTrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
dataSigChanCcTrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcTrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTrStorageType.setDescription('This variable represents the storage type value for the dataSigChanCcTr tables.')
dataSigChanCcTrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: dataSigChanCcTrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTrIndex.setDescription('This variable represents the index for the dataSigChanCcTr tables.')
dataSigChanCcTrPri = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 2))
dataSigChanCcTrPriRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 2, 1), )
if mibBuilder.loadTexts: dataSigChanCcTrPriRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTrPriRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of dataSigChanCcTrPri components.')
dataSigChanCcTrPriRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcTrIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcTrPriIndex"))
if mibBuilder.loadTexts: dataSigChanCcTrPriRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTrPriRowStatusEntry.setDescription('A single entry in the table represents a single dataSigChanCcTrPri component.')
dataSigChanCcTrPriRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcTrPriRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTrPriRowStatus.setDescription('This variable is used as the basis for SNMP naming of dataSigChanCcTrPri components. These components cannot be added nor deleted.')
dataSigChanCcTrPriComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcTrPriComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTrPriComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
dataSigChanCcTrPriStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcTrPriStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTrPriStorageType.setDescription('This variable represents the storage type value for the dataSigChanCcTrPri tables.')
dataSigChanCcTrPriIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: dataSigChanCcTrPriIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTrPriIndex.setDescription('This variable represents the index for the dataSigChanCcTrPri tables.')
dataSigChanCcTrPriBch = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 2, 2))
dataSigChanCcTrPriBchRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 2, 2, 1), )
if mibBuilder.loadTexts: dataSigChanCcTrPriBchRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTrPriBchRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of dataSigChanCcTrPriBch components.')
dataSigChanCcTrPriBchRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcTrIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcTrPriIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcTrPriBchIndex"))
if mibBuilder.loadTexts: dataSigChanCcTrPriBchRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTrPriBchRowStatusEntry.setDescription('A single entry in the table represents a single dataSigChanCcTrPriBch component.')
dataSigChanCcTrPriBchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcTrPriBchRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTrPriBchRowStatus.setDescription('This variable is used as the basis for SNMP naming of dataSigChanCcTrPriBch components. These components cannot be added nor deleted.')
dataSigChanCcTrPriBchComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcTrPriBchComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTrPriBchComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
dataSigChanCcTrPriBchStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcTrPriBchStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTrPriBchStorageType.setDescription('This variable represents the storage type value for the dataSigChanCcTrPriBch tables.')
dataSigChanCcTrPriBchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 3, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: dataSigChanCcTrPriBchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcTrPriBchIndex.setDescription('This variable represents the index for the dataSigChanCcTrPriBch tables.')
dataSigChanCcBch = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 4))
dataSigChanCcBchRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 4, 1), )
if mibBuilder.loadTexts: dataSigChanCcBchRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcBchRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of dataSigChanCcBch components.')
dataSigChanCcBchRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcBchIndex"))
if mibBuilder.loadTexts: dataSigChanCcBchRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcBchRowStatusEntry.setDescription('A single entry in the table represents a single dataSigChanCcBch component.')
dataSigChanCcBchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcBchRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcBchRowStatus.setDescription('This variable is used as the basis for SNMP naming of dataSigChanCcBch components. These components cannot be added nor deleted.')
dataSigChanCcBchComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcBchComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcBchComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
dataSigChanCcBchStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcBchStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcBchStorageType.setDescription('This variable represents the storage type value for the dataSigChanCcBch tables.')
dataSigChanCcBchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: dataSigChanCcBchIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcBchIndex.setDescription('This variable represents the index for the dataSigChanCcBch tables.')
dataSigChanCcBchBchanOpDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 4, 2), )
if mibBuilder.loadTexts: dataSigChanCcBchBchanOpDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcBchBchanOpDataTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the operational data of a B-Channel.')
dataSigChanCcBchBchanOpDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 4, 2, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcIndex"), (0, "Nortel-Magellan-Passport-DataIsdnMIB", "dataSigChanCcBchIndex"))
if mibBuilder.loadTexts: dataSigChanCcBchBchanOpDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcBchBchanOpDataEntry.setDescription('An entry in the dataSigChanCcBchBchanOpDataTable.')
dataSigChanCcBchState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("busy", 1), ("disabled", 2), ("noProtocolProvisioned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcBchState.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcBchState.setDescription('This attribute indicates the state of the B-channel. A B-channel is in idle state when it is available for a call. The busy state indicate that the B-channel is presently in use. The disabled state means that the access service is not enabled because it is locked or the port is down. The state noProtocolProvisioned means that the call control did not yet received the registration for this B-channel.')
dataSigChanCcBchCallingPartyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 4, 2, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcBchCallingPartyNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcBchCallingPartyNumber.setDescription('This attribute indicates the calling party number of the last valid call request for this channel.')
dataSigChanCcBchLastQ931ClearCause = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcBchLastQ931ClearCause.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcBchLastQ931ClearCause.setDescription('The clear cause of the last call on this B-channel.')
dataSigChanCcBchRunningApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 120, 2, 4, 2, 1, 4), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataSigChanCcBchRunningApplication.setStatus('mandatory')
if mibBuilder.loadTexts: dataSigChanCcBchRunningApplication.setDescription('The name of the application running on this B-channel.')
dataIsdnGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 113, 1))
dataIsdnGroupBD = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 113, 1, 4))
dataIsdnGroupBD01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 113, 1, 4, 2))
dataIsdnGroupBD01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 113, 1, 4, 2, 2))
dataIsdnCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 113, 3))
dataIsdnCapabilitiesBD = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 113, 3, 4))
dataIsdnCapabilitiesBD01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 113, 3, 4, 2))
dataIsdnCapabilitiesBD01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 113, 3, 4, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-DataIsdnMIB", dataSigChanIfAdminStatus=dataSigChanIfAdminStatus, dataSigChanRowStatus=dataSigChanRowStatus, dataSigChanIndex=dataSigChanIndex, dataSigChanCcCgRowStatus=dataSigChanCcCgRowStatus, dataSigChanCcCgProvEntry=dataSigChanCcCgProvEntry, dataSigChanCcBchCallingPartyNumber=dataSigChanCcBchCallingPartyNumber, dataSigChanCcBchState=dataSigChanCcBchState, dataSigChanCommentText=dataSigChanCommentText, dataSigChanCcTrPriStorageType=dataSigChanCcTrPriStorageType, dataSigChanCcInInvalidCapability=dataSigChanCcInInvalidCapability, dataSigChanCcComponentName=dataSigChanCcComponentName, dataSigChanCcCgBchLastQ931ClearCause=dataSigChanCcCgBchLastQ931ClearCause, dataSigChanCcSuccessfullInCalls=dataSigChanCcSuccessfullInCalls, dataSigChanCcCgCidDataEntry=dataSigChanCcCgCidDataEntry, dataSigChanIfIndex=dataSigChanIfIndex, dataIsdnGroupBD01=dataIsdnGroupBD01, dataSigChanCcCgBchBchanOpDataTable=dataSigChanCcCgBchBchanOpDataTable, dataSigChanCcCgChannelList=dataSigChanCcCgChannelList, dataSigChanRowStatusEntry=dataSigChanRowStatusEntry, dataSigChanCcCgBchIndex=dataSigChanCcCgBchIndex, dataSigChanCcCgRowStatusTable=dataSigChanCcCgRowStatusTable, dataSigChanCcCgBch=dataSigChanCcCgBch, dataSigChanCcCgCustomerIdentifier=dataSigChanCcCgCustomerIdentifier, dataSigChanCcCgRowStatusEntry=dataSigChanCcCgRowStatusEntry, dataSigChanCcCgProvTable=dataSigChanCcCgProvTable, dataSigChanCcCgStorageType=dataSigChanCcCgStorageType, dataSigChanCcTrIndex=dataSigChanCcTrIndex, dataSigChanCcRowStatusTable=dataSigChanCcRowStatusTable, dataIsdnMIB=dataIsdnMIB, dataSigChanCcCgCgpnRowStatus=dataSigChanCcCgCgpnRowStatus, dataSigChanCcCgCgpn=dataSigChanCcCgCgpn, dataSigChanCcCgScreeningIndicator=dataSigChanCcCgScreeningIndicator, dataSigChanProvTable=dataSigChanProvTable, dataSigChanCcTrComponentName=dataSigChanCcTrComponentName, dataIsdnGroupBD01A=dataIsdnGroupBD01A, dataSigChanOperationalState=dataSigChanOperationalState, dataSigChanCcTrPriBchRowStatusEntry=dataSigChanCcTrPriBchRowStatusEntry, dataSigChanOperStatusEntry=dataSigChanOperStatusEntry, dataSigChanCcCgChannelAssignmentOrder=dataSigChanCcCgChannelAssignmentOrder, dataSigChanCcBchRowStatus=dataSigChanCcBchRowStatus, dataSigChanCcRowStatusEntry=dataSigChanCcRowStatusEntry, dataSigChanCcTrPriRowStatusTable=dataSigChanCcTrPriRowStatusTable, dataSigChanComponentName=dataSigChanComponentName, dataSigChanCcTrRowStatusTable=dataSigChanCcTrRowStatusTable, dataSigChanCcTrPriRowStatusEntry=dataSigChanCcTrPriRowStatusEntry, dataSigChanCcTrPriBchRowStatus=dataSigChanCcTrPriBchRowStatus, dataSigChanCcCgBchCallingPartyNumber=dataSigChanCcCgBchCallingPartyNumber, dataSigChanCcCgBchBchanOpDataEntry=dataSigChanCcCgBchBchanOpDataEntry, dataSigChanCcCgBchRunningApplication=dataSigChanCcCgBchRunningApplication, dataSigChanProvEntry=dataSigChanProvEntry, dataSigChanCcBchRunningApplication=dataSigChanCcBchRunningApplication, dataSigChanSnmpOperStatus=dataSigChanSnmpOperStatus, dataSigChanCcStorageType=dataSigChanCcStorageType, dataSigChanCcStatsTable=dataSigChanCcStatsTable, dataSigChanCcTrPriBchRowStatusTable=dataSigChanCcTrPriBchRowStatusTable, dataSigChanCcTrPriBchStorageType=dataSigChanCcTrPriBchStorageType, dataIsdnCapabilities=dataIsdnCapabilities, dataSigChanCcTrRowStatus=dataSigChanCcTrRowStatus, dataSigChanIfEntryEntry=dataSigChanIfEntryEntry, dataSigChanCcCgCidDataTable=dataSigChanCcCgCidDataTable, dataSigChanCcBchLastQ931ClearCause=dataSigChanCcBchLastQ931ClearCause, dataSigChanCcBchBchanOpDataEntry=dataSigChanCcBchBchanOpDataEntry, dataSigChanStateEntry=dataSigChanStateEntry, dataSigChanCcCgSuccessfullInCalls=dataSigChanCcCgSuccessfullInCalls, dataSigChanCcTr=dataSigChanCcTr, dataSigChanUsageState=dataSigChanUsageState, dataSigChanCcTrPriBch=dataSigChanCcTrPriBch, dataSigChanCcCgIndex=dataSigChanCcCgIndex, dataSigChanCcInChannelBusy=dataSigChanCcInChannelBusy, dataSigChanCcCgBchRowStatusEntry=dataSigChanCcCgBchRowStatusEntry, dataSigChanCcCgBchState=dataSigChanCcCgBchState, dataSigChanCcTrPriComponentName=dataSigChanCcTrPriComponentName, dataSigChanCcStatsEntry=dataSigChanCcStatsEntry, dataSigChanCcCgCommentText=dataSigChanCcCgCommentText, dataSigChanStorageType=dataSigChanStorageType, dataSigChan=dataSigChan, dataSigChanCcBchRowStatusTable=dataSigChanCcBchRowStatusTable, dataSigChanCcCgRejectedNoChanAvail=dataSigChanCcCgRejectedNoChanAvail, dataSigChanCcBchBchanOpDataTable=dataSigChanCcBchBchanOpDataTable, dataSigChanCcTrPriIndex=dataSigChanCcTrPriIndex, dataSigChanCcCgCgpnRowStatusEntry=dataSigChanCcCgCgpnRowStatusEntry, dataSigChanCcCgBchComponentName=dataSigChanCcCgBchComponentName, dataSigChanStateTable=dataSigChanStateTable, dataIsdnGroupBD=dataIsdnGroupBD, dataSigChanCcBchIndex=dataSigChanCcBchIndex, dataSigChanCcCgStatsTable=dataSigChanCcCgStatsTable, dataSigChanCcLastClearCause=dataSigChanCcLastClearCause, dataSigChanCcInInvalidScreen=dataSigChanCcInInvalidScreen, dataSigChanRowStatusTable=dataSigChanRowStatusTable, dataSigChanCcRowStatus=dataSigChanCcRowStatus, dataSigChanCustomerIdentifier=dataSigChanCustomerIdentifier, dataSigChanCcLastClearedCallingPartyNumber=dataSigChanCcLastClearedCallingPartyNumber, dataSigChanCcCgCgpnIndex=dataSigChanCcCgCgpnIndex, dataSigChanCcCgBchRowStatus=dataSigChanCcCgBchRowStatus, dataSigChanCcCgBchRowStatusTable=dataSigChanCcCgBchRowStatusTable, dataIsdnGroup=dataIsdnGroup, dataSigChanCcCgBusyChannelCount=dataSigChanCcCgBusyChannelCount, dataSigChanCcTrPriBchIndex=dataSigChanCcTrPriBchIndex, dataSigChanCcInInvalidCgpn=dataSigChanCcInInvalidCgpn, dataSigChanCcCgIdleChannelCount=dataSigChanCcCgIdleChannelCount, dataSigChanIfEntryTable=dataSigChanIfEntryTable, dataSigChanCcTrPri=dataSigChanCcTrPri, dataSigChanCcIndex=dataSigChanCcIndex, dataSigChanCcBchStorageType=dataSigChanCcBchStorageType, dataSigChanCidDataEntry=dataSigChanCidDataEntry, dataSigChanOperStatusTable=dataSigChanOperStatusTable, dataSigChanCcCgStatsEntry=dataSigChanCcCgStatsEntry, dataSigChanCcCgComponentName=dataSigChanCcCgComponentName, dataSigChanCcCgCgpnComponentName=dataSigChanCcCgCgpnComponentName, dataIsdnCapabilitiesBD01A=dataIsdnCapabilitiesBD01A, dataSigChanCc=dataSigChanCc, dataIsdnCapabilitiesBD01=dataIsdnCapabilitiesBD01, dataSigChanCcTrRowStatusEntry=dataSigChanCcTrRowStatusEntry, dataSigChanCcCgCgpnStorageType=dataSigChanCcCgCgpnStorageType, dataSigChanCcTrPriRowStatus=dataSigChanCcTrPriRowStatus, dataSigChanCcTrPriBchComponentName=dataSigChanCcTrPriBchComponentName, dataSigChanCcBch=dataSigChanCcBch, dataSigChanCcBchRowStatusEntry=dataSigChanCcBchRowStatusEntry, dataSigChanCcTotalValidInCalls=dataSigChanCcTotalValidInCalls, dataSigChanCcCgBchStorageType=dataSigChanCcCgBchStorageType, dataSigChanCcCgCgpnRowStatusTable=dataSigChanCcCgCgpnRowStatusTable, dataIsdnCapabilitiesBD=dataIsdnCapabilitiesBD, dataSigChanCcCg=dataSigChanCcCg, dataSigChanCcTrStorageType=dataSigChanCcTrStorageType, dataSigChanCidDataTable=dataSigChanCidDataTable, dataSigChanAdminState=dataSigChanAdminState, dataSigChanCcBchComponentName=dataSigChanCcBchComponentName, dataSigChanCcCgTotalInCalls=dataSigChanCcCgTotalInCalls)
