#
# PySNMP MIB module MWRM-RADIO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MWRM-RADIO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
HalfFull, DownUp, Integrity, SwCommandTimer, MetricImperial, AllowedNotAllowed, EnableDisableSMI2, RadioId, LoopbackType, OffOn, InputSeverity, ProgressStatus, ClockSrc, SlotId, PmTableType, EnableDisable, TrailProtectedType, Severity, NoYes, SwCommand, BerLevel, TrailIfType, SignalLevel, RateMbps, SupportedNotsupported, QueueName, GreenYellow, RfuId = mibBuilder.importSymbols("MWRM-UNIT-MIB", "HalfFull", "DownUp", "Integrity", "SwCommandTimer", "MetricImperial", "AllowedNotAllowed", "EnableDisableSMI2", "RadioId", "LoopbackType", "OffOn", "InputSeverity", "ProgressStatus", "ClockSrc", "SlotId", "PmTableType", "EnableDisable", "TrailProtectedType", "Severity", "NoYes", "SwCommand", "BerLevel", "TrailIfType", "SignalLevel", "RateMbps", "SupportedNotsupported", "QueueName", "GreenYellow", "RfuId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter64, Bits, Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, Unsigned32, IpAddress, ModuleIdentity, enterprises, Gauge32, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "Bits", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "Unsigned32", "IpAddress", "ModuleIdentity", "enterprises", "Gauge32", "TimeTicks", "MibIdentifier")
RowStatus, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "MacAddress", "TextualConvention")
class MuteOnOff(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3))
    namedValues = NamedValues(("on", 2), ("off", 3))

class RfuGrade(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("unknown", 0), ("grade-1", 1), ("grade-2", 2), ("grade-3", 3))

class MrmcBitRate(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 1000000000)

class MrmcScriptId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 999999)

class QamOrder(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2048)

class MrmcProfile(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("profile-0", 0), ("profile-1", 1), ("profile-2", 2), ("profile-3", 3), ("profile-4", 4), ("profile-5", 5), ("profile-6", 6), ("profile-7", 7), ("profile-8", 8), ("profile-9", 9), ("profile-10", 10), ("profile-11", 11), ("profile-12", 12), ("profile-13", 13), ("profile-14", 14), ("profile-15", 15))

class ThresholdExponent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("n1e-1", 0), ("n1e-2", 1), ("n1e-3", 2), ("n1e-4", 3), ("n1e-5", 4), ("n1e-6", 5), ("n1e-7", 6), ("n1e-8", 7), ("n1e-9", 8), ("n1e-11", 10), ("n1e-12", 11), ("n1e-13", 12), ("n1e-14", 13), ("n1e-15", 14), ("n1e-16", 15), ("n1e-17", 16), ("n1e-18", 17), ("n1e-0", 18))

class RFUSoftwareInstallStat(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("ready", 0), ("verifying-files", 1), ("transferring-files", 2), ("installation-in-progress", 3), ("installation-success", 4), ("installation-failure", 5))

class RadioProtectionCmd(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("clear", 0), ("manual-switch", 1), ("force-switch", 2), ("lockout", 3))

class RfuMajorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unknown", 0), ("rfu-HC", 1), ("rfu-HP", 2), ("rfu-SP", 3), ("rfu-C", 4), ("rfu-H", 5), ("rfu-HP-2", 6), ("rfu-A", 7), ("rfu-D", 8))

class Copy2mate(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("noAction", 0), ("copyToMate", 1))

class XpicState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("init", 0), ("xpicDisabled", 1), ("singleChannel", 2), ("xrsmDisabled", 3), ("xrsmRecovery", 4), ("xpicIdle", 5))

class HcModeType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("legacy", 0), ("disabled", 1), ("layer2", 2), ("mpls", 3), ("layer3", 4), ("layer4", 5), ("tunnel", 6), ("tunnel-layer3", 7), ("tunnel-layer4", 8))

class EnhancedHCExclRuleType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("vlan", 0), ("mac-da", 1), ("mac-sa", 2), ("ethertype", 3), ("flow-type", 4))

class HcType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("legacy", 0), ("no-compression", 1), ("multi-layer-header-compression", 2), ("deep-header-compression", 3))

class CommunicationChannel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("ftp", 0), ("sftp", 1), ("http", 2), ("https", 3))

class FalseTrue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("false", 0), ("true", 1))

class WaysideBandwidth(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 64, 128, 192, 256, 320, 384, 448, 512, 1024, 2048))
    namedValues = NamedValues(("n0", 0), ("n64", 64), ("n128", 128), ("n192", 192), ("n256", 256), ("n320", 320), ("n384", 384), ("n448", 448), ("n512", 512), ("n1024", 1024), ("n2048", 2048))

microwave_radio = MibIdentifier((1, 3, 6, 1, 4, 1, 2281)).setLabel("microwave-radio")
genEquip = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10))
genEquipUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 1))
genEquipRFU = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 5))
genEquipRfuStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1), )
if mibBuilder.loadTexts: genEquipRfuStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusTable.setDescription('This table indicates the RFU Status Data.')
genEquipRfuStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRfuStatusId"))
if mibBuilder.loadTexts: genEquipRfuStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusEntry.setDescription('Entry containing the data of the RFU.')
genEquipRfuStatusId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 1), RfuId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusId.setDescription('This value indicates an index of a specific RFU')
genEquipRfuStatusRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-199, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusRxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusRxLevel.setDescription('This value indicates the RFU Receive Level Status.')
genEquipRfuStatusTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusTxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusTxLevel.setDescription('This value indicates the RFU Transmit Level Status.')
genEquipRfuStatusTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusTemperature.setDescription('This value indicates the RFU temperature. The value depends on the represented measurement system. with genEquipUnitMeasurementSystem parameter.')
genEquipRfuStatusRunningVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusRunningVersion.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusRunningVersion.setDescription('This value indicates the running SW version on the RFU.')
genEquipRfuStatusRFUType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43))).clone(namedValues=NamedValues(("unknown", 2), ("rfu-1500p", 3), ("rfu-1500hp", 5), ("rfu-1500sp", 6), ("rfu-c", 7), ("rfu-h", 8), ("rfu-c", 9), ("rfu-h", 10), ("rfu-1500sp", 11), ("rfu-hp", 12), ("rfu-a", 13), ("rfu-d", 14), ("rfu-1500p", 32), ("rfu-1500hp", 34), ("rfu-1500sp", 35), ("rfu-c", 36), ("rfu-h", 37), ("rfu-c", 38), ("rfu-h", 39), ("rfu-1500sp", 40), ("rfu-hp", 41), ("rfu-a", 42), ("rfu-d", 43)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusRFUType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusRFUType.setDescription('The different types of the supported RFUs')
genEquipRfuStatusRFUGrade = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 7), RfuGrade()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusRFUGrade.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusRFUGrade.setDescription('The grade of the RFU')
genEquipRfuStatusTxRxFreqSeparation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusTxRxFreqSeparation.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusTxRxFreqSeparation.setDescription("Tx to Rx frequency separation (MHz), For some RFUs the user cannot set the Tx and Rx frequencies separately (one of them affects the other one's value).")
genEquipRfuStatusRFUMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("main", 2), ("diversity", 3), ("combined", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusRFUMode.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusRFUMode.setDescription('IF combining parameter - The mode of the RFU')
genEquipRfuStatusRxLevelDiversity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-199, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusRxLevelDiversity.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusRxLevelDiversity.setDescription('IF combining parameter - The Rx Diversity level (dBm)')
genEquipRfuStatusRxLevelCombined = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-199, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusRxLevelCombined.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusRxLevelCombined.setDescription('IF combining parameter - The Rx Combined level (dBm)')
genEquipRfuStatusAutoDelayCalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("no-action", 2), ("pass", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusAutoDelayCalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusAutoDelayCalStatus.setDescription('IF combining parameter - the automatic delay calibration status. Supported only for specific RFUs.')
genEquipRfuStatusRFUSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusRFUSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusRFUSerialNumber.setDescription('RFU Serial number.')
genEquipRfuStatusRFUPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusRFUPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusRFUPartNumber.setDescription('RFU Part number.')
genEquipRfuStatusRFUmateCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusRFUmateCarrier.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusRFUmateCarrier.setDescription("The returned value indicates the slot number of the 'copartner RFU-D carrier'. The returned value will be '-1' when the RFU is not RFU-D, or if the 'copartner RFU-D' carrier is not found.")
genEquipRfuStatusRFUMaxTxFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusRFUMaxTxFreq.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusRFUMaxTxFreq.setDescription('The maximum Tx frequency of the RFU that is allowed by the RFU.')
genEquipRfuStatusRFUMinTxFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusRFUMinTxFreq.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusRFUMinTxFreq.setDescription('The minimum Tx frequency of the RFU that is allowed by the RFU.')
genEquipRfuStatusRFUMaxRxFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusRFUMaxRxFreq.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusRFUMaxRxFreq.setDescription('The maximum Rx frequency of the RFU that is allowed by the RFU.')
genEquipRfuStatusRFUMinRxFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusRFUMinRxFreq.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusRFUMinRxFreq.setDescription('The minimum Rx frequency of the RFU that is allowed by the RFU.')
genEquipRfuStatusInstallation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("split-mount", 0), ("all-indoor", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusInstallation.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusInstallation.setDescription("Returns 'all-indoor' or 'split' according to the RFU installation.")
genEquipRfuStatusDataSciErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusDataSciErrors.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusDataSciErrors.setDescription('Data Sci Errors')
genEquipRfuStatusDeviceError = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusDeviceError.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusDeviceError.setDescription('Status Device Error')
genEquipRfuStatusBand = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("unknown", 0), ("band-18", 2), ("band-23", 3), ("band-26", 4), ("band-28", 5), ("band-38", 6), ("band-29", 7), ("band-31", 8), ("band-15", 9), ("band-13", 10), ("band-10dot5-11", 11), ("band-7-8", 12), ("band-6L-6H", 13), ("band-32", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusBand.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusBand.setDescription('The Band of the RF-Module in GHz')
genEquipRfuStatusPATemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusPATemp.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusPATemp.setDescription('The measured temperature in celsius of the PA (Power Amplifier) of the RF module')
genEquipRfuStatusTxMute = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 25), OffOn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusTxMute.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusTxMute.setDescription('The mute status, whether it is on (mute) or off (un-mute) of the RF-Module')
genEquipRfuStatusMinTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusMinTxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusMinTxLevel.setDescription('The minimum feasible TX signal level (TSL) in dBm of the RF-Module')
genEquipRfuStatusMaxTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusMaxTxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusMaxTxLevel.setDescription('The maximum feasible TX signal level (TSL) in dBm of the RF-Module')
genEquipRfuStatusMinBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusMinBW.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusMinBW.setDescription('The minimum supported bandwidth in KHz of the RF-Module')
genEquipRfuStatusMaxBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusMaxBW.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusMaxBW.setDescription('The maximum supported bandwidth in KHz of the RF-Module')
genEquipRfuStatusCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 30), DownUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusCommunication.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusCommunication.setDescription('The communication status between the host and the RFU')
genEquipRfuCfgATPCOverrideTimerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("expired", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuCfgATPCOverrideTimerState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgATPCOverrideTimerState.setDescription("Returns the state of the ATPC 'override timer', whether it is regular or expired")
genEquipRfuStatusIfCombSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 32), SupportedNotsupported()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusIfCombSupport.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusIfCombSupport.setDescription('Indicates if the IF-Combiner function is supported')
genEquipRfuStatusMinRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusMinRxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusMinRxLevel.setDescription('The minimum feasible RX signal level (RSL) in dBm of the RF-Module')
genEquipRfuStatusMaxRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuStatusMaxRxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuStatusMaxRxLevel.setDescription('The maximum feasible RX signal level (RSL) in dBm of the RF-Module')
genEquipRfuCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2), )
if mibBuilder.loadTexts: genEquipRfuCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgTable.setDescription('This table indicates the RFU Configuration.')
genEquipRfuCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRfuCfgId"))
if mibBuilder.loadTexts: genEquipRfuCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgEntry.setDescription('This table indicates the RFU Configuration.')
genEquipRfuCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1, 1), RfuId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuCfgId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgId.setDescription('This value indicates an index of a specific RFU')
genEquipRfuCfgMaxTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuCfgMaxTxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgMaxTxLevel.setDescription('This value indicates the RFU Maximum Transmit Level Configuration.')
genEquipRfuCfgTxFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuCfgTxFreq.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgTxFreq.setDescription('Tx Frequency configuration (Mhz)')
genEquipRfuCfgRxFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuCfgRxFreq.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgRxFreq.setDescription('Rx Frequency configuration (Mhz)')
genEquipRfuCfgATPCAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1, 5), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuCfgATPCAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgATPCAdmin.setDescription('ATPC configuration - Admin mode Possible values: - enable(2) - disable(3)')
genEquipRfuCfgATPCRefRSL = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-70, -30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuCfgATPCRefRSL.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgATPCRefRSL.setDescription('ATPC configuration - reference RSL level (dBm)')
genEquipRfuCfgMuteTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1, 7), MuteOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuCfgMuteTx.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgMuteTx.setDescription('The required TX mute status of the RF-Module')
genEquipRfuCfgRSLConnSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("main", 2), ("diversity", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuCfgRSLConnSrc.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgRSLConnSrc.setDescription('IF combining - RFU RSL (Received Signal Level) connector source ')
genEquipRfuCfgDelayCal = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-130, 130))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuCfgDelayCal.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgDelayCal.setDescription('IF combining - Delay calibration')
genEquipRfuCfgLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("towardsSystem", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuCfgLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgLoopback.setDescription('RFU RF loopback command')
genEquipRfuCfgLogAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1, 11), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuCfgLogAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgLogAdmin.setDescription('RFU internal log file admin Possible values: - enable(2) - disable(3)')
genEquipRfuCfgClearComDeviceError = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1, 12), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuCfgClearComDeviceError.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgClearComDeviceError.setDescription('Clear Com device Error.')
genEquipRfuCfgGreenModeAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1, 13), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuCfgGreenModeAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgGreenModeAdmin.setDescription('Enables/disables RFU green mode. This mode will minimize power consumption while ensuring the highest transmission power possible to get an RSL not higher than defined in the reference level genEquipRfuCfgGreenModeReferenceLevel')
genEquipRfuCfgGreenModeReferenceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-70, -30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuCfgGreenModeReferenceLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgGreenModeReferenceLevel.setDescription('RSL reference level (in dB) for green mode operation')
genEquipRfuCfgATPCOverrideTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuCfgATPCOverrideTxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgATPCOverrideTxLevel.setDescription('This parameter configures the default transmission signal level in case of ATPC override due to expiration of maximum power timer as defined in genEquipRfuCfgATPCOverrideTimeout.')
genEquipRfuCfgATPCOverrideTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuCfgATPCOverrideTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgATPCOverrideTimeout.setDescription('This parameter configures the timer to be counted while in ATPC in case of maximum power transmission. If this timer expires, the system will transmit at a default level defined in genEquipRfuCfgATPCOverrideTxLevel')
genEquipRfuCfgATPCOverrideTimerCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuCfgATPCOverrideTimerCounter.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgATPCOverrideTimerCounter.setDescription('This parameter shows the time left in the timer defined by genEquipRfuCfgATPCOverrideTxLevel')
genEquipRfuCfgATPCOverrideTimerCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 2, 1, 18), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuCfgATPCOverrideTimerCancel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuCfgATPCOverrideTimerCancel.setDescription('Setting this parameter to ON will cancel the ATPC override mode. This will only be effective while in this mode i.e. the system had been transmitting at maximum power for a time longer than defined in genEquipRfuCfgATPCOverrideTxLevel and now is transmitting at the default level defined in genEquipRfuCfgATPCOverrideTxLevel. Following execution, the system will go back to normal ATPC operating mode')
genEquipRfuUploadTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 5, 3), )
if mibBuilder.loadTexts: genEquipRfuUploadTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuUploadTable.setDescription('RFU Upload Data table.')
genEquipRfuUploadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 5, 3, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRfuUploadId"))
if mibBuilder.loadTexts: genEquipRfuUploadEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuUploadEntry.setDescription('Entry containing the data of the RFU.')
genEquipRfuUploadId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 3, 1, 1), RadioId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuUploadId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuUploadId.setDescription('This value indicates an index of a specific RFU')
genEquipRfuUploadSwCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uploadSW", 1), ("noOperation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuUploadSwCommand.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuUploadSwCommand.setDescription('This value initiates SW upload to the RFU.')
genEquipRfuUploadSwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5))).clone(namedValues=NamedValues(("noLoad", 0), ("loadError", 1), ("loadStart", 2), ("loadSendBlock", 3), ("loadDone", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuUploadSwStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuUploadSwStatus.setDescription('This value indicates the status of the SW load operation on the RFU.')
genEquipRfuUploadCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuUploadCounter.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuUploadCounter.setDescription('This parameter shows the progress (in blocks) of RFU software download')
genEquipRFUNG = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4))
genEquipRfuSwInstallTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 2), )
if mibBuilder.loadTexts: genEquipRfuSwInstallTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuSwInstallTable.setDescription('RFU software managemet install configuration.')
genEquipRfuSwInstallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 2, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRfuSwInstallIfIndex"))
if mibBuilder.loadTexts: genEquipRfuSwInstallEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuSwInstallEntry.setDescription('RFU software managemet install configuration.')
genEquipRfuSwInstallIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuSwInstallIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuSwInstallIfIndex.setDescription('RFU ifIndex')
genEquipRfuSwInstallOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("no-operation", 0), ("update-version-from-bundle", 1), ("install-existing-version", 2), ("abort-timer", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuSwInstallOperation.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuSwInstallOperation.setDescription('RFU software installation operation to be performed.')
genEquipRfuSwInstallTimedInstallation = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 2, 1, 3), NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuSwInstallTimedInstallation.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuSwInstallTimedInstallation.setDescription('Determines whether the installation will be carried out after a configured timer.')
genEquipRfuSwInstallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRfuSwInstallTimer.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuSwInstallTimer.setDescription('Timer for timed installations')
genEquipRfuInstalledVersionsTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 3), )
if mibBuilder.loadTexts: genEquipRfuInstalledVersionsTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuInstalledVersionsTable.setDescription('RFU software managemet installed versuion.')
genEquipRfuInstalledVersionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 3, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRfuInstalledVersionsIfIndex"))
if mibBuilder.loadTexts: genEquipRfuInstalledVersionsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuInstalledVersionsEntry.setDescription('RFU software managemet installed version.')
genEquipRfuInstalledVersionsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuInstalledVersionsIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuInstalledVersionsIfIndex.setDescription('RFU ifIndex')
genEquipRfuInstalledVersionsDSP = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuInstalledVersionsDSP.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuInstalledVersionsDSP.setDescription('RFU version DSP.')
genEquipRfuInstalledVersionsConfigurations = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuInstalledVersionsConfigurations.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuInstalledVersionsConfigurations.setDescription('Configuration tables.')
genEquipRfuInstalledVersionsConstants = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuInstalledVersionsConstants.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuInstalledVersionsConstants.setDescription('Constant tables')
genEquipRfuInstalledVersionsScripts = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuInstalledVersionsScripts.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuInstalledVersionsScripts.setDescription('RFU scripts')
genEquipRfuInstalledVersionsFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuInstalledVersionsFirmware.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuInstalledVersionsFirmware.setDescription('Firmware')
genEquipRfuSwStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 4), )
if mibBuilder.loadTexts: genEquipRfuSwStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuSwStatusTable.setDescription('RFU software managemet installed status.')
genEquipRfuSwStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 4, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRfuSwStatusIfIndex"))
if mibBuilder.loadTexts: genEquipRfuSwStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuSwStatusEntry.setDescription('RFU software managemet installed status.')
genEquipRfuSwStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuSwStatusIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuSwStatusIfIndex.setDescription('RFU ifIndex')
genEquipRfuSwStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 4, 1, 2), RFUSoftwareInstallStat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuSwStatusCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuSwStatusCurrentState.setDescription('Current state of the install operation.')
genEquipRfuSwStatusProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuSwStatusProgress.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuSwStatusProgress.setDescription('Progress of the current install operation in percentage.')
genEquipRfuRunningVersionsTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 5), )
if mibBuilder.loadTexts: genEquipRfuRunningVersionsTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuRunningVersionsTable.setDescription('RFU software managemet rinning versions.')
genEquipRfuRunningVersionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 5, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRfuRunningVersionsIfIndex"))
if mibBuilder.loadTexts: genEquipRfuRunningVersionsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuRunningVersionsEntry.setDescription('RFU software managemet running versions.')
genEquipRfuRunningVersionsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuRunningVersionsIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuRunningVersionsIfIndex.setDescription('RFU ifIndex')
genEquipRfuRunningVersionsDSP = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuRunningVersionsDSP.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuRunningVersionsDSP.setDescription('DSP.')
genEquipRfuRunningVersionsConfigurations = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuRunningVersionsConfigurations.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuRunningVersionsConfigurations.setDescription('Configuration tables.')
genEquipRfuRunningVersionsConstants = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuRunningVersionsConstants.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuRunningVersionsConstants.setDescription('Constant tables.')
genEquipRfuRunningVersionsScripts = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuRunningVersionsScripts.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuRunningVersionsScripts.setDescription('RFU scripts.')
genEquipRfuRunningVersionsFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuRunningVersionsFirmware.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuRunningVersionsFirmware.setDescription('Firmware.')
genEquipRfuAvailableVersionsTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 6), )
if mibBuilder.loadTexts: genEquipRfuAvailableVersionsTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuAvailableVersionsTable.setDescription('RFU software managemet available versions.')
genEquipRfuAvailableVersionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 6, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRfuAvailableVersionsRfuType"))
if mibBuilder.loadTexts: genEquipRfuAvailableVersionsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuAvailableVersionsEntry.setDescription('RFU software managemet available versions.')
genEquipRfuAvailableVersionsRfuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 6, 1, 1), RfuMajorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuAvailableVersionsRfuType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuAvailableVersionsRfuType.setDescription('RFU Type')
genEquipRfuAvailableVersionsDSP = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuAvailableVersionsDSP.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuAvailableVersionsDSP.setDescription('DSP.')
genEquipRfuAvailableVersionsConfigurations = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuAvailableVersionsConfigurations.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuAvailableVersionsConfigurations.setDescription('Configuration tables.')
genEquipRfuAvailableVersionsConstants = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuAvailableVersionsConstants.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuAvailableVersionsConstants.setDescription('Constant tables.')
genEquipRfuAvailableVersionsScripts = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuAvailableVersionsScripts.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuAvailableVersionsScripts.setDescription('RFU scripts.')
genEquipRfuAvailableVersionsFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 5, 4, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRfuAvailableVersionsFirmware.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRfuAvailableVersionsFirmware.setDescription('Firmware.')
genEquipRadio = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 7))
genEquipRadioStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 1), )
if mibBuilder.loadTexts: genEquipRadioStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioStatusTable.setDescription('Radio status table')
genEquipRadioStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 1, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioStatusRadioId"))
if mibBuilder.loadTexts: genEquipRadioStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioStatusEntry.setDescription('Radio status table')
genEquipRadioStatusRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 1, 1, 1), RadioId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioStatusRadioId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioStatusRadioId.setDescription('This value is the radio ID that serves as the table Index.')
genEquipRadioStatusMSE = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioStatusMSE.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioStatusMSE.setDescription('MSE (Mean Square Error) of the Rx signal (measured in dB * 100). -9900 value (-99.00 dB) means that the signal is not locked. ~ -3500 value (-35.00 dB) is a good MSE.')
genEquipRadioStatusDefectedBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioStatusDefectedBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioStatusDefectedBlocks.setDescription('The number of counted defective radio blocks.')
genEquipRadioStatusBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 1, 1, 4), ThresholdExponent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioStatusBER.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioStatusBER.setDescription('The measured BER (Bit Error Rate) level of the modem.')
genEquipRadioStatusXPI = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioStatusXPI.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioStatusXPI.setDescription('XPI (Cross Polar Interference) level measured by the modem.')
genEquipRadioStatusXPICEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 1, 1, 6), EnableDisableSMI2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioStatusXPICEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioStatusXPICEnabled.setDescription('This parameter indicates whether an XPIC script is currently loaded.')
genEquipRadioCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2), )
if mibBuilder.loadTexts: genEquipRadioCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgTable.setDescription('Radio Configuration table.')
genEquipRadioCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioCfgRadioId"))
if mibBuilder.loadTexts: genEquipRadioCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgEntry.setDescription('Radio Configuration table.')
genEquipRadioCfgRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 1), RadioId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCfgRadioId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgRadioId.setDescription('This value is the radio ID that serves as this table Index')
genEquipRadioCfgLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgLinkId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgLinkId.setDescription('Radio configuration link ID')
genEquipRadioCfgMACHeaderCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 3), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgMACHeaderCompression.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgMACHeaderCompression.setDescription('The Admin state of the MAC header compression.')
genEquipRadioCfgClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 4), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgClearCounters.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgClearCounters.setDescription('Setting this parameter to ON will clear the radio counters.')
genEquipRadioCfgIfLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("towardsSystem", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgIfLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgIfLoopback.setDescription('The administrative state of the IF loopback.')
genEquipRadioCfgExcessiveBERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 6), ThresholdExponent()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgExcessiveBERThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgExcessiveBERThreshold.setDescription("The BER threshold that when exceeded will be considered as 'Excessive BER'.")
genEquipRadioCfgSignalDegradeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 7), ThresholdExponent()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgSignalDegradeThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgSignalDegradeThreshold.setDescription("The BER (Bit Error Rate) threshold that when exceeded will be considered as 'Signal Degrade'.")
genEquipRadioCfgRadioAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 8), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgRadioAdmin.setStatus('obsolete')
if mibBuilder.loadTexts: genEquipRadioCfgRadioAdmin.setDescription('Radio Admin state (Enable,Disable) can be used in ifTable::ifAdminStatus')
genEquipRadioCfgRadioOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 9), DownUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCfgRadioOperationalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgRadioOperationalStatus.setDescription('The operational status of the radio interface.')
genEquipRadioCfgRadioTrafficPriorityScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("high-tdm-over-ethernet", 0), ("high-ethernet-over-tdm", 1), ("high-tdm-over-high-ethernet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgRadioTrafficPriorityScheme.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgRadioTrafficPriorityScheme.setDescription('this parameter configures the relative priority of different traffic streams. High-tdm-over-high-ethernet gives priorities as follows: (1) TDM high priority (2) Ethernet high priority (3) TDM low priority (4) Etherenet low priority. High-Ethernet-over-tdm gives priorities as follows: (1) Ethernet high priority (2) TDM high priority (3) TDM low priority (4) Etherenet low priority. Tdm-over-ethernet gives priorities as follows: (1) TDM high priority (2) TDM low priority (3) Ethernet')
genEquipRadioCfgRadioHiPriorityEthernetBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgRadioHiPriorityEthernetBW.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgRadioHiPriorityEthernetBW.setDescription('this parameter configures the amount of bandwith reserved for high-priority Ethernet. It must be a number in resolution of 2.048 Mbit/s for E1 systems or 1.544 Mbit/s for T1 systems. The maximum possible capacity is given by genEquipRadioCfgRadioCurrentAvailableCapacity')
genEquipRadioCfgRadioMultiRadioEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 12), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgRadioMultiRadioEnable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgRadioMultiRadioEnable.setDescription('this parameter enables/disables the multi-radio feature for this radio. Notice that for the feature to work it must be configured in two adjacent radios (odd and even slots)')
genEquipRadioCfgRadioMultiRadioBlockLocalTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dont-block", 0), ("block-this-radio", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgRadioMultiRadioBlockLocalTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgRadioMultiRadioBlockLocalTraffic.setDescription('this parameter allows stopping distribution of data to different radios in Multi-Radio mode for debugging purposes')
genEquipRadioCfgRadioMultiRadioBlockMateTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dont-block", 0), ("block-this-radio", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgRadioMultiRadioBlockMateTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgRadioMultiRadioBlockMateTraffic.setDescription('this parameter allows stopping distribution of data to the radio in the mate IDU in Multi-Radio mode for debugging purposes')
genEquipRadioCfgRadioCurrentAvailableCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCfgRadioCurrentAvailableCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgRadioCurrentAvailableCapacity.setDescription('This parameter indicates the maximum possible capacity available for Ethernet. This sets a top limit for amount of high-priority Ethernet bandwidth')
genEquipRadioCfgRadioMultiRadioExcessiveBERAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 16), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgRadioMultiRadioExcessiveBERAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgRadioMultiRadioExcessiveBERAdmin.setDescription('This parameter configures whether in Multi-Radio mode data stops being distributed to the radio in case of an excessive BER condition')
genEquipRadioCfgRadioMultiRadioSignalDegradeAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 17), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgRadioMultiRadioSignalDegradeAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgRadioMultiRadioSignalDegradeAdmin.setDescription('This parameter configures whether in Multi-Radio mode data stops being distributed to the radio in case of a signal degraded condition')
genEquipRadioCfgEnAlarmGenOnRslDegrade = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 18), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgEnAlarmGenOnRslDegrade.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgEnAlarmGenOnRslDegrade.setDescription('TEnable/Disable alarm and trapgeneration on RSL degradationbelow user defined threshold.If enabled, trap and alarm willbe generated when current RSLlevel degrades below userdefined threshold for 5subsequent seconds. Alarm willbe cleared after RSL level staysabove the threshold for at leastanother 5 seconds. Thresholdis calculated as a nominal RSLlevel minus the degradationmargin.')
genEquipRadioCfgAlarmGenRslNominalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgAlarmGenRslNominalLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgAlarmGenRslNominalLevel.setDescription('RSL nominal level [in dBm] foralarm and event generation.')
genEquipRadioCfgAlarmGenRslDegradationMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgAlarmGenRslDegradationMargin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgAlarmGenRslDegradationMargin.setDescription('RSL degradation margin [in dB]for alarm and eventgeneration. The margin isrelative to the nominal RSLlevel')
genEquipRadioCfgLinkShutDownOnRadioFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 21), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgLinkShutDownOnRadioFailure.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgLinkShutDownOnRadioFailure.setDescription('This parameter enables shutting down the link and initiating automatic state propagation upon a failure in each one of the radios. Radio failure condition is determined by user configurations and can be one of the following: Radio LOF, Link ID mismatch, Radio excessive BER, Radio signal degrade, Link ID mismatch.')
genEquipRadioCfgLoopbackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgLoopbackTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgLoopbackTimeout.setDescription("The timeout in minutes for automatic termination of the loopback. The value '0' refers to 'no timeout'.")
genEquipRadioCfgAbcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("multi-carrier-abc", 2), ("multi-directional", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCfgAbcMode.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCfgAbcMode.setDescription('TThe radio mode (multi direction or multi carrier).')
genEquipRemoteRadio = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3))
genEquipRemoteRadioTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1), )
if mibBuilder.loadTexts: genEquipRemoteRadioTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioTable.setDescription('Remote radio table.')
genEquipRemoteRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRemoteRadioRadioId"))
if mibBuilder.loadTexts: genEquipRemoteRadioEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioEntry.setDescription('Remote radio table.')
genEquipRemoteRadioRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 1), RadioId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRemoteRadioRadioId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRadioId.setDescription('This value is the radio ID that serves as this table Index')
genEquipRemoteRadioRemoteCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 2), DownUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteCommunication.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteCommunication.setDescription('The operational status of the remote radio.')
genEquipRemoteRadioRemoteIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteIPAddr.setDescription('The remote Ip address.')
genEquipRemoteRadioRemoteRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-199, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteRxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteRxLevel.setDescription('The Rx level of the remote radio (in dBm)')
genEquipRemoteRadioRemoteForceMaxTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteForceMaxTxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteForceMaxTxLevel.setDescription('Command that forces the remote radio maximum Tx level (in dBm)')
genEquipRemoteRadioRemoteTxFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteTxFreq.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteTxFreq.setDescription('The remote radio Tx frequancy (in MHz).')
genEquipRemoteRadioRemoteRxFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteRxFreq.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteRxFreq.setDescription('The remote radio Rx frequancy (in MHz).')
genEquipRemoteRadioRemoteATPCReferenceRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteATPCReferenceRxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteATPCReferenceRxLevel.setDescription('The RSL reference level for the ATPC mechanism in the remote radio.')
genEquipRemoteRadioRemoteFloatingIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteFloatingIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteFloatingIPAddr.setDescription('This value indicates the floating IP address used in the remote shelf if its main units are in 1+1 protection mode.')
genEquipRemoteRadioRemoteDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteDefaultGateway.setDescription('Default gateway of remote NE (Network Element) across this radio link.')
genEquipRemoteRadioRemoteMostSevereAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 11), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteMostSevereAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteMostSevereAlarm.setDescription('Most severe alarm of remote NE (Network Element) across this radio link.')
genEquipRemoteRadioRemoteSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteSubnetMask.setDescription('Subnet mask of remote NE (Network Element) across this radio link.')
genEquipRemoteRadioRemoteSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteSlotID.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteSlotID.setDescription('The remote radio slot number.')
genEquipRemoteRadioRemoteForceTxMute = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 14), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteForceTxMute.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteForceTxMute.setDescription('Force the mute state of the remote unit radio interface.')
genEquipRemoteRadioRemoteLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteLinkId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteLinkId.setDescription('The Link Id of the remote unit radio interface.')
genEquipRemoteRadioRemoteATPCoverrideState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 16), NoYes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteATPCoverrideState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteATPCoverrideState.setDescription('Remote Radio ATPC Override Timer expire state.')
genEquipRemoteRadioRemoteATPCoverrideStateCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 17), NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteATPCoverrideStateCancel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteATPCoverrideStateCancel.setDescription('his coomand cancel remote ATPC override state.')
genEquipRemoteRadioRemoteDataLoopBackAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 18), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteDataLoopBackAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteDataLoopBackAdmin.setDescription('Remote unit administrator state of data loopback.')
genEquipRemoteRadioRemoteDataLoopBackDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteDataLoopBackDuration.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteDataLoopBackDuration.setDescription('Remote Data LoopBack Duration at remote unit[Minutes], zero for infinite loop back.')
genEquipRemoteRadioRemoteDataLoopBackSwitchAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 20), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteDataLoopBackSwitchAddress.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteDataLoopBackSwitchAddress.setDescription('Remote Unit switch MAC DA.')
genEquipRemoteRadioRemoteGreenReferenceRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteGreenReferenceRxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteGreenReferenceRxLevel.setDescription('Remote Radio Green RSL reference level[dBm].')
genEquipRemoteRadioRemoteMNGvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteMNGvlan.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteMNGvlan.setDescription('Remote Management Vlan.')
genEquipRemoteRadioRemoteReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 23), FalseTrue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteReset.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteReset.setDescription('Remote reset of unit.')
genEquipRemoteRadioRemoteGreenModeAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 24), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteGreenModeAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteGreenModeAdmin.setDescription('Remote Unit Tx Green Mode Admin.')
genEquipRemoteRadioRemoteWebProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 25), CommunicationChannel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteWebProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteWebProtocol.setDescription('Remote web protocol.')
genEquipRemoteRadioRemoteIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteIPv6Addr.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteIPv6Addr.setDescription('Remote IPv6 Address.')
genEquipRemoteRadioRemotePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemotePrefixLength.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemotePrefixLength.setDescription('Remote IPv6 Subnet-Mask.')
genEquipRemoteRadioRemoteDefaultGatewayIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteDefaultGatewayIpv6.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteDefaultGatewayIpv6.setDescription('Remote IPv6 Default Gateway.')
genEquipRemoteRadioRemoteResetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 3, 1, 1, 29), FalseTrue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteResetSlot.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRemoteRadioRemoteResetSlot.setDescription('Remote Unit Reset Slot.')
genEquipRadioMRMC = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4))
genEquipRadioMRMCTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 1), )
if mibBuilder.loadTexts: genEquipRadioMRMCTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCTable.setDescription('MRMC stauts table (Multi rate multi constellation)')
genEquipRadioMRMCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 1, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioMRMCRadioId"))
if mibBuilder.loadTexts: genEquipRadioMRMCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCEntry.setDescription('MRMC status table (Multi rate multi constellation)')
genEquipRadioMRMCRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 1, 1, 1), RadioId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCRadioId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCRadioId.setDescription('This value is the radio ID that serves as this table Index')
genEquipRadioMRMCSelectedScriptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioMRMCSelectedScriptIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCSelectedScriptIndex.setDescription('The index of the MRMC script. The description of the script located in the genEquipRadioMRMCScriptTable.')
genEquipRadioMRMCOccupidBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCOccupidBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCOccupidBandwidth.setDescription('The Occupid Bandwidth (in KHz).')
genEquipRadioMRMCOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("regular-mode", 0), ("acm-fixed-mode", 1), ("acm-adaptive-mode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCOperMode.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCOperMode.setDescription('The Mode of the MRMC script.')
genEquipRadioMRMCCurrTxProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 1, 1, 5), MrmcProfile()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCCurrTxProfile.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCCurrTxProfile.setDescription('The Tx profile number.')
genEquipRadioMRMCCurrTxQAM = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCCurrTxQAM.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCCurrTxQAM.setDescription('The current Tx QAM (modulation).')
genEquipRadioMRMCCurrTxBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 1, 1, 7), MrmcBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCCurrTxBitrate.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCCurrTxBitrate.setDescription('The current Tx bit rate (in Kbps)')
genEquipRadioMRMCCurrTxVc = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCCurrTxVc.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCCurrTxVc.setDescription('The current number of Tx TDM channels.')
genEquipRadioMRMCCurrRxProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 1, 1, 9), MrmcProfile()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCCurrRxProfile.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCCurrRxProfile.setDescription('The current Rx profile number')
genEquipRadioMRMCCurrRxQAM = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCCurrRxQAM.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCCurrRxQAM.setDescription('The current Rx QAM (modulation).')
genEquipRadioMRMCCurrRxBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 1, 1, 11), MrmcBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCCurrRxBitrate.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCCurrRxBitrate.setDescription('The current total Rx bit rate (in Kbps)')
genEquipRadioMRMCCurrRxVc = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCCurrRxVc.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCCurrRxVc.setDescription('The current number of Rx TDM channels.')
genEquipRadioMRMCCurrGrade = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 1, 1, 13), RfuGrade()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCCurrGrade.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCCurrGrade.setDescription('The grade of the current script.')
genEquipRadioMRMCEnAlarmOnAcmProfileDegrade = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 1, 1, 14), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioMRMCEnAlarmOnAcmProfileDegrade.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCEnAlarmOnAcmProfileDegrade.setDescription('Enable/Disable event and trapgeneration on ACM profiledegrade. When enabled and ifcurrent radio script supports Adaptive Code Modulation(ACM) event and trap will begenerated upon ACM profiledegradation below userdefinedthreshold. Alarm willbe generated only if the ACMprofile stays below thethreshold for at least 5 subsequent seconds. Alarm willbe cleared after ACM profilereturns to be above thethreshold again.')
genEquipRadioMRMCAlarmOnAcmProfileDegradeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioMRMCAlarmOnAcmProfileDegradeThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCAlarmOnAcmProfileDegradeThreshold.setDescription('ACM profile threshold foralarm generation')
genEquipRadioMRMCScriptTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 2), )
if mibBuilder.loadTexts: genEquipRadioMRMCScriptTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptTable.setDescription('The MRMC script table.')
genEquipRadioMRMCScriptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 2, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioMRMCScriptRadioId"), (0, "MWRM-RADIO-MIB", "genEquipRadioMRMCScriptIndex"))
if mibBuilder.loadTexts: genEquipRadioMRMCScriptEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptEntry.setDescription('The MRMC script table.')
genEquipRadioMRMCScriptRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 2, 1, 1), RadioId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptRadioId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptRadioId.setDescription('This value is the radio ID that serves as this table Index')
genEquipRadioMRMCScriptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptIndex.setDescription('The index of the MRMC scripts.')
genEquipRadioMRMCScriptName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptName.setDescription('The MRMC script name.')
genEquipRadioMRMCScriptOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("regular-mode", 0), ("acm-fixed-mode", 1), ("acm-adaptive-mode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptOperMode.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptOperMode.setDescription('The script operational mode.')
genEquipRadioMRMCScriptProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 2, 1, 5), MrmcProfile()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptProfile.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptProfile.setDescription('The profile number of the script')
genEquipRadioMRMCScriptProfileBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 2, 1, 6), MrmcBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptProfileBitrate.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptProfileBitrate.setDescription('The Bit rate of the MRMC profile (in Kbps).')
genEquipRadioMRMCScriptAdaptivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable-adaptive-power", 0), ("disable-adaptive-power", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAdaptivePower.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAdaptivePower.setDescription("'Adaptive Power' option which is available only when operation mode is ACM-adaptive")
genEquipRadioMRMCScriptReference = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("calss-2", 0), ("class-4", 1), ("class-5b", 2), ("class-6a", 3), ("fcc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptReference.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptReference.setDescription("'Reference Class' option which is available only when operation mode 'ACM-adaptive' AND 'Adaptive Power' are enabled.")
genEquipRadioMRMCScriptMinProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 2, 1, 9), MrmcProfile()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptMinProfile.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptMinProfile.setDescription("'Minimum Profile' option which is available only when operation mode 'ACM-adaptive' AND 'Adaptive Power' are enabled. It state the minimum profile level for this script.")
genEquipRadioMRMCFilteredTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 3), )
if mibBuilder.loadTexts: genEquipRadioMRMCFilteredTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCFilteredTable.setDescription('Filtered MRMC scripts table.')
genEquipRadioMRMCFilteredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 3, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioMRMCFilteredRadioId"), (0, "MWRM-RADIO-MIB", "genEquipRadioMRMCFilteredScriptId"))
if mibBuilder.loadTexts: genEquipRadioMRMCFilteredEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCFilteredEntry.setDescription('List of the filtered MRMC scripts.')
genEquipRadioMRMCFilteredRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 3, 1, 1), RadioId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCFilteredRadioId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCFilteredRadioId.setDescription('The index of the radio interface')
genEquipRadioMRMCFilteredScriptId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 3, 1, 2), MrmcScriptId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCFilteredScriptId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCFilteredScriptId.setDescription('The MRMC filtered script IDs that are available in the specific radio.')
genEquipRadioMRMCProfileAttrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 4), )
if mibBuilder.loadTexts: genEquipRadioMRMCProfileAttrTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCProfileAttrTable.setDescription('MRMC profile attribute table.')
genEquipRadioMRMCProfileAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 4, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioMRMCProfileAttrScriptId"), (0, "MWRM-RADIO-MIB", "genEquipRadioMRMCProfileAttrTxProfile"), (0, "MWRM-RADIO-MIB", "genEquipRadioMRMCProfileAttrRxProfile"))
if mibBuilder.loadTexts: genEquipRadioMRMCProfileAttrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCProfileAttrEntry.setDescription("MRMC script profile's attributes.")
genEquipRadioMRMCProfileAttrScriptId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 4, 1, 1), MrmcScriptId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCProfileAttrScriptId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCProfileAttrScriptId.setDescription('The index of the table')
genEquipRadioMRMCProfileAttrTxProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 4, 1, 2), MrmcProfile()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCProfileAttrTxProfile.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCProfileAttrTxProfile.setDescription('The profile number of the TX channel.')
genEquipRadioMRMCProfileAttrRxProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 4, 1, 3), MrmcProfile()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCProfileAttrRxProfile.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCProfileAttrRxProfile.setDescription('The profile number of the RX channel.')
genEquipRadioMRMCProfileAttrTxQAM = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 4, 1, 4), QamOrder()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCProfileAttrTxQAM.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCProfileAttrTxQAM.setDescription('Indicates the QAM level of the TX channel.')
genEquipRadioMRMCProfileAttrTxBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 4, 1, 5), MrmcBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCProfileAttrTxBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCProfileAttrTxBitRate.setDescription('Indicates the TX bit-rate of the profile.')
genEquipRadioMRMCProfileAttrRxQAM = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 4, 1, 6), QamOrder()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCProfileAttrRxQAM.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCProfileAttrRxQAM.setDescription('Indicates the QAM level of the RX channel.')
genEquipRadioMRMCProfileAttrRxBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 4, 1, 7), MrmcBitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCProfileAttrRxBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCProfileAttrRxBitRate.setDescription('RX bit-rate of the profile.')
genEquipRadioMRMCScriptAttrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5), )
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrTable.setDescription('MRMC script attribute table.')
genEquipRadioMRMCScriptAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioMRMCScriptAttrScriptId"))
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrEntry.setDescription('MRMC script attributes.')
genEquipRadioMRMCScriptAttrScriptId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1, 1), MrmcScriptId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrScriptId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrScriptId.setDescription('The ID of the MRMC script.')
genEquipRadioMRMCScriptAttrScriptName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrScriptName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrScriptName.setDescription('The name that identifies the script.')
genEquipRadioMRMCScriptAttrSupportACM = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1, 3), NoYes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrSupportACM.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrSupportACM.setDescription('Indicates if the MRMC script supports ACM (Adaptive Coding Modulation) functionality')
genEquipRadioMRMCScriptAttrStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("etsi", 1), ("fcc", 2), ("etsi-fcc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrStandard.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrStandard.setDescription('The standard that the MRMC script is designed to comply with.')
genEquipRadioMRMCScriptAttrMultiCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("single-carrier", 0), ("xpic", 1), ("mimo", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrMultiCarrier.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrMultiCarrier.setDescription('Indicates whether the MRMC script support a single carrier or any kind of multi carrier.')
genEquipRadioMRMCScriptAttrAdjChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1, 6), NoYes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrAdjChannel.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrAdjChannel.setDescription('Indicates whether the MRMC script supports adjacent channel')
genEquipRadioMRMCScriptAttrModScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("regular", 2), ("fixed", 3), ("adaptive", 4), ("fixed-adaptive", 5), ("manual", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrModScheme.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrModScheme.setDescription('Indicates whether the MRMC script supports fixed or adaptive (ACM) modulation scheme.')
genEquipRadioMRMCScriptAttrSymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("asymmetry", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrSymmetry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrSymmetry.setDescription('Indicates whether the MRMC script is designed to normal (symmetrical) BW or an Asymmetrical BW.')
genEquipRadioMRMCScriptAttrLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("low", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrLatency.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrLatency.setDescription('The Latency level of the MRMC Script.')
genEquipRadioMRMCScriptAttrTxBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrTxBW.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrTxBW.setDescription('The TX channel bandwidth (channel spacing) of the MRMC script.')
genEquipRadioMRMCScriptAttrRxBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrRxBW.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrRxBW.setDescription('The RX channel bandwidth (channel spacing) of the MRMC script.')
genEquipRadioMRMCScriptAttrTxOccupiedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrTxOccupiedBW.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrTxOccupiedBW.setDescription('The TX channel occupied bandwidth of the MRMC script.')
genEquipRadioMRMCScriptAttrRxOccupiedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrRxOccupiedBW.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrRxOccupiedBW.setDescription('The RX channel occupied bandwidth of the MRMC script.')
genEquipRadioMRMCScriptAttrLinkGrade = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1, 14), RfuGrade()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrLinkGrade.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrLinkGrade.setDescription('The link grade level that the MRMC script is designed to cope with.')
genEquipRadioMRMCScriptAttrDiffGrade = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1, 15), RfuGrade()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrDiffGrade.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrDiffGrade.setDescription('The Differential grade level that the MRMC script is designed to cope with.')
genEquipRadioMRMCScriptAttrChannelBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrChannelBW.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrChannelBW.setDescription('The channel bandwidth (channel spacing) the MRMC script is designed to.')
genEquipRadioMRMCScriptAttrTxMaxProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1, 17), MrmcProfile()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrTxMaxProfile.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrTxMaxProfile.setDescription('The maximum available TX profile of the MRMC script.')
genEquipRadioMRMCScriptAttrRxMaxProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 5, 1, 18), MrmcProfile()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrRxMaxProfile.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCScriptAttrRxMaxProfile.setDescription('The maximum available RX profile of the MRMC script.')
genEquipRadioMRMCConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 6), )
if mibBuilder.loadTexts: genEquipRadioMRMCConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCConfigTable.setDescription('MRMC script configuration.')
genEquipRadioMRMCConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 6, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioMRMCConfigRadioId"))
if mibBuilder.loadTexts: genEquipRadioMRMCConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCConfigEntry.setDescription('The configured parameters of the MRMC script.')
genEquipRadioMRMCConfigRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 6, 1, 1), RadioId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioMRMCConfigRadioId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCConfigRadioId.setDescription('The index of the MRMC Configuration Table.')
genEquipRadioMRMCConfigActiveScriptId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 6, 1, 2), MrmcScriptId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioMRMCConfigActiveScriptId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCConfigActiveScriptId.setDescription('The script ID of required MRMC script.')
genEquipRadioMRMCConfigStandbyScriptId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 6, 1, 3), MrmcScriptId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioMRMCConfigStandbyScriptId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCConfigStandbyScriptId.setDescription('The script ID which is in standby.')
genEquipRadioMRMCConfigOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("fixed", 2), ("adaptive", 3), ("manual", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioMRMCConfigOperMode.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCConfigOperMode.setDescription('The operational mode of the MRMC script, whether it is fixed or adaptive modulation functionality.')
genEquipRadioMRMCConfigMaxProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 6, 1, 5), MrmcProfile()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioMRMCConfigMaxProfile.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCConfigMaxProfile.setDescription('The maximum profile which is required for the MRMC script')
genEquipRadioMRMCConfigMinProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 6, 1, 6), MrmcProfile()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioMRMCConfigMinProfile.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCConfigMinProfile.setDescription('The minimum profile which is required for the MRMC script')
genEquipRadioMRMCConfigAdaptivePowerAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 6, 1, 7), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioMRMCConfigAdaptivePowerAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCConfigAdaptivePowerAdmin.setDescription('Enable or disable the adaptive power functionality during ACM operation.')
genEquipRadioMRMCConfigAdaptivePowerRefClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 4, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("class-2", 0), ("class-4", 1), ("class-5b", 2), ("class-6a", 3), ("fcc", 4), ("class-7a", 5), ("class-7b", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioMRMCConfigAdaptivePowerRefClass.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioMRMCConfigAdaptivePowerRefClass.setDescription('Determines the efficiency class for the adaptive power functionality in ACM operation.')
genEquipRadioComp = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5))
genEquipRadioCompCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 1), )
if mibBuilder.loadTexts: genEquipRadioCompCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompCfgTable.setDescription('Radio Compression table')
genEquipRadioCompCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 1, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioCfgRadioId"))
if mibBuilder.loadTexts: genEquipRadioCompCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompCfgEntry.setDescription('Radio Compression table')
genEquipRadioCompMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("legacy", 0), ("enhanced", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCompMode.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompMode.setDescription('Setting Ethernet packet header & payload compression mode. In Enhanced mode packet header can be compressed up to L4 and data compression can be activated. Legacy mode is back compatible to earlier software and hardware releases.')
genEquipRadioEnhHeaderCompAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 1, 1, 2), AllowedNotAllowed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioEnhHeaderCompAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioEnhHeaderCompAdmin.setDescription('Enable/Disable Enhanced Header compression.')
genEquipRadioEnhDataCompAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 1, 1, 3), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioEnhDataCompAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioEnhDataCompAdmin.setDescription('Enable/Disable Enhanced Data compression.')
genEquipRadioEnhHeaderCompMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("l2", 0), ("l3", 1), ("l4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioEnhHeaderCompMode.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioEnhHeaderCompMode.setDescription('Setting Enhanced Header Compression depth.')
genEquipRadioCompStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 2), )
if mibBuilder.loadTexts: genEquipRadioCompStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompStatusTable.setDescription('Radio Compression status table.')
genEquipRadioCompStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 2, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioCfgRadioId"))
if mibBuilder.loadTexts: genEquipRadioCompStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompStatusEntry.setDescription('Radio Compression status table.')
genEquipRadioCompOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("legacy", 0), ("enhanced-HC-DC-bypass", 1), ("enhanced-HC-active-DC-bypass", 2), ("enhanced-DC-active-HC-bypass", 3), ("enhanced-HC-DC-active", 4), ("undefined", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompOperationalState.setDescription('Current compression mode operational status.')
genEquipRadioCompExclRulesTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 3), )
if mibBuilder.loadTexts: genEquipRadioCompExclRulesTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompExclRulesTable.setDescription('Enhanced Header Compression excluding rules table.')
genEquipRadioCompExclRulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 3, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioCfgRadioId"), (0, "MWRM-RADIO-MIB", "genEquipRadioCompExclRuleId"))
if mibBuilder.loadTexts: genEquipRadioCompExclRulesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompExclRulesEntry.setDescription('Enhanced Header Compression excluding rules table.')
genEquipRadioCompExclRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompExclRuleId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompExclRuleId.setDescription('Excluding rule number index.')
genEquipRadioCompExclRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("flow-Id", 0), ("vlan", 1), ("mac-DA", 2), ("mac-SA", 3), ("ethertype", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCompExclRuleType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompExclRuleType.setDescription('Add excluding rule for enhanced header compression. Excluding rule must have a number (rule-id), text description (rule-name) and excluding rule type whichcan be one of the following: VLAN Id or MAC destination address or MAC source address or Ethernet ethertype or user defined flow type.')
genEquipRadioCompExclRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCompExclRuleName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompExclRuleName.setDescription('Excluding rule name. User specified.')
genEquipRadioCompExclRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCompExclRuleValue.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompExclRuleValue.setDescription('Excluding rule value. For example: MAC address or Ethertype.')
genEquipRadioCompExclRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 3, 1, 30), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCompExclRuleRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompExclRuleRowStatus.setDescription('Row status for this table.')
genEquipRadioCompNG = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4))
genEquipRadioCompNGCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 1), )
if mibBuilder.loadTexts: genEquipRadioCompNGCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGCfgTable.setDescription('Radio Ethernet and compression config table')
genEquipRadioCompNGCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 1, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioCompNGCfgifIndex"))
if mibBuilder.loadTexts: genEquipRadioCompNGCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGCfgEntry.setDescription('Radio Ethernet and compression config table entry')
genEquipRadioCompNGCfgifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCompNGCfgifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGCfgifIndex.setDescription('Interface Index.')
genEquipRadioHeaderCompNGCfgClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 1, 1, 2), NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioHeaderCompNGCfgClearStats.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioHeaderCompNGCfgClearStats.setDescription('Clear counters on the radio port. This includes: compression counters, PTP optimized transport and cut-through counters.')
genEquipRadioHeaderCompNGCfgUserFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioHeaderCompNGCfgUserFlowType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioHeaderCompNGCfgUserFlowType.setDescription('User configured flow type for enhanced HC. This flow type is used for statistics and performance evaluation of the enhanced HC.')
genEquipRadioHeaderCompNGCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 1, 1, 4), HcModeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioHeaderCompNGCfgMode.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioHeaderCompNGCfgMode.setDescription('Legacy mode is compatible for old platforms. Disabled mode disables compression. Other modes specify compression depth.')
genEquipRadioCutThroughNGCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 1, 1, 5), NoYes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCfgMode.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCfgMode.setDescription('Enable/Disable cut-through.')
genEquipRadioCompNGExclRulesTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 2), )
if mibBuilder.loadTexts: genEquipRadioCompNGExclRulesTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGExclRulesTable.setDescription('Enhanced HC excluding rules table')
genEquipRadioCompNGExclRulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 2, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioCompNGExclRulesifIndex"), (0, "MWRM-RADIO-MIB", "genEquipRadioCompNGExclRuleId"))
if mibBuilder.loadTexts: genEquipRadioCompNGExclRulesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGExclRulesEntry.setDescription('Enhanced HC excluding rules table entry')
genEquipRadioCompNGExclRulesifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompNGExclRulesifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGExclRulesifIndex.setDescription('Interface Index.')
genEquipRadioCompNGExclRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompNGExclRuleId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGExclRuleId.setDescription('Excluding rule number.')
genEquipRadioCompNGExclRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompNGExclRuleName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGExclRuleName.setDescription('Excluding rule name.')
genEquipRadioCompNGExclRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 2, 1, 4), EnhancedHCExclRuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompNGExclRuleType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGExclRuleType.setDescription('Excluding rule type. Possible options are: DA MAC, SA MAC, VLAN(4 bytes), Ethertype or Flow type.')
genEquipRadioCompNGExclRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompNGExclRuleValue.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGExclRuleValue.setDescription('Excluding rule value. The value may be MAC address, VLAN(4 bytes), Ethertype(2 bytes) or Flow type(1 byte).')
genEquipRadioCutThroughNGCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 3), )
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersTable.setDescription('Port counters table')
genEquipRadioCutThroughNGCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 3, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioCutThroughNGCountersifIndex"))
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersEntry.setDescription('Port counters table entry')
genEquipRadioCutThroughNGCountersifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersifIndex.setDescription('Interface Index.')
genEquipRadioCutThroughNGCountersRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersRxFrames.setDescription('Counter of good cut-through bytes received.')
genEquipRadioCutThroughNGCountersRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersRxBytes.setDescription('Counter of good cut-through bytes received.')
genEquipRadioCutThroughNGCountersTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersTxFrames.setDescription('Counter of cut-through frames transmitted.')
genEquipRadioCutThroughNGCountersTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersTxBytes.setDescription('Counter of cut-through bytes transmitted.')
genEquipRadioCutThroughNGCountersTotalRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersTotalRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersTotalRxFrames.setDescription('Counter of total good frames received on the port.')
genEquipRadioCutThroughNGCountersTotalRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersTotalRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersTotalRxBytes.setDescription('Counter of total good bytes received on the port.')
genEquipRadioCutThroughNGCountersTotalTxBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersTotalTxBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersTotalTxBytesOut.setDescription('Counter of total transmitted bytes.')
genEquipRadioCutThroughNGCountersTotalTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersTotalTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersTotalTxFrames.setDescription('Counter of total transmitted frames.')
genEquipRadioCutThroughNGCountersTotalTxIdleBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersTotalTxIdleBytes.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersTotalTxIdleBytes.setDescription('Counter of total transmitted idle bytes.')
genEquipRadioCutThroughNGCountersTotalTxBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersTotalTxBytesIn.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughNGCountersTotalTxBytesIn.setDescription('Counter of total transmitted bytes.')
genEquipRadioCompNGStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 4), )
if mibBuilder.loadTexts: genEquipRadioCompNGStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGStatusTable.setDescription('Radio Ethernet and compression status table')
genEquipRadioCompNGStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 4, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioCompNGStatusifindex"))
if mibBuilder.loadTexts: genEquipRadioCompNGStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGStatusEntry.setDescription('Radio Ethernet and compression status table entry')
genEquipRadioCompNGStatusifindex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompNGStatusifindex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGStatusifindex.setDescription('Interface location.')
genEquipRadioCompNGStatusOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 4, 1, 2), HcModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompNGStatusOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGStatusOperationalState.setDescription('Header Compression operational state.')
genEquipRadioCompNGStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 4, 1, 3), HcType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompNGStatusType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGStatusType.setDescription('Header Compression type.')
genEquipRadioCompNGCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 7), )
if mibBuilder.loadTexts: genEquipRadioCompNGCountersTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGCountersTable.setDescription('Enhanced HC counters table')
genEquipRadioCompNGCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 7, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioCompNGCountersifIndex"))
if mibBuilder.loadTexts: genEquipRadioCompNGCountersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGCountersEntry.setDescription('Enhanced HC counters table entry')
genEquipRadioCompNGCountersifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompNGCountersifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGCountersifIndex.setDescription('Interface location.')
genEquipRadioCompNGCountersHCInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompNGCountersHCInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGCountersHCInBytes.setDescription('Counter of bytes on the TX side before enhanced header compression.')
genEquipRadioCompNGCountersHCOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompNGCountersHCOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGCountersHCOutBytes.setDescription('Counter of bytes on the TX side compressed by enhanced header compression.')
genEquipRadioCompNGCountersHCCompFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompNGCountersHCCompFrm.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGCountersHCCompFrm.setDescription('Counter of frames on the TX side compressed by enhanced header compression.')
genEquipRadioCompNGCountersHCFrmUncmpExclRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompNGCountersHCFrmUncmpExclRule.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGCountersHCFrmUncmpExclRule.setDescription('Counter of frames on the TX side not compressed by enhanced header compression due to excluding rules.')
genEquipRadioCompNGCountersHCFrmUcompInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompNGCountersHCFrmUcompInternal.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGCountersHCFrmUcompInternal.setDescription('Counter of frames on the TX side not compressed by enhanced header compression due to other resons.')
genEquipRadioCompNGCountersHCLearningFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompNGCountersHCLearningFrm.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGCountersHCLearningFrm.setDescription('Counter of learning frames transmitted by enhanced header compression.')
genEquipRadioCompNGCountersHCUserFlowTypeActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 7, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompNGCountersHCUserFlowTypeActiveFlows.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGCountersHCUserFlowTypeActiveFlows.setDescription('Number of enhanced HC active flows occupied by user selected flow type.')
genEquipRadioCompNGCountersHCTotalActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 5, 4, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCompNGCountersHCTotalActiveFlows.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCompNGCountersHCTotalActiveFlows.setDescription('Number of enhanced HC active flows on the TX side.')
genEquipRadioPtpTransport = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 7, 6))
genEquipRadioPtpTransportCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 6, 1), )
if mibBuilder.loadTexts: genEquipRadioPtpTransportCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioPtpTransportCfgTable.setDescription('PTP optimized transport channel configuration table.')
genEquipRadioPtpTransportCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 6, 1, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioCfgRadioId"))
if mibBuilder.loadTexts: genEquipRadioPtpTransportCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioPtpTransportCfgEntry.setDescription('PTP optimized transport channel configuration table.')
genEquipRadioPtpTransportChannelAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 6, 1, 1, 1), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioPtpTransportChannelAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioPtpTransportChannelAdmin.setDescription('PTP optimized transport admin.')
genEquipRadioPtpTransportChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("h-cos", 0), ("ieee-1588", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioPtpTransportChannelMode.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioPtpTransportChannelMode.setDescription('PTP optimized transport operational mode.')
genEquipRadioPtpTransportCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 6, 2), )
if mibBuilder.loadTexts: genEquipRadioPtpTransportCountersTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioPtpTransportCountersTable.setDescription('PTP optimized transport channel counters table.')
genEquipRadioPtpTransportCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 6, 2, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioCfgRadioId"))
if mibBuilder.loadTexts: genEquipRadioPtpTransportCountersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioPtpTransportCountersEntry.setDescription('PTP optimized transport channel counters table.')
genEquipRadioPtpTransportTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioPtpTransportTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioPtpTransportTxFrames.setDescription('PTP optimized transport TX frames.')
genEquipRadioPtpTransportTxDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioPtpTransportTxDroppedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioPtpTransportTxDroppedFrames.setDescription('PTP optimized transport TX dropped frames.')
genEquipRadioPtpTransportTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioPtpTransportTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioPtpTransportTxBytes.setDescription('PTP optimized transport TX bytes.')
genEquipRadioPtpTransportTxDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioPtpTransportTxDroppedBytes.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioPtpTransportTxDroppedBytes.setDescription('PTP optimized transport TX dropped bytes.')
genEquipRadioPtpTransportRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioPtpTransportRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioPtpTransportRxFrames.setDescription('PTP optimized transport RX frames.')
genEquipRadioPtpTransportRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioPtpTransportRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioPtpTransportRxBytes.setDescription('PTP optimized transport RX bytes.')
genEquipRadioCutThrough = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 7, 7))
genEquipRadioCutThroughCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 7, 1), )
if mibBuilder.loadTexts: genEquipRadioCutThroughCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughCfgTable.setDescription('Cut through configuration table.')
genEquipRadioCutThroughCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 7, 1, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioCfgRadioId"))
if mibBuilder.loadTexts: genEquipRadioCutThroughCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughCfgEntry.setDescription('Cut through configuration table.')
genEquipRadioCutThroughChannelAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 7, 1, 1, 1), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioCutThroughChannelAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughChannelAdmin.setDescription('Enable/Disable cut through mode.')
genEquipRadioCutThroughCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 7, 2), )
if mibBuilder.loadTexts: genEquipRadioCutThroughCountersTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughCountersTable.setDescription('Cut through mode counters table.')
genEquipRadioCutThroughCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 7, 2, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioCfgRadioId"))
if mibBuilder.loadTexts: genEquipRadioCutThroughCountersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughCountersEntry.setDescription('Cut through mode counters table.')
genEquipRadioCutThroughTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCutThroughTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughTxFrames.setDescription('Cut through TX frames.')
genEquipRadioCutThroughTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCutThroughTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughTxBytes.setDescription('Cut through TX bytes.')
genEquipRadioCutThroughRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCutThroughRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughRxFrames.setDescription('Cut through RX frames.')
genEquipRadioCutThroughRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioCutThroughRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioCutThroughRxBytes.setDescription('Cut through RX bytes.')
genEquipRadioGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8))
genEquipRadioGroupsProtection = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1))
genEquipRadioGroupsProtectionAttrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 1), )
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionAttrTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionAttrTable.setDescription('This table contains the attributes of the radio protection groups.')
genEquipRadioGroupsProtectionAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 1, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioGroupsProtectionAttrGroupIfIndex"))
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionAttrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionAttrEntry.setDescription('This table entry contains the attributes of the radio protection groups.')
genEquipRadioGroupsProtectionAttrGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionAttrGroupIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionAttrGroupIfIndex.setDescription('The location of the group')
genEquipRadioGroupsProtectionAttrGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionAttrGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionAttrGroupId.setDescription('The Id of the radio protection group.')
genEquipRadioGroupsProtectionAttrCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 1, 1, 3), RadioProtectionCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionAttrCommand.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionAttrCommand.setDescription('Radio protection user commands for maintenance purposes: force-switch, lockout and manual-switch.')
genEquipRadioGroupsProtectionAttrCopyToMate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 1, 1, 4), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionAttrCopyToMate.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionAttrCopyToMate.setDescription('Copy to mate command that copies the configuration from one radio to another in order to achieve configuration alignment.')
genEquipRadioGroupsProtectionAttrCopyToMateSourceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionAttrCopyToMateSourceIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionAttrCopyToMateSourceIfIndex.setDescription('The radio location which is required to be the source of configuration for copy-to-mate command.')
genEquipRadioGroupsProtectionAttrRevertiveAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 1, 1, 6), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionAttrRevertiveAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionAttrRevertiveAdmin.setDescription('Enable or disable revertive mode of radio protection.')
genEquipRadioGroupsProtectionAttrRevertivePrimaryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionAttrRevertivePrimaryIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionAttrRevertivePrimaryIfIndex.setDescription('The radio which the system is required to revert to.')
genEquipRadioGroupsProtectionMembersTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 2), )
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionMembersTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionMembersTable.setDescription('This table contains the radio protection groups members.')
genEquipRadioGroupsProtectionMembersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 2, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioGroupsProtectionMembersIfIndexGroup"))
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionMembersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionMembersEntry.setDescription('This table entry contains the radio protection groups members.')
genEquipRadioGroupsProtectionMembersIfIndexGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionMembersIfIndexGroup.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionMembersIfIndexGroup.setDescription('The location of the radio protection group')
genEquipRadioGroupsProtectionMembersGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionMembersGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionMembersGroupId.setDescription('The Id of the radio protection group.')
genEquipRadioGroupsProtectionMembersMem1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionMembersMem1IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionMembersMem1IfIndex.setDescription('The radio location of member 1.')
genEquipRadioGroupsProtectionMembersMem2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionMembersMem2IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionMembersMem2IfIndex.setDescription('The radio location of member 2.')
genEquipRadioGroupsProtectionMembersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 2, 1, 30), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionMembersRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionMembersRowStatus.setDescription('Row status to allow user add entries dynamically.')
genEquipRadioGroupsProtectionStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 3), )
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionStatusTable.setDescription('This table contains the status of the radio protection.')
genEquipRadioGroupsProtectionStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 3, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioGroupsProtectionStatusGroupIfIndex"))
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionStatusEntry.setDescription('This table entry contains the status of the radio protection.')
genEquipRadioGroupsProtectionStatusGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionStatusGroupIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionStatusGroupIfIndex.setDescription('The location of the group')
genEquipRadioGroupsProtectionStatusActiveIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionStatusActiveIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionStatusActiveIfIndex.setDescription('The active radio location')
genEquipRadioGroupsProtectionStatusStandbyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionStatusStandbyIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionStatusStandbyIfIndex.setDescription('The standby radio location.')
genEquipRadioGroupsProtectionStatusLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 3, 1, 4), NoYes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionStatusLockout.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionStatusLockout.setDescription('The radio location of member 1.')
genEquipRadioGroupsProtectionBBSSD = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10))
genEquipRadioGroupsProtectionBBSSDAttrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10, 1), )
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDAttrTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDAttrTable.setDescription('This table contains the BBS-SD attributes of the radio protection groups.')
genEquipRadioGroupsProtectionBBSSDAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10, 1, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioGroupsProtectionBBSSDAttrGroupIfIndex"))
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDAttrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDAttrEntry.setDescription('This table entry contains the BBS-SD attributes of the radio protection groups.')
genEquipRadioGroupsProtectionBBSSDAttrGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDAttrGroupIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDAttrGroupIfIndex.setDescription('The location of the group')
genEquipRadioGroupsProtectionBBSSDAttrRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10, 1, 1, 2), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDAttrRevertive.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDAttrRevertive.setDescription('Enable or disable revertive mode for BBS-SD Rx switch.')
genEquipRadioGroupsProtectionBBSSDAttrClrSwCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10, 1, 1, 3), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDAttrClrSwCnt.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDAttrClrSwCnt.setDescription('Clear BBS-SD Rx switch counter.')
genEquipRadioGroupsProtectionBBSSDAttrFWAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10, 1, 1, 4), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDAttrFWAuto.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDAttrFWAuto.setDescription('Enable or disable automatic Rx switching in BBS-SD.')
genEquipRadioGroupsProtectionBBSSDStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10, 2), )
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusTable.setDescription('This table contains the BBS-SD status of the radio protection groups.')
genEquipRadioGroupsProtectionBBSSDStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10, 2, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioGroupsProtectionBBSSDStatusGroupIfIndex"))
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusEntry.setDescription('This table entry contains the BBS-SD status of the radio protection groups.')
genEquipRadioGroupsProtectionBBSSDStatusGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusGroupIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusGroupIfIndex.setDescription('The location of the group')
genEquipRadioGroupsProtectionBBSSDStatusAbcGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusAbcGroupIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusAbcGroupIfIndex.setDescription('The attached MC-ABC group if_index.')
genEquipRadioGroupsProtectionBBSSDStatusActiveRxQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusActiveRxQuality.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusActiveRxQuality.setDescription('The active MC-ABC channel quality.')
genEquipRadioGroupsProtectionBBSSDStatusActiveRxRadioIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusActiveRxRadioIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusActiveRxRadioIfIndex.setDescription('The active rx radio if_index.')
genEquipRadioGroupsProtectionBBSSDStatusActiveTxRadioIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusActiveTxRadioIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusActiveTxRadioIfIndex.setDescription('The active Tx radio if_index.')
genEquipRadioGroupsProtectionBBSSDStatusLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10, 2, 1, 6), NoYes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusLockout.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusLockout.setDescription('Indicates whether the radio protection is currently in lockout.')
genEquipRadioGroupsProtectionBBSSDStatusRxChId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusRxChId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusRxChId.setDescription('The attached MC-ABC channel ID.')
genEquipRadioGroupsProtectionBBSSDStatusStdbyRxQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusStdbyRxQuality.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusStdbyRxQuality.setDescription('The standby MC-ABC channel quality.')
genEquipRadioGroupsProtectionBBSSDStatusStdbyRxRadioIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusStdbyRxRadioIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusStdbyRxRadioIfIndex.setDescription('The standby rx radio if_index.')
genEquipRadioGroupsProtectionBBSSDStatusStandbyTxRadioIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 1, 10, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusStandbyTxRadioIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsProtectionBBSSDStatusStandbyTxRadioIfIndex.setDescription('The standby Tx radio if_index.')
genEquipRadioGroupsXpic = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2))
genEquipRadioGroupsXPICAttrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2, 1), )
if mibBuilder.loadTexts: genEquipRadioGroupsXPICAttrTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsXPICAttrTable.setDescription('This table contains the configuration of the radio XPIC groups.')
genEquipRadioGroupsXPICAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2, 1, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioGroupsXPICAttrGroupIfIndex"))
if mibBuilder.loadTexts: genEquipRadioGroupsXPICAttrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsXPICAttrEntry.setDescription('This table entry contains the configuration of the radio XPIC groups.')
genEquipRadioGroupsXPICAttrGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsXPICAttrGroupIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsXPICAttrGroupIfIndex.setDescription('The location of the group.')
genEquipRadioGroupsXPICAttrCopyToMateSourceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsXPICAttrCopyToMateSourceIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsXPICAttrCopyToMateSourceIfIndex.setDescription('The radio location which is required to be the source of configuration for copy-to-mate command.')
genEquipRadioGroupsXPICAttrGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsXPICAttrGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsXPICAttrGroupId.setDescription('XPIC group id.')
genEquipRadioGroupsXPICAttrXRSMAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2, 1, 1, 4), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsXPICAttrXRSMAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsXPICAttrXRSMAdmin.setDescription('Administrative state of XPIC recovery state machine.')
genEquipRadioGroupsXPICAttrAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2, 1, 1, 5), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsXPICAttrAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsXPICAttrAdmin.setDescription('Administrative state of XPIC.')
genEquipRadioGroupsXPICAttrCopyToMate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2, 1, 1, 6), Copy2mate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsXPICAttrCopyToMate.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsXPICAttrCopyToMate.setDescription('User Command to resolve the mismatch between the two carriers in the XPIC group.')
genEquipRadioGroupsXPICMembersTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2, 2), )
if mibBuilder.loadTexts: genEquipRadioGroupsXPICMembersTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsXPICMembersTable.setDescription('This table contains the radio XPIC groups members.')
genEquipRadioGroupsXPICMembersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2, 2, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioGroupsXPICMembersIfIndexGroup"))
if mibBuilder.loadTexts: genEquipRadioGroupsXPICMembersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsXPICMembersEntry.setDescription('This table entry contains the radio XPIC groups members.')
genEquipRadioGroupsXPICMembersIfIndexGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsXPICMembersIfIndexGroup.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsXPICMembersIfIndexGroup.setDescription('The location of the radio XPIC group.')
genEquipRadioGroupsXPICMembersMem1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsXPICMembersMem1IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsXPICMembersMem1IfIndex.setDescription('The radio location of member 1.')
genEquipRadioGroupsXPICMembersMem2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsXPICMembersMem2IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsXPICMembersMem2IfIndex.setDescription('The radio location of member 2.')
genEquipRadioGroupsXPICMembersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2, 2, 1, 30), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsXPICMembersRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsXPICMembersRowStatus.setDescription('Row status to allow user add entries dynamically.')
genEquipRadioGroupsXPICStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2, 3), )
if mibBuilder.loadTexts: genEquipRadioGroupsXPICStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsXPICStatusTable.setDescription('This table contains the status of the XPIC.')
genEquipRadioGroupsXPICStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2, 3, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioGroupsXPICStatusGroupIfIndex"))
if mibBuilder.loadTexts: genEquipRadioGroupsXPICStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsXPICStatusEntry.setDescription('This table entry contains the status of the XPIC.')
genEquipRadioGroupsXPICStatusGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsXPICStatusGroupIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsXPICStatusGroupIfIndex.setDescription('The location of the group')
genEquipRadioGroupsXPICStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 2, 3, 1, 2), XpicState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsXPICStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsXPICStatusState.setDescription('The state of XPIC State Machine')
genEquipRadioGroupsMR = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3))
genEquipRadioGroupsMRAttrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 1), )
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrTable.setDescription('MR config table.')
genEquipRadioGroupsMRAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 1, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioGroupsMRAttrGroupIfIndex"))
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrEntry.setDescription('MR config table entry.')
genEquipRadioGroupsMRAttrGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrGroupIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrGroupIfIndex.setDescription('The location of the group')
genEquipRadioGroupsMRAttrGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrGroupId.setDescription('The Id of the radio MR group.')
genEquipRadioGroupsMRAttrAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 1, 1, 3), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrAdmin.setDescription('MR Admin.')
genEquipRadioGroupsMRAttrBlockRadioIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrBlockRadioIfindex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrBlockRadioIfindex.setDescription('Block Radio ifindex.')
genEquipRadioGroupsMRAttrBlockRadioAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 1, 1, 5), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrBlockRadioAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrBlockRadioAdmin.setDescription('Block Radio Admin.')
genEquipRadioGroupsMRAttrCopy2MateIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrCopy2MateIfindex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrCopy2MateIfindex.setDescription('Copy2mate Radio ifindex.')
genEquipRadioGroupsMRAttrCopy2MateAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 1, 1, 7), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrCopy2MateAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrCopy2MateAdmin.setDescription('Copy2Mate Admin.')
genEquipRadioGroupsMRAttrExBerAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 1, 1, 8), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrExBerAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrExBerAdmin.setDescription('Excessive BER Admin.')
genEquipRadioGroupsMRAttrMinNumRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrMinNumRadio.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrMinNumRadio.setDescription('Minimal num of radios.')
genEquipRadioGroupsMRAttrMinProfileAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 1, 1, 10), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrMinProfileAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrMinProfileAdmin.setDescription('Min ACM profile admin.')
genEquipRadioGroupsMRAttrSigDegardeAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 1, 1, 11), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrSigDegardeAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRAttrSigDegardeAdmin.setDescription('Signal Degrade Admin.')
genEquipRadioGroupsMRMembersTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 2), )
if mibBuilder.loadTexts: genEquipRadioGroupsMRMembersTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRMembersTable.setDescription('MR members table.')
genEquipRadioGroupsMRMembersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 2, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioGroupsMRMembersIfIndexGroup"))
if mibBuilder.loadTexts: genEquipRadioGroupsMRMembersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRMembersEntry.setDescription('MR members table entry.')
genEquipRadioGroupsMRMembersIfIndexGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsMRMembersIfIndexGroup.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRMembersIfIndexGroup.setDescription('The location of the radio MR group')
genEquipRadioGroupsMRMembersMem1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMRMembersMem1IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRMembersMem1IfIndex.setDescription('The radio location of member 1.')
genEquipRadioGroupsMRMembersMem2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMRMembersMem2IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRMembersMem2IfIndex.setDescription('The radio location of member 2.')
genEquipRadioGroupsMRMembersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 2, 1, 30), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMRMembersRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRMembersRowStatus.setDescription('Row status to allow user add entries dynamically.')
genEquipRadioGroupsMRStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 3), )
if mibBuilder.loadTexts: genEquipRadioGroupsMRStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRStatusTable.setDescription('MR Status table.')
genEquipRadioGroupsMRStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 3, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioGroupsMRStatusGroupIfIndex"))
if mibBuilder.loadTexts: genEquipRadioGroupsMRStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRStatusEntry.setDescription('MR Status table entry.')
genEquipRadioGroupsMRStatusGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsMRStatusGroupIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRStatusGroupIfIndex.setDescription('The location of the group')
genEquipRadioGroupsMRStatusOpertionalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsMRStatusOpertionalState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRStatusOpertionalState.setDescription('Operational State')
genEquipRadioGroupsMRStatusRemoteOpertionalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsMRStatusRemoteOpertionalState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMRStatusRemoteOpertionalState.setDescription('Remote Operational State.')
genEquipRadioGroupsMIMO = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4))
genEquipRadioGroupsMIMOAttrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 1), )
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOAttrTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOAttrTable.setDescription('The configuration table of the MIMO groups.')
genEquipRadioGroupsMIMOAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 1, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioGroupsMIMOAttrGroupIfIndex"))
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOAttrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOAttrEntry.setDescription('The configuration table of the MIMO groups entry.')
genEquipRadioGroupsMIMOAttrGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOAttrGroupIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOAttrGroupIfIndex.setDescription('MIMO configuration table index')
genEquipRadioGroupsMIMOAttrRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("slave", 0), ("master", 1), ("not-relevant", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOAttrRole.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOAttrRole.setDescription('Role can be Master or Slave.')
genEquipRadioGroupsMIMOAttrAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 1, 1, 3), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOAttrAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOAttrAdmin.setDescription('Administrating state of the MIMO group.')
genEquipRadioGroupsMIMOAttrResetStateMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 1, 1, 4), OffOn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOAttrResetStateMachine.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOAttrResetStateMachine.setDescription('Reset MIMO state machine.')
genEquipRadioGroupsMIMOMembersTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 2), )
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOMembersTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOMembersTable.setDescription('The description the radio carrier members of the MIMO groups.')
genEquipRadioGroupsMIMOMembersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 2, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioGroupsMIMOMembersGroupIfIndex"))
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOMembersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOMembersEntry.setDescription('The description the radio carrier members of the MIMO groups entry.')
genEquipRadioGroupsMIMOMembersGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOMembersGroupIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOMembersGroupIfIndex.setDescription('MIMO members table index')
genEquipRadioGroupsMIMOMembersGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("mimo-2x2", 0), ("mimo-4x4", 1), ("base-band-combining-2x2", 2), ("base-band-combining-4x4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOMembersGroupType.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOMembersGroupType.setDescription('Type of MIMO group: 2x2 or 4x4 etc...')
genEquipRadioGroupsMIMOMembersMem1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOMembersMem1IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOMembersMem1IfIndex.setDescription('The radio location of member 1.')
genEquipRadioGroupsMIMOMembersMem2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOMembersMem2IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOMembersMem2IfIndex.setDescription('The radio location of member 2.')
genEquipRadioGroupsMIMOMembersMem3IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOMembersMem3IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOMembersMem3IfIndex.setDescription('The radio location of member 3.')
genEquipRadioGroupsMIMOMembersMem4IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOMembersMem4IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOMembersMem4IfIndex.setDescription('The radio location of member 4.')
genEquipRadioGroupsMIMOMembersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 2, 1, 30), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOMembersRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOMembersRowStatus.setDescription('Row status to allow user add entries dynamically.')
genEquipRadioGroupsMIMOStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 3), )
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOStatusTable.setDescription('The current status table of the MIMO groups.')
genEquipRadioGroupsMIMOStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 3, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioGroupsMIMOStatusGroupIfIndex"))
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOStatusEntry.setDescription('The current status table of the MIMO groups entry.')
genEquipRadioGroupsMIMOStatusGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOStatusGroupIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOStatusGroupIfIndex.setDescription('MIMO status table index')
genEquipRadioGroupsMIMOStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("slave", 0), ("init", 1), ("disabled", 2), ("idle", 3), ("recovery", 4), ("half-capacity", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOStatusState.setDescription('MIMO-State')
genEquipRadioGroupsMIMOStatus1stMMI = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOStatus1stMMI.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOStatus1stMMI.setDescription('MIMO interference in dB of the 1st carrier.')
genEquipRadioGroupsMIMOStatus2ndMMI = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOStatus2ndMMI.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOStatus2ndMMI.setDescription('MIMO interference in dB of the 2nd carrier.')
genEquipRadioGroupsMIMOStatus3rdMMI = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOStatus3rdMMI.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOStatus3rdMMI.setDescription('MIMO interference in dB of the 3rd carrier.')
genEquipRadioGroupsMIMOStatus4thMMI = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOStatus4thMMI.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOStatus4thMMI.setDescription('MIMO interference in dB of the 4th carrier.')
genEquipRadioGroupsMIMOStatusAdvancedState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("disabled", 0), ("initializing", 1), ("init-retry", 2), ("init-retry-checkup", 3), ("init-retry-bringup", 4), ("idle", 5), ("unsuitable-hw", 6), ("half-capacity", 7), ("master-failure", 8), ("remote-master-failure", 9), ("remote-has-no-master", 10), ("mute-slave", 11), ("slave-init", 12), ("slave-idle", 13), ("slave-mutted", 14), ("self-mute-comm-fail-to-master", 15), ("half-capacity-no-master", 16), ("half-capacity-master-failure", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOStatusAdvancedState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsMIMOStatusAdvancedState.setDescription('MIMO advanced state.')
genEquipRadioGroupsAbc = MibIdentifier((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5))
genEquipRadioGroupsAbcAttrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 1), )
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrTable.setDescription('Multi Carrier ABC configuration table.')
genEquipRadioGroupsAbcAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 1, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioGroupsAbcAttrIfIndex"))
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrEntry.setDescription('Multi Carrier ABC configuration table.')
genEquipRadioGroupsAbcAttrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrIfIndex.setDescription('The interface-index of the ABC group')
genEquipRadioGroupsAbcAttrGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrGroupName.setDescription('Textual description of the ABC group.')
genEquipRadioGroupsAbcAttrAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 1, 1, 3), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrAdminState.setDescription('The Administrative state of ABC radio group which decides if the Multi Carrier ABC group is enabled or disabled.')
genEquipRadioGroupsAbcAttrQnumberOfRadioMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrQnumberOfRadioMembers.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrQnumberOfRadioMembers.setDescription('The number of radios that can be members of the Multi Carrier ABC group.')
genEquipRadioGroupsAbcAttrProtectionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 1, 1, 5), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrProtectionEnable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrProtectionEnable.setDescription('When Protection is Enabled protecion groups can be added to the Multi-carrier ABC group. When disabled regular channels can be attached.')
genEquipRadioGroupsAbcAttrHighPriEthernetBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrHighPriEthernetBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrHighPriEthernetBandwidth.setDescription('Bandwidth reserved for high priority ethernet in Kbps. Values range from from 0 (i.e. No high pri ethernet) to max capacity (I.e. no STM-1s) in Kbps.')
genEquipRadioGroupsAbcAttrQualityThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrQualityThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrQualityThreshold.setDescription("Members degrading below this threshold will be set to 'do not use' in the group.")
genEquipRadioGroupsAbcAttrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 1, 1, 30), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcAttrRowStatus.setDescription('This is the row status.')
genEquipRadioGroupsAbcMembersTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2), )
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersTable.setDescription('Multi Carrier ABC members table.')
genEquipRadioGroupsAbcMembersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioGroupsAbcMembersGroupIfIndex"))
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersEntry.setDescription('Multi Carrier ABC members table entry.')
genEquipRadioGroupsAbcMembersGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersGroupIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersGroupIfIndex.setDescription('Integer representing the group interface ifindex')
genEquipRadioGroupsAbcMembersGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersGroupId.setDescription('Integer representing the group interface ID.')
genEquipRadioGroupsAbcMembersChannel1MemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel1MemberIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel1MemberIfIndex.setDescription('IfIndex representing the group member connect to this ABC channel.')
genEquipRadioGroupsAbcMembersChannel1adminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1, 4), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel1adminState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel1adminState.setDescription('The Administrative state of an ABC channel.')
genEquipRadioGroupsAbcMembersChannel2MemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel2MemberIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel2MemberIfIndex.setDescription('IfIndex representing the group member connect to this ABC channel.')
genEquipRadioGroupsAbcMembersChannel2adminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1, 6), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel2adminState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel2adminState.setDescription('The Administrative state of an ABC channel.')
genEquipRadioGroupsAbcMembersChannel3MemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel3MemberIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel3MemberIfIndex.setDescription('IfIndex representing the group member connect to this ABC channel.')
genEquipRadioGroupsAbcMembersChannel3adminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1, 8), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel3adminState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel3adminState.setDescription('The Administrative state of an ABC channel.')
genEquipRadioGroupsAbcMembersChannel4MemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel4MemberIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel4MemberIfIndex.setDescription('IfIndex representing the group member connect to this ABC channel.')
genEquipRadioGroupsAbcMembersChannel4adminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1, 10), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel4adminState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel4adminState.setDescription('The Administrative state of an ABC channel.')
genEquipRadioGroupsAbcMembersChannel5MemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel5MemberIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel5MemberIfIndex.setDescription('IfIndex representing the group member connect to this ABC channel.')
genEquipRadioGroupsAbcMembersChannel5adminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1, 12), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel5adminState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel5adminState.setDescription('The Administrative state of an ABC channel.')
genEquipRadioGroupsAbcMembersChannel6MemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel6MemberIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel6MemberIfIndex.setDescription('IfIndex representing the group member connect to this ABC channel.')
genEquipRadioGroupsAbcMembersChannel6adminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1, 14), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel6adminState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel6adminState.setDescription('The Administrative state of an ABC channel.')
genEquipRadioGroupsAbcMembersChannel7MemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel7MemberIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel7MemberIfIndex.setDescription('IfIndex representing the group member connect to this ABC channel.')
genEquipRadioGroupsAbcMembersChannel7adminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1, 16), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel7adminState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel7adminState.setDescription('The Administrative state of an ABC channel.')
genEquipRadioGroupsAbcMembersChannel8MemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel8MemberIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel8MemberIfIndex.setDescription('IfIndex representing the group member connect to this ABC channel.')
genEquipRadioGroupsAbcMembersChannel8adminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 2, 1, 18), EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel8adminState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcMembersChannel8adminState.setDescription('The Administrative state of an ABC channel.')
genEquipRadioGroupsAbcStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3), )
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusTable.setDescription('Multi Carrier ABC status table.')
genEquipRadioGroupsAbcStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipRadioGroupsAbcStatusIfIndex"))
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusEntry.setDescription('Multi Carrier ABC status table entry.')
genEquipRadioGroupsAbcStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusIfIndex.setDescription('The interface-index of the ABC group')
genEquipRadioGroupsAbcStatusOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 2), DownUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusOperState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusOperState.setDescription('The operational state of the ABC group as a WAN.')
genEquipRadioGroupsAbcStatusRemoteOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 3), DownUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusRemoteOperState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusRemoteOperState.setDescription('The remote ABC groups operational state.')
genEquipRadioGroupsAbcStatusCurrentAggregatedCapacityRX = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusCurrentAggregatedCapacityRX.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusCurrentAggregatedCapacityRX.setDescription('The combined current RX throughput capacity of the ABC group in Kbps.')
genEquipRadioGroupsAbcStatusCurrentAggregatedCapacityTX = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusCurrentAggregatedCapacityTX.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusCurrentAggregatedCapacityTX.setDescription('The combined current TX throughput capacity of the ABC group in Kbps.')
genEquipRadioGroupsAbcStatusChannel1Operstate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 6), DownUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel1Operstate.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel1Operstate.setDescription('The operational state of the ABC channel.')
genEquipRadioGroupsAbcStatusChannel1Capacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel1Capacity.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel1Capacity.setDescription('The current throughput capacity of the ABC channel in Kbps.')
genEquipRadioGroupsAbcStatusChannel2Operstate = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 8), DownUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel2Operstate.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel2Operstate.setDescription('The operational state of the ABC channel.')
genEquipRadioGroupsAbcStatusChannel2Capacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel2Capacity.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel2Capacity.setDescription('The current throughput capacity of the ABC channel in Kbps.')
genEquipRadioGroupsAbcStatusChannel3OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 10), DownUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel3OperState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel3OperState.setDescription('The operational state of the ABC channel.')
genEquipRadioGroupsAbcStatusChannel3Capacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel3Capacity.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel3Capacity.setDescription('The current throughput capacity of the ABC channel in Kbps.')
genEquipRadioGroupsAbcStatusChannel4OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 12), DownUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel4OperState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel4OperState.setDescription('The operational state of the ABC channel.')
genEquipRadioGroupsAbcStatusChannel4Capacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel4Capacity.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel4Capacity.setDescription('The current throughput capacity of the ABC channel in Kbps.')
genEquipRadioGroupsAbcStatusChannel5OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 14), DownUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel5OperState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel5OperState.setDescription('The operational state of the ABC channel.')
genEquipRadioGroupsAbcStatusChannel5Capacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel5Capacity.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel5Capacity.setDescription('The current throughput capacity of the ABC channel in Kbps.')
genEquipRadioGroupsAbcStatusChannel6OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 16), DownUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel6OperState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel6OperState.setDescription('The operational state of the ABC channel.')
genEquipRadioGroupsAbcStatusChannel6Capacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel6Capacity.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel6Capacity.setDescription('The current throughput capacity of the ABC channel in Kbps.')
genEquipRadioGroupsAbcStatusChannel7OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 18), DownUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel7OperState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel7OperState.setDescription('The operational state of the ABC channel.')
genEquipRadioGroupsAbcStatusChannel7Capacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel7Capacity.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel7Capacity.setDescription('The current throughput capacity of the ABC channel in Kbps.')
genEquipRadioGroupsAbcStatusChannel8OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 20), DownUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel8OperState.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel8OperState.setDescription('The operational state of the ABC channel.')
genEquipRadioGroupsAbcStatusChannel8Capacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel8Capacity.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipRadioGroupsAbcStatusChannel8Capacity.setDescription('The current throughput capacity of the ABC channel in Kbps.')
genEquipStm1AbcAttrTable = MibTable((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 5), )
if mibBuilder.loadTexts: genEquipStm1AbcAttrTable.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipStm1AbcAttrTable.setDescription('Multi Carrier ABC stm1 table.')
genEquipStm1AbcAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 5, 1), ).setIndexNames((0, "MWRM-RADIO-MIB", "genEquipStm1AbcAttrIfIndex"))
if mibBuilder.loadTexts: genEquipStm1AbcAttrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipStm1AbcAttrEntry.setDescription('Multi Carrier ABC stm1 table entry.')
genEquipStm1AbcAttrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipStm1AbcAttrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipStm1AbcAttrIfIndex.setDescription('The interface-index of the ABC group')
genEquipStm1AbcAttrGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genEquipStm1AbcAttrGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipStm1AbcAttrGroupId.setDescription('Integer representing the group interface ID.')
genEquipStm1AbcAttrNumberOfMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipStm1AbcAttrNumberOfMembers.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipStm1AbcAttrNumberOfMembers.setDescription('The number of STM-1/OC-3 channels that can be members of the Multi Carrier ABC group.')
genEquipStm1AbcAttrPri1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipStm1AbcAttrPri1IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipStm1AbcAttrPri1IfIndex.setDescription('Location of the highest priority STM-1/OC-3 interface.')
genEquipStm1AbcAttrPri2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipStm1AbcAttrPri2IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipStm1AbcAttrPri2IfIndex.setDescription('Location of the highest priority STM-1/OC-3 interface.')
genEquipStm1AbcAttrPri3IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipStm1AbcAttrPri3IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipStm1AbcAttrPri3IfIndex.setDescription('Location of the highest priority STM-1/OC-3 interface.')
genEquipStm1AbcAttrPri4IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2281, 10, 7, 8, 5, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genEquipStm1AbcAttrPri4IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: genEquipStm1AbcAttrPri4IfIndex.setDescription('Location of the highest priority STM-1/OC-3 interface.')
mibBuilder.exportSymbols("MWRM-RADIO-MIB", genEquipRadioGroupsMIMOMembersTable=genEquipRadioGroupsMIMOMembersTable, genEquipRadioMRMCAlarmOnAcmProfileDegradeThreshold=genEquipRadioMRMCAlarmOnAcmProfileDegradeThreshold, genEquipRfuCfgDelayCal=genEquipRfuCfgDelayCal, genEquipRadioCompNGCountersHCFrmUncmpExclRule=genEquipRadioCompNGCountersHCFrmUncmpExclRule, genEquipRadioMRMCCurrTxProfile=genEquipRadioMRMCCurrTxProfile, genEquipRadioMRMCConfigRadioId=genEquipRadioMRMCConfigRadioId, genEquipRadioGroupsProtectionStatusGroupIfIndex=genEquipRadioGroupsProtectionStatusGroupIfIndex, genEquipRadioEnhHeaderCompAdmin=genEquipRadioEnhHeaderCompAdmin, genEquipRadioGroupsAbcMembersGroupId=genEquipRadioGroupsAbcMembersGroupId, genEquipRadioMRMCScriptMinProfile=genEquipRadioMRMCScriptMinProfile, genEquipRadioCompExclRulesEntry=genEquipRadioCompExclRulesEntry, RFUSoftwareInstallStat=RFUSoftwareInstallStat, genEquipRemoteRadioRemoteGreenReferenceRxLevel=genEquipRemoteRadioRemoteGreenReferenceRxLevel, genEquipRadioGroupsMIMOStatusTable=genEquipRadioGroupsMIMOStatusTable, genEquipRadioGroupsXPICMembersIfIndexGroup=genEquipRadioGroupsXPICMembersIfIndexGroup, genEquipRadioCompNGCountersEntry=genEquipRadioCompNGCountersEntry, genEquipRfuRunningVersionsDSP=genEquipRfuRunningVersionsDSP, genEquipRadioGroupsMIMOAttrResetStateMachine=genEquipRadioGroupsMIMOAttrResetStateMachine, genEquipRadioGroupsAbcMembersChannel2MemberIfIndex=genEquipRadioGroupsAbcMembersChannel2MemberIfIndex, genEquipRadioCfgRadioCurrentAvailableCapacity=genEquipRadioCfgRadioCurrentAvailableCapacity, MrmcScriptId=MrmcScriptId, genEquipRfuCfgATPCOverrideTimerCancel=genEquipRfuCfgATPCOverrideTimerCancel, genEquipStm1AbcAttrPri4IfIndex=genEquipStm1AbcAttrPri4IfIndex, genEquipRemoteRadioRemoteDefaultGatewayIpv6=genEquipRemoteRadioRemoteDefaultGatewayIpv6, genEquipRemoteRadioRemoteIPAddr=genEquipRemoteRadioRemoteIPAddr, genEquipRadioGroupsXPICMembersEntry=genEquipRadioGroupsXPICMembersEntry, genEquipRadioCompNGStatusTable=genEquipRadioCompNGStatusTable, genEquipRadioGroupsXPICMembersMem1IfIndex=genEquipRadioGroupsXPICMembersMem1IfIndex, genEquipRadioGroupsAbcStatusChannel2Operstate=genEquipRadioGroupsAbcStatusChannel2Operstate, genEquipRadioPtpTransport=genEquipRadioPtpTransport, genEquipRadioGroupsMRAttrSigDegardeAdmin=genEquipRadioGroupsMRAttrSigDegardeAdmin, genEquipRadioHeaderCompNGCfgClearStats=genEquipRadioHeaderCompNGCfgClearStats, genEquipRfuStatusMaxRxLevel=genEquipRfuStatusMaxRxLevel, RfuGrade=RfuGrade, genEquipRfuCfgId=genEquipRfuCfgId, genEquipRadioMRMCScriptAttrModScheme=genEquipRadioMRMCScriptAttrModScheme, genEquipRfuSwInstallTimedInstallation=genEquipRfuSwInstallTimedInstallation, genEquipRadioMRMCScriptAttrChannelBW=genEquipRadioMRMCScriptAttrChannelBW, genEquipRadioCfgEnAlarmGenOnRslDegrade=genEquipRadioCfgEnAlarmGenOnRslDegrade, genEquipRadioPtpTransportChannelMode=genEquipRadioPtpTransportChannelMode, genEquipRfuCfgGreenModeReferenceLevel=genEquipRfuCfgGreenModeReferenceLevel, genEquipRadioCutThroughRxFrames=genEquipRadioCutThroughRxFrames, genEquipRadioGroupsProtectionBBSSDStatusActiveRxRadioIfIndex=genEquipRadioGroupsProtectionBBSSDStatusActiveRxRadioIfIndex, genEquipRfuCfgATPCRefRSL=genEquipRfuCfgATPCRefRSL, genEquipRadioGroupsProtectionAttrRevertiveAdmin=genEquipRadioGroupsProtectionAttrRevertiveAdmin, genEquipRfuCfgATPCOverrideTimerCounter=genEquipRfuCfgATPCOverrideTimerCounter, genEquipRadioGroupsProtectionAttrGroupId=genEquipRadioGroupsProtectionAttrGroupId, genEquipRadioMRMCScriptProfile=genEquipRadioMRMCScriptProfile, genEquipRadioGroupsXPICAttrXRSMAdmin=genEquipRadioGroupsXPICAttrXRSMAdmin, genEquipRadioGroupsMIMOStatusGroupIfIndex=genEquipRadioGroupsMIMOStatusGroupIfIndex, genEquipStm1AbcAttrEntry=genEquipStm1AbcAttrEntry, genEquipRadioMRMCScriptAttrTxMaxProfile=genEquipRadioMRMCScriptAttrTxMaxProfile, genEquipRemoteRadioRemoteATPCReferenceRxLevel=genEquipRemoteRadioRemoteATPCReferenceRxLevel, genEquipRadioMRMCScriptAttrRxOccupiedBW=genEquipRadioMRMCScriptAttrRxOccupiedBW, genEquipRadioCompNGExclRulesEntry=genEquipRadioCompNGExclRulesEntry, genEquipRadioMRMCScriptAttrSupportACM=genEquipRadioMRMCScriptAttrSupportACM, genEquipRadioPtpTransportTxDroppedBytes=genEquipRadioPtpTransportTxDroppedBytes, genEquipRadioGroupsProtectionBBSSDStatusAbcGroupIfIndex=genEquipRadioGroupsProtectionBBSSDStatusAbcGroupIfIndex, genEquipRadioGroupsAbcMembersChannel7adminState=genEquipRadioGroupsAbcMembersChannel7adminState, genEquipRfuSwStatusEntry=genEquipRfuSwStatusEntry, genEquipRadioCfgSignalDegradeThreshold=genEquipRadioCfgSignalDegradeThreshold, genEquipRadioGroupsMIMOStatus1stMMI=genEquipRadioGroupsMIMOStatus1stMMI, genEquipRemoteRadioRemoteMostSevereAlarm=genEquipRemoteRadioRemoteMostSevereAlarm, genEquipRadioCutThroughNGCountersTotalRxFrames=genEquipRadioCutThroughNGCountersTotalRxFrames, genEquipRadioCutThroughCountersEntry=genEquipRadioCutThroughCountersEntry, genEquipRemoteRadioRemoteLinkId=genEquipRemoteRadioRemoteLinkId, genEquipRfuStatusMinRxLevel=genEquipRfuStatusMinRxLevel, genEquipRadioGroupsProtectionAttrEntry=genEquipRadioGroupsProtectionAttrEntry, genEquipRadioMRMCCurrRxProfile=genEquipRadioMRMCCurrRxProfile, genEquipRadioGroupsMIMOStatusAdvancedState=genEquipRadioGroupsMIMOStatusAdvancedState, genEquipRadioGroupsProtectionBBSSD=genEquipRadioGroupsProtectionBBSSD, MuteOnOff=MuteOnOff, genEquipRadioMRMCScriptEntry=genEquipRadioMRMCScriptEntry, genEquipRadioCompNGExclRuleValue=genEquipRadioCompNGExclRuleValue, genEquipRadioGroupsAbcAttrQnumberOfRadioMembers=genEquipRadioGroupsAbcAttrQnumberOfRadioMembers, genEquipRadioGroupsMRAttrMinNumRadio=genEquipRadioGroupsMRAttrMinNumRadio, genEquipRadioCompNG=genEquipRadioCompNG, HcModeType=HcModeType, genEquipRadioCutThroughCfgEntry=genEquipRadioCutThroughCfgEntry, genEquipRfuStatusRxLevelDiversity=genEquipRfuStatusRxLevelDiversity, genEquipRadioCfgMACHeaderCompression=genEquipRadioCfgMACHeaderCompression, genEquipRadioCfgAlarmGenRslNominalLevel=genEquipRadioCfgAlarmGenRslNominalLevel, genEquipRfuStatusRFUMaxTxFreq=genEquipRfuStatusRFUMaxTxFreq, genEquipRadioGroupsProtectionMembersMem2IfIndex=genEquipRadioGroupsProtectionMembersMem2IfIndex, genEquipRadioGroupsMIMOMembersMem3IfIndex=genEquipRadioGroupsMIMOMembersMem3IfIndex, genEquipRemoteRadioRemoteSubnetMask=genEquipRemoteRadioRemoteSubnetMask, genEquipRfuStatusRFUMaxRxFreq=genEquipRfuStatusRFUMaxRxFreq, genEquipRadioGroupsMIMO=genEquipRadioGroupsMIMO, genEquipRadioCutThroughCountersTable=genEquipRadioCutThroughCountersTable, genEquipRadioCutThroughNGCountersRxFrames=genEquipRadioCutThroughNGCountersRxFrames, genEquipRadioGroupsXPICMembersMem2IfIndex=genEquipRadioGroupsXPICMembersMem2IfIndex, genEquipRfuSwInstallTable=genEquipRfuSwInstallTable, genEquipRadioGroupsMIMOMembersGroupType=genEquipRadioGroupsMIMOMembersGroupType, genEquipStm1AbcAttrPri3IfIndex=genEquipStm1AbcAttrPri3IfIndex, genEquipRadioMRMCProfileAttrTxBitRate=genEquipRadioMRMCProfileAttrTxBitRate, genEquipRadioCompNGCountersHCCompFrm=genEquipRadioCompNGCountersHCCompFrm, genEquipRadioCfgRadioTrafficPriorityScheme=genEquipRadioCfgRadioTrafficPriorityScheme, genEquipRadioGroupsMRMembersEntry=genEquipRadioGroupsMRMembersEntry, genEquipRadioGroupsAbcAttrRowStatus=genEquipRadioGroupsAbcAttrRowStatus, genEquipRadioGroupsAbcStatusCurrentAggregatedCapacityRX=genEquipRadioGroupsAbcStatusCurrentAggregatedCapacityRX, genEquipRemoteRadioRemoteFloatingIPAddr=genEquipRemoteRadioRemoteFloatingIPAddr, genEquipRadioCutThroughNGCountersTotalRxBytes=genEquipRadioCutThroughNGCountersTotalRxBytes, genEquipRadioGroupsMIMOStatusState=genEquipRadioGroupsMIMOStatusState, QamOrder=QamOrder, genEquipRadioGroupsMRAttrBlockRadioAdmin=genEquipRadioGroupsMRAttrBlockRadioAdmin, genEquipRfuAvailableVersionsConstants=genEquipRfuAvailableVersionsConstants, genEquipRadioGroupsMRMembersRowStatus=genEquipRadioGroupsMRMembersRowStatus, genEquipRadioGroupsMRAttrAdmin=genEquipRadioGroupsMRAttrAdmin, genEquipRadioMRMC=genEquipRadioMRMC, genEquipRadioCompNGStatusEntry=genEquipRadioCompNGStatusEntry, genEquipRfuCfgClearComDeviceError=genEquipRfuCfgClearComDeviceError, genEquipRadioGroupsProtectionBBSSDStatusStdbyRxRadioIfIndex=genEquipRadioGroupsProtectionBBSSDStatusStdbyRxRadioIfIndex, genEquipRadioGroupsMRAttrTable=genEquipRadioGroupsMRAttrTable, genEquipRadioGroupsProtectionStatusLockout=genEquipRadioGroupsProtectionStatusLockout, genEquipRadioPtpTransportTxDroppedFrames=genEquipRadioPtpTransportTxDroppedFrames, genEquipRadioCfgRadioAdmin=genEquipRadioCfgRadioAdmin, genEquipRadioCompStatusTable=genEquipRadioCompStatusTable, genEquipRadioCompNGCountersHCLearningFrm=genEquipRadioCompNGCountersHCLearningFrm, genEquipRadioCompNGExclRulesTable=genEquipRadioCompNGExclRulesTable, genEquipRfuStatusRFUSerialNumber=genEquipRfuStatusRFUSerialNumber, genEquipRadioMRMCScriptAttrScriptName=genEquipRadioMRMCScriptAttrScriptName, genEquipRadioGroupsAbcAttrGroupName=genEquipRadioGroupsAbcAttrGroupName, genEquipRfuUploadTable=genEquipRfuUploadTable, genEquipRadioCutThroughNGCountersEntry=genEquipRadioCutThroughNGCountersEntry, genEquipRemoteRadioRemoteMNGvlan=genEquipRemoteRadioRemoteMNGvlan, MrmcProfile=MrmcProfile, genEquipRadioCfgRadioMultiRadioEnable=genEquipRadioCfgRadioMultiRadioEnable, genEquipRfuCfgTxFreq=genEquipRfuCfgTxFreq, genEquipRadioGroupsProtectionAttrTable=genEquipRadioGroupsProtectionAttrTable, genEquipRadioMRMCScriptIndex=genEquipRadioMRMCScriptIndex, genEquipRfuUploadId=genEquipRfuUploadId, genEquipRadioMRMCCurrTxBitrate=genEquipRadioMRMCCurrTxBitrate, genEquipRadioMRMCConfigMinProfile=genEquipRadioMRMCConfigMinProfile, genEquipRadioCfgLinkId=genEquipRadioCfgLinkId, genEquipRfuStatusRFUGrade=genEquipRfuStatusRFUGrade, genEquipRadioGroupsMIMOStatus3rdMMI=genEquipRadioGroupsMIMOStatus3rdMMI, genEquipRadioGroupsXPICAttrTable=genEquipRadioGroupsXPICAttrTable, genEquipRadioPtpTransportCfgTable=genEquipRadioPtpTransportCfgTable, genEquipRadioMRMCConfigStandbyScriptId=genEquipRadioMRMCConfigStandbyScriptId, genEquipRadioMRMCScriptAttrRxMaxProfile=genEquipRadioMRMCScriptAttrRxMaxProfile, genEquipRadioMRMCScriptAttrTxOccupiedBW=genEquipRadioMRMCScriptAttrTxOccupiedBW, genEquipRadioGroupsProtectionBBSSDStatusLockout=genEquipRadioGroupsProtectionBBSSDStatusLockout, genEquipRadioGroupsMIMOMembersMem1IfIndex=genEquipRadioGroupsMIMOMembersMem1IfIndex, genEquipStm1AbcAttrTable=genEquipStm1AbcAttrTable, genEquipRadioCompMode=genEquipRadioCompMode, genEquipRadioCompExclRuleId=genEquipRadioCompExclRuleId, genEquipRadioGroupsAbcAttrAdminState=genEquipRadioGroupsAbcAttrAdminState, genEquipRadioCfgAlarmGenRslDegradationMargin=genEquipRadioCfgAlarmGenRslDegradationMargin, genEquipRfuStatusRFUPartNumber=genEquipRfuStatusRFUPartNumber, genEquipRemoteRadioRemoteGreenModeAdmin=genEquipRemoteRadioRemoteGreenModeAdmin, genEquipRadioMRMCScriptAttrMultiCarrier=genEquipRadioMRMCScriptAttrMultiCarrier, genEquipRadioPtpTransportCountersEntry=genEquipRadioPtpTransportCountersEntry, genEquipRfuAvailableVersionsScripts=genEquipRfuAvailableVersionsScripts, genEquipRadioGroupsMIMOAttrAdmin=genEquipRadioGroupsMIMOAttrAdmin, genEquipRadioGroupsAbcStatusChannel8Capacity=genEquipRadioGroupsAbcStatusChannel8Capacity, genEquipRadioGroupsXPICAttrGroupId=genEquipRadioGroupsXPICAttrGroupId, genEquipRadioGroupsMR=genEquipRadioGroupsMR, genEquipRadioGroupsMRAttrGroupId=genEquipRadioGroupsMRAttrGroupId, genEquipRemoteRadioRemotePrefixLength=genEquipRemoteRadioRemotePrefixLength, genEquipRadioCfgRadioOperationalStatus=genEquipRadioCfgRadioOperationalStatus, genEquipRadioCfgIfLoopback=genEquipRadioCfgIfLoopback, genEquipRfuStatusTxLevel=genEquipRfuStatusTxLevel, RadioProtectionCmd=RadioProtectionCmd, genEquipRadioMRMCEntry=genEquipRadioMRMCEntry, genEquipRadioPtpTransportRxFrames=genEquipRadioPtpTransportRxFrames, genEquipRadioMRMCProfileAttrRxQAM=genEquipRadioMRMCProfileAttrRxQAM, genEquipRadioStatusBER=genEquipRadioStatusBER, genEquipRadioCompExclRulesTable=genEquipRadioCompExclRulesTable, genEquipRadioGroupsProtectionMembersRowStatus=genEquipRadioGroupsProtectionMembersRowStatus, genEquipRadioGroupsMIMOAttrGroupIfIndex=genEquipRadioGroupsMIMOAttrGroupIfIndex, genEquipRfuCfgLoopback=genEquipRfuCfgLoopback, genEquipRemoteRadioRemoteDataLoopBackSwitchAddress=genEquipRemoteRadioRemoteDataLoopBackSwitchAddress, genEquipRemoteRadioRemoteCommunication=genEquipRemoteRadioRemoteCommunication, genEquipRadioMRMCRadioId=genEquipRadioMRMCRadioId, genEquipRfuStatusMinBW=genEquipRfuStatusMinBW, genEquipRadioStatusEntry=genEquipRadioStatusEntry, genEquipRadioGroupsXpic=genEquipRadioGroupsXpic, genEquipRadioMRMCScriptAttrDiffGrade=genEquipRadioMRMCScriptAttrDiffGrade, genEquipRfuCfgRxFreq=genEquipRfuCfgRxFreq, genEquipRadioGroupsAbcStatusChannel6OperState=genEquipRadioGroupsAbcStatusChannel6OperState, genEquipRfuInstalledVersionsIfIndex=genEquipRfuInstalledVersionsIfIndex, genEquipRadioCfgRadioMultiRadioBlockMateTraffic=genEquipRadioCfgRadioMultiRadioBlockMateTraffic, genEquipRfuAvailableVersionsEntry=genEquipRfuAvailableVersionsEntry, genEquipRadioMRMCProfileAttrTxProfile=genEquipRadioMRMCProfileAttrTxProfile, genEquipRadioCfgClearCounters=genEquipRadioCfgClearCounters, genEquipRadioMRMCProfileAttrEntry=genEquipRadioMRMCProfileAttrEntry, genEquipRadioCutThroughTxFrames=genEquipRadioCutThroughTxFrames, genEquipRadioPtpTransportRxBytes=genEquipRadioPtpTransportRxBytes, genEquipRadioMRMCScriptAttrSymmetry=genEquipRadioMRMCScriptAttrSymmetry, genEquipRfuAvailableVersionsDSP=genEquipRfuAvailableVersionsDSP, genEquipRadioCfgTable=genEquipRadioCfgTable, genEquipRadioGroupsAbcMembersChannel8adminState=genEquipRadioGroupsAbcMembersChannel8adminState, genEquipRadioCompNGStatusifindex=genEquipRadioCompNGStatusifindex, genEquipRadioGroupsXPICAttrEntry=genEquipRadioGroupsXPICAttrEntry, genEquipRadioGroupsAbcStatusChannel2Capacity=genEquipRadioGroupsAbcStatusChannel2Capacity, genEquipRfuRunningVersionsFirmware=genEquipRfuRunningVersionsFirmware, genEquipRadioGroupsAbcMembersChannel4adminState=genEquipRadioGroupsAbcMembersChannel4adminState, genEquipRadioGroupsAbcStatusChannel4Capacity=genEquipRadioGroupsAbcStatusChannel4Capacity, genEquipRadioGroupsProtectionBBSSDStatusStdbyRxQuality=genEquipRadioGroupsProtectionBBSSDStatusStdbyRxQuality, genEquipRadioStatusRadioId=genEquipRadioStatusRadioId, genEquipRadioGroupsProtectionStatusStandbyIfIndex=genEquipRadioGroupsProtectionStatusStandbyIfIndex, genEquipRadioCompNGExclRulesifIndex=genEquipRadioCompNGExclRulesifIndex, genEquipRfuStatusDeviceError=genEquipRfuStatusDeviceError, genEquipRfuStatusRFUMode=genEquipRfuStatusRFUMode, genEquipRadioMRMCFilteredRadioId=genEquipRadioMRMCFilteredRadioId, genEquipRfuStatusRFUType=genEquipRfuStatusRFUType, genEquipRfuStatusTemperature=genEquipRfuStatusTemperature, genEquipRadioGroupsAbcStatusEntry=genEquipRadioGroupsAbcStatusEntry, genEquipRadioGroupsAbcMembersChannel6adminState=genEquipRadioGroupsAbcMembersChannel6adminState, genEquipRfuStatusTxMute=genEquipRfuStatusTxMute, genEquipRadioGroupsMIMOAttrEntry=genEquipRadioGroupsMIMOAttrEntry, genEquipRfuInstalledVersionsTable=genEquipRfuInstalledVersionsTable, genEquipRfuRunningVersionsIfIndex=genEquipRfuRunningVersionsIfIndex, genEquipRadioGroupsXPICAttrAdmin=genEquipRadioGroupsXPICAttrAdmin, genEquipRemoteRadioRemoteIPv6Addr=genEquipRemoteRadioRemoteIPv6Addr, genEquipRadioMRMCScriptAttrTable=genEquipRadioMRMCScriptAttrTable, genEquipRfuInstalledVersionsEntry=genEquipRfuInstalledVersionsEntry, genEquipRadioGroupsProtectionBBSSDAttrFWAuto=genEquipRadioGroupsProtectionBBSSDAttrFWAuto, genEquipRadioMRMCConfigEntry=genEquipRadioMRMCConfigEntry, genEquipRadioCutThroughNGCountersTotalTxBytesOut=genEquipRadioCutThroughNGCountersTotalTxBytesOut, genEquipRadioCompNGStatusType=genEquipRadioCompNGStatusType, genEquipRadioGroupsProtectionBBSSDAttrClrSwCnt=genEquipRadioGroupsProtectionBBSSDAttrClrSwCnt, genEquipRadioGroupsAbcMembersEntry=genEquipRadioGroupsAbcMembersEntry, genEquipRfuRunningVersionsConfigurations=genEquipRfuRunningVersionsConfigurations, genEquipRadioGroupsMRMembersIfIndexGroup=genEquipRadioGroupsMRMembersIfIndexGroup, genEquipRfuStatusIfCombSupport=genEquipRfuStatusIfCombSupport, genEquipRadioGroupsAbcAttrIfIndex=genEquipRadioGroupsAbcAttrIfIndex, genEquipRemoteRadioRemoteForceTxMute=genEquipRemoteRadioRemoteForceTxMute, genEquipRadioGroupsMRStatusEntry=genEquipRadioGroupsMRStatusEntry, genEquipRadioGroupsMIMOStatus2ndMMI=genEquipRadioGroupsMIMOStatus2ndMMI, genEquipRfuStatusEntry=genEquipRfuStatusEntry, genEquipRadioGroupsAbcMembersChannel8MemberIfIndex=genEquipRadioGroupsAbcMembersChannel8MemberIfIndex, genEquipRadioCutThrough=genEquipRadioCutThrough, genEquipRemoteRadioRemoteResetSlot=genEquipRemoteRadioRemoteResetSlot, genEquipRadio=genEquipRadio, genEquipRadioGroupsAbcMembersChannel2adminState=genEquipRadioGroupsAbcMembersChannel2adminState, genEquipRadioCompCfgTable=genEquipRadioCompCfgTable, genEquipRadioGroupsProtectionBBSSDAttrGroupIfIndex=genEquipRadioGroupsProtectionBBSSDAttrGroupIfIndex, genEquipRfuSwInstallTimer=genEquipRfuSwInstallTimer, genEquipRadioHeaderCompNGCfgUserFlowType=genEquipRadioHeaderCompNGCfgUserFlowType, HcType=HcType, genEquipRadioMRMCScriptRadioId=genEquipRadioMRMCScriptRadioId, genEquipRadioStatusXPI=genEquipRadioStatusXPI, genEquipRadioCutThroughNGCfgMode=genEquipRadioCutThroughNGCfgMode, genEquipRfuStatusTxRxFreqSeparation=genEquipRfuStatusTxRxFreqSeparation, genEquipRadioCompNGStatusOperationalState=genEquipRadioCompNGStatusOperationalState, genEquipRadioMRMCConfigTable=genEquipRadioMRMCConfigTable, genEquipRadioGroupsAbcStatusChannel1Capacity=genEquipRadioGroupsAbcStatusChannel1Capacity, genEquipRadioGroupsXPICAttrCopyToMate=genEquipRadioGroupsXPICAttrCopyToMate, genEquipRadioMRMCScriptAdaptivePower=genEquipRadioMRMCScriptAdaptivePower, genEquipStm1AbcAttrNumberOfMembers=genEquipStm1AbcAttrNumberOfMembers, genEquipRadioGroupsAbcStatusChannel8OperState=genEquipRadioGroupsAbcStatusChannel8OperState, genEquipRfuAvailableVersionsFirmware=genEquipRfuAvailableVersionsFirmware, genEquipStm1AbcAttrPri2IfIndex=genEquipStm1AbcAttrPri2IfIndex)
mibBuilder.exportSymbols("MWRM-RADIO-MIB", genEquipRFUNG=genEquipRFUNG, genEquipRfuStatusMaxTxLevel=genEquipRfuStatusMaxTxLevel, genEquipRadioCompExclRuleRowStatus=genEquipRadioCompExclRuleRowStatus, genEquipRadioCompNGCountersHCFrmUcompInternal=genEquipRadioCompNGCountersHCFrmUcompInternal, genEquipRfuSwStatusCurrentState=genEquipRfuSwStatusCurrentState, genEquipRadioGroupsAbcMembersTable=genEquipRadioGroupsAbcMembersTable, genEquipRemoteRadioRemoteATPCoverrideState=genEquipRemoteRadioRemoteATPCoverrideState, genEquipRadioMRMCScriptAttrRxBW=genEquipRadioMRMCScriptAttrRxBW, genEquipRadioCompOperationalState=genEquipRadioCompOperationalState, genEquipRadioMRMCProfileAttrScriptId=genEquipRadioMRMCProfileAttrScriptId, genEquipRadioMRMCProfileAttrTxQAM=genEquipRadioMRMCProfileAttrTxQAM, genEquipRadioMRMCProfileAttrTable=genEquipRadioMRMCProfileAttrTable, genEquipRadioCompExclRuleType=genEquipRadioCompExclRuleType, genEquipRFU=genEquipRFU, genEquipRadioGroupsAbcMembersChannel7MemberIfIndex=genEquipRadioGroupsAbcMembersChannel7MemberIfIndex, genEquipRadioMRMCEnAlarmOnAcmProfileDegrade=genEquipRadioMRMCEnAlarmOnAcmProfileDegrade, genEquipRfuStatusMaxBW=genEquipRfuStatusMaxBW, genEquipRemoteRadioRemoteForceMaxTxLevel=genEquipRemoteRadioRemoteForceMaxTxLevel, genEquipRadioGroupsProtectionAttrCommand=genEquipRadioGroupsProtectionAttrCommand, genEquipRfuUploadSwStatus=genEquipRfuUploadSwStatus, genEquipRfuStatusPATemp=genEquipRfuStatusPATemp, FalseTrue=FalseTrue, genEquipRadioStatusDefectedBlocks=genEquipRadioStatusDefectedBlocks, genEquipRadioCompNGCfgTable=genEquipRadioCompNGCfgTable, genEquipRadioMRMCCurrTxQAM=genEquipRadioMRMCCurrTxQAM, genEquipRadioCompNGExclRuleType=genEquipRadioCompNGExclRuleType, genEquipRadioMRMCConfigMaxProfile=genEquipRadioMRMCConfigMaxProfile, genEquipRadioMRMCProfileAttrRxProfile=genEquipRadioMRMCProfileAttrRxProfile, genEquipRadioGroupsAbcStatusChannel5Capacity=genEquipRadioGroupsAbcStatusChannel5Capacity, genEquipRemoteRadioRemoteRxFreq=genEquipRemoteRadioRemoteRxFreq, genEquipRadioGroupsProtectionStatusTable=genEquipRadioGroupsProtectionStatusTable, genEquipRadioGroupsXPICAttrGroupIfIndex=genEquipRadioGroupsXPICAttrGroupIfIndex, genEquipRadioGroupsProtectionAttrRevertivePrimaryIfIndex=genEquipRadioGroupsProtectionAttrRevertivePrimaryIfIndex, genEquipRfuInstalledVersionsConstants=genEquipRfuInstalledVersionsConstants, ThresholdExponent=ThresholdExponent, genEquipRemoteRadioRemoteATPCoverrideStateCancel=genEquipRemoteRadioRemoteATPCoverrideStateCancel, genEquipRadioGroupsMRMembersMem2IfIndex=genEquipRadioGroupsMRMembersMem2IfIndex, genEquipRadioGroupsAbcAttrEntry=genEquipRadioGroupsAbcAttrEntry, genEquipRadioGroupsMRStatusRemoteOpertionalState=genEquipRadioGroupsMRStatusRemoteOpertionalState, genEquipRfuCfgMuteTx=genEquipRfuCfgMuteTx, genEquipUnit=genEquipUnit, genEquipRadioGroupsProtectionStatusEntry=genEquipRadioGroupsProtectionStatusEntry, genEquipRadioMRMCScriptTable=genEquipRadioMRMCScriptTable, genEquipRadioGroupsMIMOStatus4thMMI=genEquipRadioGroupsMIMOStatus4thMMI, genEquipRadioMRMCProfileAttrRxBitRate=genEquipRadioMRMCProfileAttrRxBitRate, genEquipRadioGroupsProtectionBBSSDAttrTable=genEquipRadioGroupsProtectionBBSSDAttrTable, genEquipRfuUploadCounter=genEquipRfuUploadCounter, genEquipRadioCfgRadioMultiRadioSignalDegradeAdmin=genEquipRadioCfgRadioMultiRadioSignalDegradeAdmin, genEquipRadioGroupsXPICMembersTable=genEquipRadioGroupsXPICMembersTable, genEquipRadioGroupsProtectionBBSSDStatusEntry=genEquipRadioGroupsProtectionBBSSDStatusEntry, genEquipRadioCutThroughRxBytes=genEquipRadioCutThroughRxBytes, genEquipRadioMRMCCurrRxVc=genEquipRadioMRMCCurrRxVc, genEquipRadioPtpTransportChannelAdmin=genEquipRadioPtpTransportChannelAdmin, genEquipRfuInstalledVersionsDSP=genEquipRfuInstalledVersionsDSP, genEquipRadioCompCfgEntry=genEquipRadioCompCfgEntry, genEquipRfuStatusInstallation=genEquipRfuStatusInstallation, genEquipRadioCompNGExclRuleId=genEquipRadioCompNGExclRuleId, genEquipRemoteRadioRemoteWebProtocol=genEquipRemoteRadioRemoteWebProtocol, genEquipRfuCfgRSLConnSrc=genEquipRfuCfgRSLConnSrc, genEquipRadioGroupsProtectionBBSSDStatusActiveTxRadioIfIndex=genEquipRadioGroupsProtectionBBSSDStatusActiveTxRadioIfIndex, genEquipRfuCfgATPCOverrideTxLevel=genEquipRfuCfgATPCOverrideTxLevel, genEquipRadioGroupsAbcMembersChannel1MemberIfIndex=genEquipRadioGroupsAbcMembersChannel1MemberIfIndex, genEquipRadioGroupsXPICStatusGroupIfIndex=genEquipRadioGroupsXPICStatusGroupIfIndex, genEquipRemoteRadioRemoteTxFreq=genEquipRemoteRadioRemoteTxFreq, genEquipRadioGroupsProtection=genEquipRadioGroupsProtection, genEquipRfuStatusDataSciErrors=genEquipRfuStatusDataSciErrors, genEquipRadioMRMCFilteredTable=genEquipRadioMRMCFilteredTable, genEquipRadioGroupsMRAttrMinProfileAdmin=genEquipRadioGroupsMRAttrMinProfileAdmin, genEquipRadioCompNGExclRuleName=genEquipRadioCompNGExclRuleName, genEquipRadioGroupsMIMOMembersMem2IfIndex=genEquipRadioGroupsMIMOMembersMem2IfIndex, genEquipRadioGroupsAbcStatusOperState=genEquipRadioGroupsAbcStatusOperState, genEquipRemoteRadioRadioId=genEquipRemoteRadioRadioId, genEquipRadioGroupsMRMembersTable=genEquipRadioGroupsMRMembersTable, genEquipRfuStatusRFUMinTxFreq=genEquipRfuStatusRFUMinTxFreq, EnhancedHCExclRuleType=EnhancedHCExclRuleType, genEquipRadioMRMCScriptName=genEquipRadioMRMCScriptName, genEquipRfuStatusAutoDelayCalStatus=genEquipRfuStatusAutoDelayCalStatus, genEquipRadioGroupsProtectionAttrGroupIfIndex=genEquipRadioGroupsProtectionAttrGroupIfIndex, genEquipRadioCutThroughNGCountersTxBytes=genEquipRadioCutThroughNGCountersTxBytes, genEquipRadioGroupsProtectionAttrCopyToMate=genEquipRadioGroupsProtectionAttrCopyToMate, genEquipRfuStatusTable=genEquipRfuStatusTable, genEquipRadioGroupsAbcMembersChannel6MemberIfIndex=genEquipRadioGroupsAbcMembersChannel6MemberIfIndex, genEquipStm1AbcAttrIfIndex=genEquipStm1AbcAttrIfIndex, genEquipRadioCompNGCountersifIndex=genEquipRadioCompNGCountersifIndex, genEquipRadioStatusMSE=genEquipRadioStatusMSE, genEquipRadioGroupsAbcMembersChannel5adminState=genEquipRadioGroupsAbcMembersChannel5adminState, genEquipRadioGroupsMRAttrCopy2MateIfindex=genEquipRadioGroupsMRAttrCopy2MateIfindex, genEquipRfuUploadSwCommand=genEquipRfuUploadSwCommand, genEquipRadioMRMCScriptAttrLinkGrade=genEquipRadioMRMCScriptAttrLinkGrade, genEquipRadioCutThroughNGCountersRxBytes=genEquipRadioCutThroughNGCountersRxBytes, genEquipRadioGroupsProtectionMembersMem1IfIndex=genEquipRadioGroupsProtectionMembersMem1IfIndex, genEquipRadioGroupsAbcStatusRemoteOperState=genEquipRadioGroupsAbcStatusRemoteOperState, genEquipRadioGroupsProtectionBBSSDStatusRxChId=genEquipRadioGroupsProtectionBBSSDStatusRxChId, genEquipRadioEnhHeaderCompMode=genEquipRadioEnhHeaderCompMode, genEquipRfuStatusRunningVersion=genEquipRfuStatusRunningVersion, genEquipRadioGroupsProtectionBBSSDStatusGroupIfIndex=genEquipRadioGroupsProtectionBBSSDStatusGroupIfIndex, genEquipRadioGroupsProtectionMembersEntry=genEquipRadioGroupsProtectionMembersEntry, genEquipRadioGroupsMIMOMembersRowStatus=genEquipRadioGroupsMIMOMembersRowStatus, genEquipRadioGroupsAbcStatusChannel5OperState=genEquipRadioGroupsAbcStatusChannel5OperState, genEquipRfuCfgTable=genEquipRfuCfgTable, genEquipRadioCompExclRuleValue=genEquipRadioCompExclRuleValue, genEquipRadioHeaderCompNGCfgMode=genEquipRadioHeaderCompNGCfgMode, genEquipRadioGroupsAbcStatusTable=genEquipRadioGroupsAbcStatusTable, microwave_radio=microwave_radio, genEquipRadioGroupsAbcStatusChannel1Operstate=genEquipRadioGroupsAbcStatusChannel1Operstate, genEquipRfuInstalledVersionsFirmware=genEquipRfuInstalledVersionsFirmware, genEquipRadioGroupsProtectionMembersIfIndexGroup=genEquipRadioGroupsProtectionMembersIfIndexGroup, genEquipRadioCompNGCountersHCUserFlowTypeActiveFlows=genEquipRadioCompNGCountersHCUserFlowTypeActiveFlows, genEquipRadioMRMCCurrRxQAM=genEquipRadioMRMCCurrRxQAM, genEquipRadioGroupsAbcMembersGroupIfIndex=genEquipRadioGroupsAbcMembersGroupIfIndex, genEquipRfuCfgMaxTxLevel=genEquipRfuCfgMaxTxLevel, genEquipRfuStatusRxLevel=genEquipRfuStatusRxLevel, genEquipRadioPtpTransportCountersTable=genEquipRadioPtpTransportCountersTable, genEquipRadioMRMCScriptAttrLatency=genEquipRadioMRMCScriptAttrLatency, genEquipRadioGroupsAbcMembersChannel4MemberIfIndex=genEquipRadioGroupsAbcMembersChannel4MemberIfIndex, genEquipRadioGroupsAbcStatusChannel3OperState=genEquipRadioGroupsAbcStatusChannel3OperState, genEquipRadioMRMCFilteredEntry=genEquipRadioMRMCFilteredEntry, genEquipRadioGroupsMRMembersMem1IfIndex=genEquipRadioGroupsMRMembersMem1IfIndex, genEquipRadioMRMCScriptAttrStandard=genEquipRadioMRMCScriptAttrStandard, genEquipRadioMRMCOccupidBandwidth=genEquipRadioMRMCOccupidBandwidth, genEquipRfuSwInstallIfIndex=genEquipRfuSwInstallIfIndex, genEquipRadioGroupsXPICMembersRowStatus=genEquipRadioGroupsXPICMembersRowStatus, genEquipRadioStatusXPICEnabled=genEquipRadioStatusXPICEnabled, genEquipRadioGroupsMIMOAttrRole=genEquipRadioGroupsMIMOAttrRole, genEquipRemoteRadioRemoteDataLoopBackAdmin=genEquipRemoteRadioRemoteDataLoopBackAdmin, genEquipRemoteRadioTable=genEquipRemoteRadioTable, genEquipRadioMRMCConfigOperMode=genEquipRadioMRMCConfigOperMode, genEquipStm1AbcAttrGroupId=genEquipStm1AbcAttrGroupId, genEquipRfuStatusId=genEquipRfuStatusId, genEquipRfuCfgGreenModeAdmin=genEquipRfuCfgGreenModeAdmin, genEquipRadioCompExclRuleName=genEquipRadioCompExclRuleName, genEquipRadioMRMCSelectedScriptIndex=genEquipRadioMRMCSelectedScriptIndex, genEquipRadioGroupsXPICStatusTable=genEquipRadioGroupsXPICStatusTable, genEquipRadioMRMCOperMode=genEquipRadioMRMCOperMode, genEquipRadioMRMCTable=genEquipRadioMRMCTable, genEquipRfuInstalledVersionsScripts=genEquipRfuInstalledVersionsScripts, genEquipRadioGroupsMRAttrCopy2MateAdmin=genEquipRadioGroupsMRAttrCopy2MateAdmin, genEquipRadioCompNGCfgifIndex=genEquipRadioCompNGCfgifIndex, genEquipRfuStatusRFUmateCarrier=genEquipRfuStatusRFUmateCarrier, genEquipRfuUploadEntry=genEquipRfuUploadEntry, genEquipRadioStatusTable=genEquipRadioStatusTable, genEquipRadioGroupsMIMOMembersEntry=genEquipRadioGroupsMIMOMembersEntry, genEquipRadioGroupsXPICStatusState=genEquipRadioGroupsXPICStatusState, genEquipRadioPtpTransportTxFrames=genEquipRadioPtpTransportTxFrames, genEquipRadioCfgEntry=genEquipRadioCfgEntry, genEquipRadioCompNGCountersTable=genEquipRadioCompNGCountersTable, genEquipRadioGroupsProtectionAttrCopyToMateSourceIfIndex=genEquipRadioGroupsProtectionAttrCopyToMateSourceIfIndex, genEquipRadioCfgAbcMode=genEquipRadioCfgAbcMode, genEquipRadioGroupsAbcStatusChannel7Capacity=genEquipRadioGroupsAbcStatusChannel7Capacity, genEquipRfuStatusCommunication=genEquipRfuStatusCommunication, genEquipRfuCfgEntry=genEquipRfuCfgEntry, WaysideBandwidth=WaysideBandwidth, genEquipRadioGroupsMIMOMembersGroupIfIndex=genEquipRadioGroupsMIMOMembersGroupIfIndex, genEquipRadioPtpTransportTxBytes=genEquipRadioPtpTransportTxBytes, genEquipRadioMRMCCurrRxBitrate=genEquipRadioMRMCCurrRxBitrate, genEquipRemoteRadioEntry=genEquipRemoteRadioEntry, genEquipRfuStatusBand=genEquipRfuStatusBand, genEquipRadioMRMCScriptAttrTxBW=genEquipRadioMRMCScriptAttrTxBW, genEquipRfuRunningVersionsEntry=genEquipRfuRunningVersionsEntry, genEquipRadioCompStatusEntry=genEquipRadioCompStatusEntry, genEquipRadioCfgExcessiveBERThreshold=genEquipRadioCfgExcessiveBERThreshold, Copy2mate=Copy2mate, MrmcBitRate=MrmcBitRate, genEquipRadioCutThroughNGCountersTotalTxFrames=genEquipRadioCutThroughNGCountersTotalTxFrames, genEquipRadioGroupsProtectionStatusActiveIfIndex=genEquipRadioGroupsProtectionStatusActiveIfIndex, genEquipRadioCutThroughNGCountersTxFrames=genEquipRadioCutThroughNGCountersTxFrames, genEquipRfuRunningVersionsScripts=genEquipRfuRunningVersionsScripts, genEquipRadioCfgRadioHiPriorityEthernetBW=genEquipRadioCfgRadioHiPriorityEthernetBW, genEquipRadioMRMCScriptAttrScriptId=genEquipRadioMRMCScriptAttrScriptId, genEquipRadioCompNGCountersHCOutBytes=genEquipRadioCompNGCountersHCOutBytes, genEquipRadioGroupsAbcStatusChannel7OperState=genEquipRadioGroupsAbcStatusChannel7OperState, genEquipRadioEnhDataCompAdmin=genEquipRadioEnhDataCompAdmin, genEquipRadioGroupsMIMOMembersMem4IfIndex=genEquipRadioGroupsMIMOMembersMem4IfIndex, genEquipRadioCutThroughNGCountersTotalTxIdleBytes=genEquipRadioCutThroughNGCountersTotalTxIdleBytes, genEquipRadioGroupsAbcAttrHighPriEthernetBandwidth=genEquipRadioGroupsAbcAttrHighPriEthernetBandwidth, genEquipRfuCfgATPCAdmin=genEquipRfuCfgATPCAdmin, genEquipRadioGroupsProtectionBBSSDStatusActiveRxQuality=genEquipRadioGroupsProtectionBBSSDStatusActiveRxQuality, genEquipRadioCompNGCountersHCTotalActiveFlows=genEquipRadioCompNGCountersHCTotalActiveFlows, genEquipRadioCutThroughChannelAdmin=genEquipRadioCutThroughChannelAdmin, genEquipRadioGroupsAbc=genEquipRadioGroupsAbc, genEquipRfuSwInstallOperation=genEquipRfuSwInstallOperation, genEquipRadioGroupsAbcStatusChannel4OperState=genEquipRadioGroupsAbcStatusChannel4OperState, genEquipRadioGroupsMRStatusOpertionalState=genEquipRadioGroupsMRStatusOpertionalState, genEquipRadioMRMCCurrTxVc=genEquipRadioMRMCCurrTxVc, genEquipRadioMRMCScriptReference=genEquipRadioMRMCScriptReference, genEquipRadioGroupsMRStatusTable=genEquipRadioGroupsMRStatusTable, genEquipRadioCompNGCfgEntry=genEquipRadioCompNGCfgEntry, genEquipRadioGroupsAbcStatusChannel6Capacity=genEquipRadioGroupsAbcStatusChannel6Capacity, genEquipRadioGroupsMRAttrGroupIfIndex=genEquipRadioGroupsMRAttrGroupIfIndex, genEquipRfuAvailableVersionsConfigurations=genEquipRfuAvailableVersionsConfigurations, genEquipRadioGroupsMIMOAttrTable=genEquipRadioGroupsMIMOAttrTable, genEquipRadioCompNGCountersHCInBytes=genEquipRadioCompNGCountersHCInBytes, genEquipRfuAvailableVersionsTable=genEquipRfuAvailableVersionsTable, genEquipRadioCfgRadioMultiRadioExcessiveBERAdmin=genEquipRadioCfgRadioMultiRadioExcessiveBERAdmin, genEquipRadioMRMCScriptOperMode=genEquipRadioMRMCScriptOperMode, genEquipRfuStatusMinTxLevel=genEquipRfuStatusMinTxLevel, genEquipRfuRunningVersionsConstants=genEquipRfuRunningVersionsConstants, genEquipRadioMRMCScriptAttrAdjChannel=genEquipRadioMRMCScriptAttrAdjChannel, genEquipRadioGroupsAbcMembersChannel3MemberIfIndex=genEquipRadioGroupsAbcMembersChannel3MemberIfIndex, genEquipRadioCutThroughTxBytes=genEquipRadioCutThroughTxBytes, RfuMajorType=RfuMajorType, XpicState=XpicState, genEquipRfuInstalledVersionsConfigurations=genEquipRfuInstalledVersionsConfigurations, genEquipRadioCutThroughNGCountersTotalTxBytesIn=genEquipRadioCutThroughNGCountersTotalTxBytesIn, genEquipRadioMRMCConfigAdaptivePowerRefClass=genEquipRadioMRMCConfigAdaptivePowerRefClass, genEquipRadioGroupsAbcMembersChannel3adminState=genEquipRadioGroupsAbcMembersChannel3adminState, genEquipRfuSwStatusProgress=genEquipRfuSwStatusProgress, genEquipRadioGroupsProtectionMembersGroupId=genEquipRadioGroupsProtectionMembersGroupId, CommunicationChannel=CommunicationChannel, genEquipRemoteRadioRemoteReset=genEquipRemoteRadioRemoteReset, genEquipRadioGroupsXPICAttrCopyToMateSourceIfIndex=genEquipRadioGroupsXPICAttrCopyToMateSourceIfIndex, genEquipRadioGroupsMRAttrEntry=genEquipRadioGroupsMRAttrEntry, genEquipRfuStatusRxLevelCombined=genEquipRfuStatusRxLevelCombined, genEquipRfuSwStatusTable=genEquipRfuSwStatusTable, genEquipRfuRunningVersionsTable=genEquipRfuRunningVersionsTable, genEquipRemoteRadioRemoteSlotID=genEquipRemoteRadioRemoteSlotID, genEquipRadioCfgRadioMultiRadioBlockLocalTraffic=genEquipRadioCfgRadioMultiRadioBlockLocalTraffic, genEquipRadioCutThroughNGCountersifIndex=genEquipRadioCutThroughNGCountersifIndex, genEquipRadioCutThroughCfgTable=genEquipRadioCutThroughCfgTable, genEquipRadioCfgRadioId=genEquipRadioCfgRadioId, genEquipRadioMRMCConfigAdaptivePowerAdmin=genEquipRadioMRMCConfigAdaptivePowerAdmin, genEquipRadioGroupsMRAttrExBerAdmin=genEquipRadioGroupsMRAttrExBerAdmin, genEquipRadioGroupsAbcMembersChannel5MemberIfIndex=genEquipRadioGroupsAbcMembersChannel5MemberIfIndex, genEquipRadioGroupsProtectionBBSSDAttrRevertive=genEquipRadioGroupsProtectionBBSSDAttrRevertive, genEquipRadioGroupsAbcStatusChannel3Capacity=genEquipRadioGroupsAbcStatusChannel3Capacity, genEquipRemoteRadioRemoteRxLevel=genEquipRemoteRadioRemoteRxLevel, genEquipRadioGroupsAbcAttrTable=genEquipRadioGroupsAbcAttrTable, genEquipRfuAvailableVersionsRfuType=genEquipRfuAvailableVersionsRfuType, genEquipRadioGroupsAbcStatusIfIndex=genEquipRadioGroupsAbcStatusIfIndex, genEquipRemoteRadioRemoteDefaultGateway=genEquipRemoteRadioRemoteDefaultGateway, genEquipRadioGroups=genEquipRadioGroups, genEquipRadioGroupsAbcMembersChannel1adminState=genEquipRadioGroupsAbcMembersChannel1adminState, genEquipRadioGroupsXPICStatusEntry=genEquipRadioGroupsXPICStatusEntry, genEquipRemoteRadio=genEquipRemoteRadio, genEquipRadioCutThroughNGCountersTable=genEquipRadioCutThroughNGCountersTable, genEquipStm1AbcAttrPri1IfIndex=genEquipStm1AbcAttrPri1IfIndex, genEquipRfuStatusRFUMinRxFreq=genEquipRfuStatusRFUMinRxFreq, genEquipRadioGroupsProtectionBBSSDStatusStandbyTxRadioIfIndex=genEquipRadioGroupsProtectionBBSSDStatusStandbyTxRadioIfIndex, genEquipRadioPtpTransportCfgEntry=genEquipRadioPtpTransportCfgEntry, genEquipRadioGroupsProtectionBBSSDAttrEntry=genEquipRadioGroupsProtectionBBSSDAttrEntry, genEquipRadioGroupsMRStatusGroupIfIndex=genEquipRadioGroupsMRStatusGroupIfIndex, genEquipRfuCfgLogAdmin=genEquipRfuCfgLogAdmin, genEquipRfuSwStatusIfIndex=genEquipRfuSwStatusIfIndex, genEquipRfuSwInstallEntry=genEquipRfuSwInstallEntry, genEquipRadioMRMCScriptProfileBitrate=genEquipRadioMRMCScriptProfileBitrate, genEquipRadioGroupsMRAttrBlockRadioIfindex=genEquipRadioGroupsMRAttrBlockRadioIfindex, genEquipRadioGroupsMIMOStatusEntry=genEquipRadioGroupsMIMOStatusEntry, genEquipRadioGroupsAbcAttrQualityThreshold=genEquipRadioGroupsAbcAttrQualityThreshold, genEquipRadioCfgLinkShutDownOnRadioFailure=genEquipRadioCfgLinkShutDownOnRadioFailure, genEquipRfuCfgATPCOverrideTimerState=genEquipRfuCfgATPCOverrideTimerState, genEquipRadioMRMCCurrGrade=genEquipRadioMRMCCurrGrade, genEquipRadioComp=genEquipRadioComp, genEquipRadioMRMCScriptAttrEntry=genEquipRadioMRMCScriptAttrEntry, genEquipRadioGroupsProtectionBBSSDStatusTable=genEquipRadioGroupsProtectionBBSSDStatusTable)
mibBuilder.exportSymbols("MWRM-RADIO-MIB", genEquipRadioMRMCConfigActiveScriptId=genEquipRadioMRMCConfigActiveScriptId, genEquipRadioGroupsAbcStatusCurrentAggregatedCapacityTX=genEquipRadioGroupsAbcStatusCurrentAggregatedCapacityTX, genEquip=genEquip, genEquipRemoteRadioRemoteDataLoopBackDuration=genEquipRemoteRadioRemoteDataLoopBackDuration, genEquipRadioGroupsProtectionMembersTable=genEquipRadioGroupsProtectionMembersTable, genEquipRadioCfgLoopbackTimeout=genEquipRadioCfgLoopbackTimeout, genEquipRfuCfgATPCOverrideTimeout=genEquipRfuCfgATPCOverrideTimeout, genEquipRadioGroupsAbcAttrProtectionEnable=genEquipRadioGroupsAbcAttrProtectionEnable, genEquipRadioMRMCFilteredScriptId=genEquipRadioMRMCFilteredScriptId)
