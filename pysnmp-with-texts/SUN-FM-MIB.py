#
# PySNMP MIB module SUN-FM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SUN-FM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:12:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
URLString, = mibBuilder.importSymbols("NETWORK-SERVICES-MIB", "URLString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, iso, ObjectIdentity, Counter32, TimeTicks, Unsigned32, MibIdentifier, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "ObjectIdentity", "Counter32", "TimeTicks", "Unsigned32", "MibIdentifier", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "Bits", "ModuleIdentity")
DateAndTime, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString")
products, = mibBuilder.importSymbols("SUN-MIB", "products")
sunFmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 42, 2, 195, 1))
sunFmMIB.setRevisions(('2008-08-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: sunFmMIB.setRevisionsDescriptions(('Version: 1.1',))
if mibBuilder.loadTexts: sunFmMIB.setLastUpdated('200808040000Z')
if mibBuilder.loadTexts: sunFmMIB.setOrganization('Sun Microsystems, Inc.')
if mibBuilder.loadTexts: sunFmMIB.setContactInfo('Sun Microsystems, Inc. 4150 Network Circle Santa Clara, CA 95054 1-800-555-9SUN or 1-650-960-1300 http://www.sun.com or contact your local support representative')
if mibBuilder.loadTexts: sunFmMIB.setDescription('Copyright 2008 Sun Microsystems, Inc. All rights reserved. Use is subject to license terms. MIB providing access to Sun Fault Manager information')
fm = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 195))
class SunFmUuidString(TextualConvention, OctetString):
    description = 'Represents a Universal Unique Identifier (UUID).'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 64)

class SunFmModuleState(TextualConvention, Integer32):
    description = 'Represents the status of an fmd(1M) module.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("active", 2), ("failed", 3))

class SunFmResourceState(TextualConvention, Integer32):
    description = 'Represents the status of a system resource as diagnosed by the fault manager.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("unknown", 4), ("faulted", 5))

class SunFmEventState(TextualConvention, Integer32):
    description = 'Represents the status of a suspect as diagnosed by the fault manager.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("faulty", 2), ("removed", 3), ("replaced", 4), ("repaired", 5), ("acquitted", 6))

sunFmProblemTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 1), )
if mibBuilder.loadTexts: sunFmProblemTable.setStatus('current')
if mibBuilder.loadTexts: sunFmProblemTable.setDescription('Table listing all of the known problems that have been diagnosed by the fault manager associated with this managed system element that are still present in that system.')
sunFmProblemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 1, 1), ).setIndexNames((0, "SUN-FM-MIB", "sunFmProblemUUIDIndex"))
if mibBuilder.loadTexts: sunFmProblemEntry.setStatus('current')
if mibBuilder.loadTexts: sunFmProblemEntry.setDescription('A problem diagnosed by the fault manager and still present in the system.')
sunFmProblemUUIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 1, 1, 1), SunFmUuidString())
if mibBuilder.loadTexts: sunFmProblemUUIDIndex.setStatus('current')
if mibBuilder.loadTexts: sunFmProblemUUIDIndex.setDescription('The Universal Unique Identifier (UUID) for this problem, as recorded by fmd(1M) and shown by fmadm(1M) or fmdump(1M). This is the index into sunFmProblemTable.')
sunFmProblemUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 1, 1, 2), SunFmUuidString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmProblemUUID.setStatus('current')
if mibBuilder.loadTexts: sunFmProblemUUID.setDescription('The Universal Unique Identifier (UUID) for this problem, as recorded by fmd(1M) and shown by fmadm(1M) or fmdump(1M).')
sunFmProblemCode = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmProblemCode.setStatus('current')
if mibBuilder.loadTexts: sunFmProblemCode.setDescription('The SUNW-MSG-ID static message identifier for this class of problem, as recorded by fmd(1M) and shown by fmdump(1M). The message identifier can be used as a key at http://sun.com/msg/')
sunFmProblemURL = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 1, 1, 4), URLString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmProblemURL.setStatus('current')
if mibBuilder.loadTexts: sunFmProblemURL.setDescription('The URL of an appropriate knowledge article providing more detailed information about this problem.')
sunFmProblemDiagEngine = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 1, 1, 5), URLString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmProblemDiagEngine.setStatus('current')
if mibBuilder.loadTexts: sunFmProblemDiagEngine.setDescription('The Sun FMRI of the Fault Manager diagnosis engine that performed the diagnosis of this problem, including its version.')
sunFmProblemDiagTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmProblemDiagTime.setStatus('current')
if mibBuilder.loadTexts: sunFmProblemDiagTime.setDescription('The date and time at which the problem was diagnosed.')
sunFmProblemSuspectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmProblemSuspectCount.setStatus('current')
if mibBuilder.loadTexts: sunFmProblemSuspectCount.setDescription('The number of individual suspect defects or faults associated with this problem diagnosis, as shown by fmdump(1M) -v -u <UUID>.')
sunFmFaultEventTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 2), )
if mibBuilder.loadTexts: sunFmFaultEventTable.setStatus('current')
if mibBuilder.loadTexts: sunFmFaultEventTable.setDescription('List of individual suspect defects or faults associated with a problem diagnosis, as shown by fmdump(1M) -v -u <UUID>.')
sunFmFaultEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 2, 1), ).setIndexNames((0, "SUN-FM-MIB", "sunFmFaultEventUUIDIndex"), (0, "SUN-FM-MIB", "sunFmFaultEventIndex"))
if mibBuilder.loadTexts: sunFmFaultEventEntry.setStatus('current')
if mibBuilder.loadTexts: sunFmFaultEventEntry.setDescription('Sun Fault Management fault or defect event containing a suspect problem and the corresponding FRU and ASRU.')
sunFmFaultEventUUIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 2, 1, 1), SunFmUuidString())
if mibBuilder.loadTexts: sunFmFaultEventUUIDIndex.setStatus('current')
if mibBuilder.loadTexts: sunFmFaultEventUUIDIndex.setDescription('UUID of a problem diagnosis with which this event is associated. An event may appear multiple times in association with different diagnoses. This is an index into sunFmFaultEventTable.')
sunFmFaultEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: sunFmFaultEventIndex.setStatus('current')
if mibBuilder.loadTexts: sunFmFaultEventIndex.setDescription('Index number of this event with respect to the problem diagnosis.')
sunFmFaultEventProblemUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 2, 1, 3), SunFmUuidString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmFaultEventProblemUUID.setStatus('current')
if mibBuilder.loadTexts: sunFmFaultEventProblemUUID.setDescription('UUID of a problem diagnosis with which this event is associated. An event may appear multiple times in association with different diagnoses.')
sunFmFaultEventClass = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmFaultEventClass.setStatus('current')
if mibBuilder.loadTexts: sunFmFaultEventClass.setDescription('Sun Fault Management event class string.')
sunFmFaultEventCertainty = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 2, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmFaultEventCertainty.setStatus('current')
if mibBuilder.loadTexts: sunFmFaultEventCertainty.setDescription('Percentage likelihood associated with this suspect for this diagnosis.')
sunFmFaultEventASRU = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 2, 1, 6), URLString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmFaultEventASRU.setStatus('current')
if mibBuilder.loadTexts: sunFmFaultEventASRU.setDescription('Sun FMRI of the Automated System Reconfiguration Unit (ASRU) that is believed to contain the specified fault or defect.')
sunFmFaultEventFRU = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 2, 1, 7), URLString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmFaultEventFRU.setStatus('current')
if mibBuilder.loadTexts: sunFmFaultEventFRU.setDescription('Sun FMRI of the Field Replaceable Unit (FRU) that should be replaced in order to repair the specified fault or defect.')
sunFmFaultEventResource = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 2, 1, 8), URLString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmFaultEventResource.setStatus('current')
if mibBuilder.loadTexts: sunFmFaultEventResource.setDescription('Sun FMRI of the resource responsible for the generation of the telemetry leading to the diagnosis.')
sunFmFaultEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 2, 1, 9), SunFmEventState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmFaultEventStatus.setStatus('current')
if mibBuilder.loadTexts: sunFmFaultEventStatus.setDescription('The current status of this suspect for this diagnosis. See fmadm(1M) faulty.')
sunFmFaultEventLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 2, 1, 10), URLString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmFaultEventLocation.setStatus('current')
if mibBuilder.loadTexts: sunFmFaultEventLocation.setDescription('Label of the Field Replaceable Unit (FRU) that should be replaced in order to repair the specified fault or defect.')
sunFmModuleTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 3), )
if mibBuilder.loadTexts: sunFmModuleTable.setStatus('current')
if mibBuilder.loadTexts: sunFmModuleTable.setDescription('List of modules configured in fmd(1M).')
sunFmModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 3, 1), ).setIndexNames((0, "SUN-FM-MIB", "sunFmModuleIndex"))
if mibBuilder.loadTexts: sunFmModuleEntry.setStatus('current')
if mibBuilder.loadTexts: sunFmModuleEntry.setDescription("A module which has been loaded into fmd(1M) to handle events. The information provided is equivalent to the output of fmadm(1) config'")
sunFmModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: sunFmModuleIndex.setStatus('current')
if mibBuilder.loadTexts: sunFmModuleIndex.setDescription("Unique integer index associated with this fault management module's entry.")
sunFmModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmModuleName.setStatus('current')
if mibBuilder.loadTexts: sunFmModuleName.setDescription('Name of the fault management module.')
sunFmModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmModuleVersion.setStatus('current')
if mibBuilder.loadTexts: sunFmModuleVersion.setDescription('Version string associated with the fault management module.')
sunFmModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 3, 1, 4), SunFmModuleState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmModuleStatus.setStatus('current')
if mibBuilder.loadTexts: sunFmModuleStatus.setDescription('Current status of the fault management module.')
sunFmModuleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmModuleDescription.setStatus('current')
if mibBuilder.loadTexts: sunFmModuleDescription.setDescription('A text description of the fault management module.')
sunFmResourceCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmResourceCount.setStatus('current')
if mibBuilder.loadTexts: sunFmResourceCount.setDescription('The number of managed elements currently believed by the fault manager to be faulty.')
sunFmResourceTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 5), )
if mibBuilder.loadTexts: sunFmResourceTable.setStatus('current')
if mibBuilder.loadTexts: sunFmResourceTable.setDescription('A table containing information about all resources for which the fault manager has received telemetry. This is the same information provided by the fmadm(1M) faulty command.')
sunFmResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 5, 1), ).setIndexNames((0, "SUN-FM-MIB", "sunFmResourceIndex"))
if mibBuilder.loadTexts: sunFmResourceEntry.setStatus('current')
if mibBuilder.loadTexts: sunFmResourceEntry.setDescription('Information about the state of a resource the fault manager believes to be faulty.')
sunFmResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: sunFmResourceIndex.setStatus('current')
if mibBuilder.loadTexts: sunFmResourceIndex.setDescription('Index of the resource in the resource table.')
sunFmResourceFMRI = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmResourceFMRI.setStatus('current')
if mibBuilder.loadTexts: sunFmResourceFMRI.setDescription('Sun FMRI of the Automated System Reconfiguration Unit (ASRU) which the fault manager believes to be faulty.')
sunFmResourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 5, 1, 3), SunFmResourceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmResourceStatus.setStatus('current')
if mibBuilder.loadTexts: sunFmResourceStatus.setDescription('The current status of the resource. See fmadm(1M) faulty.')
sunFmResourceDiagnosisUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 5, 1, 4), SunFmUuidString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sunFmResourceDiagnosisUUID.setStatus('current')
if mibBuilder.loadTexts: sunFmResourceDiagnosisUUID.setDescription('The Universal Unique Identifier (UUID) for the problem associated with the fault in this resource, as recorded by fmd(1M) and shown by fmadm(1M).')
sunFmObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 6))
sunFmObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 6, 1)).setObjects(("SUN-FM-MIB", "sunFmProblemUUID"), ("SUN-FM-MIB", "sunFmProblemCode"), ("SUN-FM-MIB", "sunFmProblemURL"), ("SUN-FM-MIB", "sunFmProblemDiagEngine"), ("SUN-FM-MIB", "sunFmProblemDiagTime"), ("SUN-FM-MIB", "sunFmProblemSuspectCount"), ("SUN-FM-MIB", "sunFmFaultEventProblemUUID"), ("SUN-FM-MIB", "sunFmFaultEventClass"), ("SUN-FM-MIB", "sunFmFaultEventCertainty"), ("SUN-FM-MIB", "sunFmFaultEventASRU"), ("SUN-FM-MIB", "sunFmFaultEventFRU"), ("SUN-FM-MIB", "sunFmFaultEventResource"), ("SUN-FM-MIB", "sunFmFaultEventStatus"), ("SUN-FM-MIB", "sunFmFaultEventLocation"), ("SUN-FM-MIB", "sunFmModuleName"), ("SUN-FM-MIB", "sunFmModuleVersion"), ("SUN-FM-MIB", "sunFmModuleStatus"), ("SUN-FM-MIB", "sunFmModuleDescription"), ("SUN-FM-MIB", "sunFmResourceCount"), ("SUN-FM-MIB", "sunFmResourceFMRI"), ("SUN-FM-MIB", "sunFmResourceStatus"), ("SUN-FM-MIB", "sunFmResourceDiagnosisUUID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunFmObjectGroup = sunFmObjectGroup.setStatus('current')
if mibBuilder.loadTexts: sunFmObjectGroup.setDescription('A collection of objects providing access to Sun Fault Manager operational data.')
sunFmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 7, 0))
sunFmProblemTrap = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 7, 0, 1)).setObjects(("SUN-FM-MIB", "sunFmProblemUUID"), ("SUN-FM-MIB", "sunFmProblemCode"), ("SUN-FM-MIB", "sunFmProblemURL"))
if mibBuilder.loadTexts: sunFmProblemTrap.setStatus('current')
if mibBuilder.loadTexts: sunFmProblemTrap.setDescription('Trap notification that a diagnosis has been made or the fault manager fmd(1M) has restarted and the corresponding problem is still believed to be present in the managed entity.')
sunFmNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 42, 2, 195, 1, 6, 2)).setObjects(("SUN-FM-MIB", "sunFmProblemTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunFmNotificationGroup = sunFmNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: sunFmNotificationGroup.setDescription('A collection of notifications provided by the Sun Fault Manager.')
mibBuilder.exportSymbols("SUN-FM-MIB", sunFmModuleStatus=sunFmModuleStatus, sunFmResourceDiagnosisUUID=sunFmResourceDiagnosisUUID, sunFmModuleEntry=sunFmModuleEntry, sunFmModuleDescription=sunFmModuleDescription, sunFmFaultEventCertainty=sunFmFaultEventCertainty, sunFmFaultEventClass=sunFmFaultEventClass, sunFmFaultEventEntry=sunFmFaultEventEntry, sunFmMIB=sunFmMIB, sunFmModuleVersion=sunFmModuleVersion, sunFmFaultEventResource=sunFmFaultEventResource, sunFmProblemDiagTime=sunFmProblemDiagTime, sunFmObjectGroup=sunFmObjectGroup, sunFmResourceTable=sunFmResourceTable, sunFmResourceIndex=sunFmResourceIndex, fm=fm, sunFmFaultEventLocation=sunFmFaultEventLocation, sunFmFaultEventUUIDIndex=sunFmFaultEventUUIDIndex, sunFmResourceStatus=sunFmResourceStatus, sunFmModuleName=sunFmModuleName, sunFmFaultEventProblemUUID=sunFmFaultEventProblemUUID, sunFmProblemTable=sunFmProblemTable, SunFmModuleState=SunFmModuleState, sunFmResourceCount=sunFmResourceCount, sunFmProblemTrap=sunFmProblemTrap, SunFmUuidString=SunFmUuidString, sunFmFaultEventTable=sunFmFaultEventTable, sunFmFaultEventIndex=sunFmFaultEventIndex, sunFmProblemSuspectCount=sunFmProblemSuspectCount, sunFmProblemUUID=sunFmProblemUUID, sunFmProblemURL=sunFmProblemURL, sunFmResourceEntry=sunFmResourceEntry, sunFmModuleIndex=sunFmModuleIndex, sunFmProblemEntry=sunFmProblemEntry, sunFmTraps=sunFmTraps, sunFmFaultEventFRU=sunFmFaultEventFRU, sunFmResourceFMRI=sunFmResourceFMRI, sunFmModuleTable=sunFmModuleTable, sunFmProblemDiagEngine=sunFmProblemDiagEngine, sunFmProblemCode=sunFmProblemCode, sunFmObjectGroups=sunFmObjectGroups, sunFmNotificationGroup=sunFmNotificationGroup, PYSNMP_MODULE_ID=sunFmMIB, SunFmResourceState=SunFmResourceState, SunFmEventState=SunFmEventState, sunFmFaultEventASRU=sunFmFaultEventASRU, sunFmFaultEventStatus=sunFmFaultEventStatus, sunFmProblemUUIDIndex=sunFmProblemUUIDIndex)
