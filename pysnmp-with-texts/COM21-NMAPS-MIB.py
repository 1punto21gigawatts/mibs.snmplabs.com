#
# PySNMP MIB module COM21-NMAPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COM21-NMAPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
MacAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress")
com21Nmaps, = mibBuilder.importSymbols("COM21-HCX-MIB", "com21Nmaps")
hcxEventLogTime, hcxAlmSeverity = mibBuilder.importSymbols("COM21-HCXALM-MIB", "hcxEventLogTime", "hcxAlmSeverity")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Integer32, MibIdentifier, Unsigned32, IpAddress, NotificationType, TimeTicks, iso, ModuleIdentity, enterprises, NotificationType, Bits, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "MibIdentifier", "Unsigned32", "IpAddress", "NotificationType", "TimeTicks", "iso", "ModuleIdentity", "enterprises", "NotificationType", "Bits", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
com21NmapsVarBinds = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 5, 1))
nmapsAlertMessage = MibScalar((1, 3, 6, 1, 4, 1, 1141, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmapsAlertMessage.setStatus('mandatory')
if mibBuilder.loadTexts: nmapsAlertMessage.setDescription(' A string giving the application name, time, error number, and a description of the error.')
nmapsMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 1141, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmapsMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nmapsMacAddress.setDescription(' A Mac Address var bind.')
nmapsDaemonName = MibScalar((1, 3, 6, 1, 4, 1, 1141, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmapsDaemonName.setStatus('mandatory')
if mibBuilder.loadTexts: nmapsDaemonName.setDescription(' The name of an NMAPS daemon.')
nmapsDaemonPid = MibScalar((1, 3, 6, 1, 4, 1, 1141, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmapsDaemonPid.setStatus('mandatory')
if mibBuilder.loadTexts: nmapsDaemonPid.setDescription(' The process id of an NMAPS daemon.')
nmapsIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1141, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmapsIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nmapsIpAddress.setDescription(' An Ip Address var bind.')
nmapsDaemonForcePoll = MibScalar((1, 3, 6, 1, 4, 1, 1141, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("optional", 0), ("required", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmapsDaemonForcePoll.setStatus('mandatory')
if mibBuilder.loadTexts: nmapsDaemonForcePoll.setDescription(' Indicates whether polling is required.')
nmapsStuTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 5) + (0,1))
if mibBuilder.loadTexts: nmapsStuTopologyChange.setDescription(' generated whenever it is suspected that a STU topology change has occured.')
nmapsStuDuplicateMac = NotificationType((1, 3, 6, 1, 4, 1, 1141, 5) + (0,2)).setObjects(("COM21-NMAPS-MIB", "nmapsMacAddress"))
if mibBuilder.loadTexts: nmapsStuDuplicateMac.setDescription(" generated whenever two STU's with the same Mac Address are found on the same NMAPS.")
nmapsDaemonDown = NotificationType((1, 3, 6, 1, 4, 1, 1141, 5) + (0,3)).setObjects(("COM21-NMAPS-MIB", "nmapsDaemonName"), ("COM21-NMAPS-MIB", "nmapsDaemonPid"))
if mibBuilder.loadTexts: nmapsDaemonDown.setDescription(' generated whenever the Hcx List application detects an NMAPS daemon has gone down.')
nmapsDaemonUp = NotificationType((1, 3, 6, 1, 4, 1, 1141, 5) + (0,4)).setObjects(("COM21-NMAPS-MIB", "nmapsDaemonName"), ("COM21-NMAPS-MIB", "nmapsDaemonPid"))
if mibBuilder.loadTexts: nmapsDaemonUp.setDescription(' generated whenever the Hcx List application detects an NMAPS daemon has come up.')
nmapsUpdateHcxInDb = NotificationType((1, 3, 6, 1, 4, 1, 1141, 5) + (0,5)).setObjects(("COM21-NMAPS-MIB", "nmapsDaemonForcePoll"))
if mibBuilder.loadTexts: nmapsUpdateHcxInDb.setDescription(' A request to poll the HCX for current configuration and put the results in the NMAPS database.')
nmapsUpdateStusInDb = NotificationType((1, 3, 6, 1, 4, 1, 1141, 5) + (0,6)).setObjects(("COM21-NMAPS-MIB", "nmapsDaemonForcePoll"))
if mibBuilder.loadTexts: nmapsUpdateStusInDb.setDescription(' A request to poll the Hcx for current STU configuration and put the results in the NMAPS database.')
nmapsConfiguredStuMissing = NotificationType((1, 3, 6, 1, 4, 1, 1141, 5) + (0,7)).setObjects(("COM21-NMAPS-MIB", "nmapsMacAddress"))
if mibBuilder.loadTexts: nmapsConfiguredStuMissing.setDescription(' generated whenever a configured STU is discovered to be missing from the ComCONTROLLER database. Either unconfiguration was done via a means other than NMAPS (e.g. CUI), or there is a bug.')
nmapsDebugAlert = NotificationType((1, 3, 6, 1, 4, 1, 1141, 5) + (0,101)).setObjects(("COM21-NMAPS-MIB", "nmapsAlertMessage"))
if mibBuilder.loadTexts: nmapsDebugAlert.setDescription(' Generated when a Debug message is logged in the NMAPS Error Log.')
nmapsInfoAlert = NotificationType((1, 3, 6, 1, 4, 1, 1141, 5) + (0,102)).setObjects(("COM21-NMAPS-MIB", "nmapsAlertMessage"))
if mibBuilder.loadTexts: nmapsInfoAlert.setDescription(' Generated when a Info message is logged in the NMAPS Error Log.')
nmapsWarningAlert = NotificationType((1, 3, 6, 1, 4, 1, 1141, 5) + (0,103)).setObjects(("COM21-NMAPS-MIB", "nmapsAlertMessage"))
if mibBuilder.loadTexts: nmapsWarningAlert.setDescription(' Generated when a Warning message is logged in the NMAPS Error Log.')
nmapsErrorAlert = NotificationType((1, 3, 6, 1, 4, 1, 1141, 5) + (0,104)).setObjects(("COM21-NMAPS-MIB", "nmapsAlertMessage"))
if mibBuilder.loadTexts: nmapsErrorAlert.setDescription(' Generated when a Error message is logged in the NMAPS Error Log.')
nmapsFatalAlert = NotificationType((1, 3, 6, 1, 4, 1, 1141, 5) + (0,105)).setObjects(("COM21-NMAPS-MIB", "nmapsAlertMessage"))
if mibBuilder.loadTexts: nmapsFatalAlert.setDescription(' Generated when a Fatal message is logged in the NMAPS Error Log.')
nmapsDisasterAlert = NotificationType((1, 3, 6, 1, 4, 1, 1141, 5) + (0,106)).setObjects(("COM21-NMAPS-MIB", "nmapsAlertMessage"))
if mibBuilder.loadTexts: nmapsDisasterAlert.setDescription(' Generated when a Disaster message is logged in the NMAPS Error Log.')
mibBuilder.exportSymbols("COM21-NMAPS-MIB", nmapsConfiguredStuMissing=nmapsConfiguredStuMissing, nmapsDaemonName=nmapsDaemonName, nmapsWarningAlert=nmapsWarningAlert, nmapsDaemonUp=nmapsDaemonUp, nmapsDisasterAlert=nmapsDisasterAlert, nmapsErrorAlert=nmapsErrorAlert, nmapsDaemonPid=nmapsDaemonPid, nmapsDaemonForcePoll=nmapsDaemonForcePoll, nmapsDaemonDown=nmapsDaemonDown, nmapsAlertMessage=nmapsAlertMessage, nmapsUpdateHcxInDb=nmapsUpdateHcxInDb, nmapsInfoAlert=nmapsInfoAlert, nmapsFatalAlert=nmapsFatalAlert, nmapsStuTopologyChange=nmapsStuTopologyChange, com21NmapsVarBinds=com21NmapsVarBinds, nmapsDebugAlert=nmapsDebugAlert, nmapsStuDuplicateMac=nmapsStuDuplicateMac, nmapsMacAddress=nmapsMacAddress, nmapsUpdateStusInDb=nmapsUpdateStusInDb, nmapsIpAddress=nmapsIpAddress)
