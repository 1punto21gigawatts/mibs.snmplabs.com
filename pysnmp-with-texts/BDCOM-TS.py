#
# PySNMP MIB module BDCOM-TS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BDCOM-TS
# Produced by pysmi-0.3.4 at Wed May  1 11:36:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
bdlocal, = mibBuilder.importSymbols("BDCOM-SMI", "bdlocal")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Counter64, Unsigned32, ModuleIdentity, TimeTicks, iso, Bits, Gauge32, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Counter64", "Unsigned32", "ModuleIdentity", "TimeTicks", "iso", "Bits", "Gauge32", "ObjectIdentity", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bdlts = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 2, 9))
bdtsLines = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLines.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLines.setDescription('Number of terminal lines on this device. Includes virtual lines.')
bdltsLineTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2), )
if mibBuilder.loadTexts: bdltsLineTable.setStatus('mandatory')
if mibBuilder.loadTexts: bdltsLineTable.setDescription('A list of terminal server line entries.')
bdltsLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1), ).setIndexNames((0, "BDCOM-TS", "tsLineNumber"))
if mibBuilder.loadTexts: bdltsLineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bdltsLineEntry.setDescription('A collection of per TTY objects in the BDCom Terminal Server implementation.')
bdtsLineActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineActive.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineActive.setDescription('Boolean whether this line is active or not.')
bdtsLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("console", 2), ("terminal", 3), ("line-printer", 4), ("virtual-terminal", 5), ("auxiliary", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineType.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineType.setDescription('Type of line.')
bdtsLineAutobaud = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineAutobaud.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineAutobaud.setDescription('Boolean whether line will autobaud or not.')
bdtsLineSpeedin = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineSpeedin.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineSpeedin.setDescription('What input speed the line is running at.')
bdtsLineSpeedout = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineSpeedout.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineSpeedout.setDescription('What output speed the line is running at.')
bdtsLineFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("software-input", 3), ("software-output", 4), ("software-both", 5), ("hardware-input", 6), ("hardware-output", 7), ("hardware-both", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineFlow.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineFlow.setDescription('What kind of flow control the line is using.')
bdtsLineModem = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("call-in", 3), ("call-out", 4), ("cts-required", 5), ("ri-is-cd", 6), ("inout", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineModem.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineModem.setDescription('What kind of modem control the line is using.')
bdtsLineLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineLoc.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineLoc.setDescription("Describes the line's physical location.")
bdtsLineTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineTerm.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineTerm.setDescription("Describes the line's terminal type.")
bdtsLineScrlen = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineScrlen.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineScrlen.setDescription('Length in lines of the screen of terminal attached to this line.')
bdtsLineScrwid = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineScrwid.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineScrwid.setDescription('Width in characters of the screen of terminal attached to this line.')
bdtsLineEsc = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineEsc.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineEsc.setDescription('Escape character used to break out of active sessions.')
bdtsLineTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineTmo.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineTmo.setDescription('Line idleness timeout in seconds.')
bdtsLineSestmo = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineSestmo.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineSestmo.setDescription('Session idleness timeout in seconds.')
bdtsLineRotary = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineRotary.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineRotary.setDescription('Rotary group number the line belongs in.')
bdtsLineUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineUses.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineUses.setDescription('Number of times a connection has been made to or from this line.')
bdtsLineNses = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineNses.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineNses.setDescription('Current number of sessions in use on this line.')
bdtsLineUser = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineUser.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineUser.setDescription('TACACS user name, if TACACS enabled, of user on this line.')
bdtsLineNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineNoise.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineNoise.setDescription('Count of garbage characters received when line inactive.')
bdtsLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineNumber.setDescription("The line i've been talking about.")
bdtsLineTimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtsLineTimeActive.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsLineTimeActive.setDescription('The time in seconds since line was activated.')
bdltsLineSessionTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3), )
if mibBuilder.loadTexts: bdltsLineSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: bdltsLineSessionTable.setDescription('A list of terminal server line and session entries.')
bdltsLineSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3, 1), ).setIndexNames((0, "BDCOM-TS", "bdtslineSesLine"), (0, "BDCOM-TS", "bdtslineSesSession"))
if mibBuilder.loadTexts: bdltsLineSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bdltsLineSessionEntry.setDescription('A collection of per session and per TTY objects in the BDCom Terminal Server implementation.')
bdtslineSesType = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("pad", 2), ("stream", 3), ("rlogin", 4), ("telnet", 5), ("tcp", 6), ("lat", 7), ("mop", 8), ("slip", 9), ("xremote", 10), ("rshell", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtslineSesType.setStatus('mandatory')
if mibBuilder.loadTexts: bdtslineSesType.setDescription('Type of session.')
bdtslineSesDir = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("incoming", 2), ("outgoing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtslineSesDir.setStatus('mandatory')
if mibBuilder.loadTexts: bdtslineSesDir.setDescription('Direction of session.')
bdtslineSesAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtslineSesAddr.setStatus('mandatory')
if mibBuilder.loadTexts: bdtslineSesAddr.setDescription('Remote host address of session. [What about PAD connections?]')
bdtslineSesName = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtslineSesName.setStatus('mandatory')
if mibBuilder.loadTexts: bdtslineSesName.setDescription('Remote host name of session.')
bdtslineSesCur = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtslineSesCur.setStatus('mandatory')
if mibBuilder.loadTexts: bdtslineSesCur.setDescription('Boolean whether session is the currently active one.')
bdtslineSesIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtslineSesIdle.setStatus('mandatory')
if mibBuilder.loadTexts: bdtslineSesIdle.setDescription('Time in seconds session has been idle.')
bdtslineSesLine = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtslineSesLine.setStatus('mandatory')
if mibBuilder.loadTexts: bdtslineSesLine.setDescription('Table index 1.')
bdtslineSesSession = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 9, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdtslineSesSession.setStatus('mandatory')
if mibBuilder.loadTexts: bdtslineSesSession.setDescription('Table index 2.')
bdtsMsgTtyLine = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdtsMsgTtyLine.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsMsgTtyLine.setDescription('tty line to send the message to. -1 will send it to all tty lines')
bdtsMsgIntervaltim = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdtsMsgIntervaltim.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsMsgIntervaltim.setDescription('Interval between reissuing message in milliseconds. Minimum non-zero setting is 10000. 0 will cause the routine to choose its own intervals becoming more frequent as MessageDuration gets close to expiring. 2hr, 1hr, 30min, 5min, 1min')
bdtsMsgDuration = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdtsMsgDuration.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsMsgDuration.setDescription('Length of time to reissue message in milliseconds. Minimum non-zero setting is 10000. A setting of 0 will not repeat the message.')
bdtsMsgText = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 9, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdtsMsgText.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsMsgText.setDescription('Up to 256 characters that will make up the message')
bdtsMsgTmpBanner = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("additive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdtsMsgTmpBanner.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsMsgTmpBanner.setDescription('Should the message be used as a temporary banner. 1 - No. 2 - In addition to the normal banner')
bdtsMsgSend = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nothing", 1), ("reload", 2), ("messagedone", 3), ("abort", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdtsMsgSend.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsMsgSend.setDescription('Sends the message. The value determines what to do after the message has completed.')
bdtsClrTtyLine = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 9, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdtsClrTtyLine.setStatus('mandatory')
if mibBuilder.loadTexts: bdtsClrTtyLine.setDescription('tty line to clear. Read returns the last line cleared. A value of -1 indicates no lines have been cleared.')
mibBuilder.exportSymbols("BDCOM-TS", bdltsLineTable=bdltsLineTable, bdtsLineUser=bdtsLineUser, bdtsLineFlow=bdtsLineFlow, bdtsClrTtyLine=bdtsClrTtyLine, bdtsLineSestmo=bdtsLineSestmo, bdtsLineUses=bdtsLineUses, bdtsLineType=bdtsLineType, bdtsMsgText=bdtsMsgText, bdtslineSesDir=bdtslineSesDir, bdtsLineLoc=bdtsLineLoc, bdltsLineEntry=bdltsLineEntry, bdtsLineNses=bdtsLineNses, bdtslineSesName=bdtslineSesName, bdtslineSesAddr=bdtslineSesAddr, bdtsMsgSend=bdtsMsgSend, bdtsLineNumber=bdtsLineNumber, bdtsLineTmo=bdtsLineTmo, bdtsLineActive=bdtsLineActive, bdtslineSesCur=bdtslineSesCur, bdtsMsgTmpBanner=bdtsMsgTmpBanner, bdltsLineSessionTable=bdltsLineSessionTable, bdtslineSesIdle=bdtslineSesIdle, bdtsLineSpeedout=bdtsLineSpeedout, bdtsLineSpeedin=bdtsLineSpeedin, bdtsLineTerm=bdtsLineTerm, bdtslineSesLine=bdtslineSesLine, bdtsMsgIntervaltim=bdtsMsgIntervaltim, bdtsLineRotary=bdtsLineRotary, bdlts=bdlts, bdtsLines=bdtsLines, bdtsLineEsc=bdtsLineEsc, bdtsLineAutobaud=bdtsLineAutobaud, bdtsLineTimeActive=bdtsLineTimeActive, bdtslineSesType=bdtslineSesType, bdtsLineScrlen=bdtsLineScrlen, bdtsLineModem=bdtsLineModem, bdtsLineScrwid=bdtsLineScrwid, bdtsLineNoise=bdtsLineNoise, bdtslineSesSession=bdtslineSesSession, bdtsMsgDuration=bdtsMsgDuration, bdtsMsgTtyLine=bdtsMsgTtyLine, bdltsLineSessionEntry=bdltsLineSessionEntry)
