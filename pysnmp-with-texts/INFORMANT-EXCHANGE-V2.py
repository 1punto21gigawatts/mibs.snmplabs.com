#
# PySNMP MIB module INFORMANT-EXCHANGE-V2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INFORMANT-EXCHANGE-V2
# Produced by pysmi-0.3.4 at Wed May  1 13:53:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Bits, MibIdentifier, IpAddress, Counter64, TimeTicks, iso, ModuleIdentity, Counter32, ObjectIdentity, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "MibIdentifier", "IpAddress", "Counter64", "TimeTicks", "iso", "ModuleIdentity", "Counter32", "ObjectIdentity", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
informant, InstanceName = mibBuilder.importSymbols("WTCS", "informant", "InstanceName")
exchangeV2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 15))
exchangeV2.setRevisions(('2008-04-08 00:09',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: exchangeV2.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: exchangeV2.setLastUpdated('200804080009Z')
if mibBuilder.loadTexts: exchangeV2.setOrganization('Informant Systems, Inc.')
if mibBuilder.loadTexts: exchangeV2.setContactInfo('Garth Williams 11135-23A Ave Edmonton, AB T6J4W5 Canada Tel: +1 780 434 4113 E-mail: garth.williams@wtcs.org')
if mibBuilder.loadTexts: exchangeV2.setDescription('The MIB module for informant standard entities.')
ex2ADRMSPrelicensingAgent = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 15, 1))
if mibBuilder.loadTexts: ex2ADRMSPrelicensingAgent.setStatus('current')
if mibBuilder.loadTexts: ex2ADRMSPrelicensingAgent.setDescription('Performance counters for Exchange AD RMS Prelicensing Agent')
ex2apaAvgProcessTimeLicenseRqst = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2apaAvgProcessTimeLicenseRqst.setStatus('current')
if mibBuilder.loadTexts: ex2apaAvgProcessTimeLicenseRqst.setDescription('The Average Processing Time Per License Request (ms) is the average amount of time in milliseconds that it takes the AD RMS Prelicensing agent to process a license.')
ex2apaMessageProcessSuccessfully = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2apaMessageProcessSuccessfully.setStatus('current')
if mibBuilder.loadTexts: ex2apaMessageProcessSuccessfully.setDescription('Messages Processed Successfully is the total number of protected messages that were successfully processed by the AD RMS Prelicensing agent.')
ex2apaPermanentFailLicenseRqsts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2apaPermanentFailLicenseRqsts.setStatus('current')
if mibBuilder.loadTexts: ex2apaPermanentFailLicenseRqsts.setDescription('Permanent Failure License Requests is the total number of license requests that were made by the AD RMS Prelicensing agent and resulted in permanent failures.')
ex2apaSuccessfulLicenseRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2apaSuccessfulLicenseRequests.setStatus('current')
if mibBuilder.loadTexts: ex2apaSuccessfulLicenseRequests.setDescription('Successful License Requests is the total number of successful license requests that were made by the AD RMS Prelicensing agent.')
ex2apaTotalLicenseRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2apaTotalLicenseRequests.setStatus('current')
if mibBuilder.loadTexts: ex2apaTotalLicenseRequests.setDescription('Total License Requests is the total number of license requests that were made by the AD RMS Prelicensing agent.')
ex2apaTotalLicenseRqstsProcTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2apaTotalLicenseRqstsProcTime.setStatus('current')
if mibBuilder.loadTexts: ex2apaTotalLicenseRqstsProcTime.setDescription('Total License Requests Processing Time (ms) is the total time spent on license requests by the AD RMS Prelicensing agent in milliseconds.')
ex2apaTotalLicenseRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2apaTotalLicenseRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2apaTotalLicenseRequestsPerSec.setDescription('Total License Requests/sec is the total number of license requests that were made by the AD RMS Prelicensing agent per second.')
ex2apaTotalMessages = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2apaTotalMessages.setStatus('current')
if mibBuilder.loadTexts: ex2apaTotalMessages.setDescription('Total Messages is the total number of protected messages that were processed by the AD RMS Prelicensing agent.')
ex2apaTotalRecipients = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2apaTotalRecipients.setStatus('current')
if mibBuilder.loadTexts: ex2apaTotalRecipients.setDescription('Total Recipients is the total number of recipients from all protected e-mails that were processed by the AD RMS Prelicensing agent.')
ex2ADAccessCachesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2), )
if mibBuilder.loadTexts: ex2ADAccessCachesTable.setStatus('current')
if mibBuilder.loadTexts: ex2ADAccessCachesTable.setDescription('One instance per Cache Instance: global Cache Instance data.')
ex2ADAccessCachesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2aacInstance"))
if mibBuilder.loadTexts: ex2ADAccessCachesEntry.setStatus('current')
if mibBuilder.loadTexts: ex2ADAccessCachesEntry.setDescription("Performance information for one particular instance of 'MSExchange ADAccess Caches' object.")
ex2aacInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacInstance.setStatus('current')
if mibBuilder.loadTexts: ex2aacInstance.setDescription('Instance name.')
ex2aacCacheExpireTotalConfigData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacCacheExpireTotalConfigData.setStatus('current')
if mibBuilder.loadTexts: ex2aacCacheExpireTotalConfigData.setDescription('Cache Expiries Total (Configuration Data) is the total number of configuration data objects expired from the cache since system initialization.')
ex2aacCacheExpiriesTotalUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacCacheExpiriesTotalUserData.setStatus('current')
if mibBuilder.loadTexts: ex2aacCacheExpiriesTotalUserData.setDescription('Cache Expiries Total (User Data) is the total number of user data objects expired from the cache since system initialization.')
ex2aacCacheExpiriesSecConfigData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacCacheExpiriesSecConfigData.setStatus('current')
if mibBuilder.loadTexts: ex2aacCacheExpiriesSecConfigData.setDescription('Cache Expiries/Sec (Configuration Data) is the number of configuration data objects expired from the cache per second.')
ex2aacCacheExpirePerSecUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacCacheExpirePerSecUserData.setStatus('current')
if mibBuilder.loadTexts: ex2aacCacheExpirePerSecUserData.setDescription('Cache Expiries/Sec (User Data) is the number of user data objects expired from the cache per second.')
ex2aacCacheHitsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacCacheHitsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2aacCacheHitsTotal.setDescription("Cache Hits Total is the total number of 'object found in cache' events since system initialization.")
ex2aacCacheHitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacCacheHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2aacCacheHitsPerSec.setDescription("Cache Hits/Sec is the number of 'object found in cache' events per second.")
ex2aacCacheInsertTotalConfigData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacCacheInsertTotalConfigData.setStatus('current')
if mibBuilder.loadTexts: ex2aacCacheInsertTotalConfigData.setDescription('Cache Inserts Total (Configuration Data) is the total number of configuration data objects inserted into the cache since system initialization.')
ex2aacCacheInsertsTotalUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacCacheInsertsTotalUserData.setStatus('current')
if mibBuilder.loadTexts: ex2aacCacheInsertsTotalUserData.setDescription('Cache Inserts Total (User Data) is the total number of user data objects inserted into the cache since system initialization.')
ex2aacCacheInsertSecConfigurData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacCacheInsertSecConfigurData.setStatus('current')
if mibBuilder.loadTexts: ex2aacCacheInsertSecConfigurData.setDescription('Cache Inserts/Sec (Configuration Data) is the number of configuration data objects inserted into the cache per second.')
ex2aacCacheInsertsPerSecUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacCacheInsertsPerSecUserData.setStatus('current')
if mibBuilder.loadTexts: ex2aacCacheInsertsPerSecUserData.setDescription('Cache Inserts/Sec (User Data) is the number of user data objects inserted into the cache per second.')
ex2aacCacheMissesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacCacheMissesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2aacCacheMissesTotal.setDescription("Cache Misses Total is the total number of 'object not found in cache' events since system initialization.")
ex2aacCacheMissesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacCacheMissesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2aacCacheMissesPerSec.setDescription("Cache Misses/Sec is the number of 'object not found in cache' events per second.")
ex2aacDNEntriesConfigurationData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacDNEntriesConfigurationData.setStatus('current')
if mibBuilder.loadTexts: ex2aacDNEntriesConfigurationData.setDescription('DN Entries (Configuration Data) is the total number of configuration data DN object type entries in the cache.')
ex2aacDNEntriesUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacDNEntriesUserData.setStatus('current')
if mibBuilder.loadTexts: ex2aacDNEntriesUserData.setDescription('DN Entries (User Data) is the total number of user data DN object type entries in the cache.')
ex2aacDNEntriesMemoryConfigData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacDNEntriesMemoryConfigData.setStatus('current')
if mibBuilder.loadTexts: ex2aacDNEntriesMemoryConfigData.setDescription('DN Entries Memory (Configuration Data) is the memory occupied by all configuration data DN Entries in the cache (in bytes)')
ex2aacDNEntriesMemoryUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacDNEntriesMemoryUserData.setStatus('current')
if mibBuilder.loadTexts: ex2aacDNEntriesMemoryUserData.setDescription('DN Entries Memory (User Data) is the memory occupied by all user data DN Entries in the cache (in bytes)')
ex2aacLDAPSearchesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacLDAPSearchesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2aacLDAPSearchesTotal.setDescription('LDAP Searches Total is the total number of LDAP search requests issued since system initialization.')
ex2aacLDAPSearchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacLDAPSearchesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2aacLDAPSearchesPerSec.setDescription('LDAP Searches/Sec is the number of LDAP search requests issued per second.')
ex2aacNotFndDNEntriesConfigData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacNotFndDNEntriesConfigData.setStatus('current')
if mibBuilder.loadTexts: ex2aacNotFndDNEntriesConfigData.setDescription("Not Found DN Entries (Configuration Data) is the total number of configuration data 'Not Found DN' type entries in the cache.")
ex2aacNotFoundDNEntriesUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacNotFoundDNEntriesUserData.setStatus('current')
if mibBuilder.loadTexts: ex2aacNotFoundDNEntriesUserData.setDescription("Not Found DN Entries (User Data) is the total number of user data 'Not Found DN' type entries in the cache.")
ex2aacNotFndDNEntryMemConfigData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacNotFndDNEntryMemConfigData.setStatus('current')
if mibBuilder.loadTexts: ex2aacNotFndDNEntryMemConfigData.setDescription("Not Found DN Entries Memory (Configuration Data) is the memory occupied by all configuration data 'Not Found DN' Entries in the cache (in bytes)")
ex2aacNotFndDNEntriesMemUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacNotFndDNEntriesMemUserData.setStatus('current')
if mibBuilder.loadTexts: ex2aacNotFndDNEntriesMemUserData.setDescription("Not Found DN Entries Memory (User Data) is the memory occupied by all user data 'Not Found DN' Entries in the cache (in bytes)")
ex2aacNotFndGUIDEntryConfigData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacNotFndGUIDEntryConfigData.setStatus('current')
if mibBuilder.loadTexts: ex2aacNotFndGUIDEntryConfigData.setDescription("Not Found GUID Entries (Configuration Data) is the total number of configuration data 'Not Found GUID' type entries in the cache.")
ex2aacNotFndGUIDEntriesUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacNotFndGUIDEntriesUserData.setStatus('current')
if mibBuilder.loadTexts: ex2aacNotFndGUIDEntriesUserData.setDescription("Not Found GUID Entries (User Data) is the total number of user data 'Not Found GUID' type entries in the cache.")
ex2aacNotFndGUIDEntryMemConfigDa = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacNotFndGUIDEntryMemConfigDa.setStatus('current')
if mibBuilder.loadTexts: ex2aacNotFndGUIDEntryMemConfigDa.setDescription("Not Found GUID Entries Memory (Configuration Data) is the memory occupied by all configuration data 'Not Found GUID' Entries in the cache (in bytes)")
ex2aacNotFndGUIDEntryMemUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacNotFndGUIDEntryMemUserData.setStatus('current')
if mibBuilder.loadTexts: ex2aacNotFndGUIDEntryMemUserData.setDescription("Not Found GUID Entries Memory (User Data) is the memory occupied by all user data 'Not Found GUID' Entries in the cache (in bytes)")
ex2aacOutstandingAsyncNotifies = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacOutstandingAsyncNotifies.setStatus('current')
if mibBuilder.loadTexts: ex2aacOutstandingAsyncNotifies.setDescription('Outstanding Async Notifies is the number of outstanding ldap notification requests.')
ex2aacOutstandingAsyncReads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacOutstandingAsyncReads.setStatus('current')
if mibBuilder.loadTexts: ex2aacOutstandingAsyncReads.setDescription('Outstanding Async Reads is the number of outstanding ldap read requests.')
ex2aacOutstandingAsyncSearches = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacOutstandingAsyncSearches.setStatus('current')
if mibBuilder.loadTexts: ex2aacOutstandingAsyncSearches.setDescription('Outstanding Async Searches is the number of outstanding ldap search requests.')
ex2aacSearchEntriesConfigData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacSearchEntriesConfigData.setStatus('current')
if mibBuilder.loadTexts: ex2aacSearchEntriesConfigData.setDescription('Search Entries (Configuration Data) is the total number of configuration data search type entries in the cache.')
ex2aacSearchEntriesUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacSearchEntriesUserData.setStatus('current')
if mibBuilder.loadTexts: ex2aacSearchEntriesUserData.setDescription('Search Entries (User Data) is the total number of user data search type entries in the cache.')
ex2aacSearchEntriesMemConfigData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacSearchEntriesMemConfigData.setStatus('current')
if mibBuilder.loadTexts: ex2aacSearchEntriesMemConfigData.setDescription('Search Entries Memory (Configuration Data) is the memory occupied by all configuration data search entries in the cache (in bytes)')
ex2aacSearchEntryMemoryUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacSearchEntryMemoryUserData.setStatus('current')
if mibBuilder.loadTexts: ex2aacSearchEntryMemoryUserData.setDescription('Search Entries Memory (User Data) is the memory occupied by all user data search entries in the cache (in bytes)')
ex2aacTotalEntriesConfigData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacTotalEntriesConfigData.setStatus('current')
if mibBuilder.loadTexts: ex2aacTotalEntriesConfigData.setDescription("Total Entries (Configuration Data) is the total number of configuration data entries in the cache. This includes 'DN', 'Search', 'Not Found DN' and 'Not Found GUID' type entries.")
ex2aacTotalEntriesUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacTotalEntriesUserData.setStatus('current')
if mibBuilder.loadTexts: ex2aacTotalEntriesUserData.setDescription("Total Entries (User Data) is the total number of user data entries in the cache. This includes 'DN', 'Search', 'Not Found DN' and 'Not Found GUID' type entries.")
ex2aacTotalEntriesMemConfigData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacTotalEntriesMemConfigData.setStatus('current')
if mibBuilder.loadTexts: ex2aacTotalEntriesMemConfigData.setDescription('Total Entries Memory (Configuration Data) is the memory occupied by all configuration data entry objects in the cache (in bytes).')
ex2aacTotalEntriesMemoryUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 2, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aacTotalEntriesMemoryUserData.setStatus('current')
if mibBuilder.loadTexts: ex2aacTotalEntriesMemoryUserData.setDescription('Total Entries Memory (User Data) is the memory occupied by all user data entry objects in the cache (in bytes).')
ex2ADAccessDomainControllerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3), )
if mibBuilder.loadTexts: ex2ADAccessDomainControllerTable.setStatus('current')
if mibBuilder.loadTexts: ex2ADAccessDomainControllerTable.setDescription('One instance per Domain Controller: cross-process Domain Controller data.')
ex2ADAccessDomainControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2aadcInstance"))
if mibBuilder.loadTexts: ex2ADAccessDomainControllerEntry.setStatus('current')
if mibBuilder.loadTexts: ex2ADAccessDomainControllerEntry.setDescription("Performance information for one particular instance of 'MSExchange ADAccess Domain Controllers' object.")
ex2aadcInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcInstance.setStatus('current')
if mibBuilder.loadTexts: ex2aadcInstance.setDescription('Instance name.')
ex2aadcBindFailuresPerMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcBindFailuresPerMinute.setStatus('current')
if mibBuilder.loadTexts: ex2aadcBindFailuresPerMinute.setDescription('Bind failures per minute is the number of LDAP bind calls failed during the last minute')
ex2aadcCriticalDataFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcCriticalDataFlag.setStatus('current')
if mibBuilder.loadTexts: ex2aadcCriticalDataFlag.setDescription('Critical Data flag is 1 if the DC contains the Exchange server account, 0 otherwise')
ex2aadcDsGetDcNameElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcDsGetDcNameElapsedTime.setStatus('current')
if mibBuilder.loadTexts: ex2aadcDsGetDcNameElapsedTime.setDescription('DsGetDcName elapsed time is the total time (in ms) spent in DsGetDcName call to the DC')
ex2aadcGCCapableFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcGCCapableFlag.setStatus('current')
if mibBuilder.loadTexts: ex2aadcGCCapableFlag.setDescription('GC capable flag is 1 if the DC is also a GC, 0 otherwise')
ex2aadcIsSynchronizedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcIsSynchronizedFlag.setStatus('current')
if mibBuilder.loadTexts: ex2aadcIsSynchronizedFlag.setDescription('IsSynchronized flag is 1 if the DC is synchronized, 0 otherwise')
ex2aadcKerberosTicketLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcKerberosTicketLifetime.setStatus('current')
if mibBuilder.loadTexts: ex2aadcKerberosTicketLifetime.setDescription('Kerberos ticket lifetime (in seconds) is an average life time of the last 16 connections closed due to Kerberos ticket expiration')
ex2aadcLDAPDisconnectsPerMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcLDAPDisconnectsPerMinute.setStatus('current')
if mibBuilder.loadTexts: ex2aadcLDAPDisconnectsPerMinute.setDescription('LDAP Disconnects per minute is the number of LDAP errors that caused Exchange Active Directory Provider to mark the DC down during the last minute')
ex2aadcLDAPFatalErrorsPerMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcLDAPFatalErrorsPerMinute.setStatus('current')
if mibBuilder.loadTexts: ex2aadcLDAPFatalErrorsPerMinute.setDescription('LDAP Fatal errors per minute is the number of LDAP errors that caused Exchange Active Directory Provider to close the LDAP connection without marking the DC down during the last minute')
ex2aadcLDAPPagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcLDAPPagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2aadcLDAPPagesPerSec.setDescription('LDAP Pages/Sec is the number of additional pages that are retrieved from this DC per second')
ex2aadcLDAPReadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcLDAPReadTime.setStatus('current')
if mibBuilder.loadTexts: ex2aadcLDAPReadTime.setDescription('LDAP Read Time for a given DC is the time (in ms) taken to send an LDAP read request to the specified DC and receive a response')
ex2aadcLDAPReadCallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcLDAPReadCallsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2aadcLDAPReadCallsPerSec.setDescription('LDAP Read calls/Sec is the number of Depth 0 LDAP search calls made by this process per second')
ex2aadcLDAPSearchTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcLDAPSearchTime.setStatus('current')
if mibBuilder.loadTexts: ex2aadcLDAPSearchTime.setDescription('LDAP Search Time is the time (in ms) taken to send an LDAP search request and receive a response')
ex2aadcLDAPSearchCallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcLDAPSearchCallsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2aadcLDAPSearchCallsPerSec.setDescription('LDAP Search calls/Sec is the number of Depth 1 or 2 LDAP Search calls made by this process per second')
ex2aadcLDAPSearchTimedOutPerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcLDAPSearchTimedOutPerMin.setStatus('current')
if mibBuilder.loadTexts: ex2aadcLDAPSearchTimedOutPerMin.setDescription('LDAP Searches timed out per minute is the number of LDAP searches returned LDAP_TIMEOUT during the last minute')
ex2aadcLDAPVLVRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcLDAPVLVRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2aadcLDAPVLVRequestsPerSec.setDescription('LDAP VLV Requests/Sec is the number of Virtual List View requests made to this DC per second. Usually they are used for Addressbook browse functionality in OWA.')
ex2aadcLDAPConnectionLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcLDAPConnectionLifetime.setStatus('current')
if mibBuilder.loadTexts: ex2aadcLDAPConnectionLifetime.setDescription('LDAP connection lifetime (in seconds) is an average life time of the last 16 connections closed (excludes ones closed due to Kerberos ticket expiration)')
ex2aadcLocalSiteFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcLocalSiteFlag.setStatus('current')
if mibBuilder.loadTexts: ex2aadcLocalSiteFlag.setDescription('Local site flag is 1 if the DC belongs to the local site, 0 otherwise')
ex2aadcLongRunningLDAPOperPerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcLongRunningLDAPOperPerMin.setStatus('current')
if mibBuilder.loadTexts: ex2aadcLongRunningLDAPOperPerMin.setDescription('Long running LDAP operations/Min is the number of LDAP operations on this DC that took longer than the specified threshold per minute (default threshold is 15 seconds)')
ex2aadcNetlogonFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcNetlogonFlag.setStatus('current')
if mibBuilder.loadTexts: ex2aadcNetlogonFlag.setDescription('Netlogon flag is 1 when DsGetDcName to the DC succeeds, indicating that NetLogon service is running, 0 otherwise')
ex2aadcNumberOfOutstandRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcNumberOfOutstandRequests.setStatus('current')
if mibBuilder.loadTexts: ex2aadcNumberOfOutstandRequests.setDescription('Number of outstanding requests is the current number of pending LDAP operations to the DC')
ex2aadcOSVersionFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcOSVersionFlag.setStatus('current')
if mibBuilder.loadTexts: ex2aadcOSVersionFlag.setDescription('OS Version flag is 1 when the DC satisfies Exchange Active Directory Provider OS/Service Pack requirements, 0 otherwise')
ex2aadcPDCFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcPDCFlag.setStatus('current')
if mibBuilder.loadTexts: ex2aadcPDCFlag.setDescription('PDC flag is 1if the DC is also a PDC, 0 otherwise')
ex2aadcReachabilityBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcReachabilityBitmask.setStatus('current')
if mibBuilder.loadTexts: ex2aadcReachabilityBitmask.setDescription('Reachability bitmask shows how the DC is reachable by using lowest 3 bits for DC, CDC and GC-used ports.')
ex2aadcSACLRightFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcSACLRightFlag.setStatus('current')
if mibBuilder.loadTexts: ex2aadcSACLRightFlag.setDescription('SACL right flag is 1 if the Exchange server has a SeSecurityPrivilege on the DC, 0 otherwise')
ex2aadcUserSearchesFailPerMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcUserSearchesFailPerMinute.setStatus('current')
if mibBuilder.loadTexts: ex2aadcUserSearchesFailPerMinute.setDescription("User searches failed per minute is the number of Exchange Active Directory Provider client's searches failed during the last minute")
ex2aadcGethostbynameElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 3, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aadcGethostbynameElapsedTime.setStatus('current')
if mibBuilder.loadTexts: ex2aadcGethostbynameElapsedTime.setDescription("gethostbyname elapsed time is the total time (in ms) spent in gethostbyname call trying to find the DC's IP address")
ex2ADAccessGlobalCounters = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 15, 4))
if mibBuilder.loadTexts: ex2ADAccessGlobalCounters.setStatus('current')
if mibBuilder.loadTexts: ex2ADAccessGlobalCounters.setDescription('MSExchange ADAccess Global Counters contain summary information that is not process or DC specific')
ex2aagcDNSQueryDurationTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aagcDNSQueryDurationTime.setStatus('current')
if mibBuilder.loadTexts: ex2aagcDNSQueryDurationTime.setDescription('DNS Query duration time shows how long (in ms) the most recent DNSQuery call took')
ex2aagcInSiteDomainControllers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aagcInSiteDomainControllers.setStatus('current')
if mibBuilder.loadTexts: ex2aagcInSiteDomainControllers.setDescription('In-site Domain Controllers is the number of suitable Domain Controllers in the local site')
ex2aagcInSiteGlobalCatalogs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aagcInSiteGlobalCatalogs.setStatus('current')
if mibBuilder.loadTexts: ex2aagcInSiteGlobalCatalogs.setDescription('In-site Global Catalogs is the number of suitable Global Catalogs in the local site')
ex2aagcOutOfSiteDomainController = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aagcOutOfSiteDomainController.setStatus('current')
if mibBuilder.loadTexts: ex2aagcOutOfSiteDomainController.setDescription('Out-of-site Domain Controllers is the number of suitable Domain Controllers outside the local site')
ex2aagcOutOfSiteGlobalCatalogs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aagcOutOfSiteGlobalCatalogs.setStatus('current')
if mibBuilder.loadTexts: ex2aagcOutOfSiteGlobalCatalogs.setDescription('Out-of-site Global Catalogs is the number of suitable Global Catalogs outside the local site')
ex2aagcTopologyDiscoveryDuraTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aagcTopologyDiscoveryDuraTime.setStatus('current')
if mibBuilder.loadTexts: ex2aagcTopologyDiscoveryDuraTime.setDescription('Topology Discovery duration time shows how long (in msec) the most recent Topology discovery took')
ex2ADAccessProcessesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5), )
if mibBuilder.loadTexts: ex2ADAccessProcessesTable.setStatus('current')
if mibBuilder.loadTexts: ex2ADAccessProcessesTable.setDescription('One instance per client process')
ex2ADAccessProcessesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2aapInstance"))
if mibBuilder.loadTexts: ex2ADAccessProcessesEntry.setStatus('current')
if mibBuilder.loadTexts: ex2ADAccessProcessesEntry.setDescription("Performance information for one particular instance of 'MSExchange ADAccess Processes' object.")
ex2aapInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapInstance.setStatus('current')
if mibBuilder.loadTexts: ex2aapInstance.setDescription('Instance name.')
ex2aapCriticlValidFailuresPerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapCriticlValidFailuresPerMin.setStatus('current')
if mibBuilder.loadTexts: ex2aapCriticlValidFailuresPerMin.setDescription('Number of critical validation failures (that cause DataValidationException to be thrown) per minute')
ex2aapIgnorValidatFailuresPerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapIgnorValidatFailuresPerMin.setStatus('current')
if mibBuilder.loadTexts: ex2aapIgnorValidatFailuresPerMin.setDescription('Number of non-critical validation failures that cause an object to be removed from the result set per minute')
ex2aapLDAPNotFndConfigRdCallSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapLDAPNotFndConfigRdCallSec.setStatus('current')
if mibBuilder.loadTexts: ex2aapLDAPNotFndConfigRdCallSec.setDescription("LDAP Not Found configuration read calls/Sec is the number of Depth 0 LDAP search calls made by this process that failed with 'Not found' per second")
ex2aapLDAPPagesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapLDAPPagesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2aapLDAPPagesPerSec.setDescription('LDAP Pages/Sec is the number of additional pages that are retrieved by this process per second')
ex2aapLDAPReadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapLDAPReadTime.setStatus('current')
if mibBuilder.loadTexts: ex2aapLDAPReadTime.setDescription('LDAP Read Time is the time (in ms) taken to send an LDAP read request and receive a response')
ex2aapLDAPReadCallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapLDAPReadCallsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2aapLDAPReadCallsPerSec.setDescription('LDAP Read calls/Sec is the number of Depth 0 LDAP search calls made by this process per second')
ex2aapLDAPSearchTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapLDAPSearchTime.setStatus('current')
if mibBuilder.loadTexts: ex2aapLDAPSearchTime.setDescription('LDAP Search Time is the time (in ms) taken to send an LDAP search request and receive a response')
ex2aapLDAPSearchCallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapLDAPSearchCallsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2aapLDAPSearchCallsPerSec.setDescription('LDAP Search calls/Sec is the number of Depth 1 or 2 LDAP Search calls made by this process per second')
ex2aapLDAPTimeoutErrorsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapLDAPTimeoutErrorsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2aapLDAPTimeoutErrorsPerSec.setDescription('LDAP Timeout errors/Sec is the number of LDAP operations made by this process failed because of exceeded Timeout per second')
ex2aapLDAPVLVRequestsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapLDAPVLVRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2aapLDAPVLVRequestsPerSec.setDescription('LDAP VLV requests/Sec is the number of Virtual List View requests made by this process per second. Usually they are used for Addressbook browse functionality in OWA.')
ex2aapLDAPWriteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapLDAPWriteTime.setStatus('current')
if mibBuilder.loadTexts: ex2aapLDAPWriteTime.setDescription('LDAP Write Time is the time (in ms) taken to send an LDAP Add/Modify/Delete request and receive a response')
ex2aapLDAPWriteCallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapLDAPWriteCallsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2aapLDAPWriteCallsPerSec.setDescription('LDAP Write calls/Sec is the number of LDAP Add/Modify/Delete calls made by this process per second')
ex2aapLDAPNotificaReportedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapLDAPNotificaReportedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2aapLDAPNotificaReportedPerSec.setDescription('LDAP notifications Reported/Sec is the number of LDAP notification results reported by this process to the end users per second')
ex2aapLDAPNotificaReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapLDAPNotificaReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2aapLDAPNotificaReceivedPerSec.setDescription('LDAP notifications received/Sec is the number of LDAP notification results received by this process per second (does not necessarily equal to the number of notifications reported to the end users)')
ex2aapLongRunningLDAPOperaPerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapLongRunningLDAPOperaPerMin.setStatus('current')
if mibBuilder.loadTexts: ex2aapLongRunningLDAPOperaPerMin.setDescription('Long running LDAP operations/Min is the number of LDAP operations made by this process that took longer than the specified threshold per minute (default threshold is 15 seconds)')
ex2aapNonCriticalValidFailPerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapNonCriticalValidFailPerMin.setStatus('current')
if mibBuilder.loadTexts: ex2aapNonCriticalValidFailPerMin.setDescription('Number of non-critical validation failures (that do not cause exceptions) per minute')
ex2aapNumberOfOutstandingRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapNumberOfOutstandingRequest.setStatus('current')
if mibBuilder.loadTexts: ex2aapNumberOfOutstandingRequest.setDescription('Number of outstanding requests is the current number of pending LDAP searches in this process')
ex2aapOpenConnectionToDomainCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapOpenConnectionToDomainCtrl.setStatus('current')
if mibBuilder.loadTexts: ex2aapOpenConnectionToDomainCtrl.setDescription('Open connections to Domain Controllers in this process')
ex2aapOpenConnectionsToGlobalCat = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapOpenConnectionsToGlobalCat.setStatus('current')
if mibBuilder.loadTexts: ex2aapOpenConnectionsToGlobalCat.setDescription('Open connections to Global Catalogs in this process')
ex2aapProcessID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapProcessID.setStatus('current')
if mibBuilder.loadTexts: ex2aapProcessID.setDescription('The system Process ID of this process instance')
ex2aapTopologyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 5, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aapTopologyVersion.setStatus('current')
if mibBuilder.loadTexts: ex2aapTopologyVersion.setDescription('Current version of the Active Directory topology data used by this process.')
ex2ActiveSync = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6))
if mibBuilder.loadTexts: ex2ActiveSync.setStatus('current')
if mibBuilder.loadTexts: ex2ActiveSync.setDescription('AirSync Counters Help')
ex2asAveragePingTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asAveragePingTime.setStatus('current')
if mibBuilder.loadTexts: ex2asAveragePingTime.setDescription('Average Ping Time is the average time elapsed, in milliseconds, waiting for Ping and Hanging Sync requests to complete.')
ex2asAverageRequestTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asAverageRequestTime.setStatus('current')
if mibBuilder.loadTexts: ex2asAverageRequestTime.setDescription('Average Request Time is the average time elapsed, in milliseconds, waiting for a request to complete.')
ex2asBadItemReportGeneratedTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asBadItemReportGeneratedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asBadItemReportGeneratedTotal.setDescription('Bad Item Reports Generated Total is the total number of bad item reports that were generated since the service was started. This occurs when items fail to convert from the server format to the client format.')
ex2asBusyThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asBusyThreads.setStatus('current')
if mibBuilder.loadTexts: ex2asBusyThreads.setDescription('Busy Threads is the number of worker threads that are busy processing requests.')
ex2asConflictConcurrentSyncTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asConflictConcurrentSyncTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asConflictConcurrentSyncTotal.setDescription('Conflicting Concurrent Sync Total is the total number of Sync commands which a concurrent sync completed first for the same folder.')
ex2asConflictConcurrentSyncPrSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asConflictConcurrentSyncPrSec.setStatus('current')
if mibBuilder.loadTexts: ex2asConflictConcurrentSyncPrSec.setDescription('Conflicting Concurrent Sync/sec is the number of Sync commands per second which a concurrent sync completed first for the same folder.')
ex2asCreateCollectionCommandsSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asCreateCollectionCommandsSec.setStatus('current')
if mibBuilder.loadTexts: ex2asCreateCollectionCommandsSec.setDescription('Create Collection Commands/sec is the number of CreateCollections commands that are processed each second. Clients that are running earlier versions of the ActiveSync protocol use this command to create folders.')
ex2asCreateCollectionTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asCreateCollectionTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asCreateCollectionTotal.setDescription('Create Collection Total is the total number of CreateCollection requests that have been processed since the service was started.')
ex2asCurrentRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asCurrentRequests.setStatus('current')
if mibBuilder.loadTexts: ex2asCurrentRequests.setDescription('Current Requests is the number of HTTP requests received from ASP.NET.')
ex2asDeleteCollectionCommandsSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asDeleteCollectionCommandsSec.setStatus('current')
if mibBuilder.loadTexts: ex2asDeleteCollectionCommandsSec.setDescription('Delete Collection Commands/sec is the number of DeleteCollection commands that are processed each second. Clients that are running earlier versions of the ActiveSync protocol use this command to delete folders.')
ex2asDeleteCollectionTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asDeleteCollectionTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asDeleteCollectionTotal.setDescription('Delete Collection Total is the total number of DeleteCollections commands that have been processed since the service was started. Clients that are running earlier versions of the Exchange ActiveSync protocol use this command to delete folders.')
ex2asDocuLibraryFetchCommandsSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asDocuLibraryFetchCommandsSec.setStatus('current')
if mibBuilder.loadTexts: ex2asDocuLibraryFetchCommandsSec.setDescription('Document Library Fetches/sec is the number of DocumentLibrary fetches that are processed each second. This command is used by clients to download Windows SharePoint Services or Windows files shares files.')
ex2asDocumentLibraryFetchTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asDocumentLibraryFetchTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asDocumentLibraryFetchTotal.setDescription('Document Library Fetch Total is the total number of DocumentLibrary Fetch requests that have been processed since the service was started.')
ex2asDocumentLibrarySearchTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asDocumentLibrarySearchTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asDocumentLibrarySearchTotal.setDescription('Document Library Search Total is the total number of DocumentLibrary Search requests that have been processed since the service was started.')
ex2asDocumentLibrarySearchPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asDocumentLibrarySearchPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asDocumentLibrarySearchPerSec.setDescription('Document Library Searches Per Second is the number of times per second that clients browse Windows SharePoint Services or Windows file shares items.')
ex2asEmptyFolderContentsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asEmptyFolderContentsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asEmptyFolderContentsTotal.setDescription('Empty Folder Contents Total is the total number of Empty Folder Contents requests that have been processed since the service was started.')
ex2asFailedItemConversionTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asFailedItemConversionTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asFailedItemConversionTotal.setDescription('Failed Item Conversion Total is the total number of items that failed to convert due to modifications made by the server since the service was started.')
ex2asFolderCreateCommandsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asFolderCreateCommandsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asFolderCreateCommandsPerSec.setDescription('Folder Create Commands/sec is the number of FolderCreate commands that are processed each second. Clients use this command to create folders.')
ex2asFolderCreateTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asFolderCreateTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asFolderCreateTotal.setDescription('Folder Create Total is the total number of FolderCreate requests that have been processed since the service was started.')
ex2asFolderDeleteCommandsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asFolderDeleteCommandsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asFolderDeleteCommandsPerSec.setDescription('Folder Delete Commands/sec is the number of FolderDelete commands that are processed each second. Clients use this command to delete folders.')
ex2asFolderDeleteTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asFolderDeleteTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asFolderDeleteTotal.setDescription('Folder Delete Totals is the total number of FolderDelete commands that have been processed since the service was started. Clients use this command to delete folders.')
ex2asFolderSyncCommandsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asFolderSyncCommandsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asFolderSyncCommandsPerSec.setDescription('Folder Sync Commands/sec is the number of FolderSync commands that are processed each second. Clients use this command to synchronize the folder hierarchy.')
ex2asFolderSyncTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asFolderSyncTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asFolderSyncTotal.setDescription('Folder Sync Total is the total number of FolderSync requests that have been processed since the service was started.')
ex2asFolderUpdateCommandsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asFolderUpdateCommandsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asFolderUpdateCommandsPerSec.setDescription('Folder Update Commands/sec is the number of FolderUpdate commands that are processed per second. Clients use this command to rename or move folders.')
ex2asFolderUpdateTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asFolderUpdateTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asFolderUpdateTotal.setDescription('Folder Update Total is the total number of FolderUpdate requests that have been processed since the service was started.')
ex2asGALSearchTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asGALSearchTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asGALSearchTotal.setDescription('GAL Search Total is the total number of GAL Search requests that have been processed since the service was started.')
ex2asGALSearchesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asGALSearchesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asGALSearchesPerSec.setDescription('GAL Searches/sec is the number of times that the global address list is searched per second.')
ex2asGetAttachmentCommandsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asGetAttachmentCommandsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asGetAttachmentCommandsPerSec.setDescription('Get Attachment Commands/sec is the number of GetAttachment commands that are processed each second. Clients that are running earlier versions of the Exchange ActiveSync protocol use this command to download e-mail attachments.')
ex2asGetAttachmentTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asGetAttachmentTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asGetAttachmentTotal.setDescription('Get Attachment Total is the total number of GetAttachments requests that have been processed since the service was started.')
ex2asGetHierarchyCommandsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asGetHierarchyCommandsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asGetHierarchyCommandsPerSec.setDescription('Get Hierarchy Commands/sec is the number of GetHierarchy commands that are processed each second. Clients that are running earlier versions of the ActiveSync protocol use this command to synchronize the folder hierarchy.')
ex2asGetHierarchyTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asGetHierarchyTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asGetHierarchyTotal.setDescription('Get Hierarchy Total is the total number of GetHierarchy commands that have been received since the service was started.')
ex2asGetItemEstimatCommandPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asGetItemEstimatCommandPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asGetItemEstimatCommandPerSec.setDescription('Get Item Estimate Commands/sec is the number of GetItemEstimate commands that are processed each second. The GetItemEstimate command is used by clients to display synchronization progress.')
ex2asGetItemEstimateTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asGetItemEstimateTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asGetItemEstimateTotal.setDescription('Get Item Estimate Total is the total number of GetItemEstimate requests that have been processed since the service was started.')
ex2asHeartbeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asHeartbeatInterval.setStatus('current')
if mibBuilder.loadTexts: ex2asHeartbeatInterval.setDescription('Heartbeat Interval is the heartbeat interval, in seconds, specified by the client that connected most recently.')
ex2asIdleThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asIdleThreads.setStatus('current')
if mibBuilder.loadTexts: ex2asIdleThreads.setDescription('Idle Threads is the number of worker threads that are idle.')
ex2asIncomingProxyRequestsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asIncomingProxyRequestsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asIncomingProxyRequestsTotal.setDescription('Incoming Proxy Requests Total is the total number of HTTP requests received from ASP.NET and proxied to another ActiveSync server since the service was restarted.')
ex2asItemOperationsCommandPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asItemOperationsCommandPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asItemOperationsCommandPerSec.setDescription('Item Operations Commands/sec is the number of ItemOperations commands that are processed each second.')
ex2asItemOperationsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asItemOperationsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asItemOperationsTotal.setDescription('Item Operations Total is the total number of ItemOperations requests that have been processed since the service was started.')
ex2asMailboxAttchFetchCommandSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asMailboxAttchFetchCommandSec.setStatus('current')
if mibBuilder.loadTexts: ex2asMailboxAttchFetchCommandSec.setDescription('Mailbox Attachment Fetch Commands/sec is the number of Mailbox Attachment Fetches that are processed each second.')
ex2asMailboxAttachmentFetchTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asMailboxAttachmentFetchTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asMailboxAttachmentFetchTotal.setDescription('Mailbox Attachment Fetch Total is the total number of Mailbox Attachment Fetch commands that have been processed since the service was started. This command is used by clients to download e-mail attachments.')
ex2asMailboxItemFetchCommandsSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asMailboxItemFetchCommandsSec.setStatus('current')
if mibBuilder.loadTexts: ex2asMailboxItemFetchCommandsSec.setDescription('Number of Mailbox Item Fetches/sec is the number of times that clients download whole Exchange items each second.')
ex2asMailboxItemFetchTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asMailboxItemFetchTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asMailboxItemFetchTotal.setDescription('Mailbox Item Fetch Total is the total number of mailbox item fetch requests that have been processed since the service was started.')
ex2asMailboxSearchTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asMailboxSearchTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asMailboxSearchTotal.setDescription('Mailbox Search Total is the total number of Mailbox Search requests that have been processed since the service was started.')
ex2asMailboxSearchesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asMailboxSearchesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asMailboxSearchesPerSec.setDescription('Mailbox Searches/sec is the number of times that mailboxes are searched per second.')
ex2asMeetingResponsCommandPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asMeetingResponsCommandPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asMeetingResponsCommandPerSec.setDescription('Meeting Response Commands/sec is the number of MeetingResponse commands that are processed per second. The client uses this command to designate a meeting as Accepted, Declined, or Tentative.')
ex2asMeetingResponseTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asMeetingResponseTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asMeetingResponseTotal.setDescription('Meeting Response Total is the total number of MeetingResponse commands that have been received since the service was started.')
ex2asMoveCollectionCommandPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asMoveCollectionCommandPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asMoveCollectionCommandPerSec.setDescription('Move Collection Commands/sec is the number of MoveCollection commands that are processed each second. Clients that are running earlier versions of the Exchange ActiveSync protocol use this command to move folders.')
ex2asMoveCollectionTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asMoveCollectionTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asMoveCollectionTotal.setDescription('Move Collection Total is the total number of MoveCollections requests that have been processed since the service was started.')
ex2asMoveItemsCommandsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asMoveItemsCommandsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asMoveItemsCommandsPerSec.setDescription('Move Items Commands/sec is the number of MoveItems commands that are processed each second. Clients use this command to move Exchange items between folders.')
ex2asMoveItemsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asMoveItemsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asMoveItemsTotal.setDescription('Move Items Total is the total number of MoveItems commands that have been received since the service was started.')
ex2asNumEmptyFoldrContentProcSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asNumEmptyFoldrContentProcSec.setStatus('current')
if mibBuilder.loadTexts: ex2asNumEmptyFoldrContentProcSec.setDescription('Number of Empty Folder Contents Processed/sec is the number of number of Empty Folder commands that are processed each second. This command is used by clients to delete all items in a folder.')
ex2asOptionsCommandsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asOptionsCommandsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asOptionsCommandsPerSec.setDescription('Options Commands/sec is the number of Options commands that are processed each second. Clients can use the Options command to discover the ActiveSync protocol version that is supported by the server.')
ex2asOptionsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asOptionsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asOptionsTotal.setDescription('Options Total is the total number of options requests that have been processed since the service was started.')
ex2asOutgoingProxyRequestsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asOutgoingProxyRequestsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asOutgoingProxyRequestsTotal.setDescription('Outgoing Proxy Requests Total is the total number of HTTP requests received by ASP.NET from another ActiveSync server since the service was restarted.')
ex2asPID = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asPID.setStatus('current')
if mibBuilder.loadTexts: ex2asPID.setDescription('PID the process ID that is hosting ActiveSync.')
ex2asPingCommandsDroppedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asPingCommandsDroppedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asPingCommandsDroppedPerSec.setDescription('Ping Commands Dropped/sec is the number of Ping commands per second whose connection to the client was dropped before a response could be issued.')
ex2asPingCommandsPending = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asPingCommandsPending.setStatus('current')
if mibBuilder.loadTexts: ex2asPingCommandsPending.setDescription('Ping Commands Pending is the number of Ping commands that are currently pending on the server.')
ex2asPingCommandsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asPingCommandsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asPingCommandsPerSec.setDescription('Ping Commands/sec is the number of Ping commands that are processed by the server each second. This command is used to send clients notifications about new e-mail messages or changed items.')
ex2asPingDroppedTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asPingDroppedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asPingDroppedTotal.setDescription('Ping Dropped Total is the total number of Ping commands whose connection to the client was dropped before a response could be issued.')
ex2asPingTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asPingTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asPingTotal.setDescription('Ping Total is the total number of Ping commands that have been processed since the service was started.')
ex2asProvisionCommandsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asProvisionCommandsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asProvisionCommandsPerSec.setDescription('Provision Commands/sec is the number of Provision commands that are processed each second. The server uses this command to enforce mobile policies.')
ex2asProvisionTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asProvisionTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asProvisionTotal.setDescription('Provision Total is the total number of Provision requests that have been processed since the service was started.')
ex2asProxyLogonCommandsSentTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asProxyLogonCommandsSentTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asProxyLogonCommandsSentTotal.setDescription("Proxy Logon Commands Sent Total is the total number of proxy logon commands that were sent from this server to another server. This can happen when a user's mailbox is located on an Exchange 2003 server. It can also happen when the Exchange 2007 Client Access server in the same Active Directory site as the user's Mailbox server is not Internet facing.")
ex2asProxyLogonReceivedTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asProxyLogonReceivedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asProxyLogonReceivedTotal.setDescription('Proxy Logon Received Total is the number of ProxyLogon commands that have been received by this server from another server since the service was started.')
ex2asRecoverySyncCommandsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asRecoverySyncCommandsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asRecoverySyncCommandsPerSec.setDescription('Recovery Sync Commands/sec is the number of Recovery Sync requests that are processed each second. The recovery sync process happens to compensate for a failed synchronization with the client.')
ex2asRecoverySyncTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asRecoverySyncTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asRecoverySyncTotal.setDescription('Recovery Sync Total is the total number of Recovery Sync requests that have been processed since the service was started.')
ex2asRequestsQueued = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asRequestsQueued.setStatus('current')
if mibBuilder.loadTexts: ex2asRequestsQueued.setDescription('Requests Queued is the number of HTTP requests that are waiting to be assigned to a thread.')
ex2asRequestsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asRequestsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asRequestsTotal.setDescription('Requests Total is the total number of HTTP requests received from ASP.NET since the service was restarted.')
ex2asRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asRequestsPerSec.setDescription('Requests/sec is the number of HTTP requests that are received from the client via ASP.NET per second.')
ex2asSearchCommandsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asSearchCommandsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asSearchCommandsPerSec.setDescription('Search Commands/sec is the number of Search commands that are processed each second. This counter represents the total number of global address list, document library and mailbox searches that are issued by the client.')
ex2asSearchTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asSearchTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asSearchTotal.setDescription('Search Total is the total number of Search requests that have been processed since the service was started.')
ex2asSendMailCommandsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asSendMailCommandsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asSendMailCommandsPerSec.setDescription('Send Mail Commands/sec is the number of SendMail commands that are processed per second.')
ex2asSendMailTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asSendMailTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asSendMailTotal.setDescription('Send Mail Total is the total number of SendMail commands that are processed.')
ex2asSettingsCommandsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asSettingsCommandsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asSettingsCommandsPerSec.setDescription('Settings Commands/sec is the number of Settings commands that are processed each second.')
ex2asSettingsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asSettingsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asSettingsTotal.setDescription('Settings Total is the total number of Settings commands that have been received since the service was started.')
ex2asSmartForwardCommandsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asSmartForwardCommandsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asSmartForwardCommandsPerSec.setDescription('Smart Forward Commands/sec is the number of SmartForward commands that are processed each second. Clients use this command to forward items without having to upload them to the server.')
ex2asSmartForwardTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asSmartForwardTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asSmartForwardTotal.setDescription('Smart Forward Total is the total number of SmartForward requests that have been processed since the service was started.')
ex2asSmartReplyCommandsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 78), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asSmartReplyCommandsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asSmartReplyCommandsPerSec.setDescription('Smart Reply Commands/sec is the number of SmartReply commands that are processed each second. Clients use this command to reply with items without having to upload them to the server.')
ex2asSmartReplyTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 79), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asSmartReplyTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asSmartReplyTotal.setDescription('Smart Reply Total is the total number of SmartReply requests that have been processed since the service was started.')
ex2asSyncCommandsDroppedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 80), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asSyncCommandsDroppedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asSyncCommandsDroppedPerSec.setDescription('Sync Commands Dropped/sec is the number of Sync commands per second whose connection to the client was dropped before a response could be issued.')
ex2asSyncCommandsPending = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 81), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asSyncCommandsPending.setStatus('current')
if mibBuilder.loadTexts: ex2asSyncCommandsPending.setDescription('Sync Commands Pending is the number of Sync commands that are currently pending on the server.')
ex2asSyncCommandsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 82), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asSyncCommandsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2asSyncCommandsPerSec.setDescription('Sync Commands/sec is the number of Sync commands that are processed per second. Clients use this command to synchronize items within a folder.')
ex2asSyncDroppedTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 83), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asSyncDroppedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asSyncDroppedTotal.setDescription('Sync Dropped Total is the total number of Sync commands whose connection to the client was dropped before a response could be issued.')
ex2asSyncStateKBytesLeftCompress = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 84), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asSyncStateKBytesLeftCompress.setStatus('current')
if mibBuilder.loadTexts: ex2asSyncStateKBytesLeftCompress.setDescription('Sync State KBytes Left Compressed is the total amount of sync state data that was left compressed since the service was started. This value contributes to the total amount of memory consumed.')
ex2asSyncStateKBytesTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 85), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asSyncStateKBytesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asSyncStateKBytesTotal.setDescription('Sync State KBytes Total is the total amount of sync state data that was loaded since the service was started. This value contributes to the total amount of memory that is being consumed.')
ex2asSyncTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 86), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asSyncTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asSyncTotal.setDescription('Sync Total is the total number of Sync requests that have been processed since the service was started.')
ex2asWrongCASProxyRequestsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 6, 87), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2asWrongCASProxyRequestsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2asWrongCASProxyRequestsTotal.setDescription("Wrong CAS Proxy Requests Total tracks the total number of mobile clients that are misconfigured. These clients point to a Client Access server URL that is not in the same Active Directory site as the user's mailbox. Users must make sure that their devices are configured with the URL that points directly to the Client Access server that is located in the same Active Directory site as their Mailbox server.")
ex2AssistantsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7), )
if mibBuilder.loadTexts: ex2AssistantsTable.setStatus('current')
if mibBuilder.loadTexts: ex2AssistantsTable.setDescription('Performance counters for Assistants')
ex2AssistantsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2aInstance"))
if mibBuilder.loadTexts: ex2AssistantsEntry.setStatus('current')
if mibBuilder.loadTexts: ex2AssistantsEntry.setDescription("Performance information for one particular instance of 'MSExchange Assistants' object.")
ex2aInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aInstance.setStatus('current')
if mibBuilder.loadTexts: ex2aInstance.setDescription('Instance name.')
ex2aAvgEventProcessTimeInSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aAvgEventProcessTimeInSeconds.setStatus('current')
if mibBuilder.loadTexts: ex2aAvgEventProcessTimeInSeconds.setDescription('Average processing time of the events chosen as interesting.')
ex2aAvgEventQueueTimeInSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aAvgEventQueueTimeInSeconds.setStatus('current')
if mibBuilder.loadTexts: ex2aAvgEventQueueTimeInSeconds.setDescription('Average time (in seconds) that the event lives in the dispatcher queue.')
ex2aAvgMailboxProcessTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aAvgMailboxProcessTimeSeconds.setStatus('current')
if mibBuilder.loadTexts: ex2aAvgMailboxProcessTimeSeconds.setDescription('Average Mailbox Processing Time In seconds is the average processing time of mailboxes for time-based assistants/sec.')
ex2aAvgQueueSizeEventDispatchers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aAvgQueueSizeEventDispatchers.setStatus('current')
if mibBuilder.loadTexts: ex2aAvgQueueSizeEventDispatchers.setDescription('Average queue size of event dispatchers.')
ex2aEventsPolled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aEventsPolled.setStatus('current')
if mibBuilder.loadTexts: ex2aEventsPolled.setDescription('The number of events polled by the assistants.')
ex2aEventsPolledPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aEventsPolledPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2aEventsPolledPerSec.setDescription('The number of events polled per second.')
ex2aEventsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aEventsProcessed.setStatus('current')
if mibBuilder.loadTexts: ex2aEventsProcessed.setDescription('Number of events processed by the assistants.')
ex2aEventsInQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aEventsInQueue.setStatus('current')
if mibBuilder.loadTexts: ex2aEventsInQueue.setDescription('Events in queue is the current number of events in the in-memory queue waiting to be processed by the assistants.')
ex2aHighestEventCounterPolled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aHighestEventCounterPolled.setStatus('current')
if mibBuilder.loadTexts: ex2aHighestEventCounterPolled.setDescription('Highest Event Counter Polled is the highest event counter polled from the database.')
ex2aMailboxesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aMailboxesProcessed.setStatus('current')
if mibBuilder.loadTexts: ex2aMailboxesProcessed.setDescription('The number of mailboxes processed by time-based assistants.')
ex2aMailboxesProcessedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aMailboxesProcessedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2aMailboxesProcessedPerSec.setDescription('Mailboxes processed/sec is the rate of mailboxes processed by time-based assistants per second.')
ex2aNumberOfEventDispatchers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aNumberOfEventDispatchers.setStatus('current')
if mibBuilder.loadTexts: ex2aNumberOfEventDispatchers.setDescription('The current number of event dispatchers in memory.')
ex2aNumberOfFailEventDispatchers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aNumberOfFailEventDispatchers.setStatus('current')
if mibBuilder.loadTexts: ex2aNumberOfFailEventDispatchers.setDescription('The number of event dispatchers that are in failed state.')
ex2aNumberOfHandledExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aNumberOfHandledExceptions.setStatus('current')
if mibBuilder.loadTexts: ex2aNumberOfHandledExceptions.setDescription('The number of CLR exceptions handled by the code.')
ex2aNumberOfThreadsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aNumberOfThreadsUsed.setStatus('current')
if mibBuilder.loadTexts: ex2aNumberOfThreadsUsed.setDescription('Number of Threads used from the CLR thread pool.')
ex2aNumberEventsProcessPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aNumberEventsProcessPerSecond.setStatus('current')
if mibBuilder.loadTexts: ex2aNumberEventsProcessPerSecond.setDescription('The number of events processed per second.')
ex2aPercentageFailEventDispatchr = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aPercentageFailEventDispatchr.setStatus('current')
if mibBuilder.loadTexts: ex2aPercentageFailEventDispatchr.setDescription('Percentage of Failed Event Dispatchers is the percentage of Event Dispatchers that are in failure mode.')
ex2aPercentageOfInterestingEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aPercentageOfInterestingEvent.setStatus('current')
if mibBuilder.loadTexts: ex2aPercentageOfInterestingEvent.setDescription('Percentage of Interesting Events is the percentage of events generated on the database that are processed by the assistants.')
ex2aPollingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 7, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aPollingDelay.setStatus('current')
if mibBuilder.loadTexts: ex2aPollingDelay.setDescription('Polling Delay is the latency between when the most recent Mapi Event was polled and when the event was created in seconds.')
ex2AvailabilityService = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 15, 8))
if mibBuilder.loadTexts: ex2AvailabilityService.setStatus('current')
if mibBuilder.loadTexts: ex2AvailabilityService.setDescription('Performance counters for the Availability service')
ex2aserAvailabilityRequestsSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aserAvailabilityRequestsSec.setStatus('current')
if mibBuilder.loadTexts: ex2aserAvailabilityRequestsSec.setDescription('Availability Requests per second is the number of requests serviced per second. The request can be only for free busy or include suggestions. One request may contain multiple mailboxes.')
ex2aserAvgNumMailboxProcessReqst = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 8, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aserAvgNumMailboxProcessReqst.setStatus('current')
if mibBuilder.loadTexts: ex2aserAvgNumMailboxProcessReqst.setDescription('Average Number of Mailboxes Processed per Request is the average number of mailboxes processed per request. Some of the mailboxes may have errors during processing.')
ex2aserAvgTimProCrsFrstFreBsyReq = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 8, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aserAvgTimProCrsFrstFreBsyReq.setStatus('current')
if mibBuilder.loadTexts: ex2aserAvgTimProCrsFrstFreBsyReq.setDescription('Average Time to Process a Cross-Forest Free Busy Request is the average time to process a cross-forest free busy request in seconds. One request may contain multiple mailboxes. Free busy responses do not have meeting suggestions.')
ex2aserAvgTimProCrsSiteFreBsyReq = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 8, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aserAvgTimProCrsSiteFreBsyReq.setStatus('current')
if mibBuilder.loadTexts: ex2aserAvgTimProCrsSiteFreBsyReq.setDescription('Average Time to Process a Cross-Site Free Busy Request is the average time to process a cross-site free busy request in seconds. One request may contain multiple mailboxes. Free busy responses do not have meeting suggestions.')
ex2aserAvgTimeProcessFreeBusyReq = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 8, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aserAvgTimeProcessFreeBusyReq.setStatus('current')
if mibBuilder.loadTexts: ex2aserAvgTimeProcessFreeBusyReq.setDescription('Average Time to Process a Free Busy Request is the average time to process a free busy request in seconds. One request may contain multiple mailboxes. Free busy responses do not have meeting suggestions.')
ex2aserAvgTimeProcessMtgSuggRequ = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 8, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aserAvgTimeProcessMtgSuggRequ.setStatus('current')
if mibBuilder.loadTexts: ex2aserAvgTimeProcessMtgSuggRequ.setDescription('Average Time to Process a Meeting Suggestions Request is the average time to process a meeting suggestions request in seconds. One request may contain multiple mailboxes. This time includes time for fetching free busy.')
ex2aserCrsFrstCalendarFailureSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 8, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aserCrsFrstCalendarFailureSec.setStatus('current')
if mibBuilder.loadTexts: ex2aserCrsFrstCalendarFailureSec.setDescription('Cross-Forest Calendar Failures per second is the number of cross-forest mailbox queries that failed per second. These mailboxes require proxying to another instance of the service in a different forest.')
ex2aserCrsFrstCalendarQueriesSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 8, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aserCrsFrstCalendarQueriesSec.setStatus('current')
if mibBuilder.loadTexts: ex2aserCrsFrstCalendarQueriesSec.setDescription('Cross-Forest Calendar Queries per second is the number of cross-forest mailboxes queried per second. These mailboxes require proxying to another instance of the service in a different forest.')
ex2aserCrsSiteCalendarFailureSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 8, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aserCrsSiteCalendarFailureSec.setStatus('current')
if mibBuilder.loadTexts: ex2aserCrsSiteCalendarFailureSec.setDescription('Cross-Site Calendar Failures per second is the number of cross-site mailbox queries failed per second. These mailboxes require proxying to another instance of the service in a different site.')
ex2aserCrsSiteCalendarQueriesSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 8, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aserCrsSiteCalendarQueriesSec.setStatus('current')
if mibBuilder.loadTexts: ex2aserCrsSiteCalendarQueriesSec.setDescription('Cross-Site Calendar Queries per second is the number of cross-site mailboxes queried per second. These mailboxes require proxying to another instance of the service in a different site.')
ex2aserForeignConnectorQuerySec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 8, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aserForeignConnectorQuerySec.setStatus('current')
if mibBuilder.loadTexts: ex2aserForeignConnectorQuerySec.setDescription('Foreign Connector Queries per second is the number of mailboxes for which free busy information is requested from a foreign connector per second.')
ex2aserForeignConnectReqFailRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 8, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aserForeignConnectReqFailRate.setStatus('current')
if mibBuilder.loadTexts: ex2aserForeignConnectReqFailRate.setDescription('Foreign Connector Request Failure Rate is the number of Foreign connector free busy requests failed per second.')
ex2aserIntraSiteCalendarFailSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 8, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aserIntraSiteCalendarFailSec.setStatus('current')
if mibBuilder.loadTexts: ex2aserIntraSiteCalendarFailSec.setDescription('Intra-Site Calendar Failures per second is the number of intra-site mailbox queries failed per second. These mailboxes do not require proxying to another instance of the service.')
ex2aserIntraSiteCalendarQuerySec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 8, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aserIntraSiteCalendarQuerySec.setStatus('current')
if mibBuilder.loadTexts: ex2aserIntraSiteCalendarQuerySec.setDescription('Intra-Site Calendar Queries per second is the number of intra-site mailboxes queried per second. These mailboxes do not require proxying to another instance of the service.')
ex2aserPublicFolderQueriesSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 8, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aserPublicFolderQueriesSec.setStatus('current')
if mibBuilder.loadTexts: ex2aserPublicFolderQueriesSec.setDescription('Public Folder Queries per second is the number of mailboxes for which free busy information is requested from the public folders per second.')
ex2aserPublicFolderReqFailSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 8, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aserPublicFolderReqFailSec.setStatus('current')
if mibBuilder.loadTexts: ex2aserPublicFolderReqFailSec.setDescription('Public Folder Request Failures per second is the number of public folder free busy requests failed per second.')
ex2aserSuggestionsRequestsSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 8, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2aserSuggestionsRequestsSec.setStatus('current')
if mibBuilder.loadTexts: ex2aserSuggestionsRequestsSec.setDescription('Suggestions Requests per second is the number of requests per second, specifically for meeting suggestions. The request can be only for free busy or include suggestions. One request may contain multiple mailboxes.')
ex2CalendarAttendant = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 15, 9))
if mibBuilder.loadTexts: ex2CalendarAttendant.setStatus('current')
if mibBuilder.loadTexts: ex2CalendarAttendant.setDescription('Performance counters for the Calendar Attendant')
ex2caAvgCalendarAttendntProcTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 9, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2caAvgCalendarAttendntProcTime.setStatus('current')
if mibBuilder.loadTexts: ex2caAvgCalendarAttendntProcTime.setDescription('Average Calendar Attendant Processing Time is the average time to process an event in the Calendar Attendant.')
ex2caLastCalendarAttendtProcTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 9, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2caLastCalendarAttendtProcTime.setStatus('current')
if mibBuilder.loadTexts: ex2caLastCalendarAttendtProcTime.setDescription('Last Calendar Attendant Processing Time is the latest time to to process an event in the Calendar Attendant.')
ex2caLostRaces = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 9, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2caLostRaces.setStatus('current')
if mibBuilder.loadTexts: ex2caLostRaces.setDescription('Lost Races is the total number of times the Calendar Attendant processed items after Outlook already reached it.')
ex2caMeetingCancellations = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 9, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2caMeetingCancellations.setStatus('current')
if mibBuilder.loadTexts: ex2caMeetingCancellations.setDescription('Meeting Cancellations is the total number of meeting cancellations processed by Calendar Attendant.')
ex2caMeetingMessagesDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 9, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2caMeetingMessagesDeleted.setStatus('current')
if mibBuilder.loadTexts: ex2caMeetingMessagesDeleted.setDescription('Meeting Messages Deleted is the number of meeting messages deleted from noise reduction.')
ex2caMeetingMessagesProcessed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 9, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2caMeetingMessagesProcessed.setStatus('current')
if mibBuilder.loadTexts: ex2caMeetingMessagesProcessed.setDescription('Meeting Messages Processed is the total number of meeting messages processed by Calendar Attendant.')
ex2caMeetingRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 9, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2caMeetingRequests.setStatus('current')
if mibBuilder.loadTexts: ex2caMeetingRequests.setDescription('Meeting Requests is the total number of meeting requests processed by Calendar Attendant.')
ex2caMeetingResponses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 9, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2caMeetingResponses.setStatus('current')
if mibBuilder.loadTexts: ex2caMeetingResponses.setDescription('Meeting Responses is the total number of meeting responses processed by Calendar Attendant.')
ex2caRequestsFailed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 9, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2caRequestsFailed.setStatus('current')
if mibBuilder.loadTexts: ex2caRequestsFailed.setDescription('Requests Failed is the total number of failures that occurred while Calendar Attendant was processing events.')
ex2ConnectionFilteringAgent = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 15, 10))
if mibBuilder.loadTexts: ex2ConnectionFilteringAgent.setStatus('current')
if mibBuilder.loadTexts: ex2ConnectionFilteringAgent.setDescription('Performance counters for the Connection Filtering Agent')
ex2cfaConnectionsOnIPAllowList = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 10, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2cfaConnectionsOnIPAllowList.setStatus('current')
if mibBuilder.loadTexts: ex2cfaConnectionsOnIPAllowList.setDescription('Connections on IP Allow List is the total number of connections on the IP Allow list.')
ex2cfaConnOnIPAllowListProviders = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 10, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2cfaConnOnIPAllowListProviders.setStatus('current')
if mibBuilder.loadTexts: ex2cfaConnOnIPAllowListProviders.setDescription('Connections on IP Allow List Providers is the total number of connections on the IP Allow List providers.')
ex2cfaConnOnIPAllowListProvidSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 10, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2cfaConnOnIPAllowListProvidSec.setStatus('current')
if mibBuilder.loadTexts: ex2cfaConnOnIPAllowListProvidSec.setDescription('Connections on IP Allow List Providers/sec is the number of connections on the IP Allow List providers per second.')
ex2cfaConnOnIPAllowListSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 10, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2cfaConnOnIPAllowListSec.setStatus('current')
if mibBuilder.loadTexts: ex2cfaConnOnIPAllowListSec.setDescription('Connections on the IP Allow List per second is the number of connections on the IP Allow List per second.')
ex2cfaConnectionsOnIPBlockList = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 10, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2cfaConnectionsOnIPBlockList.setStatus('current')
if mibBuilder.loadTexts: ex2cfaConnectionsOnIPBlockList.setDescription('Connections on IP Block List is the total number of connections on the IP Block list.')
ex2cfaConnOnIPBlockListProviders = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 10, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2cfaConnOnIPBlockListProviders.setStatus('current')
if mibBuilder.loadTexts: ex2cfaConnOnIPBlockListProviders.setDescription('Connections on IP Block List Providers is the total number of connections on the IP Block List providers.')
ex2cfaConnOnIPBlockListProvidSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 10, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2cfaConnOnIPBlockListProvidSec.setStatus('current')
if mibBuilder.loadTexts: ex2cfaConnOnIPBlockListProvidSec.setDescription('Connections on IP Block List Providers/sec is the number of connections on the IP Block List providers per second.')
ex2cfaConnOnIPBlockListPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 10, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2cfaConnOnIPBlockListPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2cfaConnOnIPBlockListPerSec.setDescription('Connections on IP Block List/sec is the number of connections on the IP Block list per second.')
ex2cfaMsgOrigIPIPAllowList = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 10, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2cfaMsgOrigIPIPAllowList.setStatus('current')
if mibBuilder.loadTexts: ex2cfaMsgOrigIPIPAllowList.setDescription('Messages with Originating IP on IP Allow List is the total number of messages with an originating IP address on the IP Allow list.')
ex2cfaMsgOrigIPIPAllowListPrv = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 10, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2cfaMsgOrigIPIPAllowListPrv.setStatus('current')
if mibBuilder.loadTexts: ex2cfaMsgOrigIPIPAllowListPrv.setDescription('Messages with Originating IP on IP Allow List Providers is the total number of messages with an originating IP address on the IP Allow List providers.')
ex2cfaMsgOrigIPIPAllowListPrvSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 10, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2cfaMsgOrigIPIPAllowListPrvSec.setStatus('current')
if mibBuilder.loadTexts: ex2cfaMsgOrigIPIPAllowListPrvSec.setDescription('Messages with Originating IP on IP Allow List Providers/sec is the number of messages with an originating IP address on the IP Allow List providers list per second.')
ex2cfaMsgOrigIPIPAllowListSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 10, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2cfaMsgOrigIPIPAllowListSec.setStatus('current')
if mibBuilder.loadTexts: ex2cfaMsgOrigIPIPAllowListSec.setDescription('Messages with Originating IP on IP Allow List/sec is the number of messages with an originating IP address on the IP Allow list per second.')
ex2cfaMsgOrigIPIPBlockList = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 10, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2cfaMsgOrigIPIPBlockList.setStatus('current')
if mibBuilder.loadTexts: ex2cfaMsgOrigIPIPBlockList.setDescription('Messages with Originating IP on IP Block List is the total number of messages with an originating IP address on the IP Block list.')
ex2cfaMsgOrigIPIPBlockListPrv = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 10, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2cfaMsgOrigIPIPBlockListPrv.setStatus('current')
if mibBuilder.loadTexts: ex2cfaMsgOrigIPIPBlockListPrv.setDescription('Messages with Originating IP on IP Block List Providers is the total number of messages with originating IP on the IP Block List providers.')
ex2cfaMsgOrigIPIPBlockListPrvSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 10, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2cfaMsgOrigIPIPBlockListPrvSec.setStatus('current')
if mibBuilder.loadTexts: ex2cfaMsgOrigIPIPBlockListPrvSec.setDescription('Messages with Originating IP on IP Block List Providers/sec is the number of messages with an originating IP address on the IP Block List providers list per second.')
ex2cfaMsgOrigIPIPBlockListSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 10, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2cfaMsgOrigIPIPBlockListSec.setStatus('current')
if mibBuilder.loadTexts: ex2cfaMsgOrigIPIPBlockListSec.setDescription('Messages with Originating IP on IP Block List Providers/sec is the number of messages with an originating IP address on the IP Block List providers list per second.')
ex2ContentFilterAgent = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11))
if mibBuilder.loadTexts: ex2ContentFilterAgent.setStatus('current')
if mibBuilder.loadTexts: ex2ContentFilterAgent.setDescription('Performance counters for the Content Filter Agent')
ex2ctfaBypassRecptDueRecptSafSnd = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaBypassRecptDueRecptSafSnd.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaBypassRecptDueRecptSafSnd.setDescription('Bypassed recipients due to per-recipient Safe Senders is the total number of recipients that bypassed content filtering due to a per-recipient safe sender.')
ex2ctfaMessagesDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMessagesDeleted.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMessagesDeleted.setDescription('Messages Deleted is the total number of messages that were deleted by Content Filter Agent.')
ex2ctfaMessagesQuarantined = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMessagesQuarantined.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMessagesQuarantined.setDescription('Messages Quarantined is the total number of messages that were quarantined by Content Filter Agent.')
ex2ctfaMessagesRejected = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMessagesRejected.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMessagesRejected.setDescription('Messages Rejected is the total number of messages that were rejected by Content Filter Agent.')
ex2ctfaMessagesScanned = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMessagesScanned.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMessagesScanned.setDescription('Messages Scanned is the total number of messages scanned by Content Filter Agent.')
ex2ctfaMessagesScannedPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMessagesScannedPerSecond.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMessagesScannedPerSecond.setDescription('The number of messages scanned per second')
ex2ctfaMessageThatBypassScanning = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMessageThatBypassScanning.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMessageThatBypassScanning.setDescription('The total number of messages that bypass scanning')
ex2ctfaMsgBypassScanOrgWideSafe = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMsgBypassScanOrgWideSafe.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMsgBypassScanOrgWideSafe.setDescription('The total number of messages that bypassed scanning due to an organization-wide safe sender')
ex2ctfaMsgIncOtlkEMailPMNotValid = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMsgIncOtlkEMailPMNotValid.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMsgIncOtlkEMailPMNotValid.setDescription('Messages that included an Outlook E-mail Postmark property, but the postmark did not validate successfully')
ex2ctfaMsgIncOtlkEMailPMValidScs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMsgIncOtlkEMailPMValidScs.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMsgIncOtlkEMailPMValidScs.setDescription('Messages that include an Outlook E-mail Postmark and the postmark was successfully validated')
ex2ctfaMessagesWithSCL0 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL0.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL0.setDescription('Messages with SCL 0 is the total number of messages assigned an SCL rating of 0.')
ex2ctfaMessagesWithSCL1 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL1.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL1.setDescription('Messages with SCL 1 is the total number of messages assigned an SCL rating of 1.')
ex2ctfaMessagesWithSCL2 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL2.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL2.setDescription('Messages with SCL 2 is the total number of messages assigned an SCL rating of 2.')
ex2ctfaMessagesWithSCL3 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL3.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL3.setDescription('Messages with SCL 3 is the total number of messages assigned an SCL rating of 3.')
ex2ctfaMessagesWithSCL4 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL4.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL4.setDescription('Messages with SCL 4 is the total number of messages assigned an SCL rating of 4.')
ex2ctfaMessagesWithSCL5 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL5.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL5.setDescription('Messages with SCL 5 is the total number of messages assigned an SCL rating of 5.')
ex2ctfaMessagesWithSCL6 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL6.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL6.setDescription('Messages with SCL 6 is the total number of messages assigned an SCL rating of 6.')
ex2ctfaMessagesWithSCL7 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL7.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL7.setDescription('Messages with SCL 7 is the total number of messages assigned an SCL rating of 7.')
ex2ctfaMessagesWithSCL8 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL8.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL8.setDescription('Messages with SCL 8 is the total number of messages assigned an SCL rating of 8.')
ex2ctfaMessagesWithSCL9 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL9.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCL9.setDescription('Messages with SCL 9 is the total number of messages assigned an SCL rating of 9.')
ex2ctfaMessagesWithSCLUnknown = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCLUnknown.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMessagesWithSCLUnknown.setDescription('Messages with SCL Unknown is the total number of messages that could not be scanned by the filter.')
ex2ctfaMessageWithPreexistingSCL = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 11, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ctfaMessageWithPreexistingSCL.setStatus('current')
if mibBuilder.loadTexts: ex2ctfaMessageWithPreexistingSCL.setDescription('Total messages with a pre-existing SCL')
ex2DatabaseTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12), )
if mibBuilder.loadTexts: ex2DatabaseTable.setStatus('current')
if mibBuilder.loadTexts: ex2DatabaseTable.setDescription('Database provides performance statistics for each process using the ESE high performance embedded database management system.')
ex2DatabaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2dbInstance"))
if mibBuilder.loadTexts: ex2DatabaseEntry.setStatus('current')
if mibBuilder.loadTexts: ex2DatabaseEntry.setDescription("Performance information for one particular instance of 'MSExchange Database' object.")
ex2dbInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbInstance.setStatus('current')
if mibBuilder.loadTexts: ex2dbInstance.setDescription('Instance name.')
ex2dbDatabaseCachePercentHit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbDatabaseCachePercentHit.setStatus('current')
if mibBuilder.loadTexts: ex2dbDatabaseCachePercentHit.setDescription('Database Cache % Hit is the percentage of database file page requests that were fulfilled by the database cache without causing a file operation. If this percentage is too low, the database cache size may be too small.')
ex2dbDatabaseCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbDatabaseCacheSize.setStatus('current')
if mibBuilder.loadTexts: ex2dbDatabaseCacheSize.setDescription('Database Cache Size is the amount of system memory used by the database cache manager to hold commonly used information from the database file(s) to prevent file operations. If the database cache size seems to be too small for optimal performance and there is very little available memory on the system (see Memory/Available Bytes), adding more memory to the system may increase performance. If there is a lot of available memory on the system and the database cache size is not growing beyond a certain point, the database cache size may be capped at an artificially low limit. Increasing this limit may increase performance.')
ex2dbDatabaseCacheSizeMB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbDatabaseCacheSizeMB.setStatus('current')
if mibBuilder.loadTexts: ex2dbDatabaseCacheSizeMB.setDescription('Database Cache Size (MB) is the amount of system memory (in MegaBytes) used by the database cache manager to hold commonly used information from the database file(s) to prevent file operations. If the database cache size seems to be too small for optimal performance and there is very little available memory on the system (see Memory/Available Bytes), adding more memory to the system may increase performance. If there is a lot of available memory on the system and the database cache size is not growing beyond a certain point, the database cache size may be capped at an artificially low limit. Increasing this limit may increase performance.')
ex2dbDatabasePageEvictionsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbDatabasePageEvictionsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbDatabasePageEvictionsPerSec.setDescription('Database Page Evictions/sec is the rate that database file page requests that require the database cache manager to allocate a new page from the database cache force another database page out of the cache. The eviction count is charged when the page is allocated and not when the previous owner of that page was actually evicted from the cache. If this rate is too high, the database cache size may be too small.')
ex2dbDatabasePgFaultStallPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbDatabasePgFaultStallPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbDatabasePgFaultStallPerSec.setDescription('Database Page Fault Stalls/sec is the rate of page faults that cannot be serviced because there are no pages available for allocation from the database cache. If this counter is non-zero most of the time, the clean threshold may be too low.')
ex2dbDatabasePageFaultsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbDatabasePageFaultsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbDatabasePageFaultsPerSec.setDescription('Database Page Faults/sec is the rate that database file page requests require the database cache manager to allocate a new page from the database cache.')
ex2dbIODatabaseReadsAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbIODatabaseReadsAvgLatency.setStatus('current')
if mibBuilder.loadTexts: ex2dbIODatabaseReadsAvgLatency.setDescription('I/O Database Reads Average Latency is the average length of time, in milliseconds, per database read operation.')
ex2dbIODatabaseReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbIODatabaseReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbIODatabaseReadsPerSec.setDescription('I/O Database Reads/sec is the rate of database read operations completed.')
ex2dbIODatabaseWriteAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbIODatabaseWriteAvgLatency.setStatus('current')
if mibBuilder.loadTexts: ex2dbIODatabaseWriteAvgLatency.setDescription('I/O Database Writes Average Latency is the average length of time, in milliseconds, per database write operation.')
ex2dbIODatabaseWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbIODatabaseWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbIODatabaseWritesPerSec.setDescription('I/O Database Writes/sec is the rate of database write operations completed.')
ex2dbIOLogReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbIOLogReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbIOLogReadsPerSec.setDescription('I/O Log Reads/sec is the rate of logfile read operations completed.')
ex2dbIOLogWritesAverageLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbIOLogWritesAverageLatency.setStatus('current')
if mibBuilder.loadTexts: ex2dbIOLogWritesAverageLatency.setDescription('I/O Log Writes Average Latency is the average length of time, in milliseconds, per logfile write operation.')
ex2dbIOLogWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbIOLogWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbIOLogWritesPerSec.setDescription('I/O Log Writes/sec is the rate of logfile write operations completed.')
ex2dbLogBytesWritePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbLogBytesWritePerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbLogBytesWritePerSec.setDescription('Log Bytes Write per second is the rate bytes are written to the log.')
ex2dbLogRecordStallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbLogRecordStallsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbLogRecordStallsPerSec.setDescription('Log Record Stalls/sec is the number of log records that cannot be added to the log buffers per second because they are full. If this counter is non-zero most of the time, the log buffer size may be a bottleneck.')
ex2dbLogThreadsWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbLogThreadsWaiting.setStatus('current')
if mibBuilder.loadTexts: ex2dbLogThreadsWaiting.setDescription('Log Threads Waiting is the number of threads waiting for their data to be written to the log in order to complete an update of the database. If this number is too high, the log may be a bottleneck.')
ex2dbLogWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbLogWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbLogWritesPerSec.setDescription('Log Writes/sec is the number of times the log buffers are written to the log file(s) per second. If this number approaches the maximum write rate for the media holding the log file(s), the log may be a bottleneck.')
ex2dbPagesConverted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbPagesConverted.setStatus('current')
if mibBuilder.loadTexts: ex2dbPagesConverted.setDescription('Pages Converted is the count of database pages that have been converted from an older format')
ex2dbPagesConvertedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbPagesConvertedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbPagesConvertedPerSec.setDescription('Pages Converted/sec is the count of times per second a database page is converted from an older database format')
ex2dbRecordsConverted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbRecordsConverted.setStatus('current')
if mibBuilder.loadTexts: ex2dbRecordsConverted.setDescription('Records Converted is the count of database records that have been converted from an older format')
ex2dbRecordsConvertedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbRecordsConvertedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbRecordsConvertedPerSec.setDescription('Records Converted/sec is the count of times per second a database record is converted from an older database format')
ex2dbSessionsPercentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbSessionsPercentUsed.setStatus('current')
if mibBuilder.loadTexts: ex2dbSessionsPercentUsed.setDescription('Sessions % Used is the percentage of database sessions currently open for use by client threads. [Dev Only]')
ex2dbSessionsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbSessionsInUse.setStatus('current')
if mibBuilder.loadTexts: ex2dbSessionsInUse.setDescription('Sessions In Use is the number of database sessions currently open for use by client threads. [Dev Only]')
ex2dbTableOpenCachePercentHit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbTableOpenCachePercentHit.setStatus('current')
if mibBuilder.loadTexts: ex2dbTableOpenCachePercentHit.setDescription('Table Open Cache % Hit is the percentage of database tables opened using cached schema information. If this percentage is too low, the table cache size may be too small.')
ex2dbTableOpenCacheHitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbTableOpenCacheHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbTableOpenCacheHitsPerSec.setDescription('Table Open Cache Hits/sec is the number of database tables opened using cached schema information per second. If this rate is too low, the table cache size may be too small.')
ex2dbTableOpenCacheMissesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbTableOpenCacheMissesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbTableOpenCacheMissesPerSec.setDescription('Table Open Cache Misses/sec is the number of database tables opened without using cached schema information per second. If this rate is too high, the table cache size may be too small.')
ex2dbTableOpensPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbTableOpensPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbTableOpensPerSec.setDescription('Table Opens/sec is the number of database tables opened per second.')
ex2dbVersionBucketsAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 12, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbVersionBucketsAllocated.setStatus('current')
if mibBuilder.loadTexts: ex2dbVersionBucketsAllocated.setDescription('Total number of version buckets allocated')
ex2DatabaseInstancesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13), )
if mibBuilder.loadTexts: ex2DatabaseInstancesTable.setStatus('current')
if mibBuilder.loadTexts: ex2DatabaseInstancesTable.setDescription('Instances in this process')
ex2DatabaseInstancesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2dbiInstance"))
if mibBuilder.loadTexts: ex2DatabaseInstancesEntry.setStatus('current')
if mibBuilder.loadTexts: ex2DatabaseInstancesEntry.setDescription("Performance information for one particular instance of 'MSExchange Database ==> Instances' object.")
ex2dbiInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiInstance.setStatus('current')
if mibBuilder.loadTexts: ex2dbiInstance.setDescription('Instance name.')
ex2dbiIODatabaseRdAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiIODatabaseRdAvgLatency.setStatus('current')
if mibBuilder.loadTexts: ex2dbiIODatabaseRdAvgLatency.setDescription('I/O Database Reads Average Latency is the average length of time, in milliseconds, per database read operation.')
ex2dbiIODatabaseReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiIODatabaseReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbiIODatabaseReadsPerSec.setDescription('I/O Database Reads/sec is the rate of database read operations completed.')
ex2dbiIODatabsWriteAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiIODatabsWriteAvgLatency.setStatus('current')
if mibBuilder.loadTexts: ex2dbiIODatabsWriteAvgLatency.setDescription('I/O Database Writes Average Latency is the average length of time, in milliseconds, per database write operation.')
ex2dbiIODatabaseWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiIODatabaseWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbiIODatabaseWritesPerSec.setDescription('I/O Database Writes/sec is the rate of database write operations completed.')
ex2dbiIOLogReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiIOLogReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbiIOLogReadsPerSec.setDescription('I/O Log Reads/sec is the rate of logfile read operations completed.')
ex2dbiIOLogWritesAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiIOLogWritesAvgLatency.setStatus('current')
if mibBuilder.loadTexts: ex2dbiIOLogWritesAvgLatency.setDescription('I/O Log Writes Average Latency is the average length of time, in milliseconds, per logfile write operation.')
ex2dbiIOLogWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiIOLogWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbiIOLogWritesPerSec.setDescription('I/O Log Writes/sec is the rate of logfile write operations completed.')
ex2dbiLogBytesWritePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiLogBytesWritePerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbiLogBytesWritePerSec.setDescription('Log Bytes Write per second is the rate bytes are written to the log.')
ex2dbiLogFileCurrentGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiLogFileCurrentGeneration.setStatus('current')
if mibBuilder.loadTexts: ex2dbiLogFileCurrentGeneration.setDescription('Log File Current Generation gives the generation number of the current log file of an instance.')
ex2dbiLogFilesGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiLogFilesGenerated.setStatus('current')
if mibBuilder.loadTexts: ex2dbiLogFilesGenerated.setDescription('Log Files Generated represents the total number of log files generated by an instance since that instance was last initialized.')
ex2dbiLogFilesGeneratedPremature = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiLogFilesGeneratedPremature.setStatus('current')
if mibBuilder.loadTexts: ex2dbiLogFilesGeneratedPremature.setDescription('Log Files Generated Prematurely represents the total number of log files generated by an instance since that instance was last initialized and that have not been entirely filled with useful data. Under certain conditions the database engine will choose to switch to a new log file before it has been completely filled with useful data.')
ex2dbiLogGenerationCheckptDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiLogGenerationCheckptDepth.setStatus('current')
if mibBuilder.loadTexts: ex2dbiLogGenerationCheckptDepth.setDescription('Log Generation Checkpoint Depth represents the amount of work, in count of log files, that will need to be redone or undone to the database file(s) if the process crashes.')
ex2dbiLogGeneratnCheckptDepthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiLogGeneratnCheckptDepthMax.setStatus('current')
if mibBuilder.loadTexts: ex2dbiLogGeneratnCheckptDepthMax.setDescription('Log Generation Checkpoint Depth Max represents the maximum allowable amount of work, in count of log files, that may be redone or undone to the database file(s) if the process crashes.')
ex2dbiLogGeneratLossResilient = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiLogGeneratLossResilient.setStatus('current')
if mibBuilder.loadTexts: ex2dbiLogGeneratLossResilient.setDescription('Log Generation Loss Resiliency Depth represents the amount of work, in count of log files, that may be lost while still allowing the database file(s) to recover (with data loss) if the process crashes.')
ex2dbiLogRecordStallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiLogRecordStallsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbiLogRecordStallsPerSec.setDescription('Log Record Stalls/sec is the number of log records that cannot be added to the log buffers per second because they are full. If this counter is non-zero most of the time, the log buffer size may be a bottleneck.')
ex2dbiLogThreadsWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiLogThreadsWaiting.setStatus('current')
if mibBuilder.loadTexts: ex2dbiLogThreadsWaiting.setDescription('Log Threads Waiting is the number of threads waiting for their data to be written to the log in order to complete an update of the database. If this number is too high, the log may be a bottleneck.')
ex2dbiLogWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiLogWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbiLogWritesPerSec.setDescription('Log Writes/sec is the number of times the log buffers are written to the log file(s) per second. If this number approaches the maximum write rate for the media holding the log file(s), the log may be a bottleneck.')
ex2dbiPagesConverted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiPagesConverted.setStatus('current')
if mibBuilder.loadTexts: ex2dbiPagesConverted.setDescription('Pages Converted is the count of database pages that have been converted from an older format')
ex2dbiPagesConvertedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiPagesConvertedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbiPagesConvertedPerSec.setDescription('Pages Converted/sec is the count of times per second a database page is converted from an older database format')
ex2dbiRecordsConverted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiRecordsConverted.setStatus('current')
if mibBuilder.loadTexts: ex2dbiRecordsConverted.setDescription('Records Converted is the count of database records that have been converted from an older format')
ex2dbiRecordsConvertedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiRecordsConvertedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbiRecordsConvertedPerSec.setDescription('Records Converted/sec is the count of times per second a database record is converted from an older database format')
ex2dbiSessionsPercentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiSessionsPercentUsed.setStatus('current')
if mibBuilder.loadTexts: ex2dbiSessionsPercentUsed.setDescription('Sessions % Used is the percentage of database sessions currently open for use by client threads. [Dev Only]')
ex2dbiSessionsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiSessionsInUse.setStatus('current')
if mibBuilder.loadTexts: ex2dbiSessionsInUse.setDescription('Sessions In Use is the number of database sessions currently open for use by client threads. [Dev Only]')
ex2dbiStreamBackupPageReadPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiStreamBackupPageReadPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbiStreamBackupPageReadPerSec.setDescription('Streaming Backup Pages Read/sec is the rate of database read operationsperformed for the purpose of streaming backups.')
ex2dbiTableOpenCachePercentHit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiTableOpenCachePercentHit.setStatus('current')
if mibBuilder.loadTexts: ex2dbiTableOpenCachePercentHit.setDescription('Table Open Cache % Hit is the percentage of database tables opened using cached schema information. If this percentage is too low, the table cache size may be too small.')
ex2dbiTableOpenCacheHitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiTableOpenCacheHitsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbiTableOpenCacheHitsPerSec.setDescription('Table Open Cache Hits/sec is the number of database tables opened using cached schema information per second. If this rate is too low, the table cache size may be too small.')
ex2dbiTableOpenCacheMissesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiTableOpenCacheMissesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbiTableOpenCacheMissesPerSec.setDescription('Table Open Cache Misses/sec is the number of database tables opened without using cached schema information per second. If this rate is too high, the table cache size may be too small.')
ex2dbiTableOpensPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiTableOpensPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2dbiTableOpensPerSec.setDescription('Table Opens/sec is the number of database tables opened per second.')
ex2dbiVersionBucketsAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 13, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbiVersionBucketsAllocated.setStatus('current')
if mibBuilder.loadTexts: ex2dbiVersionBucketsAllocated.setDescription('Total number of version buckets allocated')
ex2DatabaseTableClassesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 14), )
if mibBuilder.loadTexts: ex2DatabaseTableClassesTable.setStatus('current')
if mibBuilder.loadTexts: ex2DatabaseTableClassesTable.setDescription('Statistics for the ESE high performance embedded database management system by Table Class')
ex2DatabaseTableClassesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 14, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2dbtcInstance"))
if mibBuilder.loadTexts: ex2DatabaseTableClassesEntry.setStatus('current')
if mibBuilder.loadTexts: ex2DatabaseTableClassesEntry.setDescription("Performance information for one particular instance of 'MSExchange Database ==> TableClasses' object.")
ex2dbtcInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 14, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbtcInstance.setStatus('current')
if mibBuilder.loadTexts: ex2dbtcInstance.setDescription('Instance name.')
ex2dbtcDatabaseCacheSizeMB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 14, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2dbtcDatabaseCacheSizeMB.setStatus('current')
if mibBuilder.loadTexts: ex2dbtcDatabaseCacheSizeMB.setDescription('Database Cache Size (MB) is the amount of system memory (in MegaBytes) used by the database cache manager to hold commonly used information from the database file(s) to prevent file operations. If the database cache size seems to be too small for optimal performance and there is very little available memory on the system (see Memory/Available Bytes), adding more memory to the system may increase performance. If there is a lot of available memory on the system and the database cache size is not growing beyond a certain point, the database cache size may be capped at an artificially low limit. Increasing this limit may increase performance.')
ex2ExtensibilityAgentsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 15), )
if mibBuilder.loadTexts: ex2ExtensibilityAgentsTable.setStatus('current')
if mibBuilder.loadTexts: ex2ExtensibilityAgentsTable.setDescription('Exchange MEx runtime performance counters')
ex2ExtensibilityAgentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 15, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2eaInstance"))
if mibBuilder.loadTexts: ex2ExtensibilityAgentsEntry.setStatus('current')
if mibBuilder.loadTexts: ex2ExtensibilityAgentsEntry.setDescription("Performance information for one particular instance of 'MSExchange Extensibility Agents' object.")
ex2eaInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 15, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2eaInstance.setStatus('current')
if mibBuilder.loadTexts: ex2eaInstance.setDescription('Instance name.')
ex2eaAverageAgentProcessTimeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 15, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2eaAverageAgentProcessTimeSec.setStatus('current')
if mibBuilder.loadTexts: ex2eaAverageAgentProcessTimeSec.setDescription('Average agent processing time in seconds per event.')
ex2eaTotalAgentInvocations = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 15, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2eaTotalAgentInvocations.setStatus('current')
if mibBuilder.loadTexts: ex2eaTotalAgentInvocations.setDescription('Total number of agent invocations since the last restart.')
ex2JournalingAgent = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 15, 16))
if mibBuilder.loadTexts: ex2JournalingAgent.setStatus('current')
if mibBuilder.loadTexts: ex2JournalingAgent.setDescription('Counters for the Exchange message journaling feature.')
ex2jaJournalReportsCreatedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 16, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2jaJournalReportsCreatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2jaJournalReportsCreatedPerSec.setDescription('Journal Reports Generated Rate is the number of journal reports created per second.')
ex2jaJournalReportsCreatedTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 16, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2jaJournalReportsCreatedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2jaJournalReportsCreatedTotal.setDescription('Journal Reports Generated is the number of journal reports that were generated.')
ex2jaJournalingProcessingTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 16, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2jaJournalingProcessingTime.setStatus('current')
if mibBuilder.loadTexts: ex2jaJournalingProcessingTime.setDescription('Processing Time is the total time spent executing journaling rules and creating reports in milliseconds.')
ex2jaJournalProcesTimePerMessage = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 16, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2jaJournalProcesTimePerMessage.setStatus('current')
if mibBuilder.loadTexts: ex2jaJournalProcesTimePerMessage.setDescription('Average journaling processing time/message base is the average time in milliseconds spent in journaling per message. This includes the time spent executing journaling rules and creating journal reports.')
ex2jaMessagesProcessByJournaling = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 16, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2jaMessagesProcessByJournaling.setStatus('current')
if mibBuilder.loadTexts: ex2jaMessagesProcessByJournaling.setDescription('Messages Processed is the number of messages processed by journaling including those that were not journaled.')
ex2jaUsersJournaled = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 16, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2jaUsersJournaled.setStatus('current')
if mibBuilder.loadTexts: ex2jaUsersJournaled.setDescription('Users Journaled is the number of message senders and recipients for which journal reports were generated.')
ex2jaUsersJournaledPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 16, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2jaUsersJournaledPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2jaUsersJournaledPerSec.setDescription('Users Journaled Rate is the number of message senders and recipients for which journal reports were generated per second.')
ex2ManagedFolderAssistant = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 15, 17))
if mibBuilder.loadTexts: ex2ManagedFolderAssistant.setStatus('current')
if mibBuilder.loadTexts: ex2ManagedFolderAssistant.setDescription('Performance counters for the Microsoft Exchange Managed Folder Assistant')
ex2mfaItemsDeletedButRecoverable = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 17, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mfaItemsDeletedButRecoverable.setStatus('current')
if mibBuilder.loadTexts: ex2mfaItemsDeletedButRecoverable.setDescription('Items Deleted but Recoverable is the total number of items deleted but recoverable through the dumpster by the Managed Folder Assistant since the start of the most recent schedule interval. The number includes items in both the mailboxes that were scheduled for processing during the schedule interval and any mailboxes that the administrator specified for processing. This counter is reset to zero at the start of each schedule interval.')
ex2mfaItemsJournaled = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 17, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mfaItemsJournaled.setStatus('current')
if mibBuilder.loadTexts: ex2mfaItemsJournaled.setDescription('Items Journaled is the total number of items journaled by the Managed Folder Assistant since the start of the most recent schedule interval. The number includes items in both the mailboxes that were scheduled for processing during the schedule interval and any mailboxes that the administrator specified for processing. This counter is reset to zero at the start of each schedule interval.')
ex2mfaItemsMarkPastRetentionDate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 17, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mfaItemsMarkPastRetentionDate.setStatus('current')
if mibBuilder.loadTexts: ex2mfaItemsMarkPastRetentionDate.setDescription('Items Marked as Past Retention Date is the total number of items marked as past their retention date by the Managed Folder Assistant since the start of the most recent schedule interval. The number includes items in both the mailboxes that were scheduled for processing during the schedule interval and any mailboxes that the administrator specified for processing. This counter is reset to zero at the start of each schedule interval.')
ex2mfaItemsMoved = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 17, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mfaItemsMoved.setStatus('current')
if mibBuilder.loadTexts: ex2mfaItemsMoved.setDescription('Items Moved is the total number of items moved by the Managed Folder Assistant since the start of the most recent schedule interval. The number includes items in both the mailboxes that were scheduled for processing during the schedule interval and any mailboxes that the administrator specified for processing. This counter is reset to zero at the start of each schedule interval.')
ex2mfaItemsPermanentlyDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 17, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mfaItemsPermanentlyDeleted.setStatus('current')
if mibBuilder.loadTexts: ex2mfaItemsPermanentlyDeleted.setDescription('Items Permanently Deleted is the total number of items permanently deleted by the Managed Folder Assistant since the beginning of the most recent schedule interval. The number includes items in both the mailboxes that were scheduled for processing during the schedule interval and any mailboxes that the administrator specified for processing. This counter is reset to zero at the beginning of each schedule interval.')
ex2mfaItemSubjectRetentionPolicy = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 17, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mfaItemSubjectRetentionPolicy.setStatus('current')
if mibBuilder.loadTexts: ex2mfaItemSubjectRetentionPolicy.setDescription('Items Subject to Retention Policy is the total number of items subject to retention policy by the Managed Folder Assistant since the start of the most recent schedule interval. The number includes items in both the mailboxes that were scheduled for processing during the schedule interval and any mailboxes that the administrator specified for processing. This counter is reset to zero at the start of each schedule interval.')
ex2OWA = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18))
if mibBuilder.loadTexts: ex2OWA.setStatus('current')
if mibBuilder.loadTexts: ex2OWA.setDescription('The MSExchange OWA performance object includes counters that monitor Outlook Web Access.')
ex2OWAASQueries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAASQueries.setStatus('current')
if mibBuilder.loadTexts: ex2OWAASQueries.setDescription('AS Queries is the total number of Availability Service queries since the process was started.')
ex2OWAASQueriesFailurePercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAASQueriesFailurePercent.setStatus('current')
if mibBuilder.loadTexts: ex2OWAASQueriesFailurePercent.setDescription('AS Queries Failure % is the percentage of the last 100 Availability Service lookups that have failed.')
ex2OWAActiveConversions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAActiveConversions.setStatus('current')
if mibBuilder.loadTexts: ex2OWAActiveConversions.setDescription('Active Conversions is the number of conversions that are currently being processed by the WebReady Document Viewing service.')
ex2OWAAttachmentUploadedOWAStart = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAAttachmentUploadedOWAStart.setStatus('current')
if mibBuilder.loadTexts: ex2OWAAttachmentUploadedOWAStart.setDescription('Attachments Uploaded is the total number of attachments that have been uploaded since the process was restarted.')
ex2OWAAverageCheckSpellingTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAAverageCheckSpellingTime.setStatus('current')
if mibBuilder.loadTexts: ex2OWAAverageCheckSpellingTime.setDescription('Average Check Spelling Time is the average time that elapsed while waiting for a check spelling operation to complete.')
ex2OWAAverageConversionQueueTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAAverageConversionQueueTime.setStatus('current')
if mibBuilder.loadTexts: ex2OWAAverageConversionQueueTime.setDescription('Average Conversion Queuing Time is the average length of time, in milliseconds, that documents waited for the WebReady Document Viewing service to process the attachment conversion request since the process was restarted.')
ex2OWAAverageConversionTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAAverageConversionTime.setStatus('current')
if mibBuilder.loadTexts: ex2OWAAverageConversionTime.setDescription('Average Conversion Time is the average length of time, in milliseconds, it has taken to convert a document since the process was restarted.')
ex2OWAAverageResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAAverageResponseTime.setStatus('current')
if mibBuilder.loadTexts: ex2OWAAverageResponseTime.setDescription('Average Response Time is the average time (in milliseconds) that elapsed between the beginning and end of an OEH or ASPX request.')
ex2OWAAverageSearchTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAAverageSearchTime.setStatus('current')
if mibBuilder.loadTexts: ex2OWAAverageSearchTime.setDescription('Average Search Time is the average time that elapsed while waiting for a search to complete.')
ex2OWACalendarViewRefreshed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWACalendarViewRefreshed.setStatus('current')
if mibBuilder.loadTexts: ex2OWACalendarViewRefreshed.setDescription('Calendar View Refreshes is the total number of times calendar views have been refreshed since the process was restarted.')
ex2OWACalendarViewsLoaded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWACalendarViewsLoaded.setStatus('current')
if mibBuilder.loadTexts: ex2OWACalendarViewsLoaded.setDescription('Calendar Views Loaded is the total number of times the calendar view has been loaded since the process was restarted.')
ex2OWAConversionRequestsKBPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAConversionRequestsKBPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2OWAConversionRequestsKBPerSec.setDescription('Conversion Requests KB/sec is the total number of conversion requests, in kilobytes, that are waiting for conversion by the WebReady Document Viewing service per second. It does not include blocked items and queued items that have timed out.')
ex2OWAConversionResponseKBPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAConversionResponseKBPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2OWAConversionResponseKBPerSec.setDescription('Conversion Responses KB/sec is the total number of conversion responses, in kilobytes per second, that are written to an output HTML file.')
ex2OWAConversions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAConversions.setStatus('current')
if mibBuilder.loadTexts: ex2OWAConversions.setDescription('Conversions is the total number of requests that were received for conversion since the process was restarted. It includes the items that were rejected because they are in the Block list.')
ex2OWAConversionsEndedByTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAConversionsEndedByTimeOut.setStatus('current')
if mibBuilder.loadTexts: ex2OWAConversionsEndedByTimeOut.setDescription('Conversions Ended By Time-out is the total number of conversions that ended because the queue timed out or the conversion timed out.')
ex2OWAConversionsEndedWithErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAConversionsEndedWithErrors.setStatus('current')
if mibBuilder.loadTexts: ex2OWAConversionsEndedWithErrors.setDescription('Conversions Ended with Errors is the number of conversions that failed and returned errors without output.')
ex2OWACurrentProxyUsers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWACurrentProxyUsers.setStatus('current')
if mibBuilder.loadTexts: ex2OWACurrentProxyUsers.setDescription('Current Proxy Users is the number of users who are logged on whose mailbox access is being proxied to another server.')
ex2OWACurrentUniqueUsers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWACurrentUniqueUsers.setStatus('current')
if mibBuilder.loadTexts: ex2OWACurrentUniqueUsers.setDescription('Current Unique Users is the number of unique users currently logged on to Outlook Web Access. This value monitors the number of unique active user sessions, so that users are only removed from this count after they log off or their session times out.')
ex2OWACurrentUniqueUsersLight = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWACurrentUniqueUsersLight.setStatus('current')
if mibBuilder.loadTexts: ex2OWACurrentUniqueUsersLight.setDescription('Current Unique Users Light is the number of unique users currently logged on to OWA. This value monitors the number of unique active user sessions, so that users are only removed from this count after they log off or their session times out.')
ex2OWACurrentUniqueUsersPremium = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWACurrentUniqueUsersPremium.setStatus('current')
if mibBuilder.loadTexts: ex2OWACurrentUniqueUsersPremium.setDescription('Current Unique Users Premium is the number of unique users currently logged on to Outlook Web Access Premium. This value monitors the number of unique active user sessions, so that users are only removed from this count after they log off or their session times out.')
ex2OWACurrentUsers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWACurrentUsers.setStatus('current')
if mibBuilder.loadTexts: ex2OWACurrentUsers.setDescription('Current User Count is the number of users who are currently logged on to Outlook Web Access. This value monitors the number of active user sessions, so that users are only removed from this count after they log off or their session times out.')
ex2OWACurrentUsersLight = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWACurrentUsersLight.setStatus('current')
if mibBuilder.loadTexts: ex2OWACurrentUsersLight.setDescription('Current User Count Light is the number of users currently logged on to Outlook Web Access. This value monitors the number of active user sessions, so that users are only removed from this count after they log off or their session times out.')
ex2OWACurrentUsersPremium = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWACurrentUsersPremium.setStatus('current')
if mibBuilder.loadTexts: ex2OWACurrentUsersPremium.setDescription('Current User Count Premium is the number of users that are currently logged on to Outlook Web Access. This value monitors the number of active user sessions, so that users are only removed from this count after they log off or their session times out.')
ex2OWAFailedRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAFailedRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2OWAFailedRequestsPerSec.setDescription('Requests/sec Failed is the number of Outlook Web Access requests that failed, per second.')
ex2OWAInvalidCanaryRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAInvalidCanaryRequests.setStatus('current')
if mibBuilder.loadTexts: ex2OWAInvalidCanaryRequests.setDescription('Invalid Canary Requests is the number of requests that included a canary value that is not valid since the process was restarted.')
ex2OWAItemsCreatedSinceOWAStart = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAItemsCreatedSinceOWAStart.setStatus('current')
if mibBuilder.loadTexts: ex2OWAItemsCreatedSinceOWAStart.setDescription('Items Created is the total number of items of any type that have been created by users since the process was restarted.')
ex2OWAItemsDeletedSinceOWAStart = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAItemsDeletedSinceOWAStart.setStatus('current')
if mibBuilder.loadTexts: ex2OWAItemsDeletedSinceOWAStart.setDescription('Items Deleted is the total number of items of any type that have been deleted by users since the process was restarted.')
ex2OWAItemsUpdatedSinceOWAStart = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAItemsUpdatedSinceOWAStart.setStatus('current')
if mibBuilder.loadTexts: ex2OWAItemsUpdatedSinceOWAStart.setDescription('Items Updated is the total number of items of any type that have been updated by users since the process was restarted.')
ex2OWALogonsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWALogonsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2OWALogonsPerSec.setDescription('Logons/sec is the number of Outlook Web Access user sessions that are created per second.')
ex2OWALogonsPerSecLight = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWALogonsPerSecLight.setStatus('current')
if mibBuilder.loadTexts: ex2OWALogonsPerSecLight.setDescription('Logons/sec Light is the number of Outlook Web Access user sessions that are created per second.')
ex2OWALogonsPerSecPremium = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWALogonsPerSecPremium.setStatus('current')
if mibBuilder.loadTexts: ex2OWALogonsPerSecPremium.setDescription('Logons/sec Premium is the number of Outlook Web Access user sessions that are created per second.')
ex2OWAMailViewRefreshes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAMailViewRefreshes.setStatus('current')
if mibBuilder.loadTexts: ex2OWAMailViewRefreshes.setDescription('Mail View Refreshes is the total number of times mail views have been refreshed since the process was restarted.')
ex2OWAMailViewsLoaded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAMailViewsLoaded.setStatus('current')
if mibBuilder.loadTexts: ex2OWAMailViewsLoaded.setDescription('Mail Views Loaded is the total number of times the mail view has been loaded since the process was restarted.')
ex2OWAMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAMessagesSent.setStatus('current')
if mibBuilder.loadTexts: ex2OWAMessagesSent.setDescription('Messages Sent is the total number of messages that have been sent by users since the process was restarted.')
ex2OWANamesChecked = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWANamesChecked.setStatus('current')
if mibBuilder.loadTexts: ex2OWANamesChecked.setDescription('Names Checked is the total number of recipient names that were attempted to be resolved since the process was started.')
ex2OWAPID = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAPID.setStatus('current')
if mibBuilder.loadTexts: ex2OWAPID.setDescription('PID is the process ID that is hosting Outlook Web Access.')
ex2OWAPasswordChanges = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAPasswordChanges.setStatus('current')
if mibBuilder.loadTexts: ex2OWAPasswordChanges.setDescription('Password Changes is the number of times a user has changed their password since the process was started.')
ex2OWAPeakUserCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAPeakUserCount.setStatus('current')
if mibBuilder.loadTexts: ex2OWAPeakUserCount.setDescription('Peak User Count is the largest number of users simultaneously connected to Outlook Web Access since the process was restarted.')
ex2OWAPeakUserCountLight = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAPeakUserCountLight.setStatus('current')
if mibBuilder.loadTexts: ex2OWAPeakUserCountLight.setDescription('Peak User Count Light is the largest number of users that were simultaneously connected to Outlook Web Access since the process was restarted.')
ex2OWAPeakUserCountPremium = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAPeakUserCountPremium.setStatus('current')
if mibBuilder.loadTexts: ex2OWAPeakUserCountPremium.setDescription('Peak User Count Premium is the largest number of users that were simultaneously connected to Outlook Web Access since the process was restarted.')
ex2OWAProxyRequestBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAProxyRequestBytes.setStatus('current')
if mibBuilder.loadTexts: ex2OWAProxyRequestBytes.setDescription('Proxy Request Bytes is the total number of HTTP header and content bytes in requests that have been proxied since the process was started.')
ex2OWAProxyResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAProxyResponseBytes.setStatus('current')
if mibBuilder.loadTexts: ex2OWAProxyResponseBytes.setDescription('Proxy Response Bytes is the total number of HTTP header and content bytes in responses that have been proxied since the process was started.')
ex2OWAProxyResponseTimeAverage = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAProxyResponseTimeAverage.setStatus('current')
if mibBuilder.loadTexts: ex2OWAProxyResponseTimeAverage.setDescription('Proxy Response Time Average is the average time (in milliseconds) elapsed between the beginning and end of proxied requests.')
ex2OWAProxyUserRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAProxyUserRequests.setStatus('current')
if mibBuilder.loadTexts: ex2OWAProxyUserRequests.setDescription('Proxy User Requests is the total number of requests made on behalf of proxied users since the process was started.')
ex2OWAProxyUserRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAProxyUserRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2OWAProxyUserRequestsPerSec.setDescription('Proxy User Requests/sec is the number of proxied requests made per second.')
ex2OWAQueuedConversionRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAQueuedConversionRequests.setStatus('current')
if mibBuilder.loadTexts: ex2OWAQueuedConversionRequests.setDescription('Queued Conversion Requests is the number of requests for conversion that are currently waiting to be processed.')
ex2OWARejectedConversions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWARejectedConversions.setStatus('current')
if mibBuilder.loadTexts: ex2OWARejectedConversions.setDescription('Rejected Conversions is the total number of conversion requests that were rejected because the documents are in the Block list.')
ex2OWARequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWARequests.setStatus('current')
if mibBuilder.loadTexts: ex2OWARequests.setDescription('Requests is the number of requests that have been executed since the process was restarted.')
ex2OWARequestsFailed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWARequestsFailed.setStatus('current')
if mibBuilder.loadTexts: ex2OWARequestsFailed.setDescription('Requests Failed is the number of requests that failed since the process was restarted.')
ex2OWARequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWARequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2OWARequestsPerSec.setDescription('Requests/sec is the number of requests handled by Outlook Web Access per second.')
ex2OWASearches = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWASearches.setStatus('current')
if mibBuilder.loadTexts: ex2OWASearches.setDescription('Searches is the number of searches that have been executed since the process was restarted.')
ex2OWASearchesExecuted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWASearchesExecuted.setStatus('current')
if mibBuilder.loadTexts: ex2OWASearchesExecuted.setDescription('Searches Executed is the total number of times a user has requested a search since the process was started.')
ex2OWASearchesTimedOut = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWASearchesTimedOut.setStatus('current')
if mibBuilder.loadTexts: ex2OWASearchesTimedOut.setDescription('Searches Timed Out is the number of searches that did not complete in the maximum time allowed since the process was restarted.')
ex2OWASessionsEndedByLogoff = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWASessionsEndedByLogoff.setStatus('current')
if mibBuilder.loadTexts: ex2OWASessionsEndedByLogoff.setDescription('Sessions Ended by Logoff is the total number of user sessions that have been ended because the user logged off, since the process was restarted.')
ex2OWASessionsEndedByTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWASessionsEndedByTimeOut.setStatus('current')
if mibBuilder.loadTexts: ex2OWASessionsEndedByTimeOut.setDescription('Sessions Ended by Time-out is the total number of user sessions that have been ended because of a timeout since the process was restarted.')
ex2OWASpellingChecks = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWASpellingChecks.setStatus('current')
if mibBuilder.loadTexts: ex2OWASpellingChecks.setDescription('Spelling Checks is the number of Check Spelling operations that have been executed since the process was restarted.')
ex2OWAStoreLogonFailurePercent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAStoreLogonFailurePercent.setStatus('current')
if mibBuilder.loadTexts: ex2OWAStoreLogonFailurePercent.setDescription('Store Logon Failure % is the percentage of the last 100 Outlook Web Access user logons to Microsoft Exchange Mailbox servers that have failed.')
ex2OWASuccessConversnReqKBPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWASuccessConversnReqKBPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2OWASuccessConversnReqKBPerSec.setDescription('Successful Conversion Requests KB/sec is the number of successful conversion requests in kilobytes per second.')
ex2OWATotalUniqueUsers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWATotalUniqueUsers.setStatus('current')
if mibBuilder.loadTexts: ex2OWATotalUniqueUsers.setDescription('Total Unique Users is the total number of unique users who have connected to Outlook Web Access since the process was restarted.')
ex2OWATotalUniqueUsersLight = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWATotalUniqueUsersLight.setStatus('current')
if mibBuilder.loadTexts: ex2OWATotalUniqueUsersLight.setDescription('Total Unique Users Light is the total number of unique users who have connected to Outlook Web Access since the process was restarted.')
ex2OWATotalUniqueUsersPremium = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWATotalUniqueUsersPremium.setStatus('current')
if mibBuilder.loadTexts: ex2OWATotalUniqueUsersPremium.setDescription('Total Unique Users Premium is the total number of unique users who have connected to Outlook Web Access since the process was restarted.')
ex2OWATotalUsers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWATotalUsers.setStatus('current')
if mibBuilder.loadTexts: ex2OWATotalUsers.setDescription('Total Users is the total number of users who have connected to Outlook Web Access since the process was started.')
ex2OWATotalUsersLight = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWATotalUsersLight.setStatus('current')
if mibBuilder.loadTexts: ex2OWATotalUsersLight.setDescription('Total Users Light is the total number of users who have connected to Outlook Web Access since the process was restarted.')
ex2OWATotalUsersPremium = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWATotalUsersPremium.setStatus('current')
if mibBuilder.loadTexts: ex2OWATotalUsersPremium.setDescription('Total Users Premium is the total number of users who have connected to Outlook Web Access since the process was restarted.')
ex2OWAUNCRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAUNCRequests.setStatus('current')
if mibBuilder.loadTexts: ex2OWAUNCRequests.setDescription('UNC Requests is the total number of Windows file share requests through Outlook Web Access since the process was started.')
ex2OWAUNCResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAUNCResponseBytes.setStatus('current')
if mibBuilder.loadTexts: ex2OWAUNCResponseBytes.setDescription('UNC Response Bytes is the total number of file content bytes accessed in Windows file shares since the process was started.')
ex2OWAUNCResponseBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAUNCResponseBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2OWAUNCResponseBytesPerSec.setDescription('UNC Response Bytes/sec is the number of bytes in responses to Windows file shares requests, per second.')
ex2OWAWSSRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAWSSRequests.setStatus('current')
if mibBuilder.loadTexts: ex2OWAWSSRequests.setDescription('WSS Requests is the total number of Windows SharePoint Services requests through Outlook Web Access since the process was started.')
ex2OWAWSSResponseBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAWSSResponseBytes.setStatus('current')
if mibBuilder.loadTexts: ex2OWAWSSResponseBytes.setDescription('WSS Response Bytes is the total number of file content bytes accessed in Windows SharePoint Services since the process was started.')
ex2OWAWSSResponseBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 18, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2OWAWSSResponseBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2OWAWSSResponseBytesPerSec.setDescription('WSS Response Bytes/sec is the number of bytes in responses to Windows SharePoint Services requests, per second.')
ex2OledbEventsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 19), )
if mibBuilder.loadTexts: ex2OledbEventsTable.setStatus('current')
if mibBuilder.loadTexts: ex2OledbEventsTable.setDescription('The ExOledb Events object type contains counters specific to the ExOledb Events')
ex2OledbEventsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 19, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2oeInstance"))
if mibBuilder.loadTexts: ex2OledbEventsEntry.setStatus('current')
if mibBuilder.loadTexts: ex2OledbEventsEntry.setDescription("Performance information for one particular instance of 'MSExchange Oledb Events' object.")
ex2oeInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 19, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2oeInstance.setStatus('current')
if mibBuilder.loadTexts: ex2oeInstance.setDescription('Instance name.')
ex2oeEventsCompletionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 19, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2oeEventsCompletionRate.setStatus('current')
if mibBuilder.loadTexts: ex2oeEventsCompletionRate.setDescription('The number of events completed per second.')
ex2oeEventsCompletionTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 19, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2oeEventsCompletionTotal.setStatus('current')
if mibBuilder.loadTexts: ex2oeEventsCompletionTotal.setDescription('The total number of events that have been completed.')
ex2oeEventsSubmissionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 19, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2oeEventsSubmissionRate.setStatus('current')
if mibBuilder.loadTexts: ex2oeEventsSubmissionRate.setDescription('The number of events submitted per second.')
ex2oeEventsSubmissionTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 19, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2oeEventsSubmissionTotal.setStatus('current')
if mibBuilder.loadTexts: ex2oeEventsSubmissionTotal.setDescription('The total number of events that have been submitted.')
ex2OledbResourceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20), )
if mibBuilder.loadTexts: ex2OledbResourceTable.setStatus('current')
if mibBuilder.loadTexts: ex2OledbResourceTable.setDescription('The ExOledb Resource object type contains counters specific to the ExOledb Resources')
ex2OledbResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2orInstance"))
if mibBuilder.loadTexts: ex2OledbResourceEntry.setStatus('current')
if mibBuilder.loadTexts: ex2OledbResourceEntry.setDescription("Performance information for one particular instance of 'MSExchange Oledb Resource' object.")
ex2orInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2orInstance.setStatus('current')
if mibBuilder.loadTexts: ex2orInstance.setDescription('Instance name.')
ex2orActiveCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2orActiveCommands.setStatus('current')
if mibBuilder.loadTexts: ex2orActiveCommands.setDescription('The number of Command objects which are currently active.')
ex2orActiveDataSources = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2orActiveDataSources.setStatus('current')
if mibBuilder.loadTexts: ex2orActiveDataSources.setDescription('The number of Data Source objects which are currently active.')
ex2orActiveRows = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2orActiveRows.setStatus('current')
if mibBuilder.loadTexts: ex2orActiveRows.setDescription('The number of Row objects which are currently active.')
ex2orActiveRowsets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2orActiveRowsets.setStatus('current')
if mibBuilder.loadTexts: ex2orActiveRowsets.setDescription('The number of Rowset objects which are currently active.')
ex2orActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2orActiveSessions.setStatus('current')
if mibBuilder.loadTexts: ex2orActiveSessions.setDescription('The number of Session objects which are currently active.')
ex2orActiveStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2orActiveStreams.setStatus('current')
if mibBuilder.loadTexts: ex2orActiveStreams.setDescription('The number of Stream objects which are currently active.')
ex2orResourceBindingsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2orResourceBindingsRate.setStatus('current')
if mibBuilder.loadTexts: ex2orResourceBindingsRate.setDescription('The number of successful resource bindings per second.')
ex2orResourceBindingsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2orResourceBindingsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2orResourceBindingsTotal.setDescription('The total number of successful resource bindings.')
ex2orRowsetsOpenedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2orRowsetsOpenedRate.setStatus('current')
if mibBuilder.loadTexts: ex2orRowsetsOpenedRate.setDescription('The number of times that rowsets are opened per second.')
ex2orRowsetsOpenedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2orRowsetsOpenedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2orRowsetsOpenedTotal.setDescription('The total number of times that rowsets have been opened.')
ex2orTransactionsAbortedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2orTransactionsAbortedRate.setStatus('current')
if mibBuilder.loadTexts: ex2orTransactionsAbortedRate.setDescription('The number of transactions aborted successfully per second.')
ex2orTransactionsAbortedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2orTransactionsAbortedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2orTransactionsAbortedTotal.setDescription('The total number of transactions that have been successfully aborted.')
ex2orTransactionsCommittedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2orTransactionsCommittedRate.setStatus('current')
if mibBuilder.loadTexts: ex2orTransactionsCommittedRate.setDescription('The number of transactions committed successfully per second.')
ex2orTransactionsCommittedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2orTransactionsCommittedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2orTransactionsCommittedTotal.setDescription('The total number of transactions that have been successfully committed.')
ex2orTransactionsStartedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2orTransactionsStartedRate.setStatus('current')
if mibBuilder.loadTexts: ex2orTransactionsStartedRate.setDescription('The number of transactions started per second.')
ex2orTransactionsStartedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 20, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2orTransactionsStartedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2orTransactionsStartedTotal.setDescription('The total number of transactions that have been started.')
ex2ProtocolAnalysisAgent = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 15, 21))
if mibBuilder.loadTexts: ex2ProtocolAnalysisAgent.setStatus('current')
if mibBuilder.loadTexts: ex2ProtocolAnalysisAgent.setDescription('Performance counters for Protocol Analysis Agent')
ex2paaCalculationsAtSRL0 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 21, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL0.setStatus('current')
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL0.setDescription('Calculations at SRL 0 is the total number of calculations at SRL 0.')
ex2paaCalculationsAtSRL1 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 21, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL1.setStatus('current')
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL1.setDescription('Calculations at SRL 1 is the total number of calculations at SRL 1.')
ex2paaCalculationsAtSRL2 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 21, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL2.setStatus('current')
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL2.setDescription('Calculations at SRL 2 is the total number of calculations at SRL 2.')
ex2paaCalculationsAtSRL3 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 21, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL3.setStatus('current')
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL3.setDescription('Calculations at SRL 3 is the total number of calculations at SRL 3.')
ex2paaCalculationsAtSRL4 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 21, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL4.setStatus('current')
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL4.setDescription('Calculations at SRL 4 is the total number of calculations at SRL 4.')
ex2paaCalculationsAtSRL5 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 21, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL5.setStatus('current')
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL5.setDescription('Calculations at SRL 5 is the total number of calculations at SRL 5.')
ex2paaCalculationsAtSRL6 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 21, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL6.setStatus('current')
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL6.setDescription('Calculations at SRL 6 is the total number of calculations at SRL 6.')
ex2paaCalculationsAtSRL7 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 21, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL7.setStatus('current')
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL7.setDescription('Calculations at SRL 7 is the total number of calculations at SRL 7.')
ex2paaCalculationsAtSRL8 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 21, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL8.setStatus('current')
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL8.setDescription('Calculations at SRL 8 is the total number of calculations at SRL 8.')
ex2paaCalculationsAtSRL9 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 21, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL9.setStatus('current')
if mibBuilder.loadTexts: ex2paaCalculationsAtSRL9.setDescription('Calculations at SRL 9 s the total number of calculations at SRL 9.')
ex2paaSendersBlockLocalOpenProxy = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 21, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2paaSendersBlockLocalOpenProxy.setStatus('current')
if mibBuilder.loadTexts: ex2paaSendersBlockLocalOpenProxy.setDescription('Senders Blocked Because of Local Open Proxy is the total number of senders blocked because of a local open proxy.')
ex2paaSendersBlockedOfLocalSRL = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 21, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2paaSendersBlockedOfLocalSRL.setStatus('current')
if mibBuilder.loadTexts: ex2paaSendersBlockedOfLocalSRL.setDescription('Senders Blocked Because of Local SRL is the total number of senders blocked because of local sender reputation level (SRL).')
ex2paaSenderBlockRemoteOpenProxy = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 21, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2paaSenderBlockRemoteOpenProxy.setStatus('current')
if mibBuilder.loadTexts: ex2paaSenderBlockRemoteOpenProxy.setDescription('Senders Blocked Because of Remote Open Proxy is the total number of senders blocked because of a remote open proxy.')
ex2paaSendersBlockedOfRemoteSRL = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 21, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2paaSendersBlockedOfRemoteSRL.setStatus('current')
if mibBuilder.loadTexts: ex2paaSendersBlockedOfRemoteSRL.setDescription('Senders Blocked Because of Remote SRL is the total number of senders blocked because of remote sender reputation level (SRL).')
ex2paaSendersBypassLocalSRLCalc = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 21, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2paaSendersBypassLocalSRLCalc.setStatus('current')
if mibBuilder.loadTexts: ex2paaSendersBypassLocalSRLCalc.setDescription('Senders Bypass Local SRL Calculation is the total number of senders that bypass local Sender Reputation Level (SRL) calculation.')
ex2paaSendersProcessed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 21, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2paaSendersProcessed.setStatus('current')
if mibBuilder.loadTexts: ex2paaSendersProcessed.setDescription('Senders Processed is the total number of senders processed.')
ex2ProtocolAnalysisBackgndAgent = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 15, 22))
if mibBuilder.loadTexts: ex2ProtocolAnalysisBackgndAgent.setStatus('current')
if mibBuilder.loadTexts: ex2ProtocolAnalysisBackgndAgent.setDescription('Performance counters for Protocol Analysis Background Agent')
ex2RecipientCacheTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 23), )
if mibBuilder.loadTexts: ex2RecipientCacheTable.setStatus('current')
if mibBuilder.loadTexts: ex2RecipientCacheTable.setDescription('Performance counters for the AD recipient cache')
ex2RecipientCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 23, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2rcInstance"))
if mibBuilder.loadTexts: ex2RecipientCacheEntry.setStatus('current')
if mibBuilder.loadTexts: ex2RecipientCacheEntry.setDescription("Performance information for one particular instance of 'MSExchange Recipient Cache' object.")
ex2rcInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 23, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rcInstance.setStatus('current')
if mibBuilder.loadTexts: ex2rcInstance.setDescription('Instance name.')
ex2rcAddressLookupsPending = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 23, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rcAddressLookupsPending.setStatus('current')
if mibBuilder.loadTexts: ex2rcAddressLookupsPending.setDescription('Address Lookups Pending is the total number of pending address lookups.')
ex2rcBatchedAddressLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 23, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rcBatchedAddressLookups.setStatus('current')
if mibBuilder.loadTexts: ex2rcBatchedAddressLookups.setDescription('Batched Address Lookups is the total number of batched address lookups.')
ex2rcExpandGroupRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 23, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rcExpandGroupRequests.setStatus('current')
if mibBuilder.loadTexts: ex2rcExpandGroupRequests.setDescription('Expand Group Requests is the total number of requests to expand groups.')
ex2rcIndividualAddressLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 23, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rcIndividualAddressLookups.setStatus('current')
if mibBuilder.loadTexts: ex2rcIndividualAddressLookups.setDescription('Individual Address Lookups is the total number of individual address lookups.')
ex2RecipientFilterAgent = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 15, 24))
if mibBuilder.loadTexts: ex2RecipientFilterAgent.setStatus('current')
if mibBuilder.loadTexts: ex2RecipientFilterAgent.setDescription('Performance counters for the Recipient Filter Agent')
ex2rfaRecipientsRejectBlockList = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 24, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rfaRecipientsRejectBlockList.setStatus('current')
if mibBuilder.loadTexts: ex2rfaRecipientsRejectBlockList.setDescription('Recipients Rejected by Block List is the total number of recipients rejected by block list.')
ex2rfaRecipientRejectBlockLstSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 24, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rfaRecipientRejectBlockLstSec.setStatus('current')
if mibBuilder.loadTexts: ex2rfaRecipientRejectBlockLstSec.setDescription('Recipients Rejected by Block List per second is the number of recipients rejected by block list per second.')
ex2rfaRecpntRejectRecipientValid = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 24, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rfaRecpntRejectRecipientValid.setStatus('current')
if mibBuilder.loadTexts: ex2rfaRecpntRejectRecipientValid.setDescription('Recipients Rejected by Recipient Validation is the total number of recipients rejected by recipient validation.')
ex2rfaRecpntRejectRecpntValidSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 24, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rfaRecpntRejectRecpntValidSec.setStatus('current')
if mibBuilder.loadTexts: ex2rfaRecpntRejectRecpntValidSec.setDescription('Recipients Rejected by Recipient Validation per second is the number of recipients rejected by recipient validation per second.')
ex2ReplicaSeederTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 25), )
if mibBuilder.loadTexts: ex2ReplicaSeederTable.setStatus('current')
if mibBuilder.loadTexts: ex2ReplicaSeederTable.setDescription('Performance counters for Replica Seeder')
ex2ReplicaSeederEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 25, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2rsInstance"))
if mibBuilder.loadTexts: ex2ReplicaSeederEntry.setStatus('current')
if mibBuilder.loadTexts: ex2ReplicaSeederEntry.setDescription("Performance information for one particular instance of 'MSExchange Replica Seeder' object.")
ex2rsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 25, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rsInstance.setStatus('current')
if mibBuilder.loadTexts: ex2rsInstance.setDescription('Instance name.')
ex2rsSeedingFinishedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 25, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rsSeedingFinishedPercent.setStatus('current')
if mibBuilder.loadTexts: ex2rsSeedingFinishedPercent.setDescription('Seeding Finished % is the finished percentage of seeding. Its value is from 0 to 100 percent.')
ex2ReplicationTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26), )
if mibBuilder.loadTexts: ex2ReplicationTable.setStatus('current')
if mibBuilder.loadTexts: ex2ReplicationTable.setDescription("A table containing performance information for instances of 'MSExchange Replication' objects.")
ex2ReplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2rInstance"))
if mibBuilder.loadTexts: ex2ReplicationEntry.setStatus('current')
if mibBuilder.loadTexts: ex2ReplicationEntry.setDescription("Performance information for one particular instance of 'MSExchange Replication' object.")
ex2rInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rInstance.setStatus('current')
if mibBuilder.loadTexts: ex2rInstance.setDescription('Instance name.')
ex2rCopyQueExceedMntThresholdCCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rCopyQueExceedMntThresholdCCR.setStatus('current')
if mibBuilder.loadTexts: ex2rCopyQueExceedMntThresholdCCR.setDescription('Copy Queue Exceeds Mount Threshold (CCR Only) is 1 if the copy queue length is larger than the Mount Threshold specified by the Auto Database Mount Dial. This counter is only used with cluster continuous replication (CCR). It will always be 0 with local continuous replication (LCR).')
ex2rCopyGenerationNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rCopyGenerationNumber.setStatus('current')
if mibBuilder.loadTexts: ex2rCopyGenerationNumber.setDescription('Copy Generation Number is the generation of the last log file which has been copied.')
ex2rCopyNotifiyGenerationNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rCopyNotifiyGenerationNumber.setStatus('current')
if mibBuilder.loadTexts: ex2rCopyNotifiyGenerationNumber.setDescription('Copy Notification Generation Number is the generation of the last log file which copier knows about.')
ex2rCopyQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rCopyQueueLength.setStatus('current')
if mibBuilder.loadTexts: ex2rCopyQueueLength.setDescription('Copy Queue Length is the number of log generations waiting to be both copied and inspected successfully.')
ex2rFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rFailed.setStatus('current')
if mibBuilder.loadTexts: ex2rFailed.setDescription('Failed is 1 if the replica instance is set to failed, otherwise 0.')
ex2rInitializing = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rInitializing.setStatus('current')
if mibBuilder.loadTexts: ex2rInitializing.setDescription('Initializing is 1 if the replica instance is in initial startup checking or incremental reseeding, otherwise 0.')
ex2rInspectorGenerationNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rInspectorGenerationNumber.setStatus('current')
if mibBuilder.loadTexts: ex2rInspectorGenerationNumber.setDescription('Inspector Generation Number is the generation of the last log file which has been inspected.')
ex2rReplayBatchSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rReplayBatchSize.setStatus('current')
if mibBuilder.loadTexts: ex2rReplayBatchSize.setDescription('Replay Batch Size is the number of log generations replayed together.')
ex2rReplayGenerationNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rReplayGenerationNumber.setStatus('current')
if mibBuilder.loadTexts: ex2rReplayGenerationNumber.setDescription('Replay Generation Number is the generation of the last log file which has been replayed successfully.')
ex2rReplayGenerationsComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rReplayGenerationsComplete.setStatus('current')
if mibBuilder.loadTexts: ex2rReplayGenerationsComplete.setDescription('Replay Generations Complete is the number of log generations already played in the current replay batch.')
ex2rReplayGenerationsPerMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rReplayGenerationsPerMinute.setStatus('current')
if mibBuilder.loadTexts: ex2rReplayGenerationsPerMinute.setDescription('Replay Generations per minute is the rate of replay in log generations per minute in the current replay batch.')
ex2rReplayGenerationsRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rReplayGenerationsRemaining.setStatus('current')
if mibBuilder.loadTexts: ex2rReplayGenerationsRemaining.setDescription('Replay Generations Remaining is the number of log generations remaining to be played in current replay batch.')
ex2rReplayNotifyGenerationNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rReplayNotifyGenerationNumber.setStatus('current')
if mibBuilder.loadTexts: ex2rReplayNotifyGenerationNumber.setDescription('Replay Notification Generation Number is the generation of the last log file that the Microsoft Exchange Replication service knows about.')
ex2rReplayQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rReplayQueueLength.setStatus('current')
if mibBuilder.loadTexts: ex2rReplayQueueLength.setDescription('Replay Queue Length is the number of log generations waiting to be replayed.')
ex2rSuspended = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rSuspended.setStatus('current')
if mibBuilder.loadTexts: ex2rSuspended.setDescription('Suspended is 1 if the continuous replication is suspended. When the continuous replication is suspended logs are not being copied and replayed into the passive copy.')
ex2rTruncatedGenerationNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 26, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rTruncatedGenerationNumber.setStatus('current')
if mibBuilder.loadTexts: ex2rTruncatedGenerationNumber.setDescription('Truncated Generation Number is the generation of the last log file to which truncation has been completed.')
ex2ResourceBooking = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 15, 27))
if mibBuilder.loadTexts: ex2ResourceBooking.setStatus('current')
if mibBuilder.loadTexts: ex2ResourceBooking.setDescription('Performance counters for the Microsoft Exchange Resource Booking Attendant')
ex2rbAccepted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 27, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rbAccepted.setStatus('current')
if mibBuilder.loadTexts: ex2rbAccepted.setDescription('Accepted is the total number of meeting requests accepted by Resource Booking Attendant.')
ex2rbAvgResourceBookProcessTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 27, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rbAvgResourceBookProcessTime.setStatus('current')
if mibBuilder.loadTexts: ex2rbAvgResourceBookProcessTime.setDescription('Average Resource Booking Processing Time is the average time to process an event in the Resource Booking Attendant.')
ex2rbCancelled = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 27, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rbCancelled.setStatus('current')
if mibBuilder.loadTexts: ex2rbCancelled.setDescription('Cancelled is the total number of meeting cancellations processed by Resource Booking Attendant.')
ex2rbDeclined = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 27, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rbDeclined.setStatus('current')
if mibBuilder.loadTexts: ex2rbDeclined.setDescription('Declined is the total number of meeting requests declined by Resource Booking Attendant.')
ex2rbEvents = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 27, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rbEvents.setStatus('current')
if mibBuilder.loadTexts: ex2rbEvents.setDescription('Events is the total number of events submitted to Resource Booking Attendant for processing.')
ex2rbRequestsFailed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 27, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rbRequestsFailed.setStatus('current')
if mibBuilder.loadTexts: ex2rbRequestsFailed.setDescription('Requests Failed is the total number of failures that occurred while Resource Booking Attendant was processing events.')
ex2rbRequestsProcessed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 27, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rbRequestsProcessed.setStatus('current')
if mibBuilder.loadTexts: ex2rbRequestsProcessed.setDescription('Requests Processed is the total number of meeting requests processed by Resource Booking Attendant.')
ex2rbRequestsSubmitted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 27, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2rbRequestsSubmitted.setStatus('current')
if mibBuilder.loadTexts: ex2rbRequestsSubmitted.setDescription('Requests Submitted is the total number of meeting requests submitted to Resource Booking Attendant for processing.')
ex2SearchIndexer = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 15, 28))
if mibBuilder.loadTexts: ex2SearchIndexer.setStatus('current')
if mibBuilder.loadTexts: ex2SearchIndexer.setDescription('Performance counters for Exchange Search Indexer (MSExchangeSearch)')
ex2sAverageBatchLatency = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 28, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sAverageBatchLatency.setStatus('current')
if mibBuilder.loadTexts: ex2sAverageBatchLatency.setDescription('Average Batch Latency is the average latency (in seconds) between the time a document batch is given to the Microsoft Exchange Search Indexer service and when that document batch has been completely processed.')
ex2siAverageBatchSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 28, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siAverageBatchSize.setStatus('current')
if mibBuilder.loadTexts: ex2siAverageBatchSize.setDescription('Average Batch Size is the average size of the document batches that are indexed through the Microsoft Exchange Search Indexer service.')
ex2siNumberDatabasesBeingCrawled = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 28, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siNumberDatabasesBeingCrawled.setStatus('current')
if mibBuilder.loadTexts: ex2siNumberDatabasesBeingCrawled.setDescription('Number of Databases Being Crawled is the total number of databases that are being crawled currently.')
ex2siNumberDatabasesBeingIndexed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 28, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siNumberDatabasesBeingIndexed.setStatus('current')
if mibBuilder.loadTexts: ex2siNumberDatabasesBeingIndexed.setDescription('Number of Databases Being Indexed is the total number of databases that are being actively indexed by Exchange Search Indexer.')
ex2siNumberOfDisabledDatabases = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 28, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siNumberOfDisabledDatabases.setStatus('current')
if mibBuilder.loadTexts: ex2siNumberOfDisabledDatabases.setDescription('Number of Disabled Databases is the total number of databases that are currently disabled in Exchange Search Indexer configuration.')
ex2siNumIndexDatabaseUpDateNotif = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 28, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siNumIndexDatabaseUpDateNotif.setStatus('current')
if mibBuilder.loadTexts: ex2siNumIndexDatabaseUpDateNotif.setDescription('Number of Indexed Databases Being Kept Up-to-Date by Notifications is the total number of databases whose content index is currently kept up-to-date by notifications.')
ex2SearchIndicesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29), )
if mibBuilder.loadTexts: ex2SearchIndicesTable.setStatus('current')
if mibBuilder.loadTexts: ex2SearchIndicesTable.setDescription('Performance counters for the Exchange Search Indexer (MSExchangeSearch) search indices.')
ex2SearchIndicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2sidInstance"))
if mibBuilder.loadTexts: ex2SearchIndicesEntry.setStatus('current')
if mibBuilder.loadTexts: ex2SearchIndicesEntry.setDescription("Performance information for one particular instance of 'MSExchange Search Indices' object.")
ex2sidInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidInstance.setStatus('current')
if mibBuilder.loadTexts: ex2sidInstance.setDescription('Instance name.')
ex2sidAgeLastNotificationIndexed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidAgeLastNotificationIndexed.setStatus('current')
if mibBuilder.loadTexts: ex2sidAgeLastNotificationIndexed.setDescription('Age of the Last Notification Indexed is the age (in seconds) of the last notification we have successfully indexed for the given database.')
ex2sidAgeLastNotificationProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidAgeLastNotificationProcess.setStatus('current')
if mibBuilder.loadTexts: ex2sidAgeLastNotificationProcess.setDescription('Age of the Last Notification Processed is the age (in seconds) of the last notification we have successfully processed for the given database.')
ex2sidAvgLatencyRPCsDuringCrawl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidAvgLatencyRPCsDuringCrawl.setStatus('current')
if mibBuilder.loadTexts: ex2sidAvgLatencyRPCsDuringCrawl.setDescription('Average Latency of RPCs During Crawling is the average latency of RPCs (in milliseconds) to the Exchange Information Store service. These calls are used for crawling purposes for the given database.')
ex2sidAvgLatencyRPCObtainContent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidAvgLatencyRPCObtainContent.setStatus('current')
if mibBuilder.loadTexts: ex2sidAvgLatencyRPCObtainContent.setDescription('Average Latency of RPCs Used to Obtain Content is the average latency (in milliseconds) of RPC calls to the Exchange Information Store service. These calls are used to obtain content for the filter daemon for the given database.')
ex2sidAverageDocumentIndexngTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidAverageDocumentIndexngTime.setStatus('current')
if mibBuilder.loadTexts: ex2sidAverageDocumentIndexngTime.setDescription('Average Document Indexing Time is the average (in milliseconds) of how long it takes to index documents.')
ex2sidAvgLatencyRPCsToGetNotific = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidAvgLatencyRPCsToGetNotific.setStatus('current')
if mibBuilder.loadTexts: ex2sidAvgLatencyRPCsToGetNotific.setDescription('Average Latency of RPCs Used to Obtain Notifications is the average latency (in milliseconds) of RPC calls to the Exchange Information Store service. These calls are used to obtain new notifications for the given database.')
ex2sidAvgSizeOfIndexedAttachment = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidAvgSizeOfIndexedAttachment.setStatus('current')
if mibBuilder.loadTexts: ex2sidAvgSizeOfIndexedAttachment.setDescription('Average Size of Indexed Attachments is the average size of attachments that have been content indexed since the filter daemon started.')
ex2sidDocumentIndexingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidDocumentIndexingRate.setStatus('current')
if mibBuilder.loadTexts: ex2sidDocumentIndexingRate.setDescription('Document Indexing Rate is the rate at which documents are indexed (number of documents successfully indexed per second).')
ex2sidFullCrawlModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidFullCrawlModeStatus.setStatus('current')
if mibBuilder.loadTexts: ex2sidFullCrawlModeStatus.setDescription('Full Crawl Mode Status indicates whether this MDB is going through a full crawl (value=1) or not (value=0).')
ex2sidNumContentConversionsDone = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumContentConversionsDone.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumContentConversionsDone.setDescription('Number of Content Conversions Done is the total number of content conversions that have been done in the filter daemon since the Exchange Content Indexing service started.')
ex2sidNumCreateNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumCreateNotifications.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumCreateNotifications.setDescription('Number of Create Notifications is the total number of create notifications received by MSSearch.')
ex2sidNumCreateNotificationPrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumCreateNotificationPrSec.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumCreateNotificationPrSec.setDescription('Number of Create Notifications/sec is the number of create notifications received by MSSearch per second.')
ex2sidNumDeleteNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumDeleteNotifications.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumDeleteNotifications.setDescription('Number of Delete Notifications is the total number of delete notifications received by MSSearch.')
ex2sidNumDeleteNotificationPrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumDeleteNotificationPrSec.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumDeleteNotificationPrSec.setDescription('Number of Delete Notifications/sec is the number of delete notifications received by MSSearch per second.')
ex2sidNumDocumentsSuccessIndexed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumDocumentsSuccessIndexed.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumDocumentsSuccessIndexed.setDescription('Number of Documents Successfully Indexed is the total number of documents that have been successfully indexed since the Exchange Search Indexer started.')
ex2sidNumDocumentFailDuringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumDocumentFailDuringIndex.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumDocumentFailDuringIndex.setDescription('Number of Documents That Failed During Indexing is the total number of documents that have not been indexed since the Exchange Search Indexer started.')
ex2sidNumberOfFailedRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumberOfFailedRetries.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumberOfFailedRetries.setDescription('Number of Failed Retries is the total number of retries that have failed for documents that originally failed during indexing.')
ex2sidNumberOfHTMLMessageBodies = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumberOfHTMLMessageBodies.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumberOfHTMLMessageBodies.setDescription('Number of HTML Message Bodies is the total number of HTML message bodies that have been content indexed since the filter daemon started.')
ex2sidNumberOfIndexedAttachments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumberOfIndexedAttachments.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumberOfIndexedAttachments.setDescription('Number of Indexed Attachments is the total number of attachments that have been content indexed since the filter daemon started.')
ex2sidNumItemInNotificationQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumItemInNotificationQueue.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumItemInNotificationQueue.setDescription('Number of Items in a Notification Queue is the total number of items (notifications) that are in a notification queue.')
ex2sidNumMailboxesLeftToCrawl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumMailboxesLeftToCrawl.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumMailboxesLeftToCrawl.setDescription('Number of Mailboxes Left to Crawl is the total number of mailboxes that are left to be crawled on this database.')
ex2sidNumberOfMoveNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumberOfMoveNotifications.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumberOfMoveNotifications.setDescription('Number of Move Notifications is the total number of move notifications received by MSSearch.')
ex2sidNumMoveNotificationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumMoveNotificationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumMoveNotificationsPerSec.setDescription('Number of Move Notifications/sec is the number of move notifications received by MSSearch per second.')
ex2sidNumberOfOutstandingBatches = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumberOfOutstandingBatches.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumberOfOutstandingBatches.setDescription('Number of Outstanding Batches is the total number of batches sent to MSSearch that are still being processed.')
ex2sidNumOutstandingDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumOutstandingDocuments.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumOutstandingDocuments.setDescription('Number of Outstanding Documents is the total number of documents that are being actively indexed.')
ex2sidNumPlainTextMessageBodies = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumPlainTextMessageBodies.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumPlainTextMessageBodies.setDescription('Number of Plain Text Message Bodies is the total number of plain text format message bodies that have been content indexed since the filter daemon started.')
ex2sidNumberOfRTFMessageBodies = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumberOfRTFMessageBodies.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumberOfRTFMessageBodies.setDescription('Number of RTF Message Bodies is the total number of rich text format (RTF) message bodies that have been content indexed since the filter daemon started.')
ex2sidNumRecentMoveMailboxCrawl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumRecentMoveMailboxCrawl.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumRecentMoveMailboxCrawl.setDescription('Number of Recently Moved Mailboxes Being Crawled is the total number of mailboxes recently moved to this database that are being crawled.')
ex2sidNumberOfRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumberOfRetries.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumberOfRetries.setDescription('Number of Retries is the total number of retries that have been tried for the documents that have failed during indexing.')
ex2sidNumberOfSuccessfulRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumberOfSuccessfulRetries.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumberOfSuccessfulRetries.setDescription('Number of Successful Retries is the total number of retries that have succeeded for documents that originally failed during indexing.')
ex2sidNumUpdateNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumUpdateNotifications.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumUpdateNotifications.setDescription('Number of Update Notifications is the total number of update notifications received by MSSearch.')
ex2sidNumUpdateNotificationPrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidNumUpdateNotificationPrSec.setStatus('current')
if mibBuilder.loadTexts: ex2sidNumUpdateNotificationPrSec.setDescription('Number of Update Notifications/sec is the number of update notifications received by MSSearch per second.')
ex2sidPercentageNotificOptimize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidPercentageNotificOptimize.setStatus('current')
if mibBuilder.loadTexts: ex2sidPercentageNotificOptimize.setDescription('Percentage of Notifications Optimized is the percentage of notifications that were optimized (marked as done without being processed).')
ex2sidRecentAvgLatencyRPCUseObta = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidRecentAvgLatencyRPCUseObta.setStatus('current')
if mibBuilder.loadTexts: ex2sidRecentAvgLatencyRPCUseObta.setDescription('Recent Average Latency of RPCs Used to Obtain Content is the average latency (in milliseconds) of the most recent RPCs to the Exchange Information Store service. These RPCs are used to get content for the filter daemon for the given database.')
ex2sidThrottlingDelayValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 29, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sidThrottlingDelayValue.setStatus('current')
if mibBuilder.loadTexts: ex2sidThrottlingDelayValue.setDescription('Throttling Delay Value is the total Total time (in milliseconds) a worker thread sleeps before it retrieves a document from the Exchange Information Store service. This is set by the throttling monitor thread.')
ex2SecureMailTransportTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 30), )
if mibBuilder.loadTexts: ex2SecureMailTransportTable.setStatus('current')
if mibBuilder.loadTexts: ex2SecureMailTransportTable.setDescription("A table containing performance information for instances of 'MSExchange Secure Mail Transport' objects.")
ex2SecureMailTransportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 30, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2smtInstance"))
if mibBuilder.loadTexts: ex2SecureMailTransportEntry.setStatus('current')
if mibBuilder.loadTexts: ex2SecureMailTransportEntry.setDescription("Performance information for one particular instance of 'MSExchange Secure Mail Transport' object.")
ex2smtInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 30, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2smtInstance.setStatus('current')
if mibBuilder.loadTexts: ex2smtInstance.setDescription('Instance name.')
ex2smtDomainSecureMessageReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 30, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2smtDomainSecureMessageReceive.setStatus('current')
if mibBuilder.loadTexts: ex2smtDomainSecureMessageReceive.setDescription('Domain Secure Messages Received is the number of domain-secured messages received by the SMTP server.')
ex2smtDomainSecureMessagesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 30, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2smtDomainSecureMessagesSent.setStatus('current')
if mibBuilder.loadTexts: ex2smtDomainSecureMessagesSent.setDescription('Domain Secure Messages Sent is the number of domain-secured messages sent by the SMTP server.')
ex2smtDomSecureOutbndSessionFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 30, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2smtDomSecureOutbndSessionFail.setStatus('current')
if mibBuilder.loadTexts: ex2smtDomSecureOutbndSessionFail.setDescription('Domain Secure Outbound Session Failures is the number of domain-secured outbound session failures.')
ex2SenderFilterAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 15, 31))
ex2sfaMessagesEvalBySenderFilter = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 31, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sfaMessagesEvalBySenderFilter.setStatus('current')
if mibBuilder.loadTexts: ex2sfaMessagesEvalBySenderFilter.setDescription('Messages Evaluated by Sender Filter is the total number of messages evaluated by the Sender Filter agent.')
ex2sfaMsgEvaluatSendFilterPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 31, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sfaMsgEvaluatSendFilterPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2sfaMsgEvaluatSendFilterPerSec.setDescription('Messages Evaluated by Sender Filter per second is the number of messages evaluated by the Sender Filter agent per second.')
ex2sfaMsgFilteredBySenderFilter = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 31, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sfaMsgFilteredBySenderFilter.setStatus('current')
if mibBuilder.loadTexts: ex2sfaMsgFilteredBySenderFilter.setDescription('Messages Filtered by Sender Filter is the total number of messages filtered by the Sender Filter agent.')
ex2sfaMsgFilterSenderFilterPrSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 31, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sfaMsgFilterSenderFilterPrSec.setStatus('current')
if mibBuilder.loadTexts: ex2sfaMsgFilterSenderFilterPrSec.setDescription('Messages Filtered by Sender Filter per second is the number of messages filtered by the Sender Filter agent per second.')
ex2SenderIdAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32))
ex2siaDNSQueries = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaDNSQueries.setStatus('current')
if mibBuilder.loadTexts: ex2siaDNSQueries.setDescription('DNS Queries is the total number of DNS queries performed by the Sender Id agent.')
ex2siaDNSQueriesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaDNSQueriesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2siaDNSQueriesPerSec.setDescription('DNS Queries per second is the number of DNS queries per second performed by the Sender Id agent.')
ex2siaMsgMissingOriginatingIP = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgMissingOriginatingIP.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgMissingOriginatingIP.setDescription('Messages Missing Originating IP is the total number of messages for which the originating IP could not be determined.')
ex2siaMsgMissngOriginateIPPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgMissngOriginateIPPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgMissngOriginateIPPerSec.setDescription('Messages Missing Originating IP per second is the number of messages per second for which the originating IP could not be determined.')
ex2siaMsgThatBypassedValidation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgThatBypassedValidation.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgThatBypassedValidation.setDescription('Messages That Bypassed Validation is the total number of messages that bypassed validation by the Sender Id agent.')
ex2siaMsgThatBypassValidatePrSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgThatBypassValidatePrSec.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgThatBypassValidatePrSec.setDescription('Messages That Bypassed Validation per second is the number of messages that bypassed validation per second.')
ex2siaMessagesValidated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMessagesValidated.setStatus('current')
if mibBuilder.loadTexts: ex2siaMessagesValidated.setDescription('Messages Validated is the total number of messages validated by the Sender Id agent.')
ex2siaMsgValidFailMalformDomRes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgValidFailMalformDomRes.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgValidFailMalformDomRes.setDescription('Messages Validated with a Fail - Malformed Domain Result is the total number of messages validated with a result of Fail - Malformed Domain.')
ex2siaMsgValidFailNonExistDomRes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgValidFailNonExistDomRes.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgValidFailNonExistDomRes.setDescription('Messages Validated with a Fail - Non-Existent Domain Result is the number of messages validated with a result of Fail - Non-existent Domain.')
ex2siaMsgValidFailNotPermittRes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgValidFailNotPermittRes.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgValidFailNotPermittRes.setDescription('Messages Validated with a Fail - Not Permitted Result is the total number of messages validated with a result of Fail - Not Permitted.')
ex2siaMsgValidWithANeutralResult = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgValidWithANeutralResult.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgValidWithANeutralResult.setDescription('Messages Validated with a Neutral Result is the total number of messages validated with a result of Neutral.')
ex2siaMsgValidWithANoneResult = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgValidWithANoneResult.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgValidWithANoneResult.setDescription('Messages Validated with a None Result is the total number of messages validated with a result of None.')
ex2siaMsgValidWithAPassResult = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgValidWithAPassResult.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgValidWithAPassResult.setDescription('Messages Validated with a Pass Result is the total number of messages validated with a result of Pass.')
ex2siaMsgValidPermErrorResult = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgValidPermErrorResult.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgValidPermErrorResult.setDescription('Messages Validated with a PermError Result is the total number of messages validated with a result of PermError.')
ex2siaMsgValidSoftFailResult = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgValidSoftFailResult.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgValidSoftFailResult.setDescription('Messages Validated with a SoftFail Result is the total number of messages validated with a result of SoftFail.')
ex2siaMsgValidTempErrorResult = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgValidTempErrorResult.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgValidTempErrorResult.setDescription('Messages Validated with a TempError Result is the total number of messages validated with a result of TempError.')
ex2siaMessagesValidatedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMessagesValidatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2siaMessagesValidatedPerSec.setDescription('Messages Validated per second is the number of messages validated per second.')
ex2siaMsgValidFailMlfrmDomResSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgValidFailMlfrmDomResSec.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgValidFailMlfrmDomResSec.setDescription('Messages Validated per Second with a Fail - Malformed Result is the number of messages validated per second with a result of Fail - Malformed Domain.')
ex2siaMsgValidFailNExstDomResSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgValidFailNExstDomResSec.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgValidFailNExstDomResSec.setDescription('Messages Validated per Second with a Fail - Non-Existent Domain Result is the number of messages validated per second with a result of Fail - Non-existent Domain.')
ex2siaMsgValidFailNotPermitRes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgValidFailNotPermitRes.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgValidFailNotPermitRes.setDescription('Messages Validated per Second with a Fail Not - Permitted Result is the number of messages validated per second with a result of Fail - Not Permitted.')
ex2siaMsgValidPerSecNeutrlResult = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgValidPerSecNeutrlResult.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgValidPerSecNeutrlResult.setDescription('Messages Validated per Second with a Neutral Result is the number of messages validated per second with a result of Neutral.')
ex2siaMsgValidPerSecNoneResult = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgValidPerSecNoneResult.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgValidPerSecNoneResult.setDescription('Messages Validated per Second with a None Result is the number of messages validated per second with a result of None.')
ex2siaMsgValidPerSecPassResult = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgValidPerSecPassResult.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgValidPerSecPassResult.setDescription('Messages Validated per Second with a Pass Result is the number of messages validated per second with a result of Pass.')
ex2siaMsgValidSecPermErrorResult = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgValidSecPermErrorResult.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgValidSecPermErrorResult.setDescription('Messages Validated per Second with a PermError Result is the number of messages validated per second with a result of PermError.')
ex2siaMsgValidPerSecSoftFailRes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgValidPerSecSoftFailRes.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgValidPerSecSoftFailRes.setDescription('Messages Validated per Second with a SoftFail Result is the number of messages validated per second with a result of SoftFail.')
ex2siaMsgValidSecTempErrorResult = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMsgValidSecTempErrorResult.setStatus('current')
if mibBuilder.loadTexts: ex2siaMsgValidSecTempErrorResult.setDescription('Messages Validated per Second with a TempError Result is the number of messages validated per second with a result of TempError.')
ex2siaMessagesWithNoPRAPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMessagesWithNoPRAPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2siaMessagesWithNoPRAPerSec.setDescription('Messages With No PRA per second is the number of messages per second that do not have a valid PRA.')
ex2siaMessagesWithNoPRA = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 32, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2siaMessagesWithNoPRA.setStatus('current')
if mibBuilder.loadTexts: ex2siaMessagesWithNoPRA.setDescription('Messages with No PRA is the total number of messages that do not have a valid PRA.')
ex2StoreDriverTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33), )
if mibBuilder.loadTexts: ex2StoreDriverTable.setStatus('current')
if mibBuilder.loadTexts: ex2StoreDriverTable.setDescription("A table containing performance information for instances of 'MSExchange Store Driver' objects.")
ex2StoreDriverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2sdInstance"))
if mibBuilder.loadTexts: ex2StoreDriverEntry.setStatus('current')
if mibBuilder.loadTexts: ex2StoreDriverEntry.setDescription("Performance information for one particular instance of 'MSExchange Store Driver' object.")
ex2sdInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdInstance.setStatus('current')
if mibBuilder.loadTexts: ex2sdInstance.setDescription('Instance name.')
ex2sdInboundBytesDelivered = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdInboundBytesDelivered.setStatus('current')
if mibBuilder.loadTexts: ex2sdInboundBytesDelivered.setDescription('Inbound: Bytes Delivered is the number of bytes delivered.')
ex2sdInboundDuplicateDeliveries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdInboundDuplicateDeliveries.setStatus('current')
if mibBuilder.loadTexts: ex2sdInboundDuplicateDeliveries.setDescription('Inbound: Duplicate Deliveries detected by store.')
ex2sdInboundFailedRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdInboundFailedRecipients.setStatus('current')
if mibBuilder.loadTexts: ex2sdInboundFailedRecipients.setDescription('Inbound: Failed Recipients is the number of failed deliveries.')
ex2sdInboundLocalDeliveryCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdInboundLocalDeliveryCalls.setStatus('current')
if mibBuilder.loadTexts: ex2sdInboundLocalDeliveryCalls.setDescription('Inbound: Local Delivery Calls is the number of local delivery calls.')
ex2sdInboundLocalDelivCallSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdInboundLocalDelivCallSecond.setStatus('current')
if mibBuilder.loadTexts: ex2sdInboundLocalDelivCallSecond.setDescription('Local delivery calls per second')
ex2sdInboundMsgDeliveryAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdInboundMsgDeliveryAttempts.setStatus('current')
if mibBuilder.loadTexts: ex2sdInboundMsgDeliveryAttempts.setDescription('Inbound: Message Delivery Attempts is the number of attempt for delivering transport mailitem.')
ex2sdInboundMsgDelvrAttmptSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdInboundMsgDelvrAttmptSecond.setStatus('current')
if mibBuilder.loadTexts: ex2sdInboundMsgDelvrAttmptSecond.setDescription('Inbound: Message Delivery Attempts Per Second is the number of attempts for delivering transport mailitem per second.')
ex2sdInboundNumDeliveringThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdInboundNumDeliveringThreads.setStatus('current')
if mibBuilder.loadTexts: ex2sdInboundNumDeliveringThreads.setDescription('Inbound: Number of Delivering Threads is the number of threads in delivery.')
ex2sdInboundRecipientsDelivered = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdInboundRecipientsDelivered.setStatus('current')
if mibBuilder.loadTexts: ex2sdInboundRecipientsDelivered.setDescription('Recipients delivered')
ex2sdInboundRecipntDeliverSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdInboundRecipntDeliverSecond.setStatus('current')
if mibBuilder.loadTexts: ex2sdInboundRecipntDeliverSecond.setDescription('Recipients delivered per second')
ex2sdInboundReroutedRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdInboundReroutedRecipients.setStatus('current')
if mibBuilder.loadTexts: ex2sdInboundReroutedRecipients.setDescription('Inbound: Rerouted Recipients is the number of delivery reroutes.')
ex2sdInboundRetriedRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdInboundRetriedRecipients.setStatus('current')
if mibBuilder.loadTexts: ex2sdInboundRetriedRecipients.setDescription('Inbound: Retried Recipients is the number of delivery retries.')
ex2sdInboundSucceededRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdInboundSucceededRecipients.setStatus('current')
if mibBuilder.loadTexts: ex2sdInboundSucceededRecipients.setDescription('Inbound: Succeeded Recipients is the number of successful deliveries.')
ex2sdInboundTotalMeetingFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdInboundTotalMeetingFailures.setStatus('current')
if mibBuilder.loadTexts: ex2sdInboundTotalMeetingFailures.setDescription('Inbound: Total Meeting Failures is the number of errors seen while processing meeting messages.')
ex2sdInboundTotalMeetingMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdInboundTotalMeetingMessages.setStatus('current')
if mibBuilder.loadTexts: ex2sdInboundTotalMeetingMessages.setDescription('Inbound: Total Meeting Messages is the total number of meeting messages processed.')
ex2sdOutboundMapiEventWithoutMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdOutboundMapiEventWithoutMsg.setStatus('current')
if mibBuilder.loadTexts: ex2sdOutboundMapiEventWithoutMsg.setDescription('Outbound: Mapi Events Without Message is the number of submitted MAPI events without message item.')
ex2sdOutboundSubmittedMailItems = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdOutboundSubmittedMailItems.setStatus('current')
if mibBuilder.loadTexts: ex2sdOutboundSubmittedMailItems.setDescription('Outbound: Submitted Mail Items is the number of submitted mail items.')
ex2sdOutboundSubmtMailItemSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdOutboundSubmtMailItemSecond.setStatus('current')
if mibBuilder.loadTexts: ex2sdOutboundSubmtMailItemSecond.setDescription('Outbound: Submitted Mail Items Per Second is the number of mail items per second being submitted.')
ex2sdOutboundTotalRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 33, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sdOutboundTotalRecipients.setStatus('current')
if mibBuilder.loadTexts: ex2sdOutboundTotalRecipients.setDescription('Outbound: Total Recipients is the total number of recipients handled.')
ex2StoreInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34), )
if mibBuilder.loadTexts: ex2StoreInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: ex2StoreInterfaceTable.setDescription("A table containing performance information for instances of 'MSExchange Store Interface' objects.")
ex2StoreInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2sifInstance"))
if mibBuilder.loadTexts: ex2StoreInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: ex2StoreInterfaceEntry.setDescription("Performance information for one particular instance of 'MSExchange Store Interface' object.")
ex2sifInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifInstance.setStatus('current')
if mibBuilder.loadTexts: ex2sifInstance.setDescription('Instance name.')
ex2sifConnCacheActiveConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifConnCacheActiveConns.setStatus('current')
if mibBuilder.loadTexts: ex2sifConnCacheActiveConns.setDescription('ConnectionCache active connections is the number of active connections in all connection caches.')
ex2sifConnCacheIdleConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifConnCacheIdleConns.setStatus('current')
if mibBuilder.loadTexts: ex2sifConnCacheIdleConns.setDescription('ConnectionCache idle connections is the number of idle connections in all connection caches.')
ex2sifConnectionCacheNumCaches = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifConnectionCacheNumCaches.setStatus('current')
if mibBuilder.loadTexts: ex2sifConnectionCacheNumCaches.setDescription('ConnectionCache num caches is the total number of ConnectionCache objects.')
ex2sifConnCacheOutLimitCreations = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifConnCacheOutLimitCreations.setStatus('current')
if mibBuilder.loadTexts: ex2sifConnCacheOutLimitCreations.setDescription('Some instances of connection caches allow creation of extra connections even if all slots in cache are occupied. This counter shows number of cases when such connections were created.')
ex2sifConnCacheTotalCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifConnCacheTotalCapacity.setStatus('current')
if mibBuilder.loadTexts: ex2sifConnCacheTotalCapacity.setDescription('ConnectionCache total capacity is the total capacity of all ConnectionCache objects.')
ex2sifExRpcConnCreationEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifExRpcConnCreationEvents.setStatus('current')
if mibBuilder.loadTexts: ex2sifExRpcConnCreationEvents.setDescription('Number of ExRpcConnection objects creation events.')
ex2sifExRpcConnDisposalEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifExRpcConnDisposalEvents.setStatus('current')
if mibBuilder.loadTexts: ex2sifExRpcConnDisposalEvents.setDescription('Number of ExRpcConnection objects disposal events.')
ex2sifExRpcConnectionOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifExRpcConnectionOutstanding.setStatus('current')
if mibBuilder.loadTexts: ex2sifExRpcConnectionOutstanding.setDescription('ExRpcConnection outstanding is the total number of outstanding ExRpcConnection objects. This value shows number of managed connection objects in GC heap.')
ex2sifROPRequestsComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifROPRequestsComplete.setStatus('current')
if mibBuilder.loadTexts: ex2sifROPRequestsComplete.setDescription('ROP Requests complete is the total number of completed ROP requests.')
ex2sifROPRequestsOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifROPRequestsOutstanding.setStatus('current')
if mibBuilder.loadTexts: ex2sifROPRequestsOutstanding.setDescription('ROP Requests outstanding is the total number of outstanding ROP requests.')
ex2sifROPRequestsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifROPRequestsSent.setStatus('current')
if mibBuilder.loadTexts: ex2sifROPRequestsSent.setDescription('ROP Requests sent is the total number of ROP requests, buffered for delivery.')
ex2sifRPCBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifRPCBytesReceived.setStatus('current')
if mibBuilder.loadTexts: ex2sifRPCBytesReceived.setDescription('RPC Bytes received is the total number of bytes, received from the server since exrpc32 was loaded.')
ex2sifRPCBytesReceivedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifRPCBytesReceivedAverage.setStatus('current')
if mibBuilder.loadTexts: ex2sifRPCBytesReceivedAverage.setDescription('RPC Bytes received average is the average number of bytes, received from the server in one succeeded RPC call.')
ex2sifRPCBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifRPCBytesSent.setStatus('current')
if mibBuilder.loadTexts: ex2sifRPCBytesSent.setDescription('RPC Bytes sent is the total number of bytes, sent to the server since exrpc32 was loaded.')
ex2sifRPCBytesSentAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifRPCBytesSentAverage.setStatus('current')
if mibBuilder.loadTexts: ex2sifRPCBytesSentAverage.setDescription('RPC Bytes sent average is the average number of bytes, sent to the server in one RPC call.')
ex2sifRPCLatencyAverageMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifRPCLatencyAverageMsec.setStatus('current')
if mibBuilder.loadTexts: ex2sifRPCLatencyAverageMsec.setDescription('RPC Latency average (msec) is the average latency in milliseconds of RPC requests. Average is calculated over all RPCs since exrpc32 was loaded.')
ex2sifRPCLatencyTotalMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifRPCLatencyTotalMsec.setStatus('current')
if mibBuilder.loadTexts: ex2sifRPCLatencyTotalMsec.setDescription('RPC Latency total (msec) is the total amount of time in milliseconds spent inside RPC calls. Note that since many threads can call PRCs at the same time, this value can grow faster than elapsed time.')
ex2sifRPCRequestsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifRPCRequestsFailed.setStatus('current')
if mibBuilder.loadTexts: ex2sifRPCRequestsFailed.setDescription('RPC Requests failed is the total number of RPC requests that returned with non 0 result from the server.')
ex2sifRPCRequestsFailedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifRPCRequestsFailedPercent.setStatus('current')
if mibBuilder.loadTexts: ex2sifRPCRequestsFailedPercent.setDescription('RPC Requests failed (%) is the percent of failed requests in total number of RPC requests. Here, failed means the sum of failed with error code plus failed with exception.')
ex2sifRPCRequestsFailedException = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifRPCRequestsFailedException.setStatus('current')
if mibBuilder.loadTexts: ex2sifRPCRequestsFailedException.setDescription('Total number of RPC requests that failed with exception.')
ex2sifRPCRequestsOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifRPCRequestsOutstanding.setStatus('current')
if mibBuilder.loadTexts: ex2sifRPCRequestsOutstanding.setDescription('RPC Requests outstanding is the current number of outstanding RPC requests.')
ex2sifRPCRequestsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifRPCRequestsSent.setStatus('current')
if mibBuilder.loadTexts: ex2sifRPCRequestsSent.setDescription('RPC Requests sent is the total number of initiated RPC requests.')
ex2sifRPCRequestsSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifRPCRequestsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2sifRPCRequestsSentPerSec.setDescription('RPC Requests sent/sec is the current rate of initiated RPC requests per second.')
ex2sifRPCRequestsSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifRPCRequestsSucceeded.setStatus('current')
if mibBuilder.loadTexts: ex2sifRPCRequestsSucceeded.setDescription('RPC Requests succeeded is the total number of succeeded RPC requests (ec == 0).')
ex2sifRPCSlowRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifRPCSlowRequests.setStatus('current')
if mibBuilder.loadTexts: ex2sifRPCSlowRequests.setDescription('RPC Slow requests is the total number of slow RPC requests.')
ex2sifRPCSlowRequestsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifRPCSlowRequestsPercent.setStatus('current')
if mibBuilder.loadTexts: ex2sifRPCSlowRequestsPercent.setDescription('RPC Slow requests (%) is the percent of slow RPC requests among all RPC requests.')
ex2sifRPCSlowReqLatencyAvgMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifRPCSlowReqLatencyAvgMsec.setStatus('current')
if mibBuilder.loadTexts: ex2sifRPCSlowReqLatencyAvgMsec.setDescription('RPC Slow requests latency average (msec) is the average latency in milliseconds of slow RPC requests.')
ex2sifRPCSlowReqLatencyTotalMsec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifRPCSlowReqLatencyTotalMsec.setStatus('current')
if mibBuilder.loadTexts: ex2sifRPCSlowReqLatencyTotalMsec.setDescription('RPC Slow requests latency total (msec) is the total amount of time in milliseconds spent inside slow RPC calls.')
ex2sifUNKFolders = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifUNKFolders.setStatus('current')
if mibBuilder.loadTexts: ex2sifUNKFolders.setDescription('UNK Folders is the current number of Folder objects. (C++ objects in exrpc32.)')
ex2sifUNKLogons = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifUNKLogons.setStatus('current')
if mibBuilder.loadTexts: ex2sifUNKLogons.setDescription('UNK Logons is the current number of Logon objects. (C++ objects in exrpc32.)')
ex2sifUNKMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifUNKMessages.setStatus('current')
if mibBuilder.loadTexts: ex2sifUNKMessages.setDescription('UNK Messages is the current number of Message objects. (C++ objects in exrpc32.)')
ex2sifUNKObjectsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 34, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2sifUNKObjectsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2sifUNKObjectsTotal.setDescription('UNK Objects total is the current number of all objects that are derived from UNK. (C++ objects in exrpc32.)')
ex2TopologyTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 35), )
if mibBuilder.loadTexts: ex2TopologyTable.setStatus('current')
if mibBuilder.loadTexts: ex2TopologyTable.setDescription("A table containing performance information for instances of 'MSExchange Topology' objects.")
ex2TopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 35, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2tpInstance"))
if mibBuilder.loadTexts: ex2TopologyEntry.setStatus('current')
if mibBuilder.loadTexts: ex2TopologyEntry.setDescription("Performance information for one particular instance of 'MSExchange Topology' object.")
ex2tpInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 35, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tpInstance.setStatus('current')
if mibBuilder.loadTexts: ex2tpInstance.setDescription('Instance name.')
ex2tpLatestExchgTopologyDisTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 35, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tpLatestExchgTopologyDisTime.setStatus('current')
if mibBuilder.loadTexts: ex2tpLatestExchgTopologyDisTime.setDescription('Latest Exchange Topology Discovery Time in Seconds')
ex2tpNumExchangeTopologyDiscover = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 35, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tpNumExchangeTopologyDiscover.setStatus('current')
if mibBuilder.loadTexts: ex2tpNumExchangeTopologyDiscover.setDescription('Number of Exchange Topology Discoveries occurred in this process.')
ex2tpNumberOfSitelessServers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 35, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tpNumberOfSitelessServers.setStatus('current')
if mibBuilder.loadTexts: ex2tpNumberOfSitelessServers.setDescription('Number of Siteless Servers is the number of Exchange Servers that could not be mapped to a site.')
ex2TransportRulesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 36), )
if mibBuilder.loadTexts: ex2TransportRulesTable.setStatus('current')
if mibBuilder.loadTexts: ex2TransportRulesTable.setDescription("A table containing performance information for instances of 'MSExchange Transport Rules' objects.")
ex2TransportRulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 36, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2trInstance"))
if mibBuilder.loadTexts: ex2TransportRulesEntry.setStatus('current')
if mibBuilder.loadTexts: ex2TransportRulesEntry.setDescription("Performance information for one particular instance of 'MSExchange Transport Rules' object.")
ex2trInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 36, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2trInstance.setStatus('current')
if mibBuilder.loadTexts: ex2trInstance.setDescription('Instance name.')
ex2trMessagesEvaluated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 36, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2trMessagesEvaluated.setStatus('current')
if mibBuilder.loadTexts: ex2trMessagesEvaluated.setDescription('Messages Evaluated is the number of messages the rule has evaluated.')
ex2trMessagesEvaluatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 36, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2trMessagesEvaluatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2trMessagesEvaluatedPerSec.setDescription('Messages Evaluated per second is the number of messages the rule has evaluated per second.')
ex2trMessagesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 36, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2trMessagesProcessed.setStatus('current')
if mibBuilder.loadTexts: ex2trMessagesProcessed.setDescription('Messages Processed is the number of messages the rule has processed.')
ex2trMessagesProcessedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 36, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2trMessagesProcessedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2trMessagesProcessedPerSec.setDescription('Messages Processed per second is the number of messages the rule has processed per second.')
ex2UpdateAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 15, 37))
ex2uaTotalSRLParameterUpdates = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 37, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2uaTotalSRLParameterUpdates.setStatus('current')
if mibBuilder.loadTexts: ex2uaTotalSRLParameterUpdates.setDescription('Number of Total SRL Parameter Updates')
ex2uaTotalUpdates = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 37, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2uaTotalUpdates.setStatus('current')
if mibBuilder.loadTexts: ex2uaTotalUpdates.setDescription('Number of Total Updates')
ex2WebMailTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38), )
if mibBuilder.loadTexts: ex2WebMailTable.setStatus('current')
if mibBuilder.loadTexts: ex2WebMailTable.setDescription("A table containing performance information for instances of 'MSExchange Web Mail' objects.")
ex2WebMailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2wmInstance"))
if mibBuilder.loadTexts: ex2WebMailEntry.setStatus('current')
if mibBuilder.loadTexts: ex2WebMailEntry.setDescription("Performance information for one particular instance of 'MSExchange Web Mail' object.")
ex2wmInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmInstance.setStatus('current')
if mibBuilder.loadTexts: ex2wmInstance.setDescription('Instance name.')
ex2wmApptmtAcceptPerDeclineTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmApptmtAcceptPerDeclineTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmApptmtAcceptPerDeclineTotal.setDescription('Total number of Appointment accept/decline.')
ex2wmApptmtAcceptPrDeclinePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmApptmtAcceptPrDeclinePerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmApptmtAcceptPrDeclinePerSec.setDescription('Rate of Appointment accept/decline per second.')
ex2wmApptmtAttachmentEditsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmApptmtAttachmentEditsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmApptmtAttachmentEditsTotal.setDescription('Total number of Appointment attachment edits.')
ex2wmApptmtAttachmentEditsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmApptmtAttachmentEditsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmApptmtAttachmentEditsPerSec.setDescription('Rate of Appointment attachment edits per second.')
ex2wmApptmtDataRetrievesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmApptmtDataRetrievesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmApptmtDataRetrievesTotal.setDescription('Total number of Appointment data retrieves.')
ex2wmApptmtDataRetrievesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmApptmtDataRetrievesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmApptmtDataRetrievesPerSec.setDescription('Rate of Appointment data retrieves per second.')
ex2wmApptmtEditRecurrenceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmApptmtEditRecurrenceTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmApptmtEditRecurrenceTotal.setDescription('Total number of Appointment edit recurrence.')
ex2wmApptmtEditRecurrencePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmApptmtEditRecurrencePerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmApptmtEditRecurrencePerSec.setDescription('Rate of Appointment edit recurrence per second.')
ex2wmAppointmentOpensTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmAppointmentOpensTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmAppointmentOpensTotal.setDescription('Total number of Appointment opens.')
ex2wmAppointmentOpensPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmAppointmentOpensPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmAppointmentOpensPerSec.setDescription('Rate of Appointment opens per second.')
ex2wmApptmtResolveFreeBusyTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmApptmtResolveFreeBusyTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmApptmtResolveFreeBusyTotal.setDescription('Total number of Appointment resolve Free-Busy.')
ex2wmApptmtResolveFreeBusyPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmApptmtResolveFreeBusyPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmApptmtResolveFreeBusyPerSec.setDescription('Rate of Appointment resolve Free-Busy per second.')
ex2wmApptmtSaveRecurrencesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmApptmtSaveRecurrencesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmApptmtSaveRecurrencesTotal.setDescription('Total number of Appointment save recurrences.')
ex2wmApptmtSaveRecurrencesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmApptmtSaveRecurrencesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmApptmtSaveRecurrencesPerSec.setDescription('Rate of Appointment save recurrences per second.')
ex2wmAppointmentSavesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmAppointmentSavesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmAppointmentSavesTotal.setDescription('Total number of Appointment saves.')
ex2wmAppointmentSavesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmAppointmentSavesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmAppointmentSavesPerSec.setDescription('Rate of Appointment saves per second.')
ex2wmAppointmentSendsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmAppointmentSendsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmAppointmentSendsTotal.setDescription('Total number of Appointment sends.')
ex2wmAppointmentSendsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmAppointmentSendsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmAppointmentSendsPerSec.setDescription('Rate of Appointment sends per second.')
ex2wmAppointmentUpdatesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmAppointmentUpdatesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmAppointmentUpdatesTotal.setDescription('Total number of Appointment updates.')
ex2wmAppointmentUpdatesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmAppointmentUpdatesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmAppointmentUpdatesPerSec.setDescription('Rate of Appointment updates per second.')
ex2wmAttachmentsDeletedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmAttachmentsDeletedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmAttachmentsDeletedTotal.setDescription('Total number of Attachments deleted.')
ex2wmAttachmentsDeletedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmAttachmentsDeletedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmAttachmentsDeletedPerSec.setDescription('Rate of Attachments deleted per second.')
ex2wmAuthenticationCacheHitTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmAuthenticationCacheHitTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmAuthenticationCacheHitTotal.setDescription('Total number of Authentication cache hits. This is the number of times that the needed authentication is retrieved from a cache.')
ex2wmAuthenticationCacheHitPrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmAuthenticationCacheHitPrSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmAuthenticationCacheHitPrSec.setDescription('Rate of Authentication cache hits per second. This is the number of times that the needed authentication is retrieved from a cache.')
ex2wmAuthenticationsInCache = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmAuthenticationsInCache.setStatus('current')
if mibBuilder.loadTexts: ex2wmAuthenticationsInCache.setDescription('Total number of Authentications (in cache). This gives the number of different users who have accessed the Exchange store via DAV in the last few minutes.')
ex2wmAuthenticationsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmAuthenticationsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmAuthenticationsTotal.setDescription('Total number of Authentications. This is the total number of times authentication is needed.')
ex2wmAuthenticationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmAuthenticationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmAuthenticationsPerSec.setDescription('Rate of Authentications per second. This is the total number of times authentication is needed.')
ex2wmFolderCreatesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmFolderCreatesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmFolderCreatesTotal.setDescription('Total number of Folder creates*. This action is handled in HTTP-DAV for IE5 browers')
ex2wmFolderCreatesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmFolderCreatesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmFolderCreatesPerSec.setDescription('Rate of Folder creates* per second. This action is handled in HTTP-DAV for IE5 browers')
ex2wmFolderGetContentsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmFolderGetContentsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmFolderGetContentsTotal.setDescription('Total number of Folder get contents.')
ex2wmFolderGetContentsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmFolderGetContentsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmFolderGetContentsPerSec.setDescription('Rate of Folder get contents per second.')
ex2wmFolderGetViewTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmFolderGetViewTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmFolderGetViewTotal.setDescription("Total number of Folder get view*. This is only incremented by IE5 clients. Changing the view from non-IE5 clients increments 'Folder get contents'.")
ex2wmFolderGetViewPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmFolderGetViewPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmFolderGetViewPerSec.setDescription("Rate of Folder get view* per second. This is only incremented by IE5 clients. Changing the view from non-IE5 clients increments 'Folder get contents'.")
ex2wmFolderRenamesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmFolderRenamesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmFolderRenamesTotal.setDescription('Total number of Folder renames*. This action is handled in HTTP-DAV for IE5 browers')
ex2wmFolderRenamesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmFolderRenamesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmFolderRenamesPerSec.setDescription('Rate of Folder renames* per second. This action is handled in HTTP-DAV for IE5 browers')
ex2wmFormsSentTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmFormsSentTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmFormsSentTotal.setDescription('Total number of Forms sent.')
ex2wmFormsSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmFormsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmFormsSentPerSec.setDescription('Rate of Forms sent per second.')
ex2wmGetAppFrameTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmGetAppFrameTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmGetAppFrameTotal.setDescription('Total number of Get app frame.')
ex2wmGetAppFramePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmGetAppFramePerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmGetAppFramePerSec.setDescription('Rate of Get app frame per second.')
ex2wmGetNavBarTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmGetNavBarTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmGetNavBarTotal.setDescription('Total number of Get nav bar.')
ex2wmGetNavBarPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmGetNavBarPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmGetNavBarPerSec.setDescription('Rate of Get nav bar per second.')
ex2wmMessageAttachmentEditsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmMessageAttachmentEditsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmMessageAttachmentEditsTotal.setDescription('Total number of Message attachment edits.')
ex2wmMessageAttachmentEditPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmMessageAttachmentEditPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmMessageAttachmentEditPerSec.setDescription('Rate of Message attachment edits per second.')
ex2wmMessageMovesPerCopiesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmMessageMovesPerCopiesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmMessageMovesPerCopiesTotal.setDescription('Total number of Message moves/copies*. This action is handled in HTTP-DAV for IE5 browers')
ex2wmMessageMovesPerCopyPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmMessageMovesPerCopyPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmMessageMovesPerCopyPerSec.setDescription('Rate of Message moves/copies* per second. This action is handled in HTTP-DAV for IE5 browers')
ex2wmMessageOpensTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmMessageOpensTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmMessageOpensTotal.setDescription('Total number of Message opens.')
ex2wmMessageOpensPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmMessageOpensPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmMessageOpensPerSec.setDescription('Rate of Message opens per second.')
ex2wmMessageSavesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmMessageSavesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmMessageSavesTotal.setDescription('Total number of Message saves.')
ex2wmMessageSavesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmMessageSavesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmMessageSavesPerSec.setDescription('Rate of Message saves per second.')
ex2wmMessageSendsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmMessageSendsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmMessageSendsTotal.setDescription('Total number of Message sends.')
ex2wmMessageSendsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmMessageSendsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmMessageSendsPerSec.setDescription('Rate of Message sends per second.')
ex2wmMsgPerApptmtDeletesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmMsgPerApptmtDeletesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmMsgPerApptmtDeletesTotal.setDescription('Total number of Message/Appointment deletes*. This action is handled in HTTP-DAV for IE5 browers')
ex2wmMsgPerApptmtDeletesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmMsgPerApptmtDeletesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmMsgPerApptmtDeletesPerSec.setDescription('Rate of Message/Appointment deletes* per second. This action is handled in HTTP-DAV for IE5 browers')
ex2wmMsgPerAppointmentOpensTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmMsgPerAppointmentOpensTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmMsgPerAppointmentOpensTotal.setDescription('Total number of Message/Appointment opens.')
ex2wmMsgPerAppointmentOpenPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmMsgPerAppointmentOpenPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmMsgPerAppointmentOpenPerSec.setDescription('Rate of Message/Appointment opens per second.')
ex2wmMsgPerAppointmentSavesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmMsgPerAppointmentSavesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmMsgPerAppointmentSavesTotal.setDescription('Total number of Message/Appointment saves.')
ex2wmMsgPerAppointmentSavePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmMsgPerAppointmentSavePerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmMsgPerAppointmentSavePerSec.setDescription('Rate of Message/Appointment saves per second.')
ex2wmNamesCheckedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmNamesCheckedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmNamesCheckedTotal.setDescription('Total number of Names checked.')
ex2wmNamesCheckedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmNamesCheckedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmNamesCheckedPerSec.setDescription('Rate of Names checked per second.')
ex2wmNavigationOptionsSavesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmNavigationOptionsSavesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmNavigationOptionsSavesTotal.setDescription('Total number of Navigation options saves. These are the per-user options including Out of Office Assistant, Calander Options and Contact Options.')
ex2wmNavigationOptionsSavePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmNavigationOptionsSavePerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmNavigationOptionsSavePerSec.setDescription('Rate of Navigation options saves per second. These are the per-user options including Out of Office Assistant, Calander Options and Contact Options.')
ex2wmNewFolderTemplateDataTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmNewFolderTemplateDataTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmNewFolderTemplateDataTotal.setDescription('Total number of New folder template data. This is not incremented by IE5 clients.')
ex2wmNewFolderTemplateDataPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmNewFolderTemplateDataPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmNewFolderTemplateDataPerSec.setDescription('Rate of New folder template data per second. This is not incremented by IE5 clients.')
ex2wmNewItemURLTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmNewItemURLTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmNewItemURLTotal.setDescription('Total number of New item URL. This is not incremented by IE5 clients.')
ex2wmNewItemURLPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmNewItemURLPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmNewItemURLPerSec.setDescription('Rate of New item URL per second. This is not incremented by IE5 clients.')
ex2wmPostsSubmittedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmPostsSubmittedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmPostsSubmittedTotal.setDescription('Total number of Posts submitted.')
ex2wmPostsSubmittedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmPostsSubmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmPostsSubmittedPerSec.setDescription('Rate of Posts submitted per second.')
ex2wmRecipientsEditedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmRecipientsEditedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmRecipientsEditedTotal.setDescription('Total number of Recipients edited.')
ex2wmRecipientsEditedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmRecipientsEditedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmRecipientsEditedPerSec.setDescription('Rate of Recipients edited per second.')
ex2wmRecipientsSavedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmRecipientsSavedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmRecipientsSavedTotal.setDescription('Total number of Recipients saved.')
ex2wmRecipientsSavedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmRecipientsSavedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmRecipientsSavedPerSec.setDescription('Rate of Recipients saved per second.')
ex2wmViewsOfCalendarsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmViewsOfCalendarsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmViewsOfCalendarsTotal.setDescription('Total number of Views of Calendars.')
ex2wmViewsOfCalendarsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmViewsOfCalendarsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmViewsOfCalendarsPerSec.setDescription('Rate of Views of Calendars per second.')
ex2wmViewsOfMailFoldersTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmViewsOfMailFoldersTotal.setStatus('current')
if mibBuilder.loadTexts: ex2wmViewsOfMailFoldersTotal.setDescription('Total number of Views of Mail Folders.')
ex2wmViewsOfMailFoldersPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 38, 1, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2wmViewsOfMailFoldersPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2wmViewsOfMailFoldersPerSec.setDescription('Rate of Views of Mail Folders per second.')
ex2ALTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 39), )
if mibBuilder.loadTexts: ex2ALTable.setStatus('current')
if mibBuilder.loadTexts: ex2ALTable.setDescription("A table containing performance information for instances of 'MSExchangeAL' objects.")
ex2ALEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 39, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2ALInstance"))
if mibBuilder.loadTexts: ex2ALEntry.setStatus('current')
if mibBuilder.loadTexts: ex2ALEntry.setDescription("Performance information for one particular instance of 'MSExchangeAL' object.")
ex2ALInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 39, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ALInstance.setStatus('current')
if mibBuilder.loadTexts: ex2ALInstance.setDescription('Instance name.')
ex2ALActiveRPCThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 39, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ALActiveRPCThreads.setStatus('current')
if mibBuilder.loadTexts: ex2ALActiveRPCThreads.setDescription('Active RPC threads')
ex2ALLDAPResults = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 39, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ALLDAPResults.setStatus('current')
if mibBuilder.loadTexts: ex2ALLDAPResults.setDescription('LDAP Results')
ex2ALLDAPResultsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 39, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ALLDAPResultsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ALLDAPResultsPerSec.setDescription('LDAP Results/sec')
ex2ALLDAPSearchCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 39, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ALLDAPSearchCalls.setStatus('current')
if mibBuilder.loadTexts: ex2ALLDAPSearchCalls.setDescription('LDAP Search calls')
ex2ALLDAPSearchCallsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 39, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ALLDAPSearchCallsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ALLDAPSearchCallsPerSec.setDescription('LDAP Search calls/sec')
ex2Autodiscover = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 15, 40))
ex2adErrorResponses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 40, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2adErrorResponses.setStatus('current')
if mibBuilder.loadTexts: ex2adErrorResponses.setDescription('Error responses is the total number of Autodiscover error responses.')
ex2adErrorResponsesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 40, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2adErrorResponsesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2adErrorResponsesPerSec.setDescription('Error Responses/sec is the number of Autodiscover error responses that occur each second.')
ex2adProcessID = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 40, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2adProcessID.setStatus('current')
if mibBuilder.loadTexts: ex2adProcessID.setDescription('Process ID is the process ID that is hosting Autodiscover.')
ex2adRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 40, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2adRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2adRequestsPerSec.setDescription('Requests/sec is the number of Autodiscover requests that have been processed each second.')
ex2adTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 40, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2adTotalRequests.setStatus('current')
if mibBuilder.loadTexts: ex2adTotalRequests.setDescription('Total Requests is the total number of Autodiscover requests that have been processed.')
ex2EdgeSyncJobTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 41), )
if mibBuilder.loadTexts: ex2EdgeSyncJobTable.setStatus('current')
if mibBuilder.loadTexts: ex2EdgeSyncJobTable.setDescription("A table containing performance information for instances of 'MSExchangeEdgeSync Job' objects.")
ex2EdgeSyncJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 41, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2esjInstance"))
if mibBuilder.loadTexts: ex2EdgeSyncJobEntry.setStatus('current')
if mibBuilder.loadTexts: ex2EdgeSyncJobEntry.setDescription("Performance information for one particular instance of 'MSExchangeEdgeSync Job' object.")
ex2esjInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 41, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2esjInstance.setStatus('current')
if mibBuilder.loadTexts: ex2esjInstance.setDescription('Instance name.')
ex2esjEdgeObjectsAddedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 41, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2esjEdgeObjectsAddedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2esjEdgeObjectsAddedTotal.setDescription('Edge objects added total is the total number of objects added to Edges by EdgeSync.')
ex2esjEdgeObjectsAddedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 41, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2esjEdgeObjectsAddedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2esjEdgeObjectsAddedPerSec.setDescription('Edge objects added/sec is the rate of Edge objects added per second by EdgeSync.')
ex2esjEdgeObjectsDeletedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 41, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2esjEdgeObjectsDeletedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2esjEdgeObjectsDeletedTotal.setDescription('Edge objects deleted total is the total number of objects deleted from Edge Transport servers by EdgeSync.')
ex2esjEdgeObjectsDeletedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 41, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2esjEdgeObjectsDeletedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2esjEdgeObjectsDeletedPerSec.setDescription('Edge objects deleted/sec is the rate of Edge objects deleted per second by EdgeSync.')
ex2esjEdgeObjectsUpdatedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 41, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2esjEdgeObjectsUpdatedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2esjEdgeObjectsUpdatedTotal.setDescription('Edge objects updated total is the total number of Edge objects updated by EdgeSync.')
ex2esjEdgeObjectsUpdatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 41, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2esjEdgeObjectsUpdatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2esjEdgeObjectsUpdatedPerSec.setDescription('Edge objects updated/sec is the rate of Edge objects updated per second by EdgeSync.')
ex2esjScanJobCompletSuccessTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 41, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2esjScanJobCompletSuccessTotal.setStatus('current')
if mibBuilder.loadTexts: ex2esjScanJobCompletSuccessTotal.setDescription('Scan jobs completed successfully total is the total number of scan jobs completed successfully by EdgeSync.')
ex2esjScanJobFailNotExtLockTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 41, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2esjScanJobFailNotExtLockTotal.setStatus('current')
if mibBuilder.loadTexts: ex2esjScanJobFailNotExtLockTotal.setDescription('Scan jobs failed because could not extend lock total is the total number of EdgeSync scan jobs that failed because EdgeSync could not extend its lease of an Edge Transport server.')
ex2esjScanJobFailDirctErrorTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 41, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2esjScanJobFailDirctErrorTotal.setStatus('current')
if mibBuilder.loadTexts: ex2esjScanJobFailDirctErrorTotal.setDescription('Scan jobs failed because of directory error total is the total number of EdgeSync directory errors.')
ex2esjScanJobNotStartNotLockTotl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 41, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2esjScanJobNotStartNotLockTotl.setStatus('current')
if mibBuilder.loadTexts: ex2esjScanJobNotStartNotLockTotl.setDescription('Edge objects deleted total is the total number of EdgeSync scan jobs that were not started because Edge Transport servers could not be locked.')
ex2esjScanJobsStartedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 41, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2esjScanJobsStartedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2esjScanJobsStartedTotal.setDescription('Scan jobs started total is the total number of scan jobs started by EdgeSync.')
ex2esjSourceObjectsScannedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 41, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2esjSourceObjectsScannedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2esjSourceObjectsScannedTotal.setDescription('Source objects scanned total is the total number of Active Directory objects scanned by EdgeSync.')
ex2esjSourceObjectsScannedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 41, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2esjSourceObjectsScannedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2esjSourceObjectsScannedPerSec.setDescription('Source objects scanned/sec is the rate of Active Directory objects scanned per second by EdgeSync.')
ex2esjTargetObjectsScannedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 41, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2esjTargetObjectsScannedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2esjTargetObjectsScannedTotal.setDescription('Target objects scanned total is the total number of Edge objects scanned by EdgeSync.')
ex2esjTargetObjectsScannedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 41, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2esjTargetObjectsScannedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2esjTargetObjectsScannedPerSec.setDescription('Target objects scanned/sec is the rate of Edge objects scanned per second by EdgeSync.')
ex2EdgeSyncTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 15, 42))
ex2estCompletedScansTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 42, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2estCompletedScansTotal.setStatus('current')
if mibBuilder.loadTexts: ex2estCompletedScansTotal.setDescription('Completed scans total is the total number of topology scans completed by EdgeSync.')
ex2estEdgeServersLeasedTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 42, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2estEdgeServersLeasedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2estEdgeServersLeasedTotal.setDescription('Edge Servers leased total is the total number of Edge Transport servers leased by EdgeSync.')
ex2estEdgeServersTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 42, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2estEdgeServersTotal.setStatus('current')
if mibBuilder.loadTexts: ex2estEdgeServersTotal.setDescription('Edge Servers total is the total number of Edge Transport servers found by EdgeSync.')
ex2estExchangeServersTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 42, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2estExchangeServersTotal.setStatus('current')
if mibBuilder.loadTexts: ex2estExchangeServersTotal.setDescription('Exchange Servers total is the total number of Exchange Servers found by EdgeSync.')
ex2estHubTransportServersTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 42, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2estHubTransportServersTotal.setStatus('current')
if mibBuilder.loadTexts: ex2estHubTransportServersTotal.setDescription('Hub Transport Servers total is the total number of Hub Transport servers found by EdgeSync.')
ex2estJobsExecutingTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 42, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2estJobsExecutingTotal.setStatus('current')
if mibBuilder.loadTexts: ex2estJobsExecutingTotal.setDescription('Jobs executing total is the total number of EdgeSync jobs currently executing.')
ex2estJobsSuspendingTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 42, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2estJobsSuspendingTotal.setStatus('current')
if mibBuilder.loadTexts: ex2estJobsSuspendingTotal.setDescription('Jobs suspending total is the total number of EdgeSync jobs suspended.')
ex2estJobsWaitingTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 42, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2estJobsWaitingTotal.setStatus('current')
if mibBuilder.loadTexts: ex2estJobsWaitingTotal.setDescription('Jobs waiting total is the total number of EdgeSync jobs currently waiting.')
ex2estSyncNowEdgeNotCompletTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 42, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2estSyncNowEdgeNotCompletTotal.setStatus('current')
if mibBuilder.loadTexts: ex2estSyncNowEdgeNotCompletTotal.setDescription('SyncNow Edges not completed total is the total number of Edge Transport servers still pending sync after a start-edgesynchronization operation.')
ex2estSyncNowStartedTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 42, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2estSyncNowStartedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2estSyncNowStartedTotal.setDescription('SyncNow started total is the total number of Start-EdgeSynchronization tasks that have been executed.')
ex2FDSOABTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 43), )
if mibBuilder.loadTexts: ex2FDSOABTable.setStatus('current')
if mibBuilder.loadTexts: ex2FDSOABTable.setDescription("A table containing performance information for instances of 'MSExchangeFDS:OAB' objects.")
ex2FDSOABEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 43, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2FDSOABInstance"))
if mibBuilder.loadTexts: ex2FDSOABEntry.setStatus('current')
if mibBuilder.loadTexts: ex2FDSOABEntry.setDescription("Performance information for one particular instance of 'MSExchangeFDS:OAB' object.")
ex2FDSOABInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 43, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDSOABInstance.setStatus('current')
if mibBuilder.loadTexts: ex2FDSOABInstance.setDescription('Instance name.')
ex2FDSOABBytesDownloaded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 43, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDSOABBytesDownloaded.setStatus('current')
if mibBuilder.loadTexts: ex2FDSOABBytesDownloaded.setDescription('Bytes Downloaded is the number of bytes downloaded so far by current task.')
ex2FDSOABDownloadTaskQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 43, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDSOABDownloadTaskQueued.setStatus('current')
if mibBuilder.loadTexts: ex2FDSOABDownloadTaskQueued.setDescription("Download Task Queued is '1' if task is queued for execution, otherwise '0.'")
ex2FDSOABDownloadTasksCompleted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 43, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDSOABDownloadTasksCompleted.setStatus('current')
if mibBuilder.loadTexts: ex2FDSOABDownloadTasksCompleted.setDescription('Download Tasks Completed is the number of OAB download tasks completed.')
ex2FDSOABTotalBytesToDownload = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 43, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDSOABTotalBytesToDownload.setStatus('current')
if mibBuilder.loadTexts: ex2FDSOABTotalBytesToDownload.setDescription('Total Bytes To Download is the total number of bytes to be downloaded by current task.')
ex2FDSUMTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 44), )
if mibBuilder.loadTexts: ex2FDSUMTable.setStatus('current')
if mibBuilder.loadTexts: ex2FDSUMTable.setDescription("A table containing performance information for instances of 'MSExchangeFDS:UM' objects.")
ex2FDSUMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 44, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2FDSUMInstance"))
if mibBuilder.loadTexts: ex2FDSUMEntry.setStatus('current')
if mibBuilder.loadTexts: ex2FDSUMEntry.setDescription("Performance information for one particular instance of 'MSExchangeFDS:UM' object.")
ex2FDSUMInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 44, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDSUMInstance.setStatus('current')
if mibBuilder.loadTexts: ex2FDSUMInstance.setDescription('Instance name.')
ex2FDSUMBytesDownloaded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 44, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDSUMBytesDownloaded.setStatus('current')
if mibBuilder.loadTexts: ex2FDSUMBytesDownloaded.setDescription('Bytes Downloaded is the number of bytes downloaded from the publishing point for the UM dial plan.')
ex2FDSUMDownloadTaskQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 44, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDSUMDownloadTaskQueued.setStatus('current')
if mibBuilder.loadTexts: ex2FDSUMDownloadTaskQueued.setDescription('Download Task Queued has a value of 1 if a download task is waiting to start running. Otherwise, the value is 0.')
ex2FDSUMDownloadTasksCompleted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 44, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDSUMDownloadTasksCompleted.setStatus('current')
if mibBuilder.loadTexts: ex2FDSUMDownloadTasksCompleted.setDescription('Download Tasks Completed is a count of the number of UM dial plan downloads that have been completed since the service started.')
ex2FDSUMTotalBytesToDownload = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 44, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDSUMTotalBytesToDownload.setStatus('current')
if mibBuilder.loadTexts: ex2FDSUMTotalBytesToDownload.setDescription('Total Bytes To Download is the total number of bytes to be downloaded by the current task.')
ex2InformationStore = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45))
ex2ISACLUpgradeCompletedUpgrades = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISACLUpgradeCompletedUpgrades.setStatus('current')
if mibBuilder.loadTexts: ex2ISACLUpgradeCompletedUpgrades.setDescription('The total number of ACL upgrades that have fully completed; a fully upgraded folder will not need another ACL upgrade.')
ex2ISACLUpgradeFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISACLUpgradeFailures.setStatus('current')
if mibBuilder.loadTexts: ex2ISACLUpgradeFailures.setDescription('The total number of ACL upgrades that have failed; a failure to upgrade a folder leaves the folder with default rights only.')
ex2ISACLUpgrdHitACLUpgrdRtryList = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISACLUpgrdHitACLUpgrdRtryList.setStatus('current')
if mibBuilder.loadTexts: ex2ISACLUpgrdHitACLUpgrdRtryList.setDescription('The total number of ACL upgrades that were not attempted based on the retry list.')
ex2ISACLUpgradePartialUpgrades = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISACLUpgradePartialUpgrades.setStatus('current')
if mibBuilder.loadTexts: ex2ISACLUpgradePartialUpgrades.setDescription('The total number of ACL upgrades that have not fully completed; a partially upgraded folder will still have to go through the ACL upgrade process.')
ex2ISACLUpgradeTimesAttempted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISACLUpgradeTimesAttempted.setStatus('current')
if mibBuilder.loadTexts: ex2ISACLUpgradeTimesAttempted.setDescription('The total number of ACL upgrades attempted.')
ex2ISActiveAnonymousUserCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISActiveAnonymousUserCount.setStatus('current')
if mibBuilder.loadTexts: ex2ISActiveAnonymousUserCount.setDescription('Number of active users.')
ex2ISActiveConnectionCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISActiveConnectionCount.setStatus('current')
if mibBuilder.loadTexts: ex2ISActiveConnectionCount.setDescription('Number of connections that have shown some activity in the last 10 minutes.')
ex2ISActiveUserCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISActiveUserCount.setStatus('current')
if mibBuilder.loadTexts: ex2ISActiveUserCount.setDescription('Number of user connections that have shown some activity in the last 10 minutes.')
ex2ISAdminRPCRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISAdminRPCRequests.setStatus('current')
if mibBuilder.loadTexts: ex2ISAdminRPCRequests.setDescription('Admin RPC Requests is the number of admin requests that are currently being processed by the information store.')
ex2ISAdminRPCRequestsPeak = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISAdminRPCRequestsPeak.setStatus('current')
if mibBuilder.loadTexts: ex2ISAdminRPCRequestsPeak.setDescription('Admin RPC Requests Peak is the maximum number of admin requests that were processed simultaneously by the information store since it was started.')
ex2ISAnonymousUserCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISAnonymousUserCount.setStatus('current')
if mibBuilder.loadTexts: ex2ISAnonymousUserCount.setDescription('Anonymous User Count is the number of anonymous users connected to the information store.')
ex2ISApptmtInstanceCreationRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISApptmtInstanceCreationRate.setStatus('current')
if mibBuilder.loadTexts: ex2ISApptmtInstanceCreationRate.setDescription('Number of appointment instances created/sec')
ex2ISApptmtInstanceDeletionRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISApptmtInstanceDeletionRate.setStatus('current')
if mibBuilder.loadTexts: ex2ISApptmtInstanceDeletionRate.setDescription('Number of appointment instances deleted/sec')
ex2ISAppointmentInstancesCreated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISAppointmentInstancesCreated.setStatus('current')
if mibBuilder.loadTexts: ex2ISAppointmentInstancesCreated.setDescription('Number of appointment instances created')
ex2ISAppointmentInstancesDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISAppointmentInstancesDeleted.setStatus('current')
if mibBuilder.loadTexts: ex2ISAppointmentInstancesDeleted.setDescription('Number of appointment instances deleted')
ex2ISAsyncNotificationsCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISAsyncNotificationsCacheSize.setStatus('current')
if mibBuilder.loadTexts: ex2ISAsyncNotificationsCacheSize.setDescription('The current size of the Async Notifications Cache.')
ex2ISAsyncNotificatGeneratPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISAsyncNotificatGeneratPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISAsyncNotificatGeneratPerSec.setDescription('Async Notifications Generated/sec is the rate at which parked async notifications are being completed.')
ex2ISAsyncRPCRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISAsyncRPCRequests.setStatus('current')
if mibBuilder.loadTexts: ex2ISAsyncRPCRequests.setDescription('Async RPC Requests is the number of asynchronous requests that are currently being processed by the information store.')
ex2ISAsyncRPCRequestsPeak = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISAsyncRPCRequestsPeak.setStatus('current')
if mibBuilder.loadTexts: ex2ISAsyncRPCRequestsPeak.setDescription('Async RPC Requests Peak is the maximum number of asynchronous requests that were processed simultaneously by the information store since it was started.')
ex2ISBackgroundExpanQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISBackgroundExpanQueueLength.setStatus('current')
if mibBuilder.loadTexts: ex2ISBackgroundExpanQueueLength.setDescription('Number of calendars that are queued for background expansion')
ex2ISCIQPThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCIQPThreads.setStatus('current')
if mibBuilder.loadTexts: ex2ISCIQPThreads.setDescription('Number of Query Processor threads currently running CI queries.')
ex2ISClientBackgroundRPCsFailed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientBackgroundRPCsFailed.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientBackgroundRPCsFailed.setDescription('The client-reported number of failed background RPCs (since the store was started).')
ex2ISClientBackgroundRPCsFailSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientBackgroundRPCsFailSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientBackgroundRPCsFailSec.setDescription('The client-reported rate of failed background RPCs (since the store was started).')
ex2ISClientBackgroundRPCsSucceed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientBackgroundRPCsSucceed.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientBackgroundRPCsSucceed.setDescription('The client-reported total number of successful background RPCs (since the store was started).')
ex2ISClientBgRPCSucceedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientBgRPCSucceedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientBgRPCSucceedPerSec.setDescription('The client-reported rate of successful background RPCs (since the store was started).')
ex2ISClientForegroundRPCsFailed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientForegroundRPCsFailed.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientForegroundRPCsFailed.setDescription('The client-reported number of failed foreground RPCs (since the store was started).')
ex2ISClientFgRPCsFailedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientFgRPCsFailedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientFgRPCsFailedPerSec.setDescription('The client-reported rate of failed foreground RPCs (since the store was started).')
ex2ISClientFgRPCsSucceeded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientFgRPCsSucceeded.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientFgRPCsSucceeded.setDescription('The client-reported total number of successful foreground RPCs (since the store was started).')
ex2ISClientFgRPCsSucceededPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientFgRPCsSucceededPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientFgRPCsSucceededPerSec.setDescription('The client-reported rate of successful foreground RPCs (since the store was started).')
ex2ISClientLatencyGT10SecRPCs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientLatencyGT10SecRPCs.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientLatencyGT10SecRPCs.setDescription('The client-reported number of successful RPCs with latencies > 10 seconds.')
ex2ISClientLatencyGT2SecRPCs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientLatencyGT2SecRPCs.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientLatencyGT2SecRPCs.setDescription('The client-reported number of successful RPCs with latencies > 2 seconds.')
ex2ISClientLatencyGT5SecRPCs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientLatencyGT5SecRPCs.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientLatencyGT5SecRPCs.setDescription('The client-reported number of successful RPCs with latencies > 5 seconds.')
ex2ISClientRPCsFailed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientRPCsFailed.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientRPCsFailed.setDescription('The client-reported number of failed RPCs (since the store was started).')
ex2ISClientRPCsFailedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientRPCsFailedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientRPCsFailedPerSec.setDescription('The client-reported rate of failed RPCs (since the store was started).')
ex2ISClientRPCFailedAccessDenied = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientRPCFailedAccessDenied.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientRPCFailedAccessDenied.setDescription('The client-reported number of failed RPCs (since the store was started) due to the Access Denied RPC error.')
ex2ISClientRPCFailAccessDenySec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientRPCFailAccessDenySec.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientRPCFailAccessDenySec.setDescription('The client-reported rate of failed RPCs (since the store was started) due to the Access Denied RPC error.')
ex2ISClientRPCFailAllOtherErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientRPCFailAllOtherErrors.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientRPCFailAllOtherErrors.setDescription('The client-reported number of failed RPCs (since the store was started) due to all other RPC errors.')
ex2ISClientRPCFailOtherErrorSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientRPCFailOtherErrorSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientRPCFailOtherErrorSec.setDescription('The client-reported rate of failed RPCs (since the store was started) due to all other RPC errors.')
ex2ISClientRPCFailCallCancelled = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientRPCFailCallCancelled.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientRPCFailCallCancelled.setDescription('The client-reported number of failed RPCs (since the store was started) due to the Call Cancelled RPC error.')
ex2ISClientRPCFailCallCancelSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientRPCFailCallCancelSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientRPCFailCallCancelSec.setDescription('The client-reported rate of failed RPCs (since the store was started) due to the Call Cancelled RPC error.')
ex2ISClientRPCsFailedCallFailed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientRPCsFailedCallFailed.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientRPCsFailedCallFailed.setDescription('The client-reported number of failed RPCs (since the store was started) due to the Call Failed RPC error.')
ex2ISClientRPCFailCallFailedSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientRPCFailCallFailedSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientRPCFailCallFailedSec.setDescription('The client-reported rate of failed RPCs (since the store was started) due to the Call Failed RPC error.')
ex2ISClientRPCFailServerTooBusy = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientRPCFailServerTooBusy.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientRPCFailServerTooBusy.setDescription('The client-reported number of failed RPCs (since the store was started) due to the Server Too Busy RPC error.')
ex2ISClientRPCFailServerToBsySec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientRPCFailServerToBsySec.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientRPCFailServerToBsySec.setDescription('The client-reported rate of failed RPCs (since the store was started) due to the Server Too Busy RPC error.')
ex2ISClientRPCFailServerUnavail = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientRPCFailServerUnavail.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientRPCFailServerUnavail.setDescription('The client-reported number of failed RPCs (since the store was started) due to the Server Unavailable RPC error.')
ex2ISClientRPCFailServUnavailSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientRPCFailServUnavailSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientRPCFailServUnavailSec.setDescription('The client-reported rate of failed RPCs (since the store was started) due to the Server Unavailable RPC error.')
ex2ISClientRPCsAttempted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientRPCsAttempted.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientRPCsAttempted.setDescription('The client-reported total number of RPCs attempted by the users (since the store was started).')
ex2ISClientRPCsAttemptedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientRPCsAttemptedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientRPCsAttemptedPerSec.setDescription('Client The client-reported rate of RPCs attempted by the users (since the store was started).')
ex2ISClientRPCsSucceeded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientRPCsSucceeded.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientRPCsSucceeded.setDescription('The client-reported total number of successful RPCs (since the store was started).')
ex2ISClientRPCsSucceededPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientRPCsSucceededPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientRPCsSucceededPerSec.setDescription('The client-reported rate of successful RPCs (since the store was started).')
ex2ISClientTotalReportedLatency = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISClientTotalReportedLatency.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientTotalReportedLatency.setDescription('The client-reported total latency (in seconds) for all RPCs (since the store was started).')
ex2ISConnectionCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISConnectionCount.setStatus('current')
if mibBuilder.loadTexts: ex2ISConnectionCount.setDescription('Connection Count is the number of client processes connected to the information store.')
ex2ISDLMembershipCacheEntryCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISDLMembershipCacheEntryCount.setStatus('current')
if mibBuilder.loadTexts: ex2ISDLMembershipCacheEntryCount.setDescription('Total number of entries stored in the DL membership cache.')
ex2ISDLMembershipCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISDLMembershipCacheHits.setStatus('current')
if mibBuilder.loadTexts: ex2ISDLMembershipCacheHits.setDescription('Total number of hits for the DL membership cache.')
ex2ISDLMembershipCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISDLMembershipCacheMisses.setStatus('current')
if mibBuilder.loadTexts: ex2ISDLMembershipCacheMisses.setDescription('Total number of misses for the DL membership cache.')
ex2ISDLMembershipCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISDLMembershipCacheSize.setStatus('current')
if mibBuilder.loadTexts: ex2ISDLMembershipCacheSize.setDescription('Total number of memory bytes consumed by the DL membership cache.')
ex2ISExchmemCurrentByteAllocated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISExchmemCurrentByteAllocated.setStatus('current')
if mibBuilder.loadTexts: ex2ISExchmemCurrentByteAllocated.setDescription('The current bytes allocated through Exchmem (excluding virtual allocations).')
ex2ISExchmemCurrNumbOfVirtAlloca = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISExchmemCurrNumbOfVirtAlloca.setStatus('current')
if mibBuilder.loadTexts: ex2ISExchmemCurrNumbOfVirtAlloca.setDescription('The current number of Exchmem allocations that were directly allocated from virtual Mem.')
ex2ISExchmemCurrVirtByteAllocate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISExchmemCurrVirtByteAllocate.setStatus('current')
if mibBuilder.loadTexts: ex2ISExchmemCurrVirtByteAllocate.setDescription('The current bytes virtually allocated through Exchmem.')
ex2ISExchmemMaximumByteAllocated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISExchmemMaximumByteAllocated.setStatus('current')
if mibBuilder.loadTexts: ex2ISExchmemMaximumByteAllocated.setDescription('The maximum concurrent bytes allocated through Exchmem (excluding virtual allocations).')
ex2ISExchmemMaxVirtualBytAllocat = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISExchmemMaxVirtualBytAllocat.setStatus('current')
if mibBuilder.loadTexts: ex2ISExchmemMaxVirtualBytAllocat.setDescription('The maximum concurrent bytes virtually allocated through Exchmem.')
ex2ISExchmemNumAdditionalHeaps = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISExchmemNumAdditionalHeaps.setStatus('current')
if mibBuilder.loadTexts: ex2ISExchmemNumAdditionalHeaps.setDescription('The number of Exchmem heaps created by MSExchangeIS after startup.')
ex2ISExchmemNumberOfHeaps = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISExchmemNumberOfHeaps.setStatus('current')
if mibBuilder.loadTexts: ex2ISExchmemNumberOfHeaps.setDescription('The total number of Exchmem heaps in use by MSExchangeIS.')
ex2ISExchmemNumHeapsMemErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISExchmemNumHeapsMemErrors.setStatus('current')
if mibBuilder.loadTexts: ex2ISExchmemNumHeapsMemErrors.setDescription('The total number of Exchmem heaps that failed allocations due to insufficient available Mem.')
ex2ISExchmemNumberOfMemoryErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISExchmemNumberOfMemoryErrors.setStatus('current')
if mibBuilder.loadTexts: ex2ISExchmemNumberOfMemoryErrors.setDescription('The total number of Exchmem allocations that could not be satisfied by available memory.')
ex2ISExchmemTotalNumVirtAllocate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISExchmemTotalNumVirtAllocate.setStatus('current')
if mibBuilder.loadTexts: ex2ISExchmemTotalNumVirtAllocate.setDescription('The total number of Exchmem allocations that were directly allocated from virtual Mem.')
ex2ISFBPublishCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISFBPublishCount.setStatus('current')
if mibBuilder.loadTexts: ex2ISFBPublishCount.setDescription('Number of free-busy publishes')
ex2ISFBPublishRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISFBPublishRate.setStatus('current')
if mibBuilder.loadTexts: ex2ISFBPublishRate.setDescription('Number of free-busy publishes/sec')
ex2ISMaximumAnonymousUsers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISMaximumAnonymousUsers.setStatus('current')
if mibBuilder.loadTexts: ex2ISMaximumAnonymousUsers.setDescription('The maximum number of anonymous users since startup.')
ex2ISMaximumConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISMaximumConnections.setStatus('current')
if mibBuilder.loadTexts: ex2ISMaximumConnections.setDescription('The maximum number of concurrent connections since startup.')
ex2ISMaximumUsers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISMaximumUsers.setStatus('current')
if mibBuilder.loadTexts: ex2ISMaximumUsers.setDescription('Maximum Users is the maximum number of concurrent users since startup.')
ex2ISOABDifferentialDnldAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISOABDifferentialDnldAttempts.setStatus('current')
if mibBuilder.loadTexts: ex2ISOABDifferentialDnldAttempts.setDescription('Total number of attempts by clients to download changes to the Offline Address Book.')
ex2ISOABDifferentialDnldBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISOABDifferentialDnldBytes.setStatus('current')
if mibBuilder.loadTexts: ex2ISOABDifferentialDnldBytes.setDescription('Total number of bytes sent to clients performing a differential download of the Offline Address Book.')
ex2ISOABDifferentialDnldBytesSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISOABDifferentialDnldBytesSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISOABDifferentialDnldBytesSec.setDescription('Rate at which bytes are being sent to clients performing a differential download of the Offline Address Book.')
ex2ISOABFullDownloadAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISOABFullDownloadAttempts.setStatus('current')
if mibBuilder.loadTexts: ex2ISOABFullDownloadAttempts.setDescription('Total number of attempts by clients to download the full Offline Address Book.')
ex2ISOABFullDnldAttemptsBlocked = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISOABFullDnldAttemptsBlocked.setStatus('current')
if mibBuilder.loadTexts: ex2ISOABFullDnldAttemptsBlocked.setDescription('Total number of attempts by clients to download the full Offline Address Book blocked due to bandwidth throttling.')
ex2ISOABFullDownloadBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISOABFullDownloadBytes.setStatus('current')
if mibBuilder.loadTexts: ex2ISOABFullDownloadBytes.setDescription('Total number of bytes sent to clients performing a full download of the Offline Address Book.')
ex2ISOABFullDownloadBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 78), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISOABFullDownloadBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISOABFullDownloadBytesPerSec.setDescription('Rate at which bytes are being sent to clients performing a full download of the Offline Address Book.')
ex2ISPeakAsyncNotificaCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 79), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISPeakAsyncNotificaCacheSize.setStatus('current')
if mibBuilder.loadTexts: ex2ISPeakAsyncNotificaCacheSize.setDescription('The maximum size of the Async Notifications Cache.')
ex2ISPeakPushNotificatCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 80), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISPeakPushNotificatCacheSize.setStatus('current')
if mibBuilder.loadTexts: ex2ISPeakPushNotificatCacheSize.setDescription('The maximum size of the Push Notifications Cache.')
ex2ISPushNotificationsCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 81), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISPushNotificationsCacheSize.setStatus('current')
if mibBuilder.loadTexts: ex2ISPushNotificationsCacheSize.setDescription('The current size of the Push Notifications Cache.')
ex2ISPushNotificatGeneratePerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 82), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISPushNotificatGeneratePerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISPushNotificatGeneratePerSec.setDescription('Push Notifications Generated/sec is the rate at which notifications are being sent to clients that have registered for notifications of changes to tables in the information store.')
ex2ISPushNotificationsSkipPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 83), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISPushNotificationsSkipPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISPushNotificationsSkipPerSec.setDescription('Push Notifications Skipped/sec is the number of push notifications that have been skipped by caching at the server.')
ex2ISRPCAveragedLatency = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 84), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRPCAveragedLatency.setStatus('current')
if mibBuilder.loadTexts: ex2ISRPCAveragedLatency.setDescription('RPC latency in milliseconds averaged for the past 1024 packets.')
ex2ISRPCClientBackoffPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 85), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRPCClientBackoffPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISRPCClientBackoffPerSec.setDescription('RPC Client Backoff/sec is the rate that server notifies a client to back off.')
ex2ISRPCClientsBytesRead = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 86), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRPCClientsBytesRead.setStatus('current')
if mibBuilder.loadTexts: ex2ISRPCClientsBytesRead.setDescription('RPC Clients Bytes Read is the total number of bytes read from RPC clients.')
ex2ISRPCClientsBytesWritten = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 87), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRPCClientsBytesWritten.setStatus('current')
if mibBuilder.loadTexts: ex2ISRPCClientsBytesWritten.setDescription('RPC Clients Bytes Written is the total number of bytes written to RPC clients.')
ex2ISRPCClientsUncomprsdByteRead = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 88), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRPCClientsUncomprsdByteRead.setStatus('current')
if mibBuilder.loadTexts: ex2ISRPCClientsUncomprsdByteRead.setDescription('RPC Clients Uncompressed Bytes Read is the total number of bytes read from RPC clients after decompression.')
ex2ISRPCClientUncomprsdByteWrite = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 89), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRPCClientUncomprsdByteWrite.setStatus('current')
if mibBuilder.loadTexts: ex2ISRPCClientUncomprsdByteWrite.setDescription('RPC Clients Uncompressed Bytes Written is the total number of bytes written to RPC clients before compression.')
ex2ISRPCNumOfSlowPackets = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 90), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRPCNumOfSlowPackets.setStatus('current')
if mibBuilder.loadTexts: ex2ISRPCNumOfSlowPackets.setDescription('Number of RPC packets in the past 1024 that have latencies longer than 2 seconds.')
ex2ISRPCOperationsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 91), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRPCOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISRPCOperationsPerSec.setDescription('RPC Operations/sec is the rate that RPC operations occur.')
ex2ISRPCPacketsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 92), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRPCPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISRPCPacketsPerSec.setDescription('RPC Packets/sec is the rate that RPC packets are processed.')
ex2ISRPCRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 93), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRPCRequests.setStatus('current')
if mibBuilder.loadTexts: ex2ISRPCRequests.setDescription('RPC Requests is the number of client requests that are currently being processed by the information store.')
ex2ISRPCRequestsPeak = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 94), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRPCRequestsPeak.setStatus('current')
if mibBuilder.loadTexts: ex2ISRPCRequestsPeak.setDescription('RPC Requests Peak is the maximum number of client requests that were processed simultaneously by the information store since it was started.')
ex2ISReadBytesRPCClientsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 95), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISReadBytesRPCClientsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISReadBytesRPCClientsPerSec.setDescription('Read Bytes RPC Clients/sec is the rate that bytes are read from RPC clients.')
ex2ISRecurringApptmtDeletionRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 96), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRecurringApptmtDeletionRate.setStatus('current')
if mibBuilder.loadTexts: ex2ISRecurringApptmtDeletionRate.setDescription('Number of recurring appoinments deleted/sec')
ex2ISRecurApptmtModificationRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 97), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRecurApptmtModificationRate.setStatus('current')
if mibBuilder.loadTexts: ex2ISRecurApptmtModificationRate.setDescription('Number of recurring appointments modified/sec')
ex2ISRecurringApptmtsCreated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 98), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRecurringApptmtsCreated.setStatus('current')
if mibBuilder.loadTexts: ex2ISRecurringApptmtsCreated.setDescription('Number of recurring appointments created')
ex2ISRecurringApptmtsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 99), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRecurringApptmtsDeleted.setStatus('current')
if mibBuilder.loadTexts: ex2ISRecurringApptmtsDeleted.setDescription('Number of recurring appointments deleted')
ex2ISRecurringApptmtsModified = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 100), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRecurringApptmtsModified.setStatus('current')
if mibBuilder.loadTexts: ex2ISRecurringApptmtsModified.setDescription('Number of recurring appointments modified')
ex2ISRecurringApptmtCreationRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 101), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRecurringApptmtCreationRate.setStatus('current')
if mibBuilder.loadTexts: ex2ISRecurringApptmtCreationRate.setDescription('Number of recurring appointments created/sec')
ex2ISRecurringMstrApptmtExpanded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 102), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRecurringMstrApptmtExpanded.setStatus('current')
if mibBuilder.loadTexts: ex2ISRecurringMstrApptmtExpanded.setDescription('Number of recurring master appointments expanded')
ex2ISRecurringMasterExpansionRat = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 103), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISRecurringMasterExpansionRat.setStatus('current')
if mibBuilder.loadTexts: ex2ISRecurringMasterExpansionRat.setDescription('Number of recurring master appointments expanded/sec')
ex2ISSingleApptmtCreationRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 104), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISSingleApptmtCreationRate.setStatus('current')
if mibBuilder.loadTexts: ex2ISSingleApptmtCreationRate.setDescription('Number of single instance appointments created/sec')
ex2ISSingleApptmtDeletionRate = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 105), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISSingleApptmtDeletionRate.setStatus('current')
if mibBuilder.loadTexts: ex2ISSingleApptmtDeletionRate.setDescription('Number of single instance appointments deleted/sec')
ex2ISSingleApptmtModificationRat = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 106), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISSingleApptmtModificationRat.setStatus('current')
if mibBuilder.loadTexts: ex2ISSingleApptmtModificationRat.setDescription('Number of single instance appointments modified/sec')
ex2ISSingleAppointmentsCreated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 107), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISSingleAppointmentsCreated.setStatus('current')
if mibBuilder.loadTexts: ex2ISSingleAppointmentsCreated.setDescription('Number of single instance appointments created')
ex2ISSingleAppointmentsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 108), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISSingleAppointmentsDeleted.setStatus('current')
if mibBuilder.loadTexts: ex2ISSingleAppointmentsDeleted.setDescription('Number of single instance appointments deleted')
ex2ISSingleAppointmentsModified = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 109), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISSingleAppointmentsModified.setStatus('current')
if mibBuilder.loadTexts: ex2ISSingleAppointmentsModified.setDescription('Number of single instance appointments modified')
ex2ISSlowQPThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 110), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISSlowQPThreads.setStatus('current')
if mibBuilder.loadTexts: ex2ISSlowQPThreads.setDescription('Number of Query Processor threads currently running unoptimized queries.')
ex2ISSlowSearchThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 111), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISSlowSearchThreads.setStatus('current')
if mibBuilder.loadTexts: ex2ISSlowSearchThreads.setDescription('Number of Search threads currently running unoptimized queries.')
ex2ISTotalParkedAsyncNotifiCalls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 112), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISTotalParkedAsyncNotifiCalls.setStatus('current')
if mibBuilder.loadTexts: ex2ISTotalParkedAsyncNotifiCalls.setDescription('Total number of parked async notification calls pending in the Information Store.')
ex2ISUserCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 113), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISUserCount.setStatus('current')
if mibBuilder.loadTexts: ex2ISUserCount.setDescription('User Count is the number of users connected to the information store.')
ex2ISVMLargestBlockSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 114), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVMLargestBlockSize.setStatus('current')
if mibBuilder.loadTexts: ex2ISVMLargestBlockSize.setDescription('Size of the largest free virtual memory block.')
ex2ISVMTotal16MBFreeBlocks = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 115), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVMTotal16MBFreeBlocks.setStatus('current')
if mibBuilder.loadTexts: ex2ISVMTotal16MBFreeBlocks.setDescription('Total number of free Virtual Memory blocks larger than or equal to 16MB.')
ex2ISVMTotalFreeBlocks = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 116), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVMTotalFreeBlocks.setStatus('current')
if mibBuilder.loadTexts: ex2ISVMTotalFreeBlocks.setDescription('Total number of free Virtual Memory blocks.')
ex2ISVMTotalLargeFreeBlockBytes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 117), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVMTotalLargeFreeBlockBytes.setStatus('current')
if mibBuilder.loadTexts: ex2ISVMTotalLargeFreeBlockBytes.setDescription('Total number of bytes in free Virtual Memory blocks larger than or equal to 16MB.')
ex2ISVirusScanBytesScanned = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 118), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVirusScanBytesScanned.setStatus('current')
if mibBuilder.loadTexts: ex2ISVirusScanBytesScanned.setDescription('Total number of bytes in all files processed by virus scanner.')
ex2ISVirusScanFilesCleaned = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 119), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVirusScanFilesCleaned.setStatus('current')
if mibBuilder.loadTexts: ex2ISVirusScanFilesCleaned.setDescription('Total number of separate files cleaned by virus scanner.')
ex2ISVirusScanFilesCleanedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 120), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVirusScanFilesCleanedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISVirusScanFilesCleanedPerSec.setDescription('The rate at which separate files are cleaned by virus scanner.')
ex2ISVirusScanFilesQuarantined = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 121), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVirusScanFilesQuarantined.setStatus('current')
if mibBuilder.loadTexts: ex2ISVirusScanFilesQuarantined.setDescription('Total number of separate files put into quarantine by virus scanner.')
ex2ISVirusScanFileQuarantinePSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 122), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVirusScanFileQuarantinePSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISVirusScanFileQuarantinePSec.setDescription('The rate at which separate files are put into quarantine by virus scanner.')
ex2ISVirusScanFilesScanned = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 123), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVirusScanFilesScanned.setStatus('current')
if mibBuilder.loadTexts: ex2ISVirusScanFilesScanned.setDescription('Total number of separate files processed by virus scanner.')
ex2ISVirusScanFilesScannedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 124), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVirusScanFilesScannedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISVirusScanFilesScannedPerSec.setDescription('The rate at which separate files are processed by virus scanner.')
ex2ISVirusScanFoldersScannedInBg = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 125), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVirusScanFoldersScannedInBg.setStatus('current')
if mibBuilder.loadTexts: ex2ISVirusScanFoldersScannedInBg.setDescription('Total number of folders processed by background scanning.')
ex2ISVirusScanMessagesCleaned = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 126), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVirusScanMessagesCleaned.setStatus('current')
if mibBuilder.loadTexts: ex2ISVirusScanMessagesCleaned.setDescription('Total number of top-level messages cleaned by virus scanner.')
ex2ISVirusScanMsgsCleanedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 127), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVirusScanMsgsCleanedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISVirusScanMsgsCleanedPerSec.setDescription('The rate at which top-level messages are cleaned by virus scanner.')
ex2ISVirusScanMessagesDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 128), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVirusScanMessagesDeleted.setStatus('current')
if mibBuilder.loadTexts: ex2ISVirusScanMessagesDeleted.setDescription('Total number of top-level messages that were deleted upon request of the virus scanner.')
ex2ISVirusScanMsgsDeletedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 129), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVirusScanMsgsDeletedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISVirusScanMsgsDeletedPerSec.setDescription('The rate at which top-level messages are being deleted upon request of the virus scanner.')
ex2ISVirusScanMessagesProcessed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 130), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVirusScanMessagesProcessed.setStatus('current')
if mibBuilder.loadTexts: ex2ISVirusScanMessagesProcessed.setDescription('Total number of top-level messages processed by virus scanner.')
ex2ISVirusScanMsgProcessedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 131), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVirusScanMsgProcessedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISVirusScanMsgProcessedPerSec.setDescription('The rate at which top-level messages are processed by virus scanner.')
ex2ISVirusScanMsgsQuarantined = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 132), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVirusScanMsgsQuarantined.setStatus('current')
if mibBuilder.loadTexts: ex2ISVirusScanMsgsQuarantined.setDescription('Total number of top-level messages put into quarantine by virus scanner.')
ex2ISVirusScanMsgQuarantinPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 133), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVirusScanMsgQuarantinPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISVirusScanMsgQuarantinPerSec.setDescription('The rate at which top-level messages are put into quarantine by virus scanner.')
ex2ISVirusScanMsgsScanBackground = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 134), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVirusScanMsgsScanBackground.setStatus('current')
if mibBuilder.loadTexts: ex2ISVirusScanMsgsScanBackground.setDescription('Total number of messages processed by background scanning.')
ex2ISVirusScanQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 135), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISVirusScanQueueLength.setStatus('current')
if mibBuilder.loadTexts: ex2ISVirusScanQueueLength.setDescription('Current number of outstanding requests that are queued for virus scanning.')
ex2ISWriteBytesRPCClientsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 45, 136), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISWriteBytesRPCClientsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISWriteBytesRPCClientsPerSec.setDescription('Write Bytes RPC Clients/sec is the rate that bytes are written to RPC clients.')
ex2ISClientTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46), )
if mibBuilder.loadTexts: ex2ISClientTable.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientTable.setDescription("A table containing performance information for instances of 'MSExchangeIS Client' objects.")
ex2ISClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2ISCInstance"))
if mibBuilder.loadTexts: ex2ISClientEntry.setStatus('current')
if mibBuilder.loadTexts: ex2ISClientEntry.setDescription("Performance information for one particular instance of 'MSExchangeIS Client' object.")
ex2ISCInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCInstance.setStatus('current')
if mibBuilder.loadTexts: ex2ISCInstance.setDescription('Instance name.')
ex2ISCDirAccCacheEntryAddPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCDirAccCacheEntryAddPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISCDirAccCacheEntryAddPerSec.setDescription('Directory Access: Cache Entries Added/sec is the rate new entries are added to the cache while processing requests for the client.')
ex2ISCDirAccCacheEntryExpiredSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCDirAccCacheEntryExpiredSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISCDirAccCacheEntryExpiredSec.setDescription('Directory Access: Cache Entries Expired/sec is the rate entries are expired from the cache while processing requests for the client.')
ex2ISCDirAccCacheHitsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCDirAccCacheHitsPercent.setStatus('current')
if mibBuilder.loadTexts: ex2ISCDirAccCacheHitsPercent.setDescription('Directory Access: Cache Hits Percent is the percent rate of the LDAP requests which are read from the cache while processing requests for the client.')
ex2ISCDirAccLDAPReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCDirAccLDAPReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISCDirAccLDAPReadsPerSec.setDescription('Directory Access: LDAP Reads/sec is the rate LDAP reads occur while processing requests for the client.')
ex2ISCDirAccLDAPSearchesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCDirAccLDAPSearchesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISCDirAccLDAPSearchesPerSec.setDescription('Directory Access: LDAP Searches/sec is the rate LDAP searches occur while processing requests for the client.')
ex2ISCJETLogRecordBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCJETLogRecordBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISCJETLogRecordBytesPerSec.setDescription('JET Log Record Bytes/sec is the rate that database log record bytes are generated while processing requests for the client.')
ex2ISCJETLogRecordsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCJETLogRecordsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISCJETLogRecordsPerSec.setDescription('JET Log Records/sec is the rate that database log records are generated while processing requests for the client.')
ex2ISCJETPagesModifiedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCJETPagesModifiedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISCJETPagesModifiedPerSec.setDescription('JET Pages Modified/sec is the rate that database pages are modified while processing requests for the client.')
ex2ISCJETPagesPrereadPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCJETPagesPrereadPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISCJETPagesPrereadPerSec.setDescription('JET Pages Preread/sec is the rate that database pages are preread from disk while processing requests for the client.')
ex2ISCJETPagesReadPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCJETPagesReadPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISCJETPagesReadPerSec.setDescription('JET Pages Read/sec is the rate that database pages are read from disk while processing requests for the client.')
ex2ISCJETPagesReferencedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCJETPagesReferencedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISCJETPagesReferencedPerSec.setDescription('JET Pages Referenced/sec is the rate that database pages are referenced while processing requests for the client.')
ex2ISCJETPagesRemodifiedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCJETPagesRemodifiedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISCJETPagesRemodifiedPerSec.setDescription('JET Pages Remodified/sec is the rate that database pages are remodified while processing requests for the client.')
ex2ISCRPCAverageLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCRPCAverageLatency.setStatus('current')
if mibBuilder.loadTexts: ex2ISCRPCAverageLatency.setDescription('RPC Average Latency is a server RPC latency in milliseconds averaged for the past 1024 packets.')
ex2ISCRPCBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCRPCBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISCRPCBytesReceivedPerSec.setDescription('RPC Bytes Received/sec is the rate that bytes are received from RPC clients.')
ex2ISCRPCBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCRPCBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISCRPCBytesSentPerSec.setDescription('RPC Bytes Sent/sec is the rate that bytes are sent to RPC clients.')
ex2ISCRPCOperationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCRPCOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISCRPCOperationsPerSec.setDescription('RPC Operations/sec is the rate that RPC operations occur.')
ex2ISCRPCPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 46, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ISCRPCPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ISCRPCPacketsPerSec.setDescription('RPC Packets/sec is the rate that RPC packets are processed.')
ex2ISMailboxTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47), )
if mibBuilder.loadTexts: ex2ISMailboxTable.setStatus('current')
if mibBuilder.loadTexts: ex2ISMailboxTable.setDescription("A table containing performance information for instances of 'MSExchangeIS Mailbox' objects.")
ex2ISMailboxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2mbInstance"))
if mibBuilder.loadTexts: ex2ISMailboxEntry.setStatus('current')
if mibBuilder.loadTexts: ex2ISMailboxEntry.setDescription("Performance information for one particular instance of 'MSExchangeIS Mailbox' object.")
ex2mbInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbInstance.setStatus('current')
if mibBuilder.loadTexts: ex2mbInstance.setDescription('Instance name.')
ex2mbActiveClientLogons = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbActiveClientLogons.setStatus('current')
if mibBuilder.loadTexts: ex2mbActiveClientLogons.setDescription('Active Client Logons is the number of clients that performed any action within the last ten minute time interval.')
ex2mbAverageDeliveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbAverageDeliveryTime.setStatus('current')
if mibBuilder.loadTexts: ex2mbAverageDeliveryTime.setDescription('Average Delivery Time is the average time in miliseconds between the submission of a message to the mailbox store and the delivery to all local recipients (recipients on the same server) for the last 10 messages.')
ex2mbCategorizationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbCategorizationCount.setStatus('current')
if mibBuilder.loadTexts: ex2mbCategorizationCount.setDescription('Categorization Count is the number of categorizations that exist in the mailbox store. Categorizations are created when a user creates a filtered view or performs a search. When the information store must maintain an excessive number of categorizations, performance can be affected.')
ex2mbClientLogons = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbClientLogons.setStatus('current')
if mibBuilder.loadTexts: ex2mbClientLogons.setDescription('Client Logons is the number of clients (including system processes) currently logged on.')
ex2mbEventHistoryDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistoryDeletes.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistoryDeletes.setDescription('Event History: Deletes is the number of events deleted from the event history of the mailbox store since it was started.')
ex2mbEventHistoryDeletesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistoryDeletesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistoryDeletesPerSec.setDescription('Event History: Deletes/sec is rate the events are deleted from the event history of the mailbox store.')
ex2mbEventHistEventCacheHitsPerc = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistEventCacheHitsPerc.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistEventCacheHitsPerc.setDescription('Event History: Event Cache Hits Percent is the percent rate of the events read from the events history cache in the mailbox store.')
ex2mbEventHistoryEventsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistoryEventsCount.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistoryEventsCount.setDescription('Event History: Events Count is the approximate number of events stored in the event history of the mailbox store.')
ex2mbEventHistEventEmptyConClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistEventEmptyConClass.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistEventEmptyConClass.setDescription('Event History: Events With Empty Container Class is the number of events with no container class generated in the mailbox store since it was started.')
ex2mbEventHistEventEmptyMsgClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistEventEmptyMsgClass.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistEventEmptyMsgClass.setDescription('Event History: Events With Empty Message Class is the number of events with no message class generated in the mailbox store since it was started.')
ex2mbEventHistEventsTrunConClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistEventsTrunConClass.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistEventsTrunConClass.setDescription('Event History: Events With Truncated Container Class is the number of events with truncated container class generated in the mailbox store since it was started.')
ex2mbEventHistEventsTrunMsgClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistEventsTrunMsgClass.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistEventsTrunMsgClass.setDescription('Event History: Events With Truncated Message Class is the number of events with truncated message class generated in the mailbox store since it was started.')
ex2mbEventHistoryReads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistoryReads.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistoryReads.setDescription('Event History: Reads is the number of events read from the event history of the mailbox store since it was started.')
ex2mbEventHistoryReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistoryReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistoryReadsPerSec.setDescription('Event History: Reads/sec is rate the events are read from the event history of the mailbox store.')
ex2mbEventHistUncommitTransCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistUncommitTransCount.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistUncommitTransCount.setDescription('Event History: Uncommitted Transactions Count is the number of uncommmitted transactions in the mailbox store in their top level commit phase and containing at least one event.')
ex2mbEventHistoryWatermarksCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistoryWatermarksCount.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistoryWatermarksCount.setDescription('Event History: Watermarks Count is the approximate number of event watermarks stored in the event history of the mailbox store.')
ex2mbEventHistWatermarksDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistWatermarksDeletes.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistWatermarksDeletes.setDescription('Event History: Watermarks Deletes is the number of event watermarks deleted from the event history of the mailbox store since it was started.')
ex2mbEventHistWatermarkDelPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistWatermarkDelPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistWatermarkDelPerSec.setDescription('Event History: Watermarks Deletes/sec is rate the event watermarks are deleted from the event history of the mailbox store.')
ex2mbEventHistoryWatermarksReads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistoryWatermarksReads.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistoryWatermarksReads.setDescription('Event History: Watermarks Reads is the number of event watermarks read from the event history of the mailbox store since it was started.')
ex2mbEventHistWatermarkReadPrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistWatermarkReadPrSec.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistWatermarkReadPrSec.setDescription('Event History: Watermarks Reads/sec is rate the event watermarks are read from the event history of the mailbox store.')
ex2mbEventHistWatermarksWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistWatermarksWrites.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistWatermarksWrites.setDescription('Event History: Watermarks Writes is the number of event watermarks written to the event history of the mailbox store since it was started.')
ex2mbEventHistWatermarkWritPrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistWatermarkWritPrSec.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistWatermarkWritPrSec.setDescription('Event History: Watermarks Writes/sec is rate the event watermarks are written to the event history of the mailbox store.')
ex2mbEventHistoryWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistoryWrites.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistoryWrites.setDescription('Event History: Writes is the number of events written to the event history of the mailbox store since it was started.')
ex2mbEventHistoryWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbEventHistoryWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2mbEventHistoryWritesPerSec.setDescription('Event History: Writes/sec is rate the events are written to the event history of the mailbox store.')
ex2mbFolderOpensPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbFolderOpensPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2mbFolderOpensPerSec.setDescription('Folder opens/sec is the rate that requests to open folders are submitted to the information store.')
ex2mbHTTPPerDAVCurrentPendNotif = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbHTTPPerDAVCurrentPendNotif.setStatus('current')
if mibBuilder.loadTexts: ex2mbHTTPPerDAVCurrentPendNotif.setDescription('Number of notifications happened that are pending (i.e. to be polled).')
ex2mbHTTPPerDAVCurrentSubscript = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbHTTPPerDAVCurrentSubscript.setStatus('current')
if mibBuilder.loadTexts: ex2mbHTTPPerDAVCurrentSubscript.setDescription('The number of subscriptions currently active in response to HTTP SUBSCRIBE requests.')
ex2mbHTTPPerDAVCurrentTransLocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbHTTPPerDAVCurrentTransLocks.setStatus('current')
if mibBuilder.loadTexts: ex2mbHTTPPerDAVCurrentTransLocks.setDescription('The number of DAV transaction locks currently active.')
ex2mbHTTPPerDAVNotifyRequestPSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbHTTPPerDAVNotifyRequestPSec.setStatus('current')
if mibBuilder.loadTexts: ex2mbHTTPPerDAVNotifyRequestPSec.setDescription('The rate at which the server sends HTTP NOTIFY requests.')
ex2mbHTTPPerDAVTotalLocksCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbHTTPPerDAVTotalLocksCreated.setStatus('current')
if mibBuilder.loadTexts: ex2mbHTTPPerDAVTotalLocksCreated.setDescription('The number locks granted by the server in response to HTTP LOCK requests since service startup.')
ex2mbHTTPPerDAVTotalNotifyRequst = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbHTTPPerDAVTotalNotifyRequst.setStatus('current')
if mibBuilder.loadTexts: ex2mbHTTPPerDAVTotalNotifyRequst.setDescription('The number of HTTP NOTIFY requests sent by the server since service startup.')
ex2mbHTTPPerDAVTotalSubscCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbHTTPPerDAVTotalSubscCreated.setStatus('current')
if mibBuilder.loadTexts: ex2mbHTTPPerDAVTotalSubscCreated.setDescription('The number of subscriptions granted by the server in response to HTTP SUBSCRIBE requests since service startup.')
ex2mbHTTPPerDAVTotalSubscExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbHTTPPerDAVTotalSubscExpired.setStatus('current')
if mibBuilder.loadTexts: ex2mbHTTPPerDAVTotalSubscExpired.setDescription('The number of subscriptions granted by the server in response to HTTP SUBSCRIBE requests that have expired since service startup.')
ex2mbLocalDeliveries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbLocalDeliveries.setStatus('current')
if mibBuilder.loadTexts: ex2mbLocalDeliveries.setDescription('Total number of messages delivered locally')
ex2mbLocalDeliveryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbLocalDeliveryRate.setStatus('current')
if mibBuilder.loadTexts: ex2mbLocalDeliveryRate.setDescription('Rate at which messages are delivered locally')
ex2mbLogonOperationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbLogonOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2mbLogonOperationsPerSec.setDescription('Logon Operations/sec is the rate of Logon requests in the mailbox store.')
ex2mbMessageOpensPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbMessageOpensPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2mbMessageOpensPerSec.setDescription('Message Opens/sec is the rate that requests to open messages are submitted to the information store.')
ex2mbMessageRecipientsDelivered = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbMessageRecipientsDelivered.setStatus('current')
if mibBuilder.loadTexts: ex2mbMessageRecipientsDelivered.setDescription('Message Recipients Delivered is the total number of recipients that have received a message since startup.')
ex2mbMessageRecipientDelivPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbMessageRecipientDelivPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2mbMessageRecipientDelivPerSec.setDescription('Message Recipients Delivered/sec is the rate that recipients receive messages.')
ex2mbMessagesDelivered = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbMessagesDelivered.setStatus('current')
if mibBuilder.loadTexts: ex2mbMessagesDelivered.setDescription('Messages Delivered is the total number of messages delivered to all recipients since startup.')
ex2mbMessagesDeliveredPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbMessagesDeliveredPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2mbMessagesDeliveredPerSec.setDescription('Messages Delivered/sec is the rate that messages are delivered to all recipients.')
ex2mbMessagesQueuedForSubmission = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbMessagesQueuedForSubmission.setStatus('current')
if mibBuilder.loadTexts: ex2mbMessagesQueuedForSubmission.setDescription('Messages Queued For Submission is the current number of submitted messages which are not yet processed by transport.')
ex2mbMessagesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbMessagesSent.setStatus('current')
if mibBuilder.loadTexts: ex2mbMessagesSent.setDescription('Messages Sent is the total number of messages sent to the transport since startup.')
ex2mbMessagesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbMessagesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2mbMessagesSentPerSec.setDescription('Messages Sent/sec is the rate that messages are sent to the transport.')
ex2mbMessagesSubmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbMessagesSubmitted.setStatus('current')
if mibBuilder.loadTexts: ex2mbMessagesSubmitted.setDescription('Messages Submitted is the total number of messages submitted by clients since service startup.')
ex2mbMessagesSubmittedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbMessagesSubmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2mbMessagesSubmittedPerSec.setDescription('Messages Submitted/sec is the rate that messages are submitted by clients.')
ex2mbPeakClientLogons = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbPeakClientLogons.setStatus('current')
if mibBuilder.loadTexts: ex2mbPeakClientLogons.setDescription('Peak Client Logons is the maximum number of concurrent client logons since the service started.')
ex2mbReceiveQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbReceiveQueueSize.setStatus('current')
if mibBuilder.loadTexts: ex2mbReceiveQueueSize.setDescription("Receive Queue Size is the number of messages in the mailbox store's receive queue.")
ex2mbReplIDCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbReplIDCount.setStatus('current')
if mibBuilder.loadTexts: ex2mbReplIDCount.setDescription('ReplID Count (replication ID count) is the number of ReplID-to-GUID mappings in the mailbox database or public folder database.')
ex2mbRestrictedViewCacheHitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbRestrictedViewCacheHitRate.setStatus('current')
if mibBuilder.loadTexts: ex2mbRestrictedViewCacheHitRate.setDescription('Restricted View Cache Hit Rate is the rate at which restricted views are reused in the mailbox store.')
ex2mbRestrictedViewCacheMissRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbRestrictedViewCacheMissRate.setStatus('current')
if mibBuilder.loadTexts: ex2mbRestrictedViewCacheMissRate.setDescription('Restricted View Cache Miss Rate is the rate at which restricted views are created in the mailbox store.')
ex2mbSearchTaskRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbSearchTaskRate.setStatus('current')
if mibBuilder.loadTexts: ex2mbSearchTaskRate.setDescription('Number of search tasks created per second.')
ex2mbSingleInstanceRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbSingleInstanceRatio.setStatus('current')
if mibBuilder.loadTexts: ex2mbSingleInstanceRatio.setDescription('Single Instance Ratio is the average number of references to each message in the mailbox store.')
ex2mbSlowFindRowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbSlowFindRowRate.setStatus('current')
if mibBuilder.loadTexts: ex2mbSlowFindRowRate.setDescription('Slow FindRow Rate is the rate at which the slower FindRow needs to be used in the mailbox store.')
ex2mbTotalCountOfRecoverableItem = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbTotalCountOfRecoverableItem.setStatus('current')
if mibBuilder.loadTexts: ex2mbTotalCountOfRecoverableItem.setDescription('Total Count of Recoverable Items is the total number of items retained for Item Recovery')
ex2mbTotalSizeOfRecoverableItems = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbTotalSizeOfRecoverableItems.setStatus('current')
if mibBuilder.loadTexts: ex2mbTotalSizeOfRecoverableItems.setDescription('Total Size of Recoverable Items is the total size in kilobytes of items retained for Item Recovery')
ex2mbVirusScanBackgrndScanThread = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbVirusScanBackgrndScanThread.setStatus('current')
if mibBuilder.loadTexts: ex2mbVirusScanBackgrndScanThread.setDescription('Number of threads currently running background scanning.')
ex2mbVirusScanBackgrndMsgScanned = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbVirusScanBackgrndMsgScanned.setStatus('current')
if mibBuilder.loadTexts: ex2mbVirusScanBackgrndMsgScanned.setDescription('Total number of messages scanned during background scanning.')
ex2mbVirusScanBackgrndMsgSkipped = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbVirusScanBackgrndMsgSkipped.setStatus('current')
if mibBuilder.loadTexts: ex2mbVirusScanBackgrndMsgSkipped.setDescription('Total number of messages skipped during background scanning.')
ex2mbVirusScanBackgrndMsgUpDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbVirusScanBackgrndMsgUpDate.setStatus('current')
if mibBuilder.loadTexts: ex2mbVirusScanBackgrndMsgUpDate.setDescription('Total number of messages with up-to-date virus results during background scanning.')
ex2mbVirusScanExtRsltsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbVirusScanExtRsltsAccepted.setStatus('current')
if mibBuilder.loadTexts: ex2mbVirusScanExtRsltsAccepted.setDescription('Number of messages delivered with external virus scanning results that can be preserved.')
ex2mbVirusScanExtRsltNotAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbVirusScanExtRsltNotAccepted.setStatus('current')
if mibBuilder.loadTexts: ex2mbVirusScanExtRsltNotAccepted.setDescription('Number of messages delivered with external virus scanning results that cannot be preserved.')
ex2mbVirusScanExtRsltsNotPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 47, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2mbVirusScanExtRsltsNotPresent.setStatus('current')
if mibBuilder.loadTexts: ex2mbVirusScanExtRsltsNotPresent.setDescription('Number of messages delivered without external virus scanning results.')
ex2ISPublicTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48), )
if mibBuilder.loadTexts: ex2ISPublicTable.setStatus('current')
if mibBuilder.loadTexts: ex2ISPublicTable.setDescription("A table containing performance information for instances of 'MSExchangeIS Public' objects.")
ex2ISPublicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2ispInstance"))
if mibBuilder.loadTexts: ex2ISPublicEntry.setStatus('current')
if mibBuilder.loadTexts: ex2ISPublicEntry.setDescription("Performance information for one particular instance of 'MSExchangeIS Public' object.")
ex2ispInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispInstance.setStatus('current')
if mibBuilder.loadTexts: ex2ispInstance.setDescription('Instance name.')
ex2ispActiveClientLogons = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispActiveClientLogons.setStatus('current')
if mibBuilder.loadTexts: ex2ispActiveClientLogons.setDescription('Active Client Logons is the number of clients that performed any action within the last ten minute time interval.')
ex2ispAverageDeliveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispAverageDeliveryTime.setStatus('current')
if mibBuilder.loadTexts: ex2ispAverageDeliveryTime.setDescription('Average Delivery Time is the average time in miliseconds between the submission of a message to the public store and the delivery to all local recipients (recipients on the same server) for the last 10 messages.')
ex2ispCategorizationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispCategorizationCount.setStatus('current')
if mibBuilder.loadTexts: ex2ispCategorizationCount.setDescription('Categorization Count is the number of categorizations that exist in the public store. Categorizations are created when a user creates a filtered view or performs a search. When the information store must maintain an excessive number of categorizations, performance can be affected.')
ex2ispClientLogons = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispClientLogons.setStatus('current')
if mibBuilder.loadTexts: ex2ispClientLogons.setDescription('Client Logons is the number of clients (including system processes) currently logged on.')
ex2ispEventHistoryDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistoryDeletes.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistoryDeletes.setDescription('Event History: Deletes is the number of events deleted from the event history of the public store since it was started.')
ex2ispEventHistoryDeletesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistoryDeletesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistoryDeletesPerSec.setDescription('Event History: Deletes/sec is rate the events are deleted from the event history of the public store.')
ex2ispEventHistEventCacheHitPerc = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistEventCacheHitPerc.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistEventCacheHitPerc.setDescription('Event History: Event Cache Hits Percent is the percent rate of the events read from the events history cache in the public store.')
ex2ispEventHistoryEventsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistoryEventsCount.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistoryEventsCount.setDescription('Event History: Events Count is the approximate number of events stored in the event history of the public store.')
ex2ispEventHistEvntEmptyCntClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistEvntEmptyCntClass.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistEvntEmptyCntClass.setDescription('Event History: Events With Empty Container Class is the number of events with no container class generated in the public store since it was started.')
ex2ispEventHisEventEmptyMsgClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHisEventEmptyMsgClass.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHisEventEmptyMsgClass.setDescription('Event History: Events With Empty Message Class is the number of events with no message class generated in the public store since it was started.')
ex2ispEventHistEventTrunConClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistEventTrunConClass.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistEventTrunConClass.setDescription('Event History: Events With Truncated Container Class is the number of events with truncated container class generated in the public store since it was started.')
ex2ispEventHistEventTrunMsgClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistEventTrunMsgClass.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistEventTrunMsgClass.setDescription('Event History: Events With Truncated Message Class is the number of events with truncated message class generated in the public store since it was started.')
ex2ispEventHistoryReads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistoryReads.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistoryReads.setDescription('Event History: Reads is the number of events read from the event history of the public store since it was started.')
ex2ispEventHistoryReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistoryReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistoryReadsPerSec.setDescription('Event History: Reads/sec is rate the events are read from the event history of the public store.')
ex2ispEventHistUncommitTranCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistUncommitTranCount.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistUncommitTranCount.setDescription('Event History: Uncommitted Transactions Count is the number of uncommmitted transactions in the public store in their top level commit phase and containing at least one event.')
ex2ispEventHistWatermarksCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistWatermarksCount.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistWatermarksCount.setDescription('Event History: Watermarks Count is the approximate number of event watermarks stored in the event history of the public store.')
ex2ispEventHistWatermarksDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistWatermarksDeletes.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistWatermarksDeletes.setDescription('Event History: Watermarks Deletes is the number of event watermarks deleted from the event history of the public store since it was started.')
ex2ispEventHistWatermarkDelPrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistWatermarkDelPrSec.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistWatermarkDelPrSec.setDescription('Event History: Watermarks Deletes/sec is rate the event watermarks are deleted from the event history of the public store.')
ex2ispEventHistWatermarksReads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistWatermarksReads.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistWatermarksReads.setDescription('Event History: Watermarks Reads is the number of event watermarks read from the event history of the public store since it was started.')
ex2ispEventHistWatermarkRdPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistWatermarkRdPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistWatermarkRdPerSec.setDescription('Event History: Watermarks Reads/sec is rate the event watermarks are read from the event history of the public store.')
ex2ispEventHistWatermarksWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistWatermarksWrites.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistWatermarksWrites.setDescription('Event History: Watermarks Writes is the number of event watermarks written to the event history of the public store since it was started.')
ex2ispEventHistWatermarkWriteSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistWatermarkWriteSec.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistWatermarkWriteSec.setDescription('Event History: Watermarks Writes/sec is rate the event watermarks are written to the event history of the public store.')
ex2ispEventHistoryWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistoryWrites.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistoryWrites.setDescription('Event History: Writes is the number of events written to the event history of the public store since it was started.')
ex2ispEventHistoryWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispEventHistoryWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ispEventHistoryWritesPerSec.setDescription('Event History: Writes/sec is rate the events are written to the event history of the public store.')
ex2ispFolderOpensPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispFolderOpensPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ispFolderOpensPerSec.setDescription('Folder opens/sec is the rate that requests to open folders are submitted to the information store.')
ex2ispHTTPPerDAVCurrentPendNotif = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispHTTPPerDAVCurrentPendNotif.setStatus('current')
if mibBuilder.loadTexts: ex2ispHTTPPerDAVCurrentPendNotif.setDescription('Number of notifications happened that are pending (i.e. to be polled).')
ex2ispHTTPPerDAVCurrentSubscript = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispHTTPPerDAVCurrentSubscript.setStatus('current')
if mibBuilder.loadTexts: ex2ispHTTPPerDAVCurrentSubscript.setDescription('The number of subscriptions currently active in response to HTTP SUBSCRIBE requests.')
ex2ispHTTPPerDAVCurrentTransLock = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispHTTPPerDAVCurrentTransLock.setStatus('current')
if mibBuilder.loadTexts: ex2ispHTTPPerDAVCurrentTransLock.setDescription('The number of DAV transaction locks currently active.')
ex2ispHTTPPerDAVNotifyReqPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispHTTPPerDAVNotifyReqPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ispHTTPPerDAVNotifyReqPerSec.setDescription('The rate at which the server sends HTTP NOTIFY requests.')
ex2ispHTTPPerDAVTotalLockCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispHTTPPerDAVTotalLockCreated.setStatus('current')
if mibBuilder.loadTexts: ex2ispHTTPPerDAVTotalLockCreated.setDescription('The number locks granted by the server in response to HTTP LOCK requests since service startup.')
ex2ispHTTPPerDAVTotalNotifyReqst = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispHTTPPerDAVTotalNotifyReqst.setStatus('current')
if mibBuilder.loadTexts: ex2ispHTTPPerDAVTotalNotifyReqst.setDescription('The number of HTTP NOTIFY requests sent by the server since service startup.')
ex2ispHTTPPerDAVTotalSubsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispHTTPPerDAVTotalSubsCreated.setStatus('current')
if mibBuilder.loadTexts: ex2ispHTTPPerDAVTotalSubsCreated.setDescription('The number of subscriptions granted by the server in response to HTTP SUBSCRIBE requests since service startup.')
ex2ispHTTPPerDAVTotalSubsExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispHTTPPerDAVTotalSubsExpired.setStatus('current')
if mibBuilder.loadTexts: ex2ispHTTPPerDAVTotalSubsExpired.setDescription('The number of subscriptions granted by the server in response to HTTP SUBSCRIBE requests that have expired since service startup.')
ex2ispLogonOperationsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispLogonOperationsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ispLogonOperationsPerSec.setDescription('Logon Operations/sec is the rate of Logon requests in the public store.')
ex2ispMessageOpensPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispMessageOpensPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ispMessageOpensPerSec.setDescription('Message Opens/sec is the rate that requests to open messages are submitted to the information store.')
ex2ispMessageRecipientsDelivered = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispMessageRecipientsDelivered.setStatus('current')
if mibBuilder.loadTexts: ex2ispMessageRecipientsDelivered.setDescription('Message Recipients Delivered is the total number of recipients that have received a message since startup.')
ex2ispMsgRecipientsDeliverPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispMsgRecipientsDeliverPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ispMsgRecipientsDeliverPerSec.setDescription('Message Recipients Delivered/sec is the rate that recipients receive messages.')
ex2ispMessagesDelivered = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispMessagesDelivered.setStatus('current')
if mibBuilder.loadTexts: ex2ispMessagesDelivered.setDescription('Messages Delivered is the total number of messages delivered to all recipients since startup.')
ex2ispMessagesDeliveredPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispMessagesDeliveredPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ispMessagesDeliveredPerSec.setDescription('Messages Delivered/sec is the rate that messages are delivered to all recipients.')
ex2ispMsgsQueuedForSubmission = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispMsgsQueuedForSubmission.setStatus('current')
if mibBuilder.loadTexts: ex2ispMsgsQueuedForSubmission.setDescription('Messages Queued For Submission is the current number of submitted messages which are not yet processed by transport.')
ex2ispMessagesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispMessagesSent.setStatus('current')
if mibBuilder.loadTexts: ex2ispMessagesSent.setDescription('Messages Sent is the total number of messages sent to the transport since startup.')
ex2ispMessagesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispMessagesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ispMessagesSentPerSec.setDescription('Messages Sent/sec is the rate that messages are sent to the transport.')
ex2ispMessagesSubmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispMessagesSubmitted.setStatus('current')
if mibBuilder.loadTexts: ex2ispMessagesSubmitted.setDescription('Messages Submitted is the total number of messages submitted by clients since service startup.')
ex2ispMessagesSubmittedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispMessagesSubmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2ispMessagesSubmittedPerSec.setDescription('Messages Submitted/sec is the rate that messages are submitted by clients.')
ex2ispNumMsgsExpireFrmPublicFold = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispNumMsgsExpireFrmPublicFold.setStatus('current')
if mibBuilder.loadTexts: ex2ispNumMsgsExpireFrmPublicFold.setDescription('Number of messages expired from public folders')
ex2ispPeakClientLogons = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispPeakClientLogons.setStatus('current')
if mibBuilder.loadTexts: ex2ispPeakClientLogons.setDescription('Peak Client Logons is the maximum number of concurrent client logons since the service started.')
ex2ispReceiveQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReceiveQueueSize.setStatus('current')
if mibBuilder.loadTexts: ex2ispReceiveQueueSize.setDescription("Receive Queue Size is the number of messages in the public store's receive queue.")
ex2ispReplIDCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReplIDCount.setStatus('current')
if mibBuilder.loadTexts: ex2ispReplIDCount.setDescription('ReplID Count (replication ID count) is the number of ReplID-to-GUID mappings in the mailbox database or public folder database.')
ex2ispReplicBackfillDataMsgsRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReplicBackfillDataMsgsRecv.setStatus('current')
if mibBuilder.loadTexts: ex2ispReplicBackfillDataMsgsRecv.setDescription('Replication Backfill Data Messages Received is the number of replication messages received from other servers in response to backfill requests since service startup.')
ex2ispReplicBackfillDataMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReplicBackfillDataMsgsSent.setStatus('current')
if mibBuilder.loadTexts: ex2ispReplicBackfillDataMsgsSent.setDescription('Replication Backfill Data Messages Sent is the number of replication messages sent in response to backfill requests from other servers since service startup.')
ex2ispReplicBackfillRequestRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReplicBackfillRequestRecvd.setStatus('current')
if mibBuilder.loadTexts: ex2ispReplicBackfillRequestRecvd.setDescription('Replication Backfill Requests Received is the number of backfill request replication messages that have been received from other servers since service startup.')
ex2ispReplicBackfillRequestsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReplicBackfillRequestsSent.setStatus('current')
if mibBuilder.loadTexts: ex2ispReplicBackfillRequestsSent.setDescription('Replication Backfill Requests Sent is the number of backfill request replication messages that have been sent to other servers since service startup.')
ex2ispReplicFolderChangeReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReplicFolderChangeReceived.setStatus('current')
if mibBuilder.loadTexts: ex2ispReplicFolderChangeReceived.setDescription('Replication Folder Changes Received is the number of folder changes that have been replicated from other servers since service startup.')
ex2ispReplicFolderChangesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReplicFolderChangesSent.setStatus('current')
if mibBuilder.loadTexts: ex2ispReplicFolderChangesSent.setDescription('Replication Folder Tree Messages Sent is the number of replication messages due to public folder hierarchy changes that have been sent to other servers since service startup.')
ex2ispReplicFolderDataMsgReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReplicFolderDataMsgReceive.setStatus('current')
if mibBuilder.loadTexts: ex2ispReplicFolderDataMsgReceive.setDescription('Replication Folder Data Messages Received is the number of replication messages due to changes to items in public folders that have been received from other service since service startup.')
ex2ispReplicFolderDataMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReplicFolderDataMsgsSent.setStatus('current')
if mibBuilder.loadTexts: ex2ispReplicFolderDataMsgsSent.setDescription('Replication Folder Data Message Messages sent is the number of replication messages due to changes to items in public folders that have been sent to other servers since service startup.')
ex2ispReplicFolderTreeMsgReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReplicFolderTreeMsgReceive.setStatus('current')
if mibBuilder.loadTexts: ex2ispReplicFolderTreeMsgReceive.setDescription('Replication Folder Tree Messages Received is the number of replication messages due to public folder hierarchy changes that have been received from other servers since service startup.')
ex2ispReplicFolderTreeMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReplicFolderTreeMsgsSent.setStatus('current')
if mibBuilder.loadTexts: ex2ispReplicFolderTreeMsgsSent.setDescription('Replication Folder Tree Messages Sent is the number of replication messages due to public folder hierarchy changes that have been sent to other servers since service startup.')
ex2ispReplicMessageChangeReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReplicMessageChangeReceive.setStatus('current')
if mibBuilder.loadTexts: ex2ispReplicMessageChangeReceive.setDescription('Replication Message Changes Received is the number of changes to items in public folders that have been received from other servers since service startup.')
ex2ispReplicMessageChangesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReplicMessageChangesSent.setStatus('current')
if mibBuilder.loadTexts: ex2ispReplicMessageChangesSent.setDescription('Replication Message Changes Sent is the number of changes to items in public folders that have been replicated to other servers since service startup.')
ex2ispReplicMsgsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReplicMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: ex2ispReplicMsgsReceived.setDescription('Replication Messages Received is the total number of replication messages received from other servers since service startup.')
ex2ispReplicationMessagesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReplicationMessagesSent.setStatus('current')
if mibBuilder.loadTexts: ex2ispReplicationMessagesSent.setDescription('Replication Messages Sent is the total number of replication messages that have been sent to other servers since service startup.')
ex2ispReplicReceiveQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReplicReceiveQueueSize.setStatus('current')
if mibBuilder.loadTexts: ex2ispReplicReceiveQueueSize.setDescription('Replication Receive Queue Size is the number of replication messages waiting to be processed.')
ex2ispReplicStatusMsgsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReplicStatusMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: ex2ispReplicStatusMsgsReceived.setDescription('Status Messages Received is the number of replication status request or response messages that have been received from other servers since service startup.')
ex2ispReplicStatusMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispReplicStatusMsgsSent.setStatus('current')
if mibBuilder.loadTexts: ex2ispReplicStatusMsgsSent.setDescription('Replication Status Messages Sent is the number of replication status request or response messages that have been sent to other servers since service startup.')
ex2ispRestrictedViewCacheHitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispRestrictedViewCacheHitRate.setStatus('current')
if mibBuilder.loadTexts: ex2ispRestrictedViewCacheHitRate.setDescription('Restricted View Cache Hit Rate is the rate at which restricted views are reused in the public store.')
ex2ispRestricteViewCacheMissRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispRestricteViewCacheMissRate.setStatus('current')
if mibBuilder.loadTexts: ex2ispRestricteViewCacheMissRate.setDescription('Restricted View Cache Miss Rate is the rate at which restricted views are created in the public store.')
ex2ispSearchTaskRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispSearchTaskRate.setStatus('current')
if mibBuilder.loadTexts: ex2ispSearchTaskRate.setDescription('Number of search tasks created per second.')
ex2ispSingleInstanceRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispSingleInstanceRatio.setStatus('current')
if mibBuilder.loadTexts: ex2ispSingleInstanceRatio.setDescription('Single Instance Ratio is the average number of references to each message in the public store.')
ex2ispSlowFindRowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispSlowFindRowRate.setStatus('current')
if mibBuilder.loadTexts: ex2ispSlowFindRowRate.setDescription('Slow FindRow Rate is the rate at which the slower FindRow needs to be used in the public store.')
ex2ispTotalCountRecoverableItems = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispTotalCountRecoverableItems.setStatus('current')
if mibBuilder.loadTexts: ex2ispTotalCountRecoverableItems.setDescription('Total Count of Recoverable Items is the total number of items retained for Item Recovery')
ex2ispTotalSizeOfRecoverableItem = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispTotalSizeOfRecoverableItem.setStatus('current')
if mibBuilder.loadTexts: ex2ispTotalSizeOfRecoverableItem.setDescription('Total Size of Recoverable Items is the total size in kilobytes of items retained for Item Recovery')
ex2ispVirusScanBackgrndScnThread = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispVirusScanBackgrndScnThread.setStatus('current')
if mibBuilder.loadTexts: ex2ispVirusScanBackgrndScnThread.setDescription('Number of threads currently running background scanning.')
ex2ispVirusScanBackgrndMsgsScan = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispVirusScanBackgrndMsgsScan.setStatus('current')
if mibBuilder.loadTexts: ex2ispVirusScanBackgrndMsgsScan.setDescription('Total number of messages scanned during background scanning.')
ex2ispVirusScanBackgrndMsgSkippd = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispVirusScanBackgrndMsgSkippd.setStatus('current')
if mibBuilder.loadTexts: ex2ispVirusScanBackgrndMsgSkippd.setDescription('Total number of messages skipped during background scanning.')
ex2ispVirusScanBackgrndMsgUpDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispVirusScanBackgrndMsgUpDate.setStatus('current')
if mibBuilder.loadTexts: ex2ispVirusScanBackgrndMsgUpDate.setDescription('Total number of messages with up-to-date virus results during background scanning.')
ex2ispVirusScanExtResultAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 78), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispVirusScanExtResultAccepted.setStatus('current')
if mibBuilder.loadTexts: ex2ispVirusScanExtResultAccepted.setDescription('Number of messages delivered with external virus scanning results that can be preserved.')
ex2ispVirusScanExtResultNotAccpt = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 79), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispVirusScanExtResultNotAccpt.setStatus('current')
if mibBuilder.loadTexts: ex2ispVirusScanExtResultNotAccpt.setDescription('Number of messages delivered with external virus scanning results that cannot be preserved.')
ex2ispVirusScanExtResultsNotPres = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 48, 1, 80), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2ispVirusScanExtResultsNotPres.setStatus('current')
if mibBuilder.loadTexts: ex2ispVirusScanExtResultsNotPres.setDescription('Number of messages delivered without external virus scanning results.')
ex2Imap4Table = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49), )
if mibBuilder.loadTexts: ex2Imap4Table.setStatus('current')
if mibBuilder.loadTexts: ex2Imap4Table.setDescription("A table containing performance information for instances of 'MSExchangeImap4' objects.")
ex2Imap4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2im4Instance"))
if mibBuilder.loadTexts: ex2Imap4Entry.setStatus('current')
if mibBuilder.loadTexts: ex2Imap4Entry.setDescription("Performance information for one particular instance of 'MSExchangeImap4' object.")
ex2im4Instance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4Instance.setStatus('current')
if mibBuilder.loadTexts: ex2im4Instance.setDescription('Instance name.')
ex2im4ActiveSSLConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4ActiveSSLConnections.setStatus('current')
if mibBuilder.loadTexts: ex2im4ActiveSSLConnections.setDescription('Active SSL Connections is the number of SSL or TLS connections that are currently open on the IMAP service.')
ex2im4AppendFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4AppendFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4AppendFailures.setDescription('Append Failures is the number of APPEND commands that have failed since the IMAP service was started.')
ex2im4AppendRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4AppendRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4AppendRate.setDescription('Append Rate is the number of APPEND commands per second.')
ex2im4AppendTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4AppendTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4AppendTotal.setDescription('Append Total is the total number of APPEND commands that have been received since the IMAP service started.')
ex2im4AuthenticateFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4AuthenticateFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4AuthenticateFailures.setDescription('Authenticate Failures is the number of AUTHENTICATE commands that have failed since the IMAP service was started.')
ex2im4AuthenticateRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4AuthenticateRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4AuthenticateRate.setDescription('Authenticate Rate is the number of AUTHENTICATE commands per second.')
ex2im4AuthenticateTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4AuthenticateTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4AuthenticateTotal.setDescription('Authenticate Total is the total number of AUTHENTICATE commands that have been received since the IMAP service was started.')
ex2im4AvgCommProcessTimeMillisec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4AvgCommProcessTimeMillisec.setStatus('current')
if mibBuilder.loadTexts: ex2im4AvgCommProcessTimeMillisec.setDescription('Average Command Processing Time is the average processing time, in milliseconds, for the last 1024 commands received from clients.')
ex2im4CapabilityFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4CapabilityFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4CapabilityFailures.setDescription('Capability Failures is the number of CAPABILITY commands that have failed since the IMAP service was started.')
ex2im4CapabilityRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4CapabilityRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4CapabilityRate.setDescription('Capability Rate is the number of CAPABILITY commands per second.')
ex2im4CapabilityTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4CapabilityTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4CapabilityTotal.setDescription('Capability Total is the total number of CAPABILITY commands that have been received since the IMAP service was started.')
ex2im4CheckFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4CheckFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4CheckFailures.setDescription('Check Failures is the number of CHECK commands that have failed since the IMAP service was started.')
ex2im4CheckRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4CheckRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4CheckRate.setDescription('Check Rate is the number of CHECK commands per second.')
ex2im4CheckTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4CheckTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4CheckTotal.setDescription('Check Total is the total number of CHECK commands that have been received since the IMAP service was started.')
ex2im4CloseFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4CloseFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4CloseFailures.setDescription('Close Failures is the number of CLOSE commands that have failed since the IMAP service was started.')
ex2im4CloseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4CloseRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4CloseRate.setDescription('Close Rate is the number of CLOSE commands per second.')
ex2im4CloseTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4CloseTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4CloseTotal.setDescription('Close Total is the total number of CLOSE commands that have been received since the IMAP service was started.')
ex2im4ConnectionsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4ConnectionsFailed.setStatus('current')
if mibBuilder.loadTexts: ex2im4ConnectionsFailed.setDescription('Connections Failed is the number of connections that have failed since the IMAP service was started.')
ex2im4ConnectionsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4ConnectionsRejected.setStatus('current')
if mibBuilder.loadTexts: ex2im4ConnectionsRejected.setDescription('Connections Rejected is the number of connections that have been rejected since the IMAP service was started.')
ex2im4CopyFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4CopyFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4CopyFailures.setDescription('Copy Failures is the number of COPY commands that have failed since the IMAP service was started.')
ex2im4CopyRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4CopyRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4CopyRate.setDescription('Copy Rate is the number of COPY commands per second.')
ex2im4CopyTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4CopyTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4CopyTotal.setDescription('Copy Total is the total number of COPY commands that have been received since the IMAP service was started.')
ex2im4CreateFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4CreateFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4CreateFailures.setDescription('Create Failures is the number of CREATE commands that have failed since the IMAP service was started.')
ex2im4CreateRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4CreateRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4CreateRate.setDescription('Create Rate is the number of CREATE commands per second.')
ex2im4CreateTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4CreateTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4CreateTotal.setDescription('Create Total is the total number of CREATE commands that have been received since the IMAP service was started.')
ex2im4CurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4CurrentConnections.setStatus('current')
if mibBuilder.loadTexts: ex2im4CurrentConnections.setDescription('Current Connections is the number of connections that are currently open on the IMAP service.')
ex2im4DeleteFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4DeleteFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4DeleteFailures.setDescription('Delete Failures is the number of DELETE commands that have failed since the IMAP service was started.')
ex2im4DeleteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4DeleteRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4DeleteRate.setDescription('Delete Rate is the number of DELETE commands per second.')
ex2im4DeleteTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4DeleteTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4DeleteTotal.setDescription('Delete Total is the total number of DELETE commands that have been received since the IMAP service was started.')
ex2im4ExamineFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4ExamineFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4ExamineFailures.setDescription('Examine Failures is the number of EXAMINE commands that have failed since the IMAP service was started.')
ex2im4ExamineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4ExamineRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4ExamineRate.setDescription('Examine Rate is the number of EXAMINE commands per second.')
ex2im4ExamineTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4ExamineTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4ExamineTotal.setDescription('Examine Total is the total number of EXAMINE commands that have been received since the IMAP service was started.')
ex2im4ExpungeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4ExpungeFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4ExpungeFailures.setDescription('Expunge Failures is the number of EXPUNGE commands that have failed since the IMAP service was started.')
ex2im4ExpungeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4ExpungeRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4ExpungeRate.setDescription('Expunge Rate is the number of EXPUNGE commands per second.')
ex2im4ExpungeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4ExpungeTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4ExpungeTotal.setDescription('Expunge Total is the total number of EXPUNGE commands that have been received since the IMAP service was started.')
ex2im4FetchFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4FetchFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4FetchFailures.setDescription('Fetch Failures is the number of FETCH commands that have failed since the IMAP service was started.')
ex2im4FetchRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4FetchRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4FetchRate.setDescription('Fetch Rate is the number of FETCH commands per second.')
ex2im4FetchTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4FetchTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4FetchTotal.setDescription('Fetch Total is the total number of FETCH commands that have been received since the IMAP service was started.')
ex2im4IdleFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4IdleFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4IdleFailures.setDescription('Idle Failures is the number of IDLE commands that have failed since the IMAP service was started.')
ex2im4IdleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4IdleRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4IdleRate.setDescription('Idle Rate is the number of IDLE commands per second.')
ex2im4IdleTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4IdleTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4IdleTotal.setDescription('Idle Total is the total number of IDLE commands that have been received since the IMAP service was started.')
ex2im4InvalidCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4InvalidCommands.setStatus('current')
if mibBuilder.loadTexts: ex2im4InvalidCommands.setDescription('Invalid Commands is the number of commands that failed since the IMAP service was started because the command was not valid for the state of the connection.')
ex2im4InvalidCommandsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4InvalidCommandsRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4InvalidCommandsRate.setDescription('Invalid Commands Rate is the number of invalid commands per second.')
ex2im4LSUBFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4LSUBFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4LSUBFailures.setDescription('LSUB Failures is the number of LSUB commands that have failed since the IMAP service was started.')
ex2im4LSUBRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4LSUBRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4LSUBRate.setDescription('LSUB Rate is the number of LSUB commands per second.')
ex2im4LSUBTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4LSUBTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4LSUBTotal.setDescription('LSUB Total is the total number of LSUB commands that have been received since the IMAP service was started.')
ex2im4ListFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4ListFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4ListFailures.setDescription('List Failures is the number of LIST commands that have failed since the IMAP service was started.')
ex2im4ListRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4ListRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4ListRate.setDescription('List Rate is the number of LIST commands per second.')
ex2im4ListTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4ListTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4ListTotal.setDescription('List Total is the total number of LIST commands that have been received since the IMAP service was started.')
ex2im4LoginFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4LoginFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4LoginFailures.setDescription('Login Failures is the number of LOGIN commands that have failed since the IMAP service was started.')
ex2im4LoginRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4LoginRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4LoginRate.setDescription('Login Rate is the number of LOGIN commands per second.')
ex2im4LoginTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4LoginTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4LoginTotal.setDescription('Login Total is the total number of LOGIN commands that have been received since the IMAP service was started.')
ex2im4LogoutFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4LogoutFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4LogoutFailures.setDescription('Logout Failures is the number of LOGOUT commands that have failed since the IMAP service was started.')
ex2im4LogoutRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4LogoutRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4LogoutRate.setDescription('Logout Rate is the number of LOGOUT commands per second.')
ex2im4LogoutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4LogoutTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4LogoutTotal.setDescription('Logout Total is the total number of LOGOUT commands that have been received since the IMAP service was started.')
ex2im4NOOPFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4NOOPFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4NOOPFailures.setDescription('NOOP Failures is the number of NOOP commands that have failed since the IMAP service was started.')
ex2im4NOOPRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4NOOPRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4NOOPRate.setDescription('NOOP Rate is the number of NOOP commands per second.')
ex2im4NOOPTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4NOOPTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4NOOPTotal.setDescription('NOOP Total is the total number of NOOP commands that have been received since the IMAP service was started.')
ex2im4NamespaceFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4NamespaceFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4NamespaceFailures.setDescription('Namespace Failures is the number of NAMESPACE commands that have failed since the IMAP service was started.')
ex2im4NamespaceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4NamespaceRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4NamespaceRate.setDescription('Namespace Rate is the number of NAMESPACE commands per second.')
ex2im4NamespaceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4NamespaceTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4NamespaceTotal.setDescription('Namespace Total is the total number of NAMESPACE commands that have been received since the IMAP service was started.')
ex2im4RenameFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4RenameFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4RenameFailures.setDescription('Rename Failures is the number of RENAME commands that have failed since the IMAP service was started.')
ex2im4RenameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4RenameRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4RenameRate.setDescription('Rename Rate is the number of RENAME commands per second.')
ex2im4RenameTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4RenameTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4RenameTotal.setDescription('Rename Total is the total number of RENAME commands that have been received since the IMAP service was started.')
ex2im4SSLConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4SSLConnections.setStatus('current')
if mibBuilder.loadTexts: ex2im4SSLConnections.setDescription('SSL Connections is the total number of SSL or TLS connections that have been opened since the IMAP service was started.')
ex2im4STARTTLSFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4STARTTLSFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4STARTTLSFailures.setDescription('STARTTLS Failures is the number of STARTTLS commands that have failed since the IMAP service was started.')
ex2im4STARTTLSRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4STARTTLSRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4STARTTLSRate.setDescription('STARTTLS Rate is the number of STARTTLS commands per second.')
ex2im4STARTTLSTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4STARTTLSTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4STARTTLSTotal.setDescription('STARTTLS Total is the total number of STARTTLS commands that have been received since the IMAP service was started.')
ex2im4SearchFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4SearchFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4SearchFailures.setDescription('Search Failures is the number of SEARCH commands that have failed since the IMAP service was started.')
ex2im4SearchRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4SearchRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4SearchRate.setDescription('Search Rate is the number of SEARCH commands per second.')
ex2im4SearchTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4SearchTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4SearchTotal.setDescription('Search Total is the total number of SEARCH commands that have been received since the IMAP service was started.')
ex2im4SelectFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4SelectFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4SelectFailures.setDescription('Select Failures is the number of SELECT commands that have failed since the IMAP service was started.')
ex2im4SelectRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4SelectRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4SelectRate.setDescription('Select Rate is the number of SELECT commands per second.')
ex2im4SelectTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4SelectTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4SelectTotal.setDescription('Select Total is the total number of SELECT commands that have been received since the IMAP service was started.')
ex2im4StatusFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4StatusFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4StatusFailures.setDescription('Status Failures is the number of STATUS commands that have failed since the IMAP service was started.')
ex2im4StatusRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4StatusRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4StatusRate.setDescription('Status Rate is the number of STATUS commands per second.')
ex2im4StatusTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 78), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4StatusTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4StatusTotal.setDescription('Status Total is the total number of STATUS commands that have been received since the IMAP service was started.')
ex2im4StoreFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 79), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4StoreFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4StoreFailures.setDescription('Store Failures is the number of STORE commands that have failed since the IMAP service was started.')
ex2im4StoreRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 80), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4StoreRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4StoreRate.setDescription('Store Rate is the number of STORE commands per second.')
ex2im4StoreTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 81), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4StoreTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4StoreTotal.setDescription('Store Total is the total number of STORE commands that have been received since the IMAP service was started.')
ex2im4SubscribeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 82), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4SubscribeFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4SubscribeFailures.setDescription('Subscribe Failures is the number of SUBSCRIBE commands that have failed since the IMAP service was started.')
ex2im4SubscribeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 83), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4SubscribeRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4SubscribeRate.setDescription('Subscribe Rate is the number of SUBSCRIBE commands per second.')
ex2im4SubscribeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 84), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4SubscribeTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4SubscribeTotal.setDescription('Subscribe Total is the total number of SUBSCRIBE commands that have been received since the IMAP service was started.')
ex2im4TotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 85), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4TotalConnections.setStatus('current')
if mibBuilder.loadTexts: ex2im4TotalConnections.setDescription('Connections Total is the total number of connections that have been opened since the IMAP service was started.')
ex2im4UnsubscribeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 86), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4UnsubscribeFailures.setStatus('current')
if mibBuilder.loadTexts: ex2im4UnsubscribeFailures.setDescription('Unsubscribe Failures is the number of UNSUBCRIBE commands that have failed since the IMAP service was started.')
ex2im4UnsubscribeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 87), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4UnsubscribeRate.setStatus('current')
if mibBuilder.loadTexts: ex2im4UnsubscribeRate.setDescription('Unsubscribe Rate is the number of UNSUBSCRIBE commands per second.')
ex2im4UnsubscribeTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 49, 1, 88), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2im4UnsubscribeTotal.setStatus('current')
if mibBuilder.loadTexts: ex2im4UnsubscribeTotal.setDescription('Unsubscribe Total is the total number of UNSUBSCRIBE commands that have been received since the IMAP service was started.')
ex2MailSubmissionTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 50), )
if mibBuilder.loadTexts: ex2MailSubmissionTable.setStatus('current')
if mibBuilder.loadTexts: ex2MailSubmissionTable.setDescription("A table containing performance information for instances of 'MSExchangeMailSubmission' objects.")
ex2MailSubmissionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 50, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2msInstance"))
if mibBuilder.loadTexts: ex2MailSubmissionEntry.setStatus('current')
if mibBuilder.loadTexts: ex2MailSubmissionEntry.setDescription("Performance information for one particular instance of 'MSExchangeMailSubmission' object.")
ex2msInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 50, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2msInstance.setStatus('current')
if mibBuilder.loadTexts: ex2msInstance.setDescription('Instance name.')
ex2msFailedSubmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 50, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2msFailedSubmissions.setStatus('current')
if mibBuilder.loadTexts: ex2msFailedSubmissions.setDescription('Failed Submissions is the number of failed submissions.')
ex2msFailedSubmissionsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 50, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2msFailedSubmissionsPerSecond.setStatus('current')
if mibBuilder.loadTexts: ex2msFailedSubmissionsPerSecond.setDescription('Failed Submissions Per Second')
ex2msHubServers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 50, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2msHubServers.setStatus('current')
if mibBuilder.loadTexts: ex2msHubServers.setDescription('Hub Servers is the total number of hub servers in the same ADSite.')
ex2msHubServersInRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 50, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2msHubServersInRetry.setStatus('current')
if mibBuilder.loadTexts: ex2msHubServersInRetry.setDescription('Hub Servers In Retry is the number of hub servers in retry.')
ex2msSuccessfulSubmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 50, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2msSuccessfulSubmissions.setStatus('current')
if mibBuilder.loadTexts: ex2msSuccessfulSubmissions.setDescription('Successful Submissions is the number of successful submissions.')
ex2msSuccessfulSubmsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 50, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2msSuccessfulSubmsPerSecond.setStatus('current')
if mibBuilder.loadTexts: ex2msSuccessfulSubmsPerSecond.setDescription('Successful Submissions Per Second')
ex2msTemporarySubmissionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 50, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2msTemporarySubmissionFailures.setStatus('current')
if mibBuilder.loadTexts: ex2msTemporarySubmissionFailures.setDescription('Temporary Submission Failures is the number of temporary submission failures.')
ex2msTemporarySubmFailuresPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 50, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2msTemporarySubmFailuresPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2msTemporarySubmFailuresPerSec.setDescription('Temporary Submission Failures per second is the number of temporary submission failures per second.')
ex2Pop3Table = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51), )
if mibBuilder.loadTexts: ex2Pop3Table.setStatus('current')
if mibBuilder.loadTexts: ex2Pop3Table.setDescription("A table containing performance information for instances of 'MSExchangePop3' objects.")
ex2Pop3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2p3Instance"))
if mibBuilder.loadTexts: ex2Pop3Entry.setStatus('current')
if mibBuilder.loadTexts: ex2Pop3Entry.setDescription("Performance information for one particular instance of 'MSExchangePop3' object.")
ex2p3Instance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3Instance.setStatus('current')
if mibBuilder.loadTexts: ex2p3Instance.setDescription('Instance name.')
ex2p3AUTHFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3AUTHFailures.setStatus('current')
if mibBuilder.loadTexts: ex2p3AUTHFailures.setDescription('AUTH Failures is the number of AUTH commands that have failed since the POP service was started.')
ex2p3AUTHRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3AUTHRate.setStatus('current')
if mibBuilder.loadTexts: ex2p3AUTHRate.setDescription('AUTH Rate is the number of AUTH commands per second.')
ex2p3AUTHTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3AUTHTotal.setStatus('current')
if mibBuilder.loadTexts: ex2p3AUTHTotal.setDescription('AUTH Total is the total number of AUTH commands that have been received since the POP service was started.')
ex2p3ActiveSSLConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3ActiveSSLConnections.setStatus('current')
if mibBuilder.loadTexts: ex2p3ActiveSSLConnections.setDescription('Active SSL Connections is the number of SSL or TLS connections that are currently open on the POP service.')
ex2p3AvgComndProcessTimeMillisec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3AvgComndProcessTimeMillisec.setStatus('current')
if mibBuilder.loadTexts: ex2p3AvgComndProcessTimeMillisec.setDescription('Average Command Processing Time is the average processing time, in milliseconds, for the last 1024 commands received from clients.')
ex2p3CAPAFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3CAPAFailures.setStatus('current')
if mibBuilder.loadTexts: ex2p3CAPAFailures.setDescription('CAPA Failures is the number of CAPA commands that have failed since the POP service was started.')
ex2p3CAPARate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3CAPARate.setStatus('current')
if mibBuilder.loadTexts: ex2p3CAPARate.setDescription('CAPA Rate is the number of CAPA commands per second.')
ex2p3CAPATotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3CAPATotal.setStatus('current')
if mibBuilder.loadTexts: ex2p3CAPATotal.setDescription('CAPA Total is the total number of CAPA commands that have been received since the POP service was started.')
ex2p3ConnectionsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3ConnectionsCurrent.setStatus('current')
if mibBuilder.loadTexts: ex2p3ConnectionsCurrent.setDescription('Current Connections is the number of connections that are currently open on the POP service.')
ex2p3ConnectionsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3ConnectionsFailed.setStatus('current')
if mibBuilder.loadTexts: ex2p3ConnectionsFailed.setDescription('Connections Failed is the number of connections that have failed since the POP service was started.')
ex2p3ConnectionsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3ConnectionsRejected.setStatus('current')
if mibBuilder.loadTexts: ex2p3ConnectionsRejected.setDescription('Connections Rejected is the number of connections that have been rejected since the POP service was started.')
ex2p3ConnectionsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3ConnectionsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2p3ConnectionsTotal.setDescription('Connections Total is the total number of connections that have been opened since the POP service was started.')
ex2p3DELEFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3DELEFailures.setStatus('current')
if mibBuilder.loadTexts: ex2p3DELEFailures.setDescription('DELE Failures is the number of DELE commands that have failed since the POP service was started.')
ex2p3DELERate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3DELERate.setStatus('current')
if mibBuilder.loadTexts: ex2p3DELERate.setDescription('DELE Rate is the number of DELE commands per second.')
ex2p3DELETotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3DELETotal.setStatus('current')
if mibBuilder.loadTexts: ex2p3DELETotal.setDescription('DELE Total is the total number of DELE commands that have been received since the POP service was started.')
ex2p3InvalidCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3InvalidCommands.setStatus('current')
if mibBuilder.loadTexts: ex2p3InvalidCommands.setDescription('Invalid Commands is the number of commands that failed since the POP service was started because the command was not valid for the state of the connection.')
ex2p3InvalidCommandsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3InvalidCommandsRate.setStatus('current')
if mibBuilder.loadTexts: ex2p3InvalidCommandsRate.setDescription('Invalid Commands Rate is the number of invalid commands per second.')
ex2p3LISTFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3LISTFailures.setStatus('current')
if mibBuilder.loadTexts: ex2p3LISTFailures.setDescription('LIST Failures is the number of LIST commands that have failed since the POP service was started.')
ex2p3LISTRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3LISTRate.setStatus('current')
if mibBuilder.loadTexts: ex2p3LISTRate.setDescription('LIST Rate is the number of LIST commands per second.')
ex2p3LISTTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3LISTTotal.setStatus('current')
if mibBuilder.loadTexts: ex2p3LISTTotal.setDescription('LIST Total is the total number of LIST commands that have been received since the POP service was started.')
ex2p3NOOPFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3NOOPFailures.setStatus('current')
if mibBuilder.loadTexts: ex2p3NOOPFailures.setDescription('NOOP Failures is the number of NOOP commands that have failed since the POP service was started.')
ex2p3NOOPRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3NOOPRate.setStatus('current')
if mibBuilder.loadTexts: ex2p3NOOPRate.setDescription('NOOP Rate is the number of NOOP commands per second.')
ex2p3NOOPTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3NOOPTotal.setStatus('current')
if mibBuilder.loadTexts: ex2p3NOOPTotal.setDescription('NOOP Total is the total number of NOOP commands that have been received since the POP service was started.')
ex2p3PASSFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3PASSFailures.setStatus('current')
if mibBuilder.loadTexts: ex2p3PASSFailures.setDescription('PASS Failures is the number of PASS commands that have failed since the POP service was started.')
ex2p3PASSRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3PASSRate.setStatus('current')
if mibBuilder.loadTexts: ex2p3PASSRate.setDescription('PASS Rate is the number of NOOP commands per second.')
ex2p3PASSTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3PASSTotal.setStatus('current')
if mibBuilder.loadTexts: ex2p3PASSTotal.setDescription('PASS Total is the total number of PASS commands that have been received since the POP service was started.')
ex2p3QUITFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3QUITFailures.setStatus('current')
if mibBuilder.loadTexts: ex2p3QUITFailures.setDescription('QUIT Failures is the number of QUIT commands that have failed since the POP service was started.')
ex2p3QUITRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3QUITRate.setStatus('current')
if mibBuilder.loadTexts: ex2p3QUITRate.setDescription('QUIT Rate is the number of QUIT commands per second.')
ex2p3QUITTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3QUITTotal.setStatus('current')
if mibBuilder.loadTexts: ex2p3QUITTotal.setDescription('QUIT Total is the total number of QUIT commands that have been received since the POP service was started.')
ex2p3RETRFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3RETRFailures.setStatus('current')
if mibBuilder.loadTexts: ex2p3RETRFailures.setDescription('RETR Failures is the number of RETR commands that have failed since the POP service was started.')
ex2p3RETRRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3RETRRate.setStatus('current')
if mibBuilder.loadTexts: ex2p3RETRRate.setDescription('RETR Rate is the number of RETR commands per second.')
ex2p3RETRTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3RETRTotal.setStatus('current')
if mibBuilder.loadTexts: ex2p3RETRTotal.setDescription('RETR Total is the total number of RETR commands that have been received since the POP service was started.')
ex2p3RSETFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3RSETFailures.setStatus('current')
if mibBuilder.loadTexts: ex2p3RSETFailures.setDescription('RSET Failures is the number of RSET commands that have failed since the POP service was started.')
ex2p3RSETRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3RSETRate.setStatus('current')
if mibBuilder.loadTexts: ex2p3RSETRate.setDescription('RSET Rate is the number of RSET commands per second.')
ex2p3RSETTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3RSETTotal.setStatus('current')
if mibBuilder.loadTexts: ex2p3RSETTotal.setDescription('RSET Total is the total number of RSET commands that have been received since the POP service was started.')
ex2p3SSLConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3SSLConnections.setStatus('current')
if mibBuilder.loadTexts: ex2p3SSLConnections.setDescription('SSL Connections is the total number of SSL or TLS connections that have been opened since the POP service was started.')
ex2p3STATFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3STATFailures.setStatus('current')
if mibBuilder.loadTexts: ex2p3STATFailures.setDescription('STAT Failures is the number of STAT commands that have failed since the POP service was started.')
ex2p3STATRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3STATRate.setStatus('current')
if mibBuilder.loadTexts: ex2p3STATRate.setDescription('STAT Rate is the number of STAT commands per second.')
ex2p3STATTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3STATTotal.setStatus('current')
if mibBuilder.loadTexts: ex2p3STATTotal.setDescription('STAT Total is the total number of STAT commands that have been received since the POP service was started.')
ex2p3STLSFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3STLSFailures.setStatus('current')
if mibBuilder.loadTexts: ex2p3STLSFailures.setDescription('STLS Failures is the number of STLS commands that have failed since the POP service was started.')
ex2p3STLSRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3STLSRate.setStatus('current')
if mibBuilder.loadTexts: ex2p3STLSRate.setDescription('STLS Rate is the number of STLS commands per second.')
ex2p3STLSTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3STLSTotal.setStatus('current')
if mibBuilder.loadTexts: ex2p3STLSTotal.setDescription('STLS Total is the total number of STLS commands that have been received since the POP service was started.')
ex2p3TOPFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3TOPFailures.setStatus('current')
if mibBuilder.loadTexts: ex2p3TOPFailures.setDescription('TOP Failures is the number of TOP commands that have failed since the POP service was started.')
ex2p3TOPRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3TOPRate.setStatus('current')
if mibBuilder.loadTexts: ex2p3TOPRate.setDescription('TOP Rate is the number of TOP commands per second.')
ex2p3TOPTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3TOPTotal.setStatus('current')
if mibBuilder.loadTexts: ex2p3TOPTotal.setDescription('TOP Total is the total number of TOP commands that have been received since the POP service was started.')
ex2p3UIDLFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3UIDLFailures.setStatus('current')
if mibBuilder.loadTexts: ex2p3UIDLFailures.setDescription('UIDL Failures is the number of UIDL commands that have failed since the POP service was started.')
ex2p3UIDLRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3UIDLRate.setStatus('current')
if mibBuilder.loadTexts: ex2p3UIDLRate.setDescription('UIDL Rate is the number of UIDL commands per second.')
ex2p3UIDLTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3UIDLTotal.setStatus('current')
if mibBuilder.loadTexts: ex2p3UIDLTotal.setDescription('UIDL Total is the total number of UIDL commands that have been received since the POP service was started.')
ex2p3USERFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3USERFailures.setStatus('current')
if mibBuilder.loadTexts: ex2p3USERFailures.setDescription('USER Failures is the number of USER commands that have failed since the POP service was restarted.')
ex2p3USERRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3USERRate.setStatus('current')
if mibBuilder.loadTexts: ex2p3USERRate.setDescription('USER Rate is the number of USER commands per second.')
ex2p3USERTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 51, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2p3USERTotal.setStatus('current')
if mibBuilder.loadTexts: ex2p3USERTotal.setDescription('USER Total is the total number of USER commands that have been received since the POP service was started.')
ex2SANSPIProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52))
ex2SANSPIPBytesTransmittedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPBytesTransmittedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPBytesTransmittedPerSec.setDescription('Bytes Transmitted/sec is the rate at which data bytes are sent to the Domain Controller and clients by the NSPI Proxy.')
ex2SANSPIPClientConnectionCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPClientConnectionCount.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPClientConnectionCount.setDescription('Client Connect Count is the number of clients that are presently connected to the NSPI Proxy.')
ex2SANSPIPClientConnectionPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPClientConnectionPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPClientConnectionPerSec.setDescription('Client Connection/sec is the rate at which new client are connecting to the NSPI Proxy.')
ex2SANSPIPClientDisconnectPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPClientDisconnectPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPClientDisconnectPerSec.setDescription('Rate that clients are disconnecting from the NSPI Proxy. This counts normal disconnects and disconnects forced by the Proxy after a network error.')
ex2SANSPIPClientReferrals = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPClientReferrals.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPClientReferrals.setDescription('How many MAPI client Referral requests have been successfully satisfied, since the NSPI Proxy service was started.')
ex2SANSPIPClientReferralsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPClientReferralsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPClientReferralsPerSec.setDescription('Rate that MAPI client Referral requests are satisfied.')
ex2SANSPIPCumulatClientConnCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPCumulatClientConnCount.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPCumulatClientConnCount.setDescription('Total client connections made with NSPI Proxy for the life of the process.')
ex2SANSPIPFailedClientConnPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPFailedClientConnPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPFailedClientConnPerSec.setDescription('Failed Client Connections/sec is the rate at which connect operations from clients have failed.')
ex2SANSPIPFailedReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPFailedReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPFailedReadsPerSec.setDescription('Failed Reads/sec is the rate at which read operations from the Domain Controller and clients have failed.')
ex2SANSPIPFailedServerConnPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPFailedServerConnPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPFailedServerConnPerSec.setDescription('Failed Server Connections/sec is the rate at which connect operations to the Domain Controller have failed.')
ex2SANSPIPFailedWritesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPFailedWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPFailedWritesPerSec.setDescription('Failed Writes/sec is the rate at which write operationss to the Domain Controller and clients have failed.')
ex2SANSPIPPacketsTransmittPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPPacketsTransmittPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPPacketsTransmittPerSec.setDescription('Packets Transmitted/sec is the rate at which data packets are sent to the Domain Controller and clients by the NSPI Proxy.')
ex2SANSPIPPeakClientConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPPeakClientConnections.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPPeakClientConnections.setDescription('Peak Client Connections is the maximum number of clients that have been connected to the NSPI Proxy at any one point, since the proxy was started.')
ex2SANSPIPPeakWorkerThreads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPPeakWorkerThreads.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPPeakWorkerThreads.setDescription('Peak Worker Threads is the maximum number of worker threads the NSPI Proxy has had since it was started.')
ex2SANSPIPTotalFailedClientConns = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPTotalFailedClientConns.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPTotalFailedClientConns.setDescription('Total Failed Client Connections is the number of failed connect operations from clients. This is an accumulator counting all failures since the NSPI Proxy was started.')
ex2SANSPIPTotalFailedReads = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPTotalFailedReads.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPTotalFailedReads.setDescription('Total Failed Reads is the number of failed read operations from the Domain Controller and clients. This is an accumulator counting all failures since the NSPI Proxy was started.')
ex2SANSPIPTotalFailedServerConns = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPTotalFailedServerConns.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPTotalFailedServerConns.setDescription('Total Failed Server Connections is the number of failed connect operations to the Domain Controller. This is an accumulator counting all failures since the NSPI Proxy was started.')
ex2SANSPIPTotalFailedWrites = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPTotalFailedWrites.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPTotalFailedWrites.setDescription('Total Failed Writes is the number of failed write operations to the Domain Controller and clients. This is an accumulator counting all failures since the NSPI Proxy was started.')
ex2SANSPIPWorkerThreadsInUse = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 52, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2SANSPIPWorkerThreadsInUse.setStatus('current')
if mibBuilder.loadTexts: ex2SANSPIPWorkerThreadsInUse.setDescription('Worker Threads in Use is the number of worker threads currently active in the NSPI Proxy. A worker thread handles receiving and re-sending data between the Domain Controller and connected clients. More worker threads are necessary to handle large numbers of clients.')
ex2TransportBatchPointTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53), )
if mibBuilder.loadTexts: ex2TransportBatchPointTable.setStatus('current')
if mibBuilder.loadTexts: ex2TransportBatchPointTable.setDescription("A table containing performance information for instances of 'MSExchangeTransport Batch Point' objects.")
ex2TransportBatchPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2tbpInstance"))
if mibBuilder.loadTexts: ex2TransportBatchPointEntry.setStatus('current')
if mibBuilder.loadTexts: ex2TransportBatchPointEntry.setDescription("Performance information for one particular instance of 'MSExchangeTransport Batch Point' object.")
ex2tbpInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpInstance.setStatus('current')
if mibBuilder.loadTexts: ex2tbpInstance.setDescription('Instance name.')
ex2tbpBatchSizeExecutedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpBatchSizeExecutedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbpBatchSizeExecutedTotal.setDescription('The Batch size executed total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpBatchSizeExecutedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpBatchSizeExecutedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbpBatchSizeExecutedPerSec.setDescription('The Batch size executed/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpBatchesExecBackgroundTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpBatchesExecBackgroundTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbpBatchesExecBackgroundTotal.setDescription('The Batches executed background total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpBatchesExecBackgroundPrSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpBatchesExecBackgroundPrSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbpBatchesExecBackgroundPrSec.setDescription('The Batches executed background/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpBatchesExecutedNormalTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpBatchesExecutedNormalTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbpBatchesExecutedNormalTotal.setDescription('The Batches executed normal total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpBatcheExecutedNormalPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpBatcheExecutedNormalPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbpBatcheExecutedNormalPerSec.setDescription('The Batches executed normal/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpBatchesExecutedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpBatchesExecutedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbpBatchesExecutedTotal.setDescription('The Batches executed total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpBatchesExecutedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpBatchesExecutedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbpBatchesExecutedPerSec.setDescription('The Batches executed/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpBatchesPendingTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpBatchesPendingTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbpBatchesPendingTotal.setDescription('The Batches pending total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpBatchesPendingPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpBatchesPendingPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbpBatchesPendingPerSec.setDescription('The Batches pending/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpBatchesTimedOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpBatchesTimedOutTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbpBatchesTimedOutTotal.setDescription('The Batches timed out total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpBatchesTimedOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpBatchesTimedOutPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbpBatchesTimedOutPerSec.setDescription('The Batches timed out/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpBatchesWaitingCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpBatchesWaitingCurrent.setStatus('current')
if mibBuilder.loadTexts: ex2tbpBatchesWaitingCurrent.setDescription('The Batches waiting current performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpBatchesWaitingTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpBatchesWaitingTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbpBatchesWaitingTotal.setDescription('The Batches waiting total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpBatchesWaitingPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpBatchesWaitingPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbpBatchesWaitingPerSec.setDescription('The Batches waiting/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpCursorsClosedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpCursorsClosedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbpCursorsClosedTotal.setDescription('The Cursors closed total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpCursorsClosedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpCursorsClosedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbpCursorsClosedPerSec.setDescription('The Cursors closed/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpCursorsOpenedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpCursorsOpenedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbpCursorsOpenedTotal.setDescription('The Cursors opened total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpCursorsOpenedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpCursorsOpenedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbpCursorsOpenedPerSec.setDescription('The Cursors opened/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpDatabaseConnectionsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpDatabaseConnectionsCurrent.setStatus('current')
if mibBuilder.loadTexts: ex2tbpDatabaseConnectionsCurrent.setDescription('The Database connections current performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpDatabaseConnsRejectedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpDatabaseConnsRejectedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbpDatabaseConnsRejectedTotal.setDescription('The Database connections rejected total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpDatabaseConnsRejectdPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpDatabaseConnsRejectdPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbpDatabaseConnsRejectdPerSec.setDescription('The Database connections rejected/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpTransactionsAbortedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpTransactionsAbortedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbpTransactionsAbortedTotal.setDescription('This counter should only be used if Microsoft Product Support services advises that they need this information to troubleshoot a complex ESE-related performance issue.')
ex2tbpTransactionsAbortedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpTransactionsAbortedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbpTransactionsAbortedPerSec.setDescription('The Transactions aborted/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbpTransactionsCommittedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpTransactionsCommittedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbpTransactionsCommittedTotal.setDescription('This counter should only be used if Microsoft Product Support services advises that they need this information to troubleshoot a complex ESE-related performance issue.')
ex2tbpTransactionCommittedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 53, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbpTransactionCommittedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbpTransactionCommittedPerSec.setDescription('The Transactions committed/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2TransportDSNTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 54), )
if mibBuilder.loadTexts: ex2TransportDSNTable.setStatus('current')
if mibBuilder.loadTexts: ex2TransportDSNTable.setDescription("A table containing performance information for instances of 'MSExchangeTransport DSN' objects.")
ex2TransportDSNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 54, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2tdsnInstance"))
if mibBuilder.loadTexts: ex2TransportDSNEntry.setStatus('current')
if mibBuilder.loadTexts: ex2TransportDSNEntry.setDescription("Performance information for one particular instance of 'MSExchangeTransport DSN' object.")
ex2tdsnInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 54, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tdsnInstance.setStatus('current')
if mibBuilder.loadTexts: ex2tdsnInstance.setDescription('Instance name.')
ex2tdsnDelayDSNs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 54, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tdsnDelayDSNs.setStatus('current')
if mibBuilder.loadTexts: ex2tdsnDelayDSNs.setDescription('Delay DSNs is the number of delivery status notifications (DSNs) that have been generated.')
ex2tdsnDeliveredDSNs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 54, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tdsnDeliveredDSNs.setStatus('current')
if mibBuilder.loadTexts: ex2tdsnDeliveredDSNs.setDescription('Delivered DSNs is the number of delivered delivery status notifications (DSNs) generated.')
ex2tdsnExpandedDSNs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 54, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tdsnExpandedDSNs.setStatus('current')
if mibBuilder.loadTexts: ex2tdsnExpandedDSNs.setDescription('Expanded DSNs is the number of expanded delivery status notifications (DSNs) generated.')
ex2tdsnFailureDSNsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 54, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tdsnFailureDSNsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tdsnFailureDSNsTotal.setDescription('Failure DSNs is the number of failure delivery status notifications (DSNs) that have been generated.')
ex2tdsnRelayDSNs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 54, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tdsnRelayDSNs.setStatus('current')
if mibBuilder.loadTexts: ex2tdsnRelayDSNs.setDescription('Relay DSNs is the number of relayed DSNs that were generated.')
ex2TransportDatabaseTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55), )
if mibBuilder.loadTexts: ex2TransportDatabaseTable.setStatus('current')
if mibBuilder.loadTexts: ex2TransportDatabaseTable.setDescription("A table containing performance information for instances of 'MSExchangeTransport Database' objects.")
ex2TransportDatabaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2tbInstance"))
if mibBuilder.loadTexts: ex2TransportDatabaseEntry.setStatus('current')
if mibBuilder.loadTexts: ex2TransportDatabaseEntry.setDescription("Performance information for one particular instance of 'MSExchangeTransport Database' object.")
ex2tbInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbInstance.setStatus('current')
if mibBuilder.loadTexts: ex2tbInstance.setDescription('Instance name.')
ex2tbColumCacheLoadTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbColumCacheLoadTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbColumCacheLoadTotal.setDescription('The Column cache load total performance counter should only be used if Microsoft Product Support services request this information to troubleshoot a complex ESE-related performance problem.')
ex2tbColumCacheLoadPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbColumCacheLoadPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbColumCacheLoadPerSec.setDescription('The Column cache load/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbColumCacheSaveTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbColumCacheSaveTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbColumCacheSaveTotal.setDescription('The Column cache save total performance counter should only be used if Microsoft Product Support services request this information to troubleshoot a complex ESE-related performance problem.')
ex2tbColumCacheSavePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbColumCacheSavePerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbColumCacheSavePerSec.setDescription('The Column cache save/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbColumnCacheLoadedBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbColumnCacheLoadedBytesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbColumnCacheLoadedBytesTotal.setDescription('The Column cache loaded bytes total performance counter should only be used if Microsoft Product Support services request this information to troubleshoot a complex ESE-related performance problem.')
ex2tbColumnCachLoadedBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbColumnCachLoadedBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbColumnCachLoadedBytesPerSec.setDescription('The Column cache loaded bytes/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbColumnCacheLoadColumnsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbColumnCacheLoadColumnsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbColumnCacheLoadColumnsTotal.setDescription('The Column cache loaded columns total performance counter should only be used if Microsoft Product Support services request this information to troubleshoot a complex ESE-related performance problem.')
ex2tbColumnCacheLoadedColumnsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbColumnCacheLoadedColumnsSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbColumnCacheLoadedColumnsSec.setDescription('The Column cache loaded columns/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbColumnCacheSavedBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbColumnCacheSavedBytesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbColumnCacheSavedBytesTotal.setDescription('The Column cache saved bytes total performance counter should only be used if Microsoft Product Support services request this information to troubleshoot a complex ESE-related performance problem.')
ex2tbColumnCacheSavedBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbColumnCacheSavedBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbColumnCacheSavedBytesPerSec.setDescription('The Column cache saved bytes/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbColumnCacheSavedColumnTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbColumnCacheSavedColumnTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbColumnCacheSavedColumnTotal.setDescription('The Column cache saved columns total performance counter should only be used if Microsoft Product Support services request this information to troubleshoot a complex ESE-related performance problem.')
ex2tbColumnCacheSaveColumnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbColumnCacheSaveColumnPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbColumnCacheSaveColumnPerSec.setDescription('The Column cache saved columns/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbDataRowClonesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbDataRowClonesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbDataRowClonesTotal.setDescription('The DataRow clones total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbDataRowClonesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbDataRowClonesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbDataRowClonesPerSec.setDescription('The DataRow clones/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbDataRowDeletesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbDataRowDeletesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbDataRowDeletesTotal.setDescription('The DataRow deletes total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbDataRowDeletesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbDataRowDeletesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbDataRowDeletesPerSec.setDescription('The DataRow deletes/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbDataRowLoadsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbDataRowLoadsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbDataRowLoadsTotal.setDescription('The DataRow loads total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbDataRowLoadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbDataRowLoadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbDataRowLoadsPerSec.setDescription('The DataRow loads/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbDataRowMinimizeMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbDataRowMinimizeMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbDataRowMinimizeMemoryTotal.setDescription('The DataRow minimize memory total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbDataRowMinimizeMemoryPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbDataRowMinimizeMemoryPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbDataRowMinimizeMemoryPerSec.setDescription('The DataRow minimize memory/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbDataRowMovesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbDataRowMovesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbDataRowMovesTotal.setDescription('The DataRow moves total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbDataRowMovesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbDataRowMovesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbDataRowMovesPerSec.setDescription('The DataRow moves/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbDataRowNewInsertsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbDataRowNewInsertsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbDataRowNewInsertsTotal.setDescription('The DataRow new inserts total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbDataRowNewInsertsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbDataRowNewInsertsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbDataRowNewInsertsPerSec.setDescription('The DataRow new inserts/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbDataRowSeeksPrefixTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbDataRowSeeksPrefixTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbDataRowSeeksPrefixTotal.setDescription('The DataRow seeks prefix total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbDataRowSeeksPrefixPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbDataRowSeeksPrefixPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbDataRowSeeksPrefixPerSec.setDescription('The DataRow seeks prefix/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbDataRowSeeksTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbDataRowSeeksTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbDataRowSeeksTotal.setDescription('The DataRow seeks total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbDataRowSeeksPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbDataRowSeeksPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbDataRowSeeksPerSec.setDescription('The DataRow seeks/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbDataRowUpdatesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbDataRowUpdatesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbDataRowUpdatesTotal.setDescription('The DataRow updates total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbDataRowUpdatesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbDataRowUpdatesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbDataRowUpdatesPerSec.setDescription('The DataRow updates/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbExtendPropertyByteReadTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbExtendPropertyByteReadTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbExtendPropertyByteReadTotal.setDescription('The Extended property bytes read total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbExtendPropertyBytReadPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbExtendPropertyBytReadPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbExtendPropertyBytReadPerSec.setDescription('The Extended property bytes read/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbExtenePropertyByteWritTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbExtenePropertyByteWritTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbExtenePropertyByteWritTotal.setDescription('The Extended property bytes written total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbExtenPropertyByteWritPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbExtenPropertyByteWritPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbExtenPropertyByteWritPerSec.setDescription('The Extended property bytes written/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbExtenedPropertyReadsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbExtenedPropertyReadsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbExtenedPropertyReadsTotal.setDescription('The Extended property reads total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbExtenedPropertyReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbExtenedPropertyReadsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbExtenedPropertyReadsPerSec.setDescription('The Extended property reads/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbExtenedPropertyWritesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbExtenedPropertyWritesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbExtenedPropertyWritesTotal.setDescription('The Extended property writes total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbExtenedPropertyWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbExtenedPropertyWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbExtenedPropertyWritesPerSec.setDescription('The Extended property writes/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbLazyBytesLoadPerformedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbLazyBytesLoadPerformedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbLazyBytesLoadPerformedTotal.setDescription('The Lazy bytes load performed total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbLazyByteLoadPerformedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbLazyByteLoadPerformedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbLazyByteLoadPerformedPerSec.setDescription('The Lazy bytes load performed/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbLazyBytesLoadRequestedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbLazyBytesLoadRequestedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbLazyBytesLoadRequestedTotal.setDescription('The Lazy bytes load requested total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbLazyByteLoadRequestedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbLazyByteLoadRequestedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbLazyByteLoadRequestedPerSec.setDescription('The Lazy bytes load requested/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemBeginCommitTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemBeginCommitTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemBeginCommitTotal.setDescription('The MailItem begin commit total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemBeginCommitPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemBeginCommitPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemBeginCommitPerSec.setDescription('The MailItem begin commit/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemCloneCreateTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemCloneCreateTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemCloneCreateTotal.setDescription('The MailItem clone create total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemCloneCreatePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemCloneCreatePerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemCloneCreatePerSec.setDescription('The MailItem clone create/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemCommitImmediatTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemCommitImmediatTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemCommitImmediatTotal.setDescription('The MailItem commit immediate total performance counter should only be used if Microsoft Product Support services request this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemCommitImmediaPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemCommitImmediaPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemCommitImmediaPerSec.setDescription('The MailItem commit immediate/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemCommitLazyTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemCommitLazyTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemCommitLazyTotal.setDescription('The MailItem commit lazy total performance counter should only be used if Microsoft Product Support services request this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemCommitLazyPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemCommitLazyPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemCommitLazyPerSec.setDescription('The MailItem commit lazy/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemDehydrateTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemDehydrateTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemDehydrateTotal.setDescription('The MailItem dehydrate total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemDehydratePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemDehydratePerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemDehydratePerSec.setDescription('The MailItem dehydrate/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemDeleteLazyTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemDeleteLazyTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemDeleteLazyTotal.setDescription('The MailItem delete lazy total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemDeleteLazyPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemDeleteLazyPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemDeleteLazyPerSec.setDescription('The MailItem delete lazy/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemLoadTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemLoadTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemLoadTotal.setDescription('The MailItem load total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemLoadPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemLoadPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemLoadPerSec.setDescription('The MailItem load/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemMaterialize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemMaterialize.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemMaterialize.setDescription('The MailItem materialize performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemMaterializePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemMaterializePerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemMaterializePerSec.setDescription('The MailItem materialize/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemNewTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemNewTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemNewTotal.setDescription('The MailItem new total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemNewPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemNewPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemNewPerSec.setDescription('The MailItem new/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemWriteMimeToTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemWriteMimeToTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemWriteMimeToTotal.setDescription('The MailItem writeMimeTo total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbMailItemWriteMimeToPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbMailItemWriteMimeToPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbMailItemWriteMimeToPerSec.setDescription('The MailItem writeMimeTo/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbStreamBytesReadTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbStreamBytesReadTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbStreamBytesReadTotal.setDescription('The Stream bytes read total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbStreamBytesReadPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbStreamBytesReadPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbStreamBytesReadPerSec.setDescription('The Stream bytes read/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbStreamBytesWrittenTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbStreamBytesWrittenTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbStreamBytesWrittenTotal.setDescription('The Stream bytes written total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbStreamBytesWrittenPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbStreamBytesWrittenPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbStreamBytesWrittenPerSec.setDescription('The Stream bytes written/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbStreamReadTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbStreamReadTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbStreamReadTotal.setDescription('The Stream read total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbStreamReadPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbStreamReadPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbStreamReadPerSec.setDescription('The Stream read/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbStreamSetLengthCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbStreamSetLengthCount.setStatus('current')
if mibBuilder.loadTexts: ex2tbStreamSetLengthCount.setDescription('The Stream set length count performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbStreamSetLengthPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbStreamSetLengthPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbStreamSetLengthPerSec.setDescription('The Stream set length/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbStreamWritesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbStreamWritesTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tbStreamWritesTotal.setDescription('The Stream writes total performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2tbStreamWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 55, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tbStreamWritesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tbStreamWritesPerSec.setDescription('The Stream writes/sec performance counter should only be used if Microsoft Product Support services requests this information to troubleshoot a complex ESE-related performance problem.')
ex2TransportDumpster = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 15, 56))
ex2tdDumpsterDeletesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 56, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tdDumpsterDeletesPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tdDumpsterDeletesPerSec.setDescription('Delete Rate is the rate at which items are deleted from the Transport Dumpster on this server.')
ex2tdDumpsterInsertsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 56, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tdDumpsterInsertsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tdDumpsterInsertsPerSec.setDescription('Insert Rate is the rate at which items are inserted into the Transport Dumpster on this server.')
ex2tdDumpsterItemCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 56, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tdDumpsterItemCount.setStatus('current')
if mibBuilder.loadTexts: ex2tdDumpsterItemCount.setDescription('Item Count is the total number of mail items that are currently in the Transport Dumpster on this server.')
ex2tdDumpsterSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 56, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tdDumpsterSize.setStatus('current')
if mibBuilder.loadTexts: ex2tdDumpsterSize.setDescription('Item Size is the total size (in bytes) of mail items that are currently in the Transport Dumpster on this server.')
ex2tdRedeliveryCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 56, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tdRedeliveryCount.setStatus('current')
if mibBuilder.loadTexts: ex2tdRedeliveryCount.setDescription('Redelivery Count is the number of mail items that were re-delivered from the Transport Dumpster on this server.')
ex2TransportPickupTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 57), )
if mibBuilder.loadTexts: ex2TransportPickupTable.setStatus('current')
if mibBuilder.loadTexts: ex2TransportPickupTable.setDescription("A table containing performance information for instances of 'MSExchangeTransport Pickup' objects.")
ex2TransportPickupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 57, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2tpInstance"))
if mibBuilder.loadTexts: ex2TransportPickupEntry.setStatus('current')
if mibBuilder.loadTexts: ex2TransportPickupEntry.setDescription("Performance information for one particular instance of 'MSExchangeTransport Pickup' object.")
ex2tpkInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 57, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tpkInstance.setStatus('current')
if mibBuilder.loadTexts: ex2tpkInstance.setDescription('Instance name.')
ex2tpkMessagesBadmailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 57, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tpkMessagesBadmailed.setStatus('current')
if mibBuilder.loadTexts: ex2tpkMessagesBadmailed.setDescription('Messages Badmailed is the number of messages that were submitted to the Pickup directory but were classified as badmail and not delivered.')
ex2tpkMessagesNDRed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 57, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tpkMessagesNDRed.setStatus('current')
if mibBuilder.loadTexts: ex2tpkMessagesNDRed.setDescription('Messages NDRed is the number of messages processed by the Pickup directory that causes NDRs to be created.')
ex2tpkMessagesSubmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 57, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tpkMessagesSubmitted.setStatus('current')
if mibBuilder.loadTexts: ex2tpkMessagesSubmitted.setDescription('Messages Submitted is the number of messages that were successfully submitted by the Pickup directory.')
ex2TransportQueuesTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58), )
if mibBuilder.loadTexts: ex2TransportQueuesTable.setStatus('current')
if mibBuilder.loadTexts: ex2TransportQueuesTable.setDescription("A table containing performance information for instances of 'MSExchangeTransport Queues' objects.")
ex2TransportQueuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2tqInstance"))
if mibBuilder.loadTexts: ex2TransportQueuesEntry.setStatus('current')
if mibBuilder.loadTexts: ex2TransportQueuesEntry.setDescription("Performance information for one particular instance of 'MSExchangeTransport Queues' object.")
ex2tqInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqInstance.setStatus('current')
if mibBuilder.loadTexts: ex2tqInstance.setDescription('Instance name.')
ex2tqActiveMailboxDelivQueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqActiveMailboxDelivQueLength.setStatus('current')
if mibBuilder.loadTexts: ex2tqActiveMailboxDelivQueLength.setDescription('Active Mailbox Delivery Queue Length is the number of messages in the active mailbox queues.')
ex2tqActiveNonSmtpDelivQueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqActiveNonSmtpDelivQueLength.setStatus('current')
if mibBuilder.loadTexts: ex2tqActiveNonSmtpDelivQueLength.setDescription('Active Non-SMTP Delivery Queue Length is the number of messages in the Drop directory that is used by a Foreign connector.')
ex2tqActiveRemoteDelivQueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqActiveRemoteDelivQueLength.setStatus('current')
if mibBuilder.loadTexts: ex2tqActiveRemoteDelivQueLength.setDescription('Active Remote Delivery Queue Length is the number of messages in the active remote delivery queues.')
ex2tqAggregDelivQueLengthAllQues = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqAggregDelivQueLengthAllQues.setStatus('current')
if mibBuilder.loadTexts: ex2tqAggregDelivQueLengthAllQues.setDescription('Aggregate Delivery Queue Length (All Queues) is the number of messages queued for delivery in all queues.')
ex2tqItemCompletedDelivPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqItemCompletedDelivPerSecond.setStatus('current')
if mibBuilder.loadTexts: ex2tqItemCompletedDelivPerSecond.setDescription('Items Completed Delivery Per Second is the number of items processed to completion. All recipients either succeeded or failed.')
ex2tqItemsCompletedDeliveryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqItemsCompletedDeliveryTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tqItemsCompletedDeliveryTotal.setDescription('Items Completed Delivery Total is the total number of items processed to completion. All recipients either succeeded or failed.')
ex2tqItemsDeletedByAdminTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqItemsDeletedByAdminTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tqItemsDeletedByAdminTotal.setDescription('Items Deleted By Admin Total is the total number of queued items deleted by the administrator.')
ex2tqItemQuedForDelivExpireTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqItemQuedForDelivExpireTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tqItemQuedForDelivExpireTotal.setDescription('Items Queued For Delivery Expired Total is the total number of items queued for delivery that have expired.')
ex2tqItemsQueuedForDeliveryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqItemsQueuedForDeliveryTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tqItemsQueuedForDeliveryTotal.setDescription('Items Queued For Delivery Total is the total number of items queued for delivery.')
ex2tqItemsQuedForDelivPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqItemsQuedForDelivPerSecond.setStatus('current')
if mibBuilder.loadTexts: ex2tqItemsQuedForDelivPerSecond.setDescription('Items Queued for Delivery Per Second is the number of items queued for delivery per second.')
ex2tqItemsResubmittedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqItemsResubmittedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tqItemsResubmittedTotal.setDescription('Items Resubmitted Total is the total number of items that were resubmitted to the categorizer.')
ex2tqLargestDeliveryQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqLargestDeliveryQueueLength.setStatus('current')
if mibBuilder.loadTexts: ex2tqLargestDeliveryQueueLength.setDescription('Largest Delivery Queue Length is the number of messages in the largest delivery queue.')
ex2tqMsgsCompletedDelivPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqMsgsCompletedDelivPerSecond.setStatus('current')
if mibBuilder.loadTexts: ex2tqMsgsCompletedDelivPerSecond.setDescription('Messages Completed Delivery Per Second is the number of messages that are delivered per second.')
ex2tqMsgsCompletedDelivTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqMsgsCompletedDelivTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tqMsgsCompletedDelivTotal.setDescription('Messages Completed Delivery Total is the number of messages that have completed delivery. All recipients either succeeded or failed.')
ex2tqMessagesQueuedForDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqMessagesQueuedForDelivery.setStatus('current')
if mibBuilder.loadTexts: ex2tqMessagesQueuedForDelivery.setDescription('Messages Queued For Delivery is the number of messages currently queued for delivery in one or more queues.')
ex2tqMsgsQuedForDelivTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqMsgsQuedForDelivTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tqMsgsQuedForDelivTotal.setDescription('Messages Queued For Delivery Total is the total number of messages that have been queued for delivery in one or more queues.')
ex2tqMsgsQuedForDelivPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqMsgsQuedForDelivPerSecond.setStatus('current')
if mibBuilder.loadTexts: ex2tqMsgsQuedForDelivPerSecond.setDescription('Messages Queued for Delivery Per Second is the number of messages that have been queued for delivery per second.')
ex2tqMessagesSubmittedPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqMessagesSubmittedPerSecond.setStatus('current')
if mibBuilder.loadTexts: ex2tqMessagesSubmittedPerSecond.setDescription('Messages Submitted Per Second is the number of messages that have been queued in the Submission queue per second.')
ex2tqMessagesSubmittedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqMessagesSubmittedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tqMessagesSubmittedTotal.setDescription('Messages Submitted Total is the total number of messages that have been queued in the Submission queue.')
ex2tqPoisonQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqPoisonQueueLength.setStatus('current')
if mibBuilder.loadTexts: ex2tqPoisonQueueLength.setDescription('Poison Message Queue Length is the number of messages in the poison message queue.')
ex2tqRetryMailboxDelivQueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqRetryMailboxDelivQueLength.setStatus('current')
if mibBuilder.loadTexts: ex2tqRetryMailboxDelivQueLength.setDescription('Retry Mailbox Delivery Queue Length is the number of messages in retry.')
ex2tqRetryNonSmtpDelivQueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqRetryNonSmtpDelivQueLength.setStatus('current')
if mibBuilder.loadTexts: ex2tqRetryNonSmtpDelivQueLength.setDescription('Retry Non-SMTP Delivery Queue Length is the number of messages in retry in the non-SMTP gateway delivery queues.')
ex2tqRetryRemoteDelivQueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqRetryRemoteDelivQueLength.setStatus('current')
if mibBuilder.loadTexts: ex2tqRetryRemoteDelivQueLength.setDescription('Retry Remote Delivery Queue Length is the number of messages in retry in the remote delivery queues.')
ex2tqSubmissQueueItemExpireTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqSubmissQueueItemExpireTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tqSubmissQueueItemExpireTotal.setDescription('Submission Queue Items Expired Total is the number of expired messages in the Submission queue.')
ex2tqSubmissionQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqSubmissionQueueLength.setStatus('current')
if mibBuilder.loadTexts: ex2tqSubmissionQueueLength.setDescription('Submission Queue Length is the number of messages in the Submission queue.')
ex2tqUnreachableQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 58, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tqUnreachableQueueLength.setStatus('current')
if mibBuilder.loadTexts: ex2tqUnreachableQueueLength.setDescription('Unreachable Queue Length is the number of messages in the Unreachable queue.')
ex2TransportResolverTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 59), )
if mibBuilder.loadTexts: ex2TransportResolverTable.setStatus('current')
if mibBuilder.loadTexts: ex2TransportResolverTable.setDescription("A table containing performance information for instances of 'MSExchangeTransport Resolver' objects.")
ex2TransportResolverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 59, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2treInstance"))
if mibBuilder.loadTexts: ex2TransportResolverEntry.setStatus('current')
if mibBuilder.loadTexts: ex2TransportResolverEntry.setDescription("Performance information for one particular instance of 'MSExchangeTransport Resolver' object.")
ex2treInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 59, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2treInstance.setStatus('current')
if mibBuilder.loadTexts: ex2treInstance.setDescription('Instance name.')
ex2treAmbiguousRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 59, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2treAmbiguousRecipients.setStatus('current')
if mibBuilder.loadTexts: ex2treAmbiguousRecipients.setDescription('Ambiguous Recipients is the total number of ambiguous recipients.')
ex2treAmbiguousSenders = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 59, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2treAmbiguousSenders.setStatus('current')
if mibBuilder.loadTexts: ex2treAmbiguousSenders.setDescription('Ambiguous Senders is the total number of ambiguous senders.')
ex2treFailedRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 59, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2treFailedRecipients.setStatus('current')
if mibBuilder.loadTexts: ex2treFailedRecipients.setDescription('Failed Recipients is the number of failed recipients that were detected during recipient resolution.')
ex2treLoopRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 59, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2treLoopRecipients.setStatus('current')
if mibBuilder.loadTexts: ex2treLoopRecipients.setDescription('Loop Recipients is the number of recipients that failed recipient resolution because of recipient loops.')
ex2treMessagesChipped = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 59, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2treMessagesChipped.setStatus('current')
if mibBuilder.loadTexts: ex2treMessagesChipped.setDescription('Messages Chipped is the total number of copies of the same message that were created during recipient resolution to control the number of envelope recipients in a single message.')
ex2treMessagesCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 59, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2treMessagesCreated.setStatus('current')
if mibBuilder.loadTexts: ex2treMessagesCreated.setDescription('Messages Created is the number of messages that were created during recipient resolution.')
ex2treMessagesRetried = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 59, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2treMessagesRetried.setStatus('current')
if mibBuilder.loadTexts: ex2treMessagesRetried.setDescription('Messages Retried is the number of messages that were scheduled for retry during recipient resolution.')
ex2treUnresolvedOrgRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 59, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2treUnresolvedOrgRecipients.setStatus('current')
if mibBuilder.loadTexts: ex2treUnresolvedOrgRecipients.setDescription('Unresolved Org Recipients is the number of unresolved recipients from an authoritative domain that were detected during recipient resolution.')
ex2treUnresolvedOrgSenders = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 59, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2treUnresolvedOrgSenders.setStatus('current')
if mibBuilder.loadTexts: ex2treUnresolvedOrgSenders.setDescription('Unresolved Org Senders is the number of unresolved senders from an authoritative domain that were detected during recipient resolution.')
ex2TransportRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 60), )
if mibBuilder.loadTexts: ex2TransportRoutingTable.setStatus('current')
if mibBuilder.loadTexts: ex2TransportRoutingTable.setDescription("A table containing performance information for instances of 'MSExchangeTransport Routing' objects.")
ex2TransportRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 60, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2troInstance"))
if mibBuilder.loadTexts: ex2TransportRoutingEntry.setStatus('current')
if mibBuilder.loadTexts: ex2TransportRoutingEntry.setDescription("Performance information for one particular instance of 'MSExchangeTransport Routing' object.")
ex2troInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 60, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2troInstance.setStatus('current')
if mibBuilder.loadTexts: ex2troInstance.setDescription('Instance name.')
ex2troRoutingNDRsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 60, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2troRoutingNDRsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2troRoutingNDRsTotal.setDescription('Routing NDRs Total is the number of recipients NDRed by routing.')
ex2troRoutingTableCalculateTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 60, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2troRoutingTableCalculateTotal.setStatus('current')
if mibBuilder.loadTexts: ex2troRoutingTableCalculateTotal.setDescription('Routing Tables Calculated Total is the number of times that routing tables have been calculated.')
ex2troRoutingTablesChangedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 60, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2troRoutingTablesChangedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2troRoutingTablesChangedTotal.setDescription('Routing Tables Changed Total is the number of times routing tables have changed.')
ex2TransportSmtpReceiveTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61), )
if mibBuilder.loadTexts: ex2TransportSmtpReceiveTable.setStatus('current')
if mibBuilder.loadTexts: ex2TransportSmtpReceiveTable.setDescription("A table containing performance information for instances of 'MSExchangeTransport SmtpReceive' objects.")
ex2TransportSmtpReceiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2tsrInstance"))
if mibBuilder.loadTexts: ex2TransportSmtpReceiveEntry.setStatus('current')
if mibBuilder.loadTexts: ex2TransportSmtpReceiveEntry.setDescription("Performance information for one particular instance of 'MSExchangeTransport SmtpReceive' object.")
ex2tsrInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrInstance.setStatus('current')
if mibBuilder.loadTexts: ex2tsrInstance.setDescription('Instance name.')
ex2tsrAverageBytesPerConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrAverageBytesPerConnection.setStatus('current')
if mibBuilder.loadTexts: ex2tsrAverageBytesPerConnection.setDescription('Average Bytes/Connection is the average number of bytes received per connection.')
ex2tsrAverageBytesPerMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrAverageBytesPerMessage.setStatus('current')
if mibBuilder.loadTexts: ex2tsrAverageBytesPerMessage.setDescription('Average Bytes/Message is the average number of message bytes per inbound message received.')
ex2tsrAverageMessagePerConnectin = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrAverageMessagePerConnectin.setStatus('current')
if mibBuilder.loadTexts: ex2tsrAverageMessagePerConnectin.setDescription('Average Messages/Connection is the average number of messages received per connection.')
ex2tsrAverageRecipientPerMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrAverageRecipientPerMessage.setStatus('current')
if mibBuilder.loadTexts: ex2tsrAverageRecipientPerMessage.setDescription('Average Recipients/Message is the average number of recipients per inbound message received.')
ex2tsrBytesReceivedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrBytesReceivedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tsrBytesReceivedTotal.setDescription('Bytes Received Total is the total number of bytes received.')
ex2tsrBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tsrBytesReceivedPerSec.setDescription('Bytes Received/sec is the number of bytes received per second.')
ex2tsrConnectionsCreatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrConnectionsCreatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tsrConnectionsCreatedPerSec.setDescription('Connections Created/sec is the number of new connections to the SMTP server that are established each second.')
ex2tsrConnectionsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrConnectionsCurrent.setStatus('current')
if mibBuilder.loadTexts: ex2tsrConnectionsCurrent.setDescription('Connections Current is the number of inbound connections to the SMTP server.')
ex2tsrConnectionsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrConnectionsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tsrConnectionsTotal.setDescription('Connections Total is the total number of connections ever made to the SMTP server.')
ex2tsrDisconnectionsByAgents = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrDisconnectionsByAgents.setStatus('current')
if mibBuilder.loadTexts: ex2tsrDisconnectionsByAgents.setDescription('Disconnections By Agents is the number of inbound connections that are dropped by Agent actions.')
ex2tsrDisconnectByAgentPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrDisconnectByAgentPerSecond.setStatus('current')
if mibBuilder.loadTexts: ex2tsrDisconnectByAgentPerSecond.setDescription('Disconnections by Agents/second is the number of inbound connections that are dropped by Agent actions per second.')
ex2tsrMessageBytesReceivedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrMessageBytesReceivedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tsrMessageBytesReceivedTotal.setDescription('Message Bytes Received Total is the total number of bytes in messages received and committed to database. This includes the headers that are inserted by the SMTP server and is the actual number of bytes that are written to database.')
ex2tsrMessageBytesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrMessageBytesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tsrMessageBytesReceivedPerSec.setDescription('Message Bytes Received/sec is the number of bytes received in messages each second.')
ex2tsrMessagesReceivedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrMessagesReceivedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tsrMessagesReceivedTotal.setDescription('Messages Received Total is the number of messages received by the SMTP server.')
ex2tsrMessagesReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrMessagesReceivedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tsrMessagesReceivedPerSec.setDescription('Messages Received/sec is the number of messages received by the SMTP server each second.')
ex2tsrMessagesRefusedForSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrMessagesRefusedForSize.setStatus('current')
if mibBuilder.loadTexts: ex2tsrMessagesRefusedForSize.setDescription('Messages Refused for Size is the number of messages that were rejected because they were too big.')
ex2tsrRecipientsAcceptedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrRecipientsAcceptedTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tsrRecipientsAcceptedTotal.setDescription('Recipients Accepted Total is the number of recipients accepted.')
ex2tsrTarpittingDelaysAnonymous = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrTarpittingDelaysAnonymous.setStatus('current')
if mibBuilder.loadTexts: ex2tsrTarpittingDelaysAnonymous.setDescription('Tarpitting Delays Anonymous is the total number of tarpitting delays on anonymous sessions.')
ex2tsrTarpittngDelayAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 61, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tsrTarpittngDelayAuthenticate.setStatus('current')
if mibBuilder.loadTexts: ex2tsrTarpittngDelayAuthenticate.setDescription('Tarpitting Delays Authenticated is the total number of tarpitting delays on authenticated sessions.')
ex2TransportSmtpSendTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 62), )
if mibBuilder.loadTexts: ex2TransportSmtpSendTable.setStatus('current')
if mibBuilder.loadTexts: ex2TransportSmtpSendTable.setDescription("A table containing performance information for instances of 'MSExchangeTransport SmtpSend' objects.")
ex2TransportSmtpSendEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 62, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2tssInstance"))
if mibBuilder.loadTexts: ex2TransportSmtpSendEntry.setStatus('current')
if mibBuilder.loadTexts: ex2TransportSmtpSendEntry.setDescription("Performance information for one particular instance of 'MSExchangeTransport SmtpSend' object.")
ex2tssInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 62, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tssInstance.setStatus('current')
if mibBuilder.loadTexts: ex2tssInstance.setDescription('Instance name.')
ex2tssAverageBytesPerConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 62, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tssAverageBytesPerConnection.setStatus('current')
if mibBuilder.loadTexts: ex2tssAverageBytesPerConnection.setDescription('Average Bytes/Connection is the average number of bytes per connection sent by this SMTP Send connector.')
ex2tssAvgMessageBytesPerMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 62, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tssAvgMessageBytesPerMessage.setStatus('current')
if mibBuilder.loadTexts: ex2tssAvgMessageBytesPerMessage.setDescription('Average Message Bytes/Message is the average number of bytes per message sent by this SMTP Send connector.')
ex2tssAvgMessagesPerConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 62, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tssAvgMessagesPerConnection.setStatus('current')
if mibBuilder.loadTexts: ex2tssAvgMessagesPerConnection.setDescription('Average Messages/Connection is the average number of messages per connection sent by this SMTP Send connector.')
ex2tssAvgRecipientsPerMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 62, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tssAvgRecipientsPerMessage.setStatus('current')
if mibBuilder.loadTexts: ex2tssAvgRecipientsPerMessage.setDescription('Average Recipients/Message is the average recipients per message handled by this SMTP Send connector.')
ex2tssBytesSentTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 62, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tssBytesSentTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tssBytesSentTotal.setDescription('Bytes Sent Total is the total number of bytes sent.')
ex2tssBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 62, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tssBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tssBytesSentPerSec.setDescription('Bytes Sent/sec is the number of bytes sent per second.')
ex2tssConnectionsCreatedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 62, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tssConnectionsCreatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tssConnectionsCreatedPerSec.setDescription('Connections Created/sec is the number of outbound connections established each second from the SMTP Send connector.')
ex2tssConnectionsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 62, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tssConnectionsCurrent.setStatus('current')
if mibBuilder.loadTexts: ex2tssConnectionsCurrent.setDescription('Connections Current is the number of outbound connections from the SMTP Send connector.')
ex2tssConnectionsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 62, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tssConnectionsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tssConnectionsTotal.setDescription('Connections Total is the number of connections ever made from the SMTP Send connector.')
ex2tssMessageBytesSentTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 62, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tssMessageBytesSentTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tssMessageBytesSentTotal.setDescription('Message Bytes Sent Total is the total number of bytes sent. This number includes only those messages that were successfully sent.')
ex2tssMessageBytesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 62, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tssMessageBytesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tssMessageBytesSentPerSec.setDescription('Message Bytes Sent/sec is the number of bytes sent per second.')
ex2tssMessagesSentTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 62, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tssMessagesSentTotal.setStatus('current')
if mibBuilder.loadTexts: ex2tssMessagesSentTotal.setDescription('Messages Sent Total is the number of messages sent by the SMTP Send connector.')
ex2tssMessagesSentPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 62, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tssMessagesSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2tssMessagesSentPerSec.setDescription('Messages Sent/sec is the number of messages sent by the SMTP Send connector each second.')
ex2tssRecipientsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 62, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2tssRecipientsSent.setStatus('current')
if mibBuilder.loadTexts: ex2tssRecipientsSent.setDescription('Recipients sent is the number of recipients sent by the SMTPSend Connector.')
ex2UMAutoAttendantTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63), )
if mibBuilder.loadTexts: ex2UMAutoAttendantTable.setStatus('current')
if mibBuilder.loadTexts: ex2UMAutoAttendantTable.setDescription("A table containing performance information for instances of 'MSExchangeUMAutoAttendant' objects.")
ex2UMAutoAttendantEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2umaaInstance"))
if mibBuilder.loadTexts: ex2UMAutoAttendantEntry.setStatus('current')
if mibBuilder.loadTexts: ex2UMAutoAttendantEntry.setDescription("Performance information for one particular instance of 'MSExchangeUMAutoAttendant' object.")
ex2umaaInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaInstance.setStatus('current')
if mibBuilder.loadTexts: ex2umaaInstance.setDescription('Instance name.')
ex2umaaPercentSuccessfulCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaPercentSuccessfulCalls.setStatus('current')
if mibBuilder.loadTexts: ex2umaaPercentSuccessfulCalls.setDescription('This counter calculates the success rate of the auto attendant.')
ex2umaaAmbiguousNameTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaAmbiguousNameTransfers.setStatus('current')
if mibBuilder.loadTexts: ex2umaaAmbiguousNameTransfers.setDescription('Ambiguous Name Transfers is the number of times that a caller was transferred to the operator because the name that they spelled or spoke was too common in the search results.')
ex2umaaAverageCallTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaAverageCallTime.setStatus('current')
if mibBuilder.loadTexts: ex2umaaAverageCallTime.setDescription('Average Call Time is the average length of time that callers interacted with the auto attendant.')
ex2umaaAverageRecentCallTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaAverageRecentCallTime.setStatus('current')
if mibBuilder.loadTexts: ex2umaaAverageRecentCallTime.setDescription('Average Recent Call Time is the average length of time, in seconds, of the last 50 auto attendant calls.')
ex2umaaBusinessHoursCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaBusinessHoursCalls.setStatus('current')
if mibBuilder.loadTexts: ex2umaaBusinessHoursCalls.setDescription('Business Hours Calls is the number of calls processed by this auto attendant during business hours.')
ex2umaaCallsDisconUMIrreExtError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaCallsDisconUMIrreExtError.setStatus('current')
if mibBuilder.loadTexts: ex2umaaCallsDisconUMIrreExtError.setDescription('Calls Disconnected by UM on Irrecoverable External Error is the total number of calls that were disconnected after an irrecoverable external error occurred.')
ex2umaaCallsWithDTMFFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaCallsWithDTMFFallback.setStatus('current')
if mibBuilder.loadTexts: ex2umaaCallsWithDTMFFallback.setDescription('Calls with DTMF fallback is the number of calls to this auto attendant during which a caller has been passed to the DTMF fallback auto attendant. This only happens for speech-enabled auto attendants.')
ex2umaaCallsWithSentMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaCallsWithSentMessage.setStatus('current')
if mibBuilder.loadTexts: ex2umaaCallsWithSentMessage.setDescription('Calls with Sent Message is the number of calls to this auto attendant in which a caller has sent a voice message.')
ex2umaaCallsWithSpeechInput = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaCallsWithSpeechInput.setStatus('current')
if mibBuilder.loadTexts: ex2umaaCallsWithSpeechInput.setDescription('Calls with Speech Input is the total number of calls during which the caller is determined to have spoken at least once.')
ex2umaaCallsWithSpokenName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaCallsWithSpokenName.setStatus('current')
if mibBuilder.loadTexts: ex2umaaCallsWithSpokenName.setDescription('Calls with Spoken Name is the number of calls to this auto attendant in which a caller has spoken a name at least once.')
ex2umaaCustomMenuOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaCustomMenuOptions.setStatus('current')
if mibBuilder.loadTexts: ex2umaaCustomMenuOptions.setDescription('Custom Menu Options is the number of times that callers have selected custom menu options.')
ex2umaaDirectoryAccessed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaDirectoryAccessed.setStatus('current')
if mibBuilder.loadTexts: ex2umaaDirectoryAccessed.setDescription('Directory Accessed is the number of directory access operations performed by this auto attendant.')
ex2umaaDirAccsdSuccByDialByName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaDirAccsdSuccByDialByName.setStatus('current')
if mibBuilder.loadTexts: ex2umaaDirAccsdSuccByDialByName.setDescription('Directory Accessed Successfully by Dial by Name is the number of successful directory access operations in which the caller used the Dial by Name feature.')
ex2umaaDirAccsdSuccBySpokenName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaDirAccsdSuccBySpokenName.setStatus('current')
if mibBuilder.loadTexts: ex2umaaDirAccsdSuccBySpokenName.setDescription('Directory Accessed Successfully by Spoken Name is the number of successful directory access operations in which the caller used the Dial by Name feature.')
ex2umaaDirAccsdByDialByName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaDirAccsdByDialByName.setStatus('current')
if mibBuilder.loadTexts: ex2umaaDirAccsdByDialByName.setDescription('Directory Accessed by Dial by Name is the number of directory access operations in which the subscriber used the Dial by Name feature.')
ex2umaaDirAccsdByExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaDirAccsdByExtension.setStatus('current')
if mibBuilder.loadTexts: ex2umaaDirAccsdByExtension.setDescription('Directory Accessed by Extension is the number of directory access operations in which the user supplied the extension number.')
ex2umaaDirAccsdBySpokenName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaDirAccsdBySpokenName.setStatus('current')
if mibBuilder.loadTexts: ex2umaaDirAccsdBySpokenName.setDescription('Directory Accessed by Spoken Name is the number of directory access operations in which the subscriber spoke a recipient name.')
ex2umaaDisallowedTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaDisallowedTransfers.setStatus('current')
if mibBuilder.loadTexts: ex2umaaDisallowedTransfers.setDescription('Disallowed Transfers is the number of times a caller was transferred to the operator because the user they identified was configured to accept calls only from users who are logged on.')
ex2umaaDisconnectedWithoutInput = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaDisconnectedWithoutInput.setStatus('current')
if mibBuilder.loadTexts: ex2umaaDisconnectedWithoutInput.setDescription('Disconnected Without Input is the number of calls that were dropped without any input being offered in response to the auto attendant prompts.')
ex2umaaMenuOption1Used = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaMenuOption1Used.setStatus('current')
if mibBuilder.loadTexts: ex2umaaMenuOption1Used.setDescription('Menu Option 1 Used is the number of times that a caller has chosen option 1 from the custom menu.')
ex2umaaMenuOption2Used = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaMenuOption2Used.setStatus('current')
if mibBuilder.loadTexts: ex2umaaMenuOption2Used.setDescription('Menu Option 2 Used is the number of times that a caller has chosen option 2 from the custom menu.')
ex2umaaMenuOption3Used = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaMenuOption3Used.setStatus('current')
if mibBuilder.loadTexts: ex2umaaMenuOption3Used.setDescription('Menu Option 3 Used is the number of times that a caller has chosen option 3 from the custom menu.')
ex2umaaMenuOption4Used = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaMenuOption4Used.setStatus('current')
if mibBuilder.loadTexts: ex2umaaMenuOption4Used.setDescription('Menu Option 4 Used is the number of times that a caller has chosen option 4 from the custom menu.')
ex2umaaMenuOption5Used = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaMenuOption5Used.setStatus('current')
if mibBuilder.loadTexts: ex2umaaMenuOption5Used.setDescription('Menu Option 5 Used is the number of times that a caller has chosen option 5 from the custom menu.')
ex2umaaMenuOption6Used = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaMenuOption6Used.setStatus('current')
if mibBuilder.loadTexts: ex2umaaMenuOption6Used.setDescription('Menu Option 6 Used is the number of times that a caller has chosen option 6 from the custom menu.')
ex2umaaMenuOption7Used = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaMenuOption7Used.setStatus('current')
if mibBuilder.loadTexts: ex2umaaMenuOption7Used.setDescription('Menu Option 7 Used is the number of times that a caller has chosen option 7 from the custom menu.')
ex2umaaMenuOption8Used = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaMenuOption8Used.setStatus('current')
if mibBuilder.loadTexts: ex2umaaMenuOption8Used.setDescription('Menu Option 8 Used is the number of times that a caller has chosen option 8 from the custom menu.')
ex2umaaMenuOption9Used = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaMenuOption9Used.setStatus('current')
if mibBuilder.loadTexts: ex2umaaMenuOption9Used.setDescription('Menu Option 9 Used is the number of times that a caller has chosen option 9 from the custom menu.')
ex2umaaMenuOptionTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaMenuOptionTimedOut.setStatus('current')
if mibBuilder.loadTexts: ex2umaaMenuOptionTimedOut.setDescription('Menu Option Timed Out is the number of times that the system has timed out while waiting for a caller to select an option from the custom menu.')
ex2umaaOperatorTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaOperatorTransfers.setStatus('current')
if mibBuilder.loadTexts: ex2umaaOperatorTransfers.setDescription('Operator Transfers is the number of calls that have been transferred to the operator.')
ex2umaaOperTransReqByUser = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaOperTransReqByUser.setStatus('current')
if mibBuilder.loadTexts: ex2umaaOperTransReqByUser.setDescription('Operator Transfers Requested by User is the number of times that a caller to this auto attendant has asked to be transferred to an operator.')
ex2umaaOperTransReqByUseOpenMenu = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaOperTransReqByUseOpenMenu.setStatus('current')
if mibBuilder.loadTexts: ex2umaaOperTransReqByUseOpenMenu.setDescription('Operator Transfers Requested by User from Opening Menu is the number of times that a caller to this auto attendant has asked to be transferred to an operator while at the opening menu.')
ex2umaaOutOfHoursCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaOutOfHoursCalls.setStatus('current')
if mibBuilder.loadTexts: ex2umaaOutOfHoursCalls.setDescription('Out of Hours Calls is the number of calls that have been processed by this auto attendant outside of business hours.')
ex2umaaSentToAutoAttendant = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaSentToAutoAttendant.setStatus('current')
if mibBuilder.loadTexts: ex2umaaSentToAutoAttendant.setDescription('Sent to Auto Attendant is the number of times that a caller to this auto attendant has used the custom menu to go to an auto attendant.')
ex2umaaTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaTotalCalls.setStatus('current')
if mibBuilder.loadTexts: ex2umaaTotalCalls.setDescription('Total Calls is the number of calls that have been processed by this auto attendant.')
ex2umaaTransferredCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 63, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaaTransferredCount.setStatus('current')
if mibBuilder.loadTexts: ex2umaaTransferredCount.setDescription('Transferred Count is the number of calls that were transferred by this auto attendant. This number does not include calls that were transferred by the operator.')
ex2UMAvailability = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 15, 64))
ex2umaCallAnswerQueuedMessages = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 64, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaCallAnswerQueuedMessages.setStatus('current')
if mibBuilder.loadTexts: ex2umaCallAnswerQueuedMessages.setDescription('Call Answer Queued Messages is the number of messages created and not yet submitted for delivery.')
ex2umaCalDisconUMIrrecovExtError = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 64, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaCalDisconUMIrrecovExtError.setStatus('current')
if mibBuilder.loadTexts: ex2umaCalDisconUMIrrecovExtError.setDescription('Calls Disconnected by UM on Irrecoverable External Error is the total number of calls disconnected after an irrecoverable external error occurred.')
ex2umaCalDiscnUMIrrecovExtErrSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 64, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaCalDiscnUMIrrecovExtErrSec.setStatus('current')
if mibBuilder.loadTexts: ex2umaCalDiscnUMIrrecovExtErrSec.setDescription('Calls Disconnected by UM on Irrecoverable External Error per second is the number of calls disconnected after an irrecoverable external error occurred in the last second.')
ex2umaCalDiscnIrrecovInternalErr = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 64, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaCalDiscnIrrecovInternalErr.setStatus('current')
if mibBuilder.loadTexts: ex2umaCalDiscnIrrecovInternalErr.setDescription('Calls Disconnected on Irrecoverable Internal Error is the number of calls disconnected after an internal system error occurred.')
ex2umaDirectoryAccessFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 64, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaDirectoryAccessFailures.setStatus('current')
if mibBuilder.loadTexts: ex2umaDirectoryAccessFailures.setDescription('Directory Access Failures is the number of times that attempts to access Active Directory failed.')
ex2umaFailedToRedirectCall = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 64, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaFailedToRedirectCall.setStatus('current')
if mibBuilder.loadTexts: ex2umaFailedToRedirectCall.setDescription('Failed to Redirect Call is the number of times the Microsoft Exchange Unified Messaging service did not redirect calls to a UM worker process.')
ex2umaHubTransportAccessComplete = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 64, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaHubTransportAccessComplete.setStatus('current')
if mibBuilder.loadTexts: ex2umaHubTransportAccessComplete.setDescription('Hub Transport Access Completed is the number of times that the Hub Transport server was accessed successfully.')
ex2umaHubTransportAccessFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 64, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaHubTransportAccessFailures.setStatus('current')
if mibBuilder.loadTexts: ex2umaHubTransportAccessFailures.setDescription('Hub Transport Access Failures is the number of times that attempts to access a Hub Transport server failed. This number is only incremented if all Hub Transport servers were unavailable.')
ex2umaIncompSignalingInformation = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 64, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaIncompSignalingInformation.setStatus('current')
if mibBuilder.loadTexts: ex2umaIncompSignalingInformation.setDescription('Incomplete Signaling Information is the number of calls for which the signaling information was missing or incomplete.')
ex2umaMailboxServerAccessFailure = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 64, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaMailboxServerAccessFailure.setStatus('current')
if mibBuilder.loadTexts: ex2umaMailboxServerAccessFailure.setDescription('Mailbox Server Access Failures is the number of times the system did not access a Mailbox server.')
ex2umaMaximumCallsAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 64, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaMaximumCallsAllowed.setStatus('current')
if mibBuilder.loadTexts: ex2umaMaximumCallsAllowed.setDescription('Maximum Calls Allowed is the length of time, in seconds, that the server concurrently processed the maximum number of calls allowed.')
ex2umaNameTTSed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 64, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaNameTTSed.setStatus('current')
if mibBuilder.loadTexts: ex2umaNameTTSed.setDescription('Name TTSed is the number of times the system used Text-to-Speech (TTS) to create an audio version of the display name of a subscriber.')
ex2umaQueuedOCSUserEventNotifica = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 64, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaQueuedOCSUserEventNotifica.setStatus('current')
if mibBuilder.loadTexts: ex2umaQueuedOCSUserEventNotifica.setDescription('Queued OCS User Event Notifications is the number of notifications that have been created and not yet submitted for delivery.')
ex2umaSpokenNameAccessed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 64, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaSpokenNameAccessed.setStatus('current')
if mibBuilder.loadTexts: ex2umaSpokenNameAccessed.setDescription('Spoken Name Accessed is the number of times the system retrieved the recorded name of a user.')
ex2umaTotalWorkerProcesCallCount = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 64, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaTotalWorkerProcesCallCount.setStatus('current')
if mibBuilder.loadTexts: ex2umaTotalWorkerProcesCallCount.setDescription('Total Worker Process Call Count is the total number of calls handled by this UM worker process.')
ex2umaUnhandledExceptionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 64, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaUnhandledExceptionsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2umaUnhandledExceptionsPerSec.setDescription('Calls Disconnected on Irrecoverable Internal Error Per Second is the number of calls that were disconnected after an internal system error occurred in the last second.')
ex2umaWorkerProcessRecycled = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 64, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umaWorkerProcessRecycled.setStatus('current')
if mibBuilder.loadTexts: ex2umaWorkerProcessRecycled.setDescription('Worker Process Recycled is the number of times a new UM worker process has been started.')
ex2UMCallAnswer = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 15, 65))
ex2UMCallAnsAvgGreetingSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 65, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2UMCallAnsAvgGreetingSize.setStatus('current')
if mibBuilder.loadTexts: ex2UMCallAnsAvgGreetingSize.setDescription('Average Greeting Size is the average size, in seconds, of recorded greetings that have been retrieved by the UM server.')
ex2UMCallAnsAvgRecentVoiceMsgSiz = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 65, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2UMCallAnsAvgRecentVoiceMsgSiz.setStatus('current')
if mibBuilder.loadTexts: ex2UMCallAnsAvgRecentVoiceMsgSiz.setDescription('Average Recent Voice Message Size is the average size, in seconds, of the last 50 voice messages that have been left for subscribers.')
ex2UMCallAnsAvgVoiceMsgSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 65, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2UMCallAnsAvgVoiceMsgSize.setStatus('current')
if mibBuilder.loadTexts: ex2UMCallAnsAvgVoiceMsgSize.setDescription('Average Voice Message Size is the average size, in seconds, of voice messages left for subscribers.')
ex2UMCallAnsCallAnsingCalls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 65, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2UMCallAnsCallAnsingCalls.setStatus('current')
if mibBuilder.loadTexts: ex2UMCallAnsCallAnsingCalls.setDescription('Call Answering Calls is the number of diverted calls that were answered on behalf of subscribers.')
ex2UMCallAnsCallAnsingEscapes = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 65, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2UMCallAnsCallAnsingEscapes.setStatus('current')
if mibBuilder.loadTexts: ex2UMCallAnsCallAnsingEscapes.setDescription('Call Answering Escapes is the number of times a caller pressed the * key to connect to another user rather than leaving a message.')
ex2UMCallAnsCallAnsingMissedCall = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 65, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2UMCallAnsCallAnsingMissedCall.setStatus('current')
if mibBuilder.loadTexts: ex2UMCallAnsCallAnsingMissedCall.setDescription('Call Answering Missed Calls is the number of times a diverted call was dropped without a message being left.')
ex2UMCallAnsCallAnsingVoiceMsgs = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 65, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2UMCallAnsCallAnsingVoiceMsgs.setStatus('current')
if mibBuilder.loadTexts: ex2UMCallAnsCallAnsingVoiceMsgs.setDescription('Call Answering Voice Messages is the total number of messages that were submitted because the calls were answered on behalf of subscribers.')
ex2UMCallAnsCallAnsVoiceMsgPrSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 65, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2UMCallAnsCallAnsVoiceMsgPrSec.setStatus('current')
if mibBuilder.loadTexts: ex2UMCallAnsCallAnsVoiceMsgPrSec.setDescription('Call Answering Voice Messages per Second is the number of messages that were submitted because the calls were answered on behalf of subscribers.')
ex2UMCallAnsCallFailTransUnavail = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 65, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2UMCallAnsCallFailTransUnavail.setStatus('current')
if mibBuilder.loadTexts: ex2UMCallAnsCallFailTransUnavail.setDescription('Call Failed Because Transport Unavailable is the number of calls that failed because the transport service is not available to submit the message.')
ex2UMCalAnsCalDisCalUMAudioHrgls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 65, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2UMCalAnsCalDisCalUMAudioHrgls.setStatus('current')
if mibBuilder.loadTexts: ex2UMCalAnsCalDisCalUMAudioHrgls.setDescription('Calls Disconnected by Callers During UM Audio Hourglass is the number of calls during which the caller disconnected while Unified Messaging was playing the audio hourglass tones.')
ex2UMCalAnsCalDisUMIrrecExtError = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 65, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2UMCalAnsCalDisUMIrrecExtError.setStatus('current')
if mibBuilder.loadTexts: ex2UMCalAnsCalDisUMIrrecExtError.setDescription('Calls Disconnected by UM on Irrecoverable External Error is the total number of calls that have been disconnected after an irrecoverable external error occurred.')
ex2UMCallAnsCallWithoutPersGreet = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 65, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2UMCallAnsCallWithoutPersGreet.setStatus('current')
if mibBuilder.loadTexts: ex2UMCallAnsCallWithoutPersGreet.setDescription('Calls Without Personal Greetings is the number of diverted calls received for subscribers that did not have recorded greeting messages.')
ex2UMCallAnsDivertExtNotProvis = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 65, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2UMCallAnsDivertExtNotProvis.setStatus('current')
if mibBuilder.loadTexts: ex2UMCallAnsDivertExtNotProvis.setDescription('Diverted Extension Not Provisioned is the number of calls received for which the diverted extension supplied with the call is not a UM subscriber extension.')
ex2UMCallAnsFetchGreetingTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 65, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2UMCallAnsFetchGreetingTimeOut.setStatus('current')
if mibBuilder.loadTexts: ex2UMCallAnsFetchGreetingTimeOut.setDescription("Fetch Greeting Timed Out is the number of diverted calls for which the subscriber's personal greeting could not be retrieved within the time allowed.")
ex2UMClientAccessTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 66), )
if mibBuilder.loadTexts: ex2UMClientAccessTable.setStatus('current')
if mibBuilder.loadTexts: ex2UMClientAccessTable.setDescription("A table containing performance information for instances of 'MSExchangeUMClientAccess' objects.")
ex2UMClientAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 66, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2umcacInstance"))
if mibBuilder.loadTexts: ex2UMClientAccessEntry.setStatus('current')
if mibBuilder.loadTexts: ex2UMClientAccessEntry.setDescription("Performance information for one particular instance of 'MSExchangeUMClientAccess' object.")
ex2umcacInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 66, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umcacInstance.setStatus('current')
if mibBuilder.loadTexts: ex2umcacInstance.setDescription('Instance name.')
ex2umcacPID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 66, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umcacPID.setStatus('current')
if mibBuilder.loadTexts: ex2umcacPID.setDescription('Process ID that is hosting the UM client access component')
ex2umcacTotalNumPINResetRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 66, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umcacTotalNumPINResetRequests.setStatus('current')
if mibBuilder.loadTexts: ex2umcacTotalNumPINResetRequests.setDescription('Total Number of PIN Reset Requests is the number of PIN resets that have been requested since the host process was restarted.')
ex2umcacTotalNumFailPINResetReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 66, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umcacTotalNumFailPINResetReq.setStatus('current')
if mibBuilder.loadTexts: ex2umcacTotalNumFailPINResetReq.setDescription('Total Number of Failed PIN Reset Requests is the number of requested PIN resets that have failed since the host process was restarted.')
ex2umcacTotalNumFailPlayPhoneReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 66, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umcacTotalNumFailPlayPhoneReq.setStatus('current')
if mibBuilder.loadTexts: ex2umcacTotalNumFailPlayPhoneReq.setDescription('Total number of failed play on phone requests since the host process was restarted')
ex2umcacTotalNumPlayPhoneRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 66, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umcacTotalNumPlayPhoneRequest.setStatus('current')
if mibBuilder.loadTexts: ex2umcacTotalNumPlayPhoneRequest.setDescription('Total number of play on phone requests since the host process was restarted')
ex2UMFax = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 15, 67))
ex2umfAverageFaxMessageSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 67, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umfAverageFaxMessageSize.setStatus('current')
if mibBuilder.loadTexts: ex2umfAverageFaxMessageSize.setDescription('Average Fax Message Size is the average size, in kilobytes, of fax messages received.')
ex2umfAverageRecentFaxMessageSiz = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 67, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umfAverageRecentFaxMessageSiz.setStatus('current')
if mibBuilder.loadTexts: ex2umfAverageRecentFaxMessageSiz.setDescription('Average Recent Fax Message Size is the average size, in kilobytes, of the last 20 fax messages.')
ex2umfFaxCallDurationExceeded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 67, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umfFaxCallDurationExceeded.setStatus('current')
if mibBuilder.loadTexts: ex2umfFaxCallDurationExceeded.setDescription('Fax Call Duration Exceeded is the number of fax calls that were disconnected because they exceeded the UM maximum call length.')
ex2umfFaxCallNonProvisionMailbox = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 67, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umfFaxCallNonProvisionMailbox.setStatus('current')
if mibBuilder.loadTexts: ex2umfFaxCallNonProvisionMailbox.setDescription('Fax Calls to Non Provisioned Mailboxes is the number of calls to extensions that resolved to mailboxes that are not enabled for fax.')
ex2umfFaxIncomplete = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 67, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umfFaxIncomplete.setStatus('current')
if mibBuilder.loadTexts: ex2umfFaxIncomplete.setDescription('Fax Incomplete is the number of fax calls that were dropped before completion.')
ex2umfFaxMessages = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 67, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umfFaxMessages.setStatus('current')
if mibBuilder.loadTexts: ex2umfFaxMessages.setDescription('Fax Messages is the total number of fax messages received.')
ex2UMGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68))
ex2umgAverageCallDuration = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgAverageCallDuration.setStatus('current')
if mibBuilder.loadTexts: ex2umgAverageCallDuration.setDescription('Average Call Duration is the average duration, in seconds, of calls since the service was started.')
ex2umgAverageRecentCallDuration = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgAverageRecentCallDuration.setStatus('current')
if mibBuilder.loadTexts: ex2umgAverageRecentCallDuration.setDescription('Average Recent Call Duration is the average duration, in seconds, of the last 50 calls.')
ex2umgCallDurationExceeded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgCallDurationExceeded.setStatus('current')
if mibBuilder.loadTexts: ex2umgCallDurationExceeded.setDescription('Call Duration Exceeded is the number of calls that were disconnected because they exceeded the UM maximum call length. This number includes all types of calls, including fax calls.')
ex2umgCallsDisconnectUserFailure = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgCallsDisconnectUserFailure.setStatus('current')
if mibBuilder.loadTexts: ex2umgCallsDisconnectUserFailure.setDescription('Calls Disconnected by User Failure is the total number of calls disconnected after too many user entry failures.')
ex2umgCallsRejected = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgCallsRejected.setStatus('current')
if mibBuilder.loadTexts: ex2umgCallsRejected.setDescription('Calls Rejected is the total number of new call invitations that have been rejected.')
ex2umgCallsRejectedPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgCallsRejectedPerSecond.setStatus('current')
if mibBuilder.loadTexts: ex2umgCallsRejectedPerSecond.setDescription('Calls Rejected per Second is the number of new call invitations that have been rejected in the last second.')
ex2umgCurrentAutoAttendantCalls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgCurrentAutoAttendantCalls.setStatus('current')
if mibBuilder.loadTexts: ex2umgCurrentAutoAttendantCalls.setDescription('Current Auto Attendant Calls is the number of auto attendant calls that are currently connected to the UM server.')
ex2umgCurrentCASConnections = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgCurrentCASConnections.setStatus('current')
if mibBuilder.loadTexts: ex2umgCurrentCASConnections.setDescription('Current CAS Connections is the number of connections that are currently open between the Unified Messaging server and Client Access servers.')
ex2umgCurrentCalls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgCurrentCalls.setStatus('current')
if mibBuilder.loadTexts: ex2umgCurrentCalls.setDescription('Current Calls is the number of calls that are currently connected to the UM server.')
ex2umgCurrentFaxCalls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgCurrentFaxCalls.setStatus('current')
if mibBuilder.loadTexts: ex2umgCurrentFaxCalls.setDescription('Current Fax Calls is the number of fax calls that are currently connected to the UM server. Voice calls become fax calls after a fax tone is detected.')
ex2umgCurrentPlayOnPhoneCalls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgCurrentPlayOnPhoneCalls.setStatus('current')
if mibBuilder.loadTexts: ex2umgCurrentPlayOnPhoneCalls.setDescription('Current Play on Phone Calls is the number of outbound calls that were initiated to play back messages.')
ex2umgCurrentPromptEditingCalls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgCurrentPromptEditingCalls.setStatus('current')
if mibBuilder.loadTexts: ex2umgCurrentPromptEditingCalls.setDescription('Current Prompt Editing Calls is the number of logged on users who are editing custom prompts.')
ex2umgCurrentSubscriberAccesCall = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgCurrentSubscriberAccesCall.setStatus('current')
if mibBuilder.loadTexts: ex2umgCurrentSubscriberAccesCall.setDescription('Current Subscriber Access Calls is the number of logged on subscribers who are currently connected to the UM server.')
ex2umgCurrUnauthentPilotNumCall = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgCurrUnauthentPilotNumCall.setStatus('current')
if mibBuilder.loadTexts: ex2umgCurrUnauthentPilotNumCall.setDescription('Current Unauthenticated Pilot Number Calls is the number of voice calls to the pilot number that have not yet been authenticated.')
ex2umgCurrentVoiceCalls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgCurrentVoiceCalls.setStatus('current')
if mibBuilder.loadTexts: ex2umgCurrentVoiceCalls.setDescription('Current Voice Calls is the number of voice calls that are currently connected to the UM server.')
ex2umgDelayedCalls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgDelayedCalls.setStatus('current')
if mibBuilder.loadTexts: ex2umgDelayedCalls.setDescription('Delayed Calls is the number of calls that experienced one or more delays longer than 2 seconds.')
ex2umgOCSUserEventNotifications = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgOCSUserEventNotifications.setStatus('current')
if mibBuilder.loadTexts: ex2umgOCSUserEventNotifications.setDescription('OCS User Event Notifications is the total number of OCS User Event notifications that have occurred since the service was started.')
ex2umgTotalCalls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgTotalCalls.setStatus('current')
if mibBuilder.loadTexts: ex2umgTotalCalls.setDescription('Total Calls is the number of calls since the service was started.')
ex2umgTotalCallsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgTotalCallsPerSecond.setStatus('current')
if mibBuilder.loadTexts: ex2umgTotalCallsPerSecond.setDescription('Total Calls per Second is the number of new calls that have arrived in the last second.')
ex2umgTotalPlayOnPhoneCalls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgTotalPlayOnPhoneCalls.setStatus('current')
if mibBuilder.loadTexts: ex2umgTotalPlayOnPhoneCalls.setDescription('Total Play on Phone Calls is the total number of Play on Phone calls that have been initiated since the service was started.')
ex2umgUserResponseLatency = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 68, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umgUserResponseLatency.setStatus('current')
if mibBuilder.loadTexts: ex2umgUserResponseLatency.setDescription('User Response Latency is the average response time, in milliseconds, for the system to respond to a user request. This average is calculated over the last 25 calls. This counter is limited to calls that require significant processing.')
ex2UMPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 15, 69))
ex2umpOperationsOverFiveSeconds = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 69, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umpOperationsOverFiveSeconds.setStatus('current')
if mibBuilder.loadTexts: ex2umpOperationsOverFiveSeconds.setDescription('Operations over Five Seconds is the number of all UM operations that took between 5 and 6 seconds to complete. This is the time during which a caller was waiting for UM to respond.')
ex2umpOperationsOverFourSeconds = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 69, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umpOperationsOverFourSeconds.setStatus('current')
if mibBuilder.loadTexts: ex2umpOperationsOverFourSeconds.setDescription('Operations over Four Seconds is the number of all UM operations that took between 4 and 5 seconds to complete. This is the time during which a caller was waiting for UM to respond.')
ex2umpOperationsOverSixSeconds = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 69, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umpOperationsOverSixSeconds.setStatus('current')
if mibBuilder.loadTexts: ex2umpOperationsOverSixSeconds.setDescription('Operations over Six Seconds is the number of all UM operations that took more than 6 seconds to complete. This is the time during which a caller was waiting for UM to respond.')
ex2umpOperationsOverThreeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 69, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umpOperationsOverThreeSeconds.setStatus('current')
if mibBuilder.loadTexts: ex2umpOperationsOverThreeSeconds.setDescription('Operations over Three Seconds is the number of all UM operations that took between 3 and 4 seconds to complete. This is the time during which a caller was waiting for UM to respond.')
ex2umpOperationsOverTwoSeconds = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 69, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umpOperationsOverTwoSeconds.setStatus('current')
if mibBuilder.loadTexts: ex2umpOperationsOverTwoSeconds.setDescription('Operations over Two Seconds is the number of all UM operations that took between 2 and 3 seconds to complete. This is the time during which a caller was waiting for UM to respond.')
ex2umpOperationsUnderTwoSeconds = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 69, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umpOperationsUnderTwoSeconds.setStatus('current')
if mibBuilder.loadTexts: ex2umpOperationsUnderTwoSeconds.setDescription('Operations under Two Seconds is the number of all UM operations that took less than 2 seconds to complete. This is the time during which a caller was waiting for UM to respond.')
ex2UMSubscriberAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70))
ex2umsaAvgRecentSentVoiceMsgSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaAvgRecentSentVoiceMsgSize.setStatus('current')
if mibBuilder.loadTexts: ex2umsaAvgRecentSentVoiceMsgSize.setDescription('Average Recent Sent Voice Message Size is the average size, in seconds, of the last 50 voice messages that were sent.')
ex2umsaAvgRecentSubscribeCallDur = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaAvgRecentSubscribeCallDur.setStatus('current')
if mibBuilder.loadTexts: ex2umsaAvgRecentSubscribeCallDur.setDescription('Average Subscriber Recent Call Duration is the average length of time, in seconds, that subscribers spent logged on to the system for the last 50 subscriber calls.')
ex2umsaAvgSentVoiceMessageSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaAvgSentVoiceMessageSize.setStatus('current')
if mibBuilder.loadTexts: ex2umsaAvgSentVoiceMessageSize.setDescription('Average Sent Voice Message Size is the average size, in seconds, of voice messages that are sent. This size does not include any attachment data.')
ex2umsaAvgSubscriberCallDuration = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaAvgSubscriberCallDuration.setStatus('current')
if mibBuilder.loadTexts: ex2umsaAvgSubscriberCallDuration.setDescription('Average Subscriber Call Duration is the average duration, in seconds, that subscribers spent logged on to the system. This timer starts when logon completes.')
ex2umsaCalendarAccessed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaCalendarAccessed.setStatus('current')
if mibBuilder.loadTexts: ex2umsaCalendarAccessed.setDescription('Calendar Accessed is the number of times subscribers accessed their calendars using the telephone user interface.')
ex2umsaCalendarItemDetailRequest = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaCalendarItemDetailRequest.setStatus('current')
if mibBuilder.loadTexts: ex2umsaCalendarItemDetailRequest.setDescription('Calendar Items Details Requested is the number of times a subscriber requested additional details for a calendar item.')
ex2umsaCalendarItemsHeard = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaCalendarItemsHeard.setStatus('current')
if mibBuilder.loadTexts: ex2umsaCalendarItemsHeard.setDescription('Calendar Items Heard is the number of Calendar items that have been heard by authenticated subscribers.')
ex2umsaCalendarLateAttendance = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaCalendarLateAttendance.setStatus('current')
if mibBuilder.loadTexts: ex2umsaCalendarLateAttendance.setDescription('Calendar Late Attendance is the number of messages that have been sent to inform the organizer of a meeting that the subscriber will be late.')
ex2umsaCalledMeetingOrganizer = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaCalledMeetingOrganizer.setStatus('current')
if mibBuilder.loadTexts: ex2umsaCalledMeetingOrganizer.setDescription('Called Meeting Organizer is the number of times subscribers called the meeting organizer.')
ex2umsaCalDiscCalDurUMAudioHrgls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaCalDiscCalDurUMAudioHrgls.setStatus('current')
if mibBuilder.loadTexts: ex2umsaCalDiscCalDurUMAudioHrgls.setDescription('Calls Disconnected by Callers During UM Audio Hourglass is the number of calls in which the caller disconnected while UM was playing the audio hourglass tones.')
ex2umsaCallDisUMOnIrrecvExtError = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaCallDisUMOnIrrecvExtError.setStatus('current')
if mibBuilder.loadTexts: ex2umsaCallDisUMOnIrrecvExtError.setDescription('Calls Disconnected by UM on Irrecoverable External Error is the total number of calls that have been disconnected after an irrecoverable external error occurred.')
ex2umsaContactItemsHeard = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaContactItemsHeard.setStatus('current')
if mibBuilder.loadTexts: ex2umsaContactItemsHeard.setDescription('Contact Items Heard is the number of times authenticated subscribers listened to directory details.')
ex2umsaContactsAccessed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaContactsAccessed.setStatus('current')
if mibBuilder.loadTexts: ex2umsaContactsAccessed.setDescription('Contacts Accessed is the number of times subscribers accessed the Main Menu Contacts option using the telephone user interface.')
ex2umsaDirectoryAccessed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaDirectoryAccessed.setStatus('current')
if mibBuilder.loadTexts: ex2umsaDirectoryAccessed.setDescription('Directory Accessed is the number of times subscribers accessed the Main Menu Directory option by using the telephone user interface.')
ex2umsaDirAccsdSuccessDialName = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaDirAccsdSuccessDialName.setStatus('current')
if mibBuilder.loadTexts: ex2umsaDirAccsdSuccessDialName.setDescription('Directory Accessed Successfully by Dial by Name is the number of Dial by Name directory access operations that completed successfully on behalf of subscribers.')
ex2umsaDirAccsdSuccessSpokenName = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaDirAccsdSuccessSpokenName.setStatus('current')
if mibBuilder.loadTexts: ex2umsaDirAccsdSuccessSpokenName.setDescription('Directory Accessed Successfully by Spoken Name is the number of speech recognition directory access operations that completed successfully on behalf of subscribers.')
ex2umsaDirAccsdByDialByName = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaDirAccsdByDialByName.setStatus('current')
if mibBuilder.loadTexts: ex2umsaDirAccsdByDialByName.setDescription('Directory Accessed by Dial by Name is the number of directory access operations where the subscriber used the Dial by Name feature.')
ex2umsaDirAccsdByExtension = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaDirAccsdByExtension.setStatus('current')
if mibBuilder.loadTexts: ex2umsaDirAccsdByExtension.setDescription('Directory Accessed by Extension is the number of directory access operations in which the user supplied the extension number.')
ex2umsaDirAccsdBySpokenName = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaDirAccsdBySpokenName.setStatus('current')
if mibBuilder.loadTexts: ex2umsaDirAccsdBySpokenName.setDescription('Directory Accessed by Spoken Name is the number of directory access operations in which the subscriber spoke a recipient name.')
ex2umsaEmailMessageQueueAccessed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaEmailMessageQueueAccessed.setStatus('current')
if mibBuilder.loadTexts: ex2umsaEmailMessageQueueAccessed.setDescription('Email Message Queue Accessed is the number of times subscribers accessed their e-mail message queue by using the telephone user interface.')
ex2umsaEmailMessagesDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaEmailMessagesDeleted.setStatus('current')
if mibBuilder.loadTexts: ex2umsaEmailMessagesDeleted.setDescription('Email Messages Deleted is the number of e-mail messages that were deleted by authenticated subscribers.')
ex2umsaEmailMessagesHeard = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaEmailMessagesHeard.setStatus('current')
if mibBuilder.loadTexts: ex2umsaEmailMessagesHeard.setDescription('Email Messages Heard is the number of e-mail messages that have been heard by authenticated subscribers.')
ex2umsaForwardMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaForwardMessagesSent.setStatus('current')
if mibBuilder.loadTexts: ex2umsaForwardMessagesSent.setDescription('Forward Messages Sent is the number of messages that have been forwarded by authenticated subscribers.')
ex2umsaLaunchedCalls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaLaunchedCalls.setStatus('current')
if mibBuilder.loadTexts: ex2umsaLaunchedCalls.setDescription('Launched Calls is the number of subscriber calls that resulted in an outbound call being placed.')
ex2umsaMeetingsAccepted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaMeetingsAccepted.setStatus('current')
if mibBuilder.loadTexts: ex2umsaMeetingsAccepted.setDescription('Meetings Accepted is the number of Meeting Accepted messages send by subscribers.')
ex2umsaMeetingsDeclined = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaMeetingsDeclined.setStatus('current')
if mibBuilder.loadTexts: ex2umsaMeetingsDeclined.setDescription('Meetings Declined is the number of Meeting Declined messages sent by subscribers.')
ex2umsaRepliedToOrganizer = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaRepliedToOrganizer.setStatus('current')
if mibBuilder.loadTexts: ex2umsaRepliedToOrganizer.setDescription('Replied to Organizer is the number of times subscribers sent reply messages to meeting organizers.')
ex2umsaReplyMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaReplyMessagesSent.setStatus('current')
if mibBuilder.loadTexts: ex2umsaReplyMessagesSent.setDescription('Reply Messages Sent is the number of replies sent by authenticated subscribers.')
ex2umsaSubscriberAuthentFailure = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaSubscriberAuthentFailure.setStatus('current')
if mibBuilder.loadTexts: ex2umsaSubscriberAuthentFailure.setDescription('Subscriber Authentication Failures is the number of authentication failures that have occurred since the service was started. This number is incremented once for every failed authentication. It is possible that a single phone call could generate several authentication failures.')
ex2umsaSubscriberLogonFailures = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaSubscriberLogonFailures.setStatus('current')
if mibBuilder.loadTexts: ex2umsaSubscriberLogonFailures.setDescription('Subscriber Logon Failures is the number of logon failures since the service was started. This number is incremented at most once per phone call.')
ex2umsaSubscriberLogons = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaSubscriberLogons.setStatus('current')
if mibBuilder.loadTexts: ex2umsaSubscriberLogons.setDescription('Subscriber Logons is the number of successful authentications by UM subscribers since the service was started.')
ex2umsaVoiceMessageQueueAccessed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaVoiceMessageQueueAccessed.setStatus('current')
if mibBuilder.loadTexts: ex2umsaVoiceMessageQueueAccessed.setDescription('Voice Message Queue Accessed is the number of times subscribers accessed their voice message queues by using the telephone user interface.')
ex2umsaVoiceMessagesDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaVoiceMessagesDeleted.setStatus('current')
if mibBuilder.loadTexts: ex2umsaVoiceMessagesDeleted.setDescription('Voice Messages Deleted is the number of voice messages that were deleted by authenticated subscribers.')
ex2umsaVoiceMessagesHeard = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaVoiceMessagesHeard.setStatus('current')
if mibBuilder.loadTexts: ex2umsaVoiceMessagesHeard.setDescription('Voice Messages Heard is the number of voice messages played to subscribers. This count is incremented as soon as playback starts. The subscriber does not need to listen to the entire message.')
ex2umsaVoiceMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 70, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2umsaVoiceMessagesSent.setStatus('current')
if mibBuilder.loadTexts: ex2umsaVoiceMessagesSent.setDescription('Voice Messages Sent is the number of voice messages that have been sent by authenticated UM subscribers.')
ex2WS = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71))
ex2WSActiveSubscriptions = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSActiveSubscriptions.setStatus('current')
if mibBuilder.loadTexts: ex2WSActiveSubscriptions.setDescription('Active Subscriptions is the number of active subscriptions.')
ex2WSAddDelegateRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSAddDelegateRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSAddDelegateRequests.setDescription('AddDelegate Requests is the total number of requests for the AddDelegate Web method.')
ex2WSAddDelegateRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSAddDelegateRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSAddDelegateRequestsPerSec.setDescription('AddDelegate Requests per second is the number of AddDelegate requests processed each second.')
ex2WSConvertIdRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSConvertIdRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSConvertIdRequests.setDescription('ConvertId Requests is the total number of requests for the ConvertId web method.')
ex2WSConvertIdRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSConvertIdRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSConvertIdRequestsPerSec.setDescription('ConvertId Requests per second is the number of ConvertId requests processed each second.')
ex2WSCopyFolderRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSCopyFolderRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSCopyFolderRequests.setDescription('CopyFolder Requests is the total number of requests for the CopyFolder Web method.')
ex2WSCopyFolderRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSCopyFolderRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSCopyFolderRequestsPerSec.setDescription('CopyFolder Requests per second is the number of CopyFolder requests processed each second.')
ex2WSCopyItemRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSCopyItemRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSCopyItemRequests.setDescription('CopyItem Requests is the total number of requests for the CopyItem Web method.')
ex2WSCopyItemRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSCopyItemRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSCopyItemRequestsPerSec.setDescription('CopyItem Requests per second is the number of CopyItem requests processed each second.')
ex2WSCreateAttachmentRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSCreateAttachmentRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSCreateAttachmentRequests.setDescription('CreateAttachment Requests is the total number of requests for the CreateAttachment Web method.')
ex2WSCreateAttachRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSCreateAttachRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSCreateAttachRequestsPerSec.setDescription('CreateAttachment Requests per second is the number of CreateAttachment requests processed each second.')
ex2WSCreateFolderRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSCreateFolderRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSCreateFolderRequests.setDescription('CreateFolder Requests is the total number of requests for the CreateFolder Web method.')
ex2WSCreateFolderRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSCreateFolderRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSCreateFolderRequestsPerSec.setDescription('CreateFolder Requests per second is the number of CreateFolder requests processed each second.')
ex2WSCreateItemRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSCreateItemRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSCreateItemRequests.setDescription('CreateItem Requests is the total number of requests for the CreateItem Web method.')
ex2WSCreateItemRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSCreateItemRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSCreateItemRequestsPerSec.setDescription('CreateItem Requests per second is the number of CreateItem requests processed each second.')
ex2WSCreateManagedFolderRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSCreateManagedFolderRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSCreateManagedFolderRequests.setDescription('CreateManagedFolder Requests is the total number of requests for the CreateManagedFolder Web method.')
ex2WSCreateManageFoldReqstPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSCreateManageFoldReqstPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSCreateManageFoldReqstPerSec.setDescription('CreateManagedFolder Requests per second is the number of CreateManagedFolder requests processed each second.')
ex2WSDeleteAttachmentRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSDeleteAttachmentRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSDeleteAttachmentRequests.setDescription('DeleteAttachment Requests is the total number of requests for the DeleteAttachment Web method.')
ex2WSDeleteAttachmentReqstPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSDeleteAttachmentReqstPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSDeleteAttachmentReqstPerSec.setDescription('DeleteAttachment Requests per second is the number of DeleteAttachment requests processed each second.')
ex2WSDeleteFolderRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSDeleteFolderRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSDeleteFolderRequests.setDescription('DeleteFolder Requests is the total number of requests for the DeleteFolder Web method.')
ex2WSDeleteFolderRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSDeleteFolderRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSDeleteFolderRequestsPerSec.setDescription('DeleteFolder Requests per second is the number of DeleteFolder requests processed each second.')
ex2WSDeleteItemRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSDeleteItemRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSDeleteItemRequests.setDescription('DeleteItem Requests is the total number of requests for the DeleteItem Web method.')
ex2WSDeleteItemRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSDeleteItemRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSDeleteItemRequestsPerSec.setDescription('DeleteItem Requests per second is the number of DeleteItem requests processed each second.')
ex2WSExpandDLRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSExpandDLRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSExpandDLRequests.setDescription('ExpandDL Requests is the total number of requests for the ExpandDL Web method.')
ex2WSExpandDLRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSExpandDLRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSExpandDLRequestsPerSec.setDescription('ExpandDL Requests per second is the number of ExpandDL requests processed each second.')
ex2WSFindFolderRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSFindFolderRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSFindFolderRequests.setDescription('FindFolder Requests is the total number of requests for the FindFolder Web method.')
ex2WSFindFolderRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSFindFolderRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSFindFolderRequestsPerSec.setDescription('FindFolder Requests per second is the number of FindFolder requests processed each second.')
ex2WSFindItemRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSFindItemRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSFindItemRequests.setDescription('FindItem Requests is the total number of requests for the FindItem Web method.')
ex2WSFindItemRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSFindItemRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSFindItemRequestsPerSec.setDescription('FindItem Requests per second is the number of FindItem requests processed each second.')
ex2WSFoldersCopied = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSFoldersCopied.setStatus('current')
if mibBuilder.loadTexts: ex2WSFoldersCopied.setDescription('Folders Copied is the total number of folders copied.')
ex2WSFoldersCopiedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSFoldersCopiedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSFoldersCopiedPerSec.setDescription('Folders Copied per second is the number of folders copied each second.')
ex2WSFoldersCreated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSFoldersCreated.setStatus('current')
if mibBuilder.loadTexts: ex2WSFoldersCreated.setDescription('Folders Created is the total number of folders created.')
ex2WSFoldersCreatedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSFoldersCreatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSFoldersCreatedPerSec.setDescription('Folders Created per second is the number of folders created each second.')
ex2WSFoldersDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSFoldersDeleted.setStatus('current')
if mibBuilder.loadTexts: ex2WSFoldersDeleted.setDescription('Folders Deleted is the total number of folders deleted.')
ex2WSFoldersDeletedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSFoldersDeletedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSFoldersDeletedPerSec.setDescription('Folders Deleted per second is the number of folders deleted each second.')
ex2WSFoldersMoved = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSFoldersMoved.setStatus('current')
if mibBuilder.loadTexts: ex2WSFoldersMoved.setDescription('Folders Moved is the total number of folders moved.')
ex2WSFoldersMovedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSFoldersMovedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSFoldersMovedPerSec.setDescription('Folders Moved per second is the number of folders moved each second.')
ex2WSFoldersRead = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSFoldersRead.setStatus('current')
if mibBuilder.loadTexts: ex2WSFoldersRead.setDescription('Folders Read is the total number of folders read.')
ex2WSFoldersSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSFoldersSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSFoldersSentPerSec.setDescription('Folders Sent per second is the number of folders read each second.')
ex2WSFoldersSyncedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSFoldersSyncedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSFoldersSyncedPerSec.setDescription('Folders Synced per second is the number of folders synchronized each second.')
ex2WSFoldersSynchronized = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSFoldersSynchronized.setStatus('current')
if mibBuilder.loadTexts: ex2WSFoldersSynchronized.setDescription('Folders Synchronized is the total number of folders synchronized.')
ex2WSFoldersUpdated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSFoldersUpdated.setStatus('current')
if mibBuilder.loadTexts: ex2WSFoldersUpdated.setDescription('Folders Updated is the total number of folders updated.')
ex2WSFoldersUpdatedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSFoldersUpdatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSFoldersUpdatedPerSec.setDescription('Folders Updated per second is the number of folders updated each second.')
ex2WSGetAttachmentRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSGetAttachmentRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSGetAttachmentRequests.setDescription('GetAttachment Requests is the total number of requests for the GetAttachment Web method.')
ex2WSGetAttachmentRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSGetAttachmentRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSGetAttachmentRequestsPerSec.setDescription('GetAttachment Requests per second is the number of GetAttachment requests processed each second.')
ex2WSGetDelegateRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSGetDelegateRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSGetDelegateRequests.setDescription('GetDelegate Requests is the total number of requests for the GetDelegate Web method.')
ex2WSGetDelegateRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSGetDelegateRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSGetDelegateRequestsPerSec.setDescription('GetDelegate Requests per second is the number of GetDelegate requests processed each second.')
ex2WSGetEventsRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSGetEventsRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSGetEventsRequests.setDescription('GetEvents Requests is the total number of requests for the GetEvents Web method.')
ex2WSGetEventsRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSGetEventsRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSGetEventsRequestsPerSec.setDescription('GetEvents Requests per second is the number of GetEvents requests processed each second.')
ex2WSGetFolderRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSGetFolderRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSGetFolderRequests.setDescription('GetFolder Requests is the total number of requests for the GetFolder Web method.')
ex2WSGetFolderRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSGetFolderRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSGetFolderRequestsPerSec.setDescription('GetFolder Requests per second is the number of GetFolder requests processed each second.')
ex2WSGetItemRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSGetItemRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSGetItemRequests.setDescription('GetItem Requests is the total number of requests for the GetItem web method.')
ex2WSGetItemRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSGetItemRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSGetItemRequestsPerSec.setDescription('GetItem Requests per second is the number of GetItem requests processed each second.')
ex2WSIdsConvertedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSIdsConvertedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSIdsConvertedPerSec.setDescription('Ids converted per second is the number of ids converted each second.')
ex2WSItemsCopied = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSItemsCopied.setStatus('current')
if mibBuilder.loadTexts: ex2WSItemsCopied.setDescription('Items Copied is the total number of items copied.')
ex2WSItemsCopiedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSItemsCopiedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSItemsCopiedPerSec.setDescription('Items Copied per second is the number of items copied each second.')
ex2WSItemsCreated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSItemsCreated.setStatus('current')
if mibBuilder.loadTexts: ex2WSItemsCreated.setDescription('Items Created is the total number of items created.')
ex2WSItemsCreatedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSItemsCreatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSItemsCreatedPerSec.setDescription('Items Created per second is the number of items created each second.')
ex2WSItemsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSItemsDeleted.setStatus('current')
if mibBuilder.loadTexts: ex2WSItemsDeleted.setDescription('Items Deleted is the total number of items deleted.')
ex2WSItemsDeletedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSItemsDeletedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSItemsDeletedPerSec.setDescription('Items Deleted per second is the number of items deleted each second.')
ex2WSItemsMoved = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSItemsMoved.setStatus('current')
if mibBuilder.loadTexts: ex2WSItemsMoved.setDescription('Items Moved is the total number of items moved.')
ex2WSItemsMovedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSItemsMovedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSItemsMovedPerSec.setDescription('Items Moved per second is the number of items moved each second.')
ex2WSItemsRead = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSItemsRead.setStatus('current')
if mibBuilder.loadTexts: ex2WSItemsRead.setDescription('Items Read is the total number of items read.')
ex2WSItemsReadPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSItemsReadPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSItemsReadPerSec.setDescription('Items Read per second is the number of items read each second.')
ex2WSItemsSent = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSItemsSent.setStatus('current')
if mibBuilder.loadTexts: ex2WSItemsSent.setDescription('Items Sent is the total number of items sent.')
ex2WSItemsSentPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSItemsSentPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSItemsSentPerSec.setDescription('Items Sent per second is the number of items sent each second.')
ex2WSItemsSyncedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSItemsSyncedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSItemsSyncedPerSec.setDescription('Items Synced per second is the number of items synchronized each second.')
ex2WSItemsSynchronized = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSItemsSynchronized.setStatus('current')
if mibBuilder.loadTexts: ex2WSItemsSynchronized.setDescription('Items Synchronized is the total number of items synchronized.')
ex2WSItemsUpdated = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSItemsUpdated.setStatus('current')
if mibBuilder.loadTexts: ex2WSItemsUpdated.setDescription('Items Updated is the total number of items updated.')
ex2WSItemsUpdatedPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSItemsUpdatedPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSItemsUpdatedPerSec.setDescription('Items Updated per second is the number of items updated each second.')
ex2WSMoveFolderRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSMoveFolderRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSMoveFolderRequests.setDescription('MoveFolder Requests is the total number of requests for the MoveFolder web method.')
ex2WSMoveFolderRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSMoveFolderRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSMoveFolderRequestsPerSec.setDescription('MoveFolder Requests per second is the number of MoveFolder requests processed each second.')
ex2WSMoveItemRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSMoveItemRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSMoveItemRequests.setDescription('MoveItem Requests is the total number of requests for the MoveItem Web method.')
ex2WSMoveItemRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSMoveItemRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSMoveItemRequestsPerSec.setDescription('MoveItem Requests per second is the number of MoveItem requests processed each second.')
ex2WSNumberOfCurrentProxyCalls = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSNumberOfCurrentProxyCalls.setStatus('current')
if mibBuilder.loadTexts: ex2WSNumberOfCurrentProxyCalls.setDescription('The number of outstanding requests that are being proxied to other CAS servers from this server.')
ex2WSNumberOfProxyReqstPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSNumberOfProxyReqstPerSecond.setStatus('current')
if mibBuilder.loadTexts: ex2WSNumberOfProxyReqstPerSecond.setDescription('Average number of proxy requests per second')
ex2WSNumbrProxyFailoverPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSNumbrProxyFailoverPerSecond.setStatus('current')
if mibBuilder.loadTexts: ex2WSNumbrProxyFailoverPerSecond.setDescription('Average number of proxy failovers per second')
ex2WSProcessID = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 78), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSProcessID.setStatus('current')
if mibBuilder.loadTexts: ex2WSProcessID.setDescription('Process ID that hosts WebServices.')
ex2WSProxyAverageResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 79), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSProxyAverageResponseTime.setStatus('current')
if mibBuilder.loadTexts: ex2WSProxyAverageResponseTime.setDescription('Average elapsed time (in milliseconds) between the beginning and end of a proxied request.')
ex2WSProxyAverageResponseTimNum1 = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 80), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSProxyAverageResponseTimNum1.setStatus('current')
if mibBuilder.loadTexts: ex2WSProxyAverageResponseTimNum1.setDescription('No description available')
ex2WSPushNotificationsFailed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 81), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSPushNotificationsFailed.setStatus('current')
if mibBuilder.loadTexts: ex2WSPushNotificationsFailed.setDescription('Push Notifications Failed is the total number of failed push notifications.')
ex2WSPushNotificationsSucceeded = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 82), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSPushNotificationsSucceeded.setStatus('current')
if mibBuilder.loadTexts: ex2WSPushNotificationsSucceeded.setDescription('Push Notifications Succeeded is the total number of successful push notifications.')
ex2WSRemoveDelegateRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 83), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSRemoveDelegateRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSRemoveDelegateRequests.setDescription('RemoveDelegate Requests is the total number of requests for the RemoveDelegate Web method.')
ex2WSRemoveDelegateRequestPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 84), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSRemoveDelegateRequestPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSRemoveDelegateRequestPerSec.setDescription('RemoveDelegate Requests per second is the number of RemoveDelegate requests processed each second.')
ex2WSRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 85), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSRequestsPerSec.setDescription('Requests per second is the number of requests processed each second.')
ex2WSResolveNamesRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 86), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSResolveNamesRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSResolveNamesRequests.setDescription('ResolveNames Requests is the total number of requests for the ResolveNames Web method.')
ex2WSResolveNamesRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 87), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSResolveNamesRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSResolveNamesRequestsPerSec.setDescription('ResolveNames Requests per second is the number of ResolveNames requests processed each second.')
ex2WSSendItemRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 88), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSSendItemRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSSendItemRequests.setDescription('SendItem Requests is the total number of requests for the SendItem Web method.')
ex2WSSendItemRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 89), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSSendItemRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSSendItemRequestsPerSec.setDescription('SendItem Requests per second is the number of SendItem requests processed each second.')
ex2WSSubscribeRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 90), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSSubscribeRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSSubscribeRequests.setDescription('Subscribe Requests is the total number of requests for the Subscribe web method.')
ex2WSSubscribeRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 91), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSSubscribeRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSSubscribeRequestsPerSec.setDescription('Subscribe Requests per second is the number of Subscribe requests processed each second.')
ex2WSSyncFolderHierarchyRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 92), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSSyncFolderHierarchyRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSSyncFolderHierarchyRequests.setDescription('SyncFolderHierarchy Requests is the total number of requests for the SyncFolderHierarchy Web method.')
ex2WSSynFoldHierarchyReqstPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 93), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSSynFoldHierarchyReqstPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSSynFoldHierarchyReqstPerSec.setDescription('SyncFolderHierarchy Requests per second is the number of SyncFolderHierarchy requests processed each second.')
ex2WSSyncFolderItemsRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 94), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSSyncFolderItemsRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSSyncFolderItemsRequests.setDescription('SyncFolderItems Requests is the total number of requests for the SyncFolderItems Web method.')
ex2WSSyncFolderItemsReqstPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 95), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSSyncFolderItemsReqstPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSSyncFolderItemsReqstPerSec.setDescription('SyncFolderItems Requests per second is the number of SyncFolderItems requests processed each second.')
ex2WSTotalNumberOfIdsConverted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 96), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSTotalNumberOfIdsConverted.setStatus('current')
if mibBuilder.loadTexts: ex2WSTotalNumberOfIdsConverted.setDescription('Ids Converted is the total number of Ids converted.')
ex2WSTotalRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 97), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSTotalRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSTotalRequests.setDescription('Total Requests is the total number of requests processed.')
ex2WSTotalNumberOfBytesProxied = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 98), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSTotalNumberOfBytesProxied.setStatus('current')
if mibBuilder.loadTexts: ex2WSTotalNumberOfBytesProxied.setDescription('Total number of bytes proxied from this CAS server to other CAS servers')
ex2WSTotalNumberOfProxiedRequest = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 99), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSTotalNumberOfProxiedRequest.setStatus('current')
if mibBuilder.loadTexts: ex2WSTotalNumberOfProxiedRequest.setDescription('Total number of proxied request since this process started.')
ex2WSTotalNumberOfProxyFailover = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 100), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSTotalNumberOfProxyFailover.setStatus('current')
if mibBuilder.loadTexts: ex2WSTotalNumberOfProxyFailover.setDescription('Number of times EWS has failed over to an alternate CAS during proxy calls')
ex2WSTotalNumberProxyResponsByte = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 101), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSTotalNumberProxyResponsByte.setStatus('current')
if mibBuilder.loadTexts: ex2WSTotalNumberProxyResponsByte.setDescription('Total number of response bytes resulting from proxy calls from this CAS server')
ex2WSUnsubscribeRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 102), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSUnsubscribeRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSUnsubscribeRequests.setDescription('Unsubscribe Requests is the total number of requests for the Unsubscribe web method.')
ex2WSUnsubscribeRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 103), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSUnsubscribeRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSUnsubscribeRequestsPerSec.setDescription('Unsubscribe Requests per second is the number of Unsubscribe requests processed each second.')
ex2WSUpdateDelegateRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 104), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSUpdateDelegateRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSUpdateDelegateRequests.setDescription('UpdateDelegate Requests is the total number of requests for the UpdateDelegate Web method.')
ex2WSUpdateDelegateRequestPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 105), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSUpdateDelegateRequestPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSUpdateDelegateRequestPerSec.setDescription('UpdateDelegate Requests per second is the number of UpdateDelegate requests processed each second.')
ex2WSUpdateFolderRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 106), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSUpdateFolderRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSUpdateFolderRequests.setDescription('UpdateFolder Requests is the total number of requests for the UpdateFolder web method.')
ex2WSUpdateFolderRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 107), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSUpdateFolderRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSUpdateFolderRequestsPerSec.setDescription('UpdateFolder Requests per second is the number of UpdateFolder requests processed each second.')
ex2WSUpdateItemRequests = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 108), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSUpdateItemRequests.setStatus('current')
if mibBuilder.loadTexts: ex2WSUpdateItemRequests.setDescription('UpdateItem Requests is the total number of requests for the UpdateItem Web method.')
ex2WSUpdateItemRequestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 71, 109), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2WSUpdateItemRequestsPerSec.setStatus('current')
if mibBuilder.loadTexts: ex2WSUpdateItemRequestsPerSec.setDescription('UpdateItem Requests per second is the number of UpdateItem requests processed each second.')
ex2CatalogsTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72), )
if mibBuilder.loadTexts: ex2CatalogsTable.setStatus('current')
if mibBuilder.loadTexts: ex2CatalogsTable.setDescription("A table containing performance information for instances of 'MSFTESQL-Exchange:Catalogs' objects.")
ex2CatalogsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2catInstance"))
if mibBuilder.loadTexts: ex2CatalogsEntry.setStatus('current')
if mibBuilder.loadTexts: ex2CatalogsEntry.setDescription("Performance information for one particular instance of 'MSFTESQL-Exchange:Catalogs' object.")
ex2catInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catInstance.setStatus('current')
if mibBuilder.loadTexts: ex2catInstance.setDescription('Instance name.')
ex2catBatchesFPC = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catBatchesFPC.setStatus('current')
if mibBuilder.loadTexts: ex2catBatchesFPC.setDescription('Number of current batches past filter phase complete. This counter is incremented after all the transactions in the batch are filtered by the filter daemon and given to the plugin(s) for processing.')
ex2catBatchesAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catBatchesAborted.setStatus('current')
if mibBuilder.loadTexts: ex2catBatchesAborted.setDescription('Number of batches aborted to date. By definition the state of an aborted batch, how far some or all of its transactions got through the indexing process is unknown. These batches are retried by SQL.')
ex2catBatchesCompletedSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catBatchesCompletedSuccess.setStatus('current')
if mibBuilder.loadTexts: ex2catBatchesCompletedSuccess.setDescription('Number of batches completed without warnings or errors, to date.')
ex2catBatchesCompletedWPerErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catBatchesCompletedWPerErrors.setStatus('current')
if mibBuilder.loadTexts: ex2catBatchesCompletedWPerErrors.setDescription('Number of batches completed with one or more errors, to date.')
ex2catBatchesCompleteWPerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catBatchesCompleteWPerWarning.setStatus('current')
if mibBuilder.loadTexts: ex2catBatchesCompleteWPerWarning.setDescription('Number of batches completed with warnings but no errors, to date.')
ex2catBatchesDone = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catBatchesDone.setStatus('current')
if mibBuilder.loadTexts: ex2catBatchesDone.setDescription('Number of all batches completed or aborted to date. This counter is incremented after the completion status is sent to SQL.')
ex2catBatchesInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catBatchesInProgress.setStatus('current')
if mibBuilder.loadTexts: ex2catBatchesInProgress.setDescription('Number of batches currently being processed. This counter is incremented when a batch of transactions is accepted by the MSFTESQL-Exchange service and is decremented after the completion is sent or attempted to be sent back to the SQL process.')
ex2catBatchesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catBatchesReceived.setStatus('current')
if mibBuilder.loadTexts: ex2catBatchesReceived.setDescription('Number of batches received to date. This counter is incremented when a batch of transactions is accepted by the MSFTESQL-Exchange service.')
ex2catPhaseComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catPhaseComplete.setStatus('current')
if mibBuilder.loadTexts: ex2catPhaseComplete.setDescription('Number of transactions currently in the complete phase.')
ex2catPhaseInHDFD = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catPhaseInHDFD.setStatus('current')
if mibBuilder.loadTexts: ex2catPhaseInHDFD.setDescription('Number of transactions currently in the huge document filter daemon phase.')
ex2catPhaseInMTFD = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catPhaseInMTFD.setStatus('current')
if mibBuilder.loadTexts: ex2catPhaseInMTFD.setDescription('Number of transactions currently in the multi-threaded filter daemon phase.')
ex2catPhaseInSTFD = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catPhaseInSTFD.setStatus('current')
if mibBuilder.loadTexts: ex2catPhaseInSTFD.setDescription('Number of transactions currently in the single-threaded filter daemon phase.')
ex2catPhaseInPipeline = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catPhaseInPipeline.setStatus('current')
if mibBuilder.loadTexts: ex2catPhaseInPipeline.setDescription('Number of transactions currently in the pipeline phase.')
ex2catPhaseInReadyQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catPhaseInReadyQueue.setStatus('current')
if mibBuilder.loadTexts: ex2catPhaseInReadyQueue.setDescription('Number of transactions currently in the ready queue phase.')
ex2catPhaseOnHold = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catPhaseOnHold.setStatus('current')
if mibBuilder.loadTexts: ex2catPhaseOnHold.setDescription('Number of transactions currently in the on-hold phase.')
ex2catPhasePendingCompletion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catPhasePendingCompletion.setStatus('current')
if mibBuilder.loadTexts: ex2catPhasePendingCompletion.setDescription('Number of transactions currently in the pending completion phase.')
ex2catPhaseRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catPhaseRedundant.setStatus('current')
if mibBuilder.loadTexts: ex2catPhaseRedundant.setDescription('Number of transactions currently in the redundant phase.')
ex2catRequestAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catRequestAbort.setStatus('current')
if mibBuilder.loadTexts: ex2catRequestAbort.setDescription('Number of abort status change requests to date.')
ex2catRequestAsyncFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catRequestAsyncFlush.setStatus('current')
if mibBuilder.loadTexts: ex2catRequestAsyncFlush.setDescription('Number of async flush hints to date.')
ex2catRequestFlushPerDrain = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catRequestFlushPerDrain.setStatus('current')
if mibBuilder.loadTexts: ex2catRequestFlushPerDrain.setDescription('Number of flush/drain status change request to date.')
ex2catRequestForceMerge = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catRequestForceMerge.setStatus('current')
if mibBuilder.loadTexts: ex2catRequestForceMerge.setDescription('Number of force merge async status change requests to date.')
ex2catRequestPause = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catRequestPause.setStatus('current')
if mibBuilder.loadTexts: ex2catRequestPause.setDescription('Number of pause status change requests to date.')
ex2catRequestReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catRequestReset.setStatus('current')
if mibBuilder.loadTexts: ex2catRequestReset.setDescription('Number of reset status change requests to date.')
ex2catRequestResume = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catRequestResume.setStatus('current')
if mibBuilder.loadTexts: ex2catRequestResume.setDescription('Number of resume status change requests to date.')
ex2catState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catState.setStatus('current')
if mibBuilder.loadTexts: ex2catState.setDescription('Current project state. 0=Not Initialized; 1=Available; 2=Available with input queue near limit; 4=Shut down; 5=Paused from Status Change i.e. for backup; 6=Forced paused; 7=Draining; 8=Pipeline flushing; 9=Prepare to pause; 10=Pipline pausing; 11=Prepare to resume; 12=Aborting queues; 13=Draining FDs; 14=Pipeline aborting; 15=Pipeline resetting')
ex2catStateCallerComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catStateCallerComponent.setStatus('current')
if mibBuilder.loadTexts: ex2catStateCallerComponent.setDescription('Caller Component type identifies the type of component that has changed the project state. 0=n/a; 1=Ready queue; 2=Inprogress map; 3=Memory manager; 4=Plugin; 5=Self; 6=CB Master; 7=Pipeline; 8=Request task; 9=Property Id task; 10=FD manager; 11=Status change')
ex2catStateReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catStateReasonCode.setStatus('current')
if mibBuilder.loadTexts: ex2catStateReasonCode.setDescription('Reason code further defines the project state. 0=Clear; 1=Temporary from low resources; 2=Temporary connection problem; 3=Temporary other such as ongoing status change, status change failure, failure to start an FD, failure during merge, see State Caller and State HR; 4=Fatal error; 5=Reset needed')
ex2catStateResultCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catStateResultCode.setStatus('current')
if mibBuilder.loadTexts: ex2catStateResultCode.setDescription('Result code that led to a change in project state.')
ex2catTransDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catTransDeletes.setStatus('current')
if mibBuilder.loadTexts: ex2catTransDeletes.setDescription('Number of delete transactions to date')
ex2catTransDone = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catTransDone.setStatus('current')
if mibBuilder.loadTexts: ex2catTransDone.setDescription('Number of transactions finished to date, includes success, warnings, errors, aborted.')
ex2catTransErrored = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catTransErrored.setStatus('current')
if mibBuilder.loadTexts: ex2catTransErrored.setDescription('Number of transactions completed in error to date.')
ex2catTransInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catTransInProgress.setStatus('current')
if mibBuilder.loadTexts: ex2catTransInProgress.setDescription('Number of transactions currently in progress')
ex2catTransModifies = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catTransModifies.setStatus('current')
if mibBuilder.loadTexts: ex2catTransModifies.setDescription('Number of modify transactions to date')
ex2catTransRerouted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 72, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2catTransRerouted.setStatus('current')
if mibBuilder.loadTexts: ex2catTransRerouted.setDescription('Number of transactions rerouted from the multi-threaded filter daemon to the signle-threaded filter daemon to date.')
ex2FDTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 15, 73), )
if mibBuilder.loadTexts: ex2FDTable.setStatus('current')
if mibBuilder.loadTexts: ex2FDTable.setDescription("A table containing performance information for instances of 'MSFTESQL-Exchange:FD' objects.")
ex2FDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 15, 73, 1), ).setIndexNames((0, "INFORMANT-EXCHANGE-V2", "ex2FDInstance"))
if mibBuilder.loadTexts: ex2FDEntry.setStatus('current')
if mibBuilder.loadTexts: ex2FDEntry.setDescription("Performance information for one particular instance of 'MSFTESQL-Exchange:FD' object.")
ex2FDInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 73, 1, 1), InstanceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDInstance.setStatus('current')
if mibBuilder.loadTexts: ex2FDInstance.setDescription('Instance name.')
ex2FDBatchesCompleted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 73, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDBatchesCompleted.setStatus('current')
if mibBuilder.loadTexts: ex2FDBatchesCompleted.setDescription('Batches completed to date')
ex2FDBatchesInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 73, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDBatchesInProgress.setStatus('current')
if mibBuilder.loadTexts: ex2FDBatchesInProgress.setDescription('Batches currently in progress.')
ex2FDBatchesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 73, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDBatchesReceived.setStatus('current')
if mibBuilder.loadTexts: ex2FDBatchesReceived.setDescription('Batches received to date.')
ex2FDBatchesRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 73, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDBatchesRejected.setStatus('current')
if mibBuilder.loadTexts: ex2FDBatchesRejected.setDescription('Batches rejected to date. These batches could not be processed due to low memory stress.')
ex2FDFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 73, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDFilters.setStatus('current')
if mibBuilder.loadTexts: ex2FDFilters.setDescription('Number of Filters Loaded by filter daemon to date')
ex2FDNoiseWordLists = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 73, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDNoiseWordLists.setStatus('current')
if mibBuilder.loadTexts: ex2FDNoiseWordLists.setDescription('Number of Noise Word Files loaded by filter daemon to date')
ex2FDTransErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 73, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDTransErrors.setStatus('current')
if mibBuilder.loadTexts: ex2FDTransErrors.setDescription('Transactions completed in error to date.')
ex2FDTransSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 73, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDTransSuccess.setStatus('current')
if mibBuilder.loadTexts: ex2FDTransSuccess.setDescription('Transactions completed successfully to date.')
ex2FDTransactionsCompleted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 73, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDTransactionsCompleted.setStatus('current')
if mibBuilder.loadTexts: ex2FDTransactionsCompleted.setDescription('Transactions completed to date.')
ex2FDTransactionsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 73, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDTransactionsReceived.setStatus('current')
if mibBuilder.loadTexts: ex2FDTransactionsReceived.setDescription('Transactions received to date.')
ex2FDTransactionsStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 73, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDTransactionsStarted.setStatus('current')
if mibBuilder.loadTexts: ex2FDTransactionsStarted.setDescription('Transactions started (given to a worker thread to be filtered) to date.')
ex2FDWordBreakers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 15, 73, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2FDWordBreakers.setStatus('current')
if mibBuilder.loadTexts: ex2FDWordBreakers.setDescription('Number of Wordbreakers Loaded by filter daemon to date')
ex2Service = MibIdentifier((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74))
ex2svcBatchesFPC = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcBatchesFPC.setStatus('current')
if mibBuilder.loadTexts: ex2svcBatchesFPC.setDescription('Number of current batches past filter phase complete. This counter is incremented after all the transactions in the batch are filtered by the filter daemon and given to the plugin(s) for processing.')
ex2svcBatchesAborted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcBatchesAborted.setStatus('current')
if mibBuilder.loadTexts: ex2svcBatchesAborted.setDescription('Number of batches aborted to date. By definition the state of an aborted batch, how far some or all of its transactions got through the indexing process is unknown. These batches are retried by SQL.')
ex2svcBatchesCompletedWPerErrors = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcBatchesCompletedWPerErrors.setStatus('current')
if mibBuilder.loadTexts: ex2svcBatchesCompletedWPerErrors.setDescription('Number of batches completed with one or more errors, to date. A batch is a group of one or more transactions.')
ex2svcBatchesCompleteWPerWarning = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcBatchesCompleteWPerWarning.setStatus('current')
if mibBuilder.loadTexts: ex2svcBatchesCompleteWPerWarning.setDescription('Number of batches completed with warnings but no errors, to date. A batch is a group of one or more transactions.')
ex2svcBatcheCompletelySuccessful = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcBatcheCompletelySuccessful.setStatus('current')
if mibBuilder.loadTexts: ex2svcBatcheCompletelySuccessful.setDescription('Number of batches completed without warnings or errors, to date. A batch is a group of one or more transactions.')
ex2svcBatchesDone = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcBatchesDone.setStatus('current')
if mibBuilder.loadTexts: ex2svcBatchesDone.setDescription('Number of all batches completed or aborted to date. This counter is incremented after the completion status is sent to SQL.')
ex2svcBatchesInProgress = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcBatchesInProgress.setStatus('current')
if mibBuilder.loadTexts: ex2svcBatchesInProgress.setDescription('Number of batches currently being processed. This counter is incremented when a batch of transactions is accepted by the MSFTESQL-Exchange service and is decremented after the completion is sent or attempted to be sent back to the SQL process.')
ex2svcBatchesInReadyQueue = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcBatchesInReadyQueue.setStatus('current')
if mibBuilder.loadTexts: ex2svcBatchesInReadyQueue.setDescription('Number of batches in the ready queue. This queue buffers work that will be given to the filter daemons.')
ex2svcBatchesReceived = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcBatchesReceived.setStatus('current')
if mibBuilder.loadTexts: ex2svcBatchesReceived.setDescription('Number of batches received to date. This counter is incremented when a batch of transactions is accepted by the MSFTESQL-Exchange service.')
ex2svcCBSize = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcCBSize.setStatus('current')
if mibBuilder.loadTexts: ex2svcCBSize.setDescription('Amount of memory (MB) currently being used by chunk buffers. Chunk buffers are blocks of shared memory common to the msftesql-Exchange service and the filter daemons.')
ex2svcCBsAcquired = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcCBsAcquired.setStatus('current')
if mibBuilder.loadTexts: ex2svcCBsAcquired.setDescription('Number of chunk buffers that have been returned from the FD. Chunk buffers are blocks of shared memory common to the msftesql-Exchange service and the filter daemons.')
ex2svcCBsDestroyed = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcCBsDestroyed.setStatus('current')
if mibBuilder.loadTexts: ex2svcCBsDestroyed.setDescription('Number of chunk buffers destructed, returned to the o/s, to date. Chunk buffers are blocks of shared memory common to the msftesql-Exchange service and the filter daemons.')
ex2svcCBsGarbageCollected = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcCBsGarbageCollected.setStatus('current')
if mibBuilder.loadTexts: ex2svcCBsGarbageCollected.setDescription('Number of chunk buffers that have been garbage collected from the filter daemons to date. Chunk buffers are blocks of shared memory common to the msftesql-Exchange service and the filter daemons.')
ex2svcCBsGiven = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcCBsGiven.setStatus('current')
if mibBuilder.loadTexts: ex2svcCBsGiven.setDescription('Number of chunk buffers given to the filter daemons to date. Chunk buffers are blocks of shared memory common to the msftesql-Exchange service and the filter daemons.')
ex2svcCBsInUse = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcCBsInUse.setStatus('current')
if mibBuilder.loadTexts: ex2svcCBsInUse.setDescription('Number of chunk buffers that are currently in use. Chunk buffers are blocks of shared memory common to the msftesql-Exchange service and the filter daemons.')
ex2svcCBsReleased = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcCBsReleased.setStatus('current')
if mibBuilder.loadTexts: ex2svcCBsReleased.setDescription('Number of chunk buffers returned back to the free list to date. Chunk buffers are blocks of shared memory common to the msftesql-Exchange service and the filter daemons.')
ex2svcCBsTotal = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcCBsTotal.setStatus('current')
if mibBuilder.loadTexts: ex2svcCBsTotal.setDescription('Current total number of chunk buffers. Chunk buffers are blocks of shared memory common to the msftesql-Exchange service and the filter daemons.')
ex2svcCatalogsMonitored = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcCatalogsMonitored.setStatus('current')
if mibBuilder.loadTexts: ex2svcCatalogsMonitored.setDescription('Number of catalogs with PERFMON counters')
ex2svcCatalogsMounted = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcCatalogsMounted.setStatus('current')
if mibBuilder.loadTexts: ex2svcCatalogsMounted.setDescription('Number of catalogs mounted')
ex2svcFDHDCBEmpty = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDHDCBEmpty.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDHDCBEmpty.setDescription('Number of times to date that the huge document filter daemons have run out of chunk buffers.')
ex2svcFDHDActive = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDHDActive.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDHDActive.setDescription('Number of active huge document filter daemons')
ex2svcFDHDLaunched = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDHDLaunched.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDHDLaunched.setDescription('Number of launched huge document filter daemons to date')
ex2svcFDHDTerminatedAV = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDHDTerminatedAV.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDHDTerminatedAV.setDescription('Number of terminated huge document filter daemons to date due to an access violation. This type of error indicates that the filter daemon process may be unstable or corrupt and consequently, it is recycled.')
ex2svcFDHDTerminatedExcessiveMem = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDHDTerminatedExcessiveMem.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDHDTerminatedExcessiveMem.setDescription('Number of terminated huge document filter daemons to date due to excessive Mem usage. The max, by default, is a percentage of the pagefile however an explicit Mem amount can be set using the FTE_SingleThreadedFilterDaemonMemMax admin parameter.')
ex2svcFDHDTerminatedIdle = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDHDTerminatedIdle.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDHDTerminatedIdle.setDescription('Number of terminated huge document filter daemons to date due to having been idle. Each time the filter daemon gets work, the clock is reset to 0. The idle time interval can be explicitly set by the FTE_FilterDaemonIdleTimeMax admin paramer.')
ex2svcFDHDTerminatedOther = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDHDTerminatedOther.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDHDTerminatedOther.setDescription('Number of terminated huge document filter daemons to date due to a variety of other errors. Further details may be found in the crawl log, through retail tracing if configured and through watson reporting if configured.')
ex2svcFDHDTerminatedPipe = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDHDTerminatedPipe.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDHDTerminatedPipe.setDescription('Number of huge document filter daemons that appear to have exited abruptly as indicated by an interprocess communication failure which may have been due to an unhandled error. A watson report should be generated in this case to allow further analaysis.')
ex2svcFDHDTerminatedTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDHDTerminatedTimeOut.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDHDTerminatedTimeOut.setDescription('Number of terminated huge document filter daemons to date due to a time-out. A time out occurs when the FD takes too long to process a document. These timeouts are controlled by the FTE_FilterDaemonBatchAgingInterval and FTE_ChunkBufferTimeOutSeconds admin parameters.')
ex2svcFDHDUnresponsiveToShutdown = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDHDUnresponsiveToShutdown.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDHDUnresponsiveToShutdown.setDescription("Number of times to date that the huge document filter daemons were given a directive to shutdown but didn't respond in time.")
ex2svcFDMTCBEmpty = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDMTCBEmpty.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDMTCBEmpty.setDescription('Number of times to date that the multi-threaded filter daemons have run out of chunk buffers.')
ex2svcFDMTActive = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDMTActive.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDMTActive.setDescription('Number of multi-threaded filter daemons currently active')
ex2svcFDMTLaunched = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDMTLaunched.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDMTLaunched.setDescription('Number of launched multi-threaded filter daemons to date')
ex2svcFDMTTerminatedAV = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDMTTerminatedAV.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDMTTerminatedAV.setDescription('Number of terminated multi-threaded filter daemons to date due to an access violation. This type of error indicates that the filter daemon process may be unstable or corrupt and consequently, it is recycled.')
ex2svcFDMTTerminatedExcessiveMem = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDMTTerminatedExcessiveMem.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDMTTerminatedExcessiveMem.setDescription('Number of terminated multi-threaded filter daemons to date due to excessive Mem usage. The max, by default, is a percentage of the pagefile however an explicit Mem amount can be set using the FTE_MultiThreadedFilterDaemonMemMax admin parameter.')
ex2svcFDMTTerminatedIdle = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDMTTerminatedIdle.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDMTTerminatedIdle.setDescription('Number of terminated multi-threaded filter daemons to date due to having been idle. Each time the filter daemon gets work, the clock is reset to 0. The idle time interval can be explicitly set by the FTE_FilterDaemonIdleTimeMax admin paramer.')
ex2svcFDMTTerminatedOther = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDMTTerminatedOther.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDMTTerminatedOther.setDescription('Number of terminated multi-threaded filter daemons to date due to a variety of other errors. Further details may be found in the crawl log, through retail tracing if configured and through watson reporting if configured.')
ex2svcFDMTTerminatedPipe = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDMTTerminatedPipe.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDMTTerminatedPipe.setDescription('Number of multi-threaded filter daemons that appear to have exited abruptly as indicated by an interprocess communication failure which may have been due to an unhandled error. A watson report should be generated in this case to allow further analaysis.')
ex2svcFDMTTerminatedTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDMTTerminatedTimeOut.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDMTTerminatedTimeOut.setDescription('Number of terminated multi-threaded filter daemons to date due to a time-out. A time out occurs when the FD takes too long to process a document. These timeouts are controlled by the FTE_FilterDaemonBatchAgingInterval and FTE_ChunkBufferTimeOutSeconds admin parameters.')
ex2svcFDMTUnresponsiveToShutdown = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDMTUnresponsiveToShutdown.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDMTUnresponsiveToShutdown.setDescription("Number of times to date that the multi-threaded filter daemons were given a directive to shutdown but didn't respond in time.")
ex2svcFDSTCBEmpty = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDSTCBEmpty.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDSTCBEmpty.setDescription('Number of times to date that the single-threaded filter daemons have run out of chunk buffers.')
ex2svcFDSTActive = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDSTActive.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDSTActive.setDescription('Number of single-threaded filter daemons currently active')
ex2svcFDSTLaunched = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDSTLaunched.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDSTLaunched.setDescription('Number of launched single-threaded filter daemons to date')
ex2svcFDSTTerminatedAV = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDSTTerminatedAV.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDSTTerminatedAV.setDescription('Number of terminated single-threaded filter daemons to date due to an access violation. This type of error indicates that the filter daemon process may be unstable or corrupt and consequently, it is recycled.')
ex2svcFDSTTerminatedExcessiveMem = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDSTTerminatedExcessiveMem.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDSTTerminatedExcessiveMem.setDescription('Number of terminated single-threaded filter daemons to date due to excessive Mem usage. The max, by default, is a percentage of the pagefile however an explicit Mem amount can be set using the FTE_SingleThreadedFilterDaemonMemMax admin parameter.')
ex2svcFDSTTerminatedIdle = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDSTTerminatedIdle.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDSTTerminatedIdle.setDescription('Number of terminated single-threaded filter daemons to date due to having been idle. Each time the filter daemon gets work, the clock is reset to 0. The idle time interval can be explicitly set by the FTE_FilterDaemonIdleTimeMax admin paramer.')
ex2svcFDSTTerminatedOther = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDSTTerminatedOther.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDSTTerminatedOther.setDescription('Number of terminated single-threaded filter daemons to date due to a variety of other errors. Further details may be found in the crawl log, through retail tracing if configured and through watson reporting if configured.')
ex2svcFDSTTerminatedPipe = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDSTTerminatedPipe.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDSTTerminatedPipe.setDescription('Number of single-threaded filter daemons that appear to have exited abruptly as indicated by an interprocess communication failure which may have been due to an unhandled error. A watson report should be generated in this case to allow further analaysis.')
ex2svcFDSTTerminatedTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDSTTerminatedTimeOut.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDSTTerminatedTimeOut.setDescription('Number of terminated single-threaded filter daemons to date due to a time-out. A time out occurs when the FD takes too long to process a document. These timeouts are controlled by the FTE_FilterDaemonBatchAgingInterval and FTE_ChunkBufferTimeOutSeconds admin parameters.')
ex2svcFDSTUnresponsiveToShutdown = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcFDSTUnresponsiveToShutdown.setStatus('current')
if mibBuilder.loadTexts: ex2svcFDSTUnresponsiveToShutdown.setDescription("Number of times to date that the single-threaded filter daemons were given a directive to shutdown but didn't respond in time.")
ex2svcHeartbeats = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcHeartbeats.setStatus('current')
if mibBuilder.loadTexts: ex2svcHeartbeats.setDescription('Incremented by a timer task which does maintenance and self-monitoring')
ex2svcIndexPerfLevel = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcIndexPerfLevel.setStatus('current')
if mibBuilder.loadTexts: ex2svcIndexPerfLevel.setDescription('Indexing performance level')
ex2svcQueryPerfLevel = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcQueryPerfLevel.setStatus('current')
if mibBuilder.loadTexts: ex2svcQueryPerfLevel.setDescription('Query performance level')
ex2svcTotalNoiseWordFiles = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcTotalNoiseWordFiles.setStatus('current')
if mibBuilder.loadTexts: ex2svcTotalNoiseWordFiles.setDescription('Number of noise word files loaded to date')
ex2svcTotalStemmers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcTotalStemmers.setStatus('current')
if mibBuilder.loadTexts: ex2svcTotalStemmers.setDescription('Number of stemmers loaded to date')
ex2svcTotalThesaurus = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcTotalThesaurus.setStatus('current')
if mibBuilder.loadTexts: ex2svcTotalThesaurus.setDescription('Number of thesaurus files loaded to date')
ex2svcTotalWordbreakers = MibScalar((1, 3, 6, 1, 4, 1, 9600, 1, 15, 74, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ex2svcTotalWordbreakers.setStatus('current')
if mibBuilder.loadTexts: ex2svcTotalWordbreakers.setDescription('Number of wordbreakers loaded to date')
mibBuilder.exportSymbols("INFORMANT-EXCHANGE-V2", ex2rcIndividualAddressLookups=ex2rcIndividualAddressLookups, ex2OWACalendarViewsLoaded=ex2OWACalendarViewsLoaded, ex2im4AppendTotal=ex2im4AppendTotal, ex2tssBytesSentTotal=ex2tssBytesSentTotal, ex2sidNumberOfRTFMessageBodies=ex2sidNumberOfRTFMessageBodies, ex2ISClientTable=ex2ISClientTable, ex2umaaCustomMenuOptions=ex2umaaCustomMenuOptions, ex2dbIOLogReadsPerSec=ex2dbIOLogReadsPerSec, ex2SANSPIPClientConnectionPerSec=ex2SANSPIPClientConnectionPerSec, ex2tssConnectionsCreatedPerSec=ex2tssConnectionsCreatedPerSec, ex2tbMailItemMaterialize=ex2tbMailItemMaterialize, ex2orActiveDataSources=ex2orActiveDataSources, ex2svcTotalStemmers=ex2svcTotalStemmers, ex2siaMsgMissingOriginatingIP=ex2siaMsgMissingOriginatingIP, ex2umaaSentToAutoAttendant=ex2umaaSentToAutoAttendant, ex2SANSPIPPacketsTransmittPerSec=ex2SANSPIPPacketsTransmittPerSec, ex2rReplayGenerationsComplete=ex2rReplayGenerationsComplete, ex2im4SelectFailures=ex2im4SelectFailures, ex2UMClientAccessEntry=ex2UMClientAccessEntry, ex2wmApptmtSaveRecurrencesTotal=ex2wmApptmtSaveRecurrencesTotal, ex2ISDLMembershipCacheMisses=ex2ISDLMembershipCacheMisses, ex2WSFoldersDeletedPerSec=ex2WSFoldersDeletedPerSec, ex2aacSearchEntriesMemConfigData=ex2aacSearchEntriesMemConfigData, ex2esjEdgeObjectsUpdatedTotal=ex2esjEdgeObjectsUpdatedTotal, ex2ISMailboxEntry=ex2ISMailboxEntry, ex2umaCalDiscnUMIrrecovExtErrSec=ex2umaCalDiscnUMIrrecovExtErrSec, ex2caMeetingRequests=ex2caMeetingRequests, ex2ISCJETPagesModifiedPerSec=ex2ISCJETPagesModifiedPerSec, ex2ispHTTPPerDAVTotalNotifyReqst=ex2ispHTTPPerDAVTotalNotifyReqst, ex2umcacPID=ex2umcacPID, ex2apaTotalLicenseRequests=ex2apaTotalLicenseRequests, ex2sifRPCRequestsFailedPercent=ex2sifRPCRequestsFailedPercent, ex2ADAccessGlobalCounters=ex2ADAccessGlobalCounters, ex2sdInboundFailedRecipients=ex2sdInboundFailedRecipients, ex2aserCrsSiteCalendarQueriesSec=ex2aserCrsSiteCalendarQueriesSec, ex2tqPoisonQueueLength=ex2tqPoisonQueueLength, ex2umaDirectoryAccessFailures=ex2umaDirectoryAccessFailures, ex2ISCRPCBytesReceivedPerSec=ex2ISCRPCBytesReceivedPerSec, ex2ctfaMessagesWithSCL6=ex2ctfaMessagesWithSCL6, ex2asPingTotal=ex2asPingTotal, ex2asSyncCommandsPending=ex2asSyncCommandsPending, ex2sidNumUpdateNotifications=ex2sidNumUpdateNotifications, ex2esjEdgeObjectsDeletedPerSec=ex2esjEdgeObjectsDeletedPerSec, ex2esjScanJobCompletSuccessTotal=ex2esjScanJobCompletSuccessTotal, ex2ISAnonymousUserCount=ex2ISAnonymousUserCount, ex2aacLDAPSearchesPerSec=ex2aacLDAPSearchesPerSec, ex2ISVirusScanMessagesDeleted=ex2ISVirusScanMessagesDeleted, ex2svcFDSTTerminatedAV=ex2svcFDSTTerminatedAV, ex2WSTotalRequests=ex2WSTotalRequests, ex2dbiStreamBackupPageReadPerSec=ex2dbiStreamBackupPageReadPerSec, ex2estExchangeServersTotal=ex2estExchangeServersTotal, ex2EdgeSyncJobTable=ex2EdgeSyncJobTable, ex2aacCacheMissesPerSec=ex2aacCacheMissesPerSec, ex2WSRequestsPerSec=ex2WSRequestsPerSec, ex2ispReplicMessageChangesSent=ex2ispReplicMessageChangesSent, ex2WSCopyFolderRequestsPerSec=ex2WSCopyFolderRequestsPerSec, ex2im4CloseFailures=ex2im4CloseFailures, ex2UMCallAnsCallAnsVoiceMsgPrSec=ex2UMCallAnsCallAnsVoiceMsgPrSec, ex2tssInstance=ex2tssInstance, ex2umsaReplyMessagesSent=ex2umsaReplyMessagesSent, ex2OWATotalUniqueUsersLight=ex2OWATotalUniqueUsersLight, ex2svcFDSTTerminatedExcessiveMem=ex2svcFDSTTerminatedExcessiveMem, ex2umaMaximumCallsAllowed=ex2umaMaximumCallsAllowed, ex2UMCallAnsAvgRecentVoiceMsgSiz=ex2UMCallAnsAvgRecentVoiceMsgSiz, ex2siaMessagesValidatedPerSec=ex2siaMessagesValidatedPerSec, ex2im4LogoutFailures=ex2im4LogoutFailures, ex2asPingCommandsDroppedPerSec=ex2asPingCommandsDroppedPerSec, ex2svcFDHDTerminatedOther=ex2svcFDHDTerminatedOther, ex2WSFoldersCopiedPerSec=ex2WSFoldersCopiedPerSec, ex2UMCalAnsCalDisUMIrrecExtError=ex2UMCalAnsCalDisUMIrrecExtError, ex2mbMessagesSubmittedPerSec=ex2mbMessagesSubmittedPerSec, ex2OWAItemsCreatedSinceOWAStart=ex2OWAItemsCreatedSinceOWAStart, ex2tsrConnectionsCreatedPerSec=ex2tsrConnectionsCreatedPerSec, ex2tbpDatabaseConnectionsCurrent=ex2tbpDatabaseConnectionsCurrent, ex2catState=ex2catState, ex2OWATotalUsersPremium=ex2OWATotalUsersPremium, ex2mbTotalCountOfRecoverableItem=ex2mbTotalCountOfRecoverableItem, ex2WSCreateItemRequests=ex2WSCreateItemRequests, ex2ISSingleAppointmentsCreated=ex2ISSingleAppointmentsCreated, ex2umaFailedToRedirectCall=ex2umaFailedToRedirectCall, ex2mbHTTPPerDAVNotifyRequestPSec=ex2mbHTTPPerDAVNotifyRequestPSec, ex2UMCallAnsDivertExtNotProvis=ex2UMCallAnsDivertExtNotProvis, ex2OWAWSSResponseBytes=ex2OWAWSSResponseBytes, ex2mbEventHistoryWritesPerSec=ex2mbEventHistoryWritesPerSec, ex2ISPushNotificatGeneratePerSec=ex2ISPushNotificatGeneratePerSec, ex2ISAsyncNotificatGeneratPerSec=ex2ISAsyncNotificatGeneratPerSec, ex2WSGetFolderRequestsPerSec=ex2WSGetFolderRequestsPerSec, ex2rCopyNotifiyGenerationNumber=ex2rCopyNotifiyGenerationNumber, ex2wmMessageSavesTotal=ex2wmMessageSavesTotal, ex2asPID=ex2asPID, ex2ispReplIDCount=ex2ispReplIDCount, ex2ISApptmtInstanceDeletionRate=ex2ISApptmtInstanceDeletionRate, ex2sifRPCRequestsSent=ex2sifRPCRequestsSent, ex2aacNotFndDNEntriesConfigData=ex2aacNotFndDNEntriesConfigData, ex2sifRPCRequestsFailed=ex2sifRPCRequestsFailed, ex2ISRPCNumOfSlowPackets=ex2ISRPCNumOfSlowPackets, ex2umgTotalCallsPerSecond=ex2umgTotalCallsPerSecond, ex2wmMsgPerAppointmentSavesTotal=ex2wmMsgPerAppointmentSavesTotal, ex2ctfaMessagesWithSCL3=ex2ctfaMessagesWithSCL3, ex2umaaDirAccsdSuccByDialByName=ex2umaaDirAccsdSuccByDialByName, ex2cfaMsgOrigIPIPBlockList=ex2cfaMsgOrigIPIPBlockList, ex2sidNumUpdateNotificationPrSec=ex2sidNumUpdateNotificationPrSec, ex2apaSuccessfulLicenseRequests=ex2apaSuccessfulLicenseRequests, ex2aserCrsSiteCalendarFailureSec=ex2aserCrsSiteCalendarFailureSec, ex2tbColumCacheSavePerSec=ex2tbColumCacheSavePerSec, ex2aadcReachabilityBitmask=ex2aadcReachabilityBitmask, ex2umsaCalDiscCalDurUMAudioHrgls=ex2umsaCalDiscCalDurUMAudioHrgls, ex2ALLDAPSearchCalls=ex2ALLDAPSearchCalls, ex2mbActiveClientLogons=ex2mbActiveClientLogons, ex2svcFDSTTerminatedIdle=ex2svcFDSTTerminatedIdle, ex2tbDataRowSeeksPerSec=ex2tbDataRowSeeksPerSec, ex2svcCBsDestroyed=ex2svcCBsDestroyed, ex2wmNewFolderTemplateDataTotal=ex2wmNewFolderTemplateDataTotal, ex2sifConnectionCacheNumCaches=ex2sifConnectionCacheNumCaches, ex2im4ExpungeRate=ex2im4ExpungeRate, ex2TransportRoutingEntry=ex2TransportRoutingEntry, ex2asCreateCollectionCommandsSec=ex2asCreateCollectionCommandsSec, ex2aMailboxesProcessedPerSec=ex2aMailboxesProcessedPerSec, ex2tbpBatchesExecBackgroundTotal=ex2tbpBatchesExecBackgroundTotal, ex2tqAggregDelivQueLengthAllQues=ex2tqAggregDelivQueLengthAllQues, ex2ADAccessDomainControllerEntry=ex2ADAccessDomainControllerEntry, ex2umsaForwardMessagesSent=ex2umsaForwardMessagesSent, ex2tbpDatabaseConnsRejectdPerSec=ex2tbpDatabaseConnsRejectdPerSec, ex2ISAsyncNotificationsCacheSize=ex2ISAsyncNotificationsCacheSize, ex2FDSUMDownloadTaskQueued=ex2FDSUMDownloadTaskQueued, ex2wmMsgPerAppointmentOpenPerSec=ex2wmMsgPerAppointmentOpenPerSec, ex2ispMessageRecipientsDelivered=ex2ispMessageRecipientsDelivered, ex2RecipientCacheEntry=ex2RecipientCacheEntry, ex2ISOABFullDownloadBytesPerSec=ex2ISOABFullDownloadBytesPerSec, ex2aadcSACLRightFlag=ex2aadcSACLRightFlag, ex2aapInstance=ex2aapInstance, ex2siaMsgValidWithAPassResult=ex2siaMsgValidWithAPassResult, ex2asGetItemEstimatCommandPerSec=ex2asGetItemEstimatCommandPerSec, ex2umcacInstance=ex2umcacInstance, ex2FDTable=ex2FDTable, ex2UMFax=ex2UMFax, ex2aacOutstandingAsyncNotifies=ex2aacOutstandingAsyncNotifies, ex2sifConnCacheTotalCapacity=ex2sifConnCacheTotalCapacity, ex2umaaMenuOption3Used=ex2umaaMenuOption3Used, ex2MailSubmissionEntry=ex2MailSubmissionEntry, ex2aNumberOfThreadsUsed=ex2aNumberOfThreadsUsed, ex2siaMessagesValidated=ex2siaMessagesValidated, ex2tbDataRowMinimizeMemoryPerSec=ex2tbDataRowMinimizeMemoryPerSec, ex2rInstance=ex2rInstance, ex2dbPagesConvertedPerSec=ex2dbPagesConvertedPerSec, ex2FDFilters=ex2FDFilters, ex2SANSPIPClientReferrals=ex2SANSPIPClientReferrals, ex2ISVirusScanFilesQuarantined=ex2ISVirusScanFilesQuarantined, ex2ispReplicStatusMsgsSent=ex2ispReplicStatusMsgsSent, ex2WSGetAttachmentRequests=ex2WSGetAttachmentRequests, ex2ispEventHistWatermarksWrites=ex2ispEventHistWatermarksWrites, ex2OWAAverageResponseTime=ex2OWAAverageResponseTime, ex2tdDumpsterInsertsPerSec=ex2tdDumpsterInsertsPerSec, ex2svcTotalNoiseWordFiles=ex2svcTotalNoiseWordFiles, ex2sifRPCBytesReceived=ex2sifRPCBytesReceived, ex2rbEvents=ex2rbEvents, ex2WebMailTable=ex2WebMailTable, ex2umgCurrentPromptEditingCalls=ex2umgCurrentPromptEditingCalls, exchangeV2=exchangeV2, ex2ISClientForegroundRPCsFailed=ex2ISClientForegroundRPCsFailed, ex2tdsnFailureDSNsTotal=ex2tdsnFailureDSNsTotal, ex2wmMsgPerAppointmentOpensTotal=ex2wmMsgPerAppointmentOpensTotal, ex2OWAMessagesSent=ex2OWAMessagesSent, ex2im4IdleTotal=ex2im4IdleTotal, ex2ispEventHistEvntEmptyCntClass=ex2ispEventHistEvntEmptyCntClass, ex2umgCallsRejected=ex2umgCallsRejected, ex2UMCallAnsCallFailTransUnavail=ex2UMCallAnsCallFailTransUnavail, ex2im4SearchRate=ex2im4SearchRate, ex2im4LoginTotal=ex2im4LoginTotal, ex2estCompletedScansTotal=ex2estCompletedScansTotal, ex2WSItemsSyncedPerSec=ex2WSItemsSyncedPerSec, ex2im4ExamineRate=ex2im4ExamineRate, ex2ISRecurringApptmtCreationRate=ex2ISRecurringApptmtCreationRate, ex2tbStreamWritesTotal=ex2tbStreamWritesTotal, ex2aMailboxesProcessed=ex2aMailboxesProcessed, ex2WSFindFolderRequests=ex2WSFindFolderRequests, ex2p3RETRFailures=ex2p3RETRFailures, ex2OWAProxyUserRequestsPerSec=ex2OWAProxyUserRequestsPerSec, ex2svcFDMTTerminatedExcessiveMem=ex2svcFDMTTerminatedExcessiveMem, ex2mbVirusScanBackgrndMsgUpDate=ex2mbVirusScanBackgrndMsgUpDate, ex2catRequestAbort=ex2catRequestAbort, ex2dbiRecordsConverted=ex2dbiRecordsConverted, ex2ISVirusScanMessagesCleaned=ex2ISVirusScanMessagesCleaned, ex2OWAItemsDeletedSinceOWAStart=ex2OWAItemsDeletedSinceOWAStart, ex2DatabaseInstancesEntry=ex2DatabaseInstancesEntry, ex2asMailboxItemFetchCommandsSec=ex2asMailboxItemFetchCommandsSec, ex2rReplayGenerationsPerMinute=ex2rReplayGenerationsPerMinute, ex2p3ConnectionsFailed=ex2p3ConnectionsFailed, ex2tbStreamSetLengthCount=ex2tbStreamSetLengthCount, ex2asProxyLogonCommandsSentTotal=ex2asProxyLogonCommandsSentTotal, ex2umaaMenuOption5Used=ex2umaaMenuOption5Used, ex2aacOutstandingAsyncReads=ex2aacOutstandingAsyncReads, ex2sifRPCRequestsFailedException=ex2sifRPCRequestsFailedException, ex2ispReceiveQueueSize=ex2ispReceiveQueueSize, ex2dbTableOpenCachePercentHit=ex2dbTableOpenCachePercentHit, ex2rsSeedingFinishedPercent=ex2rsSeedingFinishedPercent, ex2caLastCalendarAttendtProcTime=ex2caLastCalendarAttendtProcTime, ex2ctfaMessagesWithSCL7=ex2ctfaMessagesWithSCL7, ex2OWAPeakUserCountLight=ex2OWAPeakUserCountLight, ex2ISOABDifferentialDnldAttempts=ex2ISOABDifferentialDnldAttempts, ex2OWASessionsEndedByTimeOut=ex2OWASessionsEndedByTimeOut, ex2tqMessagesQueuedForDelivery=ex2tqMessagesQueuedForDelivery, ex2tbDataRowDeletesPerSec=ex2tbDataRowDeletesPerSec, ex2tbDataRowSeeksTotal=ex2tbDataRowSeeksTotal, ex2ISCRPCOperationsPerSec=ex2ISCRPCOperationsPerSec, ex2p3DELETotal=ex2p3DELETotal, ex2ISCJETPagesReadPerSec=ex2ISCJETPagesReadPerSec, ex2umgCurrentCASConnections=ex2umgCurrentCASConnections, ex2ISAsyncRPCRequests=ex2ISAsyncRPCRequests, ex2wmRecipientsEditedTotal=ex2wmRecipientsEditedTotal, ex2rReplayQueueLength=ex2rReplayQueueLength, ex2FDTransSuccess=ex2FDTransSuccess, ex2svcBatchesCompletedWPerErrors=ex2svcBatchesCompletedWPerErrors, ex2TransportSmtpReceiveEntry=ex2TransportSmtpReceiveEntry, ex2im4NamespaceFailures=ex2im4NamespaceFailures, ex2WSUpdateItemRequests=ex2WSUpdateItemRequests, ex2esjTargetObjectsScannedPerSec=ex2esjTargetObjectsScannedPerSec, ex2caLostRaces=ex2caLostRaces, ex2ISClientBackgroundRPCsFailSec=ex2ISClientBackgroundRPCsFailSec, ex2mbReceiveQueueSize=ex2mbReceiveQueueSize, ex2im4StatusRate=ex2im4StatusRate, ex2tqInstance=ex2tqInstance, ex2UMClientAccessTable=ex2UMClientAccessTable, ex2ISSlowQPThreads=ex2ISSlowQPThreads, ex2wmMessageOpensPerSec=ex2wmMessageOpensPerSec, ex2ispReplicFolderDataMsgReceive=ex2ispReplicFolderDataMsgReceive, ex2aadcLDAPFatalErrorsPerMinute=ex2aadcLDAPFatalErrorsPerMinute, ex2cfaConnOnIPBlockListProviders=ex2cfaConnOnIPBlockListProviders, ex2tqMsgsQuedForDelivPerSecond=ex2tqMsgsQuedForDelivPerSecond, ex2WSSubscribeRequests=ex2WSSubscribeRequests, ex2FDTransactionsCompleted=ex2FDTransactionsCompleted, ex2svcBatchesDone=ex2svcBatchesDone, ex2im4CheckRate=ex2im4CheckRate, ex2TransportResolverTable=ex2TransportResolverTable, ex2sidNumContentConversionsDone=ex2sidNumContentConversionsDone, ex2ispHTTPPerDAVTotalSubsCreated=ex2ispHTTPPerDAVTotalSubsCreated, ex2tsrMessageBytesReceivedPerSec=ex2tsrMessageBytesReceivedPerSec, ex2tssMessageBytesSentTotal=ex2tssMessageBytesSentTotal, ex2WSFoldersCreated=ex2WSFoldersCreated, ex2uaTotalSRLParameterUpdates=ex2uaTotalSRLParameterUpdates, ex2esjEdgeObjectsAddedTotal=ex2esjEdgeObjectsAddedTotal, ex2mbPeakClientLogons=ex2mbPeakClientLogons, ex2apaTotalMessages=ex2apaTotalMessages, ex2im4ExpungeTotal=ex2im4ExpungeTotal, ex2paaCalculationsAtSRL4=ex2paaCalculationsAtSRL4, ex2SenderIdAgent=ex2SenderIdAgent, ex2im4SearchTotal=ex2im4SearchTotal, ex2sifROPRequestsOutstanding=ex2sifROPRequestsOutstanding, ex2tssRecipientsSent=ex2tssRecipientsSent, ex2aacLDAPSearchesTotal=ex2aacLDAPSearchesTotal, ex2WSUpdateDelegateRequests=ex2WSUpdateDelegateRequests, ex2WSTotalNumberOfProxiedRequest=ex2WSTotalNumberOfProxiedRequest, ex2sidNumDeleteNotificationPrSec=ex2sidNumDeleteNotificationPrSec, ex2dbVersionBucketsAllocated=ex2dbVersionBucketsAllocated)
mibBuilder.exportSymbols("INFORMANT-EXCHANGE-V2", ex2rbCancelled=ex2rbCancelled, ex2im4CheckFailures=ex2im4CheckFailures, ex2siNumberDatabasesBeingIndexed=ex2siNumberDatabasesBeingIndexed, ex2sidNumCreateNotifications=ex2sidNumCreateNotifications, ex2svcCBsReleased=ex2svcCBsReleased, ex2orTransactionsCommittedTotal=ex2orTransactionsCommittedTotal, ex2Autodiscover=ex2Autodiscover, ex2ispReplicBackfillDataMsgsSent=ex2ispReplicBackfillDataMsgsSent, ex2mbHTTPPerDAVTotalNotifyRequst=ex2mbHTTPPerDAVTotalNotifyRequst, ex2sifRPCLatencyTotalMsec=ex2sifRPCLatencyTotalMsec, ex2ispMessagesSubmittedPerSec=ex2ispMessagesSubmittedPerSec, ex2aapOpenConnectionsToGlobalCat=ex2aapOpenConnectionsToGlobalCat, ex2sdInboundLocalDeliveryCalls=ex2sdInboundLocalDeliveryCalls, ex2svcBatchesAborted=ex2svcBatchesAborted, ex2paaSenderBlockRemoteOpenProxy=ex2paaSenderBlockRemoteOpenProxy, ex2aapLDAPSearchTime=ex2aapLDAPSearchTime, ex2aadcLDAPReadTime=ex2aadcLDAPReadTime, ex2ADAccessCachesTable=ex2ADAccessCachesTable, ex2tbpBatchesWaitingPerSec=ex2tbpBatchesWaitingPerSec, ex2sifConnCacheOutLimitCreations=ex2sifConnCacheOutLimitCreations, ex2tssMessageBytesSentPerSec=ex2tssMessageBytesSentPerSec, ex2aapLDAPWriteTime=ex2aapLDAPWriteTime, ex2svcFDMTTerminatedIdle=ex2svcFDMTTerminatedIdle, ex2ISExchmemNumberOfMemoryErrors=ex2ISExchmemNumberOfMemoryErrors, ex2OWASessionsEndedByLogoff=ex2OWASessionsEndedByLogoff, ex2ISRPCClientsBytesRead=ex2ISRPCClientsBytesRead, ex2orActiveRows=ex2orActiveRows, ex2rTruncatedGenerationNumber=ex2rTruncatedGenerationNumber, ex2ispMessagesDelivered=ex2ispMessagesDelivered, ex2troInstance=ex2troInstance, ex2OWASearches=ex2OWASearches, ex2wmNamesCheckedTotal=ex2wmNamesCheckedTotal, ex2dbDatabasePageFaultsPerSec=ex2dbDatabasePageFaultsPerSec, ex2TransportResolverEntry=ex2TransportResolverEntry, ex2catTransDeletes=ex2catTransDeletes, ex2aapNonCriticalValidFailPerMin=ex2aapNonCriticalValidFailPerMin, ex2OWAActiveConversions=ex2OWAActiveConversions, ex2ISCDirAccLDAPSearchesPerSec=ex2ISCDirAccLDAPSearchesPerSec, ex2UMCallAnsCallWithoutPersGreet=ex2UMCallAnsCallWithoutPersGreet, ex2orTransactionsAbortedRate=ex2orTransactionsAbortedRate, ex2umaHubTransportAccessFailures=ex2umaHubTransportAccessFailures, ex2catBatchesInProgress=ex2catBatchesInProgress, ex2sdInboundRetriedRecipients=ex2sdInboundRetriedRecipients, ex2mbVirusScanBackgrndMsgSkipped=ex2mbVirusScanBackgrndMsgSkipped, ex2dbDatabaseCachePercentHit=ex2dbDatabaseCachePercentHit, ex2ISVirusScanFileQuarantinePSec=ex2ISVirusScanFileQuarantinePSec, ex2tbStreamBytesReadTotal=ex2tbStreamBytesReadTotal, ex2ispEventHisEventEmptyMsgClass=ex2ispEventHisEventEmptyMsgClass, ex2ISClientRPCFailAccessDenySec=ex2ISClientRPCFailAccessDenySec, ex2TransportDSNTable=ex2TransportDSNTable, ex2TransportSmtpSendTable=ex2TransportSmtpSendTable, ex2tssMessagesSentTotal=ex2tssMessagesSentTotal, ex2sifRPCSlowReqLatencyTotalMsec=ex2sifRPCSlowReqLatencyTotalMsec, ex2ISACLUpgradeCompletedUpgrades=ex2ISACLUpgradeCompletedUpgrades, ex2WSUpdateFolderRequestsPerSec=ex2WSUpdateFolderRequestsPerSec, ex2mbMessagesSentPerSec=ex2mbMessagesSentPerSec, ex2asBusyThreads=ex2asBusyThreads, ex2ispHTTPPerDAVCurrentTransLock=ex2ispHTTPPerDAVCurrentTransLock, ex2aacNotFndDNEntriesMemUserData=ex2aacNotFndDNEntriesMemUserData, ex2sidNumberOfIndexedAttachments=ex2sidNumberOfIndexedAttachments, ex2ISSlowSearchThreads=ex2ISSlowSearchThreads, ex2rReplayBatchSize=ex2rReplayBatchSize, ex2WSActiveSubscriptions=ex2WSActiveSubscriptions, ex2sdInboundReroutedRecipients=ex2sdInboundReroutedRecipients, ex2wmApptmtAttachmentEditsPerSec=ex2wmApptmtAttachmentEditsPerSec, ex2rInitializing=ex2rInitializing, ex2ISCDirAccLDAPReadsPerSec=ex2ISCDirAccLDAPReadsPerSec, ex2p3RSETFailures=ex2p3RSETFailures, ex2mbEventHistEventsTrunConClass=ex2mbEventHistEventsTrunConClass, ex2OWAFailedRequestsPerSec=ex2OWAFailedRequestsPerSec, ex2aserIntraSiteCalendarFailSec=ex2aserIntraSiteCalendarFailSec, ex2OWAAverageConversionTime=ex2OWAAverageConversionTime, ex2ispSingleInstanceRatio=ex2ispSingleInstanceRatio, ex2siaDNSQueriesPerSec=ex2siaDNSQueriesPerSec, ex2wmMessageAttachmentEditPerSec=ex2wmMessageAttachmentEditPerSec, ex2im4LogoutRate=ex2im4LogoutRate, ex2siaMsgValidWithANoneResult=ex2siaMsgValidWithANoneResult, ex2SANSPIPTotalFailedServerConns=ex2SANSPIPTotalFailedServerConns, ex2ispReplicBackfillRequestsSent=ex2ispReplicBackfillRequestsSent, ex2umaCallAnswerQueuedMessages=ex2umaCallAnswerQueuedMessages, ex2sifRPCBytesReceivedAverage=ex2sifRPCBytesReceivedAverage, ex2mbMessageRecipientsDelivered=ex2mbMessageRecipientsDelivered, ex2asSyncStateKBytesLeftCompress=ex2asSyncStateKBytesLeftCompress, ex2OWAUNCResponseBytes=ex2OWAUNCResponseBytes, ex2umsaAvgRecentSentVoiceMsgSize=ex2umsaAvgRecentSentVoiceMsgSize, ex2estJobsWaitingTotal=ex2estJobsWaitingTotal, ex2ISOABFullDnldAttemptsBlocked=ex2ISOABFullDnldAttemptsBlocked, ex2DatabaseTable=ex2DatabaseTable, ex2aadcIsSynchronizedFlag=ex2aadcIsSynchronizedFlag, ex2umgCurrentFaxCalls=ex2umgCurrentFaxCalls, ex2WSMoveFolderRequests=ex2WSMoveFolderRequests, ex2tbDataRowMovesPerSec=ex2tbDataRowMovesPerSec, ex2OWAPID=ex2OWAPID, ex2DatabaseTableClassesTable=ex2DatabaseTableClassesTable, ex2ISReadBytesRPCClientsPerSec=ex2ISReadBytesRPCClientsPerSec, ex2sidNumCreateNotificationPrSec=ex2sidNumCreateNotificationPrSec, ex2sidNumDeleteNotifications=ex2sidNumDeleteNotifications, ex2ISRecurringApptmtsDeleted=ex2ISRecurringApptmtsDeleted, ex2rReplayGenerationNumber=ex2rReplayGenerationNumber, ex2sifRPCRequestsSentPerSec=ex2sifRPCRequestsSentPerSec, ex2catPhasePendingCompletion=ex2catPhasePendingCompletion, ex2paaCalculationsAtSRL9=ex2paaCalculationsAtSRL9, ex2tbDataRowSeeksPrefixTotal=ex2tbDataRowSeeksPrefixTotal, ex2OWAConversionResponseKBPerSec=ex2OWAConversionResponseKBPerSec, ex2aapLDAPReadCallsPerSec=ex2aapLDAPReadCallsPerSec, ex2sidAvgLatencyRPCObtainContent=ex2sidAvgLatencyRPCObtainContent, ex2mbEventHistoryEventsCount=ex2mbEventHistoryEventsCount, ex2svcCatalogsMounted=ex2svcCatalogsMounted, ex2mbSearchTaskRate=ex2mbSearchTaskRate, ex2ADAccessCachesEntry=ex2ADAccessCachesEntry, ex2aapIgnorValidatFailuresPerMin=ex2aapIgnorValidatFailuresPerMin, ex2aacCacheExpiriesSecConfigData=ex2aacCacheExpiriesSecConfigData, ex2umgAverageRecentCallDuration=ex2umgAverageRecentCallDuration, ex2trMessagesProcessed=ex2trMessagesProcessed, ex2tbLazyBytesLoadPerformedTotal=ex2tbLazyBytesLoadPerformedTotal, ex2asAverageRequestTime=ex2asAverageRequestTime, ex2ISDLMembershipCacheHits=ex2ISDLMembershipCacheHits, ex2msSuccessfulSubmsPerSecond=ex2msSuccessfulSubmsPerSecond, ex2esjSourceObjectsScannedTotal=ex2esjSourceObjectsScannedTotal, ex2asFolderUpdateTotal=ex2asFolderUpdateTotal, ex2asSyncDroppedTotal=ex2asSyncDroppedTotal, ex2SANSPIPTotalFailedClientConns=ex2SANSPIPTotalFailedClientConns, ex2wmApptmtEditRecurrencePerSec=ex2wmApptmtEditRecurrencePerSec, ex2wmApptmtDataRetrievesPerSec=ex2wmApptmtDataRetrievesPerSec, ex2catPhaseInMTFD=ex2catPhaseInMTFD, ex2wmAppointmentUpdatesPerSec=ex2wmAppointmentUpdatesPerSec, ex2SearchIndicesEntry=ex2SearchIndicesEntry, ex2wmAppointmentSendsPerSec=ex2wmAppointmentSendsPerSec, ex2wmMessageAttachmentEditsTotal=ex2wmMessageAttachmentEditsTotal, ex2mbCategorizationCount=ex2mbCategorizationCount, ex2im4IdleFailures=ex2im4IdleFailures, ex2ispPeakClientLogons=ex2ispPeakClientLogons, ex2OWA=ex2OWA, ex2WSCreateFolderRequestsPerSec=ex2WSCreateFolderRequestsPerSec, ex2asProvisionTotal=ex2asProvisionTotal, ex2rbAccepted=ex2rbAccepted, ex2ISPeakPushNotificatCacheSize=ex2ISPeakPushNotificatCacheSize, ex2im4STARTTLSTotal=ex2im4STARTTLSTotal, ex2ISOABFullDownloadBytes=ex2ISOABFullDownloadBytes, ex2WSSyncFolderItemsReqstPerSec=ex2WSSyncFolderItemsReqstPerSec, ex2ISClientBackgroundRPCsFailed=ex2ISClientBackgroundRPCsFailed, ex2cfaConnectionsOnIPBlockList=ex2cfaConnectionsOnIPBlockList, ex2catBatchesCompletedSuccess=ex2catBatchesCompletedSuccess, ex2ISRPCPacketsPerSec=ex2ISRPCPacketsPerSec, ex2esjEdgeObjectsUpdatedPerSec=ex2esjEdgeObjectsUpdatedPerSec, ex2FDSUMDownloadTasksCompleted=ex2FDSUMDownloadTasksCompleted, ex2FDSUMBytesDownloaded=ex2FDSUMBytesDownloaded, ex2p3STATFailures=ex2p3STATFailures, ex2sifRPCSlowRequestsPercent=ex2sifRPCSlowRequestsPercent, ex2siaMsgValidPerSecSoftFailRes=ex2siaMsgValidPerSecSoftFailRes, ex2tssBytesSentPerSec=ex2tssBytesSentPerSec, ex2SecureMailTransportTable=ex2SecureMailTransportTable, ex2tbDataRowClonesTotal=ex2tbDataRowClonesTotal, ex2ISRPCClientsUncomprsdByteRead=ex2ISRPCClientsUncomprsdByteRead, ex2im4AuthenticateRate=ex2im4AuthenticateRate, ex2aapLDAPNotificaReportedPerSec=ex2aapLDAPNotificaReportedPerSec, ex2mbVirusScanExtRsltNotAccepted=ex2mbVirusScanExtRsltNotAccepted, ex2siaMsgValidPerSecPassResult=ex2siaMsgValidPerSecPassResult, ex2sifRPCRequestsSucceeded=ex2sifRPCRequestsSucceeded, ex2WSUnsubscribeRequests=ex2WSUnsubscribeRequests, ex2svcFDSTTerminatedOther=ex2svcFDSTTerminatedOther, ex2sidNumberOfOutstandingBatches=ex2sidNumberOfOutstandingBatches, ex2wmGetAppFramePerSec=ex2wmGetAppFramePerSec, ex2sdInboundRecipntDeliverSecond=ex2sdInboundRecipntDeliverSecond, ex2OWASearchesExecuted=ex2OWASearchesExecuted, ex2umsaEmailMessageQueueAccessed=ex2umsaEmailMessageQueueAccessed, ex2ALTable=ex2ALTable, ex2FDSOABInstance=ex2FDSOABInstance, ex2ISClientRPCFailServUnavailSec=ex2ISClientRPCFailServUnavailSec, ex2ispReplicBackfillDataMsgsRecv=ex2ispReplicBackfillDataMsgsRecv, ex2WSFindItemRequestsPerSec=ex2WSFindItemRequestsPerSec, ex2estJobsExecutingTotal=ex2estJobsExecutingTotal, ex2rbRequestsFailed=ex2rbRequestsFailed, ex2tbpBatchesTimedOutPerSec=ex2tbpBatchesTimedOutPerSec, ex2esjScanJobNotStartNotLockTotl=ex2esjScanJobNotStartNotLockTotl, ex2asSettingsCommandsPerSec=ex2asSettingsCommandsPerSec, ex2umgDelayedCalls=ex2umgDelayedCalls, ex2ISRecurringApptmtsCreated=ex2ISRecurringApptmtsCreated, ex2aEventsInQueue=ex2aEventsInQueue, ex2WSDeleteItemRequests=ex2WSDeleteItemRequests, ex2aacSearchEntryMemoryUserData=ex2aacSearchEntryMemoryUserData, ex2OWARejectedConversions=ex2OWARejectedConversions, ex2umaaMenuOption2Used=ex2umaaMenuOption2Used, ex2tbExtenedPropertyWritesTotal=ex2tbExtenedPropertyWritesTotal, ex2im4LoginFailures=ex2im4LoginFailures, ex2SANSPIPWorkerThreadsInUse=ex2SANSPIPWorkerThreadsInUse, ex2WSItemsDeleted=ex2WSItemsDeleted, ex2ispSearchTaskRate=ex2ispSearchTaskRate, ex2asConflictConcurrentSyncTotal=ex2asConflictConcurrentSyncTotal, ex2tbpBatchesTimedOutTotal=ex2tbpBatchesTimedOutTotal, ex2sidThrottlingDelayValue=ex2sidThrottlingDelayValue, ex2mbHTTPPerDAVCurrentTransLocks=ex2mbHTTPPerDAVCurrentTransLocks, ex2msTemporarySubmissionFailures=ex2msTemporarySubmissionFailures, ex2OWAPeakUserCountPremium=ex2OWAPeakUserCountPremium, ex2UMPerformance=ex2UMPerformance, ex2aagcOutOfSiteDomainController=ex2aagcOutOfSiteDomainController, ex2WSFoldersSyncedPerSec=ex2WSFoldersSyncedPerSec, ex2rReplayGenerationsRemaining=ex2rReplayGenerationsRemaining, ex2adErrorResponsesPerSec=ex2adErrorResponsesPerSec, ex2asSendMailCommandsPerSec=ex2asSendMailCommandsPerSec, ex2aEventsProcessed=ex2aEventsProcessed, ex2ISClientRPCFailedAccessDenied=ex2ISClientRPCFailedAccessDenied, ex2SANSPIPFailedServerConnPerSec=ex2SANSPIPFailedServerConnPerSec, ex2im4SelectRate=ex2im4SelectRate, ex2OWAStoreLogonFailurePercent=ex2OWAStoreLogonFailurePercent, ex2cfaConnOnIPAllowListSec=ex2cfaConnOnIPAllowListSec, ex2im4CreateFailures=ex2im4CreateFailures, ex2tsrConnectionsTotal=ex2tsrConnectionsTotal, ex2mbReplIDCount=ex2mbReplIDCount, ex2im4AvgCommProcessTimeMillisec=ex2im4AvgCommProcessTimeMillisec, ex2svcFDSTTerminatedPipe=ex2svcFDSTTerminatedPipe, ex2ISVirusScanFilesScannedPerSec=ex2ISVirusScanFilesScannedPerSec, ex2orActiveStreams=ex2orActiveStreams, ex2mbEventHistEventsTrunMsgClass=ex2mbEventHistEventsTrunMsgClass, ex2dbLogBytesWritePerSec=ex2dbLogBytesWritePerSec, ex2siaMsgValidPerSecNoneResult=ex2siaMsgValidPerSecNoneResult, ex2WSCopyItemRequestsPerSec=ex2WSCopyItemRequestsPerSec, ex2asItemOperationsCommandPerSec=ex2asItemOperationsCommandPerSec, ex2wmFormsSentTotal=ex2wmFormsSentTotal, ex2wmApptmtAttachmentEditsTotal=ex2wmApptmtAttachmentEditsTotal, ex2p3InvalidCommands=ex2p3InvalidCommands, ex2UMCallAnsCallAnsingMissedCall=ex2UMCallAnsCallAnsingMissedCall, ex2umpOperationsOverFourSeconds=ex2umpOperationsOverFourSeconds, ex2jaMessagesProcessByJournaling=ex2jaMessagesProcessByJournaling, ex2sdOutboundTotalRecipients=ex2sdOutboundTotalRecipients, ex2tsrMessagesReceivedPerSec=ex2tsrMessagesReceivedPerSec, ex2tbpCursorsClosedTotal=ex2tbpCursorsClosedTotal, ex2wmApptmtEditRecurrenceTotal=ex2wmApptmtEditRecurrenceTotal, ex2SANSPIPClientDisconnectPerSec=ex2SANSPIPClientDisconnectPerSec, ex2WSSyncFolderHierarchyRequests=ex2WSSyncFolderHierarchyRequests, ex2OWAPasswordChanges=ex2OWAPasswordChanges, ex2ispVirusScanBackgrndScnThread=ex2ispVirusScanBackgrndScnThread, ex2sifExRpcConnDisposalEvents=ex2sifExRpcConnDisposalEvents, ex2UMAutoAttendantTable=ex2UMAutoAttendantTable, ex2tbExtendPropertyBytReadPerSec=ex2tbExtendPropertyBytReadPerSec, ex2tqSubmissQueueItemExpireTotal=ex2tqSubmissQueueItemExpireTotal, ex2aapLDAPTimeoutErrorsPerSec=ex2aapLDAPTimeoutErrorsPerSec, ex2ISPushNotificationsSkipPerSec=ex2ISPushNotificationsSkipPerSec, ex2svcFDHDTerminatedAV=ex2svcFDHDTerminatedAV, ex2msTemporarySubmFailuresPerSec=ex2msTemporarySubmFailuresPerSec, ex2aadcUserSearchesFailPerMinute=ex2aadcUserSearchesFailPerMinute, ex2sifInstance=ex2sifInstance, ex2umsaCalendarItemsHeard=ex2umsaCalendarItemsHeard, ex2FDSOABDownloadTaskQueued=ex2FDSOABDownloadTaskQueued, ex2tbStreamSetLengthPerSec=ex2tbStreamSetLengthPerSec, ex2umfFaxMessages=ex2umfFaxMessages, ex2dbiLogFilesGenerated=ex2dbiLogFilesGenerated, ex2OWATotalUsersLight=ex2OWATotalUsersLight, ex2wmApptmtSaveRecurrencesPerSec=ex2wmApptmtSaveRecurrencesPerSec, ex2im4LSUBFailures=ex2im4LSUBFailures, ex2umsaCalendarLateAttendance=ex2umsaCalendarLateAttendance, ex2umgCallDurationExceeded=ex2umgCallDurationExceeded, ex2siaMsgValidSecPermErrorResult=ex2siaMsgValidSecPermErrorResult, ex2aacOutstandingAsyncSearches=ex2aacOutstandingAsyncSearches)
mibBuilder.exportSymbols("INFORMANT-EXCHANGE-V2", ex2tdsnExpandedDSNs=ex2tdsnExpandedDSNs, ex2tsrBytesReceivedTotal=ex2tsrBytesReceivedTotal, ex2ISCInstance=ex2ISCInstance, ex2umsaDirAccsdBySpokenName=ex2umsaDirAccsdBySpokenName, ex2mbEventHistWatermarksDeletes=ex2mbEventHistWatermarksDeletes, ex2ISExchmemCurrentByteAllocated=ex2ISExchmemCurrentByteAllocated, ex2OWAConversions=ex2OWAConversions, ex2aacCacheExpireTotalConfigData=ex2aacCacheExpireTotalConfigData, ex2DatabaseTableClassesEntry=ex2DatabaseTableClassesEntry, ex2oeEventsCompletionTotal=ex2oeEventsCompletionTotal, ex2ISClientRPCsFailedPerSec=ex2ISClientRPCsFailedPerSec, ex2umpOperationsOverSixSeconds=ex2umpOperationsOverSixSeconds, ex2wmApptmtDataRetrievesTotal=ex2wmApptmtDataRetrievesTotal, ex2ISClientFgRPCsFailedPerSec=ex2ISClientFgRPCsFailedPerSec, ex2asMoveItemsTotal=ex2asMoveItemsTotal, ex2sidAvgLatencyRPCsToGetNotific=ex2sidAvgLatencyRPCsToGetNotific, ex2p3RETRTotal=ex2p3RETRTotal, ex2jaUsersJournaledPerSec=ex2jaUsersJournaledPerSec, ex2UMCalAnsCalDisCalUMAudioHrgls=ex2UMCalAnsCalDisCalUMAudioHrgls, ex2umsaSubscriberAuthentFailure=ex2umsaSubscriberAuthentFailure, ex2aserForeignConnectReqFailRate=ex2aserForeignConnectReqFailRate, ex2WSGetEventsRequests=ex2WSGetEventsRequests, ex2dbiSessionsInUse=ex2dbiSessionsInUse, ex2cfaConnOnIPAllowListProviders=ex2cfaConnOnIPAllowListProviders, ex2tdDumpsterItemCount=ex2tdDumpsterItemCount, ex2tbMailItemCommitImmediatTotal=ex2tbMailItemCommitImmediatTotal, ex2tqActiveMailboxDelivQueLength=ex2tqActiveMailboxDelivQueLength, ex2SecureMailTransportEntry=ex2SecureMailTransportEntry, ex2aacCacheInsertTotalConfigData=ex2aacCacheInsertTotalConfigData, ex2rcAddressLookupsPending=ex2rcAddressLookupsPending, ex2FDSOABEntry=ex2FDSOABEntry, ex2tssAverageBytesPerConnection=ex2tssAverageBytesPerConnection, ex2mbMessagesDelivered=ex2mbMessagesDelivered, ex2ISClientRPCFailAllOtherErrors=ex2ISClientRPCFailAllOtherErrors, ex2p3NOOPRate=ex2p3NOOPRate, ex2WSGetItemRequestsPerSec=ex2WSGetItemRequestsPerSec, ex2asFolderUpdateCommandsPerSec=ex2asFolderUpdateCommandsPerSec, ex2OledbEventsTable=ex2OledbEventsTable, ex2im4SubscribeTotal=ex2im4SubscribeTotal, ex2tqItemsQuedForDelivPerSecond=ex2tqItemsQuedForDelivPerSecond, ex2esjInstance=ex2esjInstance, ex2SANSPIPFailedWritesPerSec=ex2SANSPIPFailedWritesPerSec, ex2WSResolveNamesRequestsPerSec=ex2WSResolveNamesRequestsPerSec, ex2aadcNetlogonFlag=ex2aadcNetlogonFlag, ex2dbLogThreadsWaiting=ex2dbLogThreadsWaiting, ex2ExtensibilityAgentsEntry=ex2ExtensibilityAgentsEntry, ex2aacCacheInsertsPerSecUserData=ex2aacCacheInsertsPerSecUserData, ex2aapCriticlValidFailuresPerMin=ex2aapCriticlValidFailuresPerMin, ex2troRoutingTablesChangedTotal=ex2troRoutingTablesChangedTotal, ex2im4NOOPFailures=ex2im4NOOPFailures, ex2treUnresolvedOrgRecipients=ex2treUnresolvedOrgRecipients, ex2umaaDisallowedTransfers=ex2umaaDisallowedTransfers, ex2aPercentageFailEventDispatchr=ex2aPercentageFailEventDispatchr, ex2ADAccessProcessesTable=ex2ADAccessProcessesTable, ex2RecipientFilterAgent=ex2RecipientFilterAgent, ex2umsaAvgSentVoiceMessageSize=ex2umsaAvgSentVoiceMessageSize, ex2ISRPCAveragedLatency=ex2ISRPCAveragedLatency, ex2asProxyLogonReceivedTotal=ex2asProxyLogonReceivedTotal, ex2ispEventHistoryReadsPerSec=ex2ispEventHistoryReadsPerSec, ex2svcFDMTLaunched=ex2svcFDMTLaunched, ex2aacNotFoundDNEntriesUserData=ex2aacNotFoundDNEntriesUserData, ex2asDeleteCollectionCommandsSec=ex2asDeleteCollectionCommandsSec, ex2ispMessagesDeliveredPerSec=ex2ispMessagesDeliveredPerSec, ex2ISClientBackgroundRPCsSucceed=ex2ISClientBackgroundRPCsSucceed, ex2tpkInstance=ex2tpkInstance, ex2wmFolderGetViewPerSec=ex2wmFolderGetViewPerSec, ex2ISACLUpgradeTimesAttempted=ex2ISACLUpgradeTimesAttempted, ex2umaaAverageCallTime=ex2umaaAverageCallTime, ex2aserIntraSiteCalendarQuerySec=ex2aserIntraSiteCalendarQuerySec, ex2svcFDMTCBEmpty=ex2svcFDMTCBEmpty, ex2im4LoginRate=ex2im4LoginRate, ex2p3STATRate=ex2p3STATRate, ex2sdInboundTotalMeetingFailures=ex2sdInboundTotalMeetingFailures, ex2umsaDirAccsdByDialByName=ex2umsaDirAccsdByDialByName, ex2SearchIndicesTable=ex2SearchIndicesTable, ex2sifConnCacheActiveConns=ex2sifConnCacheActiveConns, ex2aacCacheInsertSecConfigurData=ex2aacCacheInsertSecConfigurData, ex2esjSourceObjectsScannedPerSec=ex2esjSourceObjectsScannedPerSec, ex2WSItemsSentPerSec=ex2WSItemsSentPerSec, ex2ISActiveConnectionCount=ex2ISActiveConnectionCount, ex2InformationStore=ex2InformationStore, ex2WSSendItemRequestsPerSec=ex2WSSendItemRequestsPerSec, ex2OWALogonsPerSecLight=ex2OWALogonsPerSecLight, ex2catRequestReset=ex2catRequestReset, ex2OWAMailViewsLoaded=ex2OWAMailViewsLoaded, ex2ctfaMsgIncOtlkEMailPMNotValid=ex2ctfaMsgIncOtlkEMailPMNotValid, ex2sifExRpcConnCreationEvents=ex2sifExRpcConnCreationEvents, ex2WSFindFolderRequestsPerSec=ex2WSFindFolderRequestsPerSec, ex2sidNumberOfRetries=ex2sidNumberOfRetries, ex2TransportRulesEntry=ex2TransportRulesEntry, ex2umfAverageRecentFaxMessageSiz=ex2umfAverageRecentFaxMessageSiz, ex2im4CopyRate=ex2im4CopyRate, ex2umgCurrUnauthentPilotNumCall=ex2umgCurrUnauthentPilotNumCall, ex2ISRecurringMasterExpansionRat=ex2ISRecurringMasterExpansionRat, ex2tbMailItemLoadPerSec=ex2tbMailItemLoadPerSec, ex2FDWordBreakers=ex2FDWordBreakers, ex2asSyncCommandsDroppedPerSec=ex2asSyncCommandsDroppedPerSec, ex2sidNumRecentMoveMailboxCrawl=ex2sidNumRecentMoveMailboxCrawl, ex2ISCDirAccCacheEntryAddPerSec=ex2ISCDirAccCacheEntryAddPerSec, ex2im4CopyTotal=ex2im4CopyTotal, ex2ISClientRPCsSucceeded=ex2ISClientRPCsSucceeded, ex2siaMessagesWithNoPRA=ex2siaMessagesWithNoPRA, ex2asWrongCASProxyRequestsTotal=ex2asWrongCASProxyRequestsTotal, ex2ALEntry=ex2ALEntry, ex2sdInboundNumDeliveringThreads=ex2sdInboundNumDeliveringThreads, ex2dbLogWritesPerSec=ex2dbLogWritesPerSec, ex2asMeetingResponseTotal=ex2asMeetingResponseTotal, ex2p3UIDLFailures=ex2p3UIDLFailures, ex2dbiIOLogReadsPerSec=ex2dbiIOLogReadsPerSec, ex2aapTopologyVersion=ex2aapTopologyVersion, ex2OWASpellingChecks=ex2OWASpellingChecks, ex2ISFBPublishRate=ex2ISFBPublishRate, ex2UMAutoAttendantEntry=ex2UMAutoAttendantEntry, ex2wmAuthenticationsTotal=ex2wmAuthenticationsTotal, ex2p3PASSRate=ex2p3PASSRate, ex2rInspectorGenerationNumber=ex2rInspectorGenerationNumber, ex2dbiTableOpenCacheHitsPerSec=ex2dbiTableOpenCacheHitsPerSec, ex2OWATotalUniqueUsers=ex2OWATotalUniqueUsers, ex2umsaDirAccsdSuccessDialName=ex2umsaDirAccsdSuccessDialName, ex2ISRecurringApptmtDeletionRate=ex2ISRecurringApptmtDeletionRate, ex2WSCreateAttachRequestsPerSec=ex2WSCreateAttachRequestsPerSec, ex2umgCurrentSubscriberAccesCall=ex2umgCurrentSubscriberAccesCall, ex2ctfaMessageThatBypassScanning=ex2ctfaMessageThatBypassScanning, ex2FDEntry=ex2FDEntry, ex2aacSearchEntriesConfigData=ex2aacSearchEntriesConfigData, ex2mbMessageRecipientDelivPerSec=ex2mbMessageRecipientDelivPerSec, ex2sidNumberOfFailedRetries=ex2sidNumberOfFailedRetries, ex2umsaEmailMessagesHeard=ex2umsaEmailMessagesHeard, ex2im4StoreRate=ex2im4StoreRate, ex2WSItemsCopied=ex2WSItemsCopied, ex2aAvgMailboxProcessTimeSeconds=ex2aAvgMailboxProcessTimeSeconds, ex2sidNumPlainTextMessageBodies=ex2sidNumPlainTextMessageBodies, ex2adErrorResponses=ex2adErrorResponses, ex2WSItemsCreated=ex2WSItemsCreated, ex2tbDataRowLoadsTotal=ex2tbDataRowLoadsTotal, ex2ISSingleApptmtDeletionRate=ex2ISSingleApptmtDeletionRate, ex2WSCopyItemRequests=ex2WSCopyItemRequests, ex2mfaItemsJournaled=ex2mfaItemsJournaled, ex2WSGetItemRequests=ex2WSGetItemRequests, ex2dbIODatabaseReadsPerSec=ex2dbIODatabaseReadsPerSec, ex2WSProxyAverageResponseTime=ex2WSProxyAverageResponseTime, ex2aadcLDAPSearchTime=ex2aadcLDAPSearchTime, ex2OWAUNCResponseBytesPerSec=ex2OWAUNCResponseBytesPerSec, ex2asGetAttachmentCommandsPerSec=ex2asGetAttachmentCommandsPerSec, ex2im4RenameFailures=ex2im4RenameFailures, ex2aapLDAPPagesPerSec=ex2aapLDAPPagesPerSec, ex2OWAWSSResponseBytesPerSec=ex2OWAWSSResponseBytesPerSec, ex2tbColumnCacheLoadedColumnsSec=ex2tbColumnCacheLoadedColumnsSec, ex2CalendarAttendant=ex2CalendarAttendant, ex2WSTotalNumberOfProxyFailover=ex2WSTotalNumberOfProxyFailover, ex2mbFolderOpensPerSec=ex2mbFolderOpensPerSec, ex2p3CAPARate=ex2p3CAPARate, ex2OWAMailViewRefreshes=ex2OWAMailViewRefreshes, ex2SANSPIPCumulatClientConnCount=ex2SANSPIPCumulatClientConnCount, ex2treMessagesRetried=ex2treMessagesRetried, ex2aadcBindFailuresPerMinute=ex2aadcBindFailuresPerMinute, ex2cfaMsgOrigIPIPBlockListPrvSec=ex2cfaMsgOrigIPIPBlockListPrvSec, ex2umsaLaunchedCalls=ex2umsaLaunchedCalls, ex2ReplicaSeederEntry=ex2ReplicaSeederEntry, ex2umaaDisconnectedWithoutInput=ex2umaaDisconnectedWithoutInput, ex2ISClientLatencyGT2SecRPCs=ex2ISClientLatencyGT2SecRPCs, ex2WSCreateFolderRequests=ex2WSCreateFolderRequests, ex2umaaOperTransReqByUser=ex2umaaOperTransReqByUser, ex2tqItemsCompletedDeliveryTotal=ex2tqItemsCompletedDeliveryTotal, ex2ISDLMembershipCacheSize=ex2ISDLMembershipCacheSize, ex2svcFDSTTerminatedTimeOut=ex2svcFDSTTerminatedTimeOut, ex2aacTotalEntriesUserData=ex2aacTotalEntriesUserData, ex2wmNavigationOptionsSavePerSec=ex2wmNavigationOptionsSavePerSec, ex2sidInstance=ex2sidInstance, ex2aadcLDAPPagesPerSec=ex2aadcLDAPPagesPerSec, ex2ISACLUpgradePartialUpgrades=ex2ISACLUpgradePartialUpgrades, ex2tbColumCacheSaveTotal=ex2tbColumCacheSaveTotal, ex2ispMessagesSent=ex2ispMessagesSent, ex2im4AuthenticateTotal=ex2im4AuthenticateTotal, ex2wmNewItemURLPerSec=ex2wmNewItemURLPerSec, ex2aadcLongRunningLDAPOperPerMin=ex2aadcLongRunningLDAPOperPerMin, ex2aapLongRunningLDAPOperaPerMin=ex2aapLongRunningLDAPOperaPerMin, ex2svcCBsGiven=ex2svcCBsGiven, ex2ispHTTPPerDAVNotifyReqPerSec=ex2ispHTTPPerDAVNotifyReqPerSec, ex2cfaMsgOrigIPIPAllowListSec=ex2cfaMsgOrigIPIPAllowListSec, ex2rCopyGenerationNumber=ex2rCopyGenerationNumber, ex2WSCreateManageFoldReqstPerSec=ex2WSCreateManageFoldReqstPerSec, ex2SenderFilterAgent=ex2SenderFilterAgent, ex2EdgeSyncJobEntry=ex2EdgeSyncJobEntry, ex2umaSpokenNameAccessed=ex2umaSpokenNameAccessed, ex2SANSPIPClientReferralsPerSec=ex2SANSPIPClientReferralsPerSec, ex2im4ExamineTotal=ex2im4ExamineTotal, ex2cfaConnOnIPAllowListProvidSec=ex2cfaConnOnIPAllowListProvidSec, ex2tbpBatchesPendingTotal=ex2tbpBatchesPendingTotal, ex2im4CloseRate=ex2im4CloseRate, ex2wmAppointmentUpdatesTotal=ex2wmAppointmentUpdatesTotal, ex2p3UIDLTotal=ex2p3UIDLTotal, ex2esjScanJobFailDirctErrorTotal=ex2esjScanJobFailDirctErrorTotal, ex2WSFoldersUpdatedPerSec=ex2WSFoldersUpdatedPerSec, ex2tpInstance=ex2tpInstance, ex2SANSPIProxy=ex2SANSPIProxy, ex2aapProcessID=ex2aapProcessID, ex2p3USERFailures=ex2p3USERFailures, ex2SANSPIPTotalFailedWrites=ex2SANSPIPTotalFailedWrites, ex2SANSPIPFailedClientConnPerSec=ex2SANSPIPFailedClientConnPerSec, ex2catBatchesCompleteWPerWarning=ex2catBatchesCompleteWPerWarning, ex2siaDNSQueries=ex2siaDNSQueries, ex2ActiveSync=ex2ActiveSync, ex2smtDomSecureOutbndSessionFail=ex2smtDomSecureOutbndSessionFail, ex2WSTotalNumberOfBytesProxied=ex2WSTotalNumberOfBytesProxied, ex2caAvgCalendarAttendntProcTime=ex2caAvgCalendarAttendntProcTime, ex2mbMessagesQueuedForSubmission=ex2mbMessagesQueuedForSubmission, ex2asFolderCreateTotal=ex2asFolderCreateTotal, ex2umsaVoiceMessagesSent=ex2umsaVoiceMessagesSent, ex2WSFoldersRead=ex2WSFoldersRead, ex2ISClientTotalReportedLatency=ex2ISClientTotalReportedLatency, ex2esjEdgeObjectsAddedPerSec=ex2esjEdgeObjectsAddedPerSec, ex2ISMailboxTable=ex2ISMailboxTable, ex2tbColumnCacheSavedBytesPerSec=ex2tbColumnCacheSavedBytesPerSec, ex2tsrTarpittingDelaysAnonymous=ex2tsrTarpittingDelaysAnonymous, ex2FDBatchesCompleted=ex2FDBatchesCompleted, ex2umcacTotalNumPINResetRequests=ex2umcacTotalNumPINResetRequests, ex2mbInstance=ex2mbInstance, ex2asOptionsTotal=ex2asOptionsTotal, ex2dbIODatabaseWriteAvgLatency=ex2dbIODatabaseWriteAvgLatency, ex2im4DeleteTotal=ex2im4DeleteTotal, ex2tqRetryRemoteDelivQueLength=ex2tqRetryRemoteDelivQueLength, ex2umsaAvgRecentSubscribeCallDur=ex2umsaAvgRecentSubscribeCallDur, ex2WSItemsMovedPerSec=ex2WSItemsMovedPerSec, ex2dbInstance=ex2dbInstance, ex2wmMsgPerApptmtDeletesTotal=ex2wmMsgPerApptmtDeletesTotal, ex2p3ConnectionsCurrent=ex2p3ConnectionsCurrent, ex2WSMoveFolderRequestsPerSec=ex2WSMoveFolderRequestsPerSec, ex2umsaSubscriberLogonFailures=ex2umsaSubscriberLogonFailures, ex2svcFDMTUnresponsiveToShutdown=ex2svcFDMTUnresponsiveToShutdown, ex2SearchIndexer=ex2SearchIndexer, ex2mbLogonOperationsPerSec=ex2mbLogonOperationsPerSec, ex2ctfaMessagesWithSCL1=ex2ctfaMessagesWithSCL1, ex2WS=ex2WS, ex2tbColumnCachLoadedBytesPerSec=ex2tbColumnCachLoadedBytesPerSec, ex2cfaConnOnIPBlockListProvidSec=ex2cfaConnOnIPBlockListProvidSec, ex2mbSlowFindRowRate=ex2mbSlowFindRowRate, ex2AssistantsEntry=ex2AssistantsEntry, ex2TransportRulesTable=ex2TransportRulesTable, ex2WSPushNotificationsSucceeded=ex2WSPushNotificationsSucceeded, ex2umaaDirAccsdByExtension=ex2umaaDirAccsdByExtension, ex2aacCacheHitsPerSec=ex2aacCacheHitsPerSec, ex2OWAConversionRequestsKBPerSec=ex2OWAConversionRequestsKBPerSec, ex2aNumberOfEventDispatchers=ex2aNumberOfEventDispatchers, ex2mbHTTPPerDAVCurrentPendNotif=ex2mbHTTPPerDAVCurrentPendNotif, ex2tqRetryMailboxDelivQueLength=ex2tqRetryMailboxDelivQueLength, ex2tbMailItemLoadTotal=ex2tbMailItemLoadTotal, ex2ispEventHistWatermarkDelPrSec=ex2ispEventHistWatermarkDelPrSec, ex2ispReplicFolderChangeReceived=ex2ispReplicFolderChangeReceived, ex2ispReplicFolderChangesSent=ex2ispReplicFolderChangesSent, ex2wmNewItemURLTotal=ex2wmNewItemURLTotal, ex2tqItemsQueuedForDeliveryTotal=ex2tqItemsQueuedForDeliveryTotal, ex2aapLDAPNotificaReceivedPerSec=ex2aapLDAPNotificaReceivedPerSec, ex2aPercentageOfInterestingEvent=ex2aPercentageOfInterestingEvent)
mibBuilder.exportSymbols("INFORMANT-EXCHANGE-V2", ex2umaaMenuOption4Used=ex2umaaMenuOption4Used, ex2ISCRPCPacketsPerSec=ex2ISCRPCPacketsPerSec, ex2im4CreateTotal=ex2im4CreateTotal, ex2WSItemsReadPerSec=ex2WSItemsReadPerSec, ex2svcTotalThesaurus=ex2svcTotalThesaurus, ex2dbDatabasePgFaultStallPerSec=ex2dbDatabasePgFaultStallPerSec, ex2StoreInterfaceTable=ex2StoreInterfaceTable, ex2sidNumDocumentFailDuringIndex=ex2sidNumDocumentFailDuringIndex, ex2sdOutboundSubmittedMailItems=ex2sdOutboundSubmittedMailItems, ex2sidNumOutstandingDocuments=ex2sidNumOutstandingDocuments, ex2FDSOABTable=ex2FDSOABTable, ex2ISVirusScanMsgProcessedPerSec=ex2ISVirusScanMsgProcessedPerSec, ex2dbiLogGeneratnCheckptDepthMax=ex2dbiLogGeneratnCheckptDepthMax, ex2aadcKerberosTicketLifetime=ex2aadcKerberosTicketLifetime, ex2ispEventHistEventTrunMsgClass=ex2ispEventHistEventTrunMsgClass, ex2p3TOPTotal=ex2p3TOPTotal, ex2WSAddDelegateRequests=ex2WSAddDelegateRequests, ex2aadcPDCFlag=ex2aadcPDCFlag, ex2ISClientEntry=ex2ISClientEntry, ex2ConnectionFilteringAgent=ex2ConnectionFilteringAgent, ex2asPingCommandsPerSec=ex2asPingCommandsPerSec, ex2ISClientBgRPCSucceedPerSec=ex2ISClientBgRPCSucceedPerSec, ex2dbSessionsInUse=ex2dbSessionsInUse, ex2mbEventHistWatermarkDelPerSec=ex2mbEventHistWatermarkDelPerSec, ex2p3AUTHTotal=ex2p3AUTHTotal, ex2OWAASQueries=ex2OWAASQueries, ex2apaTotalRecipients=ex2apaTotalRecipients, ex2WSUpdateDelegateRequestPerSec=ex2WSUpdateDelegateRequestPerSec, ex2siaMsgMissngOriginateIPPerSec=ex2siaMsgMissngOriginateIPPerSec, ex2tbpTransactionsCommittedTotal=ex2tbpTransactionsCommittedTotal, ex2ISUserCount=ex2ISUserCount, ex2tbDataRowDeletesTotal=ex2tbDataRowDeletesTotal, ex2wmAuthenticationCacheHitPrSec=ex2wmAuthenticationCacheHitPrSec, ex2FDSUMTable=ex2FDSUMTable, ex2tbExtenedPropertyWritesPerSec=ex2tbExtenedPropertyWritesPerSec, ex2tdsnRelayDSNs=ex2tdsnRelayDSNs, ex2im4SubscribeFailures=ex2im4SubscribeFailures, ex2Imap4Entry=ex2Imap4Entry, ex2tsrConnectionsCurrent=ex2tsrConnectionsCurrent, ex2TransportQueuesTable=ex2TransportQueuesTable, ex2Imap4Table=ex2Imap4Table, ex2im4CapabilityRate=ex2im4CapabilityRate, ex2WSSyncFolderItemsRequests=ex2WSSyncFolderItemsRequests, ex2WSNumbrProxyFailoverPerSecond=ex2WSNumbrProxyFailoverPerSecond, ex2OWAWSSRequests=ex2OWAWSSRequests, ex2dbiTableOpensPerSec=ex2dbiTableOpensPerSec, ex2im4CopyFailures=ex2im4CopyFailures, ex2aNumberEventsProcessPerSecond=ex2aNumberEventsProcessPerSecond, ex2umgOCSUserEventNotifications=ex2umgOCSUserEventNotifications, ex2ispEventHistWatermarkWriteSec=ex2ispEventHistWatermarkWriteSec, ex2wmGetNavBarTotal=ex2wmGetNavBarTotal, ex2tqItemCompletedDelivPerSecond=ex2tqItemCompletedDelivPerSecond, ex2tsrMessagesRefusedForSize=ex2tsrMessagesRefusedForSize, ex2umaaDirectoryAccessed=ex2umaaDirectoryAccessed, ex2p3PASSFailures=ex2p3PASSFailures, ex2im4STARTTLSRate=ex2im4STARTTLSRate, ex2WSCreateManagedFolderRequests=ex2WSCreateManagedFolderRequests, ex2ISActiveUserCount=ex2ISActiveUserCount, ex2catRequestResume=ex2catRequestResume, ex2FDInstance=ex2FDInstance, ex2umaHubTransportAccessComplete=ex2umaHubTransportAccessComplete, ex2aadcLDAPSearchTimedOutPerMin=ex2aadcLDAPSearchTimedOutPerMin, ex2wmViewsOfCalendarsPerSec=ex2wmViewsOfCalendarsPerSec, ex2aadcCriticalDataFlag=ex2aadcCriticalDataFlag, ex2umaaCallsWithSpokenName=ex2umaaCallsWithSpokenName, ex2tbMailItemCommitLazyPerSec=ex2tbMailItemCommitLazyPerSec, ex2UMCallAnsCallAnsingCalls=ex2UMCallAnsCallAnsingCalls, ex2ALInstance=ex2ALInstance, ex2ispReplicFolderTreeMsgReceive=ex2ispReplicFolderTreeMsgReceive, ex2aserAvgTimeProcessFreeBusyReq=ex2aserAvgTimeProcessFreeBusyReq, ex2WSDeleteItemRequestsPerSec=ex2WSDeleteItemRequestsPerSec, ex2im4ListFailures=ex2im4ListFailures, ex2tbMailItemCommitLazyTotal=ex2tbMailItemCommitLazyTotal, ex2dbiTableOpenCachePercentHit=ex2dbiTableOpenCachePercentHit, ex2im4CloseTotal=ex2im4CloseTotal, ex2sidPercentageNotificOptimize=ex2sidPercentageNotificOptimize, ex2ISVirusScanMsgsQuarantined=ex2ISVirusScanMsgsQuarantined, ex2im4ActiveSSLConnections=ex2im4ActiveSSLConnections, ex2asNumEmptyFoldrContentProcSec=ex2asNumEmptyFoldrContentProcSec, ex2sifUNKObjectsTotal=ex2sifUNKObjectsTotal, ex2UMCallAnsFetchGreetingTimeOut=ex2UMCallAnsFetchGreetingTimeOut, ex2orTransactionsAbortedTotal=ex2orTransactionsAbortedTotal, ex2StoreDriverTable=ex2StoreDriverTable, ex2sifRPCSlowReqLatencyAvgMsec=ex2sifRPCSlowReqLatencyAvgMsec, ex2ISApptmtInstanceCreationRate=ex2ISApptmtInstanceCreationRate, ex2OWACalendarViewRefreshed=ex2OWACalendarViewRefreshed, ex2umsaVoiceMessagesDeleted=ex2umsaVoiceMessagesDeleted, ex2tsrInstance=ex2tsrInstance, ex2WSUpdateFolderRequests=ex2WSUpdateFolderRequests, ex2FDTransactionsStarted=ex2FDTransactionsStarted, ex2FDBatchesReceived=ex2FDBatchesReceived, ex2dbPagesConverted=ex2dbPagesConverted, ex2ISSingleAppointmentsModified=ex2ISSingleAppointmentsModified, ex2tbMailItemDeleteLazyPerSec=ex2tbMailItemDeleteLazyPerSec, ex2TransportPickupEntry=ex2TransportPickupEntry, ex2svcFDHDTerminatedTimeOut=ex2svcFDHDTerminatedTimeOut, ex2aAvgQueueSizeEventDispatchers=ex2aAvgQueueSizeEventDispatchers, ex2wmNamesCheckedPerSec=ex2wmNamesCheckedPerSec, ex2umpOperationsOverTwoSeconds=ex2umpOperationsOverTwoSeconds, ex2DatabaseInstancesTable=ex2DatabaseInstancesTable, ex2jaUsersJournaled=ex2jaUsersJournaled, ex2OWAAverageSearchTime=ex2OWAAverageSearchTime, ex2dbTableOpenCacheMissesPerSec=ex2dbTableOpenCacheMissesPerSec, ex2WSExpandDLRequestsPerSec=ex2WSExpandDLRequestsPerSec, ex2aserPublicFolderQueriesSec=ex2aserPublicFolderQueriesSec, ex2p3AUTHRate=ex2p3AUTHRate, ex2ctfaMessagesWithSCL0=ex2ctfaMessagesWithSCL0, ex2wmMsgPerApptmtDeletesPerSec=ex2wmMsgPerApptmtDeletesPerSec, ex2im4InvalidCommands=ex2im4InvalidCommands, ex2ispHTTPPerDAVTotalSubsExpired=ex2ispHTTPPerDAVTotalSubsExpired, ex2aserSuggestionsRequestsSec=ex2aserSuggestionsRequestsSec, ex2OWATotalUsers=ex2OWATotalUsers, ex2ispEventHistoryWrites=ex2ispEventHistoryWrites, ex2dbiLogWritesPerSec=ex2dbiLogWritesPerSec, ex2cfaMsgOrigIPIPBlockListPrv=ex2cfaMsgOrigIPIPBlockListPrv, ex2ContentFilterAgent=ex2ContentFilterAgent, ex2aserForeignConnectorQuerySec=ex2aserForeignConnectorQuerySec, ex2catInstance=ex2catInstance, ex2im4STARTTLSFailures=ex2im4STARTTLSFailures, ex2wmPostsSubmittedPerSec=ex2wmPostsSubmittedPerSec, ex2asRequestsTotal=ex2asRequestsTotal, ex2tbpBatchesExecBackgroundPrSec=ex2tbpBatchesExecBackgroundPrSec, ex2dbtcDatabaseCacheSizeMB=ex2dbtcDatabaseCacheSizeMB, ex2tbDataRowNewInsertsTotal=ex2tbDataRowNewInsertsTotal, ex2im4FetchRate=ex2im4FetchRate, ex2sfaMsgFilteredBySenderFilter=ex2sfaMsgFilteredBySenderFilter, ex2dbiLogFileCurrentGeneration=ex2dbiLogFileCurrentGeneration, ex2asMailboxAttchFetchCommandSec=ex2asMailboxAttchFetchCommandSec, ex2asFolderSyncTotal=ex2asFolderSyncTotal, ex2dbiLogGeneratLossResilient=ex2dbiLogGeneratLossResilient, ex2ISCJETLogRecordsPerSec=ex2ISCJETLogRecordsPerSec, ex2asMailboxSearchesPerSec=ex2asMailboxSearchesPerSec, ex2p3LISTTotal=ex2p3LISTTotal, ex2ispEventHistWatermarksDeletes=ex2ispEventHistWatermarksDeletes, ex2umaaOutOfHoursCalls=ex2umaaOutOfHoursCalls, ex2im4CreateRate=ex2im4CreateRate, ex2tbpBatchesWaitingTotal=ex2tbpBatchesWaitingTotal, ex2umsaContactItemsHeard=ex2umsaContactItemsHeard, ex2TransportDumpster=ex2TransportDumpster, ex2WSCopyFolderRequests=ex2WSCopyFolderRequests, ex2tssAvgMessageBytesPerMessage=ex2tssAvgMessageBytesPerMessage, ex2asDocumentLibrarySearchPerSec=ex2asDocumentLibrarySearchPerSec, ex2im4FetchFailures=ex2im4FetchFailures, ex2wmApptmtResolveFreeBusyPerSec=ex2wmApptmtResolveFreeBusyPerSec, ex2im4ListRate=ex2im4ListRate, ex2tsrAverageBytesPerMessage=ex2tsrAverageBytesPerMessage, ex2tsrAverageRecipientPerMessage=ex2tsrAverageRecipientPerMessage, ex2WSResolveNamesRequests=ex2WSResolveNamesRequests, ex2aEventsPolled=ex2aEventsPolled, ex2mfaItemsDeletedButRecoverable=ex2mfaItemsDeletedButRecoverable, ex2sidAgeLastNotificationProcess=ex2sidAgeLastNotificationProcess, ex2dbiPagesConvertedPerSec=ex2dbiPagesConvertedPerSec, ex2wmApptmtAcceptPerDeclineTotal=ex2wmApptmtAcceptPerDeclineTotal, ex2wmAttachmentsDeletedTotal=ex2wmAttachmentsDeletedTotal, ex2tsrMessageBytesReceivedTotal=ex2tsrMessageBytesReceivedTotal, ex2svcCBsInUse=ex2svcCBsInUse, ex2siaMsgValidFailMalformDomRes=ex2siaMsgValidFailMalformDomRes, ex2p3STLSTotal=ex2p3STLSTotal, ex2WSNumberOfProxyReqstPerSecond=ex2WSNumberOfProxyReqstPerSecond, ex2p3DELERate=ex2p3DELERate, ex2aadcInstance=ex2aadcInstance, ex2ispReplicFolderTreeMsgsSent=ex2ispReplicFolderTreeMsgsSent, ex2p3NOOPTotal=ex2p3NOOPTotal, ex2treInstance=ex2treInstance, ex2wmNewFolderTemplateDataPerSec=ex2wmNewFolderTemplateDataPerSec, ex2ISCDirAccCacheHitsPercent=ex2ISCDirAccCacheHitsPercent, ex2treMessagesChipped=ex2treMessagesChipped, ex2ispEventHistWatermarksCount=ex2ispEventHistWatermarksCount, ex2sdInboundMsgDelvrAttmptSecond=ex2sdInboundMsgDelvrAttmptSecond, ex2treAmbiguousSenders=ex2treAmbiguousSenders, ex2aadcGCCapableFlag=ex2aadcGCCapableFlag, ex2asSmartForwardCommandsPerSec=ex2asSmartForwardCommandsPerSec, ex2dbtcInstance=ex2dbtcInstance, ex2ISExchmemMaximumByteAllocated=ex2ISExchmemMaximumByteAllocated, ex2wmFolderRenamesTotal=ex2wmFolderRenamesTotal, ex2catStateResultCode=ex2catStateResultCode, ex2aacDNEntriesMemoryConfigData=ex2aacDNEntriesMemoryConfigData, ex2tbLazyByteLoadPerformedPerSec=ex2tbLazyByteLoadPerformedPerSec, ex2svcFDHDCBEmpty=ex2svcFDHDCBEmpty, ex2im4AppendRate=ex2im4AppendRate, ex2p3AvgComndProcessTimeMillisec=ex2p3AvgComndProcessTimeMillisec, ex2p3LISTFailures=ex2p3LISTFailures, ex2WSConvertIdRequests=ex2WSConvertIdRequests, ex2ISClientRPCFailServerTooBusy=ex2ISClientRPCFailServerTooBusy, ex2sidNumMailboxesLeftToCrawl=ex2sidNumMailboxesLeftToCrawl, ex2umgTotalCalls=ex2umgTotalCalls, ex2aserAvgTimProCrsSiteFreBsyReq=ex2aserAvgTimProCrsSiteFreBsyReq, ex2aadcLDAPDisconnectsPerMinute=ex2aadcLDAPDisconnectsPerMinute, ex2im4FetchTotal=ex2im4FetchTotal, ex2umaaMenuOptionTimedOut=ex2umaaMenuOptionTimedOut, ex2OWAConversionsEndedByTimeOut=ex2OWAConversionsEndedByTimeOut, ex2p3QUITTotal=ex2p3QUITTotal, ex2tbpBatchesPendingPerSec=ex2tbpBatchesPendingPerSec, ex2sifUNKLogons=ex2sifUNKLogons, ex2OWAPeakUserCount=ex2OWAPeakUserCount, ex2tbExtenedPropertyReadsTotal=ex2tbExtenedPropertyReadsTotal, ex2sidNumberOfHTMLMessageBodies=ex2sidNumberOfHTMLMessageBodies, ex2ispHTTPPerDAVCurrentSubscript=ex2ispHTTPPerDAVCurrentSubscript, ex2tsrTarpittngDelayAuthenticate=ex2tsrTarpittngDelayAuthenticate, ex2asSearchTotal=ex2asSearchTotal, ex2OWARequestsPerSec=ex2OWARequestsPerSec, ex2WSRemoveDelegateRequests=ex2WSRemoveDelegateRequests, ex2tbStreamBytesWrittenPerSec=ex2tbStreamBytesWrittenPerSec, ex2ISCJETLogRecordBytesPerSec=ex2ISCJETLogRecordBytesPerSec, ex2sidRecentAvgLatencyRPCUseObta=ex2sidRecentAvgLatencyRPCUseObta, ex2ProtocolAnalysisBackgndAgent=ex2ProtocolAnalysisBackgndAgent, ex2paaCalculationsAtSRL6=ex2paaCalculationsAtSRL6, ex2tbDataRowLoadsPerSec=ex2tbDataRowLoadsPerSec, ex2dbTableOpenCacheHitsPerSec=ex2dbTableOpenCacheHitsPerSec, ex2OWALogonsPerSec=ex2OWALogonsPerSec, ex2orActiveRowsets=ex2orActiveRowsets, ex2FDSUMInstance=ex2FDSUMInstance, ex2sifRPCSlowRequests=ex2sifRPCSlowRequests, ex2sfaMsgEvaluatSendFilterPerSec=ex2sfaMsgEvaluatSendFilterPerSec, ex2WSDeleteFolderRequestsPerSec=ex2WSDeleteFolderRequestsPerSec, ex2WSFoldersCopied=ex2WSFoldersCopied, ex2wmInstance=ex2wmInstance, ex2im4UnsubscribeFailures=ex2im4UnsubscribeFailures, ex2umaaInstance=ex2umaaInstance, ex2wmMessageSendsTotal=ex2wmMessageSendsTotal, ex2p3STLSRate=ex2p3STLSRate, ex2UMAvailability=ex2UMAvailability, ex2OWARequests=ex2OWARequests, ex2aacNotFndGUIDEntriesUserData=ex2aacNotFndGUIDEntriesUserData, ex2ctfaMessagesWithSCL9=ex2ctfaMessagesWithSCL9, ex2troRoutingNDRsTotal=ex2troRoutingNDRsTotal, ex2ispEventHistWatermarksReads=ex2ispEventHistWatermarksReads, ex2ISClientRPCFailServerUnavail=ex2ISClientRPCFailServerUnavail, ex2wmMessageMovesPerCopyPerSec=ex2wmMessageMovesPerCopyPerSec, ex2ISClientLatencyGT5SecRPCs=ex2ISClientLatencyGT5SecRPCs, ex2paaCalculationsAtSRL1=ex2paaCalculationsAtSRL1, ex2WSDeleteAttachmentReqstPerSec=ex2WSDeleteAttachmentReqstPerSec, ex2ISClientRPCsSucceededPerSec=ex2ISClientRPCsSucceededPerSec, ex2wmMessageSavesPerSec=ex2wmMessageSavesPerSec, ex2wmFolderCreatesPerSec=ex2wmFolderCreatesPerSec, ex2OWAProxyUserRequests=ex2OWAProxyUserRequests, ex2im4CapabilityTotal=ex2im4CapabilityTotal, ex2aapLDAPSearchCallsPerSec=ex2aapLDAPSearchCallsPerSec, ex2asSyncTotal=ex2asSyncTotal, ex2im4LogoutTotal=ex2im4LogoutTotal, ex2WSIdsConvertedPerSec=ex2WSIdsConvertedPerSec, ex2EdgeSyncTopology=ex2EdgeSyncTopology, ex2ISACLUpgradeFailures=ex2ISACLUpgradeFailures, ex2aacTotalEntriesMemoryUserData=ex2aacTotalEntriesMemoryUserData, ex2dbiIODatabaseRdAvgLatency=ex2dbiIODatabaseRdAvgLatency, ex2sAverageBatchLatency=ex2sAverageBatchLatency, ex2paaSendersBlockedOfRemoteSRL=ex2paaSendersBlockedOfRemoteSRL, ex2asCurrentRequests=ex2asCurrentRequests, ex2tssMessagesSentPerSec=ex2tssMessagesSentPerSec, ex2aPollingDelay=ex2aPollingDelay, ex2tbMailItemDehydratePerSec=ex2tbMailItemDehydratePerSec, ex2ISCRPCAverageLatency=ex2ISCRPCAverageLatency, ex2orTransactionsStartedRate=ex2orTransactionsStartedRate, ex2asGetHierarchyTotal=ex2asGetHierarchyTotal)
mibBuilder.exportSymbols("INFORMANT-EXCHANGE-V2", ex2sidNumMoveNotificationsPerSec=ex2sidNumMoveNotificationsPerSec, ex2aadcLDAPConnectionLifetime=ex2aadcLDAPConnectionLifetime, ex2apaPermanentFailLicenseRqsts=ex2apaPermanentFailLicenseRqsts, ex2sdInboundSucceededRecipients=ex2sdInboundSucceededRecipients, ex2p3USERRate=ex2p3USERRate, ex2TransportBatchPointEntry=ex2TransportBatchPointEntry, ex2catBatchesAborted=ex2catBatchesAborted, ex2sifExRpcConnectionOutstanding=ex2sifExRpcConnectionOutstanding, ex2ISPushNotificationsCacheSize=ex2ISPushNotificationsCacheSize, ex2asHeartbeatInterval=ex2asHeartbeatInterval, ex2ISCJETPagesPrereadPerSec=ex2ISCJETPagesPrereadPerSec, ex2dbiLogFilesGeneratedPremature=ex2dbiLogFilesGeneratedPremature, ex2aapLDAPVLVRequestsPerSec=ex2aapLDAPVLVRequestsPerSec, ex2OWAAverageCheckSpellingTime=ex2OWAAverageCheckSpellingTime, ex2svcCatalogsMonitored=ex2svcCatalogsMonitored, ex2tqMessagesSubmittedTotal=ex2tqMessagesSubmittedTotal, ex2ispEventHistUncommitTranCount=ex2ispEventHistUncommitTranCount, ex2MailSubmissionTable=ex2MailSubmissionTable, ex2trMessagesProcessedPerSec=ex2trMessagesProcessedPerSec, ex2p3CAPAFailures=ex2p3CAPAFailures, ex2tbStreamBytesWrittenTotal=ex2tbStreamBytesWrittenTotal, ex2dbIOLogWritesPerSec=ex2dbIOLogWritesPerSec, ex2sidNumberOfMoveNotifications=ex2sidNumberOfMoveNotifications, ex2rbRequestsSubmitted=ex2rbRequestsSubmitted, ex2tsrDisconnectionsByAgents=ex2tsrDisconnectionsByAgents, ex2rbAvgResourceBookProcessTime=ex2rbAvgResourceBookProcessTime, ex2asGetAttachmentTotal=ex2asGetAttachmentTotal, ex2cfaConnectionsOnIPAllowList=ex2cfaConnectionsOnIPAllowList, ex2dbIODatabaseReadsAvgLatency=ex2dbIODatabaseReadsAvgLatency, ex2ISActiveAnonymousUserCount=ex2ISActiveAnonymousUserCount, ex2umaIncompSignalingInformation=ex2umaIncompSignalingInformation, ex2p3Instance=ex2p3Instance, ex2tbExtendPropertyByteReadTotal=ex2tbExtendPropertyByteReadTotal, ex2esjEdgeObjectsDeletedTotal=ex2esjEdgeObjectsDeletedTotal, ex2aacInstance=ex2aacInstance, ex2tbpBatchSizeExecutedTotal=ex2tbpBatchSizeExecutedTotal, ex2tbMailItemDeleteLazyTotal=ex2tbMailItemDeleteLazyTotal, ex2im4NOOPTotal=ex2im4NOOPTotal, ex2sdInboundTotalMeetingMessages=ex2sdInboundTotalMeetingMessages, ex2svcIndexPerfLevel=ex2svcIndexPerfLevel, ex2svcFDHDTerminatedPipe=ex2svcFDHDTerminatedPipe, ex2ISVMTotalFreeBlocks=ex2ISVMTotalFreeBlocks, ex2WSItemsCopiedPerSec=ex2WSItemsCopiedPerSec, ex2tdsnInstance=ex2tdsnInstance, ex2sidNumberOfSuccessfulRetries=ex2sidNumberOfSuccessfulRetries, ex2mbVirusScanExtRsltsNotPresent=ex2mbVirusScanExtRsltsNotPresent, ex2caMeetingResponses=ex2caMeetingResponses, ex2im4InvalidCommandsRate=ex2im4InvalidCommandsRate, ex2tdDumpsterSize=ex2tdDumpsterSize, ex2tsrAverageMessagePerConnectin=ex2tsrAverageMessagePerConnectin, ex2catTransModifies=ex2catTransModifies, ex2WSItemsCreatedPerSec=ex2WSItemsCreatedPerSec, ex2mbEventHistoryDeletes=ex2mbEventHistoryDeletes, ex2OWACurrentUsers=ex2OWACurrentUsers, ex2ALLDAPResultsPerSec=ex2ALLDAPResultsPerSec, ex2wmFolderGetContentsPerSec=ex2wmFolderGetContentsPerSec, ex2tdsnDelayDSNs=ex2tdsnDelayDSNs, ex2sidDocumentIndexingRate=ex2sidDocumentIndexingRate, ex2dbiIODatabaseWritesPerSec=ex2dbiIODatabaseWritesPerSec, ex2eaTotalAgentInvocations=ex2eaTotalAgentInvocations, ex2svcFDMTTerminatedTimeOut=ex2svcFDMTTerminatedTimeOut, ex2tqSubmissionQueueLength=ex2tqSubmissionQueueLength, ex2cfaMsgOrigIPIPAllowListPrv=ex2cfaMsgOrigIPIPAllowListPrv, ex2ISPublicEntry=ex2ISPublicEntry, ex2im4ExpungeFailures=ex2im4ExpungeFailures, ex2WSTotalNumberOfIdsConverted=ex2WSTotalNumberOfIdsConverted, ex2paaCalculationsAtSRL0=ex2paaCalculationsAtSRL0, ex2umpOperationsUnderTwoSeconds=ex2umpOperationsUnderTwoSeconds, ex2asMailboxAttachmentFetchTotal=ex2asMailboxAttachmentFetchTotal, ex2tbpInstance=ex2tbpInstance, ex2aacDNEntriesUserData=ex2aacDNEntriesUserData, ex2sdInboundRecipientsDelivered=ex2sdInboundRecipientsDelivered, ex2tbColumCacheLoadPerSec=ex2tbColumCacheLoadPerSec, ex2tbMailItemNewTotal=ex2tbMailItemNewTotal, ex2mbHTTPPerDAVTotalSubscCreated=ex2mbHTTPPerDAVTotalSubscCreated, ex2aapLDAPNotFndConfigRdCallSec=ex2aapLDAPNotFndConfigRdCallSec, ex2ispEventHistoryEventsCount=ex2ispEventHistoryEventsCount, ex2siaMsgValidTempErrorResult=ex2siaMsgValidTempErrorResult, ex2mbRestrictedViewCacheMissRate=ex2mbRestrictedViewCacheMissRate, ex2tqMessagesSubmittedPerSecond=ex2tqMessagesSubmittedPerSecond, ex2ISACLUpgrdHitACLUpgrdRtryList=ex2ISACLUpgrdHitACLUpgrdRtryList, ex2tssConnectionsCurrent=ex2tssConnectionsCurrent, ex2umaaMenuOption1Used=ex2umaaMenuOption1Used, ex2asRequestsQueued=ex2asRequestsQueued, ex2sifRPCLatencyAverageMsec=ex2sifRPCLatencyAverageMsec, ex2umcacTotalNumPlayPhoneRequest=ex2umcacTotalNumPlayPhoneRequest, ex2ispEventHistoryDeletesPerSec=ex2ispEventHistoryDeletesPerSec, ex2tsrRecipientsAcceptedTotal=ex2tsrRecipientsAcceptedTotal, ex2aapLDAPWriteCallsPerSec=ex2aapLDAPWriteCallsPerSec, ex2wmGetAppFrameTotal=ex2wmGetAppFrameTotal, ex2ispHTTPPerDAVTotalLockCreated=ex2ispHTTPPerDAVTotalLockCreated, ex2tqItemsDeletedByAdminTotal=ex2tqItemsDeletedByAdminTotal, ex2TransportPickupTable=ex2TransportPickupTable, ex2ispMessagesSubmitted=ex2ispMessagesSubmitted, ex2UMCallAnsCallAnsingVoiceMsgs=ex2UMCallAnsCallAnsingVoiceMsgs, ex2svcFDSTLaunched=ex2svcFDSTLaunched, ex2OWATotalUniqueUsersPremium=ex2OWATotalUniqueUsersPremium, ex2p3UIDLRate=ex2p3UIDLRate, ex2tbpBatcheExecutedNormalPerSec=ex2tbpBatcheExecutedNormalPerSec, ex2WSDeleteAttachmentRequests=ex2WSDeleteAttachmentRequests, ex2im4Instance=ex2im4Instance, ex2UMCallAnsAvgGreetingSize=ex2UMCallAnsAvgGreetingSize, ex2WSUpdateItemRequestsPerSec=ex2WSUpdateItemRequestsPerSec, ex2sifRPCBytesSentAverage=ex2sifRPCBytesSentAverage, ex2ISExchmemNumberOfHeaps=ex2ISExchmemNumberOfHeaps, ex2rcBatchedAddressLookups=ex2rcBatchedAddressLookups, ex2ISVirusScanMsgQuarantinPerSec=ex2ISVirusScanMsgQuarantinPerSec, ex2umsaVoiceMessageQueueAccessed=ex2umsaVoiceMessageQueueAccessed, ex2siAverageBatchSize=ex2siAverageBatchSize, ex2dbiTableOpenCacheMissesPerSec=ex2dbiTableOpenCacheMissesPerSec, ex2ISCRPCBytesSentPerSec=ex2ISCRPCBytesSentPerSec, ex2mbTotalSizeOfRecoverableItems=ex2mbTotalSizeOfRecoverableItems, ex2CatalogsEntry=ex2CatalogsEntry, ex2FDBatchesRejected=ex2FDBatchesRejected, ex2ManagedFolderAssistant=ex2ManagedFolderAssistant, ex2svcFDSTActive=ex2svcFDSTActive, ex2ispEventHistEventCacheHitPerc=ex2ispEventHistEventCacheHitPerc, ex2mbEventHistEventCacheHitsPerc=ex2mbEventHistEventCacheHitsPerc, ex2UMCallAnsAvgVoiceMsgSize=ex2UMCallAnsAvgVoiceMsgSize, ex2aacNotFndGUIDEntryMemConfigDa=ex2aacNotFndGUIDEntryMemConfigDa, ex2JournalingAgent=ex2JournalingAgent, ex2siaMsgValidWithANeutralResult=ex2siaMsgValidWithANeutralResult, ex2im4AppendFailures=ex2im4AppendFailures, ex2asFolderSyncCommandsPerSec=ex2asFolderSyncCommandsPerSec, ex2mbHTTPPerDAVTotalLocksCreated=ex2mbHTTPPerDAVTotalLocksCreated, ex2OWACurrentUniqueUsersPremium=ex2OWACurrentUniqueUsersPremium, ex2p3TOPRate=ex2p3TOPRate, ex2aagcDNSQueryDurationTime=ex2aagcDNSQueryDurationTime, ex2ISVMTotalLargeFreeBlockBytes=ex2ISVMTotalLargeFreeBlockBytes, ex2aagcTopologyDiscoveryDuraTime=ex2aagcTopologyDiscoveryDuraTime, ex2ISVirusScanMsgsDeletedPerSec=ex2ISVirusScanMsgsDeletedPerSec, ex2apaAvgProcessTimeLicenseRqst=ex2apaAvgProcessTimeLicenseRqst, ex2UMCallAnsCallAnsingEscapes=ex2UMCallAnsCallAnsingEscapes, ex2wmAppointmentSavesPerSec=ex2wmAppointmentSavesPerSec, ex2umaTotalWorkerProcesCallCount=ex2umaTotalWorkerProcesCallCount, ex2OWARequestsFailed=ex2OWARequestsFailed, ex2ISCJETPagesRemodifiedPerSec=ex2ISCJETPagesRemodifiedPerSec, ex2tbColumnCacheSavedBytesTotal=ex2tbColumnCacheSavedBytesTotal, ex2adTotalRequests=ex2adTotalRequests, ex2ExtensibilityAgentsTable=ex2ExtensibilityAgentsTable, ex2umsaCalendarItemDetailRequest=ex2umsaCalendarItemDetailRequest, ex2dbiVersionBucketsAllocated=ex2dbiVersionBucketsAllocated, ex2tbDataRowSeeksPrefixPerSec=ex2tbDataRowSeeksPrefixPerSec, ex2treMessagesCreated=ex2treMessagesCreated, ex2svcCBSize=ex2svcCBSize, ex2sidNumDocumentsSuccessIndexed=ex2sidNumDocumentsSuccessIndexed, ex2im4StatusFailures=ex2im4StatusFailures, ex2siaMsgValidPerSecNeutrlResult=ex2siaMsgValidPerSecNeutrlResult, ex2im4LSUBTotal=ex2im4LSUBTotal, ex2catRequestFlushPerDrain=ex2catRequestFlushPerDrain, ex2ispMsgRecipientsDeliverPerSec=ex2ispMsgRecipientsDeliverPerSec, ex2tbStreamReadPerSec=ex2tbStreamReadPerSec, ex2ISOABDifferentialDnldBytes=ex2ISOABDifferentialDnldBytes, ex2FDSUMEntry=ex2FDSUMEntry, ex2asMailboxSearchTotal=ex2asMailboxSearchTotal, ex2wmPostsSubmittedTotal=ex2wmPostsSubmittedTotal, ex2svcBatcheCompletelySuccessful=ex2svcBatcheCompletelySuccessful, ex2oeEventsCompletionRate=ex2oeEventsCompletionRate, ex2treUnresolvedOrgSenders=ex2treUnresolvedOrgSenders, ex2rfaRecpntRejectRecipientValid=ex2rfaRecpntRejectRecipientValid, ex2dbDatabaseCacheSize=ex2dbDatabaseCacheSize, ex2catBatchesReceived=ex2catBatchesReceived, ex2catBatchesFPC=ex2catBatchesFPC, ex2tbMailItemDehydrateTotal=ex2tbMailItemDehydrateTotal, ex2ISFBPublishCount=ex2ISFBPublishCount, ex2tqItemQuedForDelivExpireTotal=ex2tqItemQuedForDelivExpireTotal, ex2aadcOSVersionFlag=ex2aadcOSVersionFlag, ex2ReplicationEntry=ex2ReplicationEntry, ex2wmRecipientsSavedPerSec=ex2wmRecipientsSavedPerSec, ex2asOutgoingProxyRequestsTotal=ex2asOutgoingProxyRequestsTotal, ex2UMCallAnswer=ex2UMCallAnswer, ex2svcFDMTActive=ex2svcFDMTActive, ex2ISRecurApptmtModificationRate=ex2ISRecurApptmtModificationRate, ex2umfFaxCallNonProvisionMailbox=ex2umfFaxCallNonProvisionMailbox, ex2p3CAPATotal=ex2p3CAPATotal, ex2ctfaMessagesWithSCL5=ex2ctfaMessagesWithSCL5, ex2im4NOOPRate=ex2im4NOOPRate, ex2umsaCallDisUMOnIrrecvExtError=ex2umsaCallDisUMOnIrrecvExtError, ex2WSAddDelegateRequestsPerSec=ex2WSAddDelegateRequestsPerSec, ex2im4StatusTotal=ex2im4StatusTotal, ex2asSmartForwardTotal=ex2asSmartForwardTotal, ex2aacNotFndGUIDEntryConfigData=ex2aacNotFndGUIDEntryConfigData, ex2aadcDsGetDcNameElapsedTime=ex2aadcDsGetDcNameElapsedTime, ex2asConflictConcurrentSyncPrSec=ex2asConflictConcurrentSyncPrSec, ex2OWAASQueriesFailurePercent=ex2OWAASQueriesFailurePercent, ex2umsaDirectoryAccessed=ex2umsaDirectoryAccessed, ex2ALLDAPResults=ex2ALLDAPResults, ex2tbStreamWritesPerSec=ex2tbStreamWritesPerSec, ex2ISExchmemCurrVirtByteAllocate=ex2ISExchmemCurrVirtByteAllocate, ex2WSGetDelegateRequestsPerSec=ex2WSGetDelegateRequestsPerSec, ex2ispTotalSizeOfRecoverableItem=ex2ispTotalSizeOfRecoverableItem, ex2TransportSmtpReceiveTable=ex2TransportSmtpReceiveTable, ex2ispRestrictedViewCacheHitRate=ex2ispRestrictedViewCacheHitRate, ex2msHubServers=ex2msHubServers, ex2umaaDirAccsdBySpokenName=ex2umaaDirAccsdBySpokenName, ex2ispAverageDeliveryTime=ex2ispAverageDeliveryTime, ex2tbpTransactionsAbortedPerSec=ex2tbpTransactionsAbortedPerSec, ex2svcQueryPerfLevel=ex2svcQueryPerfLevel, ex2umaQueuedOCSUserEventNotifica=ex2umaQueuedOCSUserEventNotifica, ex2umcacTotalNumFailPlayPhoneReq=ex2umcacTotalNumFailPlayPhoneReq, ex2ISRPCClientsBytesWritten=ex2ISRPCClientsBytesWritten, ex2WSSendItemRequests=ex2WSSendItemRequests, ex2umgCurrentPlayOnPhoneCalls=ex2umgCurrentPlayOnPhoneCalls, ex2rFailed=ex2rFailed, ex2UMSubscriberAccess=ex2UMSubscriberAccess, ex2aacCacheExpiriesTotalUserData=ex2aacCacheExpiriesTotalUserData, ex2trInstance=ex2trInstance, ex2umaaDirAccsdSuccBySpokenName=ex2umaaDirAccsdSuccBySpokenName, ex2svcCBsGarbageCollected=ex2svcCBsGarbageCollected, ex2aEventsPolledPerSec=ex2aEventsPolledPerSec, ex2asIncomingProxyRequestsTotal=ex2asIncomingProxyRequestsTotal, ex2aserAvgTimProCrsFrstFreBsyReq=ex2aserAvgTimProCrsFrstFreBsyReq, ex2p3PASSTotal=ex2p3PASSTotal, ex2orActiveSessions=ex2orActiveSessions, ex2aadcNumberOfOutstandRequests=ex2aadcNumberOfOutstandRequests, ex2ispReplicationMessagesSent=ex2ispReplicationMessagesSent, ex2dbiLogBytesWritePerSec=ex2dbiLogBytesWritePerSec, ex2eaInstance=ex2eaInstance, ex2StoreDriverEntry=ex2StoreDriverEntry, ex2mfaItemsMarkPastRetentionDate=ex2mfaItemsMarkPastRetentionDate, ex2tpkMessagesSubmitted=ex2tpkMessagesSubmitted, ex2aacCacheHitsTotal=ex2aacCacheHitsTotal, ex2umsaDirAccsdSuccessSpokenName=ex2umsaDirAccsdSuccessSpokenName, ex2sidAvgSizeOfIndexedAttachment=ex2sidAvgSizeOfIndexedAttachment, ex2svcBatchesFPC=ex2svcBatchesFPC, ex2mbEventHistoryWatermarksCount=ex2mbEventHistoryWatermarksCount, ex2p3QUITFailures=ex2p3QUITFailures, ex2mbMessagesSubmitted=ex2mbMessagesSubmitted, ex2WSProxyAverageResponseTimNum1=ex2WSProxyAverageResponseTimNum1, ex2sdOutboundSubmtMailItemSecond=ex2sdOutboundSubmtMailItemSecond, ex2trMessagesEvaluated=ex2trMessagesEvaluated, ex2asPingDroppedTotal=ex2asPingDroppedTotal, ex2catRequestForceMerge=ex2catRequestForceMerge, ex2umaaCallsDisconUMIrreExtError=ex2umaaCallsDisconUMIrreExtError, ex2asFolderDeleteCommandsPerSec=ex2asFolderDeleteCommandsPerSec, ex2tbMailItemBeginCommitPerSec=ex2tbMailItemBeginCommitPerSec, ex2aagcInSiteGlobalCatalogs=ex2aagcInSiteGlobalCatalogs, ex2tbMailItemNewPerSec=ex2tbMailItemNewPerSec, ex2oeEventsSubmissionRate=ex2oeEventsSubmissionRate, ex2WSCreateItemRequestsPerSec=ex2WSCreateItemRequestsPerSec, ex2asMeetingResponsCommandPerSec=ex2asMeetingResponsCommandPerSec, ex2umaaCallsWithSpeechInput=ex2umaaCallsWithSpeechInput, ex2ISCJETPagesReferencedPerSec=ex2ISCJETPagesReferencedPerSec, ex2SANSPIPClientConnectionCount=ex2SANSPIPClientConnectionCount, ex2TransportSmtpSendEntry=ex2TransportSmtpSendEntry, ex2orRowsetsOpenedTotal=ex2orRowsetsOpenedTotal, ex2ispReplicReceiveQueueSize=ex2ispReplicReceiveQueueSize, ex2asRecoverySyncTotal=ex2asRecoverySyncTotal, ex2umgAverageCallDuration=ex2umgAverageCallDuration, ex2OWAAverageConversionQueueTime=ex2OWAAverageConversionQueueTime, ex2p3STATTotal=ex2p3STATTotal, ex2FDSUMTotalBytesToDownload=ex2FDSUMTotalBytesToDownload, ex2tsrBytesReceivedPerSec=ex2tsrBytesReceivedPerSec, ex2tbColumCacheLoadTotal=ex2tbColumCacheLoadTotal)
mibBuilder.exportSymbols("INFORMANT-EXCHANGE-V2", ex2svcFDSTUnresponsiveToShutdown=ex2svcFDSTUnresponsiveToShutdown, ex2tbInstance=ex2tbInstance, ex2umgCallsDisconnectUserFailure=ex2umgCallsDisconnectUserFailure, ex2umaaCallsWithSentMessage=ex2umaaCallsWithSentMessage, ex2ISSingleAppointmentsDeleted=ex2ISSingleAppointmentsDeleted, ex2sidAgeLastNotificationIndexed=ex2sidAgeLastNotificationIndexed, ex2OWACurrentUniqueUsersLight=ex2OWACurrentUniqueUsersLight, ex2estHubTransportServersTotal=ex2estHubTransportServersTotal, ex2WSFindItemRequests=ex2WSFindItemRequests, ex2tbMailItemCloneCreatePerSec=ex2tbMailItemCloneCreatePerSec, ex2asMoveCollectionTotal=ex2asMoveCollectionTotal, ex2rSuspended=ex2rSuspended, ex2DatabaseEntry=ex2DatabaseEntry, ex2catTransInProgress=ex2catTransInProgress, ex2ctfaMsgIncOtlkEMailPMValidScs=ex2ctfaMsgIncOtlkEMailPMValidScs, ex2mbEventHistoryWrites=ex2mbEventHistoryWrites, ex2ISVirusScanFilesCleanedPerSec=ex2ISVirusScanFilesCleanedPerSec, ex2svcCBsTotal=ex2svcCBsTotal, ex2aserCrsFrstCalendarFailureSec=ex2aserCrsFrstCalendarFailureSec, ex2umsaContactsAccessed=ex2umsaContactsAccessed, ex2treFailedRecipients=ex2treFailedRecipients, ex2im4ExamineFailures=ex2im4ExamineFailures, ex2mbEventHistWatermarkWritPrSec=ex2mbEventHistWatermarkWritPrSec, ex2aAvgEventQueueTimeInSeconds=ex2aAvgEventQueueTimeInSeconds, ex2tpLatestExchgTopologyDisTime=ex2tpLatestExchgTopologyDisTime, ex2umsaAvgSubscriberCallDuration=ex2umsaAvgSubscriberCallDuration, ex2ispEventHistoryWritesPerSec=ex2ispEventHistoryWritesPerSec, ex2OledbEventsEntry=ex2OledbEventsEntry, ex2SANSPIPPeakClientConnections=ex2SANSPIPPeakClientConnections, ex2FDTransErrors=ex2FDTransErrors, ex2ISSingleApptmtCreationRate=ex2ISSingleApptmtCreationRate, ex2ISClientRPCsAttempted=ex2ISClientRPCsAttempted, ex2ispReplicStatusMsgsReceived=ex2ispReplicStatusMsgsReceived, ex2tbDataRowNewInsertsPerSec=ex2tbDataRowNewInsertsPerSec, ex2aagcOutOfSiteGlobalCatalogs=ex2aagcOutOfSiteGlobalCatalogs, ex2treLoopRecipients=ex2treLoopRecipients, ex2im4StoreTotal=ex2im4StoreTotal, ex2im4ConnectionsFailed=ex2im4ConnectionsFailed, ex2im4DeleteRate=ex2im4DeleteRate, ex2StoreInterfaceEntry=ex2StoreInterfaceEntry, ex2svcBatchesInProgress=ex2svcBatchesInProgress, ex2mbVirusScanExtRsltsAccepted=ex2mbVirusScanExtRsltsAccepted, ex2wmAttachmentsDeletedPerSec=ex2wmAttachmentsDeletedPerSec, ex2tqRetryNonSmtpDelivQueLength=ex2tqRetryNonSmtpDelivQueLength, ex2asSettingsTotal=ex2asSettingsTotal, ex2ispReplicMessageChangeReceive=ex2ispReplicMessageChangeReceive, ex2rcExpandGroupRequests=ex2rcExpandGroupRequests, ex2umsaMeetingsAccepted=ex2umsaMeetingsAccepted, ex2umaWorkerProcessRecycled=ex2umaWorkerProcessRecycled, ex2im4NamespaceRate=ex2im4NamespaceRate, ex2paaSendersBlockedOfLocalSRL=ex2paaSendersBlockedOfLocalSRL, ex2OWAProxyResponseTimeAverage=ex2OWAProxyResponseTimeAverage, ex2tbpTransactionsAbortedTotal=ex2tbpTransactionsAbortedTotal, ex2TransportDSNEntry=ex2TransportDSNEntry, ex2siaMsgValidFailMlfrmDomResSec=ex2siaMsgValidFailMlfrmDomResSec, ex2OWAAttachmentUploadedOWAStart=ex2OWAAttachmentUploadedOWAStart, ex2p3RETRRate=ex2p3RETRRate, ex2ispRestricteViewCacheMissRate=ex2ispRestricteViewCacheMissRate, ex2tqActiveRemoteDelivQueLength=ex2tqActiveRemoteDelivQueLength, ex2asDocuLibraryFetchCommandsSec=ex2asDocuLibraryFetchCommandsSec, ex2tbMailItemMaterializePerSec=ex2tbMailItemMaterializePerSec, ex2tdRedeliveryCount=ex2tdRedeliveryCount, ex2aacNotFndGUIDEntryMemUserData=ex2aacNotFndGUIDEntryMemUserData, ex2svcTotalWordbreakers=ex2svcTotalWordbreakers, ex2orActiveCommands=ex2orActiveCommands, ex2mbMessagesDeliveredPerSec=ex2mbMessagesDeliveredPerSec, ex2siaMsgValidSoftFailResult=ex2siaMsgValidSoftFailResult, ex2asMoveCollectionCommandPerSec=ex2asMoveCollectionCommandPerSec, ex2tbpCursorsOpenedTotal=ex2tbpCursorsOpenedTotal, ex2msSuccessfulSubmissions=ex2msSuccessfulSubmissions, ex2tbpCursorsOpenedPerSec=ex2tbpCursorsOpenedPerSec, ex2ispInstance=ex2ispInstance, ex2aserAvgNumMailboxProcessReqst=ex2aserAvgNumMailboxProcessReqst, ex2tbpBatchesWaitingCurrent=ex2tbpBatchesWaitingCurrent, PYSNMP_MODULE_ID=exchangeV2, ex2ISClientRPCFailOtherErrorSec=ex2ISClientRPCFailOtherErrorSec, ex2sifRPCBytesSent=ex2sifRPCBytesSent, ex2aacCacheExpirePerSecUserData=ex2aacCacheExpirePerSecUserData, ex2oeInstance=ex2oeInstance, ex2WSItemsUpdatedPerSec=ex2WSItemsUpdatedPerSec, ex2catTransDone=ex2catTransDone, ex2tbMailItemWriteMimeToTotal=ex2tbMailItemWriteMimeToTotal, ex2WSTotalNumberProxyResponsByte=ex2WSTotalNumberProxyResponsByte, ex2RecipientCacheTable=ex2RecipientCacheTable, ex2ISAdminRPCRequests=ex2ISAdminRPCRequests, ex2umaaOperatorTransfers=ex2umaaOperatorTransfers, ex2tbDataRowUpdatesTotal=ex2tbDataRowUpdatesTotal, ex2catStateCallerComponent=ex2catStateCallerComponent, ex2ISAsyncRPCRequestsPeak=ex2ISAsyncRPCRequestsPeak, ex2tbpTransactionCommittedPerSec=ex2tbpTransactionCommittedPerSec, ex2ProtocolAnalysisAgent=ex2ProtocolAnalysisAgent, ex2siaMsgThatBypassedValidation=ex2siaMsgThatBypassedValidation, ex2umgTotalPlayOnPhoneCalls=ex2umgTotalPlayOnPhoneCalls, ex2sidNumItemInNotificationQueue=ex2sidNumItemInNotificationQueue, ex2tbMailItemCloneCreateTotal=ex2tbMailItemCloneCreateTotal, ex2p3ActiveSSLConnections=ex2p3ActiveSSLConnections, ex2tdsnDeliveredDSNs=ex2tdsnDeliveredDSNs, ex2dbiIOLogWritesAvgLatency=ex2dbiIOLogWritesAvgLatency, ex2mbEventHistWatermarkReadPrSec=ex2mbEventHistWatermarkReadPrSec, ex2TopologyTable=ex2TopologyTable, ex2p3QUITRate=ex2p3QUITRate, ex2umsaEmailMessagesDeleted=ex2umsaEmailMessagesDeleted, ex2WSMoveItemRequestsPerSec=ex2WSMoveItemRequestsPerSec, ex2catPhaseInReadyQueue=ex2catPhaseInReadyQueue, ex2TransportRoutingTable=ex2TransportRoutingTable, ex2WSPushNotificationsFailed=ex2WSPushNotificationsFailed, ex2ispLogonOperationsPerSec=ex2ispLogonOperationsPerSec, ex2p3RSETRate=ex2p3RSETRate, ex2catBatchesDone=ex2catBatchesDone, ex2sdInboundLocalDelivCallSecond=ex2sdInboundLocalDelivCallSecond, ex2tsrAverageBytesPerConnection=ex2tsrAverageBytesPerConnection, ex2ctfaMessageWithPreexistingSCL=ex2ctfaMessageWithPreexistingSCL, ex2WSFoldersUpdated=ex2WSFoldersUpdated, ex2mbLocalDeliveryRate=ex2mbLocalDeliveryRate, ex2asMailboxItemFetchTotal=ex2asMailboxItemFetchTotal, ex2sdInboundDuplicateDeliveries=ex2sdInboundDuplicateDeliveries, ex2ISSingleApptmtModificationRat=ex2ISSingleApptmtModificationRat, ex2dbSessionsPercentUsed=ex2dbSessionsPercentUsed, ex2ispMsgsQueuedForSubmission=ex2ispMsgsQueuedForSubmission, ex2umaaCallsWithDTMFFallback=ex2umaaCallsWithDTMFFallback, ex2aHighestEventCounterPolled=ex2aHighestEventCounterPolled, ex2catRequestAsyncFlush=ex2catRequestAsyncFlush, ex2tbpBatchesExecutedPerSec=ex2tbpBatchesExecutedPerSec, ex2tbExtenePropertyByteWritTotal=ex2tbExtenePropertyByteWritTotal, ex2ispActiveClientLogons=ex2ispActiveClientLogons, ex2siNumberDatabasesBeingCrawled=ex2siNumberDatabasesBeingCrawled, ex2wmViewsOfMailFoldersPerSec=ex2wmViewsOfMailFoldersPerSec, ex2WSMoveItemRequests=ex2WSMoveItemRequests, ex2WSExpandDLRequests=ex2WSExpandDLRequests, ex2aacDNEntriesConfigurationData=ex2aacDNEntriesConfigurationData, ex2im4UnsubscribeTotal=ex2im4UnsubscribeTotal, ex2ReplicationTable=ex2ReplicationTable, ex2ISExchmemNumAdditionalHeaps=ex2ISExchmemNumAdditionalHeaps, ex2ispVirusScanBackgrndMsgsScan=ex2ispVirusScanBackgrndMsgsScan, ex2siNumberOfDisabledDatabases=ex2siNumberOfDisabledDatabases, ex2aacTotalEntriesConfigData=ex2aacTotalEntriesConfigData, ex2ispHTTPPerDAVCurrentPendNotif=ex2ispHTTPPerDAVCurrentPendNotif, ex2ispVirusScanExtResultAccepted=ex2ispVirusScanExtResultAccepted, ex2ctfaMessagesScanned=ex2ctfaMessagesScanned, ex2tqUnreachableQueueLength=ex2tqUnreachableQueueLength, ex2ISClientRPCFailCallCancelSec=ex2ISClientRPCFailCallCancelSec, ex2umaaTotalCalls=ex2umaaTotalCalls, ex2Pop3Entry=ex2Pop3Entry, ex2WSFoldersMovedPerSec=ex2WSFoldersMovedPerSec, ex2jaJournalingProcessingTime=ex2jaJournalingProcessingTime, ex2tpNumberOfSitelessServers=ex2tpNumberOfSitelessServers, ex2p3ConnectionsTotal=ex2p3ConnectionsTotal, ex2dbLogRecordStallsPerSec=ex2dbLogRecordStallsPerSec, ex2mbHTTPPerDAVCurrentSubscript=ex2mbHTTPPerDAVCurrentSubscript, ex2aacTotalEntriesMemConfigData=ex2aacTotalEntriesMemConfigData, ex2tpkMessagesNDRed=ex2tpkMessagesNDRed, ex2ctfaMessagesScannedPerSecond=ex2ctfaMessagesScannedPerSecond, ex2umsaCalendarAccessed=ex2umsaCalendarAccessed, ex2mbEventHistWatermarksWrites=ex2mbEventHistWatermarksWrites, ex2msFailedSubmissionsPerSecond=ex2msFailedSubmissionsPerSecond, ex2esjTargetObjectsScannedTotal=ex2esjTargetObjectsScannedTotal, ex2asItemOperationsTotal=ex2asItemOperationsTotal, ex2im4CheckTotal=ex2im4CheckTotal, ex2tdDumpsterDeletesPerSec=ex2tdDumpsterDeletesPerSec, ex2asGetHierarchyCommandsPerSec=ex2asGetHierarchyCommandsPerSec, ex2ispVirusScanExtResultNotAccpt=ex2ispVirusScanExtResultNotAccpt, ex2WSFoldersDeleted=ex2WSFoldersDeleted, ex2wmAuthenticationsInCache=ex2wmAuthenticationsInCache, ex2ISVirusScanFilesCleaned=ex2ISVirusScanFilesCleaned, ex2mbEventHistoryDeletesPerSec=ex2mbEventHistoryDeletesPerSec, ex2p3SSLConnections=ex2p3SSLConnections, ex2uaTotalUpdates=ex2uaTotalUpdates, ex2wmAuthenticationCacheHitTotal=ex2wmAuthenticationCacheHitTotal, ex2asGetItemEstimateTotal=ex2asGetItemEstimateTotal, ex2catTransRerouted=ex2catTransRerouted, ex2estJobsSuspendingTotal=ex2estJobsSuspendingTotal, ex2aInstance=ex2aInstance, ex2umaaTransferredCount=ex2umaaTransferredCount, ex2aacDNEntriesMemoryUserData=ex2aacDNEntriesMemoryUserData, ex2tqActiveNonSmtpDelivQueLength=ex2tqActiveNonSmtpDelivQueLength, ex2catPhaseRedundant=ex2catPhaseRedundant, ex2caRequestsFailed=ex2caRequestsFailed, ex2asProvisionCommandsPerSec=ex2asProvisionCommandsPerSec, ex2p3AUTHFailures=ex2p3AUTHFailures, ex2orTransactionsCommittedRate=ex2orTransactionsCommittedRate, ex2ISClientRPCsFailed=ex2ISClientRPCsFailed, ex2mbEventHistoryReadsPerSec=ex2mbEventHistoryReadsPerSec, ex2umfAverageFaxMessageSize=ex2umfAverageFaxMessageSize, ex2wmFolderCreatesTotal=ex2wmFolderCreatesTotal, ex2umfFaxCallDurationExceeded=ex2umfFaxCallDurationExceeded, ex2asSearchCommandsPerSec=ex2asSearchCommandsPerSec, ex2jaJournalProcesTimePerMessage=ex2jaJournalProcesTimePerMessage, ex2OWAUNCRequests=ex2OWAUNCRequests, ex2sdInboundBytesDelivered=ex2sdInboundBytesDelivered, ex2aadcLDAPVLVRequestsPerSec=ex2aadcLDAPVLVRequestsPerSec, ex2rfaRecipientsRejectBlockList=ex2rfaRecipientsRejectBlockList, ex2WSSubscribeRequestsPerSec=ex2WSSubscribeRequestsPerSec, ex2CatalogsTable=ex2CatalogsTable, ex2tqItemsResubmittedTotal=ex2tqItemsResubmittedTotal, ex2rbDeclined=ex2rbDeclined, ex2OWAProxyResponseBytes=ex2OWAProxyResponseBytes, ex2ISAppointmentInstancesDeleted=ex2ISAppointmentInstancesDeleted, ex2ispVirusScanBackgrndMsgUpDate=ex2ispVirusScanBackgrndMsgUpDate, ex2tssAvgRecipientsPerMessage=ex2tssAvgRecipientsPerMessage, ex2ISVirusScanFoldersScannedInBg=ex2ISVirusScanFoldersScannedInBg, ex2mbEventHistEventEmptyMsgClass=ex2mbEventHistEventEmptyMsgClass, ex2tbExtenedPropertyReadsPerSec=ex2tbExtenedPropertyReadsPerSec, ex2ISCIQPThreads=ex2ISCIQPThreads, ex2WSItemsSynchronized=ex2WSItemsSynchronized, ex2asGALSearchTotal=ex2asGALSearchTotal, ex2ispVirusScanBackgrndMsgSkippd=ex2ispVirusScanBackgrndMsgSkippd, ex2tpNumExchangeTopologyDiscover=ex2tpNumExchangeTopologyDiscover, ex2im4ConnectionsRejected=ex2im4ConnectionsRejected, ex2umaNameTTSed=ex2umaNameTTSed, ex2OWANamesChecked=ex2OWANamesChecked, ex2wmGetNavBarPerSec=ex2wmGetNavBarPerSec, ex2msFailedSubmissions=ex2msFailedSubmissions, ex2mbHTTPPerDAVTotalSubscExpired=ex2mbHTTPPerDAVTotalSubscExpired, ex2im4RenameTotal=ex2im4RenameTotal, ex2dbiIODatabaseReadsPerSec=ex2dbiIODatabaseReadsPerSec, ex2tbLazyByteLoadRequestedPerSec=ex2tbLazyByteLoadRequestedPerSec, ex2ISVMLargestBlockSize=ex2ISVMLargestBlockSize, ex2WSFoldersSynchronized=ex2WSFoldersSynchronized, ex2tbColumnCacheSaveColumnPerSec=ex2tbColumnCacheSaveColumnPerSec, ex2asSmartReplyTotal=ex2asSmartReplyTotal, ex2tqMsgsCompletedDelivTotal=ex2tqMsgsCompletedDelivTotal, ex2asSmartReplyCommandsPerSec=ex2asSmartReplyCommandsPerSec, ex2ISClientRPCFailCallCancelled=ex2ISClientRPCFailCallCancelled, ex2umpOperationsOverFiveSeconds=ex2umpOperationsOverFiveSeconds, ex2ISPublicTable=ex2ISPublicTable, ex2FDBatchesInProgress=ex2FDBatchesInProgress, ex2eaAverageAgentProcessTimeSec=ex2eaAverageAgentProcessTimeSec, ex2asBadItemReportGeneratedTotal=ex2asBadItemReportGeneratedTotal, ex2dbIODatabaseWritesPerSec=ex2dbIODatabaseWritesPerSec, ex2ISAdminRPCRequestsPeak=ex2ISAdminRPCRequestsPeak, ex2ISExchmemCurrNumbOfVirtAlloca=ex2ISExchmemCurrNumbOfVirtAlloca, ex2apaTotalLicenseRqstsProcTime=ex2apaTotalLicenseRqstsProcTime, ex2ispEventHistEventTrunConClass=ex2ispEventHistEventTrunConClass, ex2svcFDMTTerminatedOther=ex2svcFDMTTerminatedOther, ex2siaMsgThatBypassValidatePrSec=ex2siaMsgThatBypassValidatePrSec, ex2dbDatabaseCacheSizeMB=ex2dbDatabaseCacheSizeMB, ex2ispCategorizationCount=ex2ispCategorizationCount, ex2wmViewsOfMailFoldersTotal=ex2wmViewsOfMailFoldersTotal, ex2WSNumberOfCurrentProxyCalls=ex2WSNumberOfCurrentProxyCalls, ex2AssistantsTable=ex2AssistantsTable, ex2TopologyEntry=ex2TopologyEntry, ex2WSUnsubscribeRequestsPerSec=ex2WSUnsubscribeRequestsPerSec, ex2tbMailItemCommitImmediaPerSec=ex2tbMailItemCommitImmediaPerSec, ex2paaCalculationsAtSRL7=ex2paaCalculationsAtSRL7, ex2asFolderCreateCommandsPerSec=ex2asFolderCreateCommandsPerSec, ex2ctfaBypassRecptDueRecptSafSnd=ex2ctfaBypassRecptDueRecptSafSnd, ex2tqMsgsCompletedDelivPerSecond=ex2tqMsgsCompletedDelivPerSecond, ex2ISRecurringApptmtsModified=ex2ISRecurringApptmtsModified, ex2asIdleThreads=ex2asIdleThreads, ex2sdOutboundMapiEventWithoutMsg=ex2sdOutboundMapiEventWithoutMsg, ex2caMeetingMessagesDeleted=ex2caMeetingMessagesDeleted, ex2im4SSLConnections=ex2im4SSLConnections, ex2catPhaseInPipeline=ex2catPhaseInPipeline, ex2adRequestsPerSec=ex2adRequestsPerSec)
mibBuilder.exportSymbols("INFORMANT-EXCHANGE-V2", ex2ALLDAPSearchCallsPerSec=ex2ALLDAPSearchCallsPerSec, ex2OWASearchesTimedOut=ex2OWASearchesTimedOut, ex2orResourceBindingsRate=ex2orResourceBindingsRate, ex2ISConnectionCount=ex2ISConnectionCount, ex2FDTransactionsReceived=ex2FDTransactionsReceived, ex2AvailabilityService=ex2AvailabilityService, ex2OWACurrentProxyUsers=ex2OWACurrentProxyUsers, ex2ResourceBooking=ex2ResourceBooking, ex2ispVirusScanExtResultsNotPres=ex2ispVirusScanExtResultsNotPres, ex2aacSearchEntriesUserData=ex2aacSearchEntriesUserData, ex2troRoutingTableCalculateTotal=ex2troRoutingTableCalculateTotal, ex2asRecoverySyncCommandsPerSec=ex2asRecoverySyncCommandsPerSec, ex2orResourceBindingsTotal=ex2orResourceBindingsTotal, ex2sifUNKMessages=ex2sifUNKMessages, ex2siNumIndexDatabaseUpDateNotif=ex2siNumIndexDatabaseUpDateNotif, ex2WSItemsRead=ex2WSItemsRead, ex2mbEventHistoryReads=ex2mbEventHistoryReads, ex2asSyncCommandsPerSec=ex2asSyncCommandsPerSec, ex2tqMsgsQuedForDelivTotal=ex2tqMsgsQuedForDelivTotal, ex2ISClientRPCFailServerToBsySec=ex2ISClientRPCFailServerToBsySec, ex2ispReplicFolderDataMsgsSent=ex2ispReplicFolderDataMsgsSent, ex2umgCurrentCalls=ex2umgCurrentCalls, ex2catRequestPause=ex2catRequestPause, ex2umaaDirAccsdByDialByName=ex2umaaDirAccsdByDialByName, ex2WSFoldersMoved=ex2WSFoldersMoved, ex2tbMailItemBeginCommitTotal=ex2tbMailItemBeginCommitTotal, ex2WebMailEntry=ex2WebMailEntry, ex2ISVirusScanBytesScanned=ex2ISVirusScanBytesScanned, ex2sifUNKFolders=ex2sifUNKFolders, ex2ISMaximumAnonymousUsers=ex2ISMaximumAnonymousUsers, ex2mfaItemsMoved=ex2mfaItemsMoved, ex2ispReplicBackfillRequestRecvd=ex2ispReplicBackfillRequestRecvd, ex2wmMessageMovesPerCopiesTotal=ex2wmMessageMovesPerCopiesTotal, ex2apaMessageProcessSuccessfully=ex2apaMessageProcessSuccessfully, ex2asDeleteCollectionTotal=ex2asDeleteCollectionTotal, ex2dbiIOLogWritesPerSec=ex2dbiIOLogWritesPerSec, ex2p3TOPFailures=ex2p3TOPFailures, ex2mbMessagesSent=ex2mbMessagesSent, ex2orInstance=ex2orInstance, ex2sfaMsgFilterSenderFilterPrSec=ex2sfaMsgFilterSenderFilterPrSec, ex2tssAvgMessagesPerConnection=ex2tssAvgMessagesPerConnection, ex2catStateReasonCode=ex2catStateReasonCode, ex2umaaAmbiguousNameTransfers=ex2umaaAmbiguousNameTransfers, ex2aacCacheInsertsTotalUserData=ex2aacCacheInsertsTotalUserData, ex2dbIOLogWritesAverageLatency=ex2dbIOLogWritesAverageLatency, ex2ispFolderOpensPerSec=ex2ispFolderOpensPerSec, ex2WSGetEventsRequestsPerSec=ex2WSGetEventsRequestsPerSec, ex2OWACurrentUsersLight=ex2OWACurrentUsersLight, ex2umaCalDisconUMIrrecovExtError=ex2umaCalDisconUMIrrecovExtError, ex2im4LSUBRate=ex2im4LSUBRate, ex2ispEventHistWatermarkRdPerSec=ex2ispEventHistWatermarkRdPerSec, ex2p3ConnectionsRejected=ex2p3ConnectionsRejected, ex2paaCalculationsAtSRL5=ex2paaCalculationsAtSRL5, ex2p3NOOPFailures=ex2p3NOOPFailures, ex2mbRestrictedViewCacheHitRate=ex2mbRestrictedViewCacheHitRate, ex2ISRecurringMstrApptmtExpanded=ex2ISRecurringMstrApptmtExpanded, ex2ctfaMessagesRejected=ex2ctfaMessagesRejected, ex2aacCacheMissesTotal=ex2aacCacheMissesTotal, ex2wmAppointmentOpensTotal=ex2wmAppointmentOpensTotal, ex2estEdgeServersTotal=ex2estEdgeServersTotal, ex2umaaBusinessHoursCalls=ex2umaaBusinessHoursCalls, ex2cfaMsgOrigIPIPBlockListSec=ex2cfaMsgOrigIPIPBlockListSec, ex2sfaMessagesEvalBySenderFilter=ex2sfaMessagesEvalBySenderFilter, ex2asAveragePingTime=ex2asAveragePingTime, ex2WSConvertIdRequestsPerSec=ex2WSConvertIdRequestsPerSec, ex2catPhaseInSTFD=ex2catPhaseInSTFD, ex2svcFDHDTerminatedIdle=ex2svcFDHDTerminatedIdle, ex2ISOABFullDownloadAttempts=ex2ISOABFullDownloadAttempts, ex2svcBatchesCompleteWPerWarning=ex2svcBatchesCompleteWPerWarning, ex2OWALogonsPerSecPremium=ex2OWALogonsPerSecPremium, ex2umaaMenuOption8Used=ex2umaaMenuOption8Used, ex2ISExchmemTotalNumVirtAllocate=ex2ISExchmemTotalNumVirtAllocate, ex2tbStreamReadTotal=ex2tbStreamReadTotal, ex2asPingCommandsPending=ex2asPingCommandsPending, ex2svcBatchesInReadyQueue=ex2svcBatchesInReadyQueue, ex2dbRecordsConverted=ex2dbRecordsConverted, ex2ISExchmemMaxVirtualBytAllocat=ex2ISExchmemMaxVirtualBytAllocat, ex2im4NamespaceTotal=ex2im4NamespaceTotal, ex2OledbResourceTable=ex2OledbResourceTable, ex2ISOABDifferentialDnldBytesSec=ex2ISOABDifferentialDnldBytesSec, ex2ispMessageOpensPerSec=ex2ispMessageOpensPerSec, ex2aserPublicFolderReqFailSec=ex2aserPublicFolderReqFailSec, ex2smtInstance=ex2smtInstance, ex2ctfaMessagesWithSCLUnknown=ex2ctfaMessagesWithSCLUnknown, ex2ADAccessProcessesEntry=ex2ADAccessProcessesEntry, ex2cfaMsgOrigIPIPAllowList=ex2cfaMsgOrigIPIPAllowList, ex2wmRecipientsEditedPerSec=ex2wmRecipientsEditedPerSec, ex2p3USERTotal=ex2p3USERTotal, ex2TransportDatabaseEntry=ex2TransportDatabaseEntry, ex2paaCalculationsAtSRL8=ex2paaCalculationsAtSRL8, ex2sifROPRequestsSent=ex2sifROPRequestsSent, ex2ISVirusScanFilesScanned=ex2ISVirusScanFilesScanned, ex2OWACurrentUsersPremium=ex2OWACurrentUsersPremium, ex2ISPeakAsyncNotificaCacheSize=ex2ISPeakAsyncNotificaCacheSize, ex2msInstance=ex2msInstance, ex2im4AuthenticateFailures=ex2im4AuthenticateFailures, ex2SANSPIPBytesTransmittedPerSec=ex2SANSPIPBytesTransmittedPerSec, ex2umsaRepliedToOrganizer=ex2umsaRepliedToOrganizer, ex2caMeetingMessagesProcessed=ex2caMeetingMessagesProcessed, ex2FDSOABBytesDownloaded=ex2FDSOABBytesDownloaded, ex2umgCurrentAutoAttendantCalls=ex2umgCurrentAutoAttendantCalls, ex2catTransErrored=ex2catTransErrored, ex2ctfaMessagesWithSCL8=ex2ctfaMessagesWithSCL8, ex2ISClientFgRPCsSucceeded=ex2ISClientFgRPCsSucceeded, ex2rReplayNotifyGenerationNumber=ex2rReplayNotifyGenerationNumber, ex2mbClientLogons=ex2mbClientLogons, ex2tbpDatabaseConnsRejectedTotal=ex2tbpDatabaseConnsRejectedTotal, ex2paaSendersProcessed=ex2paaSendersProcessed, ex2wmFolderRenamesPerSec=ex2wmFolderRenamesPerSec, ex2WSItemsDeletedPerSec=ex2WSItemsDeletedPerSec, ex2ispEventHistoryReads=ex2ispEventHistoryReads, ex2dbiLogRecordStallsPerSec=ex2dbiLogRecordStallsPerSec, ex2smtDomainSecureMessagesSent=ex2smtDomainSecureMessagesSent, ex2aadcGethostbynameElapsedTime=ex2aadcGethostbynameElapsedTime, ex2cfaMsgOrigIPIPAllowListPrvSec=ex2cfaMsgOrigIPIPAllowListPrvSec, ex2svcHeartbeats=ex2svcHeartbeats, ex2aNumberOfFailEventDispatchers=ex2aNumberOfFailEventDispatchers, ex2tbDataRowMinimizeMemoryTotal=ex2tbDataRowMinimizeMemoryTotal, ex2dbiLogGenerationCheckptDepth=ex2dbiLogGenerationCheckptDepth, ex2tbpBatchSizeExecutedPerSec=ex2tbpBatchSizeExecutedPerSec, ex2aadcLocalSiteFlag=ex2aadcLocalSiteFlag, ex2umaaAverageRecentCallTime=ex2umaaAverageRecentCallTime, ex2ISCDirAccCacheEntryExpiredSec=ex2ISCDirAccCacheEntryExpiredSec, ex2paaCalculationsAtSRL2=ex2paaCalculationsAtSRL2, ex2ISRPCRequests=ex2ISRPCRequests, ex2im4SearchFailures=ex2im4SearchFailures, ex2Service=ex2Service, ex2siaMsgValidFailNotPermitRes=ex2siaMsgValidFailNotPermitRes, ex2paaCalculationsAtSRL3=ex2paaCalculationsAtSRL3, ex2mfaItemsPermanentlyDeleted=ex2mfaItemsPermanentlyDeleted, ex2asFailedItemConversionTotal=ex2asFailedItemConversionTotal, ex2ispTotalCountRecoverableItems=ex2ispTotalCountRecoverableItems, ex2rCopyQueExceedMntThresholdCCR=ex2rCopyQueExceedMntThresholdCCR, ex2estSyncNowStartedTotal=ex2estSyncNowStartedTotal, ex2tbColumnCacheSavedColumnTotal=ex2tbColumnCacheSavedColumnTotal, ex2ISVMTotal16MBFreeBlocks=ex2ISVMTotal16MBFreeBlocks, ex2rfaRecipientRejectBlockLstSec=ex2rfaRecipientRejectBlockLstSec, ex2FDNoiseWordLists=ex2FDNoiseWordLists, ex2tbExtenPropertyByteWritPerSec=ex2tbExtenPropertyByteWritPerSec, ex2im4RenameRate=ex2im4RenameRate, ex2im4SubscribeRate=ex2im4SubscribeRate, ex2asFolderDeleteTotal=ex2asFolderDeleteTotal, ex2ispReplicMsgsReceived=ex2ispReplicMsgsReceived, ex2asRequestsPerSec=ex2asRequestsPerSec, ex2TransportBatchPointTable=ex2TransportBatchPointTable, ex2aapNumberOfOutstandingRequest=ex2aapNumberOfOutstandingRequest, ex2tssConnectionsTotal=ex2tssConnectionsTotal, ex2orRowsetsOpenedRate=ex2orRowsetsOpenedRate, ex2svcFDHDLaunched=ex2svcFDHDLaunched, ex2tpkMessagesBadmailed=ex2tpkMessagesBadmailed, ex2WSGetAttachmentRequestsPerSec=ex2WSGetAttachmentRequestsPerSec, ex2dbRecordsConvertedPerSec=ex2dbRecordsConvertedPerSec, ex2asOptionsCommandsPerSec=ex2asOptionsCommandsPerSec, ex2ISWriteBytesRPCClientsPerSec=ex2ISWriteBytesRPCClientsPerSec, ex2p3RSETTotal=ex2p3RSETTotal, ex2ispSlowFindRowRate=ex2ispSlowFindRowRate, ex2ISTotalParkedAsyncNotifiCalls=ex2ISTotalParkedAsyncNotifiCalls, ex2tbpCursorsClosedPerSec=ex2tbpCursorsClosedPerSec, ex2umsaVoiceMessagesHeard=ex2umsaVoiceMessagesHeard, ex2paaSendersBlockLocalOpenProxy=ex2paaSendersBlockLocalOpenProxy, ex2siaMsgValidSecTempErrorResult=ex2siaMsgValidSecTempErrorResult, ex2tbLazyBytesLoadRequestedTotal=ex2tbLazyBytesLoadRequestedTotal, ex2tbDataRowUpdatesPerSec=ex2tbDataRowUpdatesPerSec, ex2ispMessagesSentPerSec=ex2ispMessagesSentPerSec, ex2ISMaximumUsers=ex2ISMaximumUsers, ex2aserAvailabilityRequestsSec=ex2aserAvailabilityRequestsSec, ex2ISVirusScanQueueLength=ex2ISVirusScanQueueLength, ex2svcCBsAcquired=ex2svcCBsAcquired, ex2ISRPCClientBackoffPerSec=ex2ISRPCClientBackoffPerSec, ex2tbpBatchesExecutedNormalTotal=ex2tbpBatchesExecutedNormalTotal, ex2TransportDatabaseTable=ex2TransportDatabaseTable, ex2dbTableOpensPerSec=ex2dbTableOpensPerSec, ex2im4CapabilityFailures=ex2im4CapabilityFailures, ex2ISDLMembershipCacheEntryCount=ex2ISDLMembershipCacheEntryCount, ex2UpdateAgent=ex2UpdateAgent, ex2tbStreamBytesReadPerSec=ex2tbStreamBytesReadPerSec, ex2asDocumentLibraryFetchTotal=ex2asDocumentLibraryFetchTotal, ex2aNumberOfHandledExceptions=ex2aNumberOfHandledExceptions, ex2tbColumnCacheLoadColumnsTotal=ex2tbColumnCacheLoadColumnsTotal, ex2umsaCalledMeetingOrganizer=ex2umsaCalledMeetingOrganizer, ex2umsaSubscriberLogons=ex2umsaSubscriberLogons, ex2im4UnsubscribeRate=ex2im4UnsubscribeRate, ex2mbEventHistoryWatermarksReads=ex2mbEventHistoryWatermarksReads, ex2ISRPCRequestsPeak=ex2ISRPCRequestsPeak, ex2mbVirusScanBackgrndMsgScanned=ex2mbVirusScanBackgrndMsgScanned, ex2tsrMessagesReceivedTotal=ex2tsrMessagesReceivedTotal, ex2tbDataRowClonesPerSec=ex2tbDataRowClonesPerSec, ex2mbAverageDeliveryTime=ex2mbAverageDeliveryTime, ex2aserCrsFrstCalendarQueriesSec=ex2aserCrsFrstCalendarQueriesSec, ex2paaSendersBypassLocalSRLCalc=ex2paaSendersBypassLocalSRLCalc, ex2esjScanJobsStartedTotal=ex2esjScanJobsStartedTotal, ex2ISVirusScanMsgsScanBackground=ex2ISVirusScanMsgsScanBackground, ex2umpOperationsOverThreeSeconds=ex2umpOperationsOverThreeSeconds, ex2siaMsgValidFailNonExistDomRes=ex2siaMsgValidFailNonExistDomRes, ex2ispEventHistoryDeletes=ex2ispEventHistoryDeletes, ex2orTransactionsStartedTotal=ex2orTransactionsStartedTotal, ex2ctfaMessagesWithSCL2=ex2ctfaMessagesWithSCL2, ex2WSGetFolderRequests=ex2WSGetFolderRequests, ex2aAvgEventProcessTimeInSeconds=ex2aAvgEventProcessTimeInSeconds, ex2SANSPIPPeakWorkerThreads=ex2SANSPIPPeakWorkerThreads, ex2umaaOperTransReqByUseOpenMenu=ex2umaaOperTransReqByUseOpenMenu, ex2SANSPIPTotalFailedReads=ex2SANSPIPTotalFailedReads, ex2jaJournalReportsCreatedTotal=ex2jaJournalReportsCreatedTotal, ex2tqLargestDeliveryQueueLength=ex2tqLargestDeliveryQueueLength, ex2sidFullCrawlModeStatus=ex2sidFullCrawlModeStatus, ex2ISBackgroundExpanQueueLength=ex2ISBackgroundExpanQueueLength, ex2dbiRecordsConvertedPerSec=ex2dbiRecordsConvertedPerSec, ex2mbSingleInstanceRatio=ex2mbSingleInstanceRatio, ex2rsInstance=ex2rsInstance, ex2im4SelectTotal=ex2im4SelectTotal, ex2ISVirusScanMessagesProcessed=ex2ISVirusScanMessagesProcessed, ex2sdInstance=ex2sdInstance, ex2rfaRecpntRejectRecpntValidSec=ex2rfaRecpntRejectRecpntValidSec, ex2OWAQueuedConversionRequests=ex2OWAQueuedConversionRequests, ex2WSItemsSent=ex2WSItemsSent, ex2ctfaMessagesWithSCL4=ex2ctfaMessagesWithSCL4, ex2catPhaseOnHold=ex2catPhaseOnHold, ex2wmApptmtAcceptPrDeclinePerSec=ex2wmApptmtAcceptPrDeclinePerSec, ex2siaMsgValidFailNotPermittRes=ex2siaMsgValidFailNotPermittRes, ex2ISClientFgRPCsSucceededPerSec=ex2ISClientFgRPCsSucceededPerSec, ex2wmMsgPerAppointmentSavePerSec=ex2wmMsgPerAppointmentSavePerSec, ex2apaTotalLicenseRequestsPerSec=ex2apaTotalLicenseRequestsPerSec, ex2svcFDMTTerminatedAV=ex2svcFDMTTerminatedAV, ex2ISRPCClientUncomprsdByteWrite=ex2ISRPCClientUncomprsdByteWrite, ex2OWACurrentUniqueUsers=ex2OWACurrentUniqueUsers, ex2wmRecipientsSavedTotal=ex2wmRecipientsSavedTotal, ex2OWAProxyRequestBytes=ex2OWAProxyRequestBytes, ex2tbDataRowMovesTotal=ex2tbDataRowMovesTotal, ex2ReplicaSeederTable=ex2ReplicaSeederTable, ex2ISClientRPCsAttemptedPerSec=ex2ISClientRPCsAttemptedPerSec, ex2asDocumentLibrarySearchTotal=ex2asDocumentLibrarySearchTotal, ex2im4IdleRate=ex2im4IdleRate, ex2umaMailboxServerAccessFailure=ex2umaMailboxServerAccessFailure, ex2asMoveItemsCommandsPerSec=ex2asMoveItemsCommandsPerSec, ex2aadcLDAPSearchCallsPerSec=ex2aadcLDAPSearchCallsPerSec, ex2wmMessageOpensTotal=ex2wmMessageOpensTotal, ex2WSRemoveDelegateRequestPerSec=ex2WSRemoveDelegateRequestPerSec, ex2ISExchmemNumHeapsMemErrors=ex2ISExchmemNumHeapsMemErrors, ex2svcBatchesReceived=ex2svcBatchesReceived, ex2asSyncStateKBytesTotal=ex2asSyncStateKBytesTotal, ex2OledbResourceEntry=ex2OledbResourceEntry, ex2tbMailItemWriteMimeToPerSec=ex2tbMailItemWriteMimeToPerSec, ex2siaMsgValidFailNExstDomResSec=ex2siaMsgValidFailNExstDomResSec, ex2im4DeleteFailures=ex2im4DeleteFailures, ex2catPhaseComplete=ex2catPhaseComplete, ex2ctfaMessagesQuarantined=ex2ctfaMessagesQuarantined, ex2svcFDHDActive=ex2svcFDHDActive, ex2adProcessID=ex2adProcessID, ex2SANSPIPFailedReadsPerSec=ex2SANSPIPFailedReadsPerSec, ex2aapLDAPReadTime=ex2aapLDAPReadTime, ex2ctfaMessagesDeleted=ex2ctfaMessagesDeleted, ex2ADRMSPrelicensingAgent=ex2ADRMSPrelicensingAgent, ex2OWASuccessConversnReqKBPerSec=ex2OWASuccessConversnReqKBPerSec, ex2WSGetDelegateRequests=ex2WSGetDelegateRequests)
mibBuilder.exportSymbols("INFORMANT-EXCHANGE-V2", ex2aapOpenConnectionToDomainCtrl=ex2aapOpenConnectionToDomainCtrl, ex2asSendMailTotal=ex2asSendMailTotal, ex2WSFoldersCreatedPerSec=ex2WSFoldersCreatedPerSec, ex2WSProcessID=ex2WSProcessID, ex2sidAvgLatencyRPCsDuringCrawl=ex2sidAvgLatencyRPCsDuringCrawl, ex2asEmptyFolderContentsTotal=ex2asEmptyFolderContentsTotal, ex2im4CurrentConnections=ex2im4CurrentConnections, ex2svcFDMTTerminatedPipe=ex2svcFDMTTerminatedPipe, ex2mbVirusScanBackgrndScanThread=ex2mbVirusScanBackgrndScanThread, ex2tbpBatchesExecutedTotal=ex2tbpBatchesExecutedTotal, ex2umgCallsRejectedPerSecond=ex2umgCallsRejectedPerSecond, ex2wmFormsSentPerSec=ex2wmFormsSentPerSec, ex2WSCreateAttachmentRequests=ex2WSCreateAttachmentRequests, ex2mbMessageOpensPerSec=ex2mbMessageOpensPerSec, ex2umsaDirAccsdByExtension=ex2umsaDirAccsdByExtension, ex2WSItemsUpdated=ex2WSItemsUpdated, ex2dbiIODatabsWriteAvgLatency=ex2dbiIODatabsWriteAvgLatency, ex2siaMessagesWithNoPRAPerSec=ex2siaMessagesWithNoPRAPerSec, ex2umgUserResponseLatency=ex2umgUserResponseLatency, ex2aadcLDAPReadCallsPerSec=ex2aadcLDAPReadCallsPerSec, ex2wmAppointmentSendsTotal=ex2wmAppointmentSendsTotal, ex2mfaItemSubjectRetentionPolicy=ex2mfaItemSubjectRetentionPolicy, ex2ADAccessDomainControllerTable=ex2ADAccessDomainControllerTable, ex2mbEventHistUncommitTransCount=ex2mbEventHistUncommitTransCount, ex2ISRPCOperationsPerSec=ex2ISRPCOperationsPerSec, ex2trMessagesEvaluatedPerSec=ex2trMessagesEvaluatedPerSec, ex2umaaMenuOption7Used=ex2umaaMenuOption7Used, ex2catPhaseInHDFD=ex2catPhaseInHDFD, ex2WSFoldersSentPerSec=ex2WSFoldersSentPerSec, ex2tsrDisconnectByAgentPerSecond=ex2tsrDisconnectByAgentPerSecond, ex2p3STLSFailures=ex2p3STLSFailures, ex2asGALSearchesPerSec=ex2asGALSearchesPerSec, ex2wmAppointmentOpensPerSec=ex2wmAppointmentOpensPerSec, ex2tbColumnCacheLoadedBytesTotal=ex2tbColumnCacheLoadedBytesTotal, ex2dbiLogThreadsWaiting=ex2dbiLogThreadsWaiting, ex2wmFolderGetContentsTotal=ex2wmFolderGetContentsTotal, ex2umaaMenuOption9Used=ex2umaaMenuOption9Used, ex2aserAvgTimeProcessMtgSuggRequ=ex2aserAvgTimeProcessMtgSuggRequ, ex2ISClientRPCFailCallFailedSec=ex2ISClientRPCFailCallFailedSec, ex2oeEventsSubmissionTotal=ex2oeEventsSubmissionTotal, ex2sidAverageDocumentIndexngTime=ex2sidAverageDocumentIndexngTime, ex2sifROPRequestsComplete=ex2sifROPRequestsComplete, ex2wmViewsOfCalendarsTotal=ex2wmViewsOfCalendarsTotal, ex2rcInstance=ex2rcInstance, ex2p3DELEFailures=ex2p3DELEFailures, ex2svcFDHDUnresponsiveToShutdown=ex2svcFDHDUnresponsiveToShutdown, ex2umcacTotalNumFailPINResetReq=ex2umcacTotalNumFailPINResetReq, ex2umgCurrentVoiceCalls=ex2umgCurrentVoiceCalls, ex2wmAppointmentSavesTotal=ex2wmAppointmentSavesTotal, ex2ALActiveRPCThreads=ex2ALActiveRPCThreads, ex2im4ListTotal=ex2im4ListTotal, ex2p3InvalidCommandsRate=ex2p3InvalidCommandsRate, ex2im4TotalConnections=ex2im4TotalConnections, ex2ISVirusScanMsgsCleanedPerSec=ex2ISVirusScanMsgsCleanedPerSec, ex2WSItemsMoved=ex2WSItemsMoved, ex2ISClientLatencyGT10SecRPCs=ex2ISClientLatencyGT10SecRPCs, ex2wmFolderGetViewTotal=ex2wmFolderGetViewTotal, ex2msHubServersInRetry=ex2msHubServersInRetry, ex2ISClientRPCsFailedCallFailed=ex2ISClientRPCsFailedCallFailed, ex2catBatchesCompletedWPerErrors=ex2catBatchesCompletedWPerErrors, ex2umaCalDiscnIrrecovInternalErr=ex2umaCalDiscnIrrecovInternalErr, ex2svcFDSTCBEmpty=ex2svcFDSTCBEmpty, ex2dbiSessionsPercentUsed=ex2dbiSessionsPercentUsed, ex2FDSOABDownloadTasksCompleted=ex2FDSOABDownloadTasksCompleted, ex2caMeetingCancellations=ex2caMeetingCancellations, ex2umsaMeetingsDeclined=ex2umsaMeetingsDeclined, ex2OWAConversionsEndedWithErrors=ex2OWAConversionsEndedWithErrors, ex2sdInboundMsgDeliveryAttempts=ex2sdInboundMsgDeliveryAttempts, ex2p3LISTRate=ex2p3LISTRate, ex2cfaConnOnIPBlockListPerSec=ex2cfaConnOnIPBlockListPerSec, ex2wmNavigationOptionsSavesTotal=ex2wmNavigationOptionsSavesTotal, ex2ISAppointmentInstancesCreated=ex2ISAppointmentInstancesCreated, ex2siaMsgValidPermErrorResult=ex2siaMsgValidPermErrorResult, ex2treAmbiguousRecipients=ex2treAmbiguousRecipients, ex2aagcInSiteDomainControllers=ex2aagcInSiteDomainControllers, ex2rCopyQueueLength=ex2rCopyQueueLength, ex2smtDomainSecureMessageReceive=ex2smtDomainSecureMessageReceive, ex2dbiPagesConverted=ex2dbiPagesConverted, ex2estSyncNowEdgeNotCompletTotal=ex2estSyncNowEdgeNotCompletTotal, ex2jaJournalReportsCreatedPerSec=ex2jaJournalReportsCreatedPerSec, ex2svcFDHDTerminatedExcessiveMem=ex2svcFDHDTerminatedExcessiveMem, ex2dbDatabasePageEvictionsPerSec=ex2dbDatabasePageEvictionsPerSec, ex2rbRequestsProcessed=ex2rbRequestsProcessed, ex2wmApptmtResolveFreeBusyTotal=ex2wmApptmtResolveFreeBusyTotal, ex2esjScanJobFailNotExtLockTotal=ex2esjScanJobFailNotExtLockTotal, ex2OWAInvalidCanaryRequests=ex2OWAInvalidCanaryRequests, ex2ctfaMsgBypassScanOrgWideSafe=ex2ctfaMsgBypassScanOrgWideSafe, ex2sifRPCRequestsOutstanding=ex2sifRPCRequestsOutstanding, ex2wmMessageSendsPerSec=ex2wmMessageSendsPerSec, ex2mbEventHistEventEmptyConClass=ex2mbEventHistEventEmptyConClass, ex2TransportQueuesEntry=ex2TransportQueuesEntry, ex2asCreateCollectionTotal=ex2asCreateCollectionTotal, ex2umaaMenuOption6Used=ex2umaaMenuOption6Used, ex2wmAuthenticationsPerSec=ex2wmAuthenticationsPerSec, ex2aacNotFndDNEntryMemConfigData=ex2aacNotFndDNEntryMemConfigData, ex2umaUnhandledExceptionsPerSec=ex2umaUnhandledExceptionsPerSec, ex2estEdgeServersLeasedTotal=ex2estEdgeServersLeasedTotal, ex2Pop3Table=ex2Pop3Table, ex2WSDeleteFolderRequests=ex2WSDeleteFolderRequests, ex2WSSynFoldHierarchyReqstPerSec=ex2WSSynFoldHierarchyReqstPerSec, ex2dbiInstance=ex2dbiInstance, ex2ispClientLogons=ex2ispClientLogons, ex2ISMaximumConnections=ex2ISMaximumConnections, ex2im4StoreFailures=ex2im4StoreFailures, ex2UMGeneral=ex2UMGeneral, ex2mbLocalDeliveries=ex2mbLocalDeliveries, ex2OWAItemsUpdatedSinceOWAStart=ex2OWAItemsUpdatedSinceOWAStart, ex2umfFaxIncomplete=ex2umfFaxIncomplete, ex2FDSOABTotalBytesToDownload=ex2FDSOABTotalBytesToDownload, ex2umaaPercentSuccessfulCalls=ex2umaaPercentSuccessfulCalls, ex2sifConnCacheIdleConns=ex2sifConnCacheIdleConns, ex2ispNumMsgsExpireFrmPublicFold=ex2ispNumMsgsExpireFrmPublicFold)
