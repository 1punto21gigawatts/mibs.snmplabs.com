#
# PySNMP MIB module CABLETRON-TRAPS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CABLETRON-TRAPS
# Produced by pysmi-0.3.4 at Wed May  1 11:44:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
atmInterfaceMyNeighborIpAddress, atmVcCrossConnectRowStatus, atmInterfaceMyNeighborIfName, atmVpCrossConnectRowStatus = mibBuilder.importSymbols("ATM-MIB", "atmInterfaceMyNeighborIpAddress", "atmVcCrossConnectRowStatus", "atmInterfaceMyNeighborIfName", "atmVpCrossConnectRowStatus")
chSlotID, chSlotModuleType = mibBuilder.importSymbols("CHASSIS-MIB", "chSlotID", "chSlotModuleType")
ctBroadcastDesiredBroadcastThreshold, ctBroadcastCtlSlotID, ctBroadcastCtlInterface = mibBuilder.importSymbols("CT-BROADCAST-MIB", "ctBroadcastDesiredBroadcastThreshold", "ctBroadcastCtlSlotID", "ctBroadcastCtlInterface")
contPhysicalEntryID, contTypePhysicalChanges, contTypeLogicalChanges = mibBuilder.importSymbols("CT-CONTAINER-MIB", "contPhysicalEntryID", "contTypePhysicalChanges", "contTypeLogicalChanges")
ctATMPhyRedundIfIndex, = mibBuilder.importSymbols("CTATM-CONFIG-MIB", "ctATMPhyRedundIfIndex")
ctIfNumber, ctIfPortPortNumber, ctIfPortType = mibBuilder.importSymbols("CTIF-EXT-MIB", "ctIfNumber", "ctIfPortPortNumber", "ctIfPortType")
nwAppnFwdLsName, nwAppnFwdLsAdjCpName, nwAppnEventTextString, nwAppnFwdLsAdjCpType = mibBuilder.importSymbols("CTRON-APPN-MIB", "nwAppnFwdLsName", "nwAppnFwdLsAdjCpName", "nwAppnEventTextString", "nwAppnFwdLsAdjCpType")
nwAtEventTextString, = mibBuilder.importSymbols("CTRON-AppleTalk-ROUTER-MIB", "nwAtEventTextString")
bdgdeviceStatus, = mibBuilder.importSymbols("CTRON-BDG-MIB", "bdgdeviceStatus")
ctChasPowerSupplyType, ctChasPowerSupplyNum = mibBuilder.importSymbols("CTRON-CHASSIS-MIB", "ctChasPowerSupplyType", "ctChasPowerSupplyNum")
deviceType, powerSupplyNum = mibBuilder.importSymbols("CTRON-COMMON-MIB", "deviceType", "powerSupplyNum")
nwDecIVEventTextString, = mibBuilder.importSymbols("CTRON-DECIV-ROUTER-MIB", "nwDecIVEventTextString")
psEnvFanSpeed, chEnvHumidityStatus, psEnvTempStatus, chEnvAmbientTemp, boardEnvTempRelStatus, psEnvFanStatus, chEnvFanID, chEnvAmbientStatus, boardEnvSlotID, chEnvHumidity, psEnvTemp, boardEnvTemp, boardEnvTempStatus, psEnvSlotID, chEnvFanStatus, chEnvFanSpeed = mibBuilder.importSymbols("CTRON-ENVIRONMENT-MIB", "psEnvFanSpeed", "chEnvHumidityStatus", "psEnvTempStatus", "chEnvAmbientTemp", "boardEnvTempRelStatus", "psEnvFanStatus", "chEnvFanID", "chEnvAmbientStatus", "boardEnvSlotID", "chEnvHumidity", "psEnvTemp", "boardEnvTemp", "boardEnvTempStatus", "psEnvSlotID", "chEnvFanStatus", "chEnvFanSpeed")
ctFpRedundActivePort, = mibBuilder.importSymbols("CTRON-FRONTPANEL-MIB", "ctFpRedundActivePort")
nwIpEventTextString, = mibBuilder.importSymbols("CTRON-IP-ROUTER-MIB", "nwIpEventTextString")
nwIpxEventTextString, = mibBuilder.importSymbols("CTRON-IPX-ROUTER-MIB", "nwIpxEventTextString")
cabletron, = mibBuilder.importSymbols("CTRON-OIDS", "cabletron")
psPowerStatus, boardPowerVoltage, termPowerModule2Status, psPowerOperationalStatus, chPowerMainVoltageStatus, boardPowerSlotID, boardPowerID, termPowerStatus, psPowerVoltage, psPowerSlotStatusID, chPowerDiagVoltageStatus, boardPowerCurrent, psPowerAdmin, chPowerLineTotalSupply, chPowerDiagVoltage, termPowerModule1Status, boardPowerSlotStatusID, psPowerCurrent, chPowerLineMaxSupply, psPowerID, psPowerSlotID, termPowerVoltage, boardPowerLocalStatus, boardPowerLocalAdminStatus, boardPowerStatus, boardPowerOperationalStatus, chPowerMainVoltage = mibBuilder.importSymbols("CTRON-POWER-SUPPLY-MIB", "psPowerStatus", "boardPowerVoltage", "termPowerModule2Status", "psPowerOperationalStatus", "chPowerMainVoltageStatus", "boardPowerSlotID", "boardPowerID", "termPowerStatus", "psPowerVoltage", "psPowerSlotStatusID", "chPowerDiagVoltageStatus", "boardPowerCurrent", "psPowerAdmin", "chPowerLineTotalSupply", "chPowerDiagVoltage", "termPowerModule1Status", "boardPowerSlotStatusID", "psPowerCurrent", "chPowerLineMaxSupply", "psPowerID", "psPowerSlotID", "termPowerVoltage", "boardPowerLocalStatus", "boardPowerLocalAdminStatus", "boardPowerStatus", "boardPowerOperationalStatus", "chPowerMainVoltage")
sfpsBlockSourceMAC, = mibBuilder.importSymbols("CTRON-SFPS-BASE-MIB", "sfpsBlockSourceMAC")
sfpsNodeTablePort, sfpsNodeTableBaseAddress = mibBuilder.importSymbols("CTRON-SFPS-DIRECTORY-MIB", "sfpsNodeTablePort", "sfpsNodeTableBaseAddress")
sfpsInPortConfigPort, sfpsInPortConfigType = mibBuilder.importSymbols("CTRON-SFPS-PORT-MIB", "sfpsInPortConfigPort", "sfpsInPortConfigType")
sfpsBlockResolveTableAOValue, = mibBuilder.importSymbols("CTRON-SFPS-RESOLVE-MIB", "sfpsBlockResolveTableAOValue")
sfpsDirViolationAOValue, sfpsDirViolationType = mibBuilder.importSymbols("CTRON-SFPS-TOPOLOGY-MIB", "sfpsDirViolationAOValue", "sfpsDirViolationType")
ctsmtmibRingSmtIndex, ctsmtmibRingTopology, ctsmtmibRingMacIndex, ctsmtmibRingNodeIndex, ctsmtmibRingMacAddr = mibBuilder.importSymbols("CTSMTMIB-MIB", "ctsmtmibRingSmtIndex", "ctsmtmibRingTopology", "ctsmtmibRingMacIndex", "ctsmtmibRingNodeIndex", "ctsmtmibRingMacAddr")
snmpOIDObject, snmpPollDestination, snmpPollOwner, snmpOIDDestination, snmpOIDOwner, snmpOIDSequence = mibBuilder.importSymbols("DLM-MIB", "snmpOIDObject", "snmpPollDestination", "snmpPollOwner", "snmpOIDDestination", "snmpOIDOwner", "snmpOIDSequence")
tRingAlarmsStnThrshInternalErrsThreshold, tRingAlarmsRingClaimTknThreshold, tRingAlarmsRingTimebase, tRingPortMgmtPortId, tRingMgmtStnName, tRingAlarmsStnThrshACErrsThreshold, tRingAlarmsRingAMPErrsThreshold, tRingAlarmsStnThrshAddress, tRingAlarmsStnThrshRcvrCongestThreshold, tRingMgmtStnAddress, tRingPortGrpId, tRingStatsRingLastBeaconType, tRingAlarmsStnThrshBurstErrsThreshold, tRingStatsRingLastBeacon, tRingMgmtSecurityAddressRemove, tRingAlarmsRingRingPurgesThreshold, tRingAlarmsStnThrshLineErrsThreshold, tRingMgmtSecurityAddressAdd, tRingAlarmsRingFrameCountThreshold, tRingAlarmsRingLostFramesThreshold, tRingMgmtStnDNA, tRingMgmtStnUNA, tRingAlarmsRingBeaconStateThreshold, tRingAlarmsRingTokenErrsThreshold, tRingMgmtStnBoard, tRingMgmtStnPort = mibBuilder.importSymbols("DOT5-LOG-MIB", "tRingAlarmsStnThrshInternalErrsThreshold", "tRingAlarmsRingClaimTknThreshold", "tRingAlarmsRingTimebase", "tRingPortMgmtPortId", "tRingMgmtStnName", "tRingAlarmsStnThrshACErrsThreshold", "tRingAlarmsRingAMPErrsThreshold", "tRingAlarmsStnThrshAddress", "tRingAlarmsStnThrshRcvrCongestThreshold", "tRingMgmtStnAddress", "tRingPortGrpId", "tRingStatsRingLastBeaconType", "tRingAlarmsStnThrshBurstErrsThreshold", "tRingStatsRingLastBeacon", "tRingMgmtSecurityAddressRemove", "tRingAlarmsRingRingPurgesThreshold", "tRingAlarmsStnThrshLineErrsThreshold", "tRingMgmtSecurityAddressAdd", "tRingAlarmsRingFrameCountThreshold", "tRingAlarmsRingLostFramesThreshold", "tRingMgmtStnDNA", "tRingMgmtStnUNA", "tRingAlarmsRingBeaconStateThreshold", "tRingAlarmsRingTokenErrsThreshold", "tRingMgmtStnBoard", "tRingMgmtStnPort")
fddimibMACIndex, fddimibPORTLerEstimate, fddimibPORTAction, fddimibMACCurrentPath, fddimibSMTCFState, fddimibMACFrameErrorRatio, fddimibSMTIndex, fddimibPORTIndex, fddimibPORTConnectState, fddimibMACRMTState, fddimibSMTMasterCts = mibBuilder.importSymbols("FDDI-SMT73-MIB", "fddimibMACIndex", "fddimibPORTLerEstimate", "fddimibPORTAction", "fddimibMACCurrentPath", "fddimibSMTCFState", "fddimibMACFrameErrorRatio", "fddimibSMTIndex", "fddimibPORTIndex", "fddimibPORTConnectState", "fddimibMACRMTState", "fddimibSMTMasterCts")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
lecRowStatus, = mibBuilder.importSymbols("LAN-EMULATION-CLIENT-MIB", "lecRowStatus")
rptrAlarmsTrafThreshold, rptrPortSrcAddrAddressList, rptrPortAlarmErrSource, rptrMgmtInterfaceNum, rptrSecurityLearnMode, rptrPortGrpSASecurityLearnState, rptrPortMgmtPortType, rptrPortSecurityPortId, rptrSecurityLearnState, rptrPortSecurityLearnState, rptrPortSecurityLockStatus, rptrPortGrpAlarmBroadThreshold, rptrSrcAddrMgmtPortLock, rptrPortAlarmErrThreshold, rptrPortRedundCrctNum, rptrPortGrpMgmtGrpId, rptrAlarmsAlarmTimebase, rptrPortGrpSASecurityLearnMode, rptrPortGrpAlarmErrSource, rptrPortSecurityPortGrpId, rptrPortAlarmTrafThreshold, rptrPortSecurityLearnMode, rptrPortGrpSrcAddrLockGrpId, rptrPortSecuritySecureState, rptrPortAlarmBroadThreshold, rptrAlarmsErrSource, rptrAlarmsCollThreshold, rptrPortGrpAlarmCollThreshold, rptrPortMgmtPortId, rptrPortAlarmCollThreshold, rptrPortGrpAlarmTrafThreshold, rptrPortGrpAlarmErrThreshold, rptrAlarmsBroadThreshold, rptrPortSrcAddrTopoState, rptrAlarmsErrThreshold = mibBuilder.importSymbols("REPEATER-REV4-MIB", "rptrAlarmsTrafThreshold", "rptrPortSrcAddrAddressList", "rptrPortAlarmErrSource", "rptrMgmtInterfaceNum", "rptrSecurityLearnMode", "rptrPortGrpSASecurityLearnState", "rptrPortMgmtPortType", "rptrPortSecurityPortId", "rptrSecurityLearnState", "rptrPortSecurityLearnState", "rptrPortSecurityLockStatus", "rptrPortGrpAlarmBroadThreshold", "rptrSrcAddrMgmtPortLock", "rptrPortAlarmErrThreshold", "rptrPortRedundCrctNum", "rptrPortGrpMgmtGrpId", "rptrAlarmsAlarmTimebase", "rptrPortGrpSASecurityLearnMode", "rptrPortGrpAlarmErrSource", "rptrPortSecurityPortGrpId", "rptrPortAlarmTrafThreshold", "rptrPortSecurityLearnMode", "rptrPortGrpSrcAddrLockGrpId", "rptrPortSecuritySecureState", "rptrPortAlarmBroadThreshold", "rptrAlarmsErrSource", "rptrAlarmsCollThreshold", "rptrPortGrpAlarmCollThreshold", "rptrPortMgmtPortId", "rptrPortAlarmCollThreshold", "rptrPortGrpAlarmTrafThreshold", "rptrPortGrpAlarmErrThreshold", "rptrAlarmsBroadThreshold", "rptrPortSrcAddrTopoState", "rptrAlarmsErrThreshold")
logTime, logIndex, logEventIndex, logDescription = mibBuilder.importSymbols("RFC1271-MIB", "logTime", "logIndex", "logEventIndex", "logDescription")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType, TimeTicks, Integer32, Counter32, Counter64, NotificationType, ObjectIdentity, iso, MibIdentifier, ModuleIdentity, Unsigned32, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType", "TimeTicks", "Integer32", "Counter32", "Counter64", "NotificationType", "ObjectIdentity", "iso", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Bits", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
upsStatusFault, upsAddlFuncsStatusFault, upsExtMeasAlarmStatus, upsIndex = mibBuilder.importSymbols("UPS2-MIB", "upsStatusFault", "upsAddlFuncsStatusFault", "upsExtMeasAlarmStatus", "upsIndex")
ctdlswTConnUp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1))
if mibBuilder.loadTexts: ctdlswTConnUp.setDescription('This trap is sent each time a transport connection becomes enabled on this DLSw.')
ctdlswTConnDown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,2))
if mibBuilder.loadTexts: ctdlswTConnDown.setDescription('This trap is sent each time a transport connection becomes disabled on this DLSw.')
portSegmenting = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,257)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
if mibBuilder.loadTexts: portSegmenting.setDescription('When a port goes from operational to segmented, a trap will be generated. For these purposes, the port state will be sampled every XXX seconds, thus it will be statistically possible to miss oscillating circuits.')
portUnsegementing = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,258)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
if mibBuilder.loadTexts: portUnsegementing.setDescription('When it is detected that a previously segmented port has gone operational, a trap will be generated. This is also sampled, thus a trap may not be generated for each transition.')
portLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,259)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
if mibBuilder.loadTexts: portLinkUp.setDescription('This trap will be generated when it is determined that a MAU has been attached to the MMAC. This is only appropriate for MIMs that support the concept of a link state.')
portLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,260)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
if mibBuilder.loadTexts: portLinkDown.setDescription("This trap will be generated when a previously attached MAU is removed or powered down. Again, this is only appropriate for MIM's that support link state.")
srcaddrNew = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,261)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"), ("REPEATER-REV4-MIB", "rptrPortSrcAddrAddressList"))
if mibBuilder.loadTexts: srcaddrNew.setDescription("This trap will be generated when the MMAC detects the existence of a new source address on one of it's ports.")
srcaddrTimeout = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,262)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"), ("REPEATER-REV4-MIB", "rptrPortSrcAddrAddressList"))
if mibBuilder.loadTexts: srcaddrTimeout.setDescription('This trap will indicate that the MMAC has not detected a packet generated by this source address within a certain timeout.')
boardRemoval = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,263)).setObjects(("CHASSIS-MIB", "chSlotID"))
if mibBuilder.loadTexts: boardRemoval.setDescription('This trap will be generated when the MMAC detects that a MIM has been removed.')
boardInsertion = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,264)).setObjects(("CHASSIS-MIB", "chSlotID"), ("CTRON-COMMON-MIB", "deviceType"))
if mibBuilder.loadTexts: boardInsertion.setDescription('This trap will generated when the MMAC determines that a new board has been inserted.')
redundActivePortInCircuitFailed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,265)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"), ("REPEATER-REV4-MIB", "rptrPortRedundCrctNum"))
if mibBuilder.loadTexts: redundActivePortInCircuitFailed.setDescription('This trap will be generated when the active port in a redundant circuit has failed polling. This will indicate the activation of redundancy.')
redundPortActivated = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,266)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"), ("REPEATER-REV4-MIB", "rptrPortRedundCrctNum"))
if mibBuilder.loadTexts: redundPortActivated.setDescription('This trap indicates that a new port has been activated in a redundant circuit. This does NOT indicate that this port is usable, but is being tested. If the port fails, a failure trap (above) will be generated.')
redundPortTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,267)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"), ("REPEATER-REV4-MIB", "rptrPortRedundCrctNum"))
if mibBuilder.loadTexts: redundPortTestFailed.setDescription("This trap will be generated when the MMAC executes it's periodic redundancy diagnostics and finds one of the ports in a redundant circuit has failed. This message will not indicate that redundancy has been activated, just that the port has failed and should be fixed before it is needed.")
boardTrafficThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,271)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpAlarmTrafThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"))
if mibBuilder.loadTexts: boardTrafficThresholdExceeded.setDescription('This trap will be generated when the traffic (good packets per time interval) has been exceeded for a particular MIM.')
boardErrorThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,272)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpAlarmErrThreshold"), ("REPEATER-REV4-MIB", "rptrPortGrpAlarmErrSource"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"))
if mibBuilder.loadTexts: boardErrorThresholdExceeded.setDescription('This trap will be generated when packets of the selected error type exceeds a threshold percentage of the good packets for a particular interval for a particular MIM.')
boardCollsionThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,273)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpAlarmCollThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"))
if mibBuilder.loadTexts: boardCollsionThresholdExceeded.setDescription('This trap will be generated when collisions exceed a threshold percentage of the good packets for a particular interval for a particular MIM.')
portTrafficThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,274)).setObjects(("REPEATER-REV4-MIB", "rptrPortAlarmTrafThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
if mibBuilder.loadTexts: portTrafficThresholdExceeded.setDescription('This trap will be generated when the traffic (good packets per time interval) has been exceeded for a particular port.')
portErrorThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,275)).setObjects(("REPEATER-REV4-MIB", "rptrPortAlarmErrThreshold"), ("REPEATER-REV4-MIB", "rptrPortAlarmErrSource"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
if mibBuilder.loadTexts: portErrorThresholdExceeded.setDescription('This trap will be generated when packets of the selected error type exceeds a threshold percentage of the good packets for a particular interval for a particular port.')
portCollsionThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,276)).setObjects(("REPEATER-REV4-MIB", "rptrPortAlarmCollThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
if mibBuilder.loadTexts: portCollsionThresholdExceeded.setDescription('This trap will be generated when collisions exceed a threshold percentage of the good packets for a particular interval for a particular port.')
portTypeChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,277)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"), ("REPEATER-REV4-MIB", "rptrPortSrcAddrTopoState"))
if mibBuilder.loadTexts: portTypeChanged.setDescription('This trap indicates that a port has changed from a station port to a trunk port or vice versa.')
portSecurityViolation = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,279)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"), ("REPEATER-REV4-MIB", "rptrPortSrcAddrAddressList"))
if mibBuilder.loadTexts: portSecurityViolation.setDescription('This trap is generated when a source address other than those locked to a port is seen.')
portViolationReset = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,280)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
if mibBuilder.loadTexts: portViolationReset.setDescription('This trap is generated when management intervention has reset a port after a violation has occurred.')
envTempWarm = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,281)).setObjects(("CHASSIS-MIB", "chSlotID"))
if mibBuilder.loadTexts: envTempWarm.setDescription('This trap is generated when the device detects that the temperature within a MIM has reached a WARM condition.')
envTempHot = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,282)).setObjects(("CHASSIS-MIB", "chSlotID"))
if mibBuilder.loadTexts: envTempHot.setDescription('This trap is generated when the device detects that the temperature within a MIM has reached a HOT condition.')
envVoltageLow = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,283)).setObjects(("CTRON-COMMON-MIB", "powerSupplyNum"))
if mibBuilder.loadTexts: envVoltageLow.setDescription("This trap is generated when a power supply's voltage is LOW.")
envTempNormal = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,284)).setObjects(("CHASSIS-MIB", "chSlotID"))
if mibBuilder.loadTexts: envTempNormal.setDescription('This trap is generated when the device detects that the temperature within a MIM has returned to a NORMAL state.')
envVoltageNormal = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,285))
if mibBuilder.loadTexts: envVoltageNormal.setDescription("This trap is generated when all power supplies' voltage have returned to a NORMAL state.")
fanFail = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,286))
if mibBuilder.loadTexts: fanFail.setDescription('This trap is generated when the device detects that the system fans have failed.')
fanNormal = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,287))
if mibBuilder.loadTexts: fanNormal.setDescription('This trap is generated when the device detects that the system fans have returned to normal.')
boardBroadcastThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,289)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpAlarmBroadThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"))
if mibBuilder.loadTexts: boardBroadcastThresholdExceeded.setDescription('This trap is generated when the broadcast packets (per time interval) have exceeded the threshold for the given board.')
portBroadcastThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,290)).setObjects(("REPEATER-REV4-MIB", "rptrPortAlarmBroadThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
if mibBuilder.loadTexts: portBroadcastThresholdExceeded.setDescription('This trap is generated when the broadcast packets (per time interval) have exceeded the threshold for the given port.')
systemVoltageLow = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,293))
if mibBuilder.loadTexts: systemVoltageLow.setDescription('This trap is generated when the device detects that the power to the EMME is low.')
systemVoltageNormal = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,294))
if mibBuilder.loadTexts: systemVoltageNormal.setDescription('This trap is generated when the device detects that the power to the EMME has returned to normal.')
epimRemoval = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,295)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
if mibBuilder.loadTexts: epimRemoval.setDescription('This trap is generated when it is detected that an EPIM has been removed.')
epimInsertion = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,296)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortType"))
if mibBuilder.loadTexts: epimInsertion.setDescription('This trap is generated when it is detected that an EPIM has been inserted.')
rptrTrafficThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,297)).setObjects(("REPEATER-REV4-MIB", "rptrAlarmsTrafThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrMgmtInterfaceNum"))
if mibBuilder.loadTexts: rptrTrafficThresholdExceeded.setDescription('This trap will be generated when the traffic (good packets per time interval) has been exceeded for a network.')
rptrErrorThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,304)).setObjects(("REPEATER-REV4-MIB", "rptrAlarmsErrThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsErrSource"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrMgmtInterfaceNum"))
if mibBuilder.loadTexts: rptrErrorThresholdExceeded.setDescription('This trap will be generated when packets of the selected error type exceeds a threshold percentage of the good packets for a particular interval for an entire network.')
rptrCollsionThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,305)).setObjects(("REPEATER-REV4-MIB", "rptrAlarmsCollThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrMgmtInterfaceNum"))
if mibBuilder.loadTexts: rptrCollsionThresholdExceeded.setDescription('This trap will be generated when collisions exceed a threshold percentage of the good packets for a particular interval for an entire network.')
rptrLockStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,306)).setObjects(("REPEATER-REV4-MIB", "rptrSrcAddrMgmtPortLock"), ("REPEATER-REV4-MIB", "rptrMgmtInterfaceNum"))
if mibBuilder.loadTexts: rptrLockStatusChanged.setDescription('This trap is generated when the status of the address lock changes for a certain network.')
rptrBroadcastThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,307)).setObjects(("REPEATER-REV4-MIB", "rptrAlarmsBroadThreshold"), ("REPEATER-REV4-MIB", "rptrAlarmsAlarmTimebase"), ("REPEATER-REV4-MIB", "rptrMgmtInterfaceNum"))
if mibBuilder.loadTexts: rptrBroadcastThresholdExceeded.setDescription('This trap is generated when the broadcast packets (per time interval) have exceeded the threshold for the given repeater.')
srcAddressPortLockStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,309)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"), ("REPEATER-REV4-MIB", "rptrPortMgmtPortId"), ("REPEATER-REV4-MIB", "rptrPortSecurityLockStatus"))
if mibBuilder.loadTexts: srcAddressPortLockStatusChange.setDescription('This trap is generated when a change to the source address locking is detected at the port level.')
chBoardInsertion = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,310)).setObjects(("CHASSIS-MIB", "chSlotID"), ("CHASSIS-MIB", "chSlotModuleType"))
if mibBuilder.loadTexts: chBoardInsertion.setDescription('This trap will generated when the MMAC determines that a new board has been inserted.')
portSecureStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,313)).setObjects(("REPEATER-REV4-MIB", "rptrPortSecurityPortGrpId"), ("REPEATER-REV4-MIB", "rptrPortSecurityPortId"), ("REPEATER-REV4-MIB", "rptrPortSecuritySecureState"))
if mibBuilder.loadTexts: portSecureStateChanged.setDescription('This trap is generated when the status of the secure state changes for a specific port.')
rptrLearnStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,314)).setObjects(("REPEATER-REV4-MIB", "rptrMgmtInterfaceNum"), ("REPEATER-REV4-MIB", "rptrSecurityLearnState"))
if mibBuilder.loadTexts: rptrLearnStateChanged.setDescription('This trap is generated when network learning is reset. When learning is reset, all secure addresses on each port, within the network, will be deleted and ports will learn source addresses, again.')
rptrPortGrpLearnStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,315)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpSrcAddrLockGrpId"), ("REPEATER-REV4-MIB", "rptrPortGrpSASecurityLearnState"))
if mibBuilder.loadTexts: rptrPortGrpLearnStateChanged.setDescription('This trap is generated when port group learning is reset. When learning is reset, all secure addresses on each port, within the port group, will be deleted and ports will learn source addresses, again.')
rptrPortLearnStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,316)).setObjects(("REPEATER-REV4-MIB", "rptrPortSecurityPortGrpId"), ("REPEATER-REV4-MIB", "rptrPortSecurityPortId"), ("REPEATER-REV4-MIB", "rptrPortSecurityLearnState"))
if mibBuilder.loadTexts: rptrPortLearnStateChanged.setDescription('This trap is generated when learning on a port is reset. When learning is reset, all secure addresses on the port will be deleted and the port will learn source addresses, again.')
rptrLearnModeChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,317)).setObjects(("REPEATER-REV4-MIB", "rptrMgmtInterfaceNum"), ("REPEATER-REV4-MIB", "rptrSecurityLearnMode"))
if mibBuilder.loadTexts: rptrLearnModeChanged.setDescription('This trap is generated when network learn mode is changed between one-time learn mode and continuous learn mode.')
portGrpLearnModeChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,318)).setObjects(("REPEATER-REV4-MIB", "rptrPortGrpSrcAddrLockGrpId"), ("REPEATER-REV4-MIB", "rptrPortGrpSASecurityLearnMode"))
if mibBuilder.loadTexts: portGrpLearnModeChanged.setDescription('This trap is generated when the port group learn mode is changed between one-time learn mode and continuous learn mode.')
portLearnModeChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,319)).setObjects(("REPEATER-REV4-MIB", "rptrPortSecurityPortGrpId"), ("REPEATER-REV4-MIB", "rptrPortSecurityPortId"), ("REPEATER-REV4-MIB", "rptrPortSecurityLearnMode"))
if mibBuilder.loadTexts: portLearnModeChanged.setDescription('This trap is generated when the port learn mode is changed between one-time learn mode and continuous learn mode.')
fpportActivated = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,400)).setObjects(("REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
if mibBuilder.loadTexts: fpportActivated.setDescription('This trap is generated when a port is activated in redundancy due to another port failing.')
interfacePortInsertion = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,416)).setObjects(("CTIF-EXT-MIB", "ctIfNumber"), ("CTIF-EXT-MIB", "ctIfPortPortNumber"), ("CTIF-EXT-MIB", "ctIfPortType"))
if mibBuilder.loadTexts: interfacePortInsertion.setDescription('This trap will be generated when it is detected that an interface port has been inserted.')
interfacePortRemoval = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,417)).setObjects(("CTIF-EXT-MIB", "ctIfNumber"), ("CTIF-EXT-MIB", "ctIfPortPortNumber"))
if mibBuilder.loadTexts: interfacePortRemoval.setDescription('This trap will be generated when it is detected that an interface port has been removed.')
interfacePortLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,418)).setObjects(("CTIF-EXT-MIB", "ctIfNumber"), ("CTIF-EXT-MIB", "ctIfPortPortNumber"))
if mibBuilder.loadTexts: interfacePortLinkUp.setDescription("This trap will be generated when it is determined that a port on a strictly bridging interface (not a 'repeater') has been connected to a LAN. This is only appropriate for ports that support the concept of a link state.")
interfacePortLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,419)).setObjects(("CTIF-EXT-MIB", "ctIfNumber"), ("CTIF-EXT-MIB", "ctIfPortPortNumber"))
if mibBuilder.loadTexts: interfacePortLinkDown.setDescription('This trap will be generated when a previously attached bridging port has been disconnected from a LAN. This is only appropriate for ports that support the concept of a link state.')
portInserted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,513)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: portInserted.setDescription("This trap is sent when a stations port's link state turns on while the management state of the port is Enabled.")
portDeInserted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,514)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: portDeInserted.setDescription("This trap is sent when a stations port's link state turns off while the management state of the port is Enabled.")
ringSpeedFault = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,515)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"))
if mibBuilder.loadTexts: ringSpeedFault.setDescription('This trap is sent when a board enters the ring speed fault state due to a station or ring port attaching to the board as a different speed than the board is configured for.')
ringSpeedFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,516)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"))
if mibBuilder.loadTexts: ringSpeedFaultCleared.setDescription('This trap is sent when a board leaves the ring speed fault state.')
ringPortFaulted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,517)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: ringPortFaulted.setDescription('This trap is sent when a ring port wraps when its management state is Active, without regard for the selected type of the ring port.')
ringPortFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,518)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: ringPortFaultCleared.setDescription('This trap is sent when a ring port unwraps when its management state is Active, without regard for the selected type of the ring port.')
beaconState = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,519)).setObjects(("DOT5-LOG-MIB", "tRingStatsRingLastBeaconType"), ("DOT5-LOG-MIB", "tRingMgmtStnName"), ("DOT5-LOG-MIB", "tRingMgmtStnUNA"), ("DOT5-LOG-MIB", "tRingMgmtStnBoard"), ("DOT5-LOG-MIB", "tRingMgmtStnPort"))
if mibBuilder.loadTexts: beaconState.setDescription('This trap occurs when a Beacon is detected on the ring while the ring is in the Operational state, or when the Beacon contains different information than the last Beacon received.')
beaconStateCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,520)).setObjects(("DOT5-LOG-MIB", "tRingStatsRingLastBeacon"))
if mibBuilder.loadTexts: beaconStateCleared.setDescription('This trap occurs when a ring returns to the Operational state.')
stationAdded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,521)).setObjects(("DOT5-LOG-MIB", "tRingMgmtSecurityAddressAdd"))
if mibBuilder.loadTexts: stationAdded.setDescription('This trap is sent when a new station address is added to the security allowed list')
stationRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,522)).setObjects(("DOT5-LOG-MIB", "tRingMgmtSecurityAddressRemove"))
if mibBuilder.loadTexts: stationRemoved.setDescription('This trap is sent when a station is rejected from the ring with a REMOVE MAC command sent by the ring security.')
ringConfigurationChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,523))
if mibBuilder.loadTexts: ringConfigurationChanged.setDescription('This trap is sent when the TRMM has built a new station map.')
faultRecoveryPortRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,524)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: faultRecoveryPortRemoved.setDescription('This trap is sent after a fault recovery condition has been corrected, and reports that a port was removed in the process of correcting the condition.')
faultRecoveryBoardBypassed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,525)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"))
if mibBuilder.loadTexts: faultRecoveryBoardBypassed.setDescription('This trap is sent after a fault recovery condition has been corrected, and reports that a board was bypassed in the process of correcting the condition.')
portViolation = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,526)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: portViolation.setDescription("This trap is sent when a port link state turns on and the port's management state is Disabled.")
portViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,527)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: portViolationCleared.setDescription("This trap is sent when a port link state turns off and the port's management state is Disabled.")
faultRecoveryOscillation = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,528))
if mibBuilder.loadTexts: faultRecoveryOscillation.setDescription('This trap is sent when the ring has oscillated several times within a short amount of time. The ring is considered oscillating if it has failed a short time after recovering.')
ringPurgeThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,529)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsRingRingPurgesThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
if mibBuilder.loadTexts: ringPurgeThreshold.setDescription('This trap is sent when ring purge errors have exceeded the specified threshold value.')
amErrorsThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,530)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsRingAMPErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
if mibBuilder.loadTexts: amErrorsThreshold.setDescription('This trap is sent when Active Monitor errors have exceeded the specified threshold value.')
tokenErrorsThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,531)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsRingTokenErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
if mibBuilder.loadTexts: tokenErrorsThreshold.setDescription('This trap is sent when Token errors have exceeded the specified threshold value.')
claimTokenThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,532)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsRingClaimTknThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
if mibBuilder.loadTexts: claimTokenThreshold.setDescription('This trap is sent when claim tokens have exceeded the specified threshold value.')
lostFramesThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,533)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsRingLostFramesThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
if mibBuilder.loadTexts: lostFramesThreshold.setDescription('This trap is sent when the Lost Frame count has exceeded the specified threshold value.')
beaconStateThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,534)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsRingBeaconStateThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
if mibBuilder.loadTexts: beaconStateThreshold.setDescription('This trap is sent when the Beacon State count has exceeded the specified threshold value.')
frameCountThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,535)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsRingFrameCountThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
if mibBuilder.loadTexts: frameCountThreshold.setDescription('This trap is sent when the frame count has exceeded the specified threshold value.')
lineErrorsThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,536)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsStnThrshLineErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
if mibBuilder.loadTexts: lineErrorsThreshold.setDescription('This trap is sent when the line errors have exceeded the specified threshold value for the station.')
internalErrorsThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,537)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsStnThrshInternalErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
if mibBuilder.loadTexts: internalErrorsThreshold.setDescription('This trap is sent when the Lost internal errors have exceeded the specified threshold value for the station.')
burstErrorsThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,538)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsStnThrshBurstErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
if mibBuilder.loadTexts: burstErrorsThreshold.setDescription('This trap is sent when the Lost burst errors have exceeded the specified threshold value for the station.')
acErrorsThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,539)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsStnThrshACErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
if mibBuilder.loadTexts: acErrorsThreshold.setDescription('This trap is sent when address/copied errors have exceeded the specified threshold value for the station.')
receiverCongestionThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,540)).setObjects(("DOT5-LOG-MIB", "tRingAlarmsStnThrshRcvrCongestThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
if mibBuilder.loadTexts: receiverCongestionThreshold.setDescription('This trap is sent when receiver congestion errors have exceeded the specified threshold value for the station.')
removeStationFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,541)).setObjects(("DOT5-LOG-MIB", "tRingMgmtSecurityAddressRemove"))
if mibBuilder.loadTexts: removeStationFailure.setDescription('This trap is sent when a station breaks through security and cannot be removed from the ring.')
ringSpeedPortFault = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,542)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: ringSpeedPortFault.setDescription('This trap is generated when a port enters the ring speed fault state due to a station or ring port attaching to the port at a different speed than the port is configured for.')
ringSpeedPortFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,543)).setObjects(("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: ringSpeedPortFaultCleared.setDescription('This trap is generated when a port leaves the ring speed fault state.')
stnPortInserted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,544)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: stnPortInserted.setDescription("This trap is sent when a stations port's link state turns on while the management state of the port is Enabled.")
stnPortDeInserted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,545)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: stnPortDeInserted.setDescription("This trap is sent when a stations port's link state turns off while the management state of the port is Enabled.")
boardRingSpeedFault = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,546)).setObjects(("CHASSIS-MIB", "chSlotID"))
if mibBuilder.loadTexts: boardRingSpeedFault.setDescription("This trap is sent when a 'active NON-93 series' board enters the ring speed fault state due to a station or ring port attaching to the board as a different speed than the board is configured for.")
boardRingSpeedFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,547)).setObjects(("CHASSIS-MIB", "chSlotID"))
if mibBuilder.loadTexts: boardRingSpeedFaultCleared.setDescription('This trap is sent when a board leaves the ring speed fault state.')
ringPortWrapped = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,548)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: ringPortWrapped.setDescription('This trap is sent when a ring port wraps when its management state is Active, without regard for the selected type of the ring port.')
ringPortWrapCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,549)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: ringPortWrapCleared.setDescription('This trap is sent when a ring port unwraps when its management state is Active, without regard for the selected type of the ring port.')
beaconingState = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,550)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingMgmtStnName"), ("DOT5-LOG-MIB", "tRingMgmtStnAddress"), ("DOT5-LOG-MIB", "tRingMgmtStnUNA"), ("DOT5-LOG-MIB", "tRingMgmtStnBoard"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingMgmtStnPort"), ("DOT5-LOG-MIB", "tRingStatsRingLastBeaconType"))
if mibBuilder.loadTexts: beaconingState.setDescription('This trap occurs, if beacon recovery is enabled, when Beaconing, Ring Purging or Claim Tokens are detected on the ring while the ring is in the Operational state, or when the Beacon contains different information than the last Beacon received.')
beaconingStateCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,551)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingStatsRingLastBeacon"))
if mibBuilder.loadTexts: beaconingStateCleared.setDescription('This trap occurs when a ring returns to the Operational state.')
stnAdded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,552)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingMgmtSecurityAddressAdd"))
if mibBuilder.loadTexts: stnAdded.setDescription('This trap is sent when a new station is added to the security allowed list.')
stnRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,553)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingMgmtSecurityAddressRemove"))
if mibBuilder.loadTexts: stnRemoved.setDescription('This trap is sent when a station is rejected from the ring with a REMOVE MAC command sent by the ring security.')
removeStnFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,554)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingMgmtSecurityAddressRemove"))
if mibBuilder.loadTexts: removeStnFailure.setDescription('This trap is sent when a station breaks through security and cannot be removed from the ring.')
ringSecurityPortRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,555)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: ringSecurityPortRemoved.setDescription('This trap is sent when a ring security break has been corrected, and reports that a port was removed (disabled) in the process of correcting the condition.')
beaconRecoveryPortRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,556)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: beaconRecoveryPortRemoved.setDescription('This trap is sent after a fault recovery condition has been corrected, and reports that a port was removed in the process of correcting the condition.')
beaconRecoveryPortGroupBypassed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,557)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"))
if mibBuilder.loadTexts: beaconRecoveryPortGroupBypassed.setDescription('This trap is sent after a fault recovery condition has been corrected, and reports that a port group was bypassed in the process of correcting the condition.')
beaconRecoveryBoardBypassed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,558)).setObjects(("CHASSIS-MIB", "chSlotID"))
if mibBuilder.loadTexts: beaconRecoveryBoardBypassed.setDescription('This trap is sent after a fault recovery condition has been corrected, and reports that a board was bypassed in the process of correcting the condition.')
portLinkViolation = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,559)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: portLinkViolation.setDescription("This trap is sent when a port link state turns on and the port's management state is Disabled.")
portLinkViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,560)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: portLinkViolationCleared.setDescription("This trap is sent when a port link state turns off and the port's management state is Disabled.")
ringPurgeTotalThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,561)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsRingRingPurgesThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
if mibBuilder.loadTexts: ringPurgeTotalThreshold.setDescription('This trap is sent when ring purge errors have exceeded the specified threshold value.')
amErrorsTotalThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,562)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsRingAMPErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
if mibBuilder.loadTexts: amErrorsTotalThreshold.setDescription('This trap is sent when Active Monitor errors have exceeded the specified threshold value.')
tokenErrorsTotalThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,563)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsRingTokenErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
if mibBuilder.loadTexts: tokenErrorsTotalThreshold.setDescription('This trap is sent when Token errors have exceeded the specified threshold value.')
claimTokenTotalThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,564)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsRingClaimTknThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
if mibBuilder.loadTexts: claimTokenTotalThreshold.setDescription('This trap is sent when claim tokens have exceeded the specified threshold value.')
lostFramesTotalThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,565)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsRingLostFramesThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
if mibBuilder.loadTexts: lostFramesTotalThreshold.setDescription('This trap is sent when the Lost Frame count has exceeded the specified threshold value.')
frameCountTotalThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,566)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsRingFrameCountThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"))
if mibBuilder.loadTexts: frameCountTotalThreshold.setDescription('This trap is sent when the frame count has exceeded the specified threshold value.')
lineErrorsStnThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,567)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshLineErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
if mibBuilder.loadTexts: lineErrorsStnThreshold.setDescription('This trap is sent when the line errors have exceeded the specified threshold value for the station.')
internalErrorsStnThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,568)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshInternalErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
if mibBuilder.loadTexts: internalErrorsStnThreshold.setDescription('This trap is sent when the Lost internal errors have exceeded the specified threshold value for the station.')
burstErrorsStnThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,569)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshBurstErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
if mibBuilder.loadTexts: burstErrorsStnThreshold.setDescription('This trap is sent when the Lost burst errors have exceeded the specified threshold value for the station.')
acErrorsStnThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,570)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshACErrsThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
if mibBuilder.loadTexts: acErrorsStnThreshold.setDescription('This trap is sent when address/copied errors have exceeded the specified threshold value for the station.')
receiverCongestionStnThreshold = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,571)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshRcvrCongestThreshold"), ("DOT5-LOG-MIB", "tRingAlarmsRingTimebase"), ("DOT5-LOG-MIB", "tRingAlarmsStnThrshAddress"))
if mibBuilder.loadTexts: receiverCongestionStnThreshold.setDescription('This trap is sent when receiver congestion errors have exceeded the specified threshold value for the station.')
ringSpeedPortFaulted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,572)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: ringSpeedPortFaulted.setDescription('This trap is generated when a port enters the ring speed fault state due to a station or ring port attaching to the port at a different speed than the port is configured for.')
ringSpeedPortFaultedCleared = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,573)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: ringSpeedPortFaultedCleared.setDescription('This trap is generated when a port leaves the ring speed fault state.')
tpimInserted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,574)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: tpimInserted.setDescription('This trap is generated when a TPIM is installed.')
tpimRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,575)).setObjects(("CHASSIS-MIB", "chSlotID"), ("DOT5-LOG-MIB", "tRingPortGrpId"), ("DOT5-LOG-MIB", "tRingPortMgmtPortId"))
if mibBuilder.loadTexts: tpimRemoved.setDescription('This trap is generated when a TPIM is removed.')
neighborNotificationInc = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,576)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: neighborNotificationInc.setDescription('This trap is sent each time the neighbor notification (ring poll) does not complete.')
fltRecoveryOscillation = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,577)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fltRecoveryOscillation.setDescription('This trap is sent when the ring has oscillated (in and out of beaconing) when beacon recovery is enabled. The ring is considered oscillating if it has failed 21 secs after recovering from the previous.')
ringPollFailureEventCorrected = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,578)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingMgmtStnAddress"), ("DOT5-LOG-MIB", "tRingMgmtStnDNA"), ("DOT5-LOG-MIB", "tRingMgmtStnBoard"), ("DOT5-LOG-MIB", "tRingMgmtStnPort"))
if mibBuilder.loadTexts: ringPollFailureEventCorrected.setDescription('This trap is sent after the management module successfully recovered the Ring Poll Failure condition.')
ringPollFailureEventNotCorrected = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,579)).setObjects(("IF-MIB", "ifIndex"), ("DOT5-LOG-MIB", "tRingMgmtStnAddress"))
if mibBuilder.loadTexts: ringPollFailureEventNotCorrected.setDescription('This trap is sent after the management module has failed to recover the Ring Poll Failure condition. The interesting information includes the interface number and the MAC address of the last successful ring poll station.')
sPVP = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,580))
if mibBuilder.loadTexts: sPVP.setDescription('This trap indicates that a SPVP was rerouted. The variables indicates the address of a rerouted spvp, the time stamp of when rerouting occurred, and the cause of rerouting. The cause codes are as follows: Unallocated (unassigned) number = 1 No route to specified transit network = 2 No route to destination = 3 Normal call clearing = 16 User busy = 17 No user responding = 18 Call rejected = 21 Number changed = 22 User rejects all calls with calling line identification restriction (CLIR) = 23 Destination out of order = 27 Invalid number format (address incomplete) = 28 Response to STATUS ENQUIRY = 30 Normal, unspecified = 31 Requested VPCI/VCI not available = 35 VPCI/VCI assignment failure = 36 User cell rate not available = 37 Network out of order = 38 Temporary failure = 41 Access information discarded = 43 No VPCI/VCI available = 45 Resource unavailable, unspecified = 47 Quality of Service unavailable = 49 Bearer capability not authorized = 57 Bearer capability not presently available = 58 Service or option not available, unspecified = 63 Bearer capability not implemented = 65 Unsupported combination of traffic parameters = 73 AAL parameters cannot be supported = 78 Invalid call reference value = 81 Identified channel does not exist = 82 Incompatible destination = 88 Invalid endpoint reference = 89 Invalid transit network selection = 91 Too many pending add party requests = 92 Mandatory information element missing = 96 Message type non-existent or not implemented = 97 Information element non existent or not implemented = 99 Invalid information element contents = 100 Message not compatible with call state = 101 Recovery on timer expiry = 102 Incorrect message length = 104 Protocol error, unspecified = 111')
sPVC = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,581))
if mibBuilder.loadTexts: sPVC.setDescription('This trap indicates that a SPVC was rerouted. The variables indicates the address of a rerouted spvc, the time stamp of when rerouting occurred, and the cause of rerouting. The cause codes are as follows: Unallocated (unassigned) number = 1 No route to specified transit network = 2 No route to destination = 3 Normal call clearing = 16 User busy = 17 No user responding = 18 Call rejected = 21 Number changed = 22 User rejects all calls with calling line identification restriction (CLIR) = 23 Destination out of order = 27 Invalid number format (address incomplete) = 28 Response to STATUS ENQUIRY = 30 Normal, unspecified = 31 Requested VPCI/VCI not available = 35 VPCI/VCI assignment failure = 36 User cell rate not available = 37 Network out of order = 38 Temporary failure = 41 Access information discarded = 43 No VPCI/VCI available = 45 Resource unavailable, unspecified = 47 Quality of Service unavailable = 49 Bearer capability not authorized = 57 Bearer capability not presently available = 58 Service or option not available, unspecified = 63 Bearer capability not implemented = 65 Unsupported combination of traffic parameters = 73 AAL parameters cannot be supported = 78 Invalid call reference value = 81 Identified channel does not exist = 82 Incompatible destination = 88 Invalid endpoint reference = 89 Invalid transit network selection = 91 Too many pending add party requests = 92 Mandatory information element missing = 96 Message type non-existent or not implemented = 97 Information element non existent or not implemented = 99 Invalid information element contents = 100 Message not compatible with call state = 101 Recovery on timer expiry = 102 Incorrect message length = 104 Protocol error, unspecified = 111')
deviceDiagnosticMessage = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,703))
if mibBuilder.loadTexts: deviceDiagnosticMessage.setDescription('This trap is generated for diagnostic purposes.')
bridgeStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,769)).setObjects(("CTRON-BDG-MIB", "bdgdeviceStatus"))
if mibBuilder.loadTexts: bridgeStatusChanged.setDescription('This trap is generated when the status of the bridge changes.')
aquiredDatabaseFull = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,770))
if mibBuilder.loadTexts: aquiredDatabaseFull.setDescription("This trap is generated when the acquired portion of the bridge's filtering database is full.")
boardPortActivate = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,849)).setObjects(("CTRON-FRONTPANEL-MIB", "ctFpRedundActivePort"))
if mibBuilder.loadTexts: boardPortActivate.setDescription('This Trap is generated when Front Panel Redundancy changes the active port.')
boardNightVision = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,900))
if mibBuilder.loadTexts: boardNightVision.setDescription("This trap is generated when night vision turns off or on. If power to the device is lost, this trap is sent with a value of 0, indicating that power has been lost but the device is running on 'night vision'. If power is not restored within 10 minutes, the device shuts down completely. If power is restored in that time frame, the trap is sent with a value of 1 indicating as such.")
snmpLostContact = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1000)).setObjects(("DLM-MIB", "snmpPollDestination"), ("DLM-MIB", "snmpPollOwner"))
if mibBuilder.loadTexts: snmpLostContact.setDescription("A LostContact signifies that a the Cabletron hub has lost contact with the destination IP address host/device. This trap is only sent at the 'trap-wait' intervals. Note that this trap indicates a poll failure, not a threshold failure. Threshold alarms are generated independently. The snmpPollDestination indicates the lost device.")
snmpThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1001)).setObjects(("DLM-MIB", "snmpOIDDestination"), ("DLM-MIB", "snmpOIDOwner"), ("DLM-MIB", "snmpOIDSequence"), ("DLM-MIB", "snmpOIDObject"))
if mibBuilder.loadTexts: snmpThresholdTrap.setDescription('This trap signifies that an OID value/threshold comparison has failed. The snmpOIDObject specifies which Object Identifier and instance (destination IP address, owner IP address, and sequence number) was used to trigger the alarm condition. The snmpOIDDestination indicates the node address that failed the OID poll.')
snmpReestabContact = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1002)).setObjects(("DLM-MIB", "snmpPollDestination"), ("DLM-MIB", "snmpPollOwner"))
if mibBuilder.loadTexts: snmpReestabContact.setDescription('A ReestabContact signifies that a the Cabletron hub has reestablished contact with the destination IP address host/device. This trap is sent immediately after contact has been reestablished.')
ctBroadcastThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1003)).setObjects(("CT-BROADCAST-MIB", "ctBroadcastDesiredBroadcastThreshold"), ("CT-BROADCAST-MIB", "ctBroadcastCtlSlotID"), ("CT-BROADCAST-MIB", "ctBroadcastCtlInterface"))
if mibBuilder.loadTexts: ctBroadcastThresholdReached.setDescription('This trap is generated when the configured broadcast threshold on a port is reached and will include the slot number and port number the threshold was reached on.')
ctLecStatus = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1004)).setObjects(("LAN-EMULATION-CLIENT-MIB", "lecRowStatus"))
if mibBuilder.loadTexts: ctLecStatus.setDescription('This trap is generated when the operational state of the LAN Emulation Client has changed.')
fddiPortConnectStateChange = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1024)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibPORTIndex"), ("FDDI-SMT73-MIB", "fddimibPORTConnectState"))
if mibBuilder.loadTexts: fddiPortConnectStateChange.setDescription('This trap is generated for FDDI port connection state changes. The variables are found in IETF FDDI MIB RFC-1512.')
fddiSMTMasterPortIncrease = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1025)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibSMTMasterCts"))
if mibBuilder.loadTexts: fddiSMTMasterPortIncrease.setDescription('This trap is generated whenever there is an increase in the number of SMT master ports.')
fddiSMTMasterPortDecrease = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1026)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibSMTMasterCts"))
if mibBuilder.loadTexts: fddiSMTMasterPortDecrease.setDescription('This trap is generated anytime there is a decrease in the number of SMT master ports.')
fddiPortAction = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1027)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibPORTIndex"), ("FDDI-SMT73-MIB", "fddimibPORTAction"))
if mibBuilder.loadTexts: fddiPortAction.setDescription('This trap is generated for every action against a FDDI port. The variables are found in IETF FDDI MIB RFC-1512.')
fddiPortLerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1028)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibPORTIndex"), ("FDDI-SMT73-MIB", "fddimibPORTLerEstimate"))
if mibBuilder.loadTexts: fddiPortLerAlarm.setDescription('This trap is generated when the long term link error rate, fddimibPORTLerEstimate, crosses the fddimibPORTLerAlarm threshold. The variables are found in IETF FDDI MIB RFC-1512.')
fddiModuleFNBbypassed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1030)).setObjects(("CHASSIS-MIB", "chSlotID"))
if mibBuilder.loadTexts: fddiModuleFNBbypassed.setDescription('This trap is generated when a FDDI module is bypassed on the FNB.')
fddiModuleFNBinserted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1031)).setObjects(("CHASSIS-MIB", "chSlotID"))
if mibBuilder.loadTexts: fddiModuleFNBinserted.setDescription('This trap is generated when a FDDI module is inserted on the FNB.')
fddiMACRMTState = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1032)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibMACIndex"), ("FDDI-SMT73-MIB", "fddimibMACRMTState"))
if mibBuilder.loadTexts: fddiMACRMTState.setDescription('This trap is generated when there is a change in the FDDI ring state. The variables are found in IETF FDDI MIB RFC-1512.')
fddiMACCurrentPath = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1033)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibMACIndex"), ("FDDI-SMT73-MIB", "fddimibMACCurrentPath"))
if mibBuilder.loadTexts: fddiMACCurrentPath.setDescription('This trap is generated when there is a change in the insertion of the MAC to the FDDI ring. The variables are found in IETF FDDI MIB RFC-1512.')
fddiSMTCFState = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1034)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibSMTCFState"))
if mibBuilder.loadTexts: fddiSMTCFState.setDescription('This trap is generated when there is a change in the attachment configuration for the station or concentrator. The variables are found in IETF FDDI MIB RFC-1512.')
fddiRingTopology = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1035)).setObjects(("CTSMTMIB-MIB", "ctsmtmibRingSmtIndex"), ("CTSMTMIB-MIB", "ctsmtmibRingMacIndex"), ("CTSMTMIB-MIB", "ctsmtmibRingNodeIndex"), ("CTSMTMIB-MIB", "ctsmtmibRingMacAddr"), ("CTSMTMIB-MIB", "ctsmtmibRingTopology"))
if mibBuilder.loadTexts: fddiRingTopology.setDescription('This trap is generated when there is a change in the attachment configuration for the station or concentrator. It provides information additional to fddiSMTCFState, twisted ring conditions in particular. The variables are found in the Cabletron SMT MIB.')
fddiMACFrameErrorRatio = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1036)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibMACIndex"), ("FDDI-SMT73-MIB", "fddimibMACFrameErrorRatio"))
if mibBuilder.loadTexts: fddiMACFrameErrorRatio.setDescription('This trap is generated when the frame error ratio exceeds the frame error threshold, fddimibMACFrameErrorThreshold. The variables are found in IETF FDDI MIB RFC-1512.')
fddiMACDuplicateMACAddress = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1037)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTIndex"), ("FDDI-SMT73-MIB", "fddimibMACIndex"))
if mibBuilder.loadTexts: fddiMACDuplicateMACAddress.setDescription('This trap is generated when the SMT detects a duplicate MAC address on the ring.')
contLogicalChangesTrap = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1200)).setObjects(("CT-CONTAINER-MIB", "contTypeLogicalChanges"))
if mibBuilder.loadTexts: contLogicalChangesTrap.setDescription('This trap is generated when any change occurs in the contLogicalEntryTable group of the container MIB.')
contPhysicalChangesTrap = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1201)).setObjects(("CT-CONTAINER-MIB", "contTypePhysicalChanges"))
if mibBuilder.loadTexts: contPhysicalChangesTrap.setDescription('This trap is generated when any change occurs to contPhysicalEntryTable group of the container MIB.')
rtrIpEventLogChange = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1280)).setObjects(("CTRON-IP-ROUTER-MIB", "nwIpEventTextString"))
if mibBuilder.loadTexts: rtrIpEventLogChange.setDescription('This trap is generated for changes to IP event log.')
rtrIPXEventLogChange = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1281)).setObjects(("CTRON-IPX-ROUTER-MIB", "nwIpxEventTextString"))
if mibBuilder.loadTexts: rtrIPXEventLogChange.setDescription('This trap is generated whenever an entry is made to the router IPX event log for where nwIpEventSeverity has a value of highest(1).')
rtrDecIVEventLogChange = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1282)).setObjects(("CTRON-DECIV-ROUTER-MIB", "nwDecIVEventTextString"))
if mibBuilder.loadTexts: rtrDecIVEventLogChange.setDescription('This trap is generated whenever an entry is made to the router Dec Net IV event log.')
rtrAppleEventLogChange = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1283)).setObjects(("CTRON-AppleTalk-ROUTER-MIB", "nwAtEventTextString"))
if mibBuilder.loadTexts: rtrAppleEventLogChange.setDescription('This trap is generated whenever an entry is made to the router Apple Talk event log.')
rtrAppnEventLogChange = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1284)).setObjects(("CTRON-APPN-MIB", "nwAppnEventTextString"))
if mibBuilder.loadTexts: rtrAppnEventLogChange.setDescription('This trap is generated whenever an entry is made to the router APPN event log.')
nwAppnLsUp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1285)).setObjects(("CTRON-APPN-MIB", "nwAppnFwdLsName"))
if mibBuilder.loadTexts: nwAppnLsUp.setDescription('When a link station becomes active, a trap is generated. nwAppnFwdLsName identifies the link station name.')
nwAppnLsDown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1286)).setObjects(("CTRON-APPN-MIB", "nwAppnFwdLsName"), ("CTRON-APPN-MIB", "nwAppnFwdLsAdjCpName"), ("CTRON-APPN-MIB", "nwAppnFwdLsAdjCpType"))
if mibBuilder.loadTexts: nwAppnLsDown.setDescription('When a link station is deactivated, a trap is generated. nwAppnFwdLsName identifies the link station name, nwAppnFwdLsAdjCpName identifies the fully qualified CP name of the adjacent node and nwAppnFwdLsAdjCpType is the type of that node.')
sfpsNewUser = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1400)).setObjects(("CTRON-SFPS-DIRECTORY-MIB", "sfpsNodeTablePort"), ("CTRON-SFPS-DIRECTORY-MIB", "sfpsNodeTableBaseAddress"))
if mibBuilder.loadTexts: sfpsNewUser.setDescription('This trap is generated when a new user enters the SFPS fabric.')
sfpsDirectoryViolation = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1401)).setObjects(("CTRON-SFPS-TOPOLOGY-MIB", "sfpsDirViolationType"), ("CTRON-SFPS-TOPOLOGY-MIB", "sfpsDirViolationAOValue"))
if mibBuilder.loadTexts: sfpsDirectoryViolation.setDescription('This trap is generated when one of 6 violation types have occurred. 1 UserLock 2 RestrictedPort 3 IPNotLearned 4 IPInvalid 5 RestrictedMobility 6 UserLockSamePort ')
sfpsSourceBlocked = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1402)).setObjects(("CTRON-SFPS-BASE-MIB", "sfpsBlockSourceMAC"))
if mibBuilder.loadTexts: sfpsSourceBlocked.setDescription('This trap is generated when a user (source MAC address) has surpassed the Source Blocker thresholds and is being blocked from sending traffic on the network.')
sfpsFloodSurpressed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1403)).setObjects(("CTRON-SFPS-RESOLVE-MIB", "sfpsBlockResolveTableAOValue"))
if mibBuilder.loadTexts: sfpsFloodSurpressed.setDescription('A destination address has been unresolvable past the thresholds and is now being flood suppressed (only 1 per X seconds will pass).')
sfpsPortToStandby = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1404)).setObjects(("CTRON-SFPS-PORT-MIB", "sfpsInPortConfigPort"), ("CTRON-SFPS-PORT-MIB", "sfpsInPortConfigType"))
if mibBuilder.loadTexts: sfpsPortToStandby.setDescription('This trap is generated when a port has entered standby. There are different standby states: 9 STAND_BY (manually set) 14 STAND_BY_FCL (one way neighbor) 15 STAND_BY_LOOPED (self originated Hello seen on port) 16 STAND_BY_RTA (redundant access port is standby/backup ')
sfpsPortFromStandby = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1405)).setObjects(("CTRON-SFPS-PORT-MIB", "sfpsInPortConfigPort"), ("CTRON-SFPS-PORT-MIB", "sfpsInPortConfigType"))
if mibBuilder.loadTexts: sfpsPortFromStandby.setDescription('This trap is generated when a port that was in standby is now not in standby. Most common is that either a one-way neighbor situation is gone or a standby RA port is now primary.')
nmsMapAdded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1536)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
if mibBuilder.loadTexts: nmsMapAdded.setDescription('This trap is generated when the SOS Gateway agent detects that a third party NMS has added a new map to its database.')
nmsMapDeleted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1537)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
if mibBuilder.loadTexts: nmsMapDeleted.setDescription('This trap is generated when the SOS Gateway agent detects that a third party NMS has deleted a map from its database.')
nmsMapChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1538)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
if mibBuilder.loadTexts: nmsMapChanged.setDescription('This trap is generated when the SOS Gateway agent detects that a third party NMS has changed an attribute of a map in its database.')
nmsMapOpened = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1539)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
if mibBuilder.loadTexts: nmsMapOpened.setDescription('This trap is generated when the SOS Gateway agent detects that a third party NMS has opened a map.')
nmsMapClosed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1540)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
if mibBuilder.loadTexts: nmsMapClosed.setDescription('This trap is generated when the SOS Gateway agent detects that a third party NMS has closed a map.')
nmsElementAdded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1541)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
if mibBuilder.loadTexts: nmsElementAdded.setDescription('This trap is generated when the SOS Gateway agent detects that a third party NMS has added a new element to its database.')
nmsElementDeleted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1542)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
if mibBuilder.loadTexts: nmsElementDeleted.setDescription('This trap is generated when the SOS Gateway agent detects that a third party NMS has deleted an element from its database.')
nmsElementChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1543)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
if mibBuilder.loadTexts: nmsElementChanged.setDescription('This trap is generated when the SOS Gateway agent detects that a third party NMS has changed an attribute of an element in its database.')
nmsSymbolAdded = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1544)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
if mibBuilder.loadTexts: nmsSymbolAdded.setDescription('This trap is generated when the SOS Gateway agent detects that a third party NMS has added a new symbol to its database.')
nmsSymbolDeleted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1545)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
if mibBuilder.loadTexts: nmsSymbolDeleted.setDescription('This trap is generated when the SOS Gateway agent detects that a third party NMS has deleted a symbol from its database.')
nmsSymbolChanged = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1546)).setObjects(("RFC1271-MIB", "logEventIndex"), ("RFC1271-MIB", "logIndex"), ("RFC1271-MIB", "logTime"), ("RFC1271-MIB", "logDescription"))
if mibBuilder.loadTexts: nmsSymbolChanged.setDescription('This trap is generated when the SOS Gateway agent detects that a third party NMS has changed an attribute of a symbol in its database.')
wgPsInstalled = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1800)).setObjects(("CTRON-CHASSIS-MIB", "ctChasPowerSupplyNum"), ("CTRON-CHASSIS-MIB", "ctChasPowerSupplyType"))
if mibBuilder.loadTexts: wgPsInstalled.setDescription('This trap is generated when the device detects that the power supply has been installed.')
wgPsRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1801)).setObjects(("CTRON-CHASSIS-MIB", "ctChasPowerSupplyNum"))
if mibBuilder.loadTexts: wgPsRemoved.setDescription('This trap is generated when the device detects that the power supply has been removed.')
wgPsNormal = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1802)).setObjects(("CTRON-CHASSIS-MIB", "ctChasPowerSupplyNum"))
if mibBuilder.loadTexts: wgPsNormal.setDescription('This trap is generated when the device detects that the power supply has returned to normal.')
wgPsFail = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1803)).setObjects(("CTRON-CHASSIS-MIB", "ctChasPowerSupplyNum"))
if mibBuilder.loadTexts: wgPsFail.setDescription('This trap is generated when the device detects that the power supply has failed.')
wgPsRedundant = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1804)).setObjects(("CTRON-CHASSIS-MIB", "ctChasPowerSupplyNum"))
if mibBuilder.loadTexts: wgPsRedundant.setDescription('This trap is generated when the device detects that the power supply is in the redundant state.')
wgPsNotRedundant = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1805)).setObjects(("CTRON-CHASSIS-MIB", "ctChasPowerSupplyNum"))
if mibBuilder.loadTexts: wgPsNotRedundant.setDescription('This trap is generated when the device detects that the power supply is not in the redundant state.')
wgBoardInserted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1806)).setObjects(("CT-CONTAINER-MIB", "contPhysicalEntryID"))
if mibBuilder.loadTexts: wgBoardInserted.setDescription('This trap is generated when a module is inserted.')
wgBoardRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,1807)).setObjects(("CT-CONTAINER-MIB", "contPhysicalEntryID"))
if mibBuilder.loadTexts: wgBoardRemoved.setDescription('This trap is generated when a module is removed.')
aPCLineFail = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,4353))
if mibBuilder.loadTexts: aPCLineFail.setDescription('This trap is generated in the event of an AC utility line failure')
aPCLineFailRecovery = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,4354))
if mibBuilder.loadTexts: aPCLineFailRecovery.setDescription('This trap is generated when the UPS switches back to line, and only if the aPCLineFail trap was issued first')
aPCLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,4355))
if mibBuilder.loadTexts: aPCLowBattery.setDescription("This trap is generated in the event that the UPS' battery is found to be low")
aPCLowBatteryRecovery = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,4356))
if mibBuilder.loadTexts: aPCLowBatteryRecovery.setDescription("This trap is generated when the UPS' battery has charged above the low-battery point, and only if the aPCLowBattery trap was issued first")
aPCAbnormalCondition = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,4357))
if mibBuilder.loadTexts: aPCAbnormalCondition.setDescription('This trap is generated in the event that the UPS has entered an abnormal condition, such as an overload or trip on low battery. This trap is also sent, when the UPS is first turned on.')
aPCAbnormConditionRecovery = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,4358))
if mibBuilder.loadTexts: aPCAbnormConditionRecovery.setDescription('This trap is generated when the UPS has recovered from an abnormal condition, and only if the aPCAbnormalCondition trap was issued first')
aPCShuttingDown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,4359))
if mibBuilder.loadTexts: aPCShuttingDown.setDescription('This trap is generated in the event that the UPS has been ordered to shut itself, or the load, off over the serial line.')
emTermOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11001))
if mibBuilder.loadTexts: emTermOverVoltage.setDescription('This trap is generated when the term power bus is over voltage.')
emTermUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11002))
if mibBuilder.loadTexts: emTermUnderVoltage.setDescription('This trap is generated when the term power bus is under voltage.')
emTermNormalVoltage = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11003))
if mibBuilder.loadTexts: emTermNormalVoltage.setDescription('This trap is generated when the term power bus is at an acceptable voltage. It will only be sent out after a trap was sent to say that the term voltage was under or over.')
chHotTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11004))
if mibBuilder.loadTexts: chHotTemp.setDescription('This trap is generated because the chassis is hot.')
chWarmTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11005))
if mibBuilder.loadTexts: chWarmTemp.setDescription('This trap is generated because the chassis is warm.')
chCoolTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11006))
if mibBuilder.loadTexts: chCoolTemp.setDescription('This trap is generated because the chassis is cool.')
chColdTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11007))
if mibBuilder.loadTexts: chColdTemp.setDescription('This trap is generated because the chassis is cold.')
chTempOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11008))
if mibBuilder.loadTexts: chTempOK.setDescription('This trap is generated because the chassis has returned to normal after being warm, hot, cool or cold.')
chTempSensorBroken = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11009))
if mibBuilder.loadTexts: chTempSensorBroken.setDescription("This trap is generated when the chassis's temperature sensor is broken.")
chHumidityStaticRisk = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11010))
if mibBuilder.loadTexts: chHumidityStaticRisk.setDescription('This trap is generated when the chassis determines there is a humidity static risk.')
chHumidityNormal = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11011))
if mibBuilder.loadTexts: chHumidityNormal.setDescription('This trap is generated when the chassis determines the humidity has returned to normal after being moist or static risk.')
chHumidityMoist = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11012))
if mibBuilder.loadTexts: chHumidityMoist.setDescription('This trap is generated when the chassis determines there is a humidity moist risk.')
chHumiditySensorBroken = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11013))
if mibBuilder.loadTexts: chHumiditySensorBroken.setDescription('This trap is generated when the chassis determines the humidity sensor is broken.')
chMod1INBInstalled = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11014))
if mibBuilder.loadTexts: chMod1INBInstalled.setDescription('This trap is generated when the INV termination has been installed for module 1.')
chMod1INBFaulty = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11015))
if mibBuilder.loadTexts: chMod1INBFaulty.setDescription('This trap is generated when the INV termination is faulty for module 1.')
chMod1INBRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11016))
if mibBuilder.loadTexts: chMod1INBRemoved.setDescription('This trap is generated when the INV termination has been removed for module 1.')
chMod1INBNormal = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11017))
if mibBuilder.loadTexts: chMod1INBNormal.setDescription('This trap is generated when the INV termination (module 1) has returned to normal after already sending a trap to say it was faulty.')
chMod2INBInstalled = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11018))
if mibBuilder.loadTexts: chMod2INBInstalled.setDescription('This trap is generated when the INV termination has been installed for module 2.')
chMod2INBFaulty = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11019))
if mibBuilder.loadTexts: chMod2INBFaulty.setDescription('This trap is generated when the INV termination is faulty for module 2.')
chMod2INBRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11020))
if mibBuilder.loadTexts: chMod2INBRemoved.setDescription('This trap is generated when the INV termination has been removed for module 2.')
chMod2INBNormal = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11021))
if mibBuilder.loadTexts: chMod2INBNormal.setDescription('This trap is generated when the INV termination (module 2) has returned to normal after already sending a trap to say it was faulty.')
emFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11022))
if mibBuilder.loadTexts: emFanFailure.setDescription('This trap is generated when the chassis detects a fan failure.')
boardHotTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11023)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardHotTempShutdown.setDescription('This trap is generated because a board is hot and the board has shut itself down.')
boardWarmTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11024)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardWarmTemp.setDescription('This trap is generated because a board is warm.')
boardCoolTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11025)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardCoolTemp.setDescription('This trap is generated because a board is cool.')
boardColdTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11026)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardColdTemp.setDescription('This trap is generated because a board is cold.')
boardTempOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11027)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardTempOK.setDescription('This trap is generated because a board has returned to normal after being warm or hot.')
boardTempSensorBroken = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11028)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardTempSensorBroken.setDescription("This trap is generated when the board's temperature sensor is broken.")
boardTempHotNoAdmin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11029)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardTempHotNoAdmin.setDescription('This trap is generated because a board is hot.')
boardRelWarmTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11030)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardRelWarmTemp.setDescription("This trap is generated because a board's relative temp is warm.")
boardRelTempOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11031)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardRelTempOK.setDescription("This trap is generated because a board's relative temp has returned to normal after being warm or hot.")
boardRelTempHotNoAdmin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11032)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardRelTempHotNoAdmin.setDescription("This trap is generated because a board's relative temp is hot but it cannot shutdown. It will need to be turned off remotely.")
boardRelTempHotShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11033)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardRelTempHotShutdown.setDescription("This trap is generated when the board's relative temperature is hot and is being powered off.")
boardRelWarmTempMaxFans = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11034)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardRelWarmTempMaxFans.setDescription("This trap is generated because a board's relative temp is warm. The fans are on MAX.")
boardRelTempOKMaxFans = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11035)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardRelTempOKMaxFans.setDescription("This trap is generated because a board's relative temp has returned to normal after being warm or hot. The fans are on MAX.")
boardRelTempHotNoAdminMaxFans = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11036)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardRelTempHotNoAdminMaxFans.setDescription("This trap is generated because a board's relative temp is hot but it cannot shutdown. It will need to be turned off remotely. The fans are on MAX.")
boardRelTempHotShutdownMaxFans = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11037)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardRelTempHotShutdownMaxFans.setDescription("This trap is generated when the board's relative temperature is hot and is being powered off. The fans are on MAX.")
boardInputVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11038)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardInputVoltageOverMax.setDescription('This trap is generated because a boards input voltage is over max.')
boardInputVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11039)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardInputVoltageUnderMin.setDescription('This trap is generated because a boards input voltage is under minimum.')
boardInputVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11040)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardInputVoltageOK.setDescription('This trap is generated because a board input voltage has returned to normal after being over or under.')
boardOutputVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11041)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardOutputVoltageOverMax.setDescription('This trap is generated because a board output voltage is over MAX.')
boardOutputVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11042)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardOutputVoltageUnderMin.setDescription('This trap is generated because a board output voltage is under MIN.')
boardOutputVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11043)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardOutputVoltageOK.setDescription('This trap is generated because a board output voltage has returned to normal after being over or under.')
boardAuxVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11044)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardAuxVoltageOverMax.setDescription('This trap is generated because a boards auxiliary voltage is over MAX.')
boardAuxVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11045)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardAuxVoltageUnderMin.setDescription('This trap is generated because a board auxiliary voltage is under MIN.')
boardAuxVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11046)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardAuxVoltageOK.setDescription('This trap is generated because a board auxiliary voltage has returned to normal after being over or under.')
boardInputCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11047)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardInputCurrentOverMaxShutdown.setDescription('This trap is generated because a board input current is over MAX. The power supply has therefore been shutdown.')
boardOutputCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11048)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardOutputCurrentOverMaxShutdown.setDescription('This trap is generated because a boards output current is over MAX. The power supply has therefore been shutdown.')
boardInputCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11049)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardInputCurrentOverMax.setDescription('This trap is generated because a board input current is over MAX. The ability of the power supply to turn itself off has been disabled therefore outside intervention is needed.')
boardOutputCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11050)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardOutputCurrentOverMax.setDescription('This trap is generated because a board output current is over MAX. The ability of the power supply to turn itself off has been disabled therefore outside intervention is needed.')
boardRemotePowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11051)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardRemotePowerOff.setDescription('This trap is generated because the board is being powered off due to outside intervention.')
boardRemotePowerOn = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11052)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardRemotePowerOn.setDescription('This trap is generated because the board is being powered on due to outside intervention.')
boardRemotePowerReset = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11053)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardRemotePowerReset.setDescription('This trap is generated because the board is being reset due to outside intervention.')
boardPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11054)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardPowerOn.setDescription('This trap is generated because the board power has been powered on.')
boardPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11055)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardPowerOff.setDescription('This trap is generated because the board power has been powered off.')
boardPowerReset = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11056)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardPowerReset.setDescription('This trap is generated because the board has been reset.')
boardRemOverCurrentShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11057)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardRemOverCurrentShutdown.setDescription('This trap is generated because the board has been shutdown remotely due to being over current.')
boardRemPowerConservationShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11058)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardRemPowerConservationShutdown.setDescription('This trap is generated because the board has been shutdown remotely due to power conservation.')
boardRemTemperatureShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11059)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardRemTemperatureShutdown.setDescription("This trap is generated because the board has been shutdown remotely due to it's temperature.")
boardReqFPDisableDCDC = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11060)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardReqFPDisableDCDC.setDescription('This trap is generated because the board has had an unauthorized front panel disable.')
boardFPDisableDCDC = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11061)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardFPDisableDCDC.setDescription('This trap is generated because the board has been disabled through the front panel.')
boardReqFPEnableDCDC = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11062)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardReqFPEnableDCDC.setDescription('This trap is generated because the board has had an unauthorized front panel enable.')
boardFPEnableDCDC = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11063)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardFPEnableDCDC.setDescription('This trap is generated because the board has been enabled through the front panel.')
boardReqFPResetDCDC = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11064)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardReqFPResetDCDC.setDescription('This trap is generated because the board has had an unauthorized front panel reset.')
boardFPResetDCDC = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11065)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardFPResetDCDC.setDescription('This trap is generated because the board has been reset through the front panel.')
boardADConvertorFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11066)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardADConvertorFailure.setDescription("This trap is generated because the board's A/D converter is broken.")
boardPICFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11067)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardPICFailure.setDescription('This trap is generated because of a board PIC failure.')
boardPICOk = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11068)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardPICOk.setDescription('This trap is generated because the board PIC is now OK. This trap will only be sent AFTER a PIC failure trap has been generated.')
boardLLAPDupAddress = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11069)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardLLAPDupAddress.setDescription('This trap is generated when the board LLAP address already exists in this chassis.')
boardMailboxFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11070)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardMailboxFailure.setDescription('This trap is generated because of a board mailbox failure.')
boardMailboxOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11071)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardMailboxOK.setDescription('This trap is generated because the board mailbox is now OK.')
psACHotTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11072)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACHotTempShutdown.setDescription('This trap is generated because an AC power supply is hot and the power supply has shut itself down.')
psACWarmTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11073)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACWarmTemp.setDescription('This trap is generated because an AC power supply is warm.')
psACTempOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11074)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACTempOK.setDescription('This trap is generated because an AC power supply has returned to normal after being warm or hot.')
psACTempOKNoAdmin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11075)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACTempOKNoAdmin.setDescription('This trap is generated because an AC power supply has returned to normal after being shutdown remotely. It will need to be powerOn remotely.')
psACTempSensorBroken = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11076)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACTempSensorBroken.setDescription("This trap is generated when the AC power supply's temperature sensor is broken.")
psACTempHot = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11077)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACTempHot.setDescription('This trap is generated because an AC power supply is hot.')
psACInputVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11078)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACInputVoltageOverMax.setDescription('This trap is generated because an AC power supply input voltage is over max.')
psACInputVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11079)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACInputVoltageUnderMin.setDescription('This trap is generated because an AC power supply input voltage is under minimum.')
psACInputVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11080)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACInputVoltageOK.setDescription('This trap is generated because an AC power supply input voltage has returned to normal after being over or under.')
psACSystemVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11081)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACSystemVoltageOverMax.setDescription('This trap is generated because an AC power supply system voltage is over MAX.')
psACSystemVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11082)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACSystemVoltageUnderMin.setDescription('This trap is generated because an AC power supply system voltage is under MIN.')
psACSystemVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11083)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACSystemVoltageOK.setDescription('This trap is generated because an AC power supply system voltage has returned to normal after being over or under.')
psACLogicVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11084)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACLogicVoltageOverMax.setDescription('This trap is generated because an AC power supply logic voltage is over MAX.')
psACLogicVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11085)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACLogicVoltageUnderMin.setDescription('This trap is generated because an AC power supply logic voltage is under MIN.')
psACLogicVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11086)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACLogicVoltageOK.setDescription('This trap is generated because an AC power supply logic voltage has returned to normal after being over or under.')
psACTermVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11087)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACTermVoltageOverMax.setDescription('This trap is generated because an AC power supply term voltage is over MAX.')
psACTermVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11088)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACTermVoltageUnderMin.setDescription('This trap is generated because an AC power supply term voltage is under MIN.')
psACTermVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11089)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACTermVoltageOK.setDescription('This trap is generated because an AC power supply term voltage has returned to normal after being over or under.')
psACLogicSenseCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11090)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACLogicSenseCurrentOverMax.setDescription('This trap is generated because an AC power supply logic current is over MAX. The ability of the power supply to turn itself off has been disabled therefore outside intervention is needed.')
psACTermSenseCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11091)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACTermSenseCurrentOverMax.setDescription('This trap is generated because an AC power supply term current is over MAX. The ability of the power supply to turn itself off has been disabled therefore outside intervention is needed.')
psACInputCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11092)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACInputCurrentOverMaxShutdown.setDescription('This trap is generated because an AC power supply input current is over MAX. The power supply has therefore been shutdown.')
psACSystemCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11093)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACSystemCurrentOverMaxShutdown.setDescription('This trap is generated because an AC power supply system current is over MAX. The power supply has therefore been shutdown.')
psACLogicCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11094)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACLogicCurrentOverMaxShutdown.setDescription('This trap is generated because an AC power supply logic current is over MAX. The power supply has therefore been shutdown.')
psACTermCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11095)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACTermCurrentOverMaxShutdown.setDescription('This trap is generated because an AC power supply term current is over MAX. The power supply has therefore been shutdown.')
psACLogicSenseCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11096)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACLogicSenseCurrentOverMaxShutdown.setDescription('This trap is generated because an AC power supply logic sense current is over MAX. The power supply has therefore been shutdown.')
psACTermSenseCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11097)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACTermSenseCurrentOverMaxShutdown.setDescription('This trap is generated because an AC power supply term sense current is over MAX. The power supply has therefore been shutdown.')
psACInputCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11098)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACInputCurrentOverMax.setDescription('This trap is generated because an AC power supply input current is over MAX. The ability of the power supply to turn itself off has been disabled therefore outside intervention is needed.')
psACSystemCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11099)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACSystemCurrentOverMax.setDescription('This trap is generated because an AC power supply system current is over MAX. The ability of the power supply to turn itself off has been disabled therefore outside intervention is needed.')
psACLogicCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11100)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACLogicCurrentOverMax.setDescription('This trap is generated because an AC power supply logic current is over MAX. The ability of the power supply to turn itself off has been disabled therefore outside intervention is needed.')
psACTermCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11101)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACTermCurrentOverMax.setDescription('This trap is generated because an AC power supply term current is over MAX. The ability of the power supply to turn itself off has been disabled therefore outside intervention is needed.')
psACRemotePowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11102)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACRemotePowerOff.setDescription('This trap is generated because the AC power supply is being powered off due to outside intervention.')
psACSystemPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11103)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACSystemPowerOn.setDescription('This trap is generated because the AC power supply system power has been powered on.')
psACSystemPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11104)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACSystemPowerOff.setDescription('This trap is generated because the AC power supply system power has been powered off.')
psACLogicPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11105)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACLogicPowerOn.setDescription('This trap is generated because the AC power supply logic power has been powered on.')
psACLogicPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11106)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACLogicPowerOff.setDescription('This trap is generated because the AC power supply logic power has been powered off.')
psACTermPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11107)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACTermPowerOn.setDescription('This trap is generated because the AC power supply term power has been powered on.')
psACTermPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11108)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACTermPowerOff.setDescription('This trap is generated because the AC power supply term power has been powered off.')
psACRemOverCurrentShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11109)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACRemOverCurrentShutdown.setDescription('This trap is generated because the AC power supply has been shutdown remotely due to being over current.')
psACRemPowerConservationShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11110)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACRemPowerConservationShutdown.setDescription('This trap is generated because the AC power supply has been shutdown remotely due to power conservation.')
psACADConvertorFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11111)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACADConvertorFailure.setDescription('This trap is generated because the AC power supply A/D converter is broken.')
psACPICFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11112)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACPICFailure.setDescription('This trap is generated because of an AC power supply PIC failure.')
psACPICOk = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11113)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACPICOk.setDescription('This trap is generated because the AC power supply PIC is now OK. This trap will only be sent AFTER a PIC failure trap has been generated.')
psACLLAPDupAddress = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11114)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACLLAPDupAddress.setDescription('This trap is generated when the AC power supply LLAP address already exists in this chassis.')
psACFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11115)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACFanFailure.setDescription('This trap is generated because of an AC power supply fan failure.')
psACFanOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11116)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psACFanOK.setDescription('This trap is generated because the AC power supply fan is now OK. This trap will only be sent AFTER a fan failure trap has been generated.')
psDCHotTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11117)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCHotTempShutdown.setDescription('This trap is generated because an DC power supply is hot and the power supply has shut itself down.')
psDCWarmTemp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11118)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCWarmTemp.setDescription('This trap is generated because an DC power supply is warm.')
psDCTempOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11119)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCTempOK.setDescription('This trap is generated because an DC power supply has returned to normal after being warm or hot.')
psDCTempOKNoAdmin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11120)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCTempOKNoAdmin.setDescription('This trap is generated because an DC power supply has returned to normal after being shutdown remotely. It will need to be powerOn remotely.')
psDCTempSensorBroken = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11121)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCTempSensorBroken.setDescription("This trap is generated when the DC power supply's temperature sensor is broken.")
psDCTempHot = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11122)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCTempHot.setDescription('This trap is generated because an DC power supply is hot.')
psDCInputVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11123)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCInputVoltageOverMax.setDescription('This trap is generated because an DC power supply input voltage is over max.')
psDCInputVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11124)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCInputVoltageUnderMin.setDescription('This trap is generated because an DC power supply input voltage is under minimum.')
psDCInputVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11125)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCInputVoltageOK.setDescription('This trap is generated because an DC power supply input voltage has returned to normal after being over or under.')
psDCSystemVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11126)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCSystemVoltageOverMax.setDescription('This trap is generated because an DC power supply system voltage is over MAX.')
psDCSystemVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11127)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCSystemVoltageUnderMin.setDescription('This trap is generated because an DC power supply system voltage is under MIN.')
psDCSystemVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11128)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCSystemVoltageOK.setDescription('This trap is generated because an DC power supply system voltage has returned to normal after being over or under.')
psDCLogicVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11129)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCLogicVoltageOverMax.setDescription('This trap is generated because an DC power supply logic voltage is over MAX.')
psDCLogicVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11130)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCLogicVoltageUnderMin.setDescription('This trap is generated because an DC power supply logic voltage is under MIN.')
psDCLogicVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11131)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCLogicVoltageOK.setDescription('This trap is generated because an DC power supply logic voltage has returned to normal after being over or under.')
psDCTermVoltageOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11132)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCTermVoltageOverMax.setDescription('This trap is generated because an DC power supply term voltage is over MAX.')
psDCTermVoltageUnderMin = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11133)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCTermVoltageUnderMin.setDescription('This trap is generated because an DC power supply term voltage is under MIN.')
psDCTermVoltageOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11134)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCTermVoltageOK.setDescription('This trap is generated because an DC power supply term voltage has returned to normal after being over or under.')
psDCLogicSenseCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11135)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCLogicSenseCurrentOverMax.setDescription('This trap is generated because an DC power supply logic current is over MAX. The ability of the power supply to turn itself off has been disabled therefore outside intervention is needed.')
psDCTermSenseCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11136)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCTermSenseCurrentOverMax.setDescription('This trap is generated because an DC power supply term current is over MAX. The ability of the power supply to turn itself off has been disabled therefore outside intervention is needed.')
psDCInputCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11137)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCInputCurrentOverMaxShutdown.setDescription('This trap is generated because an DC power supply input current is over MAX. The power supply has therefore been shutdown.')
psDCSystemCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11138)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCSystemCurrentOverMaxShutdown.setDescription('This trap is generated because an DC power supply system current is over MAX. The power supply has therefore been shutdown.')
psDCLogicCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11139)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCLogicCurrentOverMaxShutdown.setDescription('This trap is generated because an DC power supply logic current is over MAX. The power supply has therefore been shutdown.')
psDCTermCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11140)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCTermCurrentOverMaxShutdown.setDescription('This trap is generated because an DC power supply term current is over MAX. The power supply has therefore been shutdown.')
psDCLogicSenseCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11141)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCLogicSenseCurrentOverMaxShutdown.setDescription('This trap is generated because an DC power supply logic sense current is over MAX. The power supply has therefore been shutdown.')
psDCTermSenseCurrentOverMaxShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11142)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCTermSenseCurrentOverMaxShutdown.setDescription('This trap is generated because an DC power supply term sense current is over MAX. The power supply has therefore been shutdown.')
psDCInputCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11143)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCInputCurrentOverMax.setDescription('This trap is generated because an DC power supply input current is over MAX. The ability of the power supply to turn itself off has been disabled therefore outside intervention is needed.')
psDCSystemCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11144)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCSystemCurrentOverMax.setDescription('This trap is generated because an DC power supply system current is over MAX. The ability of the power supply to turn itself off has been disabled therefore outside intervention is needed.')
psDCLogicCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11145)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCLogicCurrentOverMax.setDescription('This trap is generated because an DC power supply logic current is over MAX. The ability of the power supply to turn itself off has been disabled therefore outside intervention is needed.')
psDCTermCurrentOverMax = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11146)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCTermCurrentOverMax.setDescription('This trap is generated because an DC power supply term current is over MAX. The ability of the power supply to turn itself off has been disabled therefore outside intervention is needed.')
psDCRemotePowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11147)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCRemotePowerOff.setDescription('This trap is generated because the DC power supply is being powered off due to outside intervention.')
psDCSystemPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11148)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCSystemPowerOn.setDescription('This trap is generated because the DC power supply system power has been powered on.')
psDCSystemPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11149)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCSystemPowerOff.setDescription('This trap is generated because the DC power supply system power has been powered off.')
psDCLogicPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11150)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCLogicPowerOn.setDescription('This trap is generated because the DC power supply logic power has been powered on.')
psDCLogicPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11151)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCLogicPowerOff.setDescription('This trap is generated because the DC power supply logic power has been powered off.')
psDCTermPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11152)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCTermPowerOn.setDescription('This trap is generated because the DC power supply term power has been powered on.')
psDCTermPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11153)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCTermPowerOff.setDescription('This trap is generated because the DC power supply term power has been powered off.')
psDCRemOverCurrentShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11154)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCRemOverCurrentShutdown.setDescription('This trap is generated because the DC power supply has been shutdown remotely due to being over current.')
psDCRemPowerConservationShutdown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11155)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCRemPowerConservationShutdown.setDescription('This trap is generated because the DC power supply has been shutdown remotely due to power conservation.')
psDCADConvertorFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11156)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCADConvertorFailure.setDescription('This trap is generated because the DC power supply A/D converter is broken.')
psADPICFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11157)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psADPICFailure.setDescription('This trap is generated because of an DC power supply PIC failure.')
psADPICOk = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11158)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psADPICOk.setDescription('This trap is generated because the DC power supply PIC is now OK. This trap will only be sent AFTER a PIC failure trap has been generated.')
psADLLAPDupAddress = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11159)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psADLLAPDupAddress.setDescription('This trap is generated when the DC power supply LLAP address already exists in this chassis.')
psADFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11160)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psADFanFailure.setDescription('This trap is generated because of an DC power supply fan failure.')
psDCFanOK = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11161)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psDCFanOK.setDescription('This trap is generated because the DC power supply fan is now OK. This trap will only be sent AFTER a fan failure trap has been generated.')
psADConvertorFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11162)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotID"))
if mibBuilder.loadTexts: psADConvertorFailure.setDescription('This trap is generated because the power supply A/D converter is broken.')
psPicFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11163)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotID"))
if mibBuilder.loadTexts: psPicFailure.setDescription('This trap is generated because of a power supply PIC failure.')
psPICok = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11164)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotID"))
if mibBuilder.loadTexts: psPICok.setDescription('This trap is generated because the power supply PIC is now OK. This trap will only be sent AFTER a PIC failure trap has been generated.')
psLLAPDupAddress = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11165)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotID"))
if mibBuilder.loadTexts: psLLAPDupAddress.setDescription('This trap is generated when the power supply LLAP address already exists in this chassis.')
chEnvAmbientTempChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11166)).setObjects(("CTRON-ENVIRONMENT-MIB", "chEnvAmbientStatus"), ("CTRON-ENVIRONMENT-MIB", "chEnvAmbientTemp"))
if mibBuilder.loadTexts: chEnvAmbientTempChanges.setDescription('This trap is generated for each and every time the chassis ambient temperature crosses over a threshold value of either one of the chassis set thresholds chEnvAmbientHot, chEnvAmbientWarm, chEnvAmbientCool, or chEnvAmbientCold to another. This trap is also sent when the chassis temperature sensor is detected to be broken or not supported.')
chEnvHumidityChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11167)).setObjects(("CTRON-ENVIRONMENT-MIB", "chEnvHumidityStatus"), ("CTRON-ENVIRONMENT-MIB", "chEnvHumidity"))
if mibBuilder.loadTexts: chEnvHumidityChanges.setDescription('This trap is generated for each and every time the chassis humidity crosses a threshold value of either chEnvHumidityMoist, or chEnvHumidityDry, or when the humidity sensor is detected to be broken or not supported.')
boardEnvTempChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11168)).setObjects(("CTRON-ENVIRONMENT-MIB", "boardEnvSlotID"), ("CTRON-ENVIRONMENT-MIB", "boardEnvTemp"), ("CTRON-ENVIRONMENT-MIB", "boardEnvTempStatus"))
if mibBuilder.loadTexts: boardEnvTempChanges.setDescription('This trap is generated for each and every time the board temperature crosses over a threshold value of either one of the board set thresholds boardEnvTempHot, boardEnvTempWarm, boardEnvTempCool, or boardEnvTempCold to another. This trap is also sent when the board temperature sensor is detected to be broken or not supported.')
boardEnvTempRelChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11169)).setObjects(("CTRON-ENVIRONMENT-MIB", "boardEnvSlotID"), ("CTRON-ENVIRONMENT-MIB", "boardEnvTempRelStatus"), ("CTRON-ENVIRONMENT-MIB", "boardEnvTemp"), ("CTRON-ENVIRONMENT-MIB", "chEnvAmbientTemp"))
if mibBuilder.loadTexts: boardEnvTempRelChanges.setDescription('This trap is generated for each and every time the board temperature relative to the chassis ambient temperature crosses a threshold value of either boardEnvTempRelHot, or boardEnvTempRelWarm. This trap is also sent when either temperature sensor located on the board or on the chassis is detected to be broken or not supported.')
boardEnvTempMaxFanRelChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11170)).setObjects(("CTRON-ENVIRONMENT-MIB", "boardEnvSlotID"), ("CTRON-ENVIRONMENT-MIB", "boardEnvTempRelStatus"), ("CTRON-ENVIRONMENT-MIB", "boardEnvTemp"), ("CTRON-ENVIRONMENT-MIB", "chEnvAmbientTemp"))
if mibBuilder.loadTexts: boardEnvTempMaxFanRelChanges.setDescription('This trap is generated for each and every time the board temperature relative to the chassis ambient temperature crosses a threshold value of either boardEnvTempMaxFanRelHot, or boardEnvTempMaxFanRelWarm when all fans in the chassis are operating at there maximum speed. This trap is also sent when either temperature sensor located on the board or on the chassis is detected to be broken or not supported.')
chPowerMainVoltageChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11171)).setObjects(("CTRON-POWER-SUPPLY-MIB", "chPowerMainVoltageStatus"), ("CTRON-POWER-SUPPLY-MIB", "chPowerMainVoltage"))
if mibBuilder.loadTexts: chPowerMainVoltageChanges.setDescription('This trap is generated for each and every time the chassis main voltage rail deviates and causes the chPowerMainVoltageStatus to switch state from powerOK(1), overCurrent(2), overVoltage(3), or underVoltage(4) to another.')
chPowerDiagVoltageChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11172)).setObjects(("CTRON-POWER-SUPPLY-MIB", "chPowerDiagVoltageStatus"), ("CTRON-POWER-SUPPLY-MIB", "chPowerDiagVoltage"))
if mibBuilder.loadTexts: chPowerDiagVoltageChanges.setDescription('This trap is generated for each and every time the chassis diag voltage deviates and causes the chPowerDiagVoltageStatus to switch state from powerOK(1), overCurrent(2), overVoltage(3), or underVoltage(4) to another.')
termPowerVoltageChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11173)).setObjects(("CTRON-POWER-SUPPLY-MIB", "termPowerStatus"), ("CTRON-POWER-SUPPLY-MIB", "termPowerVoltage"))
if mibBuilder.loadTexts: termPowerVoltageChanges.setDescription("This trap is generated for each and every time the module's termination unit changes state and causes the termPowerStatus to switch from any states to either powerOK(1), overVoltage(3), or underVolatge(4) state.")
boardPowerVoltageChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11174)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotID"), ("CTRON-POWER-SUPPLY-MIB", "boardPowerID"), ("CTRON-POWER-SUPPLY-MIB", "boardPowerStatus"), ("CTRON-POWER-SUPPLY-MIB", "boardPowerVoltage"))
if mibBuilder.loadTexts: boardPowerVoltageChanges.setDescription("This trap is generated for each and every time the module's power line voltage deviates and causes the boardPowerStatus to switch from any states to either powerOK(1), overVoltage(4), or underVoltage(5) state.")
termPowerModule1Changes = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11175)).setObjects(("CTRON-POWER-SUPPLY-MIB", "termPowerModule1Status"))
if mibBuilder.loadTexts: termPowerModule1Changes.setDescription("This trap is generated for each and every time the module's front panel button changes state and causes the termPowerModule1Status to switch state from either one of normal(1), iNBaFault(2), iNBbFault(3), fault(4), termModuleNotInstalled(5) to another.")
termPowerModule2Changes = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11176)).setObjects(("CTRON-POWER-SUPPLY-MIB", "termPowerModule2Status"))
if mibBuilder.loadTexts: termPowerModule2Changes.setDescription("This trap is generated for each and every time the module's front panel button changes state and causes the termPowerModule2Status to switch state from either one of normal(1), iNBaFault(2), iNBbFault(3), fault(4), termModuleNotInstalled(5) to another.")
chEnvFanChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11177)).setObjects(("CTRON-ENVIRONMENT-MIB", "chEnvFanID"), ("CTRON-ENVIRONMENT-MIB", "chEnvFanStatus"), ("CTRON-ENVIRONMENT-MIB", "chEnvFanSpeed"))
if mibBuilder.loadTexts: chEnvFanChanges.setDescription('This trap is generated for each and every time the chassis fan changes over its status from either one value unknown(1), normal(2), testing(3), slow(4), inoperative(5), or off(6) to another.')
boardPowerCurrentChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11182)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotID"), ("CTRON-POWER-SUPPLY-MIB", "boardPowerID"), ("CTRON-POWER-SUPPLY-MIB", "boardPowerStatus"), ("CTRON-POWER-SUPPLY-MIB", "boardPowerCurrent"))
if mibBuilder.loadTexts: boardPowerCurrentChanges.setDescription("This trap is generated for each and every time the module's power line current deviates and causes the boardPowerStatus to switch from any states to powerOK(1), or overCurrent(3) state.")
boardPowerFrontPanelChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11183)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"), ("CTRON-POWER-SUPPLY-MIB", "boardPowerLocalAdminStatus"), ("CTRON-POWER-SUPPLY-MIB", "boardPowerLocalStatus"))
if mibBuilder.loadTexts: boardPowerFrontPanelChanges.setDescription("This trap is generated for each and every time the module's front panel button state changes, it is caused when the boardPowerLocalStatus switching state from either one of resetRequest(1), powerDownRequest(2), powerOnRequest(3), or normal(4) to another.")
boardPowerOperationalChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11184)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"), ("CTRON-POWER-SUPPLY-MIB", "boardPowerOperationalStatus"))
if mibBuilder.loadTexts: boardPowerOperationalChanges.setDescription("This trap is generated for each and every time the module's DC-DC converter power supply voltage deviates and causes the boardPowerOperationalStatus to switch state from powerOn(1), powerOff(2), reset(3), overVoltage(4), underVoltage(5), overCurrent(6), overCurrentShutdown(7), temperatureShutdown(8), remotePowerOff(9), powerConservationShutdown(10), or frontPanelPowerOff(11) to another.")
psEnvTempChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11185)).setObjects(("CTRON-ENVIRONMENT-MIB", "psEnvSlotID"), ("CTRON-ENVIRONMENT-MIB", "psEnvTempStatus"), ("CTRON-ENVIRONMENT-MIB", "psEnvTemp"))
if mibBuilder.loadTexts: psEnvTempChanges.setDescription('This trap is generated for each and every time the power supply temperature crosses over a threshold value of either one of the power supply set thresholds psEnvTempHot, psEnvTempWarm, psEnvTempCool, or psEnvTempCold to another. This trap is also sent when the power supply temperature sensor is detected to be broken or not supported.')
psEnvFanChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11186)).setObjects(("CTRON-ENVIRONMENT-MIB", "psEnvSlotID"), ("CTRON-ENVIRONMENT-MIB", "psEnvFanStatus"), ("CTRON-ENVIRONMENT-MIB", "psEnvFanSpeed"))
if mibBuilder.loadTexts: psEnvFanChanges.setDescription('This trap is generated for each and every time the power supply fan changes over its status from either one value unknown(1), normal(2), testing(3), slow(4), inoperative(5), or off(6) to another.')
psPowerVoltageChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11187)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotID"), ("CTRON-POWER-SUPPLY-MIB", "psPowerID"), ("CTRON-POWER-SUPPLY-MIB", "psPowerStatus"), ("CTRON-POWER-SUPPLY-MIB", "psPowerVoltage"))
if mibBuilder.loadTexts: psPowerVoltageChanges.setDescription("This trap is generated for each and every time the module's power line voltage deviates and causes the psPowerStatus to switch from any states to either powerOK(1), overVoltage(4), or underVoltage(5) state.")
psPowerCurrentChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11188)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotID"), ("CTRON-POWER-SUPPLY-MIB", "psPowerID"), ("CTRON-POWER-SUPPLY-MIB", "psPowerStatus"), ("CTRON-POWER-SUPPLY-MIB", "psPowerCurrent"))
if mibBuilder.loadTexts: psPowerCurrentChanges.setDescription("This trap is generated for each and every time the module's power line current deviates and causes the psPowerStatus to switch from any states to powerOK(1), or overCurrent(3) state.")
psPowerAdminChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11189)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotID"), ("CTRON-POWER-SUPPLY-MIB", "psPowerID"), ("CTRON-POWER-SUPPLY-MIB", "psPowerAdmin"))
if mibBuilder.loadTexts: psPowerAdminChanges.setDescription('This trap is generated for each and every time the power supply power line changes state from one operational mode to another switching between powerOn(1) and powerOff(2).')
psPowerOperationalChanges = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11190)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"), ("CTRON-POWER-SUPPLY-MIB", "psPowerOperationalStatus"))
if mibBuilder.loadTexts: psPowerOperationalChanges.setDescription("This trap is generated for each and every time the module's DC-DC converter power supply voltage deviates and causes the psPowerOperationalStatus to switch state from either one of powerOn(1), powerOff(2), reset(3), overVoltage(4), underVoltage(5), overCurrent(6), overCurrentShutdown(7), temperatureShutdown(8), or remotePowerOff(9) to another.")
boardInserted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11191)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardInserted.setDescription('This trap is generated when an MMACplus card is inserted in the chassis.')
boardRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11192)).setObjects(("CTRON-POWER-SUPPLY-MIB", "boardPowerSlotStatusID"))
if mibBuilder.loadTexts: boardRemoved.setDescription('This trap is generated when an MMACplus card is removed from the chassis.')
psInserted = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11193)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psInserted.setDescription('This trap is generated when an MMACplus power supply is inserted in the chassis.')
psRemoved = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11194)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psRemoved.setDescription('This trap is generated when an MMACplus power supply is removed from the chassis.')
psRedundant = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11195)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psRedundant.setDescription('This trap is generated when an MMACplus power supply has a redundant power supply')
psNotRedundant = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11196)).setObjects(("CTRON-POWER-SUPPLY-MIB", "chPowerLineMaxSupply"), ("CTRON-POWER-SUPPLY-MIB", "chPowerLineTotalSupply"))
if mibBuilder.loadTexts: psNotRedundant.setDescription('This trap is generated when an MMACplus power supply has no redundant power supply')
psNormal = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11197)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psNormal.setDescription('This trap is generated when an MMACplus board is transitioning to a normal state from a fault state')
psFault = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11198)).setObjects(("CTRON-POWER-SUPPLY-MIB", "psPowerSlotStatusID"))
if mibBuilder.loadTexts: psFault.setDescription('This trap is generated when an MMACplus power supply is not operational')
upsLineFail = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11200)).setObjects(("UPS2-MIB", "upsIndex"))
if mibBuilder.loadTexts: upsLineFail.setDescription('This trap is generated in the event of an AC utility line failure.')
upsLineFailRecovery = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11201)).setObjects(("UPS2-MIB", "upsIndex"))
if mibBuilder.loadTexts: upsLineFailRecovery.setDescription('This trap is generated when the UPS switches back to line, and only if the upsLineFail trap was issued first.')
upsLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11202)).setObjects(("UPS2-MIB", "upsIndex"))
if mibBuilder.loadTexts: upsLowBattery.setDescription("This trap is generated in the event that the UPS's battery is found to be low.")
upsLowBatteryRecovery = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11203)).setObjects(("UPS2-MIB", "upsIndex"))
if mibBuilder.loadTexts: upsLowBatteryRecovery.setDescription("This trap is generated when the UPS's battery has charged above the low-battery point, and only if the upsLowBattery trap was issued first.")
upsAbnormalCondition = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11204)).setObjects(("UPS2-MIB", "upsIndex"), ("UPS2-MIB", "upsStatusFault"), ("UPS2-MIB", "upsAddlFuncsStatusFault"))
if mibBuilder.loadTexts: upsAbnormalCondition.setDescription('This trap is generated in the event that the UPS has entered an abnormal condition, such as an overload or trip on low battery. This trap is also sent when the UPS is first turned on.')
upsAbnormalConditionRecovery = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11205)).setObjects(("UPS2-MIB", "upsIndex"))
if mibBuilder.loadTexts: upsAbnormalConditionRecovery.setDescription('This trap is generated when the UPS has recovered from an abnormal condition, and only if the upsAbnormalCondition trap was issued first.')
upsShuttingDown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11206)).setObjects(("UPS2-MIB", "upsIndex"))
if mibBuilder.loadTexts: upsShuttingDown.setDescription('This trap is generated in the event that the UPS has been ordered to shut itself, or the load, off over the serial line.')
upsReplaceBattery = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11207)).setObjects(("UPS2-MIB", "upsIndex"))
if mibBuilder.loadTexts: upsReplaceBattery.setDescription("This trap is generated when the UPS's battery test has determined that a UPS battery is unable to retain adequate charge. This trap will be generated every five hours until a new battery test is run or the UPS is turned off.")
upsExtMeasAlarm = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11208)).setObjects(("UPS2-MIB", "upsIndex"), ("UPS2-MIB", "upsExtMeasAlarmStatus"))
if mibBuilder.loadTexts: upsExtMeasAlarm.setDescription("This trap is generated when the External Measurement Unit has detected that an ambient temperature or humidity limit extreme has been exceeded, or that one of the contact closure inputs has changed from the selected `normal' state. In the case of multiple alarms, a trap is generated for every alarm condition detected. In addition, the trap is sent every two minutes whenever an alarm condition exists. It is discontinued when all alarm conditions are reset. This trap is sent only for alarm states that have been enabled.")
nvmpUdefTrap = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,11999))
if mibBuilder.loadTexts: nvmpUdefTrap.setDescription('This trap is generated when a new NVMP trap is sent that does not have an SNMP counterpart.')
activePortInATMRedundancyFailed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12000)).setObjects(("CTATM-CONFIG-MIB", "ctATMPhyRedundIfIndex"))
if mibBuilder.loadTexts: activePortInATMRedundancyFailed.setDescription('This trap will be generated when the active port, on a physical ATM interface that has redundancy enabled, has failed (become quiet).')
aTMRedundantPortActivated = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12001)).setObjects(("CTATM-CONFIG-MIB", "ctATMPhyRedundIfIndex"))
if mibBuilder.loadTexts: aTMRedundantPortActivated.setDescription('This trap indicates that a new port has been activated on a physical ATM interface that has redundancy enabled. This does not indicate that this port is usable, but that it is being tested as a possible replacement.')
aTMRedundanctPortTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12002)).setObjects(("CTATM-CONFIG-MIB", "ctATMPhyRedundIfIndex"))
if mibBuilder.loadTexts: aTMRedundanctPortTestFailed.setDescription('This trap will be generated when the phyRedundIfTestTOD or the phyRedundIfPerformTest has tested a port and determined that it is not usable. The port should be fixed prior to it being needed.')
aTMRedundPrimaryPortSkipped = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12003)).setObjects(("CTATM-CONFIG-MIB", "ctATMPhyRedundIfIndex"))
if mibBuilder.loadTexts: aTMRedundPrimaryPortSkipped.setDescription('This trap will be generated when redundancy finds that the primary port as designated be PhyRedundIfPrimaryPort is usable but cannot be used because PhyRedundIfPrimaryRevert is set to manual (2). This trap is generated only when redundancy is enabled (PhyRedundIfStatus is enable (1)) and the active port fails.')
atmCTMUp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12006))
if mibBuilder.loadTexts: atmCTMUp.setDescription('This trap signifies that the agent has detected the CTM operational. Connection set maps are allowed through the switch')
atmCTMDown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12007))
if mibBuilder.loadTexts: atmCTMDown.setDescription('This trap signifies that the agent has detected the CTM unoperational. A list of Cross Connect Ids will be sent indicating connections that need to be removed.')
atmVcCrossConnectOperChange = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12008)).setObjects(("ATM-MIB", "atmVcCrossConnectRowStatus"))
if mibBuilder.loadTexts: atmVcCrossConnectOperChange.setDescription('This trap signifies that the agent has detected a change in the operational status to down. A list of VC cross connections will be sent to be remapped.')
atmVpCrossConnectOperChange = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12009)).setObjects(("ATM-MIB", "atmVpCrossConnectRowStatus"))
if mibBuilder.loadTexts: atmVpCrossConnectOperChange.setDescription('This trap signifies that the agent has detected a change in the operational status to down. A list of VP cross connections will be sent to be remapped.')
atmNeighborSwitchUp = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12010)).setObjects(("ATM-MIB", "atmInterfaceMyNeighborIpAddress"), ("ATM-MIB", "atmInterfaceMyNeighborIfName"))
if mibBuilder.loadTexts: atmNeighborSwitchUp.setDescription('This trap signifies that the agent has detected a neighbor switch on a port.')
atmNeighborSwitchDown = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12011)).setObjects(("ATM-MIB", "atmInterfaceMyNeighborIpAddress"), ("ATM-MIB", "atmInterfaceMyNeighborIfName"))
if mibBuilder.loadTexts: atmNeighborSwitchDown.setDescription('This trap signifies that the agent has detected a lost neighbor switch on a port.')
callFailure = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12012)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: callFailure.setDescription('SPVC Call Failures.')
allocBwHiFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12013)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: allocBwHiFwd.setDescription('Allocated bandwidth for this port has exceeded the allocBwThresholdHiFwd.')
allocBwHiRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12014)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: allocBwHiRev.setDescription('Allocated bandwidth for this port has exceeded the allocBwThresholdHiRev.')
allocBwLoFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12015)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: allocBwLoFwd.setDescription('Allocated bandwidth for this port is below the allocBwThresholdLoFwd.')
allocBwLoRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12016)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: allocBwLoRev.setDescription('Allocated bandwidth for this port is below the allocBwThresholdLoRev.')
aggPcrFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12017)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: aggPcrFwd.setDescription('The total of all the aggregate peak cell rates for the VCs using this port exceeds the physical bandwidth of the port in the forward direction.')
aggPcrRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12018)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: aggPcrRev.setDescription('The total of all the aggregate peak cell rates for the VCs using this port exceeds the physical bandwidth of the port in the reverse direction.')
peakFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12019)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: peakFwd.setDescription('The peak allocated bandwidth has exceeded the peakBwTholdFwd value.')
peakRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12020)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: peakRev.setDescription('The peak allocated bandwidth has exceeded the peakBwTholdRev value.')
cbrConnCountTholdHiFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12021)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cbrConnCountTholdHiFwd.setDescription('Count of currently active constant bit rate connections exceeding the CBRConnectionCountTholdHiFwd threshold.')
cbrConnCountTholdHiRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12022)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cbrConnCountTholdHiRev.setDescription('Count of currently active CBR connections exceeding the CBRConnectionCountTholdHiRev threshold.')
cbrConnCountTholdLoFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12023)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cbrConnCountTholdLoFwd.setDescription('Count of currently active CBR connections exceeding the CBRConnectionCountTholdLoFwd threshold.')
cbrConnCountTholdLoRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12024)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cbrConnCountTholdLoRev.setDescription('Count of currently active CBR connections exceeding the CBRConnectionCountTholdLoRev threshold.')
cbrAllocBwTholdHiFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12025)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cbrAllocBwTholdHiFwd.setDescription('Bandwidth currently allocated which CBR exceeds the CBRAllocatedBwTholdHiFwd threshold.')
cbrAllocBwTholdHiRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12026)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cbrAllocBwTholdHiRev.setDescription('Bandwidth currently allocated which CBR exceeds the CBRAllocatedBwTholdHiRev threshold.')
cbrAllocBwTholdLoFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12027)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cbrAllocBwTholdLoFwd.setDescription('Bandwidth currently allocated which CBR exceeds the CBRAllocatedBwTholdLoFwd threshold.')
cbrAllocBwTholdLoRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12028)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cbrAllocBwTholdLoRev.setDescription('Bandwidth currently allocated which CBR exceeds the CBRAllocatedBwTholdLoRev threshold.')
vbrConnCountTholdHiFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12029)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vbrConnCountTholdHiFwd.setDescription('Count of currently active variable bit rate connections exceeding the VBRConnectionCountTholdHiFwd threshold.')
vbrConnCountTholdHiRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12030)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vbrConnCountTholdHiRev.setDescription('Count of currently active VBR connections exceeding the VBRConnectionCountTholdHiRev threshold.')
vbrConnCountTholdLoFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12031)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vbrConnCountTholdLoFwd.setDescription('Count of currently active VBR connections exceeding the VBRConnectionCountTholdLoFwd threshold.')
vbrConnCountTholdLoRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12032)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vbrConnCountTholdLoRev.setDescription('Count of currently active VBR connections exceeding the VBRConnectionCountTholdLoRev threshold.')
vbrAllocBwTholdHiFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12033)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vbrAllocBwTholdHiFwd.setDescription('Bandwidth currently allocated which VBR exceeds the VBRAllocatedBwTholdHiFwd threshold.')
vbrAllocBwTholdHiRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12034)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vbrAllocBwTholdHiRev.setDescription('Bandwidth currently allocated which VBR exceeds the VBRAllocatedBwTholdHiRev threshold.')
vbrAllocBwTholdLoFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12035)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vbrAllocBwTholdLoFwd.setDescription('Bandwidth currently allocated which VBR exceeds the VBRAllocatedBwTholdLoFwd threshold.')
vbrAllocBwTholdLoRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12036)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vbrAllocBwTholdLoRev.setDescription('Bandwidth currently allocated which VBR exceeds the VBRAllocatedBwTholdLoRev threshold.')
abrConnCountTholdHiFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12037)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: abrConnCountTholdHiFwd.setDescription('Count of currently active available bit rate connections exceeding the ABRConnectionCountTholdHiFwd threshold.')
abrConnCountTholdHiRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12038)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: abrConnCountTholdHiRev.setDescription('Count of currently active ABR connections exceeding the ABRConnectionCountTholdHiRev threshold.')
abrConnCountTholdLoFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12039)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: abrConnCountTholdLoFwd.setDescription('Count of currently active ABR connections exceeding the ABRConnectionCountTholdLoFwd threshold.')
abrConnCountTholdLoRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12040)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: abrConnCountTholdLoRev.setDescription('Count of currently active ABR connections exceeding the ABRConnectionCountTholdLoRev threshold.')
abrAllocBwTholdHiFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12041)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: abrAllocBwTholdHiFwd.setDescription('Bandwidth currently allocated which ABR exceeds the ABRAllocatedBwTholdHiFwd threshold.')
abrAllocBwTholdHiRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12042)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: abrAllocBwTholdHiRev.setDescription('Bandwidth currently allocated which ABR exceeds the ABRAllocatedBwTholdHiRev threshold.')
abrAllocBwTholdLoFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12043)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: abrAllocBwTholdLoFwd.setDescription('Bandwidth currently allocated which ABR exceeds the ABRAllocatedBwTholdLoFwd threshold.')
abrAllocBwTholdLoRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12044)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: abrAllocBwTholdLoRev.setDescription('Bandwidth currently allocated which ABR exceeds the ABRAllocatedBwTholdLoRev threshold.')
ubrConnCountTholdHiFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12045)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ubrConnCountTholdHiFwd.setDescription('Count of currently active unavailable bit rate connections exceeding the UBRConnectionCountTholdHiFwd threshold.')
ubrConnCountTholdHiRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12046)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ubrConnCountTholdHiRev.setDescription('Count of currently active UBR connections exceeding the UBRConnectionCountTholdHiRev threshold.')
ubrConnCountTholdLoFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12047)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ubrConnCountTholdLoFwd.setDescription('Count of currently active UBR connections exceeding the UBRConnectionCountTholdLoFwd threshold.')
ubrConnCountTholdLoRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12048)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ubrConnCountTholdLoRev.setDescription('Count of currently active UBR connections exceeding the UBRConnectionCountTholdLoRev threshold.')
ubrAllocBwTholdHiFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12049)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ubrAllocBwTholdHiFwd.setDescription('Bandwidth currently allocated which UBR exceeds the UBRAllocatedBwTholdHiFwd threshold.')
ubrAllocBwTholdLoFwd = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12051)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ubrAllocBwTholdLoFwd.setDescription('Bandwidth currently allocated which UBR exceeds the UBRAllocatedBwTholdLoFwd threshold.')
ubrAllocBwTholdLoRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12052)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ubrAllocBwTholdLoRev.setDescription('Bandwidth currently allocated which UBR exceeds the UBRAllocatedBwTholdLoRev threshold.')
ubrAllocBwTholdHiRev = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12053)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ubrAllocBwTholdHiRev.setDescription('Bandwidth currently allocated which UBR exceeds the UBRAllocatedBwTholdHiRev threshold.')
atmLecStatus = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,12050)).setObjects(("LAN-EMULATION-CLIENT-MIB", "lecRowStatus"))
if mibBuilder.loadTexts: atmLecStatus.setDescription('This trap is generated when the operational state of the LAN Emulation Client has changed.')
boardOperational = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,13000)).setObjects(("CHASSIS-MIB", "chSlotID"), ("CTRON-COMMON-MIB", "deviceType"))
if mibBuilder.loadTexts: boardOperational.setDescription('This trap will be generated when an entity detects that a module has become operational.')
boardNonOperational = NotificationType((1, 3, 6, 1, 4, 1, 52) + (0,13001)).setObjects(("CHASSIS-MIB", "chSlotID"))
if mibBuilder.loadTexts: boardNonOperational.setDescription('This trap will be generated when an entity detects that a module is no longer operational.')
mibBuilder.exportSymbols("CABLETRON-TRAPS", stationAdded=stationAdded, aPCLineFailRecovery=aPCLineFailRecovery, boardReqFPResetDCDC=boardReqFPResetDCDC, removeStnFailure=removeStnFailure, rptrPortGrpLearnStateChanged=rptrPortGrpLearnStateChanged, fddiModuleFNBbypassed=fddiModuleFNBbypassed, chTempOK=chTempOK, ringPollFailureEventNotCorrected=ringPollFailureEventNotCorrected, wgPsInstalled=wgPsInstalled, nmsSymbolDeleted=nmsSymbolDeleted, beaconRecoveryBoardBypassed=beaconRecoveryBoardBypassed, psDCTempSensorBroken=psDCTempSensorBroken, allocBwHiRev=allocBwHiRev, psPowerVoltageChanges=psPowerVoltageChanges, portSegmenting=portSegmenting, sfpsSourceBlocked=sfpsSourceBlocked, vbrAllocBwTholdLoRev=vbrAllocBwTholdLoRev, portTypeChanged=portTypeChanged, psPicFailure=psPicFailure, upsShuttingDown=upsShuttingDown, boardRemotePowerReset=boardRemotePowerReset, chMod1INBRemoved=chMod1INBRemoved, tpimRemoved=tpimRemoved, aggPcrFwd=aggPcrFwd, atmNeighborSwitchDown=atmNeighborSwitchDown, boardPortActivate=boardPortActivate, ringSpeedFault=ringSpeedFault, boardRelTempHotShutdownMaxFans=boardRelTempHotShutdownMaxFans, fddiPortConnectStateChange=fddiPortConnectStateChange, psACLogicVoltageUnderMin=psACLogicVoltageUnderMin, psACInputVoltageUnderMin=psACInputVoltageUnderMin, emTermNormalVoltage=emTermNormalVoltage, atmNeighborSwitchUp=atmNeighborSwitchUp, boardWarmTemp=boardWarmTemp, rptrLearnStateChanged=rptrLearnStateChanged, abrConnCountTholdHiFwd=abrConnCountTholdHiFwd, psACLogicVoltageOK=psACLogicVoltageOK, psACInputCurrentOverMaxShutdown=psACInputCurrentOverMaxShutdown, psACTermCurrentOverMax=psACTermCurrentOverMax, ubrAllocBwTholdHiFwd=ubrAllocBwTholdHiFwd, psDCTermCurrentOverMaxShutdown=psDCTermCurrentOverMaxShutdown, tokenErrorsTotalThreshold=tokenErrorsTotalThreshold, psADPICOk=psADPICOk, psACTempOK=psACTempOK, boardReqFPDisableDCDC=boardReqFPDisableDCDC, boardFPEnableDCDC=boardFPEnableDCDC, ringSecurityPortRemoved=ringSecurityPortRemoved, boardPowerOperationalChanges=boardPowerOperationalChanges, portDeInserted=portDeInserted, aTMRedundantPortActivated=aTMRedundantPortActivated, nmsSymbolAdded=nmsSymbolAdded, boardTempHotNoAdmin=boardTempHotNoAdmin, boardRemoved=boardRemoved, psDCInputVoltageOK=psDCInputVoltageOK, psACSystemPowerOff=psACSystemPowerOff, rptrCollsionThresholdExceeded=rptrCollsionThresholdExceeded, psDCLogicSenseCurrentOverMax=psDCLogicSenseCurrentOverMax, wgBoardRemoved=wgBoardRemoved, srcAddressPortLockStatusChange=srcAddressPortLockStatusChange, upsReplaceBattery=upsReplaceBattery, burstErrorsThreshold=burstErrorsThreshold, portLearnModeChanged=portLearnModeChanged, psDCTermVoltageUnderMin=psDCTermVoltageUnderMin, boardNonOperational=boardNonOperational, fddiSMTCFState=fddiSMTCFState, psACLogicPowerOff=psACLogicPowerOff, bridgeStatusChanged=bridgeStatusChanged, psDCSystemCurrentOverMaxShutdown=psDCSystemCurrentOverMaxShutdown, boardRelWarmTemp=boardRelWarmTemp, beaconState=beaconState, portViolation=portViolation, boardRemOverCurrentShutdown=boardRemOverCurrentShutdown, rptrLearnModeChanged=rptrLearnModeChanged, lineErrorsStnThreshold=lineErrorsStnThreshold, wgPsRedundant=wgPsRedundant, contLogicalChangesTrap=contLogicalChangesTrap, psDCTermSenseCurrentOverMax=psDCTermSenseCurrentOverMax, beaconingStateCleared=beaconingStateCleared, boardTempOK=boardTempOK, internalErrorsThreshold=internalErrorsThreshold, psACTermVoltageUnderMin=psACTermVoltageUnderMin, boardEnvTempChanges=boardEnvTempChanges, portCollsionThresholdExceeded=portCollsionThresholdExceeded, removeStationFailure=removeStationFailure, abrConnCountTholdLoFwd=abrConnCountTholdLoFwd, nmsMapAdded=nmsMapAdded, boardPowerOff=boardPowerOff, boardNightVision=boardNightVision, chMod2INBInstalled=chMod2INBInstalled, boardInserted=boardInserted, psDCSystemVoltageUnderMin=psDCSystemVoltageUnderMin, psACLLAPDupAddress=psACLLAPDupAddress, psDCTempHot=psDCTempHot, psDCRemPowerConservationShutdown=psDCRemPowerConservationShutdown, wgPsFail=wgPsFail, psACInputCurrentOverMax=psACInputCurrentOverMax, ringSpeedPortFaultedCleared=ringSpeedPortFaultedCleared, boardErrorThresholdExceeded=boardErrorThresholdExceeded, beaconStateCleared=beaconStateCleared, abrConnCountTholdHiRev=abrConnCountTholdHiRev, fanFail=fanFail, ctLecStatus=ctLecStatus, rtrAppnEventLogChange=rtrAppnEventLogChange, ringSpeedPortFaulted=ringSpeedPortFaulted, chHumidityMoist=chHumidityMoist, boardPICOk=boardPICOk, ubrAllocBwTholdLoRev=ubrAllocBwTholdLoRev, psACSystemVoltageOK=psACSystemVoltageOK, chWarmTemp=chWarmTemp, psDCADConvertorFailure=psDCADConvertorFailure, abrAllocBwTholdLoRev=abrAllocBwTholdLoRev, ringPurgeThreshold=ringPurgeThreshold, psDCLogicVoltageOverMax=psDCLogicVoltageOverMax, boardAuxVoltageOverMax=boardAuxVoltageOverMax, psDCLogicCurrentOverMax=psDCLogicCurrentOverMax, psACTermVoltageOK=psACTermVoltageOK, psDCLogicVoltageOK=psDCLogicVoltageOK, psDCLogicVoltageUnderMin=psDCLogicVoltageUnderMin, fddiMACFrameErrorRatio=fddiMACFrameErrorRatio, ctdlswTConnDown=ctdlswTConnDown, psACSystemVoltageOverMax=psACSystemVoltageOverMax, boardCoolTemp=boardCoolTemp, psADFanFailure=psADFanFailure, wgBoardInserted=wgBoardInserted, nvmpUdefTrap=nvmpUdefTrap, boardFPDisableDCDC=boardFPDisableDCDC, ringSpeedFaultCleared=ringSpeedFaultCleared, psPowerAdminChanges=psPowerAdminChanges, psPowerCurrentChanges=psPowerCurrentChanges, psRedundant=psRedundant, psDCSystemVoltageOverMax=psDCSystemVoltageOverMax, faultRecoveryBoardBypassed=faultRecoveryBoardBypassed, psACSystemCurrentOverMaxShutdown=psACSystemCurrentOverMaxShutdown, beaconRecoveryPortRemoved=beaconRecoveryPortRemoved, receiverCongestionStnThreshold=receiverCongestionStnThreshold, aPCLineFail=aPCLineFail, rptrLockStatusChanged=rptrLockStatusChanged, boardAuxVoltageUnderMin=boardAuxVoltageUnderMin, systemVoltageNormal=systemVoltageNormal, psACFanOK=psACFanOK, psACTermPowerOff=psACTermPowerOff, boardLLAPDupAddress=boardLLAPDupAddress, psACInputVoltageOverMax=psACInputVoltageOverMax, upsLowBattery=upsLowBattery, aPCLowBattery=aPCLowBattery, psDCWarmTemp=psDCWarmTemp, psADConvertorFailure=psADConvertorFailure, psDCTermSenseCurrentOverMaxShutdown=psDCTermSenseCurrentOverMaxShutdown, faultRecoveryPortRemoved=faultRecoveryPortRemoved, boardRemoval=boardRemoval, psDCSystemVoltageOK=psDCSystemVoltageOK, redundPortActivated=redundPortActivated, frameCountThreshold=frameCountThreshold, psACSystemPowerOn=psACSystemPowerOn, peakRev=peakRev, boardRelTempHotNoAdminMaxFans=boardRelTempHotNoAdminMaxFans, psACTermVoltageOverMax=psACTermVoltageOverMax, termPowerVoltageChanges=termPowerVoltageChanges, chColdTemp=chColdTemp, cbrAllocBwTholdLoFwd=cbrAllocBwTholdLoFwd, vbrAllocBwTholdLoFwd=vbrAllocBwTholdLoFwd, psDCLogicPowerOff=psDCLogicPowerOff, callFailure=callFailure, psDCHotTempShutdown=psDCHotTempShutdown, portSecureStateChanged=portSecureStateChanged, allocBwLoRev=allocBwLoRev, boardOutputVoltageUnderMin=boardOutputVoltageUnderMin, abrConnCountTholdLoRev=abrConnCountTholdLoRev, boardOperational=boardOperational, ringPortFaulted=ringPortFaulted, psACRemOverCurrentShutdown=psACRemOverCurrentShutdown, fddiMACCurrentPath=fddiMACCurrentPath, acErrorsStnThreshold=acErrorsStnThreshold, abrAllocBwTholdLoFwd=abrAllocBwTholdLoFwd, psEnvTempChanges=psEnvTempChanges, psDCSystemCurrentOverMax=psDCSystemCurrentOverMax, boardRelTempHotNoAdmin=boardRelTempHotNoAdmin, ubrAllocBwTholdHiRev=ubrAllocBwTholdHiRev, ringSpeedPortFault=ringSpeedPortFault, boardInputCurrentOverMaxShutdown=boardInputCurrentOverMaxShutdown, ringConfigurationChanged=ringConfigurationChanged, fddiModuleFNBinserted=fddiModuleFNBinserted, portLinkDown=portLinkDown, psACFanFailure=psACFanFailure, portGrpLearnModeChanged=portGrpLearnModeChanged, boardTrafficThresholdExceeded=boardTrafficThresholdExceeded, psFault=psFault, rptrBroadcastThresholdExceeded=rptrBroadcastThresholdExceeded, atmVpCrossConnectOperChange=atmVpCrossConnectOperChange, ctBroadcastThresholdReached=ctBroadcastThresholdReached, boardColdTemp=boardColdTemp, emFanFailure=emFanFailure, boardRemPowerConservationShutdown=boardRemPowerConservationShutdown, aTMRedundPrimaryPortSkipped=aTMRedundPrimaryPortSkipped, interfacePortRemoval=interfacePortRemoval, psADLLAPDupAddress=psADLLAPDupAddress, ubrConnCountTholdHiRev=ubrConnCountTholdHiRev, termPowerModule2Changes=termPowerModule2Changes, portSecurityViolation=portSecurityViolation, beaconingState=beaconingState, rptrTrafficThresholdExceeded=rptrTrafficThresholdExceeded, psDCTermVoltageOK=psDCTermVoltageOK, psDCRemOverCurrentShutdown=psDCRemOverCurrentShutdown, abrAllocBwTholdHiRev=abrAllocBwTholdHiRev, aquiredDatabaseFull=aquiredDatabaseFull, wgPsRemoved=wgPsRemoved, beaconRecoveryPortGroupBypassed=beaconRecoveryPortGroupBypassed, chPowerDiagVoltageChanges=chPowerDiagVoltageChanges, psACTermSenseCurrentOverMax=psACTermSenseCurrentOverMax, portTrafficThresholdExceeded=portTrafficThresholdExceeded, boardADConvertorFailure=boardADConvertorFailure, burstErrorsStnThreshold=burstErrorsStnThreshold, psDCTermPowerOn=psDCTermPowerOn, vbrAllocBwTholdHiFwd=vbrAllocBwTholdHiFwd, psDCTermPowerOff=psDCTermPowerOff, chMod1INBInstalled=chMod1INBInstalled, lostFramesTotalThreshold=lostFramesTotalThreshold, chHumidityNormal=chHumidityNormal, cbrAllocBwTholdLoRev=cbrAllocBwTholdLoRev, sfpsFloodSurpressed=sfpsFloodSurpressed, fddiPortLerAlarm=fddiPortLerAlarm, atmLecStatus=atmLecStatus, portLinkViolation=portLinkViolation, upsAbnormalCondition=upsAbnormalCondition, boardInputCurrentOverMax=boardInputCurrentOverMax, chMod2INBNormal=chMod2INBNormal, termPowerModule1Changes=termPowerModule1Changes, vbrConnCountTholdHiRev=vbrConnCountTholdHiRev, psACLogicPowerOn=psACLogicPowerOn, rptrErrorThresholdExceeded=rptrErrorThresholdExceeded, wgPsNotRedundant=wgPsNotRedundant, psDCTermVoltageOverMax=psDCTermVoltageOverMax, chEnvHumidityChanges=chEnvHumidityChanges, cbrConnCountTholdLoRev=cbrConnCountTholdLoRev, boardFPResetDCDC=boardFPResetDCDC, psDCInputVoltageUnderMin=psDCInputVoltageUnderMin, interfacePortInsertion=interfacePortInsertion, boardReqFPEnableDCDC=boardReqFPEnableDCDC, cbrConnCountTholdHiFwd=cbrConnCountTholdHiFwd, boardTempSensorBroken=boardTempSensorBroken, psACTempHot=psACTempHot, psRemoved=psRemoved, boardRelTempHotShutdown=boardRelTempHotShutdown, psLLAPDupAddress=psLLAPDupAddress, upsLineFail=upsLineFail, psACLogicSenseCurrentOverMaxShutdown=psACLogicSenseCurrentOverMaxShutdown, chEnvAmbientTempChanges=chEnvAmbientTempChanges, tpimInserted=tpimInserted, psDCTermCurrentOverMax=psDCTermCurrentOverMax, tokenErrorsThreshold=tokenErrorsThreshold, atmCTMDown=atmCTMDown, psACTermCurrentOverMaxShutdown=psACTermCurrentOverMaxShutdown, fanNormal=fanNormal, lineErrorsThreshold=lineErrorsThreshold)
mibBuilder.exportSymbols("CABLETRON-TRAPS", psACHotTempShutdown=psACHotTempShutdown, psDCTempOK=psDCTempOK, boardInputVoltageUnderMin=boardInputVoltageUnderMin, psDCFanOK=psDCFanOK, psDCSystemPowerOff=psDCSystemPowerOff, chMod1INBNormal=chMod1INBNormal, nwAppnLsDown=nwAppnLsDown, boardPowerOn=boardPowerOn, amErrorsThreshold=amErrorsThreshold, acErrorsThreshold=acErrorsThreshold, cbrConnCountTholdLoFwd=cbrConnCountTholdLoFwd, chMod2INBRemoved=chMod2INBRemoved, sPVC=sPVC, psDCInputVoltageOverMax=psDCInputVoltageOverMax, envTempWarm=envTempWarm, epimInsertion=epimInsertion, ubrConnCountTholdLoRev=ubrConnCountTholdLoRev, boardRelWarmTempMaxFans=boardRelWarmTempMaxFans, redundActivePortInCircuitFailed=redundActivePortInCircuitFailed, upsLowBatteryRecovery=upsLowBatteryRecovery, nmsElementDeleted=nmsElementDeleted, psPICok=psPICok, snmpReestabContact=snmpReestabContact, srcaddrTimeout=srcaddrTimeout, sfpsNewUser=sfpsNewUser, snmpLostContact=snmpLostContact, amErrorsTotalThreshold=amErrorsTotalThreshold, sfpsPortFromStandby=sfpsPortFromStandby, psACTempSensorBroken=psACTempSensorBroken, peakFwd=peakFwd, chPowerMainVoltageChanges=chPowerMainVoltageChanges, boardInputVoltageOverMax=boardInputVoltageOverMax, boardRemTemperatureShutdown=boardRemTemperatureShutdown, boardEnvTempMaxFanRelChanges=boardEnvTempMaxFanRelChanges, boardOutputVoltageOK=boardOutputVoltageOK, boardPowerVoltageChanges=boardPowerVoltageChanges, lostFramesThreshold=lostFramesThreshold, ubrAllocBwTholdLoFwd=ubrAllocBwTholdLoFwd, portInserted=portInserted, fltRecoveryOscillation=fltRecoveryOscillation, rptrPortLearnStateChanged=rptrPortLearnStateChanged, interfacePortLinkUp=interfacePortLinkUp, beaconStateThreshold=beaconStateThreshold, activePortInATMRedundancyFailed=activePortInATMRedundancyFailed, boardPowerReset=boardPowerReset, aPCLowBatteryRecovery=aPCLowBatteryRecovery, boardEnvTempRelChanges=boardEnvTempRelChanges, boardRelTempOKMaxFans=boardRelTempOKMaxFans, psDCInputCurrentOverMax=psDCInputCurrentOverMax, ringPortWrapCleared=ringPortWrapCleared, psNotRedundant=psNotRedundant, neighborNotificationInc=neighborNotificationInc, epimRemoval=epimRemoval, chMod2INBFaulty=chMod2INBFaulty, psDCSystemPowerOn=psDCSystemPowerOn, psDCInputCurrentOverMaxShutdown=psDCInputCurrentOverMaxShutdown, cbrAllocBwTholdHiRev=cbrAllocBwTholdHiRev, nmsElementAdded=nmsElementAdded, boardCollsionThresholdExceeded=boardCollsionThresholdExceeded, sPVP=sPVP, boardRingSpeedFaultCleared=boardRingSpeedFaultCleared, stnAdded=stnAdded, boardPowerCurrentChanges=boardPowerCurrentChanges, psACADConvertorFailure=psACADConvertorFailure, vbrConnCountTholdHiFwd=vbrConnCountTholdHiFwd, chBoardInsertion=chBoardInsertion, atmCTMUp=atmCTMUp, psACTempOKNoAdmin=psACTempOKNoAdmin, psACPICFailure=psACPICFailure, fddiMACRMTState=fddiMACRMTState, envTempHot=envTempHot, aPCAbnormalCondition=aPCAbnormalCondition, faultRecoveryOscillation=faultRecoveryOscillation, vbrConnCountTholdLoRev=vbrConnCountTholdLoRev, fddiRingTopology=fddiRingTopology, psDCLogicPowerOn=psDCLogicPowerOn, vbrAllocBwTholdHiRev=vbrAllocBwTholdHiRev, envTempNormal=envTempNormal, sfpsPortToStandby=sfpsPortToStandby, nmsMapDeleted=nmsMapDeleted, internalErrorsStnThreshold=internalErrorsStnThreshold, boardHotTempShutdown=boardHotTempShutdown, psACTermSenseCurrentOverMaxShutdown=psACTermSenseCurrentOverMaxShutdown, boardRingSpeedFault=boardRingSpeedFault, boardOutputCurrentOverMaxShutdown=boardOutputCurrentOverMaxShutdown, upsExtMeasAlarm=upsExtMeasAlarm, emTermUnderVoltage=emTermUnderVoltage, psACLogicSenseCurrentOverMax=psACLogicSenseCurrentOverMax, chEnvFanChanges=chEnvFanChanges, portLinkUp=portLinkUp, rtrDecIVEventLogChange=rtrDecIVEventLogChange, srcaddrNew=srcaddrNew, boardInputVoltageOK=boardInputVoltageOK, fddiSMTMasterPortIncrease=fddiSMTMasterPortIncrease, stnPortDeInserted=stnPortDeInserted, nmsMapChanged=nmsMapChanged, aPCShuttingDown=aPCShuttingDown, chHotTemp=chHotTemp, frameCountTotalThreshold=frameCountTotalThreshold, upsAbnormalConditionRecovery=upsAbnormalConditionRecovery, boardOutputCurrentOverMax=boardOutputCurrentOverMax, allocBwLoFwd=allocBwLoFwd, psDCTempOKNoAdmin=psDCTempOKNoAdmin, portBroadcastThresholdExceeded=portBroadcastThresholdExceeded, envVoltageLow=envVoltageLow, psACLogicCurrentOverMaxShutdown=psACLogicCurrentOverMaxShutdown, fpportActivated=fpportActivated, psACWarmTemp=psACWarmTemp, ringPurgeTotalThreshold=ringPurgeTotalThreshold, psACLogicCurrentOverMax=psACLogicCurrentOverMax, rtrIPXEventLogChange=rtrIPXEventLogChange, portViolationCleared=portViolationCleared, boardInsertion=boardInsertion, boardPICFailure=boardPICFailure, stnRemoved=stnRemoved, contPhysicalChangesTrap=contPhysicalChangesTrap, rtrAppleEventLogChange=rtrAppleEventLogChange, cbrAllocBwTholdHiFwd=cbrAllocBwTholdHiFwd, systemVoltageLow=systemVoltageLow, nmsSymbolChanged=nmsSymbolChanged, receiverCongestionThreshold=receiverCongestionThreshold, nmsMapOpened=nmsMapOpened, nmsMapClosed=nmsMapClosed, ringPortFaultCleared=ringPortFaultCleared, deviceDiagnosticMessage=deviceDiagnosticMessage, fddiPortAction=fddiPortAction, rtrIpEventLogChange=rtrIpEventLogChange, wgPsNormal=wgPsNormal, stationRemoved=stationRemoved, ringPortWrapped=ringPortWrapped, chHumiditySensorBroken=chHumiditySensorBroken, psACPICOk=psACPICOk, portErrorThresholdExceeded=portErrorThresholdExceeded, psADPICFailure=psADPICFailure, psNormal=psNormal, aPCAbnormConditionRecovery=aPCAbnormConditionRecovery, portLinkViolationCleared=portLinkViolationCleared, atmVcCrossConnectOperChange=atmVcCrossConnectOperChange, psACTermPowerOn=psACTermPowerOn, snmpThresholdTrap=snmpThresholdTrap, psDCLogicSenseCurrentOverMaxShutdown=psDCLogicSenseCurrentOverMaxShutdown, cbrConnCountTholdHiRev=cbrConnCountTholdHiRev, chCoolTemp=chCoolTemp, chHumidityStaticRisk=chHumidityStaticRisk, upsLineFailRecovery=upsLineFailRecovery, psInserted=psInserted, aTMRedundanctPortTestFailed=aTMRedundanctPortTestFailed, psACInputVoltageOK=psACInputVoltageOK, emTermOverVoltage=emTermOverVoltage, chTempSensorBroken=chTempSensorBroken, psPowerOperationalChanges=psPowerOperationalChanges, psEnvFanChanges=psEnvFanChanges, chMod1INBFaulty=chMod1INBFaulty, boardPowerFrontPanelChanges=boardPowerFrontPanelChanges, interfacePortLinkDown=interfacePortLinkDown, portUnsegementing=portUnsegementing, portViolationReset=portViolationReset, claimTokenTotalThreshold=claimTokenTotalThreshold, psACRemPowerConservationShutdown=psACRemPowerConservationShutdown, boardRemotePowerOff=boardRemotePowerOff, nwAppnLsUp=nwAppnLsUp, sfpsDirectoryViolation=sfpsDirectoryViolation, psACSystemCurrentOverMax=psACSystemCurrentOverMax, boardMailboxOK=boardMailboxOK, fddiMACDuplicateMACAddress=fddiMACDuplicateMACAddress, boardRemotePowerOn=boardRemotePowerOn, stnPortInserted=stnPortInserted, boardMailboxFailure=boardMailboxFailure, nmsElementChanged=nmsElementChanged, vbrConnCountTholdLoFwd=vbrConnCountTholdLoFwd, ringPollFailureEventCorrected=ringPollFailureEventCorrected, fddiSMTMasterPortDecrease=fddiSMTMasterPortDecrease, ringSpeedPortFaultCleared=ringSpeedPortFaultCleared, aggPcrRev=aggPcrRev, ctdlswTConnUp=ctdlswTConnUp, envVoltageNormal=envVoltageNormal, boardRelTempOK=boardRelTempOK, psACLogicVoltageOverMax=psACLogicVoltageOverMax, boardBroadcastThresholdExceeded=boardBroadcastThresholdExceeded, psDCRemotePowerOff=psDCRemotePowerOff, psACSystemVoltageUnderMin=psACSystemVoltageUnderMin, psDCLogicCurrentOverMaxShutdown=psDCLogicCurrentOverMaxShutdown, ubrConnCountTholdHiFwd=ubrConnCountTholdHiFwd, claimTokenThreshold=claimTokenThreshold, boardAuxVoltageOK=boardAuxVoltageOK, boardOutputVoltageOverMax=boardOutputVoltageOverMax, abrAllocBwTholdHiFwd=abrAllocBwTholdHiFwd, ubrConnCountTholdLoFwd=ubrConnCountTholdLoFwd, redundPortTestFailed=redundPortTestFailed, psACRemotePowerOff=psACRemotePowerOff, allocBwHiFwd=allocBwHiFwd)
