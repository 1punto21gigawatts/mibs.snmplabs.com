#
# PySNMP MIB module POWERHUB-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/POWERHUB-ATM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:41:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, Counter32, IpAddress, NotificationType, Counter64, MibIdentifier, NotificationType, ObjectIdentity, enterprises, Unsigned32, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "Counter32", "IpAddress", "NotificationType", "Counter64", "MibIdentifier", "NotificationType", "ObjectIdentity", "enterprises", "Unsigned32", "ModuleIdentity", "Gauge32")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
fore = MibIdentifier((1, 3, 6, 1, 4, 1, 326))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2))
lsd = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6))
lsdproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1))
lsdcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 2))
powerhub4k6k7k = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1))
powerbits = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 2))
alchassis = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1))
alatm = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2))
alAtmAMASlotTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8), )
if mibBuilder.loadTexts: alAtmAMASlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: alAtmAMASlotTable.setDescription('A table that contains information about AMA for ATM slot in the PowerHub 7000 chassis.')
alAtmAMASlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1), ).setIndexNames((0, "POWERHUB-ATM-MIB", "alAtmAMASlotNumber"))
if mibBuilder.loadTexts: alAtmAMASlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alAtmAMASlotEntry.setDescription('AMA information about a specific slot.')
alAtmAMASlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMASlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alAtmAMASlotNumber.setDescription('The slot number for which the following AMA information applies.')
alAtmAMAUserSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alAtmAMAUserSelect.setStatus('mandatory')
if mibBuilder.loadTexts: alAtmAMAUserSelect.setDescription('The user specified AMA for normal operation. Unless the user explicitly changes the AMA assignments, the software uses the primary AMA by default and the backup AMA only if the link to the primary AMA fails.')
alAtmAMAActualUse = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMAActualUse.setStatus('mandatory')
if mibBuilder.loadTexts: alAtmAMAActualUse.setDescription('The AMA that is actually being used. If the link to the primary AMA fails, this field shows that the backup AMA is in use, even though the primary AMA was selected for use.')
alAtmAMAUTLevPrime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMAUTLevPrime.setStatus('mandatory')
if mibBuilder.loadTexts: alAtmAMAUTLevPrime.setDescription('The PHY UTOPIA level in use by the PowerCell module and the Primary AMA. UTOPIA is an ATM standard for communication between the PowerCell module and the PHY (AMA). The level can be 1 or 2.')
alAtmAMAUTLevBack = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMAUTLevBack.setStatus('mandatory')
if mibBuilder.loadTexts: alAtmAMAUTLevBack.setDescription("The PHY UTOPIA level in use by the PowerCell module and the Backup AMA. UTOPIA is an ATM standard for communication between the PowerCell module and the PHY (AMA). The level can be 1 or 2. Returns value '1000' if Backup AMA is not installed")
alAtmAMAUTVerPrime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMAUTVerPrime.setStatus('mandatory')
if mibBuilder.loadTexts: alAtmAMAUTVerPrime.setDescription('The version of the PHY UTOPIA in use by the PowerCell module and the Primary AMA.')
alAtmAMAUTVerBack = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMAUTVerBack.setStatus('mandatory')
if mibBuilder.loadTexts: alAtmAMAUTVerBack.setDescription("The version of the PHY UTOPIA in use by the PowerCell module and the Backup AMA. Returns value '1000' if Backup AMA is not installed")
alAtmAMAProtoPrime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oc3-155Mbps", 1), ("ds3-45Mbps", 2), ("e3-39Mbps", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMAProtoPrime.setStatus('mandatory')
if mibBuilder.loadTexts: alAtmAMAProtoPrime.setDescription('The PHY-layer protocol in use on the Primary AMA. The protocol can be one of the following: 155M OC3 - 155 Mb/s using an OC-3 connector 45M DS3 - 45 Mb/s using a DS3 connector 39M E3 - 39 Mb/s using an E3 connector')
alAtmAMAProtoBack = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oc3-155Mbps", 1), ("ds3-45Mbps", 2), ("e3-39Mbps", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMAProtoBack.setStatus('mandatory')
if mibBuilder.loadTexts: alAtmAMAProtoBack.setDescription('The PHY-layer protocol in use on the Backup AMA. The protocol can be one of the following: 155M OC3 - 155 Mb/s using an OC-3 connector 45M DS3 - 45 Mb/s using a DS3 connector 39M E3 - 39 Mb/s using an E3 connector')
alAtmAMAMediaPrime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cat5utp", 1), ("coax", 2), ("mf", 3), ("sf", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMAMediaPrime.setStatus('mandatory')
if mibBuilder.loadTexts: alAtmAMAMediaPrime.setDescription('The type of cable connecting the Primary AMA to the ATM switch. The cable type can be one of the following: CAT5 UTP Coaxial Cable Multimode Fiber Single Mode Fiber')
alAtmAMAMediaBack = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cat5utp", 1), ("coax", 2), ("mf", 3), ("sf", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmAMAMediaBack.setStatus('mandatory')
if mibBuilder.loadTexts: alAtmAMAMediaBack.setDescription('The type of cable connecting the Backup AMA to the ATM switch. The cable type can be one of the following: CAT5 UTP Coaxial Cable Multimode Fiber Single Mode Fiber')
alAtmPreviousAMA = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmPreviousAMA.setStatus('mandatory')
if mibBuilder.loadTexts: alAtmPreviousAMA.setDescription('The AMA that is actually being used before link down or cut over. The initial value is notset.')
alAtmPreviousAMAType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oc3-155Mbps", 1), ("ds3-45Mbps", 2), ("e3-39Mbps", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmPreviousAMAType.setStatus('mandatory')
if mibBuilder.loadTexts: alAtmPreviousAMAType.setDescription('The PHY-layer protocol in use before link down or cut-over. The protocol can be one of the following: 155M OC3 - 155 Mb/s using an OC-3 connector 45M DS3 - 45 Mb/s using a DS3 connector 39M E3 - 39 Mb/s using an E3 connector.')
alAtmCurrentAMAType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oc3-155Mbps", 1), ("ds3-45Mbps", 2), ("e3-39Mbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alAtmCurrentAMAType.setStatus('mandatory')
if mibBuilder.loadTexts: alAtmCurrentAMAType.setDescription('The PHY-layer protocol actually in use. The protocol can be one of the following: 155M OC3 - 155 Mb/s using an OC-3 connector 45M DS3 - 45 Mb/s using a DS3 connector 39M E3 - 39 Mb/s using an E3 connector.')
atmLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2) + (0,1)).setObjects(("POWERHUB-ATM-MIB", "alAtmAMASlotNumber"), ("POWERHUB-ATM-MIB", "alAtmAMAActualUse"), ("POWERHUB-ATM-MIB", "alAtmCurrentAMAType"))
if mibBuilder.loadTexts: atmLinkUp.setDescription('A LinkUp trap is sent by the ATM interface while link up is dected. The slot id is reported because individual virtual port number is not applicable here.')
atmLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2) + (0,2)).setObjects(("POWERHUB-ATM-MIB", "alAtmAMASlotNumber"), ("POWERHUB-ATM-MIB", "alAtmPreviousAMA"), ("POWERHUB-ATM-MIB", "alAtmPreviousAMAType"))
if mibBuilder.loadTexts: atmLinkDown.setDescription('A LinkDown trap is sent by the ATM interface while link down is dected. The slot id is reported because individual virtual port number is not applicable here.')
atmCutOver = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2) + (0,3)).setObjects(("POWERHUB-ATM-MIB", "alAtmAMASlotNumber"), ("POWERHUB-ATM-MIB", "alAtmAMAActualUse"), ("POWERHUB-ATM-MIB", "alAtmCurrentAMAType"), ("POWERHUB-ATM-MIB", "alAtmPreviousAMA"), ("POWERHUB-ATM-MIB", "alAtmPreviousAMAType"))
if mibBuilder.loadTexts: atmCutOver.setDescription('A trap is sent if cut over is dected. The cut over can be from primary to back or vice versa.')
atmBootUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2) + (0,4)).setObjects(("POWERHUB-ATM-MIB", "alAtmAMASlotNumber"), ("POWERHUB-ATM-MIB", "alAtmAMAActualUse"), ("POWERHUB-ATM-MIB", "alAtmCurrentAMAType"))
if mibBuilder.loadTexts: atmBootUp.setDescription('A BootUp trap is sent by the ATM interface while startup is dected. The slot id is reported because individual virtual port number is not applicable here.')
atmFault = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 2) + (0,5)).setObjects(("POWERHUB-ATM-MIB", "alAtmAMASlotNumber"))
if mibBuilder.loadTexts: atmFault.setDescription('A Fault trap is sent by the ATM interface while a series of link down is dected. The slot id is reported because individual virtual port number is not applicable here.')
mibBuilder.exportSymbols("POWERHUB-ATM-MIB", lsdproducts=lsdproducts, atmLinkDown=atmLinkDown, alAtmAMAMediaPrime=alAtmAMAMediaPrime, atmCutOver=atmCutOver, atmFault=atmFault, lsd=lsd, alAtmPreviousAMAType=alAtmPreviousAMAType, alchassis=alchassis, alAtmAMAUTVerPrime=alAtmAMAUTVerPrime, alAtmAMAProtoBack=alAtmAMAProtoBack, alatm=alatm, alAtmAMAUTLevPrime=alAtmAMAUTLevPrime, alAtmAMAMediaBack=alAtmAMAMediaBack, alAtmAMAProtoPrime=alAtmAMAProtoPrime, alAtmAMASlotNumber=alAtmAMASlotNumber, alAtmPreviousAMA=alAtmPreviousAMA, alAtmAMASlotEntry=alAtmAMASlotEntry, systems=systems, atmBootUp=atmBootUp, alAtmAMAUTLevBack=alAtmAMAUTLevBack, powerbits=powerbits, alAtmAMASlotTable=alAtmAMASlotTable, fore=fore, powerhub4k6k7k=powerhub4k6k7k, alAtmAMAUTVerBack=alAtmAMAUTVerBack, alAtmAMAActualUse=alAtmAMAActualUse, alAtmAMAUserSelect=alAtmAMAUserSelect, atmLinkUp=atmLinkUp, alAtmCurrentAMAType=alAtmCurrentAMAType, lsdcommon=lsdcommon)
