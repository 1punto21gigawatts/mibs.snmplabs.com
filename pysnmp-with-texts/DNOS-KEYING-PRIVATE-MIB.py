#
# PySNMP MIB module DNOS-KEYING-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DNOS-KEYING-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:51:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
dnOS, = mibBuilder.importSymbols("DELL-REF-MIB", "dnOS")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Gauge32, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, IpAddress, Counter64, Bits, TimeTicks, NotificationType, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "IpAddress", "Counter64", "Bits", "TimeTicks", "NotificationType", "MibIdentifier", "Unsigned32")
DisplayString, RowPointer, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowPointer", "TextualConvention", "RowStatus")
fastPathKeyingPrivate = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 24))
fastPathKeyingPrivate.setRevisions(('2011-01-26 00:00', '2007-05-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathKeyingPrivate.setRevisionsDescriptions(('Add new Postal address change.', 'Dell branding related changes.',))
if mibBuilder.loadTexts: fastPathKeyingPrivate.setLastUpdated('201101260000Z')
if mibBuilder.loadTexts: fastPathKeyingPrivate.setOrganization('Dell, Inc.')
if mibBuilder.loadTexts: fastPathKeyingPrivate.setContactInfo('')
if mibBuilder.loadTexts: fastPathKeyingPrivate.setDescription('The Broadcom Private MIB for DNOS Keying Utility')
agentFeatureKeyingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 24, 1))
agentFeatureKeyingEnableKey = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 24, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFeatureKeyingEnableKey.setStatus('current')
if mibBuilder.loadTexts: agentFeatureKeyingEnableKey.setDescription('Hexadecimal Key-string entered to enable an advance functionality.')
agentFeatureKeyingDisableKey = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 24, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFeatureKeyingDisableKey.setStatus('current')
if mibBuilder.loadTexts: agentFeatureKeyingDisableKey.setDescription('Hexadecimal Key-string entered to disable an advance functionality.')
agentFeatureKeyingTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 24, 1, 3), )
if mibBuilder.loadTexts: agentFeatureKeyingTable.setStatus('current')
if mibBuilder.loadTexts: agentFeatureKeyingTable.setDescription('A table for license key and associated functionality. ')
agentFeatureKeyingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 24, 1, 3, 1), ).setIndexNames((0, "DNOS-KEYING-PRIVATE-MIB", "agentFeatureKeyingIndex"))
if mibBuilder.loadTexts: agentFeatureKeyingEntry.setStatus('current')
if mibBuilder.loadTexts: agentFeatureKeyingEntry.setDescription('Represents entry for key table')
agentFeatureKeyingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 24, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentFeatureKeyingIndex.setStatus('current')
if mibBuilder.loadTexts: agentFeatureKeyingIndex.setDescription('A value corresponding to a keyable feature.When this table is walked, only values associated with keyable features are returned.This value must be equivalent to valid value of agentFeatureKeyingIndex.')
agentFeatureKeyingName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 24, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFeatureKeyingName.setStatus('current')
if mibBuilder.loadTexts: agentFeatureKeyingName.setDescription('The abbreviated name of this component.This is also equivalent to agentFeatureKeyingName')
agentFeatureKeyingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 24, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFeatureKeyingStatus.setStatus('current')
if mibBuilder.loadTexts: agentFeatureKeyingStatus.setDescription('Returns a value of (1) if the feature is enabled for management, (2) if disabled.')
mibBuilder.exportSymbols("DNOS-KEYING-PRIVATE-MIB", agentFeatureKeyingDisableKey=agentFeatureKeyingDisableKey, fastPathKeyingPrivate=fastPathKeyingPrivate, agentFeatureKeyingEntry=agentFeatureKeyingEntry, PYSNMP_MODULE_ID=fastPathKeyingPrivate, agentFeatureKeyingTable=agentFeatureKeyingTable, agentFeatureKeyingIndex=agentFeatureKeyingIndex, agentFeatureKeyingName=agentFeatureKeyingName, agentFeatureKeyingEnableKey=agentFeatureKeyingEnableKey, agentFeatureKeyingStatus=agentFeatureKeyingStatus, agentFeatureKeyingGroup=agentFeatureKeyingGroup)
