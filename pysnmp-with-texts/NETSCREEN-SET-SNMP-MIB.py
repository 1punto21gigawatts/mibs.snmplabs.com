#
# PySNMP MIB module NETSCREEN-SET-SNMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-SET-SNMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
netscreenSettingMibModule, netscreenSetting = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenSettingMibModule", "netscreenSetting")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, ModuleIdentity, Gauge32, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, Unsigned32, MibIdentifier, Counter32, Bits, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "Gauge32", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "Unsigned32", "MibIdentifier", "Counter32", "Bits", "NotificationType", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
netscreenSetSnmpMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 7, 0, 9))
netscreenSetSnmpMibModule.setRevisions(('2004-05-03 00:00', '2004-03-03 00:00', '2003-11-10 00:00', '2001-09-28 00:00', '2001-05-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netscreenSetSnmpMibModule.setRevisionsDescriptions(('Modified copyright and contact information', 'Converted to SMIv2 by Longview Software', 'Correct spelling mistake', 'No Comment', 'Creation Date',))
if mibBuilder.loadTexts: netscreenSetSnmpMibModule.setLastUpdated('200405032022Z')
if mibBuilder.loadTexts: netscreenSetSnmpMibModule.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: netscreenSetSnmpMibModule.setContactInfo('Customer Support 1194 North Mathilda Avenue Sunnyvale, California 94089-1206 USA Tel: 1-800-638-8296 E-mail: customerservice@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: netscreenSetSnmpMibModule.setDescription('This module defines the object that are used to monitor SNMP setting')
nsSetSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 7, 9))
nsSetSnmpSysName = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpSysName.setStatus('current')
if mibBuilder.loadTexts: nsSetSnmpSysName.setDescription("SNMP agent's sysname.")
nsSetSnmpContact = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpContact.setStatus('current')
if mibBuilder.loadTexts: nsSetSnmpContact.setDescription('contact name.')
nsSetSnmpLocation = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpLocation.setStatus('current')
if mibBuilder.loadTexts: nsSetSnmpLocation.setDescription('SNMP agent Location.')
nsSetSnmpVPNEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 7, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpVPNEnable.setStatus('current')
if mibBuilder.loadTexts: nsSetSnmpVPNEnable.setDescription('Secure SNMP traffic via VPN encryption')
nsSetSnmpCommHostTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 7, 9, 5), )
if mibBuilder.loadTexts: nsSetSnmpCommHostTable.setStatus('current')
if mibBuilder.loadTexts: nsSetSnmpCommHostTable.setDescription('The snmp community and host table')
nsSetSnmpCommHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 7, 9, 5, 1), ).setIndexNames((0, "NETSCREEN-SET-SNMP-MIB", "nsSetSnmpCommHostIndex"))
if mibBuilder.loadTexts: nsSetSnmpCommHostEntry.setStatus('current')
if mibBuilder.loadTexts: nsSetSnmpCommHostEntry.setDescription('An entry containing community and hosts information')
nsSetSnmpCommHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpCommHostIndex.setStatus('current')
if mibBuilder.loadTexts: nsSetSnmpCommHostIndex.setDescription('A unique value for snmp community & host table. Its value ranges between 0 and 65535 and may not be contiguous.')
nsSetSnmpCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 9, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpCommunity.setStatus('current')
if mibBuilder.loadTexts: nsSetSnmpCommunity.setDescription('SNMP community name.')
nsSetSnmpHostInComm = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 9, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpHostInComm.setStatus('current')
if mibBuilder.loadTexts: nsSetSnmpHostInComm.setDescription('SNMP host ip address.')
nsSetSnmpWritePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpWritePermit.setStatus('current')
if mibBuilder.loadTexts: nsSetSnmpWritePermit.setDescription('Permission to write.')
nsSetSnmpTrapPermit = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpTrapPermit.setStatus('current')
if mibBuilder.loadTexts: nsSetSnmpTrapPermit.setDescription('Permission to receive trap.')
nsSetSnmpTrafficAlarmPermit = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 9, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetSnmpTrafficAlarmPermit.setStatus('current')
if mibBuilder.loadTexts: nsSetSnmpTrafficAlarmPermit.setDescription('Permission of including traffic alarm in trap.')
mibBuilder.exportSymbols("NETSCREEN-SET-SNMP-MIB", nsSetSNMP=nsSetSNMP, nsSetSnmpCommHostIndex=nsSetSnmpCommHostIndex, nsSetSnmpTrafficAlarmPermit=nsSetSnmpTrafficAlarmPermit, PYSNMP_MODULE_ID=netscreenSetSnmpMibModule, nsSetSnmpHostInComm=nsSetSnmpHostInComm, nsSetSnmpCommHostEntry=nsSetSnmpCommHostEntry, nsSetSnmpTrapPermit=nsSetSnmpTrapPermit, nsSetSnmpContact=nsSetSnmpContact, nsSetSnmpCommHostTable=nsSetSnmpCommHostTable, nsSetSnmpWritePermit=nsSetSnmpWritePermit, netscreenSetSnmpMibModule=netscreenSetSnmpMibModule, nsSetSnmpSysName=nsSetSnmpSysName, nsSetSnmpCommunity=nsSetSnmpCommunity, nsSetSnmpLocation=nsSetSnmpLocation, nsSetSnmpVPNEnable=nsSetSnmpVPNEnable)
