#
# PySNMP MIB module HUAWEI-QINQ-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-QINQ-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:48:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
VlanList, = mibBuilder.importSymbols("HUAWEI-L2IF-MIB", "VlanList")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, Counter64, TimeTicks, IpAddress, Counter32, Gauge32, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32, ModuleIdentity, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "TimeTicks", "IpAddress", "Counter32", "Gauge32", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32", "ModuleIdentity", "Integer32", "NotificationType")
MacAddress, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "RowStatus", "TextualConvention")
hwQinQ = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116))
if mibBuilder.loadTexts: hwQinQ.setLastUpdated('200612141629Z')
if mibBuilder.loadTexts: hwQinQ.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwQinQ.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwQinQ.setDescription('The QinQ MIB module is defined to manage the configuration under system or interface view.')
class BpduIndex(TextualConvention, Integer32):
    description = 'A list value for bpdu. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53))
    namedValues = NamedValues(("stp01", 1), ("pauseFrame", 2), ("reserved02", 3), ("reserved03", 4), ("reserved04", 5), ("reserved05", 6), ("reserved06", 7), ("reserved07", 8), ("stp02", 9), ("reserved08", 10), ("hgmp", 11), ("reserved09", 12), ("reserved10", 13), ("reserved11", 14), ("reserved12", 15), ("reserved13", 16), ("reserved14", 17), ("reserved15", 18), ("reserved16", 19), ("reserved17", 20), ("isisLevel01", 21), ("isisLevel02", 22), ("reserved18", 23), ("reserved19", 24), ("reserved20", 25), ("reserved21", 26), ("reserved22", 27), ("reserved23", 28), ("reserved24", 29), ("reserved25", 30), ("reserved26", 31), ("reserved27", 32), ("gmrp", 33), ("gvrp", 34), ("reserved28", 35), ("reserved29", 36), ("reserved30", 37), ("reserved31", 38), ("reserved32", 39), ("reserved33", 40), ("reserved34", 41), ("reserved35", 42), ("reserved36", 43), ("reserved37", 44), ("reserved38", 45), ("reserved39", 46), ("reserved40", 47), ("reserved41", 48), ("lacp", 49), ("cdp", 50), ("pagp", 51), ("udld", 52), ("vtp", 53))

hwQinQSystemBase = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 1))
hwQinQSystemWellKnowMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQSystemWellKnowMac.setStatus('current')
if mibBuilder.loadTexts: hwQinQSystemWellKnowMac.setDescription("The destination MAC address that is replaced the original destination macAddress is a wellknown multicast macAddress to hide the inner details of the BPDU in order to that it can be transmitted with a tag through the services'network.")
hwQinQSystemBridgeRole = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("provider", 2), ("customer", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQSystemBridgeRole.setStatus('current')
if mibBuilder.loadTexts: hwQinQSystemBridgeRole.setDescription("It indicates the Bridge 's location, having two possible values :Customers' Bridge and Providers' Bridge.")
hwBpduSystemDropPacketSta = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBpduSystemDropPacketSta.setStatus('current')
if mibBuilder.loadTexts: hwBpduSystemDropPacketSta.setDescription('View statistics about the discarded BPDUs.')
hwQinQSystemEtherType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQSystemEtherType.setStatus('current')
if mibBuilder.loadTexts: hwQinQSystemEtherType.setDescription("The value of tag type is encapsulated in the head of the ethernet frame to distinguish the encapsulated mode between the 802.1Q and QinQ. Default is '8100'h.")
hwQinQMngObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2))
hwQinQBpduTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1), )
if mibBuilder.loadTexts: hwQinQBpduTunnelTable.setStatus('current')
if mibBuilder.loadTexts: hwQinQBpduTunnelTable.setDescription('QinQ-port configuration table.')
hwQinQBpduTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQBpduTunnelIndex"))
if mibBuilder.loadTexts: hwQinQBpduTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: hwQinQBpduTunnelEntry.setDescription('The entry of an interface enabled the QinQ function.')
hwQinQBpduTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hwQinQBpduTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: hwQinQBpduTunnelIndex.setDescription('Index number of the interface.')
hwQinQEtherEncpsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQEtherEncpsType.setStatus('current')
if mibBuilder.loadTexts: hwQinQEtherEncpsType.setDescription('The value of tag type is encapsulated in the head of the Ethernet frame To distinguish the encapsulated mode between the 802.1Q and QinQ.')
hwQinQBpduTunnelEnableOneQBpduTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 3), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQBpduTunnelEnableOneQBpduTunnel.setStatus('current')
if mibBuilder.loadTexts: hwQinQBpduTunnelEnableOneQBpduTunnel.setDescription('The value indicates whether the 1Q-bpdutunnel is opened, If hwQinQBpduTunnelEnableTwoQBpduTunnel is enabling, then this value should be disable.')
hwQinQBpduTunnelEnableBpduTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 4), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQBpduTunnelEnableBpduTag.setStatus('current')
if mibBuilder.loadTexts: hwQinQBpduTunnelEnableBpduTag.setDescription('Whether to enable the setting of BPDU Tunnel tag. Default is disabled.')
hwQinQBpduTunnelEnableTwoQBpduTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 5), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQBpduTunnelEnableTwoQBpduTunnel.setStatus('current')
if mibBuilder.loadTexts: hwQinQBpduTunnelEnableTwoQBpduTunnel.setDescription('The value indicates whether the 2Q-bpdutunnel is opened, If hwQinQBpduTunnelEnableOneQBpduTunnel is enabling, then this value should be disable. Default is disabled.')
hwQinQBpduTunnelCustomerBpduTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQBpduTunnelCustomerBpduTag.setStatus('current')
if mibBuilder.loadTexts: hwQinQBpduTunnelCustomerBpduTag.setDescription("The tag is inserted into the head of the BPDU ,to support that can be transmitted through the services' network.")
hwQinQBpduTunnelCustomerBpduTagListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQBpduTunnelCustomerBpduTagListLow.setStatus('current')
if mibBuilder.loadTexts: hwQinQBpduTunnelCustomerBpduTagListLow.setDescription('The list describes accessible bode from different vlan (0 to 2047).')
hwQinQBpduTunnelCustomerBpduTagListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQBpduTunnelCustomerBpduTagListHigh.setStatus('current')
if mibBuilder.loadTexts: hwQinQBpduTunnelCustomerBpduTagListHigh.setDescription('The list describes accessible bpdu from different vlan (2048 to 4094).')
hwQinQRemarkOuterTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hexffff", 1), ("hex88a8", 2), ("hex9100", 3), ("hex8100", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQRemarkOuterTpid.setStatus('current')
if mibBuilder.loadTexts: hwQinQRemarkOuterTpid.setDescription('The value indicates the TPID of outer tag of packets that have two tag and output from the output interface of vlan-switch, If hwQinQEtherEncpsType is enabling, then this value should be 0xffff.')
hwQinQBpduTunnelEnableBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 10), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQBpduTunnelEnableBpduFilter.setStatus('current')
if mibBuilder.loadTexts: hwQinQBpduTunnelEnableBpduFilter.setDescription('The value indicates whether the BPDU filter function is enabled. If hwQinQBpduTunnelEnableBpduFilter is enabled, then this value should be enable.')
hwQinQSubIfVlanStackingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 2), )
if mibBuilder.loadTexts: hwQinQSubIfVlanStackingTable.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfVlanStackingTable.setDescription("Used to configure packets'vlan stacking in sub interface, receive one-tag packets and transmit two-tag packets, where the outer-tag inserted is in hwQinQSubIfVlanStackingTable.")
hwQinQSubIfVlanStackingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 2, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQSubIfStackingIfIndex"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfStackingCEVlanStart"))
if mibBuilder.loadTexts: hwQinQSubIfVlanStackingEntry.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfVlanStackingEntry.setDescription('The entry of an interface enabled the QinQ-stacking function.')
hwQinQSubIfStackingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQSubIfStackingIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackingIfIndex.setDescription('Index number of the QinQ-stacking interface.')
hwQinQSubIfStackingCEVlanStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 2, 1, 2), VlanId())
if mibBuilder.loadTexts: hwQinQSubIfStackingCEVlanStart.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackingCEVlanStart.setDescription('When configure ce vlan as a range, hwQinQSubIfStackingCEVlanStart is the start vlan id and hwQinQSubIfStackingCEVlanEnd is the end vlan id.')
hwQinQSubIfStackingCEVlanEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 2, 1, 3), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfStackingCEVlanEnd.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackingCEVlanEnd.setDescription('When configure ce vlan as a range, hwQinQSubIfStackingCEVlanStart is the start vlan id and hwQinQSubIfStackingCEVlanEnd is the end vlan id.')
hwQinQSubIfStackGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfStackGroupId.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackGroupId.setDescription('Group-management id.')
hwQinQSubIfStackingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfStackingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackingRowStatus.setDescription("Used for controlling the creation and deletion of this row. All writable objects in this row may be modified at any time. If a Network Management Application attempts to delete a conceptual row by setting this object to 'destroy' and there are one or more entries in hwQinQSubIfVlanStackingTable pointing to the row, the agent must also destroy the corresponding entries in hwQinQSubIfVlanStackingTable.")
hwQinQSubIfStackingPEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfStackingPEVlan.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackingPEVlan.setDescription('PE vlan id.')
hwQinQSubIfStackingStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3), )
if mibBuilder.loadTexts: hwQinQSubIfStackingStatTable.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackingStatTable.setDescription('When a sub interface configured QinQ-stacking function, hwQinQSubIfStackingStatTable is used to statistic total number of the out packets and in packets.')
hwQinQSubIfStackingStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQSubIfStackingStatIfIndex"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfStackingStatCEVlan"))
if mibBuilder.loadTexts: hwQinQSubIfStackingStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackingStatEntry.setDescription('The entry of an interface enabled the QinQ-stacking function.')
hwQinQSubIfStackingStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQSubIfStackingStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackingStatIfIndex.setDescription('Index number of the QinQ-stacking interface.')
hwQinQSubIfStackingStatCEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 2), VlanId())
if mibBuilder.loadTexts: hwQinQSubIfStackingStatCEVlan.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackingStatCEVlan.setDescription('Inner vlan in packets which input the QinQ sub interface, used to indicate the packets as an index.')
hwQinQSubIfStackStatGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackStatGroupId.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackStatGroupId.setDescription('The group-management id. The statistic number of packets can not get if the statistic funtion is not enabled.')
hwQinQSubIfStackingStatOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackingStatOutPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackingStatOutPackets.setDescription('Total number of out packets of the sub interface.')
hwQinQSubIfStackingStatOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackingStatOutBytes.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackingStatOutBytes.setDescription('Total number of out bytes of the sub interface.')
hwQinQSubIfStackingStatInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackingStatInPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackingStatInPackets.setDescription('Total number of in packets of the sub interface.')
hwQinQSubIfStackingStatInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackingStatInBytes.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackingStatInBytes.setDescription('Total number of in bytes of the sub interface.')
hwQinQSubIfStackStatOutBdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackStatOutBdPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackStatOutBdPackets.setDescription('Total number of broadcast packets transmitted out of the sub interface.')
hwQinQSubIfStackStatInBdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackStatInBdPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackStatInBdPackets.setDescription('Total number of broadcast packets received from the sub interface.')
hwQinQSubIfStackStatOutMuPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackStatOutMuPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackStatOutMuPackets.setDescription('Total number of multicast packets transmitted out of the sub interface.')
hwQinQSubIfStackStatInMuPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackStatInMuPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackStatInMuPackets.setDescription('Total number of multicast packets received from the sub interface.')
hwQinQSubIfStackStatOutUniPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackStatOutUniPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackStatOutUniPackets.setDescription('Total number of unicast packets transmitted out of the sub interface.')
hwQinQSubIfStackStatInUniPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackStatInUniPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackStatInUniPackets.setDescription('Total number of unicast packets received from the sub interface.')
hwQinQSubIfTermTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 4), )
if mibBuilder.loadTexts: hwQinQSubIfTermTable.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermTable.setDescription('The table is used to configure QinQ-termination function in sub interface, then packets transmitted from this sub interface input with two tags will be terminated.')
hwQinQSubIfTermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 4, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQSubIfTermIfIndex"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfTermPEVlan"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfTermCEVlanStart"))
if mibBuilder.loadTexts: hwQinQSubIfTermEntry.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermEntry.setDescription('The entry of an interface enabled the QinQ-termination function.')
hwQinQSubIfTermIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQSubIfTermIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermIfIndex.setDescription('Index number of the QinQ-termination interface.')
hwQinQSubIfTermPEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 4, 1, 2), VlanId())
if mibBuilder.loadTexts: hwQinQSubIfTermPEVlan.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermPEVlan.setDescription('Outer vlan id of the packets which have two tags before being terminated.')
hwQinQSubIfTermCEVlanStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 4, 1, 3), VlanId())
if mibBuilder.loadTexts: hwQinQSubIfTermCEVlanStart.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermCEVlanStart.setDescription('When configure ce vlan as a range, hwQinQSubIfTermCEVlanStart is the start vlan id and hwQinQSubIfTermCEVlanEnd is the end vlan id.')
hwQinQSubIfTermCEVlanEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 4, 1, 4), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfTermCEVlanEnd.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermCEVlanEnd.setDescription('When configure ce vlan as a range, hwQinQSubIfTermCEVlanStart is the start vlan id and hwQinQSubIfTermCEVlanEnd is the end vlan id.')
hwQinQSubIfTermGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfTermGroupId.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermGroupId.setDescription('Group-management id.')
hwQinQSubIfTermRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfTermRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermRowStatus.setDescription("Used for controlling the creation and deletion of this row. All writeable objects in this row may be modified at any time. If a Network Management Application attempts to delete a conceptual row by setting this object to 'destroy' and there are one or more entries in hwQinQSubIfTermTable pointing to the row, the agent must also destroy the corresponding entries in hwQinQSubIfTermTable.")
hwQinQSubIfTermStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5), )
if mibBuilder.loadTexts: hwQinQSubIfTermStatTable.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermStatTable.setDescription('When a sub interface configured QinQ-termination function, hwQinQSubIfTermStatTable used to statistic total number of the out packets and in packets.')
hwQinQSubIfTermStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatIfIndex"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatPEVlan"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatCEVlan"))
if mibBuilder.loadTexts: hwQinQSubIfTermStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermStatEntry.setDescription('The entry of an interface enabled the QinQ-termination function.')
hwQinQSubIfTermStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQSubIfTermStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermStatIfIndex.setDescription('Index number of the QinQ-termination interface.')
hwQinQSubIfTermStatPEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 2), VlanId())
if mibBuilder.loadTexts: hwQinQSubIfTermStatPEVlan.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermStatPEVlan.setDescription('Outer vlan in packets which input the QinQ sub interface, used to indicate the packets as an index.')
hwQinQSubIfTermStatCEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 3), VlanId())
if mibBuilder.loadTexts: hwQinQSubIfTermStatCEVlan.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermStatCEVlan.setDescription('Inner vlan in packets which input the QinQ sub interface, used to indicate the packets as an index.')
hwQinQSubIfTermStatGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatGroupId.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermStatGroupId.setDescription('The group-management id. The statistic number of packets can not get if the statistic funtion is not enabled.')
hwQinQSubIfTermStatOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatOutPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermStatOutPackets.setDescription('Total number of out packets of the sub interface.')
hwQinQSubIfTermStatOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatOutBytes.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermStatOutBytes.setDescription('Total number of out bytes of the sub interface.')
hwQinQSubIfTermStatInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatInPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermStatInPackets.setDescription('Total number of in packets of the sub interface.')
hwQinQSubIfTermStatInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatInBytes.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermStatInBytes.setDescription('Total number of in bytes of the sub interface.')
hwQinQSubIfTermStatOutBdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatOutBdPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermStatOutBdPackets.setDescription('Total number of broadcast packets transmitted out of the sub interface.')
hwQinQSubIfTermStatInBdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatInBdPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermStatInBdPackets.setDescription('Total number of broadcast packets received from the sub interface.')
hwQinQSubIfTermStatOutMuPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatOutMuPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermStatOutMuPackets.setDescription('Total number of multicast packets transmitted out of the sub interface.')
hwQinQSubIfTermStatInMuPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatInMuPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermStatInMuPackets.setDescription('Total number of multicast packets received from the sub interface.')
hwQinQSubIfTermStatOutUniPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatOutUniPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermStatOutUniPackets.setDescription('Total number of unicast packets transmitted out of the sub interface.')
hwQinQSubIfTermStatInUniPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatInUniPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermStatInUniPackets.setDescription('Total number of unicast packets received from the sub interface.')
hwQinQStaticARPCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 6), )
if mibBuilder.loadTexts: hwQinQStaticARPCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticARPCfgTable.setDescription('The table is used to configure QinQ static ARP.')
hwQinQStaticARPCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 6, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQStaticARPCfgIfIndex"), (0, "HUAWEI-QINQ-MIB", "hwQinQStaticARPCfgIp"))
if mibBuilder.loadTexts: hwQinQStaticARPCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticARPCfgEntry.setDescription('The entry of an interface enabled the QinQ function.')
hwQinQStaticARPCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQStaticARPCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticARPCfgIfIndex.setDescription("The interface's Index.")
hwQinQStaticARPCfgIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwQinQStaticARPCfgIp.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticARPCfgIp.setDescription('The IP address.')
hwQinQStaticARPCfgMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 6, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticARPCfgMac.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticARPCfgMac.setDescription('The MAC address.')
hwQinQStaticARPCfgVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 6, 1, 4), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticARPCfgVlan.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticARPCfgVlan.setDescription('The first vlan id.')
hwQinQStaticARPCfgCEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticARPCfgCEVlan.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticARPCfgCEVlan.setDescription('The second vlan id.')
hwQinQStaticARPCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticARPCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticARPCfgRowStatus.setDescription("Used for controlling the creation and deletion of this row. All writeable objects in this row may be modified at any time. If a Network Management Application attempts to delete a conceptual row by setting this object to 'destroy' and there are one or more entries in hwQinQStaticARPCfgTable pointing to the row ,the agent must also destroy the corresponding entries in hwQinQStaticARPCfgTable.")
hwQinQStaticMACCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7), )
if mibBuilder.loadTexts: hwQinQStaticMACCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticMACCfgTable.setDescription('The table is used to configure static MAC.')
hwQinQStaticMACCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQStaticMACCfgMac"), (0, "HUAWEI-QINQ-MIB", "hwQinQStaticMACCfgVsiName"), (0, "HUAWEI-QINQ-MIB", "hwQinQStaticMACCfgVlan"))
if mibBuilder.loadTexts: hwQinQStaticMACCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticMACCfgEntry.setDescription('The entry of an interface enabled the QinQ function.')
hwQinQStaticMACCfgMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwQinQStaticMACCfgMac.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticMACCfgMac.setDescription('The MAC address.')
hwQinQStaticMACCfgVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1, 2), VlanId())
if mibBuilder.loadTexts: hwQinQStaticMACCfgVlan.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticMACCfgVlan.setDescription('Vlan id that the MAC address belongs to.')
hwQinQStaticMACCfgVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwQinQStaticMACCfgVsiName.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticMACCfgVsiName.setDescription('Name of VSI that the MAC address belongs to.')
hwQinQStaticMACCfgPEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1, 4), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticMACCfgPEVlan.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticMACCfgPEVlan.setDescription('PE vlan id for a Network Management Application attempts to configure hwQinQStaticMACCfgTable.')
hwQinQStaticMACCfgCEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticMACCfgCEVlan.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticMACCfgCEVlan.setDescription('CE vlan id.')
hwQinQStaticMACCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("dynamid", 1), ("static", 2), ("blackhole", 3), ("toobig", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticMACCfgType.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticMACCfgType.setDescription('The type of the MAC.')
hwQinQStaticMACCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1, 7), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticMACCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticMACCfgIfIndex.setDescription('Index number of the interface.')
hwQinQStaticMACCfgFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vlan", 1), ("vsi", 2), ("mapping", 3), ("qinqtermination", 4), ("dot1qtermination", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticMACCfgFlag.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticMACCfgFlag.setDescription('The config type.')
hwQinQStaticMACCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticMACCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticMACCfgRowStatus.setDescription("Used for controlling the creation and deletion of this row. All writeable objects in this row may be modified at any time. If a Network Management Application attempts to delete a conceptual row by setting this object to 'destroy' and there are one or more entries in hwQinQStaticMACCfgTable pointing to the row ,the agent must also destroy the corresponding entries in hwQinQStaticMACCfgTable.")
hwQinQSubIfDot1qTermTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 8), )
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermTable.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermTable.setDescription('Used to configure Dot1q-termination function in sub interface ,then packets transmitted from this sub interface input with one tag will be terminated.')
hwQinQSubIfDot1qTermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 8, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermIfIndex"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermVidStart"))
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermEntry.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermEntry.setDescription('The entry of an interface enabled the Dot1q-termination function.')
hwQinQSubIfDot1qTermIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermIfIndex.setDescription('Index number of the Dot1q-termination interface.')
hwQinQSubIfDot1qTermVidStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 8, 1, 2), VlanId())
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermVidStart.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermVidStart.setDescription('When configure ce vlan as a range, hwQinQSubIfDot1qTermCEVlanStart is the start vlan id and hwQinQSubIfDot1qTermCEVlanEnd is the end vlan id.')
hwQinQSubIfDot1qTermVidEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 8, 1, 3), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermVidEnd.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermVidEnd.setDescription('When configure ce vlan as a range, hwQinQSubIfDot1qTermCEVlanStart is the start vlan id and hwQinQSubIfDot1qTermCEVlanEnd is the end vlan id.')
hwQinQSubIfDot1qTermGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermGroupId.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermGroupId.setDescription('Group-management id.')
hwQinQSubIfDot1qTermRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermRowStatus.setDescription("Used for controlling the creation and deletion of this row. All writeable objects in this row may be modified at any time. If a Network Management Application attempts to delete a conceptual row by setting this object to 'destroy' and there are one or more entries in hwQinQSubIfDot1qTermTable pointing to the row ,the agent must also destroy the corresponding entries in hwQinQSubIfDot1qTermTable.")
hwQinQSubIfDot1qTermStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9), )
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatTable.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatTable.setDescription('When a sub interface configured Dot1q-termination, hwQinQSubIfDot1qTermStatTable used to statistic total number of the out packets and in packets.')
hwQinQSubIfDot1qTermStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatIfIndex"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatCEVlan"))
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatEntry.setDescription('The entry of an interface configured Dot1q-termination function.')
hwQinQSubIfDot1qTermStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatIfIndex.setDescription('Index number of the Dot1q-termination interface.')
hwQinQSubIfDot1qTermStatCEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 2), VlanId())
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatCEVlan.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatCEVlan.setDescription('Inner vlan in packets which input the Dot1q-termination sub interface, used to indicate the packets as an index.')
hwQinQSubIfDot1qTermStatGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatGroupId.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatGroupId.setDescription('The group-management id. The statistic number of packets can not get if the statistic funtion is not enabled.')
hwQinQSubIfDot1qTermStatOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatOutPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatOutPackets.setDescription('Total number of out packets of the sub interface.')
hwQinQSubIfDot1qTermStatOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatOutBytes.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatOutBytes.setDescription('Total number of out bytes of the sub interface.')
hwQinQSubIfDot1qTermStatInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatInPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatInPackets.setDescription('Total number of in packets of the sub interface.')
hwQinQSubIfDot1qTermStatInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatInBytes.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatInBytes.setDescription('Total number of in bytes of the sub interface.')
hwQinQSubIfDot1qTermStatOutBdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatOutBdPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatOutBdPackets.setDescription('Total number of broadcast packets transmitted out of the sub interface.')
hwQinQSubIfDot1qTermStatInBdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatInBdPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatInBdPackets.setDescription('Total number of broadcast packets received from the sub interface.')
hwQinQSubIfDot1qTermStatOutMuPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatOutMuPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatOutMuPackets.setDescription('Total number of multicast packets transmitted out of the sub interface.')
hwQinQSubIfDot1qTermStatInMuPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatInMuPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatInMuPackets.setDescription('Total number of multicast packets received from the sub interface.')
hwQinQSubIfDot1qTermStatOutUniPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatOutUniPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatOutUniPackets.setDescription('Total number of unicast packets transmitted out of the sub interface.')
hwQinQSubIfDot1qTermStatInUniPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatInUniPackets.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatInUniPackets.setDescription('Total number of unicast packets received from the sub interface.')
hwQinQModeCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 10), )
if mibBuilder.loadTexts: hwQinQModeCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwQinQModeCfgTable.setDescription('The table contains mode type and ethernet encapsulation type.')
hwQinQModeCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 10, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQModeCfgIfIndex"))
if mibBuilder.loadTexts: hwQinQModeCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwQinQModeCfgEntry.setDescription('The mode type and ethernet encapsulation type of an interface entry.')
hwQinQModeCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 10, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQModeCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwQinQModeCfgIfIndex.setDescription('Index number of the interface.')
hwQinQModeCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("common", 1), ("qinq", 2))).clone('common')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQModeCfgMode.setStatus('current')
if mibBuilder.loadTexts: hwQinQModeCfgMode.setDescription('Mode type of the interface.')
hwQinQEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQEtherType.setStatus('current')
if mibBuilder.loadTexts: hwQinQEtherType.setDescription('The value of tag type is encapsulated in the head of the ethernet frame to distinguish the encapsulated mode between the 802.1Q and QinQ.')
hwQinQCeEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQCeEtherType.setStatus('current')
if mibBuilder.loadTexts: hwQinQCeEtherType.setDescription('The value of tag type is encapsulated in the head of the ethernet frame to distinguish the encapsulated mode between the 802.1Q and QinQ.')
hwQinQCtrlVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 11), )
if mibBuilder.loadTexts: hwQinQCtrlVlanCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwQinQCtrlVlanCfgTable.setDescription("The control-vlan id and control-vlan's attributes can be configured in sub interface. You must designate control-vlan as QinQ or Dot1q before configuring QinQ-termination function or Dot1q-termination function.")
hwQinQCtrlVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 11, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQCtrlVlanCfgIfIndex"))
if mibBuilder.loadTexts: hwQinQCtrlVlanCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwQinQCtrlVlanCfgEntry.setDescription('The Control-vlan configuration entry.')
hwQinQCtrlVlanCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 11, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQCtrlVlanCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwQinQCtrlVlanCfgIfIndex.setDescription('Index number of the sub interface.')
hwQinQCtrlVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 11, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQCtrlVlan.setStatus('current')
if mibBuilder.loadTexts: hwQinQCtrlVlan.setDescription('Control-Vlan id.')
hwQinQSubIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qinq", 1), ("dot1q", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfType.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfType.setDescription('The type of sub interface.')
hwQinQCtrlVlanFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rtprotocolenable", 1), ("original", 2), ("localswitch", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQCtrlVlanFlag.setStatus('current')
if mibBuilder.loadTexts: hwQinQCtrlVlanFlag.setDescription('The service type of the sub interface, by setting hwQinQCtrlVlanFlag to the value (rtprotocolenable), the route-protocol attribute enabled; and by setting hwQinQCtrlVlanFlag to the value (localswitch), the localswitch attribute enabled, which means two tags of packets will be pruned. So if you set hwQinQSubIfType to be dot1q type, you can not specify hwQinQCtrlVlanFlag as localswitch.')
hwQinQCtrlVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 11, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQCtrlVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwQinQCtrlVlanRowStatus.setDescription('This table can be created and deleted.')
hwQinQFlexibleFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 11, 1, 6), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQFlexibleFlag.setStatus('current')
if mibBuilder.loadTexts: hwQinQFlexibleFlag.setDescription('The service type of the sub interface, by setting hwQinQFlexibleFlag to the value (flexibleenable), the flexible attribute enabled; So if you set hwQinQSubIfType to be dot1q type, you can not specify hwQinQFlexibleFlag as flexibleenable.')
hwQinQGroupCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 12), )
if mibBuilder.loadTexts: hwQinQGroupCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwQinQGroupCfgTable.setDescription("The group-management id and group's attributes can be configured in sub interface.")
hwQinQGroupCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 12, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQGroupCfgIfIndex"), (0, "HUAWEI-QINQ-MIB", "hwQinQGroupId"))
if mibBuilder.loadTexts: hwQinQGroupCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwQinQGroupCfgEntry.setDescription('Group configuration entry.')
hwQinQGroupCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 12, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQGroupCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwQinQGroupCfgIfIndex.setDescription('Index number of the interface.')
hwQinQGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hwQinQGroupId.setStatus('current')
if mibBuilder.loadTexts: hwQinQGroupId.setDescription('Group-management id.')
hwQinQGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("single", 1), ("multi", 2))).clone('single')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQGroupType.setStatus('current')
if mibBuilder.loadTexts: hwQinQGroupType.setDescription('The type of the group.')
hwQinQGroupStat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 12, 1, 4), EnabledStatus().clone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQGroupStat.setStatus('current')
if mibBuilder.loadTexts: hwQinQGroupStat.setDescription('Whether the statistic function is enabled.')
hwQinQGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwQinQGroupRowStatus.setDescription('This table can be created and deleted.')
hwQinQAsymmetryCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 13), )
if mibBuilder.loadTexts: hwQinQAsymmetryCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwQinQAsymmetryCfgTable.setDescription('The table to configure asymmetry attribution of the interface.')
hwQinQAsymmetryCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 13, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQAsymmetryCfgIfIndex"))
if mibBuilder.loadTexts: hwQinQAsymmetryCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwQinQAsymmetryCfgEntry.setDescription('The entry of the asymmetry configure table.')
hwQinQAsymmetryCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 13, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQAsymmetryCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwQinQAsymmetryCfgIfIndex.setDescription('Index number of the QinQ-termination interface.')
hwQinQSubIfAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("symmetry", 1), ("asymmetry", 2), ("transparent", 3))).clone('asymmetry')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQSubIfAsymmetry.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfAsymmetry.setDescription('The asymmetry attribution of the QinQ-termination interface.')
hwQinQAsymmetryUserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 13, 1, 3), EnabledStatus().clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQAsymmetryUserMode.setStatus('current')
if mibBuilder.loadTexts: hwQinQAsymmetryUserMode.setDescription('The user mode attribute of the QinQ-termination sub interface.')
hwQinQRemarkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 14), )
if mibBuilder.loadTexts: hwQinQRemarkCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwQinQRemarkCfgTable.setDescription('Interface remark config.')
hwQinQRemarkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 14, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQRemarkCfgIfIndex"))
if mibBuilder.loadTexts: hwQinQRemarkCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwQinQRemarkCfgEntry.setDescription('The entry of the interface remark configuration table.')
hwQinQRemarkCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 14, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQRemarkCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwQinQRemarkCfgIfIndex.setDescription('Index number of the sub interface, which should configure QinQ-termination function first.')
hwQinQPriorityRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("specify0", 0), ("specify1", 1), ("specify2", 2), ("specify3", 3), ("specify4", 4), ("specify5", 5), ("specify6", 6), ("specify7", 7), ("cevid", 8), ("pevid", 9))).clone('pevid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQPriorityRemark.setStatus('current')
if mibBuilder.loadTexts: hwQinQPriorityRemark.setDescription('The service policy map to set the 802.1P bits. By default(pevid), copy the P bits that were in the outer PE VLAN tag to the trunk VLAN tag, by setting object to (cevid), copy the P bits that were in inner CE VALN tag to the trunk VLAN tag.')
hwBpduTunnelIngressTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 15), )
if mibBuilder.loadTexts: hwBpduTunnelIngressTable.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelIngressTable.setDescription('The table of bpdu tunnel ingress. ')
hwBpduTunnelIngressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 15, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwBpduTunnelIngressPortIndex"), (0, "HUAWEI-QINQ-MIB", "hwBpduTunnelBpduIngressMacIndex"))
if mibBuilder.loadTexts: hwBpduTunnelIngressEntry.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelIngressEntry.setDescription('The entry of of bpdu tunnel ingress. ')
hwBpduTunnelIngressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwBpduTunnelIngressPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelIngressPortIndex.setDescription('Port index in interface. ')
hwBpduTunnelBpduIngressMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 15, 1, 2), BpduIndex())
if mibBuilder.loadTexts: hwBpduTunnelBpduIngressMacIndex.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelBpduIngressMacIndex.setDescription(' bpdu mac address list BPDU Dmac protocol 01-80-C2-00-00-00 stp01 01-80-C2-00-00-01 pauseFrame 01-80-C2-00-00-02 reserved02 01-80-C2-00-00-03 reserved03 01-80-C2-00-00-04 reserved04 01-80-C2-00-00-05 reserved05 01-80-C2-00-00-06 reserved06 01-80-C2-00-00-07 reserved07 01-80-C2-00-00-08 stp02 01-80-C2-00-00-09 reserved08 01-80-C2-00-00-0a hgmp 01-80-C2-00-00-0b reserved09 01-80-C2-00-00-0c reserved10 01-80-C2-00-00-0d reserved11 01-80-C2-00-00-0e reserved12 01-80-C2-00-00-0f reserved13 01-80-C2-00-00-10 reserved14 01-80-C2-00-00-11 reserved15 01-80-C2-00-00-12 reserved16 01-80-C2-00-00-13 reserved17 01-80-C2-00-00-14 isisLevel01 01-80-C2-00-00-15 isisLevel02 01-80-C2-00-00-16 reserved18 01-80-C2-00-00-17 reserved19 01-80-C2-00-00-18 reserved20 01-80-C2-00-00-19 reserved21 01-80-C2-00-00-1a reserved22 01-80-C2-00-00-1b reserved23 01-80-C2-00-00-1c reserved24 01-80-C2-00-00-1d reserved25 01-80-C2-00-00-1e reserved26 01-80-C2-00-00-1f reserved27 01-80-C2-00-00-20 gmrp 01-80-C2-00-00-21 gvrp 01-80-C2-00-00-22 reserved28 01-80-C2-00-00-23 reserved29 01-80-C2-00-00-24 reserved30 01-80-C2-00-00-25 reserved31 01-80-C2-00-00-26 reserved32 01-80-C2-00-00-27 reserved33 01-80-C2-00-00-28 reserved34 01-80-C2-00-00-29 reserved35 01-80-C2-00-00-2a reserved36 01-80-C2-00-00-2b reserved37 01-80-C2-00-00-2c reserved38 01-80-C2-00-00-2d reserved39 01-80-C2-00-00-2e reserved40 01-80-C2-00-00-2f reserved41')
hwBpduTunnelIngressAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 15, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBpduTunnelIngressAddress.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelIngressAddress.setDescription('Group mac address.')
hwBpduTunnelIngressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 15, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBpduTunnelIngressRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelIngressRowStatus.setDescription('Bpdu tunnek ingress row status.')
hwBpduTunnelEgressTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 16), )
if mibBuilder.loadTexts: hwBpduTunnelEgressTable.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelEgressTable.setDescription('The table of bpdu tunnel egress.')
hwBpduTunnelEgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 16, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwBpduTunnelEgressPortIndex"), (0, "HUAWEI-QINQ-MIB", "hwBpduTunnelBpduEgressMacIndex"))
if mibBuilder.loadTexts: hwBpduTunnelEgressEntry.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelEgressEntry.setDescription('The entry of bpdu tunnel egress.')
hwBpduTunnelEgressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwBpduTunnelEgressPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelEgressPortIndex.setDescription('Port index in interface.')
hwBpduTunnelBpduEgressMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 16, 1, 2), BpduIndex())
if mibBuilder.loadTexts: hwBpduTunnelBpduEgressMacIndex.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelBpduEgressMacIndex.setDescription('Bpdu MAC address list BPDU DMAC protocol 01-80-C2-00-00-00 stp01 01-80-C2-00-00-01 pauseFrame 01-80-C2-00-00-02 reserved02 01-80-C2-00-00-03 reserved03 01-80-C2-00-00-04 reserved04 01-80-C2-00-00-05 reserved05 01-80-C2-00-00-06 reserved06 01-80-C2-00-00-07 reserved07 01-80-C2-00-00-08 stp02 01-80-C2-00-00-09 reserved08 01-80-C2-00-00-0a hgmp 01-80-C2-00-00-0b reserved09 01-80-C2-00-00-0c reserved10 01-80-C2-00-00-0d reserved11 01-80-C2-00-00-0e reserved12 01-80-C2-00-00-0f reserved13 01-80-C2-00-00-10 reserved14 01-80-C2-00-00-11 reserved15 01-80-C2-00-00-12 reserved16 01-80-C2-00-00-13 reserved17 01-80-C2-00-00-14 isisLevel01 01-80-C2-00-00-15 isisLevel02 01-80-C2-00-00-16 reserved18 01-80-C2-00-00-17 reserved19 01-80-C2-00-00-18 reserved20 01-80-C2-00-00-19 reserved21 01-80-C2-00-00-1a reserved22 01-80-C2-00-00-1b reserved23 01-80-C2-00-00-1c reserved24 01-80-C2-00-00-1d reserved25 01-80-C2-00-00-1e reserved26 01-80-C2-00-00-1f reserved27 01-80-C2-00-00-20 gmrp 01-80-C2-00-00-21 gvrp 01-80-C2-00-00-22 reserved28 01-80-C2-00-00-23 reserved29 01-80-C2-00-00-24 reserved30 01-80-C2-00-00-25 reserved31 01-80-C2-00-00-26 reserved32 01-80-C2-00-00-27 reserved33 01-80-C2-00-00-28 reserved34 01-80-C2-00-00-29 reserved35 01-80-C2-00-00-2a reserved36 01-80-C2-00-00-2b reserved37 01-80-C2-00-00-2c reserved38 01-80-C2-00-00-2d reserved39 01-80-C2-00-00-2e reserved40 01-80-C2-00-00-2f reserved41.')
hwBpduTunnelEgressAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 16, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBpduTunnelEgressAddress.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelEgressAddress.setDescription('Group mac address.')
hwBpduTunnelEgressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 16, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBpduTunnelEgressRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelEgressRowStatus.setDescription('Row Status.')
hwBpduTunnelVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 17), )
if mibBuilder.loadTexts: hwBpduTunnelVlanTable.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelVlanTable.setDescription('The table of port bpdu tunnel.')
hwBpduTunnelVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 17, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwBpduTunnelPortIndex"))
if mibBuilder.loadTexts: hwBpduTunnelVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelVlanEntry.setDescription('The entry of port bpdu tunnel vlan.')
hwBpduTunnelPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwBpduTunnelPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelPortIndex.setDescription('Port index in interface.')
hwBpduTunnelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBpduTunnelEnable.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelEnable.setDescription('Bpdu tunnel enable.')
hwBpduTunnelVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 17, 1, 3), VlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBpduTunnelVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelVlanListLow.setDescription('Vlan bpdu tunnel in port.')
hwBpduTunnelVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 17, 1, 4), VlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBpduTunnelVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelVlanListHigh.setDescription('Vlan bpdu tunnel in port.')
hwBpduTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 18), )
if mibBuilder.loadTexts: hwBpduTunnelTable.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelTable.setDescription('The table of bpdu tunnel.')
hwBpduTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 18, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwBpduTunnelBpduIndex"))
if mibBuilder.loadTexts: hwBpduTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelEntry.setDescription('The entry of of bpdu tunnel.')
hwBpduTunnelBpduIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 18, 1, 1), BpduIndex())
if mibBuilder.loadTexts: hwBpduTunnelBpduIndex.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelBpduIndex.setDescription('Bpdu mac address list BPDU Dmac protocol 01-80-C2-00-00-00 stp01 (1) 01-80-C2-00-00-01 pauseFrame (2) 01-80-C2-00-00-02 reserved02 (3) 01-80-C2-00-00-03 reserved03 (4) 01-80-C2-00-00-04 reserved04 (5) 01-80-C2-00-00-05 reserved05 (6) 01-80-C2-00-00-06 reserved06 (7) 01-80-C2-00-00-07 reserved07 (8) 01-80-C2-00-00-08 stp02 (9) 01-80-C2-00-00-09 reserved08 (10) 01-80-C2-00-00-0a hgmp (11) 01-80-C2-00-00-0b reserved09 (12) 01-80-C2-00-00-0c reserved10 (13) 01-80-C2-00-00-0d reserved11 (14) 01-80-C2-00-00-0e reserved12 (15) 01-80-C2-00-00-0f reserved13 (16) 01-80-C2-00-00-10 reserved14 (17) 01-80-C2-00-00-11 reserved15 (18) 01-80-C2-00-00-12 reserved16 (19) 01-80-C2-00-00-13 reserved17 (20) 01-80-C2-00-00-14 isisLevel01 (21) 01-80-C2-00-00-15 isisLevel02 (22) 01-80-C2-00-00-16 reserved18 (23) 01-80-C2-00-00-17 reserved19 (24) 01-80-C2-00-00-18 reserved20 (25) 01-80-C2-00-00-19 reserved21 (26) 01-80-C2-00-00-1a reserved22 (27) 01-80-C2-00-00-1b reserved23 (28) 01-80-C2-00-00-1c reserved24 (29) 01-80-C2-00-00-1d reserved25 (30) 01-80-C2-00-00-1e reserved26 (31) 01-80-C2-00-00-1f reserved27 (32) 01-80-C2-00-00-20 gmrp (33) 01-80-C2-00-00-21 gvrp (34) 01-80-C2-00-00-22 reserved28 (35) 01-80-C2-00-00-23 reserved29 (36) 01-80-C2-00-00-24 reserved30 (37) 01-80-C2-00-00-25 reserved31 (38) 01-80-C2-00-00-26 reserved32 (39) 01-80-C2-00-00-27 reserved33 (40) 01-80-C2-00-00-28 reserved34 (41) 01-80-C2-00-00-29 reserved35 (42) 01-80-C2-00-00-2a reserved36 (43) 01-80-C2-00-00-2b reserved37 (44) 01-80-C2-00-00-2c reserved38 (45) 01-80-C2-00-00-2d reserved39 (46) 01-80-C2-00-00-2e reserved40 (47) 01-80-C2-00-00-2f reserved41 (48) 01-80-C2-00-00-02 lacp (49) 01-00-0C-CC-CC-CC cdp (50) 01-00-0C-CC-CC-CC pagp (51) 01-00-0C-CC-CC-CC udld (52) 01-00-0C-CC-CC-CC vtp (53) .')
hwBpduTunnelBpduEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBpduTunnelBpduEnable.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelBpduEnable.setDescription('Bpdu tunnel enable or disable.')
hwBpduTunnelMultiAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 18, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBpduTunnelMultiAddress.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelMultiAddress.setDescription('Group MAC address.')
hwBpduTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 18, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBpduTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelRowStatus.setDescription('Row Status.')
hwQinQSwapCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 19), )
if mibBuilder.loadTexts: hwQinQSwapCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwQinQSwapCfgTable.setDescription('This table describes the vlan swap configurations of interfaces.')
hwQinQSwapCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 19, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQSwapCfgIfIndex"))
if mibBuilder.loadTexts: hwQinQSwapCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwQinQSwapCfgEntry.setDescription('An entry is created for each active ethernet type interface in the device and deleted when the interface been not exist.')
hwQinQSwapCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 19, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQSwapCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwQinQSwapCfgIfIndex.setDescription('Index number of the interface.')
hwQinQSwapCfgFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 19, 1, 2), EnabledStatus().clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQSwapCfgFlag.setStatus('current')
if mibBuilder.loadTexts: hwQinQSwapCfgFlag.setDescription('QinQ swap flag of the interface, which indicates whether to swap the two vlan tags or not when the interface receives a packet with two 802.1q tags.')
hwQinQSubIfMapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20), )
if mibBuilder.loadTexts: hwQinQSubIfMapTable.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfMapTable.setDescription('The table is used to configure QinQ-mapping function in sub interface, then packets transmitted from this sub interface input with one or two tags will be mapped to other tag or tags.')
hwQinQSubIfMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQSubIfMapIfIndex"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfPEVlan"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfCEVlanStart"))
if mibBuilder.loadTexts: hwQinQSubIfMapEntry.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfMapEntry.setDescription('The entry of an interface enabled the QinQ-Map function.')
hwQinQSubIfMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQSubIfMapIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfMapIfIndex.setDescription('Index number of the QinQ-Map interface.')
hwQinQSubIfPEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: hwQinQSubIfPEVlan.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfPEVlan.setDescription('Outer vlan id of the packets which have two tags before being Mapped.')
hwQinQSubIfCEVlanStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hwQinQSubIfCEVlanStart.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfCEVlanStart.setDescription('Inner start vlan id of the packets which have two tags before being Mapped.')
hwQinQSubIfCEVlanEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfCEVlanEnd.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfCEVlanEnd.setDescription('Inner end vlan id of the packets which have two tags before being Mapped.')
hwQinQSubIfPEVlanMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfPEVlanMap.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfPEVlanMap.setDescription('Outer vlan id of the packets which have two tags after being Mapped.')
hwQinQSubIfPEEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfPEEtherType.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfPEEtherType.setDescription('EtherType of Pe Mapped.')
hwQinQSubIfCEVlanMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfCEVlanMap.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfCEVlanMap.setDescription('Inner vlan id of the packets which have two tags after being Mapped.')
hwQinQSubIfCEEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfCEEtherType.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfCEEtherType.setDescription('EtherType of Ce Mapped.')
hwQinQSubIfMapGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfMapGroupId.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfMapGroupId.setDescription('Group-management id.')
hwQinQSubIfMapPe8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("specify0", 0), ("specify1", 1), ("specify2", 2), ("specify3", 3), ("specify4", 4), ("specify5", 5), ("specify6", 6), ("specify7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQSubIfMapPe8021p.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfMapPe8021p.setDescription('The service policy map to set the 802.1P bits. By default(pevid), copy the P bits that were in the outer PE VLAN tag to the trunk VLAN tag, by setting object to (cevid), copy the P bits that were in inner CE VALN tag to the trunk VLAN tag.')
hwQinQSubIfMapCe8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("specify0", 0), ("specify1", 1), ("specify2", 2), ("specify3", 3), ("specify4", 4), ("specify5", 5), ("specify6", 6), ("specify7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQSubIfMapCe8021p.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfMapCe8021p.setDescription('The service policy map to set the 802.1P bits. By default(pevid), copy the P bits that were in the outer PE VLAN tag to the trunk VLAN tag, by setting object to (cevid), copy the P bits that were in inner CE VALN tag to the trunk VLAN tag.')
hwQinQSubIfMapCetoPeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 12), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfMapCetoPeFlag.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfMapCetoPeFlag.setDescription('The service type of the sub interface, by setting MapCetoPeFlag to the value (CetoPeenable), the 8021p CetoPeenable attribute enabled.')
hwQinQSubIfMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfMapRowStatus.setDescription("Used for controlling the creation and deletion of this row. All writeable objects in this row may be modified at any time. If a Network Management Application attempts to delete a conceptual row by setting this object to 'destroy' and there are one or more entries in hwQinQSubIfMapTable pointing to the row, the agent must also destroy the corresponding entries in hwQinQSubIfMapTable.")
hwQinQStackingVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 21), )
if mibBuilder.loadTexts: hwQinQStackingVlanCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwQinQStackingVlanCfgTable.setDescription('QinQ Stacking Vlan configuration table.')
hwQinQStackingVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 21, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQStackingVlanCfgIfIndex"))
if mibBuilder.loadTexts: hwQinQStackingVlanCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwQinQStackingVlanCfgEntry.setDescription('This object indicates the configuration table for QinQ Stacking Vlan.')
hwQinQStackingVlanCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 21, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQStackingVlanCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwQinQStackingVlanCfgIfIndex.setDescription('This object indicates the Index number of the vlanif interface.')
hwQinQStackingVlanCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 21, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStackingVlanCfgVlanId.setStatus('current')
if mibBuilder.loadTexts: hwQinQStackingVlanCfgVlanId.setDescription('This object indicates the outer vlan id for QinQ Stacking Vlan.')
hwQinQStackingVlanCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 21, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStackingVlanCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwQinQStackingVlanCfgRowStatus.setDescription('This object indicates the RowStatus of hwQinQStackingVlanTable.')
hwQinQConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3))
hwQinQGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1))
hwQinQCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 2))
hwQinQCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 2, 1)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSystemBaseGroup"), ("HUAWEI-QINQ-MIB", "hwQinQBpduTunnelGroup"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfVlanStackingGroup"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackingStatGroup"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermGroup"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQCompliance = hwQinQCompliance.setStatus('current')
if mibBuilder.loadTexts: hwQinQCompliance.setDescription('The core compliance statement for all implementations.')
hwQinQSystemBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 1)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSystemWellKnowMac"), ("HUAWEI-QINQ-MIB", "hwQinQSystemBridgeRole"), ("HUAWEI-QINQ-MIB", "hwBpduSystemDropPacketSta"), ("HUAWEI-QINQ-MIB", "hwQinQSystemEtherType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQSystemBaseGroup = hwQinQSystemBaseGroup.setStatus('current')
if mibBuilder.loadTexts: hwQinQSystemBaseGroup.setDescription('A collection of objects providing device level control and status information for the system.')
hwQinQBpduTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 2)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQEtherEncpsType"), ("HUAWEI-QINQ-MIB", "hwQinQBpduTunnelEnableOneQBpduTunnel"), ("HUAWEI-QINQ-MIB", "hwQinQBpduTunnelEnableBpduTag"), ("HUAWEI-QINQ-MIB", "hwQinQBpduTunnelEnableTwoQBpduTunnel"), ("HUAWEI-QINQ-MIB", "hwQinQBpduTunnelCustomerBpduTag"), ("HUAWEI-QINQ-MIB", "hwQinQBpduTunnelCustomerBpduTagListLow"), ("HUAWEI-QINQ-MIB", "hwQinQBpduTunnelCustomerBpduTagListHigh"), ("HUAWEI-QINQ-MIB", "hwQinQRemarkOuterTpid"), ("HUAWEI-QINQ-MIB", "hwQinQBpduTunnelEnableBpduFilter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQBpduTunnelGroup = hwQinQBpduTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: hwQinQBpduTunnelGroup.setDescription('A collection of objects providing device level control and status information for the interface.')
hwQinQSubIfVlanStackingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 3)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSubIfStackingCEVlanEnd"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackGroupId"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackingRowStatus"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackingPEVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQSubIfVlanStackingGroup = hwQinQSubIfVlanStackingGroup.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfVlanStackingGroup.setDescription('A collection of objects providing device level control and status information for the sub interface.')
hwQinQSubIfStackingStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 4)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSubIfStackStatGroupId"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackingStatOutPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackingStatOutBytes"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackingStatInPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackingStatInBytes"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackStatOutBdPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackStatInBdPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackStatOutMuPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackStatInMuPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackStatOutUniPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackStatInUniPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQSubIfStackingStatGroup = hwQinQSubIfStackingStatGroup.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfStackingStatGroup.setDescription('A collection of objects providing device level control and status information for the sub interface.')
hwQinQSubIfTermGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 5)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSubIfTermCEVlanEnd"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermGroupId"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQSubIfTermGroup = hwQinQSubIfTermGroup.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermGroup.setDescription('A collection of objects providing device level control and status information for the sub interface.')
hwQinQSubIfTermStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 6)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatGroupId"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatOutPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatOutBytes"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatInPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatInBytes"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatOutBdPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatInBdPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatOutMuPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatInMuPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatOutUniPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatInUniPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQSubIfTermStatGroup = hwQinQSubIfTermStatGroup.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfTermStatGroup.setDescription('A collection of objects providing device level control and status information for the sub interface.')
hwQinQStaticARPCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 7)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQStaticARPCfgMac"), ("HUAWEI-QINQ-MIB", "hwQinQStaticARPCfgVlan"), ("HUAWEI-QINQ-MIB", "hwQinQStaticARPCfgCEVlan"), ("HUAWEI-QINQ-MIB", "hwQinQStaticARPCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQStaticARPCfgGroup = hwQinQStaticARPCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticARPCfgGroup.setDescription('A collection of items of static ARP table.')
hwQinQStaticMACCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 8)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQStaticMACCfgPEVlan"), ("HUAWEI-QINQ-MIB", "hwQinQStaticMACCfgCEVlan"), ("HUAWEI-QINQ-MIB", "hwQinQStaticMACCfgType"), ("HUAWEI-QINQ-MIB", "hwQinQStaticMACCfgIfIndex"), ("HUAWEI-QINQ-MIB", "hwQinQStaticMACCfgFlag"), ("HUAWEI-QINQ-MIB", "hwQinQStaticMACCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQStaticMACCfgGroup = hwQinQStaticMACCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwQinQStaticMACCfgGroup.setDescription('A collection of items of static MAC table.')
hwQinQSubIfDot1qTermGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 9)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermVidEnd"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermGroupId"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQSubIfDot1qTermGroup = hwQinQSubIfDot1qTermGroup.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermGroup.setDescription('A collection of items of Dot1q-termination table.')
hwQinQSubIfDot1qTermStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 10)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatGroupId"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatOutPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatOutBytes"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatInPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatInBytes"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatOutBdPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatInBdPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatOutMuPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatInMuPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatOutUniPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatInUniPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQSubIfDot1qTermStatGroup = hwQinQSubIfDot1qTermStatGroup.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatGroup.setDescription('A collection of items of Dot1q-termination statistic table.')
hwQinQModeCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 11)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQModeCfgMode"), ("HUAWEI-QINQ-MIB", "hwQinQEtherType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQModeCfgGroup = hwQinQModeCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwQinQModeCfgGroup.setDescription('A collection of items of Mode config table.')
hwQinQCtrlVlanCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 12)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQCtrlVlan"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfType"), ("HUAWEI-QINQ-MIB", "hwQinQCtrlVlanFlag"), ("HUAWEI-QINQ-MIB", "hwQinQCtrlVlanRowStatus"), ("HUAWEI-QINQ-MIB", "hwQinQFlexibleFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQCtrlVlanCfgGroup = hwQinQCtrlVlanCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwQinQCtrlVlanCfgGroup.setDescription('A collection of items of Control vlan table.')
hwQinQGroupCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 13)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQGroupType"), ("HUAWEI-QINQ-MIB", "hwQinQGroupStat"), ("HUAWEI-QINQ-MIB", "hwQinQGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQGroupCfgGroup = hwQinQGroupCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwQinQGroupCfgGroup.setDescription('A collection of items of group table.')
hwQinQAsymmetryCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 14)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSubIfAsymmetry"), ("HUAWEI-QINQ-MIB", "hwQinQAsymmetryUserMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQAsymmetryCfgGroup = hwQinQAsymmetryCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwQinQAsymmetryCfgGroup.setDescription('A collection of items of asymmetry config table.')
hwQinQRemarkCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 15)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQPriorityRemark"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQRemarkCfgGroup = hwQinQRemarkCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwQinQRemarkCfgGroup.setDescription('A collection of items of Mode config table.')
hwBpduTunnelIngressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 16)).setObjects(("HUAWEI-QINQ-MIB", "hwBpduTunnelIngressAddress"), ("HUAWEI-QINQ-MIB", "hwBpduTunnelIngressRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBpduTunnelIngressGroup = hwBpduTunnelIngressGroup.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelIngressGroup.setDescription('A collection of items of Group Mac table.')
hwBpduTunnelEgressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 17)).setObjects(("HUAWEI-QINQ-MIB", "hwBpduTunnelEgressAddress"), ("HUAWEI-QINQ-MIB", "hwBpduTunnelEgressRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBpduTunnelEgressGroup = hwBpduTunnelEgressGroup.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelEgressGroup.setDescription('A collection of items of Group Mac table.')
hwBpduTunnelVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 18)).setObjects(("HUAWEI-QINQ-MIB", "hwBpduTunnelEnable"), ("HUAWEI-QINQ-MIB", "hwBpduTunnelVlanListLow"), ("HUAWEI-QINQ-MIB", "hwBpduTunnelVlanListHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBpduTunnelVlanGroup = hwBpduTunnelVlanGroup.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelVlanGroup.setDescription('A collection of items of Mode port bpdu tunnel table.')
hwBpduTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 19)).setObjects(("HUAWEI-QINQ-MIB", "hwBpduTunnelBpduEnable"), ("HUAWEI-QINQ-MIB", "hwBpduTunnelMultiAddress"), ("HUAWEI-QINQ-MIB", "hwBpduTunnelRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBpduTunnelGroup = hwBpduTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: hwBpduTunnelGroup.setDescription('A collection of items of bpdu tunnel mac table.')
hwQinQSwapCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 20)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSwapCfgFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQSwapCfgGroup = hwQinQSwapCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwQinQSwapCfgGroup.setDescription('A collection of items of Swap config table.')
hwQinQSubIfMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 21)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSubIfCEVlanEnd"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfPEVlanMap"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfPEEtherType"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfCEVlanMap"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfCEEtherType"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfMapGroupId"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfMapRowStatus"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfMapPe8021p"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfMapCe8021p"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfMapCetoPeFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQSubIfMapGroup = hwQinQSubIfMapGroup.setStatus('current')
if mibBuilder.loadTexts: hwQinQSubIfMapGroup.setDescription('A collection of objects providing device level control and status information for the sub interface.')
hwQinQStackingVlanCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 22)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQStackingVlanCfgVlanId"), ("HUAWEI-QINQ-MIB", "hwQinQStackingVlanCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQStackingVlanCfgGroup = hwQinQStackingVlanCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwQinQStackingVlanCfgGroup.setDescription('A collection of items of QinQ Stacking Vlan config table.')
mibBuilder.exportSymbols("HUAWEI-QINQ-MIB", hwQinQSubIfDot1qTermStatInMuPackets=hwQinQSubIfDot1qTermStatInMuPackets, hwQinQSubIfTermEntry=hwQinQSubIfTermEntry, hwQinQSubIfTermStatOutMuPackets=hwQinQSubIfTermStatOutMuPackets, hwQinQSubIfTermStatTable=hwQinQSubIfTermStatTable, hwQinQSubIfDot1qTermGroupId=hwQinQSubIfDot1qTermGroupId, hwBpduTunnelGroup=hwBpduTunnelGroup, hwQinQCtrlVlanFlag=hwQinQCtrlVlanFlag, hwQinQSubIfDot1qTermGroup=hwQinQSubIfDot1qTermGroup, hwQinQSubIfDot1qTermStatInBdPackets=hwQinQSubIfDot1qTermStatInBdPackets, hwQinQSubIfMapRowStatus=hwQinQSubIfMapRowStatus, hwQinQSubIfTermStatInPackets=hwQinQSubIfTermStatInPackets, hwBpduTunnelVlanListHigh=hwBpduTunnelVlanListHigh, hwQinQSubIfTermStatGroup=hwQinQSubIfTermStatGroup, hwQinQSubIfTermStatPEVlan=hwQinQSubIfTermStatPEVlan, hwQinQStaticARPCfgVlan=hwQinQStaticARPCfgVlan, hwQinQStaticARPCfgIfIndex=hwQinQStaticARPCfgIfIndex, hwQinQCtrlVlan=hwQinQCtrlVlan, hwQinQCompliances=hwQinQCompliances, hwQinQSubIfDot1qTermStatInUniPackets=hwQinQSubIfDot1qTermStatInUniPackets, hwQinQSubIfStackStatInUniPackets=hwQinQSubIfStackStatInUniPackets, hwQinQSubIfDot1qTermStatInPackets=hwQinQSubIfDot1qTermStatInPackets, hwQinQSubIfDot1qTermStatEntry=hwQinQSubIfDot1qTermStatEntry, hwQinQModeCfgIfIndex=hwQinQModeCfgIfIndex, hwQinQSubIfCEVlanMap=hwQinQSubIfCEVlanMap, hwQinQSubIfVlanStackingTable=hwQinQSubIfVlanStackingTable, hwQinQSubIfStackingStatCEVlan=hwQinQSubIfStackingStatCEVlan, hwQinQCtrlVlanCfgIfIndex=hwQinQCtrlVlanCfgIfIndex, hwQinQSubIfStackingStatIfIndex=hwQinQSubIfStackingStatIfIndex, hwQinQBpduTunnelGroup=hwQinQBpduTunnelGroup, hwQinQBpduTunnelCustomerBpduTagListHigh=hwQinQBpduTunnelCustomerBpduTagListHigh, hwQinQSystemWellKnowMac=hwQinQSystemWellKnowMac, hwQinQSubIfDot1qTermVidEnd=hwQinQSubIfDot1qTermVidEnd, hwBpduTunnelVlanEntry=hwBpduTunnelVlanEntry, hwQinQSubIfDot1qTermIfIndex=hwQinQSubIfDot1qTermIfIndex, hwQinQAsymmetryCfgEntry=hwQinQAsymmetryCfgEntry, hwQinQSubIfTermStatOutPackets=hwQinQSubIfTermStatOutPackets, hwQinQSubIfDot1qTermTable=hwQinQSubIfDot1qTermTable, hwQinQSubIfStackStatOutUniPackets=hwQinQSubIfStackStatOutUniPackets, hwBpduTunnelEgressAddress=hwBpduTunnelEgressAddress, hwQinQSubIfStackingRowStatus=hwQinQSubIfStackingRowStatus, hwQinQStaticMACCfgFlag=hwQinQStaticMACCfgFlag, hwQinQRemarkOuterTpid=hwQinQRemarkOuterTpid, hwQinQCtrlVlanRowStatus=hwQinQCtrlVlanRowStatus, hwQinQSubIfTermGroupId=hwQinQSubIfTermGroupId, hwQinQSubIfDot1qTermStatOutBytes=hwQinQSubIfDot1qTermStatOutBytes, hwQinQSubIfCEVlanStart=hwQinQSubIfCEVlanStart, hwQinQSubIfStackingStatGroup=hwQinQSubIfStackingStatGroup, hwQinQSubIfStackingStatInBytes=hwQinQSubIfStackingStatInBytes, hwQinQEtherType=hwQinQEtherType, hwQinQStackingVlanCfgGroup=hwQinQStackingVlanCfgGroup, hwQinQRemarkCfgEntry=hwQinQRemarkCfgEntry, hwQinQSubIfCEVlanEnd=hwQinQSubIfCEVlanEnd, hwQinQSystemEtherType=hwQinQSystemEtherType, hwQinQSubIfStackGroupId=hwQinQSubIfStackGroupId, hwQinQStaticARPCfgCEVlan=hwQinQStaticARPCfgCEVlan, PYSNMP_MODULE_ID=hwQinQ, hwQinQSubIfDot1qTermStatOutMuPackets=hwQinQSubIfDot1qTermStatOutMuPackets, hwBpduTunnelIngressPortIndex=hwBpduTunnelIngressPortIndex, hwQinQSubIfTermStatInBytes=hwQinQSubIfTermStatInBytes, hwBpduTunnelVlanListLow=hwBpduTunnelVlanListLow, hwBpduTunnelRowStatus=hwBpduTunnelRowStatus, hwQinQSubIfTermStatOutBytes=hwQinQSubIfTermStatOutBytes, hwBpduTunnelVlanTable=hwBpduTunnelVlanTable, hwQinQFlexibleFlag=hwQinQFlexibleFlag, hwQinQStaticARPCfgTable=hwQinQStaticARPCfgTable, hwQinQStaticMACCfgMac=hwQinQStaticMACCfgMac, hwQinQCeEtherType=hwQinQCeEtherType, hwQinQMngObjects=hwQinQMngObjects, hwQinQStaticMACCfgType=hwQinQStaticMACCfgType, hwQinQStackingVlanCfgIfIndex=hwQinQStackingVlanCfgIfIndex, hwQinQBpduTunnelCustomerBpduTag=hwQinQBpduTunnelCustomerBpduTag, hwQinQAsymmetryCfgGroup=hwQinQAsymmetryCfgGroup, hwBpduTunnelEgressGroup=hwBpduTunnelEgressGroup, hwQinQStackingVlanCfgRowStatus=hwQinQStackingVlanCfgRowStatus, hwBpduTunnelVlanGroup=hwBpduTunnelVlanGroup, hwQinQSubIfDot1qTermStatTable=hwQinQSubIfDot1qTermStatTable, hwQinQSubIfDot1qTermStatCEVlan=hwQinQSubIfDot1qTermStatCEVlan, hwQinQSubIfDot1qTermStatInBytes=hwQinQSubIfDot1qTermStatInBytes, hwBpduTunnelMultiAddress=hwBpduTunnelMultiAddress, hwQinQSubIfStackStatInMuPackets=hwQinQSubIfStackStatInMuPackets, hwQinQPriorityRemark=hwQinQPriorityRemark, hwQinQBpduTunnelEnableTwoQBpduTunnel=hwQinQBpduTunnelEnableTwoQBpduTunnel, hwQinQSubIfStackStatGroupId=hwQinQSubIfStackStatGroupId, hwBpduTunnelIngressEntry=hwBpduTunnelIngressEntry, hwQinQStaticMACCfgRowStatus=hwQinQStaticMACCfgRowStatus, hwBpduTunnelIngressRowStatus=hwBpduTunnelIngressRowStatus, hwQinQSubIfStackingStatEntry=hwQinQSubIfStackingStatEntry, hwQinQSwapCfgEntry=hwQinQSwapCfgEntry, hwQinQSubIfTermRowStatus=hwQinQSubIfTermRowStatus, hwQinQSubIfTermStatOutUniPackets=hwQinQSubIfTermStatOutUniPackets, hwQinQSubIfDot1qTermStatOutPackets=hwQinQSubIfDot1qTermStatOutPackets, hwQinQSubIfPEVlanMap=hwQinQSubIfPEVlanMap, hwQinQSubIfCEEtherType=hwQinQSubIfCEEtherType, hwQinQSubIfVlanStackingGroup=hwQinQSubIfVlanStackingGroup, hwQinQ=hwQinQ, hwQinQSubIfStackingCEVlanStart=hwQinQSubIfStackingCEVlanStart, hwBpduSystemDropPacketSta=hwBpduSystemDropPacketSta, hwQinQSubIfTermStatGroupId=hwQinQSubIfTermStatGroupId, hwQinQStaticARPCfgRowStatus=hwQinQStaticARPCfgRowStatus, hwQinQStaticMACCfgEntry=hwQinQStaticMACCfgEntry, hwQinQSubIfPEEtherType=hwQinQSubIfPEEtherType, hwQinQBpduTunnelCustomerBpduTagListLow=hwQinQBpduTunnelCustomerBpduTagListLow, hwQinQSubIfTermTable=hwQinQSubIfTermTable, hwQinQSubIfTermStatInMuPackets=hwQinQSubIfTermStatInMuPackets, hwQinQSubIfStackingPEVlan=hwQinQSubIfStackingPEVlan, hwQinQGroupType=hwQinQGroupType, hwQinQBpduTunnelEnableBpduFilter=hwQinQBpduTunnelEnableBpduFilter, hwQinQRemarkCfgTable=hwQinQRemarkCfgTable, hwQinQBpduTunnelIndex=hwQinQBpduTunnelIndex, hwBpduTunnelIngressGroup=hwBpduTunnelIngressGroup, hwQinQGroups=hwQinQGroups, hwBpduTunnelBpduEnable=hwBpduTunnelBpduEnable, hwQinQStaticMACCfgTable=hwQinQStaticMACCfgTable, hwQinQSubIfTermPEVlan=hwQinQSubIfTermPEVlan, hwQinQGroupCfgEntry=hwQinQGroupCfgEntry, hwQinQModeCfgTable=hwQinQModeCfgTable, hwBpduTunnelEgressPortIndex=hwBpduTunnelEgressPortIndex, hwBpduTunnelEgressRowStatus=hwBpduTunnelEgressRowStatus, hwBpduTunnelPortIndex=hwBpduTunnelPortIndex, hwQinQSwapCfgTable=hwQinQSwapCfgTable, hwQinQSwapCfgFlag=hwQinQSwapCfgFlag, hwQinQStaticARPCfgGroup=hwQinQStaticARPCfgGroup, hwBpduTunnelBpduIndex=hwBpduTunnelBpduIndex, hwQinQSubIfStackingIfIndex=hwQinQSubIfStackingIfIndex, hwQinQGroupCfgGroup=hwQinQGroupCfgGroup, hwQinQBpduTunnelEntry=hwQinQBpduTunnelEntry, hwQinQSubIfTermStatIfIndex=hwQinQSubIfTermStatIfIndex, hwQinQCtrlVlanCfgGroup=hwQinQCtrlVlanCfgGroup, hwQinQStaticMACCfgVsiName=hwQinQStaticMACCfgVsiName, hwQinQSubIfTermIfIndex=hwQinQSubIfTermIfIndex, hwQinQStaticMACCfgIfIndex=hwQinQStaticMACCfgIfIndex, hwQinQSubIfDot1qTermStatOutUniPackets=hwQinQSubIfDot1qTermStatOutUniPackets, hwQinQSubIfMapCe8021p=hwQinQSubIfMapCe8021p, hwQinQStaticARPCfgMac=hwQinQStaticARPCfgMac, hwBpduTunnelEnable=hwBpduTunnelEnable, hwQinQModeCfgGroup=hwQinQModeCfgGroup, hwQinQSubIfStackingStatInPackets=hwQinQSubIfStackingStatInPackets, BpduIndex=BpduIndex, hwQinQGroupCfgTable=hwQinQGroupCfgTable, hwQinQAsymmetryCfgTable=hwQinQAsymmetryCfgTable, hwQinQStackingVlanCfgVlanId=hwQinQStackingVlanCfgVlanId, hwQinQSubIfTermStatInBdPackets=hwQinQSubIfTermStatInBdPackets, hwQinQStackingVlanCfgEntry=hwQinQStackingVlanCfgEntry, hwQinQRemarkCfgGroup=hwQinQRemarkCfgGroup, hwQinQRemarkCfgIfIndex=hwQinQRemarkCfgIfIndex, hwQinQSystemBridgeRole=hwQinQSystemBridgeRole, hwQinQSubIfMapCetoPeFlag=hwQinQSubIfMapCetoPeFlag, hwQinQSubIfStackingStatOutPackets=hwQinQSubIfStackingStatOutPackets, hwQinQSubIfMapGroup=hwQinQSubIfMapGroup, hwQinQGroupId=hwQinQGroupId, hwQinQStaticMACCfgGroup=hwQinQStaticMACCfgGroup, hwQinQSubIfDot1qTermStatGroup=hwQinQSubIfDot1qTermStatGroup, hwQinQSubIfDot1qTermStatGroupId=hwQinQSubIfDot1qTermStatGroupId, hwQinQSubIfVlanStackingEntry=hwQinQSubIfVlanStackingEntry, hwBpduTunnelTable=hwBpduTunnelTable, hwQinQSubIfDot1qTermEntry=hwQinQSubIfDot1qTermEntry, hwQinQCtrlVlanCfgEntry=hwQinQCtrlVlanCfgEntry, hwQinQGroupCfgIfIndex=hwQinQGroupCfgIfIndex, hwQinQSubIfTermStatOutBdPackets=hwQinQSubIfTermStatOutBdPackets, hwQinQSubIfDot1qTermRowStatus=hwQinQSubIfDot1qTermRowStatus, hwQinQStaticMACCfgPEVlan=hwQinQStaticMACCfgPEVlan, hwQinQSubIfTermStatInUniPackets=hwQinQSubIfTermStatInUniPackets, hwQinQConformance=hwQinQConformance, hwQinQEtherEncpsType=hwQinQEtherEncpsType, hwQinQGroupStat=hwQinQGroupStat, hwQinQSubIfStackStatOutMuPackets=hwQinQSubIfStackStatOutMuPackets, hwQinQStaticARPCfgEntry=hwQinQStaticARPCfgEntry, hwBpduTunnelIngressTable=hwBpduTunnelIngressTable, hwQinQSubIfTermCEVlanEnd=hwQinQSubIfTermCEVlanEnd, hwQinQBpduTunnelEnableOneQBpduTunnel=hwQinQBpduTunnelEnableOneQBpduTunnel, hwQinQSubIfAsymmetry=hwQinQSubIfAsymmetry, hwQinQAsymmetryUserMode=hwQinQAsymmetryUserMode, hwQinQSystemBase=hwQinQSystemBase, hwQinQAsymmetryCfgIfIndex=hwQinQAsymmetryCfgIfIndex, hwQinQSubIfStackingStatTable=hwQinQSubIfStackingStatTable, hwQinQModeCfgEntry=hwQinQModeCfgEntry, hwQinQSubIfTermGroup=hwQinQSubIfTermGroup, hwQinQModeCfgMode=hwQinQModeCfgMode, hwQinQSubIfType=hwQinQSubIfType, hwQinQSubIfMapGroupId=hwQinQSubIfMapGroupId, hwQinQSwapCfgIfIndex=hwQinQSwapCfgIfIndex, hwQinQSubIfTermStatEntry=hwQinQSubIfTermStatEntry, hwBpduTunnelEntry=hwBpduTunnelEntry, hwQinQSubIfStackingStatOutBytes=hwQinQSubIfStackingStatOutBytes, hwQinQSubIfTermStatCEVlan=hwQinQSubIfTermStatCEVlan, hwQinQSubIfDot1qTermStatOutBdPackets=hwQinQSubIfDot1qTermStatOutBdPackets, hwBpduTunnelBpduIngressMacIndex=hwBpduTunnelBpduIngressMacIndex, hwBpduTunnelBpduEgressMacIndex=hwBpduTunnelBpduEgressMacIndex, hwQinQSubIfMapEntry=hwQinQSubIfMapEntry, hwQinQBpduTunnelTable=hwQinQBpduTunnelTable, hwQinQSubIfStackStatInBdPackets=hwQinQSubIfStackStatInBdPackets, hwQinQSubIfDot1qTermStatIfIndex=hwQinQSubIfDot1qTermStatIfIndex, hwBpduTunnelIngressAddress=hwBpduTunnelIngressAddress, hwQinQSubIfMapIfIndex=hwQinQSubIfMapIfIndex, hwQinQGroupRowStatus=hwQinQGroupRowStatus, hwQinQSubIfStackingCEVlanEnd=hwQinQSubIfStackingCEVlanEnd, hwQinQBpduTunnelEnableBpduTag=hwQinQBpduTunnelEnableBpduTag, hwQinQStaticMACCfgVlan=hwQinQStaticMACCfgVlan, hwQinQStaticARPCfgIp=hwQinQStaticARPCfgIp, hwQinQStaticMACCfgCEVlan=hwQinQStaticMACCfgCEVlan, hwQinQSubIfTermCEVlanStart=hwQinQSubIfTermCEVlanStart, hwBpduTunnelEgressTable=hwBpduTunnelEgressTable, hwQinQSubIfPEVlan=hwQinQSubIfPEVlan, hwQinQSubIfStackStatOutBdPackets=hwQinQSubIfStackStatOutBdPackets, hwQinQSubIfMapPe8021p=hwQinQSubIfMapPe8021p, hwQinQStackingVlanCfgTable=hwQinQStackingVlanCfgTable, hwQinQSystemBaseGroup=hwQinQSystemBaseGroup, hwQinQSwapCfgGroup=hwQinQSwapCfgGroup, hwQinQSubIfMapTable=hwQinQSubIfMapTable, hwBpduTunnelEgressEntry=hwBpduTunnelEgressEntry, hwQinQSubIfDot1qTermVidStart=hwQinQSubIfDot1qTermVidStart, hwQinQCtrlVlanCfgTable=hwQinQCtrlVlanCfgTable, hwQinQCompliance=hwQinQCompliance)
