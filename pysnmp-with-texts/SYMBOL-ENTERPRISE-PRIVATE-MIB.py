#
# PySNMP MIB module SYMBOL-ENTERPRISE-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYMBOL-ENTERPRISE-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:14:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
snmp, = mibBuilder.importSymbols("SNMPv2-MIB", "snmp")
NotificationType, MibIdentifier, ModuleIdentity, enterprises, Counter32, iso, ObjectIdentity, Bits, Counter64, IpAddress, Unsigned32, NotificationType, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibIdentifier", "ModuleIdentity", "enterprises", "Counter32", "iso", "ObjectIdentity", "Bits", "Counter64", "IpAddress", "Unsigned32", "NotificationType", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
symbol = MibIdentifier((1, 3, 6, 1, 4, 1, 388))
spectrum24 = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1))
apProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 1))
apConfigMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 1, 1))
apPerformMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 1, 2))
apFaultMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 1, 3))
apSecurityMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 1, 4))
apManufactureInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 1))
apSystemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 2))
apSNMPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 3))
apRFConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4))
apSerialPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 5))
apEthernetStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 3))
apRFStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4))
apSerialPortStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 6))
apWNMPStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 7))
apMUInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8))
apFilterStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 10))
apWLAPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 11))
coldStart = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,0)).setObjects(("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"))
if mibBuilder.loadTexts: coldStart.setDescription('Access Point cold boot. - apMyMacAddr is the MAC address of the Access Point sending this trap message.')
authenticationFailure = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,4)).setObjects(("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apAPMacAddr"))
if mibBuilder.loadTexts: authenticationFailure.setDescription('Invalid SNMP Community string. - apMyMacAddr is the MAC address of the Access Point sending this trap message. - apAPMacAddr is the MAC address of the remote host sending SNMP packet with invalid community.')
apRFStartUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 1) + (0,101)).setObjects(("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"))
if mibBuilder.loadTexts: apRFStartUpTrap.setDescription('RF Driver is up. - apMyMacAddr is the MAC address of the Access Point sending this trap message.')
apACLViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 1) + (0,102)).setObjects(("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-ENTERPRISE-PRIVATE-MIB", "muMacAddr"))
if mibBuilder.loadTexts: apACLViolationTrap.setDescription('Mobile Unit MAC address not in the Access control Table. - apMyMacAddr is the MAC address of the Access Point sending this trap message. - muMacAddr is the MAC address of the Mobile Unit not in the Access Control Table.')
apAPIdConflictTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 1) + (0,103)).setObjects(("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"))
if mibBuilder.loadTexts: apAPIdConflictTrap.setDescription('An Access Point with the same AP-ID with this Access Point is found. - apMyMacAddr is the MAC address of the Access Point sending this trap message.')
apMUAssocTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 1) + (0,111)).setObjects(("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-ENTERPRISE-PRIVATE-MIB", "muMacAddr"), ("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apCurrentMUs"))
if mibBuilder.loadTexts: apMUAssocTrap.setDescription('Indicates that there is one Mobile Unit associating with this Access Point. - apMyMacAddr is the MAC address of the Access Point sending this trap message. - muMacAddr is the MAC address of the Mobile Unit. Note : If two or more Mobile Units associate with the Access Point at the same time, muMacAddr belongs to the last Mobile Unit. - apCurrentMUs is the number of Mobile Units currently associating with this Access Point.')
apMUUnAssocTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 1) + (0,112)).setObjects(("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-ENTERPRISE-PRIVATE-MIB", "muMacAddr"), ("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apCurrentMUs"))
if mibBuilder.loadTexts: apMUUnAssocTrap.setDescription('Indicates that there is one Mobile Unit no longer associating with this Access Point anymore. - apMyMacAddr is the MAC address of the Access Point sending this trap message. - muMacAddr is the MAC address of the Mobile Unit. Note : If two or more Mobile Units un-associate with the Access Point at the same time, muMacAddr belongs to the last Mobile Unit. - apCurrentMUs is the number of Mobile Units currently associating with this Access Point.')
apMUToCAMTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 1) + (0,113)).setObjects(("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-ENTERPRISE-PRIVATE-MIB", "muMacAddr"), ("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apCurrentMUs"))
if mibBuilder.loadTexts: apMUToCAMTrap.setDescription('Indicates that the Mobile Unit changes from PSP mode to CAM mode. - apMyMacAddr is the MAC address of the Access Point sending this trap message. - muMacAddr is the MAC address of the Mobile Unit. Note : If two or more Mobile Units change their mode at the same time, muMacAddr belongs to the last Mobile Unit. - apCurrentMUs is the number of Mobile Units currently associating with this Access Point.')
apMUToPSPTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 1) + (0,114)).setObjects(("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-ENTERPRISE-PRIVATE-MIB", "muMacAddr"), ("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apCurrentMUs"))
if mibBuilder.loadTexts: apMUToPSPTrap.setDescription('Indicates that the Mobile Unit changes from CAM mode to PSP mode. - apMyMacAddr is the MAC address of the Access Point sending this trap message. - muMacAddr is the MAC address of the Mobile Unit. Note : If two or more Mobile Units change their mode at the same time, muMacAddr belongs to the last Mobile Unit. - apCurrentMUs is the number of Mobile Units currently associating with this Access Point.')
apRootWLAPUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 1) + (0,121)).setObjects(("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apAPMacAddr"), ("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apNbrOfWLAPItfs"))
if mibBuilder.loadTexts: apRootWLAPUpTrap.setDescription('Indicates that the Root AP connection is setup and is ready to forward data. - apMyMacAddr is the MAC address of the Access Point sending this trap message. - apAPMacAddr is the MAC address of the Root AP. - apNbrOfWLAPItfs is the number of current WLAP Interfaces established.')
apRootWLAPLostTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 1) + (0,122)).setObjects(("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apAPMacAddr"), ("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apNbrOfWLAPItfs"))
if mibBuilder.loadTexts: apRootWLAPLostTrap.setDescription('If the current wireless AP does not receive Beacon packet from its Root AP within one second, it will consider the Root AP is lost. The wireless AP will eventually reset itself to re-establish the network topology. - apMyMacAddr is the MAC address of the Access Point sending this trap message. - apAPMacAddr is the MAC address of the Root AP. - apNbrOfWLAPItfs is the number of current WLAP Interfaces established.')
apDsgntedWLAPUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 1) + (0,123)).setObjects(("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apAPMacAddr"), ("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apNbrOfWLAPItfs"))
if mibBuilder.loadTexts: apDsgntedWLAPUpTrap.setDescription('Indicates that the Designated WLAP connection is setup and is ready to forward data. - apMyMacAddr is the MAC address of the Access Point sending this trap message. - apAPMacAddr is the MAC address of the Designated WLAP. - apNbrOfWLAPItfs is the number of current WLAP Interfaces established.')
apDsgnatedWLAPLostTrap = NotificationType((1, 3, 6, 1, 4, 1, 388, 1, 1) + (0,124)).setObjects(("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apMyMacAddr"), ("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apAPMacAddr"), ("SYMBOL-ENTERPRISE-PRIVATE-MIB", "apNbrOfWLAPItfs"))
if mibBuilder.loadTexts: apDsgnatedWLAPLostTrap.setDescription('If the current wireless AP does not receive Config BPDU (Bridge Protocol Data Unit) packet from its Designated WLAP for MAX AGE time, it will consider that the Designated WLAP is lost. - apMyMacAddr is the MAC address of the Access Point sending this trap message. - apAPMacAddr is the MAC address of the Designated WLAP. - apNbrOfWLAPItfs is the number of current WLAP Interfaces established.')
apModelnumber = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apModelnumber.setStatus('mandatory')
if mibBuilder.loadTexts: apModelnumber.setDescription('The Model Number of the Access Point device.')
apSerialnumber = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSerialnumber.setStatus('mandatory')
if mibBuilder.loadTexts: apSerialnumber.setDescription('The Serial Number of the Access Point system.')
apHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apHardwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: apHardwareRev.setDescription('The current revision of the Access Point hardware.')
apMyMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMyMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: apMyMacAddr.setDescription('The MAC address of the AP.')
apAPFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAPFirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: apAPFirmwareRev.setDescription('The current revision of the Access Point firmware.')
apRFFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFFirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: apRFFirmwareRev.setDescription('The current revision of the Access Point radio firmware.')
apSystemName = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: apSystemName.setDescription('An ASCII string to identify this Access Point (up to 31 characters).')
apMyIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMyIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: apMyIPAddr.setDescription('The IP address for the AP.')
apSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: apSubnetMask.setDescription('The IP subnet mask for the AP.')
apGatewayIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apGatewayIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: apGatewayIPAddr.setDescription('The IP address for the default gateway.')
apDefaultInterface = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ppp", 1), ("ethernet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDefaultInterface.setStatus('mandatory')
if mibBuilder.loadTexts: apDefaultInterface.setDescription('Specifies the default interface (Ethernet or PPP) for the Access Point to forward an unknown packet. Default is ethernet(2).')
apEnetPortState = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apEnetPortState.setStatus('mandatory')
if mibBuilder.loadTexts: apEnetPortState.setDescription('Specifies the state of the Ethernet interface. Default is up(1).')
apEthernetTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apEthernetTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: apEthernetTimeOut.setDescription("The Ethernet time out value ranges from 30 to 255 seconds. If the value is: - 0: the Ethernet Time Out function is disabled. - 1: detect Ethernet timeout by hardware circuitry. - 2: send WLAP Alive BPDU on Ethernet interface to let other WLAP on the same Ethernet segment to detect it's existence. - 3: keep track of WLAP Alive BPDU on Ethernet inter- face. If the BPDU is missing for 'WLAP Hello Time' seconds, both Ethernet Attached and Activity LEDs will flash and the RF interface is disabled until the WLAP Alive BPDU is received again, then the AP will reset itself. When the Ethernet connection is broken: - if WLAP Mode is disabled, the AP will clear the MU table and disable the RF interface until the Ethernet connection is up. - if WLAP Mode is enabled, the AP will set the timeout value to zero and reset itself. The default value is 0.")
apTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTelnetEnable.setStatus('mandatory')
if mibBuilder.loadTexts: apTelnetEnable.setDescription('Enables/Disables Telnet access to the AP. Default is enabled(1).')
apAccCtrlEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAccCtrlEnable.setStatus('mandatory')
if mibBuilder.loadTexts: apAccCtrlEnable.setDescription('Enables/Disables the Access Control function. When it is enabled, a Mobile Unit can associate with the Access Point only if its MAC address is in the Access Control Table. Default is disabled(2).')
apTypeFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("forward", 2), ("discard", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTypeFilterEnable.setStatus('mandatory')
if mibBuilder.loadTexts: apTypeFilterEnable.setDescription('Specifies the type of Access Point Type Filtering operation, i.e. Disabled/Forward/Discard. Default is disabled(1).')
apMUAutoCfgEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMUAutoCfgEnable.setStatus('mandatory')
if mibBuilder.loadTexts: apMUAutoCfgEnable.setDescription('Enables/Disables Autoconfiguration of Mobile Units. When enabled, the Net ID is automatically downloaded to Mobile Units. Default is disabled(2).')
apAutoCfgEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAutoCfgEnable.setStatus('mandatory')
if mibBuilder.loadTexts: apAutoCfgEnable.setDescription('Enables/Disables Access Point auto configuration. When enabled, the Access Point will automatically select unique BSSs and hopping sequences by negotiating with one another. Default is enabled(1).')
apWNMPEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWNMPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: apWNMPEnable.setDescription('Enables/Disables Use of the WNMP agent. Default is enabled(1).')
apAPStateXchgEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAPStateXchgEnable.setStatus('mandatory')
if mibBuilder.loadTexts: apAPStateXchgEnable.setDescription('Enables/Disables exchanging Access Point to Access Point state information by using WNMP protocol. Default is enabled(1).')
apSNMPMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("readonly", 2), ("readwrite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSNMPMode.setStatus('mandatory')
if mibBuilder.loadTexts: apSNMPMode.setDescription('Specifies the mode of the SNMP Agent operation, i.e. Disabled/Readonly/ReadWrite. Default is readwrite(3).')
apROCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apROCommunityName.setStatus('mandatory')
if mibBuilder.loadTexts: apROCommunityName.setDescription('The Read-Only community name of the SNMP command for management station accessing this Access Point (up to 31 characters).')
apRWCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRWCommunityName.setStatus('mandatory')
if mibBuilder.loadTexts: apRWCommunityName.setDescription("The Read-Write community name of the SNMP command for management station accessing this Access Point (up to 13 characters). This community name is same as the System Password or Telnet Password. For security purpose, if the management station uses the READ-ONLY community name to access this object, a string of 'xxxxx' will be returned.")
apTrapRcvrIpAdr = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapRcvrIpAdr.setStatus('mandatory')
if mibBuilder.loadTexts: apTrapRcvrIpAdr.setDescription("Trap receiver's (i.e. Network Manager's) IP address.")
apAllTrapsEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAllTrapsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: apAllTrapsEnable.setDescription('Enables/Disables all SNMP traps. Default is disable(2).')
apColdBootTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apColdBootTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: apColdBootTrapEnable.setDescription('Enables/Disables Access Point Cold Boot trap. Default is disable(2). This is a generic-trap and the trap code is 0. The enabled/disabled state of this trap depends on the state of apAllTrapsEnable.')
apAuthenFailureTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthenFailureTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: apAuthenFailureTrapEnable.setDescription('Enables/Disables authentication failure trap. Default is disable(2). This is a generic-trap and the trap code is 4. The enabled/disabled state of this trap depends on the state of apAllTrapsEnable.')
apRFTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRFTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: apRFTrapEnable.setDescription('Enables/Disables Access Point RF driver startup trap. Default is disable(2). This is an enterprise-specific trap and the trap code is 101. The enabled/disabled state of this trap depends on the state of apAllTrapsEnable.')
apACLTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apACLTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: apACLTrapEnable.setDescription('Enables/Disables Access Control violation trap. Default is disable(2). This is an enterprise-specific trap and the trap code is 102. The enabled/disabled state of this trap depends on the state of apAllTrapsEnable.')
apMUStateChngTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMUStateChngTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: apMUStateChngTrapEnable.setDescription('Enables/Disables Mobile Unit State Change trap. Default is disable(2). Once enabled, the following 4 enterprise- specific traps will be generated : - MU Association Trap, the trap code is 111. - MU Un-association Trap, the trap code is 112. - MU To CAM Trap, the trap code is 113. - MU To PSP Trap, the trap code is 114. The enabled/disabled state of this trap depends on the state of apAllTrapsEnable.')
apAPIdConflictTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAPIdConflictTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: apAPIdConflictTrapEnable.setDescription('Enables/Disables AP-Id conflict trap. Default is disable(2). This is an enterprise-specific trap and the trap code is 103. The enabled/disabled state of this trap depends on the state of apAllTrapsEnable.')
apWLAPConnChngTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWLAPConnChngTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: apWLAPConnChngTrapEnable.setDescription('Enables/Disables WLAP Connection Change trap. Default is disable(2). Once enabled, the following 4 enterprise-specific traps will be generated : - Root AP Up Trap, the trap code is 121. - Root AP Lost Trap, the trap code is 122. - Designated WLAP Up Trap, the trap code is 123. - Designated WLAP Lost Trap, the trap code is 124. The enabled/disabled state of this trap depends on the state of apAllTrapsEnable.')
apRFPortState = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRFPortState.setStatus('mandatory')
if mibBuilder.loadTexts: apRFPortState.setDescription('Specifies the state of the RF Interface. Default is up(1).')
apNetId = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apNetId.setStatus('mandatory')
if mibBuilder.loadTexts: apNetId.setDescription('The current Net ID (i.e. operational ESS ID) for the AP. This value determines which APs are on the same network and ranges from 1 - 0x1fe.')
apApId = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apApId.setStatus('mandatory')
if mibBuilder.loadTexts: apApId.setDescription('The current AP-ID (i.e. BSS ID) for this Access Point. This value ranges from 0 - 0x79. Writing a value will force this Access Point to use that value as AP-ID, unless it conflicts with that used by another Access Point. In that case this Access Point will select its own value. The Access Point will always insure that the AP-ID is unique.')
apHopSequence = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHopSequence.setStatus('mandatory')
if mibBuilder.loadTexts: apHopSequence.setDescription('The hopping sequence defined in the system configura- tion table for this AP. If WLAP mode is enabled, this Access Point will follow the hopping sequence (defined as apWLAPHopSequence) of the Root AP. Writing a value will force this Access Point to use that value as hopping sequence, unless it conflicts with that used by another AP. In that case this Access Point will select its own value. The Access Point will always insure that the hopping sequence is unique (given that there are fewer Access Points than the maximum number of hopping sequences). For the United States, this value ranges from 1-22, for Japan 0-3, ... TBD.')
apCountryName = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCountryName.setStatus('mandatory')
if mibBuilder.loadTexts: apCountryName.setDescription('The country for which the Access Point radio is configured. It is set at the factory and may not be altered.')
apHopSet = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apHopSet.setStatus('mandatory')
if mibBuilder.loadTexts: apHopSet.setDescription('The current hopping sequence set used by this AP.')
apAntennaSelect = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary-and-secondary", 1), ("primary-only", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAntennaSelect.setStatus('mandatory')
if mibBuilder.loadTexts: apAntennaSelect.setDescription('Select either Primary antenna only (i.e. Disable antenna diversity) or both Primary and Secondary antennas (i.e. Enable antenna diversity). Default is primary-only(2).')
apDTIMInterval = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDTIMInterval.setStatus('mandatory')
if mibBuilder.loadTexts: apDTIMInterval.setDescription('The frequency of DTIM packets as a multiple of TIM packets. Default is 10.')
apBCMCQMax = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apBCMCQMax.setStatus('mandatory')
if mibBuilder.loadTexts: apBCMCQMax.setDescription('The maximum size of broadcast/multicast queue. Default is 10.')
apReassemblyTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReassemblyTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: apReassemblyTimeOut.setDescription('The re-assembly timeout (in .5 ms units). Default is 9000.')
apMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMaxRetries.setStatus('mandatory')
if mibBuilder.loadTexts: apMaxRetries.setDescription('The maximum number of allowed retries before aborting a transmission. Default is 15.')
apMulticastMask = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMulticastMask.setStatus('mandatory')
if mibBuilder.loadTexts: apMulticastMask.setDescription('RF multicast packets with these upper 32 bits are sent out immediately.')
apEncryptCoeff = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apEncryptCoeff.setStatus('mandatory')
if mibBuilder.loadTexts: apEncryptCoeff.setDescription('The encrytion coefficient value in hexadecimal.')
apEncryptPhase = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apEncryptPhase.setStatus('mandatory')
if mibBuilder.loadTexts: apEncryptPhase.setDescription('The encrytion phase value in hexadecimal.')
apWLAPMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWLAPMode.setStatus('mandatory')
if mibBuilder.loadTexts: apWLAPMode.setDescription('Enables/Disables Wireless AP capability. Default is disabled(2).')
apWLAPPriority = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWLAPPriority.setStatus('mandatory')
if mibBuilder.loadTexts: apWLAPPriority.setDescription('Provides a user with the influence to determine the Root AP in wireless operation. The priority value is added as the most significant portion of the MAC address to form the WLAP ID. A WLAP with a lower numerical value for priority is more likely to become the Root AP. Default is 8000 hex from the 0 - 0xFFFF range. Reset the Access Point for value to take effect.')
apWLAPManualAPID = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWLAPManualAPID.setStatus('mandatory')
if mibBuilder.loadTexts: apWLAPManualAPID.setDescription('Specifies the AP-ID of a particular WLAP and forces the current WLAP to associate only with that WLAP. When WLAP Manaul AP ID is set to the current AP-ID, the current AP jumps into Functional state immediately and waits for an Association Request from the other WLAP. Reset AP for value to take effect.')
apWLAPEncryption = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWLAPEncryption.setStatus('mandatory')
if mibBuilder.loadTexts: apWLAPEncryption.setDescription('Enables/Disables Wireless AP encryption capability. Default is disabled(2).')
apWLAPHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWLAPHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: apWLAPHelloTime.setDescription('Sets the time lapse, in seconds, between Configuration BPDUs (Bridge Protocol Data Unit) generated by a Root AP. Default is 20 seconds. Reset AP for value to take effect.')
apWLAPMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWLAPMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: apWLAPMaxAge.setDescription('Specifies how long, in seconds, a Configuration BPDU (Bridge Protocol Data Unit) is kept before it is judged too old and discarded. Consequently, the interface is considered to be disconnected. Default is 100 seconds. Recommended value is multiple of the WLAP Hello Time. Reset AP for value to take effect.')
apWLAPFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 4, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWLAPFwdDelay.setStatus('mandatory')
if mibBuilder.loadTexts: apWLAPFwdDelay.setDescription('Specifies how long, in seconds, an WLAP is prevented from forwarding data packets to an interface. This delay is to allow the spread of news of a topology change to all parts of a network. Default is 10 secs. Reset AP for value to take effect.')
apPPPState = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPPPState.setStatus('mandatory')
if mibBuilder.loadTexts: apPPPState.setDescription('Indicates the current state of the PPP connection machine. Default is down(2).')
apSerialPortUse = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ppp", 1), ("ui", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSerialPortUse.setStatus('mandatory')
if mibBuilder.loadTexts: apSerialPortUse.setDescription('Specifies whether the Serial Interface is to be used as User Interface(UI) or PPP. Default is ui(2).')
apModemConnected = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apModemConnected.setStatus('mandatory')
if mibBuilder.loadTexts: apModemConnected.setDescription('Specifies whether the Serial Interface has a modem attached to it. Default is no(2).')
apConnectMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("originate", 1), ("answer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apConnectMode.setStatus('mandatory')
if mibBuilder.loadTexts: apConnectMode.setDescription('Specifies the Modem connection mode: - originate(1): AP sends dial-out information. - answer(2): AP waits for dial-in information. Default is answer(2).')
apDialOutNumber = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDialOutNumber.setStatus('mandatory')
if mibBuilder.loadTexts: apDialOutNumber.setDescription('Specifies the number to be dialed by the modem.')
apDialOutMode = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDialOutMode.setStatus('mandatory')
if mibBuilder.loadTexts: apDialOutMode.setDescription('Specifies the dialout mode: - auto(1): Modem dial out during startup time. - manual(2): Modem dial out by manned intervention. Dedault is auto(1).')
apAnswerWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAnswerWaitTime.setStatus('mandatory')
if mibBuilder.loadTexts: apAnswerWaitTime.setDescription('Specifies the period (in seconds) the AP will wait for the remote unit to answer the call. Default is 60 sec.')
apModemSpeaker = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apModemSpeaker.setStatus('mandatory')
if mibBuilder.loadTexts: apModemSpeaker.setDescription('Specifies if modem speaker is turned on(1) or off(2). Default is on(1).')
apInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apInactivityTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: apInactivityTimeout.setDescription('Specifies the User Interface Inactivity timeout in minutes. 0 means no timeout. Default is 5 minutes.')
apPPPTimeout = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPPPTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: apPPPTimeout.setDescription('Specifies the PPP event timeout in seconds. Default is 3 seconds. ')
apPPPTerminates = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 5, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPPPTerminates.setStatus('mandatory')
if mibBuilder.loadTexts: apPPPTerminates.setDescription('Specifies the maximum number of PPP terminate requests. Default is 10.')
apAddrFilterTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 6), )
if mibBuilder.loadTexts: apAddrFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: apAddrFilterTable.setDescription('A table of MAC addresses not allowed to associate with the Access Point. The maximum number of entries in the table is 128.')
apAddrFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 6, 1), ).setIndexNames((0, "SYMBOL-ENTERPRISE-PRIVATE-MIB", "disallowedIndex"))
if mibBuilder.loadTexts: apAddrFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: apAddrFilterEntry.setDescription("An entry in the table of Address Filter. A row in this table is created by setting the value of disallowedMU to the MAC address of the MU not allowed to associate with the Access Point. A row in this table is deleted by setting the value of disallowedMU to '000000000000'.")
disallowedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: disallowedIndex.setStatus('mandatory')
if mibBuilder.loadTexts: disallowedIndex.setDescription('Address Filter Table index.')
disallowedMU = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 6, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disallowedMU.setStatus('mandatory')
if mibBuilder.loadTexts: disallowedMU.setDescription('MU MAC address which is not allowed to be associated with this Access Point.')
apTypeFilterTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 7), )
if mibBuilder.loadTexts: apTypeFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: apTypeFilterTable.setDescription('A table of Ethernet types (i.e. 16-bit DIX Ethernet type), which are entered by the user and supported for the type filtering function. The maximum number of entries in the table is 16.')
apTypeFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 7, 1), ).setIndexNames((0, "SYMBOL-ENTERPRISE-PRIVATE-MIB", "typeIndex"))
if mibBuilder.loadTexts: apTypeFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: apTypeFilterEntry.setDescription('An entry in the table of Type Filter. A row in this table is created by setting the value of etherType to Ethernet packet type in hexadecimal. A row in this table is deleted by setting the value of etherType to 00')
typeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: typeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: typeIndex.setDescription('Filter Type Table index.')
etherType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherType.setStatus('mandatory')
if mibBuilder.loadTexts: etherType.setDescription('A 16-bit Ethernet Protocol Type in hexadecimal.')
apTrafficMatrixTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 1), )
if mibBuilder.loadTexts: apTrafficMatrixTable.setStatus('mandatory')
if mibBuilder.loadTexts: apTrafficMatrixTable.setDescription('A table of Access Point Traffic Matrix which provides information on packets transmitted from one interface to another (Ethernet, PPP, radio, AP). The table also displays the number of broadcast packets transmitted from the Access Point. The current number of entries is 5.')
apTrafficMatrixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 1, 1), ).setIndexNames((0, "SYMBOL-ENTERPRISE-PRIVATE-MIB", "apTMTableIndex"))
if mibBuilder.loadTexts: apTrafficMatrixEntry.setStatus('mandatory')
if mibBuilder.loadTexts: apTrafficMatrixEntry.setDescription('An entry in the table of Access Point Traffic Matrix. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
apTMTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTMTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: apTMTableIndex.setDescription('Access Point Traffic Matrix Table index.')
apProtoItfName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProtoItfName.setStatus('mandatory')
if mibBuilder.loadTexts: apProtoItfName.setDescription('Access Point Protocol Interface Name (i.e. Ethernet, PPP, Radio, AP).')
apNPktsToEnets = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNPktsToEnets.setStatus('mandatory')
if mibBuilder.loadTexts: apNPktsToEnets.setDescription('Indicates the number of packets sent from the Access Point Protocol Interface to the Ethernet Interface. This field should always be zero if the Access Point Protocol Interface is Ethernet.')
apNPktsToPpps = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNPktsToPpps.setStatus('mandatory')
if mibBuilder.loadTexts: apNPktsToPpps.setDescription('Indicates the number of packets sent from the Access Point Protocol Interface to the PPP Interface. This field is meaningful only if the PPP interface is enabled. ')
apNPktsToRfs = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNPktsToRfs.setStatus('mandatory')
if mibBuilder.loadTexts: apNPktsToRfs.setDescription('Indicates the number of packets sent from the Access Point Protocol Interface to the RF Interface. If the Access Point Protocol Interface is RF, these are frames from one MU to another.')
apNPktsToAPStks = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNPktsToAPStks.setStatus('mandatory')
if mibBuilder.loadTexts: apNPktsToAPStks.setDescription('Indicates the number of packets sent from the Access Point Protocol Interface to the internal Access Point stack. This field should always be zero if the Access Point Protocol Interface is Access Point Stack.')
apItfStatTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 2), )
if mibBuilder.loadTexts: apItfStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: apItfStatTable.setDescription('A table of Access Point Interfaces Statistics, which provides packets forwarding statistics for each inter- face (Ethernet, PPP, RF, AP stack). Interface statistics also provide performance informa- tion for each interface in Packets-per-second (PPS) and Bytes- per-second (BPS). The AP interface indicates packets sent to the AP stack (e.g. configuration requests, SNMP, Telnet etc.). The current number of entries is 4.')
apItfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 2, 1), ).setIndexNames((0, "SYMBOL-ENTERPRISE-PRIVATE-MIB", "apItfStatIndex"))
if mibBuilder.loadTexts: apItfStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: apItfStatEntry.setDescription('An entry in the table of Access Point Interface Statistics. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
apItfStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apItfStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: apItfStatIndex.setDescription('Access Point Interface Statistics Table index.')
apInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: apInterfaceName.setDescription('Access Point Interface Name (Ethernet, PPP, RF, AP).')
apPacketsIns = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPacketsIns.setStatus('mandatory')
if mibBuilder.loadTexts: apPacketsIns.setDescription('Indicates the number of good packets received on the specified interface.')
apPacketsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPacketsOuts.setStatus('mandatory')
if mibBuilder.loadTexts: apPacketsOuts.setDescription('Indicates the number of packets successfully transmitted on the specified interface.')
apOctetsIns = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOctetsIns.setStatus('mandatory')
if mibBuilder.loadTexts: apOctetsIns.setDescription('Indicates the number of good bytes received on the specified interface.')
apOctetsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOctetsOuts.setStatus('mandatory')
if mibBuilder.loadTexts: apOctetsOuts.setDescription('Indicates the number of bytes successfully transmitted on the specified interface.')
apPktsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPktsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: apPktsInPerSec.setDescription('Indicates the number of good packets per second received on the specified Interface.')
apPktsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apPktsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: apPktsOutPerSec.setDescription('Indicates the number of packets per second successfully transmitted on the specified interface.')
apOctInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOctInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: apOctInPerSec.setDescription('Indicates the number of good bytes per second received on the specified Interface.')
apOctOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apOctOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: apOctOutPerSec.setDescription('Indicates the number of bytes per second successfully transmitted on the specified interface.')
apEPktsSeens = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEPktsSeens.setStatus('mandatory')
if mibBuilder.loadTexts: apEPktsSeens.setDescription('Indicates the number of packets that have been seen on the Ethernet interface. Most of these packets are for stations other than those associated with this AP.')
apEPktsForwardeds = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEPktsForwardeds.setStatus('mandatory')
if mibBuilder.loadTexts: apEPktsForwardeds.setDescription('Indicates the number of Ethernet packets forwarded from the Ethernet interface to other interfaces.')
apEPktsDiscNoMatchs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEPktsDiscNoMatchs.setStatus('mandatory')
if mibBuilder.loadTexts: apEPktsDiscNoMatchs.setDescription('Indicates the number of packets discarded due to unknown destination (i.e. no database entry).')
apEPktsDiscForceds = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEPktsDiscForceds.setStatus('mandatory')
if mibBuilder.loadTexts: apEPktsDiscForceds.setDescription('Indicates the number of packets discarded due to Type or Address filters applied.')
apEPktsDiscBuffers = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEPktsDiscBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: apEPktsDiscBuffers.setDescription('Indicates the number of packets discarded due to lack of available buffers in AP.')
apEPktsDiscCRCs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEPktsDiscCRCs.setStatus('mandatory')
if mibBuilder.loadTexts: apEPktsDiscCRCs.setDescription('Indicates the number of packets discarded due to CRC errors.')
apEPktsSents = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEPktsSents.setStatus('mandatory')
if mibBuilder.loadTexts: apEPktsSents.setDescription('Indicates the number of packets sent by this Ethernet Port.')
apEAnyCollisions = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEAnyCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: apEAnyCollisions.setDescription('Indicates the number of packets that suffer at least one collision.')
apE1orMoreColls = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apE1orMoreColls.setStatus('mandatory')
if mibBuilder.loadTexts: apE1orMoreColls.setDescription('Indicates the number of packets that suffer more than one collision.')
apEMaxCollisions = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEMaxCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: apEMaxCollisions.setDescription('Indicates the number of packets that suffer more than the maximum number of collisions.')
apELateCollisions = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apELateCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: apELateCollisions.setDescription('Indicates the number of packets that suffer late collisions.')
apEPktsDefers = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEPktsDefers.setStatus('mandatory')
if mibBuilder.loadTexts: apEPktsDefers.setDescription('Indicates the times AP had to defer transmit requests on Ethernet due to busy medium.')
rfBcMcPktsSents = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfBcMcPktsSents.setStatus('mandatory')
if mibBuilder.loadTexts: rfBcMcPktsSents.setDescription('Indicates the number of broadcast/multicast packets that have been successfully transmitted.')
rfBcMcPktsRcvds = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfBcMcPktsRcvds.setStatus('mandatory')
if mibBuilder.loadTexts: rfBcMcPktsRcvds.setDescription('Indicates the number of broadcast/multicast packets that have been successfully received.')
rfBcMcOctSents = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfBcMcOctSents.setStatus('mandatory')
if mibBuilder.loadTexts: rfBcMcOctSents.setDescription('Indicates the number of broadcast/multicast bytes that have been successfully transmitted.')
rfBcMcOctRcvds = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfBcMcOctRcvds.setStatus('mandatory')
if mibBuilder.loadTexts: rfBcMcOctRcvds.setDescription('Indicates the number of broadcast/multicast bytes that have been successfully received.')
rfSysPktsSents = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfSysPktsSents.setStatus('mandatory')
if mibBuilder.loadTexts: rfSysPktsSents.setDescription('Indicates the number of system packets (includes probe operations packets) that have been successfully transmitted.')
rfSysPktsRcvds = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfSysPktsRcvds.setStatus('mandatory')
if mibBuilder.loadTexts: rfSysPktsRcvds.setDescription('Indicates the number of system packets (includes probes /associate packets) that have been successfully received.')
rfSBcMcPktsSents = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfSBcMcPktsSents.setStatus('mandatory')
if mibBuilder.loadTexts: rfSBcMcPktsSents.setDescription('Indicates the number of system broadcast/multicast packets (includes beacons) that have been successfully transmitted.')
rfSBcMcPktsRcvds = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfSBcMcPktsRcvds.setStatus('mandatory')
if mibBuilder.loadTexts: rfSBcMcPktsRcvds.setDescription('Indicates the number of system broadcast/multicast iincludes beacons) packets that have been successfully received.')
rfSuccFragPkts = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfSuccFragPkts.setStatus('mandatory')
if mibBuilder.loadTexts: rfSuccFragPkts.setDescription('Indicates the number of packets that were fragmented and for which all fragments were acked.')
rfUnsuccFragPkts = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfUnsuccFragPkts.setStatus('mandatory')
if mibBuilder.loadTexts: rfUnsuccFragPkts.setDescription('Indicates the number of packets that were fragmented but for which one or more fragments were not acked.')
rfTotalFragSents = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTotalFragSents.setStatus('mandatory')
if mibBuilder.loadTexts: rfTotalFragSents.setDescription('Indicates the number of packets fragments that have been sent.')
rfTotalFragRcvds = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTotalFragRcvds.setStatus('mandatory')
if mibBuilder.loadTexts: rfTotalFragRcvds.setDescription('Indicates the number of packets fragments that have been received.')
rfSuccReassPkts = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfSuccReassPkts.setStatus('mandatory')
if mibBuilder.loadTexts: rfSuccReassPkts.setDescription('Indicates the number of packets that were reassigned and successfully reassembled.')
rfUnsuccReassPkts = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfUnsuccReassPkts.setStatus('mandatory')
if mibBuilder.loadTexts: rfUnsuccReassPkts.setDescription('Indicates the number of packets that were unsuccessfully reassembled.')
rfAssocMUs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfAssocMUs.setStatus('mandatory')
if mibBuilder.loadTexts: rfAssocMUs.setDescription('Indicates the number of MUs currently associated with this AP.')
rfRcvdCRCErrors = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRcvdCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: rfRcvdCRCErrors.setDescription('Indicates the number of packets that were received but had the CRC errors.')
rfRcvdDupPkts = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRcvdDupPkts.setStatus('mandatory')
if mibBuilder.loadTexts: rfRcvdDupPkts.setDescription('Indicates the number of packets that were received but were duplicates of previously received. This is usually an indication that an ACK was not received by the sending unit.')
rfTotalCollisions = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTotalCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: rfTotalCollisions.setDescription('Indicates the number of collisions that have occured on the interface. A collision on the RF interface means that an ack was not received or that a RTS was not answered by a CTS.')
rfPktsWithoutColls = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfPktsWithoutColls.setStatus('mandatory')
if mibBuilder.loadTexts: rfPktsWithoutColls.setDescription('Indicates the number of packets without any collision.')
rfPktsWithMaxColls = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfPktsWithMaxColls.setStatus('mandatory')
if mibBuilder.loadTexts: rfPktsWithMaxColls.setDescription('Indicates the number of packets that suffered the maximum number of collisions.')
rfPktsWithColls = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfPktsWithColls.setStatus('mandatory')
if mibBuilder.loadTexts: rfPktsWithColls.setDescription('Indicates the number of packets that suffered at least one collision.')
apPerFreqStatTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 5), )
if mibBuilder.loadTexts: apPerFreqStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: apPerFreqStatTable.setDescription('A table of Radio Per Frequency statistics, which is based on the historical frequency records used by this Access Point. The current number of entries is 78.')
apPerFreqStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 5, 1), ).setIndexNames((0, "SYMBOL-ENTERPRISE-PRIVATE-MIB", "rfPerFqChannel"))
if mibBuilder.loadTexts: apPerFreqStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: apPerFreqStatEntry.setDescription('An entry in the table of Radio per frequency statistics. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
rfPerFqChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfPerFqChannel.setStatus('mandatory')
if mibBuilder.loadTexts: rfPerFqChannel.setDescription('Radio Frequency channel number.')
rfPerFqPktsSents = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfPerFqPktsSents.setStatus('mandatory')
if mibBuilder.loadTexts: rfPerFqPktsSents.setDescription('Counter for the packets sent per frequency.')
rfPerFqPktsRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfPerFqPktsRcvds.setStatus('mandatory')
if mibBuilder.loadTexts: rfPerFqPktsRcvds.setDescription('Counter for the packets received per frequency.')
rfPerFqRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfPerFqRetries.setStatus('mandatory')
if mibBuilder.loadTexts: rfPerFqRetries.setDescription('Counter for the retries per frequency.')
apNbrOfDialouts = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNbrOfDialouts.setStatus('mandatory')
if mibBuilder.loadTexts: apNbrOfDialouts.setDescription('Indicates the number of dialout attempts by the AP.')
apDialoutFailures = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDialoutFailures.setStatus('mandatory')
if mibBuilder.loadTexts: apDialoutFailures.setDescription('Indicates the number of dialout failures by the AP.')
apNbrOfAnswers = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNbrOfAnswers.setStatus('mandatory')
if mibBuilder.loadTexts: apNbrOfAnswers.setDescription('Indicates the number of answer attempts by the AP.')
apCurrCallTime = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 6, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCurrCallTime.setStatus('mandatory')
if mibBuilder.loadTexts: apCurrCallTime.setDescription('Indicates the length in seconds of current connection session. Note: the time is relative to the boot time of this AP.')
apLastCallTime = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 6, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLastCallTime.setStatus('mandatory')
if mibBuilder.loadTexts: apLastCallTime.setDescription('Indicates the length in seconds of last connection session. Note: the time is relative to the boot time of this AP.')
apWNMPCfgPkts = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWNMPCfgPkts.setStatus('mandatory')
if mibBuilder.loadTexts: apWNMPCfgPkts.setDescription('Indicates the number of WNMP configuration requests received from NetVision.')
wEchoRequests = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEchoRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wEchoRequests.setDescription('Indicates the number of WNMP Echo Requests received by this AP.')
wPingRequests = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wPingRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wPingRequests.setDescription('Indicates the number of WNMP ping requests received by this AP.')
wPktsFromNVs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wPktsFromNVs.setStatus('mandatory')
if mibBuilder.loadTexts: wPktsFromNVs.setDescription('Indicates the number of WNMP packets that were received from NetVision via this AP.')
wPPktsToNVs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 7, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wPPktsToNVs.setStatus('mandatory')
if mibBuilder.loadTexts: wPPktsToNVs.setDescription('Indicates the number of WNMP packets that were sent to the NetVision via this AP.')
wPassThruEchoes = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 7, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wPassThruEchoes.setStatus('mandatory')
if mibBuilder.loadTexts: wPassThruEchoes.setDescription('Indicates the number of WNMP packets for other stations that passed through this AP.')
apCurrentMUs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCurrentMUs.setStatus('mandatory')
if mibBuilder.loadTexts: apCurrentMUs.setDescription('Indicates the number of MUs currently associated with this AP.')
apMaxMUs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMaxMUs.setStatus('mandatory')
if mibBuilder.loadTexts: apMaxMUs.setDescription('Indicates the highest number of MUs ever associated with this AP.')
apTotalAssocs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTotalAssocs.setStatus('mandatory')
if mibBuilder.loadTexts: apTotalAssocs.setDescription('Indicates the total number of associations by all MUs with this AP.')
apMUTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4), )
if mibBuilder.loadTexts: apMUTable.setStatus('mandatory')
if mibBuilder.loadTexts: apMUTable.setDescription('A table of information for a specific MU associated with this Access Point. The current number of entries is 128.')
apMUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4, 1), ).setIndexNames((0, "SYMBOL-ENTERPRISE-PRIVATE-MIB", "muIndex"))
if mibBuilder.loadTexts: apMUEntry.setStatus('mandatory')
if mibBuilder.loadTexts: apMUEntry.setDescription('An entry in the table of information for a specific MU associated with this Access Point. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
muIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muIndex.setStatus('mandatory')
if mibBuilder.loadTexts: muIndex.setDescription('Specific MU information Table index.')
muMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: muMacAddr.setDescription('The MAC address of the MU associated with this AP.')
muInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("ppp", 2), ("rf", 3), ("apstack", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muInterface.setStatus('mandatory')
if mibBuilder.loadTexts: muInterface.setDescription('Indicates the interface on which this MU is located. Note: The AP may learn of an MU via the RF network or from the wired networks such as Ethernet or PPP. In this release, the AP does not keep track of those MUs reachable via the Ethernet, but that will change in future releases.')
muState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("associated", 3), ("not-associated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muState.setStatus('mandatory')
if mibBuilder.loadTexts: muState.setDescription('Indicates the state of this MU.')
muPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cam", 1), ("psp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muPowerMode.setStatus('mandatory')
if mibBuilder.loadTexts: muPowerMode.setDescription('Indicates the MU power mode (Power Save Protocol mode or Continue Active Mode.)')
muStationID = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muStationID.setStatus('mandatory')
if mibBuilder.loadTexts: muStationID.setDescription('Indicates the MU station ID.')
muLastAPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muLastAPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: muLastAPAddr.setDescription('Indicates the MAC address of the last AP with which this MU had an association.')
muTotalAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muTotalAssoc.setStatus('mandatory')
if mibBuilder.loadTexts: muTotalAssoc.setDescription('Indicates the total associations for this MU.')
muAssocStart = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muAssocStart.setStatus('mandatory')
if mibBuilder.loadTexts: muAssocStart.setDescription('Indicates when the MU began its current association with this AP. Note: Time is represented in seconds and the time is relative to the boot time of this AP. This is also true for all the association objects listed below.')
muLstAssStrt = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muLstAssStrt.setStatus('mandatory')
if mibBuilder.loadTexts: muLstAssStrt.setDescription('Indicates when the MU began its prior association with this AP. If this is the first association with this AP, this value is zero. ')
muLastAssEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muLastAssEnd.setStatus('mandatory')
if mibBuilder.loadTexts: muLastAssEnd.setDescription('Indicates when the MU ended its previous association with this AP. If this is the first association with this AP, this value is zero. ')
muNPktsSents = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muNPktsSents.setStatus('mandatory')
if mibBuilder.loadTexts: muNPktsSents.setDescription('Indicates the number of packets successfully transmitted to this MU.')
muNPktsRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muNPktsRcvds.setStatus('mandatory')
if mibBuilder.loadTexts: muNPktsRcvds.setDescription('Indicates the number of Good Packets received from this MU.')
muNBytesSents = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muNBytesSents.setStatus('mandatory')
if mibBuilder.loadTexts: muNBytesSents.setDescription('Indicates the number of bytes successfully transmitted to this MU.')
muNBytesRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muNBytesRcvds.setStatus('mandatory')
if mibBuilder.loadTexts: muNBytesRcvds.setDescription('Indicates the number of Good Bytes received from this MU.')
muNDiscdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muNDiscdPkts.setStatus('mandatory')
if mibBuilder.loadTexts: muNDiscdPkts.setDescription('Indicates the number of received packets discarded because no buffers.')
muTmLastData = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 8, 4, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muTmLastData.setStatus('mandatory')
if mibBuilder.loadTexts: muTmLastData.setDescription('Indicates the time when the last good packet was received from this MU. The packet may be either an ACK, Data, or Poll. ')
apKnownAPsTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 9), )
if mibBuilder.loadTexts: apKnownAPsTable.setStatus('mandatory')
if mibBuilder.loadTexts: apKnownAPsTable.setDescription('A table of information on other Access Points known by this Access Point. The current number of entries is 32.')
apKnownAPsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 9, 1), ).setIndexNames((0, "SYMBOL-ENTERPRISE-PRIVATE-MIB", "apAPMacAddr"))
if mibBuilder.loadTexts: apKnownAPsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: apKnownAPsEntry.setDescription('An entry in the table of information on the Known Access Points. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
apAPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 9, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAPMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: apAPMacAddr.setDescription('Mac Address of Known AP.')
apAPIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAPIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: apAPIpAddr.setDescription('IP Address of Known AP.')
apNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNetID.setStatus('mandatory')
if mibBuilder.loadTexts: apNetID.setDescription('Network ID (i.e. ESS ID) of the Known AP in hexadecimal.')
apAPID = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAPID.setStatus('mandatory')
if mibBuilder.loadTexts: apAPID.setDescription('AP ID (i.e. BSS ID) of the Known AP in hexadecimal.')
apHoppingSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apHoppingSeq.setStatus('mandatory')
if mibBuilder.loadTexts: apHoppingSeq.setDescription('Hopping Sequence of Known AP.')
apMUs = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMUs.setStatus('mandatory')
if mibBuilder.loadTexts: apMUs.setDescription('Indicates the number of MUs currently associated with AP.')
apKBOS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKBOS.setStatus('mandatory')
if mibBuilder.loadTexts: apKBOS.setDescription('Kilobytes sent per second by AP on the radio interface.')
apKBIS = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKBIS.setStatus('mandatory')
if mibBuilder.loadTexts: apKBIS.setDescription('Kilobytes received per second by AP on the radio interface.')
apLastRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 9, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLastRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: apLastRcvd.setDescription('Last communication in seconds with AP. Consistent values greater than 12 may indicate a communication failure with AP.')
apAdrViolations = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAdrViolations.setStatus('mandatory')
if mibBuilder.loadTexts: apAdrViolations.setDescription('Indicates the number of Mobile Unit MAC address violations counted.')
apTypeViolations = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apTypeViolations.setStatus('mandatory')
if mibBuilder.loadTexts: apTypeViolations.setDescription('Indicates the number of Ethernet packet type violations counted.')
apNbrOfWLAPItfs = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apNbrOfWLAPItfs.setStatus('mandatory')
if mibBuilder.loadTexts: apNbrOfWLAPItfs.setDescription('Indicates number of WLAP interfaces established.')
apWLAPState = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 15))).clone(namedValues=NamedValues(("initializing", 1), ("sending-probe", 2), ("send-assoc-req", 3), ("send-cfg-bpdu", 4), ("wait-for-probe", 5), ("send-Probe-rsp", 6), ("send-assoc-rsp", 7), ("send-cfg-rsp", 8), ("received-root-rsp", 10), ("root-wlap-lost", 12), ("disabled", 14), ("functional", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWLAPState.setStatus('mandatory')
if mibBuilder.loadTexts: apWLAPState.setDescription('Indicates the current WLAP state. The state values and meanings are as follows : - During power-up initialization : Initializing(1) SendingProbe(2) SendAssocReq(3) SendCfgBPDU(4) WaitForProbe(5) SendProbeRsp(6) SendAssocRsp(7) SendCfgRsp(8) ReceivedRootRsp(10) - During WLAP operation : RootWLAPLost(12) Disabled(14) Functional(15) ')
apWLAPHopSequence = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWLAPHopSequence.setStatus('mandatory')
if mibBuilder.loadTexts: apWLAPHopSequence.setDescription('Indicates the hop sequence of the Root AP followed by this WLAP.')
apRootInterface = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRootInterface.setStatus('mandatory')
if mibBuilder.loadTexts: apRootInterface.setDescription('Indicates the WLAP interface leading to the Root AP.')
apRootWLAPID = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 11, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRootWLAPID.setStatus('mandatory')
if mibBuilder.loadTexts: apRootWLAPID.setDescription('Indicates the WLAP ID of the Root AP. It consists of 2 bytes of priority (default is 0x8000) and 6 bytes of MAC address of the Root AP')
apRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRootPathCost.setStatus('mandatory')
if mibBuilder.loadTexts: apRootPathCost.setDescription('Indicates how many hops away the current WLAP is from the Root AP.')
apWLAPID = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 11, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWLAPID.setStatus('mandatory')
if mibBuilder.loadTexts: apWLAPID.setDescription('Indicates the WLAP ID of the current WLAP. It consists of 2 bytes of priority (default is 0x8000) and 6 bytes MAC address of the current WLAP')
apWLAPItfTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 11, 8), )
if mibBuilder.loadTexts: apWLAPItfTable.setStatus('mandatory')
if mibBuilder.loadTexts: apWLAPItfTable.setDescription('A table of wireless AP interfaces information, which contains four (4) interfaces : Ethernet and three AP-to-AP interfaces or just all four AP-to-AP interfaces. The current number of entries is 4.')
apWLAPItfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 11, 8, 1), ).setIndexNames((0, "SYMBOL-ENTERPRISE-PRIVATE-MIB", "apWLAPItfID"))
if mibBuilder.loadTexts: apWLAPItfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: apWLAPItfEntry.setDescription('An entry in the table of wireless AP interfaces information. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
apWLAPItfID = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 11, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWLAPItfID.setStatus('mandatory')
if mibBuilder.loadTexts: apWLAPItfID.setDescription('WLAP interface ID. It consists of 1 byte of priority (default is 0x80) and 1 byte of interface ID.')
apWLAPItfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 11, 8, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWLAPItfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: apWLAPItfAddr.setDescription('The MAC address of the associated WLAP on this interface. For Ethernet, this is the Bridge Group Address : 01-80-C2-00-00-00. For AP-to-AP, this is the associated WLAP MAC address.')
apWLAPItfState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("listening", 2), ("learning", 3), ("forwarding", 4), ("blocking", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWLAPItfState.setStatus('mandatory')
if mibBuilder.loadTexts: apWLAPItfState.setDescription('The current state of the Wireless AP interface, ie : Disabled(1), Listening(2), Learning(3), Forwarding(4), or Blocking(5).')
apWLAPPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 11, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWLAPPathCost.setStatus('mandatory')
if mibBuilder.loadTexts: apWLAPPathCost.setDescription('The cost to be added to the root path cost field in the config BPDU (Bridge Protocol Data Unit) received on this interface in order to determine the cost of the path to the Root AP.')
apDsgnatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 11, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDsgnatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: apDsgnatedRoot.setDescription('The unique Root AP ID designated by the Root AP.')
apDsgnatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 11, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDsgnatedCost.setStatus('mandatory')
if mibBuilder.loadTexts: apDsgnatedCost.setDescription('The cost of the path to the Root AP designated by the Root AP.')
apDsgnatedWLAP = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 11, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDsgnatedWLAP.setStatus('mandatory')
if mibBuilder.loadTexts: apDsgnatedWLAP.setDescription('The unique WLAP ID designated by the Root AP.')
apDsgnatedItf = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 2, 11, 8, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDsgnatedItf.setStatus('mandatory')
if mibBuilder.loadTexts: apDsgnatedItf.setDescription('The WLAP interface ID designated by the Root AP.')
apClrAllStatistics = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apClrAllStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: apClrAllStatistics.setDescription('Clear all the interface statistics (yes = 1, no = 2).')
apClrMUTable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apClrMUTable.setStatus('mandatory')
if mibBuilder.loadTexts: apClrMUTable.setDescription('Clear the MU Table (yes = 1, no = 2).')
apClrACL = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apClrACL.setStatus('mandatory')
if mibBuilder.loadTexts: apClrACL.setDescription('Clear the Access Control Table (yes = 1, no = 2).')
apClrACLRangeTable = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apClrACLRangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: apClrACLRangeTable.setDescription('Clear the Access Control Range Table (yes = 1, no = 2).')
apClrAddrFilterTbl = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apClrAddrFilterTbl.setStatus('mandatory')
if mibBuilder.loadTexts: apClrAddrFilterTbl.setDescription('Clear the Address Filtering Table (yes = 1, no = 2).')
apLdACLFrMUList = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apLdACLFrMUList.setStatus('mandatory')
if mibBuilder.loadTexts: apLdACLFrMUList.setDescription('Load the Access Control Table from MU Table (yes = 1, no = 2).')
apModemDialOut = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apModemDialOut.setStatus('mandatory')
if mibBuilder.loadTexts: apModemDialOut.setDescription('Commands the modem to dialout (yes = 1, no = 2).')
apModemHangUp = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apModemHangUp.setStatus('mandatory')
if mibBuilder.loadTexts: apModemHangUp.setDescription("Forces the AP to issue a 'hangup' string to the modem attached to the serial port (yes = 1, no = 2). This command is meaningful only if the AP is configured for a modem connection on the serial port. If there is no modem or there is no connection, the command will be ignored.")
apUpdateFirmware = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apUpdateFirmware.setStatus('mandatory')
if mibBuilder.loadTexts: apUpdateFirmware.setDescription("Update the AP firmware through TFTP server. The AP firmware will be saved in NVRAM (yes = 1, no = 2). Before issuing this command, set 'apDnLdFileName', and 'apTFTPServer' to the proper values ")
apDnLdFileName = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDnLdFileName.setStatus('mandatory')
if mibBuilder.loadTexts: apDnLdFileName.setDescription('The name of the file to be downloaded to the AP. (Including path name and total up to 49 characters.) Note: IF BOOTP is responded to, that name will take precedence and overwrite this name.')
apTFTPServer = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 3, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTFTPServer.setStatus('mandatory')
if mibBuilder.loadTexts: apTFTPServer.setDescription('The IP address for the TFTP Server.')
apResetAP = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apResetAP.setStatus('mandatory')
if mibBuilder.loadTexts: apResetAP.setDescription('Forces a reset of the AP (yes = 1, no = 2). Upon reset, the AP clears all the statistics and restores the last saved configuration information. If changes are made without being saved, the AP clears those changes upon reset.')
apACLViolations = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apACLViolations.setStatus('mandatory')
if mibBuilder.loadTexts: apACLViolations.setDescription('Indicates the number of Access Control violations occurred.')
apSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 388, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSaveConfig.setStatus('mandatory')
if mibBuilder.loadTexts: apSaveConfig.setDescription('Saves the current configuration to NVRAM (yes = 1, no = 2).')
apAccCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 1, 4, 3), )
if mibBuilder.loadTexts: apAccCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: apAccCtrlTable.setDescription('A table of MAC addresses allowed to associate with the Access Point. The maximum number of entries in the table is 128.')
apAccCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 1, 4, 3, 1), ).setIndexNames((0, "SYMBOL-ENTERPRISE-PRIVATE-MIB", "allowedIndex"))
if mibBuilder.loadTexts: apAccCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: apAccCtrlEntry.setDescription("An entry in the table of MAC address Access Control. A row in this table is created by setting the value of allowedMU to the MAC address of the MU allowed to associate with this Access Point. A row in this table is deleted by setting the value of allowedMU to '000000000000'.")
allowedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allowedIndex.setStatus('mandatory')
if mibBuilder.loadTexts: allowedIndex.setDescription('Access Control Table index.')
allowedMU = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 4, 3, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedMU.setStatus('mandatory')
if mibBuilder.loadTexts: allowedMU.setDescription('MU MAC address which is allowed to associate with this AP.')
apACLRangeTable = MibTable((1, 3, 6, 1, 4, 1, 388, 1, 1, 4, 4), )
if mibBuilder.loadTexts: apACLRangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: apACLRangeTable.setDescription('A table of Access Control Range, which consists of eight (8) pairs of low and high MAC addresses. Any Mobile Unit with the MAC address within the range is allowed to associate with the Access Point. The maximum number of entries in the table is 8.')
apACLRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 1, 1, 4, 4, 1), ).setIndexNames((0, "SYMBOL-ENTERPRISE-PRIVATE-MIB", "apACLRangeIndex"))
if mibBuilder.loadTexts: apACLRangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: apACLRangeEntry.setDescription("An entry in the table of MAC address Access Control Range. A row in this table is created by first setting the value of lowMacAddr to the lowest MAC address and then the value of highMacAddr to the highest MAC address of a group of Mobile Units allowed to associate with this Access Point. This sequence of setting is very important, otherwise a wrong result will occur. A row in this table is deleted by setting the value of either lowMacAddr or highMacAddr to '000000000000'.")
apACLRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apACLRangeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: apACLRangeIndex.setDescription('Access Control Range Table index.')
lowMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 4, 4, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lowMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lowMacAddr.setDescription('The lowest Mobile Unit MAC address in the range which is allowed to be associated with this AP.')
highMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 1, 1, 4, 4, 1, 3), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: highMacAddr.setDescription('The highest Mobile Unit MAC address in the range which is allowed to be associated with this AP.')
mibBuilder.exportSymbols("SYMBOL-ENTERPRISE-PRIVATE-MIB", apWLAPItfEntry=apWLAPItfEntry, rfSuccFragPkts=rfSuccFragPkts, apWLAPItfTable=apWLAPItfTable, apGatewayIPAddr=apGatewayIPAddr, symbol=symbol, apTrapRcvrIpAdr=apTrapRcvrIpAdr, rfRcvdCRCErrors=rfRcvdCRCErrors, apTotalAssocs=apTotalAssocs, apEPktsSeens=apEPktsSeens, apNPktsToAPStks=apNPktsToAPStks, rfSysPktsSents=rfSysPktsSents, apMUStateChngTrapEnable=apMUStateChngTrapEnable, rfPktsWithoutColls=rfPktsWithoutColls, apWLAPState=apWLAPState, apWLAPPathCost=apWLAPPathCost, apSystemName=apSystemName, spectrum24=spectrum24, apNbrOfWLAPItfs=apNbrOfWLAPItfs, apMUInfo=apMUInfo, apModemSpeaker=apModemSpeaker, apFilterStatistics=apFilterStatistics, apNbrOfDialouts=apNbrOfDialouts, wEchoRequests=wEchoRequests, rfPerFqRetries=rfPerFqRetries, apNetId=apNetId, rfPerFqPktsSents=rfPerFqPktsSents, apDialOutNumber=apDialOutNumber, apModemConnected=apModemConnected, apMUTable=apMUTable, apAPIpAddr=apAPIpAddr, apRootInterface=apRootInterface, apInterfaceName=apInterfaceName, apItfStatEntry=apItfStatEntry, apMUEntry=apMUEntry, apRFConfig=apRFConfig, apPerFreqStatEntry=apPerFreqStatEntry, authenticationFailure=authenticationFailure, apACLRangeIndex=apACLRangeIndex, apEMaxCollisions=apEMaxCollisions, apEnetPortState=apEnetPortState, rfPktsWithMaxColls=rfPktsWithMaxColls, apDsgnatedRoot=apDsgnatedRoot, apDialoutFailures=apDialoutFailures, muLstAssStrt=muLstAssStrt, apAutoCfgEnable=apAutoCfgEnable, apLastRcvd=apLastRcvd, apClrAllStatistics=apClrAllStatistics, rfSuccReassPkts=rfSuccReassPkts, apEPktsDiscForceds=apEPktsDiscForceds, apSerialPortUse=apSerialPortUse, muNBytesRcvds=muNBytesRcvds, apAccCtrlEnable=apAccCtrlEnable, apClrAddrFilterTbl=apClrAddrFilterTbl, apOctetsOuts=apOctetsOuts, apAuthenFailureTrapEnable=apAuthenFailureTrapEnable, muPowerMode=muPowerMode, apRFFirmwareRev=apRFFirmwareRev, apWLAPItfState=apWLAPItfState, apEPktsForwardeds=apEPktsForwardeds, apItfStatTable=apItfStatTable, muStationID=muStationID, apWLAPConnChngTrapEnable=apWLAPConnChngTrapEnable, apSaveConfig=apSaveConfig, apSNMPMode=apSNMPMode, apModemDialOut=apModemDialOut, apRootWLAPID=apRootWLAPID, apELateCollisions=apELateCollisions, apTMTableIndex=apTMTableIndex, apEPktsDefers=apEPktsDefers, apHopSet=apHopSet, apMaxRetries=apMaxRetries, apConnectMode=apConnectMode, apNPktsToPpps=apNPktsToPpps, apOctInPerSec=apOctInPerSec, apEncryptPhase=apEncryptPhase, apWLAPInfo=apWLAPInfo, apColdBootTrapEnable=apColdBootTrapEnable, apNetID=apNetID, apTypeFilterEntry=apTypeFilterEntry, apEthernetTimeOut=apEthernetTimeOut, rfUnsuccFragPkts=rfUnsuccFragPkts, rfSysPktsRcvds=rfSysPktsRcvds, apNbrOfAnswers=apNbrOfAnswers, apModelnumber=apModelnumber, apCurrentMUs=apCurrentMUs, apACLViolations=apACLViolations, allowedMU=allowedMU, apPerformMgmt=apPerformMgmt, apEPktsDiscNoMatchs=apEPktsDiscNoMatchs, apACLTrapEnable=apACLTrapEnable, apManufactureInfo=apManufactureInfo, rfBcMcOctRcvds=rfBcMcOctRcvds, apSerialPortStatistics=apSerialPortStatistics, apPktsInPerSec=apPktsInPerSec, apWLAPEncryption=apWLAPEncryption, apTypeViolations=apTypeViolations, apRootPathCost=apRootPathCost, rfPktsWithColls=rfPktsWithColls, muNBytesSents=muNBytesSents, coldStart=coldStart, apAPIdConflictTrapEnable=apAPIdConflictTrapEnable, apDialOutMode=apDialOutMode, wPingRequests=wPingRequests, rfUnsuccReassPkts=rfUnsuccReassPkts, apDsgnatedWLAP=apDsgnatedWLAP, apKBOS=apKBOS, muState=muState, apFaultMgmt=apFaultMgmt, apReassemblyTimeOut=apReassemblyTimeOut, apBCMCQMax=apBCMCQMax, apWLAPItfID=apWLAPItfID, apSecurityMgmt=apSecurityMgmt, apTFTPServer=apTFTPServer, apAccCtrlEntry=apAccCtrlEntry, apMUUnAssocTrap=apMUUnAssocTrap, apTelnetEnable=apTelnetEnable, apTypeFilterEnable=apTypeFilterEnable, apTrafficMatrixEntry=apTrafficMatrixEntry, apPacketsOuts=apPacketsOuts, apHoppingSeq=apHoppingSeq, apAPStateXchgEnable=apAPStateXchgEnable, apEPktsSents=apEPktsSents, rfTotalFragRcvds=rfTotalFragRcvds, rfBcMcPktsSents=rfBcMcPktsSents, wPassThruEchoes=wPassThruEchoes, rfBcMcOctSents=rfBcMcOctSents, apResetAP=apResetAP, apRWCommunityName=apRWCommunityName, apWLAPManualAPID=apWLAPManualAPID, apEPktsDiscCRCs=apEPktsDiscCRCs, apAPID=apAPID, apMUs=apMUs, apOctOutPerSec=apOctOutPerSec, apAPFirmwareRev=apAPFirmwareRev, apWLAPHopSequence=apWLAPHopSequence, apACLRangeTable=apACLRangeTable, apWNMPStatistics=apWNMPStatistics, apRFStatistics=apRFStatistics, rfPerFqPktsRcvds=rfPerFqPktsRcvds, apMUToPSPTrap=apMUToPSPTrap, disallowedIndex=disallowedIndex, etherType=etherType, apPacketsIns=apPacketsIns, apWLAPMode=apWLAPMode, apHardwareRev=apHardwareRev, apNPktsToRfs=apNPktsToRfs, muTotalAssoc=muTotalAssoc, muNPktsRcvds=muNPktsRcvds, muNDiscdPkts=muNDiscdPkts, apEthernetStatistics=apEthernetStatistics, apLdACLFrMUList=apLdACLFrMUList, lowMacAddr=lowMacAddr, allowedIndex=allowedIndex, apMUAutoCfgEnable=apMUAutoCfgEnable, apRFTrapEnable=apRFTrapEnable, rfAssocMUs=rfAssocMUs, apInactivityTimeout=apInactivityTimeout, rfBcMcPktsRcvds=rfBcMcPktsRcvds, apDsgnatedItf=apDsgnatedItf, apClrACL=apClrACL, apAllTrapsEnable=apAllTrapsEnable, apTrafficMatrixTable=apTrafficMatrixTable, apProtoItfName=apProtoItfName, muAssocStart=muAssocStart, apUpdateFirmware=apUpdateFirmware, apSerialnumber=apSerialnumber, apPerFreqStatTable=apPerFreqStatTable, apMulticastMask=apMulticastMask, apClrACLRangeTable=apClrACLRangeTable, apNPktsToEnets=apNPktsToEnets, apACLViolationTrap=apACLViolationTrap, apModemHangUp=apModemHangUp, apRootWLAPLostTrap=apRootWLAPLostTrap, apAdrViolations=apAdrViolations, apApId=apApId, muMacAddr=muMacAddr, apClrMUTable=apClrMUTable, apWNMPCfgPkts=apWNMPCfgPkts, muInterface=muInterface, apMyMacAddr=apMyMacAddr, apMyIPAddr=apMyIPAddr, apDnLdFileName=apDnLdFileName, apMUAssocTrap=apMUAssocTrap, apWLAPHelloTime=apWLAPHelloTime, apWLAPID=apWLAPID, apAntennaSelect=apAntennaSelect, apDTIMInterval=apDTIMInterval, apMUToCAMTrap=apMUToCAMTrap, apKBIS=apKBIS, apProduct=apProduct, apWLAPFwdDelay=apWLAPFwdDelay, apEPktsDiscBuffers=apEPktsDiscBuffers, apEncryptCoeff=apEncryptCoeff, apConfigMgmt=apConfigMgmt, apE1orMoreColls=apE1orMoreColls, apPPPState=apPPPState, typeIndex=typeIndex, apCurrCallTime=apCurrCallTime, apDsgntedWLAPUpTrap=apDsgntedWLAPUpTrap, apCountryName=apCountryName, disallowedMU=disallowedMU, apKnownAPsEntry=apKnownAPsEntry, apSNMPInfo=apSNMPInfo, apSubnetMask=apSubnetMask, rfRcvdDupPkts=rfRcvdDupPkts, muLastAPAddr=muLastAPAddr, apWNMPEnable=apWNMPEnable, apHopSequence=apHopSequence, apSerialPortConfig=apSerialPortConfig, apROCommunityName=apROCommunityName, apAddrFilterEntry=apAddrFilterEntry, rfTotalCollisions=rfTotalCollisions, apACLRangeEntry=apACLRangeEntry, apTypeFilterTable=apTypeFilterTable, rfSBcMcPktsRcvds=rfSBcMcPktsRcvds, muTmLastData=muTmLastData, apAccCtrlTable=apAccCtrlTable, apRFStartUpTrap=apRFStartUpTrap, muLastAssEnd=muLastAssEnd, apPPPTerminates=apPPPTerminates, apSystemConfig=apSystemConfig, apWLAPMaxAge=apWLAPMaxAge, apLastCallTime=apLastCallTime, apItfStatIndex=apItfStatIndex, apRootWLAPUpTrap=apRootWLAPUpTrap, apKnownAPsTable=apKnownAPsTable, apAPMacAddr=apAPMacAddr, apMaxMUs=apMaxMUs, apEAnyCollisions=apEAnyCollisions, apPPPTimeout=apPPPTimeout, apWLAPPriority=apWLAPPriority, wPPktsToNVs=wPPktsToNVs, muIndex=muIndex, apWLAPItfAddr=apWLAPItfAddr, muNPktsSents=muNPktsSents, apAnswerWaitTime=apAnswerWaitTime, apPktsOutPerSec=apPktsOutPerSec, apDefaultInterface=apDefaultInterface, wPktsFromNVs=wPktsFromNVs, apOctetsIns=apOctetsIns, rfPerFqChannel=rfPerFqChannel, rfSBcMcPktsSents=rfSBcMcPktsSents, apAddrFilterTable=apAddrFilterTable, apDsgnatedWLAPLostTrap=apDsgnatedWLAPLostTrap, apRFPortState=apRFPortState, apAPIdConflictTrap=apAPIdConflictTrap, rfTotalFragSents=rfTotalFragSents, highMacAddr=highMacAddr, apDsgnatedCost=apDsgnatedCost)
