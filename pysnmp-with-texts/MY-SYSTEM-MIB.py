#
# PySNMP MIB module MY-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MY-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
myMgmt, = mibBuilder.importSymbols("MY-SMI", "myMgmt")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, MibIdentifier, iso, TimeTicks, Unsigned32, Gauge32, NotificationType, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "iso", "TimeTicks", "Unsigned32", "Gauge32", "NotificationType", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "Bits", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
mySystemMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1))
mySystemMIB.setRevisions(('2002-03-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mySystemMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: mySystemMIB.setLastUpdated('200203200000Z')
if mibBuilder.loadTexts: mySystemMIB.setOrganization('D-Link Crop.')
if mibBuilder.loadTexts: mySystemMIB.setContactInfo(' http://support.dlink.com')
if mibBuilder.loadTexts: mySystemMIB.setDescription('This module defines my system mibs.')
mySystemMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1))
mySystemHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemHwVersion.setStatus('current')
if mibBuilder.loadTexts: mySystemHwVersion.setDescription('Return the string of the Revision number of hardware resides on the FastSwitch.')
mySystemSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemSwVersion.setStatus('current')
if mibBuilder.loadTexts: mySystemSwVersion.setDescription('Return the string of the Revision number of software resides on the FastSwitch.')
mySystemBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemBootVersion.setStatus('current')
if mibBuilder.loadTexts: mySystemBootVersion.setDescription('Return the string of the Revision number of BOOT software resides on the FastSwitch.')
mySystemSysCtrlVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemSysCtrlVersion.setStatus('current')
if mibBuilder.loadTexts: mySystemSysCtrlVersion.setDescription('Return the string of the Revision number of CTRL software resides on the FastSwitch.')
mySystemParametersSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySystemParametersSave.setStatus('current')
if mibBuilder.loadTexts: mySystemParametersSave.setDescription('Save all parameters changed in configuration by setting this object to any value but 0, set its value to 0 will cause no action of agent, otherwise all changes of prarameters will be saved for retrive when system is reset, if parameter is changed but not saved all changes will come to their original value when system down and up again, when query always return value 0.')
mySystemOutBandRate = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("baud9600", 1), ("baud19200", 2), ("baud38400", 3), ("baud57600", 4), ("baud115200", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySystemOutBandRate.setStatus('current')
if mibBuilder.loadTexts: mySystemOutBandRate.setDescription('Determine the console(OutBand) baud rate : 9600 - 1,19200 - 2, 38300 - 3, 57600 - 4, 115200 - 5, when the console baud rate is other value will return value 0.')
mySystemReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySystemReset.setStatus('current')
if mibBuilder.loadTexts: mySystemReset.setDescription('This Object allow perform soft reset of system by setting its value to none zero. if a soft resetis performed, after this having completed a warm start trap will send to declare the state and when queried will always return 0.')
mySwitchLayer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("layer2", 1), ("layer3", 2), ("router", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySwitchLayer.setStatus('current')
if mibBuilder.loadTexts: mySwitchLayer.setDescription("Which layer's device the switch in system ")
mySystemHwPower = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rpsNoLink", 1), ("rpsLinkAndNoPower", 2), ("rpsLinkAndReadyForPower", 3), ("rpsLinkAndPower", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemHwPower.setStatus('current')
if mibBuilder.loadTexts: mySystemHwPower.setDescription('The state of power.')
mySystemHwFan = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("work", 1), ("stop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemHwFan.setStatus('current')
if mibBuilder.loadTexts: mySystemHwFan.setDescription('The state of fan.')
mySystemOutBandTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySystemOutBandTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: mySystemOutBandTimeout.setDescription('The timeout of console.0 indicate that timeout function is disabled.')
mySystemTelnetTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySystemTelnetTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: mySystemTelnetTimeout.setDescription('The timeout of telnet.0 indicate that timeout function is disabled.')
mySystemMainFile = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemMainFile.setStatus('current')
if mibBuilder.loadTexts: mySystemMainFile.setDescription('Return the string of the name of main file on the FastSwitch.')
mySystemCurrentPower = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemCurrentPower.setStatus('current')
if mibBuilder.loadTexts: mySystemCurrentPower.setDescription('Return the current power of the FastSwitch.')
mySystemRemainPower = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemRemainPower.setStatus('current')
if mibBuilder.loadTexts: mySystemRemainPower.setDescription('Return the remain power of the FastSwitch.')
mySystemTemperature = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemTemperature.setStatus('current')
if mibBuilder.loadTexts: mySystemTemperature.setDescription('Return the temperature of the FastSwitch.')
mySystemElectricalSourceNum = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemElectricalSourceNum.setStatus('current')
if mibBuilder.loadTexts: mySystemElectricalSourceNum.setDescription('Return the electrical source number of the FastSwitch.')
mySystemElectricalSourceIsNormalTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 18), )
if mibBuilder.loadTexts: mySystemElectricalSourceIsNormalTable.setStatus('current')
if mibBuilder.loadTexts: mySystemElectricalSourceIsNormalTable.setDescription('A table of electrical source entries. Each object displays whether different electrical sources are normal or not.')
mySystemElectricalSourceIsNormalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 18, 1), ).setIndexNames((0, "MY-SYSTEM-MIB", "mySystemElectricalSourceIsNormalIndex"))
if mibBuilder.loadTexts: mySystemElectricalSourceIsNormalEntry.setStatus('current')
if mibBuilder.loadTexts: mySystemElectricalSourceIsNormalEntry.setDescription('An entry displays whether different electrical sources are normal or not.')
mySystemElectricalSourceIsNormalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemElectricalSourceIsNormalIndex.setStatus('current')
if mibBuilder.loadTexts: mySystemElectricalSourceIsNormalIndex.setDescription('An index that uniquely represents a electrical source.')
mySystemElectricalSourceIsNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noexist", 1), ("existnopower", 2), ("existreadypower", 3), ("normal", 4), ("powerbutabnormal", 5), ("unknow", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemElectricalSourceIsNormal.setStatus('current')
if mibBuilder.loadTexts: mySystemElectricalSourceIsNormal.setDescription('This object displays whether an electrical source is normal or not.')
mySystemElectricalSourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 18, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemElectricalSourceName.setStatus('current')
if mibBuilder.loadTexts: mySystemElectricalSourceName.setDescription('The name of electrical source')
mySystemCurrentVoltage = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemCurrentVoltage.setStatus('current')
if mibBuilder.loadTexts: mySystemCurrentVoltage.setDescription('Return the current voltage of the FastSwitch.')
mySystemFanNUM = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemFanNUM.setStatus('current')
if mibBuilder.loadTexts: mySystemFanNUM.setDescription('Return the number of fan on the FastSwitch.')
mySystemFanIsNormalTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 21), )
if mibBuilder.loadTexts: mySystemFanIsNormalTable.setStatus('current')
if mibBuilder.loadTexts: mySystemFanIsNormalTable.setDescription('A table of fan entries. Each object displays whether different fans are normal or not.')
mySystemFanIsNormalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 21, 1), ).setIndexNames((0, "MY-SYSTEM-MIB", "mySystemFanIsNormalIndex"))
if mibBuilder.loadTexts: mySystemFanIsNormalEntry.setStatus('current')
if mibBuilder.loadTexts: mySystemFanIsNormalEntry.setDescription('An entry displays whether different fans are normal or not.')
mySystemFanIsNormalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemFanIsNormalIndex.setStatus('current')
if mibBuilder.loadTexts: mySystemFanIsNormalIndex.setDescription('An index that uniquely represents a fan.')
mySystemFanIsNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noexist", 1), ("existnopower", 2), ("existreadypower", 3), ("normal", 4), ("powerbutabnormal", 5), ("unknow", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemFanIsNormal.setStatus('current')
if mibBuilder.loadTexts: mySystemFanIsNormal.setDescription('This object displays whether an fan is normal or not.')
mySystemFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 21, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemFanName.setStatus('current')
if mibBuilder.loadTexts: mySystemFanName.setDescription('The name of fan')
mySystemReloadTimeRemain = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemReloadTimeRemain.setStatus('current')
if mibBuilder.loadTexts: mySystemReloadTimeRemain.setDescription('Return the remain time of reloading on the FastSwitch.')
mySystemTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 23), )
if mibBuilder.loadTexts: mySystemTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: mySystemTemperatureTable.setDescription('A table of temperature entries. Each object displays the temperature information.')
mySystemTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 23, 1), ).setIndexNames((0, "MY-SYSTEM-MIB", "mySystemTemperatureIndex"))
if mibBuilder.loadTexts: mySystemTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: mySystemTemperatureEntry.setDescription('An entry displays the temperature information.')
mySystemTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemTemperatureIndex.setStatus('current')
if mibBuilder.loadTexts: mySystemTemperatureIndex.setDescription("An index that uniquely represents a device's temperature information.")
mySystemTemperatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 23, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemTemperatureName.setStatus('current')
if mibBuilder.loadTexts: mySystemTemperatureName.setDescription('A textual name assigned to a temperature chip')
mySystemTemperatureCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 23, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemTemperatureCurrent.setStatus('current')
if mibBuilder.loadTexts: mySystemTemperatureCurrent.setDescription('Return the current temperature of the FastSwitch.The temperature display is not supported for the current temperature returns to 0.')
mySystemTemperatureWarningVaule = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 23, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySystemTemperatureWarningVaule.setStatus('current')
if mibBuilder.loadTexts: mySystemTemperatureWarningVaule.setDescription('The first warning of temperature of FastSwitch.')
mySystemTemperatureCritialVaule = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 23, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mySystemTemperatureCritialVaule.setStatus('current')
if mibBuilder.loadTexts: mySystemTemperatureCritialVaule.setDescription('The second warning of temperature of FastSwitch.')
mySystemSerialno = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemSerialno.setStatus('current')
if mibBuilder.loadTexts: mySystemSerialno.setDescription('Return the string of the serial number resides on the FastSwitch.')
mySystemVersionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 25), )
if mibBuilder.loadTexts: mySystemVersionTable.setStatus('current')
if mibBuilder.loadTexts: mySystemVersionTable.setDescription('A table of system version entries. Each object displays the system version information.')
mySystemVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 25, 1), ).setIndexNames((0, "MY-SYSTEM-MIB", "mySystemVersionIndex"))
if mibBuilder.loadTexts: mySystemVersionEntry.setStatus('current')
if mibBuilder.loadTexts: mySystemVersionEntry.setDescription('An entry displays the system version information.')
mySystemVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 25, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemVersionIndex.setStatus('current')
if mibBuilder.loadTexts: mySystemVersionIndex.setDescription("An index that uniquely represents a device's system version information.")
mySystemVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 25, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemVersionName.setStatus('current')
if mibBuilder.loadTexts: mySystemVersionName.setDescription('A textual name assigned to a system version chip')
mySystemVersionSwBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 25, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemVersionSwBoot.setStatus('current')
if mibBuilder.loadTexts: mySystemVersionSwBoot.setDescription('Return the software boot system version of the FastSwitch.')
mySystemVersionSwCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 25, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemVersionSwCtrl.setStatus('current')
if mibBuilder.loadTexts: mySystemVersionSwCtrl.setDescription('Return the software ctrl system version of the FastSwitch.')
mySystemVersionSwMain = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 25, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemVersionSwMain.setStatus('current')
if mibBuilder.loadTexts: mySystemVersionSwMain.setDescription('Return the software main system version of the FastSwitch.')
mySystemVersionHw = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 25, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemVersionHw.setStatus('current')
if mibBuilder.loadTexts: mySystemVersionHw.setDescription('Return the hardware system version of the FastSwitch.')
mySystemVersionSerialno = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 1, 25, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mySystemVersionSerialno.setStatus('current')
if mibBuilder.loadTexts: mySystemVersionSerialno.setDescription('Return the serial number of the FastSwitch.')
mySystemMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 2))
mySystemHardChangeDesc = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 2, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mySystemHardChangeDesc.setStatus('current')
if mibBuilder.loadTexts: mySystemHardChangeDesc.setDescription('The description of hard change')
mySystemHardChangeDetected = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 2, 2)).setObjects(("MY-SYSTEM-MIB", "mySystemHardChangeDesc"))
if mibBuilder.loadTexts: mySystemHardChangeDetected.setStatus('current')
if mibBuilder.loadTexts: mySystemHardChangeDetected.setDescription('System hardware has changed include number of devices or number of modules or the place or type of the module is change.')
mySystemPowerStateChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 2, 3)).setObjects(("MY-SYSTEM-MIB", "mySystemHwPower"))
if mibBuilder.loadTexts: mySystemPowerStateChange.setStatus('current')
if mibBuilder.loadTexts: mySystemPowerStateChange.setDescription('while the state of power changed, then this trap will be sent.')
mySystemFanStateChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 2, 4)).setObjects(("MY-SYSTEM-MIB", "mySystemHwFan"))
if mibBuilder.loadTexts: mySystemFanStateChange.setStatus('current')
if mibBuilder.loadTexts: mySystemFanStateChange.setDescription('while the state of fan changed, then this trap will be sent.')
mySystemMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 3))
mySystemMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 3, 1))
mySystemMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 3, 2))
mySystemMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 3, 1, 1)).setObjects(("MY-SYSTEM-MIB", "mySystemMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mySystemMIBCompliance = mySystemMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: mySystemMIBCompliance.setDescription('The compliance statement for entities which implement the My System MIB')
mySystemMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 1, 3, 2, 1)).setObjects(("MY-SYSTEM-MIB", "mySystemHwVersion"), ("MY-SYSTEM-MIB", "mySystemSwVersion"), ("MY-SYSTEM-MIB", "mySystemBootVersion"), ("MY-SYSTEM-MIB", "mySystemSysCtrlVersion"), ("MY-SYSTEM-MIB", "mySystemParametersSave"), ("MY-SYSTEM-MIB", "mySystemReset"), ("MY-SYSTEM-MIB", "mySystemOutBandRate"), ("MY-SYSTEM-MIB", "mySwitchLayer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mySystemMIBGroup = mySystemMIBGroup.setStatus('current')
if mibBuilder.loadTexts: mySystemMIBGroup.setDescription('A collection of objects providing system information and opertion to a My agent.')
mibBuilder.exportSymbols("MY-SYSTEM-MIB", mySystemElectricalSourceIsNormal=mySystemElectricalSourceIsNormal, mySystemElectricalSourceNum=mySystemElectricalSourceNum, mySystemTemperatureName=mySystemTemperatureName, mySystemVersionSwMain=mySystemVersionSwMain, mySystemVersionName=mySystemVersionName, mySystemParametersSave=mySystemParametersSave, mySystemFanName=mySystemFanName, mySystemVersionSwCtrl=mySystemVersionSwCtrl, mySystemSerialno=mySystemSerialno, mySystemCurrentVoltage=mySystemCurrentVoltage, mySystemTemperatureCurrent=mySystemTemperatureCurrent, mySystemHardChangeDetected=mySystemHardChangeDetected, mySystemTemperature=mySystemTemperature, mySystemFanIsNormalEntry=mySystemFanIsNormalEntry, mySystemMIBCompliances=mySystemMIBCompliances, mySystemHwVersion=mySystemHwVersion, mySystemRemainPower=mySystemRemainPower, mySystemVersionSwBoot=mySystemVersionSwBoot, mySystemHardChangeDesc=mySystemHardChangeDesc, mySystemMIBConformance=mySystemMIBConformance, mySystemReloadTimeRemain=mySystemReloadTimeRemain, PYSNMP_MODULE_ID=mySystemMIB, mySystemMIBObjects=mySystemMIBObjects, mySystemElectricalSourceName=mySystemElectricalSourceName, mySystemFanIsNormalTable=mySystemFanIsNormalTable, mySystemVersionSerialno=mySystemVersionSerialno, mySystemMIBCompliance=mySystemMIBCompliance, mySystemTelnetTimeout=mySystemTelnetTimeout, mySystemHwPower=mySystemHwPower, mySystemFanIsNormal=mySystemFanIsNormal, mySystemTemperatureTable=mySystemTemperatureTable, mySystemTemperatureIndex=mySystemTemperatureIndex, mySystemMIB=mySystemMIB, mySystemTemperatureEntry=mySystemTemperatureEntry, mySystemVersionIndex=mySystemVersionIndex, mySystemSwVersion=mySystemSwVersion, mySystemElectricalSourceIsNormalEntry=mySystemElectricalSourceIsNormalEntry, mySystemCurrentPower=mySystemCurrentPower, mySystemFanNUM=mySystemFanNUM, mySystemSysCtrlVersion=mySystemSysCtrlVersion, mySwitchLayer=mySwitchLayer, mySystemTemperatureCritialVaule=mySystemTemperatureCritialVaule, mySystemOutBandRate=mySystemOutBandRate, mySystemPowerStateChange=mySystemPowerStateChange, mySystemVersionEntry=mySystemVersionEntry, mySystemTemperatureWarningVaule=mySystemTemperatureWarningVaule, mySystemFanStateChange=mySystemFanStateChange, mySystemMainFile=mySystemMainFile, mySystemVersionTable=mySystemVersionTable, mySystemMIBGroups=mySystemMIBGroups, mySystemBootVersion=mySystemBootVersion, mySystemElectricalSourceIsNormalTable=mySystemElectricalSourceIsNormalTable, mySystemElectricalSourceIsNormalIndex=mySystemElectricalSourceIsNormalIndex, mySystemFanIsNormalIndex=mySystemFanIsNormalIndex, mySystemMIBTraps=mySystemMIBTraps, mySystemVersionHw=mySystemVersionHw, mySystemHwFan=mySystemHwFan, mySystemReset=mySystemReset, mySystemMIBGroup=mySystemMIBGroup, mySystemOutBandTimeout=mySystemOutBandTimeout)
