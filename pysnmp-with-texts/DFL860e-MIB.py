#
# PySNMP MIB module DFL860e-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DFL860e-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:42:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, NotificationType, enterprises, Bits, ObjectIdentity, Unsigned32, ModuleIdentity, Gauge32, Counter64, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "NotificationType", "enterprises", "Bits", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "Gauge32", "Counter64", "TimeTicks", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dfl860e_MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 1, 2)).setLabel("dfl860e-MIB")
dfl860e_MIB.setRevisions(('2010-09-02 11:39', '2010-03-30 09:00', '2009-11-10 09:16', '2008-11-18 16:05', '2008-10-14 12:27', '2007-10-31 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: dfl860e_MIB.setRevisionsDescriptions(('Added 64-bit counters', 'Added values for SMTP ALG objects.', 'Added values for opened and closed connections per second', 'Added value for timer usage', 'Added values for memory usage and TCP buffer usage', 'Initial version.',))
if mibBuilder.loadTexts: dfl860e_MIB.setLastUpdated('201009021139Z')
if mibBuilder.loadTexts: dfl860e_MIB.setOrganization('D-Link Corporation')
if mibBuilder.loadTexts: dfl860e_MIB.setContactInfo('Postal: D-Link Corporation No. 289, Sinhu 3rd Road, Neihu District, Taipei City 114, Taiwan, R.O.C. Tel: +886-2-66000123 Fax: +886-2-55509988')
if mibBuilder.loadTexts: dfl860e_MIB.setDescription('The MIB module for D-Link DFL-860e series product.')
dlink = MibIdentifier((1, 3, 6, 1, 4, 1, 171))
netdefendMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20))
utmFirewall = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2))
dfl860e = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7))
dfl860eOS = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1))
dfl860eOSStats = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2))
dfl860ereg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2))
dfl860eMibModules = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 1))
dfl860eMibConfs = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 2))
dfl860eMibObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3))
dfl860eSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1))
dfl860eSysCpuLoad = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysCpuLoad.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysCpuLoad.setDescription('The system cpu load.')
dfl860eSysForwardedBits = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysForwardedBits.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysForwardedBits.setDescription('The number of bits forwarded through the gateway.')
dfl860eSysForwardedPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysForwardedPackets.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysForwardedPackets.setDescription('Total number of forwarded packets.')
dfl860eSysBuffUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysBuffUse.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysBuffUse.setDescription('The current number of buffers in use.')
dfl860eSysConns = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysConns.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysConns.setDescription('The numer of connections.')
dfl860eSysPerStateCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 6))
dfl860eSysPscTcpSyn = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysPscTcpSyn.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysPscTcpSyn.setDescription('Number of TCP connections in the SYN state.')
dfl860eSysPscTcpOpen = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysPscTcpOpen.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysPscTcpOpen.setDescription('Number of TCP connections in the OPEN state.')
dfl860eSysPscTcpFin = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysPscTcpFin.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysPscTcpFin.setDescription('Number of TCP connections in the FIN state.')
dfl860eSysPscUdp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysPscUdp.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysPscUdp.setDescription('Number of UDP connections.')
dfl860eSysPscIcmp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysPscIcmp.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysPscIcmp.setDescription('Number of ICMP connections.')
dfl860eSysPscOther = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 6, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysPscOther.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysPscOther.setDescription('Number of other connections.')
dfl860eIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7), )
if mibBuilder.loadTexts: dfl860eIfStatsTable.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfStatsTable.setDescription('A table of DFL-860e specific interfaces statistics')
dfl860eIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eIfStatsIndex"))
if mibBuilder.loadTexts: dfl860eIfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfStatsEntry.setDescription('The row in a table of DFL-860e specific interface statistics')
dfl860eIfStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eIfStatsIndex.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfStatsIndex.setDescription('Index of a row in dfl860eSysIfStatsTable')
dfl860eIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfName.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfName.setDescription('The name of the interface.')
dfl860eIfFragsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfFragsIn.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfFragsIn.setDescription('Number of IP packet fragments received in the interface.')
dfl860eIfFragReassOk = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfFragReassOk.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfFragReassOk.setDescription('Number of complete IP packets successfully reassembled from the fragments received in the interface.')
dfl860eIfFragReassFail = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfFragReassFail.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfFragReassFail.setDescription('Number of packets that could not be reassembled, either due to resource starvation, illegal fragmentation, or just packet loss.')
dfl860eIfPktsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfPktsInCnt.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfPktsInCnt.setDescription('Number of packets received by the interface.')
dfl860eIfPktsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfPktsOutCnt.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfPktsOutCnt.setDescription('Number of packets sent by the interface')
dfl860eIfBitsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfBitsInCnt.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfBitsInCnt.setDescription('Number of bits received by the interface')
dfl860eIfBitsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfBitsOutCnt.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfBitsOutCnt.setDescription('Number of bits sent by the interface')
dfl860eIfPktsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfPktsTotCnt.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfPktsTotCnt.setDescription('Totat number of packets transmited by the interface')
dfl860eIfBitsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfBitsTotCnt.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfBitsTotCnt.setDescription('Totat number of bits transmited by the interface')
dfl860eIfHCPktsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfHCPktsInCnt.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfHCPktsInCnt.setDescription('Number of packets received by the interface. This object is a 64-bit version of dfl860eIfPktsInCnt.')
dfl860eIfHCPktsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfHCPktsOutCnt.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfHCPktsOutCnt.setDescription('Number of packets sent by the interface. This object is a 64-bit version of dfl860eIfPktsOutCnt.')
dfl860eIfHCBitsInCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfHCBitsInCnt.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfHCBitsInCnt.setDescription('Number of bits received by the interface. This object is a 64-bit version of dfl860eIfBitsInCnt.')
dfl860eIfHCBitsOutCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfHCBitsOutCnt.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfHCBitsOutCnt.setDescription('Number of bits sent by the interface. This object is a 64-bit version of dfl860eIfBitsOutCnt.')
dfl860eIfHCPktsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfHCPktsTotCnt.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfHCPktsTotCnt.setDescription('Totat number of packets transmited by the interface. This object is a 64-bit version of dfl860eIfPktsTotCnt.')
dfl860eIfHCBitsTotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfHCBitsTotCnt.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfHCBitsTotCnt.setDescription('Totat number of bits transmited by the interface. This object is a 64-bit version of dfl860eIfBitsTotCnt.')
dfl860eIfRxRingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 8), )
if mibBuilder.loadTexts: dfl860eIfRxRingTable.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfRxRingTable.setDescription('A table of DFL-860e specific interface Rx ring statistics')
dfl860eIfRxRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 8, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eIfRxRingIndex"))
if mibBuilder.loadTexts: dfl860eIfRxRingEntry.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfRxRingEntry.setDescription('The row in a table of DFL-860e specific interface Rx ring statistics.')
dfl860eIfRxRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eIfRxRingIndex.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfRxRingIndex.setDescription('Index of a row in dfl860eIfRxRingTable.')
dfl860eIfRxRingFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfRxRingFifoErrors.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfRxRingFifoErrors.setDescription('Rx Ring number of FIFO errors.')
dfl860eIfRxDespools = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfRxDespools.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfRxDespools.setDescription('Number of despool events per second.')
dfl860eIfRxAvgUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfRxAvgUse.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfRxAvgUse.setDescription('Rx Ring average usage.')
dfl860eIfRxRingSaturation = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 8, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfRxRingSaturation.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfRxRingSaturation.setDescription('Rx Ring sturation. Percentage of ring use per despool event when the ring has been more than half full.')
dfl860eRxRingFlooded = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 8, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eRxRingFlooded.setStatus('current')
if mibBuilder.loadTexts: dfl860eRxRingFlooded.setDescription('Rx Ring number of despool events for which the ring has been completely flooded')
dfl860eIfTxRingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 9), )
if mibBuilder.loadTexts: dfl860eIfTxRingTable.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfTxRingTable.setDescription('A table of DFL-860e specific interface Tx ring statistics')
dfl860eIfTxRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 9, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eIfTxRingIndex"))
if mibBuilder.loadTexts: dfl860eIfTxRingEntry.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfTxRingEntry.setDescription('The row in a table of DFL-860e specific interface Tx ring statistics.')
dfl860eIfTxRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eIfTxRingIndex.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfTxRingIndex.setDescription('Index of a row in dfl860eIfRxRingTable.')
dfl860eIfTxDespools = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfTxDespools.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfTxDespools.setDescription('Tx Ring number of despool event per second (polls when there is at least one buffer in the ring)')
dfl860eIfTxAvgUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfTxAvgUse.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfTxAvgUse.setDescription('Tx Ring number of despool events when the ring has been completely flooded')
dfl860eIfTxRingSaturation = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfTxRingSaturation.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfTxRingSaturation.setDescription('Tx Ring percentage of use per despool event when the ring has been more than half full.')
dfl860eRxTingFlooded = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eRxTingFlooded.setStatus('current')
if mibBuilder.loadTexts: dfl860eRxTingFlooded.setDescription('Tx Ring number of despool events for in which the ring has been completely flooded')
dfl860eIfVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 10), )
if mibBuilder.loadTexts: dfl860eIfVlanStatsTable.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfVlanStatsTable.setDescription('A table of DFL-860e VLAN statistics')
dfl860eIfVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 10, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eIfVlanIndex"))
if mibBuilder.loadTexts: dfl860eIfVlanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfVlanStatsEntry.setDescription('The row in a table of dfl860eIfVlanStatsTable. Each has an index equal to the ifIndex of the corresponding physical interface')
dfl860eIfVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eIfVlanIndex.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfVlanIndex.setDescription('Extended index of a row in dfl860eIfVlanStatsTable.')
dfl860eIfVlanUntaggedInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfVlanUntaggedInPkts.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfVlanUntaggedInPkts.setDescription('Number of untaged packets untagged packets received by the interface.')
dfl860eIfVlanUntaggedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfVlanUntaggedOutPkts.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfVlanUntaggedOutPkts.setDescription('Number of untagged packets sent by the interface.')
dfl860eIfVlanUntaggedTotPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfVlanUntaggedTotPkts.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfVlanUntaggedTotPkts.setDescription('Total number of untagged packets processed by the interface.')
dfl860eIfVlanUntaggedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfVlanUntaggedInOctets.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfVlanUntaggedInOctets.setDescription('Total number of octects in untagged packets received by the interface.')
dfl860eIfVlanUntaggedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfVlanUntaggedOutOctets.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfVlanUntaggedOutOctets.setDescription('Total number of octects in untagged packets sent by the interface.')
dfl860eIfVlanUntaggedTotOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIfVlanUntaggedTotOctets.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfVlanUntaggedTotOctets.setDescription('Total number of octects in untagged packets processed by the interface.')
dfl860eHWSensorTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 11), )
if mibBuilder.loadTexts: dfl860eHWSensorTable.setStatus('current')
if mibBuilder.loadTexts: dfl860eHWSensorTable.setDescription('Table of hardware sensors.')
dfl860eHWSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 11, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eHWSensorIndex"))
if mibBuilder.loadTexts: dfl860eHWSensorEntry.setStatus('current')
if mibBuilder.loadTexts: dfl860eHWSensorEntry.setDescription('Entry of table of hardware sensors.')
dfl860eHWSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eHWSensorIndex.setStatus('current')
if mibBuilder.loadTexts: dfl860eHWSensorIndex.setDescription('Index of the entries of the sensor table.')
dfl860eHWSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHWSensorName.setStatus('current')
if mibBuilder.loadTexts: dfl860eHWSensorName.setDescription('The description of the sensor.')
dfl860eHWSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 11, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHWSensorValue.setStatus('current')
if mibBuilder.loadTexts: dfl860eHWSensorValue.setDescription('The value of the sensor.')
dfl860eHWSensorUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHWSensorUnit.setStatus('current')
if mibBuilder.loadTexts: dfl860eHWSensorUnit.setDescription('The description of the unit of the value mesured by sensor.')
dfl860eSysMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysMemUsage.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysMemUsage.setDescription('The current memory usage.')
dfl860eSysTCPUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 13))
dfl860eSysTCPRecvSmall = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 13, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysTCPRecvSmall.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysTCPRecvSmall.setDescription('Small TCP receive windows usage.')
dfl860eSysTCPRecvLarge = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 13, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysTCPRecvLarge.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysTCPRecvLarge.setDescription('Large TCP receive windows usage.')
dfl860eSysTCPSendSmall = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 13, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysTCPSendSmall.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysTCPSendSmall.setDescription('Small TCP send windows usage.')
dfl860eSysTCPSendLarge = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 13, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysTCPSendLarge.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysTCPSendLarge.setDescription('Large TCP send windows usage.')
dfl860eSysTimerUsage = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysTimerUsage.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysTimerUsage.setDescription('The current number of timers in use.')
dfl860eSysConnOPS = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysConnOPS.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysConnOPS.setDescription('The number of connections opened per second.')
dfl860eSysConnCPS = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysConnCPS.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysConnCPS.setDescription('The number of connections closed per second.')
dfl860eSysHCForwardedBits = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSysHCForwardedBits.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysHCForwardedBits.setDescription('The number of bits forwarded through the gateway.')
dfl860eVPN = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2))
dfl860eIPsec = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1))
dfl860eIPsecGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1))
dfl860eIPsecPhaseOneActive = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecPhaseOneActive.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecPhaseOneActive.setDescription('Number of Phase-1 active negotiations')
dfl860eIPsecPhaseOneAggrModeDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecPhaseOneAggrModeDone.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecPhaseOneAggrModeDone.setDescription('Number of Phase-1 aggressive mode negotiations.')
dfl860eIPsecQuickModeActive = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecQuickModeActive.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecQuickModeActive.setDescription('Number of quick mode active negotiations.')
dfl860eIPsecPhaseOneDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecPhaseOneDone.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecPhaseOneDone.setDescription('Number of Phase-1 negotiations done.')
dfl860eIPsecPhaseOneFailed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecPhaseOneFailed.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecPhaseOneFailed.setDescription('Number of Phase-1 negotiations failed.')
dfl860eIPsecPhaseOneRekeyed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecPhaseOneRekeyed.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecPhaseOneRekeyed.setDescription('Number of Phase-1 negotiations rekeyed.')
dfl860eIPsecQuickModeDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecQuickModeDone.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecQuickModeDone.setDescription('Number of quick mode negotiations done.')
dfl860eIPsecQuickModeFailed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecQuickModeFailed.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecQuickModeFailed.setDescription('Number of quick mode negotiations failed.')
dfl860eIPsecInfoDone = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecInfoDone.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecInfoDone.setDescription('Number of informational exchanges done. (Not available in IKEv1 implementations)')
dfl860eIPsecInfoFailed = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecInfoFailed.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecInfoFailed.setDescription('Number of informational exchanges failed. (Not available in IKEv1 implementations)')
dfl860eIPsecInOctetsComp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecInOctetsComp.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecInOctetsComp.setDescription('Total octets in before decompression.')
dfl860eIPsecInOctetsUncomp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecInOctetsUncomp.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecInOctetsUncomp.setDescription('Total octets in after decompression.')
dfl860eIPsecOutOctetsComp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecOutOctetsComp.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecOutOctetsComp.setDescription('Total octets out after compression.')
dfl860eIPsecOutOctetsUncomp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecOutOctetsUncomp.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecOutOctetsUncomp.setDescription('Total octets out before compression.')
dfl860eIPsecForwardedOctetsComp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecForwardedOctetsComp.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecForwardedOctetsComp.setDescription('Total octets forwarded after compression.')
dfl860eIPsecForwardedOctetsUcomp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecForwardedOctetsUcomp.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecForwardedOctetsUcomp.setDescription('Total octets forwarded before compression.')
dfl860eIPsecInPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecInPackets.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecInPackets.setDescription('Total packets in.')
dfl860eIPsecOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecOutPackets.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecOutPackets.setDescription('Total packets Out.')
dfl860eIPsecForwardedPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecForwardedPackets.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecForwardedPackets.setDescription('Total packets forwarded.')
dfl860eIPsecActiveTransforms = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecActiveTransforms.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecActiveTransforms.setDescription('Number of currently active transforms.')
dfl860eIPsecTotalTransforms = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecTotalTransforms.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecTotalTransforms.setDescription('Total number of transform records created.')
dfl860eIPsecOutOfTransforms = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecOutOfTransforms.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecOutOfTransforms.setDescription('Number of packets dropped due to no available transform object. (Not available in IKEv1 implementations)')
dfl860eIPsecTotalRekeys = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPsecTotalRekeys.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecTotalRekeys.setDescription('Total number of rekeys performed.')
dfl860eRules = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 3))
dfl860eRuleUseTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 3, 2), )
if mibBuilder.loadTexts: dfl860eRuleUseTable.setStatus('current')
if mibBuilder.loadTexts: dfl860eRuleUseTable.setDescription('A list of general rules usage statistics.')
dfl860eRuleUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 3, 2, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eRuleIndex"))
if mibBuilder.loadTexts: dfl860eRuleUseEntry.setStatus('current')
if mibBuilder.loadTexts: dfl860eRuleUseEntry.setDescription('The statistics over a rule usage.')
dfl860eRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eRuleIndex.setStatus('current')
if mibBuilder.loadTexts: dfl860eRuleIndex.setDescription('The rule usage index.')
dfl860eRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eRuleName.setStatus('current')
if mibBuilder.loadTexts: dfl860eRuleName.setDescription('The name of the rule.')
dfl860eRuleUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eRuleUse.setStatus('current')
if mibBuilder.loadTexts: dfl860eRuleUse.setDescription('The number of times o rule was used.')
dfl860eIPPools = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4))
dfl860eIPPoolsNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPPoolsNumber.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPPoolsNumber.setDescription('The number of ip pools')
dfl860eIPPoolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 2), )
if mibBuilder.loadTexts: dfl860eIPPoolTable.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPPoolTable.setDescription('A list of IP pools')
dfl860eIPPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 2, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eIPPoolIndex"))
if mibBuilder.loadTexts: dfl860eIPPoolEntry.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPPoolEntry.setDescription('The attributes of an ip pool')
dfl860eIPPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eIPPoolIndex.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPPoolIndex.setDescription('The ip pool index')
dfl860eIPPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPPoolName.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPPoolName.setDescription('The ip pool name')
dfl860eIPPoolPrepare = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPPoolPrepare.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPPoolPrepare.setDescription('Number of IP pool objects in prepare mode.')
dfl860eIPPoolFree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPPoolFree.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPPoolFree.setDescription('Number of available IPs in the pool.')
dfl860eIPPoolMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPPoolMisses.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPPoolMisses.setDescription('Mumber of missed IP pool negotiations for other reasons than lack of available IP numbers.')
dfl860eIPPoolClientFails = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPPoolClientFails.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPPoolClientFails.setDescription('Number of failed IP pool transactions.')
dfl860eIPPoolUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 4, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eIPPoolUsed.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPPoolUsed.setDescription('Number of IP numbers in use from the pool.')
dfl860eDHCPServer = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5))
dfl860eDHCPTotalRejected = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPTotalRejected.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPTotalRejected.setDescription('Total number of rejected packets (all rules).')
dfl860eDHCPRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2), )
if mibBuilder.loadTexts: dfl860eDHCPRuleTable.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRuleTable.setDescription('A list of all DHCP server rules usage statistics.')
dfl860eDHCPRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eDHCPRuleIndex"))
if mibBuilder.loadTexts: dfl860eDHCPRuleEntry.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRuleEntry.setDescription('The attributes of a DHCP server rule statistics.')
dfl860eDHCPRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eDHCPRuleIndex.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRuleIndex.setDescription('The DHCP server rule index')
dfl860eDHCPRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRuleName.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRuleName.setDescription('The DHCP server rule name.')
dfl860eDHCPRuleUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRuleUsage.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRuleUsage.setDescription('Number of used IPs in the pool.')
dfl860eDHCPRuleUsagePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRuleUsagePercent.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRuleUsagePercent.setDescription('The percentage of the used IPs in relation to the IP pool size.')
dfl860eDHCPActiveClients = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPActiveClients.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPActiveClients.setDescription('Number of currently active clients.')
dfl860eDHCPActiveClientsPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPActiveClientsPercent.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPActiveClientsPercent.setDescription('The number of currently active clients as a percentage of the pool size.')
dfl860eDHCPRejectedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRejectedRequests.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRejectedRequests.setDescription('Number of rejected requests matching the current rule.')
dfl860eDHCPTotalLeases = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 5, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPTotalLeases.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPTotalLeases.setDescription('Total number of leases in the pool.')
dfl860eUserAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6))
dfl860eUserAuthHTTPUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eUserAuthHTTPUsers.setStatus('current')
if mibBuilder.loadTexts: dfl860eUserAuthHTTPUsers.setDescription('Number of currently logged in HTTP users.')
dfl860eUserAuthXAUTHUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eUserAuthXAUTHUsers.setStatus('current')
if mibBuilder.loadTexts: dfl860eUserAuthXAUTHUsers.setDescription('Number of currently logged in XAUTH users.')
dfl860eUserAuthHTTPSUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eUserAuthHTTPSUsers.setStatus('current')
if mibBuilder.loadTexts: dfl860eUserAuthHTTPSUsers.setDescription('Number of currently logged in HTTPS users.')
dfl860eUserAuthPPPUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eUserAuthPPPUsers.setStatus('current')
if mibBuilder.loadTexts: dfl860eUserAuthPPPUsers.setDescription('Number of currently logged in PPP users.')
dfl860eUserAuthEAPUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eUserAuthEAPUsers.setStatus('current')
if mibBuilder.loadTexts: dfl860eUserAuthEAPUsers.setDescription('Number of currently logged in EAP users.')
dfl860eUserAuthRuleUseTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 6), )
if mibBuilder.loadTexts: dfl860eUserAuthRuleUseTable.setStatus('current')
if mibBuilder.loadTexts: dfl860eUserAuthRuleUseTable.setDescription('Table of user authentication rule usage.')
dfl860eUserAuthRuleUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 6, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eUserAuthRuleIndex"))
if mibBuilder.loadTexts: dfl860eUserAuthRuleUseEntry.setStatus('current')
if mibBuilder.loadTexts: dfl860eUserAuthRuleUseEntry.setDescription('The attributes of an authentication rule usage statistics.')
dfl860eUserAuthRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eUserAuthRuleIndex.setStatus('current')
if mibBuilder.loadTexts: dfl860eUserAuthRuleIndex.setDescription('The rule usage index.')
dfl860eUserAuthRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eUserAuthRuleName.setStatus('current')
if mibBuilder.loadTexts: dfl860eUserAuthRuleName.setDescription('The name of the rule.')
dfl860eUserAuthRuleUse = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 6, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eUserAuthRuleUse.setStatus('current')
if mibBuilder.loadTexts: dfl860eUserAuthRuleUse.setDescription('The number of times o rule was used.')
dfl860eLinkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7))
dfl860eLinkMonGrp = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eLinkMonGrp.setStatus('current')
if mibBuilder.loadTexts: dfl860eLinkMonGrp.setDescription('The number of groups of monitored links')
dfl860eLinkMonGrpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 2), )
if mibBuilder.loadTexts: dfl860eLinkMonGrpTable.setStatus('current')
if mibBuilder.loadTexts: dfl860eLinkMonGrpTable.setDescription('Table of link monitor groups.')
dfl860eLinkMonGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 2, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eLinkMonGrpIndex"))
if mibBuilder.loadTexts: dfl860eLinkMonGrpEntry.setStatus('current')
if mibBuilder.loadTexts: dfl860eLinkMonGrpEntry.setDescription('The attributes of a link monitor group')
dfl860eLinkMonGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eLinkMonGrpIndex.setStatus('current')
if mibBuilder.loadTexts: dfl860eLinkMonGrpIndex.setDescription('The index row in the table of link monitor groups.')
dfl860eLinkMonGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eLinkMonGrpName.setStatus('current')
if mibBuilder.loadTexts: dfl860eLinkMonGrpName.setDescription('The link monitor group name.')
dfl860eLinkMonGrpHostsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eLinkMonGrpHostsUp.setStatus('current')
if mibBuilder.loadTexts: dfl860eLinkMonGrpHostsUp.setDescription('The percentage of monitored hosts available.')
dfl860eLinkMonHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 3), )
if mibBuilder.loadTexts: dfl860eLinkMonHostTable.setStatus('current')
if mibBuilder.loadTexts: dfl860eLinkMonHostTable.setDescription('Table of link monitored hosts in a link monnitor group.')
dfl860eLinkMonHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 3, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eLinkMonGrpIndex"), (0, "DFL860e-MIB", "dfl860eLinkMonHostIndex"))
if mibBuilder.loadTexts: dfl860eLinkMonHostEntry.setStatus('current')
if mibBuilder.loadTexts: dfl860eLinkMonHostEntry.setDescription('The attributes of a monitored host.')
dfl860eLinkMonHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eLinkMonHostIndex.setStatus('current')
if mibBuilder.loadTexts: dfl860eLinkMonHostIndex.setDescription('The index an host in the table of link monitor hosts.')
dfl860eLinkMonHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eLinkMonHostId.setStatus('current')
if mibBuilder.loadTexts: dfl860eLinkMonHostId.setDescription('The monitored host identifier.')
dfl860eLinkMonHostShortTermLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eLinkMonHostShortTermLoss.setStatus('current')
if mibBuilder.loadTexts: dfl860eLinkMonHostShortTermLoss.setDescription('The percentage of short term losst packets.')
dfl860eLinkMonHostPacketsLost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 7, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eLinkMonHostPacketsLost.setStatus('current')
if mibBuilder.loadTexts: dfl860eLinkMonHostPacketsLost.setDescription('Total number of lost monitoring packets.')
dfl860ePipes = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8))
dfl860ePipeUsers = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeUsers.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipeUsers.setDescription('The current number of users, as defined by the grouping settings of each pipe, being tracked in the pipes system. Note that this value corresponds to the number of users active in each time slice of 1/20th of a second, and not to the number of users having open connections.')
dfl860ePipeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2), )
if mibBuilder.loadTexts: dfl860ePipeTable.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipeTable.setDescription('Table of pipes')
dfl860ePipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860ePipeIndex"))
if mibBuilder.loadTexts: dfl860ePipeEntry.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipeEntry.setDescription('A entry of the pipes table')
dfl860ePipeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860ePipeIndex.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipeIndex.setDescription('The pipe index')
dfl860ePipeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeName.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipeName.setDescription('The name of the pipe')
dfl860ePipeMinPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeMinPrec.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipeMinPrec.setDescription('The minimum of the range of pipe precedences.')
dfl860ePipeMaxPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeMaxPrec.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipeMaxPrec.setDescription('The maximum of the range of pipe precedences.')
dfl860ePipeDefPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeDefPrec.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipeDefPrec.setDescription('The precedence assigned to a packet for which has not one allready done by a Pipe Rule.')
dfl860ePipeNumPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeNumPrec.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipeNumPrec.setDescription('The number of pipe precedences')
dfl860ePipeNumUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeNumUsers.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipeNumUsers.setDescription('The current number of users, as defined by the grouping settings of each pipe, being tracked in the pipes system. This value corresponds to the number of users active in each time slice and not to the number of users having open connections.')
dfl860ePipeCurrentBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeCurrentBps.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipeCurrentBps.setDescription('The current throughput of a pipe, in bits per second, as a sum of the corresponding values for all precedences.')
dfl860ePipeCurrentPps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeCurrentPps.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipeCurrentPps.setDescription('The current throughput of a pipe, in packets per second, as a sum of the corresponding values for all precedences.')
dfl860ePipeDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipeDelayedPackets.setDescription('The number of times packets have been delayed as a result of a pipe, or pipe user having used up its allotted bandwidth. Note that one single packet may be delayed several times; if a pipe is really full, this count may exceed the number of packets actually passing through the pipe.')
dfl860ePipeDropedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipeDropedPackets.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipeDropedPackets.setDescription('The number of packets dropped by a pipe. Packets are dropped when CorePlus is running out of packet buffers. This occurs when excessive amounts of packets need to be queued for later delivery. The packet dropped is always the one that has been queued the longest time globally, which means that the connection suffering from packet loss will be the one most overloading the system.')
dfl860ePipePrecTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3), )
if mibBuilder.loadTexts: dfl860ePipePrecTable.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipePrecTable.setDescription('There is a one to many relation between a pipe and its precedences. The number of precedences is a instance attribute of each pipe. This table extends the pipes table in order to express the relation between a pipe and the respective precedences.')
dfl860ePipePrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860ePipeIndex"), (0, "DFL860e-MIB", "dfl860ePipePrecIndex"))
if mibBuilder.loadTexts: dfl860ePipePrecEntry.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipePrecEntry.setDescription('An entry of the table of pipe pecedences. These table entries are chracterized by been indexed by two values. The first index the same as the pipe index of the corresponding row in table of pipes and the second index is the index of the set of precedences of the corresponding pipe.')
dfl860ePipePrecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860ePipePrecIndex.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipePrecIndex.setDescription('Index of a precedence of a specific pipe. This is the second index of the entries of pipe precedence table described by object dfl860ePipePrecEntry.')
dfl860ePipePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipePrec.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipePrec.setDescription('The precedence value')
dfl860ePipePrecBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipePrecBps.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipePrecBps.setDescription('The current throughput of the pipe, in bits per second, with the corresponding precedence.')
dfl860ePipePrecTotalPps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipePrecTotalPps.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipePrecTotalPps.setDescription('The current throughput of the pipe precedence, in packets per second.')
dfl860ePipePrecReservedBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipePrecReservedBps.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipePrecReservedBps.setDescription('The current bandwidth allocated to the precedence.')
dfl860ePipePrecDynLimBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipePrecDynLimBps.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipePrecDynLimBps.setDescription('The current bandwidth limit limit applied the precedence.')
dfl860ePipePrecDynUsrLimBps = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipePrecDynUsrLimBps.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipePrecDynUsrLimBps.setDescription('The current precedence bandwidth limit per user of the pipe.')
dfl860ePipePrecDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipePrecDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipePrecDelayedPackets.setDescription('The number of times packets have been delayed as a result of a precedence, or pipe user having used up its allotted bandwidth. Note that one single packet may be delayed several times; if a pipe is really full, this count may exceed the number of packets of this precedence actually passing through the pipe.')
dfl860ePipePrecDropedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 8, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860ePipePrecDropedPackets.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipePrecDropedPackets.setDescription('The number of pipe dropped packets with the corresponding precedence.')
dfl860eALG = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9))
dfl860eAlgSessions = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eAlgSessions.setStatus('current')
if mibBuilder.loadTexts: dfl860eAlgSessions.setDescription('Total ALG sessions')
dfl860eAlgConnections = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eAlgConnections.setStatus('current')
if mibBuilder.loadTexts: dfl860eAlgConnections.setDescription('Total ALG connections')
dfl860eAlgTCPStreams = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eAlgTCPStreams.setStatus('current')
if mibBuilder.loadTexts: dfl860eAlgTCPStreams.setDescription('Total ALG TCP streams')
dfl860eHttpAlg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4))
dfl860eHttpAlgTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 1), )
if mibBuilder.loadTexts: dfl860eHttpAlgTable.setStatus('current')
if mibBuilder.loadTexts: dfl860eHttpAlgTable.setDescription('Table of HTTP ALG objects.')
dfl860eHttpAlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 1, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eHttpAlgIndex"))
if mibBuilder.loadTexts: dfl860eHttpAlgEntry.setStatus('current')
if mibBuilder.loadTexts: dfl860eHttpAlgEntry.setDescription('A row of the table of HTTP ALG objects.')
dfl860eHttpAlgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eHttpAlgIndex.setStatus('current')
if mibBuilder.loadTexts: dfl860eHttpAlgIndex.setDescription('The index of an entry of the Table of HTTP ALG objects.')
dfl860eHttpAlgName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHttpAlgName.setStatus('current')
if mibBuilder.loadTexts: dfl860eHttpAlgName.setDescription('The name of an HTTP ALG object.')
dfl860eHttpAlgTotalRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHttpAlgTotalRequested.setStatus('current')
if mibBuilder.loadTexts: dfl860eHttpAlgTotalRequested.setDescription('Total number of URL requests.')
dfl860eHttpAlgTotalAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHttpAlgTotalAllowed.setStatus('current')
if mibBuilder.loadTexts: dfl860eHttpAlgTotalAllowed.setDescription('Total number of allowed URL requests.')
dfl860eHttpAlgTotalBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHttpAlgTotalBlocked.setStatus('current')
if mibBuilder.loadTexts: dfl860eHttpAlgTotalBlocked.setDescription('Total number of blocked URL requests.')
dfl860eHttpAlgCntFltTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 2), )
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltTable.setStatus('current')
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltTable.setDescription('Table of HTTP ALG content filtering rules.')
dfl860eHttpAlgCntFltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 2, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eHttpAlgIndex"), (0, "DFL860e-MIB", "dfl860eHttpAlgCntFltIndex"))
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltEntry.setStatus('current')
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltEntry.setDescription('Entry of the table of HTTP ALG content filtering rules.')
dfl860eHttpAlgCntFltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltIndex.setStatus('current')
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltIndex.setDescription('The index of an entry of the Table of HTTP ALG content filtering objects.')
dfl860eHttpAlgCntFltName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltName.setStatus('current')
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltName.setDescription('The name of the a HTTP ALG content fitering.')
dfl860eHttpAlgCntFltRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltRequests.setStatus('current')
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltRequests.setDescription('Total number of URLs intercepted by a content filtering object.')
dfl860eHttpAlgCntFltAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltAllowed.setStatus('current')
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltAllowed.setDescription('Total number of URLs intercepted and allowed by a content filtering object.')
dfl860eHttpAlgCntFltBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltBlocked.setStatus('current')
if mibBuilder.loadTexts: dfl860eHttpAlgCntFltBlocked.setDescription('Total number of URLs intercepted and blocked by a content filtering object.')
dfl860eSmtpAlg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5))
dfl860eSmtpAlgTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 1), )
if mibBuilder.loadTexts: dfl860eSmtpAlgTable.setStatus('current')
if mibBuilder.loadTexts: dfl860eSmtpAlgTable.setDescription('Table of SMTP ALG objects.')
dfl860eSmtpAlgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 1, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eSmtpAlgIndex"))
if mibBuilder.loadTexts: dfl860eSmtpAlgEntry.setStatus('current')
if mibBuilder.loadTexts: dfl860eSmtpAlgEntry.setDescription('A row of the table of SMTP ALG objects.')
dfl860eSmtpAlgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eSmtpAlgIndex.setStatus('current')
if mibBuilder.loadTexts: dfl860eSmtpAlgIndex.setDescription('The index of an entry of the Table of SMTP ALG objects.')
dfl860eSmtpAlgName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSmtpAlgName.setStatus('current')
if mibBuilder.loadTexts: dfl860eSmtpAlgName.setDescription('The name of an SMTP ALG object.')
dfl860eSmtpAlgTotCheckedSes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSmtpAlgTotCheckedSes.setStatus('current')
if mibBuilder.loadTexts: dfl860eSmtpAlgTotCheckedSes.setDescription('Total sessions checked by the SMTP ALG of corresponding index.')
dfl860eSmtpAlgTotSpamSes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSmtpAlgTotSpamSes.setStatus('current')
if mibBuilder.loadTexts: dfl860eSmtpAlgTotSpamSes.setDescription('Total spam sessions detected by the SMTP ALG of corresponding index.')
dfl860eSmtpAlgTotDroppedSes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSmtpAlgTotDroppedSes.setStatus('current')
if mibBuilder.loadTexts: dfl860eSmtpAlgTotDroppedSes.setDescription('Total deroped sessions for the SMTP ALG of corresponding index.')
dfl860eSmtpAlgDnsBlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 2), )
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlTable.setStatus('current')
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlTable.setDescription('Table of SMTP ALG DNS balck list objects.')
dfl860eSmtpAlgDnsBlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 2, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eSmtpAlgIndex"), (0, "DFL860e-MIB", "dfl860eSmtpAlgDnsBlIndex"))
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlEntry.setStatus('current')
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlEntry.setDescription('A row of the table of SMTP ALG DNS black list objects.')
dfl860eSmtpAlgDnsBlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlIndex.setStatus('current')
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlIndex.setDescription('The index of an entry of the SMTP ALG DNS black list objects.')
dfl860eSmtpAlgDnsBlName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlName.setStatus('current')
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlName.setDescription('The SMTP DNS black list name.')
dfl860eSmtpAlgDnsBlChecked = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlChecked.setStatus('current')
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlChecked.setDescription('Total sessions checked againt SMTP ALG DNS black list of corresponding index')
dfl860eSmtpAlgDnsBlMatched = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlMatched.setStatus('current')
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlMatched.setDescription('Total sessions that matched SMTP ALG DNS black list of corresponding index')
dfl860eSmtpAlgDnsBlFailChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 9, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlFailChecks.setStatus('current')
if mibBuilder.loadTexts: dfl860eSmtpAlgDnsBlFailChecks.setDescription('Total failed checks for the SMTP ALG DNS black list of corresponding index')
dfl860eDHCPRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11))
dfl860eDHCPRelayCurClients = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRelayCurClients.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRelayCurClients.setDescription('Total DHCP relay active relayed clients.')
dfl860eDHCPRelayCurTrans = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRelayCurTrans.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRelayCurTrans.setDescription('Ongoing DHCP relay transactions.')
dfl860eDHCPRelayRejected = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRelayRejected.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRelayRejected.setDescription('Total DHCP relay packets rejected.')
dfl860eDHCPRelayRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 4), )
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleTable.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleTable.setDescription('Table of DHCP relay rules.')
dfl860eDHCPRelayRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 4, 1), ).setIndexNames((0, "DFL860e-MIB", "dfl860eDHCPRelayRuleIndex"))
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleEntry.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleEntry.setDescription('Entry of the table of DHCP relay rules')
dfl860eDHCPRelayRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleIndex.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleIndex.setDescription('Index of the table of DHCP relay rules.')
dfl860eDHCPRelayRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleName.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleName.setDescription('Display name of a DHCP relay rule')
dfl860eDHCPRelayRuleHits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleHits.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleHits.setDescription('Number of the times the DHCP relay rule with corresponding index was used.')
dfl860eDHCPRelayRuleCurClients = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleCurClients.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleCurClients.setDescription('Number of ctive relayed clients by the DHCP relay rule with corresponding index.')
dfl860eDHCPRelayRuleRejCliPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleRejCliPkts.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleRejCliPkts.setDescription('Number of client packets rejected by a rule.')
dfl860eDHCPRelayRuleRejSrvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 11, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleRejSrvPkts.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRelayRuleRejSrvPkts.setDescription('Number of DHCP server packets rejected by the DHCP relay rule with the corresponding index.')
dfl860eHA = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 12))
dfl860eHASyncSendQueueLength = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 12, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHASyncSendQueueLength.setStatus('current')
if mibBuilder.loadTexts: dfl860eHASyncSendQueueLength.setDescription('Size of the queue used for the High Availability sync interface.')
dfl860eHASyncSendQueueUsagePkt = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 12, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHASyncSendQueueUsagePkt.setStatus('current')
if mibBuilder.loadTexts: dfl860eHASyncSendQueueUsagePkt.setDescription('High Availability Sync interface queue usage in number of packets.')
dfl860eHASyncSendQueueUsageOct = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 12, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHASyncSendQueueUsageOct.setStatus('current')
if mibBuilder.loadTexts: dfl860eHASyncSendQueueUsageOct.setDescription('High Availability Sync interface queue usage in number of octects.')
dfl860eHASyncSentPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 12, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHASyncSentPackets.setStatus('current')
if mibBuilder.loadTexts: dfl860eHASyncSentPackets.setDescription('Number High Availability packets sent on Sync.')
dfl860eHASyncSendResentPackets = MibScalar((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 1, 2, 12, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfl860eHASyncSendResentPackets.setStatus('current')
if mibBuilder.loadTexts: dfl860eHASyncSendResentPackets.setDescription('Number of High Availability packets resent on Sync.')
dfl860eStatsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 2, 1))
dfl860eStatsRegGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1))
dfl860eSystemObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 1)).setObjects(("DFL860e-MIB", "dfl860eSysCpuLoad"), ("DFL860e-MIB", "dfl860eSysForwardedBits"), ("DFL860e-MIB", "dfl860eSysForwardedPackets"), ("DFL860e-MIB", "dfl860eSysBuffUse"), ("DFL860e-MIB", "dfl860eSysConns"), ("DFL860e-MIB", "dfl860eHWSensorName"), ("DFL860e-MIB", "dfl860eHWSensorValue"), ("DFL860e-MIB", "dfl860eHWSensorUnit"), ("DFL860e-MIB", "dfl860eSysMemUsage"), ("DFL860e-MIB", "dfl860eSysTimerUsage"), ("DFL860e-MIB", "dfl860eSysConnOPS"), ("DFL860e-MIB", "dfl860eSysConnCPS"), ("DFL860e-MIB", "dfl860eSysHCForwardedBits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eSystemObjectGroup = dfl860eSystemObjectGroup.setStatus('current')
if mibBuilder.loadTexts: dfl860eSystemObjectGroup.setDescription('System statistics Group')
dfl860eIPsecObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 2)).setObjects(("DFL860e-MIB", "dfl860eIPsecPhaseOneActive"), ("DFL860e-MIB", "dfl860eIPsecPhaseOneAggrModeDone"), ("DFL860e-MIB", "dfl860eIPsecQuickModeActive"), ("DFL860e-MIB", "dfl860eIPsecPhaseOneDone"), ("DFL860e-MIB", "dfl860eIPsecPhaseOneFailed"), ("DFL860e-MIB", "dfl860eIPsecPhaseOneRekeyed"), ("DFL860e-MIB", "dfl860eIPsecQuickModeDone"), ("DFL860e-MIB", "dfl860eIPsecQuickModeFailed"), ("DFL860e-MIB", "dfl860eIPsecInfoDone"), ("DFL860e-MIB", "dfl860eIPsecInfoFailed"), ("DFL860e-MIB", "dfl860eIPsecInOctetsComp"), ("DFL860e-MIB", "dfl860eIPsecInOctetsUncomp"), ("DFL860e-MIB", "dfl860eIPsecOutOctetsComp"), ("DFL860e-MIB", "dfl860eIPsecOutOctetsUncomp"), ("DFL860e-MIB", "dfl860eIPsecForwardedOctetsComp"), ("DFL860e-MIB", "dfl860eIPsecForwardedOctetsUcomp"), ("DFL860e-MIB", "dfl860eIPsecInPackets"), ("DFL860e-MIB", "dfl860eIPsecOutPackets"), ("DFL860e-MIB", "dfl860eIPsecForwardedPackets"), ("DFL860e-MIB", "dfl860eIPsecActiveTransforms"), ("DFL860e-MIB", "dfl860eIPsecTotalTransforms"), ("DFL860e-MIB", "dfl860eIPsecOutOfTransforms"), ("DFL860e-MIB", "dfl860eIPsecTotalRekeys"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eIPsecObjectGroup = dfl860eIPsecObjectGroup.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPsecObjectGroup.setDescription('IPsec Group')
dfl860eStateCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 3)).setObjects(("DFL860e-MIB", "dfl860eSysPscTcpSyn"), ("DFL860e-MIB", "dfl860eSysPscTcpOpen"), ("DFL860e-MIB", "dfl860eSysPscTcpFin"), ("DFL860e-MIB", "dfl860eSysPscUdp"), ("DFL860e-MIB", "dfl860eSysPscIcmp"), ("DFL860e-MIB", "dfl860eSysPscOther"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eStateCountersGroup = dfl860eStateCountersGroup.setStatus('current')
if mibBuilder.loadTexts: dfl860eStateCountersGroup.setDescription('Per state counters')
dfl860eIPPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 4)).setObjects(("DFL860e-MIB", "dfl860eIPPoolsNumber"), ("DFL860e-MIB", "dfl860eIPPoolName"), ("DFL860e-MIB", "dfl860eIPPoolPrepare"), ("DFL860e-MIB", "dfl860eIPPoolFree"), ("DFL860e-MIB", "dfl860eIPPoolMisses"), ("DFL860e-MIB", "dfl860eIPPoolClientFails"), ("DFL860e-MIB", "dfl860eIPPoolUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eIPPoolGroup = dfl860eIPPoolGroup.setStatus('current')
if mibBuilder.loadTexts: dfl860eIPPoolGroup.setDescription('IP pool entry objects group')
dfl860eDHCPServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 5)).setObjects(("DFL860e-MIB", "dfl860eDHCPTotalRejected"), ("DFL860e-MIB", "dfl860eDHCPRuleName"), ("DFL860e-MIB", "dfl860eDHCPRuleUsage"), ("DFL860e-MIB", "dfl860eDHCPRuleUsagePercent"), ("DFL860e-MIB", "dfl860eDHCPActiveClients"), ("DFL860e-MIB", "dfl860eDHCPActiveClientsPercent"), ("DFL860e-MIB", "dfl860eDHCPRejectedRequests"), ("DFL860e-MIB", "dfl860eDHCPTotalLeases"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eDHCPServerGroup = dfl860eDHCPServerGroup.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPServerGroup.setDescription('DHCP server rules objects.')
dfl860eRuleUseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 6)).setObjects(("DFL860e-MIB", "dfl860eRuleName"), ("DFL860e-MIB", "dfl860eRuleUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eRuleUseGroup = dfl860eRuleUseGroup.setStatus('current')
if mibBuilder.loadTexts: dfl860eRuleUseGroup.setDescription('Rule use objects.')
dfl860eUserAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 7)).setObjects(("DFL860e-MIB", "dfl860eUserAuthHTTPUsers"), ("DFL860e-MIB", "dfl860eUserAuthXAUTHUsers"), ("DFL860e-MIB", "dfl860eUserAuthHTTPSUsers"), ("DFL860e-MIB", "dfl860eUserAuthPPPUsers"), ("DFL860e-MIB", "dfl860eUserAuthEAPUsers"), ("DFL860e-MIB", "dfl860eUserAuthRuleName"), ("DFL860e-MIB", "dfl860eUserAuthRuleUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eUserAuthGroup = dfl860eUserAuthGroup.setStatus('current')
if mibBuilder.loadTexts: dfl860eUserAuthGroup.setDescription('User auth objects.')
dfl860eIfStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 8)).setObjects(("DFL860e-MIB", "dfl860eIfName"), ("DFL860e-MIB", "dfl860eIfFragsIn"), ("DFL860e-MIB", "dfl860eIfFragReassOk"), ("DFL860e-MIB", "dfl860eIfFragReassFail"), ("DFL860e-MIB", "dfl860eIfPktsInCnt"), ("DFL860e-MIB", "dfl860eIfPktsOutCnt"), ("DFL860e-MIB", "dfl860eIfBitsInCnt"), ("DFL860e-MIB", "dfl860eIfBitsOutCnt"), ("DFL860e-MIB", "dfl860eIfPktsTotCnt"), ("DFL860e-MIB", "dfl860eIfBitsTotCnt"), ("DFL860e-MIB", "dfl860eIfHCPktsInCnt"), ("DFL860e-MIB", "dfl860eIfHCPktsOutCnt"), ("DFL860e-MIB", "dfl860eIfHCBitsInCnt"), ("DFL860e-MIB", "dfl860eIfHCBitsOutCnt"), ("DFL860e-MIB", "dfl860eIfHCPktsTotCnt"), ("DFL860e-MIB", "dfl860eIfHCBitsTotCnt"), ("DFL860e-MIB", "dfl860eIfRxRingFifoErrors"), ("DFL860e-MIB", "dfl860eIfRxDespools"), ("DFL860e-MIB", "dfl860eIfRxAvgUse"), ("DFL860e-MIB", "dfl860eIfRxRingSaturation"), ("DFL860e-MIB", "dfl860eRxRingFlooded"), ("DFL860e-MIB", "dfl860eIfTxDespools"), ("DFL860e-MIB", "dfl860eIfTxAvgUse"), ("DFL860e-MIB", "dfl860eIfTxRingSaturation"), ("DFL860e-MIB", "dfl860eRxTingFlooded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eIfStatsGroup = dfl860eIfStatsGroup.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfStatsGroup.setDescription('DFL-860e interface statistics group.')
dfl860eLinkMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 9)).setObjects(("DFL860e-MIB", "dfl860eLinkMonGrp"), ("DFL860e-MIB", "dfl860eLinkMonGrpName"), ("DFL860e-MIB", "dfl860eLinkMonGrpHostsUp"), ("DFL860e-MIB", "dfl860eLinkMonHostId"), ("DFL860e-MIB", "dfl860eLinkMonHostShortTermLoss"), ("DFL860e-MIB", "dfl860eLinkMonHostPacketsLost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eLinkMonitorGroup = dfl860eLinkMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: dfl860eLinkMonitorGroup.setDescription('DFL-860e link monitor statistics group')
dfl860ePipesObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 10)).setObjects(("DFL860e-MIB", "dfl860ePipeUsers"), ("DFL860e-MIB", "dfl860ePipeName"), ("DFL860e-MIB", "dfl860ePipeMinPrec"), ("DFL860e-MIB", "dfl860ePipeMaxPrec"), ("DFL860e-MIB", "dfl860ePipeDefPrec"), ("DFL860e-MIB", "dfl860ePipeNumPrec"), ("DFL860e-MIB", "dfl860ePipeNumUsers"), ("DFL860e-MIB", "dfl860ePipeCurrentBps"), ("DFL860e-MIB", "dfl860ePipeCurrentPps"), ("DFL860e-MIB", "dfl860ePipeDelayedPackets"), ("DFL860e-MIB", "dfl860ePipeDropedPackets"), ("DFL860e-MIB", "dfl860ePipePrec"), ("DFL860e-MIB", "dfl860ePipePrecBps"), ("DFL860e-MIB", "dfl860ePipePrecTotalPps"), ("DFL860e-MIB", "dfl860ePipePrecReservedBps"), ("DFL860e-MIB", "dfl860ePipePrecDynLimBps"), ("DFL860e-MIB", "dfl860ePipePrecDynUsrLimBps"), ("DFL860e-MIB", "dfl860ePipePrecDelayedPackets"), ("DFL860e-MIB", "dfl860ePipePrecDropedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860ePipesObjectGroup = dfl860ePipesObjectGroup.setStatus('current')
if mibBuilder.loadTexts: dfl860ePipesObjectGroup.setDescription('DFL-860e pipes statistics group')
dfl860eDHCPRelayObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 12)).setObjects(("DFL860e-MIB", "dfl860eDHCPRelayCurClients"), ("DFL860e-MIB", "dfl860eDHCPRelayCurTrans"), ("DFL860e-MIB", "dfl860eDHCPRelayRejected"), ("DFL860e-MIB", "dfl860eDHCPRelayRuleName"), ("DFL860e-MIB", "dfl860eDHCPRelayRuleHits"), ("DFL860e-MIB", "dfl860eDHCPRelayRuleCurClients"), ("DFL860e-MIB", "dfl860eDHCPRelayRuleRejCliPkts"), ("DFL860e-MIB", "dfl860eDHCPRelayRuleRejSrvPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eDHCPRelayObjectGroup = dfl860eDHCPRelayObjectGroup.setStatus('current')
if mibBuilder.loadTexts: dfl860eDHCPRelayObjectGroup.setDescription('DFL-860e DHCP relay statistics group')
dfl860eAlgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 13)).setObjects(("DFL860e-MIB", "dfl860eAlgSessions"), ("DFL860e-MIB", "dfl860eAlgConnections"), ("DFL860e-MIB", "dfl860eAlgTCPStreams"), ("DFL860e-MIB", "dfl860eHttpAlgName"), ("DFL860e-MIB", "dfl860eHttpAlgTotalRequested"), ("DFL860e-MIB", "dfl860eHttpAlgTotalAllowed"), ("DFL860e-MIB", "dfl860eHttpAlgTotalBlocked"), ("DFL860e-MIB", "dfl860eHttpAlgCntFltName"), ("DFL860e-MIB", "dfl860eHttpAlgCntFltRequests"), ("DFL860e-MIB", "dfl860eHttpAlgCntFltAllowed"), ("DFL860e-MIB", "dfl860eHttpAlgCntFltBlocked"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eAlgGroup = dfl860eAlgGroup.setStatus('current')
if mibBuilder.loadTexts: dfl860eAlgGroup.setDescription('DFL-860e HTTP ALG statistics group')
dfl860eHAGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 14)).setObjects(("DFL860e-MIB", "dfl860eHASyncSendQueueLength"), ("DFL860e-MIB", "dfl860eHASyncSendQueueUsagePkt"), ("DFL860e-MIB", "dfl860eHASyncSendQueueUsageOct"), ("DFL860e-MIB", "dfl860eHASyncSentPackets"), ("DFL860e-MIB", "dfl860eHASyncSendResentPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eHAGroup = dfl860eHAGroup.setStatus('current')
if mibBuilder.loadTexts: dfl860eHAGroup.setDescription('DFL-860e HA statistics group')
dfl860eIfVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 15)).setObjects(("DFL860e-MIB", "dfl860eIfVlanUntaggedInPkts"), ("DFL860e-MIB", "dfl860eIfVlanUntaggedOutPkts"), ("DFL860e-MIB", "dfl860eIfVlanUntaggedTotPkts"), ("DFL860e-MIB", "dfl860eIfVlanUntaggedInOctets"), ("DFL860e-MIB", "dfl860eIfVlanUntaggedOutOctets"), ("DFL860e-MIB", "dfl860eIfVlanUntaggedTotOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eIfVlanGroup = dfl860eIfVlanGroup.setStatus('current')
if mibBuilder.loadTexts: dfl860eIfVlanGroup.setDescription('DFL-860e VLAN statistics group')
dfl860eSmtpAlgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 16)).setObjects(("DFL860e-MIB", "dfl860eSmtpAlgName"), ("DFL860e-MIB", "dfl860eSmtpAlgTotCheckedSes"), ("DFL860e-MIB", "dfl860eSmtpAlgTotSpamSes"), ("DFL860e-MIB", "dfl860eSmtpAlgTotDroppedSes"), ("DFL860e-MIB", "dfl860eSmtpAlgDnsBlName"), ("DFL860e-MIB", "dfl860eSmtpAlgDnsBlChecked"), ("DFL860e-MIB", "dfl860eSmtpAlgDnsBlMatched"), ("DFL860e-MIB", "dfl860eSmtpAlgDnsBlFailChecks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eSmtpAlgGroup = dfl860eSmtpAlgGroup.setStatus('current')
if mibBuilder.loadTexts: dfl860eSmtpAlgGroup.setDescription('Clavister SMTP ALG objects group')
dfl860eSysTCPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 3, 1, 17)).setObjects(("DFL860e-MIB", "dfl860eSysTCPRecvSmall"), ("DFL860e-MIB", "dfl860eSysTCPRecvLarge"), ("DFL860e-MIB", "dfl860eSysTCPSendSmall"), ("DFL860e-MIB", "dfl860eSysTCPSendLarge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eSysTCPGroup = dfl860eSysTCPGroup.setStatus('current')
if mibBuilder.loadTexts: dfl860eSysTCPGroup.setDescription('DFL-860e TCP buffer usage group')
dfl860eStatsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 171, 20, 2, 7, 2, 2, 1, 1)).setObjects(("DFL860e-MIB", "dfl860eSystemObjectGroup"), ("DFL860e-MIB", "dfl860eIPsecObjectGroup"), ("DFL860e-MIB", "dfl860eStateCountersGroup"), ("DFL860e-MIB", "dfl860eIPPoolGroup"), ("DFL860e-MIB", "dfl860eDHCPServerGroup"), ("DFL860e-MIB", "dfl860eRuleUseGroup"), ("DFL860e-MIB", "dfl860eUserAuthGroup"), ("DFL860e-MIB", "dfl860eIfStatsGroup"), ("DFL860e-MIB", "dfl860eLinkMonitorGroup"), ("DFL860e-MIB", "dfl860ePipesObjectGroup"), ("DFL860e-MIB", "dfl860eDHCPRelayObjectGroup"), ("DFL860e-MIB", "dfl860eAlgGroup"), ("DFL860e-MIB", "dfl860eHAGroup"), ("DFL860e-MIB", "dfl860eIfVlanGroup"), ("DFL860e-MIB", "dfl860eSmtpAlgGroup"), ("DFL860e-MIB", "dfl860eSysTCPGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dfl860eStatsCompliance = dfl860eStatsCompliance.setStatus('current')
if mibBuilder.loadTexts: dfl860eStatsCompliance.setDescription('Module Compliance')
mibBuilder.exportSymbols("DFL860e-MIB", dfl860eIPsecPhaseOneActive=dfl860eIPsecPhaseOneActive, dfl860eSmtpAlgTotDroppedSes=dfl860eSmtpAlgTotDroppedSes, dfl860eRuleIndex=dfl860eRuleIndex, dfl860eRuleUseTable=dfl860eRuleUseTable, dfl860eIfName=dfl860eIfName, dfl860eIfHCBitsTotCnt=dfl860eIfHCBitsTotCnt, dfl860eSysConnCPS=dfl860eSysConnCPS, dfl860eIPsecGlobal=dfl860eIPsecGlobal, dfl860eOS=dfl860eOS, dfl860ePipePrecTable=dfl860ePipePrecTable, dfl860eDHCPRelayObjectGroup=dfl860eDHCPRelayObjectGroup, dfl860eIfRxDespools=dfl860eIfRxDespools, dfl860eSysPscUdp=dfl860eSysPscUdp, dfl860ePipePrecDropedPackets=dfl860ePipePrecDropedPackets, dfl860eHWSensorUnit=dfl860eHWSensorUnit, dfl860eUserAuthHTTPSUsers=dfl860eUserAuthHTTPSUsers, dfl860eIfFragsIn=dfl860eIfFragsIn, dfl860eSmtpAlgDnsBlFailChecks=dfl860eSmtpAlgDnsBlFailChecks, dfl860eSmtpAlgGroup=dfl860eSmtpAlgGroup, dfl860e_MIB=dfl860e_MIB, dfl860eIPsecOutOctetsComp=dfl860eIPsecOutOctetsComp, dfl860eSmtpAlgDnsBlEntry=dfl860eSmtpAlgDnsBlEntry, dfl860eSmtpAlgIndex=dfl860eSmtpAlgIndex, dfl860eIfVlanStatsEntry=dfl860eIfVlanStatsEntry, dfl860eUserAuthXAUTHUsers=dfl860eUserAuthXAUTHUsers, dfl860eDHCPRelayCurTrans=dfl860eDHCPRelayCurTrans, dfl860eIPsecTotalTransforms=dfl860eIPsecTotalTransforms, dfl860eSysPscTcpFin=dfl860eSysPscTcpFin, dfl860eIPPoolClientFails=dfl860eIPPoolClientFails, dfl860eHttpAlgCntFltIndex=dfl860eHttpAlgCntFltIndex, dfl860eLinkMonHostPacketsLost=dfl860eLinkMonHostPacketsLost, dfl860ePipePrecDynLimBps=dfl860ePipePrecDynLimBps, dfl860eDHCPRuleName=dfl860eDHCPRuleName, dfl860eIfVlanStatsTable=dfl860eIfVlanStatsTable, dfl860eSmtpAlgDnsBlIndex=dfl860eSmtpAlgDnsBlIndex, dfl860eIPsecOutOctetsUncomp=dfl860eIPsecOutOctetsUncomp, dfl860eOSStats=dfl860eOSStats, dfl860eIPPoolIndex=dfl860eIPPoolIndex, dfl860eIPsecTotalRekeys=dfl860eIPsecTotalRekeys, dfl860eHWSensorEntry=dfl860eHWSensorEntry, dfl860eIPsecPhaseOneRekeyed=dfl860eIPsecPhaseOneRekeyed, dfl860eMibConfs=dfl860eMibConfs, dfl860eHttpAlgCntFltEntry=dfl860eHttpAlgCntFltEntry, dfl860eSmtpAlgDnsBlMatched=dfl860eSmtpAlgDnsBlMatched, dfl860eRuleUse=dfl860eRuleUse, dfl860eHttpAlgCntFltAllowed=dfl860eHttpAlgCntFltAllowed, dfl860eSysPscOther=dfl860eSysPscOther, dfl860eDHCPRelayRuleHits=dfl860eDHCPRelayRuleHits, dfl860eIfTxRingIndex=dfl860eIfTxRingIndex, dfl860eSmtpAlgDnsBlName=dfl860eSmtpAlgDnsBlName, dlink=dlink, dfl860ePipeDropedPackets=dfl860ePipeDropedPackets, dfl860eRxTingFlooded=dfl860eRxTingFlooded, dfl860ePipePrec=dfl860ePipePrec, dfl860eHASyncSendQueueUsageOct=dfl860eHASyncSendQueueUsageOct, dfl860eLinkMonGrpEntry=dfl860eLinkMonGrpEntry, dfl860eSysPscIcmp=dfl860eSysPscIcmp, dfl860eIfVlanIndex=dfl860eIfVlanIndex, dfl860eUserAuthEAPUsers=dfl860eUserAuthEAPUsers, dfl860eSysForwardedPackets=dfl860eSysForwardedPackets, dfl860eHttpAlgTotalBlocked=dfl860eHttpAlgTotalBlocked, dfl860eIPPoolFree=dfl860eIPPoolFree, dfl860eDHCPRejectedRequests=dfl860eDHCPRejectedRequests, dfl860eIPsecInOctetsComp=dfl860eIPsecInOctetsComp, dfl860ePipeEntry=dfl860ePipeEntry, dfl860eDHCPRuleIndex=dfl860eDHCPRuleIndex, dfl860eSmtpAlgTotSpamSes=dfl860eSmtpAlgTotSpamSes, dfl860eIfTxDespools=dfl860eIfTxDespools, dfl860eIPsecQuickModeActive=dfl860eIPsecQuickModeActive, dfl860eDHCPRelayRuleRejCliPkts=dfl860eDHCPRelayRuleRejCliPkts, dfl860eVPN=dfl860eVPN, dfl860eIfVlanUntaggedOutOctets=dfl860eIfVlanUntaggedOutOctets, dfl860eDHCPRelayRejected=dfl860eDHCPRelayRejected, dfl860eIPPoolMisses=dfl860eIPPoolMisses, dfl860eHttpAlg=dfl860eHttpAlg, dfl860ePipesObjectGroup=dfl860ePipesObjectGroup, dfl860eIfTxRingTable=dfl860eIfTxRingTable, dfl860eRuleName=dfl860eRuleName, dfl860eDHCPRuleUsagePercent=dfl860eDHCPRuleUsagePercent, dfl860eRules=dfl860eRules, dfl860eLinkMonGrpName=dfl860eLinkMonGrpName, netdefendMgmt=netdefendMgmt, dfl860eHttpAlgCntFltRequests=dfl860eHttpAlgCntFltRequests, dfl860eHAGroup=dfl860eHAGroup, dfl860eIfRxRingFifoErrors=dfl860eIfRxRingFifoErrors, dfl860eHWSensorIndex=dfl860eHWSensorIndex, dfl860eIPPools=dfl860eIPPools, dfl860ePipePrecDelayedPackets=dfl860ePipePrecDelayedPackets, dfl860eSmtpAlgEntry=dfl860eSmtpAlgEntry, dfl860eIPPoolPrepare=dfl860eIPPoolPrepare, dfl860eSysPscTcpOpen=dfl860eSysPscTcpOpen, dfl860eIfFragReassOk=dfl860eIfFragReassOk, dfl860eSysTCPRecvSmall=dfl860eSysTCPRecvSmall, dfl860eLinkMonHostTable=dfl860eLinkMonHostTable, dfl860eStateCountersGroup=dfl860eStateCountersGroup, dfl860eIfRxRingIndex=dfl860eIfRxRingIndex, dfl860eMibObjectGroups=dfl860eMibObjectGroups, dfl860eUserAuthRuleUseEntry=dfl860eUserAuthRuleUseEntry, dfl860eLinkMonHostEntry=dfl860eLinkMonHostEntry, dfl860eSysConnOPS=dfl860eSysConnOPS, dfl860eUserAuthRuleUse=dfl860eUserAuthRuleUse, dfl860ePipeName=dfl860ePipeName, dfl860eHttpAlgTotalRequested=dfl860eHttpAlgTotalRequested, dfl860eIfTxRingSaturation=dfl860eIfTxRingSaturation, dfl860ereg=dfl860ereg, dfl860eIPsecInOctetsUncomp=dfl860eIPsecInOctetsUncomp, dfl860eIPPoolUsed=dfl860eIPPoolUsed, dfl860eDHCPRuleUsage=dfl860eDHCPRuleUsage, dfl860eDHCPActiveClients=dfl860eDHCPActiveClients, dfl860eIfRxRingSaturation=dfl860eIfRxRingSaturation, dfl860ePipePrecBps=dfl860ePipePrecBps, dfl860ePipePrecReservedBps=dfl860ePipePrecReservedBps, dfl860eHttpAlgTotalAllowed=dfl860eHttpAlgTotalAllowed, dfl860eHttpAlgCntFltName=dfl860eHttpAlgCntFltName, dfl860eSystemObjectGroup=dfl860eSystemObjectGroup, dfl860eUserAuthRuleUseTable=dfl860eUserAuthRuleUseTable, dfl860eHWSensorValue=dfl860eHWSensorValue, dfl860eIPsecActiveTransforms=dfl860eIPsecActiveTransforms, dfl860eIPsecForwardedOctetsComp=dfl860eIPsecForwardedOctetsComp, dfl860eAlgConnections=dfl860eAlgConnections, dfl860eIPPoolTable=dfl860eIPPoolTable, dfl860eIfHCPktsInCnt=dfl860eIfHCPktsInCnt, dfl860ePipePrecTotalPps=dfl860ePipePrecTotalPps, dfl860eIPsecForwardedPackets=dfl860eIPsecForwardedPackets, dfl860eHttpAlgIndex=dfl860eHttpAlgIndex, dfl860ePipePrecIndex=dfl860ePipePrecIndex, dfl860eIfRxRingEntry=dfl860eIfRxRingEntry, dfl860eDHCPServerGroup=dfl860eDHCPServerGroup, dfl860ePipeCurrentPps=dfl860ePipeCurrentPps, dfl860eSysTCPGroup=dfl860eSysTCPGroup, dfl860eDHCPRelayRuleCurClients=dfl860eDHCPRelayRuleCurClients, dfl860eDHCPRelayCurClients=dfl860eDHCPRelayCurClients, dfl860eIPsecForwardedOctetsUcomp=dfl860eIPsecForwardedOctetsUcomp, dfl860ePipeUsers=dfl860ePipeUsers, dfl860eHASyncSendResentPackets=dfl860eHASyncSendResentPackets, dfl860eALG=dfl860eALG, dfl860eUserAuthRuleIndex=dfl860eUserAuthRuleIndex, dfl860eHttpAlgCntFltBlocked=dfl860eHttpAlgCntFltBlocked, dfl860eIfFragReassFail=dfl860eIfFragReassFail, dfl860ePipeCurrentBps=dfl860ePipeCurrentBps, dfl860eSmtpAlgDnsBlTable=dfl860eSmtpAlgDnsBlTable, dfl860eDHCPActiveClientsPercent=dfl860eDHCPActiveClientsPercent, dfl860eIPsecObjectGroup=dfl860eIPsecObjectGroup, dfl860eIfHCBitsOutCnt=dfl860eIfHCBitsOutCnt, dfl860eIPsecPhaseOneAggrModeDone=dfl860eIPsecPhaseOneAggrModeDone, dfl860ePipeDefPrec=dfl860ePipeDefPrec, dfl860eIPsecInfoDone=dfl860eIPsecInfoDone, dfl860eUserAuthPPPUsers=dfl860eUserAuthPPPUsers, dfl860ePipes=dfl860ePipes, dfl860eIPsecQuickModeDone=dfl860eIPsecQuickModeDone, dfl860eHA=dfl860eHA, dfl860eIfHCPktsOutCnt=dfl860eIfHCPktsOutCnt, dfl860eUserAuthGroup=dfl860eUserAuthGroup, dfl860eIPsecOutPackets=dfl860eIPsecOutPackets, dfl860eRuleUseEntry=dfl860eRuleUseEntry, dfl860ePipePrecEntry=dfl860ePipePrecEntry, dfl860eStatsRegGroups=dfl860eStatsRegGroups, dfl860eSysTCPSendSmall=dfl860eSysTCPSendSmall, dfl860eIPsecPhaseOneDone=dfl860eIPsecPhaseOneDone, dfl860ePipeMaxPrec=dfl860ePipeMaxPrec, dfl860eDHCPTotalRejected=dfl860eDHCPTotalRejected, dfl860eLinkMonHostIndex=dfl860eLinkMonHostIndex, dfl860eSysPerStateCounters=dfl860eSysPerStateCounters, dfl860eDHCPRuleTable=dfl860eDHCPRuleTable, dfl860ePipeNumUsers=dfl860ePipeNumUsers, dfl860ePipeMinPrec=dfl860ePipeMinPrec, dfl860eIPsecOutOfTransforms=dfl860eIPsecOutOfTransforms, dfl860eAlgSessions=dfl860eAlgSessions, dfl860eLinkMonGrpHostsUp=dfl860eLinkMonGrpHostsUp, dfl860eHASyncSendQueueUsagePkt=dfl860eHASyncSendQueueUsagePkt, dfl860eAlgGroup=dfl860eAlgGroup, dfl860eSysTCPSendLarge=dfl860eSysTCPSendLarge, dfl860eIPPoolEntry=dfl860eIPPoolEntry, dfl860eSmtpAlgName=dfl860eSmtpAlgName, dfl860eHttpAlgEntry=dfl860eHttpAlgEntry, dfl860eSmtpAlgTotCheckedSes=dfl860eSmtpAlgTotCheckedSes, dfl860eIfVlanGroup=dfl860eIfVlanGroup, dfl860eDHCPRelayRuleTable=dfl860eDHCPRelayRuleTable, dfl860eIPsecInPackets=dfl860eIPsecInPackets, dfl860eSysTimerUsage=dfl860eSysTimerUsage, dfl860eDHCPRelayRuleRejSrvPkts=dfl860eDHCPRelayRuleRejSrvPkts, dfl860eStatsConformance=dfl860eStatsConformance, dfl860eDHCPRuleEntry=dfl860eDHCPRuleEntry, dfl860eStatsCompliance=dfl860eStatsCompliance, dfl860ePipeDelayedPackets=dfl860ePipeDelayedPackets, dfl860eAlgTCPStreams=dfl860eAlgTCPStreams, dfl860eLinkMonHostShortTermLoss=dfl860eLinkMonHostShortTermLoss, dfl860eLinkMonGrpIndex=dfl860eLinkMonGrpIndex, dfl860eSysForwardedBits=dfl860eSysForwardedBits, dfl860eRuleUseGroup=dfl860eRuleUseGroup, dfl860eSysCpuLoad=dfl860eSysCpuLoad, dfl860eIPsec=dfl860eIPsec, dfl860eIfTxRingEntry=dfl860eIfTxRingEntry, dfl860eSysTCPRecvLarge=dfl860eSysTCPRecvLarge, dfl860eIfBitsOutCnt=dfl860eIfBitsOutCnt, dfl860eDHCPRelayRuleEntry=dfl860eDHCPRelayRuleEntry, dfl860eDHCPRelayRuleIndex=dfl860eDHCPRelayRuleIndex, dfl860eDHCPServer=dfl860eDHCPServer, dfl860eLinkMonHostId=dfl860eLinkMonHostId, dfl860ePipeIndex=dfl860ePipeIndex, dfl860eIfStatsEntry=dfl860eIfStatsEntry, dfl860eSystem=dfl860eSystem, dfl860eIfVlanUntaggedTotPkts=dfl860eIfVlanUntaggedTotPkts, dfl860eSmtpAlg=dfl860eSmtpAlg, dfl860eRxRingFlooded=dfl860eRxRingFlooded, dfl860eHWSensorTable=dfl860eHWSensorTable, dfl860eSysMemUsage=dfl860eSysMemUsage, PYSNMP_MODULE_ID=dfl860e_MIB, dfl860eIfPktsInCnt=dfl860eIfPktsInCnt, dfl860eDHCPRelayRuleName=dfl860eDHCPRelayRuleName, dfl860eIfRxRingTable=dfl860eIfRxRingTable, dfl860eSysTCPUsage=dfl860eSysTCPUsage, dfl860eIPPoolsNumber=dfl860eIPPoolsNumber, dfl860eIfStatsIndex=dfl860eIfStatsIndex, dfl860eUserAuthHTTPUsers=dfl860eUserAuthHTTPUsers, dfl860ePipePrecDynUsrLimBps=dfl860ePipePrecDynUsrLimBps, dfl860eLinkMonitorGroup=dfl860eLinkMonitorGroup, dfl860eIfStatsGroup=dfl860eIfStatsGroup, dfl860eIfBitsInCnt=dfl860eIfBitsInCnt, dfl860eLinkMonitor=dfl860eLinkMonitor, dfl860eSysConns=dfl860eSysConns, dfl860eIfPktsTotCnt=dfl860eIfPktsTotCnt, dfl860eIPsecInfoFailed=dfl860eIPsecInfoFailed, dfl860eIfVlanUntaggedInPkts=dfl860eIfVlanUntaggedInPkts, dfl860eIfVlanUntaggedOutPkts=dfl860eIfVlanUntaggedOutPkts, utmFirewall=utmFirewall, dfl860eIfVlanUntaggedTotOctets=dfl860eIfVlanUntaggedTotOctets, dfl860eUserAuth=dfl860eUserAuth, dfl860eSmtpAlgTable=dfl860eSmtpAlgTable, dfl860eHttpAlgCntFltTable=dfl860eHttpAlgCntFltTable, dfl860eIfVlanUntaggedInOctets=dfl860eIfVlanUntaggedInOctets, dfl860eIfHCBitsInCnt=dfl860eIfHCBitsInCnt, dfl860eHttpAlgName=dfl860eHttpAlgName, dfl860eLinkMonGrp=dfl860eLinkMonGrp, dfl860eSysPscTcpSyn=dfl860eSysPscTcpSyn, dfl860eDHCPTotalLeases=dfl860eDHCPTotalLeases, dfl860eLinkMonGrpTable=dfl860eLinkMonGrpTable, dfl860eIPPoolGroup=dfl860eIPPoolGroup, dfl860ePipeNumPrec=dfl860ePipeNumPrec, dfl860eIfRxAvgUse=dfl860eIfRxAvgUse, dfl860eSmtpAlgDnsBlChecked=dfl860eSmtpAlgDnsBlChecked, dfl860eHASyncSendQueueLength=dfl860eHASyncSendQueueLength, dfl860eIfStatsTable=dfl860eIfStatsTable, dfl860e=dfl860e, dfl860eUserAuthRuleName=dfl860eUserAuthRuleName, dfl860eHttpAlgTable=dfl860eHttpAlgTable, dfl860eHASyncSentPackets=dfl860eHASyncSentPackets, dfl860ePipeTable=dfl860ePipeTable, dfl860eSysBuffUse=dfl860eSysBuffUse, dfl860eIPsecQuickModeFailed=dfl860eIPsecQuickModeFailed, dfl860eHWSensorName=dfl860eHWSensorName, dfl860eIfHCPktsTotCnt=dfl860eIfHCPktsTotCnt, dfl860eSysHCForwardedBits=dfl860eSysHCForwardedBits, dfl860eDHCPRelay=dfl860eDHCPRelay)
mibBuilder.exportSymbols("DFL860e-MIB", dfl860eIPPoolName=dfl860eIPPoolName, dfl860eIPsecPhaseOneFailed=dfl860eIPsecPhaseOneFailed, dfl860eIfPktsOutCnt=dfl860eIfPktsOutCnt, dfl860eIfTxAvgUse=dfl860eIfTxAvgUse, dfl860eMibModules=dfl860eMibModules, dfl860eIfBitsTotCnt=dfl860eIfBitsTotCnt)
