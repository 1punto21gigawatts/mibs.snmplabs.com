#
# PySNMP MIB module ALCATEL-IND1-IPRMV6-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-IPRMV6-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:18:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
routingIND1Iprm, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1Iprm")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
IANAipRouteProtocol, = mibBuilder.importSymbols("IANA-RTPROTO-MIB", "IANAipRouteProtocol")
Ipv6IfIndex, Ipv6Address = mibBuilder.importSymbols("IPV6-TC", "Ipv6IfIndex", "Ipv6Address")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, ObjectIdentity, ModuleIdentity, TimeTicks, Integer32, MibIdentifier, Unsigned32, Counter32, Gauge32, iso, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "ObjectIdentity", "ModuleIdentity", "TimeTicks", "Integer32", "MibIdentifier", "Unsigned32", "Counter32", "Gauge32", "iso", "IpAddress", "NotificationType")
TruthValue, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TextualConvention")
alcatelIND1IPRMV6MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2))
alcatelIND1IPRMV6MIB.setRevisions(('2010-02-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1IPRMV6MIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1IPRMV6MIB.setLastUpdated('201307260000Z')
if mibBuilder.loadTexts: alcatelIND1IPRMV6MIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1IPRMV6MIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1IPRMV6MIB.setDescription('This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): This proprietary MIB contains management information for the configuration of IPRMv6 global configuration parameters. The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2010 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1IPRMV6MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1))
alaIprmV6Config = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1))
class AlaIprmV6RtPrefType(TextualConvention, Integer32):
    description = 'Used to define the various types of IPv6 routes along with their route preference values'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("local", 1), ("static", 2), ("ospf", 3), ("rip", 4), ("bgpExternal", 5), ("bgpInternal", 6), ("isisl1", 7), ("isisl2", 8))

alaIprmV6RouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 1), )
if mibBuilder.loadTexts: alaIprmV6RouteTable.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RouteTable.setDescription("IPRM's IPv6 Routing table. This table contains an entry for each valid IPv6 unicast route that can be used for packet forwarding determination. It is for display purposes only.")
alaIprmV6RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6RouteDest"), (0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6RoutePfxLength"), (0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6RouteNextHop"), (0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6RouteProtocol"), (0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6RouteIfIndex"))
if mibBuilder.loadTexts: alaIprmV6RouteEntry.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RouteEntry.setDescription('A routing entry.')
alaIprmV6RouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 1, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: alaIprmV6RouteDest.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RouteDest.setDescription('The destination IPv6 address of this route.')
alaIprmV6RoutePfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setUnits('bits')
if mibBuilder.loadTexts: alaIprmV6RoutePfxLength.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RoutePfxLength.setDescription('Indicates the prefix length of the destination address.')
alaIprmV6RouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 1, 1, 3), Ipv6Address())
if mibBuilder.loadTexts: alaIprmV6RouteNextHop.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RouteNextHop.setDescription("On remote routes, the address of the next system en route; otherwise, ::0 ('00000000000000000000000000000000'H in ASN.1 string representation).")
alaIprmV6RouteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 1, 1, 4), IANAipRouteProtocol())
if mibBuilder.loadTexts: alaIprmV6RouteProtocol.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RouteProtocol.setDescription('The protocol that this route was learned from')
alaIprmV6RouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 1, 1, 5), Ipv6IfIndex())
if mibBuilder.loadTexts: alaIprmV6RouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RouteIfIndex.setDescription('The index value which uniquely identifies the local interface through which the next hop of this route should be reached.')
alaIprmV6RouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIprmV6RouteMetric.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RouteMetric.setDescription("The routing metric for this route. The semantics of this metric are determined by the routing protocol specified in the route's ipv6RouteProtocol value.")
alaIprmV6RouteValid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIprmV6RouteValid.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RouteValid.setDescription('If this value is true(1) IPRM believes the route is being used. If this value is false(2), the route is currently not being used and is considered a backup route.')
alaIprmV6StaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2), )
if mibBuilder.loadTexts: alaIprmV6StaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteTable.setDescription('Table allowing the creation and removal of IPv6 Static Routes.')
alaIprmV6StaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticRouteDest"), (0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticRoutePfxLength"), (0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticRouteNextHop"), (0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticRouteIfIndex"))
if mibBuilder.loadTexts: alaIprmV6StaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteEntry.setDescription('An IPv6 static route entered by the user')
alaIprmV6StaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: alaIprmV6StaticRouteDest.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteDest.setDescription('The destination IPv6 address of this static route. This object may not take a multicast address value.')
alaIprmV6StaticRoutePfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: alaIprmV6StaticRoutePfxLength.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRoutePfxLength.setDescription('Indicates the prefix length of the destination address.')
alaIprmV6StaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1, 3), Ipv6Address())
if mibBuilder.loadTexts: alaIprmV6StaticRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteNextHop.setDescription('The IPv6 address of the next hop towards the destination.')
alaIprmV6StaticRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1, 4), Ipv6IfIndex())
if mibBuilder.loadTexts: alaIprmV6StaticRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteIfIndex.setDescription('The index value which uniquely identifies the local interface through which the next hop of this route should be reached.')
alaIprmV6StaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1, 5), Unsigned32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmV6StaticRouteMetric.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteMetric.setDescription('The routing metric for this route. The lower the value, the higher the priority for the static route.')
alaIprmV6StaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmV6StaticRouteStatus.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteStatus.setDescription('Used to control the addition and removal of static routes.')
alaIprmV6StaticRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmV6StaticRouteTag.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteTag.setDescription('Tag associated with route.')
alaIprmV6StaticRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 2, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIprmV6StaticRouteName.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6StaticRouteName.setDescription('A comment associated with the static route.')
alaIprmV6RtPrefTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 3), )
if mibBuilder.loadTexts: alaIprmV6RtPrefTable.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RtPrefTable.setDescription('This table specifies the route preference values for various types of IPv6 routes handled by IPRM.')
alaIprmV6RtPrefTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6RtPrefEntryType"))
if mibBuilder.loadTexts: alaIprmV6RtPrefTableEntry.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RtPrefTableEntry.setDescription('An entry is in this table for each IPv6 route preference type.')
alaIprmV6RtPrefEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 3, 1, 1), AlaIprmV6RtPrefType())
if mibBuilder.loadTexts: alaIprmV6RtPrefEntryType.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RtPrefEntryType.setDescription('The type of route (associated with a route preference value)')
alaIprmV6RtPrefEntryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIprmV6RtPrefEntryValue.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6RtPrefEntryValue.setDescription('The route preference value used for this type of route.')
alcatelIND1IPRMV6MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 2))
alcatelIND1IPRMV6MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 2, 1))
alcatelIND1IPRMV6MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 2, 2))
alaIprmV6Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 2, 1, 1)).setObjects(("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6ConfigMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIprmV6Compliance = alaIprmV6Compliance.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6Compliance.setDescription('The compliance statement for routers running IPRM and implementing the ALCATEL-IND1-IPRMV6 MIB.')
alaIprmV6ConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 2, 2, 2, 1)).setObjects(("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6RouteMetric"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6RouteValid"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticRouteMetric"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticRouteStatus"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticRouteTag"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6StaticRouteName"), ("ALCATEL-IND1-IPRMV6-MIB", "alaIprmV6RtPrefEntryValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIprmV6ConfigMIBGroup = alaIprmV6ConfigMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alaIprmV6ConfigMIBGroup.setDescription('A collection of objects to support management of global configuration parameters of the IPRM Module supporting IPv6 routes.')
mibBuilder.exportSymbols("ALCATEL-IND1-IPRMV6-MIB", alaIprmV6StaticRouteTag=alaIprmV6StaticRouteTag, alaIprmV6StaticRouteName=alaIprmV6StaticRouteName, alaIprmV6RouteNextHop=alaIprmV6RouteNextHop, alaIprmV6StaticRouteNextHop=alaIprmV6StaticRouteNextHop, alaIprmV6RouteIfIndex=alaIprmV6RouteIfIndex, alaIprmV6StaticRoutePfxLength=alaIprmV6StaticRoutePfxLength, alaIprmV6StaticRouteDest=alaIprmV6StaticRouteDest, alaIprmV6RouteMetric=alaIprmV6RouteMetric, alaIprmV6StaticRouteTable=alaIprmV6StaticRouteTable, alaIprmV6StaticRouteStatus=alaIprmV6StaticRouteStatus, alaIprmV6RtPrefTable=alaIprmV6RtPrefTable, alaIprmV6ConfigMIBGroup=alaIprmV6ConfigMIBGroup, alaIprmV6RouteTable=alaIprmV6RouteTable, alcatelIND1IPRMV6MIBCompliances=alcatelIND1IPRMV6MIBCompliances, alaIprmV6RouteDest=alaIprmV6RouteDest, alaIprmV6RouteEntry=alaIprmV6RouteEntry, alaIprmV6RoutePfxLength=alaIprmV6RoutePfxLength, alaIprmV6RtPrefTableEntry=alaIprmV6RtPrefTableEntry, alaIprmV6RtPrefEntryType=alaIprmV6RtPrefEntryType, alcatelIND1IPRMV6MIBGroups=alcatelIND1IPRMV6MIBGroups, alaIprmV6Compliance=alaIprmV6Compliance, alaIprmV6StaticRouteEntry=alaIprmV6StaticRouteEntry, alcatelIND1IPRMV6MIBObjects=alcatelIND1IPRMV6MIBObjects, alaIprmV6RtPrefEntryValue=alaIprmV6RtPrefEntryValue, alaIprmV6Config=alaIprmV6Config, alaIprmV6StaticRouteMetric=alaIprmV6StaticRouteMetric, PYSNMP_MODULE_ID=alcatelIND1IPRMV6MIB, alaIprmV6StaticRouteIfIndex=alaIprmV6StaticRouteIfIndex, alaIprmV6RouteProtocol=alaIprmV6RouteProtocol, alcatelIND1IPRMV6MIBConformance=alcatelIND1IPRMV6MIBConformance, alcatelIND1IPRMV6MIB=alcatelIND1IPRMV6MIB, AlaIprmV6RtPrefType=AlaIprmV6RtPrefType, alaIprmV6RouteValid=alaIprmV6RouteValid)
