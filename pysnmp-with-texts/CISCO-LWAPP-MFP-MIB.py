#
# PySNMP MIB module CISCO-LWAPP-MFP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-MFP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:05:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
cLApIfSmtParamEntry, cLApEntry, cLApIfSmtDot11Bssid = mibBuilder.importSymbols("CISCO-LWAPP-AP-MIB", "cLApIfSmtParamEntry", "cLApEntry", "cLApIfSmtDot11Bssid")
cldcClientMacAddress, = mibBuilder.importSymbols("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress")
CLEventFrames, CLMfpVersion, CLTimeBaseStatus, CLMfpEventType = mibBuilder.importSymbols("CISCO-LWAPP-TC-MIB", "CLEventFrames", "CLMfpVersion", "CLTimeBaseStatus", "CLMfpEventType")
cLWlanConfigEntry, = mibBuilder.importSymbols("CISCO-LWAPP-WLAN-MIB", "cLWlanConfigEntry")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, Unsigned32, Gauge32, iso, Bits, Integer32, Counter64, ObjectIdentity, IpAddress, Counter32, NotificationType, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "Gauge32", "iso", "Bits", "Integer32", "Counter64", "ObjectIdentity", "IpAddress", "Counter32", "NotificationType", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TimeInterval, TruthValue, MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "TruthValue", "MacAddress", "DisplayString", "TextualConvention")
ciscoLwappMfpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 518))
ciscoLwappMfpMIB.setRevisions(('2007-01-20 15:45', '2006-04-10 15:45',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappMfpMIB.setRevisionsDescriptions(('The objects cLClientLastSourceMacAddress, cLMfpClientProtection and cLMfpClientMfpEnabled have been added.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLwappMfpMIB.setLastUpdated('200701201545Z')
if mibBuilder.loadTexts: ciscoLwappMfpMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappMfpMIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappMfpMIB.setDescription("This MIB is intended to be implemented on all those devices operating as Central Controllers (CC) that terminate the Light Weight Access Point Protocol tunnel from Light-weight LWAPP Access Points. This MIB instrumentation provides the parameters used by the controller to control and monitor the behavior of the associated Access Points when following the newly defined Management Frame Protocol. The controller would pass the MFP settings configured by the user through this MIB to the APs through LWAPP messages. The APs then begin to validate and verify the integrity of 802.11 Management frames and report the anomalies found, if any, to the controller. The relationship between CC and the LWAPP APs can be depicted as followshe LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, which includes the WLAN parameters, to the LWAPP APs. The APs then encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. Reference [2] explains in detail about the communication between the controller and APs, while Reference [1] explains the AP-MN communication. To secure the 802.11 management traffic, the controller and the APs perform specific roles. The controller acts as the central entity to generate and distribute signature keys using which the APs generate integrity check values, also known as signatures, for individual management frames. The APs append this signature in the form of an Information Element to the respective management frame to be transmitted. This is needed to isolate those potential rogue APs whose frames may not carry the frame signature. The APs use the signature keys, generated and pushed to them by the controller for each BSSID reported as heard by the APs, to validate the integrity of the the management traffic originating from various 802.11 sources. Any anomalies observed by the APs are reported to the controller. The controller makes the information about such events available for a network management Station in the form of notifications. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 media access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends them to the controller to which it is logically connected. AP-Authentication With this feature enabled, the Access Points sending radio resource management neighbor packets with different RF network names will be reported as rogues. Basic Service Set Identifier ( BSSID ) The identifier of the Basic Service Set controlled by a single coordination function. The identifier is usually the MAC address of the radio interface that hosts the BSS. Central Controller ( CC ) The central entity that terminates the LWAPP protocol tunnel from the LWAPP APs. Throughout this MIB, this entity is also referred to as 'controller'. Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communication between the Access Points and the Central Controller. Management Frame Protection ( MFP ) A proprietary mechanism devised to integrity protect the otherwise unprotected management frames of the 802.11 protocol specification. Message Integrity Check ( MIC ) A checksum computed on a sequence of bytes and made known to the receiving party in a data communication, to let the receiving party make sure the bytes received were not compromised enroute. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Network Management Station ( NMS ) The system through which the network administrator manages the controller and the APs associated to it. REFERENCE [1] Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications, ANSI/IEEE Std 802.11, 1999 Edition. [2] Draft-obara-Capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol")
ciscoLwappMfpMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 518, 0))
ciscoLwappMfpMIBNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 518, 1))
ciscoLwappMfpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 518, 2))
ciscoLwappMfpMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 518, 3))
ciscoLwappMfpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 1))
ciscoLwappMfpStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 2))
cLMfpProtectType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cLMfpProtectNone", 1), ("cLMfpProtectApAuth", 2), ("cLMfpProtectMfp", 3))).clone('cLMfpProtectNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMfpProtectType.setStatus('current')
if mibBuilder.loadTexts: cLMfpProtectType.setDescription("The authentication mechanism to be used to secure the WLANs managed through this controller. cLMfpProtectNone - No authentication or protection mechanism is configured on the controller. cLMfpProtectApAuth - AP-authentication is configured as the authentication and protection mechanism on the controller. cLMfpProtectMfp - MFP is configured as the as the authentication and protection mechanism on the controller. The settings configured through cLMfpProtectionEnable and cLMfpApMfpValidationEnable for a WLAN and AP respectively take effect only if this object is set to 'cLMfpProtectMfp'.")
cLMfpWlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 1, 2), )
if mibBuilder.loadTexts: cLMfpWlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLMfpWlanConfigTable.setDescription('This table provides the configuration needed by the controller to enable management frame protection on a particular WLAN. A controller, when configured, enables the MFP on individual WLANs. When these WLANs that have MFP enabled are applied to the APs, the APs become part of the MFP framework. The APs will receive the signature keys to be used to generate MICs for unicast and broadcast management frames upon joining the controller. With these keys, the APs generate the MIC for individual management frames and append the value as an information element to the respective frames. The creation of a new row in cLWlanConfigTable through an explicit network management action results in creation of an entry in this table. Similarly, deletion of a row in cLWlanConfigTable through user action causes the deletion of corresponding row in this table.')
cLMfpWlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 1, 2, 1), )
cLWlanConfigEntry.registerAugmentions(("CISCO-LWAPP-MFP-MIB", "cLMfpWlanConfigEntry"))
cLMfpWlanConfigEntry.setIndexNames(*cLWlanConfigEntry.getIndexNames())
if mibBuilder.loadTexts: cLMfpWlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLMfpWlanConfigEntry.setDescription('A conceptual row in cLMfpWlanConfigTable and represents the MFP configuration on a particular WLAN.')
cLMfpVersionRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 1, 2, 1, 2), CLMfpVersion().clone('mfpv1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMfpVersionRequired.setStatus('current')
if mibBuilder.loadTexts: cLMfpVersionRequired.setDescription('The version of the Management Frame Protection Protocol required for the MFP framework when the MFP protection is enabled through the cLMfpProtectionEnable object.')
cLMfpProtectionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 1, 2, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMfpProtectionEnable.setStatus('current')
if mibBuilder.loadTexts: cLMfpProtectionEnable.setDescription("This object specifies whether the MFP protection on this WLAN be enabled or not. A value of 'true' enables management frame protection on the WLAN and 'false' disables management frame protection. Note that MFP is enabled or disabled on a WLAN through the values of 'true' and 'false' only if MFP is configured as the protection mechanism by setting the object cLMfpProtectType to 'cLMfpProtectMfp'. The NMS shall modify the value of this object, but the change made will take effect only if MFP is configured as the protection mechanism on the controller through the cLMfpProtectType object.")
cLMfpClientProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("required", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMfpClientProtection.setStatus('current')
if mibBuilder.loadTexts: cLMfpClientProtection.setDescription('This object specifies the level of client MFP protection for this WLAN. disabled - client protection is disabled. enabled - client protection is optional. required - client protection is mandatory.')
cLMfpClientTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 2, 5), )
if mibBuilder.loadTexts: cLMfpClientTable.setStatus('current')
if mibBuilder.loadTexts: cLMfpClientTable.setDescription('This table represents the MFP information for 802.11 wireless clients that are associated with the APs that have joined this controller.')
cLMfpClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 2, 5, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: cLMfpClientEntry.setStatus('current')
if mibBuilder.loadTexts: cLMfpClientEntry.setDescription('Each entry represents a conceptual row in this table and provides MFP information about the clients associated to the APs that have joined the controller.')
cLMfpClientMfpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 2, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMfpClientMfpEnabled.setStatus('current')
if mibBuilder.loadTexts: cLMfpClientMfpEnabled.setDescription("This object indicates whether MFP protection is enabled for a particular client. A value of 'true' indicates that MFP protection is enabled. A value of 'false' indicates MFP protection is disabled.")
cLMfpCtrlTimeBaseStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 2, 1), CLTimeBaseStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMfpCtrlTimeBaseStatus.setStatus('current')
if mibBuilder.loadTexts: cLMfpCtrlTimeBaseStatus.setDescription("The status of synchronization of the MFP-aware LWAPP controller's timebase with that of a central time server.")
cLMfpApParamTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 2, 2), )
if mibBuilder.loadTexts: cLMfpApParamTable.setStatus('current')
if mibBuilder.loadTexts: cLMfpApParamTable.setDescription('This table provides the configuration of MFP related parameters corresponding to a particular AP. A row is added to the table by the agent when a a row is added to cLApTable of CISCO-LWAPP-AP-MIB. Similarly, a row is deleted from this table when the corresponding row is deleted from cLApTable.')
cLMfpApParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 2, 2, 1), )
cLApEntry.registerAugmentions(("CISCO-LWAPP-MFP-MIB", "cLMfpApParamEntry"))
cLMfpApParamEntry.setIndexNames(*cLApEntry.getIndexNames())
if mibBuilder.loadTexts: cLMfpApParamEntry.setStatus('current')
if mibBuilder.loadTexts: cLMfpApParamEntry.setDescription('A conceptual row in this table and represents the MFP parameters of a particular AP.')
cLMfpApMfpValidationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 2, 2, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMfpApMfpValidationEnable.setStatus('current')
if mibBuilder.loadTexts: cLMfpApMfpValidationEnable.setDescription("This object specifies whether the AP should validate the management frames received by it in accordance with the MFP version or not. A value of 'true' indicates that the AP should validate all the received management frames accordance with the MFP version supported by the respective dot11 interface on which the frame was received. A value of 'false' indicates that the AP won't validate the received management frames. Note that MFP validation is enabled or disabled on an AP through the values of 'true' and 'false' only if MFP is configured as the protection mechanism by setting the object cLMfpProtectType to 'cLMfpProtectMfp'. The NMS shall modify the value of this object, but the change made will take effect only if MFP is configured as the protection mechanism on the controller through the cLMfpProtectType object.")
cLMfpApMfpValidationActual = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 2, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMfpApMfpValidationActual.setStatus('current')
if mibBuilder.loadTexts: cLMfpApMfpValidationActual.setDescription("This object indicates the status of MFP validation being done as reported by the AP in response to the controller's request to perform MFP validation. A value of 'true' indicates that all the management frames received by the AP will be validated in accordance with the MFP version supported by the respective dot11 interface on which the frame was received. A value of 'false' indicates that the management frames received by this AP won't be validated.")
cLMfpApIfSmtCapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 2, 3), )
if mibBuilder.loadTexts: cLMfpApIfSmtCapTable.setStatus('current')
if mibBuilder.loadTexts: cLMfpApIfSmtCapTable.setDescription('This table provides the MFP capabilities on a dot11 radio interface of an AP that has joined this controller. An AP performs the role of protecting and validating management frames on its dot11 interfaces. It protects the management frames transmitted out on a dot11 interface when the signature protection capability is enabled on that interface through the object cLMfpApIfMfpProtectionCapability. Similarly, it validates all the management frames received on a dot11 interface when MFP validation capability is enabled on the AP. A row is added to the table by the agent corresponding to each dot11 interface of an AP, when it adds the row(s) to cLApIfSmtParamTable of CISCO-LWAPP-AP-MIB. The agent deletes the row(s) when it deletes the corresponding rows from cLApIfSmtParamTable.')
cLMfpApIfSmtCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 2, 3, 1), )
cLApIfSmtParamEntry.registerAugmentions(("CISCO-LWAPP-MFP-MIB", "cLMfpApIfSmtCapEntry"))
cLMfpApIfSmtCapEntry.setIndexNames(*cLApIfSmtParamEntry.getIndexNames())
if mibBuilder.loadTexts: cLMfpApIfSmtCapEntry.setStatus('current')
if mibBuilder.loadTexts: cLMfpApIfSmtCapEntry.setDescription('A conceptual row in this table and represents the MFP capabilities on the dot11 interface of a particular LWAPP AP.')
cLMfpApIfMfpVersionSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 2, 3, 1, 1), CLMfpVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMfpApIfMfpVersionSupported.setStatus('current')
if mibBuilder.loadTexts: cLMfpApIfMfpVersionSupported.setDescription('The version of the Management Frame Protection protocol currently supported by this radio interface.')
cLMfpApIfMfpProtectionCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("protectCapNone", 1), ("protectCapNoBeacon", 2), ("protectCapAllFrames", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMfpApIfMfpProtectionCapability.setStatus('current')
if mibBuilder.loadTexts: cLMfpApIfMfpProtectionCapability.setDescription('The management frame protection capability currently exhibited by the dot11 interface. protectCapNone - protection is not supported on this dot11 interface. protectCapNoBeacon - protection is supported for all types of 802.11 management frames except for beacon and probe rsponse frames. protectCapAllFrames - protection is supported for all types of 802.11 management frames.')
cLMfpApIfMfpValidationCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("validateCapNone", 1), ("validateCapAllFrames", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLMfpApIfMfpValidationCapability.setStatus('current')
if mibBuilder.loadTexts: cLMfpApIfMfpValidationCapability.setDescription('The management frame validation capability currently exhibited by this dot11 interface. validateCapNone - The MFP validation is not done by this dot11 interface. validateCapAllFrames - The MFP validation is supported on ths dot11 interface for all types of 802.11 management frames.')
cLMfpCtrlNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 518, 2, 2, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLMfpCtrlNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cLMfpCtrlNotifEnable.setDescription("The object to control the generation of notifications defined in this MIB. A value of 'true' indicates that the agent generates the notifications defined in this MIB. A value of 'false' indicates that the agent doesn't generate the notifications.")
cLApMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 518, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApMacAddress.setStatus('current')
if mibBuilder.loadTexts: cLApMacAddress.setDescription('This object specifies the radio MAC address of a LWAPP AP.')
cLApDot11IfSlotIdx = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 518, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLApDot11IfSlotIdx.setStatus('current')
if mibBuilder.loadTexts: cLApDot11IfSlotIdx.setDescription('This object specifies the slotId of the dot11 interface.')
cLWlanIdx = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 518, 1, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLWlanIdx.setStatus('current')
if mibBuilder.loadTexts: cLWlanIdx.setDescription('This object indicates the identifier for a WLAN.')
cLMfpApIfMfpProtectionActual = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 518, 1, 4), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLMfpApIfMfpProtectionActual.setStatus('current')
if mibBuilder.loadTexts: cLMfpApIfMfpProtectionActual.setDescription('The actual protection configuration for a specific WLAN as applicable to a dot11 interface of a specific AP.')
cLMfpEventType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 518, 1, 5), CLMfpEventType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLMfpEventType.setStatus('current')
if mibBuilder.loadTexts: cLMfpEventType.setDescription('The type of the MFP anomaly event.')
cLMfpEventTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 518, 1, 6), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLMfpEventTotal.setStatus('current')
if mibBuilder.loadTexts: cLMfpEventTotal.setDescription('The number of MFP anomaly events detected in the prior period indicated by cLMfpEventPeriod. cLMfpEventType indicates the type of the anomaly event.')
cLMfpEventPeriod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 518, 1, 7), TimeInterval()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLMfpEventPeriod.setStatus('current')
if mibBuilder.loadTexts: cLMfpEventPeriod.setDescription('The time period, in hundredths of a second, in which the reported number of events are detected. This is the time interval at which the controller periodically checks for the anomaly events to be reported to the NMS through the ciscoLwappMfpAnomalyDetected notification.')
cLMfpEventFrames = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 518, 1, 8), CLEventFrames()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLMfpEventFrames.setStatus('current')
if mibBuilder.loadTexts: cLMfpEventFrames.setDescription('This object indicates which type of 802.11 management frames contain anomalies of type cLMfpEventType. When the controller detects anomalies using the MFP validation test it will generate the ciscoLwappMfpAnomalyDetected notification.')
cLClientLastSourceMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 518, 1, 10), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cLClientLastSourceMacAddress.setStatus('current')
if mibBuilder.loadTexts: cLClientLastSourceMacAddress.setDescription('This object represents the MAC address of the client that is responsible for the most recent event related to a wireless client. This information is useful to identify the rogue client that has staged the most recent attack on the wireless network.')
ciscoLwappMfpProtectConfigMismatch = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 518, 0, 1)).setObjects(("CISCO-LWAPP-MFP-MIB", "cLApMacAddress"), ("CISCO-LWAPP-MFP-MIB", "cLApDot11IfSlotIdx"), ("CISCO-LWAPP-MFP-MIB", "cLWlanIdx"), ("CISCO-LWAPP-MFP-MIB", "cLMfpProtectionEnable"), ("CISCO-LWAPP-MFP-MIB", "cLMfpApIfMfpProtectionActual"))
if mibBuilder.loadTexts: ciscoLwappMfpProtectConfigMismatch.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMfpProtectConfigMismatch.setDescription("This notification is sent by the agent when the controller detects that the AP couldn't apply the protection configuration to the specific radio interface for the specified WLAN. The controller detects the mismatch by matching the MFP configuration requested to be applied with the configuration returned in the acknowledgement as having been applied to the radio interface. The controller also generates this notification to indicate that configuration mismatch is cleared when the values of cLMfpProtectionEnable and cLMfpApIfMfpProtectionActual are found to be the same. This notification is generated by the controller only if MFP has been configured as the protection mechanism through cLMfpProtectType.")
ciscoLwappMfpValidationConfigMismatch = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 518, 0, 2)).setObjects(("CISCO-LWAPP-MFP-MIB", "cLApMacAddress"), ("CISCO-LWAPP-MFP-MIB", "cLMfpApMfpValidationEnable"), ("CISCO-LWAPP-MFP-MIB", "cLMfpApMfpValidationActual"))
if mibBuilder.loadTexts: ciscoLwappMfpValidationConfigMismatch.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMfpValidationConfigMismatch.setDescription("This notification is sent by the agent when the controller detects that the AP couldn't configure itself with the MFP signature validation configuration. The controller detects the mismatch by matching the MFP configuration requested to be applied with the configuration returned in the acknowledgement as having been configured by the AP. The controller also generates this notification to indicate that configuration mismatch is cleared when the values of cLMfpApMfpValidationEnable and cLMfpApMfpValidationActual are found to be the same. This notification is generated by the controller only if MFP has been configured as the protection mechanism through cLMfpProtectType.")
ciscoLwappMfpTimebaseStatus = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 518, 0, 3)).setObjects(("CISCO-LWAPP-MFP-MIB", "cLMfpCtrlTimeBaseStatus"))
if mibBuilder.loadTexts: ciscoLwappMfpTimebaseStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMfpTimebaseStatus.setDescription("This notification is sent by the agent to indicate the controller's status of synchronization of its timebase with that of a central timebase. The notification is sent once after the controller comes up and thereafter, it is sent everytime the status changes.")
ciscoLwappMfpAnomalyDetected = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 518, 0, 4)).setObjects(("CISCO-LWAPP-MFP-MIB", "cLApMacAddress"), ("CISCO-LWAPP-MFP-MIB", "cLApDot11IfSlotIdx"), ("CISCO-LWAPP-AP-MIB", "cLApIfSmtDot11Bssid"), ("CISCO-LWAPP-MFP-MIB", "cLMfpEventType"), ("CISCO-LWAPP-MFP-MIB", "cLMfpEventTotal"), ("CISCO-LWAPP-MFP-MIB", "cLMfpEventPeriod"), ("CISCO-LWAPP-MFP-MIB", "cLMfpEventFrames"))
if mibBuilder.loadTexts: ciscoLwappMfpAnomalyDetected.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappMfpAnomalyDetected.setDescription('This notification is sent by the agent when the MFP configuration of the WLAN was violated by the radio interface cLApIfSmtDot11Bssid and detected by the radio interface cLApDot11IfSlotId of the AP cLApMacAddress. The violation is indicated by cLMfpEventType. Through this notification, the controller reports the NMS the occurrence of a total of cLMfpEventTotal volation events, of type cLMfpEventType, upon observing the management frame(s) indicated by cLMfpEventFrames for the last cLMfpEventPeriod time units. When cLMfpEventTotal is 0, it indicates that no further anomalies have recently been detected and that the NMS should clear any alarm raised about the MFP errors. This notification is generated by the controller only if MFP has been configured as the protection mechanism through cLMfpProtectType.')
ciscoLwappMfpAnomalyDetected1 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 518, 0, 5)).setObjects(("CISCO-LWAPP-MFP-MIB", "cLApMacAddress"), ("CISCO-LWAPP-MFP-MIB", "cLApDot11IfSlotIdx"), ("CISCO-LWAPP-AP-MIB", "cLApIfSmtDot11Bssid"), ("CISCO-LWAPP-MFP-MIB", "cLMfpEventType"), ("CISCO-LWAPP-MFP-MIB", "cLMfpEventTotal"), ("CISCO-LWAPP-MFP-MIB", "cLMfpEventPeriod"), ("CISCO-LWAPP-MFP-MIB", "cLMfpEventFrames"), ("CISCO-LWAPP-MFP-MIB", "cLClientLastSourceMacAddress"))
if mibBuilder.loadTexts: ciscoLwappMfpAnomalyDetected1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMfpAnomalyDetected1.setDescription('This notification is sent by the agent when the MFP configuration of the WLAN was violated by the radio interface cLApIfSmtDot11Bssid and detected by the radio interface cLApDot11IfSlotId of the AP cLApMacAddress. The violation is indicated by cLMfpEventType. Through this notification, the controller reports the NMS the occurrence of a total of cLMfpEventTotal volation events, of type cLMfpEventType, upon observing the management frame(s) indicated by cLMfpEventFrames for the last cLMfpEventPeriod time units. When cLMfpEventTotal is 0, it indicates that no further anomalies have recently been detected and that the NMS should clear any alarm raised about the MFP errors. cLClientLastSourceMacAddress is used only when the controller generates notifications about client-related attacks. The controller will populate zeros as the value for cLClientLastSourceMacAddress when reporting anomalies sourced by infrastructure devices. This notification is generated by the controller only if MFP has been configured as the protection mechanism through cLMfpProtectType.')
ciscoLwappMfpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 518, 3, 1))
ciscoLwappMfpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 518, 3, 2))
ciscoLwappMfpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 518, 3, 1, 1)).setObjects(("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpConfigGroup"), ("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpStatusGroup"), ("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpNotifObjsGroup"), ("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpNotifsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMfpMIBCompliance = ciscoLwappMfpMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappMfpMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappMfpMIB module.')
ciscoLwappMfpMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 518, 3, 1, 2)).setObjects(("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpConfigGroup"), ("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpStatusGroup"), ("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpNotifObjsGroup"), ("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpNotifsNewGroup"), ("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpConfigSup1Group"), ("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpStatusSup1Group"), ("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpNotifObjsSup1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMfpMIBComplianceRev1 = ciscoLwappMfpMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMfpMIBComplianceRev1.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappMfpMIB module.')
ciscoLwappMfpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 518, 3, 2, 1)).setObjects(("CISCO-LWAPP-MFP-MIB", "cLMfpProtectType"), ("CISCO-LWAPP-MFP-MIB", "cLMfpVersionRequired"), ("CISCO-LWAPP-MFP-MIB", "cLMfpProtectionEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMfpConfigGroup = ciscoLwappMfpConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMfpConfigGroup.setDescription('This collection of objects represent the global and WLAN-specific protection capabilities on the controller.')
ciscoLwappMfpStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 518, 3, 2, 2)).setObjects(("CISCO-LWAPP-MFP-MIB", "cLMfpCtrlTimeBaseStatus"), ("CISCO-LWAPP-MFP-MIB", "cLMfpCtrlNotifEnable"), ("CISCO-LWAPP-MFP-MIB", "cLMfpApIfMfpVersionSupported"), ("CISCO-LWAPP-MFP-MIB", "cLMfpApIfMfpProtectionCapability"), ("CISCO-LWAPP-MFP-MIB", "cLMfpApIfMfpValidationCapability"), ("CISCO-LWAPP-MFP-MIB", "cLMfpApMfpValidationEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMfpStatusGroup = ciscoLwappMfpStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMfpStatusGroup.setDescription('This collection of objects provides the information about the MFP signature protection capabilities as observed on the dot11 interfaces of the LWAPP APs.')
ciscoLwappMfpNotifObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 518, 3, 2, 3)).setObjects(("CISCO-LWAPP-MFP-MIB", "cLApMacAddress"), ("CISCO-LWAPP-MFP-MIB", "cLApDot11IfSlotIdx"), ("CISCO-LWAPP-MFP-MIB", "cLWlanIdx"), ("CISCO-LWAPP-MFP-MIB", "cLMfpApIfMfpProtectionActual"), ("CISCO-LWAPP-MFP-MIB", "cLMfpApMfpValidationActual"), ("CISCO-LWAPP-MFP-MIB", "cLMfpEventType"), ("CISCO-LWAPP-MFP-MIB", "cLMfpEventTotal"), ("CISCO-LWAPP-MFP-MIB", "cLMfpEventPeriod"), ("CISCO-LWAPP-MFP-MIB", "cLMfpEventFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMfpNotifObjsGroup = ciscoLwappMfpNotifObjsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMfpNotifObjsGroup.setDescription('This collection of objects represent the information carried by the MFP related notifications sent by the agent to a network management station.')
ciscoLwappMfpNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 518, 3, 2, 4)).setObjects(("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpProtectConfigMismatch"), ("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpValidationConfigMismatch"), ("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpTimebaseStatus"), ("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpAnomalyDetected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMfpNotifsGroup = ciscoLwappMfpNotifsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappMfpNotifsGroup.setDescription('This collection of objects represent the MFP related notifications sent by the agent to a network management station.')
ciscoLwappMfpConfigSup1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 518, 3, 2, 5)).setObjects(("CISCO-LWAPP-MFP-MIB", "cLMfpClientProtection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMfpConfigSup1Group = ciscoLwappMfpConfigSup1Group.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMfpConfigSup1Group.setDescription('This collection of objects represent the configuration for client protection on the controller.')
ciscoLwappMfpStatusSup1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 518, 3, 2, 6)).setObjects(("CISCO-LWAPP-MFP-MIB", "cLMfpClientMfpEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMfpStatusSup1Group = ciscoLwappMfpStatusSup1Group.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMfpStatusSup1Group.setDescription('This collection of objects represent the status of client protection on the controller.')
ciscoLwappMfpNotifObjsSup1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 518, 3, 2, 7)).setObjects(("CISCO-LWAPP-MFP-MIB", "cLClientLastSourceMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMfpNotifObjsSup1Group = ciscoLwappMfpNotifObjsSup1Group.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMfpNotifObjsSup1Group.setDescription('This collection of objects represent the client related information in the MFP notifications generated by the controller.')
ciscoLwappMfpNotifsNewGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 518, 3, 2, 8)).setObjects(("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpProtectConfigMismatch"), ("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpValidationConfigMismatch"), ("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpTimebaseStatus"), ("CISCO-LWAPP-MFP-MIB", "ciscoLwappMfpAnomalyDetected1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMfpNotifsNewGroup = ciscoLwappMfpNotifsNewGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMfpNotifsNewGroup.setDescription('This collection of objects represent the MFP related notifications sent by the agent to a network management station.')
mibBuilder.exportSymbols("CISCO-LWAPP-MFP-MIB", ciscoLwappMfpMIBNotifObjects=ciscoLwappMfpMIBNotifObjects, cLMfpApIfMfpProtectionActual=cLMfpApIfMfpProtectionActual, cLApDot11IfSlotIdx=cLApDot11IfSlotIdx, cLMfpWlanConfigTable=cLMfpWlanConfigTable, cLMfpVersionRequired=cLMfpVersionRequired, cLMfpApIfSmtCapTable=cLMfpApIfSmtCapTable, cLMfpEventTotal=cLMfpEventTotal, cLMfpClientProtection=cLMfpClientProtection, ciscoLwappMfpConfigSup1Group=ciscoLwappMfpConfigSup1Group, ciscoLwappMfpNotifObjsSup1Group=ciscoLwappMfpNotifObjsSup1Group, cLMfpEventFrames=cLMfpEventFrames, ciscoLwappMfpMIBNotifs=ciscoLwappMfpMIBNotifs, ciscoLwappMfpConfig=ciscoLwappMfpConfig, ciscoLwappMfpAnomalyDetected=ciscoLwappMfpAnomalyDetected, cLMfpApIfMfpProtectionCapability=cLMfpApIfMfpProtectionCapability, ciscoLwappMfpNotifsGroup=ciscoLwappMfpNotifsGroup, cLMfpCtrlTimeBaseStatus=cLMfpCtrlTimeBaseStatus, cLMfpApIfMfpValidationCapability=cLMfpApIfMfpValidationCapability, ciscoLwappMfpMIBCompliances=ciscoLwappMfpMIBCompliances, cLMfpApIfMfpVersionSupported=cLMfpApIfMfpVersionSupported, cLMfpCtrlNotifEnable=cLMfpCtrlNotifEnable, cLMfpProtectType=cLMfpProtectType, ciscoLwappMfpStatus=ciscoLwappMfpStatus, ciscoLwappMfpConfigGroup=ciscoLwappMfpConfigGroup, cLMfpApParamTable=cLMfpApParamTable, ciscoLwappMfpMIBConform=ciscoLwappMfpMIBConform, cLMfpApMfpValidationActual=cLMfpApMfpValidationActual, ciscoLwappMfpMIBGroups=ciscoLwappMfpMIBGroups, cLMfpApMfpValidationEnable=cLMfpApMfpValidationEnable, cLMfpApIfSmtCapEntry=cLMfpApIfSmtCapEntry, cLMfpProtectionEnable=cLMfpProtectionEnable, ciscoLwappMfpMIB=ciscoLwappMfpMIB, cLApMacAddress=cLApMacAddress, ciscoLwappMfpMIBCompliance=ciscoLwappMfpMIBCompliance, ciscoLwappMfpMIBComplianceRev1=ciscoLwappMfpMIBComplianceRev1, cLMfpClientMfpEnabled=cLMfpClientMfpEnabled, ciscoLwappMfpProtectConfigMismatch=ciscoLwappMfpProtectConfigMismatch, cLMfpEventPeriod=cLMfpEventPeriod, cLMfpClientEntry=cLMfpClientEntry, ciscoLwappMfpStatusSup1Group=ciscoLwappMfpStatusSup1Group, ciscoLwappMfpAnomalyDetected1=ciscoLwappMfpAnomalyDetected1, cLWlanIdx=cLWlanIdx, ciscoLwappMfpNotifObjsGroup=ciscoLwappMfpNotifObjsGroup, cLMfpWlanConfigEntry=cLMfpWlanConfigEntry, cLMfpApParamEntry=cLMfpApParamEntry, PYSNMP_MODULE_ID=ciscoLwappMfpMIB, cLMfpEventType=cLMfpEventType, ciscoLwappMfpValidationConfigMismatch=ciscoLwappMfpValidationConfigMismatch, ciscoLwappMfpMIBObjects=ciscoLwappMfpMIBObjects, cLClientLastSourceMacAddress=cLClientLastSourceMacAddress, ciscoLwappMfpNotifsNewGroup=ciscoLwappMfpNotifsNewGroup, ciscoLwappMfpTimebaseStatus=ciscoLwappMfpTimebaseStatus, cLMfpClientTable=cLMfpClientTable, ciscoLwappMfpStatusGroup=ciscoLwappMfpStatusGroup)
