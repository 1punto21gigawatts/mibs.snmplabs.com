#
# PySNMP MIB module HH3C-HGMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-HGMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:27:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
hh3cRhw, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cRhw")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, iso, Bits, IpAddress, Unsigned32, MibIdentifier, ModuleIdentity, TimeTicks, NotificationType, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "iso", "Bits", "IpAddress", "Unsigned32", "MibIdentifier", "ModuleIdentity", "TimeTicks", "NotificationType", "Counter64", "Integer32")
MacAddress, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString", "RowStatus")
hh3cHgmp = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 7))
if mibBuilder.loadTexts: hh3cHgmp.setLastUpdated('200512061452Z')
if mibBuilder.loadTexts: hh3cHgmp.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cHgmp.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cHgmp.setDescription('This MIB contains objects to manage the hh3chgmp operations, which are used on lanswitch products.')
hh3cClusterObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1))
if mibBuilder.loadTexts: hh3cClusterObject.setStatus('current')
if mibBuilder.loadTexts: hh3cClusterObject.setDescription('This MIB contains objects to manage the cluster operations, which are used on lanswitch products.')
hh3chgmpSetVLANSecurity = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noSecurity", 0), ("security", 1))).clone('security')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpSetVLANSecurity.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpSetVLANSecurity.setDescription('Configure whether to perform the VLAN check inside the cluster.')
hh3chgmpHandShakeInterval = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpHandShakeInterval.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpHandShakeInterval.setDescription('Handshaking interval of the cluster member switches.')
hh3chgmpHandShakeHoldtime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpHandShakeHoldtime.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpHandShakeHoldtime.setDescription('Holdtime of administrator switch and member switch in the cluster.')
hh3chgmpGrpMemberTableChange = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpGrpMemberTableChange.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpGrpMemberTableChange.setDescription('Add 1 to the member list after it changes. The administrator checks if the value has changed. If not, he will not read the list once more.')
hh3chgmpMemberDisconRate = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpMemberDisconRate.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpMemberDisconRate.setDescription('Disconnection times of the member and administrator switches divided by member number times 1000.')
hh3chgmpCmdLanswitchFlag = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpCmdLanswitchFlag.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpCmdLanswitchFlag.setDescription('Administrator switch flag')
hh3chgmpCmdClusterName = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpCmdClusterName.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpCmdClusterName.setDescription('Cluster name of the administrator switch')
hh3chgmpMngPriIpSegCMIP = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpMngPriIpSegCMIP.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpMngPriIpSegCMIP.setDescription('The private management IP address of the administrator switch, which can not be modified after the cluster has been created.')
hh3chgmpMngPriIpMask = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpMngPriIpMask.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpMngPriIpMask.setDescription('The private management IP address mask assigned by the administrator switch, which cannot be modified after the cluster has been created.')
hh3chgmpFtpServer = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpFtpServer.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpFtpServer.setDescription('The cluster members can access the Ftp Server through the administrator switch, which can only be configured and accessed on the administrator switch.')
hh3chgmpTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpTftpServer.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpTftpServer.setDescription('The cluster members can access the Tftp Server through the administrator switch, which can only be configured and accessed on the administrator switch.')
hh3chgmpSnmpHost = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpSnmpHost.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpSnmpHost.setDescription('The Snmp Host to send the cluster trap packets, which can only be configured and accessed on the administrator switch.')
hh3chgmpLogHost = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpLogHost.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpLogHost.setDescription('Log host of the cluster, which can only be configured and accessed on the administrator switch.')
hh3chgmpGrpMemberTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14), )
if mibBuilder.loadTexts: hh3chgmpGrpMemberTable.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpGrpMemberTable.setDescription('Table of cluster member switches')
hh3chgmpGrpMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpGrpMemberDeviceId"))
if mibBuilder.loadTexts: hh3chgmpGrpMemberEntry.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpGrpMemberEntry.setDescription('')
hh3chgmpGrpMemberDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpGrpMemberDeviceId.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpGrpMemberDeviceId.setDescription('4 bytes reserved as 0x0 + 6 bytes of MAC address, expressed as a character string of the hexadecimal number.')
hh3chgmpGrpMemberSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpGrpMemberSerial.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpGrpMemberSerial.setDescription('When adding member switch to the cluster, the administrator switch will assign an unique integer to identify it.')
hh3chgmpGrpMemberIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpGrpMemberIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpGrpMemberIpAddr.setDescription('The private IP addresses of the member switches for the communication inside the cluster.')
hh3chgmpGrpMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpGrpMemberName.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpGrpMemberName.setDescription('Hostname of the member switch')
hh3chgmpGrpMemberPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpGrpMemberPassword.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpGrpMemberPassword.setDescription('Member password for joining a cluster')
hh3chgmpGrpMemberPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpGrpMemberPlatform.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpGrpMemberPlatform.setDescription('Set the hardware platform. A null string indicates the information does not exist in the device adjacency table.')
hh3chgmpGrpMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("fault", 1))).clone('fault')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpGrpMemberStatus.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpGrpMemberStatus.setDescription('Member status on the administrator switch, use for displaying the network management status.')
hh3chgmpGrpMemberDisconCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpGrpMemberDisconCount.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpGrpMemberDisconCount.setDescription('Count of inside communication disconnection between the member switch and the administrator switch.')
hh3chgmpGrpMemberEnrollTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpGrpMemberEnrollTime.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpGrpMemberEnrollTime.setDescription('Enrollment time of the member, measured in seconds.')
hh3chgmpGrpMemberOperate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 14, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpGrpMemberOperate.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpGrpMemberOperate.setDescription('Operation indication field, indicates the operation of adding/removing a member by the network management agent.')
hh3chgmpMemberResetTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 15), )
if mibBuilder.loadTexts: hh3chgmpMemberResetTable.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpMemberResetTable.setDescription('Reset a member switch in the cluster.')
hh3chgmpMemberResetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 15, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpMemberResetMAC"))
if mibBuilder.loadTexts: hh3chgmpMemberResetEntry.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpMemberResetEntry.setDescription('')
hh3chgmpMemberResetMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 15, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpMemberResetMAC.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpMemberResetMAC.setDescription('The management MAC address of the switch to be reset, which is the unique identifier of the switch.')
hh3chgmpMemberEraseflash = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 65535))).clone(namedValues=NamedValues(("noErase", 0), ("erase", 1), ("cannotget", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpMemberEraseflash.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpMemberEraseflash.setDescription('Whether to erase the configuration file from the flash after resetting the switch. Read this node, cannotget(65535) will be returned.')
hh3chgmpEventsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 0))
if mibBuilder.loadTexts: hh3chgmpEventsV2.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpEventsV2.setDescription('Definition point for cluster notifications.')
hh3chgmpMemberfailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 0, 1)).setObjects(("HH3C-HGMP-MIB", "hh3chgmpGrpMemberDeviceId"))
if mibBuilder.loadTexts: hh3chgmpMemberfailure.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpMemberfailure.setDescription('When a cluster member failure, send a snmp trap to the network management.')
hh3chgmpMemberRecover = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 0, 2)).setObjects(("HH3C-HGMP-MIB", "hh3chgmpGrpMemberDeviceId"))
if mibBuilder.loadTexts: hh3chgmpMemberRecover.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpMemberRecover.setDescription('When a cluster member recover, send a snmp trap to the network management.')
hh3chgmpMemberStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 0, 3)).setObjects(("HH3C-HGMP-MIB", "hh3chgmpGrpMemberDeviceId"), ("HH3C-HGMP-MIB", "hh3chgmpNTDPCacheClusterRole"))
if mibBuilder.loadTexts: hh3chgmpMemberStatusChange.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpMemberStatusChange.setDescription('When a cluster member status change, send a snmp trap to the network management.')
hh3chgmpNetTopChange = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 0, 4))
if mibBuilder.loadTexts: hh3chgmpNetTopChange.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNetTopChange.setDescription('When net topology of this cluster change, send a snmp trap to the network management.')
hh3chgmpClusterRole = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 16, 17))).clone(namedValues=NamedValues(("roleCMDSW", 1), ("roleMEMBERSW", 2), ("roleBAKSW", 3), ("roleCASW", 16), ("roleUNISW", 17))).clone('roleUNISW')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpClusterRole.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpClusterRole.setDescription("This switch's role in cluster.")
hh3chgmpClusterMaxPoolNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpClusterMaxPoolNum.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpClusterMaxPoolNum.setDescription('Max switch members that the cluster can support(include administrator switch).')
hh3chgmpClusterCmdSwMac = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpClusterCmdSwMac.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpClusterCmdSwMac.setDescription('The MAC address of administrator switch. It will be filled with zero when not be a member of cluster.')
hh3chgmpRun = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpRun.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpRun.setDescription('Enable cluster on this switch.')
hh3chgmpProtocolMac = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 22))
hh3chgmpClusterProtocolMac = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 22, 1), MacAddress().clone(hexValue="0180C200000A")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpClusterProtocolMac.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpClusterProtocolMac.setDescription('Protocol MAC of HGMP protocol family. All multicast packets of this protocol family use this MAC as destination MAC.')
hh3chgmpTopologyManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23))
hh3chgmpWhitelistTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 1), )
if mibBuilder.loadTexts: hh3chgmpWhitelistTable.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpWhitelistTable.setDescription('Cluster switches white list table. White list topology is the topology which has been affirmed by network administrator in a cluster, and all devices in white list topology are recorded in this table. Against to white list table, black list table records the devices which are denied to join in cluster. Adding a black list device to white list table will cause a failure.')
hh3chgmpWhitelistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 1, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpWhitelistDeviceId"))
if mibBuilder.loadTexts: hh3chgmpWhitelistEntry.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpWhitelistEntry.setDescription('Entry items')
hh3chgmpWhitelistDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10))
if mibBuilder.loadTexts: hh3chgmpWhitelistDeviceId.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpWhitelistDeviceId.setDescription("Unique identifier indicating a white list switch. Value format of the this object is 'XXXXYYYYYY', in which 'XXXX' is reserved as 4 bytes of 0x0, 'YYYYYY' is a MAC address. For example, if the MAC is 000f-e459-000a, the value of this object is an octet string: '00' '00' '00' '00' '00' '0f' 'e4' '59' '00' '0a'.")
hh3chgmpWhitelistSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 2047), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpWhitelistSerial.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpWhitelistSerial.setDescription('When adding member switch to the cluster, the administrator switch will assign an unique integer to identify it. 0xffff means invalid value for this object.')
hh3chgmpWhitelistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3chgmpWhitelistRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpWhitelistRowStatus.setDescription('The row status of this table.')
hh3chgmpWhitelistNbTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 2), )
if mibBuilder.loadTexts: hh3chgmpWhitelistNbTable.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpWhitelistNbTable.setDescription('Cluster switches white list neighboring information table. White list neighbor table records all neighbor devices for every white list device. In fact, white list neighbor table displays the whole white list topology.')
hh3chgmpWhitelistNbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 2, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpWhitelistDeviceId"), (0, "HH3C-HGMP-MIB", "hh3chgmpWhitelistNbIndex"))
if mibBuilder.loadTexts: hh3chgmpWhitelistNbEntry.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpWhitelistNbEntry.setDescription('Entry items')
hh3chgmpWhitelistNbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hh3chgmpWhitelistNbIndex.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpWhitelistNbIndex.setDescription("Index of a switch which is the neighbor of a white list switch identified by 'hgmpWhitelistDeviceId'.")
hh3chgmpWhitelistNbDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpWhitelistNbDeviceId.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpWhitelistNbDeviceId.setDescription("Unique identifier indicating a neighbor switch of a white list switch. Value format of the this object is 'XXXXYYYYYY', in which 'XXXX' is reserved as 4 bytes of 0x0, 'YYYYYY' is a MAC address. For example, if the MAC is 000f-e459-000a, the value of this object is an octet string: '00' '00' '00' '00' '00' '0f' 'e4' '59' '00' '0a'.")
hh3chgmpWhitelistPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpWhitelistPortName.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpWhitelistPortName.setDescription("The name of the port which a white list switch connects to the neighbor specified by 'hgmpWhitelistNbIndex'.")
hh3chgmpWhitelistNbPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpWhitelistNbPortName.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpWhitelistNbPortName.setDescription("The name of the port which a neighbor device connects to the white list switch specified by 'hgmpWhitelistDeviceId'.")
hh3chgmpBlacklistTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 3), )
if mibBuilder.loadTexts: hh3chgmpBlacklistTable.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpBlacklistTable.setDescription('Cluster switches black list table. The black list table records all black list devices, and a device in black list is not permitted to join in any cluster.')
hh3chgmpBlacklistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 3, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpBlacklistDeviceId"))
if mibBuilder.loadTexts: hh3chgmpBlacklistEntry.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpBlacklistEntry.setDescription('Entry items')
hh3chgmpBlacklistDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10))
if mibBuilder.loadTexts: hh3chgmpBlacklistDeviceId.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpBlacklistDeviceId.setDescription("Unique identifier indicating a black list switch. Value format of the this object is 'XXXXYYYYYY', in which 'XXXX' is reserved as 4 bytes of 0x0, 'YYYYYY' is a MAC address. For example, if the MAC is 000f-e459-000a, the value of this object is an octet string: '00' '00' '00' '00' '00' '0f' 'e4' '59' '00' '0a'.")
hh3chgmpBlacklistAccessDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpBlacklistAccessDeviceId.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpBlacklistAccessDeviceId.setDescription("Unique identifier indicating the access device of a black list switch. Tracing from a black list device to the cluster commander switch, the device which the black list switch directly connects to is the access device. Value format of the this object is 'XXXXYYYYYY', in which 'XXXX' is reserved as 4 bytes of 0x0, 'YYYYYY' is a MAC address. 10 bytes of 0xff means invalid value for this object. For example, if the MAC is 000f-e459-000a, the value of this object is an octet string: '00' '00' '00' '00' '00' '0f' 'e4' '59' '00' '0a'.")
hh3chgmpBlacklistAccessPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpBlacklistAccessPortName.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpBlacklistAccessPortName.setDescription('The port which the access device connecting to the black list switch is named access port, the object returns the access port name. An empty string means invalid value for this object.')
hh3chgmpBlacklistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 23, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3chgmpBlacklistRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpBlacklistRowStatus.setDescription('The row status of this table.')
hh3chgmpMemberPriPortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 24), )
if mibBuilder.loadTexts: hh3chgmpMemberPriPortTable.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpMemberPriPortTable.setDescription('This table contains port number for different network protocols on each member switch. The port number can be used to access a specified member switch with specified protocol and private IP address.')
hh3chgmpMemberPriPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 24, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpMemberDevId"), (0, "HH3C-HGMP-MIB", "hh3chgmpMemberPriPortProto"))
if mibBuilder.loadTexts: hh3chgmpMemberPriPortEntry.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpMemberPriPortEntry.setDescription('Information about a specified member private port entry. The indexes of the entry are hh3chgmpGrpMemberDevId and hh3chgmpMemberPriPortProto, which indicate entries in the table.')
hh3chgmpMemberDevId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 24, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpMemberDevId.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpMemberDevId.setDescription("Unique identifier indicating the switch in cluster. Value format of the this object is 'XXXXYYYYYY', in which 'XXXX' is is reserved as 4 bytes of 0x0, 'YYYYYY' is a MAC address.")
hh3chgmpMemberPriPortProto = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 24, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hh3chgmpMemberPriPortProto.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpMemberPriPortProto.setDescription('The index of this table. Each instance value of this object corresponds to a different protocol.')
hh3chgmpMemberPriPortProtoDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 24, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpMemberPriPortProtoDescr.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpMemberPriPortProtoDescr.setDescription("It describes the hh3chgmpMemberPriPortProtocol object value. For example, it is 'SNMP' when hh3chgmpMemberPriPortProtocol value is 1.")
hh3chgmpMemberPriPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 1, 24, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpMemberPriPortNum.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpMemberPriPortNum.setDescription('The private port number of member switch, used by specified hh3chgmpMemberPriPortProto. By using the private IP address, specified protocol and port number, other devices outside cluster can access member switch. The private IP address can be acquired by reading hh3chgmpGrpMemberIpAddr.')
hh3cStackObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2))
if mibBuilder.loadTexts: hh3cStackObject.setStatus('current')
if mibBuilder.loadTexts: hh3cStackObject.setDescription('This MIB contains objects to manage the stack operations, which is used on lanswitch products.')
hh3chgmpStackMemberTableChange = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberTableChange.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackMemberTableChange.setDescription('Change identifier of the stack member table.')
hh3chgmpStackMemberDisconRate = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberDisconRate.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackMemberDisconRate.setDescription('Disconnection rate of the stack member switches.')
hh3chgmpMainLanswitchFlag = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpMainLanswitchFlag.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpMainLanswitchFlag.setDescription('The status of the local switch in the stack.')
hh3chgmpStackIpPoolStartIP = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpStackIpPoolStartIP.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackIpPoolStartIP.setDescription('The first address of the management IP network segment assigned by the master switch, which cannot be modified in the case that there is IP address assignment.')
hh3chgmpStackIpPoolLength = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpStackIpPoolLength.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackIpPoolLength.setDescription('The length of the management IP segment assigned by the master switch, which cannot be modified in the case that there is IP address assignment.')
hh3chgmpStackIpPoolMask = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 10), IpAddress().clone(hexValue="FFFF0000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpStackIpPoolMask.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackIpPoolMask.setDescription('The mask of the management IP segment assigned by the master switch, which cannot be modified in the case that there is IP address assignment.')
hh3chgmpStackMemberTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6), )
if mibBuilder.loadTexts: hh3chgmpStackMemberTable.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackMemberTable.setDescription('Stack member table.')
hh3chgmpStackMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpStackMemberDeviceId"))
if mibBuilder.loadTexts: hh3chgmpStackMemberEntry.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackMemberEntry.setDescription('')
hh3chgmpStackMemberDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberDeviceId.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackMemberDeviceId.setDescription('2 bytes address type of the switch + 2 bytes zero + MAC address, expressed as a hexadecimal number string.')
hh3chgmpStackMemberSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberSerial.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackMemberSerial.setDescription('When adding a member switch to the stack, the master switch will assign an unique integer to identify it.')
hh3chgmpStackMemberIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberIpAddr.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackMemberIpAddr.setDescription('The private member IP address for the communication inside the stack.')
hh3chgmpStackMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberName.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackMemberName.setDescription('Hostname of the member switch.')
hh3chgmpStackMemberPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberPassword.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackMemberPassword.setDescription('Member password for joining a stack.')
hh3chgmpStackMemberPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberPlatform.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackMemberPlatform.setDescription('Set the hardware platform. A null string indicates the information does not exist in the device adjacency table.')
hh3chgmpStackMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("fault", 1))).clone('fault')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberStatus.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackMemberStatus.setDescription('Member status on the master switch, use for displaying the network management status.')
hh3chgmpStackMemberDisconCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberDisconCount.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackMemberDisconCount.setDescription('Count of inside communication disconnection between the member switch and the master switch.')
hh3chgmpStackMemberEnrollTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMemberEnrollTime.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackMemberEnrollTime.setDescription('Enrollment time of the member, measured in seconds.')
hh3chgmpStackRole = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 16, 17))).clone(namedValues=NamedValues(("roleCMDSW", 1), ("roleMEMBERSW", 2), ("roleBAKSW", 3), ("roleCASW", 16), ("roleUNISW", 17))).clone('roleUNISW')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackRole.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackRole.setDescription("This switch's role status in stack.")
hh3chgmpStackMaxPoolNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMaxPoolNum.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackMaxPoolNum.setDescription('Max switch members in one stack that the switch support (include main switch).')
hh3chgmpStackMainSwMac = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpStackMainSwMac.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackMainSwMac.setDescription('The MAC address of main switch. It will be 00.00.00 when not be a member of stack.')
hh3cNDPObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5))
if mibBuilder.loadTexts: hh3cNDPObject.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPObject.setDescription('This MIB contains objects to manage the ndp operations, which are used on lanswitch products.')
hh3cNDPStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cNDPStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPStatus.setDescription('NDP protocol module enable flag')
hh3cNDPHelloTimer = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 254)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cNDPHelloTimer.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPHelloTimer.setDescription('NDP packet transmission interval, measured in seconds.')
hh3cNDPAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cNDPAgingTime.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPAgingTime.setDescription('How long the NDP information of the local switch can be hold in the adjacent switch, measured in seconds.')
hh3cNDPChange = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPChange.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPChange.setDescription('Change identifier of the Neighbor table')
hh3cNDPPortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 5), )
if mibBuilder.loadTexts: hh3cNDPPortTable.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPPortTable.setDescription('Configure to enable/disable the interface NDP of the switch.')
hh3cNDPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 5, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3cNDPIfIndex"))
if mibBuilder.loadTexts: hh3cNDPPortEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPPortEntry.setDescription('')
hh3cNDPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPIfIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPIfIndex.setDescription('Unique identifier of an interface of the device.')
hh3cNDPPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cNDPPortStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPPortStatus.setDescription('If it is enable, the device will send and receive the NDP packets via the interface. To disable the NDP function on the interface, set the entry as false.')
hh3cNDPPortNbTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6), )
if mibBuilder.loadTexts: hh3cNDPPortNbTable.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPPortNbTable.setDescription('NDP neighbor information on the switch.')
hh3cNDPPortNbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3cNDPIfIndex"), (0, "HH3C-HGMP-MIB", "hh3cNDPPortNbDeviceId"), (0, "HH3C-HGMP-MIB", "hh3cNDPPortNbPortName"))
if mibBuilder.loadTexts: hh3cNDPPortNbEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPPortNbEntry.setDescription('')
hh3cNDPPortNbDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPPortNbDeviceId.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPPortNbDeviceId.setDescription('2 bytes address type of the member switch + 2 bytes zero + MAC address, expressed as a character string of the hexadecimal number.')
hh3cNDPPortNbPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPPortNbPortName.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPPortNbPortName.setDescription('Unique identifier of a port. A null string indicates that the field was not included in in the latest NDP packet. Interface type + card number / slot number / sequence number.')
hh3cNDPPortNbDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPPortNbDeviceName.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPPortNbDeviceName.setDescription('Device name. A null string indicates that the field was not included in the latest NDP packet.')
hh3cNDPPortNbPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPPortNbPortMode.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPPortNbPortMode.setDescription('The neighbor port duplex mode.')
hh3cNDPPortNbProductVer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPPortNbProductVer.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPPortNbProductVer.setDescription('Product version. A null string indicates that the field was not included in the latest NDP packet.')
hh3cNDPPortNbHardVer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPPortNbHardVer.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPPortNbHardVer.setDescription('Hardware version. A null string indicates that the field was not included in the latest NDP packet.')
hh3cNDPPortNbBootromVer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPPortNbBootromVer.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPPortNbBootromVer.setDescription('Bootrom version. A null string indicates that the field was not included in the latest NDP packet.')
hh3cNDPPortNbSoftVer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPPortNbSoftVer.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPPortNbSoftVer.setDescription('Software version. A null string indicates that the field was not included in the latest NDP packet.')
hh3cNDPPortNbAgingtime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 5, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cNDPPortNbAgingtime.setStatus('current')
if mibBuilder.loadTexts: hh3cNDPPortNbAgingtime.setDescription('How long the NDP information of the local switch can be hold in the adjacent switch, measured in seconds.')
hh3cNTDPObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4))
if mibBuilder.loadTexts: hh3cNTDPObject.setStatus('current')
if mibBuilder.loadTexts: hh3cNTDPObject.setDescription('This MIB contains objects to manage the ntdp operations, which are used on lanswitch products.')
hh3chgmpNTDPCollectTopTime = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpNTDPCollectTopTime.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPCollectTopTime.setDescription('Topology collection interval of the administrator switch of the cluster, measured in minutes.')
hh3chgmpNTDPHopRange = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpNTDPHopRange.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPHopRange.setDescription('Range of the topology collection of the administrator switch')
hh3chgmpNTDPRun = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpNTDPRun.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPRun.setDescription('Enable/Disable the NTDP function on the switch.')
hh3chgmpNTDPPortDelay = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpNTDPPortDelay.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPPortDelay.setDescription('Set the delay to forward the topology request via the ports, measured in milliseconds.')
hh3chgmpNTDPHopDelay = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpNTDPHopDelay.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPHopDelay.setDescription('Set the delay to forward the topology request from every hop, measured in milliseconds.')
hh3chgmpNTDPLastTopCollectDuration = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPLastTopCollectDuration.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPLastTopCollectDuration.setDescription('Duration of the latest overall topology collection, a performance count measured in seconds.')
hh3chgmpNTDPCacheChange = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCacheChange.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPCacheChange.setDescription('Add 1 when the device table changes. The network administrator will check if it has changed before accessing the table. If it has not changed, he will not access again.')
hh3chgmpNTDPTOPTableChange = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTOPTableChange.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPTOPTableChange.setDescription('Add 1 when the topology table changes. The network administrator will check if it has changed before accessing the table. If it has not changed, he will not access again.')
hh3chgmpNTDPInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 9), )
if mibBuilder.loadTexts: hh3chgmpNTDPInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPInterfaceTable.setDescription('Enable/Disable the NTDP on the switch port.')
hh3chgmpNTDPInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 9, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpNTDPInterfaceIfIndex"))
if mibBuilder.loadTexts: hh3chgmpNTDPInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPInterfaceEntry.setDescription('')
hh3chgmpNTDPInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPInterfaceIfIndex.setDescription('Unique identifier an interface of the device.')
hh3chgmpNTDPInterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3chgmpNTDPInterfaceEnable.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPInterfaceEnable.setDescription('If it is true, the device will send and receive the NTDP packets via the interface. To disable the NTDP function on the interface, set the entry as false.')
hh3chgmpNTDPCacheTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10), )
if mibBuilder.loadTexts: hh3chgmpNTDPCacheTable.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPCacheTable.setDescription('Access the information about the switch from the topology table.')
hh3chgmpNTDPCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpNTDPCacheHashIndex"), (0, "HH3C-HGMP-MIB", "hh3chgmpNTDPCacheDeviceID"))
if mibBuilder.loadTexts: hh3chgmpNTDPCacheEntry.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPCacheEntry.setDescription('')
hh3chgmpNTDPCacheHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCacheHashIndex.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPCacheHashIndex.setDescription('Our NTDP information is saved in the HASH table on the administrator switch. Using DeviceID as index will lead to the comparison of a large amount of character strings, which puts too many burdens on the administrator switch. A HAHSIndex is added to reduce the character string comparison to the least range.')
hh3chgmpNTDPCacheDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCacheDeviceID.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPCacheDeviceID.setDescription('2 bytes address type of the member switch + 2 bytes zero + MAC address, expressed as a character string of the hexadecimal number.')
hh3chgmpNTDPCacheClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCacheClusterName.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPCacheClusterName.setDescription('Name of the cluster including the device.')
hh3chgmpNTDPCacheClusterRole = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 16, 17))).clone(namedValues=NamedValues(("roleCOSW", 1), ("roleMSW", 2), ("roleBKSW", 3), ("roleCASW", 16), ("roleUNISW", 17))).clone(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCacheClusterRole.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPCacheClusterRole.setDescription('Cluster role of the current device, which can be a administrator switch (0x01), member switch(0x02), backup switch(0x03), candidate switch(0x10) or an independent switch (incapable of cluster member) (0x11).')
hh3chgmpNTDPCacheCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1, 5), Integer32().clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCacheCapabilities.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPCacheCapabilities.setDescription('The capabilities of the device. FF indicates that the field was not included in in the latest NTDP packet.')
hh3chgmpNTDPCacheVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCacheVersion.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPCacheVersion.setDescription('The version information of the corresponding device. A null string indicates that the field was not included in in the latest NTDP packet.')
hh3chgmpNTDPCachePlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCachePlatform.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPCachePlatform.setDescription('Hardware platform. A null string indicates that the field was not included in the latest NTDP packet.')
hh3chgmpNTDPCacheMngVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1, 8), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCacheMngVLAN.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPCacheMngVLAN.setDescription('The management VLAN ID of the device.')
hh3chgmpNTDPCacheHop = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPCacheHop.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPCacheHop.setDescription('Hops to this switch.')
hh3chgmpNTDPTopTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11), )
if mibBuilder.loadTexts: hh3chgmpNTDPTopTable.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPTopTable.setDescription('Access the topology structure collected by the NTDP.')
hh3chgmpNTDPTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1), ).setIndexNames((0, "HH3C-HGMP-MIB", "hh3chgmpNTDPTopHashIndex"), (0, "HH3C-HGMP-MIB", "hh3chgmpNTDPTopEdgeStartDevID"), (0, "HH3C-HGMP-MIB", "hh3chgmpNTDPTopEdgeIndex"))
if mibBuilder.loadTexts: hh3chgmpNTDPTopEntry.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPTopEntry.setDescription('')
hh3chgmpNTDPTopHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTopHashIndex.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPTopHashIndex.setDescription('Our NTDP information is saved in the HASH table on the administrator switch. Using DeviceID as index will lead to the comparison of a large amount of character strings, which puts too many burdens on the administrator switch. A HAHSIndex is added to reduce the character string comparison to the least range.')
hh3chgmpNTDPTopEdgeStartDevID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeStartDevID.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeStartDevID.setDescription('2 bytes address type of the member switch + 2 bytes zero + MAC address, expressed as a character string of the hexadecimal number.')
hh3chgmpNTDPTopEdgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeIndex.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeIndex.setDescription('Edge index of this entry in the data structure.')
hh3chgmpNTDPTopEdgeEndDevID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeEndDevID.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeEndDevID.setDescription('2 bytes address type of the member switch + 2 bytes zero + MAC address, expressed as a character string of the hexadecimal number.')
hh3chgmpNTDPTopEdgeStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeStartPort.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeStartPort.setDescription('The number of the first port of a topology edge. Interface type + card number / slot number / sequence number.')
hh3chgmpNTDPTopEdgeStartPortFullDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1))).clone('half')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeStartPortFullDuplex.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeStartPortFullDuplex.setDescription('The full-duplex status of the first port on a topology edge.')
hh3chgmpNTDPTopEdgeStartPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeStartPortSpeed.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeStartPortSpeed.setDescription('The speed of the first port on a topology edge.')
hh3chgmpNTDPTopEdgeEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeEndPort.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPTopEdgeEndPort.setDescription('The number of the last port of a topology edge. Interface type + card number / slot number / sequence number.')
hh3chgmpNTDPTopLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 7, 4, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("blocking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3chgmpNTDPTopLinkStatus.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpNTDPTopLinkStatus.setDescription("In STP or RSTP, it describes link status according to port STP steady status. In MSTP it describes STP steady status of the instance which management VLAN belongs to. Either 'hgmpNTDPTopEdgeStartPort' or 'hgmpNTDPTopEdgeEndPort' STP steady status is 'blocking', this object is 'blocking', otherwise is 'forwarding'. If STP or MSTP is disabled, this object is 'forwarding'.")
hh3chgmpStackEventsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 0))
if mibBuilder.loadTexts: hh3chgmpStackEventsV2.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackEventsV2.setDescription('Definition point for Stack notifications.')
hh3chgmpStackMemberfailure = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 0, 1)).setObjects(("HH3C-HGMP-MIB", "hh3chgmpStackMemberDeviceId"))
if mibBuilder.loadTexts: hh3chgmpStackMemberfailure.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackMemberfailure.setDescription('When a stack member failure, send a snmp trap to the network management.')
hh3chgmpStackMemberRecover = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 0, 2)).setObjects(("HH3C-HGMP-MIB", "hh3chgmpStackMemberDeviceId"))
if mibBuilder.loadTexts: hh3chgmpStackMemberRecover.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackMemberRecover.setDescription('When a stack member Recover, send a snmp trap to the network management.')
hh3chgmpStackMemberStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 7, 2, 0, 3)).setObjects(("HH3C-HGMP-MIB", "hh3chgmpStackMemberDeviceId"), ("HH3C-HGMP-MIB", "hh3chgmpNTDPCacheClusterRole"))
if mibBuilder.loadTexts: hh3chgmpStackMemberStatusChange.setStatus('current')
if mibBuilder.loadTexts: hh3chgmpStackMemberStatusChange.setDescription('When a stack member status change, send a snmp trap to the network management.')
mibBuilder.exportSymbols("HH3C-HGMP-MIB", hh3cNDPPortNbTable=hh3cNDPPortNbTable, hh3chgmpCmdLanswitchFlag=hh3chgmpCmdLanswitchFlag, hh3chgmpGrpMemberDeviceId=hh3chgmpGrpMemberDeviceId, hh3cNDPPortNbHardVer=hh3cNDPPortNbHardVer, hh3chgmpNTDPCacheVersion=hh3chgmpNTDPCacheVersion, hh3chgmpGrpMemberPlatform=hh3chgmpGrpMemberPlatform, hh3chgmpNTDPTopEdgeStartDevID=hh3chgmpNTDPTopEdgeStartDevID, hh3chgmpNTDPInterfaceTable=hh3chgmpNTDPInterfaceTable, hh3chgmpWhitelistDeviceId=hh3chgmpWhitelistDeviceId, hh3chgmpWhitelistNbEntry=hh3chgmpWhitelistNbEntry, hh3cNDPPortTable=hh3cNDPPortTable, hh3chgmpClusterMaxPoolNum=hh3chgmpClusterMaxPoolNum, hh3cNDPPortNbAgingtime=hh3cNDPPortNbAgingtime, hh3chgmpBlacklistTable=hh3chgmpBlacklistTable, hh3chgmpNTDPRun=hh3chgmpNTDPRun, hh3chgmpGrpMemberName=hh3chgmpGrpMemberName, hh3chgmpWhitelistPortName=hh3chgmpWhitelistPortName, hh3chgmpStackMaxPoolNum=hh3chgmpStackMaxPoolNum, hh3chgmpBlacklistDeviceId=hh3chgmpBlacklistDeviceId, hh3chgmpNTDPCacheTable=hh3chgmpNTDPCacheTable, hh3chgmpGrpMemberPassword=hh3chgmpGrpMemberPassword, hh3chgmpMemberResetEntry=hh3chgmpMemberResetEntry, hh3chgmpMainLanswitchFlag=hh3chgmpMainLanswitchFlag, hh3chgmpNTDPCacheHop=hh3chgmpNTDPCacheHop, hh3chgmpNTDPInterfaceEntry=hh3chgmpNTDPInterfaceEntry, hh3chgmpMemberRecover=hh3chgmpMemberRecover, hh3chgmpGrpMemberTable=hh3chgmpGrpMemberTable, hh3chgmpStackEventsV2=hh3chgmpStackEventsV2, hh3chgmpRun=hh3chgmpRun, hh3chgmpStackMemberStatusChange=hh3chgmpStackMemberStatusChange, hh3chgmpClusterRole=hh3chgmpClusterRole, hh3cNDPPortEntry=hh3cNDPPortEntry, hh3chgmpNTDPCollectTopTime=hh3chgmpNTDPCollectTopTime, hh3chgmpStackMemberDisconRate=hh3chgmpStackMemberDisconRate, hh3chgmpStackMemberPassword=hh3chgmpStackMemberPassword, hh3chgmpNTDPCacheMngVLAN=hh3chgmpNTDPCacheMngVLAN, hh3cNDPIfIndex=hh3cNDPIfIndex, hh3cNDPPortStatus=hh3cNDPPortStatus, hh3chgmpNetTopChange=hh3chgmpNetTopChange, hh3chgmpBlacklistEntry=hh3chgmpBlacklistEntry, hh3chgmpBlacklistAccessPortName=hh3chgmpBlacklistAccessPortName, hh3chgmpSetVLANSecurity=hh3chgmpSetVLANSecurity, hh3chgmpMemberDevId=hh3chgmpMemberDevId, hh3chgmpStackIpPoolMask=hh3chgmpStackIpPoolMask, hh3chgmpProtocolMac=hh3chgmpProtocolMac, hh3cNDPStatus=hh3cNDPStatus, hh3chgmpStackMemberfailure=hh3chgmpStackMemberfailure, hh3chgmpLogHost=hh3chgmpLogHost, hh3chgmpNTDPPortDelay=hh3chgmpNTDPPortDelay, hh3chgmpStackMemberTable=hh3chgmpStackMemberTable, hh3cNDPPortNbProductVer=hh3cNDPPortNbProductVer, hh3chgmpWhitelistNbTable=hh3chgmpWhitelistNbTable, hh3chgmpStackMemberEnrollTime=hh3chgmpStackMemberEnrollTime, hh3chgmpNTDPCacheCapabilities=hh3chgmpNTDPCacheCapabilities, hh3chgmpMemberPriPortTable=hh3chgmpMemberPriPortTable, hh3chgmpNTDPTopHashIndex=hh3chgmpNTDPTopHashIndex, hh3chgmpSnmpHost=hh3chgmpSnmpHost, hh3chgmpNTDPTopEdgeStartPortFullDuplex=hh3chgmpNTDPTopEdgeStartPortFullDuplex, hh3chgmpStackMemberTableChange=hh3chgmpStackMemberTableChange, hh3chgmpHandShakeInterval=hh3chgmpHandShakeInterval, hh3chgmpNTDPHopRange=hh3chgmpNTDPHopRange, hh3chgmpNTDPTopEntry=hh3chgmpNTDPTopEntry, hh3chgmpNTDPCacheClusterName=hh3chgmpNTDPCacheClusterName, hh3chgmpMemberPriPortProto=hh3chgmpMemberPriPortProto, hh3chgmpNTDPCacheHashIndex=hh3chgmpNTDPCacheHashIndex, hh3chgmpWhitelistRowStatus=hh3chgmpWhitelistRowStatus, hh3chgmpNTDPTopTable=hh3chgmpNTDPTopTable, hh3chgmpNTDPTopEdgeEndPort=hh3chgmpNTDPTopEdgeEndPort, hh3cNDPPortNbPortName=hh3cNDPPortNbPortName, hh3chgmpCmdClusterName=hh3chgmpCmdClusterName, hh3cNDPHelloTimer=hh3cNDPHelloTimer, hh3chgmpMngPriIpSegCMIP=hh3chgmpMngPriIpSegCMIP, hh3chgmpMemberResetMAC=hh3chgmpMemberResetMAC, hh3chgmpNTDPCachePlatform=hh3chgmpNTDPCachePlatform, hh3chgmpMemberPriPortNum=hh3chgmpMemberPriPortNum, hh3cNDPPortNbSoftVer=hh3cNDPPortNbSoftVer, hh3chgmpNTDPLastTopCollectDuration=hh3chgmpNTDPLastTopCollectDuration, hh3chgmpNTDPCacheClusterRole=hh3chgmpNTDPCacheClusterRole, hh3chgmpStackMainSwMac=hh3chgmpStackMainSwMac, hh3chgmpFtpServer=hh3chgmpFtpServer, hh3chgmpGrpMemberEnrollTime=hh3chgmpGrpMemberEnrollTime, hh3cNDPPortNbDeviceId=hh3cNDPPortNbDeviceId, hh3chgmpWhitelistTable=hh3chgmpWhitelistTable, hh3chgmpEventsV2=hh3chgmpEventsV2, hh3chgmpNTDPTopEdgeEndDevID=hh3chgmpNTDPTopEdgeEndDevID, hh3chgmpStackMemberDeviceId=hh3chgmpStackMemberDeviceId, PYSNMP_MODULE_ID=hh3cHgmp, hh3chgmpNTDPCacheDeviceID=hh3chgmpNTDPCacheDeviceID, hh3chgmpGrpMemberTableChange=hh3chgmpGrpMemberTableChange, hh3chgmpNTDPTopEdgeStartPortSpeed=hh3chgmpNTDPTopEdgeStartPortSpeed, hh3chgmpStackIpPoolStartIP=hh3chgmpStackIpPoolStartIP, hh3cNDPPortNbPortMode=hh3cNDPPortNbPortMode, hh3chgmpStackMemberName=hh3chgmpStackMemberName, hh3chgmpNTDPHopDelay=hh3chgmpNTDPHopDelay, hh3cNDPPortNbDeviceName=hh3cNDPPortNbDeviceName, hh3chgmpTftpServer=hh3chgmpTftpServer, hh3chgmpWhitelistNbIndex=hh3chgmpWhitelistNbIndex, hh3chgmpMemberPriPortProtoDescr=hh3chgmpMemberPriPortProtoDescr, hh3cStackObject=hh3cStackObject, hh3chgmpGrpMemberDisconCount=hh3chgmpGrpMemberDisconCount, hh3chgmpGrpMemberIpAddr=hh3chgmpGrpMemberIpAddr, hh3chgmpStackIpPoolLength=hh3chgmpStackIpPoolLength, hh3chgmpMemberPriPortEntry=hh3chgmpMemberPriPortEntry, hh3cClusterObject=hh3cClusterObject, hh3chgmpWhitelistEntry=hh3chgmpWhitelistEntry, hh3chgmpStackMemberPlatform=hh3chgmpStackMemberPlatform, hh3cNDPAgingTime=hh3cNDPAgingTime, hh3chgmpHandShakeHoldtime=hh3chgmpHandShakeHoldtime, hh3chgmpClusterCmdSwMac=hh3chgmpClusterCmdSwMac, hh3chgmpMngPriIpMask=hh3chgmpMngPriIpMask, hh3chgmpMemberResetTable=hh3chgmpMemberResetTable, hh3chgmpTopologyManagement=hh3chgmpTopologyManagement, hh3chgmpGrpMemberEntry=hh3chgmpGrpMemberEntry, hh3chgmpStackMemberStatus=hh3chgmpStackMemberStatus, hh3chgmpStackMemberRecover=hh3chgmpStackMemberRecover, hh3cNDPChange=hh3cNDPChange, hh3cNDPPortNbEntry=hh3cNDPPortNbEntry, hh3chgmpStackMemberSerial=hh3chgmpStackMemberSerial, hh3chgmpStackRole=hh3chgmpStackRole, hh3chgmpGrpMemberStatus=hh3chgmpGrpMemberStatus, hh3chgmpBlacklistRowStatus=hh3chgmpBlacklistRowStatus, hh3chgmpNTDPTOPTableChange=hh3chgmpNTDPTOPTableChange, hh3chgmpWhitelistSerial=hh3chgmpWhitelistSerial, hh3chgmpWhitelistNbDeviceId=hh3chgmpWhitelistNbDeviceId, hh3chgmpWhitelistNbPortName=hh3chgmpWhitelistNbPortName, hh3chgmpNTDPTopEdgeStartPort=hh3chgmpNTDPTopEdgeStartPort, hh3chgmpStackMemberDisconCount=hh3chgmpStackMemberDisconCount, hh3chgmpStackMemberEntry=hh3chgmpStackMemberEntry, hh3chgmpStackMemberIpAddr=hh3chgmpStackMemberIpAddr, hh3chgmpNTDPInterfaceIfIndex=hh3chgmpNTDPInterfaceIfIndex, hh3chgmpNTDPCacheEntry=hh3chgmpNTDPCacheEntry, hh3chgmpNTDPInterfaceEnable=hh3chgmpNTDPInterfaceEnable, hh3cNDPObject=hh3cNDPObject, hh3chgmpNTDPCacheChange=hh3chgmpNTDPCacheChange, hh3cNTDPObject=hh3cNTDPObject, hh3chgmpMemberStatusChange=hh3chgmpMemberStatusChange, hh3cNDPPortNbBootromVer=hh3cNDPPortNbBootromVer, hh3chgmpNTDPTopEdgeIndex=hh3chgmpNTDPTopEdgeIndex, hh3chgmpGrpMemberSerial=hh3chgmpGrpMemberSerial, hh3chgmpGrpMemberOperate=hh3chgmpGrpMemberOperate, hh3chgmpClusterProtocolMac=hh3chgmpClusterProtocolMac, hh3chgmpNTDPTopLinkStatus=hh3chgmpNTDPTopLinkStatus, hh3chgmpMemberfailure=hh3chgmpMemberfailure, hh3chgmpBlacklistAccessDeviceId=hh3chgmpBlacklistAccessDeviceId, hh3cHgmp=hh3cHgmp, hh3chgmpMemberDisconRate=hh3chgmpMemberDisconRate, hh3chgmpMemberEraseflash=hh3chgmpMemberEraseflash)
