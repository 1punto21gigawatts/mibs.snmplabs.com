#
# PySNMP MIB module CISCO-VOICE-DIAL-CONTROL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VOICE-DIAL-CONTROL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:19:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
cCallHistoryCallOrigin, cCallHistoryIndex = mibBuilder.importSymbols("CISCO-DIAL-CONTROL-MIB", "cCallHistoryCallOrigin", "cCallHistoryIndex")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CvcCoderTypeRate, cvCommonDcCallHistoryCoderTypeRate, CvcSpeechCoderRate, CvcInBandSignaling, CvcGUid, CvcCallReferenceIdOrZero, CvcFaxTransmitRate = mibBuilder.importSymbols("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "CvcCoderTypeRate", "cvCommonDcCallHistoryCoderTypeRate", "CvcSpeechCoderRate", "CvcInBandSignaling", "CvcGUid", "CvcCallReferenceIdOrZero", "CvcFaxTransmitRate")
DnisMapname, = mibBuilder.importSymbols("CISCO-VOICE-DNIS-MIB", "DnisMapname")
callActiveSetupTime, callActiveIndex, callActivePeerId, callActivePeerAddress, AbsoluteCounter32 = mibBuilder.importSymbols("DIAL-CONTROL-MIB", "callActiveSetupTime", "callActiveIndex", "callActivePeerId", "callActivePeerAddress", "AbsoluteCounter32")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
QosService, = mibBuilder.importSymbols("INT-SERV-MIB", "QosService")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, Counter32, iso, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, Unsigned32, ModuleIdentity, ObjectIdentity, IpAddress, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "iso", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "IpAddress", "Gauge32", "MibIdentifier")
TimeStamp, PhysAddress, TruthValue, DateAndTime, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "PhysAddress", "TruthValue", "DateAndTime", "DisplayString", "TextualConvention", "RowStatus")
ciscoVoiceDialControlMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 63))
ciscoVoiceDialControlMIB.setRevisions(('2012-05-15 00:00', '2011-07-11 00:00', '2011-05-31 00:00', '2010-07-26 00:00', '2009-05-07 00:00', '2009-04-20 00:00', '2009-01-12 00:00', '2006-03-12 00:00', '2005-09-29 00:00', '2005-07-25 00:00', '2005-03-02 00:00', '2005-03-01 00:00', '2004-04-30 00:00', '2004-04-16 00:00', '2004-03-09 00:00', '2004-01-20 00:00', '2003-06-26 00:00', '2003-04-14 00:00', '2002-12-31 00:00', '2002-12-02 00:00', '2002-10-31 00:00', '2002-07-12 00:00', '2001-08-20 00:00', '2001-07-02 00:00', '2001-04-10 00:00', '2001-03-25 00:00', '2000-05-04 00:00', '2000-04-19 00:00', '2000-03-13 00:00', '1999-06-28 00:00', '1999-01-29 00:00', '1998-09-11 00:00', '1998-02-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVoiceDialControlMIB.setRevisionsDescriptions(('[1] Added New OBJECT-GROUP cvCallVolumeStatsHistory in cvGatewayCallHistory. [2] Added following tables cvCallRateStatsTable, cvCallLegRateStatsTable, cvActiveCallStatsTable, cvCallDurationStatsTable, cvSipMsgRateStatsTable under cvCallVolumeStatsHistory [3] Added following tables cvCallRateWMTable, cvCallLegRateWMTable, cvActiveCallWMTable, cvSipMsgRateWMTable under cvCallVolumeStatsHistory [4] Added following textual conversation CvCallVolumeStatsIntvlType & CvCallVolumeWMIntvlType [5] Added new cvdcCallVolumeStatsHistory conformance group in cvdcMIBGroups. [6] Added cvdcMIBComplianceRev22 depricating cvdcMIBComplianceRev21', '[1] Added cvVoIPCallActiveSessionId in cvVoIPCallActiveEntry and cvVoIPCallHistorySessionId in cvVoIPCallHistoryEntry [2] Added cvVoIPCallActiveSessionId and cvVoIPCallHistorySessionId to cvVoIPCallGroupSup3 [3] Deprecated cvVoIPCallGroupSup2 and superceded it with cvVoIPCallGroupSup3 [4] Deprecated cvdcMIBComplianceRev20 and superceded it with with cvdcMIBComplianceRev21', 'The following changes is done for RPH to DSCP mapping and Media policy feature. 1) Added two new objects in the cvVoIPCallActiveEntry ccVoIPCallActivePolicyName cvVoIPCallActiveReversedDirectionPeerAddress 2) Added one new notification object cvdcPolicyViolationNotification 3) Imported two objects from DIAL-CONTROL-MIB callActivePeerId callActivePeerAddress 4) Added four objects as part of new Notification cvdcPolicyViolationNotification ccVoIPCallActiveViolationReason cvVoIPCallActiveCalledNumber callActivePeerId callActivePeerAddress 5) Added new notification group cvdcNotificationGroupRev4 and changed the status of cvdcNotificationGroupRev3 to depricated. 6) Added new conformance group cvVoIPCallGroupSup2 and changed the status of cvVoIPCallGroupSup1 to deprecated. 7) Modified cvdcMIBComplianceRev20 to add new groups and remove the deprecated one 8) Added the following objects in CvVoIPPeerCfgEntry cvVoIPPeerCfgDSCPPolicyNotificationEnable cvVoIPPeerCfgMediaPolicyNotificationEnable 9) Added the following objects in cvdcGeneralCfgGroupRev6 cvGeneralDSCPPolicyNotificationEnable cvGeneralMediaPolicyNotificationEnable', '[1] Modified MAX-ACCESS for cvVoIPPeerCfgFrameSize from read-only to read-write. [2] Added a call reference ID to associate the video call entry and voice call entry of the same endpoint.', '[1] Added Abbreviation for iSAC [2] Added the following objects to cvVoIPPeerCfgTable for iSAC codec support. - cvVoIPPeerCfgCodingMode - cvVoIPPeerCfgBitRate - cvVoIPPeerCfgFramesize [3] Added a new OBJECT-GROUP cvdcVoIPCfgISACGroup. [4] Added a new MODULE-COMPLIANCE cvdcMIBComplianceRev19 which deprecates cvdcMIBComplianceRev18.', 'The following changes have been made. [1] Added new CvCallConnectionType TEXTUAL-CONVENTION. [2] Added the following new OBJECT IDENTIFIERs: cvCallVolume, cvCallRateMonitor [3] Added the following objects to cvCallVolume: cvCallVolConnTable, cvCallVolConnTotalActiveConnections, cvCallVolConnMaxCallConnectionLicenese, cvCallVolPeerTable, cvCallVolIfTable. [4] Added the following objects to new cvCallVolConnTable: cvCallVolConnIndex, cvCallVolConnActiveConnection. [5] Added the following objects to new cvCallVolPeerTable: cvCallVolPeerIncomingCalls, cvCallVolPeerOutgoingCalls. [6] Added the following objects to new cvCallVolIfTable: cvCallVolMediaIncomingCalls, cvCallVolMediaOutgoingCalls. [7] Added the following objects to cvCallRateMonitor: cvCallRateMonitorEnable, cvCallRateMonitorTime, cvCallRate, cvCallRateHiWaterMark. [8] Add the following OBJECT-GROUPs: cvCallVolumeGroup, cvCallRateMonitorGroup. [9] Deprecated MODULE-COMPLIANCE cvdcMIBComplianceRev17. [10] Added MODULE-COMPLIANCE cvdcMIBComplianceRev18.', "The following changes have been made. [1] The descriptions of the following objects have been modified to replace the term 'call identifier' with 'connection identifier'. cvCallActiveConnectionId cvVoIPCallActiveConnectionId cvCallHistoryConnectionId cvVoIPCallHistoryConnectionId. [2] The object cvCallActiveCallId has been added to cvCallActiveTable. [3] The object cvVoIPCallActiveCallId has been added to cvVoIPCallActiveTable. [4] The object cvCallHistoryCallId has been added to cvCallHistoryTable. [5] The object cvVoIPCallHistoryCallId has been added to cvVoIPCallHistoryTable. [6] 'sipKpml' has been added to the object cvVoIPPeerCfgDigitRelay. [7] Added following OBJECT-GROUPs cvCallGroupSup1, cvVoIPCallGroupSup1 [8] Deprecated MODULE-COMPLIANCE cvdcMIBComplianceRev16 and is superceded by cvdcMIBComplianceRev17.", '[1] Added Abbreviations for GSM, AMR-NB and iLBC [2] Added cvVoIPPeerCfgCoderMode object to cvVoIPPeerCfgTable for iLBC codec support. [3] Added cvVoIPCallActiveCoderMode object to cvVoIPCallActiveTable for iLBC codec support. [4] Added cvVoIPCallHistoryCoderMode object to cvVoIPCallHistoryTable for iLBC codec support. [5] Created CvIlbcFrameMode textual convention. [6] Added REFERENCE clause to all new MIB objects and textual conventions added. [7] Created cvVoIPCallIlbcGroup and cvdcVoIPCfgIlbcGroup groups for iLBC specific objects. [8] Created module-compliance cvdcMIBComplianceRev16 and made cvVoIPCallIlbcGroup and cvdcVoIPCfgIlbcGroup as non mandatory. [9] Changed the default value for cvVoIPPeerCfgBitRates to all 8 bitrates as all 8 bitrates are supported.', 'Modified DESCRIPTION of cvPeerCfgPeerType object.', '[1] Add new objects to cvVoIPCallActiveTable and cvVoIPCallHistoryTable for GSM AMR-NB codec support: Frame type, Bit rates, Mode change period, Mode change neighbor, Max payload time, CRC, Robust sorting, Encapsulation, Payload time channels, for call active and history table. [2] Add new objects to cvVoIPPeerCfgTable for GSM AMR-NB codec support: Frame type, Bit rates and CRC. [3] Created groups cvVoIPCallAmrNbGroup and cvdcVoIPCfgAmrNbGroup, for GSM AMR-NB specific objects. [4] Created a module-compliance cvdcMIBComplianceRev13 and made cvVoIPCallAmrNbGroup and cvdcVoIPCfgAmrNbGroup as non mandatory. [5] Created following textual conventions: CvAmrNbBitRateMode and CvAmrNbRtpEncap.', 'The following values were added to the cvVoicePeerCfgEchoCancellerTest object: echoCancellerG168Test5, echoCancellerG168Test7', 'Modified DESCRIPTION of cvVoIPCallHistoryFallbackLoss object.', 'Added object Added cvVoIPCallHistoryRemSigIPAddrT and cvVoIPCallHistoryRemSigIPAddr to the cvdcFallbackNotification .', 'Added object cvVoIPCallHistoryFallbackIcpif, cvVoIPCallHistoryFallbackLoss and cvVoIPCallHistoryFallbackDelay to the cvVoIPCallHistoryTable. Added cvdcFallbackNotification for the fallback notification. Added cvGeneralFallbackNotificationEnable to enable/disable cvdcFallbackNotification.', 'Added new objects for handling the following features: [1] The number of DS0s with voice calls up. cvCallActiveDS0s [2] The threshold number of DS0s above which a Notification will be triggered. cvCallActiveDS0sHighThreshold [3] The threshold number of DS0s below which a Notification will be triggered. cvCallActiveDS0sLowThreshold [4] Objects to enable the above two notifications. cvCallActiveDS0sHighNotifyEnable, cvCallActiveDS0sLowNotifyEnable. [5] Notifications for the above two thresholds. cvdcActiveDS0sHighNotification, cvdcActiveDS0sLowNotification.', 'Added object cvVoIPCallActiveSRTPEnable to cvVoIPCallActiveTable and cvVoIPCallHistorySRTPEnable to cvVoIPCallHistoryTable to indicate whether SRTP is enabled on a call.', 'Modified the DEVAL definition of cvVoIPPeerCfgDigitRelay object based on no bit field was enabled when the object was created.', 'The DESCRIPTION of the following objects was modified to specify the allowable characters cvPeerCommonCfgSourceTrunkGrpLabel cvPeerCommonCfgTargetTrunkGrpLabel cvPeerCommonCfgSourceCarrierId cvPeerCommonCfgTargetCarrierId.', 'The following values were added to the cvVoicePeerCfgEchoCancellerTest object: echoCancellerG168Test4, echoCancellerG168Test6, echoCancellerG168Test9', 'The range of the following objects was changed: cvCallActiveNoiseLevel cvCallActiveACOMLevel cvCallActiveOutSignalLevel cvCallActiveInSignalLevel cvVoIPCallHistoryIcpif', 'Add object cvVoIPPeerCfgMediaSetting to the table. This object defines whether IP-IP media streams will flow-through or flow-around the Gateway. Add two new objects cvVoIPPeerCfgDesiredQoSVideo and cvVoIPPeerCfgMinAcceptableQoSVideo to the table cvVoIPPeerCfgTable. Also added objects cvCallActiveAccountCode and cvCallHistoryAccountCode. Depreciating element cvCallActiveERLLevel Adding New element cvCallActiveERLLevelRev1 Adding New type sipNotify in cvVoIPPeerCfgDigitRelay Adding New element cvVoIPPeerCfgRedirectip2ip in CvVoIPPeerCfgEntry', '* Add a new cvPeerCfgPeerType object to define the peer type * Added rtpNte, a new value for the cvVoIPPeerCfgDigitRelay object.', 'Addition of the following objects: cvVoIPCallActiveUsername cvVoIPCallActiveProtocolCallId cvVoIPCallActiveRemSigIPAddrT cvVoIPCallActiveRemSigIPAddr cvVoIPCallActiveRemSigPort cvVoIPCallActiveRemMediaIPAddrT cvVoIPCallActiveRemMediaIPAddr cvVoIPCallActiveRemMediaPort cvVoIPCallHistoryUsername cvVoIPCallHistoryProtocolCallId cvVoIPCallHistoryRemSigIPAddrT cvVoIPCallHistoryRemSigIPAddr cvVoIPCallHistoryRemSigPort cvVoIPCallHistoryRemMediaIPAddrT cvVoIPCallHistoryRemMediaIPAddr cvVoIPCallHistoryRemMediaPort cvdcPoorQoVNotificationRev1 Deprecation of the following objects: cvVoIPCallActiveRemoteIPAddress cvVoIPCallActiveRemoteUDPPort cvVoIPCallHistoryRemoteIPAddress cvVoIPCallHistoryRemoteUDPPort cvdcPoorQoVNotification', 'Add two new objects cvPeerCommonCfgSourceTrunkGrpLabel and cvPeerCommonCfgTargetTrunkGrpLabel.', '[1] Add a new object for handling the following feature: Location in milliseconds of largest amplitude reflector detected by echo canceller in call active table. Add new object for specifying an echo canceller test to to be run when a call using a dial peer so configured is connected. [2] Change QosService import from INT-SERV-MIB to INTEGRATED-SERVICES-MIB, since INTEGRATED-SERVICES-MIB (RFC2213) is where QosService is defined.', 'Add two new objects cvPeerCommonCfgSourceCarrierId and cvPeerCommonCfgTargetCarrierId. Add a enum definition to cvVoIPPeerCfgSessionTarget object.', 'Add new objects for handling the following features: [1] Calling Name display for call active and history table. [2] Caller ID Block, which indicates whether the Caller ID feature is in using, for call active and history table.', 'Changed VoIP dialpeer default values for Icpif to 20 ExpectFactor to 0', 'Adding a new object cvPeerCommonCfgDnisMappingName.', 'Moved common Textual Conventions and the following items in the VoIP Call Active and Call History tables to the CISCO-VOICE-COMMON-DIAL-CONTROL-MIB, as these items apply to multiple network encapsulations. CoderTypeRate VADEnable Added new objects for handling the following features: [1] Gatekeeper registration configuration for voice peer destination pattern. [2] Dialpeer huntstop configuration. [3] Voip configuration support for Coder Bytes, Fax Bytes, settlement server and inband signaling. Added the following objects to the cvdcPoorQoVNotification. cvVoIPCallHistoryRemoteIPAddress, cCallHistoryCallOrigin, cvCommonDcCallHistoryCoderTypeRate', 'Add new enums in cvVoIPPeerCfgDigitRelay object for handling the transmission of dtmf digits across an H.245 channel via the signal and alphanumeric fields.', 'Add new objects for handling the following features: [1] FAX page count for call active and history table. [2] Peer Preference for peer configuration. [3] Add FAX rate 12000 bps, G723.1 Annex A codec support. [4] Technology prefix for VoIP encapsulated peer configuration. [5] Modify cvCallActiveACOMLeve, cvCallActiveERLLevel and cvCallHistoryACOMLevel to support undeterminable state. [6] Add digit relay configuration feature.', 'Add new objects for handling the following: [1] DNIS number matching. [2] Maximum connection to/from peer. [3] DID call treatment enable/disable. [4] Dial peer association to lower layer interfaces with CAS group. [5] Lost/Ealy/Late voice packets object in both call active and call history tables. [6] Update compliance statements.',))
if mibBuilder.loadTexts: ciscoVoiceDialControlMIB.setLastUpdated('201205150000Z')
if mibBuilder.loadTexts: ciscoVoiceDialControlMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoVoiceDialControlMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-voice@cisco.com')
if mibBuilder.loadTexts: ciscoVoiceDialControlMIB.setDescription('This MIB module enhances the IETF Dial Control MIB (RFC2128) by providing management of voice telephony peers on both a circuit-switched telephony network, and an IP data network. *** ABBREVIATIONS, ACRONYMS AND SYMBOLS *** GSM - Global System for Mobile Communication AMR-NB - Adaptive Multi Rate - Narrow Band iLBC - internet Low Bitrate Codec KPML - Key Press Markup Language MGCP - Media Gateway Control Protocol. SIP - Session Initiation Protocol. H323 - One of the voip signalling protocol. SCCP - Skinny Client Control Protocol. dialpeer - This represents a configured interface that carries the dial map. A dialpeer maps the called and calling numbers with the port or IP interface to be used. License call capacity - This represents the licensed maximum call capacity of the gateway. iSAC - Internet Speech Audio Codec RPH - Resource Priority Header DSCP - Diffserv Code Points')
class CvCallVolumeWMIntvlType(TextualConvention, Integer32):
    description = 'Represents the Id of the watermark table. Here is what different values represent 1 : Seconds Table: Here the entries are among last 60 second 2 : Minutes Table: Here the entries are among last 60 minutes 3 : Hours Table: Here the entries are among last 72 Hours 4 : Uptime Table: Here the entries are from last reload/reboot'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("secondStats", 1), ("minuteStats", 2), ("hourStats", 3), ("fromReloadStats", 4))

class CvCallVolumeStatsIntvlType(TextualConvention, Integer32):
    description = 'Represents the ids of the stats vlolume table Here is what each entry corresponds. 1 : Seconds Table: Here each entry corresponds to a second 2 : Minutes Table: Here each entry corresponds to a minute 3 : Hours Table: Here each entry corresponds to an hour'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("secondStats", 1), ("minuteStats", 2), ("hourStats", 3))

class CvSessionProtocol(TextualConvention, Integer32):
    description = 'Represents a Session Protocol used by Voice calls between a local and remote router via the IP backbone. other - none of the following. cisco - cisco proprietary H.323 Lite session protocol. sdp - Session Description Protocol. sip - Session Initiation Protocol. sccp - Skinny Call Control Protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("cisco", 2), ("sdp", 3), ("sip", 4), ("multicast", 5), ("sccp", 6))

class CvCasGroup(TextualConvention, Integer32):
    description = 'The Channel Associated Signalling Group of a T1/E1. The valid CAS group range is from 0 to 23 for T1 and from 0 to 30 for E1. The value -1 indicates CAS group is disabled.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1, 30)

class CvAmrNbBitRateMode(TextualConvention, Bits):
    description = 'Represents GSM AMR-NB bit rate modes. CodecMode Bit-rate (kbps) 0 4.75 1 5.15 2 5.90 3 6.70 4 7.40 5 7.95 6 10.2 7 12.2'
    status = 'current'
    namedValues = NamedValues(("amrBitRateMode0", 0), ("amrBitRateMode1", 1), ("amrBitRateMode2", 2), ("amrBitRateMode3", 3), ("amrBitRateMode4", 4), ("amrBitRateMode5", 5), ("amrBitRateMode6", 6), ("amrBitRateMode7", 7))

class CvAmrNbRtpEncap(TextualConvention, Integer32):
    description = 'Represents GSM AMR-NB codec RTP encapsulation type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("rfc3267", 1))

class CvIlbcFrameMode(TextualConvention, Integer32):
    reference = 'RFC 3952: Section 4.2 for details about iLBC mode'
    description = 'This Texatual Convention represents the iLBC codec frame modes. The possible values are : frameMode20: This mode operates at 15.2 kbps and each frame is packetized in 38 bytes. frameMode30: This mode operates at 13.33 kbps and each frame is packetized in 50 bytes.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(20, 30))
    namedValues = NamedValues(("frameMode20", 20), ("frameMode30", 30))

class CvCallConnectionType(TextualConvention, Integer32):
    description = 'Call connection represents the connection/association/session between two media call end points. Following are the different connection types. h323 - h323 protocol. sip - Session Initiation Protocol. mgcp - Media Gateway Control Protocol. sccp - Cisco proprietary Skinny Call Control Protocol. multicast - multicast call connections. cacontrol - Call Agent Control. telephony - telephony signal call connections.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("h323", 1), ("sip", 2), ("mgcp", 3), ("sccp", 4), ("multicast", 5), ("cacontrol", 6), ("telephony", 7))

cvdcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 1))
cvGeneralConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 1))
cvPeer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2))
cvGatewayCallActive = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3))
cvGatewayCallHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4))
cvGeneralPoorQoVNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvGeneralPoorQoVNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: cvGeneralPoorQoVNotificationEnable.setDescription("This object indicates whether cvdcPoorQoVNotification (or the newer cvdcPoorQoVNotificationRev1) traps should be generated for a poor quality of voice calls. If the value of this object is 'true', cvdcPoorQoVNotification (or the newer cvdcPoorQoVNotificationRev1) traps will be generated for all voice over IP peers when a poor quality of voice call condition is detected after the voice gateway call disconnection. If the value of this object is 'false', cvdcPoorQoVNotification (or the newer cvdcPoorQoVNotificationRev1) traps will be generated only for calls for which the cvVoIPPeerCfgPoorQoVNotificationEnable object of voice over IP peers having set to 'true'.")
cvGeneralFallbackNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvGeneralFallbackNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: cvGeneralFallbackNotificationEnable.setDescription("This object indicates whether cvdcFallbackNotification traps should be generated for fallback. If the value of this object is 'true', cvdcFallbackNotification traps will be generated for all voice over IP peers.")
cvGeneralDSCPPolicyNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvGeneralDSCPPolicyNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: cvGeneralDSCPPolicyNotificationEnable.setDescription("This object indicates whether cvdcPolicyViolationNotification traps should be generated for a RPH to DSCP mapping violation for SIP voice calls. If the value of this object is 'true', cvdcPolicyViolationNotification traps will be generated for SIP voice over IP peers when a RPH to DSCP violation condition is detected . If the value of this object is 'false', cvdcPolicyViolationNotification traps will be generated only for calls for which the cvVoIPPeerCfgDSCPPolicyNotificationEnable object of voice over IP peers having set to 'true'.")
cvGeneralMediaPolicyNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvGeneralMediaPolicyNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: cvGeneralMediaPolicyNotificationEnable.setDescription("This object indicates whether cvdcPolicyViolationNotification traps should be generated for Media violation for SIP voice calls. If the value of this object is 'true', cvdcPolicyViolationNotification traps will be generated for SIP voice over IP peers when media violation condition is detected . If the value of this object is 'false', cvdcPolicyViolationNotification traps will be generated only for calls for which the cvVoIPPeerCfgMediaPolicyNotificationEnable object of voice over IP peers having set to 'true'.")
cvPeerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 1), )
if mibBuilder.loadTexts: cvPeerCfgTable.setStatus('current')
if mibBuilder.loadTexts: cvPeerCfgTable.setDescription('The table contains the Voice Generic Peer information that is used to create an ifIndexed row with an appropriate ifType that is associated with the cvPeerCfgType and cvPeerCfgPeerType objects.')
cvPeerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgIndex"))
if mibBuilder.loadTexts: cvPeerCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cvPeerCfgEntry.setDescription("A single voice generic Peer. The creation of this entry will create an associated ifEntry with an ifType that is associated with cvPeerCfgType, i.e., for 'voiceEncap' encapsulation, an ifEntry will contain an ifType voiceEncap(103); for 'voiceOverIp' encapsulation, an ifEntry will contain an ifType voiceOverIp(104). The ifAdminStatus of the newly created ifEntry is set to 'up' and ifOperStatus is set to 'down'. In addition, an associated voiceEncap/voiceOverIp Peer configuration entry is created after the successful ifEntry creation. Then ifIndex of the newly created ifEntry must be used by the network manager to create a peer configuration entry of IETF Dial Control MIB (Refer to RFC 2128 section 2.2.3.1 and the description of dialCtlPeerCfgEntry for the detailed information). In summary, the voice dial peer creation steps are as follows: [1] create this entry (voice/data generic peer entry). [2] read the cvPeerCfgIfIndex of this entry for the ifIndex of newly created voice/data generic peer. [3] create the dialCtlPeerCfgEntry of RFC 2128 with the indices of dialCtlPeerCfgId and the ifIndex of newly created voice generic peer. For each VoIP peer, it uses IP address and UDP port with RTP protocol to transfer voice packet. Therefore, it does not have its lower layer interface. The dialCtlPeerCfgIfType object of IETF Dial Control MIB must set to 'other' and the dialCtlPeerCfgLowerIf must set to '0'. After the successful creation of peer configuration entry of IETF Dial Control MIB, the dial plan software in managed device will set the ifOperStatus of the newly created voiceEncap/voiceOverIp ifEntry to 'up' for enabling the peer function if the peer configuration is completed. When this entry is deleted, its associated ifEntry, voiceEncap/voiceOverIp specific peer entry and the peer entry of IETF Dial Control MIB are deleted.")
cvPeerCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cvPeerCfgIndex.setStatus('current')
if mibBuilder.loadTexts: cvPeerCfgIndex.setDescription('An arbitrary index that uniquely identifies a generic voice peer.')
cvPeerCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 1, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvPeerCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: cvPeerCfgIfIndex.setDescription('The ifIndex of the peer associated ifEntry. The ifIndex appears after the associated ifEntry is created successfully. This ifIndex will be used to access the objects in the Voice over Telephony or Voice over IP peer specific table. In addition, the ifIndex is also used to access the associated peer configuration entry of the IETF Dial Control MIB. If the peer associated ifEntry had not been created, then this object has a value of zero.')
cvPeerCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("voice", 1), ("voip", 2), ("mmail", 3), ("voatm", 4), ("vofr", 5))).clone('voice')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvPeerCfgType.setStatus('current')
if mibBuilder.loadTexts: cvPeerCfgType.setDescription('Specifies the type of voice related encapsulation. voice - voice encapsulation (voiceEncap ifType) on the telephony network. voip - VoIP encapsulation (voiceOverIp ifType) on the IP network. mmail - Media Mail over IP encapsulation (mediaMailOverIp ifType) on the IP network. voatm - VoATM encapsulation (voiceOverATM ifType) on the ATM network. vofr - VoFR encapsulation (voiceOverFR ifType) on the Frame Relay network.')
cvPeerCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvPeerCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: cvPeerCfgRowStatus.setDescription('This object is used to create a new row or modify or delete an existing row in this table.')
cvPeerCfgPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voice", 1), ("data", 2))).clone('voice')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvPeerCfgPeerType.setStatus('current')
if mibBuilder.loadTexts: cvPeerCfgPeerType.setDescription('Specifies the type of a peer. voice - peer in voice type to be defined in a voice gateway for voice calls. data - peer in data type to be defined in gateway that supports universal ports for modem/data calls and integrated ports for data calls.')
cvVoicePeerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 2), )
if mibBuilder.loadTexts: cvVoicePeerCfgTable.setStatus('current')
if mibBuilder.loadTexts: cvVoicePeerCfgTable.setDescription('The table contains the Voice over Telephony peer specific information that is required to accept voice calls or to which it will place them or perform various loopback tests via interface.')
cvVoicePeerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvVoicePeerCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cvVoicePeerCfgEntry.setDescription("A single Voice specific Peer. One entry per voice encapsulation. The entry is created when its associated 'voiceEncap(103)' encapsulation ifEntry is created. This entry is deleted when its associated ifEntry is deleted.")
cvVoicePeerCfgSessionTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoicePeerCfgSessionTarget.setStatus('current')
if mibBuilder.loadTexts: cvVoicePeerCfgSessionTarget.setDescription("The object specifies the session target of the peer. Session Targets definitions: The session target has the syntax used by the IETF service location protocol. The syntax is as follows: mapping-type:type-specific-syntax the mapping-type specifies a scheme for mapping the matching dial string to a session target. The valid Mapping type definitions for the peer are as follows: loopback - Syntax: loopback:where 'where' string is defined as follows: compressed - loopback is performed on compressed voice as close to the CODEC which processes the data as possible. uncompressed - loopback is performed on the PCM or analog voice as close to the telephony endpoint as possible. Local loopback case: uncompressed - the PCM voice coming into the DSP is simply turned around and sent back out, allowing testing of the transmit--> receive paths in the telephony endpoint. compressed - the compressed voice coming out of the CODEC is turned around on the DSP module and fed back into the decompressor through the jitter buffer. In addition to the telephony endpoint, this tests both the encode and decode paths without involving data paths or packet handling on the host router. Remote loopback case: compressed - RTP packets received from the network are decapsulated and passed to the DSP board. Instead of feeding these into the CODEC for decompression, they are immediately sent back to the session application as if they had originated locally and been compressed. uncompressed - In addition to the above, the voice samples are sent all the way through the CODEC and then turned around instead of being sent to the telephony endpoint")
cvVoicePeerCfgDialDigitsPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoicePeerCfgDialDigitsPrefix.setStatus('current')
if mibBuilder.loadTexts: cvVoicePeerCfgDialDigitsPrefix.setDescription('The object specifies the prefix of the dial digits for the peer. The dial digits prefix is sent to telephony interface before the real phone number when the system places the outgoing call to the voice encapsulation peer over telephony interface.')
cvVoicePeerCfgDIDCallEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoicePeerCfgDIDCallEnable.setStatus('current')
if mibBuilder.loadTexts: cvVoicePeerCfgDIDCallEnable.setDescription('The object enables/disables the DID call treatment for incoming DNIS digits. true - treat the incoming DNIS digits as if the digits are received from DID trunk. false - Disable DID call treatment for incoming DNIS digits.')
cvVoicePeerCfgCasGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 2, 1, 4), CvCasGroup().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoicePeerCfgCasGroup.setStatus('current')
if mibBuilder.loadTexts: cvVoicePeerCfgCasGroup.setDescription('The object specifies the CAS group number of a CAS capable T1/E1 that is in the dialCtlPeerCfgLowerIf object of RFC2128. This object can be set to a valid CAS group number only if the dialCtlPeerCfgLowerIf contains a valid ifIndex for a CAS capable T1/E1. The object must set to -1 before the value of the dialCtlPeerCfgLowerIf object of RFC2128 can be changed.')
cvVoicePeerCfgRegisterE164 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoicePeerCfgRegisterE164.setStatus('current')
if mibBuilder.loadTexts: cvVoicePeerCfgRegisterE164.setDescription('This object specifies that the E.164 number specified in the dialCtlPeerCfgOriginateAddress field of the associated dialCtlPeerCfgTable entry be registered as an extension phone number of this gateway for H323 gatekeeper and/or SIP registrar.')
cvVoicePeerCfgForwardDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-3, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoicePeerCfgForwardDigits.setStatus('current')
if mibBuilder.loadTexts: cvVoicePeerCfgForwardDigits.setDescription('This object specifies the number of dialed digits to forward to the remote destination in the setup message. The object can take the value: 0-32 number of right justified digits to forward -1 default -2 forward extra digits i.e those over and above those needed to match to the destination pattern -3 forward all digits')
cvVoicePeerCfgEchoCancellerTest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("echoCancellerTestNone", 1), ("echoCancellerG168Test2A", 2), ("echoCancellerG168Test2B", 3), ("echoCancellerG168Test2Ca", 4), ("echoCancellerG168Test2Cb", 5), ("echoCancellerG168Test3A", 6), ("echoCancellerG168Test3B", 7), ("echoCancellerG168Test3C", 8), ("echoCancellerG168Test4", 9), ("echoCancellerG168Test6", 10), ("echoCancellerG168Test9", 11), ("echoCancellerG168Test5", 12), ("echoCancellerG168Test7", 13))).clone('echoCancellerTestNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoicePeerCfgEchoCancellerTest.setReference('ITU-T G.168(04/2000): Section 6.4 Tests and requirements for performance with input signals applied to the send and receive paths.')
if mibBuilder.loadTexts: cvVoicePeerCfgEchoCancellerTest.setStatus('current')
if mibBuilder.loadTexts: cvVoicePeerCfgEchoCancellerTest.setDescription('This object specifies which, if any, test to run in the echo canceller when a call from the network is connected. echoCancellerTestNone - do not run a test. echoCancellerG168Test2A - run ITU-T G.168 Test 2A. echoCancellerG168Test2B - run ITU-T G.168 Test 2B. echoCancellerG168Test2Ca - run ITU-T G.168 Test 2C(a). echoCancellerG168Test2Cb - run ITU-T G.168 Test 2C(b). echoCancellerG168Test3A - run ITU-T G.168 Test 3A. echoCancellerG168Test3B - run ITU-T G.168 Test 3B. echoCancellerG168Test3C - run ITU-T G.168 Test 3C. echoCancellerG168Test4 - run ITU-T G.168 Test 4. echoCancellerG168Test5 - run ITU-T G.168 Test 5. echoCancellerG168Test6 - run ITU-T G.168 Test 6. echoCancellerG168Test7 - run ITU-T G.168 Test 7. echoCancellerG168Test9 - run ITU-T G.168 Test 9.')
cvVoIPPeerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3), )
if mibBuilder.loadTexts: cvVoIPPeerCfgTable.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgTable.setDescription('The table contains the Voice over IP (VoIP) peer specific information that is required to accept voice calls or to which it will place them via IP backbone with the specified session protocol in cvVoIPPeerCfgSessionProtocol.')
cvVoIPPeerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvVoIPPeerCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgEntry.setDescription("A single VoIP specific Peer. One entry per VoIP encapsulation. The entry is created when its associated 'voiceOverIp(104)' encapsulation ifEntry is created. This entry is deleted when its associated ifEntry is deleted.")
cvVoIPPeerCfgSessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 1), CvSessionProtocol().clone('cisco')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgSessionProtocol.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgSessionProtocol.setDescription('The object specifies the session protocol to be used for Internet call between local and remote router via IP backbone.')
cvVoIPPeerCfgDesiredQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 2), QosService().clone('bestEffort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgDesiredQoS.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgDesiredQoS.setDescription('The object specifies the user requested Quality of Service for the call.')
cvVoIPPeerCfgMinAcceptableQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 3), QosService().clone('bestEffort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgMinAcceptableQoS.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgMinAcceptableQoS.setDescription('The object specifies the minimally acceptable Quality of Service for the call.')
cvVoIPPeerCfgSessionTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgSessionTarget.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgSessionTarget.setDescription("The object specifies the session target of the peer. Session Targets definitions: The session target has the syntax used by the IETF service location protocol. The syntax is as follows: mapping-type:type-specific-syntax the mapping-type specifies a scheme for mapping the matching dial string to a session target. The type-specific-syntax is exactly that, something that the particular mapping scheme can understand. For example, Session target Meaning ipv4:171.68.13.55:1006 The session target is the IP version 4 address of 171.68.13.55 and port 1006. dns:pots.cisco.com:1661 The session target is the IP host with dns name pots.cisco.com, and port 1661. ras The session target is the gatekeeper with RAS (Registration , Admission, Status protocol). settlement The session target is the settlement server. enum:1 The session target is the enum profile match table 1. The valid Mapping type definitions for the peer are as follows: ipv4 - Syntax: ipv4:w.x.y.z:port or ipv4:w.x.y.z dns - Syntax: dns:host.domain:port or dns:host.domain ras - Syntax: ras settlement - Syntax: settlement enum - Syntax: enum: loopback - Syntax: loopback:where 'where' string is defined as follows: rtp - loopback is performed at the transport protocol level. Local loopback case: rtp - the session application sets up an RTP stream to itself (i.e. actually allocates a port pair and opens the appropriate UDP sockets). It then does the full RTP encapsulation, sends the packets to the loopback IP address, receives the RTP packets, and hands the compressed voice back to the CODEC. This tests the entire local processing path, both transmit and receive, in the router, as well as all of the above paths. Remote loopback case: rtp: RTP packets received from the network are decapsulated and immediately re-encapsulated in the outbound RTP stream, using the same media clock (i.e. timestamp) as the received packet. They are then sent back to the remote source router as if the voice had originated on a telephony port on the local router.")
cvVoIPPeerCfgCoderRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 5), CvcSpeechCoderRate().clone('g729IETFr8000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgCoderRate.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgCoderRate.setDescription('This object specifies the most desirable codec of speech for the VoIP peer.')
cvVoIPPeerCfgFaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 6), CvcFaxTransmitRate().clone('voiceRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgFaxRate.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgFaxRate.setDescription("This object specifies the default transmit rate of FAX the VoIP peer. If the value of this object is 'none', then the Fax relay feature is disabled; otherwise the Fax relay feature is enabled.")
cvVoIPPeerCfgVADEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgVADEnable.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgVADEnable.setDescription('This object specifies whether or not the VAD (Voice Activity Detection) voice data is continuously transmitted to IP backbone.')
cvVoIPPeerCfgExpectFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setUnits('equipment impairment factor (eif)').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgExpectFactor.setReference('ITU G.113: Sections 8 Considerations Concerning the Expectation Factor A.')
if mibBuilder.loadTexts: cvVoIPPeerCfgExpectFactor.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgExpectFactor.setDescription('This object specifies the user requested Expectation Factor of voice quality for the call via this peer.')
cvVoIPPeerCfgIcpif = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 55)).clone(20)).setUnits('equipment impairment factor (eif)').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgIcpif.setReference('ITU G.113: Sections 9 Considerations associated with the Calculated Planning Impairment Factor (Icpif)')
if mibBuilder.loadTexts: cvVoIPPeerCfgIcpif.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgIcpif.setDescription('This object specifies the user requested Calculated Planning Impairment Factor (Icpif) for the call via this peer.')
cvVoIPPeerCfgPoorQoVNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgPoorQoVNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgPoorQoVNotificationEnable.setDescription('This object specifies whether cvdcPoorQoVNotification (or the newer cvdcPoorQoVNotificationRev1) traps should be generated for the call that is associated with this peer.')
cvVoIPPeerCfgUDPChecksumEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgUDPChecksumEnable.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgUDPChecksumEnable.setDescription('This object specifies whether the outgoing voice related UDP packet contains a valid checksum value. true - enable the checksum of outgoing voice UDP packets false - disable the checksum of outgoing voice UDP packets')
cvVoIPPeerCfgIPPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgIPPrecedence.setReference('RFC 791: Section 3.1. Internet Header Format; Type of Service.')
if mibBuilder.loadTexts: cvVoIPPeerCfgIPPrecedence.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgIPPrecedence.setDescription('This object specifies the value to be stored in the IP Precedence field of voice packets, with values ranging from 0 (normal precedence) through 7 (network control), allowing the managed system to set the importance of each voice packet for delivering them to the destination peer.')
cvVoIPPeerCfgTechPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgTechPrefix.setReference('ITU-T H.225.0: Section 7.6 Common Message Elements.')
if mibBuilder.loadTexts: cvVoIPPeerCfgTechPrefix.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgTechPrefix.setDescription('This object specifies the technology prefix of the peer, The technology prefix and the called party address are passed in Admission Request (ARQ) to gatekeeper for the called party address resolution during call setup.')
cvVoIPPeerCfgDigitRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 14), Bits().clone(namedValues=NamedValues(("rtpCisco", 0), ("h245Signal", 1), ("h245Alphanumeric", 2), ("rtpNte", 3), ("sipNotify", 4), ("sipKpml", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgDigitRelay.setReference('[1] ITU H.245: Section 6. [2] RFC 2833 : Section 3.')
if mibBuilder.loadTexts: cvVoIPPeerCfgDigitRelay.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgDigitRelay.setDescription('This object specifies the methods to transmit dial digits (DTMF or MF digits) via IP network. rtpCisco - Enable capability to transmit dial digits with Cisco proprietary RTP payload type. h245Signal - Enable capability to transmit dtmf digits across the H.245 channel, via the signal field of the UserInputIndication message h245Alphanumeric - Enable capability to transmit dtmf digit across the H.245 channel, via the string or alphanumeric fields of the UserInputIndication message rtpNte - Enable capability to transmit dial digits using Named Telephony Event per RFC 2833 section 3. sipNotify - Enable capability to transmit dtmf digits using unsolicited SIP NOTIFY messages. This mechanism is only available for SIP dialpeers. sipKpml - Enable capability to transmit dtmf digits using KPML over SIP SUBSCRIBE and NOTIFY messages. This mechanism is only available for SIP dialpeers. Modifying the value of cvVoIPPeerCfgSessionProtocol can reset the digit-relay method associated bits value in this object if the modified session protocol does not support these digit-relay methods.')
cvVoIPPeerCfgCoderBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 240), ))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgCoderBytes.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgCoderBytes.setDescription('This object specifies the size of the voice payload sample to be produced by the coder specified in cvVoIPPeerCfgCoderRate. Each coder sample produces 10 bytes of voice payload. The specified value will be rounded down to the nearest valid size. A value of 0, specifies that the coder defined by cvVoIPPeerCfgCoderRate should produce its default payload size.')
cvVoIPPeerCfgFaxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 255), ))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgFaxBytes.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgFaxBytes.setDescription('This object specifies the payload size to be produced by the coder when it is generating fax data. A value of 0, specifies that the coder specified in cvVoIPCfgPeerCoderRate should produce its default fax payload size.')
cvVoIPPeerCfgInBandSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 17), CvcInBandSignaling().clone('cas')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgInBandSignaling.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgInBandSignaling.setDescription('This object specifies the type of in-band signaling that will be used between the end points of the call. It is used by the router to determine how to interpret ABCD signaling bits sent as part of voice payload data.')
cvVoIPPeerCfgMediaSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flowThrough", 1), ("flowAround", 2))).clone('flowThrough')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgMediaSetting.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgMediaSetting.setDescription('This object specifies how the media is to be setup on an IP-IP Gateway. Two choices are valid: flow-through and flow-around. When in flow-through mode, which is the default setting, the IP-IP Gateway will terminate and then re-originate the media stream. When flow-around is configured the Gateway will not be involved with the media, since it will flow-around the Gateway and will be established directly between the endpoints.')
cvVoIPPeerCfgDesiredQoSVideo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 24), QosService().clone('bestEffort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgDesiredQoSVideo.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgDesiredQoSVideo.setDescription('The object specifies the user requested Quality of Service for the video portion of the call.')
cvVoIPPeerCfgMinAcceptableQoSVideo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 25), QosService().clone('bestEffort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgMinAcceptableQoSVideo.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgMinAcceptableQoSVideo.setDescription('The object specifies the minimally acceptable Quality of Service for the video portion of the call.')
cvVoIPPeerCfgRedirectip2ip = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 26), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgRedirectip2ip.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgRedirectip2ip.setDescription('This object specifies the Inbound VoIP calls that match an outbound VoIP dialpeer will be responded with a SIP redirect(for inbound SIP) or H.450.3 call-forward(for inbound H.323).')
cvVoIPPeerCfgOctetAligned = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 27), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgOctetAligned.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgOctetAligned.setDescription('If the object has a value true(1) octet align operation is used, and if the value is false(2), bandwidth efficient operation is used. This object is not instantiated when the object cvVoIPPeerCfgCoderRate is not equal to gsmAmrNb enum.')
cvVoIPPeerCfgBitRates = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 28), CvAmrNbBitRateMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgBitRates.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgBitRates.setDescription('This object indicates modes of Bit rates. One or more upto four modes can be configured at the same time as bit rates can be changed dynamically for AMR-NB codec. This object is not instantiated when the object cvVoIPPeerCfgCoderRate is not equal to gsmAmrNb enum.')
cvVoIPPeerCfgCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 29), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgCRC.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgCRC.setDescription('If the object has a value of true(1), frame CRC will be included in the payload and if the value is false(2), frame CRC will not be included in the payload. This object is applicable only when RTP frame type is octet aligned. This object is not instantiated when the object cvVoIPPeerCfgCoderRate is not equal to gsmAmrNb enum.')
cvVoIPPeerCfgCoderMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 30), CvIlbcFrameMode().clone('frameMode20')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgCoderMode.setReference('RFC 3952: Section 4.2 - MIME Registration of iLBC')
if mibBuilder.loadTexts: cvVoIPPeerCfgCoderMode.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgCoderMode.setDescription("This object indicates the iLBC codec mode to be used. The value of this object is valid only if cvVoIPPeerCfgCoderRate is equal to 'iLBC'.")
cvVoIPPeerCfgCodingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("adaptive", 1), ("independent", 2))).clone('independent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgCodingMode.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgCodingMode.setDescription("This object specifies the coding mode to be used. The object is instantiated only if cvVoIPPeerCfgCoderRate is 'iSAC'. Following coding modes are supported: adaptive (1) - adaptive mode where iSAC performs bandwidth estimation and adapts to the available channel bandwidth. independent (2) - independent mode in which no bandwidth estimation is performed.")
cvVoIPPeerCfgBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10000, 32000)).clone(32000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgBitRate.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgBitRate.setDescription("This object specifies the target bit rate. The object is instantiated only if cvVoIPPeerCfgCoderRate is 'iSAC'.")
cvVoIPPeerCfgFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("frameSize30", 1), ("frameSize60", 2), ("frameSize30fixed", 3), ("frameSize60fixed", 4))).clone('frameSize30')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgFrameSize.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgFrameSize.setDescription("This object specifies the frame size used. The object is instantiated only if cvVoIPPeerCfgCoderRate is 'iSAC'. The frame size can be 30 ms or 60 ms, and it can be fixed for all packets or vary depending on the configuration and bandwidth estimation. Thus it can have the following values: frameSize30 - initial frame size of 30 ms frameSize60 - initial frame size of 60 ms frameSize30fixed - fixed frame size 30 ms frameSize60fixed - fixed frame size 60 ms")
cvVoIPPeerCfgDSCPPolicyNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 34), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgDSCPPolicyNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgDSCPPolicyNotificationEnable.setDescription('This object specifies whether cvdcPolicyViolationNotification traps should be generated for the call that is associated with this peer for RPH to DSCP mapping and policing feature.')
cvVoIPPeerCfgMediaPolicyNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 35), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgMediaPolicyNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: cvVoIPPeerCfgMediaPolicyNotificationEnable.setDescription('This object specifies whether cvdcPolicyViolationNotification traps should be generated for the call that is associated with this peer for Media policing feature..')
cvPeerCommonCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4), )
if mibBuilder.loadTexts: cvPeerCommonCfgTable.setStatus('current')
if mibBuilder.loadTexts: cvPeerCommonCfgTable.setDescription('The table contains the Voice specific peer common configuration information that is required to accept voice calls or to which it will place them or process the incoming calls.')
cvPeerCommonCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvPeerCommonCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cvPeerCommonCfgEntry.setDescription('A single Voice specific Peer. One entry per voice related encapsulation. The entry is created when a voice related encapsulation ifEntry is created. This entry is deleted when its associated ifEntry is deleted.')
cvPeerCommonCfgIncomingDnisDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgIncomingDnisDigits.setStatus('current')
if mibBuilder.loadTexts: cvPeerCommonCfgIncomingDnisDigits.setDescription('The object specifies the prefix of the incoming Dialed Number Identification Service (DNIS) digits for the peer. The DNIS digits prefix is used to match with the incoming DNIS number for incoming call discrimination. If the digits in this object are matched with incoming DNIS number, the associated dialCtlPeerCfgInfoType in RFC 2128 will be used as a call discriminator for differentiating speech, data, fax, video or modem calls.')
cvPeerCommonCfgMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 2147483647), )).clone(-1)).setUnits('connections').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgMaxConnections.setStatus('current')
if mibBuilder.loadTexts: cvPeerCommonCfgMaxConnections.setDescription('The object specifies the maximum allowed connection to/from the peer. A value of -1 disables the limit of maximum connections.')
cvPeerCommonCfgApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgApplicationName.setStatus('current')
if mibBuilder.loadTexts: cvPeerCommonCfgApplicationName.setDescription('The object specifies the application to handle the incoming call after the peer is selected. If no application name is specified, then the default session application will take care of the incoming call.')
cvPeerCommonCfgPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgPreference.setStatus('current')
if mibBuilder.loadTexts: cvPeerCommonCfgPreference.setDescription('This object specifies the selection preference of a peer when multiple peers are matched to the selection criteria. The value of 0 has the lowest preference for peer selection.')
cvPeerCommonCfgHuntStop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgHuntStop.setStatus('current')
if mibBuilder.loadTexts: cvPeerCommonCfgHuntStop.setDescription('This object specifies whether dialpeer hunting should stop when this peer is reached.')
cvPeerCommonCfgDnisMappingName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 6), DnisMapname()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgDnisMappingName.setStatus('current')
if mibBuilder.loadTexts: cvPeerCommonCfgDnisMappingName.setDescription('The object specifies a Dialer Number Identification Service (DNIS) map name for the Voice specific peer entry specified in this row. A DNIS is a called party number and they can be grouped and identified by DNIS map.')
cvPeerCommonCfgSourceCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgSourceCarrierId.setStatus('current')
if mibBuilder.loadTexts: cvPeerCommonCfgSourceCarrierId.setDescription("The object specifies the Source Carrier Id for the peer. The Source Carrier Id is used to match with the Source Carrier Id of a call. If the Source Carrier Id in this object is matched with the Source Carrier Id of a call, then the associated peer will be used to handle the call. Only alphanumeric characters, '-' and '_' are allowed in the string.")
cvPeerCommonCfgTargetCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 8), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgTargetCarrierId.setStatus('current')
if mibBuilder.loadTexts: cvPeerCommonCfgTargetCarrierId.setDescription("The object specifies the Target Carrier Id for the peer. The Target Carrier Id is used to match with the Target Carrier Id of a call. If the Target Carrier Id in this object is matched with the Target Carrier Id of a call, then the associated peer will be used to handle the call. Only alphanumeric characters, '-' and '_' are allowed in the string.")
cvPeerCommonCfgSourceTrunkGrpLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 9), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgSourceTrunkGrpLabel.setStatus('current')
if mibBuilder.loadTexts: cvPeerCommonCfgSourceTrunkGrpLabel.setDescription("The object specifies the Source Trunk Group Label for the peer. The Source Trunk Group Label is used to match with the Source Trunk Group Label of a call. If the Source Trunk Group Label in this object is matched with the Source Trunk Group Label of a call, then the associated peer will be used to handle the call. Only alphanumeric characters, '-' and '_' are allowed in the string.")
cvPeerCommonCfgTargetTrunkGrpLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 10), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgTargetTrunkGrpLabel.setStatus('current')
if mibBuilder.loadTexts: cvPeerCommonCfgTargetTrunkGrpLabel.setDescription("The object specifies the Target Trunk Group Label for the peer. The Target Trunk Group Label is used to match with the Target Trunk Group Label of a call. If the Target Trunk Group Label in this object is matched with the Target Trunk Group Label of a call, then the associated peer will be used to handle the call. Only alphanumeric characters, '-' and '_' are allowed in the string.")
cvCallActiveTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1), )
if mibBuilder.loadTexts: cvCallActiveTable.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveTable.setDescription('This table is the voice extension to the call active table of IETF Dial Control MIB. It contains voice encapsulation call leg information that is derived from the statistics of lower layer telephony interface.')
cvCallActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1), ).setIndexNames((0, "DIAL-CONTROL-MIB", "callActiveSetupTime"), (0, "DIAL-CONTROL-MIB", "callActiveIndex"))
if mibBuilder.loadTexts: cvCallActiveEntry.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveEntry.setDescription('The information regarding a single voice encapsulation call leg. The call leg entry is identified by using the same index objects that are used by Call Active table of IETF Dial Control MIB to identify the call. An entry of this table is created when its associated call active entry in the IETF Dial Control MIB is created and call active entry contains the call establishment to a voice over telephony network peer. The entry is deleted when its associated call active entry in the IETF Dial Control MIB is deleted.')
cvCallActiveConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 1), CvcGUid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveConnectionId.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveConnectionId.setDescription('The global connection identifier for the active telephony leg of the call.')
cvCallActiveTxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 2), AbsoluteCounter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveTxDuration.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveTxDuration.setDescription('Duration of Transmit path open from this peer to the voice gateway for the call leg. This counter object will lock at the maximum value which is approximately two days.')
cvCallActiveVoiceTxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 3), AbsoluteCounter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveVoiceTxDuration.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveVoiceTxDuration.setDescription('Duration of voice transmitted from this peer to voice gateway for this call leg. The Voice Utilization Rate can be obtained by dividing this by cvCallActiveTXDuration object. This counter object will lock at the maximum value which is approximately two days.')
cvCallActiveFaxTxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 4), AbsoluteCounter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveFaxTxDuration.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveFaxTxDuration.setDescription('Duration of fax transmitted from this peer to voice gateway for this call leg. The FAX Utilization Rate can be obtained by dividing this by cvCallActiveTXDuration object. This counter object will lock at the maximum value which is approximately two days.')
cvCallActiveCoderTypeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 5), CvcCoderTypeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveCoderTypeRate.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveCoderTypeRate.setDescription('The negotiated coder rate. It specifies the transmit rate of voice/fax compression to its associated call leg for the call.')
cvCallActiveNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 8))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveNoiseLevel.setDescription('The object contains the active noise level for the call leg.')
cvCallActiveACOMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveACOMLevel.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveACOMLevel.setDescription('The object contains the sum of Echo Return Loss (ERL), cancellation loss (Echo Return Loss Enhancement) and nonlinear processing loss for the call leg. The value -1 indicates the level can not be determined or level detection is disabled.')
cvCallActiveOutSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 8))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveOutSignalLevel.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveOutSignalLevel.setDescription('The object contains the active output signal level to telephony interface that is used by the call leg.')
cvCallActiveInSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 8))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveInSignalLevel.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveInSignalLevel.setDescription('The object contains the active input signal level from telephony interface that is used by the call leg.')
cvCallActiveERLLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 45))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveERLLevel.setStatus('deprecated')
if mibBuilder.loadTexts: cvCallActiveERLLevel.setDescription('The object contains the current Echo Return Loss (ERL) level for the call leg. The value -1 indicates the level can not be determined or level detection is disabled.')
cvCallActiveSessionTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveSessionTarget.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveSessionTarget.setDescription('The object specifies the session target of the peer that is used for the call leg. This object is set with the information in the call associated cvVoicePeerCfgSessionTarget object when the call is connected.')
cvCallActiveImgPageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 12), AbsoluteCounter32()).setUnits('pages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveImgPageCount.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveImgPageCount.setDescription('The number of FAX related image pages are received or transmitted via the peer for the call leg.')
cvCallActiveCallingName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveCallingName.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveCallingName.setDescription('The calling party name of the call. If the name is not available, then it will have a length of zero.')
cvCallActiveCallerIDBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveCallerIDBlock.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveCallerIDBlock.setDescription('The object indicates whether or not the caller ID feature is blocked for this call.')
cvCallActiveEcanReflectorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveEcanReflectorLocation.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveEcanReflectorLocation.setDescription('The location in milliseconds of the largest amplitude reflector detected by the echo canceller for this call. The value 0 indicates there is no reflector or the information is not available.')
cvCallActiveAccountCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveAccountCode.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveAccountCode.setDescription('The object indicates the account code input to the call. It could be used for call screen or by down stream server for billing purpose. The value of empty string indicates no account code input.')
cvCallActiveERLLevelRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 200))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveERLLevelRev1.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveERLLevelRev1.setDescription('The object contains the current Echo Return Loss (ERL) level for the call leg. The value -1 indicates the level can not be determined or level detection is disabled.')
cvCallActiveCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveCallId.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveCallId.setDescription('This object represents the call identifier for the active telephony leg of the call.')
cvVoIPCallActiveTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2), )
if mibBuilder.loadTexts: cvVoIPCallActiveTable.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveTable.setDescription('This table is the VoIP extension to the call active table of IETF Dial Control MIB. It contains VoIP call leg information about specific VoIP call destination and the selected QoS for the call leg.')
cvVoIPCallActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1), ).setIndexNames((0, "DIAL-CONTROL-MIB", "callActiveSetupTime"), (0, "DIAL-CONTROL-MIB", "callActiveIndex"))
if mibBuilder.loadTexts: cvVoIPCallActiveEntry.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveEntry.setDescription('The information regarding a single VoIP call leg. The call leg entry is identified by using the same index objects that are used by Call Active table of IETF Dial Control MIB to identify the call. An entry of this table is created when its associated call active entry in the IETF Dial Control MIB is created and the call active entry contains information for the call establishment to the peer on the IP backbone via a voice over IP peer. The entry is deleted when its associated call active entry in the IETF Dial Control MIB is deleted.')
cvVoIPCallActiveConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 1), CvcGUid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveConnectionId.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveConnectionId.setDescription('The global connection identifier for the active VoIP leg of the call.')
cvVoIPCallActiveRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRemoteIPAddress.setStatus('deprecated')
if mibBuilder.loadTexts: cvVoIPCallActiveRemoteIPAddress.setDescription('Remote system IP address for the VoIP call.')
cvVoIPCallActiveRemoteUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRemoteUDPPort.setStatus('deprecated')
if mibBuilder.loadTexts: cvVoIPCallActiveRemoteUDPPort.setDescription('Remote system UDP listener port to which to transmit voice packets.')
cvVoIPCallActiveRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 4), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRoundTripDelay.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveRoundTripDelay.setDescription('The voice packet round trip delay between local and the remote system on the IP backbone during the call.')
cvVoIPCallActiveSelectedQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 5), QosService()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveSelectedQoS.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveSelectedQoS.setDescription('The selected RSVP QoS for the voice call.')
cvVoIPCallActiveSessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 6), CvSessionProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveSessionProtocol.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveSessionProtocol.setDescription('The object specifies the session protocol to be used for Internet call between local and remote router via IP backbone.')
cvVoIPCallActiveSessionTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveSessionTarget.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveSessionTarget.setDescription('The object specifies the session target of the peer that is used for the call. This object is set with the information in the call associated cvVoIPPeerCfgSessionTarget object when the voice over IP call is connected.')
cvVoIPCallActiveOnTimeRvPlayout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 8), AbsoluteCounter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveOnTimeRvPlayout.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveOnTimeRvPlayout.setDescription('Duration of voice playout from data received on time for this call. This plus the durations for the GapFills in the following entries gives the Total Voice Playout Duration for Active Voice. This does not include duration for which no data was sent by the Transmit end as voice signal, e.g., silence suppression and fax signal. The On Time Playout Rate can be computed by dividing this entry by the Total Voice Playout Duration. This counter object will lock at the maximum value which is approximately two days.')
cvVoIPCallActiveGapFillWithSilence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 9), AbsoluteCounter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveGapFillWithSilence.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveGapFillWithSilence.setDescription('Duration of voice signal replaced with signal played out during silence due to voice data not received on time (or lost) from voice gateway this call. This counter object will lock at the maximum value which is approximately two days.')
cvVoIPCallActiveGapFillWithPrediction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 10), AbsoluteCounter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveGapFillWithPrediction.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveGapFillWithPrediction.setDescription('Duration of voice signal played out with signal synthesized from parameters or samples of data preceding in time due to voice data not received on time (or lost) from voice gateway for this call. An example of such playout is frame-erasure or frame-concealment strategies in G.729 and G.723.1 compression algorithms. This counter object will lock at the maximum value which is approximately two days.')
cvVoIPCallActiveGapFillWithInterpolation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 11), AbsoluteCounter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveGapFillWithInterpolation.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveGapFillWithInterpolation.setDescription('Duration of voice signal played out with signal synthesized from parameters or samples of data preceding and following in time due to voice data not received on time (or lost) from voice gateway for this call. This counter object will lock at the maximum value which is approximately two days.')
cvVoIPCallActiveGapFillWithRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 12), AbsoluteCounter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveGapFillWithRedundancy.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveGapFillWithRedundancy.setDescription('Duration of voice signal played out with signal synthesized from redundancy parameters available due to voice data not received on time (or lost) from voice gateway for this call. This counter object will lock at the maximum value which is approximately two days.')
cvVoIPCallActiveHiWaterPlayoutDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 13), AbsoluteCounter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveHiWaterPlayoutDelay.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveHiWaterPlayoutDelay.setDescription('The high water mark Voice Playout FIFO Delay during the voice call. This counter object will lock at the maximum value which is approximately two days.')
cvVoIPCallActiveLoWaterPlayoutDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 14), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveLoWaterPlayoutDelay.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveLoWaterPlayoutDelay.setDescription('The low water mark Voice Playout FIFO Delay during the voice call.')
cvVoIPCallActiveReceiveDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveReceiveDelay.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveReceiveDelay.setDescription('The average Playout FIFO Delay plus the decoder delay during the voice call.')
cvVoIPCallActiveVADEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveVADEnable.setStatus('deprecated')
if mibBuilder.loadTexts: cvVoIPCallActiveVADEnable.setDescription('The object indicates whether or not the VAD (Voice Activity Detection) was enabled for the voice call.')
cvVoIPCallActiveCoderTypeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 17), CvcCoderTypeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveCoderTypeRate.setStatus('deprecated')
if mibBuilder.loadTexts: cvVoIPCallActiveCoderTypeRate.setDescription('The negotiated coder rate. It specifies the transmit rate of voice/fax compression to its associated call leg for the call. This rate is different from the configuration rate because of rate negotiation during the call.')
cvVoIPCallActiveLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 18), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveLostPackets.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveLostPackets.setDescription('The number of lost voice packets during the call.')
cvVoIPCallActiveEarlyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 19), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveEarlyPackets.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveEarlyPackets.setDescription('The number of received voice packets that arrived too early to store in jitter buffer during the call.')
cvVoIPCallActiveLatePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 20), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveLatePackets.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveLatePackets.setDescription('The number of received voice packets that arrived too late to playout with CODEC (Coder/Decoder) during the call.')
cvVoIPCallActiveUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveUsername.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveUsername.setDescription('The textual identifier of the calling party (user) of the call. If the username is not available, then the value of this object will have a length of zero.')
cvVoIPCallActiveProtocolCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveProtocolCallId.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveProtocolCallId.setDescription('The protocol-specific call identifier for the VoIP call.')
cvVoIPCallActiveRemSigIPAddrT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 23), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRemSigIPAddrT.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveRemSigIPAddrT.setDescription('This object specifies the type of address contained in the associated instance of cvVoIPCallActiveRemSigIPAddr.')
cvVoIPCallActiveRemSigIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 24), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRemSigIPAddr.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveRemSigIPAddr.setDescription('Remote signalling IP address for the VoIP call.')
cvVoIPCallActiveRemSigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRemSigPort.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveRemSigPort.setDescription('Remote signalling listener port to which to transmit voice packets.')
cvVoIPCallActiveRemMediaIPAddrT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 26), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRemMediaIPAddrT.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveRemMediaIPAddrT.setDescription('This object specifies the type of address contained in the associated instance of cvVoIPCallActiveRemMediaIPAddr.')
cvVoIPCallActiveRemMediaIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 27), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRemMediaIPAddr.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveRemMediaIPAddr.setDescription('Remote media end point IP address for the VoIP call.')
cvVoIPCallActiveRemMediaPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRemMediaPort.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveRemMediaPort.setDescription('Remote media end point listener port to which to transmit voice packets.')
cvVoIPCallActiveSRTPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveSRTPEnable.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveSRTPEnable.setDescription('The object indicates whether or not the SRTP (Secured RTP) was enabled for the voice call.')
cvVoIPCallActiveOctetAligned = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveOctetAligned.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveOctetAligned.setDescription('If the object has a value true(1) octet align operation is used, and if the value is false(2), bandwidth efficient operation is used. This object is not instantiated when the object cvVoIPCallActiveCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallActiveBitRates = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 31), CvAmrNbBitRateMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveBitRates.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveBitRates.setDescription('This object indicates modes of Bit rates. This object is not instantiated when the object cvVoIPCallActiveCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallActiveModeChgPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('frame-blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveModeChgPeriod.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveModeChgPeriod.setDescription('The object indicates the interval (N frame-blocks) at which codec mode changes are allowed. This object is not instantiated when the object cvVoIPCallActiveCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallActiveModeChgNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveModeChgNeighbor.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveModeChgNeighbor.setDescription('If the object has a value of true(1), mode changes will be made to only neighboring modes set to cvVoIPCallActiveBitRates object. If the value is false(2), mode changes will be allowed to any modes set to cvVoIPCallActiveBitRates object. This object is not instantiated when the object cvVoIPCallActiveCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallActiveMaxPtime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 100))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveMaxPtime.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveMaxPtime.setDescription('The object indicates the maximum amount of media that can be encapsulated in a payload. Supported value is 20 msec. This object is not instantiated when the object cvVoIPCallActiveCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallActiveCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveCRC.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveCRC.setDescription('If the object has a value of true(1), frame CRC will be included in the payload and if the value is false(2), frame CRC will not be included in the payload. This object is applicable only when RTP frame type is octet aligned. This object is not instantiated when the object cvVoIPCallActiveCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallActiveRobustSorting = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRobustSorting.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveRobustSorting.setDescription('If the object has a value of true(1), payload employs robust sorting and if the value is false(2), payload does not employ robust sorting. This object is applicable only when RTP frame type is octet aligned. This object is not instantiated when the object cvVoIPCallActiveCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallActiveEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 37), CvAmrNbRtpEncap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveEncap.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveEncap.setDescription('The object indicates the RTP encapsulation type. Supported RTP encapsulation type is RFC3267. This object is not instantiated when the object cvVoIPCallActiveCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallActiveInterleaving = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setUnits('frame-blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveInterleaving.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveInterleaving.setDescription('The object indicates the maximum number of frame-blocks allowed in an interleaving group. It indicates that frame-block level interleaving will be used for that session. If this object is not set, interleaving is not used. This object is applicable only when RTP frame type is octet aligned. This object is not instantiated when the object cvVoIPCallActiveCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallActivePtime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 100))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActivePtime.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActivePtime.setDescription('The object indicates the length of the time in milliseconds represented by the media of the packet. Supported value is 20 milliseconds. This object is not instantiated when the object cvVoIPCallActiveCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setUnits('channels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveChannels.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveChannels.setDescription('The object indicates the number of audio channels. Supported value is 1. This object is not instantiated when the object cvVoIPCallActiveCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallActiveCoderMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 41), CvIlbcFrameMode()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveCoderMode.setReference('RFC 3952: Section 5, for codec negotiation for iLBC mode.')
if mibBuilder.loadTexts: cvVoIPCallActiveCoderMode.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveCoderMode.setDescription("The object indicates the iLBC codec mode. The value of this object is valid only if cvVoIPCallActiveCoderTypeRate is equal to 'iLBC'.")
cvVoIPCallActiveCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveCallId.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveCallId.setDescription('This object represents the call identifier for the active VoIP leg of the call.')
cvVoIPCallActiveCallReferenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 43), CvcCallReferenceIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveCallReferenceId.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveCallReferenceId.setDescription('The call reference ID associates the video call entry and voice call entry of the same endpoint. An audio-only call may or may not have a valid call reference ID (i.e. value greater than zero), but in both cases, there will not be a video call entry associated with it. For a video call, the video-specific information is stored in a call entry in cVideoSessionActive of CISCO-VIDEO-SESSION-MIB, in which the call reference ID is also identified.')
ccVoIPCallActivePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccVoIPCallActivePolicyName.setStatus('current')
if mibBuilder.loadTexts: ccVoIPCallActivePolicyName.setDescription('This object holds the policy name. It could be media policy, DSCP policy etc.')
cvVoIPCallActiveReversedDirectionPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveReversedDirectionPeerAddress.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveReversedDirectionPeerAddress.setDescription('This object store the reversed direction peer address If the address is not available, then it will have a length of zero. If the call is ingress then it contains called number and if the call is egress then it contains calling number.')
cvVoIPCallActiveSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveSessionId.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallActiveSessionId.setDescription('This object indicates the active session ID assigned by the call manager to identify call legs that belong to the same call session.')
cvCallActiveDS0s = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 3), Gauge32()).setUnits('interfaces').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveDS0s.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveDS0s.setDescription('The current number of DS0 interfaces used for the active calls.')
cvCallActiveDS0sHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvCallActiveDS0sHighThreshold.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveDS0sHighThreshold.setDescription('A high threshold used to determine when to generate the cvdcActiveDS0sHighNotification. This object represents the percentage of active DS0s in total number of DS0s.')
cvCallActiveDS0sLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvCallActiveDS0sLowThreshold.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveDS0sLowThreshold.setDescription('A low threshold used to determine when to generate the cvdcActiveDS0sLowNotification notification. This object represents the percentage of active DS0s in total number of DS0s.')
cvCallActiveDS0sHighNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvCallActiveDS0sHighNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveDS0sHighNotifyEnable.setDescription("Specifies whether or not cvdcActiveDS0sHighNotification should be generated. 'true' : Indicates that the cvdcActiveDS0sHighNotification generation is enabled. 'false': Indicates that cvdcActiveDS0sHighNotification generation is disabled.")
cvCallActiveDS0sLowNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvCallActiveDS0sLowNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: cvCallActiveDS0sLowNotifyEnable.setDescription("Specifies whether or not cvdcActiveDS0sLowNotification should be generated. 'true' : Indicates that the cvdcActiveDS0sLowNotification generation is enabled. 'false': Indicates that cvdcActiveDS0sLowNotification generation is disabled.")
cvCallVolume = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8))
cvCallVolConnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 1), )
if mibBuilder.loadTexts: cvCallVolConnTable.setStatus('current')
if mibBuilder.loadTexts: cvCallVolConnTable.setDescription('This table represents the number of active call connections for each call connection type in the voice gateway.')
cvCallVolConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 1, 1), ).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolConnIndex"))
if mibBuilder.loadTexts: cvCallVolConnEntry.setStatus('current')
if mibBuilder.loadTexts: cvCallVolConnEntry.setDescription('An entry in the cvCallVolConnTable indicates number of active calls for a call connection type in the voice gateway.')
cvCallVolConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 1, 1, 1), CvCallConnectionType())
if mibBuilder.loadTexts: cvCallVolConnIndex.setStatus('current')
if mibBuilder.loadTexts: cvCallVolConnIndex.setDescription('This object represents index to the cvCallVolConnTable.')
cvCallVolConnActiveConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallVolConnActiveConnection.setStatus('current')
if mibBuilder.loadTexts: cvCallVolConnActiveConnection.setDescription('This object represents the total number of active calls for a connection type in the voice gateway.')
cvCallVolConnTotalActiveConnections = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallVolConnTotalActiveConnections.setStatus('current')
if mibBuilder.loadTexts: cvCallVolConnTotalActiveConnections.setDescription('This object represents the total number of active call legs in the voice gateway.')
cvCallVolConnMaxCallConnectionLicenese = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallVolConnMaxCallConnectionLicenese.setStatus('current')
if mibBuilder.loadTexts: cvCallVolConnMaxCallConnectionLicenese.setDescription('This object represents the licensed call capacity for a voice gateway. If the value is 0, no licensing is done and the gateway can be accomodate as many calls depending on its capability.')
cvCallVolPeerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 4), )
if mibBuilder.loadTexts: cvCallVolPeerTable.setStatus('current')
if mibBuilder.loadTexts: cvCallVolPeerTable.setDescription('This table represents the information about the usage of dialpeers configured in a voice gateway.')
cvCallVolPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 4, 1), )
cvPeerCfgEntry.registerAugmentions(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolPeerEntry"))
cvCallVolPeerEntry.setIndexNames(*cvPeerCfgEntry.getIndexNames())
if mibBuilder.loadTexts: cvCallVolPeerEntry.setStatus('current')
if mibBuilder.loadTexts: cvCallVolPeerEntry.setDescription('Each entry represents a row in cvCallVolPeerTable and corresponds to the information about a dialpeer configured on the voice gateway.')
cvCallVolPeerIncomingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 4, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallVolPeerIncomingCalls.setStatus('current')
if mibBuilder.loadTexts: cvCallVolPeerIncomingCalls.setDescription('This object represents the total number of active calls that has selected the dialpeer as an incoming dialpeer.')
cvCallVolPeerOutgoingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 4, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallVolPeerOutgoingCalls.setStatus('current')
if mibBuilder.loadTexts: cvCallVolPeerOutgoingCalls.setDescription('This object represents the total number of active calls that has selected the dialpeer as an outgoing dialpeer.')
cvCallVolIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 5), )
if mibBuilder.loadTexts: cvCallVolIfTable.setStatus('current')
if mibBuilder.loadTexts: cvCallVolIfTable.setDescription("This table represents the information about the usage of an IP interface in a voice gateway for voice media calls. This table has a sparse-dependent relationship with ifTable. There exists an entry in this table, for each of the entries in ifTable where ifType is one of 'ethernetCsmacd' and 'softwareLoopback'.")
cvCallVolIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvCallVolIfEntry.setStatus('current')
if mibBuilder.loadTexts: cvCallVolIfEntry.setDescription('Each entry represents a row in cvCallVolIfTable and corresponds to the information about an IP interface in the voice gateway.')
cvCallVolMediaIncomingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 5, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallVolMediaIncomingCalls.setStatus('current')
if mibBuilder.loadTexts: cvCallVolMediaIncomingCalls.setDescription('This object represents the total number of inbound active media calls through this IP interface.')
cvCallVolMediaOutgoingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 5, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallVolMediaOutgoingCalls.setStatus('current')
if mibBuilder.loadTexts: cvCallVolMediaOutgoingCalls.setDescription('This object represents the total number of outbound active media calls through the IP interface.')
cvCallRateMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 11))
cvCallRateMonitorEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 11, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvCallRateMonitorEnable.setStatus('current')
if mibBuilder.loadTexts: cvCallRateMonitorEnable.setDescription("This object represents the state of call-monitoring. A value of 'true' indicates that call-monitoring is enabled. A value of 'false' indicates that call-monitoring is disabled.")
cvCallRateMonitorTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 11, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)).clone(1)).setUnits('five seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvCallRateMonitorTime.setStatus('current')
if mibBuilder.loadTexts: cvCallRateMonitorTime.setDescription('This object represents the interval for which the gateway monitors the call-rate.')
cvCallRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 11, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallRate.setStatus('current')
if mibBuilder.loadTexts: cvCallRate.setDescription('This object represents the total number of calls handled by the gateway during the monitored time.')
cvCallRateHiWaterMark = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 11, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallRateHiWaterMark.setStatus('current')
if mibBuilder.loadTexts: cvCallRateHiWaterMark.setDescription('This object represents the high water mark for the number of calls handled by the gateway in an unit interval of cvCallRateMonitorTime, from the time the call-monitoring is enabled.')
cvCallHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1), )
if mibBuilder.loadTexts: cvCallHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cvCallHistoryTable.setDescription('This table is the voice extension to the call history table of IETF Dial Control MIB. It contains voice encapsulation call leg information such as voice packet statistics, coder usage and end to end bandwidth of the call leg.')
cvCallHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-DIAL-CONTROL-MIB", "cCallHistoryIndex"))
if mibBuilder.loadTexts: cvCallHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cvCallHistoryEntry.setDescription('The information regarding a single voice encapsulation call leg. The call leg entry is identified by using the same index objects that are used by Call Active table of IETF Dial Control MIB to identify the call. An entry of this table is created when its associated call history entry in the IETF Dial Control MIB is created and the call history entry contains the call establishment to a voice encapsulation peer. The entry is deleted when its associated call active entry in the IETF Dial Control MIB is deleted.')
cvCallHistoryConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 1), CvcGUid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryConnectionId.setStatus('current')
if mibBuilder.loadTexts: cvCallHistoryConnectionId.setDescription('The global connection identifier for the telephony leg, which was assigned to the call.')
cvCallHistoryTxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 2), AbsoluteCounter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryTxDuration.setStatus('current')
if mibBuilder.loadTexts: cvCallHistoryTxDuration.setDescription('Duration of Transmit path open from this peer to the voice gateway for the call leg. This counter object will lock at the maximum value which is approximately two days.')
cvCallHistoryVoiceTxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 3), AbsoluteCounter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryVoiceTxDuration.setStatus('current')
if mibBuilder.loadTexts: cvCallHistoryVoiceTxDuration.setDescription('Duration for this call leg. The Voice Utilization Rate can be obtained by dividing this by cvCallHistoryTXDuration object. This counter object will lock at the maximum value which is approximately two days.')
cvCallHistoryFaxTxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 4), AbsoluteCounter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryFaxTxDuration.setStatus('current')
if mibBuilder.loadTexts: cvCallHistoryFaxTxDuration.setDescription('Duration of fax transmitted from this peer to voice gateway for this call leg. The FAX Utilization Rate can be obtained by dividing this by cvCallHistoryTXDuration object. This counter object will lock at the maximum value which is approximately two days.')
cvCallHistoryCoderTypeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 5), CvcCoderTypeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryCoderTypeRate.setStatus('current')
if mibBuilder.loadTexts: cvCallHistoryCoderTypeRate.setDescription('The negotiated coder rate. It specifies the transmit rate of voice/fax compression to its associated call leg for the call.')
cvCallHistoryNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 8))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: cvCallHistoryNoiseLevel.setDescription('The object contains the average noise level for the call leg.')
cvCallHistoryACOMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryACOMLevel.setStatus('current')
if mibBuilder.loadTexts: cvCallHistoryACOMLevel.setDescription('The object contains the average ACOM level for the call leg. The value -1 indicates the level can not be determined or level detection is disabled.')
cvCallHistorySessionTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistorySessionTarget.setStatus('current')
if mibBuilder.loadTexts: cvCallHistorySessionTarget.setDescription('The object specifies the session target of the peer that is used for the call leg via telephony interface.')
cvCallHistoryImgPageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 9), AbsoluteCounter32()).setUnits('pages').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryImgPageCount.setStatus('current')
if mibBuilder.loadTexts: cvCallHistoryImgPageCount.setDescription('The number of FAX related image pages are received or transmitted via the peer for the call leg.')
cvCallHistoryCallingName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryCallingName.setStatus('current')
if mibBuilder.loadTexts: cvCallHistoryCallingName.setDescription('The calling party name of the call. If the name is not available, then it will have a length of zero.')
cvCallHistoryCallerIDBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryCallerIDBlock.setStatus('current')
if mibBuilder.loadTexts: cvCallHistoryCallerIDBlock.setDescription('The object indicates whether or not the caller ID feature is blocked for this call.')
cvCallHistoryAccountCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryAccountCode.setStatus('current')
if mibBuilder.loadTexts: cvCallHistoryAccountCode.setDescription('The object indicates the account code input to the call. It could be used by down stream billing server. The value of empty string indicates no account code input.')
cvCallHistoryCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryCallId.setStatus('current')
if mibBuilder.loadTexts: cvCallHistoryCallId.setDescription('This object represents the call identifier for the telephony leg, which was assigned to the call.')
cvVoIPCallHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2), )
if mibBuilder.loadTexts: cvVoIPCallHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryTable.setDescription('This table is the VoIP extension to the call history table of IETF Dial Control MIB. It contains VoIP call leg information about specific VoIP call destination and the selected QoS for the call leg.')
cvVoIPCallHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-DIAL-CONTROL-MIB", "cCallHistoryIndex"))
if mibBuilder.loadTexts: cvVoIPCallHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryEntry.setDescription('The information regarding a single VoIP call leg. The call leg entry is identified by using the same index objects that are used by Call Active table of IETF Dial Control MIB to identify the call. An entry of this table is created when its associated call history entry in the IETF Dial Control MIB is created and the call history entry contains information for the call establishment to the peer on the IP backbone via a voice over IP peer. The entry is deleted when its associated call history entry in the IETF Dial Control MIB is deleted.')
cvVoIPCallHistoryConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 1), CvcGUid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryConnectionId.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryConnectionId.setDescription('The global connection identifier for the VoIP leg, which was assigned to the call.')
cvVoIPCallHistoryRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRemoteIPAddress.setStatus('deprecated')
if mibBuilder.loadTexts: cvVoIPCallHistoryRemoteIPAddress.setDescription('Remote system IP address for the call.')
cvVoIPCallHistoryRemoteUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRemoteUDPPort.setStatus('deprecated')
if mibBuilder.loadTexts: cvVoIPCallHistoryRemoteUDPPort.setDescription('Remote system UDP listener port to which to transmit voice packets for the call.')
cvVoIPCallHistoryRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 4), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRoundTripDelay.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryRoundTripDelay.setDescription('The voice packet round trip delay between local and the remote system on the IP backbone during the call.')
cvVoIPCallHistorySelectedQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 5), QosService()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistorySelectedQoS.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistorySelectedQoS.setDescription('The selected RSVP QoS for the call.')
cvVoIPCallHistorySessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 6), CvSessionProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistorySessionProtocol.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistorySessionProtocol.setDescription('The object specifies the session protocol to be used for Internet call between local and remote router via IP backbone.')
cvVoIPCallHistorySessionTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistorySessionTarget.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistorySessionTarget.setDescription('The object specifies the session target of the peer that is used for the Voice over IP call.')
cvVoIPCallHistoryOnTimeRvPlayout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 8), AbsoluteCounter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryOnTimeRvPlayout.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryOnTimeRvPlayout.setDescription('Duration of voice playout from data received on time for this call. This plus the durations for the GapFills in the following entries gives the Total Voice Playout Duration for Active Voice. This does not include duration for which no data was sent by the Transmit end as voice signal, e.g., silence suppression and fax signal. The On Time Playout Rate can be computed by dividing this entry by the Total Voice Playout Duration. This counter object will lock at the maximum value which is approximately two days.')
cvVoIPCallHistoryGapFillWithSilence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 9), AbsoluteCounter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryGapFillWithSilence.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryGapFillWithSilence.setDescription('Duration of voice signal replaced with signal played out during silence due to voice data not received on time (or lost) from voice gateway this call. This counter object will lock at the maximum value which is approximately two days.')
cvVoIPCallHistoryGapFillWithPrediction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 10), AbsoluteCounter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryGapFillWithPrediction.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryGapFillWithPrediction.setDescription('Duration of voice signal played out with signal synthesized from parameters or samples of data preceding in time due to voice data not received on time (or lost) from voice gateway for this call. An example of such playout is frame-erasure or frame-concealment strategies in G.729 and G.723.1 compression algorithms. This counter object will lock at the maximum value which is approximately two days.')
cvVoIPCallHistoryGapFillWithInterpolation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 11), AbsoluteCounter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryGapFillWithInterpolation.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryGapFillWithInterpolation.setDescription('Duration of voice signal played out with signal synthesized from parameters or samples of data preceding and following in time due to voice data not received on time (or lost) from voice gateway for this call. This counter object will lock at the maximum value which is approximately two days.')
cvVoIPCallHistoryGapFillWithRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 12), AbsoluteCounter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryGapFillWithRedundancy.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryGapFillWithRedundancy.setDescription('Duration of voice signal played out with signal synthesized from redundancy parameters available due to voice data not received on time (or lost) from voice gateway for this call. This counter object will lock at the maximum value which is approximately two days.')
cvVoIPCallHistoryHiWaterPlayoutDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 13), AbsoluteCounter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryHiWaterPlayoutDelay.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryHiWaterPlayoutDelay.setDescription('The high water mark Voice Playout FIFO Delay during the voice call. This counter object will lock at the maximum value which is approximately two days.')
cvVoIPCallHistoryLoWaterPlayoutDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 14), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryLoWaterPlayoutDelay.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryLoWaterPlayoutDelay.setDescription('The low water mark Voice Playout FIFO Delay during the voice call.')
cvVoIPCallHistoryReceiveDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryReceiveDelay.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryReceiveDelay.setDescription('The average Playout FIFO Delay plus the decoder delay during the voice call.')
cvVoIPCallHistoryVADEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryVADEnable.setStatus('deprecated')
if mibBuilder.loadTexts: cvVoIPCallHistoryVADEnable.setDescription('The object indicates whether or not the VAD (Voice Activity Detection) was enabled for the voice call.')
cvVoIPCallHistoryCoderTypeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 17), CvcCoderTypeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryCoderTypeRate.setStatus('deprecated')
if mibBuilder.loadTexts: cvVoIPCallHistoryCoderTypeRate.setDescription('The negotiated coder rate. It specifies the transmit rate of voice/fax compression to its associated call leg for the call. This rate is different from the configuration rate because of rate negotiation during the call.')
cvVoIPCallHistoryIcpif = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 55))).setUnits('equipment impairment factor (eif)').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryIcpif.setReference('[1] ITU G.113: Section 7.2 Impairment factors and the total impairment value. [2] ITU G.113: Sections 9 Considerations associated with the Calculated Planning Impairment Factor (Icpif).')
if mibBuilder.loadTexts: cvVoIPCallHistoryIcpif.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryIcpif.setDescription('The Calculated Planning Impairment Factor (Icpif) of the call that is associated to this call leg. The value in this object is computed by the following equation. Icpif of the call = Itotal (total impairment value) of the call - A (Expectation Factor) in the cvVoIPPeerCfgExpectFactor of the call leg associated peer. A value of -1 implies that Icpif was not calculated and is meaningless for this call.')
cvVoIPCallHistoryLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 19), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryLostPackets.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryLostPackets.setDescription('The number of lost voice packets during the call.')
cvVoIPCallHistoryEarlyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 20), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryEarlyPackets.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryEarlyPackets.setDescription('The number of received voice packets that are arrived too early to store in jitter buffer during the call.')
cvVoIPCallHistoryLatePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 21), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryLatePackets.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryLatePackets.setDescription('The number of received voice packets that are arrived too late to playout with CODEC (Coder/Decoder) during the call.')
cvVoIPCallHistoryUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryUsername.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryUsername.setDescription('The textual identifier of the calling party (user) of the call. If the username is not available, then the value of this object will have a length of zero.')
cvVoIPCallHistoryProtocolCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryProtocolCallId.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryProtocolCallId.setDescription('The protocol-specific call identifier for the VoIP call.')
cvVoIPCallHistoryRemSigIPAddrT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 24), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRemSigIPAddrT.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryRemSigIPAddrT.setDescription('This object specifies the type of address contained in the associated instance of cvVoIPCallHistoryRemSigIPAddr.')
cvVoIPCallHistoryRemSigIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 25), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRemSigIPAddr.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryRemSigIPAddr.setDescription('Remote signalling IP address for the VoIP call.')
cvVoIPCallHistoryRemSigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRemSigPort.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryRemSigPort.setDescription('Remote signalling listener port to which to transmit voice packets.')
cvVoIPCallHistoryRemMediaIPAddrT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 27), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRemMediaIPAddrT.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryRemMediaIPAddrT.setDescription('This object specifies the type of address contained in the associated instance of cvVoIPCallHistoryRemMediaIPAddr.')
cvVoIPCallHistoryRemMediaIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 28), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRemMediaIPAddr.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryRemMediaIPAddr.setDescription('Remote media end point IP address for the VoIP call.')
cvVoIPCallHistoryRemMediaPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRemMediaPort.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryRemMediaPort.setDescription('Remote media end point listener port to which to transmit voice packets.')
cvVoIPCallHistorySRTPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistorySRTPEnable.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistorySRTPEnable.setDescription('The object indicates whether or not the SRTP (Secured RTP) was enabled for the voice call.')
cvVoIPCallHistoryFallbackIcpif = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryFallbackIcpif.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryFallbackIcpif.setDescription('The Calculated Planning Impairment Factor (Icpif) of the call that is associated to this call leg. The value in this object is computed by the following equation. Icpif of the fallback probe = Itotal (total impairment value) - configured fallback (Expectation Factor). A value of 0 implies that Icpif was not calculated and is meaningless for this attempt.')
cvVoIPCallHistoryFallbackLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 32), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryFallbackLoss.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryFallbackLoss.setDescription('FallbackLoss is the percentage of loss packets based on the total packets sent.')
cvVoIPCallHistoryFallbackDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryFallbackDelay.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryFallbackDelay.setDescription('The FallbackDelay is calculated as follows - Take the sum of the round trips for all the probes, divide by the number of probes, and divide by two to get the one-way delay. Then add in jitter_in or jiter_out, which ever is higher.')
cvVoIPCallHistoryOctetAligned = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryOctetAligned.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryOctetAligned.setDescription('If the object has a value true(1) octet align operation is used, and if the value is false(2), bandwidth efficient operation is used. This object is not instantiated when the object cvVoIPCallHistoryCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallHistoryBitRates = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 35), CvAmrNbBitRateMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryBitRates.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryBitRates.setDescription('This object indicates modes of Bit rates. This object is not instantiated when the object cvVoIPCallHistoryCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallHistoryModeChgPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('frame-blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryModeChgPeriod.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryModeChgPeriod.setDescription('The object indicates the interval (N frame-blocks) at which codec mode changes are allowed. This object is not instantiated when the object cvVoIPCallHistoryCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallHistoryModeChgNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 37), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryModeChgNeighbor.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryModeChgNeighbor.setDescription('If the object has a value of true(1), mode changes will be made to only neighboring modes set to cvVoIPCallHistoryBitRates object. If the value is false(2), mode changes will be allowed to any modes set to cvVoIPCallHistoryBitRates object. This object is not instantiated when the object cvVoIPCallHistoryCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallHistoryMaxPtime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 100))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryMaxPtime.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryMaxPtime.setDescription('The object indicates the maximum amount of media that can be encapsulated in a payload. Supported value is 20 msec. This object is not instantiated when the object cvVoIPCallHistoryCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallHistoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 39), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryCRC.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryCRC.setDescription('If the object has a value of true(1), frame CRC will be included in the payload and if the value is false(2), frame CRC will not be included in the payload. This object is applicable only when RTP frame type is octet aligned. This object is not instantiated when the object cvVoIPCallHistoryCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallHistoryRobustSorting = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 40), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRobustSorting.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryRobustSorting.setDescription('If the object has a value of true(1), payload employs robust sorting and if the value is false(2), payload does not employ robust sorting. This object is applicable only when RTP frame type is octet aligned. This object is not instantiated when the object cvVoIPCallHistoryCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallHistoryEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 41), CvAmrNbRtpEncap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryEncap.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryEncap.setDescription('The object indicates the RTP encapsulation type. Supported RTP encapsulation type is RFC3267. This object is not instantiated when the object cvVoIPCallHistoryCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallHistoryInterleaving = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setUnits('frame-blocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryInterleaving.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryInterleaving.setDescription('The object indicates the maximum number of frame-blocks allowed in an interleaving group. It indicates that frame-block level interleaving will be used for that session. If this object is not set, interleaving is not used. This object is applicable only when RTP frame type is octet aligned. This object is not instantiated when the object cvVoIPCallHistoryCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallHistoryPtime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 100))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryPtime.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryPtime.setDescription('The object indicates the length of the time in milliseconds represented by the media of the packet. Supported value is 20 milliseconds. This object is not instantiated when the object cvVoIPCallHistoryCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallHistoryChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setUnits('channels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryChannels.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryChannels.setDescription('The object indicates the number of audio channels. Supported value is 1. This object is not instantiated when the object cvVoIPCallHistoryCoderTypeRate is not equal to gsmAmrNb enum.')
cvVoIPCallHistoryCoderMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 45), CvIlbcFrameMode()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryCoderMode.setReference('RFC 3952: Section 5, for codec negotiation for iLBC mode.')
if mibBuilder.loadTexts: cvVoIPCallHistoryCoderMode.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryCoderMode.setDescription("The object indicates the iLBC mode. The value of this object is valid only if cvVoIPCallHistoryCoderTypeRate is equal to 'iLBC'.")
cvVoIPCallHistoryCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryCallId.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryCallId.setDescription('This object represents the call identifier for the VoIP leg, which was assigned to the call.')
cvVoIPCallHistoryCallReferenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 47), CvcCallReferenceIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryCallReferenceId.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistoryCallReferenceId.setDescription('The call reference ID associates the video call entry and voice call entry of the same endpoint. An audio-only call may or may not have a valid call reference ID (i.e. value greater than zero), but in both cases, there will not be a video call entry associated with it. For a video call, the video-specific information is stored in a call entry in cVideoSessionActive of CISCO-VIDEO-SESSION-MIB, in which the call reference ID is also identified.')
cvVoIPCallHistorySessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 48), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistorySessionId.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallHistorySessionId.setDescription('This object indicates the session ID assigned by the call manager to identify call legs that belong to the same call session. This session ID (history) represents a completed call session, whereas the active session ID (cvVoIPCallActiveSessionId) represents an ongoing session.')
cvCallVolumeStatsHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3))
cvCallRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 1), )
if mibBuilder.loadTexts: cvCallRateStatsTable.setStatus('current')
if mibBuilder.loadTexts: cvCallRateStatsTable.setDescription('This table represents voice call rate measurement in various interval lengths defined by the CvCallVolumeStatsIntvlType object. Each interval may contain one or more entries to allow for detailed measurement to be collected.')
cvCallRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 1, 1), ).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateStatsIntvlDurUnits"), (0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateStatsIntvlDur"))
if mibBuilder.loadTexts: cvCallRateStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cvCallRateStatsEntry.setDescription('This is a conceptual-row in cvCallRateStatsTable This entry is created at the system initialization and is updated at every epoch based on CvCallVolumeStatsIntvlType')
cvCallRateStatsIntvlDurUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 1, 1, 1), CvCallVolumeStatsIntvlType())
if mibBuilder.loadTexts: cvCallRateStatsIntvlDurUnits.setStatus('current')
if mibBuilder.loadTexts: cvCallRateStatsIntvlDurUnits.setDescription('The Object indexes in Call Rate Table to select one among three interval-tables. The different types in this table are represented by CvCallVolumeStatsIntvlType')
cvCallRateStatsIntvlDur = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 72)))
if mibBuilder.loadTexts: cvCallRateStatsIntvlDur.setStatus('current')
if mibBuilder.loadTexts: cvCallRateStatsIntvlDur.setDescription('This is an index that references to the different past periods in given in interval of call rate table. This range is 1-60 for Seconds and Minutes table wherein 1-72 for hours table.')
cvCallRateStatsMaxVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 1, 1, 3), Unsigned32()).setUnits('calls-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallRateStatsMaxVal.setStatus('current')
if mibBuilder.loadTexts: cvCallRateStatsMaxVal.setDescription('This object indicates the maximum calls per second that occured for the given period for the given interval.')
cvCallRateStatsAvgVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 1, 1, 4), Unsigned32()).setUnits('calls-per-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallRateStatsAvgVal.setStatus('current')
if mibBuilder.loadTexts: cvCallRateStatsAvgVal.setDescription('This object indicates the average calls per second that occured for the given period for the given interval.')
cvCallLegRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 2), )
if mibBuilder.loadTexts: cvCallLegRateStatsTable.setStatus('current')
if mibBuilder.loadTexts: cvCallLegRateStatsTable.setDescription('cvCallLegRateStatsTable table represents voice call leg rate measurement in various interval lengths defined by the CvCallVolumeStatsIntvlType object. Each interval may contain one or more entries to allow for detailed measurement to be collected.')
cvCallLegRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 2, 1), ).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallLegRateStatsIntvlDurUnits"), (0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallLegRateStatsIntvlDur"))
if mibBuilder.loadTexts: cvCallLegRateStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cvCallLegRateStatsEntry.setDescription('This is a conceptual-row in cvCallLegRateStatsTable This entry is created at the system initialization and is updated at every epoch based on CvCallVolumeStatsIntvlType')
cvCallLegRateStatsIntvlDurUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 2, 1, 1), CvCallVolumeStatsIntvlType())
if mibBuilder.loadTexts: cvCallLegRateStatsIntvlDurUnits.setStatus('current')
if mibBuilder.loadTexts: cvCallLegRateStatsIntvlDurUnits.setDescription('The Object indexes in Call Leg Rate Table to select one among three interval-tables. The different types in this table are represented by CvCallVolumeStatsIntvlType')
cvCallLegRateStatsIntvlDur = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 72)))
if mibBuilder.loadTexts: cvCallLegRateStatsIntvlDur.setStatus('current')
if mibBuilder.loadTexts: cvCallLegRateStatsIntvlDur.setDescription('This is an index that references to the different past periods in given in interval of call rate table. This range is 1-60 for Seconds and Minutes table wherein 1-72 for hours table.')
cvCallLegRateStatsMaxVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 2, 1, 3), Unsigned32()).setUnits('call-legs per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallLegRateStatsMaxVal.setStatus('current')
if mibBuilder.loadTexts: cvCallLegRateStatsMaxVal.setDescription('This object indicates the maximum call-legs per second that occured for the given period for the given interval.')
cvCallLegRateStatsAvgVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 2, 1, 4), Unsigned32()).setUnits('call-legs per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallLegRateStatsAvgVal.setStatus('current')
if mibBuilder.loadTexts: cvCallLegRateStatsAvgVal.setDescription('This object indicates the average call-legs per second that occured for the given period for the given interval.')
cvActiveCallStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 3), )
if mibBuilder.loadTexts: cvActiveCallStatsTable.setStatus('current')
if mibBuilder.loadTexts: cvActiveCallStatsTable.setDescription('This table represents the active voice calls in various interval lengths defined by the CvCallVolumeStatsIntvlType object. Each interval may contain one or more entries to allow for detailed measurement to be collected.')
cvActiveCallStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 3, 1), ).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvActiveCallStatsIntvlDurUnits"), (0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvActiveCallStatsIntvlDur"))
if mibBuilder.loadTexts: cvActiveCallStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cvActiveCallStatsEntry.setDescription('This is a conceptual-row in cvActiveCallStatsTable This entry is created at the system initialization and is updated at every epoch based on CvCallVolumeStatsIntvlType')
cvActiveCallStatsIntvlDurUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 3, 1, 1), CvCallVolumeStatsIntvlType())
if mibBuilder.loadTexts: cvActiveCallStatsIntvlDurUnits.setStatus('current')
if mibBuilder.loadTexts: cvActiveCallStatsIntvlDurUnits.setDescription('The Object indexes in Active Call Rate Table (con-current calls table) to select one among three interval-tables. The different types in this table are represented by CvCallVolumeStatsIntvlType')
cvActiveCallStatsIntvlDur = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 72)))
if mibBuilder.loadTexts: cvActiveCallStatsIntvlDur.setStatus('current')
if mibBuilder.loadTexts: cvActiveCallStatsIntvlDur.setDescription('This is an index that references to the different past periods in given in interval of active call table. This range is 1-60 for Seconds and Minutes table wherein 1-72 for hours table.')
cvActiveCallStatsMaxVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 3, 1, 3), Unsigned32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvActiveCallStatsMaxVal.setStatus('current')
if mibBuilder.loadTexts: cvActiveCallStatsMaxVal.setDescription('This object indicates the maximum number of active call that occured for the given period for the given interval.')
cvActiveCallStatsAvgVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 3, 1, 4), Unsigned32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvActiveCallStatsAvgVal.setStatus('current')
if mibBuilder.loadTexts: cvActiveCallStatsAvgVal.setDescription('This object indicates the average number of active calls that occured for the given period for the given interval.')
cvCallDurationStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 4), )
if mibBuilder.loadTexts: cvCallDurationStatsTable.setStatus('current')
if mibBuilder.loadTexts: cvCallDurationStatsTable.setDescription('This table represents the number of calls below a specific duration in various interval length defined by the CvCallVolumeStatsIntvlType object. The specific duration is configurable value of cvCallDurationStatsThreshold object. Each interval may contain one or more entries to allow for detailed measurement to be collected.')
cvCallDurationStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 4, 1), ).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallDurationStatsIntvlDurUnits"), (0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallDurationStatsIntvlDur"))
if mibBuilder.loadTexts: cvCallDurationStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cvCallDurationStatsEntry.setDescription('This is a conceptual-row in cvCallDurationStatsTable This entry is created at the system initialization and is updated at every epoch based on CvCallVolumeStatsIntvlType')
cvCallDurationStatsIntvlDurUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 4, 1, 1), CvCallVolumeStatsIntvlType())
if mibBuilder.loadTexts: cvCallDurationStatsIntvlDurUnits.setStatus('current')
if mibBuilder.loadTexts: cvCallDurationStatsIntvlDurUnits.setDescription('The Object indexes in Call Duration Table to select one among three interval-tables. The different types in this table are represented by CvCallVolumeStatsIntvlType')
cvCallDurationStatsIntvlDur = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 72)))
if mibBuilder.loadTexts: cvCallDurationStatsIntvlDur.setStatus('current')
if mibBuilder.loadTexts: cvCallDurationStatsIntvlDur.setDescription('This is an index that references to the different past periods in given in interval of call Duration table. This range is 1-60 for Seconds and Minutes table wherein 1-72 for hours table.')
cvCallDurationStatsMaxVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 4, 1, 3), Unsigned32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallDurationStatsMaxVal.setStatus('current')
if mibBuilder.loadTexts: cvCallDurationStatsMaxVal.setDescription('This object indicates the maximum number of calls having a duration which is below the threshold for the given interval.')
cvCallDurationStatsAvgVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 4, 1, 4), Unsigned32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallDurationStatsAvgVal.setStatus('current')
if mibBuilder.loadTexts: cvCallDurationStatsAvgVal.setDescription('This object indicates the average number of calls having a duration which is below the threshold for the given interval.')
cvSipMsgRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 5), )
if mibBuilder.loadTexts: cvSipMsgRateStatsTable.setStatus('current')
if mibBuilder.loadTexts: cvSipMsgRateStatsTable.setDescription('This table represents the SIP message rate measurement in various interval length defined by the CvCallVolumeStatsIntvlType object. Each interval may contain one or more entries to allow for detailed measurement to be collected')
cvSipMsgRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 5, 1), ).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvSipMsgRateStatsIntvlDurUnits"), (0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvSipMsgRateStatsIntvlDur"))
if mibBuilder.loadTexts: cvSipMsgRateStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cvSipMsgRateStatsEntry.setDescription('This is a conceptual-row in cvSipMsgRateStatsTable This entry is created at the system initialization and is updated at every epoch based on CvCallVolumeStatsIntvlType')
cvSipMsgRateStatsIntvlDurUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 5, 1, 1), CvCallVolumeStatsIntvlType())
if mibBuilder.loadTexts: cvSipMsgRateStatsIntvlDurUnits.setStatus('current')
if mibBuilder.loadTexts: cvSipMsgRateStatsIntvlDurUnits.setDescription('The Object indexes in SIP Message Rate Table to select one among three interval-tables. The different types in this table are represented by CvCallVolumeStatsIntvlType')
cvSipMsgRateStatsIntvlDur = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 72)))
if mibBuilder.loadTexts: cvSipMsgRateStatsIntvlDur.setStatus('current')
if mibBuilder.loadTexts: cvSipMsgRateStatsIntvlDur.setDescription('This is an index that references to the different past periods in given in interval of SIP message rate table. This range is 1-60 for Seconds and Minutes table wherein 1-72 for hours table.')
cvSipMsgRateStatsMaxVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 5, 1, 3), Unsigned32()).setUnits('SIP messages per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvSipMsgRateStatsMaxVal.setStatus('current')
if mibBuilder.loadTexts: cvSipMsgRateStatsMaxVal.setDescription('This object indicates the maximum SIP messages per second that is received for the given interval.')
cvSipMsgRateStatsAvgVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 5, 1, 4), Unsigned32()).setUnits('SIP messages per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvSipMsgRateStatsAvgVal.setStatus('current')
if mibBuilder.loadTexts: cvSipMsgRateStatsAvgVal.setDescription('This object indicates the average SIP messages per second that is received for the given interval.')
cvCallRateWMTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 6), )
if mibBuilder.loadTexts: cvCallRateWMTable.setStatus('current')
if mibBuilder.loadTexts: cvCallRateWMTable.setDescription('This table represents high watermarks achieved by call rate in various interval length defined by CvCallVolumeWMIntvlType. Each interval may contain one or more entries to allow for detailed measurement to be collected')
cvCallRateWMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 6, 1), ).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateWMIntvlDurUnits"), (0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateWMIndex"))
if mibBuilder.loadTexts: cvCallRateWMEntry.setStatus('current')
if mibBuilder.loadTexts: cvCallRateWMEntry.setDescription('This is a conceptual-row in cvCallRateWMTable This entry is created at the system initialization and is updated whenever a) This entry is obsolete OR b) A new/higher entry is available. These entries are reinitialised/added/deleted if cvCallVolumeWMTableSize is changed')
cvCallRateWMIntvlDurUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 6, 1, 1), CvCallVolumeWMIntvlType())
if mibBuilder.loadTexts: cvCallRateWMIntvlDurUnits.setStatus('current')
if mibBuilder.loadTexts: cvCallRateWMIntvlDurUnits.setDescription('The Object indexes in call rate Water mark Table to select one among four interval-tables. The different types in this table are represented by CvCallVolumeWMIntvlType')
cvCallRateWMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: cvCallRateWMIndex.setStatus('current')
if mibBuilder.loadTexts: cvCallRateWMIndex.setDescription('This is an index that references to different peaks in past period in call rate watermark table. The number of watermarks entries stored for each table are based on cvCallVolumeWMTableSize')
cvCallRateWMValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 6, 1, 3), Unsigned32()).setUnits('calls per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallRateWMValue.setStatus('current')
if mibBuilder.loadTexts: cvCallRateWMValue.setDescription('This object indicates high watermark value achieved by the calls per second for the given interval')
cvCallRateWMts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 6, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallRateWMts.setStatus('current')
if mibBuilder.loadTexts: cvCallRateWMts.setDescription('This object indicates date and Time when the high watermark is achieved for calls per second for the given interval')
cvCallLegRateWMTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 7), )
if mibBuilder.loadTexts: cvCallLegRateWMTable.setStatus('current')
if mibBuilder.loadTexts: cvCallLegRateWMTable.setDescription('cvCallLegRateWMTable table represents high watermarks achieved by call-leg rate in various interval length defined by CvCallVolumeWMIntvlType. Each interval may contain one or more entries to allow for detailed measurement to be collected')
cvCallLegRateWMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 7, 1), ).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallLegRateWMIntvlDurUnits"), (0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallLegRateWMIndex"))
if mibBuilder.loadTexts: cvCallLegRateWMEntry.setStatus('current')
if mibBuilder.loadTexts: cvCallLegRateWMEntry.setDescription('This is a conceptual-row in cvCallLegRateWMTable This entry is created at the system initialization and is updated whenever a) This entry is obsolete OR b) A new/higher entry is available. These entries are reinitialised/added/deleted if cvCallVolumeWMTableSize is changed')
cvCallLegRateWMIntvlDurUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 7, 1, 1), CvCallVolumeWMIntvlType())
if mibBuilder.loadTexts: cvCallLegRateWMIntvlDurUnits.setStatus('current')
if mibBuilder.loadTexts: cvCallLegRateWMIntvlDurUnits.setDescription('The Object indexes in call leg rate Water mark Table to select one among four interval-tables. The different types in this table are represented by CvCallVolumeWMIntvlType')
cvCallLegRateWMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: cvCallLegRateWMIndex.setStatus('current')
if mibBuilder.loadTexts: cvCallLegRateWMIndex.setDescription('This is an index that references to different peaks in past period in call leg rate watermark table. The number of watermarks entries stored for each table are based on cvCallVolumeWMTableSize')
cvCallLegRateWMValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 7, 1, 3), Unsigned32()).setUnits('call legs per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallLegRateWMValue.setStatus('current')
if mibBuilder.loadTexts: cvCallLegRateWMValue.setDescription('This object indicates high watermark value achieved by the call legs per second for the given interval')
cvCallLegRateWMts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 7, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallLegRateWMts.setStatus('current')
if mibBuilder.loadTexts: cvCallLegRateWMts.setDescription('This object indicates date and time when the high watermark is achieved for call-legs per second for the given interval')
cvActiveCallWMTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 8), )
if mibBuilder.loadTexts: cvActiveCallWMTable.setStatus('current')
if mibBuilder.loadTexts: cvActiveCallWMTable.setDescription('This table represents high watermarks achieved by active calls in various interval length defined by CvCallVolumeWMIntvlType. Each interval may contain one or more entries to allow for detailed measurement to be collected.')
cvActiveCallWMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 8, 1), ).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvActiveCallWMIntvlDurUnits"), (0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvActiveCallWMIndex"))
if mibBuilder.loadTexts: cvActiveCallWMEntry.setStatus('current')
if mibBuilder.loadTexts: cvActiveCallWMEntry.setDescription('This is a conceptual-row in cvActiveCallWMTable This entry is created at the system initialization and is updated whenever a) This entry is obsolete OR b) A new/higher entry is available. These entries are reinitialised/added/deleted if cvCallVolumeWMTableSize is changed')
cvActiveCallWMIntvlDurUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 8, 1, 1), CvCallVolumeWMIntvlType())
if mibBuilder.loadTexts: cvActiveCallWMIntvlDurUnits.setStatus('current')
if mibBuilder.loadTexts: cvActiveCallWMIntvlDurUnits.setDescription('The Object indexes in active call Water mark Table to select one among four interval-tables. The different types in this table are represented by CvCallVolumeWMIntvlType')
cvActiveCallWMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: cvActiveCallWMIndex.setStatus('current')
if mibBuilder.loadTexts: cvActiveCallWMIndex.setDescription('This is an index that references to different peaks in past period in acive call watermark table. The number of watermarks entries stored for each table are based on cvCallVolumeWMTableSize')
cvActiveCallWMValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 8, 1, 3), Unsigned32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvActiveCallWMValue.setStatus('current')
if mibBuilder.loadTexts: cvActiveCallWMValue.setDescription('This object indicates high watermark value achieved by the active calls for the given interval')
cvActiveCallWMts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 8, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvActiveCallWMts.setStatus('current')
if mibBuilder.loadTexts: cvActiveCallWMts.setDescription('This object indicates date and time when the high watermark is achieved for active calls for the given interval')
cvSipMsgRateWMTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 9), )
if mibBuilder.loadTexts: cvSipMsgRateWMTable.setStatus('current')
if mibBuilder.loadTexts: cvSipMsgRateWMTable.setDescription('This table represents of high watermarks achieved by SIP message rate in various interval length defined by CvCallVolumeWMIntvlType. Each interval may contain one or more entries to allow for detailed measurement to be collected')
cvSipMsgRateWMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 9, 1), ).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvSipMsgRateWMIntvlDurUnits"), (0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvSipMsgRateWMIndex"))
if mibBuilder.loadTexts: cvSipMsgRateWMEntry.setStatus('current')
if mibBuilder.loadTexts: cvSipMsgRateWMEntry.setDescription('This is a conceptual-row in cvSipMsgRateWMTable. This entry is created at the system initialization and is updated whenever a) This entry is obsolete OR b) A new/higher entry is available. These entries are reinitialised/added/deleted if cvCallVolumeWMTableSize is changed')
cvSipMsgRateWMIntvlDurUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 9, 1, 1), CvCallVolumeWMIntvlType())
if mibBuilder.loadTexts: cvSipMsgRateWMIntvlDurUnits.setStatus('current')
if mibBuilder.loadTexts: cvSipMsgRateWMIntvlDurUnits.setDescription('The Object indexes in SIP Message rate Water mark Table to select one among four interval-tables. The different types in this table are represented by CvCallVolumeWMIntvlType')
cvSipMsgRateWMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: cvSipMsgRateWMIndex.setStatus('current')
if mibBuilder.loadTexts: cvSipMsgRateWMIndex.setDescription('This is an index that references to different peaks in past period in sip message rate watermark table. The number of watermarks entries stored for each table are based on cvCallVolumeWMTableSize')
cvSipMsgRateWMValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 9, 1, 3), Unsigned32()).setUnits('SIP messages per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvSipMsgRateWMValue.setStatus('current')
if mibBuilder.loadTexts: cvSipMsgRateWMValue.setDescription('This object indicates high watermark value achieved by the SIP messages per second for the given interval')
cvSipMsgRateWMts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 9, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvSipMsgRateWMts.setStatus('current')
if mibBuilder.loadTexts: cvSipMsgRateWMts.setDescription('This object indicates date and time when the high watermark is achieved for SIP messages per second for the given interval')
cvCallDurationStatsThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvCallDurationStatsThreshold.setStatus('current')
if mibBuilder.loadTexts: cvCallDurationStatsThreshold.setDescription('This Object specifies the thresold duration in seconds. cvCallDurationStatsTable will monitor all the calls below this threshold. Decresing the value of the threshold will reset this table.')
cvCallVolumeWMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvCallVolumeWMTableSize.setStatus('current')
if mibBuilder.loadTexts: cvCallVolumeWMTableSize.setDescription('This Object specifies the number of entries the watermark table will maintain. This value will decide the number of elements in cvCallRateWMTable, cvCallLegRateWMTable, cvActiveCallWMTable and cvSipMsgRateWMTable.')
cvdcMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 2))
cvdcMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 2, 0))
cvdcPoorQoVNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 63, 2, 0, 1)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemoteIPAddress"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryCallOrigin"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallHistoryCoderTypeRate"))
if mibBuilder.loadTexts: cvdcPoorQoVNotification.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcPoorQoVNotification.setDescription('Poor quality of voice notification. A cvdcPoorQoVNotification is sent at the call disconnection time if the value of cvVoIPCallHistoryIcpif exceeds the value of cvVoIPPeerCfgIcpif in the call associated peer.')
cvdcPoorQoVNotificationRev1 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 63, 2, 0, 2)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddr"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryCallOrigin"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallHistoryCoderTypeRate"))
if mibBuilder.loadTexts: cvdcPoorQoVNotificationRev1.setStatus('current')
if mibBuilder.loadTexts: cvdcPoorQoVNotificationRev1.setDescription('Poor quality of voice notification. A cvdcPoorQoVNotificationRev1 is sent at the call disconnection time if the value of cvVoIPCallHistoryIcpif exceeds the value of cvVoIPPeerCfgIcpif in the call associated peer.')
cvdcActiveDS0sHighNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 63, 2, 0, 3)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveDS0s"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveDS0sHighThreshold"))
if mibBuilder.loadTexts: cvdcActiveDS0sHighNotification.setStatus('current')
if mibBuilder.loadTexts: cvdcActiveDS0sHighNotification.setDescription('The cvdcActiveDS0sHighNotification is sent when the percentage of active DS0s exceeds cvCallActiveDS0sHighThreshold value.')
cvdcActiveDS0sLowNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 63, 2, 0, 4)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveDS0s"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveDS0sLowThreshold"))
if mibBuilder.loadTexts: cvdcActiveDS0sLowNotification.setStatus('current')
if mibBuilder.loadTexts: cvdcActiveDS0sLowNotification.setDescription('The cvdcActiveDS0sLowNotification is sent when the percentage of active DS0s is less than cvCallActiveDS0sLowThreshold value.')
cvdcFallbackNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 63, 2, 0, 5)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryFallbackIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryFallbackLoss"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryFallbackDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddr"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryCallOrigin"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallHistoryCoderTypeRate"))
if mibBuilder.loadTexts: cvdcFallbackNotification.setStatus('current')
if mibBuilder.loadTexts: cvdcFallbackNotification.setDescription('This cvdcFallbackNotificaion is sent out, when the destination IP address of call fallback probe fails. This probe generated for beginning of each call, with exception of existing cached entry.')
cvdcPolicyViolationNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 63, 2, 0, 6)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "ccVoIPCallActivePolicyName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveReversedDirectionPeerAddress"), ("DIAL-CONTROL-MIB", "callActivePeerId"), ("DIAL-CONTROL-MIB", "callActivePeerAddress"))
if mibBuilder.loadTexts: cvdcPolicyViolationNotification.setStatus('current')
if mibBuilder.loadTexts: cvdcPolicyViolationNotification.setDescription('Policy violation voice notification. A cvdcPolicyViolationNotification is sent when the call is active and has policy violation. It can be media policy violation or DSCP policy violation.')
cvdcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 3))
cvdcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1))
cvdcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2))
cvdcMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 1)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBCompliance = cvdcMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO VOICE DIAL CONTROL MIB')
cvdcMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 2)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev1 = cvdcMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev1.setDescription('The compliance statement for entities which implement the CISCO VOICE DIAL CONTROL MIB')
cvdcMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 3)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev2 = cvdcMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev2.setDescription('The compliance statement for entities which implement the CISCO VOICE DIAL CONTROL MIB')
cvdcMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 4)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev3 = cvdcMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev3.setDescription('The compliance statement for entities which implement the CISCO VOICE DIAL CONTROL MIB')
cvdcMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 5)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev4 = cvdcMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev4.setDescription('The compliance statement for entities which implement the CISCO VOICE DIAL CONTROL MIB')
cvdcMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 6)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev5 = cvdcMIBComplianceRev5.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev5.setDescription('The compliance statement for entities which implement the CISCO VOICE DIAL CONTROL MIB')
cvdcMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 7)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev6 = cvdcMIBComplianceRev6.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev6.setDescription('The compliance statement for entities which implement the CISCO VOICE DIAL CONTROL MIB')
cvdcMIBComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 8)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev7 = cvdcMIBComplianceRev7.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev7.setDescription('The compliance statement for entities which implement the CISCO VOICE DIAL CONTROL MIB')
cvdcMIBComplianceRev8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 9)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev8 = cvdcMIBComplianceRev8.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev8.setDescription('The compliance statement for entities which implement the CISCO VOICE DIAL CONTROL MIB')
cvdcMIBComplianceRev9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 10)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev9 = cvdcMIBComplianceRev9.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev9.setDescription('The compliance statement for entities which implement the CISCO VOICE DIAL CONTROL MIB')
cvdcMIBComplianceRev10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 11)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev10 = cvdcMIBComplianceRev10.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev10.setDescription('The compliance statement for entities which implement the CISCO VOICE DIAL CONTROL MIB')
cvdcMIBComplianceRev11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 12)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev5"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev11 = cvdcMIBComplianceRev11.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev11.setDescription('The compliance statement for entities which implement the CISCO VOICE DIAL CONTROL MIB')
cvdcMIBComplianceRev12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 13)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev5"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev12 = cvdcMIBComplianceRev12.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev12.setDescription('The compliance statement for entities which implement the CISCO VOICE DIAL CONTROL MIB')
cvdcMIBComplianceRev13 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 14)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev13 = cvdcMIBComplianceRev13.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev13.setDescription('The compliance statement for entities which implement the CISCO VOICE DIAL CONTROL MIB')
cvdcMIBComplianceRev14 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 15)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcNotificationGroupRev3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev14 = cvdcMIBComplianceRev14.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev14.setDescription('The compliance statement for entities which implement the CISCO VOICE DIAL CONTROL MIB')
cvdcMIBComplianceRev15 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 16)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcNotificationGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallAmrNbGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev15 = cvdcMIBComplianceRev15.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev15.setDescription('The compliance statement for entities which implement the CISCO VOICE DIAL CONTROL MIB')
cvdcMIBComplianceRev16 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 17)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcNotificationGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallIlbcGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev16 = cvdcMIBComplianceRev16.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev16.setDescription('The compliance statement for entities which implement the CISCO VOICE DIAL CONTROL MIB')
cvdcMIBComplianceRev17 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 18)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcNotificationGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupSup1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev17 = cvdcMIBComplianceRev17.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev17.setDescription('The compliance statement for the entities that implement CISCO-VOICE-DIAL-CONTROL-MIB.')
cvdcMIBComplianceRev18 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 19)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcNotificationGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupSup1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupSup1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolumeGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev18 = cvdcMIBComplianceRev18.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev18.setDescription('The compliance statement for the entities that implement CISCO-VOICE-DIAL-CONTROL-MIB.')
cvdcMIBComplianceRev19 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 20)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcNotificationGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupSup1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupSup1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolumeGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateMonitorGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgISACGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev19 = cvdcMIBComplianceRev19.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev19.setDescription('The compliance statement for the entities that implement CISCO-VOICE-DIAL-CONTROL-MIB.')
cvdcMIBComplianceRev20 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 21)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupSup1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolumeGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateMonitorGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgISACGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupSup2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcNotificationGroupRev4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev20 = cvdcMIBComplianceRev20.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev20.setDescription('The compliance statement for the entities that implement CISCO-VOICE-DIAL-CONTROL-MIB.')
cvdcMIBComplianceRev21 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 22)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupSup1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolumeGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateMonitorGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgISACGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupSup3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcNotificationGroupRev4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev21 = cvdcMIBComplianceRev21.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcMIBComplianceRev21.setDescription('The compliance statement for the entities that implement CISCO-VOICE-DIAL-CONTROL-MIB.')
cvdcMIBComplianceRev22 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 23)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupSup1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolumeGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateMonitorGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgISACGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupSup3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcNotificationGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcCallVolumeStatsHistory"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcMIBComplianceRev22 = cvdcMIBComplianceRev22.setStatus('current')
if mibBuilder.loadTexts: cvdcMIBComplianceRev22.setDescription('The compliance statement for the entities that implement CISCO-VOICE-DIAL-CONTROL-MIB.')
cvdcGeneralCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 1)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgIfIndex"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgType"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcGeneralCfgGroup = cvdcGeneralCfgGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcGeneralCfgGroup.setDescription('A collection of objects providing the general Voice Gateway Call Dial Control configuration capability. cvdcGeneralCfgGroup group is superseded by cvdcGeneralCfgGroupRev1.')
cvdcVoiceCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 2)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgDialDigitsPrefix"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcVoiceCfgGroup = cvdcVoiceCfgGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcVoiceCfgGroup.setDescription('A collection of objects providing the GSTN (General Switched Telephony Network Voice Dial Control configuration capability. GSTN (General Switched Telephony Network), which is supposed to encompass analog, ISDN, Cellular - essentially anything circuit switched over the TDM infrastructure. cvdcVoiceCfgGroup group is superseded by cvdcVoiceCfgGroupRev1.')
cvdcVoIPCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 3)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCoderRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgFaxRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDesiredQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgMinAcceptableQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgVADEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgExpectFactor"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgUDPChecksumEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIPPrecedence"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcVoIPCfgGroup = cvdcVoIPCfgGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcVoIPCfgGroup.setDescription('A collection of objects providing the VoIP Dial Control configuration capability. cvdcVoIPCfgGroup group is superseded by cvdcVoIPCfgGroupRev1.')
cvCallGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 4)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveOutSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveInSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveERLLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistorySessionTarget"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvCallGroup = cvCallGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cvCallGroup.setDescription('A collection of objects providing the GSTN (General Switched Telephony Network Voice Call capability. GSTN (General Switched Telephony Network), which is supposed to encompass analog, ISDN, Cellular - essentially anything circuit switched over the TDM infrastructure. cvCallGroup group is superseded by cvCallGroupRev1.')
cvVoIPCallGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 5)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemoteIPAddress"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemoteUDPPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveVADEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemoteIPAddress"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemoteUDPPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryVADEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryIcpif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvVoIPCallGroup = cvVoIPCallGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cvVoIPCallGroup.setDescription('A collection of objects providing the VoIP Call capability. cvVoIPCallGroup group is superseded by cvVoIPCallGroupRev1.')
cvdcGeneralCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 6)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgIfIndex"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgType"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgRowStatus"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgIncomingDnisDigits"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgMaxConnections"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgApplicationName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcGeneralCfgGroupRev1 = cvdcGeneralCfgGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcGeneralCfgGroupRev1.setDescription('A collection of objects providing the general Voice Gateway Call Dial Control configuration capability. cvdcGeneralCfgGroupRev1 group is superseded by cvdcGeneralCfgGroupRev2.')
cvdcVoiceCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 7)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgDialDigitsPrefix"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgDIDCallEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgCasGroup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcVoiceCfgGroupRev1 = cvdcVoiceCfgGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcVoiceCfgGroupRev1.setDescription('A collection of objects providing the GSTN (General Switched Telephony Network Voice Dial Control configuration capability. GSTN (General Switched Telephony Network), which is supposed to encompass analog, ISDN, Cellular - essentially anything circuit switched over the TDM infrastructure. cvdcVoiceCfgGroupRev1 group is superseded by cvdcVoiceCfgGroupRev2.')
cvVoIPCallGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 8)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemoteIPAddress"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemoteUDPPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveVADEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLostPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveEarlyPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemoteIPAddress"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemoteUDPPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryVADEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLostPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryEarlyPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvVoIPCallGroupRev1 = cvVoIPCallGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cvVoIPCallGroupRev1.setDescription('A collection of objects providing the VoIP Call capability. cvVoIPCallGroupRev1 group is superseded by cvVoIPCallGroupRev2.')
cvCallGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 9)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveOutSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveInSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveERLLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryImgPageCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvCallGroupRev1 = cvCallGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cvCallGroupRev1.setDescription('A collection of objects providing the GSTN (General Switched Telephony Network Voice Dial Control configuration capability. GSTN (General Switched Telephony Network), which is supposed to encompass analog, ISDN, Cellular - essentially anything circuit switched over the TDM infrastructure. cvCallGroupRev1 group is superseded by cvCallGroupRev2.')
cvdcGeneralCfgGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 10)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgIfIndex"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgType"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgRowStatus"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgIncomingDnisDigits"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgMaxConnections"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgApplicationName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgPreference"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcGeneralCfgGroupRev2 = cvdcGeneralCfgGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcGeneralCfgGroupRev2.setDescription('A collection of objects providing the general Voice Gateway Call Dial Control configuration capability. cvdcGeneralCfgGroupRev2 group is superseded by cvdcGeneralCfgGroupRev3.')
cvdcVoIPCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 11)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCoderRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgFaxRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDesiredQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgMinAcceptableQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgVADEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgExpectFactor"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgUDPChecksumEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIPPrecedence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgTechPrefix"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDigitRelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcVoIPCfgGroupRev1 = cvdcVoIPCfgGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcVoIPCfgGroupRev1.setDescription('A collection of objects providing the VoIP Dial Control configuration capability. cvdcVoIPCfgGroupRev1 group is superseded by cvdcVoIPCfgGroupRev2.')
cvdcGeneralCfgGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 12)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgIfIndex"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgType"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgRowStatus"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgIncomingDnisDigits"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgMaxConnections"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgApplicationName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgPreference"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgHuntStop"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcGeneralCfgGroupRev3 = cvdcGeneralCfgGroupRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcGeneralCfgGroupRev3.setDescription('A collection of objects providing the general Voice Gateway Call Dial Control configuration capability. cvdcGeneralCfgGroupRev3 group is superseded by cvdcGeneralCfgGroupRev4.')
cvdcVoiceCfgGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 13)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgDialDigitsPrefix"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgDIDCallEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgCasGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgRegisterE164"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgForwardDigits"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgEchoCancellerTest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcVoiceCfgGroupRev2 = cvdcVoiceCfgGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cvdcVoiceCfgGroupRev2.setDescription('A collection of objects providing the GSTN (General Switched Telephony Network Voice Dial Control configuration capability. GSTN (General Switched Telephony Network), which is supposed to encompass analog, ISDN, Cellular - essentially anything circuit switched over the TDM infrastructure.')
cvdcVoIPCfgGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 14)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCoderRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgFaxRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDesiredQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgMinAcceptableQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgVADEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgExpectFactor"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgUDPChecksumEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIPPrecedence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgTechPrefix"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDigitRelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCoderBytes"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgFaxBytes"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgInBandSignaling"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcVoIPCfgGroupRev2 = cvdcVoIPCfgGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcVoIPCfgGroupRev2.setDescription('A collection of objects providing the VoIP Dial Control configuration capability. cvdcVoIPCfgGroupRev2 group is superseded by cvdcVoIPCfgGroupRev3.')
cvVoIPCallGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 15)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemoteIPAddress"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemoteUDPPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLostPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveEarlyPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemoteIPAddress"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemoteUDPPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLostPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryEarlyPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvVoIPCallGroupRev3 = cvVoIPCallGroupRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cvVoIPCallGroupRev3.setDescription('A collection of objects providing the VoIP Call capability. cvVoIPCallGroupRev3 group is superseded by cvVoIPCallGroupRev4.')
cvdcNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 16)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcPoorQoVNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcNotificationGroup = cvdcNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcNotificationGroup.setDescription('The notifications for the CISCO-VOICE-DIAL-CONTROL-MIB cvdcNotificationGroup group is superseded by cvdcNotificationGroupRev1.')
cvCallGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 17)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveOutSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveInSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveERLLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCallingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCallerIDBlock"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveEcanReflectorLocation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCallingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCallerIDBlock"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvCallGroupRev2 = cvCallGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cvCallGroupRev2.setDescription('A collection of objects providing the GSTN (General Switched Telephony Network Voice Dial Control configuration capability. GSTN (General Switched Telephony Network), which is supposed to encompass analog, ISDN, Cellular - essentially anything circuit switched over the TDM infrastructure. cvCallGroupRev2 group is superseded by cvCallGroupRev3.')
cvdcGeneralCfgGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 18)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgIfIndex"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgType"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgRowStatus"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgIncomingDnisDigits"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgMaxConnections"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgApplicationName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgPreference"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgHuntStop"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgDnisMappingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgSourceCarrierId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgTargetCarrierId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgSourceTrunkGrpLabel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgTargetTrunkGrpLabel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcGeneralCfgGroupRev4 = cvdcGeneralCfgGroupRev4.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcGeneralCfgGroupRev4.setDescription('A collection of objects providing the general Voice Gateway Call Dial Control configuration capability. cvdcGeneralCfgGroupRev4 group is superseded by cvdcGeneralCfgGroupRev5.')
cvVoIPCallGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 19)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLostPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveEarlyPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveUsername"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveProtocolCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemSigIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemSigIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemSigPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemMediaIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemMediaIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemMediaPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLostPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryEarlyPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryUsername"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryProtocolCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvVoIPCallGroupRev4 = cvVoIPCallGroupRev4.setStatus('deprecated')
if mibBuilder.loadTexts: cvVoIPCallGroupRev4.setDescription('A collection of objects providing the VoIP Call capability. cvVoIPCallGroupRev4 group is superseded by cvVoIPCallGroupRev5.')
cvdcNotificationGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 20)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcPoorQoVNotificationRev1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcNotificationGroupRev1 = cvdcNotificationGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcNotificationGroupRev1.setDescription('The notifications for the CISCO-VOICE-DIAL-CONTROL-MIB cvdcNotificationGroupRev1 group is superseded by cvdcNotificationGroupRev2.')
cvdcVoIPCfgGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 21)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCoderRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgFaxRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDesiredQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgMinAcceptableQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgVADEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgExpectFactor"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgUDPChecksumEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIPPrecedence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgTechPrefix"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDigitRelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCoderBytes"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgFaxBytes"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgInBandSignaling"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcVoIPCfgGroupRev3 = cvdcVoIPCfgGroupRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcVoIPCfgGroupRev3.setDescription('A collection of objects providing the VoIP Dial Control configuration capability. cvdcVoIPCfgGroupRev3 group is superseded by cvdcVoIPCfgGroupRev4.')
cvdcGeneralCfgGroupRev5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 22)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgIfIndex"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgType"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgRowStatus"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgPeerType"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgIncomingDnisDigits"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgMaxConnections"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgApplicationName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgPreference"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgHuntStop"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgDnisMappingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgSourceCarrierId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgTargetCarrierId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgSourceTrunkGrpLabel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgTargetTrunkGrpLabel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcGeneralCfgGroupRev5 = cvdcGeneralCfgGroupRev5.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcGeneralCfgGroupRev5.setDescription('A collection of objects providing the general Voice Gateway Call Dial Control configuration capability. cvdcGeneralCfgGroupRev5 group is superseded by cvdcGeneralCfgGroupRev6.')
cvdcVoIPCfgGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 23)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCoderRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgFaxRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDesiredQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgMinAcceptableQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgVADEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgExpectFactor"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgUDPChecksumEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIPPrecedence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgTechPrefix"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDigitRelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCoderBytes"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgFaxBytes"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgInBandSignaling"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgMediaSetting"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDesiredQoSVideo"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgMinAcceptableQoSVideo"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgRedirectip2ip"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDSCPPolicyNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgMediaPolicyNotificationEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcVoIPCfgGroupRev4 = cvdcVoIPCfgGroupRev4.setStatus('current')
if mibBuilder.loadTexts: cvdcVoIPCfgGroupRev4.setDescription('A collection of objects providing the VoIP Dial Control configuration capability.')
cvCallGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 24)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveOutSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveInSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveERLLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCallingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCallerIDBlock"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveEcanReflectorLocation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveAccountCode"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCallingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCallerIDBlock"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryAccountCode"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveERLLevelRev1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvCallGroupRev3 = cvCallGroupRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cvCallGroupRev3.setDescription('A collection of objects providing the GSTN (General Switched Telephony Network Voice Dial Control configuration capability. GSTN (General Switched Telephony Network), which is supposed to encompass analog, ISDN, Cellular - essentially anything circuit switched over the TDM infrastructure. cvCallGroupRev3 group is superseded by cvCallGroupRev4.')
cvCallGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 25)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveOutSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveInSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCallingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCallerIDBlock"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveEcanReflectorLocation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveAccountCode"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCallingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCallerIDBlock"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryAccountCode"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveERLLevelRev1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvCallGroupRev4 = cvCallGroupRev4.setStatus('deprecated')
if mibBuilder.loadTexts: cvCallGroupRev4.setDescription('A collection of objects providing the GSTN (General Switched Telephony Network Voice Dial Control configuration capability. GSTN (General Switched Telephony Network), which is supposed to encompass analog, ISDN, Cellular - essentially anything circuit switched over the TDM infrastructure. cvCallGroupRev4 group is superseded by cvCallGroupRev5.')
cvVoIPCallGroupRev5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 26)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLostPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveEarlyPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveUsername"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveProtocolCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemSigIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemSigIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemSigPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemMediaIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemMediaIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemMediaPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSRTPEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLostPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryEarlyPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryUsername"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryProtocolCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySRTPEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvVoIPCallGroupRev5 = cvVoIPCallGroupRev5.setStatus('deprecated')
if mibBuilder.loadTexts: cvVoIPCallGroupRev5.setDescription('A collection of objects providing the VoIP Call capability. cvVoIPCallGroupRev5 group is superseded by cvVoIPCallGroupRev6.')
cvCallGroupRev5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 27)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveDS0s"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveDS0sHighThreshold"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveDS0sLowThreshold"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveDS0sHighNotifyEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveDS0sLowNotifyEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveOutSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveInSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCallingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCallerIDBlock"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveEcanReflectorLocation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveAccountCode"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCallingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCallerIDBlock"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryAccountCode"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveERLLevelRev1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvCallGroupRev5 = cvCallGroupRev5.setStatus('current')
if mibBuilder.loadTexts: cvCallGroupRev5.setDescription('A collection of objects providing the GSTN (General Switched Telephony Network Voice Dial Control configuration capability. GSTN (General Switched Telephony Network), which is supposed to encompass analog, ISDN, Cellular - essentially anything circuit switched over the TDM infrastructure.')
cvdcNotificationGroupRev2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 28)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcPoorQoVNotificationRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcActiveDS0sHighNotification"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcActiveDS0sLowNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcNotificationGroupRev2 = cvdcNotificationGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcNotificationGroupRev2.setDescription('The notifications for the CISCO-VOICE-DIAL-CONTROL-MIB cvdcNotificationGroupRev2 group is superseded by cvdcNotificationGroupRev3.')
cvVoIPCallGroupRev6 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 29)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLostPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveEarlyPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveUsername"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveProtocolCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemSigIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemSigIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemSigPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemMediaIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemMediaIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemMediaPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSRTPEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLostPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryEarlyPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryUsername"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryProtocolCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySRTPEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryFallbackIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryFallbackLoss"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryFallbackDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvVoIPCallGroupRev6 = cvVoIPCallGroupRev6.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallGroupRev6.setDescription('A collection of objects providing the VoIP Call capability.')
cvdcGeneralCfgGroupRev6 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 30)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralFallbackNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgIfIndex"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgType"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgRowStatus"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgPeerType"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgIncomingDnisDigits"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgMaxConnections"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgApplicationName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgPreference"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgHuntStop"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgDnisMappingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgSourceCarrierId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgTargetCarrierId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgSourceTrunkGrpLabel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgTargetTrunkGrpLabel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralDSCPPolicyNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralMediaPolicyNotificationEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcGeneralCfgGroupRev6 = cvdcGeneralCfgGroupRev6.setStatus('current')
if mibBuilder.loadTexts: cvdcGeneralCfgGroupRev6.setDescription('A collection of objects providing the general Voice Gateway Call Dial Control configuration capability.')
cvdcNotificationGroupRev3 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 31)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcPoorQoVNotificationRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcActiveDS0sHighNotification"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcActiveDS0sLowNotification"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcFallbackNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcNotificationGroupRev3 = cvdcNotificationGroupRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cvdcNotificationGroupRev3.setDescription('The notifications for the CISCO-VOICE-DIAL-CONTROL-MIB. This group cvdcNotificationGroupRev3 is deprecated and replaced by cvdcNotificationGroupRev4. cvdcNotificationGroupRev3 group is superseded by cvdcNotificationGroupRev4.')
cvdcVoIPCfgAmrNbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 32)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgOctetAligned"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgBitRates"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCRC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcVoIPCfgAmrNbGroup = cvdcVoIPCfgAmrNbGroup.setStatus('current')
if mibBuilder.loadTexts: cvdcVoIPCfgAmrNbGroup.setDescription('A collection of objects providing the VoIP Dial Control configuration capability for GSM AMR-NB codec.')
cvVoIPCallAmrNbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 33)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveOctetAligned"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveBitRates"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveModeChgPeriod"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveModeChgNeighbor"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveMaxPtime"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCRC"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRobustSorting"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveEncap"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveInterleaving"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActivePtime"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveChannels"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryOctetAligned"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryBitRates"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryModeChgPeriod"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryModeChgNeighbor"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryMaxPtime"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCRC"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRobustSorting"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryEncap"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryInterleaving"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryPtime"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryChannels"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvVoIPCallAmrNbGroup = cvVoIPCallAmrNbGroup.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallAmrNbGroup.setDescription('A collection of objects providing GSM AMR-NB codec related information.')
cvdcVoIPCfgIlbcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 34)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCoderMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcVoIPCfgIlbcGroup = cvdcVoIPCfgIlbcGroup.setStatus('current')
if mibBuilder.loadTexts: cvdcVoIPCfgIlbcGroup.setDescription('A collection of objects providing the VoIP Dial Control configuration capability for iLBC codec.')
cvVoIPCallIlbcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 35)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCoderMode"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCoderMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvVoIPCallIlbcGroup = cvVoIPCallIlbcGroup.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallIlbcGroup.setDescription('A collection of objects providing iLBC codec related information.')
cvCallGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 36)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCallId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvCallGroupSup1 = cvCallGroupSup1.setStatus('current')
if mibBuilder.loadTexts: cvCallGroupSup1.setDescription('This group supplements cvCallGroup to provide the call identifier for the telephony leg of the gateway call.')
cvVoIPCallGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 37)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCallReferenceId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCallReferenceId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvVoIPCallGroupSup1 = cvVoIPCallGroupSup1.setStatus('deprecated')
if mibBuilder.loadTexts: cvVoIPCallGroupSup1.setDescription('This group supplements cvVoIPCallGroup to provide the call identifier for the VoIP leg of the gateway call. The group cvVoIPCallGroupSup1 is deprecated and replaced by cvVoIPCallGroupSup2.')
cvCallVolumeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 38)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolConnActiveConnection"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolConnTotalActiveConnections"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolConnMaxCallConnectionLicenese"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolPeerIncomingCalls"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolPeerOutgoingCalls"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolMediaIncomingCalls"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolMediaOutgoingCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvCallVolumeGroup = cvCallVolumeGroup.setStatus('current')
if mibBuilder.loadTexts: cvCallVolumeGroup.setDescription('This group provides the information about the call-volume in the voice gateway.')
cvCallRateMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 39)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateMonitorEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateMonitorTime"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateHiWaterMark"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvCallRateMonitorGroup = cvCallRateMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: cvCallRateMonitorGroup.setDescription('This group represents the objects used to monitor the call-rate.')
cvdcVoIPCfgISACGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 40)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCodingMode"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgBitRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgFrameSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcVoIPCfgISACGroup = cvdcVoIPCfgISACGroup.setStatus('current')
if mibBuilder.loadTexts: cvdcVoIPCfgISACGroup.setDescription('A collection of objects providing iSAC codec related information.')
cvdcNotificationGroupRev4 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 41)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcPoorQoVNotificationRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcActiveDS0sHighNotification"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcActiveDS0sLowNotification"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcFallbackNotification"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcPolicyViolationNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcNotificationGroupRev4 = cvdcNotificationGroupRev4.setStatus('current')
if mibBuilder.loadTexts: cvdcNotificationGroupRev4.setDescription('The notifications for the CISCO-VOICE-DIAL-CONTROL-MIB.')
cvVoIPCallGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 42)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveReversedDirectionPeerAddress"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "ccVoIPCallActivePolicyName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCallReferenceId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCallReferenceId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvVoIPCallGroupSup2 = cvVoIPCallGroupSup2.setStatus('deprecated')
if mibBuilder.loadTexts: cvVoIPCallGroupSup2.setDescription('This group supplements cvVoIPCallGroup to provide the call identifier and policy for the VoIP leg of the gateway call. cvVoIPCallGroupSup2 group is superseded by cvVoIPCallGroupSup3.')
cvVoIPCallGroupSup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 43)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveReversedDirectionPeerAddress"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "ccVoIPCallActivePolicyName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCallReferenceId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCallReferenceId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvVoIPCallGroupSup3 = cvVoIPCallGroupSup3.setStatus('current')
if mibBuilder.loadTexts: cvVoIPCallGroupSup3.setDescription('This group supplements cvVoIPCallGroup to identify the VoIP leg of the gateway call.')
cvdcCallVolumeStatsHistory = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 44)).setObjects(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateStatsMaxVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateStatsAvgVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallLegRateStatsMaxVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallLegRateStatsAvgVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvActiveCallStatsMaxVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvActiveCallStatsAvgVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallDurationStatsMaxVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallDurationStatsAvgVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvSipMsgRateStatsMaxVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvSipMsgRateStatsAvgVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateWMValue"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateWMts"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvActiveCallWMValue"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvActiveCallWMts"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvSipMsgRateWMValue"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvSipMsgRateWMts"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallDurationStatsThreshold"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolumeWMTableSize"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallLegRateWMValue"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallLegRateWMts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvdcCallVolumeStatsHistory = cvdcCallVolumeStatsHistory.setStatus('current')
if mibBuilder.loadTexts: cvdcCallVolumeStatsHistory.setDescription('This group provides the information about the Call Volume Stats History information in the voice gateway.')
mibBuilder.exportSymbols("CISCO-VOICE-DIAL-CONTROL-MIB", cvCallLegRateStatsIntvlDur=cvCallLegRateStatsIntvlDur, cvVoIPCallHistorySRTPEnable=cvVoIPCallHistorySRTPEnable, cvdcMIBComplianceRev7=cvdcMIBComplianceRev7, cvCallHistoryCallId=cvCallHistoryCallId, cvCallLegRateStatsMaxVal=cvCallLegRateStatsMaxVal, cvdcPoorQoVNotificationRev1=cvdcPoorQoVNotificationRev1, cvVoIPCallHistorySessionProtocol=cvVoIPCallHistorySessionProtocol, cvdcNotificationGroupRev1=cvdcNotificationGroupRev1, cvVoIPCallActiveSessionTarget=cvVoIPCallActiveSessionTarget, cvdcMIBComplianceRev14=cvdcMIBComplianceRev14, cvCallActiveCallingName=cvCallActiveCallingName, cvVoIPCallHistoryFallbackIcpif=cvVoIPCallHistoryFallbackIcpif, cvVoIPCallHistoryReceiveDelay=cvVoIPCallHistoryReceiveDelay, cvdcVoiceCfgGroupRev2=cvdcVoiceCfgGroupRev2, cvdcGeneralCfgGroupRev6=cvdcGeneralCfgGroupRev6, cvCallGroupSup1=cvCallGroupSup1, cvActiveCallWMEntry=cvActiveCallWMEntry, cvGeneralMediaPolicyNotificationEnable=cvGeneralMediaPolicyNotificationEnable, cvdcMIBComplianceRev4=cvdcMIBComplianceRev4, cvVoIPCallActivePtime=cvVoIPCallActivePtime, cvCallRateStatsIntvlDur=cvCallRateStatsIntvlDur, cvdcVoiceCfgGroup=cvdcVoiceCfgGroup, cvGatewayCallHistory=cvGatewayCallHistory, cvSipMsgRateWMIntvlDurUnits=cvSipMsgRateWMIntvlDurUnits, cvVoIPCallGroupRev3=cvVoIPCallGroupRev3, cvVoicePeerCfgTable=cvVoicePeerCfgTable, cvVoIPCallActiveEarlyPackets=cvVoIPCallActiveEarlyPackets, cvSipMsgRateStatsMaxVal=cvSipMsgRateStatsMaxVal, cvVoIPPeerCfgCoderMode=cvVoIPPeerCfgCoderMode, cvSipMsgRateWMValue=cvSipMsgRateWMValue, cvVoIPCallActiveRemSigPort=cvVoIPCallActiveRemSigPort, cvSipMsgRateStatsAvgVal=cvSipMsgRateStatsAvgVal, cvSipMsgRateStatsIntvlDur=cvSipMsgRateStatsIntvlDur, cvActiveCallStatsIntvlDur=cvActiveCallStatsIntvlDur, cvCallActiveAccountCode=cvCallActiveAccountCode, cvVoicePeerCfgRegisterE164=cvVoicePeerCfgRegisterE164, cvVoIPPeerCfgSessionProtocol=cvVoIPPeerCfgSessionProtocol, cvVoIPCallHistoryBitRates=cvVoIPCallHistoryBitRates, cvSipMsgRateWMts=cvSipMsgRateWMts, cvdcFallbackNotification=cvdcFallbackNotification, cvVoIPCallHistoryHiWaterPlayoutDelay=cvVoIPCallHistoryHiWaterPlayoutDelay, cvVoIPPeerCfgBitRates=cvVoIPPeerCfgBitRates, cvCallHistoryACOMLevel=cvCallHistoryACOMLevel, cvVoIPCallActiveOnTimeRvPlayout=cvVoIPCallActiveOnTimeRvPlayout, cvVoIPCallHistoryEncap=cvVoIPCallHistoryEncap, cvVoIPPeerCfgExpectFactor=cvVoIPPeerCfgExpectFactor, cvVoIPCallActiveGapFillWithSilence=cvVoIPCallActiveGapFillWithSilence, ccVoIPCallActivePolicyName=ccVoIPCallActivePolicyName, cvCallVolPeerIncomingCalls=cvCallVolPeerIncomingCalls, cvVoIPCallHistoryRemSigIPAddr=cvVoIPCallHistoryRemSigIPAddr, cvCallLegRateWMts=cvCallLegRateWMts, cvVoIPCallHistoryEntry=cvVoIPCallHistoryEntry, cvVoIPCallActiveLoWaterPlayoutDelay=cvVoIPCallActiveLoWaterPlayoutDelay, cvCallHistoryConnectionId=cvCallHistoryConnectionId, cvVoIPCallActiveSelectedQoS=cvVoIPCallActiveSelectedQoS, cvVoIPPeerCfgDesiredQoSVideo=cvVoIPPeerCfgDesiredQoSVideo, cvdcMIBComplianceRev22=cvdcMIBComplianceRev22, cvPeerCommonCfgTargetCarrierId=cvPeerCommonCfgTargetCarrierId, cvVoIPCallActiveCRC=cvVoIPCallActiveCRC, cvSipMsgRateStatsIntvlDurUnits=cvSipMsgRateStatsIntvlDurUnits, cvVoIPCallHistoryLoWaterPlayoutDelay=cvVoIPCallHistoryLoWaterPlayoutDelay, cvCallActiveFaxTxDuration=cvCallActiveFaxTxDuration, cvCallHistoryFaxTxDuration=cvCallHistoryFaxTxDuration, cvCallLegRateStatsIntvlDurUnits=cvCallLegRateStatsIntvlDurUnits, cvCallHistoryCallerIDBlock=cvCallHistoryCallerIDBlock, cvdcGeneralCfgGroupRev2=cvdcGeneralCfgGroupRev2, cvCallRateWMIndex=cvCallRateWMIndex, cvVoIPCallActiveVADEnable=cvVoIPCallActiveVADEnable, cvPeerCfgIndex=cvPeerCfgIndex, cvVoIPCallHistoryCallReferenceId=cvVoIPCallHistoryCallReferenceId, cvVoIPCallHistoryTable=cvVoIPCallHistoryTable, cvVoIPCallActiveReceiveDelay=cvVoIPCallActiveReceiveDelay, cvVoIPCallActiveSessionId=cvVoIPCallActiveSessionId, cvdcNotificationGroupRev4=cvdcNotificationGroupRev4, cvVoIPCallGroupSup3=cvVoIPCallGroupSup3, cvVoIPCallHistoryModeChgPeriod=cvVoIPCallHistoryModeChgPeriod, cvCallVolConnIndex=cvCallVolConnIndex, cvVoIPPeerCfgMediaPolicyNotificationEnable=cvVoIPPeerCfgMediaPolicyNotificationEnable, CvSessionProtocol=CvSessionProtocol, cvVoIPCallHistoryGapFillWithPrediction=cvVoIPCallHistoryGapFillWithPrediction, cvdcMIBComplianceRev20=cvdcMIBComplianceRev20, cvdcMIBComplianceRev10=cvdcMIBComplianceRev10, cvCallActiveOutSignalLevel=cvCallActiveOutSignalLevel, cvVoIPPeerCfgDigitRelay=cvVoIPPeerCfgDigitRelay, cvCallActiveDS0sLowNotifyEnable=cvCallActiveDS0sLowNotifyEnable, cvVoIPPeerCfgIcpif=cvVoIPPeerCfgIcpif, cvVoIPCallHistoryModeChgNeighbor=cvVoIPCallHistoryModeChgNeighbor, cvCallActiveImgPageCount=cvCallActiveImgPageCount, cvVoIPCallActiveLatePackets=cvVoIPCallActiveLatePackets, cvVoIPPeerCfgPoorQoVNotificationEnable=cvVoIPPeerCfgPoorQoVNotificationEnable, cvVoIPCallHistoryRemoteIPAddress=cvVoIPCallHistoryRemoteIPAddress, cvVoIPCallActiveModeChgPeriod=cvVoIPCallActiveModeChgPeriod, cvCallVolumeStatsHistory=cvCallVolumeStatsHistory, cvdcVoIPCfgGroup=cvdcVoIPCfgGroup, cvVoIPCallActiveSessionProtocol=cvVoIPCallActiveSessionProtocol, cvVoIPCallHistoryGapFillWithRedundancy=cvVoIPCallHistoryGapFillWithRedundancy, cvVoIPCallHistoryFallbackDelay=cvVoIPCallHistoryFallbackDelay, cvdcVoIPCfgIlbcGroup=cvdcVoIPCfgIlbcGroup, cvCallVolumeGroup=cvCallVolumeGroup, cvdcCallVolumeStatsHistory=cvdcCallVolumeStatsHistory, cvPeerCfgEntry=cvPeerCfgEntry, cvCallActiveConnectionId=cvCallActiveConnectionId, cvGeneralConfiguration=cvGeneralConfiguration, cvdcPolicyViolationNotification=cvdcPolicyViolationNotification, cvVoIPCallHistoryLatePackets=cvVoIPCallHistoryLatePackets, cvCallLegRateWMEntry=cvCallLegRateWMEntry, cvCallVolMediaOutgoingCalls=cvCallVolMediaOutgoingCalls, cvVoIPPeerCfgFaxRate=cvVoIPPeerCfgFaxRate, cvPeerCommonCfgHuntStop=cvPeerCommonCfgHuntStop, CvCallConnectionType=CvCallConnectionType, cvdcVoIPCfgAmrNbGroup=cvdcVoIPCfgAmrNbGroup, cvVoicePeerCfgEntry=cvVoicePeerCfgEntry, cvVoIPCallActiveConnectionId=cvVoIPCallActiveConnectionId, cvVoIPPeerCfgTable=cvVoIPPeerCfgTable, cvCallRateWMEntry=cvCallRateWMEntry, cvVoIPCallGroupRev5=cvVoIPCallGroupRev5, cvdcPoorQoVNotification=cvdcPoorQoVNotification, cvdcGeneralCfgGroupRev1=cvdcGeneralCfgGroupRev1, cvVoIPPeerCfgMediaSetting=cvVoIPPeerCfgMediaSetting, cvVoIPCallHistoryCRC=cvVoIPCallHistoryCRC, cvCallGroupRev2=cvCallGroupRev2, cvVoIPCallActiveRemoteUDPPort=cvVoIPCallActiveRemoteUDPPort, cvCallActiveCallerIDBlock=cvCallActiveCallerIDBlock, cvCallHistoryCoderTypeRate=cvCallHistoryCoderTypeRate, cvdcMIBNotificationPrefix=cvdcMIBNotificationPrefix, cvdcMIBComplianceRev8=cvdcMIBComplianceRev8, cvdcMIBComplianceRev19=cvdcMIBComplianceRev19, cvVoIPCallActiveSRTPEnable=cvVoIPCallActiveSRTPEnable, cvVoIPCallHistoryProtocolCallId=cvVoIPCallHistoryProtocolCallId, cvVoIPCallActiveLostPackets=cvVoIPCallActiveLostPackets, cvdcMIBCompliance=cvdcMIBCompliance, cvCallRateWMValue=cvCallRateWMValue, cvdcMIBComplianceRev6=cvdcMIBComplianceRev6, cvCallRateMonitorGroup=cvCallRateMonitorGroup, cvCallHistorySessionTarget=cvCallHistorySessionTarget, cvdcMIBComplianceRev5=cvdcMIBComplianceRev5, cvVoIPCallGroupSup1=cvVoIPCallGroupSup1, cvCallActiveSessionTarget=cvCallActiveSessionTarget, cvdcGeneralCfgGroup=cvdcGeneralCfgGroup, cvActiveCallStatsAvgVal=cvActiveCallStatsAvgVal, cvSipMsgRateStatsTable=cvSipMsgRateStatsTable, cvCallGroupRev5=cvCallGroupRev5, cvPeerCommonCfgSourceTrunkGrpLabel=cvPeerCommonCfgSourceTrunkGrpLabel, cvPeerCommonCfgMaxConnections=cvPeerCommonCfgMaxConnections, cvCallHistoryTxDuration=cvCallHistoryTxDuration, cvVoIPCallActiveUsername=cvVoIPCallActiveUsername, cvCallHistoryVoiceTxDuration=cvCallHistoryVoiceTxDuration, cvPeerCommonCfgEntry=cvPeerCommonCfgEntry, cvdcMIBComplianceRev13=cvdcMIBComplianceRev13, cvVoIPCallActiveTable=cvVoIPCallActiveTable, cvPeerCfgIfIndex=cvPeerCfgIfIndex, cvCallDurationStatsEntry=cvCallDurationStatsEntry, cvCallDurationStatsIntvlDurUnits=cvCallDurationStatsIntvlDurUnits, cvCallHistoryAccountCode=cvCallHistoryAccountCode, cvVoIPCallGroup=cvVoIPCallGroup, cvVoIPCallActiveRemMediaIPAddr=cvVoIPCallActiveRemMediaIPAddr, cvCallDurationStatsAvgVal=cvCallDurationStatsAvgVal, cvSipMsgRateWMTable=cvSipMsgRateWMTable, cvCallLegRateWMIntvlDurUnits=cvCallLegRateWMIntvlDurUnits, cvVoIPCallHistoryPtime=cvVoIPCallHistoryPtime, cvCallVolumeWMTableSize=cvCallVolumeWMTableSize, cvVoIPCallActiveReversedDirectionPeerAddress=cvVoIPCallActiveReversedDirectionPeerAddress, cvCallRateMonitorEnable=cvCallRateMonitorEnable, cvVoIPPeerCfgCRC=cvVoIPPeerCfgCRC, cvPeerCfgType=cvPeerCfgType, cvVoIPCallHistoryRemMediaPort=cvVoIPCallHistoryRemMediaPort, cvActiveCallWMIntvlDurUnits=cvActiveCallWMIntvlDurUnits, cvdcActiveDS0sLowNotification=cvdcActiveDS0sLowNotification, cvdcVoIPCfgGroupRev2=cvdcVoIPCfgGroupRev2, cvVoIPPeerCfgSessionTarget=cvVoIPPeerCfgSessionTarget, cvActiveCallStatsEntry=cvActiveCallStatsEntry, cvVoIPCallHistoryRemMediaIPAddrT=cvVoIPCallHistoryRemMediaIPAddrT, cvPeerCommonCfgIncomingDnisDigits=cvPeerCommonCfgIncomingDnisDigits, cvCallVolume=cvCallVolume, cvVoIPCallActiveGapFillWithRedundancy=cvVoIPCallActiveGapFillWithRedundancy, cvPeerCommonCfgPreference=cvPeerCommonCfgPreference, cvdcMIBComplianceRev3=cvdcMIBComplianceRev3, cvCallVolConnTotalActiveConnections=cvCallVolConnTotalActiveConnections, cvActiveCallWMts=cvActiveCallWMts, cvCallGroup=cvCallGroup, cvPeerCommonCfgTargetTrunkGrpLabel=cvPeerCommonCfgTargetTrunkGrpLabel, cvdcVoIPCfgGroupRev4=cvdcVoIPCfgGroupRev4, cvdcMIBConformance=cvdcMIBConformance, cvVoIPCallHistoryUsername=cvVoIPCallHistoryUsername, cvActiveCallWMTable=cvActiveCallWMTable, cvCallHistoryImgPageCount=cvCallHistoryImgPageCount, cvCallLegRateStatsAvgVal=cvCallLegRateStatsAvgVal, cvPeerCfgTable=cvPeerCfgTable, cvVoIPCallIlbcGroup=cvVoIPCallIlbcGroup, cvCallVolConnEntry=cvCallVolConnEntry, cvGeneralFallbackNotificationEnable=cvGeneralFallbackNotificationEnable, cvGatewayCallActive=cvGatewayCallActive, CvCallVolumeWMIntvlType=CvCallVolumeWMIntvlType, cvVoIPCallHistoryInterleaving=cvVoIPCallHistoryInterleaving, cvGeneralDSCPPolicyNotificationEnable=cvGeneralDSCPPolicyNotificationEnable, cvCallDurationStatsThreshold=cvCallDurationStatsThreshold, cvdcMIBGroups=cvdcMIBGroups, cvdcVoiceCfgGroupRev1=cvdcVoiceCfgGroupRev1, cvCallVolConnActiveConnection=cvCallVolConnActiveConnection, cvActiveCallStatsMaxVal=cvActiveCallStatsMaxVal, cvdcGeneralCfgGroupRev5=cvdcGeneralCfgGroupRev5, cvVoIPCallActiveGapFillWithInterpolation=cvVoIPCallActiveGapFillWithInterpolation, cvVoIPPeerCfgRedirectip2ip=cvVoIPPeerCfgRedirectip2ip, cvVoIPCallActiveProtocolCallId=cvVoIPCallActiveProtocolCallId, cvCallHistoryNoiseLevel=cvCallHistoryNoiseLevel, cvCallDurationStatsIntvlDur=cvCallDurationStatsIntvlDur, cvVoIPCallHistoryChannels=cvVoIPCallHistoryChannels, cvVoIPCallHistorySessionId=cvVoIPCallHistorySessionId, cvVoIPPeerCfgCodingMode=cvVoIPPeerCfgCodingMode, cvVoIPPeerCfgIPPrecedence=cvVoIPPeerCfgIPPrecedence, cvVoIPPeerCfgTechPrefix=cvVoIPPeerCfgTechPrefix, cvCallActiveDS0s=cvCallActiveDS0s, cvCallLegRateStatsEntry=cvCallLegRateStatsEntry, cvCallDurationStatsMaxVal=cvCallDurationStatsMaxVal, cvVoIPCallActiveRemMediaPort=cvVoIPCallActiveRemMediaPort, cvCallDurationStatsTable=cvCallDurationStatsTable, cvVoIPCallGroupSup2=cvVoIPCallGroupSup2, CvAmrNbBitRateMode=CvAmrNbBitRateMode, cvCallLegRateWMIndex=cvCallLegRateWMIndex, cvVoIPPeerCfgEntry=cvVoIPPeerCfgEntry, cvVoIPCallActiveHiWaterPlayoutDelay=cvVoIPCallActiveHiWaterPlayoutDelay, cvVoicePeerCfgEchoCancellerTest=cvVoicePeerCfgEchoCancellerTest, cvCallHistoryTable=cvCallHistoryTable, cvVoIPCallActiveModeChgNeighbor=cvVoIPCallActiveModeChgNeighbor, cvVoIPCallActiveRemSigIPAddr=cvVoIPCallActiveRemSigIPAddr, cvVoIPCallActiveInterleaving=cvVoIPCallActiveInterleaving, cvCallActiveACOMLevel=cvCallActiveACOMLevel, cvVoIPCallHistoryRemSigPort=cvVoIPCallHistoryRemSigPort, cvCallVolConnTable=cvCallVolConnTable, cvdcMIBComplianceRev12=cvdcMIBComplianceRev12, cvVoIPPeerCfgMinAcceptableQoS=cvVoIPPeerCfgMinAcceptableQoS, cvVoIPCallActiveCoderMode=cvVoIPCallActiveCoderMode, cvCallVolPeerTable=cvCallVolPeerTable, cvCallHistoryCallingName=cvCallHistoryCallingName, cvVoIPCallHistoryLostPackets=cvVoIPCallHistoryLostPackets, ciscoVoiceDialControlMIB=ciscoVoiceDialControlMIB, cvPeerCommonCfgTable=cvPeerCommonCfgTable, cvActiveCallStatsTable=cvActiveCallStatsTable, cvVoIPCallHistoryGapFillWithSilence=cvVoIPCallHistoryGapFillWithSilence, cvCallRateStatsMaxVal=cvCallRateStatsMaxVal, cvVoIPCallGroupRev4=cvVoIPCallGroupRev4, cvdcVoIPCfgGroupRev3=cvdcVoIPCfgGroupRev3, cvCallActiveDS0sHighThreshold=cvCallActiveDS0sHighThreshold, cvCallRateStatsTable=cvCallRateStatsTable, cvPeerCommonCfgApplicationName=cvPeerCommonCfgApplicationName, cvSipMsgRateStatsEntry=cvSipMsgRateStatsEntry, cvSipMsgRateWMEntry=cvSipMsgRateWMEntry, cvVoIPCallHistoryRemMediaIPAddr=cvVoIPCallHistoryRemMediaIPAddr, cvVoIPPeerCfgUDPChecksumEnable=cvVoIPPeerCfgUDPChecksumEnable, cvVoIPCallGroupRev1=cvVoIPCallGroupRev1, cvVoicePeerCfgCasGroup=cvVoicePeerCfgCasGroup, cvVoIPCallActiveRemSigIPAddrT=cvVoIPCallActiveRemSigIPAddrT, CvCallVolumeStatsIntvlType=CvCallVolumeStatsIntvlType, cvCallRateStatsEntry=cvCallRateStatsEntry)
mibBuilder.exportSymbols("CISCO-VOICE-DIAL-CONTROL-MIB", cvdcVoIPCfgISACGroup=cvdcVoIPCfgISACGroup, cvVoIPCallHistoryCoderTypeRate=cvVoIPCallHistoryCoderTypeRate, PYSNMP_MODULE_ID=ciscoVoiceDialControlMIB, cvVoIPPeerCfgVADEnable=cvVoIPPeerCfgVADEnable, cvCallActiveCoderTypeRate=cvCallActiveCoderTypeRate, cvdcMIBNotifications=cvdcMIBNotifications, cvCallActiveERLLevelRev1=cvCallActiveERLLevelRev1, cvVoIPCallActiveCoderTypeRate=cvVoIPCallActiveCoderTypeRate, cvVoIPCallHistoryCallId=cvVoIPCallHistoryCallId, cvVoIPPeerCfgCoderRate=cvVoIPPeerCfgCoderRate, cvCallGroupRev4=cvCallGroupRev4, cvCallActiveNoiseLevel=cvCallActiveNoiseLevel, cvdcMIBComplianceRev2=cvdcMIBComplianceRev2, cvdcMIBComplianceRev11=cvdcMIBComplianceRev11, cvVoIPCallAmrNbGroup=cvVoIPCallAmrNbGroup, cvGeneralPoorQoVNotificationEnable=cvGeneralPoorQoVNotificationEnable, cvCallActiveERLLevel=cvCallActiveERLLevel, cvCallGroupRev3=cvCallGroupRev3, cvActiveCallWMIndex=cvActiveCallWMIndex, CvIlbcFrameMode=CvIlbcFrameMode, cvVoIPCallActiveEntry=cvVoIPCallActiveEntry, cvdcMIBCompliances=cvdcMIBCompliances, cvPeerCfgPeerType=cvPeerCfgPeerType, cvdcMIBComplianceRev16=cvdcMIBComplianceRev16, cvPeerCfgRowStatus=cvPeerCfgRowStatus, cvActiveCallWMValue=cvActiveCallWMValue, cvVoIPPeerCfgOctetAligned=cvVoIPPeerCfgOctetAligned, cvCallHistoryEntry=cvCallHistoryEntry, cvVoIPCallHistoryOnTimeRvPlayout=cvVoIPCallHistoryOnTimeRvPlayout, cvVoIPCallHistoryFallbackLoss=cvVoIPCallHistoryFallbackLoss, cvVoIPPeerCfgMinAcceptableQoSVideo=cvVoIPPeerCfgMinAcceptableQoSVideo, cvVoIPCallActiveRoundTripDelay=cvVoIPCallActiveRoundTripDelay, cvVoIPCallHistoryMaxPtime=cvVoIPCallHistoryMaxPtime, cvdcVoIPCfgGroupRev1=cvdcVoIPCfgGroupRev1, cvSipMsgRateWMIndex=cvSipMsgRateWMIndex, cvdcMIBComplianceRev1=cvdcMIBComplianceRev1, cvVoIPCallGroupRev6=cvVoIPCallGroupRev6, cvCallActiveVoiceTxDuration=cvCallActiveVoiceTxDuration, cvdcActiveDS0sHighNotification=cvdcActiveDS0sHighNotification, cvVoIPPeerCfgDesiredQoS=cvVoIPPeerCfgDesiredQoS, cvdcMIBComplianceRev15=cvdcMIBComplianceRev15, cvCallActiveEntry=cvCallActiveEntry, cvVoicePeerCfgForwardDigits=cvVoicePeerCfgForwardDigits, cvVoicePeerCfgDIDCallEnable=cvVoicePeerCfgDIDCallEnable, cvVoIPCallActiveEncap=cvVoIPCallActiveEncap, cvVoIPCallHistoryConnectionId=cvVoIPCallHistoryConnectionId, cvVoIPCallHistoryGapFillWithInterpolation=cvVoIPCallHistoryGapFillWithInterpolation, cvCallRateStatsIntvlDurUnits=cvCallRateStatsIntvlDurUnits, cvVoIPPeerCfgBitRate=cvVoIPPeerCfgBitRate, cvCallVolMediaIncomingCalls=cvCallVolMediaIncomingCalls, cvCallVolIfEntry=cvCallVolIfEntry, cvdcGeneralCfgGroupRev3=cvdcGeneralCfgGroupRev3, cvCallActiveTable=cvCallActiveTable, cvPeerCommonCfgDnisMappingName=cvPeerCommonCfgDnisMappingName, cvVoIPCallHistoryVADEnable=cvVoIPCallHistoryVADEnable, cvVoIPCallActiveCallId=cvVoIPCallActiveCallId, cvVoIPCallHistoryOctetAligned=cvVoIPCallHistoryOctetAligned, cvVoIPPeerCfgDSCPPolicyNotificationEnable=cvVoIPPeerCfgDSCPPolicyNotificationEnable, cvVoIPPeerCfgCoderBytes=cvVoIPPeerCfgCoderBytes, cvVoIPCallActiveOctetAligned=cvVoIPCallActiveOctetAligned, cvCallVolIfTable=cvCallVolIfTable, cvVoicePeerCfgSessionTarget=cvVoicePeerCfgSessionTarget, cvdcMIBComplianceRev9=cvdcMIBComplianceRev9, cvVoIPCallHistoryRoundTripDelay=cvVoIPCallHistoryRoundTripDelay, cvVoicePeerCfgDialDigitsPrefix=cvVoicePeerCfgDialDigitsPrefix, cvCallActiveCallId=cvCallActiveCallId, cvCallActiveEcanReflectorLocation=cvCallActiveEcanReflectorLocation, cvVoIPCallActiveCallReferenceId=cvVoIPCallActiveCallReferenceId, cvdcNotificationGroupRev3=cvdcNotificationGroupRev3, cvCallActiveInSignalLevel=cvCallActiveInSignalLevel, cvVoIPCallActiveChannels=cvVoIPCallActiveChannels, cvdcNotificationGroup=cvdcNotificationGroup, cvCallActiveDS0sHighNotifyEnable=cvCallActiveDS0sHighNotifyEnable, cvVoIPCallActiveRemoteIPAddress=cvVoIPCallActiveRemoteIPAddress, cvCallRateHiWaterMark=cvCallRateHiWaterMark, cvVoIPCallHistoryEarlyPackets=cvVoIPCallHistoryEarlyPackets, cvCallRateWMIntvlDurUnits=cvCallRateWMIntvlDurUnits, cvVoIPPeerCfgFrameSize=cvVoIPPeerCfgFrameSize, cvCallActiveDS0sLowThreshold=cvCallActiveDS0sLowThreshold, cvdcGeneralCfgGroupRev4=cvdcGeneralCfgGroupRev4, cvVoIPPeerCfgFaxBytes=cvVoIPPeerCfgFaxBytes, cvdcMIBComplianceRev18=cvdcMIBComplianceRev18, cvCallRateWMts=cvCallRateWMts, cvVoIPCallHistorySelectedQoS=cvVoIPCallHistorySelectedQoS, cvPeer=cvPeer, cvdcMIBComplianceRev21=cvdcMIBComplianceRev21, cvVoIPCallHistoryRemSigIPAddrT=cvVoIPCallHistoryRemSigIPAddrT, cvVoIPCallActiveRemMediaIPAddrT=cvVoIPCallActiveRemMediaIPAddrT, cvCallRateMonitor=cvCallRateMonitor, cvVoIPCallHistoryCoderMode=cvVoIPCallHistoryCoderMode, cvCallRateMonitorTime=cvCallRateMonitorTime, cvCallLegRateWMTable=cvCallLegRateWMTable, cvCallActiveTxDuration=cvCallActiveTxDuration, cvCallRateStatsAvgVal=cvCallRateStatsAvgVal, CvAmrNbRtpEncap=CvAmrNbRtpEncap, cvVoIPCallActiveBitRates=cvVoIPCallActiveBitRates, cvCallLegRateStatsTable=cvCallLegRateStatsTable, cvdcNotificationGroupRev2=cvdcNotificationGroupRev2, cvVoIPCallHistoryRobustSorting=cvVoIPCallHistoryRobustSorting, cvCallVolPeerEntry=cvCallVolPeerEntry, cvVoIPCallHistorySessionTarget=cvVoIPCallHistorySessionTarget, cvVoIPPeerCfgInBandSignaling=cvVoIPPeerCfgInBandSignaling, cvActiveCallStatsIntvlDurUnits=cvActiveCallStatsIntvlDurUnits, CvCasGroup=CvCasGroup, cvPeerCommonCfgSourceCarrierId=cvPeerCommonCfgSourceCarrierId, cvCallVolConnMaxCallConnectionLicenese=cvCallVolConnMaxCallConnectionLicenese, cvVoIPCallActiveRobustSorting=cvVoIPCallActiveRobustSorting, cvCallVolPeerOutgoingCalls=cvCallVolPeerOutgoingCalls, cvdcMIBComplianceRev17=cvdcMIBComplianceRev17, cvVoIPCallActiveGapFillWithPrediction=cvVoIPCallActiveGapFillWithPrediction, cvCallRateWMTable=cvCallRateWMTable, cvVoIPCallHistoryRemoteUDPPort=cvVoIPCallHistoryRemoteUDPPort, cvCallRate=cvCallRate, cvdcMIBObjects=cvdcMIBObjects, cvCallGroupRev1=cvCallGroupRev1, cvCallLegRateWMValue=cvCallLegRateWMValue, cvVoIPCallActiveMaxPtime=cvVoIPCallActiveMaxPtime, cvVoIPCallHistoryIcpif=cvVoIPCallHistoryIcpif)
