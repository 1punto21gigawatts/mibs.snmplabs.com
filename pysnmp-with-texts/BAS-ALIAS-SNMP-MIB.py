#
# PySNMP MIB module BAS-ALIAS-SNMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-ALIAS-SNMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:33:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
BasSlotId, BasLogicalPortId, BasChassisId, basAliasSnmp, BasInterfaceId = mibBuilder.importSymbols("BAS-MIB", "BasSlotId", "BasLogicalPortId", "BasChassisId", "basAliasSnmp", "BasInterfaceId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Unsigned32, TimeTicks, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, iso, NotificationType, Counter64, Counter32, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "TimeTicks", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "iso", "NotificationType", "Counter64", "Counter32", "MibIdentifier", "ModuleIdentity")
TextualConvention, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DisplayString")
basAliasSnmpMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1))
if mibBuilder.loadTexts: basAliasSnmpMib.setLastUpdated('9810081200Z')
if mibBuilder.loadTexts: basAliasSnmpMib.setOrganization('Broadband Access Systems')
if mibBuilder.loadTexts: basAliasSnmpMib.setContactInfo(' Tech Support Broadband Access Systems 201 Forest Street Marlboro, MA 01752 U.S.A. 508-485-8200 support@basystems.com')
if mibBuilder.loadTexts: basAliasSnmpMib.setDescription('This MIB module defines the Alias SNMP MIB objects for a Broadband Access System Cluster.')
basSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1))
basSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2))
basSysTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1), )
if mibBuilder.loadTexts: basSysTable.setStatus('current')
if mibBuilder.loadTexts: basSysTable.setDescription('Per Chassis Stack MIB-II system objects.')
basSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1), ).setIndexNames((0, "BAS-ALIAS-SNMP-MIB", "basSysChassis"), (0, "BAS-ALIAS-SNMP-MIB", "basSysSlot"), (0, "BAS-ALIAS-SNMP-MIB", "basSysIf"), (0, "BAS-ALIAS-SNMP-MIB", "basSysLPort"))
if mibBuilder.loadTexts: basSysEntry.setStatus('current')
if mibBuilder.loadTexts: basSysEntry.setDescription('MIB-II system objects for a Chassis Stack.')
basSysDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSysDescr.setStatus('current')
if mibBuilder.loadTexts: basSysDescr.setDescription("A textual description of the entity. This value should include the full name and version identification of the system's hardware type, software operating-system, and networking software.")
basSysObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSysObjectID.setStatus('current')
if mibBuilder.loadTexts: basSysObjectID.setDescription("The vendor's authoritative identification of the network management subsystem contained in the entity. This value is allocated within the SMI enterprises subtree (1.3.6.1.4.1) and provides an easy and unambiguous means for determining `what kind of box' is being managed. For example, if vendor `Flintstones, Inc.' was assigned the subtree 1.3.6.1.4.1.4242, it could assign the identifier 1.3.6.1.4.1.4242.1.1 to its `Fred Router'.")
basSysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSysUpTime.setStatus('current')
if mibBuilder.loadTexts: basSysUpTime.setDescription('The time (in hundredths of a second) since the network management portion of the system was last re-initialized.')
basSysContact = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basSysContact.setStatus('current')
if mibBuilder.loadTexts: basSysContact.setDescription('The textual identification of the contact person for this managed node, together with information on how to contact this person. If no contact information is known, the value is the zero-length string.')
basSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basSysName.setStatus('current')
if mibBuilder.loadTexts: basSysName.setDescription("An administratively-assigned name for this managed node. By convention, this is the node's fully-qualified domain name. If the name is unknown, the value is the zero-length string.")
basSysLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basSysLocation.setStatus('current')
if mibBuilder.loadTexts: basSysLocation.setDescription("The physical location of this node (e.g., `telephone closet, 3rd floor'). If the location is unknown, the value is the zero-length string.")
basSysServices = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSysServices.setStatus('current')
if mibBuilder.loadTexts: basSysServices.setDescription('A value which indicates the set of services that this entity may potentially offers. The value is a sum. This sum initially takes the value zero, Then, for each layer, L, in the range 1 through 7, that this node performs transactions for, 2 raised to (L - 1) is added to the sum. For example, a node which performs only routing functions would have a value of 4 (2^(3-1)). In contrast, a node which is a host offering application services would have a value of 72 (2^(4-1) + 2^(7-1)). Note that in the context of the Internet suite of protocols, values should be calculated accordingly: layer functionality 1 physical (e.g., repeaters) 2 datalink/subnetwork (e.g., bridges) 3 internet (e.g., supports the IP) 4 end-to-end (e.g., supports the TCP) 7 applications (e.g., supports the SMTP) For systems including OSI protocols, layers 5 and 6 may also be counted.')
basSysORLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSysORLastChange.setStatus('current')
if mibBuilder.loadTexts: basSysORLastChange.setDescription('The value of sysUpTime at the time of the most recent change in state or value of any instance of sysORID.')
basSysChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 9), BasChassisId())
if mibBuilder.loadTexts: basSysChassis.setStatus('current')
if mibBuilder.loadTexts: basSysChassis.setDescription('The BAS Chassis ID of this card.')
basSysSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 10), BasSlotId())
if mibBuilder.loadTexts: basSysSlot.setStatus('current')
if mibBuilder.loadTexts: basSysSlot.setDescription('The BAS Slot ID of this card.')
basSysIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 11), BasInterfaceId())
if mibBuilder.loadTexts: basSysIf.setStatus('current')
if mibBuilder.loadTexts: basSysIf.setDescription('The BAS interface ID of this card.')
basSysLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 1, 1, 12), BasLogicalPortId())
if mibBuilder.loadTexts: basSysLPort.setStatus('current')
if mibBuilder.loadTexts: basSysLPort.setDescription('The BAS logical port ID of this card.')
basSysORTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2), )
if mibBuilder.loadTexts: basSysORTable.setStatus('current')
if mibBuilder.loadTexts: basSysORTable.setDescription('The (conceptual) table listing the capabilities of the local SNMPv2 entity acting in an agent role with respect to various MIB modules. SNMPv2 entities having dynamically- configurable support of MIB modules will have a dynamically-varying number of conceptual rows.')
basSysOREntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2, 1), ).setIndexNames((0, "BAS-ALIAS-SNMP-MIB", "basSysORChassis"), (0, "BAS-ALIAS-SNMP-MIB", "basSysORSlot"), (0, "BAS-ALIAS-SNMP-MIB", "basSysORIf"), (0, "BAS-ALIAS-SNMP-MIB", "basSysORLPort"), (0, "BAS-ALIAS-SNMP-MIB", "basSysORIndex"))
if mibBuilder.loadTexts: basSysOREntry.setStatus('current')
if mibBuilder.loadTexts: basSysOREntry.setDescription('An entry (conceptual row) in the basSysORTable.')
basSysORIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: basSysORIndex.setStatus('current')
if mibBuilder.loadTexts: basSysORIndex.setDescription('The auxiliary variable used for identifying instances of the columnar objects in the basSysORTable.')
basSysORID = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSysORID.setStatus('current')
if mibBuilder.loadTexts: basSysORID.setDescription('An authoritative identification of a capabilities statement with respect to various MIB modules supported by the local SNMPv2 entity acting in an agent role.')
basSysORDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSysORDescr.setStatus('current')
if mibBuilder.loadTexts: basSysORDescr.setDescription('A textual description of the capabilities identified by the corresponding instance of basSysORID.')
basSysORUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSysORUpTime.setStatus('current')
if mibBuilder.loadTexts: basSysORUpTime.setDescription('The value of basSysUpTime at the time this conceptual row was last instanciated.')
basSysORChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2, 1, 5), BasChassisId())
if mibBuilder.loadTexts: basSysORChassis.setStatus('current')
if mibBuilder.loadTexts: basSysORChassis.setDescription('The BAS Chassis ID of this card.')
basSysORSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2, 1, 6), BasSlotId())
if mibBuilder.loadTexts: basSysORSlot.setStatus('current')
if mibBuilder.loadTexts: basSysORSlot.setDescription('The BAS Slot ID of this card.')
basSysORIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2, 1, 7), BasInterfaceId())
if mibBuilder.loadTexts: basSysORIf.setStatus('current')
if mibBuilder.loadTexts: basSysORIf.setDescription('The BAS interface ID of this card.')
basSysORLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 2, 2, 1, 8), BasLogicalPortId())
if mibBuilder.loadTexts: basSysORLPort.setStatus('current')
if mibBuilder.loadTexts: basSysORLPort.setDescription('The BAS logical port ID of this card.')
basSnmpTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1), )
if mibBuilder.loadTexts: basSnmpTable.setStatus('current')
if mibBuilder.loadTexts: basSnmpTable.setDescription('Per Chassis Stack MIB-II system objects.')
basSnmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1), ).setIndexNames((0, "BAS-ALIAS-SNMP-MIB", "basSnmpChassis"), (0, "BAS-ALIAS-SNMP-MIB", "basSnmpSlot"), (0, "BAS-ALIAS-SNMP-MIB", "basSnmpIf"), (0, "BAS-ALIAS-SNMP-MIB", "basSnmpLPort"))
if mibBuilder.loadTexts: basSnmpEntry.setStatus('current')
if mibBuilder.loadTexts: basSnmpEntry.setDescription('MIB-II system objects for a Chassis Stack.')
basSnmpInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSnmpInPkts.setStatus('current')
if mibBuilder.loadTexts: basSnmpInPkts.setDescription('The total number of messages delivered to the SNMP entity from the transport service.')
basSnmpInBadVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSnmpInBadVersions.setStatus('current')
if mibBuilder.loadTexts: basSnmpInBadVersions.setDescription('The total number of SNMP messages which were delivered to the SNMP entity and were for an unsupported SNMP version.')
basSnmpInBadCommunityNames = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSnmpInBadCommunityNames.setStatus('current')
if mibBuilder.loadTexts: basSnmpInBadCommunityNames.setDescription('The total number of SNMP messages delivered to the SNMP entity which used a SNMP community name not known to said entity.')
basSnmpInBadCommunityUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSnmpInBadCommunityUses.setStatus('current')
if mibBuilder.loadTexts: basSnmpInBadCommunityUses.setDescription('The total number of SNMP messages delivered to the SNMP entity which represented an SNMP operation which was not allowed by the SNMP community named in the message.')
basSnmpInASNParseErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSnmpInASNParseErrs.setStatus('current')
if mibBuilder.loadTexts: basSnmpInASNParseErrs.setDescription('The total number of ASN.1 or BER errors encountered by the SNMP entity when decoding received SNMP messages.')
basSnmpEnableAuthenTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basSnmpEnableAuthenTraps.setStatus('current')
if mibBuilder.loadTexts: basSnmpEnableAuthenTraps.setDescription('Indicates whether the SNMP entity is permitted to generate authenticationFailure traps. The value of this object overrides any configuration information; as such, it provides a means whereby all authenticationFailure traps may be disabled. Note that it is strongly recommended that this object be stored in non-volatile memory so that it remains constant across re-initializations of the network management system.')
basSnmpSilentDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSnmpSilentDrops.setStatus('current')
if mibBuilder.loadTexts: basSnmpSilentDrops.setDescription('The total number of GetRequest-PDUs, GetNextRequest-PDUs, GetBulkRequest-PDUs, SetRequest-PDUs, and InformRequest-PDUs delivered to the SNMP entity which were silently dropped because the size of a reply containing an alternate Response-PDU with an empty variable-bindings field was greater than either a local constraint or the maximum message size associated with the originator of the request.')
basSnmpProxyDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basSnmpProxyDrops.setStatus('current')
if mibBuilder.loadTexts: basSnmpProxyDrops.setDescription('The total number of GetRequest-PDUs, GetNextRequest-PDUs, GetBulkRequest-PDUs, SetRequest-PDUs, and InformRequest-PDUs delivered to the SNMP entity which were silently dropped because the transmission of the (possibly translated) message to a proxy target failed in a manner (other than a time-out) such that no Response-PDU could be returned.')
basSnmpChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 33), BasChassisId())
if mibBuilder.loadTexts: basSnmpChassis.setStatus('current')
if mibBuilder.loadTexts: basSnmpChassis.setDescription('The BAS Chassis ID of this card.')
basSnmpSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 34), BasSlotId())
if mibBuilder.loadTexts: basSnmpSlot.setStatus('current')
if mibBuilder.loadTexts: basSnmpSlot.setDescription('The BAS Slot ID of this card.')
basSnmpIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 35), BasInterfaceId())
if mibBuilder.loadTexts: basSnmpIf.setStatus('current')
if mibBuilder.loadTexts: basSnmpIf.setDescription('The BAS interface ID of this card.')
basSnmpLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 1, 1, 1, 1, 1, 36), BasLogicalPortId())
if mibBuilder.loadTexts: basSnmpLPort.setStatus('current')
if mibBuilder.loadTexts: basSnmpLPort.setDescription('The BAS logical port ID of this card.')
mibBuilder.exportSymbols("BAS-ALIAS-SNMP-MIB", basSnmpEntry=basSnmpEntry, basSnmpInBadCommunityNames=basSnmpInBadCommunityNames, basSnmpTable=basSnmpTable, basSysObjectID=basSysObjectID, PYSNMP_MODULE_ID=basAliasSnmpMib, basSnmpInBadVersions=basSnmpInBadVersions, basSysDescr=basSysDescr, basSnmpProxyDrops=basSnmpProxyDrops, basSystem=basSystem, basSysORSlot=basSysORSlot, basSnmpSlot=basSnmpSlot, basSnmpIf=basSnmpIf, basSysEntry=basSysEntry, basSnmpInPkts=basSnmpInPkts, basSnmpLPort=basSnmpLPort, basSysTable=basSysTable, basSnmpEnableAuthenTraps=basSnmpEnableAuthenTraps, basSysORLastChange=basSysORLastChange, basSysName=basSysName, basSysORIndex=basSysORIndex, basSysContact=basSysContact, basSysORIf=basSysORIf, basAliasSnmpMib=basAliasSnmpMib, basSysORLPort=basSysORLPort, basSysORID=basSysORID, basSnmpInASNParseErrs=basSnmpInASNParseErrs, basSnmpInBadCommunityUses=basSnmpInBadCommunityUses, basSysSlot=basSysSlot, basSysLPort=basSysLPort, basSysORTable=basSysORTable, basSysIf=basSysIf, basSysOREntry=basSysOREntry, basSysORUpTime=basSysORUpTime, basSnmpChassis=basSnmpChassis, basSysServices=basSysServices, basSysChassis=basSysChassis, basSysORDescr=basSysORDescr, basSnmpSilentDrops=basSnmpSilentDrops, basSysUpTime=basSysUpTime, basSnmp=basSnmp, basSysORChassis=basSysORChassis, basSysLocation=basSysLocation)
