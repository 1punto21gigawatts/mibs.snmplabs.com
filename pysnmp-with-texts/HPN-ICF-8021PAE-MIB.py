#
# PySNMP MIB module HPN-ICF-8021PAE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-8021PAE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:37:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
hpnicfRhw, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfRhw")
dot1xPaePortNumber, = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "dot1xPaePortNumber")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Unsigned32, Counter32, TimeTicks, MibIdentifier, ModuleIdentity, NotificationType, Counter64, Gauge32, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "Counter32", "TimeTicks", "MibIdentifier", "ModuleIdentity", "NotificationType", "Counter64", "Gauge32", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
hpnicfpaeExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6))
hpnicfpaeExtMib.setRevisions(('2001-06-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfpaeExtMib.setRevisionsDescriptions(('',))
if mibBuilder.loadTexts: hpnicfpaeExtMib.setLastUpdated('200106290000Z')
if mibBuilder.loadTexts: hpnicfpaeExtMib.setOrganization('')
if mibBuilder.loadTexts: hpnicfpaeExtMib.setContactInfo('')
if mibBuilder.loadTexts: hpnicfpaeExtMib.setDescription('this file extends IEEE8021-PAE-MIB(802.1x)')
hpnicfpaeExtMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1))
hpnicfdot1xPaeSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 1))
hpnicfdot1xPaeAuthenticator = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 2))
hpnicfdot1xAuthQuietPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 1, 1), Unsigned32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1xAuthQuietPeriod.setReference(' 9.4.1, quietPeriod')
if mibBuilder.loadTexts: hpnicfdot1xAuthQuietPeriod.setStatus('current')
if mibBuilder.loadTexts: hpnicfdot1xAuthQuietPeriod.setDescription('The value, in seconds, of the quietPeriod constant currently in use by the Authenticator PAE state machine.')
hpnicfdot1xAuthTxPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 1, 2), Unsigned32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1xAuthTxPeriod.setReference(' 9.4.1, txPeriod')
if mibBuilder.loadTexts: hpnicfdot1xAuthTxPeriod.setStatus('current')
if mibBuilder.loadTexts: hpnicfdot1xAuthTxPeriod.setDescription('The value, in seconds, of the txPeriod constant currently in use by the Authenticator PAE state machine.')
hpnicfdot1xAuthSuppTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 1, 3), Unsigned32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1xAuthSuppTimeout.setReference(' 9.4.1, suppTimeout')
if mibBuilder.loadTexts: hpnicfdot1xAuthSuppTimeout.setStatus('current')
if mibBuilder.loadTexts: hpnicfdot1xAuthSuppTimeout.setDescription('The value, in seconds, of the suppTimeout constant currently in use by the Backend Authentication state machine.')
hpnicfdot1xAuthServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 1, 4), Unsigned32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1xAuthServerTimeout.setReference(' 9.4.1, serverTimeout')
if mibBuilder.loadTexts: hpnicfdot1xAuthServerTimeout.setStatus('current')
if mibBuilder.loadTexts: hpnicfdot1xAuthServerTimeout.setDescription('The value, in seconds, of the serverTimeout constant currently in use by the Backend Authentication state machine.')
hpnicfdot1xAuthMaxReq = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 1, 5), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1xAuthMaxReq.setReference(' 9.4.1, maxReq')
if mibBuilder.loadTexts: hpnicfdot1xAuthMaxReq.setStatus('current')
if mibBuilder.loadTexts: hpnicfdot1xAuthMaxReq.setDescription('The value of the maxReq constant currently in use by the Backend Authentication state machine.')
hpnicfdot1xAuthReAuthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 1, 6), Unsigned32().clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1xAuthReAuthPeriod.setReference(' 9.4.1, reAuthPeriod')
if mibBuilder.loadTexts: hpnicfdot1xAuthReAuthPeriod.setStatus('current')
if mibBuilder.loadTexts: hpnicfdot1xAuthReAuthPeriod.setDescription('The value, in seconds, of the reAuthPeriod constant currently in use by the Reauthentication Timer state machine.')
hpnicfdot1xAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("chap", 1), ("pap", 2), ("eap", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1xAuthMethod.setReference('')
if mibBuilder.loadTexts: hpnicfdot1xAuthMethod.setStatus('current')
if mibBuilder.loadTexts: hpnicfdot1xAuthMethod.setDescription('The value defines the 802.1X authenticatin method.')
hpnicfdot1xAuthConfigExtTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 2, 1), )
if mibBuilder.loadTexts: hpnicfdot1xAuthConfigExtTable.setReference(' 9.4.1 Authenticator Configuration')
if mibBuilder.loadTexts: hpnicfdot1xAuthConfigExtTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfdot1xAuthConfigExtTable.setDescription(' table extends dot1xAuthConfigTable')
hpnicfdot1xAuthConfigExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 2, 1, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: hpnicfdot1xAuthConfigExtEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfdot1xAuthConfigExtEntry.setDescription(' The configuration information for an Authenticator PAE.')
hpnicfdot1xpaeportAuthAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1xpaeportAuthAdminStatus.setReference('')
if mibBuilder.loadTexts: hpnicfdot1xpaeportAuthAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfdot1xpaeportAuthAdminStatus.setDescription('The administrative enable/disable state for Port Access Control in a port.')
hpnicfdot1xpaeportControlledType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("mac", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1xpaeportControlledType.setReference('')
if mibBuilder.loadTexts: hpnicfdot1xpaeportControlledType.setStatus('current')
if mibBuilder.loadTexts: hpnicfdot1xpaeportControlledType.setDescription('Port Access Control type , base port access control or base MAC access control')
hpnicfdot1xpaeportMaxUserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 2, 1, 1, 3), Integer32().clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1xpaeportMaxUserNum.setReference('')
if mibBuilder.loadTexts: hpnicfdot1xpaeportMaxUserNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfdot1xpaeportMaxUserNum.setDescription('the max num of online user in a port')
hpnicfdot1xpaeportUserNumNow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfdot1xpaeportUserNumNow.setReference('')
if mibBuilder.loadTexts: hpnicfdot1xpaeportUserNumNow.setStatus('current')
if mibBuilder.loadTexts: hpnicfdot1xpaeportUserNumNow.setDescription('the num of online user in a port now ')
hpnicfdot1xpaeportClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1xpaeportClearStatistics.setReference('')
if mibBuilder.loadTexts: hpnicfdot1xpaeportClearStatistics.setStatus('current')
if mibBuilder.loadTexts: hpnicfdot1xpaeportClearStatistics.setDescription('Clear various Statistics viz. ')
hpnicfdot1xpaeportMcastTrigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1xpaeportMcastTrigStatus.setReference('')
if mibBuilder.loadTexts: hpnicfdot1xpaeportMcastTrigStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfdot1xpaeportMcastTrigStatus.setDescription('The administrative enable/disable state for sending muticast EAP_REQ/ID packet.')
hpnicfdot1xpaeportHandshakeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfdot1xpaeportHandshakeStatus.setReference('')
if mibBuilder.loadTexts: hpnicfdot1xpaeportHandshakeStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfdot1xpaeportHandshakeStatus.setDescription('The administrative enable/disable state for sending handshake EAP_REQ/ID packet.')
hpnicfdot1xPaeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 0))
hpnicfsupplicantproxycheck = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 0, 1)).setObjects(("HPN-ICF-8021PAE-MIB", "hpnicfproxycheckVlanId"), ("HPN-ICF-8021PAE-MIB", "hpnicfproxycheckPortName"), ("HPN-ICF-8021PAE-MIB", "hpnicfproxycheckMacAddr"), ("HPN-ICF-8021PAE-MIB", "hpnicfproxycheckIpaddr"), ("HPN-ICF-8021PAE-MIB", "hpnicfproxycheckUsrName"))
if mibBuilder.loadTexts: hpnicfsupplicantproxycheck.setStatus('current')
if mibBuilder.loadTexts: hpnicfsupplicantproxycheck.setDescription('')
hpnicfproxycheckVlanId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 0, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfproxycheckVlanId.setStatus('current')
if mibBuilder.loadTexts: hpnicfproxycheckVlanId.setDescription('.')
hpnicfproxycheckPortName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 0, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfproxycheckPortName.setStatus('current')
if mibBuilder.loadTexts: hpnicfproxycheckPortName.setDescription('.')
hpnicfproxycheckMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 0, 4), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfproxycheckMacAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfproxycheckMacAddr.setDescription('.')
hpnicfproxycheckIpaddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 0, 5), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfproxycheckIpaddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfproxycheckIpaddr.setDescription('.')
hpnicfproxycheckUsrName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 6, 1, 0, 6), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfproxycheckUsrName.setStatus('current')
if mibBuilder.loadTexts: hpnicfproxycheckUsrName.setDescription('.')
mibBuilder.exportSymbols("HPN-ICF-8021PAE-MIB", hpnicfdot1xAuthSuppTimeout=hpnicfdot1xAuthSuppTimeout, hpnicfdot1xPaeAuthenticator=hpnicfdot1xPaeAuthenticator, hpnicfdot1xpaeportMcastTrigStatus=hpnicfdot1xpaeportMcastTrigStatus, hpnicfproxycheckVlanId=hpnicfproxycheckVlanId, hpnicfproxycheckUsrName=hpnicfproxycheckUsrName, hpnicfdot1xAuthQuietPeriod=hpnicfdot1xAuthQuietPeriod, PYSNMP_MODULE_ID=hpnicfpaeExtMib, hpnicfdot1xAuthConfigExtEntry=hpnicfdot1xAuthConfigExtEntry, hpnicfdot1xpaeportHandshakeStatus=hpnicfdot1xpaeportHandshakeStatus, hpnicfdot1xpaeportAuthAdminStatus=hpnicfdot1xpaeportAuthAdminStatus, hpnicfdot1xpaeportMaxUserNum=hpnicfdot1xpaeportMaxUserNum, hpnicfdot1xpaeportControlledType=hpnicfdot1xpaeportControlledType, hpnicfpaeExtMibObjects=hpnicfpaeExtMibObjects, hpnicfdot1xAuthTxPeriod=hpnicfdot1xAuthTxPeriod, hpnicfdot1xAuthMaxReq=hpnicfdot1xAuthMaxReq, hpnicfdot1xAuthServerTimeout=hpnicfdot1xAuthServerTimeout, hpnicfpaeExtMib=hpnicfpaeExtMib, hpnicfdot1xpaeportClearStatistics=hpnicfdot1xpaeportClearStatistics, hpnicfdot1xPaeTraps=hpnicfdot1xPaeTraps, hpnicfdot1xPaeSystem=hpnicfdot1xPaeSystem, hpnicfproxycheckMacAddr=hpnicfproxycheckMacAddr, hpnicfdot1xAuthReAuthPeriod=hpnicfdot1xAuthReAuthPeriod, hpnicfproxycheckPortName=hpnicfproxycheckPortName, hpnicfdot1xAuthConfigExtTable=hpnicfdot1xAuthConfigExtTable, hpnicfdot1xAuthMethod=hpnicfdot1xAuthMethod, hpnicfsupplicantproxycheck=hpnicfsupplicantproxycheck, hpnicfproxycheckIpaddr=hpnicfproxycheckIpaddr, hpnicfdot1xpaeportUserNumNow=hpnicfdot1xpaeportUserNumNow)
