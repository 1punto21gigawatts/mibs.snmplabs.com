#
# PySNMP MIB module ZYXEL-LAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-LAG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:50:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Unsigned32, NotificationType, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, ModuleIdentity, Counter64, iso, TimeTicks, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "NotificationType", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "ModuleIdentity", "Counter64", "iso", "TimeTicks", "Counter32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelLinkAggregation = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42))
if mibBuilder.loadTexts: zyxelLinkAggregation.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelLinkAggregation.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelLinkAggregation.setContactInfo('')
if mibBuilder.loadTexts: zyxelLinkAggregation.setDescription('The subtree for link aggregation')
zyxelAggregationSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 1))
zyxelAggregationStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 2))
zyAggregationState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAggregationState.setStatus('current')
if mibBuilder.loadTexts: zyAggregationState.setDescription('Enable/Disable link aggregation control protocol.')
zyAggregationSysPriority = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAggregationSysPriority.setStatus('current')
if mibBuilder.loadTexts: zyAggregationSysPriority.setDescription('The system number is to set the priority of an active port using link aggregation control protocol. The smaller the number, the higher the priority level.')
zyxelAggregationGroupTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 1, 3), )
if mibBuilder.loadTexts: zyxelAggregationGroupTable.setStatus('current')
if mibBuilder.loadTexts: zyxelAggregationGroupTable.setDescription('The table contains aggregation group configuration.')
zyxelAggregationGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 1, 3, 1), ).setIndexNames((0, "ZYXEL-LAG-MIB", "zyAggregationGroupIndex"))
if mibBuilder.loadTexts: zyxelAggregationGroupEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelAggregationGroupEntry.setDescription('An entry contains aggregation group configuration.')
zyAggregationGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: zyAggregationGroupIndex.setStatus('current')
if mibBuilder.loadTexts: zyAggregationGroupIndex.setDescription('Index of link aggregation group.')
zyAggregationGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 1, 3, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAggregationGroupState.setStatus('current')
if mibBuilder.loadTexts: zyAggregationGroupState.setDescription('Enable/Disable link aggregation control protocol on a special group.')
zyAggregationGroupDynamicState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 1, 3, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAggregationGroupDynamicState.setStatus('current')
if mibBuilder.loadTexts: zyAggregationGroupDynamicState.setDescription('Enable/Disable dynamic link aggregation control protocol on a special group.')
zyAggregationGroupCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("srcMac", 1), ("dstMac", 2), ("srcDstMac", 3), ("srcIp", 4), ("dstIp", 5), ("srcDstIp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAggregationGroupCriteria.setStatus('current')
if mibBuilder.loadTexts: zyAggregationGroupCriteria.setDescription("Outgoing traffic distribution type. Packets from the same source and/or to the same destination are sent over the same link within the trunk. By default, the switch uses the srcDstMac distribution type. If the switch is behind a router, the packet's destination or source MAC address will be changed. In this case, set the switch to distribute traffic based on its IP address to make sure port trunking can work properly.")
zyxelAggregationPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 1, 4), )
if mibBuilder.loadTexts: zyxelAggregationPortTable.setStatus('current')
if mibBuilder.loadTexts: zyxelAggregationPortTable.setDescription('The table contains aggregation port configuration.')
zyxelAggregationPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 1, 4, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelAggregationPortEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelAggregationPortEntry.setDescription('An entry contains aggregation port configuration.')
zyAggregationPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("none", 0), ("t1", 1), ("t2", 2), ("t3", 3), ("t4", 4), ("t5", 5), ("t6", 6), ("t7", 7), ("t8", 8), ("t9", 9), ("t10", 10), ("t11", 11), ("t12", 12), ("t13", 13), ("t14", 14), ("t15", 15), ("t16", 16), ("t17", 17), ("t18", 18), ("t19", 19), ("t20", 20), ("t21", 21), ("t22", 22), ("t23", 23), ("t24", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAggregationPortGroup.setStatus('current')
if mibBuilder.loadTexts: zyAggregationPortGroup.setDescription('Trunk group which a port belongs.')
zyAggregationPortDynamicStateTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 1, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAggregationPortDynamicStateTimeout.setStatus('current')
if mibBuilder.loadTexts: zyAggregationPortDynamicStateTimeout.setDescription('This timeout is the time interval bEtween the individual port exchanges of LACP packets in order to check that the peer port in the trunk group is still up.')
zyAggregationAutoLacpState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 1, 5), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyAggregationAutoLacpState.setStatus('current')
if mibBuilder.loadTexts: zyAggregationAutoLacpState.setDescription('Enable/Disable Automatic link aggregation control protocol.')
zyAggregationAutoLacpTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 2, 1), )
if mibBuilder.loadTexts: zyAggregationAutoLacpTable.setStatus('current')
if mibBuilder.loadTexts: zyAggregationAutoLacpTable.setDescription('The table contains auto-lacp port configuration.')
zyAggregationAutoLacpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 2, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyAggregationAutoLacpEntry.setStatus('current')
if mibBuilder.loadTexts: zyAggregationAutoLacpEntry.setDescription('An entry contains auto-lacp port configuration.')
zyAggregationAutoLacpTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("none", 0), ("t1", 1), ("t2", 2), ("t3", 3), ("t4", 4), ("t5", 5), ("t6", 6), ("t7", 7), ("t8", 8), ("t9", 9), ("t10", 10), ("t11", 11), ("t12", 12), ("t13", 13), ("t14", 14), ("t15", 15), ("t16", 16), ("t17", 17), ("t18", 18), ("t19", 19), ("t20", 20), ("t21", 21), ("t22", 22), ("t23", 23), ("t24", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAggregationAutoLacpTrunkGroup.setStatus('current')
if mibBuilder.loadTexts: zyAggregationAutoLacpTrunkGroup.setDescription('Trunk group which a port belongs.')
zyAggregationAutoLacpRemoteChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAggregationAutoLacpRemoteChassisId.setStatus('current')
if mibBuilder.loadTexts: zyAggregationAutoLacpRemoteChassisId.setDescription('This is the chassis id of the remote device.')
zyAggregationAutoLacpRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 42, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyAggregationAutoLacpRemotePort.setStatus('current')
if mibBuilder.loadTexts: zyAggregationAutoLacpRemotePort.setDescription('This is the connected port of the remote device.')
mibBuilder.exportSymbols("ZYXEL-LAG-MIB", zyAggregationAutoLacpRemotePort=zyAggregationAutoLacpRemotePort, zyAggregationAutoLacpState=zyAggregationAutoLacpState, zyAggregationPortDynamicStateTimeout=zyAggregationPortDynamicStateTimeout, zyxelAggregationStatus=zyxelAggregationStatus, zyAggregationAutoLacpRemoteChassisId=zyAggregationAutoLacpRemoteChassisId, zyxelAggregationPortTable=zyxelAggregationPortTable, zyxelAggregationSetup=zyxelAggregationSetup, zyxelAggregationGroupTable=zyxelAggregationGroupTable, zyxelAggregationGroupEntry=zyxelAggregationGroupEntry, zyAggregationGroupCriteria=zyAggregationGroupCriteria, zyAggregationSysPriority=zyAggregationSysPriority, zyxelAggregationPortEntry=zyxelAggregationPortEntry, zyAggregationPortGroup=zyAggregationPortGroup, zyAggregationGroupState=zyAggregationGroupState, zyAggregationAutoLacpTrunkGroup=zyAggregationAutoLacpTrunkGroup, PYSNMP_MODULE_ID=zyxelLinkAggregation, zyAggregationGroupDynamicState=zyAggregationGroupDynamicState, zyAggregationState=zyAggregationState, zyxelLinkAggregation=zyxelLinkAggregation, zyAggregationAutoLacpTable=zyAggregationAutoLacpTable, zyAggregationAutoLacpEntry=zyAggregationAutoLacpEntry, zyAggregationGroupIndex=zyAggregationGroupIndex)
