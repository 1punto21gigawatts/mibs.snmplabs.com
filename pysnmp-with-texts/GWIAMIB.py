#
# PySNMP MIB module GWIAMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GWIAMIB
# Produced by pysmi-0.3.4 at Wed May  1 13:20:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Bits, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ModuleIdentity, Unsigned32, IpAddress, ObjectIdentity, enterprises, iso, Counter32, MibIdentifier, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ModuleIdentity", "Unsigned32", "IpAddress", "ObjectIdentity", "enterprises", "iso", "Counter32", "MibIdentifier", "Gauge32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
novell = MibIdentifier((1, 3, 6, 1, 4, 1, 23))
gateways = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2))
gwia = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 70))
gwiaInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 70, 1))
gwiaTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 70, 2))
gwiaTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 70, 3))
gwiaGatewayName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaGatewayName.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaGatewayName.setDescription('The GroupWise Internet Agent name.')
gwiaTimeUp = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaTimeUp.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaTimeUp.setDescription('Uptime of the GroupWise Internet Agent.')
gwiaLinkGroupWise = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaLinkGroupWise.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaLinkGroupWise.setDescription('GroupWise Internet Agent Link: UP or DOWN')
gwiaLinkFrgn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaLinkFrgn.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaLinkFrgn.setDescription('GroupWise Internet Agent Foreign Link: UP or DOWN')
gwiaStatBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaStatBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaStatBytesOut.setDescription('The number of message bytes sent to GroupWise Internet Agent.')
gwiaStatBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaStatBytesIn.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaStatBytesIn.setDescription('The number of message bytes received from GroupWise Internet Agent.')
gwiaStatMsgsOut = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaStatMsgsOut.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaStatMsgsOut.setDescription('The number of messages sent to GroupWise Internet Agent.')
gwiaStatMsgsIn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaStatMsgsIn.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaStatMsgsIn.setDescription('The number of messages received from GroupWise Internet Agent.')
gwiaStatStatusesOut = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaStatStatusesOut.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaStatStatusesOut.setDescription('The number of statuses sent to GroupWise Internet Agent.')
gwiaStatStatusesIn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaStatStatusesIn.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaStatStatusesIn.setDescription('The number of statuses received from GroupWise Internet Agent.')
gwiaStatErrorsOut = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaStatErrorsOut.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaStatErrorsOut.setDescription('The number of failed transfers to GroupWise Internet Agent.')
gwiaStatErrorsIn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaStatErrorsIn.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaStatErrorsIn.setDescription('The number of failed transfers from GroupWise Internet Agent.')
gwiaStatTimeReset = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaStatTimeReset.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaStatTimeReset.setDescription('Time since statistics were reset on GroupWise Internet Agent.')
gwiaQueueWpcsout = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaQueueWpcsout.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaQueueWpcsout.setDescription('The number of messages to be processed by GroupWise Internet Agent (WPCSOUT).')
gwiaQueueWpcsin = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaQueueWpcsin.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaQueueWpcsin.setDescription('The number of messages to be processed by GroupWise Message Server (WPCSIN).')
gwiaQueueGwhold = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaQueueGwhold.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaQueueGwhold.setDescription('The number messages holding for later processing by GroupWise Internet Agent (GWHOLD).')
gwiaQueueGwprob = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaQueueGwprob.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaQueueGwprob.setDescription("The number messages in GroupWise Internet Agent's problem directory (GWPROB).")
gwiaStatInterval = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaStatInterval.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaStatInterval.setDescription('Statistics interval for the GroupWise Internet Agent.')
gwiaStatIntervalMsgsOut = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaStatIntervalMsgsOut.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaStatIntervalMsgsOut.setDescription('The number of messages sent to GroupWise Internet Agent in statistics interval.')
gwiaStatIntervalMsgsIn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaStatIntervalMsgsIn.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaStatIntervalMsgsIn.setDescription('The number of messages received from GroupWise Internet Agent in statistics interval.')
gwiaStatIntervalStatusesOut = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaStatIntervalStatusesOut.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaStatIntervalStatusesOut.setDescription('The number of statuses sent to GroupWise Internet Agent in statistics interval.')
gwiaStatIntervalStatusesIn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaStatIntervalStatusesIn.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaStatIntervalStatusesIn.setDescription('The number of statuses received from GroupWise Internet Agent in statistics interval.')
gwiaStatIntervalErrorsOut = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaStatIntervalErrorsOut.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaStatIntervalErrorsOut.setDescription('The number of failed transfers to GroupWise Internet Agent in statistics interval.')
gwiaStatIntervalErrorsIn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaStatIntervalErrorsIn.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaStatIntervalErrorsIn.setDescription('The number of failed transfers from GroupWise Internet Agent in statistics interval.')
gwiaQThresholdCheckInterval = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 25), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwiaQThresholdCheckInterval.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaQThresholdCheckInterval.setDescription('The number of minutes between directory scans or directory threshold traps for GroupWise Internet Agent.')
gwiaQThresholdWpcsout = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 26), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwiaQThresholdWpcsout.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaQThresholdWpcsout.setDescription('The number of messages waiting for GroupWise Internet Agent before firing threshold trap (WPCSOUT).')
gwiaQThresholdWpcsin = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 27), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwiaQThresholdWpcsin.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaQThresholdWpcsin.setDescription('The number of messages waiting for Message Server from GroupWise Internet Agent before firing threshold trap (WPCSIN).')
gwiaQThresholdGwhold = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 28), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwiaQThresholdGwhold.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaQThresholdGwhold.setDescription('The number of defered messages waiting for GroupWise Internet Agent before firing threshold trap (GWHOLD).')
gwiaQThresholdGwprob = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 29), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwiaQThresholdGwprob.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaQThresholdGwprob.setDescription('The number of problem messages GroupWise Internet Agent moved before firing threshold trap (GWPROB).')
gwiaThresholdMsgSizeIn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 30), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwiaThresholdMsgSizeIn.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaThresholdMsgSizeIn.setDescription('The max size of an incoming message GroupWise Internet Agent can process before firing threshold trap.')
gwiaThresholdMsgSizeOut = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 31), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwiaThresholdMsgSizeOut.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaThresholdMsgSizeOut.setDescription('The max size of an outgoing message GroupWise Internet Agent can process before firing threshold trap.')
gwiaActionResetStats = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: gwiaActionResetStats.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaActionResetStats.setDescription('Reset GroupWise Internet Agent statistics.')
gwiaActionRestartGateway = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("restart", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: gwiaActionRestartGateway.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaActionRestartGateway.setDescription('Restart GroupWise Internet Agent.')
gwiaHTTPPort = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaHTTPPort.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaHTTPPort.setDescription('HTTP port used by the agent')
gwiasmtpdThreadsAvailSend = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiasmtpdThreadsAvailSend.setStatus('mandatory')
if mibBuilder.loadTexts: gwiasmtpdThreadsAvailSend.setDescription('The number of SMTP Daemon send threads available.')
gwiasmtpdThreadsAvailReceive = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiasmtpdThreadsAvailReceive.setStatus('mandatory')
if mibBuilder.loadTexts: gwiasmtpdThreadsAvailReceive.setDescription('The number of SMTP Daemon receive threads available.')
gwiasmtpdThreadsActiveSend = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiasmtpdThreadsActiveSend.setStatus('mandatory')
if mibBuilder.loadTexts: gwiasmtpdThreadsActiveSend.setDescription('The number of SMTP Daemon send threads active.')
gwiasmtpdThreadsActiveReceive = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiasmtpdThreadsActiveReceive.setStatus('mandatory')
if mibBuilder.loadTexts: gwiasmtpdThreadsActiveReceive.setDescription('The number of SMTP Daemon receive threads active.')
gwiasmtpdErrorsMXLookup = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiasmtpdErrorsMXLookup.setStatus('mandatory')
if mibBuilder.loadTexts: gwiasmtpdErrorsMXLookup.setDescription('The number of SMTP Daemon DNS MX lookup errors.')
gwiasmtpdErrorsHostsUnknown = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiasmtpdErrorsHostsUnknown.setStatus('mandatory')
if mibBuilder.loadTexts: gwiasmtpdErrorsHostsUnknown.setDescription('The number of SMTP Daemon unknown destination hosts.')
gwiasmtpdErrorsHostsDown = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiasmtpdErrorsHostsDown.setStatus('mandatory')
if mibBuilder.loadTexts: gwiasmtpdErrorsHostsDown.setDescription('The number of SMTP Daemon TCP/IP connect errors.')
gwiasmtpdErrorsTCPRead = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiasmtpdErrorsTCPRead.setStatus('mandatory')
if mibBuilder.loadTexts: gwiasmtpdErrorsTCPRead.setDescription('The number of SMTP Daemon TCP/IP read errors.')
gwiasmtpdErrorsTCPWrite = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiasmtpdErrorsTCPWrite.setStatus('mandatory')
if mibBuilder.loadTexts: gwiasmtpdErrorsTCPWrite.setDescription('The number of SMTP Daemon TCP/IP write errors.')
gwiasmtpdMessagesIn = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiasmtpdMessagesIn.setStatus('mandatory')
if mibBuilder.loadTexts: gwiasmtpdMessagesIn.setDescription('The number of SMTP Daemon messages received.')
gwiasmtpdMessagesOut = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiasmtpdMessagesOut.setStatus('mandatory')
if mibBuilder.loadTexts: gwiasmtpdMessagesOut.setDescription('The number of SMTP Daemon messages sent.')
gwiasmtpQThresholdSend = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 59), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwiasmtpQThresholdSend.setStatus('mandatory')
if mibBuilder.loadTexts: gwiasmtpQThresholdSend.setDescription('The number of send messages GroupWise Internet Agent can queue to daemon before firing threshold trap (SEND).')
gwiasmtpQThresholdReceive = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 60), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwiasmtpQThresholdReceive.setStatus('mandatory')
if mibBuilder.loadTexts: gwiasmtpQThresholdReceive.setDescription('The number of messages queued by daemon for GroupWise Internet Agent before firing threshold trap (RECEIVE).')
gwiasmtpQThresholdDefer = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 61), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwiasmtpQThresholdDefer.setStatus('mandatory')
if mibBuilder.loadTexts: gwiasmtpQThresholdDefer.setDescription('The number of messages to have daemon retry sending for GroupWise Internet Agent before firing threshold trap (DEFER).')
gwiasmtpQueueSend = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiasmtpQueueSend.setStatus('mandatory')
if mibBuilder.loadTexts: gwiasmtpQueueSend.setDescription('The number of messages queued to daemon for GroupWise Internet Agent (SEND).')
gwiasmtpQueueReceive = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiasmtpQueueReceive.setStatus('mandatory')
if mibBuilder.loadTexts: gwiasmtpQueueReceive.setDescription('The number of messages queued to GroupWise Internet Agent from SMTP daemon (RECEIVE).')
gwiasmtpQueueDefer = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiasmtpQueueDefer.setStatus('mandatory')
if mibBuilder.loadTexts: gwiasmtpQueueDefer.setDescription('The number of messages queued to retry for SMTP daemon on GroupWise Internet Agent (DEFER).')
gwiapop3SessionsAvail = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiapop3SessionsAvail.setStatus('mandatory')
if mibBuilder.loadTexts: gwiapop3SessionsAvail.setDescription('The number of POP3 Server sessions available.')
gwiapop3SessionsActive = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiapop3SessionsActive.setStatus('mandatory')
if mibBuilder.loadTexts: gwiapop3SessionsActive.setDescription('The number of POP3 Server sessions currently active.')
gwiapop3SessionsTotal = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiapop3SessionsTotal.setStatus('mandatory')
if mibBuilder.loadTexts: gwiapop3SessionsTotal.setDescription('The total number of POP3 Server sessions.')
gwiapop3MessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiapop3MessagesSent.setStatus('mandatory')
if mibBuilder.loadTexts: gwiapop3MessagesSent.setDescription('The number of POP3 messages downloaded.')
gwiapop3StoreLoginErrs = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiapop3StoreLoginErrs.setStatus('mandatory')
if mibBuilder.loadTexts: gwiapop3StoreLoginErrs.setDescription('Errors logging in to GroupWise Post Office.')
gwiapop3StoreRetrievalErrs = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiapop3StoreRetrievalErrs.setStatus('mandatory')
if mibBuilder.loadTexts: gwiapop3StoreRetrievalErrs.setDescription('Errors retrieving messages from a GroupWise Post Office.')
gwiapop3ConversionErrs = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiapop3ConversionErrs.setStatus('mandatory')
if mibBuilder.loadTexts: gwiapop3ConversionErrs.setDescription('Errors converting messages for POP3 download.')
gwiapop3UnknownUsers = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiapop3UnknownUsers.setStatus('mandatory')
if mibBuilder.loadTexts: gwiapop3UnknownUsers.setDescription('Count of unknown users when logging into POP3 server.')
gwiapop3BadPassword = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiapop3BadPassword.setStatus('mandatory')
if mibBuilder.loadTexts: gwiapop3BadPassword.setDescription('Count of bad passwords when logging into POP3 server.')
gwiapop3AccessDenied = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiapop3AccessDenied.setStatus('mandatory')
if mibBuilder.loadTexts: gwiapop3AccessDenied.setDescription('Count of users denied access when logging into POP3 server.')
gwiapop3ErrorsTCPRead = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiapop3ErrorsTCPRead.setStatus('mandatory')
if mibBuilder.loadTexts: gwiapop3ErrorsTCPRead.setDescription('The number of POP3 Server TCP/IP read errors.')
gwiapop3ErrorsTCPWrite = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiapop3ErrorsTCPWrite.setStatus('mandatory')
if mibBuilder.loadTexts: gwiapop3ErrorsTCPWrite.setDescription('The number of POP3 Server TCP/IP write errors.')
gwiaLdapPublic = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaLdapPublic.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaLdapPublic.setDescription('The number of LDAP Server Public binds.')
gwiaLdapAuth = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaLdapAuth.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaLdapAuth.setDescription('The number of LDAP Server Authenticated binds.')
gwiaLdapThreadsFree = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaLdapThreadsFree.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaLdapThreadsFree.setDescription('The number of LDAP Server Free Threads.')
gwiaLdapSearchReq = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaLdapSearchReq.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaLdapSearchReq.setDescription('The number of LDAP Server Search requests.')
gwiaLdapReturnedItems = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaLdapReturnedItems.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaLdapReturnedItems.setDescription('The number of LDAP Server Returned Entries.')
gwiaLdapActive = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaLdapActive.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaLdapActive.setDescription('The number of LDAP Server Active binds.')
gwiaimap4SessionsAvail = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaimap4SessionsAvail.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaimap4SessionsAvail.setDescription('The number of IMAP4 Server sessions available.')
gwiaimap4SessionsActive = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaimap4SessionsActive.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaimap4SessionsActive.setDescription('The number of IMAP4 Server sessions currently active.')
gwiaimap4SessionsTotal = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaimap4SessionsTotal.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaimap4SessionsTotal.setDescription('The total number of IMAP4 Server sessions.')
gwiaimap4MessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaimap4MessagesSent.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaimap4MessagesSent.setDescription('The number of IMAP4 messages downloaded.')
gwiaimap4StoreLoginErrs = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaimap4StoreLoginErrs.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaimap4StoreLoginErrs.setDescription('Errors logging in to GroupWise Post Office.')
gwiaimap4StoreRetrievalErrs = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaimap4StoreRetrievalErrs.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaimap4StoreRetrievalErrs.setDescription('Errors retrieving messages from a GroupWise Post Office.')
gwiaimap4ConversionErrs = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaimap4ConversionErrs.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaimap4ConversionErrs.setDescription('Errors converting messages for IMAP4 download.')
gwiaimap4UnknownUsers = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaimap4UnknownUsers.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaimap4UnknownUsers.setDescription('Count of unknown users when logging into IMAP4 server.')
gwiaimap4BadPassword = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaimap4BadPassword.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaimap4BadPassword.setDescription('Count of bad passwords when logging into IMAP4 server.')
gwiaimap4AccessDenied = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaimap4AccessDenied.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaimap4AccessDenied.setDescription('Count of users denied access when logging into IMAP4 server.')
gwiaimap4ErrorsTCPRead = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaimap4ErrorsTCPRead.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaimap4ErrorsTCPRead.setDescription('The number of IMAP4 Server TCP/IP read errors.')
gwiaimap4ErrorsTCPWrite = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwiaimap4ErrorsTCPWrite.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaimap4ErrorsTCPWrite.setDescription('The number of IMAP4 Server TCP/IP write errors.')
gwiaTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 2, 1), Integer32())
if mibBuilder.loadTexts: gwiaTrapTime.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaTrapTime.setDescription('The time the trap occurred. Seconds since Jan 1, 1970 (GMT)')
gwiaTrapDomainName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 70, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: gwiaTrapDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: gwiaTrapDomainName.setDescription('The Domain for which this gateway operates.')
gwiaStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 70, 3) + (0,1)).setObjects(("GWIAMIB", "gwiaTrapTime"), ("GWIAMIB", "gwiaGatewayName"))
if mibBuilder.loadTexts: gwiaStartTrap.setDescription('GroupWise Internet Agent start.')
gwiaStopTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 70, 3) + (0,2)).setObjects(("GWIAMIB", "gwiaTrapTime"), ("GWIAMIB", "gwiaGatewayName"))
if mibBuilder.loadTexts: gwiaStopTrap.setDescription('GroupWise Internet Agent stop.')
gwiaRestartTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 70, 3) + (0,3)).setObjects(("GWIAMIB", "gwiaTrapTime"), ("GWIAMIB", "gwiaGatewayName"))
if mibBuilder.loadTexts: gwiaRestartTrap.setDescription('GroupWise Internet Agent restart.')
gwiaGroupWiseLinkTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 70, 3) + (0,4)).setObjects(("GWIAMIB", "gwiaTrapTime"), ("GWIAMIB", "gwiaGatewayName"))
if mibBuilder.loadTexts: gwiaGroupWiseLinkTrap.setDescription('GroupWise Link lost by GroupWise Internet Agent')
gwiaMovedToProbTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 70, 3) + (0,6)).setObjects(("GWIAMIB", "gwiaTrapTime"), ("GWIAMIB", "gwiaGatewayName"))
if mibBuilder.loadTexts: gwiaMovedToProbTrap.setDescription('Problem message moved to GWPROB directory for GroupWise Internet Agent')
gwiaWpcsoutThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 70, 3) + (0,7)).setObjects(("GWIAMIB", "gwiaTrapTime"), ("GWIAMIB", "gwiaGatewayName"))
if mibBuilder.loadTexts: gwiaWpcsoutThreshTrap.setDescription('Threshold for messages to be processed by GroupWise Internet Agent has been exceeded (WPCSOUT)')
gwiaWpcsinThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 70, 3) + (0,8)).setObjects(("GWIAMIB", "gwiaTrapTime"), ("GWIAMIB", "gwiaGatewayName"))
if mibBuilder.loadTexts: gwiaWpcsinThreshTrap.setDescription('The threshold for processed messages by GroupWise Internet Agent has been exceeded (WPCSIN)')
gwiaGwholdThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 70, 3) + (0,9)).setObjects(("GWIAMIB", "gwiaTrapTime"), ("GWIAMIB", "gwiaGatewayName"))
if mibBuilder.loadTexts: gwiaGwholdThreshTrap.setDescription('The threshold for defered messages in hold area for GroupWise Internet Agent has been exceeded (GWHOLD)')
gwiaGwprobThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 70, 3) + (0,10)).setObjects(("GWIAMIB", "gwiaTrapTime"), ("GWIAMIB", "gwiaGatewayName"))
if mibBuilder.loadTexts: gwiaGwprobThreshTrap.setDescription('The threshold for problem messages in problem area for GroupWise Internet Agent has been exceeded (GWPROB)')
gwiaInSizeThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 70, 3) + (0,11)).setObjects(("GWIAMIB", "gwiaTrapTime"), ("GWIAMIB", "gwiaGatewayName"))
if mibBuilder.loadTexts: gwiaInSizeThreshTrap.setDescription('The threshold for a incomming message for GroupWise Internet Agent has been exceeded')
gwiaOutSizeThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 70, 3) + (0,12)).setObjects(("GWIAMIB", "gwiaTrapTime"), ("GWIAMIB", "gwiaGatewayName"))
if mibBuilder.loadTexts: gwiaOutSizeThreshTrap.setDescription('The threshold for a outgoing message for GroupWise Internet Agent has been exceeded')
gwiasmtpReadErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 70, 3) + (0,48)).setObjects(("GWIAMIB", "gwiaTrapTime"), ("GWIAMIB", "gwiaGatewayName"))
if mibBuilder.loadTexts: gwiasmtpReadErrorTrap.setDescription('TCP/IP read error on GroupWise Internet Agent SMTP daemon')
gwiasmtpWriteErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 70, 3) + (0,49)).setObjects(("GWIAMIB", "gwiaTrapTime"), ("GWIAMIB", "gwiaGatewayName"))
if mibBuilder.loadTexts: gwiasmtpWriteErrorTrap.setDescription('TCP/IP write error on GroupWise Internet Agent SMTP daemon')
gwiasmtpSendThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 70, 3) + (0,50)).setObjects(("GWIAMIB", "gwiaTrapTime"), ("GWIAMIB", "gwiaGatewayName"))
if mibBuilder.loadTexts: gwiasmtpSendThreshTrap.setDescription('The threshold for messages in SMTP daemon send area for GroupWise Internet Agent has been exceeded (SEND)')
gwiasmtpReceiveThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 70, 3) + (0,51)).setObjects(("GWIAMIB", "gwiaTrapTime"), ("GWIAMIB", "gwiaGatewayName"))
if mibBuilder.loadTexts: gwiasmtpReceiveThreshTrap.setDescription('The threshold for messages in SMTP daemon receive area for GroupWise Internet Agent has been exceeded (RECEIVE)')
gwiasmtpDeferThreshTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 70, 3) + (0,52)).setObjects(("GWIAMIB", "gwiaTrapTime"), ("GWIAMIB", "gwiaGatewayName"))
if mibBuilder.loadTexts: gwiasmtpDeferThreshTrap.setDescription('The threshold for messages in SMTP daemon defer area for GroupWise Internet Agent has been exceeded (DEFER)')
mibBuilder.exportSymbols("GWIAMIB", gwiaStatInterval=gwiaStatInterval, gwiasmtpdErrorsHostsDown=gwiasmtpdErrorsHostsDown, gwiaWpcsoutThreshTrap=gwiaWpcsoutThreshTrap, gwiapop3ErrorsTCPWrite=gwiapop3ErrorsTCPWrite, gwiaLdapReturnedItems=gwiaLdapReturnedItems, gwiaimap4ConversionErrs=gwiaimap4ConversionErrs, gwiaStatIntervalStatusesOut=gwiaStatIntervalStatusesOut, gwiaStartTrap=gwiaStartTrap, gwiaStatIntervalMsgsIn=gwiaStatIntervalMsgsIn, gwiaStopTrap=gwiaStopTrap, gwiaimap4ErrorsTCPRead=gwiaimap4ErrorsTCPRead, gwiaActionRestartGateway=gwiaActionRestartGateway, gwiaStatErrorsIn=gwiaStatErrorsIn, gwiaInfo=gwiaInfo, gwiaimap4SessionsActive=gwiaimap4SessionsActive, gwiaWpcsinThreshTrap=gwiaWpcsinThreshTrap, gwiasmtpdMessagesOut=gwiasmtpdMessagesOut, gwiaHTTPPort=gwiaHTTPPort, gwiaQThresholdWpcsin=gwiaQThresholdWpcsin, gwiaGwholdThreshTrap=gwiaGwholdThreshTrap, gwiaLinkFrgn=gwiaLinkFrgn, gwiasmtpQThresholdReceive=gwiasmtpQThresholdReceive, gwia=gwia, gwiapop3SessionsActive=gwiapop3SessionsActive, gwiaLdapPublic=gwiaLdapPublic, gwiasmtpdThreadsActiveSend=gwiasmtpdThreadsActiveSend, gwiaQueueWpcsout=gwiaQueueWpcsout, gwiaStatMsgsOut=gwiaStatMsgsOut, gwiaMovedToProbTrap=gwiaMovedToProbTrap, gwiasmtpQueueReceive=gwiasmtpQueueReceive, novell=novell, gwiaStatStatusesIn=gwiaStatStatusesIn, gwiaStatBytesOut=gwiaStatBytesOut, gwiaLdapThreadsFree=gwiaLdapThreadsFree, gwiaLdapSearchReq=gwiaLdapSearchReq, gwiaActionResetStats=gwiaActionResetStats, gwiaStatBytesIn=gwiaStatBytesIn, gwiaStatErrorsOut=gwiaStatErrorsOut, gwiaimap4StoreLoginErrs=gwiaimap4StoreLoginErrs, gwiapop3MessagesSent=gwiapop3MessagesSent, gwiaTrapInfo=gwiaTrapInfo, gwiaTraps=gwiaTraps, gwiaGatewayName=gwiaGatewayName, gwiaStatIntervalStatusesIn=gwiaStatIntervalStatusesIn, gwiasmtpdThreadsAvailReceive=gwiasmtpdThreadsAvailReceive, gwiapop3SessionsTotal=gwiapop3SessionsTotal, gwiaimap4MessagesSent=gwiaimap4MessagesSent, gwiasmtpSendThreshTrap=gwiasmtpSendThreshTrap, gwiasmtpdMessagesIn=gwiasmtpdMessagesIn, gwiaThresholdMsgSizeOut=gwiaThresholdMsgSizeOut, gwiaimap4UnknownUsers=gwiaimap4UnknownUsers, gwiasmtpDeferThreshTrap=gwiasmtpDeferThreshTrap, gwiasmtpdThreadsAvailSend=gwiasmtpdThreadsAvailSend, gwiaStatIntervalMsgsOut=gwiaStatIntervalMsgsOut, gwiasmtpdThreadsActiveReceive=gwiasmtpdThreadsActiveReceive, gwiaOutSizeThreshTrap=gwiaOutSizeThreshTrap, gwiasmtpdErrorsMXLookup=gwiasmtpdErrorsMXLookup, gwiasmtpReadErrorTrap=gwiasmtpReadErrorTrap, gwiapop3AccessDenied=gwiapop3AccessDenied, gwiaInSizeThreshTrap=gwiaInSizeThreshTrap, gwiaLinkGroupWise=gwiaLinkGroupWise, gwiaQThresholdWpcsout=gwiaQThresholdWpcsout, gwiasmtpQThresholdSend=gwiasmtpQThresholdSend, gwiaimap4AccessDenied=gwiaimap4AccessDenied, gwiapop3StoreLoginErrs=gwiapop3StoreLoginErrs, gwiasmtpQueueSend=gwiasmtpQueueSend, gwiaTrapTime=gwiaTrapTime, gwiaimap4BadPassword=gwiaimap4BadPassword, gwiaStatMsgsIn=gwiaStatMsgsIn, gwiaimap4ErrorsTCPWrite=gwiaimap4ErrorsTCPWrite, gwiaStatStatusesOut=gwiaStatStatusesOut, gwiaimap4SessionsTotal=gwiaimap4SessionsTotal, gwiasmtpdErrorsTCPWrite=gwiasmtpdErrorsTCPWrite, gwiapop3SessionsAvail=gwiapop3SessionsAvail, gwiapop3ConversionErrs=gwiapop3ConversionErrs, gwiaGwprobThreshTrap=gwiaGwprobThreshTrap, gwiaQueueWpcsin=gwiaQueueWpcsin, gwiaQueueGwprob=gwiaQueueGwprob, gwiasmtpdErrorsTCPRead=gwiasmtpdErrorsTCPRead, gwiaStatIntervalErrorsOut=gwiaStatIntervalErrorsOut, gwiasmtpReceiveThreshTrap=gwiasmtpReceiveThreshTrap, gwiapop3ErrorsTCPRead=gwiapop3ErrorsTCPRead, gwiaLdapAuth=gwiaLdapAuth, gwiasmtpWriteErrorTrap=gwiasmtpWriteErrorTrap, gwiapop3UnknownUsers=gwiapop3UnknownUsers, gateways=gateways, gwiasmtpQThresholdDefer=gwiasmtpQThresholdDefer, gwiaimap4SessionsAvail=gwiaimap4SessionsAvail, gwiaQueueGwhold=gwiaQueueGwhold, gwiaThresholdMsgSizeIn=gwiaThresholdMsgSizeIn, gwiaTrapDomainName=gwiaTrapDomainName, gwiaStatIntervalErrorsIn=gwiaStatIntervalErrorsIn, gwiaTimeUp=gwiaTimeUp, gwiaQThresholdCheckInterval=gwiaQThresholdCheckInterval, gwiaLdapActive=gwiaLdapActive, gwiasmtpdErrorsHostsUnknown=gwiasmtpdErrorsHostsUnknown, gwiaRestartTrap=gwiaRestartTrap, gwiapop3BadPassword=gwiapop3BadPassword, gwiaQThresholdGwprob=gwiaQThresholdGwprob, gwiaQThresholdGwhold=gwiaQThresholdGwhold, gwiaStatTimeReset=gwiaStatTimeReset, gwiaimap4StoreRetrievalErrs=gwiaimap4StoreRetrievalErrs, gwiaGroupWiseLinkTrap=gwiaGroupWiseLinkTrap, gwiasmtpQueueDefer=gwiasmtpQueueDefer, gwiapop3StoreRetrievalErrs=gwiapop3StoreRetrievalErrs)
