#
# PySNMP MIB module TPLINK-L2BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPLINK-L2BRIDGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:25:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter32, Gauge32, TimeTicks, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, Bits, Unsigned32, Counter64, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "Gauge32", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "Bits", "Unsigned32", "Counter64", "IpAddress", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tplinkMgmt, = mibBuilder.importSymbols("TPLINK-MIB", "tplinkMgmt")
TPRowStatus, = mibBuilder.importSymbols("TPLINK-TC-MIB", "TPRowStatus")
tplinkl2BridgeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11863, 6, 10))
tplinkl2BridgeMIB.setRevisions(('2012-12-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tplinkl2BridgeMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: tplinkl2BridgeMIB.setLastUpdated('201212130000Z')
if mibBuilder.loadTexts: tplinkl2BridgeMIB.setOrganization('TP-LINK')
if mibBuilder.loadTexts: tplinkl2BridgeMIB.setContactInfo('www.tplink.com.cn')
if mibBuilder.loadTexts: tplinkl2BridgeMIB.setDescription('This MIB module contain a collection of managed objects for l2 table address.')
tplinkl2BridgeMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1))
tplinkl2BridgeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 10, 2))
tpl2BridgeManageStaticAddrCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 1))
tpl2BridgeManageDynAddrCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 2))
tpl2BridgeManageFilterAddrCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 3))
tpl2BridgeManageVlanSecurityCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 4))
tpl2BridgeManageNotificationCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 5))
fdbDynMacNew = NotificationType((1, 3, 6, 1, 4, 1, 11863, 6, 10, 2, 1)).setObjects(("TPLINK-L2BRIDGE-MIB", "tpl2BridgeManageDynPort"))
if mibBuilder.loadTexts: fdbDynMacNew.setStatus('current')
if mibBuilder.loadTexts: fdbDynMacNew.setDescription('The switch has learned a new dynamic address.')
fdbStaticMacNew = NotificationType((1, 3, 6, 1, 4, 1, 11863, 6, 10, 2, 2)).setObjects(("TPLINK-L2BRIDGE-MIB", "tpl2BridgeManageStaticPort"))
if mibBuilder.loadTexts: fdbStaticMacNew.setStatus('current')
if mibBuilder.loadTexts: fdbStaticMacNew.setDescription('The switch has learned a new static address.')
fdbFilterMacNew = NotificationType((1, 3, 6, 1, 4, 1, 11863, 6, 10, 2, 3)).setObjects(("TPLINK-L2BRIDGE-MIB", "tpl2BridgeManageFilterVlanId"))
if mibBuilder.loadTexts: fdbFilterMacNew.setStatus('current')
if mibBuilder.loadTexts: fdbFilterMacNew.setDescription('The switch has learned a new filter address.')
fdbMacTableFull = NotificationType((1, 3, 6, 1, 4, 1, 11863, 6, 10, 2, 4)).setObjects(("TPLINK-L2BRIDGE-MIB", "tpl2BridgeManageStaticPort"))
if mibBuilder.loadTexts: fdbMacTableFull.setStatus('current')
if mibBuilder.loadTexts: fdbMacTableFull.setDescription("The switch's Address Table is full!")
fdbMacMaxLearnedNumExceed = NotificationType((1, 3, 6, 1, 4, 1, 11863, 6, 10, 2, 5)).setObjects(("TPLINK-L2BRIDGE-MIB", "tpl2BridgeManageStaticPort"))
if mibBuilder.loadTexts: fdbMacMaxLearnedNumExceed.setStatus('current')
if mibBuilder.loadTexts: fdbMacMaxLearnedNumExceed.setDescription('The l2BridgeManageStaticPort has learned the maximum number of address that it can learn.')
fdbMacLearnModeChange = NotificationType((1, 3, 6, 1, 4, 1, 11863, 6, 10, 2, 6)).setObjects(("TPLINK-L2BRIDGE-MIB", "tpl2BridgeManageStaticPort"))
if mibBuilder.loadTexts: fdbMacLearnModeChange.setStatus('current')
if mibBuilder.loadTexts: fdbMacLearnModeChange.setDescription('The l2BridgeManageDynPort has opened its portSecurity, and changes its learning mode.')
tpl2BridgeManageStaticAddrCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 1, 1), )
if mibBuilder.loadTexts: tpl2BridgeManageStaticAddrCtrlTable.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageStaticAddrCtrlTable.setDescription('A list of static mac address entries.')
tpl2BridgeManageStaticAddrCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 1, 1, 1), ).setIndexNames((0, "TPLINK-L2BRIDGE-MIB", "tpl2BridgeManageStaticMac"), (0, "TPLINK-L2BRIDGE-MIB", "tpl2BridgeManageStaticVlanId"))
if mibBuilder.loadTexts: tpl2BridgeManageStaticAddrCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageStaticAddrCtrlEntry.setDescription(' The static address can be added or removed manually, independent of the aging time. In the stable networks, the static MAC address entries can facilitate the switch to reduce broadcast packets and enhance the efficiency of packets forwarding remarkably.')
tpl2BridgeManageStaticMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 1, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpl2BridgeManageStaticMac.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageStaticMac.setDescription('The static MAC Address')
tpl2BridgeManageStaticVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpl2BridgeManageStaticVlanId.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageStaticVlanId.setDescription('The corresponding VLAN ID of the MAC address.')
tpl2BridgeManageStaticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 1, 1, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpl2BridgeManageStaticPort.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageStaticPort.setDescription('The corresponding Port number of the MAC address.')
tpl2BridgeManageStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 1, 1, 1, 4), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpl2BridgeManageStaticStatus.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageStaticStatus.setDescription(' The following values are states: these values may be used as follow: active(1),if the entry is being used. createAndGo(4),creat a new entry destroy(6),destory the entry.')
tpl2BridgeManageDynAddrCtrlAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 630))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpl2BridgeManageDynAddrCtrlAgingTime.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageDynAddrCtrlAgingTime.setDescription('Configure aging time for the dynamic address.Set 0 to disable auto aging.')
tpl2BridgeManageDynAddrCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 2, 2), )
if mibBuilder.loadTexts: tpl2BridgeManageDynAddrCtrlTable.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageDynAddrCtrlTable.setDescription('A list of dynamic MAC address entries.')
tpl2BridgeManageDynAddrCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 2, 2, 1), ).setIndexNames((0, "TPLINK-L2BRIDGE-MIB", "tpl2BridgeManageDynMac"), (0, "TPLINK-L2BRIDGE-MIB", "tpl2BridgeManageDynVlanId"))
if mibBuilder.loadTexts: tpl2BridgeManageDynAddrCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageDynAddrCtrlEntry.setDescription(' The dynamic address can be generated by the auto-learning mechanism of the switch. The Dynamic Address Table can update automatically by auto-learning or aging out the MAC address.')
tpl2BridgeManageDynMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 2, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpl2BridgeManageDynMac.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageDynMac.setDescription('The dynamic MAC Address.')
tpl2BridgeManageDynVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpl2BridgeManageDynVlanId.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageDynVlanId.setDescription('Displays the corresponding VLAN ID of the MAC address.')
tpl2BridgeManageDynPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 2, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpl2BridgeManageDynPort.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageDynPort.setDescription('The corresponding port number of the MAC address.')
tpl2BridgeManageDynAgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noAging", 0), ("aging", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpl2BridgeManageDynAgeStatus.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageDynAgeStatus.setDescription('The Aging Status of the MAC address.')
tpl2BridgeManageDynStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("bind", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpl2BridgeManageDynStatus.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageDynStatus.setDescription("active(1)......It's should be enable when the MAC address is exist. bind(4)........Bind the dynamic MAC entry. destroy(6).....Delete the dynamic MAC entry. ")
tpl2BridgeManageFilterCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 3, 1), )
if mibBuilder.loadTexts: tpl2BridgeManageFilterCtrlTable.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageFilterCtrlTable.setDescription('A list of filter MAC address entries.')
tpl2BridgeManageFilterCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 3, 1, 1), ).setIndexNames((0, "TPLINK-L2BRIDGE-MIB", "tpl2BridgeManageFilterMac"), (0, "TPLINK-L2BRIDGE-MIB", "tpl2BridgeManageFilterVlanId"))
if mibBuilder.loadTexts: tpl2BridgeManageFilterCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageFilterCtrlEntry.setDescription(' The filtering address is to forbid the undesired package to be forwarded. The filtering address can be added or removed manually, independent of the aging time.')
tpl2BridgeManageFilterMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 3, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpl2BridgeManageFilterMac.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageFilterMac.setDescription('The filtering MAC Address.')
tpl2BridgeManageFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpl2BridgeManageFilterVlanId.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageFilterVlanId.setDescription('The corresponding VLAN ID.')
tpl2BridgeManageFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 3, 1, 1, 3), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpl2BridgeManageFilterStatus.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageFilterStatus.setDescription(' The following values are states: these values may be used as follow: active(1),if the entry is being used. createAndGo(4),not being used destroy(6),destory the entry.')
class VlanSecEntryStatus(TextualConvention, Integer32):
    description = 'The status of a table entry.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("disable", 0), ("drop", 1), ("forward", 2), ("createRequest", 3), ("destroy", 4))

tpl2BridgeManagevlanSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 4, 1), )
if mibBuilder.loadTexts: tpl2BridgeManagevlanSecurityTable.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManagevlanSecurityTable.setDescription('A list of Fdb vlan security control entries.')
tpl2BridgeManagevlanSecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 4, 1, 1), ).setIndexNames((0, "TPLINK-L2BRIDGE-MIB", "tpFdbVlanSecurityVid"))
if mibBuilder.loadTexts: tpl2BridgeManagevlanSecEntry.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManagevlanSecEntry.setDescription(' The mac vlan security entry is used to set vlan mac address learning config. ')
tpFdbVlanSecurityVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpFdbVlanSecurityVid.setStatus('current')
if mibBuilder.loadTexts: tpFdbVlanSecurityVid.setDescription('The vlan id of this entry.')
tpFdbVlanSecurityMaxLearned = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpFdbVlanSecurityMaxLearned.setStatus('current')
if mibBuilder.loadTexts: tpFdbVlanSecurityMaxLearned.setDescription('The max learned limit mac of this vlan security entry.')
tpFdbVlanSecurityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 4, 1, 1, 3), VlanSecEntryStatus().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpFdbVlanSecurityRowStatus.setStatus('current')
if mibBuilder.loadTexts: tpFdbVlanSecurityRowStatus.setDescription("The status column has four defined values: - 'disable(0)', this entry is exist but invalid; - 'drop(1)', packets with other source mac will be drop when exceed max learned mac; - 'forward(2)', packets with other source mac can be forwarded when exceed max learned mac; - 'createRequest(3)', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to forward(1), making it available for using by the managed device; - 'destory(4)', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row.")
tpl2BridgeManageNotificationGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpl2BridgeManageNotificationGlobalStatus.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageNotificationGlobalStatus.setDescription('The mac address notification global status.')
tpl2BridgeManageNotificationTableFullStatus = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpl2BridgeManageNotificationTableFullStatus.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageNotificationTableFullStatus.setDescription('The mac address notification when the table is full.')
tpl2BridgeManageNotificationInterval = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpl2BridgeManageNotificationInterval.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageNotificationInterval.setDescription('The mac address notification interval.')
tpl2BridgeManageNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 5, 4), )
if mibBuilder.loadTexts: tpl2BridgeManageNotificationTable.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageNotificationTable.setDescription('A list of port MAC address Notification setting.')
tpl2BridgeManageNotificationCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 5, 4, 1), ).setIndexNames((0, "TPLINK-L2BRIDGE-MIB", "tpl2BridgeManagePortIndex"))
if mibBuilder.loadTexts: tpl2BridgeManageNotificationCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageNotificationCtrlEntry.setDescription(' The dynamic address can be generated by the auto-learning mechanism of the switch. The Dynamic Address Table can update automatically by auto-learning or aging out the MAC address.')
tpl2BridgeManagePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 5, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpl2BridgeManagePortIndex.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManagePortIndex.setDescription('This object indicates the port number.')
tpl2BridgeManageLrnModeChg = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpl2BridgeManageLrnModeChg.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageLrnModeChg.setDescription('Displays the Learn mode change of the MAC address.')
tpl2BridgeManageExceedMaxLrn = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpl2BridgeManageExceedMaxLrn.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageExceedMaxLrn.setDescription('Displays the exceed max learned of the MAC address.')
tpl2BridgeManageNewMacLrn = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 10, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpl2BridgeManageNewMacLrn.setStatus('current')
if mibBuilder.loadTexts: tpl2BridgeManageNewMacLrn.setDescription('Displays the new mac learned of the MAC address.')
mibBuilder.exportSymbols("TPLINK-L2BRIDGE-MIB", tpl2BridgeManageStaticPort=tpl2BridgeManageStaticPort, tpl2BridgeManageFilterAddrCtrl=tpl2BridgeManageFilterAddrCtrl, tpl2BridgeManageNotificationTable=tpl2BridgeManageNotificationTable, tpl2BridgeManageStaticAddrCtrlEntry=tpl2BridgeManageStaticAddrCtrlEntry, VlanSecEntryStatus=VlanSecEntryStatus, tplinkl2BridgeNotifications=tplinkl2BridgeNotifications, tpl2BridgeManageDynAddrCtrlAgingTime=tpl2BridgeManageDynAddrCtrlAgingTime, fdbDynMacNew=fdbDynMacNew, tpl2BridgeManageStaticStatus=tpl2BridgeManageStaticStatus, tpl2BridgeManageDynVlanId=tpl2BridgeManageDynVlanId, tpl2BridgeManageLrnModeChg=tpl2BridgeManageLrnModeChg, tpl2BridgeManageStaticMac=tpl2BridgeManageStaticMac, tpl2BridgeManageDynPort=tpl2BridgeManageDynPort, tpl2BridgeManageNotificationCtrl=tpl2BridgeManageNotificationCtrl, tpl2BridgeManageStaticAddrCtrl=tpl2BridgeManageStaticAddrCtrl, tpFdbVlanSecurityRowStatus=tpFdbVlanSecurityRowStatus, tpl2BridgeManageNotificationInterval=tpl2BridgeManageNotificationInterval, tpl2BridgeManagevlanSecurityTable=tpl2BridgeManagevlanSecurityTable, tpl2BridgeManageFilterCtrlTable=tpl2BridgeManageFilterCtrlTable, tpl2BridgeManageNotificationTableFullStatus=tpl2BridgeManageNotificationTableFullStatus, tpl2BridgeManageNotificationCtrlEntry=tpl2BridgeManageNotificationCtrlEntry, tpl2BridgeManageNewMacLrn=tpl2BridgeManageNewMacLrn, tpl2BridgeManageFilterStatus=tpl2BridgeManageFilterStatus, tpl2BridgeManageDynAddrCtrlEntry=tpl2BridgeManageDynAddrCtrlEntry, tplinkl2BridgeMIB=tplinkl2BridgeMIB, tpFdbVlanSecurityVid=tpFdbVlanSecurityVid, fdbMacLearnModeChange=fdbMacLearnModeChange, tpl2BridgeManageDynMac=tpl2BridgeManageDynMac, fdbMacTableFull=fdbMacTableFull, tpl2BridgeManageDynAddrCtrl=tpl2BridgeManageDynAddrCtrl, tpFdbVlanSecurityMaxLearned=tpFdbVlanSecurityMaxLearned, tpl2BridgeManageFilterMac=tpl2BridgeManageFilterMac, tpl2BridgeManageFilterVlanId=tpl2BridgeManageFilterVlanId, fdbMacMaxLearnedNumExceed=fdbMacMaxLearnedNumExceed, tpl2BridgeManageExceedMaxLrn=tpl2BridgeManageExceedMaxLrn, tplinkl2BridgeMIBObjects=tplinkl2BridgeMIBObjects, tpl2BridgeManageStaticVlanId=tpl2BridgeManageStaticVlanId, tpl2BridgeManageVlanSecurityCtrl=tpl2BridgeManageVlanSecurityCtrl, tpl2BridgeManagePortIndex=tpl2BridgeManagePortIndex, tpl2BridgeManageDynAgeStatus=tpl2BridgeManageDynAgeStatus, fdbFilterMacNew=fdbFilterMacNew, tpl2BridgeManageDynStatus=tpl2BridgeManageDynStatus, tpl2BridgeManageDynAddrCtrlTable=tpl2BridgeManageDynAddrCtrlTable, PYSNMP_MODULE_ID=tplinkl2BridgeMIB, tpl2BridgeManageNotificationGlobalStatus=tpl2BridgeManageNotificationGlobalStatus, fdbStaticMacNew=fdbStaticMacNew, tpl2BridgeManageFilterCtrlEntry=tpl2BridgeManageFilterCtrlEntry, tpl2BridgeManageStaticAddrCtrlTable=tpl2BridgeManageStaticAddrCtrlTable, tpl2BridgeManagevlanSecEntry=tpl2BridgeManagevlanSecEntry)
