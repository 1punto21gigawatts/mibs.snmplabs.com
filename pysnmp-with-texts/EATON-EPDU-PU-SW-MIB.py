#
# PySNMP MIB module EATON-EPDU-PU-SW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EATON-EPDU-PU-SW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:59:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
enterprises, MibIdentifier, TimeTicks, Counter32, ObjectIdentity, Integer32, Unsigned32, NotificationType, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "MibIdentifier", "TimeTicks", "Counter32", "ObjectIdentity", "Integer32", "Unsigned32", "NotificationType", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "Gauge32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
pulizzi = ModuleIdentity((1, 3, 6, 1, 4, 1, 20677))
pulizzi.setRevisions(('2009-10-16 12:00', '2008-12-22 12:00', '2008-02-13 12:00', '2006-05-01 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pulizzi.setRevisionsDescriptions((' Updated to add objects for units with up to 36 outlets and up to six measurement sections: - Added outlet25 through outlet36 branches under outletConfig - Added variables for outlets 25 through 36 under outletControl and outletStatus - Added outletSection4Config, outletSection5Config, and outletSection6Config - Added outletSection4, outletSection5, and outletSection6 - Added the events branch and defined the appropriate notifications - Added the eventInfo branch to define objects used in notifications - Deprecated totalVoltage as it is no longer useful - Updated the conformance groups ', " Updated to fix syntax errors: - Added conformance groups - Filled in descriptions for all variables - Renamed the following variables: outletSection1Log to outletSection1Alert, outletSection2Log to outletSection2Alert, outletSection3Log to outletSection3Alert, tempSensor1Log to tempSensor1Alert, tempSensor2Log to tempSensor2Alert, humSensor1Log to humSensor1Alert, contactClosure1Log to contactClosure1Alert, contactClosure2Log to contactClosure2Alert, contactClosure3Log to contactClosure3Alert, keyBoardTime to loginTimeout; changed 'allert' to 'alert' wherever it appeared - Renamed MIB file to EATON-EPDU-PU-SW-MIB ", ' - CHANGED DISPLAYSTRING DATA TYPE TO OCTET STRING - CHANGED GLOBAL COMMAND, PING ENABLED, AND PING INTERVAL - CHANGED IP ADDRESS, SUBNET MASK, DEFAULT GATEWAY TO READ-ONLY ', ' INITIAL RELEASE. ',))
if mibBuilder.loadTexts: pulizzi.setLastUpdated('200910161200Z')
if mibBuilder.loadTexts: pulizzi.setOrganization('Eaton Corporation')
if mibBuilder.loadTexts: pulizzi.setContactInfo('Eaton Corporation Technical Resource Center phone numbers United States: 1.800.843.9433 or 919.870.3028 Canada: 1.800.461.9166 ext. 260 All other countries: Call your local service representative.')
if mibBuilder.loadTexts: pulizzi.setDescription('The MIB module for Eaton Switched ePDUs (Enclosed Power Distribution Units.)')
ipv3600 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2))
unitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 1))
networkSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 2))
logManagerConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 3))
serialSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 4))
telnetSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 5))
outletMngt = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6))
outletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1))
outlet1 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 1))
outlet2 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 2))
outlet3 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 3))
outlet4 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 4))
outlet5 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 5))
outlet6 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 6))
outlet7 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 7))
outlet8 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 8))
outlet9 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 9))
outlet10 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 10))
outlet11 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 11))
outlet12 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 12))
outlet13 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 13))
outlet14 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 14))
outlet15 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 15))
outlet16 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 16))
outlet17 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 17))
outlet18 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 18))
outlet19 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 19))
outlet20 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 20))
outlet21 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 21))
outlet22 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 22))
outlet23 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 23))
outlet24 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 24))
outlet25 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 25))
outlet26 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 26))
outlet27 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 27))
outlet28 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 28))
outlet29 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 29))
outlet30 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 30))
outlet31 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 31))
outlet32 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 32))
outlet33 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 33))
outlet34 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 34))
outlet35 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 35))
outlet36 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 36))
outletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2))
outletStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3))
snmpSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 7))
snmpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 7, 8))
environmentalSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8))
temperatureSensorConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 1))
tempSensor1 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 1, 1))
tempSensor2 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 1, 2))
humiditySensorConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 2))
humSensor1 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 2, 1))
contactClosureConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3))
contactClosure1 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3, 1))
contactClosure2 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3, 2))
contactClosure3 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3, 3))
outletSectionConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4))
outletSection1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 1))
outletSection2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 2))
outletSection3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 3))
outletSection4Config = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 4))
outletSection5Config = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 5))
outletSection6Config = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 6))
currentSensorValues = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 5))
currentOutletSectionValues = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6))
outletSection1 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 1))
outletSection2 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 2))
outletSection3 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 3))
total = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 4))
outletSection4 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 5))
outletSection5 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 6))
outletSection6 = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 7))
events = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 9))
eventInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 10))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 25))
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 20677, 2, 25, 5))
unitName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitName.setStatus('current')
if mibBuilder.loadTexts: unitName.setDescription('Descriptive name of unit.')
strappingId = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: strappingId.setStatus('current')
if mibBuilder.loadTexts: strappingId.setDescription('ID of unit when connected in a strapping configuration.')
unitTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTime.setStatus('current')
if mibBuilder.loadTexts: unitTime.setDescription('Time hh:mm')
unitDate = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitDate.setStatus('current')
if mibBuilder.loadTexts: unitDate.setDescription("Today's date mm/dd/yyyy")
unitDayOfWeek = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitDayOfWeek.setStatus('current')
if mibBuilder.loadTexts: unitDayOfWeek.setDescription("Today's day of week. This is important when scheduling logs to be sent on a particular week day.")
vaLoggingInterval = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("fiveminutes", 1), ("fifteenminutes", 2), ("hourly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vaLoggingInterval.setStatus('current')
if mibBuilder.loadTexts: vaLoggingInterval.setDescription('Interval for updating the VA log.')
loginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loginTimeout.setStatus('current')
if mibBuilder.loadTexts: loginTimeout.setDescription('Timeout (in seconds) for serial, telnet, and web interfaces.')
invertDisplay = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("inverted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertDisplay.setStatus('current')
if mibBuilder.loadTexts: invertDisplay.setDescription('Select the orientation of the local 7-segment display.')
fahrenheitOrCelsius = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahrenheit", 0), ("celsius", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fahrenheitOrCelsius.setStatus('current')
if mibBuilder.loadTexts: fahrenheitOrCelsius.setDescription('Units for temperature readings.')
unitIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitIPAddress.setStatus('current')
if mibBuilder.loadTexts: unitIPAddress.setDescription('Network IP address')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
if mibBuilder.loadTexts: subnetMask.setDescription('Network subnet mask')
defaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultGateway.setStatus('current')
if mibBuilder.loadTexts: defaultGateway.setDescription('Network default gateway')
webPort = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webPort.setStatus('current')
if mibBuilder.loadTexts: webPort.setDescription('Port number for non-secure (http) web interface.')
webEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webEnabled.setStatus('current')
if mibBuilder.loadTexts: webEnabled.setDescription('Enables or disables the web interface (both secure and non-secure).')
macAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddress.setStatus('current')
if mibBuilder.loadTexts: macAddress.setDescription('Hardware network address')
enablePing = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablePing.setStatus('current')
if mibBuilder.loadTexts: enablePing.setDescription('Enables ping watchdog feature. If enabled, the IP address for each outlet (if non-zero) will be pinged periodically; the outlet will be rebooted if there is no ping response.')
pingInterval = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingInterval.setStatus('current')
if mibBuilder.loadTexts: pingInterval.setDescription('Interval (in minutes) beween attempts to ping the IP address corresponding to an outlet.')
mailServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: mailServerIPAddress.setDescription('IP address of mail server for sending logs and alerts.')
sendLogFrom = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sendLogFrom.setStatus('current')
if mibBuilder.loadTexts: sendLogFrom.setDescription('Email address (x@y.z format) to be used as the from address for logs and alerts.')
sendLogToUser1Address = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sendLogToUser1Address.setStatus('current')
if mibBuilder.loadTexts: sendLogToUser1Address.setDescription('Email address to which to send unit logs.')
sendLogToUser2Address = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sendLogToUser2Address.setStatus('current')
if mibBuilder.loadTexts: sendLogToUser2Address.setDescription('Second email address to which to send unit logs.')
sendAlertsToUser1Address = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sendAlertsToUser1Address.setStatus('current')
if mibBuilder.loadTexts: sendAlertsToUser1Address.setDescription('Email address to which to send unit alerts.')
sendAlertsToUser2Address = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sendAlertsToUser2Address.setStatus('current')
if mibBuilder.loadTexts: sendAlertsToUser2Address.setDescription('Second email address to which to send unit alerts.')
sendLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("weeklyOnSunday", 1), ("weeklyOnMonday", 2), ("weeklyOnTuesday", 3), ("weeklyOnWednesday", 4), ("weeklyOnThursday", 5), ("weeklyOnFriday", 6), ("weeklyOnSaturday", 7), ("daily", 8), ("whenFull", 9), ("never", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sendLogFrequency.setStatus('current')
if mibBuilder.loadTexts: sendLogFrequency.setDescription('Frequency with which to send logs via email.')
sendLogTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sendLogTime.setStatus('current')
if mibBuilder.loadTexts: sendLogTime.setDescription('Time of day to send logs via email. Not applicable if sendLogFrequency is set to whenFull or never.')
userLogInLogOut = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("sendToLog", 2), ("sendAlert", 3), ("sendtoLogAndAlert", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userLogInLogOut.setStatus('current')
if mibBuilder.loadTexts: userLogInLogOut.setDescription('Enabled setting to log or send an alert when a user logs in or logs out of the serial, telnet, or web interfaces.')
userLogInLogOutFailed = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("sendToLog", 2), ("sendAlert", 3), ("sendtoLogAndAlert", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userLogInLogOutFailed.setStatus('current')
if mibBuilder.loadTexts: userLogInLogOutFailed.setDescription('Enabled setting to log or send an alert when a user attempts to log in but fails because of a username or password mismatch.')
outletActivity = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("sendToLog", 2), ("sendAlert", 3), ("sendtoLogAndAlert", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletActivity.setStatus('current')
if mibBuilder.loadTexts: outletActivity.setDescription('Enabled setting to log or send an alert each time an outlet changes state.')
systemOnOff = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("sendToLog", 2), ("sendAlert", 3), ("sendtoLogAndAlert", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemOnOff.setStatus('current')
if mibBuilder.loadTexts: systemOnOff.setDescription('Enabled setting to log or send an alert each time the unit powers up.')
outletSection1Alert = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("sendAlert", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection1Alert.setStatus('current')
if mibBuilder.loadTexts: outletSection1Alert.setDescription('Enabled setting to send an email alert when section 1 thresholds are breached.')
outletSection2Alert = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("sendAlert", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection2Alert.setStatus('current')
if mibBuilder.loadTexts: outletSection2Alert.setDescription('Enabled setting to send an email alert when section 2 thresholds are brached.')
outletSection3Alert = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("sendAlert", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection3Alert.setStatus('current')
if mibBuilder.loadTexts: outletSection3Alert.setDescription('Enabled setting to send an email alert when section 3 thresholds are breached.')
tempSensor1Alert = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("sendAlert", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensor1Alert.setStatus('current')
if mibBuilder.loadTexts: tempSensor1Alert.setDescription('Enabled setting to send an email alert when temperature sensor 1 thresholds are breached.')
tempSensor2Alert = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("sendAlert", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensor2Alert.setStatus('current')
if mibBuilder.loadTexts: tempSensor2Alert.setDescription('Enabled setting to send an email alert when temperature sensor 2 thresholds are breached.')
humSensor1Alert = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("sendAlert", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humSensor1Alert.setStatus('current')
if mibBuilder.loadTexts: humSensor1Alert.setDescription('Enabled setting to send an email alert when humidity sensor thresholds are breached.')
contactClosure1Alert = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("sendAlert", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosure1Alert.setStatus('current')
if mibBuilder.loadTexts: contactClosure1Alert.setDescription('Enabled setting to send an email alert when contact sensor 1 changes state.')
contactClosure2Alert = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("sendAlert", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosure2Alert.setStatus('current')
if mibBuilder.loadTexts: contactClosure2Alert.setDescription('Enabled setting to send an email alert when contact sensor 2 changes state.')
contactClosure3Alert = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("sendAlert", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosure3Alert.setStatus('current')
if mibBuilder.loadTexts: contactClosure3Alert.setDescription('Enabled setting to send an email alert when contact sensor 3 changes state.')
baudRate = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("baud9600", 0), ("baud19200", 1), ("baud38400", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baudRate.setStatus('current')
if mibBuilder.loadTexts: baudRate.setDescription('Serial baud rate, does not take effect unless unit is soft-rebooted.')
telnetPort = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPort.setStatus('current')
if mibBuilder.loadTexts: telnetPort.setDescription('Telnet interface port, default is 23.')
telnetEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetEnabled.setStatus('current')
if mibBuilder.loadTexts: telnetEnabled.setDescription('Enabled setting for the telnet interface. This can be disabled for security.')
outlet1Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet1Name.setStatus('current')
if mibBuilder.loadTexts: outlet1Name.setDescription('Descriptive outlet name')
outlet1PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet1PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet1PingIpAddress.setDescription('Ping watchdog IP address')
outlet1Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet1Link.setStatus('current')
if mibBuilder.loadTexts: outlet1Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet1SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet1SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet1SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet1RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet1RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet1RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet2Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet2Name.setStatus('current')
if mibBuilder.loadTexts: outlet2Name.setDescription('Descriptive outlet name')
outlet2PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet2PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet2PingIpAddress.setDescription('Ping watchdog IP address')
outlet2Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 2, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet2Link.setStatus('current')
if mibBuilder.loadTexts: outlet2Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet2SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet2SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet2SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet2RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet2RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet2RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet3Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet3Name.setStatus('current')
if mibBuilder.loadTexts: outlet3Name.setDescription('Descriptive outlet name')
outlet3PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet3PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet3PingIpAddress.setDescription('Ping watchdog IP address')
outlet3Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet3Link.setStatus('current')
if mibBuilder.loadTexts: outlet3Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet3SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet3SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet3SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet3RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet3RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet3RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet4Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet4Name.setStatus('current')
if mibBuilder.loadTexts: outlet4Name.setDescription('Descriptive outlet name')
outlet4PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet4PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet4PingIpAddress.setDescription('Ping watchdog IP address')
outlet4Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet4Link.setStatus('current')
if mibBuilder.loadTexts: outlet4Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet4SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet4SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet4SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet4RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet4RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet4RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet5Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet5Name.setStatus('current')
if mibBuilder.loadTexts: outlet5Name.setDescription('Descriptive outlet name')
outlet5PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet5PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet5PingIpAddress.setDescription('Ping watchdog IP address')
outlet5Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 5, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet5Link.setStatus('current')
if mibBuilder.loadTexts: outlet5Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet5SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet5SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet5SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet5RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet5RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet5RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet6Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 6, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet6Name.setStatus('current')
if mibBuilder.loadTexts: outlet6Name.setDescription('Descriptive outlet name')
outlet6PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet6PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet6PingIpAddress.setDescription('Ping watchdog IP address')
outlet6Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 6, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet6Link.setStatus('current')
if mibBuilder.loadTexts: outlet6Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet6SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet6SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet6SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet6RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet6RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet6RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet7Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 7, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet7Name.setStatus('current')
if mibBuilder.loadTexts: outlet7Name.setDescription('Descriptive outlet name')
outlet7PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet7PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet7PingIpAddress.setDescription('Ping watchdog IP address')
outlet7Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 7, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet7Link.setStatus('current')
if mibBuilder.loadTexts: outlet7Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet7SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 7, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet7SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet7SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet7RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 7, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet7RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet7RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet8Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 8, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet8Name.setStatus('current')
if mibBuilder.loadTexts: outlet8Name.setDescription('Descriptive outlet name')
outlet8PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet8PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet8PingIpAddress.setDescription('Ping watchdog IP address')
outlet8Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet8Link.setStatus('current')
if mibBuilder.loadTexts: outlet8Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet8SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 8, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet8SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet8SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet8RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 8, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet8RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet8RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet9Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 9, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet9Name.setStatus('current')
if mibBuilder.loadTexts: outlet9Name.setDescription('Descriptive outlet name')
outlet9PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet9PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet9PingIpAddress.setDescription('Ping watchdog IP address')
outlet9Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 9, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet9Link.setStatus('current')
if mibBuilder.loadTexts: outlet9Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet9SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet9SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet9SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet9RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet9RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet9RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet10Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 10, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet10Name.setStatus('current')
if mibBuilder.loadTexts: outlet10Name.setDescription('Descriptive outlet name')
outlet10PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet10PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet10PingIpAddress.setDescription('Ping watchdog IP address')
outlet10Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 10, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet10Link.setStatus('current')
if mibBuilder.loadTexts: outlet10Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet10SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 10, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet10SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet10SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet10RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 10, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet10RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet10RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet11Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 11, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet11Name.setStatus('current')
if mibBuilder.loadTexts: outlet11Name.setDescription('Descriptive outlet name')
outlet11PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 11, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet11PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet11PingIpAddress.setDescription('Ping watchdog IP address')
outlet11Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 11, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet11Link.setStatus('current')
if mibBuilder.loadTexts: outlet11Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet11SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 11, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet11SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet11SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet11RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 11, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet11RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet11RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet12Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 12, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet12Name.setStatus('current')
if mibBuilder.loadTexts: outlet12Name.setDescription('Descriptive outlet name')
outlet12PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 12, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet12PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet12PingIpAddress.setDescription('Ping watchdog IP address')
outlet12Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 12, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet12Link.setStatus('current')
if mibBuilder.loadTexts: outlet12Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet12SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 12, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet12SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet12SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet12RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 12, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet12RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet12RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet13Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 13, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet13Name.setStatus('current')
if mibBuilder.loadTexts: outlet13Name.setDescription('Descriptive outlet name')
outlet13PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 13, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet13PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet13PingIpAddress.setDescription('Ping watchdog IP address')
outlet13Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 13, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet13Link.setStatus('current')
if mibBuilder.loadTexts: outlet13Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet13SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 13, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet13SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet13SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet13RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 13, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet13RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet13RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet14Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 14, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet14Name.setStatus('current')
if mibBuilder.loadTexts: outlet14Name.setDescription('Descriptive outlet name')
outlet14PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 14, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet14PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet14PingIpAddress.setDescription('Ping watchdog IP address')
outlet14Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 14, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet14Link.setStatus('current')
if mibBuilder.loadTexts: outlet14Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet14SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 14, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet14SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet14SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet14RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 14, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet14RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet14RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet15Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 15, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet15Name.setStatus('current')
if mibBuilder.loadTexts: outlet15Name.setDescription('Descriptive outlet name')
outlet15PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 15, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet15PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet15PingIpAddress.setDescription('Ping watchdog IP address')
outlet15Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 15, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet15Link.setStatus('current')
if mibBuilder.loadTexts: outlet15Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet15SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 15, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet15SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet15SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet15RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 15, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet15RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet15RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet16Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 16, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet16Name.setStatus('current')
if mibBuilder.loadTexts: outlet16Name.setDescription('Descriptive outlet name')
outlet16PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 16, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet16PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet16PingIpAddress.setDescription('Ping watchdog IP address')
outlet16Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 16, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet16Link.setStatus('current')
if mibBuilder.loadTexts: outlet16Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet16SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 16, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet16SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet16SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet16RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 16, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet16RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet16RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet17Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 17, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet17Name.setStatus('current')
if mibBuilder.loadTexts: outlet17Name.setDescription('Descriptive outlet name')
outlet17PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 17, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet17PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet17PingIpAddress.setDescription('Ping watchdog IP address')
outlet17Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 17, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet17Link.setStatus('current')
if mibBuilder.loadTexts: outlet17Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet17SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 17, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet17SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet17SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet17RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 17, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet17RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet17RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet18Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 18, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet18Name.setStatus('current')
if mibBuilder.loadTexts: outlet18Name.setDescription('Descriptive outlet name')
outlet18PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 18, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet18PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet18PingIpAddress.setDescription('Ping watchdog IP address')
outlet18Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 18, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet18Link.setStatus('current')
if mibBuilder.loadTexts: outlet18Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet18SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 18, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet18SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet18SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet18RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 18, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet18RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet18RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet19Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 19, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet19Name.setStatus('current')
if mibBuilder.loadTexts: outlet19Name.setDescription('Descriptive outlet name')
outlet19PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 19, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet19PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet19PingIpAddress.setDescription('Ping watchdog IP address')
outlet19Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 19, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet19Link.setStatus('current')
if mibBuilder.loadTexts: outlet19Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet19SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 19, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet19SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet19SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet19RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 19, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet19RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet19RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet20Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 20, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet20Name.setStatus('current')
if mibBuilder.loadTexts: outlet20Name.setDescription('Descriptive outlet name')
outlet20PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 20, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet20PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet20PingIpAddress.setDescription('Ping watchdog IP address')
outlet20Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 20, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet20Link.setStatus('current')
if mibBuilder.loadTexts: outlet20Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet20SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 20, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet20SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet20SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet20RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 20, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet20RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet20RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet21Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 21, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet21Name.setStatus('current')
if mibBuilder.loadTexts: outlet21Name.setDescription('Descriptive outlet name')
outlet21PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 21, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet21PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet21PingIpAddress.setDescription('Ping watchdog IP address')
outlet21Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 21, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet21Link.setStatus('current')
if mibBuilder.loadTexts: outlet21Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet21SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 21, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet21SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet21SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet21RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 21, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet21RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet21RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet22Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 22, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet22Name.setStatus('current')
if mibBuilder.loadTexts: outlet22Name.setDescription('Descriptive outlet name')
outlet22PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 22, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet22PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet22PingIpAddress.setDescription('Ping watchdog IP address')
outlet22Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 22, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet22Link.setStatus('current')
if mibBuilder.loadTexts: outlet22Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet22SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 22, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet22SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet22SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet22RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 22, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet22RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet22RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet23Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 23, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet23Name.setStatus('current')
if mibBuilder.loadTexts: outlet23Name.setDescription('Descriptive outlet name')
outlet23PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 23, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet23PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet23PingIpAddress.setDescription('Ping watchdog IP address')
outlet23Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 23, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet23Link.setStatus('current')
if mibBuilder.loadTexts: outlet23Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet23SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 23, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet23SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet23SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet23RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 23, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet23RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet23RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet24Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 24, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet24Name.setStatus('current')
if mibBuilder.loadTexts: outlet24Name.setDescription('Descriptive outlet name')
outlet24PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 24, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet24PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet24PingIpAddress.setDescription('Ping watchdog IP address')
outlet24Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 24, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet24Link.setStatus('current')
if mibBuilder.loadTexts: outlet24Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet24SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 24, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet24SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet24SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet24RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 24, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet24RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet24RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet25Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 25, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet25Name.setStatus('current')
if mibBuilder.loadTexts: outlet25Name.setDescription('Descriptive outlet name')
outlet25PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 25, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet25PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet25PingIpAddress.setDescription('Ping watchdog IP address')
outlet25Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 25, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet25Link.setStatus('current')
if mibBuilder.loadTexts: outlet25Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet25SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 25, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet25SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet25SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet25RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 25, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet25RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet25RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet26Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 26, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet26Name.setStatus('current')
if mibBuilder.loadTexts: outlet26Name.setDescription('Descriptive outlet name')
outlet26PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 26, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet26PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet26PingIpAddress.setDescription('Ping watchdog IP address')
outlet26Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 26, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet26Link.setStatus('current')
if mibBuilder.loadTexts: outlet26Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet26SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 26, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet26SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet26SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet26RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 26, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet26RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet26RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet27Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 27, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet27Name.setStatus('current')
if mibBuilder.loadTexts: outlet27Name.setDescription('Descriptive outlet name')
outlet27PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 27, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet27PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet27PingIpAddress.setDescription('Ping watchdog IP address')
outlet27Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 27, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet27Link.setStatus('current')
if mibBuilder.loadTexts: outlet27Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet27SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 27, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet27SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet27SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet27RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 27, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet27RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet27RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet28Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 28, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet28Name.setStatus('current')
if mibBuilder.loadTexts: outlet28Name.setDescription('Descriptive outlet name')
outlet28PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 28, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet28PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet28PingIpAddress.setDescription('Ping watchdog IP address')
outlet28Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 28, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet28Link.setStatus('current')
if mibBuilder.loadTexts: outlet28Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet28SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 28, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet28SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet28SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet28RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 28, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet28RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet28RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet29Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 29, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet29Name.setStatus('current')
if mibBuilder.loadTexts: outlet29Name.setDescription('Descriptive outlet name')
outlet29PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 29, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet29PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet29PingIpAddress.setDescription('Ping watchdog IP address')
outlet29Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 29, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet29Link.setStatus('current')
if mibBuilder.loadTexts: outlet29Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet29SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 29, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet29SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet29SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet29RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 29, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet29RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet29RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet30Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 30, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet30Name.setStatus('current')
if mibBuilder.loadTexts: outlet30Name.setDescription('Descriptive outlet name')
outlet30PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 30, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet30PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet30PingIpAddress.setDescription('Ping watchdog IP address')
outlet30Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 30, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet30Link.setStatus('current')
if mibBuilder.loadTexts: outlet30Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet30SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 30, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet30SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet30SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet30RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 30, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet30RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet30RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet31Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 31, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet31Name.setStatus('current')
if mibBuilder.loadTexts: outlet31Name.setDescription('Descriptive outlet name')
outlet31PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 31, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet31PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet31PingIpAddress.setDescription('Ping watchdog IP address')
outlet31Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 31, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet31Link.setStatus('current')
if mibBuilder.loadTexts: outlet31Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet31SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 31, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet31SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet31SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet31RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 31, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet31RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet31RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet32Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 32, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet32Name.setStatus('current')
if mibBuilder.loadTexts: outlet32Name.setDescription('Descriptive outlet name')
outlet32PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 32, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet32PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet32PingIpAddress.setDescription('Ping watchdog IP address')
outlet32Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 32, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet32Link.setStatus('current')
if mibBuilder.loadTexts: outlet32Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet32SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 32, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet32SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet32SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet32RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 32, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet32RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet32RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet33Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 33, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet33Name.setStatus('current')
if mibBuilder.loadTexts: outlet33Name.setDescription('Descriptive outlet name')
outlet33PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 33, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet33PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet33PingIpAddress.setDescription('Ping watchdog IP address')
outlet33Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 33, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet33Link.setStatus('current')
if mibBuilder.loadTexts: outlet33Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet33SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 33, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet33SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet33SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet33RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 33, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet33RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet33RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet34Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 34, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet34Name.setStatus('current')
if mibBuilder.loadTexts: outlet34Name.setDescription('Descriptive outlet name')
outlet34PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 34, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet34PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet34PingIpAddress.setDescription('Ping watchdog IP address')
outlet34Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 34, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet34Link.setStatus('current')
if mibBuilder.loadTexts: outlet34Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet34SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 34, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet34SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet34SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet34RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 34, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet34RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet34RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet35Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 35, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet35Name.setStatus('current')
if mibBuilder.loadTexts: outlet35Name.setDescription('Descriptive outlet name')
outlet35PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 35, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet35PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet35PingIpAddress.setDescription('Ping watchdog IP address')
outlet35Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 35, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet35Link.setStatus('current')
if mibBuilder.loadTexts: outlet35Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet35SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 35, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet35SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet35SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet35RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 35, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet35RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet35RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
outlet36Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 36, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet36Name.setStatus('current')
if mibBuilder.loadTexts: outlet36Name.setDescription('Descriptive outlet name')
outlet36PingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 36, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet36PingIpAddress.setStatus('current')
if mibBuilder.loadTexts: outlet36PingIpAddress.setDescription('Ping watchdog IP address')
outlet36Link = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 36, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet36Link.setStatus('current')
if mibBuilder.loadTexts: outlet36Link.setDescription('URL of web configuration interface for the device connected to this outlet.')
outlet36SequenceTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 36, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet36SequenceTime.setStatus('current')
if mibBuilder.loadTexts: outlet36SequenceTime.setDescription('Time in seconds for the outlet to delay turning on after a Sequence On command is issued.')
outlet36RebootTime = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 1, 36, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet36RebootTime.setStatus('current')
if mibBuilder.loadTexts: outlet36RebootTime.setDescription('Time in seconds for the outlet to remain off when a Reboot command is issued.')
globalCommand = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("nochange", 0), ("globalOn", 1), ("globalOff", 2), ("sequenceOn", 3), ("sequenceOff", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalCommand.setStatus('current')
if mibBuilder.loadTexts: globalCommand.setDescription('Issue a command to all outlets on this unit.')
outlet1Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet1Command.setStatus('current')
if mibBuilder.loadTexts: outlet1Command.setDescription('Issue an outlet command')
outlet2Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet2Command.setStatus('current')
if mibBuilder.loadTexts: outlet2Command.setDescription('Issue an outlet command')
outlet3Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet3Command.setStatus('current')
if mibBuilder.loadTexts: outlet3Command.setDescription('Issue an outlet command')
outlet4Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet4Command.setStatus('current')
if mibBuilder.loadTexts: outlet4Command.setDescription('Issue an outlet command')
outlet5Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet5Command.setStatus('current')
if mibBuilder.loadTexts: outlet5Command.setDescription('Issue an outlet command')
outlet6Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet6Command.setStatus('current')
if mibBuilder.loadTexts: outlet6Command.setDescription('Issue an outlet command')
outlet7Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet7Command.setStatus('current')
if mibBuilder.loadTexts: outlet7Command.setDescription('Issue an outlet command')
outlet8Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet8Command.setStatus('current')
if mibBuilder.loadTexts: outlet8Command.setDescription('Issue an outlet command')
outlet9Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet9Command.setStatus('current')
if mibBuilder.loadTexts: outlet9Command.setDescription('Issue an outlet command')
outlet10Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet10Command.setStatus('current')
if mibBuilder.loadTexts: outlet10Command.setDescription('Issue an outlet command')
outlet11Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet11Command.setStatus('current')
if mibBuilder.loadTexts: outlet11Command.setDescription('Issue an outlet command')
outlet12Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("noChange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet12Command.setStatus('current')
if mibBuilder.loadTexts: outlet12Command.setDescription('Issue an outlet command')
outlet13Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet13Command.setStatus('current')
if mibBuilder.loadTexts: outlet13Command.setDescription('Issue an outlet command')
outlet14Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet14Command.setStatus('current')
if mibBuilder.loadTexts: outlet14Command.setDescription('Issue an outlet command')
outlet15Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet15Command.setStatus('current')
if mibBuilder.loadTexts: outlet15Command.setDescription('Issue an outlet command')
outlet16Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet16Command.setStatus('current')
if mibBuilder.loadTexts: outlet16Command.setDescription('Issue an outlet command')
outlet17Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet17Command.setStatus('current')
if mibBuilder.loadTexts: outlet17Command.setDescription('Issue an outlet command')
outlet18Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet18Command.setStatus('current')
if mibBuilder.loadTexts: outlet18Command.setDescription('Issue an outlet command')
outlet19Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet19Command.setStatus('current')
if mibBuilder.loadTexts: outlet19Command.setDescription('Issue an outlet command')
outlet20Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet20Command.setStatus('current')
if mibBuilder.loadTexts: outlet20Command.setDescription('Issue an outlet command')
outlet21Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet21Command.setStatus('current')
if mibBuilder.loadTexts: outlet21Command.setDescription('Issue an outlet command')
outlet22Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet22Command.setStatus('current')
if mibBuilder.loadTexts: outlet22Command.setDescription('Issue an outlet command')
outlet23Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet23Command.setStatus('current')
if mibBuilder.loadTexts: outlet23Command.setDescription('Issue an outlet command')
outlet24Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet24Command.setStatus('current')
if mibBuilder.loadTexts: outlet24Command.setDescription('Issue an outlet command')
outlet25Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet25Command.setStatus('current')
if mibBuilder.loadTexts: outlet25Command.setDescription('Issue an outlet command')
outlet26Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet26Command.setStatus('current')
if mibBuilder.loadTexts: outlet26Command.setDescription('Issue an outlet command')
outlet27Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet27Command.setStatus('current')
if mibBuilder.loadTexts: outlet27Command.setDescription('Issue an outlet command')
outlet28Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet28Command.setStatus('current')
if mibBuilder.loadTexts: outlet28Command.setDescription('Issue an outlet command')
outlet29Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet29Command.setStatus('current')
if mibBuilder.loadTexts: outlet29Command.setDescription('Issue an outlet command')
outlet30Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet30Command.setStatus('current')
if mibBuilder.loadTexts: outlet30Command.setDescription('Issue an outlet command')
outlet31Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet31Command.setStatus('current')
if mibBuilder.loadTexts: outlet31Command.setDescription('Issue an outlet command')
outlet32Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet32Command.setStatus('current')
if mibBuilder.loadTexts: outlet32Command.setDescription('Issue an outlet command')
outlet33Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet33Command.setStatus('current')
if mibBuilder.loadTexts: outlet33Command.setDescription('Issue an outlet command')
outlet34Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet34Command.setStatus('current')
if mibBuilder.loadTexts: outlet34Command.setDescription('Issue an outlet command')
outlet35Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet35Command.setStatus('current')
if mibBuilder.loadTexts: outlet35Command.setDescription('Issue an outlet command')
outlet36Command = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("reboot", 3), ("nochange", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outlet36Command.setStatus('current')
if mibBuilder.loadTexts: outlet36Command.setDescription('Issue an outlet command')
outlet1Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet1Status.setStatus('current')
if mibBuilder.loadTexts: outlet1Status.setDescription('Get the outlet status')
outlet2Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet2Status.setStatus('current')
if mibBuilder.loadTexts: outlet2Status.setDescription('Get the outlet status')
outlet3Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet3Status.setStatus('current')
if mibBuilder.loadTexts: outlet3Status.setDescription('Get the outlet status')
outlet4Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet4Status.setStatus('current')
if mibBuilder.loadTexts: outlet4Status.setDescription('Get the outlet status')
outlet5Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet5Status.setStatus('current')
if mibBuilder.loadTexts: outlet5Status.setDescription('Get the outlet status')
outlet6Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet6Status.setStatus('current')
if mibBuilder.loadTexts: outlet6Status.setDescription('Get the outlet status')
outlet7Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet7Status.setStatus('current')
if mibBuilder.loadTexts: outlet7Status.setDescription('Get the outlet status')
outlet8Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet8Status.setStatus('current')
if mibBuilder.loadTexts: outlet8Status.setDescription('Get the outlet status')
outlet9Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet9Status.setStatus('current')
if mibBuilder.loadTexts: outlet9Status.setDescription('Get the outlet status')
outlet10Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet10Status.setStatus('current')
if mibBuilder.loadTexts: outlet10Status.setDescription('Get the outlet status')
outlet11Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet11Status.setStatus('current')
if mibBuilder.loadTexts: outlet11Status.setDescription('Get the outlet status')
outlet12Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet12Status.setStatus('current')
if mibBuilder.loadTexts: outlet12Status.setDescription('Get the outlet status')
outlet13Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet13Status.setStatus('current')
if mibBuilder.loadTexts: outlet13Status.setDescription('Get the outlet status')
outlet14Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet14Status.setStatus('current')
if mibBuilder.loadTexts: outlet14Status.setDescription('Get the outlet status')
outlet15Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet15Status.setStatus('current')
if mibBuilder.loadTexts: outlet15Status.setDescription('Get the outlet status')
outlet16Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet16Status.setStatus('current')
if mibBuilder.loadTexts: outlet16Status.setDescription('Get the outlet status')
outlet17Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet17Status.setStatus('current')
if mibBuilder.loadTexts: outlet17Status.setDescription('Get the outlet status')
outlet18Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet18Status.setStatus('current')
if mibBuilder.loadTexts: outlet18Status.setDescription('Get the outlet status')
outlet19Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet19Status.setStatus('current')
if mibBuilder.loadTexts: outlet19Status.setDescription('Get the outlet status')
outlet20Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet20Status.setStatus('current')
if mibBuilder.loadTexts: outlet20Status.setDescription('Get the outlet status')
outlet21Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet21Status.setStatus('current')
if mibBuilder.loadTexts: outlet21Status.setDescription('Get the outlet status')
outlet22Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet22Status.setStatus('current')
if mibBuilder.loadTexts: outlet22Status.setDescription('Get the outlet status')
outlet23Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet23Status.setStatus('current')
if mibBuilder.loadTexts: outlet23Status.setDescription('Get the outlet status')
outlet24Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet24Status.setStatus('current')
if mibBuilder.loadTexts: outlet24Status.setDescription('Get the outlet status')
outlet25Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet25Status.setStatus('current')
if mibBuilder.loadTexts: outlet25Status.setDescription('Get the outlet status')
outlet26Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet26Status.setStatus('current')
if mibBuilder.loadTexts: outlet26Status.setDescription('Get the outlet status')
outlet27Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet27Status.setStatus('current')
if mibBuilder.loadTexts: outlet27Status.setDescription('Get the outlet status')
outlet28Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet28Status.setStatus('current')
if mibBuilder.loadTexts: outlet28Status.setDescription('Get the outlet status')
outlet29Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet29Status.setStatus('current')
if mibBuilder.loadTexts: outlet29Status.setDescription('Get the outlet status')
outlet30Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet30Status.setStatus('current')
if mibBuilder.loadTexts: outlet30Status.setDescription('Get the outlet status')
outlet31Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet31Status.setStatus('current')
if mibBuilder.loadTexts: outlet31Status.setDescription('Get the outlet status')
outlet32Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet32Status.setStatus('current')
if mibBuilder.loadTexts: outlet32Status.setDescription('Get the outlet status')
outlet33Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet33Status.setStatus('current')
if mibBuilder.loadTexts: outlet33Status.setDescription('Get the outlet status')
outlet34Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet34Status.setStatus('current')
if mibBuilder.loadTexts: outlet34Status.setDescription('Get the outlet status')
outlet35Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet35Status.setStatus('current')
if mibBuilder.loadTexts: outlet35Status.setDescription('Get the outlet status')
outlet36Status = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 6, 3, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet36Status.setStatus('current')
if mibBuilder.loadTexts: outlet36Status.setDescription('Get the outlet status')
publicCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: publicCommunityName.setStatus('obsolete')
if mibBuilder.loadTexts: publicCommunityName.setDescription('Enter the read-only community name. Default public')
privateCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: privateCommunityName.setStatus('obsolete')
if mibBuilder.loadTexts: privateCommunityName.setDescription('Enter the read-write community name. Default private')
trapCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: trapCommunityName.setStatus('obsolete')
if mibBuilder.loadTexts: trapCommunityName.setDescription('Enter the Trap community name. Default public')
publicCommunityPassword = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: publicCommunityPassword.setStatus('obsolete')
if mibBuilder.loadTexts: publicCommunityPassword.setDescription('Enter the read-only community password. Default public')
privateCommunityPassword = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: privateCommunityPassword.setStatus('obsolete')
if mibBuilder.loadTexts: privateCommunityPassword.setDescription('Enter the read-write community password. Default private')
trapIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIpAddress.setStatus('current')
if mibBuilder.loadTexts: trapIpAddress.setDescription('Enter the IP address to which to send SNMP traps.')
snmpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))))
if mibBuilder.loadTexts: snmpEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: snmpEnabled.setDescription('Enabled setting for SNMP interface')
trapUserLoginLogout = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapUserLoginLogout.setStatus('current')
if mibBuilder.loadTexts: trapUserLoginLogout.setDescription('Enabled setting to send an SNMP trap when a user logs in/out of the serial, telnet, or web interfaces.')
trapFailedLogin = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapFailedLogin.setStatus('current')
if mibBuilder.loadTexts: trapFailedLogin.setDescription('Enabled setting to send an SNMP trap when a user fails to log into the serial, telnet, or web interfaces because of a username or password mismatch.')
trapOutletActivity = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapOutletActivity.setStatus('current')
if mibBuilder.loadTexts: trapOutletActivity.setDescription('Enabled setting to send an SNMP trap whenever an outlet changes state.')
trapSystemOnOff = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapSystemOnOff.setStatus('current')
if mibBuilder.loadTexts: trapSystemOnOff.setDescription('Enabled setting to send an SNMP trap when the PDU powers up.')
trapOutletSection1Threshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapOutletSection1Threshold.setStatus('current')
if mibBuilder.loadTexts: trapOutletSection1Threshold.setDescription('Enabled setting to send an SNMP trap when the section 1 thresholds are breached.')
trapOutletSection2Threshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapOutletSection2Threshold.setStatus('current')
if mibBuilder.loadTexts: trapOutletSection2Threshold.setDescription('Enabled setting to send an SNMP trap when the section 2 thresholds are breached.')
trapOutletSection3Threshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapOutletSection3Threshold.setStatus('current')
if mibBuilder.loadTexts: trapOutletSection3Threshold.setDescription('Enabled setting to send an SNMP trap when the section 3 thresholds are breached.')
trapTemperatureSensor1Threshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapTemperatureSensor1Threshold.setStatus('current')
if mibBuilder.loadTexts: trapTemperatureSensor1Threshold.setDescription('Enabled setting to send an SNMP trap when the temperature 1 sensor thresholds are breached.')
trapTemperatureSensor2Threshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapTemperatureSensor2Threshold.setStatus('current')
if mibBuilder.loadTexts: trapTemperatureSensor2Threshold.setDescription('Enabled setting to send an SNMP trap when the temperature 2 sensor thresholds are breached.')
trapHumiditySensorThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapHumiditySensorThreshold.setStatus('current')
if mibBuilder.loadTexts: trapHumiditySensorThreshold.setDescription('Enabled setting to send an SNMP trap when the humidity sensor thresholds are breached.')
trapContactClosure1Threshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapContactClosure1Threshold.setStatus('current')
if mibBuilder.loadTexts: trapContactClosure1Threshold.setDescription('Enabled setting to send an SNMP trap when the contact sensor 1 state changes.')
trapContactClosure2Threshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 8, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapContactClosure2Threshold.setStatus('current')
if mibBuilder.loadTexts: trapContactClosure2Threshold.setDescription('Enabled setting to send an SNMP trap when the contact sensor 2 state changes.')
trapContactClosure3Threshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 7, 8, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapContactClosure3Threshold.setStatus('current')
if mibBuilder.loadTexts: trapContactClosure3Threshold.setDescription('Enabled setting to send an SNMP trap when the contact sensor 3 state changes.')
tempSensor1Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensor1Name.setStatus('current')
if mibBuilder.loadTexts: tempSensor1Name.setDescription('Descriptive sensor name')
tempSensor1Enable = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensor1Enable.setStatus('current')
if mibBuilder.loadTexts: tempSensor1Enable.setDescription('When disabled, the sensor measurement is not displayed and the thresholds are ignored.')
tempSensor1HighThresh = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensor1HighThresh.setStatus('current')
if mibBuilder.loadTexts: tempSensor1HighThresh.setDescription('Sensor high threshold')
tempSensor1LowThresh = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensor1LowThresh.setStatus('current')
if mibBuilder.loadTexts: tempSensor1LowThresh.setDescription('Sensor low threshold')
tempSensor1ControlOutlet = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensor1ControlOutlet.setStatus('current')
if mibBuilder.loadTexts: tempSensor1ControlOutlet.setDescription('Enabled setting to control an outlet or group based on the sensor thresholds.')
tempSensor1OutletName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensor1OutletName.setStatus('current')
if mibBuilder.loadTexts: tempSensor1OutletName.setDescription('Outlet or group name to control based on the sensor measurement.')
tempSensor1OutletState = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("turnOutletOn", 0), ("turnOutletOff", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensor1OutletState.setStatus('current')
if mibBuilder.loadTexts: tempSensor1OutletState.setDescription('turnOutletOn setting will turn the outlet/group on when the thresholds are breached and off when between the thresholds. turnOutletOff setting will turn the outlet/group off when the thresholds are breached and on when between the thresholds.')
tempSensor2Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensor2Name.setStatus('current')
if mibBuilder.loadTexts: tempSensor2Name.setDescription('Descriptive sensor name')
tempSensor2Enable = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensor2Enable.setStatus('current')
if mibBuilder.loadTexts: tempSensor2Enable.setDescription('When disabled, the sensor measurement is not displayed and the thresholds are ignored.')
tempSensor2HighThresh = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensor2HighThresh.setStatus('current')
if mibBuilder.loadTexts: tempSensor2HighThresh.setDescription('Sensor high threshold')
tempSensor2LowThresh = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensor2LowThresh.setStatus('current')
if mibBuilder.loadTexts: tempSensor2LowThresh.setDescription('Sensor low threshold')
tempSensor2ControlOutlet = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensor2ControlOutlet.setStatus('current')
if mibBuilder.loadTexts: tempSensor2ControlOutlet.setDescription('Enabled setting to control an outlet or group based on the sensor thresholds.')
tempSensor2OutletName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 1, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensor2OutletName.setStatus('current')
if mibBuilder.loadTexts: tempSensor2OutletName.setDescription('Outlet or group name to control based on the sensor measurement.')
tempSensor2OutletState = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("turnOutletOn", 0), ("turnOutletOff", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempSensor2OutletState.setStatus('current')
if mibBuilder.loadTexts: tempSensor2OutletState.setDescription('turnOutletOn setting will turn the outlet/group on when the thresholds are breached and off when between the thresholds. turnOutletOff setting will turn the outlet/group off when the thresholds are breached and on when between the thresholds.')
humSensor1Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humSensor1Name.setStatus('current')
if mibBuilder.loadTexts: humSensor1Name.setDescription('Descriptive sensor name')
humSensor1Enable = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humSensor1Enable.setStatus('current')
if mibBuilder.loadTexts: humSensor1Enable.setDescription('When disabled, the sensor measurement is not displayed and the thresholds are ignored.')
humSensor1HighThresh = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humSensor1HighThresh.setStatus('current')
if mibBuilder.loadTexts: humSensor1HighThresh.setDescription('Sensor high threshold')
humSensor1LowThresh = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humSensor1LowThresh.setStatus('current')
if mibBuilder.loadTexts: humSensor1LowThresh.setDescription('Sensor low threshold')
humSensor1ControlOutlet = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humSensor1ControlOutlet.setStatus('current')
if mibBuilder.loadTexts: humSensor1ControlOutlet.setDescription('Enabled setting to control an outlet or group based on the sensor thresholds.')
humSensor1OutletName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humSensor1OutletName.setStatus('current')
if mibBuilder.loadTexts: humSensor1OutletName.setDescription('Outlet or group name to control based on the sensor measurement.')
humSensor1OutletState = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("turnOutletOn", 0), ("turnOutletOff", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humSensor1OutletState.setStatus('current')
if mibBuilder.loadTexts: humSensor1OutletState.setDescription('turnOutletOn setting will turn the outlet/group on when the thresholds are breached and off when between the thresholds. turnOutletOff setting will turn the outlet/group off when the thresholds are breached and on when between the thresholds.')
contactClosure1Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosure1Name.setStatus('current')
if mibBuilder.loadTexts: contactClosure1Name.setDescription('Descriptive sensor name')
contactClosure1Enable = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosure1Enable.setStatus('current')
if mibBuilder.loadTexts: contactClosure1Enable.setDescription('When disabled, the sensor measurement is not displayed and the contact state is ignored.')
contactClosure1ControlOutlet = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosure1ControlOutlet.setStatus('current')
if mibBuilder.loadTexts: contactClosure1ControlOutlet.setDescription('Enabled setting to control an outlet or group based on the contact state.')
contactClosure1OutletName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosure1OutletName.setStatus('current')
if mibBuilder.loadTexts: contactClosure1OutletName.setDescription('Outlet or group name to control based on the contact state.')
contactClosure1OutletState = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("turnOutletOn", 0), ("turnOutletOff", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosure1OutletState.setStatus('current')
if mibBuilder.loadTexts: contactClosure1OutletState.setDescription('turnOutletOn setting will turn the outlet/group on when the contact is closed and off when the contact is open. turnOutletOff setting will turn the outlet/group off when the contact is open and on when the contact is closed.')
contactClosure2Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosure2Name.setStatus('current')
if mibBuilder.loadTexts: contactClosure2Name.setDescription('Descriptive sensor name')
contactClosure2Enable = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosure2Enable.setStatus('current')
if mibBuilder.loadTexts: contactClosure2Enable.setDescription('When disabled, the sensor measurement is not displayed and the contact state is ignored.')
contactClosure2ControlOutlet = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosure2ControlOutlet.setStatus('current')
if mibBuilder.loadTexts: contactClosure2ControlOutlet.setDescription('Enabled setting to control an outlet or group based on the contact state.')
contactClosure2OutletName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosure2OutletName.setStatus('current')
if mibBuilder.loadTexts: contactClosure2OutletName.setDescription('Outlet or group name to control based on the contact state.')
contactClosure2OutletState = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("turnOutletOn", 0), ("turnOutletOff", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosure2OutletState.setStatus('current')
if mibBuilder.loadTexts: contactClosure2OutletState.setDescription('turnOutletOn setting will turn the outlet/group on when the contact is closed and off when the contact is open. turnOutletOff setting will turn the outlet/group off when the contact is open and on when the contact is closed.')
contactClosure3Name = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosure3Name.setStatus('current')
if mibBuilder.loadTexts: contactClosure3Name.setDescription('Descriptive sensor name')
contactClosure3Enable = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosure3Enable.setStatus('current')
if mibBuilder.loadTexts: contactClosure3Enable.setDescription('When disabled, the sensor measurement is not displayed and the contact state is ignored.')
contactClosure3ControlOutlet = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosure3ControlOutlet.setStatus('current')
if mibBuilder.loadTexts: contactClosure3ControlOutlet.setDescription('Enabled setting to control an outlet or group based on the contact state.')
contactClosure3OutletName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosure3OutletName.setStatus('current')
if mibBuilder.loadTexts: contactClosure3OutletName.setDescription('Outlet or group name to control based on the contact state.')
contactClosure3OutletState = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("turnOutletOn", 0), ("turnOutletOff", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contactClosure3OutletState.setStatus('current')
if mibBuilder.loadTexts: contactClosure3OutletState.setDescription('turnOutletOn setting will turn the outlet/group on when the contact is closed and off when the contact is open. turnOutletOff setting will turn the outlet/group off when the contact is open and on when the contact is closed.')
outletSection1VoltageHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection1VoltageHighThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection1VoltageHighThreshold.setDescription('Upper threshold for section voltage measurement')
outletSection1VoltageLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection1VoltageLowThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection1VoltageLowThreshold.setDescription('Lower threshold for section voltage measurement')
outletSection1CurrentHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection1CurrentHighThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection1CurrentHighThreshold.setDescription('Upper threshold for section current measurement')
outletSection1CurrentLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection1CurrentLowThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection1CurrentLowThreshold.setDescription('Lower threshold for section current measurement')
outletSection1ControlOutlet = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection1ControlOutlet.setStatus('current')
if mibBuilder.loadTexts: outletSection1ControlOutlet.setDescription('Enabled setting to control an outlet or group based on the section voltage and current thresholds.')
outletSection1OutletName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection1OutletName.setStatus('current')
if mibBuilder.loadTexts: outletSection1OutletName.setDescription('Outlet or group name to control based on the section voltage and current measurement.')
outletSection2VoltageHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection2VoltageHighThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection2VoltageHighThreshold.setDescription('Upper threshold for section voltage measurement')
outletSection2VoltageLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection2VoltageLowThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection2VoltageLowThreshold.setDescription('Lower threshold for section voltage measurement')
outletSection2CurrentHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection2CurrentHighThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection2CurrentHighThreshold.setDescription('Upper threshold for section current measurement')
outletSection2CurrentLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection2CurrentLowThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection2CurrentLowThreshold.setDescription('Lower threshold for section current measurement')
outletSection2ControlOutlet = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection2ControlOutlet.setStatus('current')
if mibBuilder.loadTexts: outletSection2ControlOutlet.setDescription('Enabled setting to control an outlet or group based on the section voltage and current thresholds.')
outletSection2OutletName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection2OutletName.setStatus('current')
if mibBuilder.loadTexts: outletSection2OutletName.setDescription('Outlet or group name to control based on the section voltage and current measurement.')
outletSection3VoltageHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection3VoltageHighThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection3VoltageHighThreshold.setDescription('Upper threshold for section voltage measurement')
outletSection3VoltageLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection3VoltageLowThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection3VoltageLowThreshold.setDescription('Lower threshold for section voltage measurement')
outletSection3CurrentHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection3CurrentHighThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection3CurrentHighThreshold.setDescription('Upper threshold for section current measurement')
outletSection3CurrentLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection3CurrentLowThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection3CurrentLowThreshold.setDescription('Lower threshold for section current measurement')
outletSection3ControlOutlet = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection3ControlOutlet.setStatus('current')
if mibBuilder.loadTexts: outletSection3ControlOutlet.setDescription('Enabled setting to control an outlet or group based on the section voltage and current thresholds.')
outletSection3OutletName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 3, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection3OutletName.setStatus('current')
if mibBuilder.loadTexts: outletSection3OutletName.setDescription('Outlet or group name to control based on the section voltage and current measurement.')
outletSection4VoltageHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection4VoltageHighThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection4VoltageHighThreshold.setDescription('Upper threshold for section voltage measurement')
outletSection4VoltageLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection4VoltageLowThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection4VoltageLowThreshold.setDescription('Lower threshold for section voltage measurement')
outletSection4CurrentHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection4CurrentHighThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection4CurrentHighThreshold.setDescription('Upper threshold for section current measurement')
outletSection4CurrentLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection4CurrentLowThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection4CurrentLowThreshold.setDescription('Lower threshold for section current measurement')
outletSection4ControlOutlet = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection4ControlOutlet.setStatus('current')
if mibBuilder.loadTexts: outletSection4ControlOutlet.setDescription('Enabled setting to control an outlet or group based on the section voltage and current thresholds.')
outletSection4OutletName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 4, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection4OutletName.setStatus('current')
if mibBuilder.loadTexts: outletSection4OutletName.setDescription('Outlet or group name to control based on the section voltage and current measurement.')
outletSection5VoltageHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection5VoltageHighThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection5VoltageHighThreshold.setDescription('Upper threshold for section voltage measurement')
outletSection5VoltageLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection5VoltageLowThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection5VoltageLowThreshold.setDescription('Lower threshold for section voltage measurement')
outletSection5CurrentHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection5CurrentHighThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection5CurrentHighThreshold.setDescription('Upper threshold for section current measurement')
outletSection5CurrentLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection5CurrentLowThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection5CurrentLowThreshold.setDescription('Lower threshold for section current measurement')
outletSection5ControlOutlet = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection5ControlOutlet.setStatus('current')
if mibBuilder.loadTexts: outletSection5ControlOutlet.setDescription('Enabled setting to control an outlet or group based on the section voltage and current thresholds.')
outletSection5OutletName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 5, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection5OutletName.setStatus('current')
if mibBuilder.loadTexts: outletSection5OutletName.setDescription('Outlet or group name to control based on the section voltage and current measurement.')
outletSection6VoltageHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection6VoltageHighThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection6VoltageHighThreshold.setDescription('Upper threshold for section voltage measurement')
outletSection6VoltageLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection6VoltageLowThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection6VoltageLowThreshold.setDescription('Lower threshold for section voltage measurement')
outletSection6CurrentHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection6CurrentHighThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection6CurrentHighThreshold.setDescription('Upper threshold for section current measurement')
outletSection6CurrentLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection6CurrentLowThreshold.setStatus('current')
if mibBuilder.loadTexts: outletSection6CurrentLowThreshold.setDescription('Lower threshold for section current measurement')
outletSection6ControlOutlet = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection6ControlOutlet.setStatus('current')
if mibBuilder.loadTexts: outletSection6ControlOutlet.setDescription('Enabled setting to control an outlet or group based on the section voltage and current thresholds.')
outletSection6OutletName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 4, 6, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSection6OutletName.setStatus('current')
if mibBuilder.loadTexts: outletSection6OutletName.setDescription('Outlet or group name to control based on the section voltage and current measurement.')
tempSensor1Temp = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensor1Temp.setStatus('current')
if mibBuilder.loadTexts: tempSensor1Temp.setDescription('Temperature sensor measurement (units are indicated by the fahrenheitOrCelsius leaf under the unitConfig branch)')
tempSensor2Temp = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensor2Temp.setStatus('current')
if mibBuilder.loadTexts: tempSensor2Temp.setDescription('Temperature sensor measurement (units are indicated by the fahrenheitOrCelsius leaf under the unitConfig branch)')
humSensor1Humidity = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: humSensor1Humidity.setStatus('current')
if mibBuilder.loadTexts: humSensor1Humidity.setDescription('Humidity sensor measurement (percent relative humidity)')
contactClosure1State = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("contactOpen", 0), ("contactClosed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: contactClosure1State.setStatus('current')
if mibBuilder.loadTexts: contactClosure1State.setDescription('Contact sensor state')
contactClosure2State = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("contactOpen", 0), ("contactClosed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: contactClosure2State.setStatus('current')
if mibBuilder.loadTexts: contactClosure2State.setDescription('Contact sensor state')
contactClosure3State = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("contactOpen", 0), ("contactClosed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: contactClosure3State.setStatus('current')
if mibBuilder.loadTexts: contactClosure3State.setDescription('Contact sensor state')
outletSection1Voltage = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSection1Voltage.setStatus('current')
if mibBuilder.loadTexts: outletSection1Voltage.setDescription('Voltage measurement 1. This is either the section 1 voltage, the Line X-Y voltage, or the Phase X-N voltage, depending on the PDU hardware.')
outletSection1Current = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSection1Current.setStatus('current')
if mibBuilder.loadTexts: outletSection1Current.setDescription('Current measurement 1. This is either the section 1 current or the Phase X current, depending on the PDU hardware.')
outletSection1Va = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSection1Va.setStatus('current')
if mibBuilder.loadTexts: outletSection1Va.setDescription('Section 1 VA (or phase X VA, depending on the PDU hardware).')
outletSection2Voltage = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSection2Voltage.setStatus('current')
if mibBuilder.loadTexts: outletSection2Voltage.setDescription('Voltage measurement 2. This is either the section 2 voltage, the Line Y-Z voltage, or the Phase Y-N voltage, depending on the PDU hardware.')
outletSection2Current = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSection2Current.setStatus('current')
if mibBuilder.loadTexts: outletSection2Current.setDescription('Current measurement 2. This is either the section 2 current or the Phase Y current, depending on the PDU hardware.')
outletSection2Va = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSection2Va.setStatus('current')
if mibBuilder.loadTexts: outletSection2Va.setDescription('Section 2 VA (or phase Y VA, depending on the PDU hardware).')
outletSection3Voltage = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSection3Voltage.setStatus('current')
if mibBuilder.loadTexts: outletSection3Voltage.setDescription('Voltage measurement 3. This is either the section 3 voltage, the Line Z-X voltage, or the Phase Z-N voltage, depending on the PDU hardware.')
outletSection3Current = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSection3Current.setStatus('current')
if mibBuilder.loadTexts: outletSection3Current.setDescription('Current measurement 3. This is either the section 3 current or the Phase Z current, depending on the PDU hardware.')
outletSection3Va = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSection3Va.setStatus('current')
if mibBuilder.loadTexts: outletSection3Va.setDescription('Section 3 VA (or phase Z VA, depending on the PDU hardware).')
totalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalVoltage.setStatus('obsolete')
if mibBuilder.loadTexts: totalVoltage.setDescription('None')
totalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalCurrent.setStatus('current')
if mibBuilder.loadTexts: totalCurrent.setDescription('Sum of current for all outlet sections (or phases)')
totalVa = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalVa.setStatus('current')
if mibBuilder.loadTexts: totalVa.setDescription('Total PDU VA')
outletSection4Voltage = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSection4Voltage.setStatus('current')
if mibBuilder.loadTexts: outletSection4Voltage.setDescription('Voltage measurement 4 (section 4 voltage). This object will not be present if the PDU hardware measures Line-to-Line voltage or Phase voltage.')
outletSection4Current = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSection4Current.setStatus('current')
if mibBuilder.loadTexts: outletSection4Current.setDescription('Current measurement 4. This is the section 4 current.')
outletSection4Va = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSection4Va.setStatus('current')
if mibBuilder.loadTexts: outletSection4Va.setDescription('Section 4 VA')
outletSection5Voltage = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSection5Voltage.setStatus('current')
if mibBuilder.loadTexts: outletSection5Voltage.setDescription('Voltage measurement 5 (section 5 voltage). This object will not be present if the PDU hardware measures Line-to-Line voltage or Phase voltage.')
outletSection5Current = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSection5Current.setStatus('current')
if mibBuilder.loadTexts: outletSection5Current.setDescription('Current measurement 5. This is the section 5 current.')
outletSection5Va = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSection5Va.setStatus('current')
if mibBuilder.loadTexts: outletSection5Va.setDescription('Section 5 VA')
outletSection6Voltage = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSection6Voltage.setStatus('current')
if mibBuilder.loadTexts: outletSection6Voltage.setDescription('Voltage measurement 6 (section 6 voltage). This object will not be present if the PDU hardware measures Line-to-Line voltage or Phase voltage.')
outletSection6Current = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSection6Current.setStatus('current')
if mibBuilder.loadTexts: outletSection6Current.setDescription('Current measurement 6. This is the section 6 current.')
outletSection6Va = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 8, 6, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSection6Va.setStatus('current')
if mibBuilder.loadTexts: outletSection6Va.setDescription('Section 6 VA')
notifyOutletState = NotificationType((1, 3, 6, 1, 4, 1, 20677, 2, 9, 1)).setObjects(("EATON-EPDU-PU-SW-MIB", "infoItemIdx"), ("EATON-EPDU-PU-SW-MIB", "infoItemName"), ("EATON-EPDU-PU-SW-MIB", "infoOutletState"))
if mibBuilder.loadTexts: notifyOutletState.setStatus('current')
if mibBuilder.loadTexts: notifyOutletState.setDescription('Outlet state has changed.')
notifyCurrentThreshold = NotificationType((1, 3, 6, 1, 4, 1, 20677, 2, 9, 2)).setObjects(("EATON-EPDU-PU-SW-MIB", "infoItemIdx"), ("EATON-EPDU-PU-SW-MIB", "infoItemName"), ("EATON-EPDU-PU-SW-MIB", "infoThresholdState"), ("EATON-EPDU-PU-SW-MIB", "infoThresholdValue"), ("EATON-EPDU-PU-SW-MIB", "infoMeasuredValue"))
if mibBuilder.loadTexts: notifyCurrentThreshold.setStatus('current')
if mibBuilder.loadTexts: notifyCurrentThreshold.setDescription('Current measurement has exceeded a threshold or returned from crossing a threshold.')
notifyVoltageThreshold = NotificationType((1, 3, 6, 1, 4, 1, 20677, 2, 9, 3)).setObjects(("EATON-EPDU-PU-SW-MIB", "infoItemIdx"), ("EATON-EPDU-PU-SW-MIB", "infoItemName"), ("EATON-EPDU-PU-SW-MIB", "infoThresholdState"), ("EATON-EPDU-PU-SW-MIB", "infoThresholdValue"), ("EATON-EPDU-PU-SW-MIB", "infoMeasuredValue"))
if mibBuilder.loadTexts: notifyVoltageThreshold.setStatus('current')
if mibBuilder.loadTexts: notifyVoltageThreshold.setDescription('Voltage measurement has exceeded a threshold or returned from crossing a threshold.')
notifyTempSensorThreshold = NotificationType((1, 3, 6, 1, 4, 1, 20677, 2, 9, 4)).setObjects(("EATON-EPDU-PU-SW-MIB", "infoItemIdx"), ("EATON-EPDU-PU-SW-MIB", "infoItemName"), ("EATON-EPDU-PU-SW-MIB", "infoThresholdState"), ("EATON-EPDU-PU-SW-MIB", "infoThresholdValue"), ("EATON-EPDU-PU-SW-MIB", "infoMeasuredValue"), ("EATON-EPDU-PU-SW-MIB", "fahrenheitOrCelsius"))
if mibBuilder.loadTexts: notifyTempSensorThreshold.setStatus('current')
if mibBuilder.loadTexts: notifyTempSensorThreshold.setDescription('Temperature measurement has exceeded a threshold or returned from crossing a threshold.')
notifyHumidSensorThreshold = NotificationType((1, 3, 6, 1, 4, 1, 20677, 2, 9, 5)).setObjects(("EATON-EPDU-PU-SW-MIB", "infoItemIdx"), ("EATON-EPDU-PU-SW-MIB", "infoItemName"), ("EATON-EPDU-PU-SW-MIB", "infoThresholdState"), ("EATON-EPDU-PU-SW-MIB", "infoThresholdValue"), ("EATON-EPDU-PU-SW-MIB", "infoMeasuredValue"))
if mibBuilder.loadTexts: notifyHumidSensorThreshold.setStatus('current')
if mibBuilder.loadTexts: notifyHumidSensorThreshold.setDescription('Humidity measurement has exceeded a threshold or returned from crossing a threshold.')
notifyContactSensorThreshold = NotificationType((1, 3, 6, 1, 4, 1, 20677, 2, 9, 6)).setObjects(("EATON-EPDU-PU-SW-MIB", "infoItemIdx"), ("EATON-EPDU-PU-SW-MIB", "infoItemName"), ("EATON-EPDU-PU-SW-MIB", "infoContactState"))
if mibBuilder.loadTexts: notifyContactSensorThreshold.setStatus('current')
if mibBuilder.loadTexts: notifyContactSensorThreshold.setDescription('Contact sensor has changed state.')
notifyUserLogin = NotificationType((1, 3, 6, 1, 4, 1, 20677, 2, 9, 7)).setObjects(("EATON-EPDU-PU-SW-MIB", "infoUserName"))
if mibBuilder.loadTexts: notifyUserLogin.setStatus('current')
if mibBuilder.loadTexts: notifyUserLogin.setDescription('A user has logged in.')
notifyUserLogout = NotificationType((1, 3, 6, 1, 4, 1, 20677, 2, 9, 8)).setObjects(("EATON-EPDU-PU-SW-MIB", "infoUserName"))
if mibBuilder.loadTexts: notifyUserLogout.setStatus('current')
if mibBuilder.loadTexts: notifyUserLogout.setDescription('A user has logged out.')
notifyFailedLogin = NotificationType((1, 3, 6, 1, 4, 1, 20677, 2, 9, 9)).setObjects(("EATON-EPDU-PU-SW-MIB", "infoUserName"))
if mibBuilder.loadTexts: notifyFailedLogin.setStatus('current')
if mibBuilder.loadTexts: notifyFailedLogin.setDescription('A login failure occurred.')
notifyOutletWatchdogFailed = NotificationType((1, 3, 6, 1, 4, 1, 20677, 2, 9, 10)).setObjects(("EATON-EPDU-PU-SW-MIB", "infoItemIdx"), ("EATON-EPDU-PU-SW-MIB", "infoItemName"))
if mibBuilder.loadTexts: notifyOutletWatchdogFailed.setStatus('current')
if mibBuilder.loadTexts: notifyOutletWatchdogFailed.setDescription('An outlet watchdog has failed and the corresponding outlet is being rebooted.')
infoItemIdx = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 10, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: infoItemIdx.setStatus('current')
if mibBuilder.loadTexts: infoItemIdx.setDescription('Numerical index of the item that caused the notification. For example, if the notification was related to the state of outlet 5, this value will be 5 no matter what the customized outlet name is. Similarly, if the notification was related to a voltage threshold being exceeded for voltage measurement 2, this value will be 2.')
infoItemName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 10, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: infoItemName.setStatus('current')
if mibBuilder.loadTexts: infoItemName.setDescription('Textual name of the item that caused the notification. For example, if an outlet state change caused the notification, this will be the customized name of the outlet. If a voltage threshold caused the notification, this will be the fixed name of the voltage measurement (e.g., Line X-Y).')
infoOutletState = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: infoOutletState.setStatus('current')
if mibBuilder.loadTexts: infoOutletState.setDescription('The new state of an outlet.')
infoThresholdState = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("good", 0), ("lowWarning", 1), ("highWarning", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: infoThresholdState.setStatus('current')
if mibBuilder.loadTexts: infoThresholdState.setDescription('The new state of a measurement that has upper and lower thresholds.')
infoThresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 300))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: infoThresholdValue.setStatus('current')
if mibBuilder.loadTexts: infoThresholdValue.setDescription('The threshold which has been crossed.')
infoMeasuredValue = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 300))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: infoMeasuredValue.setStatus('current')
if mibBuilder.loadTexts: infoMeasuredValue.setDescription('The actual measured value.')
infoContactState = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("contactOpen", 0), ("contactClosed", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: infoContactState.setStatus('current')
if mibBuilder.loadTexts: infoContactState.setDescription('The new state of a contact switch sensor.')
infoUserName = MibScalar((1, 3, 6, 1, 4, 1, 20677, 2, 10, 8), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: infoUserName.setStatus('current')
if mibBuilder.loadTexts: infoUserName.setDescription('Login name of a user.')
compliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 20677, 2, 25, 1)).setObjects(("EATON-EPDU-PU-SW-MIB", "allObjects"), ("EATON-EPDU-PU-SW-MIB", "allNotifications"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compliances = compliances.setStatus('current')
if mibBuilder.loadTexts: compliances.setDescription('The requirements for conforming to the Switched ePDU MIB.')
oldCompliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 20677, 2, 25, 2)).setObjects(("EATON-EPDU-PU-SW-MIB", "oldObjects"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oldCompliances = oldCompliances.setStatus('deprecated')
if mibBuilder.loadTexts: oldCompliances.setDescription('Deprecated requirements for conforming to the Switched ePDU MIB.')
obsoleteCompliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 20677, 2, 25, 3)).setObjects(("EATON-EPDU-PU-SW-MIB", "obsoleteObjects"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    obsoleteCompliances = obsoleteCompliances.setStatus('obsolete')
if mibBuilder.loadTexts: obsoleteCompliances.setDescription('Obsoleted requirements for conforming to the Switched ePDU MIB.')
allObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 20677, 2, 25, 5, 1))
for _allObjects_obj in [[("EATON-EPDU-PU-SW-MIB", "baudRate"), ("EATON-EPDU-PU-SW-MIB", "contactClosure1Alert"), ("EATON-EPDU-PU-SW-MIB", "contactClosure1ControlOutlet"), ("EATON-EPDU-PU-SW-MIB", "contactClosure1Enable"), ("EATON-EPDU-PU-SW-MIB", "contactClosure1Name"), ("EATON-EPDU-PU-SW-MIB", "contactClosure1OutletName"), ("EATON-EPDU-PU-SW-MIB", "contactClosure1OutletState"), ("EATON-EPDU-PU-SW-MIB", "contactClosure1State"), ("EATON-EPDU-PU-SW-MIB", "contactClosure2Alert"), ("EATON-EPDU-PU-SW-MIB", "contactClosure2ControlOutlet"), ("EATON-EPDU-PU-SW-MIB", "contactClosure2Enable"), ("EATON-EPDU-PU-SW-MIB", "contactClosure2Name"), ("EATON-EPDU-PU-SW-MIB", "contactClosure2OutletName"), ("EATON-EPDU-PU-SW-MIB", "contactClosure2OutletState"), ("EATON-EPDU-PU-SW-MIB", "contactClosure2State"), ("EATON-EPDU-PU-SW-MIB", "contactClosure3Alert"), ("EATON-EPDU-PU-SW-MIB", "contactClosure3ControlOutlet"), ("EATON-EPDU-PU-SW-MIB", "contactClosure3Enable"), ("EATON-EPDU-PU-SW-MIB", "contactClosure3Name"), ("EATON-EPDU-PU-SW-MIB", "contactClosure3OutletName"), ("EATON-EPDU-PU-SW-MIB", "contactClosure3OutletState"), ("EATON-EPDU-PU-SW-MIB", "contactClosure3State"), ("EATON-EPDU-PU-SW-MIB", "defaultGateway"), ("EATON-EPDU-PU-SW-MIB", "enablePing"), ("EATON-EPDU-PU-SW-MIB", "fahrenheitOrCelsius"), ("EATON-EPDU-PU-SW-MIB", "globalCommand"), ("EATON-EPDU-PU-SW-MIB", "humSensor1Alert"), ("EATON-EPDU-PU-SW-MIB", "humSensor1ControlOutlet"), ("EATON-EPDU-PU-SW-MIB", "humSensor1Enable"), ("EATON-EPDU-PU-SW-MIB", "humSensor1HighThresh"), ("EATON-EPDU-PU-SW-MIB", "humSensor1Humidity"), ("EATON-EPDU-PU-SW-MIB", "humSensor1LowThresh"), ("EATON-EPDU-PU-SW-MIB", "humSensor1Name"), ("EATON-EPDU-PU-SW-MIB", "humSensor1OutletName"), ("EATON-EPDU-PU-SW-MIB", "humSensor1OutletState"), ("EATON-EPDU-PU-SW-MIB", "infoContactState"), ("EATON-EPDU-PU-SW-MIB", "infoItemIdx"), ("EATON-EPDU-PU-SW-MIB", "infoItemName"), ("EATON-EPDU-PU-SW-MIB", "infoMeasuredValue"), ("EATON-EPDU-PU-SW-MIB", "infoOutletState"), ("EATON-EPDU-PU-SW-MIB", "infoThresholdState"), ("EATON-EPDU-PU-SW-MIB", "infoThresholdValue"), ("EATON-EPDU-PU-SW-MIB", "infoUserName"), ("EATON-EPDU-PU-SW-MIB", "invertDisplay"), ("EATON-EPDU-PU-SW-MIB", "loginTimeout"), ("EATON-EPDU-PU-SW-MIB", "macAddress"), ("EATON-EPDU-PU-SW-MIB", "mailServerIPAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet10Command"), ("EATON-EPDU-PU-SW-MIB", "outlet10Link"), ("EATON-EPDU-PU-SW-MIB", "outlet10Name"), ("EATON-EPDU-PU-SW-MIB", "outlet10PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet10RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet10SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet10Status"), ("EATON-EPDU-PU-SW-MIB", "outlet11Command"), ("EATON-EPDU-PU-SW-MIB", "outlet11Link"), ("EATON-EPDU-PU-SW-MIB", "outlet11Name"), ("EATON-EPDU-PU-SW-MIB", "outlet11PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet11RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet11SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet11Status"), ("EATON-EPDU-PU-SW-MIB", "outlet12Command"), ("EATON-EPDU-PU-SW-MIB", "outlet12Link"), ("EATON-EPDU-PU-SW-MIB", "outlet12Name"), ("EATON-EPDU-PU-SW-MIB", "outlet12PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet12RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet12SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet12Status"), ("EATON-EPDU-PU-SW-MIB", "outlet13Command"), ("EATON-EPDU-PU-SW-MIB", "outlet13Link"), ("EATON-EPDU-PU-SW-MIB", "outlet13Name"), ("EATON-EPDU-PU-SW-MIB", "outlet13PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet13RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet13SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet13Status"), ("EATON-EPDU-PU-SW-MIB", "outlet14Command"), ("EATON-EPDU-PU-SW-MIB", "outlet14Link"), ("EATON-EPDU-PU-SW-MIB", "outlet14Name"), ("EATON-EPDU-PU-SW-MIB", "outlet14PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet14RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet14SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet14Status"), ("EATON-EPDU-PU-SW-MIB", "outlet15Command"), ("EATON-EPDU-PU-SW-MIB", "outlet15Link"), ("EATON-EPDU-PU-SW-MIB", "outlet15Name"), ("EATON-EPDU-PU-SW-MIB", "outlet15PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet15RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet15SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet15Status"), ("EATON-EPDU-PU-SW-MIB", "outlet16Command"), ("EATON-EPDU-PU-SW-MIB", "outlet16Link"), ("EATON-EPDU-PU-SW-MIB", "outlet16Name"), ("EATON-EPDU-PU-SW-MIB", "outlet16PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet16RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet16SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet16Status"), ("EATON-EPDU-PU-SW-MIB", "outlet17Command"), ("EATON-EPDU-PU-SW-MIB", "outlet17Link"), ("EATON-EPDU-PU-SW-MIB", "outlet17Name"), ("EATON-EPDU-PU-SW-MIB", "outlet17PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet17RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet17SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet17Status"), ("EATON-EPDU-PU-SW-MIB", "outlet18Command"), ("EATON-EPDU-PU-SW-MIB", "outlet18Link"), ("EATON-EPDU-PU-SW-MIB", "outlet18Name"), ("EATON-EPDU-PU-SW-MIB", "outlet18PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet18RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet18SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet18Status"), ("EATON-EPDU-PU-SW-MIB", "outlet19Command"), ("EATON-EPDU-PU-SW-MIB", "outlet19Link"), ("EATON-EPDU-PU-SW-MIB", "outlet19Name"), ("EATON-EPDU-PU-SW-MIB", "outlet19PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet19RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet19SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet19Status"), ("EATON-EPDU-PU-SW-MIB", "outlet1Command"), ("EATON-EPDU-PU-SW-MIB", "outlet1Link"), ("EATON-EPDU-PU-SW-MIB", "outlet1Name"), ("EATON-EPDU-PU-SW-MIB", "outlet1PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet1RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet1SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet1Status"), ("EATON-EPDU-PU-SW-MIB", "outlet20Command"), ("EATON-EPDU-PU-SW-MIB", "outlet20Link"), ("EATON-EPDU-PU-SW-MIB", "outlet20Name"), ("EATON-EPDU-PU-SW-MIB", "outlet20PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet20RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet20SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet20Status"), ("EATON-EPDU-PU-SW-MIB", "outlet21Command"), ("EATON-EPDU-PU-SW-MIB", "outlet21Link"), ("EATON-EPDU-PU-SW-MIB", "outlet21Name"), ("EATON-EPDU-PU-SW-MIB", "outlet21PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet21RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet21SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet21Status"), ("EATON-EPDU-PU-SW-MIB", "outlet22Command"), ("EATON-EPDU-PU-SW-MIB", "outlet22Link"), ("EATON-EPDU-PU-SW-MIB", "outlet22Name"), ("EATON-EPDU-PU-SW-MIB", "outlet22PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet22RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet22SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet22Status"), ("EATON-EPDU-PU-SW-MIB", "outlet23Command"), ("EATON-EPDU-PU-SW-MIB", "outlet23Link"), ("EATON-EPDU-PU-SW-MIB", "outlet23Name"), ("EATON-EPDU-PU-SW-MIB", "outlet23PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet23RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet23SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet23Status"), ("EATON-EPDU-PU-SW-MIB", "outlet24Command"), ("EATON-EPDU-PU-SW-MIB", "outlet24Link"), ("EATON-EPDU-PU-SW-MIB", "outlet24Name"), ("EATON-EPDU-PU-SW-MIB", "outlet24PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet24RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet24SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet24Status"), ("EATON-EPDU-PU-SW-MIB", "outlet25Command"), ("EATON-EPDU-PU-SW-MIB", "outlet25Link"), ("EATON-EPDU-PU-SW-MIB", "outlet25Name"), ("EATON-EPDU-PU-SW-MIB", "outlet25PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet25RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet25SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet25Status"), ("EATON-EPDU-PU-SW-MIB", "outlet26Command"), ("EATON-EPDU-PU-SW-MIB", "outlet26Link"), ("EATON-EPDU-PU-SW-MIB", "outlet26Name"), ("EATON-EPDU-PU-SW-MIB", "outlet26PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet26RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet26SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet26Status"), ("EATON-EPDU-PU-SW-MIB", "outlet27Command"), ("EATON-EPDU-PU-SW-MIB", "outlet27Link"), ("EATON-EPDU-PU-SW-MIB", "outlet27Name"), ("EATON-EPDU-PU-SW-MIB", "outlet27PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet27RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet27SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet27Status"), ("EATON-EPDU-PU-SW-MIB", "outlet28Command"), ("EATON-EPDU-PU-SW-MIB", "outlet28Link"), ("EATON-EPDU-PU-SW-MIB", "outlet28Name"), ("EATON-EPDU-PU-SW-MIB", "outlet28PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet28RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet28SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet28Status"), ("EATON-EPDU-PU-SW-MIB", "outlet29Command"), ("EATON-EPDU-PU-SW-MIB", "outlet29Link"), ("EATON-EPDU-PU-SW-MIB", "outlet29Name"), ("EATON-EPDU-PU-SW-MIB", "outlet29PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet29RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet29SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet29Status"), ("EATON-EPDU-PU-SW-MIB", "outlet2Command"), ("EATON-EPDU-PU-SW-MIB", "outlet2Link"), ("EATON-EPDU-PU-SW-MIB", "outlet2Name"), ("EATON-EPDU-PU-SW-MIB", "outlet2PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet2RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet2SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet2Status"), ("EATON-EPDU-PU-SW-MIB", "outlet30Command"), ("EATON-EPDU-PU-SW-MIB", "outlet30Link"), ("EATON-EPDU-PU-SW-MIB", "outlet30Name"), ("EATON-EPDU-PU-SW-MIB", "outlet30PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet30RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet30SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet30Status"), ("EATON-EPDU-PU-SW-MIB", "outlet31Command"), ("EATON-EPDU-PU-SW-MIB", "outlet31Link"), ("EATON-EPDU-PU-SW-MIB", "outlet31Name"), ("EATON-EPDU-PU-SW-MIB", "outlet31PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet31RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet31SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet31Status"), ("EATON-EPDU-PU-SW-MIB", "outlet32Command"), ("EATON-EPDU-PU-SW-MIB", "outlet32Link"), ("EATON-EPDU-PU-SW-MIB", "outlet32Name"), ("EATON-EPDU-PU-SW-MIB", "outlet32PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet32RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet32SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet32Status"), ("EATON-EPDU-PU-SW-MIB", "outlet33Command"), ("EATON-EPDU-PU-SW-MIB", "outlet33Link"), ("EATON-EPDU-PU-SW-MIB", "outlet33Name"), ("EATON-EPDU-PU-SW-MIB", "outlet33PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet33RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet33SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet33Status"), ("EATON-EPDU-PU-SW-MIB", "outlet34Command"), ("EATON-EPDU-PU-SW-MIB", "outlet34Link"), ("EATON-EPDU-PU-SW-MIB", "outlet34Name"), ("EATON-EPDU-PU-SW-MIB", "outlet34PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet34RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet34SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet34Status"), ("EATON-EPDU-PU-SW-MIB", "outlet35Command"), ("EATON-EPDU-PU-SW-MIB", "outlet35Link"), ("EATON-EPDU-PU-SW-MIB", "outlet35Name"), ("EATON-EPDU-PU-SW-MIB", "outlet35PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet35RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet35SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet35Status"), ("EATON-EPDU-PU-SW-MIB", "outlet36Command"), ("EATON-EPDU-PU-SW-MIB", "outlet36Link"), ("EATON-EPDU-PU-SW-MIB", "outlet36Name"), ("EATON-EPDU-PU-SW-MIB", "outlet36PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet36RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet36SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet36Status"), ("EATON-EPDU-PU-SW-MIB", "outlet3Command"), ("EATON-EPDU-PU-SW-MIB", "outlet3Link"), ("EATON-EPDU-PU-SW-MIB", "outlet3Name"), ("EATON-EPDU-PU-SW-MIB", "outlet3PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet3RebootTime")], [("EATON-EPDU-PU-SW-MIB", "outlet3SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet3Status"), ("EATON-EPDU-PU-SW-MIB", "outlet4Command"), ("EATON-EPDU-PU-SW-MIB", "outlet4Link"), ("EATON-EPDU-PU-SW-MIB", "outlet4Name"), ("EATON-EPDU-PU-SW-MIB", "outlet4PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet4RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet4SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet4Status"), ("EATON-EPDU-PU-SW-MIB", "outlet5Command"), ("EATON-EPDU-PU-SW-MIB", "outlet5Link"), ("EATON-EPDU-PU-SW-MIB", "outlet5Name"), ("EATON-EPDU-PU-SW-MIB", "outlet5PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet5RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet5SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet5Status"), ("EATON-EPDU-PU-SW-MIB", "outlet6Command"), ("EATON-EPDU-PU-SW-MIB", "outlet6Link"), ("EATON-EPDU-PU-SW-MIB", "outlet6Name"), ("EATON-EPDU-PU-SW-MIB", "outlet6PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet6RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet6SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet6Status"), ("EATON-EPDU-PU-SW-MIB", "outlet7Command"), ("EATON-EPDU-PU-SW-MIB", "outlet7Link"), ("EATON-EPDU-PU-SW-MIB", "outlet7Name"), ("EATON-EPDU-PU-SW-MIB", "outlet7PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet7RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet7SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet7Status"), ("EATON-EPDU-PU-SW-MIB", "outlet8Command"), ("EATON-EPDU-PU-SW-MIB", "outlet8Link"), ("EATON-EPDU-PU-SW-MIB", "outlet8Name"), ("EATON-EPDU-PU-SW-MIB", "outlet8PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet8RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet8SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet8Status"), ("EATON-EPDU-PU-SW-MIB", "outlet9Command"), ("EATON-EPDU-PU-SW-MIB", "outlet9Link"), ("EATON-EPDU-PU-SW-MIB", "outlet9Name"), ("EATON-EPDU-PU-SW-MIB", "outlet9PingIpAddress"), ("EATON-EPDU-PU-SW-MIB", "outlet9RebootTime"), ("EATON-EPDU-PU-SW-MIB", "outlet9SequenceTime"), ("EATON-EPDU-PU-SW-MIB", "outlet9Status"), ("EATON-EPDU-PU-SW-MIB", "outletActivity"), ("EATON-EPDU-PU-SW-MIB", "outletSection1Alert"), ("EATON-EPDU-PU-SW-MIB", "outletSection1Current"), ("EATON-EPDU-PU-SW-MIB", "outletSection1CurrentHighThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection1CurrentLowThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection1Va"), ("EATON-EPDU-PU-SW-MIB", "outletSection1Voltage"), ("EATON-EPDU-PU-SW-MIB", "outletSection1VoltageHighThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection1VoltageLowThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection2Alert"), ("EATON-EPDU-PU-SW-MIB", "outletSection2Current"), ("EATON-EPDU-PU-SW-MIB", "outletSection2CurrentHighThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection2CurrentLowThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection2Va"), ("EATON-EPDU-PU-SW-MIB", "outletSection2Voltage"), ("EATON-EPDU-PU-SW-MIB", "outletSection2VoltageHighThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection2VoltageLowThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection3Alert"), ("EATON-EPDU-PU-SW-MIB", "outletSection3Current"), ("EATON-EPDU-PU-SW-MIB", "outletSection3CurrentHighThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection3CurrentLowThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection3Va"), ("EATON-EPDU-PU-SW-MIB", "outletSection3Voltage"), ("EATON-EPDU-PU-SW-MIB", "outletSection3VoltageHighThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection3VoltageLowThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection4Current"), ("EATON-EPDU-PU-SW-MIB", "outletSection4CurrentHighThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection4CurrentLowThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection4Va"), ("EATON-EPDU-PU-SW-MIB", "outletSection4Voltage"), ("EATON-EPDU-PU-SW-MIB", "outletSection4VoltageHighThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection4VoltageLowThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection5Current"), ("EATON-EPDU-PU-SW-MIB", "outletSection5CurrentHighThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection5CurrentLowThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection5Va"), ("EATON-EPDU-PU-SW-MIB", "outletSection5Voltage"), ("EATON-EPDU-PU-SW-MIB", "outletSection5VoltageHighThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection5VoltageLowThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection6Current"), ("EATON-EPDU-PU-SW-MIB", "outletSection6CurrentHighThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection6CurrentLowThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection6Va"), ("EATON-EPDU-PU-SW-MIB", "outletSection6Voltage"), ("EATON-EPDU-PU-SW-MIB", "outletSection6VoltageHighThreshold"), ("EATON-EPDU-PU-SW-MIB", "outletSection6VoltageLowThreshold"), ("EATON-EPDU-PU-SW-MIB", "pingInterval"), ("EATON-EPDU-PU-SW-MIB", "sendAlertsToUser1Address"), ("EATON-EPDU-PU-SW-MIB", "sendAlertsToUser2Address"), ("EATON-EPDU-PU-SW-MIB", "sendLogFrequency"), ("EATON-EPDU-PU-SW-MIB", "sendLogFrom"), ("EATON-EPDU-PU-SW-MIB", "sendLogTime"), ("EATON-EPDU-PU-SW-MIB", "sendLogToUser1Address"), ("EATON-EPDU-PU-SW-MIB", "sendLogToUser2Address"), ("EATON-EPDU-PU-SW-MIB", "strappingId"), ("EATON-EPDU-PU-SW-MIB", "subnetMask"), ("EATON-EPDU-PU-SW-MIB", "systemOnOff"), ("EATON-EPDU-PU-SW-MIB", "telnetEnabled"), ("EATON-EPDU-PU-SW-MIB", "telnetPort"), ("EATON-EPDU-PU-SW-MIB", "tempSensor1Alert"), ("EATON-EPDU-PU-SW-MIB", "tempSensor1ControlOutlet"), ("EATON-EPDU-PU-SW-MIB", "tempSensor1Enable"), ("EATON-EPDU-PU-SW-MIB", "tempSensor1HighThresh"), ("EATON-EPDU-PU-SW-MIB", "tempSensor1LowThresh"), ("EATON-EPDU-PU-SW-MIB", "tempSensor1Name"), ("EATON-EPDU-PU-SW-MIB", "tempSensor1OutletName"), ("EATON-EPDU-PU-SW-MIB", "tempSensor1OutletState"), ("EATON-EPDU-PU-SW-MIB", "tempSensor1Temp"), ("EATON-EPDU-PU-SW-MIB", "tempSensor2Alert"), ("EATON-EPDU-PU-SW-MIB", "tempSensor2ControlOutlet"), ("EATON-EPDU-PU-SW-MIB", "tempSensor2Enable"), ("EATON-EPDU-PU-SW-MIB", "tempSensor2HighThresh"), ("EATON-EPDU-PU-SW-MIB", "tempSensor2LowThresh"), ("EATON-EPDU-PU-SW-MIB", "tempSensor2Name"), ("EATON-EPDU-PU-SW-MIB", "tempSensor2OutletName"), ("EATON-EPDU-PU-SW-MIB", "tempSensor2OutletState"), ("EATON-EPDU-PU-SW-MIB", "tempSensor2Temp"), ("EATON-EPDU-PU-SW-MIB", "totalCurrent"), ("EATON-EPDU-PU-SW-MIB", "totalVa"), ("EATON-EPDU-PU-SW-MIB", "trapContactClosure1Threshold"), ("EATON-EPDU-PU-SW-MIB", "trapContactClosure2Threshold"), ("EATON-EPDU-PU-SW-MIB", "trapContactClosure3Threshold"), ("EATON-EPDU-PU-SW-MIB", "trapFailedLogin"), ("EATON-EPDU-PU-SW-MIB", "trapHumiditySensorThreshold"), ("EATON-EPDU-PU-SW-MIB", "trapIpAddress"), ("EATON-EPDU-PU-SW-MIB", "trapOutletActivity"), ("EATON-EPDU-PU-SW-MIB", "trapOutletSection1Threshold"), ("EATON-EPDU-PU-SW-MIB", "trapOutletSection2Threshold"), ("EATON-EPDU-PU-SW-MIB", "trapOutletSection3Threshold"), ("EATON-EPDU-PU-SW-MIB", "trapSystemOnOff"), ("EATON-EPDU-PU-SW-MIB", "trapTemperatureSensor1Threshold"), ("EATON-EPDU-PU-SW-MIB", "trapTemperatureSensor2Threshold"), ("EATON-EPDU-PU-SW-MIB", "trapUserLoginLogout"), ("EATON-EPDU-PU-SW-MIB", "unitDate"), ("EATON-EPDU-PU-SW-MIB", "unitDayOfWeek"), ("EATON-EPDU-PU-SW-MIB", "unitIPAddress"), ("EATON-EPDU-PU-SW-MIB", "unitName"), ("EATON-EPDU-PU-SW-MIB", "unitTime"), ("EATON-EPDU-PU-SW-MIB", "userLogInLogOut"), ("EATON-EPDU-PU-SW-MIB", "userLogInLogOutFailed"), ("EATON-EPDU-PU-SW-MIB", "vaLoggingInterval"), ("EATON-EPDU-PU-SW-MIB", "webEnabled"), ("EATON-EPDU-PU-SW-MIB", "webPort")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        allObjects = allObjects.setObjects(*_allObjects_obj)
    else:
        allObjects = allObjects.setObjects(*_allObjects_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    allObjects = allObjects.setStatus('current')
if mibBuilder.loadTexts: allObjects.setDescription('The object group.')
oldObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 20677, 2, 25, 5, 2)).setObjects(("EATON-EPDU-PU-SW-MIB", "outletSection1ControlOutlet"), ("EATON-EPDU-PU-SW-MIB", "outletSection1OutletName"), ("EATON-EPDU-PU-SW-MIB", "outletSection2ControlOutlet"), ("EATON-EPDU-PU-SW-MIB", "outletSection2OutletName"), ("EATON-EPDU-PU-SW-MIB", "outletSection3ControlOutlet"), ("EATON-EPDU-PU-SW-MIB", "outletSection3OutletName"), ("EATON-EPDU-PU-SW-MIB", "outletSection4ControlOutlet"), ("EATON-EPDU-PU-SW-MIB", "outletSection4OutletName"), ("EATON-EPDU-PU-SW-MIB", "outletSection5ControlOutlet"), ("EATON-EPDU-PU-SW-MIB", "outletSection5OutletName"), ("EATON-EPDU-PU-SW-MIB", "outletSection6ControlOutlet"), ("EATON-EPDU-PU-SW-MIB", "outletSection6OutletName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oldObjects = oldObjects.setStatus('deprecated')
if mibBuilder.loadTexts: oldObjects.setDescription('The deprecated objects group.')
obsoleteObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 20677, 2, 25, 5, 3)).setObjects(("EATON-EPDU-PU-SW-MIB", "totalVoltage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    obsoleteObjects = obsoleteObjects.setStatus('obsolete')
if mibBuilder.loadTexts: obsoleteObjects.setDescription('The obsoleted objects group.')
allNotifications = NotificationGroup((1, 3, 6, 1, 4, 1, 20677, 2, 25, 5, 4)).setObjects(("EATON-EPDU-PU-SW-MIB", "notifyContactSensorThreshold"), ("EATON-EPDU-PU-SW-MIB", "notifyCurrentThreshold"), ("EATON-EPDU-PU-SW-MIB", "notifyFailedLogin"), ("EATON-EPDU-PU-SW-MIB", "notifyHumidSensorThreshold"), ("EATON-EPDU-PU-SW-MIB", "notifyOutletState"), ("EATON-EPDU-PU-SW-MIB", "notifyOutletWatchdogFailed"), ("EATON-EPDU-PU-SW-MIB", "notifyTempSensorThreshold"), ("EATON-EPDU-PU-SW-MIB", "notifyUserLogin"), ("EATON-EPDU-PU-SW-MIB", "notifyUserLogout"), ("EATON-EPDU-PU-SW-MIB", "notifyVoltageThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    allNotifications = allNotifications.setStatus('current')
if mibBuilder.loadTexts: allNotifications.setDescription('The notifications group.')
mibBuilder.exportSymbols("EATON-EPDU-PU-SW-MIB", outlet35Command=outlet35Command, contactClosure2Alert=contactClosure2Alert, outletSection5CurrentLowThreshold=outletSection5CurrentLowThreshold, serialSettings=serialSettings, outlet24Command=outlet24Command, outlet36Name=outlet36Name, outletSection2Config=outletSection2Config, outlet22Status=outlet22Status, loginTimeout=loginTimeout, outlet12Status=outlet12Status, outlet1Link=outlet1Link, outlet16=outlet16, trapContactClosure1Threshold=trapContactClosure1Threshold, infoContactState=infoContactState, outlet16Name=outlet16Name, outlet25Link=outlet25Link, trapContactClosure3Threshold=trapContactClosure3Threshold, outlet32Status=outlet32Status, outlet5Command=outlet5Command, pingInterval=pingInterval, outlet33RebootTime=outlet33RebootTime, publicCommunityName=publicCommunityName, outlet27RebootTime=outlet27RebootTime, outletSection1Alert=outletSection1Alert, outlet2Name=outlet2Name, outlet19RebootTime=outlet19RebootTime, tempSensor2LowThresh=tempSensor2LowThresh, outlet25Status=outlet25Status, outlet35RebootTime=outlet35RebootTime, outlet16Command=outlet16Command, outlet2Status=outlet2Status, outlet18SequenceTime=outlet18SequenceTime, outlet3=outlet3, vaLoggingInterval=vaLoggingInterval, outlet24SequenceTime=outlet24SequenceTime, outletSection6Current=outletSection6Current, userLogInLogOut=userLogInLogOut, outlet18=outlet18, conformance=conformance, sendLogTime=sendLogTime, outlet4SequenceTime=outlet4SequenceTime, infoItemName=infoItemName, tempSensor2Enable=tempSensor2Enable, tempSensor1Alert=tempSensor1Alert, sendLogFrom=sendLogFrom, contactClosure1Enable=contactClosure1Enable, outlet36SequenceTime=outlet36SequenceTime, outlet21=outlet21, environmentalSettings=environmentalSettings, outlet29=outlet29, outlet11Name=outlet11Name, outletSection1OutletName=outletSection1OutletName, outlet13=outlet13, userLogInLogOutFailed=userLogInLogOutFailed, outlet36RebootTime=outlet36RebootTime, infoThresholdValue=infoThresholdValue, outlet7SequenceTime=outlet7SequenceTime, tempSensor1OutletState=tempSensor1OutletState, outletSection3VoltageHighThreshold=outletSection3VoltageHighThreshold, outlet7Link=outlet7Link, outlet30SequenceTime=outlet30SequenceTime, humSensor1OutletName=humSensor1OutletName, outletSection3CurrentHighThreshold=outletSection3CurrentHighThreshold, outlet34Status=outlet34Status, sendLogToUser1Address=sendLogToUser1Address, outlet8PingIpAddress=outlet8PingIpAddress, outlet17PingIpAddress=outlet17PingIpAddress, contactClosure1=contactClosure1, outlet27SequenceTime=outlet27SequenceTime, outletSection5Config=outletSection5Config, outlet30PingIpAddress=outlet30PingIpAddress, outlet30Status=outlet30Status, outlet15RebootTime=outlet15RebootTime, strappingId=strappingId, outlet32Link=outlet32Link, tempSensor2HighThresh=tempSensor2HighThresh, trapTemperatureSensor1Threshold=trapTemperatureSensor1Threshold, trapOutletSection3Threshold=trapOutletSection3Threshold, outlet20=outlet20, outlet27PingIpAddress=outlet27PingIpAddress, outlet3PingIpAddress=outlet3PingIpAddress, outletSection4Va=outletSection4Va, humSensor1Humidity=humSensor1Humidity, tempSensor1HighThresh=tempSensor1HighThresh, outlet8Name=outlet8Name, outlet10SequenceTime=outlet10SequenceTime, outlet17=outlet17, outlet14Link=outlet14Link, contactClosure2=contactClosure2, outlet1PingIpAddress=outlet1PingIpAddress, notifyUserLogin=notifyUserLogin, outlet15PingIpAddress=outlet15PingIpAddress, outlet6Command=outlet6Command, notifyContactSensorThreshold=notifyContactSensorThreshold, outlet32=outlet32, tempSensor2OutletState=tempSensor2OutletState, outlet13Name=outlet13Name, outlet7Status=outlet7Status, outlet35SequenceTime=outlet35SequenceTime, outlet11Command=outlet11Command, outlet5Name=outlet5Name, outlet25RebootTime=outlet25RebootTime, outlet16RebootTime=outlet16RebootTime, outletSection4ControlOutlet=outletSection4ControlOutlet, outlet19=outlet19, outlet9PingIpAddress=outlet9PingIpAddress, outletSection1Va=outletSection1Va, outletSection6Voltage=outletSection6Voltage, outlet4Link=outlet4Link, trapOutletActivity=trapOutletActivity, outlet17Command=outlet17Command, subnetMask=subnetMask, outlet20Link=outlet20Link, outlet35Name=outlet35Name, outlet31Status=outlet31Status, outlet13Command=outlet13Command, contactClosure1State=contactClosure1State, outlet6Name=outlet6Name, outlet24=outlet24, outlet10=outlet10, outlet32Command=outlet32Command, outlet25PingIpAddress=outlet25PingIpAddress, outlet30Link=outlet30Link, outlet13SequenceTime=outlet13SequenceTime, outletSection4VoltageHighThreshold=outletSection4VoltageHighThreshold, outlet28Link=outlet28Link, outletSection3VoltageLowThreshold=outletSection3VoltageLowThreshold, outlet1=outlet1, outlet28RebootTime=outlet28RebootTime, outlet21SequenceTime=outlet21SequenceTime, outlet2SequenceTime=outlet2SequenceTime, infoItemIdx=infoItemIdx, infoThresholdState=infoThresholdState, pulizzi=pulizzi, outlet7Command=outlet7Command, outlet9SequenceTime=outlet9SequenceTime, outletSection2VoltageHighThreshold=outletSection2VoltageHighThreshold, outletSection2CurrentHighThreshold=outletSection2CurrentHighThreshold, outlet9Status=outlet9Status, outlet15Command=outlet15Command, contactClosure2State=contactClosure2State, trapFailedLogin=trapFailedLogin, outlet14PingIpAddress=outlet14PingIpAddress, outlet32SequenceTime=outlet32SequenceTime, outlet13PingIpAddress=outlet13PingIpAddress, outlet4Name=outlet4Name, outlet31RebootTime=outlet31RebootTime, obsoleteCompliances=obsoleteCompliances, outlet25=outlet25, outlet36Status=outlet36Status, tempSensor2Name=tempSensor2Name, outlet36PingIpAddress=outlet36PingIpAddress, outletConfig=outletConfig, outlet25SequenceTime=outlet25SequenceTime, outlet13Status=outlet13Status, outlet36=outlet36, outletSection5Va=outletSection5Va, outlet33Name=outlet33Name, outlet10Command=outlet10Command, outletSection6VoltageHighThreshold=outletSection6VoltageHighThreshold, outlet5Status=outlet5Status, outlet14=outlet14, contactClosure3=contactClosure3, contactClosure2ControlOutlet=contactClosure2ControlOutlet, outletSection5Current=outletSection5Current, outletSection3Current=outletSection3Current, outlet22Name=outlet22Name, outlet14SequenceTime=outlet14SequenceTime, outlet5=outlet5, outlet24Name=outlet24Name, notifyUserLogout=notifyUserLogout, outletSection4Config=outletSection4Config, tempSensor2ControlOutlet=tempSensor2ControlOutlet, outlet7RebootTime=outlet7RebootTime, notifyCurrentThreshold=notifyCurrentThreshold, tempSensor2Alert=tempSensor2Alert, outletSection4=outletSection4, outlet18Name=outlet18Name, outletSection6OutletName=outletSection6OutletName, outlet23Status=outlet23Status, outlet31=outlet31, outletSection3Voltage=outletSection3Voltage, outlet24Status=outlet24Status, currentOutletSectionValues=currentOutletSectionValues, outlet27Command=outlet27Command, privateCommunityName=privateCommunityName, outlet36Link=outlet36Link, total=total, outlet21RebootTime=outlet21RebootTime, tempSensor1Name=tempSensor1Name, outletSection6Va=outletSection6Va, outletSection5OutletName=outletSection5OutletName, outlet7PingIpAddress=outlet7PingIpAddress, outlet1RebootTime=outlet1RebootTime, outlet9Name=outlet9Name, outlet23RebootTime=outlet23RebootTime, outlet29Name=outlet29Name, outlet11SequenceTime=outlet11SequenceTime, contactClosure1OutletState=contactClosure1OutletState, currentSensorValues=currentSensorValues, outlet8Command=outlet8Command, outlet14Status=outlet14Status, outletSection3=outletSection3, eventInfo=eventInfo, tempSensor1Temp=tempSensor1Temp, outlet20Status=outlet20Status, oldObjects=oldObjects, outlet19Command=outlet19Command, outletSection3OutletName=outletSection3OutletName, outlet1Status=outlet1Status, outlet26RebootTime=outlet26RebootTime, humSensor1=humSensor1, telnetSettings=telnetSettings, webEnabled=webEnabled, outletSection1CurrentLowThreshold=outletSection1CurrentLowThreshold, outletSection4CurrentLowThreshold=outletSection4CurrentLowThreshold, snmpEnabled=snmpEnabled, outlet9RebootTime=outlet9RebootTime, humSensor1Enable=humSensor1Enable, enablePing=enablePing, outlet21Link=outlet21Link, outlet31Command=outlet31Command, totalVa=totalVa, outletStatus=outletStatus, outlet11Link=outlet11Link, outletSection1ControlOutlet=outletSection1ControlOutlet, outlet12Link=outlet12Link, outletSection1VoltageHighThreshold=outletSection1VoltageHighThreshold, outlet11Status=outlet11Status, outlet6Link=outlet6Link, outlet17SequenceTime=outlet17SequenceTime, outlet4Status=outlet4Status, outlet10Link=outlet10Link, outletSection2CurrentLowThreshold=outletSection2CurrentLowThreshold, notifyOutletWatchdogFailed=notifyOutletWatchdogFailed, outlet22PingIpAddress=outlet22PingIpAddress, outlet13Link=outlet13Link, humSensor1LowThresh=humSensor1LowThresh, outlet4RebootTime=outlet4RebootTime, outlet23Link=outlet23Link, outlet26SequenceTime=outlet26SequenceTime, sendAlertsToUser1Address=sendAlertsToUser1Address, globalCommand=globalCommand, outlet6PingIpAddress=outlet6PingIpAddress, outlet31Link=outlet31Link, outlet12Command=outlet12Command, outlet24RebootTime=outlet24RebootTime, outlet19SequenceTime=outlet19SequenceTime, humiditySensorConfig=humiditySensorConfig, outlet29SequenceTime=outlet29SequenceTime, outletSection1Config=outletSection1Config, contactClosureConfig=contactClosureConfig, outlet6Status=outlet6Status, logManagerConfig=logManagerConfig)
mibBuilder.exportSymbols("EATON-EPDU-PU-SW-MIB", outlet33Status=outlet33Status, humSensor1Alert=humSensor1Alert, outlet32PingIpAddress=outlet32PingIpAddress, outlet26Command=outlet26Command, outlet35=outlet35, trapOutletSection2Threshold=trapOutletSection2Threshold, outlet21Name=outlet21Name, outletSection6CurrentLowThreshold=outletSection6CurrentLowThreshold, notifyFailedLogin=notifyFailedLogin, outlet2RebootTime=outlet2RebootTime, outlet16PingIpAddress=outlet16PingIpAddress, contactClosure3State=contactClosure3State, outletSection2Voltage=outletSection2Voltage, outlet12Name=outlet12Name, invertDisplay=invertDisplay, outletSection1=outletSection1, unitDate=unitDate, outlet14Name=outlet14Name, outlet6=outlet6, snmpSettings=snmpSettings, outletSection5ControlOutlet=outletSection5ControlOutlet, webPort=webPort, outlet22Link=outlet22Link, outlet33Link=outlet33Link, sendLogFrequency=sendLogFrequency, outlet3SequenceTime=outlet3SequenceTime, outletSection5VoltageHighThreshold=outletSection5VoltageHighThreshold, outlet3Name=outlet3Name, infoUserName=infoUserName, trapOutletSection1Threshold=trapOutletSection1Threshold, outlet26Name=outlet26Name, outlet23SequenceTime=outlet23SequenceTime, outlet29RebootTime=outlet29RebootTime, notifyOutletState=notifyOutletState, trapCommunityName=trapCommunityName, baudRate=baudRate, outlet18Status=outlet18Status, tempSensor2=tempSensor2, trapIpAddress=trapIpAddress, trapSystemOnOff=trapSystemOnOff, outletSection5VoltageLowThreshold=outletSection5VoltageLowThreshold, outletSection3CurrentLowThreshold=outletSection3CurrentLowThreshold, outlet23PingIpAddress=outlet23PingIpAddress, outlet29Status=outlet29Status, trapHumiditySensorThreshold=trapHumiditySensorThreshold, outlet12PingIpAddress=outlet12PingIpAddress, unitConfig=unitConfig, outletSection6=outletSection6, outlet13RebootTime=outlet13RebootTime, contactClosure2OutletName=contactClosure2OutletName, outlet10RebootTime=outlet10RebootTime, outlet22=outlet22, temperatureSensorConfig=temperatureSensorConfig, outlet7=outlet7, outletSection6ControlOutlet=outletSection6ControlOutlet, outletActivity=outletActivity, infoMeasuredValue=infoMeasuredValue, outlet1Name=outlet1Name, outlet31PingIpAddress=outlet31PingIpAddress, outletSection5Voltage=outletSection5Voltage, outlet33SequenceTime=outlet33SequenceTime, outlet18Link=outlet18Link, outlet18PingIpAddress=outlet18PingIpAddress, outlet23Command=outlet23Command, contactClosure3OutletState=contactClosure3OutletState, outletSection1Current=outletSection1Current, unitIPAddress=unitIPAddress, events=events, oldCompliances=oldCompliances, contactClosure3Enable=contactClosure3Enable, contactClosure1Alert=contactClosure1Alert, outlet27=outlet27, outlet23=outlet23, outlet11PingIpAddress=outlet11PingIpAddress, outlet27Status=outlet27Status, publicCommunityPassword=publicCommunityPassword, groups=groups, outletSection1VoltageLowThreshold=outletSection1VoltageLowThreshold, outlet2PingIpAddress=outlet2PingIpAddress, notifyHumidSensorThreshold=notifyHumidSensorThreshold, trapContactClosure2Threshold=trapContactClosure2Threshold, outlet28=outlet28, outlet36Command=outlet36Command, outlet30Command=outlet30Command, privateCommunityPassword=privateCommunityPassword, outlet5SequenceTime=outlet5SequenceTime, contactClosure2Name=contactClosure2Name, outletSection4Voltage=outletSection4Voltage, outlet12=outlet12, unitName=unitName, networkSettings=networkSettings, outlet26=outlet26, outlet32RebootTime=outlet32RebootTime, outlet4Command=outlet4Command, outlet14Command=outlet14Command, outlet1SequenceTime=outlet1SequenceTime, sendAlertsToUser2Address=sendAlertsToUser2Address, outlet29Link=outlet29Link, outlet10Status=outlet10Status, outlet34PingIpAddress=outlet34PingIpAddress, outlet10PingIpAddress=outlet10PingIpAddress, tempSensor2Temp=tempSensor2Temp, outlet34=outlet34, outlet7Name=outlet7Name, outlet34SequenceTime=outlet34SequenceTime, contactClosure3Name=contactClosure3Name, outlet34Command=outlet34Command, outlet5Link=outlet5Link, humSensor1OutletState=humSensor1OutletState, outlet11=outlet11, outlet12SequenceTime=outlet12SequenceTime, humSensor1Name=humSensor1Name, outlet5RebootTime=outlet5RebootTime, mailServerIPAddress=mailServerIPAddress, outlet22SequenceTime=outlet22SequenceTime, outletControl=outletControl, outlet28Status=outlet28Status, outlet35Link=outlet35Link, outlet20PingIpAddress=outlet20PingIpAddress, outlet8RebootTime=outlet8RebootTime, outlet35Status=outlet35Status, outletSection3Config=outletSection3Config, telnetPort=telnetPort, outlet23Name=outlet23Name, outlet31Name=outlet31Name, outlet21Command=outlet21Command, outlet8=outlet8, outlet32Name=outlet32Name, outletSectionConfig=outletSectionConfig, outlet27Name=outlet27Name, sendLogToUser2Address=sendLogToUser2Address, outletSection2Alert=outletSection2Alert, outlet3RebootTime=outlet3RebootTime, outlet34Link=outlet34Link, trapTemperatureSensor2Threshold=trapTemperatureSensor2Threshold, fahrenheitOrCelsius=fahrenheitOrCelsius, outlet28SequenceTime=outlet28SequenceTime, outlet29PingIpAddress=outlet29PingIpAddress, outlet26Link=outlet26Link, outletMngt=outletMngt, macAddress=macAddress, telnetEnabled=telnetEnabled, outletSection2Current=outletSection2Current, outletSection6CurrentHighThreshold=outletSection6CurrentHighThreshold, outlet33Command=outlet33Command, humSensor1ControlOutlet=humSensor1ControlOutlet, outlet14RebootTime=outlet14RebootTime, outletSection4OutletName=outletSection4OutletName, outlet20Command=outlet20Command, totalCurrent=totalCurrent, outlet2Link=outlet2Link, outlet16Status=outlet16Status, outlet20RebootTime=outlet20RebootTime, allNotifications=allNotifications, outlet16Link=outlet16Link, outlet28PingIpAddress=outlet28PingIpAddress, contactClosure2OutletState=contactClosure2OutletState, outletSection4CurrentHighThreshold=outletSection4CurrentHighThreshold, outletSection2Va=outletSection2Va, ipv3600=ipv3600, outlet19PingIpAddress=outlet19PingIpAddress, outletSection5CurrentHighThreshold=outletSection5CurrentHighThreshold, contactClosure1OutletName=contactClosure1OutletName, snmpTraps=snmpTraps, contactClosure3Alert=contactClosure3Alert, outlet18Command=outlet18Command, outletSection1CurrentHighThreshold=outletSection1CurrentHighThreshold, trapUserLoginLogout=trapUserLoginLogout, outlet17Status=outlet17Status, unitTime=unitTime, outlet8SequenceTime=outlet8SequenceTime, outlet9Command=outlet9Command, outletSection4VoltageLowThreshold=outletSection4VoltageLowThreshold, outlet29Command=outlet29Command, outlet30Name=outlet30Name, defaultGateway=defaultGateway, outletSection5=outletSection5, outlet30=outlet30, outlet26Status=outlet26Status, outlet34RebootTime=outlet34RebootTime, outlet15=outlet15, outlet25Name=outlet25Name, outlet26PingIpAddress=outlet26PingIpAddress, outletSection3ControlOutlet=outletSection3ControlOutlet, outlet4=outlet4, notifyVoltageThreshold=notifyVoltageThreshold, notifyTempSensorThreshold=notifyTempSensorThreshold, outlet24PingIpAddress=outlet24PingIpAddress, outlet35PingIpAddress=outlet35PingIpAddress, outlet22RebootTime=outlet22RebootTime, outlet15SequenceTime=outlet15SequenceTime, outlet33=outlet33, outlet8Link=outlet8Link, outlet3Command=outlet3Command, outlet20SequenceTime=outlet20SequenceTime, contactClosure3OutletName=contactClosure3OutletName, outletSection6Config=outletSection6Config, outlet11RebootTime=outlet11RebootTime, outlet5PingIpAddress=outlet5PingIpAddress, totalVoltage=totalVoltage, outlet31SequenceTime=outlet31SequenceTime, outlet1Command=outlet1Command, outletSection1Voltage=outletSection1Voltage, tempSensor2OutletName=tempSensor2OutletName, outlet6SequenceTime=outlet6SequenceTime, outlet19Link=outlet19Link, outlet3Link=outlet3Link, outlet4PingIpAddress=outlet4PingIpAddress, outletSection6VoltageLowThreshold=outletSection6VoltageLowThreshold, allObjects=allObjects, outlet6RebootTime=outlet6RebootTime, obsoleteObjects=obsoleteObjects, infoOutletState=infoOutletState, outlet2=outlet2, outlet12RebootTime=outlet12RebootTime, outletSection2VoltageLowThreshold=outletSection2VoltageLowThreshold, outletSection2OutletName=outletSection2OutletName, outlet24Link=outlet24Link, systemOnOff=systemOnOff, tempSensor1LowThresh=tempSensor1LowThresh, outlet15Status=outlet15Status, outletSection2ControlOutlet=outletSection2ControlOutlet, PYSNMP_MODULE_ID=pulizzi, outlet15Link=outlet15Link, outlet8Status=outlet8Status, outlet9Link=outlet9Link, outlet28Name=outlet28Name, outlet19Status=outlet19Status, outlet28Command=outlet28Command, outlet15Name=outlet15Name, outletSection2=outletSection2, outlet20Name=outlet20Name, contactClosure1Name=contactClosure1Name, tempSensor1=tempSensor1, outlet17Name=outlet17Name, outlet19Name=outlet19Name, outletSection3Va=outletSection3Va, humSensor1HighThresh=humSensor1HighThresh, outletSection3Alert=outletSection3Alert, outlet18RebootTime=outlet18RebootTime, outlet22Command=outlet22Command, tempSensor1Enable=tempSensor1Enable, contactClosure3ControlOutlet=contactClosure3ControlOutlet, outlet9=outlet9, contactClosure1ControlOutlet=contactClosure1ControlOutlet, outlet21PingIpAddress=outlet21PingIpAddress, contactClosure2Enable=contactClosure2Enable, outlet17Link=outlet17Link, outletSection4Current=outletSection4Current, unitDayOfWeek=unitDayOfWeek, compliances=compliances, outlet10Name=outlet10Name, outlet2Command=outlet2Command, outlet34Name=outlet34Name)
mibBuilder.exportSymbols("EATON-EPDU-PU-SW-MIB", tempSensor1OutletName=tempSensor1OutletName, outlet33PingIpAddress=outlet33PingIpAddress, outlet25Command=outlet25Command, outlet17RebootTime=outlet17RebootTime, outlet16SequenceTime=outlet16SequenceTime, outlet21Status=outlet21Status, outlet27Link=outlet27Link, tempSensor1ControlOutlet=tempSensor1ControlOutlet, outlet30RebootTime=outlet30RebootTime, outlet3Status=outlet3Status)
