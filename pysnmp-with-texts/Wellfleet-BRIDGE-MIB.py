#
# PySNMP MIB module Wellfleet-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-BRIDGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:39:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Integer32, ModuleIdentity, Unsigned32, TimeTicks, Gauge32, IpAddress, Opaque, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, ObjectIdentity, Bits, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "ModuleIdentity", "Unsigned32", "TimeTicks", "Gauge32", "IpAddress", "Opaque", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "ObjectIdentity", "Bits", "iso", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfBridgeGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfBridgeGroup")
wfBrLearning = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1))
wfBrTp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1, 1))
wfBrTpBaseDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrTpBaseDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpBaseDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete the bridge.')
wfBrTpBaseEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrTpBaseEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpBaseEnable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable the bridge.')
wfBrTpBaseState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("pres", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTpBaseState.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpBaseState.setDescription('The current state of the entire Bridge.')
wfBrTpBaseFDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTpBaseFDBEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpBaseFDBEntries.setDescription('The current number of forward table entries')
wfBrTpBaseFDBSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072))).clone(namedValues=NamedValues(("size1024", 1024), ("size2048", 2048), ("size4096", 4096), ("size8192", 8192), ("size16384", 16384), ("size32768", 32768), ("size65536", 65536), ("size131072", 131072))).clone('size1024')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrTpBaseFDBSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpBaseFDBSize.setDescription('Size of the bridge table - only looked at at boot time')
wfBrTpBaseFDBEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrTpBaseFDBEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpBaseFDBEnable.setDescription('Disable placing fdb entries on the mib. This attribute only inspected at boot time.')
wfBrTpBaseFlushFwdTbl = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flushed", 1), ("noflushed", 2))).clone('noflushed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrTpBaseFlushFwdTbl.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpBaseFlushFwdTbl.setDescription('Flush the bridge fwd tables')
wfBrTpBaseFDBPortChange = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTpBaseFDBPortChange.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpBaseFDBPortChange.setDescription('The amount that all the stations move from one port to anotherard table entries')
wfBrTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1, 2), )
if mibBuilder.loadTexts: wfBrTpFdbTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpFdbTable.setDescription('A table that contains information about unicast entries for which the bridge has forwarding and/or filtering information. This information is used by the transparent bridging function in determining how to propagate a received frame. inst = wfBrTpBaseFdbAddress')
wfBrTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1, 2, 1), ).setIndexNames((0, "Wellfleet-BRIDGE-MIB", "wfBrTpBaseFdbAddress"))
if mibBuilder.loadTexts: wfBrTpFdbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpFdbEntry.setDescription('An entry in the wfBrTpFdbTable.')
wfBrTpBaseFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTpBaseFdbAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpBaseFdbAddress.setDescription('A unicast MAC address for which the bridge has forwarding and/or filtering information.')
wfBrTpBaseFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTpBaseFdbPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpBaseFdbPort.setDescription('The port number on which the wfBrTpBaseFdbAddress was learned.')
wfBrTpBaseFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("learned", 3))).clone('learned')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTpBaseFdbStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpBaseFdbStatus.setDescription('The status of this entry. The meanings of the values are: learned(3) : the value of the corresponding instance of wfBrTpFdbPort was learned, and is being used.')
wfBrTpAggrStats = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1, 3))
wfBrTpAggrInPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTpAggrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpAggrInPkts.setDescription('The total number of packets received by the transparent bridge')
wfBrTpAggrOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTpAggrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpAggrOutPkts.setDescription('The total number of packets sent by the transparent bridge')
wfBrTpAggrDiscardPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTpAggrDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpAggrDiscardPkts.setDescription('The total number of packets discarded by the transparent bridge')
wfBrTpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 3), )
if mibBuilder.loadTexts: wfBrTpInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpInterfaceTable.setDescription('A table that contains information about every interface that is associated with this transparent bridge. inst_id[1] = wfBrTpInterfaceCircuit')
wfBrTpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 3, 1), ).setIndexNames((0, "Wellfleet-BRIDGE-MIB", "wfBrTpInterfaceCircuit"))
if mibBuilder.loadTexts: wfBrTpInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpInterfaceEntry.setDescription('An entry in wfBrTpInterface.')
wfBrTpInterfaceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrTpInterfaceDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpInterfaceDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete an interface.')
wfBrTpInterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 33, 17))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("circuitdump", 33), ("fwdtbldump", 17))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrTpInterfaceEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpInterfaceEnable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an interface.')
wfBrTpInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("pres", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTpInterfaceState.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpInterfaceState.setDescription('The current state of the interface.')
wfBrTpInterfaceCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTpInterfaceCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpInterfaceCircuit.setDescription('The circuit that this interface runs over.')
wfBrTpInterfaceMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTpInterfaceMaxInfo.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpInterfaceMaxInfo.setDescription('The maximum size of the INFO (non-MAC) field that this port will receive or transmit.')
wfBrTpInterfaceInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTpInterfaceInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpInterfaceInFrames.setDescription('The number of frames that have been received by this interface from its circuit.')
wfBrTpInterfaceOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTpInterfaceOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpInterfaceOutFrames.setDescription('The number of frames that have been transmitted by this interface to its circuit.')
wfBrTpInterfaceInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTpInterfaceInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpInterfaceInDiscards.setDescription('Count of valid frames received which were received on this interface but then discarded.')
wfBrTpInterfaceTranslationDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrTpInterfaceTranslationDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTpInterfaceTranslationDisable.setDescription('Enable/Disable translation bridging parameter. Default is enabled.')
wfBrTrafficFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 4), )
if mibBuilder.loadTexts: wfBrTrafficFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTrafficFilterTable.setDescription('Bridge Traffic Filters')
wfBrTrafficFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 4, 1), ).setIndexNames((0, "Wellfleet-BRIDGE-MIB", "wfBrTrafficFilterCircuit"), (0, "Wellfleet-BRIDGE-MIB", "wfBrTrafficFilterRuleNumber"), (0, "Wellfleet-BRIDGE-MIB", "wfBrTrafficFilterFragment"))
if mibBuilder.loadTexts: wfBrTrafficFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTrafficFilterEntry.setDescription('An entry in WfBrTrafficFilterTable.')
wfBrTrafficFilterCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrTrafficFilterCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTrafficFilterCreate.setDescription('Defines the existence of the traffic filter rule: created - traffic filter exists delete - traffic filter does not exist and can be deleted.')
wfBrTrafficFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrTrafficFilterEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTrafficFilterEnable.setDescription('Defines whether or not the traffic filter rule should be used: enabled - activate the rule. disabled - inactivate the rule.')
wfBrTrafficFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTrafficFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTrafficFilterStatus.setDescription('Defines the current status of the traffic filter: inactive - the rule is not in use. active - the rule is being used. error - the application detected an error in the rule.')
wfBrTrafficFilterCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTrafficFilterCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTrafficFilterCounter.setDescription('The number of received packets that have matched this rule.')
wfBrTrafficFilterDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 4, 1, 5), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrTrafficFilterDefinition.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTrafficFilterDefinition.setDescription('The filter rule definition.')
wfBrTrafficFilterReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTrafficFilterReserved.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTrafficFilterReserved.setDescription('Reserved field.')
wfBrTrafficFilterCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTrafficFilterCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTrafficFilterCircuit.setDescription('The ID of the Bridge Circuit to which the filter is applied.')
wfBrTrafficFilterRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTrafficFilterRuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTrafficFilterRuleNumber.setDescription('ID for the rule.')
wfBrTrafficFilterFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrTrafficFilterFragment.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTrafficFilterFragment.setDescription('Fragment number - for large rules.')
wfBrTrafficFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 4, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrTrafficFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrTrafficFilterName.setDescription('name of the rule number')
mibBuilder.exportSymbols("Wellfleet-BRIDGE-MIB", wfBrTpBaseFdbStatus=wfBrTpBaseFdbStatus, wfBrTpInterfaceInDiscards=wfBrTpInterfaceInDiscards, wfBrTpBaseFlushFwdTbl=wfBrTpBaseFlushFwdTbl, wfBrTp=wfBrTp, wfBrTpInterfaceTable=wfBrTpInterfaceTable, wfBrTpInterfaceTranslationDisable=wfBrTpInterfaceTranslationDisable, wfBrTrafficFilterName=wfBrTrafficFilterName, wfBrTrafficFilterStatus=wfBrTrafficFilterStatus, wfBrTrafficFilterEnable=wfBrTrafficFilterEnable, wfBrTrafficFilterDefinition=wfBrTrafficFilterDefinition, wfBrTrafficFilterRuleNumber=wfBrTrafficFilterRuleNumber, wfBrTpAggrInPkts=wfBrTpAggrInPkts, wfBrTpAggrStats=wfBrTpAggrStats, wfBrTpInterfaceOutFrames=wfBrTpInterfaceOutFrames, wfBrTrafficFilterReserved=wfBrTrafficFilterReserved, wfBrTrafficFilterEntry=wfBrTrafficFilterEntry, wfBrTpAggrOutPkts=wfBrTpAggrOutPkts, wfBrTpInterfaceMaxInfo=wfBrTpInterfaceMaxInfo, wfBrTpBaseFdbAddress=wfBrTpBaseFdbAddress, wfBrTpInterfaceState=wfBrTpInterfaceState, wfBrTrafficFilterCircuit=wfBrTrafficFilterCircuit, wfBrTrafficFilterCounter=wfBrTrafficFilterCounter, wfBrTpInterfaceCircuit=wfBrTpInterfaceCircuit, wfBrTpInterfaceEnable=wfBrTpInterfaceEnable, wfBrTrafficFilterFragment=wfBrTrafficFilterFragment, wfBrTpBaseState=wfBrTpBaseState, wfBrTpBaseEnable=wfBrTpBaseEnable, wfBrTpBaseFdbPort=wfBrTpBaseFdbPort, wfBrTrafficFilterTable=wfBrTrafficFilterTable, wfBrTpAggrDiscardPkts=wfBrTpAggrDiscardPkts, wfBrLearning=wfBrLearning, wfBrTpBaseFDBEntries=wfBrTpBaseFDBEntries, wfBrTpBaseFDBEnable=wfBrTpBaseFDBEnable, wfBrTpInterfaceDelete=wfBrTpInterfaceDelete, wfBrTpBaseFDBSize=wfBrTpBaseFDBSize, wfBrTpFdbEntry=wfBrTpFdbEntry, wfBrTpBaseFDBPortChange=wfBrTpBaseFDBPortChange, wfBrTpBaseDelete=wfBrTpBaseDelete, wfBrTpInterfaceEntry=wfBrTpInterfaceEntry, wfBrTrafficFilterCreate=wfBrTrafficFilterCreate, wfBrTpInterfaceInFrames=wfBrTpInterfaceInFrames, wfBrTpFdbTable=wfBrTpFdbTable)
