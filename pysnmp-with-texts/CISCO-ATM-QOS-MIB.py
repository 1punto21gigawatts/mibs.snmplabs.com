#
# PySNMP MIB module CISCO-ATM-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ATM-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:50:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
AtmServiceCategory, = mibBuilder.importSymbols("ATM-FORUM-TC-MIB", "AtmServiceCategory")
atmVplVpi, atmVclVci, atmVclVpi = mibBuilder.importSymbols("ATM-MIB", "atmVplVpi", "atmVclVci", "atmVclVpi")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, IpAddress, iso, ModuleIdentity, Unsigned32, TimeTicks, Bits, Counter32, NotificationType, ObjectIdentity, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "IpAddress", "iso", "ModuleIdentity", "Unsigned32", "TimeTicks", "Bits", "Counter32", "NotificationType", "ObjectIdentity", "Gauge32", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoAtmQosMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 279))
ciscoAtmQosMIB.setRevisions(('2002-06-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoAtmQosMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoAtmQosMIB.setLastUpdated('200206100000Z')
if mibBuilder.loadTexts: ciscoAtmQosMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoAtmQosMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 SA Tel: +1 800 553-NETS Email: cs-atm@cisco.com')
if mibBuilder.loadTexts: ciscoAtmQosMIB.setDescription('The MIB is created to provide ATM QoS information in these areas: 1. Traffic shaping on a per-VC basis 2. Traffic shaping on a per-VP basis 3. Per-VC queuing/buffering Although the initial requirements of the MIB are driven to support the GSR TAZ line card, CISCO-ATM-QOS-MIB is designed as a generic MIB to support ATM interfaces across all platforms. Here are the tables defined in this MIB: ciscoAtmQosVccTable - to provide information on traffic shaping on a per-VC basis. ciscoAtmQosVpcTable - to provide information on traffic shaping on a per-VP basis. ciscoAtmQosVcQueuingTable ciscoAtmQosVcQueuingClassTable - to provide information on per-VC queuing/buffering.')
ciscoAtmQosMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 279, 0))
ciscoAtmQosMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 279, 1))
ciscoAtmQosMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 279, 2))
caqVccParams = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1))
caqVpcParams = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2))
caqQueuingParams = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3))
class VcParamConfigLocation(TextualConvention, Integer32):
    description = 'The configuration source of a vc parameter: 1 - Not configured - using default 2 - Configured on vc directly 3 - VC-class configured on vc 4 - VC-class configured on sub-interface 5 - VC-class configured on main-interface. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("configDefault", 1), ("configVcDirect", 2), ("configVcClass", 3), ("configVcClassSubInterface", 4), ("configVcClassInterface", 5))

class VpState(TextualConvention, Integer32):
    description = 'States of virtual path: 1 - Inactive 2 - Active '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("vpStateInactive", 1), ("vpStateActive", 2))

caqVccParamsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1), )
if mibBuilder.loadTexts: caqVccParamsTable.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsTable.setDescription('This table is defined to provide QoS information for each active ATM VC existing on the interface.')
caqVccParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: caqVccParamsEntry.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsEntry.setDescription('This list contains the ATM QoS parameters provided by ciscoAtmQosVccEntry.')
caqVccParamsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 1), AtmServiceCategory()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsType.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsType.setDescription('The service category of this virtual circuit connection.')
caqVccParamsPcrIn0 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsPcrIn0.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsPcrIn0.setDescription('Input Peak Cell Rate (PCR) in kbps with Cell Loss Priority bit set to 0 (clp0).')
caqVccParamsPcrIn01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsPcrIn01.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsPcrIn01.setDescription('Number of OAM F5 end to end loopback cells sent through the VCC.')
caqVccParamsPcrOut0 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsPcrOut0.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsPcrOut0.setDescription('Output Peak Cell Rate (PCR) in kbps with Cell Loss Priority bit set to 0 (clp0).')
caqVccParamsPcrOut01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsPcrOut01.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsPcrOut01.setDescription('Output Peak Cell Rate (PCR) in kbps with Cell Loss Priority bit set to 1 (clp01).')
caqVccParamsScrIn0 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsScrIn0.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsScrIn0.setDescription('Input Sustained Cell Rate (SCR) in kbps for connection with VBR type of QoS and Cell Loss Priority bit set to 0 (clp0).')
caqVccParamsScrIn01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsScrIn01.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsScrIn01.setDescription('Input Sustained Cell Rate (SCR) in kbps for connection with VBR type of QoS and Cell Loss Priority bit set to 1 (clp01).')
caqVccParamsScrOut0 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsScrOut0.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsScrOut0.setDescription('Output Sustained Cell Rate (SCR) in kbps for connection with VBR type of QoS and Cell Loss Priority bit set to 0 (clp0).')
caqVccParamsScrOut01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsScrOut01.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsScrOut01.setDescription('Output Sustained Cell Rate (SCR) in kbps for connection with VBR type of QoS and Cell Loss Priority bit set to 1 (clp01).')
caqVccParamsBcsIn0 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsBcsIn0.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsBcsIn0.setDescription('Input Burst Cell Size (BCS) for connection with VBR type of QoS and Cell Loss Priority bit set to 0 (clp0).')
caqVccParamsBcsIn01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsBcsIn01.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsBcsIn01.setDescription('Input Burst Cell Size (BCS) for connection with VBR type of QoS and Cell Loss Priority bit set to 1 (clp01).')
caqVccParamsBcsOut0 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsBcsOut0.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsBcsOut0.setDescription('Output Burst Cell Size (BCS) for connection with VBR type of QoS and Cell Loss Priority bit set to 0 (clp0).')
caqVccParamsBcsOut01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsBcsOut01.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsBcsOut01.setDescription('Output Burst Cell Size (BCS) for connection with VBR type of QoS and Cell Loss Priority bit set to 1 (clp01).')
caqVccParamsInheritLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 14), VcParamConfigLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVccParamsInheritLevel.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsInheritLevel.setDescription('The source of configuration for peak cell rate.')
caqVccParamsMcrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsMcrIn.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsMcrIn.setDescription('Input Minimum Cell Rate (MCR) in kbps for connection with VBR-nrt or ABR type of QoS.')
caqVccParamsMcrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsMcrOut.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsMcrOut.setDescription('Output Minimum Cell Rate (MCR) in kbps for connection with VBR-nrt or ABR type of QoS.')
caqVccParamsInvRdf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsInvRdf.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsInvRdf.setDescription('Inverse of rate decrease factor.')
caqVccParamsInvRif = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsInvRif.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsInvRif.setDescription('Inverse of rate increase factor.')
caqVccParamsRfl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 19), VcParamConfigLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVccParamsRfl.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsRfl.setDescription('The source of configuration for rate factor.')
caqVccParamsCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVccParamsCdv.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsCdv.setDescription('Cell delay variation.')
caqVccParamsCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsCdvt.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsCdvt.setDescription('Cell delay variation tolerance.')
caqVccParamsIcr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsIcr.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsIcr.setDescription('Initial cell rate.')
caqVccParamsTbe = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsTbe.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsTbe.setDescription('Transient buffer exposure.')
caqVccParamsFrtt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsFrtt.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsFrtt.setDescription('Fixed round-trip time.')
caqVccParamsNrm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsNrm.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsNrm.setDescription('Maximum number of tx cells for each forward rm cell.')
caqVccParamsInvTrm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsInvTrm.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsInvTrm.setDescription('Maximum time between forward rm cells.')
caqVccParamsInvCdf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsInvCdf.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsInvCdf.setDescription('Inverse of cutoff decrease factor.')
caqVccParamsAdtf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 1, 1, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caqVccParamsAdtf.setStatus('current')
if mibBuilder.loadTexts: caqVccParamsAdtf.setDescription('Allowed cell rate decrease time factor.')
caqVpcParamsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1), )
if mibBuilder.loadTexts: caqVpcParamsTable.setStatus('current')
if mibBuilder.loadTexts: caqVpcParamsTable.setDescription('This table is defined to provide QoS information for each active ATM VP existing on the interface.')
caqVpcParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: caqVpcParamsEntry.setStatus('current')
if mibBuilder.loadTexts: caqVpcParamsEntry.setDescription('This list contains the ATM QoS parameters provided by ciscoAtmQosVpcEntry.')
caqVpcParamsVpState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 1), VpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsVpState.setStatus('current')
if mibBuilder.loadTexts: caqVpcParamsVpState.setDescription('VP state of the current permanent virtual path.')
caqVpcParamsPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsPeakRate.setStatus('current')
if mibBuilder.loadTexts: caqVpcParamsPeakRate.setDescription('Maximum rate in kbps at which the associated permanent virtual path can transmit data.')
caqVpcParamsCesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsCesRate.setStatus('current')
if mibBuilder.loadTexts: caqVpcParamsCesRate.setDescription('Maximum rate in kbps at which CES VCs can transmit data with the associated permanent virtual path.')
caqVpcParamsDataVcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsDataVcCount.setStatus('current')
if mibBuilder.loadTexts: caqVpcParamsDataVcCount.setDescription('Number of data VCs currently associated with the permanent virtual path.')
caqVpcParamsCesVcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsCesVcCount.setStatus('current')
if mibBuilder.loadTexts: caqVpcParamsCesVcCount.setDescription('Number of CES VCs currently associated with the permanent virtual path.')
caqVpcParamsVcdF4Seg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsVcdF4Seg.setStatus('current')
if mibBuilder.loadTexts: caqVpcParamsVcdF4Seg.setDescription('Vcd for F4 OAM segment processing.')
caqVpcParamsVcdF4Ete = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsVcdF4Ete.setStatus('current')
if mibBuilder.loadTexts: caqVpcParamsVcdF4Ete.setDescription('Vcd for F4 OAM end to end processing.')
caqVpcParamsScr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsScr.setStatus('current')
if mibBuilder.loadTexts: caqVpcParamsScr.setDescription('Sustained cell rate associated with the PVP.')
caqVpcParamsMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsMbs.setStatus('current')
if mibBuilder.loadTexts: caqVpcParamsMbs.setDescription('Maximum burst size associated with the PVP.')
caqVpcParamsAvailBw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqVpcParamsAvailBw.setStatus('current')
if mibBuilder.loadTexts: caqVpcParamsAvailBw.setDescription('Bandwidth in Kbps currently currently available on this PVP.')
caqQueuingParamsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 1), )
if mibBuilder.loadTexts: caqQueuingParamsTable.setStatus('current')
if mibBuilder.loadTexts: caqQueuingParamsTable.setDescription('This table provides queuing related information for a VC existing on an ATM interface.')
caqQueuingParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: caqQueuingParamsEntry.setStatus('current')
if mibBuilder.loadTexts: caqQueuingParamsEntry.setDescription('This is defined as an entry in caqQueuingParamsTable.')
caqQueuingParamsMeanQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqQueuingParamsMeanQDepth.setStatus('current')
if mibBuilder.loadTexts: caqQueuingParamsMeanQDepth.setDescription('Mean Queue Depth associated with the vc. This value is calculated based on the actual queue depth on the interface and the exponential weighting constant.')
caqQueuingParamsClassTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 2), )
if mibBuilder.loadTexts: caqQueuingParamsClassTable.setStatus('current')
if mibBuilder.loadTexts: caqQueuingParamsClassTable.setDescription('This table provides queuing information for all queuing classes associating with a VC.')
caqQueuingParamsClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "CISCO-ATM-QOS-MIB", "caqQueuingParamsClassIndex"))
if mibBuilder.loadTexts: caqQueuingParamsClassEntry.setStatus('current')
if mibBuilder.loadTexts: caqQueuingParamsClassEntry.setDescription('This is defined as an entry in ciscoAtmQosVcQueuingClassTable to provide queuing information of a specific class.')
caqQueuingParamsClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: caqQueuingParamsClassIndex.setStatus('current')
if mibBuilder.loadTexts: caqQueuingParamsClassIndex.setDescription('A class index, which associates with an IP precedence (0 to 8), is defined to reference individual caqQueuingParamsClassEntry.')
caqQueuingParamsClassRandDrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqQueuingParamsClassRandDrp.setStatus('current')
if mibBuilder.loadTexts: caqQueuingParamsClassRandDrp.setDescription('Number of packets dropped when Mean Queue Length is between Minimum Threshold and Maximum Threshold range.')
caqQueuingParamsClassTailDrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqQueuingParamsClassTailDrp.setStatus('current')
if mibBuilder.loadTexts: caqQueuingParamsClassTailDrp.setDescription('Number of packets dropped because the Mean Queue Depth exceeds the Maximum Threshold value.')
caqQueuingParamsClassMinThre = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqQueuingParamsClassMinThre.setStatus('current')
if mibBuilder.loadTexts: caqQueuingParamsClassMinThre.setDescription('Minimum Threshold value in kbps.')
caqQueuingParamsClassMaxThre = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqQueuingParamsClassMaxThre.setStatus('current')
if mibBuilder.loadTexts: caqQueuingParamsClassMaxThre.setDescription('Maximum Threshold value in kbps.')
caqQueuingParamsClassMrkProb = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 279, 1, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caqQueuingParamsClassMrkProb.setStatus('current')
if mibBuilder.loadTexts: caqQueuingParamsClassMrkProb.setDescription('Mark probability denominator. This is the value used in the calculation of a packet being dropped when the average queue size is between the minimum threshold and the maximum threshold.')
ciscoAtmQosMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 279, 2, 1))
ciscoAtmQosMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 279, 2, 2))
ciscoAtmQosMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 279, 2, 1, 1)).setObjects(("CISCO-ATM-QOS-MIB", "ciscoAtmQosVccGroup"), ("CISCO-ATM-QOS-MIB", "ciscoAtmQosVpcGroup"), ("CISCO-ATM-QOS-MIB", "ciscoAtmQosVcQueuingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmQosMIBCompliance = ciscoAtmQosMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmQosMIBCompliance.setDescription('The compliance statement for entities which implement this Cisco ATM QoS MIB.')
ciscoAtmQosVccGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 279, 2, 2, 1)).setObjects(("CISCO-ATM-QOS-MIB", "caqVccParamsType"), ("CISCO-ATM-QOS-MIB", "caqVccParamsPcrIn0"), ("CISCO-ATM-QOS-MIB", "caqVccParamsPcrIn01"), ("CISCO-ATM-QOS-MIB", "caqVccParamsPcrOut0"), ("CISCO-ATM-QOS-MIB", "caqVccParamsPcrOut01"), ("CISCO-ATM-QOS-MIB", "caqVccParamsScrIn0"), ("CISCO-ATM-QOS-MIB", "caqVccParamsScrIn01"), ("CISCO-ATM-QOS-MIB", "caqVccParamsScrOut0"), ("CISCO-ATM-QOS-MIB", "caqVccParamsScrOut01"), ("CISCO-ATM-QOS-MIB", "caqVccParamsBcsIn0"), ("CISCO-ATM-QOS-MIB", "caqVccParamsBcsIn01"), ("CISCO-ATM-QOS-MIB", "caqVccParamsBcsOut0"), ("CISCO-ATM-QOS-MIB", "caqVccParamsBcsOut01"), ("CISCO-ATM-QOS-MIB", "caqVccParamsInheritLevel"), ("CISCO-ATM-QOS-MIB", "caqVccParamsMcrIn"), ("CISCO-ATM-QOS-MIB", "caqVccParamsMcrOut"), ("CISCO-ATM-QOS-MIB", "caqVccParamsInvRdf"), ("CISCO-ATM-QOS-MIB", "caqVccParamsInvRif"), ("CISCO-ATM-QOS-MIB", "caqVccParamsRfl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmQosVccGroup = ciscoAtmQosVccGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmQosVccGroup.setDescription('A collection of objects providing per-VC ATM QoS related info.')
ciscoAtmQosVccAddon1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 279, 2, 2, 2)).setObjects(("CISCO-ATM-QOS-MIB", "caqVccParamsCdv"), ("CISCO-ATM-QOS-MIB", "caqVccParamsCdvt"), ("CISCO-ATM-QOS-MIB", "caqVccParamsIcr"), ("CISCO-ATM-QOS-MIB", "caqVccParamsTbe"), ("CISCO-ATM-QOS-MIB", "caqVccParamsFrtt"), ("CISCO-ATM-QOS-MIB", "caqVccParamsNrm"), ("CISCO-ATM-QOS-MIB", "caqVccParamsInvTrm"), ("CISCO-ATM-QOS-MIB", "caqVccParamsInvCdf"), ("CISCO-ATM-QOS-MIB", "caqVccParamsAdtf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmQosVccAddon1Group = ciscoAtmQosVccAddon1Group.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmQosVccAddon1Group.setDescription('Add-on objects providing per-VC ATM QoS related info.')
ciscoAtmQosVpcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 279, 2, 2, 3)).setObjects(("CISCO-ATM-QOS-MIB", "caqVpcParamsVpState"), ("CISCO-ATM-QOS-MIB", "caqVpcParamsPeakRate"), ("CISCO-ATM-QOS-MIB", "caqVpcParamsCesRate"), ("CISCO-ATM-QOS-MIB", "caqVpcParamsDataVcCount"), ("CISCO-ATM-QOS-MIB", "caqVpcParamsCesVcCount"), ("CISCO-ATM-QOS-MIB", "caqVpcParamsVcdF4Seg"), ("CISCO-ATM-QOS-MIB", "caqVpcParamsVcdF4Ete"), ("CISCO-ATM-QOS-MIB", "caqVpcParamsScr"), ("CISCO-ATM-QOS-MIB", "caqVpcParamsMbs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmQosVpcGroup = ciscoAtmQosVpcGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmQosVpcGroup.setDescription('A collection of objects providing per-VP ATM QoS related info.')
ciscoAtmQosVpcAddon1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 279, 2, 2, 4)).setObjects(("CISCO-ATM-QOS-MIB", "caqVpcParamsAvailBw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmQosVpcAddon1Group = ciscoAtmQosVpcAddon1Group.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmQosVpcAddon1Group.setDescription('Add-on objects providing per-VP ATM QoS related info.')
ciscoAtmQosVcQueuingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 279, 2, 2, 5)).setObjects(("CISCO-ATM-QOS-MIB", "caqQueuingParamsMeanQDepth"), ("CISCO-ATM-QOS-MIB", "caqQueuingParamsClassRandDrp"), ("CISCO-ATM-QOS-MIB", "caqQueuingParamsClassTailDrp"), ("CISCO-ATM-QOS-MIB", "caqQueuingParamsClassMinThre"), ("CISCO-ATM-QOS-MIB", "caqQueuingParamsClassMaxThre"), ("CISCO-ATM-QOS-MIB", "caqQueuingParamsClassMrkProb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmQosVcQueuingGroup = ciscoAtmQosVcQueuingGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmQosVcQueuingGroup.setDescription('A collection of objects providing per-VC queuing/buffering related info.')
mibBuilder.exportSymbols("CISCO-ATM-QOS-MIB", caqVpcParamsDataVcCount=caqVpcParamsDataVcCount, caqVccParamsMcrOut=caqVccParamsMcrOut, caqQueuingParamsClassRandDrp=caqQueuingParamsClassRandDrp, caqVccParamsTbe=caqVccParamsTbe, caqVccParamsScrIn01=caqVccParamsScrIn01, caqVpcParamsVcdF4Ete=caqVpcParamsVcdF4Ete, caqQueuingParamsClassTable=caqQueuingParamsClassTable, ciscoAtmQosVcQueuingGroup=ciscoAtmQosVcQueuingGroup, caqVccParamsPcrOut0=caqVccParamsPcrOut0, caqVccParamsNrm=caqVccParamsNrm, caqQueuingParamsClassTailDrp=caqQueuingParamsClassTailDrp, caqVccParamsRfl=caqVccParamsRfl, caqVccParamsPcrIn01=caqVccParamsPcrIn01, caqVccParamsBcsIn0=caqVccParamsBcsIn0, caqVccParamsBcsIn01=caqVccParamsBcsIn01, caqVccParamsCdv=caqVccParamsCdv, ciscoAtmQosVccAddon1Group=ciscoAtmQosVccAddon1Group, caqQueuingParamsEntry=caqQueuingParamsEntry, caqVccParams=caqVccParams, caqVccParamsScrIn0=caqVccParamsScrIn0, caqVccParamsInheritLevel=caqVccParamsInheritLevel, caqVccParamsInvTrm=caqVccParamsInvTrm, caqQueuingParamsClassMrkProb=caqQueuingParamsClassMrkProb, caqVpcParamsScr=caqVpcParamsScr, caqVccParamsIcr=caqVccParamsIcr, ciscoAtmQosVpcGroup=ciscoAtmQosVpcGroup, caqVccParamsPcrIn0=caqVccParamsPcrIn0, caqQueuingParams=caqQueuingParams, caqVccParamsEntry=caqVccParamsEntry, caqVpcParamsEntry=caqVpcParamsEntry, ciscoAtmQosVpcAddon1Group=ciscoAtmQosVpcAddon1Group, caqVpcParamsPeakRate=caqVpcParamsPeakRate, ciscoAtmQosMIBGroups=ciscoAtmQosMIBGroups, caqVccParamsBcsOut0=caqVccParamsBcsOut0, caqVccParamsBcsOut01=caqVccParamsBcsOut01, caqVpcParams=caqVpcParams, caqQueuingParamsTable=caqQueuingParamsTable, caqVccParamsInvRif=caqVccParamsInvRif, ciscoAtmQosMIBConform=ciscoAtmQosMIBConform, caqVccParamsFrtt=caqVccParamsFrtt, caqVccParamsInvCdf=caqVccParamsInvCdf, caqVpcParamsCesVcCount=caqVpcParamsCesVcCount, caqQueuingParamsClassIndex=caqQueuingParamsClassIndex, caqQueuingParamsClassMaxThre=caqQueuingParamsClassMaxThre, caqVpcParamsAvailBw=caqVpcParamsAvailBw, ciscoAtmQosMIBCompliances=ciscoAtmQosMIBCompliances, caqQueuingParamsMeanQDepth=caqQueuingParamsMeanQDepth, caqVccParamsPcrOut01=caqVccParamsPcrOut01, VcParamConfigLocation=VcParamConfigLocation, caqVccParamsScrOut0=caqVccParamsScrOut0, caqVpcParamsCesRate=caqVpcParamsCesRate, caqVccParamsTable=caqVccParamsTable, caqVccParamsInvRdf=caqVccParamsInvRdf, caqVpcParamsVcdF4Seg=caqVpcParamsVcdF4Seg, caqVpcParamsMbs=caqVpcParamsMbs, ciscoAtmQosVccGroup=ciscoAtmQosVccGroup, caqVpcParamsTable=caqVpcParamsTable, ciscoAtmQosMIBNotifs=ciscoAtmQosMIBNotifs, caqVpcParamsVpState=caqVpcParamsVpState, caqQueuingParamsClassMinThre=caqQueuingParamsClassMinThre, caqQueuingParamsClassEntry=caqQueuingParamsClassEntry, PYSNMP_MODULE_ID=ciscoAtmQosMIB, ciscoAtmQosMIBObjects=ciscoAtmQosMIBObjects, caqVccParamsMcrIn=caqVccParamsMcrIn, ciscoAtmQosMIBCompliance=ciscoAtmQosMIBCompliance, ciscoAtmQosMIB=ciscoAtmQosMIB, VpState=VpState, caqVccParamsType=caqVccParamsType, caqVccParamsAdtf=caqVccParamsAdtf, caqVccParamsCdvt=caqVccParamsCdvt, caqVccParamsScrOut01=caqVccParamsScrOut01)
