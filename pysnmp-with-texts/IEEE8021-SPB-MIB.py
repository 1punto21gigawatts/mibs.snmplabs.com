#
# PySNMP MIB module IEEE8021-SPB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IEEE8021-SPB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:29:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
IEEE8021BridgePortNumber, ieee802dot1mibs, IEEE8021PbbIngressEgress = mibBuilder.importSymbols("IEEE8021-TC-MIB", "IEEE8021BridgePortNumber", "ieee802dot1mibs", "IEEE8021PbbIngressEgress")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
VlanId, VlanIdOrNone, VlanIdOrAny = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId", "VlanIdOrNone", "VlanIdOrAny")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Integer32, ModuleIdentity, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, Counter32, TimeTicks, IpAddress, NotificationType, Unsigned32, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "Counter32", "TimeTicks", "IpAddress", "NotificationType", "Unsigned32", "Gauge32", "ObjectIdentity")
DisplayString, TruthValue, TextualConvention, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "MacAddress", "RowStatus")
ieee8021SpbMib = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 26))
ieee8021SpbMib.setRevisions(('2012-02-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021SpbMib.setRevisionsDescriptions(('802.1 Shortest Path Bridging MIB Initial Version',))
if mibBuilder.loadTexts: ieee8021SpbMib.setLastUpdated('201202030000Z')
if mibBuilder.loadTexts: ieee8021SpbMib.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021SpbMib.setContactInfo(' WG-URL: http://grouper.ieee.org/groups/802/1/index.html WG-EMail: stds-802-1@ieee.org Contact: Don Fedyk Postal: C/O IEEE 802.1 Working Group IEEE Standards Association 445 Hoes Lane P.O. Box 1331 Piscataway NJ 08855-1331 USA E-mail: STDS-802-1-L@LISTSERV.IEEE.ORG')
if mibBuilder.loadTexts: ieee8021SpbMib.setDescription('802.1 SPB MIB')
class IEEE8021SpbAreaAddress(TextualConvention, OctetString):
    reference = '12.25.1.1.2 a), 12.25.1.2.2 a), 12.25.1.3.2 a), 12.25.1.2.2 a)'
    description = 'This identifier is the 3 Byte IS-IS Area Address. Domain Specific part(DSP).'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class IEEE8021SpbEctAlgorithm(TextualConvention, OctetString):
    reference = '12.3 q)'
    description = 'The 4 byte Equal Cost Multiple Tree Algorithm identifier. This identifies the tree computation algorithm and tie breakers.'
    status = 'current'
    displayHint = '1x-'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class IEEE8021SpbMode(TextualConvention, Integer32):
    reference = '27.10'
    description = 'Auto allocation control for this instance of SPB. For SPBV it controls SPVIDs and for SPBM it controls SPSourceID.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("auto", 1), ("manual", 2))

class IEEE8021SpbEctMode(TextualConvention, Integer32):
    reference = '12.25.5.1.3 c), 12.25.9.1.3 e)'
    description = 'The mode of the Base VID assigned for this instance of SPB. Modes are assigned in the FID to MSTI Allocation table.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("spbm", 2), ("spbv", 3))

class IEEE8021SpbDigestConvention(TextualConvention, Integer32):
    reference = '28.4.3'
    description = 'The mode of the current Agreement Digest. This determines the level of loop prevention.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("off", 1), ("loopFreeBoth", 2), ("loopFreeMcastOnly", 3))

class IEEE8021SpbLinkMetric(TextualConvention, Integer32):
    reference = '28.2'
    description = 'The 24 bit cost of an SPB link. A lower metric value means better. Value 16777215 equals Infinity.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 16777215)

class IEEE8021SpbAdjState(TextualConvention, Integer32):
    reference = '12.25.6.1.3 d), 12.25.6.2.3 d), 12.25.7.1.3 (e'
    description = 'The current state of this SPB adjacency or port. The values are up, down, and testing.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("up", 1), ("down", 2), ("testing", 3))

class IEEE8021SpbmSPsourceId(TextualConvention, OctetString):
    reference = '27.15'
    description = 'It is the high order 3 bytes for Group Address DA from this bridge. Note that only the 20 bits not including the top 4 bits are the SPSourceID.'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class IEEE8021SpbDigest(TextualConvention, OctetString):
    reference = '28.4'
    description = 'The Topology Agreement digest hex string.'
    status = 'current'
    displayHint = '1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(32, 32)
    fixedLength = 32

class IEEE8021SpbMCID(TextualConvention, OctetString):
    reference = '13.8'
    description = 'MST Configuration Identifier digest hex string.'
    status = 'current'
    displayHint = '1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(51, 51)
    fixedLength = 51

class IEEE8021SpbBridgePriority(TextualConvention, OctetString):
    reference = '13.26.3'
    description = 'The Bridge priority is the top 2 bytes of the Bridge Identifier. Lower values represent a better priority.'
    status = 'current'
    displayHint = '1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class IEEE8021SpbMTID(TextualConvention, Unsigned32):
    reference = '3.23, 3.24'
    description = 'The IS-IS Multi Topology Identifier.'
    status = 'current'
    displayHint = 'd'

class IEEE8021SpbServiceIdentifierOrAny(TextualConvention, Unsigned32):
    reference = '3.23, 3.24'
    description = 'The service instance identifier is used at the Customer Backbone port in SPBM to distinguish a service instance. The special value of 0xFFFFFF is used for wildcard. This range also includes the default I-SID. '
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(255, 16777215)

ieee8021SpbObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 26, 1))
ieee8021SpbSys = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 26, 1, 1))
ieee8021SpbSysAreaAddress = MibScalar((1, 3, 111, 2, 802, 1, 1, 26, 1, 1, 1), IEEE8021SpbAreaAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021SpbSysAreaAddress.setReference('12.25.1.3.2, 12.25.1.3.3')
if mibBuilder.loadTexts: ieee8021SpbSysAreaAddress.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbSysAreaAddress.setDescription('The three byte IS-IS Area Address to join. Normally SPB will use area 00:00:00 however if SPB is being used in conjunction with IPV4/V6 it may operate using the IS-IS area address already in use. This object is persistent.')
ieee8021SpbSysId = MibScalar((1, 3, 111, 2, 802, 1, 1, 26, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021SpbSysId.setReference('12.25.1.3.3, 3.21')
if mibBuilder.loadTexts: ieee8021SpbSysId.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbSysId.setDescription('SYS ID used for all SPB instances on this bridge. A six byte network wide unique identifier. This is defaulted to the Bridge Address initially but may be overridden. This object is persistent.')
ieee8021SpbSysControlAddr = MibScalar((1, 3, 111, 2, 802, 1, 1, 26, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021SpbSysControlAddr.setReference('12.25.1.1.2, 8.13.5.1')
if mibBuilder.loadTexts: ieee8021SpbSysControlAddr.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbSysControlAddr.setDescription('Group MAC that the ISIS control plane will use. SPB may use a number of different addresses for SPB Hello and LSP exchange. Section 27.2, 8.13.1.5 and Table 8-13 covers the different choices. The choices are as follows: 01:80:C2:00:00:14 = All Level 1 Intermediate Systems 01:80:C2:00:00:15 = All Level 2 Intermediate Systems 09:00:2B:00:00:05 = All Intermediate Systems. 01:80:C2:00:00:2E = All Provider Bridge Intermediate Systems. 01:80:C2:00:00:2F = All Customer Bridge Intermediate Systems. This object is persistent.')
ieee8021SpbSysName = MibScalar((1, 3, 111, 2, 802, 1, 1, 26, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbSysName.setReference('12.25.1.3.3')
if mibBuilder.loadTexts: ieee8021SpbSysName.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbSysName.setDescription('Name to be used to refer to this SPB bridge. This is advertised in IS-IS and used for management.')
ieee8021SpbSysBridgePriority = MibScalar((1, 3, 111, 2, 802, 1, 1, 26, 1, 1, 5), IEEE8021SpbBridgePriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbSysBridgePriority.setReference('12.25.1.3.3, 13.26.3')
if mibBuilder.loadTexts: ieee8021SpbSysBridgePriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbSysBridgePriority.setDescription('This is a 16 bit quantity which ranks this SPB Bridge relative to others when breaking ties. This priority is the high 16 bits of the Bridge Identifier. Its impact depends on the tie breaking algorithm. Recommend values 0..15 be assigned to core switches to ensure diversity of the ECT Algorithms.')
ieee8021SpbmSysSPSourceId = MibScalar((1, 3, 111, 2, 802, 1, 1, 26, 1, 1, 6), IEEE8021SpbmSPsourceId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021SpbmSysSPSourceId.setReference('12.25.1.3.3, 3.17, 27.15')
if mibBuilder.loadTexts: ieee8021SpbmSysSPSourceId.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbmSysSPSourceId.setDescription('The Shortest Path Source Identifier. It is the high order 3 bytes for Group Address DA from this bridge. Note that only the 20 bits not including the top 4 bits are the SPSourceID. This object is persistent.')
ieee8021SpbvSysMode = MibScalar((1, 3, 111, 2, 802, 1, 1, 26, 1, 1, 7), IEEE8021SpbMode().clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021SpbvSysMode.setReference('12.25.1.3.3, 3.20')
if mibBuilder.loadTexts: ieee8021SpbvSysMode.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbvSysMode.setDescription('Indication of supporting SPBV mode auto(=1)/manual(=2) auto => enable SPBV mode and auto allocate SPVIDs. manual => enable SPBV mode and manually assign SPVIDs. This object is persistent.')
ieee8021SpbmSysMode = MibScalar((1, 3, 111, 2, 802, 1, 1, 26, 1, 1, 8), IEEE8021SpbMode().clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021SpbmSysMode.setReference('12.25.1.3.3, 3.19')
if mibBuilder.loadTexts: ieee8021SpbmSysMode.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbmSysMode.setDescription('Indication of supporting SPBM mode auto(=1)/manual(=2) auto => enable SPBM mode and auto allocate SPsourceID. manual => enable SPBM mode and manually assign SPsourceID. This object is persistent.')
ieee8021SpbSysDigestConvention = MibScalar((1, 3, 111, 2, 802, 1, 1, 26, 1, 1, 9), IEEE8021SpbDigestConvention().clone('loopFreeBoth')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021SpbSysDigestConvention.setReference('12.25.1.3.3, 28.4.3')
if mibBuilder.loadTexts: ieee8021SpbSysDigestConvention.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbSysDigestConvention.setDescription('The Agreement Digest convention setting off(=1)/loopFreeBoth(=2)/loopFreeMcastOnly(=3) off => disable agreement digest checking in hellos loopFreeBoth => block unsafe group and individual traffic when digests disagree. loopFreeMcastOnly =>block unsafe group traffic when digests disagree. This object is persistent.')
ieee8021SpbMtidStaticTable = MibTable((1, 3, 111, 2, 802, 1, 1, 26, 1, 2), )
if mibBuilder.loadTexts: ieee8021SpbMtidStaticTable.setReference('12.25.2')
if mibBuilder.loadTexts: ieee8021SpbMtidStaticTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbMtidStaticTable.setDescription('A Table of multiple logical topologies - MT.')
ieee8021SpbMtidStaticTableEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 26, 1, 2, 1), ).setIndexNames((0, "IEEE8021-SPB-MIB", "ieee8021SpbMtidStaticEntryMtid"), (0, "IEEE8021-SPB-MIB", "ieee8021SpbTopIx"))
if mibBuilder.loadTexts: ieee8021SpbMtidStaticTableEntry.setReference('12.25.2')
if mibBuilder.loadTexts: ieee8021SpbMtidStaticTableEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbMtidStaticTableEntry.setDescription('This table configures a MTID to a topology index. A topology index uniquely identifies a specific ISIS topology enabling multiple instances or multiple MTIDs within an instance. ')
ieee8021SpbMtidStaticEntryMtid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 2, 1, 1), IEEE8021SpbMTID())
if mibBuilder.loadTexts: ieee8021SpbMtidStaticEntryMtid.setReference('12.25.1.3.2, 12.25.2.3.3, 28.12')
if mibBuilder.loadTexts: ieee8021SpbMtidStaticEntryMtid.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbMtidStaticEntryMtid.setDescription('ISIS Multi Topology Identifier MTID Each MTID defines logical topology and is used to enable multiple SPB instances within one ISIS instance.')
ieee8021SpbMTidStaticEntryMtidOverload = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021SpbMTidStaticEntryMtidOverload.setReference('12.25.2.3.3, 27.8.1')
if mibBuilder.loadTexts: ieee8021SpbMTidStaticEntryMtidOverload.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbMTidStaticEntryMtidOverload.setDescription('When set for this logical topology this bridge can only originate or terminate traffic. It cannot transit SPB encapsulated traffic. This is the IS-IS overload feature specific to an SPB IS-IS MTID logical topology. This object is persistent.')
ieee8021SpbMtidStaticEntryRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021SpbMtidStaticEntryRowStatus.setReference('12.25.2.3.3')
if mibBuilder.loadTexts: ieee8021SpbMtidStaticEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbMtidStaticEntryRowStatus.setDescription('The object indicates the status of an entry, and is used to create/delete entries. This object is persistent. This object is persistent.')
ieee8021SpbTopIx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 2, 1, 4), IEEE8021SpbMTID())
if mibBuilder.loadTexts: ieee8021SpbTopIx.setReference('12.25.2.3.3')
if mibBuilder.loadTexts: ieee8021SpbTopIx.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopIx.setDescription('Unique identifier of this SPB topology This is index is allocated for this ISIS/MT instance. It is used as an index to most other SPB tables below and to select the exact ISIS instance and which MT instance together.')
ieee8021SpbTopIxDynamicTable = MibTable((1, 3, 111, 2, 802, 1, 1, 26, 1, 3), )
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicTable.setReference('12.25.3')
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicTable.setDescription('This table is for SPB dynamic information. The dynamic information that is sent in this bridges Hellos.')
ieee8021SpbTopIxDynamicTableEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 26, 1, 3, 1), ).setIndexNames((0, "IEEE8021-SPB-MIB", "ieee8021SpbTopIxDynamicEntryTopIx"))
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicTableEntry.setReference('12.25.3')
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicTableEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicTableEntry.setDescription('This table displays the digest information computed for this bridge. A bridge configures this information in MTID 0 only. ')
ieee8021SpbTopIxDynamicEntryTopIx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 3, 1, 1), IEEE8021SpbMTID())
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicEntryTopIx.setReference('12.25.3.1.2, 28.12')
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicEntryTopIx.setDescription('ISIS-SPB Topology Index identifier Each Topology Index defines logical topology and is used to enable multiple SPB instances within several ISIS instances.')
ieee8021SpbTopIxDynamicEntryAgreeDigest = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 3, 1, 2), IEEE8021SpbDigest()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicEntryAgreeDigest.setReference('12.25.3.1.3, 28.4')
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicEntryAgreeDigest.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicEntryAgreeDigest.setDescription('The topology agreement digest value. Digest of all topology information, as in clause 28.4.')
ieee8021SpbTopIxDynamicEntryMCID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 3, 1, 3), IEEE8021SpbMCID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicEntryMCID.setReference('12.25.3.1.3, 13.8')
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicEntryMCID.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicEntryMCID.setDescription('The MST Identifier MCID. The MCID is a digest of the VID to MSTID configuration table which determines the Base VIDs enabled for SPBV and SPBM.')
ieee8021SpbTopIxDynamicEntryAuxMCID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 3, 1, 4), IEEE8021SpbMCID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicEntryAuxMCID.setReference('12.25.3.1.3, 28.9')
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicEntryAuxMCID.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicEntryAuxMCID.setDescription('The aux MST Identifier for migration. Either MCID or AuxMCID must match for adjacency to form.')
ieee8021SpbEctStaticTable = MibTable((1, 3, 111, 2, 802, 1, 1, 26, 1, 4), )
if mibBuilder.loadTexts: ieee8021SpbEctStaticTable.setReference('12.25.4')
if mibBuilder.loadTexts: ieee8021SpbEctStaticTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbEctStaticTable.setDescription('The Equal Cost Tree (ECT) static configuration table.')
ieee8021SpbEctStaticTableEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 26, 1, 4, 1), ).setIndexNames((0, "IEEE8021-SPB-MIB", "ieee8021SpbEctStaticEntryTopIx"), (0, "IEEE8021-SPB-MIB", "ieee8021SpbEctStaticEntryBaseVid"))
if mibBuilder.loadTexts: ieee8021SpbEctStaticTableEntry.setReference('12.25.4')
if mibBuilder.loadTexts: ieee8021SpbEctStaticTableEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbEctStaticTableEntry.setDescription('The Equal Cost Tree static configuration Table defines the ECT-ALGORITHM for the Base VID and if SPBV is used for the SPVID. ')
ieee8021SpbEctStaticEntryTopIx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 4, 1, 1), IEEE8021SpbMTID())
if mibBuilder.loadTexts: ieee8021SpbEctStaticEntryTopIx.setReference('12.25.4.2.2, 12.25.4.2.3, 28.12')
if mibBuilder.loadTexts: ieee8021SpbEctStaticEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbEctStaticEntryTopIx.setDescription('The ISIS Topology Index identifier to which this instance belongs. Each Topology Index defines logical topology and is used to enable multiple SPB instances within several ISIS instances.')
ieee8021SpbEctStaticEntryBaseVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 4, 1, 2), VlanIdOrAny())
if mibBuilder.loadTexts: ieee8021SpbEctStaticEntryBaseVid.setReference('12.25.4.2.3, 3.3')
if mibBuilder.loadTexts: ieee8021SpbEctStaticEntryBaseVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbEctStaticEntryBaseVid.setDescription('Base VID to use for this ECT-ALGORITHM. Traffic B-VID (SPBM) or Management VID (SPBV). A Base VID value of 4095 is a wildcard for any Base VID assigned to SPB operation.')
ieee8021SpbEctStaticEntryEctAlgorithm = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 4, 1, 3), IEEE8021SpbEctAlgorithm().clone('00-80-c2-01')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021SpbEctStaticEntryEctAlgorithm.setReference('12.25.4.1, 12.25.4.2.3, 3.6')
if mibBuilder.loadTexts: ieee8021SpbEctStaticEntryEctAlgorithm.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbEctStaticEntryEctAlgorithm.setDescription('This identifies the tie-breaking algorithms used in Shortest Path Tree computation. Values range from 00-80-c2-01 to 00-80-c2-16 for 802.1 for each the 16 ECT behaviors. The default is 00-80-c2-01 the LowPATHID. This object is persistent.')
ieee8021SpbvEctStaticEntrySpvid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 4, 1, 4), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021SpbvEctStaticEntrySpvid.setReference('12.25.4.2.3, 3.16')
if mibBuilder.loadTexts: ieee8021SpbvEctStaticEntrySpvid.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbvEctStaticEntrySpvid.setDescription('If SPBV mode this is the VID originating from this bridge. This input is ignored if ieee8021SpbvSysMode is auto(1), but the output always returns the SPVID in use. Otherwise in SPBM this is empty, should be set = 0. This object is persistent.')
ieee8021SpbEctStaticEntryRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021SpbEctStaticEntryRowStatus.setReference('12.25.4.2.3')
if mibBuilder.loadTexts: ieee8021SpbEctStaticEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbEctStaticEntryRowStatus.setDescription('The object indicates the status of an entry, and is used to create/delete entries. This object is persistent.')
ieee8021SpbEctDynamicTable = MibTable((1, 3, 111, 2, 802, 1, 1, 26, 1, 5), )
if mibBuilder.loadTexts: ieee8021SpbEctDynamicTable.setReference('12.25.5')
if mibBuilder.loadTexts: ieee8021SpbEctDynamicTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbEctDynamicTable.setDescription('A table containing Data about the ECT behavior on this bridge')
ieee8021SpbEctDynamicTableEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 26, 1, 5, 1), ).setIndexNames((0, "IEEE8021-SPB-MIB", "ieee8021SpbEctDynamicEntryTopIx"), (0, "IEEE8021-SPB-MIB", "ieee8021SpbEctDynamicEntryBaseVid"))
if mibBuilder.loadTexts: ieee8021SpbEctDynamicTableEntry.setReference('12.25.5')
if mibBuilder.loadTexts: ieee8021SpbEctDynamicTableEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbEctDynamicTableEntry.setDescription('This table can be used to check that neighbor bridges are using the same ECT Algorithm. ')
ieee8021SpbEctDynamicEntryTopIx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 5, 1, 1), IEEE8021SpbMTID())
if mibBuilder.loadTexts: ieee8021SpbEctDynamicEntryTopIx.setReference('12.25.5.1.2, 12.25.5.1.3, 28.12')
if mibBuilder.loadTexts: ieee8021SpbEctDynamicEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbEctDynamicEntryTopIx.setDescription('The ISIS Topology Index identifier to which this instance belongs. Each Topology Index defines logical topology and is used to enable multiple SPB instances within several ISIS instances.')
ieee8021SpbEctDynamicEntryBaseVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 5, 1, 2), VlanId())
if mibBuilder.loadTexts: ieee8021SpbEctDynamicEntryBaseVid.setReference('12.25.5.1.2, 12.25.5.1.3, 3.3')
if mibBuilder.loadTexts: ieee8021SpbEctDynamicEntryBaseVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbEctDynamicEntryBaseVid.setDescription('The Base VID being queried. Base VID define the mode in the VID to MSTID table. ')
ieee8021SpbEctDynamicEntryMode = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 5, 1, 3), IEEE8021SpbEctMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbEctDynamicEntryMode.setReference('12.25.5.1.3, 28.12.4')
if mibBuilder.loadTexts: ieee8021SpbEctDynamicEntryMode.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbEctDynamicEntryMode.setDescription('The Operating mode of this Base VID. SPBM (=2), SPBV (=3), or disabled or none (1).')
ieee8021SpbEctDynamicEntryLocalUse = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbEctDynamicEntryLocalUse.setReference('12.25.5.1.3, 28.12.4')
if mibBuilder.loadTexts: ieee8021SpbEctDynamicEntryLocalUse.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbEctDynamicEntryLocalUse.setDescription('This value indicates the ECT is in use locally (True/False) for this Base Vid. ECTs may be defined before services are assigned. ')
ieee8021SpbEctDynamicEntryRemoteUse = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 5, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbEctDynamicEntryRemoteUse.setReference('12.25.5.1.3, 28.12.4')
if mibBuilder.loadTexts: ieee8021SpbEctDynamicEntryRemoteUse.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbEctDynamicEntryRemoteUse.setDescription('This value indicates the remote ECT is in use (True/False) for this Base Vid. ECTs may be defined before services are assigned.')
ieee8021SpbEctDynamicEntryIngressCheckDiscards = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbEctDynamicEntryIngressCheckDiscards.setReference('12.25.5.1.3')
if mibBuilder.loadTexts: ieee8021SpbEctDynamicEntryIngressCheckDiscards.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbEctDynamicEntryIngressCheckDiscards.setDescription('The number of SA check failures on this ECT VID This is referred to as the ingress check and this counter increments whenever a packet is discarded for this VID because it has not come from an interface which is on the shortest path to its SA. ')
ieee8021SpbAdjStaticTable = MibTable((1, 3, 111, 2, 802, 1, 1, 26, 1, 6), )
if mibBuilder.loadTexts: ieee8021SpbAdjStaticTable.setReference('12.25.6')
if mibBuilder.loadTexts: ieee8021SpbAdjStaticTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjStaticTable.setDescription('A table containing the SPB configuration data for a neighbor')
ieee8021SpbAdjStaticTableEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 26, 1, 6, 1), ).setIndexNames((0, "IEEE8021-SPB-MIB", "ieee8021SpbAdjStaticEntryTopIx"), (0, "IEEE8021-SPB-MIB", "ieee8021SpbAdjStaticEntryIfIndex"))
if mibBuilder.loadTexts: ieee8021SpbAdjStaticTableEntry.setReference('12.25.6')
if mibBuilder.loadTexts: ieee8021SpbAdjStaticTableEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjStaticTableEntry.setDescription('This table can be used to display the interfaces and metrics of a neighbor bridge. ')
ieee8021SpbAdjStaticEntryTopIx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 6, 1, 1), IEEE8021SpbMTID())
if mibBuilder.loadTexts: ieee8021SpbAdjStaticEntryTopIx.setReference('12.25.6.1.2, 12.25.6.1.3, 28.12')
if mibBuilder.loadTexts: ieee8021SpbAdjStaticEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjStaticEntryTopIx.setDescription('The ISIS Topology Index identifier to which this instance belongs. Each Topology Index defines logical topology and is used to enable multiple SPB instances within several ISIS instances.')
ieee8021SpbAdjStaticEntryIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 6, 1, 2), InterfaceIndexOrZero())
if mibBuilder.loadTexts: ieee8021SpbAdjStaticEntryIfIndex.setReference('12.25.6.1.2, 12.25.6.1.3')
if mibBuilder.loadTexts: ieee8021SpbAdjStaticEntryIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjStaticEntryIfIndex.setDescription('The System interface/index which defines this adjacency. A value of 0 is a wildcard for any interface on which SPB Operation is supported.')
ieee8021SpbAdjStaticEntryMetric = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 6, 1, 3), IEEE8021SpbLinkMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021SpbAdjStaticEntryMetric.setReference('12.25.6.1.2, 12.25.6.1.3, 28.12.7')
if mibBuilder.loadTexts: ieee8021SpbAdjStaticEntryMetric.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjStaticEntryMetric.setDescription('The ieee8021Spb metric (incremental cost) to this peer. The contribution of this link to total path cost. Recommended values are inversely proportional to link speed. Range is (1..16777215) where 16777215 (0xFFFFFF) is infinity; infinity signifies that the adjacency is UP, but is not to be used for traffic. This object is persistent.')
ieee8021SpbAdjStaticEntryIfAdminState = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 6, 1, 4), IEEE8021SpbAdjState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021SpbAdjStaticEntryIfAdminState.setReference('12.25.6.1.2, 12.25.6.1.3')
if mibBuilder.loadTexts: ieee8021SpbAdjStaticEntryIfAdminState.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjStaticEntryIfAdminState.setDescription('The administrative state of this interface/port. Up is the default. This object is persistent.')
ieee8021SpbAdjStaticEntryRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021SpbAdjStaticEntryRowStatus.setReference('12.25.6.1.3')
if mibBuilder.loadTexts: ieee8021SpbAdjStaticEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjStaticEntryRowStatus.setDescription('The object indicates the status of an entry, and is used to create/delete entries. This object is persistent.')
ieee8021SpbAdjDynamicTable = MibTable((1, 3, 111, 2, 802, 1, 1, 26, 1, 7), )
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicTable.setReference('12.25.7')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicTable.setDescription('The SPB neighbor dynamic information table.')
ieee8021SpbAdjDynamicTableEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 26, 1, 7, 1), ).setIndexNames((0, "IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryTopIx"), (0, "IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryIfIndex"), (0, "IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryPeerSysId"))
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicTableEntry.setReference('12.25.7')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicTableEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicTableEntry.setDescription('This table is used to determine operational values of digests and interfaces of neighbor bridges.')
ieee8021SpbAdjDynamicEntryTopIx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 7, 1, 1), IEEE8021SpbMTID())
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryTopIx.setReference('12.25.7.1.2, 12.25.7.1.3, 28.12')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryTopIx.setDescription('The ISIS Topology Index identifier to which this instance belongs. Each Topology Index defines logical topology and is used to enable multiple SPB instances within several ISIS instances.')
ieee8021SpbAdjDynamicEntryIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 7, 1, 2), InterfaceIndexOrZero())
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryIfIndex.setReference('12.25.7.1.2, 12.25.7.1.3')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryIfIndex.setDescription('System interface/index which defines this adjacency A value of 0 is a wildcard for any interface on which SPB Operation is enabled.')
ieee8021SpbAdjDynamicEntryPeerSysId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 7, 1, 3), MacAddress())
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerSysId.setReference('12.25.7.1.3, 3.21')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerSysId.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerSysId.setDescription('The SPB System Identifier of this peer. This is used to identify a neighbor uniquely.')
ieee8021SpbAdjDynamicEntryPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 7, 1, 4), IEEE8021BridgePortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPort.setReference('12.25.7.1.3')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPort.setDescription('The port number to reach this adjacency.')
ieee8021SpbAdjDynamicEntryIfOperState = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 7, 1, 5), IEEE8021SpbAdjState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryIfOperState.setReference('12.25.7.1.3')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryIfOperState.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryIfOperState.setDescription('The operational state of this port. up, down or testing (in test).')
ieee8021SpbAdjDynamicEntryPeerSysName = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 7, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerSysName.setReference('12.25.7.1.3')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerSysName.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerSysName.setDescription('IS-IS system name of peer. This is the ASCII name assigned to the bridge to aid management. It is the same as the ieee8021SpbSysName. ')
ieee8021SpbAdjDynamicEntryPeerAgreeDigest = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 7, 1, 7), IEEE8021SpbDigest()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerAgreeDigest.setReference('12.25.7.1.3, 28.4')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerAgreeDigest.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerAgreeDigest.setDescription("The peer topology agreement digest value (all of the elements defined in clause 28.4). If it does not match this bridge's digest it indicates loss of synchronization.")
ieee8021SpbAdjDynamicEntryPeerMCID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 7, 1, 8), IEEE8021SpbMCID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerMCID.setReference('12.25.7.1.3, 13.8')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerMCID.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerMCID.setDescription('The peer MST Identifier MCID. The MCID is a digest of the VID to MSTID configuration table which determines the Base VIDs enabled for SPBV and SPBM.')
ieee8021SpbAdjDynamicEntryPeerAuxMCID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 7, 1, 9), IEEE8021SpbMCID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerAuxMCID.setReference('12.25.7.1.3, 27.4.1, 28.12.2')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerAuxMCID.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerAuxMCID.setDescription('The peer auxiliary MST Identifier. This MCID is used for migration.')
ieee8021SpbAdjDynamicEntryLocalCircuitID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 7, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryLocalCircuitID.setReference('12.25.7.1.3, 28.11')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryLocalCircuitID.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryLocalCircuitID.setDescription('The value used by IS-IS to identify this adjacency locally.')
ieee8021SpbAdjDynamicEntryPeerLocalCircuitID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerLocalCircuitID.setReference('12.25.7.1.3, 28.11')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerLocalCircuitID.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerLocalCircuitID.setDescription('The value used by peer IS-IS to identify this adjacency remotely.')
ieee8021SpbAdjDynamicEntryPortIdentifier = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 7, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPortIdentifier.setReference('12.25.7.1.3, 28.11')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPortIdentifier.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPortIdentifier.setDescription('The value for this bridge which has been selected by IS-IS to form this adjacency if there is more than 1 candidate link.')
ieee8021SpbAdjDynamicEntryPeerPortIdentifier = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 7, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerPortIdentifier.setReference('12.25.7.1.3, 28.11')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerPortIdentifier.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryPeerPortIdentifier.setDescription('The value for peer port Identifier selected by IS-IS to form this adjacency if there is more than 1 candidate link.')
ieee8021SpbAdjDynamicEntryIsisCircIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 7, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryIsisCircIndex.setReference('12.25.7.1.3')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryIsisCircIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicEntryIsisCircIndex.setDescription('The isisCircTable reference. This allows cross referencing to an IS-IS MIB.')
ieee8021SpbTopNodeTable = MibTable((1, 3, 111, 2, 802, 1, 1, 26, 1, 8), )
if mibBuilder.loadTexts: ieee8021SpbTopNodeTable.setReference('12.25.8')
if mibBuilder.loadTexts: ieee8021SpbTopNodeTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopNodeTable.setDescription('Table of network specific bridge information.')
ieee8021SpbTopNodeTableEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 26, 1, 8, 1), ).setIndexNames((0, "IEEE8021-SPB-MIB", "ieee8021SpbTopNodeEntryTopIx"), (0, "IEEE8021-SPB-MIB", "ieee8021SpbTopNodeEntrySysId"))
if mibBuilder.loadTexts: ieee8021SpbTopNodeTableEntry.setReference('12.25.8')
if mibBuilder.loadTexts: ieee8021SpbTopNodeTableEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopNodeTableEntry.setDescription('This table is used to display system level information about bridges in the network. ')
ieee8021SpbTopNodeEntryTopIx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 8, 1, 1), IEEE8021SpbMTID())
if mibBuilder.loadTexts: ieee8021SpbTopNodeEntryTopIx.setReference('12.25.8.1.2, 12.25.8.1.3, 28.12')
if mibBuilder.loadTexts: ieee8021SpbTopNodeEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopNodeEntryTopIx.setDescription('The ISIS Topology Index identifier to which this instance belongs. Each Topology Index defines logical topology and is used to enable multiple SPB instances within several ISIS instances.')
ieee8021SpbTopNodeEntrySysId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 8, 1, 2), MacAddress())
if mibBuilder.loadTexts: ieee8021SpbTopNodeEntrySysId.setReference('12.25.8.1.2, 12.25.8.1.3, 3.21')
if mibBuilder.loadTexts: ieee8021SpbTopNodeEntrySysId.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopNodeEntrySysId.setDescription('The IS-IS System ID of a bridge in the SPB LSP database and hence the network. A value of 0 is a wildcard for all System identifiers.')
ieee8021SpbTopNodeEntryBridgePriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 8, 1, 3), IEEE8021SpbBridgePriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbTopNodeEntryBridgePriority.setReference('12.25.8.1.3, 13.26.3')
if mibBuilder.loadTexts: ieee8021SpbTopNodeEntryBridgePriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopNodeEntryBridgePriority.setDescription('The Bridge Priority of the bridge in the LSP database. This is a 16 bit quantity which ranks this SPB Bridge relative to others when breaking ties. This priority is the high 16 bits of the Bridge Identifier. Its impact depends on the tie breaking algorithm. Recommend values 0..15 be assigned to core switches to ensure diversity of the ECT Algorithms.')
ieee8021SpbmTopNodeEntrySPsourceID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 8, 1, 4), IEEE8021SpbmSPsourceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbmTopNodeEntrySPsourceID.setReference('12.25.8.1.3, 3.17')
if mibBuilder.loadTexts: ieee8021SpbmTopNodeEntrySPsourceID.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbmTopNodeEntrySPsourceID.setDescription('The Shortest Path Source Identifier. It is the high order 3 bytes for Group Address DA from this bridge. Note that only the 20 bits not including the top 4 bits are the SPSourceID.')
ieee8021SpbTopNodeEntrySysName = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 8, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbTopNodeEntrySysName.setReference('12.25.8.1.3')
if mibBuilder.loadTexts: ieee8021SpbTopNodeEntrySysName.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopNodeEntrySysName.setDescription('The System Name. A Human readable name of this bridge This is used to aid in management and is used in place of the System identifier in many commands and displays.')
ieee8021SpbTopEctTable = MibTable((1, 3, 111, 2, 802, 1, 1, 26, 1, 9), )
if mibBuilder.loadTexts: ieee8021SpbTopEctTable.setReference('12.25.9')
if mibBuilder.loadTexts: ieee8021SpbTopEctTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEctTable.setDescription('Table of all ECT use in the network')
ieee8021SpbTopEctTableEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 26, 1, 9, 1), ).setIndexNames((0, "IEEE8021-SPB-MIB", "ieee8021SpbTopEctEntryTopIx"), (0, "IEEE8021-SPB-MIB", "ieee8021SpbTopEctEntrySysId"), (0, "IEEE8021-SPB-MIB", "ieee8021SpbTopEctEntryBaseVid"))
if mibBuilder.loadTexts: ieee8021SpbTopEctTableEntry.setReference('12.25.9')
if mibBuilder.loadTexts: ieee8021SpbTopEctTableEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEctTableEntry.setDescription('This table lists bridges and the ECT Algorithms configured and in use. ')
ieee8021SpbTopEctEntryTopIx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 9, 1, 1), IEEE8021SpbMTID())
if mibBuilder.loadTexts: ieee8021SpbTopEctEntryTopIx.setReference('12.25.9.1.2, 12.25.9.1.3')
if mibBuilder.loadTexts: ieee8021SpbTopEctEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEctEntryTopIx.setDescription('The ISIS Topology Index identifier to which this instance belongs. Each Topology Index defines logical topology and is used to enable multiple SPB instances within several ISIS instances.')
ieee8021SpbTopEctEntrySysId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 9, 1, 2), MacAddress())
if mibBuilder.loadTexts: ieee8021SpbTopEctEntrySysId.setReference('12.25.9.1.2, 12.25.9.1.3, 3.21')
if mibBuilder.loadTexts: ieee8021SpbTopEctEntrySysId.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEctEntrySysId.setDescription('The system ID which is using a particular ECT. A value of 0 is a wildcard for all System identifiers.')
ieee8021SpbTopEctEntryBaseVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 9, 1, 3), VlanIdOrAny())
if mibBuilder.loadTexts: ieee8021SpbTopEctEntryBaseVid.setReference('12.25.9.1.2, 12.25.9.1.3, 3.3')
if mibBuilder.loadTexts: ieee8021SpbTopEctEntryBaseVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEctEntryBaseVid.setDescription('Base VID related to this algorithm In the case of SPBM this is the B-VID that carries traffic for this ECT-ALGORITHM. In the case of SPBV this is the Base-VID used for management. A Base VID value of 4095 is a wildcard for any Base VID assigned to SPB operation.')
ieee8021SpbTopEctEntryEctAlgorithm = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 9, 1, 4), IEEE8021SpbEctAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbTopEctEntryEctAlgorithm.setReference('12.25.9.1.3, 3.6')
if mibBuilder.loadTexts: ieee8021SpbTopEctEntryEctAlgorithm.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEctEntryEctAlgorithm.setDescription('The ECT-ALGORITHM in use. A 32 bit number. The ISIS Topology Index identifier to which this instance belongs. Each Topology Index defines logical topology and is used to enable multiple SPB instances within several ISIS instances.; the upper 24 bits are an OUI and the lower 8 bits are an index. This creates a world-wide unique identity for the computation that will be using the VID thus ensuring consistency.')
ieee8021SpbTopEctEntryMode = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 9, 1, 5), IEEE8021SpbEctMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbTopEctEntryMode.setReference('12.25.9.1.3')
if mibBuilder.loadTexts: ieee8021SpbTopEctEntryMode.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEctEntryMode.setDescription('Operating mode : SPBM (=2) or SPBV (=3)')
ieee8021SpbvTopEctSysMode = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 9, 1, 6), IEEE8021SpbMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbvTopEctSysMode.setReference('12.25.9.1.3, 3.18')
if mibBuilder.loadTexts: ieee8021SpbvTopEctSysMode.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbvTopEctSysMode.setDescription('Indication of supporting SPBV mode auto(=1)/manual(=2) auto => SPBV mode and auto allocate SPVIDs. manual => SPBV mode and manually assign SPVIDs.')
ieee8021SpbvTopEctEntrySpvid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 9, 1, 7), VlanIdOrNone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbvTopEctEntrySpvid.setReference('12.25.9.1.3, 3.14')
if mibBuilder.loadTexts: ieee8021SpbvTopEctEntrySpvid.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbvTopEctEntrySpvid.setDescription('SPVID in V mode The VID this bridge will use to originate traffic using this ECT-ALGORITHM when running in SPBV mode.')
ieee8021SpbTopEctEntryLocalUse = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 9, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbTopEctEntryLocalUse.setReference('12.25.9.1.3, 28.12.5(1')
if mibBuilder.loadTexts: ieee8021SpbTopEctEntryLocalUse.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEctEntryLocalUse.setDescription('Is this ECT-ALGORITHM in use locally by advertising bridge :- TRUE or FALSE. This is used to help with disruption-free migration between ECT-ALGORITHMs. Changes are only allowed if this flag is FALSE.')
ieee8021SpbTopEdgeTable = MibTable((1, 3, 111, 2, 802, 1, 1, 26, 1, 10), )
if mibBuilder.loadTexts: ieee8021SpbTopEdgeTable.setReference('12.25.10')
if mibBuilder.loadTexts: ieee8021SpbTopEdgeTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEdgeTable.setDescription('A Table of edges in network (not duplicated), but each link will appear as two entries, one ordered {near-far}, the other {far-near}.')
ieee8021SpbTopEdgeTableEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 26, 1, 10, 1), ).setIndexNames((0, "IEEE8021-SPB-MIB", "ieee8021SpbTopEdgeEntryTopIx"), (0, "IEEE8021-SPB-MIB", "ieee8021SpbTopEdgeEntrySysIdNear"), (0, "IEEE8021-SPB-MIB", "ieee8021SpbTopEdgeEntrySysIdFar"))
if mibBuilder.loadTexts: ieee8021SpbTopEdgeTableEntry.setReference('12.25.10')
if mibBuilder.loadTexts: ieee8021SpbTopEdgeTableEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEdgeTableEntry.setDescription('The table lists information about bridge edges (links).')
ieee8021SpbTopEdgeEntryTopIx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 10, 1, 1), IEEE8021SpbMTID())
if mibBuilder.loadTexts: ieee8021SpbTopEdgeEntryTopIx.setReference('12.25.10.1.2, 12.25.10.1.3, 28.12')
if mibBuilder.loadTexts: ieee8021SpbTopEdgeEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEdgeEntryTopIx.setDescription('The ISIS Topology Index identifier to which this instance belongs. Each Topology Index defines logical topology and is used to enable multiple SPB instances within several ISIS instances.')
ieee8021SpbTopEdgeEntrySysIdNear = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 10, 1, 2), MacAddress())
if mibBuilder.loadTexts: ieee8021SpbTopEdgeEntrySysIdNear.setReference('12.25.10.1.2, 12.25.10.1.3, 3.21')
if mibBuilder.loadTexts: ieee8021SpbTopEdgeEntrySysIdNear.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEdgeEntrySysIdNear.setDescription('The System ID of near bridge (the bridge reporting the adjacency). A value of 0 is a wildcard for all System identifiers.')
ieee8021SpbTopEdgeEntrySysIdFar = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 10, 1, 3), MacAddress())
if mibBuilder.loadTexts: ieee8021SpbTopEdgeEntrySysIdFar.setReference('12.25.10.1.2, 12.25.10.1.3, 3.21')
if mibBuilder.loadTexts: ieee8021SpbTopEdgeEntrySysIdFar.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEdgeEntrySysIdFar.setDescription('The System ID of far bridge (the neighbor of the bridge reporting). A value of 0 is a wildcard for all System identifiers.')
ieee8021SpbTopEdgeEntryMetricNear2Far = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 10, 1, 4), IEEE8021SpbLinkMetric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbTopEdgeEntryMetricNear2Far.setReference('12.25.10.1.3, 28.12.7')
if mibBuilder.loadTexts: ieee8021SpbTopEdgeEntryMetricNear2Far.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEdgeEntryMetricNear2Far.setDescription('The metric used on this edge advertised by near end This is the raw value. If it is less than the MetricFar2Near (below), the MetricFar2Near is used as the SPF metric in both directions.')
ieee8021SpbTopEdgeEntryMetricFar2Near = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 10, 1, 5), IEEE8021SpbLinkMetric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbTopEdgeEntryMetricFar2Near.setReference('12.25.10.1.3, 28.12.7')
if mibBuilder.loadTexts: ieee8021SpbTopEdgeEntryMetricFar2Near.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEdgeEntryMetricFar2Near.setDescription('The metric used on this edge advertised by far end This is the raw value. If it is less than the MetricNear2Far (above), the MetricNear2Far is used as the SPF metric in both directions.')
ieee8021SpbmTopSrvTable = MibTable((1, 3, 111, 2, 802, 1, 1, 26, 1, 11), )
if mibBuilder.loadTexts: ieee8021SpbmTopSrvTable.setReference('12.25.11')
if mibBuilder.loadTexts: ieee8021SpbmTopSrvTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbmTopSrvTable.setDescription('All SPBM PBB encapsulated services in this network.')
ieee8021SpbmTopSrvTableEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 26, 1, 11, 1), ).setIndexNames((0, "IEEE8021-SPB-MIB", "ieee8021SpbmTopSrvEntryTopIx"), (0, "IEEE8021-SPB-MIB", "ieee8021SpbmTopSrvEntrySysId"), (0, "IEEE8021-SPB-MIB", "ieee8021SpbmTopSrvEntryIsid"), (0, "IEEE8021-SPB-MIB", "ieee8021SpbmTopSrvEntryBaseVid"), (0, "IEEE8021-SPB-MIB", "ieee8021SpbmTopSrvEntryMac"))
if mibBuilder.loadTexts: ieee8021SpbmTopSrvTableEntry.setReference('12.25.11')
if mibBuilder.loadTexts: ieee8021SpbmTopSrvTableEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbmTopSrvTableEntry.setDescription('This table displays information about PBB services received in the LSP data base. The Service Identifier is associated with the MAC address and Base VID of the bridge that originates or terminates the service. ')
ieee8021SpbmTopSrvEntryTopIx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 11, 1, 1), IEEE8021SpbMTID())
if mibBuilder.loadTexts: ieee8021SpbmTopSrvEntryTopIx.setReference('12.25.11.1.2, 12.25.11.1.3, 28.12')
if mibBuilder.loadTexts: ieee8021SpbmTopSrvEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbmTopSrvEntryTopIx.setDescription('Entry of one The ISIS Topology Index identifier to which this instance belongs. Each Topology Index defines logical topology and is used to enable multiple SPB instances within several ISIS instances.')
ieee8021SpbmTopSrvEntrySysId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 11, 1, 2), MacAddress())
if mibBuilder.loadTexts: ieee8021SpbmTopSrvEntrySysId.setReference('12.25.11.1.2, 12.25.11.1.3, 3.21')
if mibBuilder.loadTexts: ieee8021SpbmTopSrvEntrySysId.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbmTopSrvEntrySysId.setDescription('The System identifier this service originates/terminates on. A value of 0 is a wildcard for all System identifiers.')
ieee8021SpbmTopSrvEntryIsid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 11, 1, 3), IEEE8021SpbServiceIdentifierOrAny())
if mibBuilder.loadTexts: ieee8021SpbmTopSrvEntryIsid.setReference('12.25.11.1.2, 12.25.11.1.3, 28.12.10')
if mibBuilder.loadTexts: ieee8021SpbmTopSrvEntryIsid.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbmTopSrvEntryIsid.setDescription('An ISID (service) originating/terminating on this bridge. A value of 0 is a wildcard for any ISID.')
ieee8021SpbmTopSrvEntryBaseVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 11, 1, 4), VlanIdOrAny())
if mibBuilder.loadTexts: ieee8021SpbmTopSrvEntryBaseVid.setReference('12.25.11.1.2, 12.25.11.1.3, 28.12.10')
if mibBuilder.loadTexts: ieee8021SpbmTopSrvEntryBaseVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbmTopSrvEntryBaseVid.setDescription('The Base VID associated with this service. The Base VID determines the ECT Algorithm that is associated with this service. A Base VID value of 4095 is a wildcard for any Base VID assigned to SPB operation.')
ieee8021SpbmTopSrvEntryMac = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 11, 1, 5), MacAddress())
if mibBuilder.loadTexts: ieee8021SpbmTopSrvEntryMac.setReference('12.25.11.1.3, 28.12.10')
if mibBuilder.loadTexts: ieee8021SpbmTopSrvEntryMac.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbmTopSrvEntryMac.setDescription('The MAC address associated with a service. An additional nodal MAC address by which an I-SID can be reached may be advertised, in which case traffic to this MAC follows a forwarding path identical to that taken to reach the corresponding SYSID (nodal) MAC. If no additional MAC is advertised this will be the SYSID MAC. A value of 0 is a wildcard for the MAC address.')
ieee8021SpbmTopSrvEntryIsidFlags = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 11, 1, 6), IEEE8021PbbIngressEgress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbmTopSrvEntryIsidFlags.setReference('12.25.11.1.2, 12.25.11.1.3, 28.12.10')
if mibBuilder.loadTexts: ieee8021SpbmTopSrvEntryIsidFlags.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbmTopSrvEntryIsidFlags.setDescription('A pair of flags defining the attributes of this service. These specify independently whether ingress frames to the SPBM region should be transmitted within it, and whether frames received from the SPBM region are required egress it.')
ieee8021SpbvTopSrvTable = MibTable((1, 3, 111, 2, 802, 1, 1, 26, 1, 12), )
if mibBuilder.loadTexts: ieee8021SpbvTopSrvTable.setReference('12.25.12')
if mibBuilder.loadTexts: ieee8021SpbvTopSrvTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbvTopSrvTable.setDescription('The SPBV group services in this network')
ieee8021SpbvTopSrvTableEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 26, 1, 12, 1), ).setIndexNames((0, "IEEE8021-SPB-MIB", "ieee8021SpbvTopSrvEntryTopIx"), (0, "IEEE8021-SPB-MIB", "ieee8021SpbvTopSrvEntrySysId"), (0, "IEEE8021-SPB-MIB", "ieee8021SpbvTopSrvEntryMMac"))
if mibBuilder.loadTexts: ieee8021SpbvTopSrvTableEntry.setReference('12.25.12')
if mibBuilder.loadTexts: ieee8021SpbvTopSrvTableEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbvTopSrvTableEntry.setDescription('This table displays information about SPBV group address. The group address is a associated with MAC address and Base VID of the bridge that originates or terminates the service.')
ieee8021SpbvTopSrvEntryTopIx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 12, 1, 1), IEEE8021SpbMTID())
if mibBuilder.loadTexts: ieee8021SpbvTopSrvEntryTopIx.setReference('12.25.12.1.2, 12.25.12.1.3, 28.12')
if mibBuilder.loadTexts: ieee8021SpbvTopSrvEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbvTopSrvEntryTopIx.setDescription('The ISIS Topology Index identifier to which this instance belongs. Each Topology Index defines logical topology and is used to enable multiple SPB instances within several ISIS instances.')
ieee8021SpbvTopSrvEntrySysId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 12, 1, 2), MacAddress())
if mibBuilder.loadTexts: ieee8021SpbvTopSrvEntrySysId.setReference('12.25.12.1.2, 12.25.12.1.3, 3.21')
if mibBuilder.loadTexts: ieee8021SpbvTopSrvEntrySysId.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbvTopSrvEntrySysId.setDescription('The System identifier advertising this group address. A value of 0 is a wildcard for all System identifiers.')
ieee8021SpbvTopSrvEntryMMac = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 12, 1, 3), MacAddress())
if mibBuilder.loadTexts: ieee8021SpbvTopSrvEntryMMac.setReference('12.25.12.1.2, 12.25.12.1.3, 28.12.9')
if mibBuilder.loadTexts: ieee8021SpbvTopSrvEntryMMac.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbvTopSrvEntryMMac.setDescription('This Group MAC address entry. A value of 0 is a wildcard for any Group MAC address. ')
ieee8021SpbvTopSrvEntryBaseVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 12, 1, 4), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbvTopSrvEntryBaseVid.setReference('12.25.12.1.3, 3.3')
if mibBuilder.loadTexts: ieee8021SpbvTopSrvEntryBaseVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbvTopSrvEntryBaseVid.setDescription('The Base VID associated with this service. The Base VID determines the ECT Algorithm that is associated with this service.')
ieee8021SpbvTopSrvEntryMMacFlags = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 26, 1, 12, 1, 5), IEEE8021PbbIngressEgress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021SpbvTopSrvEntryMMacFlags.setReference('12.25.12.1.3, 28.12.9')
if mibBuilder.loadTexts: ieee8021SpbvTopSrvEntryMMacFlags.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbvTopSrvEntryMMacFlags.setDescription('A pair of {ingress, egress} flags for this Group Address, defining transmit/receive or both. This enables filtering of Group addresses to interwork with MMRP.')
ieee8021SpbConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 26, 2))
ieee8021SpbGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 26, 2, 1))
ieee8021SpbCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 26, 2, 2))
ieee8021SpbSysGroupSPBM = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 1)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbSysAreaAddress"), ("IEEE8021-SPB-MIB", "ieee8021SpbSysId"), ("IEEE8021-SPB-MIB", "ieee8021SpbSysControlAddr"), ("IEEE8021-SPB-MIB", "ieee8021SpbSysName"), ("IEEE8021-SPB-MIB", "ieee8021SpbSysBridgePriority"), ("IEEE8021-SPB-MIB", "ieee8021SpbmSysSPSourceId"), ("IEEE8021-SPB-MIB", "ieee8021SpbmSysMode"), ("IEEE8021-SPB-MIB", "ieee8021SpbSysDigestConvention"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbSysGroupSPBM = ieee8021SpbSysGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbSysGroupSPBM.setDescription('The collection of objects used to represent ieee8021SpbSys')
ieee8021SpbMtidStaticTableGroupSPBM = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 2)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbMTidStaticEntryMtidOverload"), ("IEEE8021-SPB-MIB", "ieee8021SpbMtidStaticEntryRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbMtidStaticTableGroupSPBM = ieee8021SpbMtidStaticTableGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbMtidStaticTableGroupSPBM.setDescription('The collection of objects used to represent ieee8021SpbMtidStaticTable')
ieee8021SpbTopIxDynamicTableGroupSPBM = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 3)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbTopIxDynamicEntryAgreeDigest"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopIxDynamicEntryMCID"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopIxDynamicEntryAuxMCID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbTopIxDynamicTableGroupSPBM = ieee8021SpbTopIxDynamicTableGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicTableGroupSPBM.setDescription('The collection of objects used to represent ieee8021SpbTopIxDynamicTable')
ieee8021SpbEctStaticTableGroupSPBM = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 4)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbEctStaticEntryEctAlgorithm"), ("IEEE8021-SPB-MIB", "ieee8021SpbEctStaticEntryRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbEctStaticTableGroupSPBM = ieee8021SpbEctStaticTableGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbEctStaticTableGroupSPBM.setDescription('The collection of objects used to represent ieee8021SpbEctStaticTable')
ieee8021SpbEctDynamicTableGroupSPBM = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 5)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbEctDynamicEntryMode"), ("IEEE8021-SPB-MIB", "ieee8021SpbEctDynamicEntryLocalUse"), ("IEEE8021-SPB-MIB", "ieee8021SpbEctDynamicEntryRemoteUse"), ("IEEE8021-SPB-MIB", "ieee8021SpbEctDynamicEntryIngressCheckDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbEctDynamicTableGroupSPBM = ieee8021SpbEctDynamicTableGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbEctDynamicTableGroupSPBM.setDescription('The collection of objects used to represent ieee8021SpbEctDynamicTable')
ieee8021SpbAdjStaticTableGroupSPBM = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 6)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbAdjStaticEntryMetric"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjStaticEntryIfAdminState"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjStaticEntryRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbAdjStaticTableGroupSPBM = ieee8021SpbAdjStaticTableGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjStaticTableGroupSPBM.setDescription('The collection of objects used to represent ieee8021SpbAdjStaticTable')
ieee8021SpbAdjDynamicTableGroupSPBM = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 7)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryPort"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryIfOperState"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryPeerSysName"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryPeerAgreeDigest"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryPeerMCID"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryPeerAuxMCID"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryLocalCircuitID"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryPeerLocalCircuitID"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryPortIdentifier"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryPeerPortIdentifier"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryIsisCircIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbAdjDynamicTableGroupSPBM = ieee8021SpbAdjDynamicTableGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicTableGroupSPBM.setDescription('The collection of objects used to represent ieee8021SpbAdjDynamicTable')
ieee8021SpbTopNodeTableGroupSPBM = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 8)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbTopNodeEntryBridgePriority"), ("IEEE8021-SPB-MIB", "ieee8021SpbmTopNodeEntrySPsourceID"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopNodeEntrySysName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbTopNodeTableGroupSPBM = ieee8021SpbTopNodeTableGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopNodeTableGroupSPBM.setDescription('The collection of objects used to represent ieee8021SpbTopNodeTable')
ieee8021SpbTopEctTableGroupSPBM = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 9)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbTopEctEntryEctAlgorithm"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopEctEntryMode"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopEctEntryLocalUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbTopEctTableGroupSPBM = ieee8021SpbTopEctTableGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEctTableGroupSPBM.setDescription('The collection of objects used to represent ieee8021SpbTopEctTable')
ieee8021SpbTopEdgeTableGroupSPBM = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 10)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbTopEdgeEntryMetricNear2Far"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopEdgeEntryMetricFar2Near"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbTopEdgeTableGroupSPBM = ieee8021SpbTopEdgeTableGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEdgeTableGroupSPBM.setDescription('The collection of objects used to represent ieee8021SpbTopEdgeTable')
ieee8021SpbmTopSrvTableGroupSPBM = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 11)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbmTopSrvEntryIsidFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbmTopSrvTableGroupSPBM = ieee8021SpbmTopSrvTableGroupSPBM.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbmTopSrvTableGroupSPBM.setDescription('The collection of objects used to represent ieee8021SpbmTopSrvTable')
ieee8021SpbSysGroupSPBV = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 12)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbSysAreaAddress"), ("IEEE8021-SPB-MIB", "ieee8021SpbSysId"), ("IEEE8021-SPB-MIB", "ieee8021SpbSysControlAddr"), ("IEEE8021-SPB-MIB", "ieee8021SpbSysName"), ("IEEE8021-SPB-MIB", "ieee8021SpbSysBridgePriority"), ("IEEE8021-SPB-MIB", "ieee8021SpbvSysMode"), ("IEEE8021-SPB-MIB", "ieee8021SpbSysDigestConvention"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbSysGroupSPBV = ieee8021SpbSysGroupSPBV.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbSysGroupSPBV.setDescription('The collection of objects used to represent ieee8021SpbSys')
ieee8021SpbMtidStaticTableGroupSPBV = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 13)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbMTidStaticEntryMtidOverload"), ("IEEE8021-SPB-MIB", "ieee8021SpbMtidStaticEntryRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbMtidStaticTableGroupSPBV = ieee8021SpbMtidStaticTableGroupSPBV.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbMtidStaticTableGroupSPBV.setDescription('The collection of objects used to represent ieee8021SpbMtidStaticTable')
ieee8021SpbTopIxDynamicTableGroupSPBV = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 14)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbTopIxDynamicEntryAgreeDigest"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopIxDynamicEntryMCID"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopIxDynamicEntryAuxMCID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbTopIxDynamicTableGroupSPBV = ieee8021SpbTopIxDynamicTableGroupSPBV.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopIxDynamicTableGroupSPBV.setDescription('The collection of objects used to represent ieee8021SpbTopIxDynamicTable')
ieee8021SpbEctStaticTableGroupSPBV = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 15)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbEctStaticEntryEctAlgorithm"), ("IEEE8021-SPB-MIB", "ieee8021SpbvEctStaticEntrySpvid"), ("IEEE8021-SPB-MIB", "ieee8021SpbEctStaticEntryRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbEctStaticTableGroupSPBV = ieee8021SpbEctStaticTableGroupSPBV.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbEctStaticTableGroupSPBV.setDescription('The collection of objects used to represent ieee8021SpbEctStaticTable')
ieee8021SpbEctDynamicTableGroupSPBV = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 16)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbEctDynamicEntryMode"), ("IEEE8021-SPB-MIB", "ieee8021SpbEctDynamicEntryLocalUse"), ("IEEE8021-SPB-MIB", "ieee8021SpbEctDynamicEntryRemoteUse"), ("IEEE8021-SPB-MIB", "ieee8021SpbEctDynamicEntryIngressCheckDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbEctDynamicTableGroupSPBV = ieee8021SpbEctDynamicTableGroupSPBV.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbEctDynamicTableGroupSPBV.setDescription('The collection of objects used to represent ieee8021SpbEctDynamicTable')
ieee8021SpbAdjStaticTableGroupSPBV = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 17)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbAdjStaticEntryMetric"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjStaticEntryIfAdminState"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjStaticEntryRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbAdjStaticTableGroupSPBV = ieee8021SpbAdjStaticTableGroupSPBV.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjStaticTableGroupSPBV.setDescription('The collection of objects used to represent ieee8021SpbAdjStaticTable')
ieee8021SpbAdjDynamicTableGroupSPBV = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 18)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryPort"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryIfOperState"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryPeerSysName"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryPeerAgreeDigest"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryPeerMCID"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryPeerAuxMCID"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryLocalCircuitID"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryPeerLocalCircuitID"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryPortIdentifier"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryPeerPortIdentifier"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicEntryIsisCircIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbAdjDynamicTableGroupSPBV = ieee8021SpbAdjDynamicTableGroupSPBV.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbAdjDynamicTableGroupSPBV.setDescription('The collection of objects used to represent ieee8021SpbAdjDynamicTable')
ieee8021SpbTopNodeTableGroupSPBV = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 19)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbTopNodeEntryBridgePriority"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopNodeEntrySysName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbTopNodeTableGroupSPBV = ieee8021SpbTopNodeTableGroupSPBV.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopNodeTableGroupSPBV.setDescription('The collection of objects used to represent ieee8021SpbTopNodeTable')
ieee8021SpbTopEctTableGroupSPBV = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 20)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbTopEctEntryEctAlgorithm"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopEctEntryMode"), ("IEEE8021-SPB-MIB", "ieee8021SpbvTopEctSysMode"), ("IEEE8021-SPB-MIB", "ieee8021SpbvTopEctEntrySpvid"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopEctEntryLocalUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbTopEctTableGroupSPBV = ieee8021SpbTopEctTableGroupSPBV.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEctTableGroupSPBV.setDescription('The collection of objects used to represent ieee8021SpbTopEctTable')
ieee8021SpbTopEdgeTableGroupSPBV = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 21)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbTopEdgeEntryMetricNear2Far"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopEdgeEntryMetricFar2Near"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbTopEdgeTableGroupSPBV = ieee8021SpbTopEdgeTableGroupSPBV.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbTopEdgeTableGroupSPBV.setDescription('The collection of objects used to represent ieee8021SpbTopEdgeTable')
ieee8021SpbvTopSrvTableGroupSPBV = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 26, 2, 1, 22)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbvTopSrvEntryBaseVid"), ("IEEE8021-SPB-MIB", "ieee8021SpbvTopSrvEntryMMacFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbvTopSrvTableGroupSPBV = ieee8021SpbvTopSrvTableGroupSPBV.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbvTopSrvTableGroupSPBV.setDescription('The collection of objects used to represent ieee8021SpbvTopSrvTable')
ieee8021SpbComplianceSPBM = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 26, 2, 2, 1)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbSysGroupSPBM"), ("IEEE8021-SPB-MIB", "ieee8021SpbMtidStaticTableGroupSPBM"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopIxDynamicTableGroupSPBM"), ("IEEE8021-SPB-MIB", "ieee8021SpbEctStaticTableGroupSPBM"), ("IEEE8021-SPB-MIB", "ieee8021SpbEctDynamicTableGroupSPBM"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjStaticTableGroupSPBM"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicTableGroupSPBM"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopNodeTableGroupSPBM"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopEctTableGroupSPBM"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopEdgeTableGroupSPBM"), ("IEEE8021-SPB-MIB", "ieee8021SpbmTopSrvTableGroupSPBM"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbComplianceSPBM = ieee8021SpbComplianceSPBM.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbComplianceSPBM.setDescription('Compliance to IEEE 802.1 SPBM mode')
ieee8021SpbComplianceSPBV = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 26, 2, 2, 2)).setObjects(("IEEE8021-SPB-MIB", "ieee8021SpbSysGroupSPBV"), ("IEEE8021-SPB-MIB", "ieee8021SpbMtidStaticTableGroupSPBV"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopIxDynamicTableGroupSPBV"), ("IEEE8021-SPB-MIB", "ieee8021SpbEctStaticTableGroupSPBV"), ("IEEE8021-SPB-MIB", "ieee8021SpbEctDynamicTableGroupSPBV"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjStaticTableGroupSPBV"), ("IEEE8021-SPB-MIB", "ieee8021SpbAdjDynamicTableGroupSPBV"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopNodeTableGroupSPBV"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopEctTableGroupSPBV"), ("IEEE8021-SPB-MIB", "ieee8021SpbTopEdgeTableGroupSPBV"), ("IEEE8021-SPB-MIB", "ieee8021SpbvTopSrvTableGroupSPBV"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021SpbComplianceSPBV = ieee8021SpbComplianceSPBV.setStatus('current')
if mibBuilder.loadTexts: ieee8021SpbComplianceSPBV.setDescription('Compliance to IEEE 802.1 SPBV mode')
mibBuilder.exportSymbols("IEEE8021-SPB-MIB", IEEE8021SpbmSPsourceId=IEEE8021SpbmSPsourceId, ieee8021SpbTopNodeTable=ieee8021SpbTopNodeTable, ieee8021SpbAdjDynamicEntryPort=ieee8021SpbAdjDynamicEntryPort, ieee8021SpbTopIx=ieee8021SpbTopIx, ieee8021SpbEctStaticTable=ieee8021SpbEctStaticTable, ieee8021SpbSysGroupSPBV=ieee8021SpbSysGroupSPBV, ieee8021SpbAdjDynamicEntryPeerMCID=ieee8021SpbAdjDynamicEntryPeerMCID, ieee8021SpbmTopSrvTableEntry=ieee8021SpbmTopSrvTableEntry, ieee8021SpbMib=ieee8021SpbMib, ieee8021SpbAdjStaticEntryIfAdminState=ieee8021SpbAdjStaticEntryIfAdminState, ieee8021SpbAdjDynamicTableEntry=ieee8021SpbAdjDynamicTableEntry, ieee8021SpbmTopNodeEntrySPsourceID=ieee8021SpbmTopNodeEntrySPsourceID, ieee8021SpbvTopEctSysMode=ieee8021SpbvTopEctSysMode, ieee8021SpbTopIxDynamicTableGroupSPBM=ieee8021SpbTopIxDynamicTableGroupSPBM, ieee8021SpbAdjDynamicEntryPeerAgreeDigest=ieee8021SpbAdjDynamicEntryPeerAgreeDigest, ieee8021SpbEctDynamicTableGroupSPBM=ieee8021SpbEctDynamicTableGroupSPBM, ieee8021SpbAdjStaticEntryMetric=ieee8021SpbAdjStaticEntryMetric, ieee8021SpbEctStaticTableEntry=ieee8021SpbEctStaticTableEntry, ieee8021SpbvTopSrvEntryMMac=ieee8021SpbvTopSrvEntryMMac, ieee8021SpbmTopSrvEntryIsidFlags=ieee8021SpbmTopSrvEntryIsidFlags, IEEE8021SpbDigestConvention=IEEE8021SpbDigestConvention, ieee8021SpbTopNodeEntryTopIx=ieee8021SpbTopNodeEntryTopIx, ieee8021SpbAdjStaticEntryIfIndex=ieee8021SpbAdjStaticEntryIfIndex, ieee8021SpbTopNodeTableEntry=ieee8021SpbTopNodeTableEntry, ieee8021SpbmTopSrvEntryTopIx=ieee8021SpbmTopSrvEntryTopIx, ieee8021SpbTopEdgeEntrySysIdNear=ieee8021SpbTopEdgeEntrySysIdNear, ieee8021SpbTopEdgeTable=ieee8021SpbTopEdgeTable, IEEE8021SpbDigest=IEEE8021SpbDigest, ieee8021SpbAdjDynamicEntryPeerAuxMCID=ieee8021SpbAdjDynamicEntryPeerAuxMCID, ieee8021SpbAdjDynamicEntryPortIdentifier=ieee8021SpbAdjDynamicEntryPortIdentifier, ieee8021SpbTopEctTableGroupSPBV=ieee8021SpbTopEctTableGroupSPBV, ieee8021SpbTopIxDynamicEntryMCID=ieee8021SpbTopIxDynamicEntryMCID, ieee8021SpbTopEdgeEntryMetricFar2Near=ieee8021SpbTopEdgeEntryMetricFar2Near, ieee8021SpbTopIxDynamicEntryAgreeDigest=ieee8021SpbTopIxDynamicEntryAgreeDigest, ieee8021SpbTopNodeEntrySysId=ieee8021SpbTopNodeEntrySysId, ieee8021SpbTopEdgeTableEntry=ieee8021SpbTopEdgeTableEntry, ieee8021SpbAdjDynamicEntryPeerSysId=ieee8021SpbAdjDynamicEntryPeerSysId, PYSNMP_MODULE_ID=ieee8021SpbMib, ieee8021SpbAdjDynamicEntryPeerLocalCircuitID=ieee8021SpbAdjDynamicEntryPeerLocalCircuitID, ieee8021SpbvTopSrvEntryMMacFlags=ieee8021SpbvTopSrvEntryMMacFlags, ieee8021SpbTopEctTableEntry=ieee8021SpbTopEctTableEntry, ieee8021SpbSys=ieee8021SpbSys, ieee8021SpbCompliances=ieee8021SpbCompliances, ieee8021SpbSysId=ieee8021SpbSysId, ieee8021SpbTopIxDynamicTableEntry=ieee8021SpbTopIxDynamicTableEntry, ieee8021SpbTopEctEntryTopIx=ieee8021SpbTopEctEntryTopIx, ieee8021SpbAdjStaticTable=ieee8021SpbAdjStaticTable, ieee8021SpbvSysMode=ieee8021SpbvSysMode, ieee8021SpbComplianceSPBV=ieee8021SpbComplianceSPBV, IEEE8021SpbEctAlgorithm=IEEE8021SpbEctAlgorithm, ieee8021SpbSysDigestConvention=ieee8021SpbSysDigestConvention, ieee8021SpbvEctStaticEntrySpvid=ieee8021SpbvEctStaticEntrySpvid, ieee8021SpbTopEctEntryBaseVid=ieee8021SpbTopEctEntryBaseVid, ieee8021SpbvTopSrvEntryBaseVid=ieee8021SpbvTopSrvEntryBaseVid, ieee8021SpbTopNodeTableGroupSPBV=ieee8021SpbTopNodeTableGroupSPBV, ieee8021SpbSysAreaAddress=ieee8021SpbSysAreaAddress, ieee8021SpbAdjDynamicEntryTopIx=ieee8021SpbAdjDynamicEntryTopIx, ieee8021SpbEctStaticTableGroupSPBV=ieee8021SpbEctStaticTableGroupSPBV, IEEE8021SpbAdjState=IEEE8021SpbAdjState, ieee8021SpbvTopSrvTable=ieee8021SpbvTopSrvTable, ieee8021SpbAdjDynamicEntryIfOperState=ieee8021SpbAdjDynamicEntryIfOperState, ieee8021SpbObjects=ieee8021SpbObjects, ieee8021SpbEctDynamicEntryRemoteUse=ieee8021SpbEctDynamicEntryRemoteUse, ieee8021SpbmTopSrvEntrySysId=ieee8021SpbmTopSrvEntrySysId, ieee8021SpbTopIxDynamicTableGroupSPBV=ieee8021SpbTopIxDynamicTableGroupSPBV, ieee8021SpbmTopSrvEntryIsid=ieee8021SpbmTopSrvEntryIsid, ieee8021SpbAdjStaticEntryRowStatus=ieee8021SpbAdjStaticEntryRowStatus, ieee8021SpbvTopSrvEntryTopIx=ieee8021SpbvTopSrvEntryTopIx, ieee8021SpbAdjDynamicEntryPeerPortIdentifier=ieee8021SpbAdjDynamicEntryPeerPortIdentifier, ieee8021SpbConformance=ieee8021SpbConformance, ieee8021SpbAdjStaticTableEntry=ieee8021SpbAdjStaticTableEntry, ieee8021SpbTopEdgeTableGroupSPBV=ieee8021SpbTopEdgeTableGroupSPBV, IEEE8021SpbMTID=IEEE8021SpbMTID, ieee8021SpbmSysSPSourceId=ieee8021SpbmSysSPSourceId, ieee8021SpbmTopSrvEntryMac=ieee8021SpbmTopSrvEntryMac, ieee8021SpbmTopSrvTableGroupSPBM=ieee8021SpbmTopSrvTableGroupSPBM, ieee8021SpbEctDynamicEntryMode=ieee8021SpbEctDynamicEntryMode, ieee8021SpbvTopEctEntrySpvid=ieee8021SpbvTopEctEntrySpvid, ieee8021SpbMtidStaticEntryRowStatus=ieee8021SpbMtidStaticEntryRowStatus, ieee8021SpbMtidStaticTable=ieee8021SpbMtidStaticTable, ieee8021SpbEctDynamicEntryBaseVid=ieee8021SpbEctDynamicEntryBaseVid, ieee8021SpbEctDynamicEntryIngressCheckDiscards=ieee8021SpbEctDynamicEntryIngressCheckDiscards, ieee8021SpbTopEctTable=ieee8021SpbTopEctTable, ieee8021SpbvTopSrvTableEntry=ieee8021SpbvTopSrvTableEntry, ieee8021SpbmTopSrvTable=ieee8021SpbmTopSrvTable, ieee8021SpbvTopSrvEntrySysId=ieee8021SpbvTopSrvEntrySysId, ieee8021SpbEctDynamicEntryLocalUse=ieee8021SpbEctDynamicEntryLocalUse, ieee8021SpbComplianceSPBM=ieee8021SpbComplianceSPBM, ieee8021SpbMtidStaticTableGroupSPBV=ieee8021SpbMtidStaticTableGroupSPBV, ieee8021SpbEctDynamicTable=ieee8021SpbEctDynamicTable, ieee8021SpbEctStaticEntryEctAlgorithm=ieee8021SpbEctStaticEntryEctAlgorithm, ieee8021SpbAdjDynamicTable=ieee8021SpbAdjDynamicTable, ieee8021SpbEctStaticEntryTopIx=ieee8021SpbEctStaticEntryTopIx, ieee8021SpbAdjDynamicEntryIfIndex=ieee8021SpbAdjDynamicEntryIfIndex, ieee8021SpbAdjDynamicEntryPeerSysName=ieee8021SpbAdjDynamicEntryPeerSysName, IEEE8021SpbBridgePriority=IEEE8021SpbBridgePriority, ieee8021SpbMtidStaticEntryMtid=ieee8021SpbMtidStaticEntryMtid, ieee8021SpbMtidStaticTableEntry=ieee8021SpbMtidStaticTableEntry, ieee8021SpbTopEdgeEntrySysIdFar=ieee8021SpbTopEdgeEntrySysIdFar, ieee8021SpbTopNodeEntryBridgePriority=ieee8021SpbTopNodeEntryBridgePriority, IEEE8021SpbMode=IEEE8021SpbMode, ieee8021SpbAdjDynamicTableGroupSPBM=ieee8021SpbAdjDynamicTableGroupSPBM, ieee8021SpbSysControlAddr=ieee8021SpbSysControlAddr, ieee8021SpbmSysMode=ieee8021SpbmSysMode, ieee8021SpbSysName=ieee8021SpbSysName, ieee8021SpbAdjStaticEntryTopIx=ieee8021SpbAdjStaticEntryTopIx, ieee8021SpbTopEdgeTableGroupSPBM=ieee8021SpbTopEdgeTableGroupSPBM, ieee8021SpbTopEctEntryMode=ieee8021SpbTopEctEntryMode, ieee8021SpbTopEdgeEntryMetricNear2Far=ieee8021SpbTopEdgeEntryMetricNear2Far, ieee8021SpbAdjDynamicEntryIsisCircIndex=ieee8021SpbAdjDynamicEntryIsisCircIndex, ieee8021SpbTopEctEntryLocalUse=ieee8021SpbTopEctEntryLocalUse, ieee8021SpbAdjStaticTableGroupSPBM=ieee8021SpbAdjStaticTableGroupSPBM, ieee8021SpbTopNodeEntrySysName=ieee8021SpbTopNodeEntrySysName, IEEE8021SpbServiceIdentifierOrAny=IEEE8021SpbServiceIdentifierOrAny, ieee8021SpbvTopSrvTableGroupSPBV=ieee8021SpbvTopSrvTableGroupSPBV, ieee8021SpbEctStaticEntryRowStatus=ieee8021SpbEctStaticEntryRowStatus, ieee8021SpbAdjStaticTableGroupSPBV=ieee8021SpbAdjStaticTableGroupSPBV, ieee8021SpbTopEctTableGroupSPBM=ieee8021SpbTopEctTableGroupSPBM, ieee8021SpbMtidStaticTableGroupSPBM=ieee8021SpbMtidStaticTableGroupSPBM, ieee8021SpbTopEctEntryEctAlgorithm=ieee8021SpbTopEctEntryEctAlgorithm, ieee8021SpbTopIxDynamicEntryAuxMCID=ieee8021SpbTopIxDynamicEntryAuxMCID, ieee8021SpbTopIxDynamicTable=ieee8021SpbTopIxDynamicTable, ieee8021SpbGroups=ieee8021SpbGroups, ieee8021SpbTopEdgeEntryTopIx=ieee8021SpbTopEdgeEntryTopIx, IEEE8021SpbLinkMetric=IEEE8021SpbLinkMetric, IEEE8021SpbMCID=IEEE8021SpbMCID, ieee8021SpbSysGroupSPBM=ieee8021SpbSysGroupSPBM, ieee8021SpbEctStaticTableGroupSPBM=ieee8021SpbEctStaticTableGroupSPBM, IEEE8021SpbAreaAddress=IEEE8021SpbAreaAddress, ieee8021SpbMTidStaticEntryMtidOverload=ieee8021SpbMTidStaticEntryMtidOverload, ieee8021SpbEctStaticEntryBaseVid=ieee8021SpbEctStaticEntryBaseVid, ieee8021SpbAdjDynamicEntryLocalCircuitID=ieee8021SpbAdjDynamicEntryLocalCircuitID, ieee8021SpbTopEctEntrySysId=ieee8021SpbTopEctEntrySysId, ieee8021SpbAdjDynamicTableGroupSPBV=ieee8021SpbAdjDynamicTableGroupSPBV, ieee8021SpbEctDynamicTableEntry=ieee8021SpbEctDynamicTableEntry, IEEE8021SpbEctMode=IEEE8021SpbEctMode, ieee8021SpbEctDynamicEntryTopIx=ieee8021SpbEctDynamicEntryTopIx, ieee8021SpbmTopSrvEntryBaseVid=ieee8021SpbmTopSrvEntryBaseVid, ieee8021SpbTopIxDynamicEntryTopIx=ieee8021SpbTopIxDynamicEntryTopIx, ieee8021SpbSysBridgePriority=ieee8021SpbSysBridgePriority, ieee8021SpbTopNodeTableGroupSPBM=ieee8021SpbTopNodeTableGroupSPBM, ieee8021SpbEctDynamicTableGroupSPBV=ieee8021SpbEctDynamicTableGroupSPBV)
