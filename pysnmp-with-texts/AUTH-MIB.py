#
# PySNMP MIB module AUTH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AUTH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:31:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
PaeControlledPortStatus, = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "PaeControlledPortStatus")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter32, TimeTicks, Counter64, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, ModuleIdentity, Integer32, Unsigned32, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "TimeTicks", "Counter64", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "ModuleIdentity", "Integer32", "Unsigned32", "Bits", "Gauge32")
TextualConvention, MacAddress, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "RowStatus", "DisplayString", "TruthValue")
swAuthCtrl = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 3))
if mibBuilder.loadTexts: swAuthCtrl.setLastUpdated('0711270000Z')
if mibBuilder.loadTexts: swAuthCtrl.setOrganization(' ')
if mibBuilder.loadTexts: swAuthCtrl.setContactInfo(' ')
if mibBuilder.loadTexts: swAuthCtrl.setDescription('The Structure of Common Management Information for security functions for devices.')
swAuthenCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 3, 1))
swRadiusCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 3, 2))
swRadiusAuthInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 3, 3))
swRadiusAccountingCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 3, 4))
swRadiusAccountingInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 3, 5))
swMacAuthBaseStatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 3, 6))
swRadiusCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 3, 7))
authProtocol = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("authProtocolNone", 1), ("authProtocolLocal", 2), ("authProtocolRadius", 3), ("authProtocolRadiusEap", 4), ("authProtocolRadiusChap", 5), ("authProtocolTacacs", 6))).clone('authProtocolRadiusEap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authProtocol.setStatus('current')
if mibBuilder.loadTexts: authProtocol.setDescription('The authentication method used to authenticate user.')
swAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("portBase", 1), ("macBase", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthMode.setStatus('current')
if mibBuilder.loadTexts: swAuthMode.setDescription('This object indicates the authentication mode of the device.')
swRadiusDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 3, 2, 1), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swRadiusDeadTime.setStatus('current')
if mibBuilder.loadTexts: swRadiusDeadTime.setDescription('Specifies the number of minutes a RADIUS server, which is not responding to authentication requests, is considered unavailable and is passed over by further requests for RADIUS authentication.')
swRadiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 3, 2, 2), Unsigned32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swRadiusTimeout.setStatus('current')
if mibBuilder.loadTexts: swRadiusTimeout.setDescription('Specifies the number of seconds NAS waits for a reply to a RADIUS request before retransmitting the request.')
swRadiusRetransmitAttempts = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 3, 2, 3), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swRadiusRetransmitAttempts.setStatus('current')
if mibBuilder.loadTexts: swRadiusRetransmitAttempts.setDescription('Specifies the number of times NAS transmits each RADIUS request to the server before giving up.')
swRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 3, 2, 4), )
if mibBuilder.loadTexts: swRadiusServerTable.setStatus('current')
if mibBuilder.loadTexts: swRadiusServerTable.setDescription(' The swRadius server table ')
swRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 3, 2, 4, 1), ).setIndexNames((0, "AUTH-MIB", "swRadiusServerIndex"))
if mibBuilder.loadTexts: swRadiusServerEntry.setStatus('current')
if mibBuilder.loadTexts: swRadiusServerEntry.setDescription(' The entiries of raidus Server table')
swRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("swRadiusServerIndex-first", 1), ("swRadiusServerIndex-second", 2), ("swRadiusServerIndex-third", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusServerIndex.setStatus('current')
if mibBuilder.loadTexts: swRadiusServerIndex.setDescription('The index of radius server')
swRadiusServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 2, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swRadiusServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: swRadiusServerIpAddr.setDescription('The ip address of radius server')
swRadiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 2, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swRadiusServerKey.setStatus('current')
if mibBuilder.loadTexts: swRadiusServerKey.setDescription('The key of radius server')
swRadiusAuthPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 2, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swRadiusAuthPortNumber.setStatus('current')
if mibBuilder.loadTexts: swRadiusAuthPortNumber.setDescription('UDP destination port number to use for authentication requests to this server.')
swRadiusAcctPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 2, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1813)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swRadiusAcctPortNumber.setStatus('current')
if mibBuilder.loadTexts: swRadiusAcctPortNumber.setDescription('UDP destination port number to use for accounting requests to this server')
swRadiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 2, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swRadiusServerStatus.setStatus('current')
if mibBuilder.loadTexts: swRadiusServerStatus.setDescription('The satuts of radius server')
swRadiusAuthClientIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAuthClientIdentifier.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthClientIdentifier.setDescription('NAS Identifier')
swRadiusAuthClientInvalidServerAddresses = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAuthClientInvalidServerAddresses.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthClientInvalidServerAddresses.setDescription('Statistics infomation - the number of RADIUS Access-Response packets received from unknown addresses.')
swRadiusAuthServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 3), )
if mibBuilder.loadTexts: swRadiusAuthServerTable.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthServerTable.setDescription('The authenticate table for swRadius server ')
swRadiusAuthServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 3, 1), ).setIndexNames((0, "AUTH-MIB", "swRadiusAuthServerIndex"))
if mibBuilder.loadTexts: swRadiusAuthServerEntry.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthServerEntry.setDescription('A list of Radius authentic servers.')
swRadiusAuthServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAuthServerIndex.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthServerIndex.setDescription('Argument with RadiusServerIndex')
swRadiusAuthServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAuthServerAddress.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthServerAddress.setDescription('RadiusAuth server address')
swRadiusAuthClientServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 3, 1, 3), Unsigned32().clone(1812)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAuthClientServerPortNumber.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthClientServerPortNumber.setDescription('The UDP socket port numbers')
swRadiusAuthClientRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAuthClientRoundTripTime.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthClientRoundTripTime.setDescription('The counter of trip time from radius authentication')
swRadiusAuthClientAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAuthClientAccessRequests.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthClientAccessRequests.setDescription('The counter of access requests from radius authentication')
swRadiusAuthClientAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAuthClientAccessRetransmissions.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthClientAccessRetransmissions.setDescription('The counter of retransimissions from radius authentication')
swRadiusAuthClientAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAuthClientAccessAccepts.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthClientAccessAccepts.setDescription('The counter for accept times from radius authentication')
swRadiusAuthClientAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAuthClientAccessRejects.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthClientAccessRejects.setDescription('The counter of reject from radius authentication')
swRadiusAuthClientAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAuthClientAccessChallenges.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthClientAccessChallenges.setDescription('The counter of Access changellenges times from radius authentication')
swRadiusAuthClientMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAuthClientMalformedAccessResponses.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthClientMalformedAccessResponses.setDescription('The counter of Malformed access response from radius authentication')
swRadiusAuthClientBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAuthClientBadAuthenticators.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthClientBadAuthenticators.setDescription('The counter of bad authenticate from radius authentication')
swRadiusAuthClientPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAuthClientPendingRequests.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthClientPendingRequests.setDescription('The counter of pending requests from radius authentication')
swRadiusAuthClientTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAuthClientTimeouts.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthClientTimeouts.setDescription('The counter of timeouts from radius authentication')
swRadiusAuthClientUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAuthClientUnknownTypes.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthClientUnknownTypes.setDescription('The counter of unknown types from radius authentication')
swRadiusAuthClientPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAuthClientPacketsDropped.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAuthClientPacketsDropped.setDescription('The counter of dropped packets ')
swRadiusAcctUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 3, 4, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swRadiusAcctUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: swRadiusAcctUpdateInterval.setDescription('Time interval after which this Radius record should be updated and sent to an accounting server.')
swRadiusAcctSuppressNullUserName = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 3, 4, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swRadiusAcctSuppressNullUserName.setStatus('current')
if mibBuilder.loadTexts: swRadiusAcctSuppressNullUserName.setDescription('Whether or not generate accounting records for users with null name')
swRadiusAcctServiceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 3, 4, 3), )
if mibBuilder.loadTexts: swRadiusAcctServiceTable.setStatus('current')
if mibBuilder.loadTexts: swRadiusAcctServiceTable.setDescription('Radius accounting Table')
swRadiusAcctServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 3, 4, 3, 1), ).setIndexNames((0, "AUTH-MIB", "swRadiusAcctServiceIndex"))
if mibBuilder.loadTexts: swRadiusAcctServiceEntry.setStatus('current')
if mibBuilder.loadTexts: swRadiusAcctServiceEntry.setDescription('The list of accounting services.')
swRadiusAcctServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acctServiceIndex-network", 1), ("acctServiceIndex-exec", 2), ("acctServiceIndex-system", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAcctServiceIndex.setStatus('current')
if mibBuilder.loadTexts: swRadiusAcctServiceIndex.setDescription('The index of Accounting table.')
swRadiusAcctServiceMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("swRadiusAcctServiceMethodNone", 1), ("swRadiusAcctServiceMethodRadius", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swRadiusAcctServiceMethod.setStatus('current')
if mibBuilder.loadTexts: swRadiusAcctServiceMethod.setDescription('The method of accouting service')
swRadiusAcctServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("radiusAcctServiceModeNone", 1), ("radiusAcctServiceModeStartStop", 2), ("radiusAcctServiceModeStopOnly", 3))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swRadiusAcctServiceMode.setStatus('current')
if mibBuilder.loadTexts: swRadiusAcctServiceMode.setDescription('The service mode of accounting service')
swRadiusAcctClientIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 3, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAcctClientIdentifier.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAcctClientIdentifier.setDescription('NAS Identifier')
swRadiusAcctClientInvalidServerAddresses = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 3, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAcctClientInvalidServerAddresses.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAcctClientInvalidServerAddresses.setDescription('Statistics infomation - the number of RADIUS Accounting-Response packets received from unknown addresses.')
swRadiusAcctServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 3, 5, 3), )
if mibBuilder.loadTexts: swRadiusAcctServerTable.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAcctServerTable.setDescription('The radius server accounting table')
swRadiusAcctServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 3, 5, 3, 1), ).setIndexNames((0, "AUTH-MIB", "swRadiusAcctServerIndex"))
if mibBuilder.loadTexts: swRadiusAcctServerEntry.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAcctServerEntry.setDescription('The list for radius accounting table')
swRadiusAcctServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAcctServerIndex.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAcctServerIndex.setDescription('The index of Radius accounting server, argument with RadiusServerIndex.')
swRadiusAcctServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 5, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAcctServerAddress.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAcctServerAddress.setDescription('The server address of radius accounting')
swRadiusAcctClientServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 5, 3, 1, 3), Unsigned32().clone(1813)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAcctClientServerPortNumber.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAcctClientServerPortNumber.setDescription('The UDP socket port of radius accounting ')
swRadiusAcctClientRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAcctClientRoundTripTime.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAcctClientRoundTripTime.setDescription('The counter of trip time from radius accounting')
swRadiusAcctClientRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAcctClientRequests.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAcctClientRequests.setDescription('The counter of request from radius accounting')
swRadiusAcctClientRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAcctClientRetransmissions.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAcctClientRetransmissions.setDescription('The counter of retransmissions from radius accounting')
swRadiusAcctClientResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAcctClientResponses.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAcctClientResponses.setDescription('The counter of responses from radius accounting')
swRadiusAcctClientMalformedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 5, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAcctClientMalformedResponses.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAcctClientMalformedResponses.setDescription('The counter of Malformed response from radius accounting')
swRadiusAcctClientBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 5, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAcctClientBadAuthenticators.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAcctClientBadAuthenticators.setDescription('The counter of bad authenticate for radius accounting')
swRadiusAcctClientPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 5, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAcctClientPendingRequests.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAcctClientPendingRequests.setDescription('The pending counter of radius client requests')
swRadiusAcctClientTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 5, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAcctClientTimeouts.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAcctClientTimeouts.setDescription('The counter of the timeout connect to radius accounting')
swRadiusAcctClientUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 5, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAcctClientUnknownTypes.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAcctClientUnknownTypes.setDescription('The counter of unknown types from radius accounting')
swRadiusAcctClientPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 5, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRadiusAcctClientPacketsDropped.setStatus('obsolete')
if mibBuilder.loadTexts: swRadiusAcctClientPacketsDropped.setDescription('The counter of dropped packets from radius accounting')
swMacAuthStateTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 1), )
if mibBuilder.loadTexts: swMacAuthStateTable.setStatus('current')
if mibBuilder.loadTexts: swMacAuthStateTable.setDescription('A table that contains the status objects for the Authenticator PAE associated with each virtual port(Mac). An entry appears in this table for each virtual port that may authenticate access to itself.')
swMacAuthStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 1, 1), ).setIndexNames((0, "AUTH-MIB", "swPaeMacAddr"), (0, "AUTH-MIB", "swPaePortNumber"))
if mibBuilder.loadTexts: swMacAuthStateEntry.setStatus('current')
if mibBuilder.loadTexts: swMacAuthStateEntry.setDescription('The information for an Authenticator PAE.')
swPaeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPaeMacAddr.setStatus('current')
if mibBuilder.loadTexts: swPaeMacAddr.setDescription('The address associated with this Mac.')
swPaePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPaePortNumber.setStatus('current')
if mibBuilder.loadTexts: swPaePortNumber.setDescription('The Port number associated with this Port.')
swAuthPaeState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initialize", 1), ("disconnected", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("aborting", 6), ("held", 7), ("forceAuth", 8), ("forceUnauth", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthPaeState.setStatus('current')
if mibBuilder.loadTexts: swAuthPaeState.setDescription('The current value of the Authenticator PAE state machine.')
swAuthBackendAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("success", 3), ("fail", 4), ("timeout", 5), ("idle", 6), ("initialize", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthBackendAuthState.setStatus('current')
if mibBuilder.loadTexts: swAuthBackendAuthState.setDescription('The current state of the Backend Authentication state machine.')
swAuthAuthControlledPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 1, 1, 5), PaeControlledPortStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthAuthControlledPortStatus.setStatus('current')
if mibBuilder.loadTexts: swAuthAuthControlledPortStatus.setDescription('The current value of the controlled Port status parameter for the Port.')
swMacAuthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 2), )
if mibBuilder.loadTexts: swMacAuthStatsTable.setStatus('current')
if mibBuilder.loadTexts: swMacAuthStatsTable.setDescription('A table that contains the statistics objects for the Authenticator PAE associated with each Mac address. An entry appears in this table for each Mac that may authenticate access to itself.')
swMacAuthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 2, 1), ).setIndexNames((0, "AUTH-MIB", "swAuthStatsPaeMacAddr"), (0, "AUTH-MIB", "swAuthStatsPaePortNumber"))
if mibBuilder.loadTexts: swMacAuthStatsEntry.setStatus('current')
if mibBuilder.loadTexts: swMacAuthStatsEntry.setDescription('The statistics information for an Authenticator PAE.')
swAuthStatsPaeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: swAuthStatsPaeMacAddr.setStatus('current')
if mibBuilder.loadTexts: swAuthStatsPaeMacAddr.setDescription('The address associated with this Mac.')
swAuthStatsPaePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 2, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: swAuthStatsPaePortNumber.setStatus('current')
if mibBuilder.loadTexts: swAuthStatsPaePortNumber.setDescription('The Port number associated with this Port.')
swAuthEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthEapolFramesRx.setReference('9.4.2, EAPOL frames received')
if mibBuilder.loadTexts: swAuthEapolFramesRx.setStatus('current')
if mibBuilder.loadTexts: swAuthEapolFramesRx.setDescription('The number of valid EAPOL frames of any type that have been received by this Authenticator.')
swAuthEapolFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthEapolFramesTx.setReference('9.4.2, EAPOL frames transmitted')
if mibBuilder.loadTexts: swAuthEapolFramesTx.setStatus('current')
if mibBuilder.loadTexts: swAuthEapolFramesTx.setDescription('The number of EAPOL frames of any type that have been transmitted by this Authenticator.')
swAuthEapolStartFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthEapolStartFramesRx.setReference('9.4.2, EAPOL Start frames received')
if mibBuilder.loadTexts: swAuthEapolStartFramesRx.setStatus('current')
if mibBuilder.loadTexts: swAuthEapolStartFramesRx.setDescription('The number of EAPOL Start frames that have been received by this Authenticator.')
swAuthEapolLogoffFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthEapolLogoffFramesRx.setReference('9.4.2, EAPOL Logoff frames received')
if mibBuilder.loadTexts: swAuthEapolLogoffFramesRx.setStatus('current')
if mibBuilder.loadTexts: swAuthEapolLogoffFramesRx.setDescription('The number of EAPOL Logoff frames that have been received by this Authenticator.')
swAuthEapolRespIdFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthEapolRespIdFramesRx.setReference('9.4.2, EAPOL Resp/Id frames received')
if mibBuilder.loadTexts: swAuthEapolRespIdFramesRx.setStatus('current')
if mibBuilder.loadTexts: swAuthEapolRespIdFramesRx.setDescription('The number of EAP Resp/Id frames that have been received by this Authenticator.')
swAuthEapolRespFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthEapolRespFramesRx.setReference('9.4.2, EAPOL Response frames received')
if mibBuilder.loadTexts: swAuthEapolRespFramesRx.setStatus('current')
if mibBuilder.loadTexts: swAuthEapolRespFramesRx.setDescription('The number of valid EAP Response frames (other than Resp/Id frames) that have been received by this Authenticator.')
swAuthEapolReqIdFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthEapolReqIdFramesTx.setReference('9.4.2, EAPOL Req/Id frames transmitted')
if mibBuilder.loadTexts: swAuthEapolReqIdFramesTx.setStatus('current')
if mibBuilder.loadTexts: swAuthEapolReqIdFramesTx.setDescription('The number of EAP Req/Id frames that have been transmitted by this Authenticator.')
swAuthEapolReqFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthEapolReqFramesTx.setReference('9.4.2, EAPOL Request frames transmitted')
if mibBuilder.loadTexts: swAuthEapolReqFramesTx.setStatus('current')
if mibBuilder.loadTexts: swAuthEapolReqFramesTx.setDescription('The number of EAP Request frames (other than Rq/Id frames) that have been transmitted by this Authenticator.')
swAuthInvalidEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthInvalidEapolFramesRx.setReference('9.4.2, Invalid EAPOL frames received')
if mibBuilder.loadTexts: swAuthInvalidEapolFramesRx.setStatus('current')
if mibBuilder.loadTexts: swAuthInvalidEapolFramesRx.setDescription('The number of EAPOL frames that have been received by this Authenticator in which the frame type is not recognized.')
swAuthEapLengthErrorFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthEapLengthErrorFramesRx.setReference('9.4.2, EAP length error frames received')
if mibBuilder.loadTexts: swAuthEapLengthErrorFramesRx.setStatus('current')
if mibBuilder.loadTexts: swAuthEapLengthErrorFramesRx.setDescription('The number of EAPOL frames that have been received by this Authenticator in which the Packet Body Length field is invalid.')
swAuthLastEapolFrameVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthLastEapolFrameVersion.setReference('9.4.2, Last EAPOL frame version')
if mibBuilder.loadTexts: swAuthLastEapolFrameVersion.setStatus('current')
if mibBuilder.loadTexts: swAuthLastEapolFrameVersion.setDescription('The protocol version number carried in the most recently received EAPOL frame.')
swAuthLastEapolFrameSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 2, 1, 14), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthLastEapolFrameSource.setReference('9.4.2, Last EAPOL frame source')
if mibBuilder.loadTexts: swAuthLastEapolFrameSource.setStatus('current')
if mibBuilder.loadTexts: swAuthLastEapolFrameSource.setDescription('The source MAC address carried in the most recently received EAPOL frame.')
swMacAuthDiagTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3), )
if mibBuilder.loadTexts: swMacAuthDiagTable.setStatus('current')
if mibBuilder.loadTexts: swMacAuthDiagTable.setDescription('A table that contains the diagnostics objects for the Authenticator PAE associated with each Mac address. An entry appears in this table for each Mac that may authenticate access to itself.')
swMacAuthDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1), ).setIndexNames((0, "AUTH-MIB", "swAuthDiagPaeMacAddr"), (0, "AUTH-MIB", "swAuthDiagPaePortNumber"))
if mibBuilder.loadTexts: swMacAuthDiagEntry.setStatus('current')
if mibBuilder.loadTexts: swMacAuthDiagEntry.setDescription('The diagnostics information for an Authenticator PAE.')
swAuthDiagPaeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: swAuthDiagPaeMacAddr.setStatus('current')
if mibBuilder.loadTexts: swAuthDiagPaeMacAddr.setDescription('The address associated with this Mac.')
swAuthDiagPaePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: swAuthDiagPaePortNumber.setStatus('current')
if mibBuilder.loadTexts: swAuthDiagPaePortNumber.setDescription('The Port number associated with this Port.')
swAuthEntersConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthEntersConnecting.setReference('9.4.2, 8.5.4.2.1')
if mibBuilder.loadTexts: swAuthEntersConnecting.setStatus('current')
if mibBuilder.loadTexts: swAuthEntersConnecting.setDescription('Counts the number of times that the state machine transitions to the CONNECTING state from any other state.')
swAuthEapLogoffsWhileConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthEapLogoffsWhileConnecting.setReference('9.4.2, 8.5.4.2.2')
if mibBuilder.loadTexts: swAuthEapLogoffsWhileConnecting.setStatus('current')
if mibBuilder.loadTexts: swAuthEapLogoffsWhileConnecting.setDescription('Counts the number of times that the state machine transitions from CONNECTING to DISCONNECTED as a result of receiving an EAPOL-Logoff message.')
swAuthEntersAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthEntersAuthenticating.setReference('9.4.2, 8.5.4.2.3')
if mibBuilder.loadTexts: swAuthEntersAuthenticating.setStatus('current')
if mibBuilder.loadTexts: swAuthEntersAuthenticating.setDescription('Counts the number of times that the state machine transitions from CONNECTING to AUTHENTICATING, as a result of an EAP-Response/Identity message being received from the Supplicant.')
swAuthAuthSuccessWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthAuthSuccessWhileAuthenticating.setReference('9.4.2, 8.5.4.2.4')
if mibBuilder.loadTexts: swAuthAuthSuccessWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: swAuthAuthSuccessWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to AUTHENTICATED, as a result of the Backend Authentication state machine indicating successful authentication of the Supplicant (authSuccess = TRUE).')
swAuthAuthTimeoutsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthAuthTimeoutsWhileAuthenticating.setReference('9.4.2, 8.5.4.2.5')
if mibBuilder.loadTexts: swAuthAuthTimeoutsWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: swAuthAuthTimeoutsWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to ABORTING, as a result of the Backend Authentication state machine indicating authentication timeout (authTimeout = TRUE).')
swAuthAuthFailWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthAuthFailWhileAuthenticating.setReference('9.4.2, 8.5.4.2.6')
if mibBuilder.loadTexts: swAuthAuthFailWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: swAuthAuthFailWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to HELD, as a result of the Backend Authentication state machine indicating authentication failure (authFail = TRUE).')
swAuthAuthReauthsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthAuthReauthsWhileAuthenticating.setReference('9.4.2, 8.5.4.2.7')
if mibBuilder.loadTexts: swAuthAuthReauthsWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: swAuthAuthReauthsWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to ABORTING, as a result of a reauthentication request (reAuthenticate = TRUE).')
swAuthAuthEapStartsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthAuthEapStartsWhileAuthenticating.setReference('9.4.2, 8.5.4.2.8')
if mibBuilder.loadTexts: swAuthAuthEapStartsWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: swAuthAuthEapStartsWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to ABORTING, as a result of an EAPOL-Start message being received from the Supplicant.')
swAuthAuthEapLogoffWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthAuthEapLogoffWhileAuthenticating.setReference('9.4.2, 8.5.4.2.9')
if mibBuilder.loadTexts: swAuthAuthEapLogoffWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: swAuthAuthEapLogoffWhileAuthenticating.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATING to ABORTING, as a result of an EAPOL-Logoff message being received from the Supplicant.')
swAuthAuthReauthsWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthAuthReauthsWhileAuthenticated.setReference('9.4.2, 8.5.4.2.10')
if mibBuilder.loadTexts: swAuthAuthReauthsWhileAuthenticated.setStatus('current')
if mibBuilder.loadTexts: swAuthAuthReauthsWhileAuthenticated.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATED to CONNECTING, as a result of a reauthentication request (reAuthenticate = TRUE).')
swAuthAuthEapStartsWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthAuthEapStartsWhileAuthenticated.setReference('9.4.2, 8.5.4.2.11')
if mibBuilder.loadTexts: swAuthAuthEapStartsWhileAuthenticated.setStatus('current')
if mibBuilder.loadTexts: swAuthAuthEapStartsWhileAuthenticated.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATED to CONNECTING, as a result of an EAPOL-Start message being received from the Supplicant.')
swAuthAuthEapLogoffWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthAuthEapLogoffWhileAuthenticated.setReference('9.4.2, 8.5.4.2.12')
if mibBuilder.loadTexts: swAuthAuthEapLogoffWhileAuthenticated.setStatus('current')
if mibBuilder.loadTexts: swAuthAuthEapLogoffWhileAuthenticated.setDescription('Counts the number of times that the state machine transitions from AUTHENTICATED to DISCONNECTED, as a result of an EAPOL-Logoff message being received from the Supplicant.')
swAuthBackendResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthBackendResponses.setReference('9.4.2, 8.5.6.2.1')
if mibBuilder.loadTexts: swAuthBackendResponses.setStatus('current')
if mibBuilder.loadTexts: swAuthBackendResponses.setDescription('Counts the number of times that the state machine sends an initial Access-Request packet to the Authentication server (i.e., executes sendRespToServer on entry to the RESPONSE state). Indicates that the Authenticator attempted communication with the Authentication Server.')
swAuthBackendAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthBackendAccessChallenges.setReference('9.4.2, 8.5.6.2.2')
if mibBuilder.loadTexts: swAuthBackendAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: swAuthBackendAccessChallenges.setDescription('Counts the number of times that the state machine receives an initial Access-Challenge packet from the Authentication server (i.e., aReq becomes TRUE, causing exit from the RESPONSE state). Indicates that the Authentication Server has communication with the Authenticator.')
swAuthBackendOtherRequestsToSupplicant = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthBackendOtherRequestsToSupplicant.setReference('9.4.2, 8.5.6.2.3')
if mibBuilder.loadTexts: swAuthBackendOtherRequestsToSupplicant.setStatus('current')
if mibBuilder.loadTexts: swAuthBackendOtherRequestsToSupplicant.setDescription('Counts the number of times that the state machine sends an EAP-Request packet (other than an Identity, Notification, Failure or Success message) to the Supplicant (i.e., executes txReq on entry to the REQUEST state). Indicates that the Authenticator chose an EAP-method.')
swAuthBackendNonNakResponsesFromSupplicant = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthBackendNonNakResponsesFromSupplicant.setReference('9.4.2, 8.5.6.2.4')
if mibBuilder.loadTexts: swAuthBackendNonNakResponsesFromSupplicant.setStatus('current')
if mibBuilder.loadTexts: swAuthBackendNonNakResponsesFromSupplicant.setDescription("Counts the number of times that the state machine receives a response from the Supplicant to an initial EAP-Request, and the response is something other than EAP-NAK (i.e., rxResp becomes TRUE, causing the state machine to transition from REQUEST to RESPONSE, and the response is not an EAP-NAK). Indicates that the Supplicant can respond to the Authenticator's chosen EAP-method.")
swAuthBackendAuthSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthBackendAuthSuccesses.setReference('9.4.2, 8.5.6.2.5')
if mibBuilder.loadTexts: swAuthBackendAuthSuccesses.setStatus('current')
if mibBuilder.loadTexts: swAuthBackendAuthSuccesses.setDescription('Counts the number of times that the state machine receives an EAP-Success message from the Authentication Server (i.e., aSuccess becomes TRUE, causing a transition from RESPONSE to SUCCESS). Indicates that the Supplicant has successfully authenticated to the Authentication Server.')
swAuthBackendAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthBackendAuthFails.setReference('9.4.2, 8.5.6.2.6')
if mibBuilder.loadTexts: swAuthBackendAuthFails.setStatus('current')
if mibBuilder.loadTexts: swAuthBackendAuthFails.setDescription('Counts the number of times that the state machine receives an EAP-Failure message from the Authentication Server (i.e., aFail becomes TRUE, causing a transition from RESPONSE to FAIL). Indicates that the Supplicant has not authenticated to the Authentication Server.')
swMacAuthSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 4), )
if mibBuilder.loadTexts: swMacAuthSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: swMacAuthSessionStatsTable.setDescription('A table that contains the session statistics objects for the Authenticator PAE associated with each Mac. An entry appears in this table for each Mac that may authenticate access to itself.')
swMacAuthSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 4, 1), ).setIndexNames((0, "AUTH-MIB", "swAuthSessionStatsPaeMacAddr"), (0, "AUTH-MIB", "swAuthSessionStatsPaePortNumber"))
if mibBuilder.loadTexts: swMacAuthSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: swMacAuthSessionStatsEntry.setDescription('The session statistics information for an Authenticator PAE. This shows the current values being collected for each session that is still in progress, or the final values for the last valid session on each Mac where there is no session currently active.')
swAuthSessionStatsPaeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: swAuthSessionStatsPaeMacAddr.setStatus('current')
if mibBuilder.loadTexts: swAuthSessionStatsPaeMacAddr.setDescription('The address associated with this Mac.')
swAuthSessionStatsPaePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 4, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: swAuthSessionStatsPaePortNumber.setStatus('current')
if mibBuilder.loadTexts: swAuthSessionStatsPaePortNumber.setDescription('The Port number associated with this Port.')
swAuthSessionOctetsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthSessionOctetsRx.setReference('9.4.4, Session Octets Received')
if mibBuilder.loadTexts: swAuthSessionOctetsRx.setStatus('current')
if mibBuilder.loadTexts: swAuthSessionOctetsRx.setDescription('The number of octets received in user data frames from this Mac during the session.')
swAuthSessionOctetsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthSessionOctetsTx.setStatus('current')
if mibBuilder.loadTexts: swAuthSessionOctetsTx.setDescription('The number of octets transmitted in user data frames to this Mac during the session.')
swAuthSessionFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthSessionFramesRx.setStatus('current')
if mibBuilder.loadTexts: swAuthSessionFramesRx.setDescription('The number of user data frames received from this Mac during the session.')
swAuthSessionFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthSessionFramesTx.setReference('9.4.4, Session Frames Transmitted')
if mibBuilder.loadTexts: swAuthSessionFramesTx.setStatus('current')
if mibBuilder.loadTexts: swAuthSessionFramesTx.setDescription('The number of user data frames transmitted to this Mac during the session.')
swAuthSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 4, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthSessionId.setReference('9.4.4, Session Identifier')
if mibBuilder.loadTexts: swAuthSessionId.setStatus('current')
if mibBuilder.loadTexts: swAuthSessionId.setDescription('A unique identifier for the session, in the form of a printable ASCII string of at least three characters.')
swAuthSessionAuthenticMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remoteAuthServer", 1), ("localAuthServer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthSessionAuthenticMethod.setReference('9.4.4, Session Authentication Method')
if mibBuilder.loadTexts: swAuthSessionAuthenticMethod.setStatus('current')
if mibBuilder.loadTexts: swAuthSessionAuthenticMethod.setDescription('The authentication method used to establish the session.')
swAuthSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 4, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthSessionTime.setReference('9.4.4, Session Time')
if mibBuilder.loadTexts: swAuthSessionTime.setStatus('current')
if mibBuilder.loadTexts: swAuthSessionTime.setDescription('The duration of the session in seconds.')
swAuthSessionTerminateCause = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 999))).clone(namedValues=NamedValues(("supplicantLogoff", 1), ("portFailure", 2), ("supplicantRestart", 3), ("reauthFailed", 4), ("authControlForceUnauth", 5), ("portReInit", 6), ("portAdminDisabled", 7), ("notTerminatedYet", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthSessionTerminateCause.setReference('9.4.4, Session Terminate Cause')
if mibBuilder.loadTexts: swAuthSessionTerminateCause.setStatus('current')
if mibBuilder.loadTexts: swAuthSessionTerminateCause.setDescription('The reason for the session termination.')
swAuthSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 3, 6, 4, 1, 11), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthSessionUserName.setReference('9.4.4, Session User Name')
if mibBuilder.loadTexts: swAuthSessionUserName.setStatus('current')
if mibBuilder.loadTexts: swAuthSessionUserName.setDescription('The User-Name representing the identity of the Supplicant PAE.')
swRadiusForceDownPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 3, 7, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swRadiusForceDownPortNumber.setStatus('current')
if mibBuilder.loadTexts: swRadiusForceDownPortNumber.setDescription('The port number on which RADIUS server forces to terminate network service.')
swRadiusForceDownMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 3, 7, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swRadiusForceDownMacAddr.setStatus('current')
if mibBuilder.loadTexts: swRadiusForceDownMacAddr.setDescription("The user's mac address on which RADIUS server forces to terminate network service.")
mibBuilder.exportSymbols("AUTH-MIB", swAuthSessionAuthenticMethod=swAuthSessionAuthenticMethod, swRadiusAcctClientRoundTripTime=swRadiusAcctClientRoundTripTime, swRadiusAcctClientPacketsDropped=swRadiusAcctClientPacketsDropped, swRadiusTimeout=swRadiusTimeout, swAuthSessionOctetsRx=swAuthSessionOctetsRx, swAuthEntersConnecting=swAuthEntersConnecting, swRadiusServerEntry=swRadiusServerEntry, PYSNMP_MODULE_ID=swAuthCtrl, swPaePortNumber=swPaePortNumber, swAuthStatsPaePortNumber=swAuthStatsPaePortNumber, swAuthCtrl=swAuthCtrl, swMacAuthDiagEntry=swMacAuthDiagEntry, swAuthBackendAuthFails=swAuthBackendAuthFails, swAuthAuthControlledPortStatus=swAuthAuthControlledPortStatus, swAuthBackendNonNakResponsesFromSupplicant=swAuthBackendNonNakResponsesFromSupplicant, swAuthAuthReauthsWhileAuthenticated=swAuthAuthReauthsWhileAuthenticated, swAuthEapolFramesRx=swAuthEapolFramesRx, swRadiusServerKey=swRadiusServerKey, swAuthAuthEapStartsWhileAuthenticated=swAuthAuthEapStartsWhileAuthenticated, swRadiusAcctServerEntry=swRadiusAcctServerEntry, swAuthAuthReauthsWhileAuthenticating=swAuthAuthReauthsWhileAuthenticating, swAuthSessionTime=swAuthSessionTime, swRadiusAcctSuppressNullUserName=swRadiusAcctSuppressNullUserName, swAuthAuthTimeoutsWhileAuthenticating=swAuthAuthTimeoutsWhileAuthenticating, swRadiusAuthPortNumber=swRadiusAuthPortNumber, swAuthEapolLogoffFramesRx=swAuthEapolLogoffFramesRx, swAuthLastEapolFrameVersion=swAuthLastEapolFrameVersion, swAuthSessionFramesTx=swAuthSessionFramesTx, swMacAuthStateEntry=swMacAuthStateEntry, swAuthBackendAuthSuccesses=swAuthBackendAuthSuccesses, swRadiusAcctClientServerPortNumber=swRadiusAcctClientServerPortNumber, swAuthenCtrl=swAuthenCtrl, swRadiusAuthClientTimeouts=swRadiusAuthClientTimeouts, swRadiusAuthServerAddress=swRadiusAuthServerAddress, swAuthStatsPaeMacAddr=swAuthStatsPaeMacAddr, swAuthDiagPaeMacAddr=swAuthDiagPaeMacAddr, swRadiusServerTable=swRadiusServerTable, swAuthEapolStartFramesRx=swAuthEapolStartFramesRx, swRadiusAuthClientUnknownTypes=swRadiusAuthClientUnknownTypes, swRadiusAcctServerIndex=swRadiusAcctServerIndex, swAuthSessionOctetsTx=swAuthSessionOctetsTx, swRadiusAcctClientUnknownTypes=swRadiusAcctClientUnknownTypes, swRadiusServerStatus=swRadiusServerStatus, swAuthSessionId=swAuthSessionId, swAuthAuthEapLogoffWhileAuthenticating=swAuthAuthEapLogoffWhileAuthenticating, swRadiusCommand=swRadiusCommand, swAuthLastEapolFrameSource=swAuthLastEapolFrameSource, swRadiusAuthClientAccessChallenges=swRadiusAuthClientAccessChallenges, swRadiusForceDownMacAddr=swRadiusForceDownMacAddr, swRadiusAcctClientResponses=swRadiusAcctClientResponses, swAuthSessionTerminateCause=swAuthSessionTerminateCause, swAuthDiagPaePortNumber=swAuthDiagPaePortNumber, swRadiusAuthClientAccessRejects=swRadiusAuthClientAccessRejects, swAuthSessionStatsPaePortNumber=swAuthSessionStatsPaePortNumber, swRadiusAcctServiceMode=swRadiusAcctServiceMode, swRadiusServerIndex=swRadiusServerIndex, swRadiusAuthClientInvalidServerAddresses=swRadiusAuthClientInvalidServerAddresses, swRadiusAuthClientRoundTripTime=swRadiusAuthClientRoundTripTime, swRadiusAcctServerTable=swRadiusAcctServerTable, swRadiusAuthServerTable=swRadiusAuthServerTable, swAuthSessionStatsPaeMacAddr=swAuthSessionStatsPaeMacAddr, swRadiusForceDownPortNumber=swRadiusForceDownPortNumber, swMacAuthStateTable=swMacAuthStateTable, swMacAuthStatsEntry=swMacAuthStatsEntry, swRadiusAuthClientAccessAccepts=swRadiusAuthClientAccessAccepts, swAuthEapolFramesTx=swAuthEapolFramesTx, swMacAuthBaseStatsInfo=swMacAuthBaseStatsInfo, swRadiusAuthServerIndex=swRadiusAuthServerIndex, swRadiusAccountingCtrl=swRadiusAccountingCtrl, swRadiusAcctServiceMethod=swRadiusAcctServiceMethod, swMacAuthStatsTable=swMacAuthStatsTable, swAuthEapLengthErrorFramesRx=swAuthEapLengthErrorFramesRx, swRadiusAuthClientBadAuthenticators=swRadiusAuthClientBadAuthenticators, swRadiusAcctServiceIndex=swRadiusAcctServiceIndex, swAuthAuthFailWhileAuthenticating=swAuthAuthFailWhileAuthenticating, swRadiusAuthClientIdentifier=swRadiusAuthClientIdentifier, swAuthAuthEapLogoffWhileAuthenticated=swAuthAuthEapLogoffWhileAuthenticated, swRadiusDeadTime=swRadiusDeadTime, swRadiusAcctClientRequests=swRadiusAcctClientRequests, swRadiusAcctServiceEntry=swRadiusAcctServiceEntry, swRadiusAuthInfo=swRadiusAuthInfo, swAuthEapolReqFramesTx=swAuthEapolReqFramesTx, swRadiusAcctClientIdentifier=swRadiusAcctClientIdentifier, swRadiusServerIpAddr=swRadiusServerIpAddr, swAuthEntersAuthenticating=swAuthEntersAuthenticating, swAuthEapLogoffsWhileConnecting=swAuthEapLogoffsWhileConnecting, swRadiusAuthClientPendingRequests=swRadiusAuthClientPendingRequests, swRadiusAcctClientRetransmissions=swRadiusAcctClientRetransmissions, swRadiusAuthServerEntry=swRadiusAuthServerEntry, swMacAuthSessionStatsEntry=swMacAuthSessionStatsEntry, swAuthAuthSuccessWhileAuthenticating=swAuthAuthSuccessWhileAuthenticating, swRadiusAcctClientBadAuthenticators=swRadiusAcctClientBadAuthenticators, swRadiusAcctServerAddress=swRadiusAcctServerAddress, swRadiusCtrl=swRadiusCtrl, swMacAuthSessionStatsTable=swMacAuthSessionStatsTable, swAuthBackendResponses=swAuthBackendResponses, swRadiusAcctClientTimeouts=swRadiusAcctClientTimeouts, swRadiusRetransmitAttempts=swRadiusRetransmitAttempts, swRadiusAcctClientPendingRequests=swRadiusAcctClientPendingRequests, swRadiusAuthClientServerPortNumber=swRadiusAuthClientServerPortNumber, swRadiusAccountingInfo=swRadiusAccountingInfo, swRadiusAcctClientMalformedResponses=swRadiusAcctClientMalformedResponses, swAuthMode=swAuthMode, swRadiusAuthClientAccessRetransmissions=swRadiusAuthClientAccessRetransmissions, swRadiusAuthClientMalformedAccessResponses=swRadiusAuthClientMalformedAccessResponses, swRadiusAcctClientInvalidServerAddresses=swRadiusAcctClientInvalidServerAddresses, authProtocol=authProtocol, swPaeMacAddr=swPaeMacAddr, swAuthEapolRespIdFramesRx=swAuthEapolRespIdFramesRx, swRadiusAcctUpdateInterval=swRadiusAcctUpdateInterval, swAuthPaeState=swAuthPaeState, swRadiusAcctServiceTable=swRadiusAcctServiceTable, swAuthSessionFramesRx=swAuthSessionFramesRx, swAuthInvalidEapolFramesRx=swAuthInvalidEapolFramesRx, swAuthEapolReqIdFramesTx=swAuthEapolReqIdFramesTx, swAuthSessionUserName=swAuthSessionUserName, swRadiusAuthClientPacketsDropped=swRadiusAuthClientPacketsDropped, swAuthAuthEapStartsWhileAuthenticating=swAuthAuthEapStartsWhileAuthenticating, swAuthBackendAccessChallenges=swAuthBackendAccessChallenges, swMacAuthDiagTable=swMacAuthDiagTable, swAuthBackendOtherRequestsToSupplicant=swAuthBackendOtherRequestsToSupplicant, swRadiusAcctPortNumber=swRadiusAcctPortNumber, swAuthBackendAuthState=swAuthBackendAuthState, swAuthEapolRespFramesRx=swAuthEapolRespFramesRx, swRadiusAuthClientAccessRequests=swRadiusAuthClientAccessRequests)
