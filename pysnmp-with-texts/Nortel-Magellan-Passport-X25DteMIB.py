#
# PySNMP MIB module Nortel-Magellan-Passport-X25DteMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-X25DteMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:28:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
Gauge32, RowStatus, StorageType, Counter32, DisplayString, Unsigned32, Integer32, InterfaceIndex = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "Gauge32", "RowStatus", "StorageType", "Counter32", "DisplayString", "Unsigned32", "Integer32", "InterfaceIndex")
Link, DigitString, HexString, AsciiString, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "Link", "DigitString", "HexString", "AsciiString", "NonReplicated")
passportMIBs, components = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs", "components")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, iso, NotificationType, ModuleIdentity, Counter32, Unsigned32, Integer32, Bits, Counter64, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "iso", "NotificationType", "ModuleIdentity", "Counter32", "Unsigned32", "Integer32", "Bits", "Counter64", "MibIdentifier", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
x25DteMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 48))
x25Dte = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90))
x25DteRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 1), )
if mibBuilder.loadTexts: x25DteRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRowStatusTable.setDescription('This entry controls the addition and deletion of x25Dte components.')
x25DteRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRowStatusEntry.setDescription('A single entry in the table represents a single x25Dte component.')
x25DteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRowStatus.setDescription('This variable is used as the basis for SNMP naming of x25Dte components. These components can be added and deleted.')
x25DteComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
x25DteStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteStorageType.setDescription('This variable represents the storage type value for the x25Dte tables.')
x25DteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: x25DteIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteIndex.setDescription('This variable represents the index for the x25Dte tables.')
x25DteCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 20), )
if mibBuilder.loadTexts: x25DteCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
x25DteCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 20, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteCidDataEntry.setDescription('An entry in the x25DteCidDataTable.')
x25DteCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
x25DteIfTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21), )
if mibBuilder.loadTexts: x25DteIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteIfTable.setDescription('This group provides the administrative set of parameters for the X.25 interface.')
x25DteIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteIfEntry.setDescription('An entry in the x25DteIfTable.')
x25DteInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2))).clone('dte')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInterfaceMode.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteInterfaceMode.setDescription('This attribute specifies the packet mode in which the X.25 interface operates. When this attribute is set to dte, interface on the other side of the physical link must be configured as a dce.')
x25DteMaxActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteMaxActiveChannels.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteMaxActiveChannels.setDescription('This attribute specifies the maximum number of channels that can be active on this interface including the Permanent Lcns and the Switched Lcns. In total maxActiveChannel will determine the maximum number of Lcn components which may exist at a given time. This should be set to a value greater or equal to the numberOfPLcn provisioned.')
x25DteNumberOfPLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteNumberOfPLcn.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteNumberOfPLcn.setDescription('This attribute specifies the number of Permanent Logical Channels that are supported on this X.25 interface (that is, the number of PermLcn components that may be provisioned at this interface). The PermLcn components use channel numbers starting from 1 and up to lowestILChannelNumber. A value of 0 for this attribute indicates that no Permanent Logical channels are supported on this X.25 interface.')
x25DtePacketSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modulo8", 1), ("modulo128", 2))).clone('modulo8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePacketSequencing.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePacketSequencing.setDescription('This attribute specifies the sequence numbering of packets for the X.25 interface. The value of this attribute must be the same as the packet sequencing configured at the X.25 interface on the other side of the physical link.')
x25DteT20RestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65536000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteT20RestartTimer.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteT20RestartTimer.setDescription('This attribute provides the period in milliseconds within which a restart request packet should be confirmed.')
x25DteT21CallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65536000)).clone(180000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteT21CallTimer.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteT21CallTimer.setDescription('This attribute provides the period in milliseconds within which a call request packet should be confirmed.')
x25DteT22ResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65536000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteT22ResetTimer.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteT22ResetTimer.setDescription('This attribute provides the period in milliseconds within which a reset request packet should be confirmed.')
x25DteT23ClearTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65536000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteT23ClearTimer.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteT23ClearTimer.setDescription('This attribute provides the period in milliseconds within which a clear request packet should be confirmed.')
x25DteLcnCTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 22), )
if mibBuilder.loadTexts: x25DteLcnCTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnCTable.setDescription('This group contains the provisionable attributes for the Logical Channel configuration of the X.25 Interface. The logical channel range table is ordered as follows: Permanent Logical Channels(PLC), One-way Incoming Channels (IC), Two-way Channels(TC) and One-way Outgoing Channels (OC), in a consecutive manner.')
x25DteLcnCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 22, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteLcnCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnCEntry.setDescription('An entry in the x25DteLcnCTable.')
x25DteLowestILChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLowestILChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLowestILChannelNumber.setDescription('This attribute specifies the lowest Lcn number of the One-way Incoming Channel range for this X.25 interface. The value for this attribute must be greater than the numberOfPLcn attribute.')
x25DteHighestILChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 22, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteHighestILChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteHighestILChannelNumber.setDescription('This attribute specifies the highest Lcn number of the One-way Incoming Channel range for this X.25 interface. A value of 0 indicates that there are no channels in this range.')
x25DteLowestTLChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 22, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLowestTLChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLowestTLChannelNumber.setDescription('This attribute specifies the lowest Lcn number of the Two-way Channel range for this X.25 interface. The value for this attribute must be greater than the highestILChannelNumber attribute.')
x25DteHighestTLChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 22, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteHighestTLChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteHighestTLChannelNumber.setDescription('This attribute specifies the highest Lcn number of the Two-way Channel range for this X.25 interface. A value of 0 indicates that there are no channels in this range.')
x25DteLowestOLChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 22, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLowestOLChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLowestOLChannelNumber.setDescription('This attribute specifies the lowest Lcn number of the One-way Outgoing Channel range for this X.25 interface. The value for this attribute must be greater than the highestTLChannelNumber attribute.')
x25DteHighestOLChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 22, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteHighestOLChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteHighestOLChannelNumber.setDescription('This attribute specifies the highest Lcn number of the One-way Outgoing Channel range for this X.25 interface. A value of 0 indicates that there are no channels in this range.')
x25DteDcpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23), )
if mibBuilder.loadTexts: x25DteDcpTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteDcpTable.setDescription('This group contains the provisionable attributes giving the default call parameters used by all the logical channels during call setup. It is possible that different default call parameters will be used for a particular call, based on the Peer component for the given call. The actual call parameters operational for a given call are found in the Lcn component.')
x25DteDcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteDcpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteDcpEntry.setDescription('An entry in the x25DteDcpTable.')
x25DteInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteInPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteInPacketSize.setDescription('This attribute specifies the maximum receive packet size in octets for the X.25 interface.')
x25DteOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteOutPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteOutPacketSize.setDescription('This attribute specifies the maximum transmit packet size in octets for the X.25 interface.')
x25DteInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteInWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteInWindowSize.setDescription('This attribute specifies the maximum receive window size for the X.25 interface. A window size greater than 7 is only valid when the packetSequencing attribute is set to modulo128.')
x25DteOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteOutWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteOutWindowSize.setDescription('This attribute specifies the maximum transmit window size for the X.25 interface. A window size greater than 7 is only valid when the packetSequencing is set to modulo128.')
x25DteAcceptReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("accept", 2), ("refuse", 3), ("neverAccept", 4))).clone('refuse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteAcceptReverseCharging.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteAcceptReverseCharging.setDescription('This attribute specifies whether local end will accept or refuse charges for a call. A value of neverAccept is only used at the X.25 interface level and indicates that this interface will never accept reverse charging (that is no Peer component can override this parameter, allowing reverse charged calls to be accepted).')
x25DteProposeReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("reverse", 2), ("local", 3))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteProposeReverseCharging.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteProposeReverseCharging.setDescription('This attribute specifies whether local/reverse charging is signalled in the call request packet.')
x25DteOutThroughputClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17))).clone(namedValues=NamedValues(("n75", 3), ("n150", 4), ("n300", 5), ("n600", 6), ("n1200", 7), ("n2400", 8), ("n4800", 9), ("n9600", 10), ("n19200", 11), ("n48000", 12), ("n64000", 13), ("notSpecified", 17))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteOutThroughputClassSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteOutThroughputClassSize.setDescription('This attribute specifies the value of the transmit throughput class to be negotiated. A value of notSpecified means the facility is not signalled.')
x25DteInThroughputClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17))).clone(namedValues=NamedValues(("n75", 3), ("n150", 4), ("n300", 5), ("n600", 6), ("n1200", 7), ("n2400", 8), ("n4800", 9), ("n9600", 10), ("n19200", 11), ("n48000", 12), ("n64000", 13), ("notSpecified", 17))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteInThroughputClassSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteInThroughputClassSize.setDescription('This attribute specifies the value of the receive throughput class to be negotiated. A value of notSpecified means the facility is not signalled.')
x25DteCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 10), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteCugIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteCugIndex.setDescription('This attribute specifies the index of the Closed User Group facility to signal. The index consists of two or four octets each representing a digit in the range of 0 to 9. A value of null (empty string) at the X.25 interface means no CUG facility is signalled. If a cugIndex is provisioned to be signalled, the cugoaIndex attribute must be null.')
x25DteCugoaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteCugoaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteCugoaIndex.setDescription('This attribute specifies the index of the Close User Group with Outgoing Access facility to signal. The index consists of two or four octets each representing a digit in the range of 0 to 9. A value of null (empty string) at the X.25 interface means no CUGOA facility is signalled. If a cugoaIndex is provisioned to be signalled, the cugIndex attribute must be null.')
x25DteChargingInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("notSpecified", 2), ("notRequested", 3), ("requested", 4))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteChargingInformation.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteChargingInformation.setDescription('This attribute specifies whether the charging information facility is to be signalled in a call request packet. A value of notSpecified means the facility is not signalled. A value of notRequested means the facility is signalled but charging information is not requested (that is, the charging info field of the facility is set Off). A value of requested means the facility is signalled to explicitly request charging information.')
x25DteRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 14), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteRpoa.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRpoa.setDescription('This attribute specifies the value of the RPOA facility to signal in a call request packet. The value of null (empty string) at the X.25 interface means no RPOA facility is signalled.')
x25DteTrnstDlySlctnAInd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(65536)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteTrnstDlySlctnAInd.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteTrnstDlySlctnAInd.setDescription('This attribute specifies the value of the Transit Delay Selection and Indication facility to signal in a call request packet. A value of 65536 at the X.25 interface level means no TDSAI facility is signalled.')
x25DteCallingNetworkFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 24), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteCallingNetworkFax.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteCallingNetworkFax.setDescription('This attribute specifies the Calling Network facilities to be signalled in a call request packet. A value of null (empty string) at the X.25 interface means no facilities are signalled.')
x25DteCalledNetworkFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 25), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteCalledNetworkFax.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteCalledNetworkFax.setDescription('This attribute specifies the called network facilities to be signalled in a call request packet. A value of null (empty string) at the X.25 interface means no facilities are signalled.')
x25DteCallUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 23, 1, 26), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteCallUserData.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteCallUserData.setDescription('This attribute specifies the user data to be signalled in the call request packet. A value of null (empty string) means no user data is signalled.')
x25DteIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 24), )
if mibBuilder.loadTexts: x25DteIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
x25DteIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 24, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteIfEntryEntry.setDescription('An entry in the x25DteIfEntryTable.')
x25DteIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
x25DteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 24, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
x25DteStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 25), )
if mibBuilder.loadTexts: x25DteStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
x25DteStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 25, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteStateEntry.setDescription('An entry in the x25DteStateTable.')
x25DteAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
x25DteOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
x25DteUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
x25DteOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 26), )
if mibBuilder.loadTexts: x25DteOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
x25DteOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 26, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteOperStatusEntry.setDescription('An entry in the x25DteOperStatusTable.')
x25DteSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
x25DteOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 27), )
if mibBuilder.loadTexts: x25DteOpTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteOpTable.setDescription('This group contains the operational status of the X.25 interface.')
x25DteOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 27, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteOpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteOpEntry.setDescription('An entry in the x25DteOpTable.')
x25DteInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 27, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notReady", 0), ("localRestarting", 1), ("remoteRestarting", 2), ("ready", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInterfaceState.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteInterfaceState.setDescription('This attribute specifies the state of the interface. The notReady state, is the initial state of the service, when it is being initialized. The localRestarting state is entered when a Restart packet is sent to the link and the interface is waiting for a response. The remoteRestarting state is entered when a Restart packet is received from the link, and is being processed. In ready state, the service is operational and ready to provide service.')
x25DteStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28), )
if mibBuilder.loadTexts: x25DteStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteStatsTable.setDescription('This component contains the statistics for the X.25 interface.')
x25DteStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"))
if mibBuilder.loadTexts: x25DteStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteStatsEntry.setDescription('An entry in the x25DteStatsTable.')
x25DteInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInCalls.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteInCalls.setDescription('This attribute counts the number of call packets received from link.')
x25DteInCallRefusals = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInCallRefusals.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteInCallRefusals.setDescription('This attribute counts the number of calls received from the link which have been cleared. This includes calls cleared by the X.25 interface and calls cleared by the higher level.')
x25DteInPrvdrInitiatedClrs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInPrvdrInitiatedClrs.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteInPrvdrInitiatedClrs.setDescription('This attribute counts the number of clear packets received from the link with a cause code other than DTE initiated.')
x25DteInRmtInitiatedRsts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInRmtInitiatedRsts.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteInRmtInitiatedRsts.setDescription('This attribute counts the number of reset packets received from the link with the cause code DTE initiated.')
x25DteInPrvdrInitiatedRsts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInPrvdrInitiatedRsts.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteInPrvdrInitiatedRsts.setDescription('This attribute counts the number of reset packets received from the link with the cause code other than DTE initiated.')
x25DteInRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInRestarts.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteInRestarts.setDescription('This attribute counts the number of restart packets received from the link while the service is in ready state.')
x25DteInDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInDataPackets.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteInDataPackets.setDescription('This attribute counts the number of data packets received from link.')
x25DteInPktsAcusdOfPrtclErr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInPktsAcusdOfPrtclErr.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteInPktsAcusdOfPrtclErr.setDescription('This attribute counts the number of clear, reset, restart and diagnostic packets received from link containing a procedure error cause code.')
x25DteInInterruptPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInInterruptPackets.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteInInterruptPackets.setDescription('This attributes counts the number of interrupt packets received from link.')
x25DteOutCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteOutCallAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteOutCallAttempts.setDescription('This attribute counts the number of call packets sent from this interface.')
x25DteOutCallFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteOutCallFailures.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteOutCallFailures.setDescription('This attribute counts the number of call attempts from this interface that failed. This includes calls that were cleared because of restrictive fast select.')
x25DteOutInterruptPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteOutInterruptPackets.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteOutInterruptPackets.setDescription('This attribute counts the number of interrupt packets sent to the link.')
x25DteOutDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteOutDataPackets.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteOutDataPackets.setDescription('This attribute counts the number of data packets sent to the link.')
x25DteOutActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteOutActiveChannels.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteOutActiveChannels.setDescription('This attribute indicates the number of One-way Outgoing Channels that are currently in use. This counter includes the call requests that have not been accepted.')
x25DteInActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteInActiveChannels.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteInActiveChannels.setDescription('This attribute indicates number of One-way Incoming Channels that are currently active.')
x25DteTwowayActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteTwowayActiveChannels.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteTwowayActiveChannels.setDescription('This attribute indicates the number of Two-way Channels that are in use. This includes call requests sent but not yet accepted.')
x25DteT20RestartTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteT20RestartTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteT20RestartTimeouts.setDescription('This attribute counts the number of times the T20 restart timer has expired.')
x25DteT21CallTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteT21CallTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteT21CallTimeouts.setDescription('This attribute counts the number of times the T21 call timer has expired.')
x25DteT22ResetTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteT22ResetTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteT22ResetTimeouts.setDescription('This attribute counts the number of times the T22 reset timer has expired.')
x25DteT23ClearTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 28, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteT23ClearTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteT23ClearTimeouts.setDescription('This attribute counts the number of times the T23 clear timer has expired.')
x25DtePeer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2))
x25DtePeerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 1), )
if mibBuilder.loadTexts: x25DtePeerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerRowStatusTable.setDescription('This entry controls the addition and deletion of x25DtePeer components.')
x25DtePeerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePeerIndex"))
if mibBuilder.loadTexts: x25DtePeerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerRowStatusEntry.setDescription('A single entry in the table represents a single x25DtePeer component.')
x25DtePeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerRowStatus.setDescription('This variable is used as the basis for SNMP naming of x25DtePeer components. These components can be added and deleted.')
x25DtePeerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePeerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
x25DtePeerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePeerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerStorageType.setDescription('This variable represents the storage type value for the x25DtePeer tables.')
x25DtePeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: x25DtePeerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerIndex.setDescription('This variable represents the index for the x25DtePeer tables.')
x25DtePeerIfTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 10), )
if mibBuilder.loadTexts: x25DtePeerIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerIfTable.setDescription('This group provides the administrative set of parameters for the Peer interface.')
x25DtePeerIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePeerIndex"))
if mibBuilder.loadTexts: x25DtePeerIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerIfEntry.setDescription('An entry in the x25DtePeerIfTable.')
x25DtePeerEncAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(204))).clone(namedValues=NamedValues(("ip", 204))).clone('ip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerEncAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerEncAddressType.setDescription('This attribute specifies the encapsulation type for the address of the remote host with which this Peer component allows communication.')
x25DtePeerEncAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerEncAddress.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerEncAddress.setDescription('This attribute specifies the encapsulation address of the remote host with which this Peer component allows communication. This address must correspond with the encapsulation address type. Thus in the case of IP, it will contain a IP address.')
x25DtePeerX25Address = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 10, 1, 3), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerX25Address.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerX25Address.setDescription("This attribute specifies the X.25 address that identifies the remote host with which this Peer component allows communication. The remote X.25 interface could be subdivided through the use of RemoteGroup components; in which case this x25Address is the X.25 address of the destination's RemoteGroup (not to be confused with the RemoteGroup indicated by the linkToRemoteGroup attribute of THIS Peer component).")
x25DtePeerLinkToRemoteGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 10, 1, 4), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerLinkToRemoteGroup.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerLinkToRemoteGroup.setDescription('This is a link to a RemoteGroup component. The RemoteGroup components logically divide up the X.25 Interface such that a number of Protocol Ports (and consequently a number of Virtual Routers) may share the same X.25 Interface into a Wide Area Network. In particular, the remote host identified by this Peer component is designated as belonging to the RemoteGroup linked by this attribute. The set of all Peer components and PermLcn components which link to a given RemoteGroup determine the subset of remote hosts which are accessible to a particular Protocol Port (and ultimately a Virtual Router).')
x25DtePeerCpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12), )
if mibBuilder.loadTexts: x25DtePeerCpTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerCpTable.setDescription('This group contains the call parameters used to establish a call to/ from the remote host identified by this Peer component')
x25DtePeerCpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePeerIndex"))
if mibBuilder.loadTexts: x25DtePeerCpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerCpEntry.setDescription('An entry in the x25DtePeerCpTable.')
x25DtePeerInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerInPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerInPacketSize.setDescription('This attribute specifies the default maximum receive packet size in octets. A setting of 0 indicates the inPacketSize setting for the X.25 interface (in X25Dte component) is used during call setup to the remote host identified by this Peer component.')
x25DtePeerOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerOutPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerOutPacketSize.setDescription('This attribute specifies the default maximum transmit packet size in octets. A setting of 0 indicates the outPacketSize setting for the X.25 interface (in the X25Dte component) is used during call setup to the remote host identified by this Peer component.')
x25DtePeerInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerInWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerInWindowSize.setDescription('This attribute specifies the default receive window size. A window size of 0 indicates the inWindowSize setting for the X.25 interface (in the X25Dte component) is used during call setup to the remote host identified by this Peer component. A window size greater than 7 is only valid when the packetSequencing attribute of the X25Dte component is set to modulo128.')
x25DtePeerOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerOutWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerOutWindowSize.setDescription('This attribute specifies the default transmit window size. A window size of 0 indicates the outWindowSize setting for the X.25 interface is used during call setup to the Peer identified by this component. A window size greater than 7 is only valid when the packetSequencing attribute of the X25Dte component is set to modulo128.')
x25DtePeerAcceptReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("accept", 2), ("refuse", 3))).clone('refuse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerAcceptReverseCharging.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerAcceptReverseCharging.setDescription('This attribute specifies whether the local end will accept or refuse charges for a call from the remote host identified by this Peer component. A value of default indicates the use of the acceptReverseCharging value from the X25Dte component. If the value at the X25Dte level is neverAccept, a value of accept in this Peer component will be ignored because no reverse charge calls are to be accepted by this X.25 Dte.')
x25DtePeerProposeReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("reverse", 2), ("local", 3))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerProposeReverseCharging.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerProposeReverseCharging.setDescription('This attribute specifies whether local/reverse charging is signalled in a call request packet. A value of default indicates the use of the value from the proposeReverseCharging attribute of the X25Dte component.')
x25DtePeerOutThroughputClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18))).clone(namedValues=NamedValues(("n75", 3), ("n150", 4), ("n300", 5), ("n600", 6), ("n1200", 7), ("n2400", 8), ("n4800", 9), ("n9600", 10), ("n19200", 11), ("n48000", 12), ("n64000", 13), ("notSpecified", 17), ("default", 18))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerOutThroughputClassSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerOutThroughputClassSize.setDescription('This attribute specifies the value of the transmit throughput class to be negotiated. A value of default indicates the use of the value from the outThroughputClassSize attribute of the X25Dte component. A value of notSpecified means the facility is not signalled.')
x25DtePeerInThroughputClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18))).clone(namedValues=NamedValues(("n75", 3), ("n150", 4), ("n300", 5), ("n600", 6), ("n1200", 7), ("n2400", 8), ("n4800", 9), ("n9600", 10), ("n19200", 11), ("n48000", 12), ("n64000", 13), ("notSpecified", 17), ("default", 18))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerInThroughputClassSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerInThroughputClassSize.setDescription('This attribute specifies the value of the receive throughput class to be negotiated. A value of default indicates the use of the value from the inThroughputClassSize attribute of the X25Dte component. A value of notSpecified means the facility is not signalled.')
x25DtePeerCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 10), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerCugIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerCugIndex.setDescription("This attribute specifies the index of the Closed User Group facility to signal. A value of 'DEF' indicates the use of the value from the cugIndex attribute of the X25Dte component. A value of null (empty string) indicates no CUG facility is to be signalled. If a cugIndex is provisioned to be signalled, the cugoaIndex attribute must be null.")
x25DtePeerCugoaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerCugoaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerCugoaIndex.setDescription("This attribute specifies the index of the Closed User Group with Outgoing Access facility to signal. A value of 'DEF' indicates the use of the value from the cugoaIndex attribute of the X25Dte component. A value of null (empty string) indicates no CUGOA facility is to be signalled. If a cugoaIndex is provisioned to be signalled, the cugIndex attribute must be null.")
x25DtePeerNetworkUserIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 12), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerNetworkUserIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerNetworkUserIdentifier.setDescription('This attribute specifies the Network User Identifier facility to signal. A value of null (empty string) indicates no NUI facility is to be signalled.')
x25DtePeerChargingInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("notSpecified", 2), ("notRequested", 3), ("requested", 4))).clone('notSpecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerChargingInformation.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerChargingInformation.setDescription('This attribute specifies whether the charging information facility is signalled in the call request packet. A value of default indicates the use of the value from the chargingInformation attribute of the X25Dte component. A value of notSpecified means the facility is not signalled. A value of notRequested means the facility is signalled but charging information is not requested (that is, the charging info field of the facility is set Off). A value of requested means the facility is signalled to explicitly request charging information.')
x25DtePeerRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 14), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerRpoa.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerRpoa.setDescription("This attribute specifies the RPOA facility to signal in a call request packet. A value of 'DEF' indicates the use of the value from the rpoa attribute of the X25Dte component. A value of null (empty string) indicates no RPOA facility is to be signalled.")
x25DtePeerTrnstDlySlctnAInd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65537)).clone(65536)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerTrnstDlySlctnAInd.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerTrnstDlySlctnAInd.setDescription('This attribute specifies the value of the Transit Delay Selection and Indication facility to signal in a call request packet. A value of 65536 indicates no facility is signalled. A value of 65537 indicates the use of the value from the trnstDlySlctnAInd attribute of the X25Dte component.')
x25DtePeerCallingNetworkFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 24), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerCallingNetworkFax.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerCallingNetworkFax.setDescription('This attribute specifies the Calling Network facilities to signal in a call request packet. The facilities are encoded here exactly as they are encoded in the call packet. These facilities do not include the marker facility code. A value of null (empty string) indicates the callingNetworkFax from the X25Dte are to be signalled. If that value is also null, no Calling Network Facilities are signalled.')
x25DtePeerCalledNetworkFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 25), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerCalledNetworkFax.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerCalledNetworkFax.setDescription('This attribute specifies the Called Network facilities to signal in a call request packet. The facilities are encoded here exactly as they are encoded in the call packet. These facilities do not include the marker facility code. A value of null (empty string) indicates the calledNetworkFax from the X25Dte are to be signalled. If that value is also null, no Called Network Facilities are signalled.')
x25DtePeerCallUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 12, 1, 26), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePeerCallUserData.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerCallUserData.setDescription('This attribute specifies the user data to signal in a call request packet. A value of null (empty string) indicates that the callUserData from the X25Dte is to be signalled. If callUserData of the X25Dte component is also null and protocolEncType of this Peer has the value IP, H.CC will be signalled as the call user data of a call request packet. Thus for IP encapsulation according to RFC1356, both the callUserData from the Peer and X25Dte components must be null and the protocolEncType set to IP.')
x25DtePeerPEncTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 208), )
if mibBuilder.loadTexts: x25DtePeerPEncTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerPEncTable.setDescription("Each instance of this replicated attribute describes an encapsulation method permitted for encapsulating the protocol data units (PDUs) of an upper layer protocol when communicating with the remote host identified by this Peer component. The index of a given replicated instance of this attribute represents the relative priority of the encapsulation method specified by the given attribute instance. An attribute with index '1' has the highest priority, so the encapsulation method described by it will be the first one attempted when signalling a call to the link. If the protocolEncType is set to IP to encapsulate IP traffic according to RFC1356, the callUserData for this Peer component and the X25Dte component must both be null, so that H.CC will be signalled as the call user data of the call request. This indicates that the protocol encapsulation type of IP is to be used for the channel. A call received from the link will be accepted as long as the encapsulation method indicated in the call user data of the incoming call packet is included in one of these replicated attributes. (This presupposes that the incoming call has been directed to the RemoteGroup to which this Peer is linked through the linkToRemoteGroup attribute.)")
x25DtePeerPEncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 208, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePeerIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePeerPEncIndex"))
if mibBuilder.loadTexts: x25DtePeerPEncEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerPEncEntry.setDescription('An entry in the x25DtePeerPEncTable.')
x25DtePeerPEncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 208, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: x25DtePeerPEncIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerPEncIndex.setDescription('This variable represents the index for the x25DtePeerPEncTable.')
x25DtePeerPEncValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 208, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(204))).clone(namedValues=NamedValues(("ip", 204)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePeerPEncValue.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerPEncValue.setDescription('This variable represents an individual value for the x25DtePeerPEncTable.')
x25DtePeerPEncRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 208, 1, 3), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: x25DtePeerPEncRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerPEncRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the x25DtePeerPEncTable.')
x25DtePeerLcnTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 209), )
if mibBuilder.loadTexts: x25DtePeerLcnTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerLcnTable.setDescription('This attribute specifies the local logical channel numbers (Lcn) in use for the X.25 calls to the remote host identified by this Peer component.')
x25DtePeerLcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 209, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePeerIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePeerLcnValue"))
if mibBuilder.loadTexts: x25DtePeerLcnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerLcnEntry.setDescription('An entry in the x25DtePeerLcnTable.')
x25DtePeerLcnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 2, 209, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePeerLcnValue.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePeerLcnValue.setDescription('This variable represents both the value and the index for the x25DtePeerLcnTable.')
x25DtePLcn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3))
x25DtePLcnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 1), )
if mibBuilder.loadTexts: x25DtePLcnRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePLcnRowStatusTable.setDescription('This entry controls the addition and deletion of x25DtePLcn components.')
x25DtePLcnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePLcnIndex"))
if mibBuilder.loadTexts: x25DtePLcnRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePLcnRowStatusEntry.setDescription('A single entry in the table represents a single x25DtePLcn component.')
x25DtePLcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePLcnRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePLcnRowStatus.setDescription('This variable is used as the basis for SNMP naming of x25DtePLcn components. These components can be added and deleted.')
x25DtePLcnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePLcnComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePLcnComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
x25DtePLcnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePLcnStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePLcnStorageType.setDescription('This variable represents the storage type value for the x25DtePLcn tables.')
x25DtePLcnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: x25DtePLcnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePLcnIndex.setDescription('This variable represents the index for the x25DtePLcn tables.')
x25DtePLcnProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10), )
if mibBuilder.loadTexts: x25DtePLcnProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePLcnProvTable.setDescription('This group contains the provisionable parameters for the permanent logical channels (PLcns) on the X.25 interface (corresponding to Permanent Virtual Circuits (PVCs) provisioned on the Wide Area Network).')
x25DtePLcnProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePLcnIndex"))
if mibBuilder.loadTexts: x25DtePLcnProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePLcnProvEntry.setDescription('An entry in the x25DtePLcnProvTable.')
x25DtePLcnEncAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 204))).clone(namedValues=NamedValues(("none", 0), ("ip", 204))).clone('ip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePLcnEncAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePLcnEncAddressType.setDescription('This attribute specifies the encapsulation type for the address of the remote host with which this Peer component allows communication.')
x25DtePLcnEncAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePLcnEncAddress.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePLcnEncAddress.setDescription('This attribute specifies the encapsulation address of the remote host with which this PermLcn component defines a connection')
x25DtePLcnProtocolEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 204, 257))).clone(namedValues=NamedValues(("null", 0), ("ip", 204), ("nscNull", 257))).clone('ip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePLcnProtocolEncType.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePLcnProtocolEncType.setDescription('This attribute specifies the encapsulation method to use when exchanging protocol data units (PDUs) over this channel. IP and Null protocolEncTypes are as defined in RFC1356. NscNull is an encapsulation method for carrying IP datagrams which requires removing 3 padding octets of zeroes and the protocol identifier H.CC from the front of each data packet received from the link in order to obtain the PDU. PDUs sent to the link are propounded by a the protocol identifier H.CC. NscNull should only be set when the remote host is following this same encapsulation method.')
x25DtePLcnLinkToRemoteGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10, 1, 4), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePLcnLinkToRemoteGroup.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePLcnLinkToRemoteGroup.setDescription('This attribute specifies the link to the RemoteGroup, indicating the RemoteGroup component with which this PermLcn component is associated. The RemoteGroup components logically divide up the X.25 Interface such that a number of Protocol Ports (and consequently a number of Virtual Routers) may share the same X.25 Interface into a Wide Area Network. In particular, the remote host identified by this PermLcn component is designated as belonging to the RemoteGroup linked by this attribute. The set of all PermLcn and Peer components which link to a given RemoteGroup determine the subset of remote hosts which are accessible to a particular Protocol Port (and ultimately a Virtual Router).')
x25DtePLcnInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePLcnInPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePLcnInPacketSize.setDescription('This attribute specifies the maximum receive packet size in octets.')
x25DtePLcnOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePLcnOutPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePLcnOutPacketSize.setDescription('This attribute specifies the maximum transmit packet size in octets.')
x25DtePLcnInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePLcnInWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePLcnInWindowSize.setDescription('This attribute specifies the maximum receive window size. A inWindowSize greater than 7 is only valid when the packetSequencing attribute of the X25Dte component is set to modulo128.')
x25DtePLcnOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 3, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePLcnOutWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePLcnOutWindowSize.setDescription('This attribute specifies the maximum transmit window size. A outWindowSize greater than 7 is only valid when the packetSequencing attribute of the X25Dte component is set to modulo128.')
x25DteLcn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4))
x25DteLcnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 1), )
if mibBuilder.loadTexts: x25DteLcnRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of x25DteLcn components.')
x25DteLcnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLcnIndex"))
if mibBuilder.loadTexts: x25DteLcnRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnRowStatusEntry.setDescription('A single entry in the table represents a single x25DteLcn component.')
x25DteLcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnRowStatus.setDescription('This variable is used as the basis for SNMP naming of x25DteLcn components. These components cannot be added nor deleted.')
x25DteLcnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
x25DteLcnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnStorageType.setDescription('This variable represents the storage type value for the x25DteLcn tables.')
x25DteLcnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: x25DteLcnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnIndex.setDescription('This variable represents the index for the x25DteLcn tables.')
x25DteLcnStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 10), )
if mibBuilder.loadTexts: x25DteLcnStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnStateTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
x25DteLcnStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLcnIndex"))
if mibBuilder.loadTexts: x25DteLcnStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnStateEntry.setDescription('An entry in the x25DteLcnStateTable.')
x25DteLcnAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
x25DteLcnOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
x25DteLcnUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
x25DteLcnCpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11), )
if mibBuilder.loadTexts: x25DteLcnCpTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnCpTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the call parameters that are in use for this logical channel. For a PVC only the packet size and the window size attributes are meaningful.')
x25DteLcnCpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLcnIndex"))
if mibBuilder.loadTexts: x25DteLcnCpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnCpEntry.setDescription('An entry in the x25DteLcnCpTable.')
x25DteLcnInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnInPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnInPacketSize.setDescription('This attribute indicates the maximum receive packet size in octets.')
x25DteLcnOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(64, 64), ValueRangeConstraint(128, 128), ValueRangeConstraint(256, 256), ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnOutPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnOutPacketSize.setDescription('This attribute indicates the maximum transmit packet size in octets.')
x25DteLcnInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnInWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnInWindowSize.setDescription('This attribute indicates the receive window size.')
x25DteLcnOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnOutWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnOutWindowSize.setDescription('This attribute indicates the transmit window size.')
x25DteLcnProposeReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("reverse", 2), ("local", 3))).clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnProposeReverseCharging.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnProposeReverseCharging.setDescription('Specifies whether local/reverse charging was negotiated for this logical channel. To determine which end of the channel is paying for the call, this attribute must be examined in combination with the callDirection attribute. For example, if this attribute is set to reverse and the callDirection attribute indicates incoming, it means the incoming call signalled reverse charging, so the local end of the channel is being charged. On the other, if the value of this attribute is reverse and the callDirection is outgoing, it means that the call request sent to the link signalled reverse charging; so the remote end is charged. Similarly, a value of local must also be interpreted in combination with the callDirection to determine which end is being charged. If the value of the callDirection attribute is plcn, the proposeReverseCharging attribute is meaningless.')
x25DteLcnFastSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("unrestricted", 3), ("restricted", 4), ("no", 5))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnFastSelect.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnFastSelect.setDescription('This attribute indicates whether the fast select was used in establishing this logical channel.')
x25DteLcnOutThroughputClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17))).clone(namedValues=NamedValues(("n75", 3), ("n150", 4), ("n300", 5), ("n600", 6), ("n1200", 7), ("n2400", 8), ("n4800", 9), ("n9600", 10), ("n19200", 11), ("n48000", 12), ("n64000", 13), ("notSpecified", 17))).clone('notSpecified')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnOutThroughputClassSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnOutThroughputClassSize.setDescription('This attribute specifies the transmit throughput class.')
x25DteLcnInThroughputClassSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17))).clone(namedValues=NamedValues(("n75", 3), ("n150", 4), ("n300", 5), ("n600", 6), ("n1200", 7), ("n2400", 8), ("n4800", 9), ("n9600", 10), ("n19200", 11), ("n48000", 12), ("n64000", 13), ("notSpecified", 17))).clone('notSpecified')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnInThroughputClassSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnInThroughputClassSize.setDescription('This attribute specifies the receive throughput class.')
x25DteLcnCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 9), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnCugIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnCugIndex.setDescription('This attribute indicates the index of the Closed User Group facility used in establishing this logical channel.')
x25DteLcnCugoaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 10), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnCugoaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnCugoaIndex.setDescription('This attribute indicates the index of the Closed User Group with Outgoing Access facility used in establishing this logical channel.')
x25DteLcnNetworkUserIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 11), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnNetworkUserIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnNetworkUserIdentifier.setDescription('Specifies the Network User Identifier used for this logical channel.')
x25DteLcnChargingInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("notSpecified", 2), ("notRequested", 3), ("requested", 4))).clone('notSpecified')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnChargingInformation.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnChargingInformation.setDescription('This attribute indicates whether or not the charging information facility was used in establishing this logical channel. A value of notSpecified means the facility was not signalled. A value of notRequested means the facility was signalled but charging information was not requested (that is, the charging info field of the facility was set Off). A value of requested means the facility was signalled to explicitly request charging information. DESCRIPTION')
x25DteLcnRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 13), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnRpoa.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnRpoa.setDescription('This attribute indicates the RPOA facility which was signalled in establishing this logical channel.')
x25DteLcnTrnstDlySlctnAInd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536)).clone(65536)).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnTrnstDlySlctnAInd.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnTrnstDlySlctnAInd.setDescription('This attribute indicates the Transit Delay Selection and Indication value used for this logical channel. A value of 65536 means no facility was signalled.')
x25DteLcnCallingNetworkFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 23), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnCallingNetworkFax.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnCallingNetworkFax.setDescription('This attribute indicates the Calling Network facilities which were signalled in the call packet. A value of null (empty string) means no calling network facilities were signalled.')
x25DteLcnCalledNetworkFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 24), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnCalledNetworkFax.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnCalledNetworkFax.setDescription('This attribute indicates the called network facilities which were signalled in the call packet. A value of null (empty string) means no called network facilities were signalled.')
x25DteLcnCallUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 11, 1, 25), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnCallUserData.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnCallUserData.setDescription('This attribute indicates the user data which was signalled in the call packet. A value of null (empty string) means no user data was signalled.')
x25DteLcnLcnStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 12), )
if mibBuilder.loadTexts: x25DteLcnLcnStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnLcnStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the status for an X.25 Logical Channel.')
x25DteLcnLcnStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLcnIndex"))
if mibBuilder.loadTexts: x25DteLcnLcnStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnLcnStatusEntry.setDescription('An entry in the x25DteLcnLcnStatusTable.')
x25DteLcnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("closed", 2), ("calling", 3), ("dataTransfer", 4), ("clearing", 5), ("resetting", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnStatus.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnStatus.setDescription('This attribute indicates the current state of the logical channel.')
x25DteLcnCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("permanentLcn", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnCallDirection.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnCallDirection.setDescription('This attribute indicates the direction of the call that caused the establishment of this channel.')
x25DteLcnCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 12, 1, 4), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnCalledAddress.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnCalledAddress.setDescription('This attribute indicates the called X.25 address to which the call is established.')
x25DteLcnCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 12, 1, 5), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnCallingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnCallingAddress.setDescription('This attribute indicates the calling X.25 address from which the call originated')
x25DteLcnOriginalCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 12, 1, 6), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnOriginalCalledAddress.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnOriginalCalledAddress.setDescription('This attribute indicates the X.25 address of the originally called DTE to which the call was attempted. This could be different from the value of the calledAddress attribute in the case where the original call was redirected.')
x25DteLcnStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13), )
if mibBuilder.loadTexts: x25DteLcnStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnStatsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the operational statistics for an X.25 Logical Channel.')
x25DteLcnStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLcnIndex"))
if mibBuilder.loadTexts: x25DteLcnStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnStatsEntry.setDescription('An entry in the x25DteLcnStatsTable.')
x25DteLcnInUknownProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnInUknownProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnInUknownProtocols.setDescription('This attribute counts the number packets received from link which were discareded because of an unkown or unsupported protocols.')
x25DteLcnInDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnInDataOctets.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnInDataOctets.setDescription('This attribute counts the number of octets of user data received from the link.')
x25DteLcnInDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnInDataPackets.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnInDataPackets.setDescription('This attribute counts the number of data packets received from the link.')
x25DteLcnInRmtInitiatedRsts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnInRmtInitiatedRsts.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnInRmtInitiatedRsts.setDescription("This attribute counts the number of reset packets, with a cause code of 'DTE initiated', which were received from the link")
x25DteLcnInPrvdrInitiatedRsts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnInPrvdrInitiatedRsts.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnInPrvdrInitiatedRsts.setDescription("This attribute counts the number of reset packets, with a cause code other than 'DTE initiated', which were received from the link.")
x25DteLcnInInterruptPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnInInterruptPackets.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnInInterruptPackets.setDescription('This attribute counts the number of interrupt packets received from the link.')
x25DteLcnOutDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnOutDataOctets.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnOutDataOctets.setDescription('This attribute counts the number of octets of user data sent to the link.')
x25DteLcnOutDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnOutDataPackets.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnOutDataPackets.setDescription('This attribute counts the number of data packets sent to link.')
x25DteLcnOutInterruptPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnOutInterruptPackets.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnOutInterruptPackets.setDescription('This attribute counts the number of interrupt packets sent to link.')
x25DteLcnT22ResetTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 4, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLcnT22ResetTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLcnT22ResetTimeouts.setDescription('This attribute counts the number of times the t22 reset timer has expired.')
x25DteLapb = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5))
x25DteLapbRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 1), )
if mibBuilder.loadTexts: x25DteLapbRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbRowStatusTable.setDescription('This entry controls the addition and deletion of x25DteLapb components.')
x25DteLapbRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"))
if mibBuilder.loadTexts: x25DteLapbRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbRowStatusEntry.setDescription('A single entry in the table represents a single x25DteLapb component.')
x25DteLapbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbRowStatus.setDescription('This variable is used as the basis for SNMP naming of x25DteLapb components. These components cannot be added nor deleted.')
x25DteLapbComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
x25DteLapbStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbStorageType.setDescription('This variable represents the storage type value for the x25DteLapb tables.')
x25DteLapbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: x25DteLapbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbIndex.setDescription('This variable represents the index for the x25DteLapb tables.')
x25DteLapbCpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10), )
if mibBuilder.loadTexts: x25DteLapbCpTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbCpTable.setDescription('X25Dte/n Lapb This group contains the set of configuration parameters for the LAPB interface.')
x25DteLapbCpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"))
if mibBuilder.loadTexts: x25DteLapbCpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbCpEntry.setDescription('An entry in the x25DteLapbCpTable.')
x25DteLapbStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbStationType.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbStationType.setDescription('This attribute specifies the DCE or the DTE role of operation for the LAPB interface. Changing this attribute will cause the lapb link to Reset.')
x25DteLapbFrameSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modulo8", 1), ("modulo128", 2))).clone('modulo8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbFrameSequencing.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFrameSequencing.setDescription('This attribute specifies the modulo of the frame sequence numbering of the LAPB interface. Changing this attribute will cause the lapb link to Reset.')
x25DteLapbN1FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(40, 32856)).clone(32856)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbN1FrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbN1FrameSize.setDescription('This attribute specifies the maximum frame size in bits that can be transmitted or received. This value must be greater than or equal to the maximum packet size across the interface(in bits)+ max level 3 header size(in bits)+ max level 2 header size(in bits)+ crc in bits. (max Pkt size + -------------> 4096*8 max level 3 header size + ---> 4*8 level 2 header size + --------> 5*8 crc -------------------> 2*8)')
x25DteLapbKWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbKWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbKWindowSize.setDescription('This attribute specifies the window size. This is the maximum number of unacknowledged sequenced frames that may be outstanding from or to this interface at any one time. A window size of greater than 7 is only valid when the sequence numbering of frames is modulo 128.')
x25DteLapbN2TransmitLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbN2TransmitLimit.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbN2TransmitLimit.setDescription('This attribute specifies the maximum number of times a frame can be transmitted before appropriate recovery action is taken.')
x25DteLapbT1AckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbT1AckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbT1AckTimer.setDescription('This attribute specifies the period in milliseconds within which an acknowledgment of a sent frame must be received. The value set for t1 ack timer must be less than the value set for the t4 idle probe timer.')
x25DteLapbT2AckDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbT2AckDelayTimer.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbT2AckDelayTimer.setDescription('This attribute specifies the maximum period in milliseconds permissible to wait before sending an acknowledgment for a received in sequenced I-frame. A value of 0 means there will be no delay in acknowledgment.')
x25DteLapbT4IdleProbeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbT4IdleProbeTimer.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbT4IdleProbeTimer.setDescription('This attribute specifies the time period in milliseconds the link will be permitted to remain idle (that is, no frames are exchanged on the data link). Upon expiry of this timer, LAPB will poll its peer for status. The value set for t4 idle probe timer must be greater than the value set for the t1 ack timer.')
x25DteLapbActionInitiate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("sendSABM", 1), ("sendDM", 3), ("none", 4))).clone('sendSABM')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbActionInitiate.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbActionInitiate.setDescription('This attribute specifies the action to be taken by the LAPB interface to initiate link setup.')
x25DteLapbActionRecvDM = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("sendSABM", 1))).clone('sendSABM')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbActionRecvDM.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbActionRecvDM.setDescription('This attribute specifies the action to be taken by the LAPB interface when it receives a DM response.')
x25DteLapbTxQDegradeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(65536)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbTxQDegradeThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbTxQDegradeThreshold.setDescription('This attribute specifies the threshold of the number of higher layer packets queued, beyond which LAPB should initiate a service degrade alarm. A value of 65536 means no threshold.')
x25DteLapbTxQResetThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 10, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(65536)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbTxQResetThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbTxQResetThreshold.setDescription('This attribute specifies the threshold of the number of higher layer packets queued, beyond which LAPB should initiate an overload alarm and reset the link. A value of 65536 means no threshold.')
x25DteLapbStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 11), )
if mibBuilder.loadTexts: x25DteLapbStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
x25DteLapbStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"))
if mibBuilder.loadTexts: x25DteLapbStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbStateEntry.setDescription('An entry in the x25DteLapbStateTable.')
x25DteLapbAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
x25DteLapbOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
x25DteLapbUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
x25DteLapbStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 12), )
if mibBuilder.loadTexts: x25DteLapbStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbStatusTable.setDescription('This group contains the status for the LAPB interface.')
x25DteLapbStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"))
if mibBuilder.loadTexts: x25DteLapbStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbStatusEntry.setDescription('An entry in the x25DteLapbStatusTable.')
x25DteLapbCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("disconnected", 1), ("linkSetup", 2), ("frameReject", 3), ("disconnectRequest", 4), ("informationTransfer", 5), ("waitingAck", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbCurrentState.setDescription('This attribute specifies the current state of the LAPB interface.')
x25DteLapbLastStateChangeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notStarted", 1), ("abmEntered", 2), ("abmeEntered", 3), ("abmReset", 4), ("abmeReset", 5), ("dmReceived", 6), ("dmSent", 7), ("discReceived", 8), ("discSent", 9), ("frmrReceived", 10), ("frmrSent", 11), ("n2TimeOut", 12), ("other", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbLastStateChangeReason.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbLastStateChangeReason.setDescription('This attribute specifies the reason for the most recent state change.')
x25DteLapbFrmrTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 12, 1, 3), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 7)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFrmrTransmit.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFrmrTransmit.setDescription('This attribute specifies the Information field of the FRMR most recently sent.')
x25DteLapbFrmrReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 12, 1, 4), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 7)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFrmrReceive.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFrmrReceive.setDescription('This attribute specifies the Information field of the FRMR most recently received.')
x25DteLapbCurrentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbCurrentQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbCurrentQueueSize.setDescription('This attribute specifies the number of packets on the lapb transmit queue.')
x25DteLapbStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 13), )
if mibBuilder.loadTexts: x25DteLapbStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbStatsTable.setDescription('This group contains the statistics for the LAPB interface.')
x25DteLapbStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"))
if mibBuilder.loadTexts: x25DteLapbStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbStatsEntry.setDescription('An entry in the x25DteLapbStatsTable.')
x25DteLapbStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbStateChanges.setDescription("This attribute counts the number of times LAPB state has changed. Refer to the attribute 'linkState' for the set of possible states.")
x25DteLapbRemoteBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbRemoteBusy.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbRemoteBusy.setDescription('This attribute counts the number of times transmission of an I-frame was un-successful due to a perceived remote busy condition (window closed or remote busy).')
x25DteLapbTransmitRejectFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbTransmitRejectFrames.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbTransmitRejectFrames.setDescription('This attribute counts the number of REJ frames sent by the interface.')
x25DteLapbReceiveRejectFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbReceiveRejectFrames.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbReceiveRejectFrames.setDescription('This attribute counts the number of REJ frames received by the interface.')
x25DteLapbT1AckTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbT1AckTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbT1AckTimeout.setDescription('This attribute counts the number of times the T1 timer has expired.')
x25DteLapbFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2))
x25DteLapbFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 1), )
if mibBuilder.loadTexts: x25DteLapbFramerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerRowStatusTable.setDescription('This entry controls the addition and deletion of x25DteLapbFramer components.')
x25DteLapbFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbFramerIndex"))
if mibBuilder.loadTexts: x25DteLapbFramerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerRowStatusEntry.setDescription('A single entry in the table represents a single x25DteLapbFramer component.')
x25DteLapbFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerRowStatus.setDescription('This variable is used as the basis for SNMP naming of x25DteLapbFramer components. These components cannot be added nor deleted.')
x25DteLapbFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
x25DteLapbFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerStorageType.setDescription('This variable represents the storage type value for the x25DteLapbFramer tables.')
x25DteLapbFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: x25DteLapbFramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerIndex.setDescription('This variable represents the index for the x25DteLapbFramer tables.')
x25DteLapbFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 10), )
if mibBuilder.loadTexts: x25DteLapbFramerProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerProvTable.setDescription('This group contains the base provisioning data for the Framer component. Application or hardware interface specific provisioning data is contained in other provisionable Framer groups.')
x25DteLapbFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbFramerIndex"))
if mibBuilder.loadTexts: x25DteLapbFramerProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerProvEntry.setDescription('An entry in the x25DteLapbFramerProvTable.')
x25DteLapbFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbFramerInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerInterfaceName.setDescription("This attribute contains a hardware component name. The attribute associates the application with a specific link. This defines the module processor on which Framer's parent component (as well as Framer itself) will run.")
x25DteLapbFramerLinkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 11), )
if mibBuilder.loadTexts: x25DteLapbFramerLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerLinkTable.setDescription('This group contains attributes defining the framing of data on the link interface.')
x25DteLapbFramerLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbFramerIndex"))
if mibBuilder.loadTexts: x25DteLapbFramerLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerLinkEntry.setDescription('An entry in the x25DteLapbFramerLinkTable.')
x25DteLapbFramerFlagsBetweenFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteLapbFramerFlagsBetweenFrames.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerFlagsBetweenFrames.setDescription('This attribute defines the number of flags that are inserted between frames sent to the link interface.')
x25DteLapbFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 12), )
if mibBuilder.loadTexts: x25DteLapbFramerStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
x25DteLapbFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbFramerIndex"))
if mibBuilder.loadTexts: x25DteLapbFramerStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerStateEntry.setDescription('An entry in the x25DteLapbFramerStateTable.')
x25DteLapbFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
x25DteLapbFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
x25DteLapbFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
x25DteLapbFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13), )
if mibBuilder.loadTexts: x25DteLapbFramerStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerStatsTable.setDescription('This group contains the operational statistics data for a Framer component.')
x25DteLapbFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbFramerIndex"))
if mibBuilder.loadTexts: x25DteLapbFramerStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerStatsEntry.setDescription('An entry in the x25DteLapbFramerStatsTable.')
x25DteLapbFramerFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerFrmToIf.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerFrmToIf.setDescription('The number of frames transmitted to the link interface by Framer. Note: This does not include the number of frames transmitted directly to the hardware queue, thus bypassing the Framer component.')
x25DteLapbFramerFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerFrmFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerFrmFromIf.setDescription('The number of frames received from the link interface by Framer.')
x25DteLapbFramerOctetFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerOctetFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerOctetFromIf.setDescription('The number of bytes received from the link interface by Framer.')
x25DteLapbFramerAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerAborts.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerAborts.setDescription('This attribute is the total number of aborts received.')
x25DteLapbFramerCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerCrcErrors.setDescription('This attribute is the total number of frames with CRC errors, occurring in the receive direction from the link.')
x25DteLapbFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerLrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerLrcErrors.setDescription('This attribute is the total number of frames with LRC errors, occurring in the Tx link prior to transmission onto the link.')
x25DteLapbFramerNonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerNonOctetErrors.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerNonOctetErrors.setDescription('This attribute is the total number of frames that were non octet aligned.')
x25DteLapbFramerOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerOverruns.setDescription('This attribute is the total number of frames received from the link for which overruns occurred.')
x25DteLapbFramerUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerUnderruns.setDescription('This attribute is the total number of frames transmitted to the link for which underruns occurred.')
x25DteLapbFramerUtilTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 14), )
if mibBuilder.loadTexts: x25DteLapbFramerUtilTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerUtilTable.setDescription('This group contains the link utilizaiton operational data for a Framer component.')
x25DteLapbFramerUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteLapbFramerIndex"))
if mibBuilder.loadTexts: x25DteLapbFramerUtilEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerUtilEntry.setDescription('An entry in the x25DteLapbFramerUtilTable.')
x25DteLapbFramerNormPrioLinkUtilToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 14, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerNormPrioLinkUtilToIf.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerNormPrioLinkUtilToIf.setDescription('This attribute is the utilization of the normal and high priority data traffic (interruptable traffic) sent to the link as a percentage of the available bandwidth on the link. Note that this includes traffic with Transfer Priorities of 0, 6 and 9 and/or Emission Priority of 2 and 3. The utilization is the average for the last minute.')
x25DteLapbFramerNormPrioLinkUtilFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 5, 2, 14, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteLapbFramerNormPrioLinkUtilFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteLapbFramerNormPrioLinkUtilFromIf.setDescription('This attribute is the utilization of the normal and high priority data traffic (interruptable traffic) received from the link as a percentage of the available bandwidth on the link. Note that this includes traffic with Transfer Priorities (TP) of 0, 6 or 9 and/or Emission Priority of 2 and 3. The utilization is the average for the last minute.')
x25DtePle = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6))
x25DtePleRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 1), )
if mibBuilder.loadTexts: x25DtePleRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePleRowStatusTable.setDescription('This entry controls the addition and deletion of x25DtePle components.')
x25DtePleRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePleIndex"))
if mibBuilder.loadTexts: x25DtePleRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePleRowStatusEntry.setDescription('A single entry in the table represents a single x25DtePle component.')
x25DtePleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePleRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePleRowStatus.setDescription('This variable is used as the basis for SNMP naming of x25DtePle components. These components cannot be added nor deleted.')
x25DtePleComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePleComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePleComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
x25DtePleStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePleStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePleStorageType.setDescription('This variable represents the storage type value for the x25DtePle tables.')
x25DtePleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: x25DtePleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePleIndex.setDescription('This variable represents the index for the x25DtePle tables.')
x25DtePleProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 10), )
if mibBuilder.loadTexts: x25DtePleProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePleProvTable.setDescription('This group contains the provisionable attributes relevant to an interface used to carry Multiprotocol Interconnect traffic over X.25.')
x25DtePleProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePleIndex"))
if mibBuilder.loadTexts: x25DtePleProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePleProvEntry.setDescription('An entry in the x25DtePleProvTable.')
x25DtePleInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536000)).clone(180000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DtePleInactivityTimer.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePleInactivityTimer.setDescription('This attribute specifies the period in milliseconds this interface will keep an idle connection open before closing it.')
x25DtePleOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 11), )
if mibBuilder.loadTexts: x25DtePleOpTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePleOpTable.setDescription('This group contains the Operational attributes relevant to an interface used to carry Multiprotocol Interconnect traffic over X.25.')
x25DtePleOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DtePleIndex"))
if mibBuilder.loadTexts: x25DtePleOpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePleOpEntry.setDescription('An entry in the x25DtePleOpTable.')
x25DtePleEncAddrToX25LkupFlrs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePleEncAddrToX25LkupFlrs.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePleEncAddrToX25LkupFlrs.setDescription('This attribute indicates the number of times a translation attempt from an Encapsulation address to an X.25 address failed to find a corresponding X.25 address. Such a failure could occur when a Protocol Port, linked to a RemoteGroup via the linkToProtocolPort attribute of the RemoteGroup, requests through the software that a X.25 call be established to a particular Encapsulation address. If the RemoteGroup does not have a Peer component linked in its linkToPeer attribute list, with the encAddress attribute equal to the Encapsulation address specified, this counter will be incremented, because the corresponding Peer component needed to establish an X.25 connection was not found.')
x25DtePleLastFailedEncAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 11, 1, 2), HexString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePleLastFailedEncAddr.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePleLastFailedEncAddr.setDescription('This attribute indicates the last Encapsulation address for which no corresponding X.25 address was found and thus caused encAddressToX25LkupFlrs to be incremented.')
x25DtePleX25AddrToEncLkupFlrs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePleX25AddrToEncLkupFlrs.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePleX25AddrToEncLkupFlrs.setDescription('This attribute indicates the number of times a translation attempt from an X.25 address to an Encapsulation address failed to find a corresponding Encapsulation address. Such a failure could occur when a incoming call received from the link by the X.25 DTE is directed to a specific RemoteGroup because the called address matches the localAddress attribute of the RemoteGroup component. If the RemoteGroup component does not have a Peer component linked in its linkToPeer attribute list, with the x25Address attribute equal to the calling address from the incoming call packet, there is no appropriate Peer component, so the call is cleared and this counter is incremented.')
x25DtePleLastFailedX25Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 6, 11, 1, 5), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DtePleLastFailedX25Addr.setStatus('mandatory')
if mibBuilder.loadTexts: x25DtePleLastFailedX25Addr.setDescription('This field specifies the last X.25 address that caused x25AddressToEncLkupFlrs to be incremented.')
x25DteRg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7))
x25DteRgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 1), )
if mibBuilder.loadTexts: x25DteRgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgRowStatusTable.setDescription('This entry controls the addition and deletion of x25DteRg components.')
x25DteRgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgIndex"))
if mibBuilder.loadTexts: x25DteRgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgRowStatusEntry.setDescription('A single entry in the table represents a single x25DteRg component.')
x25DteRgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteRgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgRowStatus.setDescription('This variable is used as the basis for SNMP naming of x25DteRg components. These components can be added and deleted.')
x25DteRgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteRgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
x25DteRgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteRgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgStorageType.setDescription('This variable represents the storage type value for the x25DteRg tables.')
x25DteRgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)))
if mibBuilder.loadTexts: x25DteRgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgIndex.setDescription('This variable represents the index for the x25DteRg tables.')
x25DteRgIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 10), )
if mibBuilder.loadTexts: x25DteRgIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
x25DteRgIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgIndex"))
if mibBuilder.loadTexts: x25DteRgIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgIfEntryEntry.setDescription('An entry in the x25DteRgIfEntryTable.')
x25DteRgIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteRgIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
x25DteRgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 10, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteRgIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
x25DteRgProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 11), )
if mibBuilder.loadTexts: x25DteRgProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgProvTable.setDescription('This group contains the provisionable attributes of the RemoteGroup component.')
x25DteRgProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgIndex"))
if mibBuilder.loadTexts: x25DteRgProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgProvEntry.setDescription('An entry in the x25DteRgProvTable.')
x25DteRgLinkToProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 11, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteRgLinkToProtocolPort.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgLinkToProtocolPort.setDescription('This attribute contains a protocol port component name. The attribute associates the application with a protocol port.')
x25DteRgLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 11, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteRgLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgLocalAddress.setDescription('This attribute contains the unique X.25 address which identifies this RemoteGroup. It should correspond to the called address in X.25 incoming call packets which are to be directed to this RemoteGroup. This allows calls received from the link to be directed to the appropriate RemoteGroup based on the called address in the X.25 call packet. The RemoteGroup components allow the X.25 interface to be shared amongst a number of Protocol Ports (and ultimately Virtual Routers) because each RemoteGroup is coupled with a specific ProtocolPort through its linkToProtocolPort attribute.')
x25DteRgMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(576, 9188)).clone(1600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteRgMtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgMtuSize.setDescription('This attribute specifies the Maximum Transmit Unit (MTU); that is, the size of the largest datagram (in octets) which can be sent/ received on the interface.')
x25DteRgStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 12), )
if mibBuilder.loadTexts: x25DteRgStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
x25DteRgStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgIndex"))
if mibBuilder.loadTexts: x25DteRgStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgStateEntry.setDescription('An entry in the x25DteRgStateTable.')
x25DteRgAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteRgAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
x25DteRgOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteRgOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
x25DteRgUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteRgUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
x25DteRgOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 13), )
if mibBuilder.loadTexts: x25DteRgOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
x25DteRgOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgIndex"))
if mibBuilder.loadTexts: x25DteRgOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgOperStatusEntry.setDescription('An entry in the x25DteRgOperStatusTable.')
x25DteRgSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteRgSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
x25DteRgLTPlcnTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 210), )
if mibBuilder.loadTexts: x25DteRgLTPlcnTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgLTPlcnTable.setDescription('This attribute is a list of links to PermLcn components. The set of all Peer and PermLcn components which link to a given RemoteGroup determine the subset of remote hosts which are accessible to a particular Protocol Port (and ultimately a Virtual Router).')
x25DteRgLTPlcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 210, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgLTPlcnValue"))
if mibBuilder.loadTexts: x25DteRgLTPlcnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgLTPlcnEntry.setDescription('An entry in the x25DteRgLTPlcnTable.')
x25DteRgLTPlcnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 210, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteRgLTPlcnValue.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgLTPlcnValue.setDescription('This variable represents both the value and the index for the x25DteRgLTPlcnTable.')
x25DteRgLTPlcnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 210, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: x25DteRgLTPlcnRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgLTPlcnRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the x25DteRgLTPlcnTable.')
x25DteRgLtPeerTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 211), )
if mibBuilder.loadTexts: x25DteRgLtPeerTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgLtPeerTable.setDescription('This attribute gives a list of links to Peer components. The set of all Peer and PermLcn components which link to a given RemoteGroup determine the subset of remote hosts which are accessible to a particular Protocol Port (and ultimately a Virtual Router).')
x25DteRgLtPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 211, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgLtPeerValue"))
if mibBuilder.loadTexts: x25DteRgLtPeerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgLtPeerEntry.setDescription('An entry in the x25DteRgLtPeerTable.')
x25DteRgLtPeerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 211, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25DteRgLtPeerValue.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgLtPeerValue.setDescription('This variable represents both the value and the index for the x25DteRgLtPeerTable.')
x25DteRgLtPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 211, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: x25DteRgLtPeerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgLtPeerRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the x25DteRgLtPeerTable.')
x25DteRgLcnTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 212), )
if mibBuilder.loadTexts: x25DteRgLcnTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgLcnTable.setDescription('This attribute lists the Lcn components for the X25Dte, which belong to this RemoteGroup. There is an Lcn component listed here for every lcn connection belonging to this RemoteGroup. The lcns were established using either a Peer component linked to this RemoteGroup (in response to a switched call) or using a PermLcn component linked to this RemoteGroup (a permanent connection).')
x25DteRgLcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 212, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgIndex"), (0, "Nortel-Magellan-Passport-X25DteMIB", "x25DteRgLcnValue"))
if mibBuilder.loadTexts: x25DteRgLcnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgLcnEntry.setDescription('An entry in the x25DteRgLcnTable.')
x25DteRgLcnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 90, 7, 212, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25DteRgLcnValue.setStatus('mandatory')
if mibBuilder.loadTexts: x25DteRgLcnValue.setDescription('This variable represents both the value and the index for the x25DteRgLcnTable.')
x25DteGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 48, 1))
x25DteGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 48, 1, 5))
x25DteGroupBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 48, 1, 5, 1))
x25DteGroupBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 48, 1, 5, 1, 2))
x25DteCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 48, 3))
x25DteCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 48, 3, 5))
x25DteCapabilitiesBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 48, 3, 5, 1))
x25DteCapabilitiesBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 48, 3, 5, 1, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-X25DteMIB", x25DteIfEntry=x25DteIfEntry, x25DteLcnOutInterruptPackets=x25DteLcnOutInterruptPackets, x25DtePeerLcnTable=x25DtePeerLcnTable, x25DteInDataPackets=x25DteInDataPackets, x25DteAdminState=x25DteAdminState, x25DteLapbStatsEntry=x25DteLapbStatsEntry, x25DteLcnFastSelect=x25DteLcnFastSelect, x25DteLapbFramerProvTable=x25DteLapbFramerProvTable, x25DteLapbFramerUsageState=x25DteLapbFramerUsageState, x25DteLcnCTable=x25DteLcnCTable, x25DteRgIfAdminStatus=x25DteRgIfAdminStatus, x25DteRgLtPeerEntry=x25DteRgLtPeerEntry, x25DteLcnProposeReverseCharging=x25DteLcnProposeReverseCharging, x25DtePeerInPacketSize=x25DtePeerInPacketSize, x25DtePeerRpoa=x25DtePeerRpoa, x25DtePeerCugoaIndex=x25DtePeerCugoaIndex, x25DteInterfaceState=x25DteInterfaceState, x25DtePeerOutWindowSize=x25DtePeerOutWindowSize, x25DteLapbStateEntry=x25DteLapbStateEntry, x25DteRgLTPlcnValue=x25DteRgLTPlcnValue, x25DteLcn=x25DteLcn, x25Dte=x25Dte, x25DteInWindowSize=x25DteInWindowSize, x25DteLcnCallingNetworkFax=x25DteLcnCallingNetworkFax, x25DteOutCallFailures=x25DteOutCallFailures, x25DtePLcnProvEntry=x25DtePLcnProvEntry, x25DteRowStatus=x25DteRowStatus, x25DteLcnCpTable=x25DteLcnCpTable, x25DteLapbStatusEntry=x25DteLapbStatusEntry, x25DteLcnCEntry=x25DteLcnCEntry, x25DteT21CallTimer=x25DteT21CallTimer, x25DtePeerLinkToRemoteGroup=x25DtePeerLinkToRemoteGroup, x25DtePeerCpEntry=x25DtePeerCpEntry, x25DteLapbRowStatusEntry=x25DteLapbRowStatusEntry, x25DteLcnOperationalState=x25DteLcnOperationalState, x25DteLapbN1FrameSize=x25DteLapbN1FrameSize, x25DteIndex=x25DteIndex, x25DteLapbFramerProvEntry=x25DteLapbFramerProvEntry, x25DteLapbFramerCrcErrors=x25DteLapbFramerCrcErrors, x25DteInRestarts=x25DteInRestarts, x25DteGroupBE00A=x25DteGroupBE00A, x25DteLcnInInterruptPackets=x25DteLcnInInterruptPackets, x25DteLapbFramerOperationalState=x25DteLapbFramerOperationalState, x25DteInInterruptPackets=x25DteInInterruptPackets, x25DteLapbStateChanges=x25DteLapbStateChanges, x25DteLapbFrmrReceive=x25DteLapbFrmrReceive, x25DtePLcnStorageType=x25DtePLcnStorageType, x25DtePLcnLinkToRemoteGroup=x25DtePLcnLinkToRemoteGroup, x25DteLapbFramerFlagsBetweenFrames=x25DteLapbFramerFlagsBetweenFrames, x25DtePeerPEncRowStatus=x25DtePeerPEncRowStatus, x25DtePeerCallUserData=x25DtePeerCallUserData, x25DteOutDataPackets=x25DteOutDataPackets, x25DtePeerX25Address=x25DtePeerX25Address, x25DtePleIndex=x25DtePleIndex, x25DteInCallRefusals=x25DteInCallRefusals, x25DteLcnStateEntry=x25DteLcnStateEntry, x25DteRgIfEntryTable=x25DteRgIfEntryTable, x25DteLcnRowStatusTable=x25DteLcnRowStatusTable, x25DtePLcnRowStatus=x25DtePLcnRowStatus, x25DtePeerIfEntry=x25DtePeerIfEntry, x25DteRgOperStatusTable=x25DteRgOperStatusTable, x25DteLapbFramerLrcErrors=x25DteLapbFramerLrcErrors, x25DteOutCallAttempts=x25DteOutCallAttempts, x25DteLapbKWindowSize=x25DteLapbKWindowSize, x25DteLapbCurrentState=x25DteLapbCurrentState, x25DtePleProvEntry=x25DtePleProvEntry, x25DtePeerRowStatus=x25DtePeerRowStatus, x25DteLcnCpEntry=x25DteLcnCpEntry, x25DteLapbFramerOctetFromIf=x25DteLapbFramerOctetFromIf, x25DtePLcnEncAddress=x25DtePLcnEncAddress, x25DteLcnInRmtInitiatedRsts=x25DteLcnInRmtInitiatedRsts, x25DtePeerPEncEntry=x25DtePeerPEncEntry, x25DteLapbFramerUtilEntry=x25DteLapbFramerUtilEntry, x25DtePleRowStatusTable=x25DtePleRowStatusTable, x25DteStateTable=x25DteStateTable, x25DteStorageType=x25DteStorageType, x25DtePLcnIndex=x25DtePLcnIndex, x25DteCapabilitiesBE00A=x25DteCapabilitiesBE00A, x25DteLapbFrmrTransmit=x25DteLapbFrmrTransmit, x25DteLcnRowStatus=x25DteLcnRowStatus, x25DteLapbTransmitRejectFrames=x25DteLapbTransmitRejectFrames, x25DteMIB=x25DteMIB, x25DteLapbFramerStateEntry=x25DteLapbFramerStateEntry, x25DteTrnstDlySlctnAInd=x25DteTrnstDlySlctnAInd, x25DteNumberOfPLcn=x25DteNumberOfPLcn, x25DteLapbFramerRowStatus=x25DteLapbFramerRowStatus, x25DteRgLtPeerValue=x25DteRgLtPeerValue, x25DteLapbActionInitiate=x25DteLapbActionInitiate, x25DtePeerIfTable=x25DtePeerIfTable, x25DteGroup=x25DteGroup, x25DteInActiveChannels=x25DteInActiveChannels, x25DteLapbFramerComponentName=x25DteLapbFramerComponentName, x25DteLcnInDataPackets=x25DteLcnInDataPackets, x25DteChargingInformation=x25DteChargingInformation, x25DtePLcnProtocolEncType=x25DtePLcnProtocolEncType, x25DteT23ClearTimer=x25DteT23ClearTimer, x25DteRgProvTable=x25DteRgProvTable, x25DtePeerProposeReverseCharging=x25DtePeerProposeReverseCharging, x25DteLcnCalledAddress=x25DteLcnCalledAddress, x25DteLapbStateTable=x25DteLapbStateTable, x25DteRgRowStatusTable=x25DteRgRowStatusTable, x25DtePleComponentName=x25DtePleComponentName, x25DteLapbCpTable=x25DteLapbCpTable, x25DteLcnT22ResetTimeouts=x25DteLcnT22ResetTimeouts, x25DteRgIfIndex=x25DteRgIfIndex, x25DtePeerAcceptReverseCharging=x25DtePeerAcceptReverseCharging, x25DteRgComponentName=x25DteRgComponentName, x25DteRpoa=x25DteRpoa, x25DtePeerChargingInformation=x25DtePeerChargingInformation, x25DtePeerPEncTable=x25DtePeerPEncTable, x25DteLapbT1AckTimeout=x25DteLapbT1AckTimeout, x25DteRowStatusTable=x25DteRowStatusTable, x25DteOpEntry=x25DteOpEntry, x25DteLcnNetworkUserIdentifier=x25DteLcnNetworkUserIdentifier, x25DteProposeReverseCharging=x25DteProposeReverseCharging, x25DteLapbFramerAdminState=x25DteLapbFramerAdminState, x25DteLcnOutDataPackets=x25DteLcnOutDataPackets, x25DteCapabilitiesBE=x25DteCapabilitiesBE, x25DteLapbFramerLinkTable=x25DteLapbFramerLinkTable, x25DteComponentName=x25DteComponentName, x25DteOpTable=x25DteOpTable, x25DteInPrvdrInitiatedClrs=x25DteInPrvdrInitiatedClrs, x25DteLapbN2TransmitLimit=x25DteLapbN2TransmitLimit, x25DteRgLcnEntry=x25DteRgLcnEntry, x25DteLcnInUknownProtocols=x25DteLcnInUknownProtocols, x25DteLcnOriginalCalledAddress=x25DteLcnOriginalCalledAddress, x25DteIfAdminStatus=x25DteIfAdminStatus, x25DtePeerIndex=x25DtePeerIndex, x25DteStatsEntry=x25DteStatsEntry, x25DteLapbCpEntry=x25DteLapbCpEntry, x25DtePeerRowStatusEntry=x25DtePeerRowStatusEntry, x25DtePeerTrnstDlySlctnAInd=x25DtePeerTrnstDlySlctnAInd, x25DtePleLastFailedEncAddr=x25DtePleLastFailedEncAddr, x25DteRgLocalAddress=x25DteRgLocalAddress, x25DtePeerPEncValue=x25DtePeerPEncValue, x25DteLapbComponentName=x25DteLapbComponentName, x25DteIfTable=x25DteIfTable, x25DtePLcnRowStatusTable=x25DtePLcnRowStatusTable, x25DteCallUserData=x25DteCallUserData, x25DteCallingNetworkFax=x25DteCallingNetworkFax, x25DteLcnComponentName=x25DteLcnComponentName, x25DtePLcnRowStatusEntry=x25DtePLcnRowStatusEntry, x25DteRgLinkToProtocolPort=x25DteRgLinkToProtocolPort, x25DteLowestTLChannelNumber=x25DteLowestTLChannelNumber, x25DtePLcnProvTable=x25DtePLcnProvTable, x25DteRgSnmpOperStatus=x25DteRgSnmpOperStatus, x25DteLcnOutWindowSize=x25DteLcnOutWindowSize, x25DtePeerInThroughputClassSize=x25DtePeerInThroughputClassSize, x25DtePleProvTable=x25DtePleProvTable, x25DtePLcnInWindowSize=x25DtePLcnInWindowSize, x25DteLcnCugoaIndex=x25DteLcnCugoaIndex, x25DtePLcnOutPacketSize=x25DtePLcnOutPacketSize, x25DteInPacketSize=x25DteInPacketSize, x25DtePleRowStatusEntry=x25DtePleRowStatusEntry, x25DteDcpEntry=x25DteDcpEntry, x25DtePLcnComponentName=x25DtePLcnComponentName, x25DtePeerNetworkUserIdentifier=x25DtePeerNetworkUserIdentifier, x25DteLcnOutPacketSize=x25DteLcnOutPacketSize, x25DtePleStorageType=x25DtePleStorageType, x25DteLcnOutDataOctets=x25DteLcnOutDataOctets, x25DteLapbFramerStateTable=x25DteLapbFramerStateTable, x25DtePeerComponentName=x25DtePeerComponentName, x25DtePleOpEntry=x25DtePleOpEntry, x25DteLcnUsageState=x25DteLcnUsageState, x25DteT21CallTimeouts=x25DteT21CallTimeouts, x25DteLapbFramerLinkEntry=x25DteLapbFramerLinkEntry, x25DtePeerLcnValue=x25DtePeerLcnValue, x25DteLapbUsageState=x25DteLapbUsageState, x25DteT20RestartTimer=x25DteT20RestartTimer, x25DteLapbStorageType=x25DteLapbStorageType, x25DteLapbCurrentQueueSize=x25DteLapbCurrentQueueSize, x25DtePeerCpTable=x25DtePeerCpTable, x25DtePacketSequencing=x25DtePacketSequencing, x25DteCugoaIndex=x25DteCugoaIndex, x25DteLapbFramerInterfaceName=x25DteLapbFramerInterfaceName, x25DteRgStorageType=x25DteRgStorageType, x25DtePeerCalledNetworkFax=x25DtePeerCalledNetworkFax, x25DtePeerEncAddressType=x25DtePeerEncAddressType, x25DteHighestOLChannelNumber=x25DteHighestOLChannelNumber, x25DteLapbT4IdleProbeTimer=x25DteLapbT4IdleProbeTimer, x25DteLowestOLChannelNumber=x25DteLowestOLChannelNumber, x25DteAcceptReverseCharging=x25DteAcceptReverseCharging, x25DteLcnInThroughputClassSize=x25DteLcnInThroughputClassSize, x25DteT23ClearTimeouts=x25DteT23ClearTimeouts, x25DteLapbReceiveRejectFrames=x25DteLapbReceiveRejectFrames, x25DteOperationalState=x25DteOperationalState, x25DteOutActiveChannels=x25DteOutActiveChannels, x25DteInCalls=x25DteInCalls, x25DteLcnAdminState=x25DteLcnAdminState, x25DteT22ResetTimer=x25DteT22ResetTimer, x25DteLapbFrameSequencing=x25DteLapbFrameSequencing, x25DteRgLtPeerRowStatus=x25DteRgLtPeerRowStatus, x25DteRgLTPlcnRowStatus=x25DteRgLTPlcnRowStatus, x25DteLapbFramerRowStatusTable=x25DteLapbFramerRowStatusTable, x25DteRgRowStatus=x25DteRgRowStatus, x25DtePleOpTable=x25DtePleOpTable, x25DteLapbFramerFrmToIf=x25DteLapbFramerFrmToIf, x25DteOutPacketSize=x25DteOutPacketSize, x25DteLapbFramerUtilTable=x25DteLapbFramerUtilTable, x25DteLapbFramerStatsEntry=x25DteLapbFramerStatsEntry, x25DteLcnInDataOctets=x25DteLcnInDataOctets, x25DteLcnCalledNetworkFax=x25DteLcnCalledNetworkFax, x25DteCidDataTable=x25DteCidDataTable, x25DtePeerPEncIndex=x25DtePeerPEncIndex, x25DteLapbT2AckDelayTimer=x25DteLapbT2AckDelayTimer, x25DteLapbStatsTable=x25DteLapbStatsTable, x25DteRgLcnTable=x25DteRgLcnTable, x25DteRg=x25DteRg, x25DteRgOperStatusEntry=x25DteRgOperStatusEntry, x25DteStateEntry=x25DteStateEntry, x25DteRgAdminState=x25DteRgAdminState, x25DteLowestILChannelNumber=x25DteLowestILChannelNumber, x25DteLapbTxQDegradeThreshold=x25DteLapbTxQDegradeThreshold, x25DteStatsTable=x25DteStatsTable, x25DteRgStateEntry=x25DteRgStateEntry, x25DteCugIndex=x25DteCugIndex, x25DteLcnCallDirection=x25DteLcnCallDirection, x25DtePeerRowStatusTable=x25DtePeerRowStatusTable, x25DteLapbFramerRowStatusEntry=x25DteLapbFramerRowStatusEntry, x25DteLcnCallingAddress=x25DteLcnCallingAddress, x25DteLcnStatsEntry=x25DteLcnStatsEntry, x25DtePLcnEncAddressType=x25DtePLcnEncAddressType, x25DteLapbFramerAborts=x25DteLapbFramerAborts, x25DteRgLcnValue=x25DteRgLcnValue, x25DteInRmtInitiatedRsts=x25DteInRmtInitiatedRsts, x25DteTwowayActiveChannels=x25DteTwowayActiveChannels, x25DteLapbFramer=x25DteLapbFramer, x25DteLapbLastStateChangeReason=x25DteLapbLastStateChangeReason, x25DteT20RestartTimeouts=x25DteT20RestartTimeouts, x25DteLapbRemoteBusy=x25DteLapbRemoteBusy, x25DteLcnInPacketSize=x25DteLcnInPacketSize, x25DteCapabilitiesBE00=x25DteCapabilitiesBE00, x25DteLapbOperationalState=x25DteLapbOperationalState, x25DtePeerOutThroughputClassSize=x25DtePeerOutThroughputClassSize, x25DteOutInterruptPackets=x25DteOutInterruptPackets, x25DteLapbIndex=x25DteLapbIndex, x25DteLcnIndex=x25DteLcnIndex, x25DtePLcn=x25DtePLcn, x25DteInterfaceMode=x25DteInterfaceMode, x25DteLapbRowStatus=x25DteLapbRowStatus, x25DteMaxActiveChannels=x25DteMaxActiveChannels, x25DteOperStatusTable=x25DteOperStatusTable, x25DteLapbFramerIndex=x25DteLapbFramerIndex, x25DteLapbFramerStatsTable=x25DteLapbFramerStatsTable, x25DteLapbT1AckTimer=x25DteLapbT1AckTimer, x25DteInPktsAcusdOfPrtclErr=x25DteInPktsAcusdOfPrtclErr, x25DtePeerCallingNetworkFax=x25DtePeerCallingNetworkFax, x25DteLcnInWindowSize=x25DteLcnInWindowSize, x25DtePeerInWindowSize=x25DtePeerInWindowSize, x25DteCidDataEntry=x25DteCidDataEntry, x25DteLcnInPrvdrInitiatedRsts=x25DteLcnInPrvdrInitiatedRsts, x25DteRgStateTable=x25DteRgStateTable, x25DteLcnStateTable=x25DteLcnStateTable, x25DteLapbFramerUnderruns=x25DteLapbFramerUnderruns)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-X25DteMIB", x25DtePLcnInPacketSize=x25DtePLcnInPacketSize, x25DtePleInactivityTimer=x25DtePleInactivityTimer, x25DteLapbRowStatusTable=x25DteLapbRowStatusTable, x25DteGroupBE=x25DteGroupBE, x25DtePLcnOutWindowSize=x25DtePLcnOutWindowSize, x25DtePleRowStatus=x25DtePleRowStatus, x25DteLapbFramerNonOctetErrors=x25DteLapbFramerNonOctetErrors, x25DtePleLastFailedX25Addr=x25DtePleLastFailedX25Addr, x25DtePeerOutPacketSize=x25DtePeerOutPacketSize, x25DtePeerEncAddress=x25DtePeerEncAddress, x25DtePeerLcnEntry=x25DtePeerLcnEntry, x25DteLcnLcnStatusEntry=x25DteLcnLcnStatusEntry, x25DteRgProvEntry=x25DteRgProvEntry, x25DteIfIndex=x25DteIfIndex, x25DteSnmpOperStatus=x25DteSnmpOperStatus, x25DteGroupBE00=x25DteGroupBE00, x25DteT22ResetTimeouts=x25DteT22ResetTimeouts, x25DteUsageState=x25DteUsageState, x25DteLapb=x25DteLapb, x25DteLcnStatus=x25DteLcnStatus, x25DteRgLTPlcnEntry=x25DteRgLTPlcnEntry, x25DteLcnChargingInformation=x25DteLcnChargingInformation, x25DteRgRowStatusEntry=x25DteRgRowStatusEntry, x25DteLapbFramerFrmFromIf=x25DteLapbFramerFrmFromIf, x25DteRgIndex=x25DteRgIndex, x25DteCustomerIdentifier=x25DteCustomerIdentifier, x25DtePle=x25DtePle, x25DteLcnRpoa=x25DteLcnRpoa, x25DteRgUsageState=x25DteRgUsageState, x25DtePeerStorageType=x25DtePeerStorageType, x25DteCalledNetworkFax=x25DteCalledNetworkFax, x25DteOperStatusEntry=x25DteOperStatusEntry, x25DteLcnCugIndex=x25DteLcnCugIndex, x25DteLcnStatsTable=x25DteLcnStatsTable, x25DteLcnLcnStatusTable=x25DteLcnLcnStatusTable, x25DteLapbFramerNormPrioLinkUtilFromIf=x25DteLapbFramerNormPrioLinkUtilFromIf, x25DteIfEntryTable=x25DteIfEntryTable, x25DteHighestTLChannelNumber=x25DteHighestTLChannelNumber, x25DteRgIfEntryEntry=x25DteRgIfEntryEntry, x25DtePeerCugIndex=x25DtePeerCugIndex, x25DteInPrvdrInitiatedRsts=x25DteInPrvdrInitiatedRsts, x25DteLcnStorageType=x25DteLcnStorageType, x25DteOutWindowSize=x25DteOutWindowSize, x25DteLapbTxQResetThreshold=x25DteLapbTxQResetThreshold, x25DteRgLtPeerTable=x25DteRgLtPeerTable, x25DteLapbFramerNormPrioLinkUtilToIf=x25DteLapbFramerNormPrioLinkUtilToIf, x25DteLcnTrnstDlySlctnAInd=x25DteLcnTrnstDlySlctnAInd, x25DteLapbFramerOverruns=x25DteLapbFramerOverruns, x25DteRgOperationalState=x25DteRgOperationalState, x25DteRgMtuSize=x25DteRgMtuSize, x25DteLcnOutThroughputClassSize=x25DteLcnOutThroughputClassSize, x25DteLapbAdminState=x25DteLapbAdminState, x25DtePeer=x25DtePeer, x25DteLcnCallUserData=x25DteLcnCallUserData, x25DteLcnRowStatusEntry=x25DteLcnRowStatusEntry, x25DteInThroughputClassSize=x25DteInThroughputClassSize, x25DteIfEntryEntry=x25DteIfEntryEntry, x25DtePleEncAddrToX25LkupFlrs=x25DtePleEncAddrToX25LkupFlrs, x25DtePleX25AddrToEncLkupFlrs=x25DtePleX25AddrToEncLkupFlrs, x25DteLapbStatusTable=x25DteLapbStatusTable, x25DteLapbFramerStorageType=x25DteLapbFramerStorageType, x25DteCapabilities=x25DteCapabilities, x25DteDcpTable=x25DteDcpTable, x25DteLapbActionRecvDM=x25DteLapbActionRecvDM, x25DteHighestILChannelNumber=x25DteHighestILChannelNumber, x25DteLapbStationType=x25DteLapbStationType, x25DteOutThroughputClassSize=x25DteOutThroughputClassSize, x25DteRowStatusEntry=x25DteRowStatusEntry, x25DteRgLTPlcnTable=x25DteRgLTPlcnTable)
