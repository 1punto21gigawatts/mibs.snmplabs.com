#
# PySNMP MIB module SS7VIEW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SS7VIEW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:10:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, IpAddress, iso, NotificationType, MibIdentifier, Unsigned32, ModuleIdentity, Counter32, Bits, ObjectIdentity, TimeTicks, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "iso", "NotificationType", "MibIdentifier", "Unsigned32", "ModuleIdentity", "Counter32", "Bits", "ObjectIdentity", "TimeTicks", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nortel = MibIdentifier((1, 3, 6, 1, 4, 1, 562))
dialaccess = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14))
ss7view = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 1))
ss7viewTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 1, 1))
ss7viewTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 1, 2))
ss7viewWebUITrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 1, 4))
ss7viewINCTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 1, 5))
ss7viewINCTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 14, 1, 6))
partitionName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: partitionName.setStatus('mandatory')
if mibBuilder.loadTexts: partitionName.setDescription(' Identifies disk partition name.')
diskCapacity = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 2), DisplayString())
if mibBuilder.loadTexts: diskCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: diskCapacity.setDescription(' Indicates (in Percentage) how full the disk is.')
diskThreshold = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 3), DisplayString())
if mibBuilder.loadTexts: diskThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: diskThreshold.setDescription(' Indicates the threshold of diskCapacity.')
trapSource = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 4), DisplayString())
if mibBuilder.loadTexts: trapSource.setStatus('mandatory')
if mibBuilder.loadTexts: trapSource.setDescription(' Indicates where the trap comes from.')
pollSS7ViewHost = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 30), DisplayString())
if mibBuilder.loadTexts: pollSS7ViewHost.setStatus('mandatory')
if mibBuilder.loadTexts: pollSS7ViewHost.setDescription(' The host name of the SS7View workstation')
pollSS7ViewIP = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 31), IpAddress())
if mibBuilder.loadTexts: pollSS7ViewIP.setStatus('mandatory')
if mibBuilder.loadTexts: pollSS7ViewIP.setDescription(' The IP Address of the SS7View workstation')
pollServerName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 32), DisplayString())
if mibBuilder.loadTexts: pollServerName.setStatus('mandatory')
if mibBuilder.loadTexts: pollServerName.setDescription(' The CSG Server system/local host/object name')
pollServerCLLI = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 33), DisplayString())
if mibBuilder.loadTexts: pollServerCLLI.setStatus('mandatory')
if mibBuilder.loadTexts: pollServerCLLI.setDescription(' The CSG Server CLLI name')
pollServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 34), IpAddress())
if mibBuilder.loadTexts: pollServerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pollServerIpAddress.setDescription(' The CSG Server CLLI name')
pollFailReason = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 35), DisplayString())
if mibBuilder.loadTexts: pollFailReason.setStatus('mandatory')
if mibBuilder.loadTexts: pollFailReason.setDescription(' The first line (50 characters) of the reason for the poll failure')
pollSeverity = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 36), DisplayString())
if mibBuilder.loadTexts: pollSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: pollSeverity.setDescription(' The severity of the failure which can be one of Warning, Minor, Major, or Critical')
stateChangeServerName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 50), DisplayString())
if mibBuilder.loadTexts: stateChangeServerName.setStatus('mandatory')
if mibBuilder.loadTexts: stateChangeServerName.setDescription(' The CSG Server system/local host/object name')
stateChangeServerCLLI = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 51), DisplayString())
if mibBuilder.loadTexts: stateChangeServerCLLI.setStatus('mandatory')
if mibBuilder.loadTexts: stateChangeServerCLLI.setDescription(' The CSG Server CLLI name')
stateChangeServerOpState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 52), DisplayString())
if mibBuilder.loadTexts: stateChangeServerOpState.setStatus('mandatory')
if mibBuilder.loadTexts: stateChangeServerOpState.setDescription(' Identifies the Operational State of INC.')
stateChangeServerStandbyState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 53), DisplayString())
if mibBuilder.loadTexts: stateChangeServerStandbyState.setStatus('mandatory')
if mibBuilder.loadTexts: stateChangeServerStandbyState.setDescription(' Identifies the Standby state of INC.')
stateChangeServerAvailState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 54), DisplayString())
if mibBuilder.loadTexts: stateChangeServerAvailState.setStatus('mandatory')
if mibBuilder.loadTexts: stateChangeServerAvailState.setDescription(' Identifies the Availability state of INC.')
logArchiveName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 1, 80), DisplayString())
if mibBuilder.loadTexts: logArchiveName.setStatus('mandatory')
if mibBuilder.loadTexts: logArchiveName.setDescription(' Identifies the created archive name for the log files.')
ss7viewDiskFullRaise = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 2) + (0,2002)).setObjects(("SS7VIEW-MIB", "partitionName"), ("SS7VIEW-MIB", "diskCapacity"), ("SS7VIEW-MIB", "diskThreshold"))
if mibBuilder.loadTexts: ss7viewDiskFullRaise.setDescription('The Trap generated when the disk capacity is greater than threshold.')
ss7viewDiskFullClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 2) + (0,1002)).setObjects(("SS7VIEW-MIB", "partitionName"), ("SS7VIEW-MIB", "diskCapacity"), ("SS7VIEW-MIB", "diskThreshold"))
if mibBuilder.loadTexts: ss7viewDiskFullClear.setDescription('The Trap generated when the disk is cleared until the capacity is less than the threshold.')
csgStatusPollClear = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 1) + (0,1031)).setObjects(("SS7VIEW-MIB", "pollSS7ViewHost"), ("SS7VIEW-MIB", "pollSS7ViewIP"), ("SS7VIEW-MIB", "pollServerName"), ("SS7VIEW-MIB", "pollServerCLLI"), ("SS7VIEW-MIB", "pollServerIpAddress"))
if mibBuilder.loadTexts: csgStatusPollClear.setDescription('The SS7View status poll of the CSG succeeded. This is generated after a poll to a CSG which previously failed is now successful.')
csgStatusPollFailed = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 1) + (0,1033)).setObjects(("SS7VIEW-MIB", "pollSS7ViewHost"), ("SS7VIEW-MIB", "pollSS7ViewIP"), ("SS7VIEW-MIB", "pollServerName"), ("SS7VIEW-MIB", "pollServerCLLI"), ("SS7VIEW-MIB", "pollServerIpAddress"), ("SS7VIEW-MIB", "pollFailReason"), ("SS7VIEW-MIB", "pollSeverity"))
if mibBuilder.loadTexts: csgStatusPollFailed.setDescription('The SS7View status poll of the CSG failed. There may be multiple failure reasons but only the first line of the reason (up to 50 characters) is shown. Check the WebNMS/logs/stderr.txt for the complete list of failures.')
csgStateChangeWarning = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 1) + (0,1052)).setObjects(("SS7VIEW-MIB", "stateChangeServerName"), ("SS7VIEW-MIB", "stateChangeServerCLLI"), ("SS7VIEW-MIB", "stateChangeServerOpState"), ("SS7VIEW-MIB", "stateChangeServerStandbyState"), ("SS7VIEW-MIB", "stateChangeServerAvailState"))
if mibBuilder.loadTexts: csgStateChangeWarning.setDescription('The CSG Server state triplet changed. Based on the state values, SS7View computes that this is a Warning alarm.')
csgStateChangeMinor = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 1) + (0,1053)).setObjects(("SS7VIEW-MIB", "stateChangeServerName"), ("SS7VIEW-MIB", "stateChangeServerCLLI"), ("SS7VIEW-MIB", "stateChangeServerOpState"), ("SS7VIEW-MIB", "stateChangeServerStandbyState"), ("SS7VIEW-MIB", "stateChangeServerAvailState"))
if mibBuilder.loadTexts: csgStateChangeMinor.setDescription('The CSG Server state triplet changed. Based on the state values, SS7View computes that this is a Minor alarm.')
csgStateChangeMajor = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 1) + (0,1054)).setObjects(("SS7VIEW-MIB", "stateChangeServerName"), ("SS7VIEW-MIB", "stateChangeServerCLLI"), ("SS7VIEW-MIB", "stateChangeServerOpState"), ("SS7VIEW-MIB", "stateChangeServerStandbyState"), ("SS7VIEW-MIB", "stateChangeServerAvailState"))
if mibBuilder.loadTexts: csgStateChangeMajor.setDescription('The CSG Server state triplet changed. Based on the state values, SS7View computes that this is a Major alarm.')
csgStateChangeCritical = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 1) + (0,1055)).setObjects(("SS7VIEW-MIB", "stateChangeServerName"), ("SS7VIEW-MIB", "stateChangeServerCLLI"), ("SS7VIEW-MIB", "stateChangeServerOpState"), ("SS7VIEW-MIB", "stateChangeServerStandbyState"), ("SS7VIEW-MIB", "stateChangeServerAvailState"))
if mibBuilder.loadTexts: csgStateChangeCritical.setDescription('The CSG Server state triplet changed. Based on the state values, SS7View computes that this is a Critical alarm.')
csgStateChangeNormal = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 1) + (0,1051)).setObjects(("SS7VIEW-MIB", "stateChangeServerName"), ("SS7VIEW-MIB", "stateChangeServerCLLI"), ("SS7VIEW-MIB", "stateChangeServerOpState"), ("SS7VIEW-MIB", "stateChangeServerStandbyState"), ("SS7VIEW-MIB", "stateChangeServerAvailState"))
if mibBuilder.loadTexts: csgStateChangeNormal.setDescription('The CSG Server state triplet changed. Based on the state values, SS7View computes that this is a Clear/Normal alarm.')
ss7viewLogArchive = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 1) + (0,1081)).setObjects(("SS7VIEW-MIB", "pollSS7ViewHost"), ("SS7VIEW-MIB", "pollSS7ViewIP"), ("SS7VIEW-MIB", "logArchiveName"))
if mibBuilder.loadTexts: ss7viewLogArchive.setDescription('An SS7View audit has found the WebNMS logs directory to be excessively large, taken action by archiving the directory, and has removed all but the most current few lines of information.')
webServerRestarted = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 4) + (0,4010))
if mibBuilder.loadTexts: webServerRestarted.setDescription('The SS7View WebUI web server has started/restarted.')
privateTrapVars = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 3), ObjectIdentifier())
if mibBuilder.loadTexts: privateTrapVars.setStatus('mandatory')
if mibBuilder.loadTexts: privateTrapVars.setDescription('The subordinates of this node which are internal trap variables used within ss7view are not for browsing.')
privateTraps = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 4), ObjectIdentifier())
if mibBuilder.loadTexts: privateTraps.setStatus('mandatory')
if mibBuilder.loadTexts: privateTraps.setDescription('The subordinates of this node which are internal traps used within ss7view are not for browsing.')
class AlarmRaiseType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("clear", 0), ("raise", 1), ("state", 2))

alarmRaise = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 3, 1), AlarmRaiseType())
if mibBuilder.loadTexts: alarmRaise.setStatus('mandatory')
if mibBuilder.loadTexts: alarmRaise.setDescription('Indicates if the INC alarm is raised or not 0 = clear 1 = raise 2 = state *It is the internal variable used in ss7view.')
incSelectionName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 3, 2), DisplayString())
if mibBuilder.loadTexts: incSelectionName.setStatus('mandatory')
if mibBuilder.loadTexts: incSelectionName.setDescription(' Identifies INC selection name. *It is the internal variable used in ss7view.')
incComplexAlarmVars = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 5, 1), ObjectIdentifier())
if mibBuilder.loadTexts: incComplexAlarmVars.setStatus('mandatory')
if mibBuilder.loadTexts: incComplexAlarmVars.setDescription(' The subordinates of this node which are INC complex trap variables used within ss7view.')
incComplexName = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 5, 1, 1), DisplayString())
if mibBuilder.loadTexts: incComplexName.setStatus('mandatory')
if mibBuilder.loadTexts: incComplexName.setDescription(' Identifies INC complex name. (CLLI)')
incComplexIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: incComplexIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: incComplexIpAddress.setDescription(' Identifies the IPs of INCs in complex.')
incComplexState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 5, 1, 3), DisplayString())
if mibBuilder.loadTexts: incComplexState.setStatus('mandatory')
if mibBuilder.loadTexts: incComplexState.setDescription(' Identifies the state of INC.')
incComplexOpState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 5, 1, 4), DisplayString())
if mibBuilder.loadTexts: incComplexOpState.setStatus('mandatory')
if mibBuilder.loadTexts: incComplexOpState.setDescription(' Identifies the Operational State of INC.')
incComplexStandbyState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 5, 1, 5), DisplayString())
if mibBuilder.loadTexts: incComplexStandbyState.setStatus('mandatory')
if mibBuilder.loadTexts: incComplexStandbyState.setDescription(' Identifies the Standby state of INC.')
incComplexAvailState = MibScalar((1, 3, 6, 1, 4, 1, 562, 14, 1, 5, 1, 6), DisplayString())
if mibBuilder.loadTexts: incComplexAvailState.setStatus('mandatory')
if mibBuilder.loadTexts: incComplexAvailState.setDescription(' Identifies the Availability state of INC.')
ss7viewApplyConfigFile = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 2) + (0,1000)).setObjects(("SS7VIEW-MIB", "trapSource"))
if mibBuilder.loadTexts: ss7viewApplyConfigFile.setDescription('The Trap generated when dialaccess map is re-read.')
ss7viewRefreshReadOnlyMap = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 2) + (0,1001))
if mibBuilder.loadTexts: ss7viewRefreshReadOnlyMap.setDescription('The Trap generated when dialaccess map gets changed.')
privateNotifyMap = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 4) + (0,58916871)).setObjects(("SS7VIEW-MIB", "incSelectionName"), ("SS7VIEW-MIB", "alarmRaise"))
if mibBuilder.loadTexts: privateNotifyMap.setDescription('This trap will notify the dialaccessMap process of changes to an INC alarm state. * It is the internal trap used in ss7view, not for browsing.')
privateRestarted = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 4) + (0,3000))
if mibBuilder.loadTexts: privateRestarted.setDescription('Process incsurvd has been re-started. * It is the internal trap used in ss7view, not for browsing.')
incCompStateCritical = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 6) + (0,1005)).setObjects(("SS7VIEW-MIB", "incComplexName"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"))
if mibBuilder.loadTexts: incCompStateCritical.setDescription('If the alarm state of INC complex is changed into Critical, this trap will be raised. The alarm state of INC complexe is caculated by Operational State, Standby State, and Availability state of INCs in the complex.')
incCompStateMajor = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 6) + (0,1004)).setObjects(("SS7VIEW-MIB", "incComplexName"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"))
if mibBuilder.loadTexts: incCompStateMajor.setDescription('If the alarm state of INC complex is changed into Major, this trap will be raised. The alarm state of INC complexe is caculated by Operational State, Standby State, and Availability state of INCs in the complex.')
incCompStateMinor = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 6) + (0,1003)).setObjects(("SS7VIEW-MIB", "incComplexName"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"))
if mibBuilder.loadTexts: incCompStateMinor.setDescription('If the alarm state of INC complex is changed into Minor, this trap will be raised. The alarm state of INC complexe is caculated by Operational State, Standby State, and Availability state of INCs in the complex.')
incCompStateWarning = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 6) + (0,1002)).setObjects(("SS7VIEW-MIB", "incComplexName"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"))
if mibBuilder.loadTexts: incCompStateWarning.setDescription('If the alarm state of INC complex is changed into Warning, this trap will be raised. The alarm state of INC complexe is caculated by Operational State, Standby State, and Availability state of INCs in the complex.')
incCompStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 6) + (0,1001)).setObjects(("SS7VIEW-MIB", "incComplexName"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"), ("SS7VIEW-MIB", "incComplexIpAddress"), ("SS7VIEW-MIB", "incComplexState"))
if mibBuilder.loadTexts: incCompStateNormal.setDescription('If the alarm state of INC complex is changed into Normal, this trap will be raised. The alarm state of INC complexe is caculated by Operational State, Standby State, and Availability state of INCs in the complex.')
telnetServerRestarted = NotificationType((1, 3, 6, 1, 4, 1, 562, 14, 1, 4) + (0,4000))
if mibBuilder.loadTexts: telnetServerRestarted.setDescription('The SS7View WebUI telnet server has started/restarted.')
mibBuilder.exportSymbols("SS7VIEW-MIB", stateChangeServerCLLI=stateChangeServerCLLI, diskCapacity=diskCapacity, trapSource=trapSource, csgStateChangeMinor=csgStateChangeMinor, csgStateChangeCritical=csgStateChangeCritical, webServerRestarted=webServerRestarted, pollFailReason=pollFailReason, csgStateChangeMajor=csgStateChangeMajor, alarmRaise=alarmRaise, incCompStateMajor=incCompStateMajor, logArchiveName=logArchiveName, incCompStateCritical=incCompStateCritical, privateRestarted=privateRestarted, ss7viewRefreshReadOnlyMap=ss7viewRefreshReadOnlyMap, telnetServerRestarted=telnetServerRestarted, AlarmRaiseType=AlarmRaiseType, csgStateChangeWarning=csgStateChangeWarning, incSelectionName=incSelectionName, diskThreshold=diskThreshold, incComplexIpAddress=incComplexIpAddress, pollServerCLLI=pollServerCLLI, ss7viewINCTrapVars=ss7viewINCTrapVars, csgStateChangeNormal=csgStateChangeNormal, pollServerIpAddress=pollServerIpAddress, privateTrapVars=privateTrapVars, stateChangeServerName=stateChangeServerName, nortel=nortel, ss7viewTraps=ss7viewTraps, incComplexAvailState=incComplexAvailState, ss7viewApplyConfigFile=ss7viewApplyConfigFile, csgStatusPollFailed=csgStatusPollFailed, dialaccess=dialaccess, ss7view=ss7view, pollSS7ViewHost=pollSS7ViewHost, incComplexName=incComplexName, incComplexStandbyState=incComplexStandbyState, privateTraps=privateTraps, pollServerName=pollServerName, ss7viewINCTraps=ss7viewINCTraps, stateChangeServerStandbyState=stateChangeServerStandbyState, ss7viewLogArchive=ss7viewLogArchive, ss7viewDiskFullRaise=ss7viewDiskFullRaise, incComplexAlarmVars=incComplexAlarmVars, incCompStateNormal=incCompStateNormal, incCompStateWarning=incCompStateWarning, ss7viewWebUITrapVars=ss7viewWebUITrapVars, incCompStateMinor=incCompStateMinor, pollSeverity=pollSeverity, ss7viewDiskFullClear=ss7viewDiskFullClear, pollSS7ViewIP=pollSS7ViewIP, ss7viewTrapVars=ss7viewTrapVars, incComplexState=incComplexState, incComplexOpState=incComplexOpState, partitionName=partitionName, csgStatusPollClear=csgStatusPollClear, stateChangeServerOpState=stateChangeServerOpState, stateChangeServerAvailState=stateChangeServerAvailState, privateNotifyMap=privateNotifyMap)
