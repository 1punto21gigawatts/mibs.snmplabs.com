#
# PySNMP MIB module A3COM-HUAWEI-DHCPR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-DHCPR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:04:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
huaweiMgmt, hwDhcp = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "huaweiMgmt", "hwDhcp")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, ModuleIdentity, Counter32, Counter64, IpAddress, Gauge32, ObjectIdentity, Unsigned32, iso, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "Counter32", "Counter64", "IpAddress", "Gauge32", "ObjectIdentity", "Unsigned32", "iso", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
hwDHCPRelayMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1))
hwDHCPRelayMib.setRevisions(('2003-02-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwDHCPRelayMib.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hwDHCPRelayMib.setLastUpdated('200303010000Z')
if mibBuilder.loadTexts: hwDHCPRelayMib.setOrganization('Huawei Technologies co., Ltd.')
if mibBuilder.loadTexts: hwDHCPRelayMib.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwDHCPRelayMib.setDescription('This MIB describes objects used for managing DHCP relay.')
hwDHCPRelayMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1))
hwDHCPRIPTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 1), )
if mibBuilder.loadTexts: hwDHCPRIPTable.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRIPTable.setDescription('A table for configuring ip addresses for DHCP relay')
hwDHCPRIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRIPAddr"))
if mibBuilder.loadTexts: hwDHCPRIPEntry.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRIPEntry.setDescription('An entry for configuring ip addresses for DHCP relay')
hwDHCPRIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPRIPAddr.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRIPAddr.setDescription('Ip address for DHCP relay')
hwDHCPRIPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDHCPRIPRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRIPRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwDHCPRSeletAllocateModeTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 2), )
if mibBuilder.loadTexts: hwDHCPRSeletAllocateModeTable.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRSeletAllocateModeTable.setDescription('A table for selecting allocation mode of dhcp service')
hwDHCPRSeletAllocateModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hwDHCPRSeletAllocateModeEntry.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRSeletAllocateModeEntry.setDescription('An entry for configuring the allocation mode of DHCP service')
hwDHCPRSelectAllocateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("global", 0), ("interface", 1), ("relay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPRSelectAllocateMode.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRSelectAllocateMode.setDescription('Allocation mode of DHCP service')
hwDHCPRelayCycleStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPRelayCycleStatus.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRelayCycleStatus.setDescription('Status of DHCP relay cycle mode')
hwDHCPRRxBadPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPRRxBadPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRRxBadPktNum.setDescription('The total number of the bad packets received by DHCP relay')
hwDHCPRRxServerPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPRRxServerPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRRxServerPktNum.setDescription('The total number of the packets received from DHCP servers by DHCP relay module')
hwDHCPRTxServerPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPRTxServerPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRTxServerPktNum.setDescription('The total number of the packets transmited to DHCP servers by DHCP relay module')
hwDHCPRRxClientPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPRRxClientPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRRxClientPktNum.setDescription('The total number of the packets received form DHCP clients by DHCP relay')
hwDHCPRTxClientPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPRTxClientPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRTxClientPktNum.setDescription('The total number of the brodcast packets transmited to DHCP clients by DHCP relay')
hwDHCPRTxClientUniPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPRTxClientUniPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRTxClientUniPktNum.setDescription('The total number of the unicast packets received form DHCP clients by DHCP relay')
hwDHCPRTxClientBroPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPRTxClientBroPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRTxClientBroPktNum.setDescription('The total number of the brodcast packets received form DHCP clients by DHCP relay')
hwDHCPRelayDiscoverPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPRelayDiscoverPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRelayDiscoverPktNum.setDescription('The total number of the DHCP Discover packets handled by DHCP relay')
hwDHCPRelayRequestPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPRelayRequestPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRelayRequestPktNum.setDescription('The total number of the DHCP Request packets handled by DHCP relay')
hwDHCPRelayDeclinePktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPRelayDeclinePktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRelayDeclinePktNum.setDescription('The total number of the DHCP Decline packets handled by DHCP relay')
hwDHCPRelayReleasePktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPRelayReleasePktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRelayReleasePktNum.setDescription('The total number of the DHCP Release packets handled by DHCP relay')
hwDHCPRelayInformPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPRelayInformPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRelayInformPktNum.setDescription('The total number of the DHCP Inform packets handled by DHCP relay')
hwDHCPRelayOfferPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPRelayOfferPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRelayOfferPktNum.setDescription('The total number of the DHCP Offer packets handled by DHCP server')
hwDHCPRelayAckPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPRelayAckPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRelayAckPktNum.setDescription('The total number of the DHCP Ack packets handled by DHCP relay')
hwDHCPRelayNakPktNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDHCPRelayNakPktNum.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRelayNakPktNum.setDescription('The total number of the DHCP Nak packets handled by DHCP relay')
hwDHCPRelayStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDHCPRelayStatisticsReset.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRelayStatisticsReset.setDescription('Reset the above statictics information of handled packets by DHCP relay')
hwDHCPRelayMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 2))
hwDHCPRelayMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 2, 1))
hwDHCPRelayMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 2, 2))
hwDHCPRelayMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 7, 1, 2, 2, 1)).setObjects(("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRIPAddr"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRIPRowStatus"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRSelectAllocateMode"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRelayCycleStatus"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRRxBadPktNum"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRRxServerPktNum"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRTxServerPktNum"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRRxClientPktNum"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRTxClientPktNum"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRTxClientUniPktNum"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRTxClientBroPktNum"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRelayDiscoverPktNum"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRelayRequestPktNum"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRelayDeclinePktNum"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRelayReleasePktNum"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRelayInformPktNum"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRelayOfferPktNum"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRelayAckPktNum"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRelayNakPktNum"), ("A3COM-HUAWEI-DHCPR-MIB", "hwDHCPRelayStatisticsReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDHCPRelayMIBGroup = hwDHCPRelayMIBGroup.setStatus('current')
if mibBuilder.loadTexts: hwDHCPRelayMIBGroup.setDescription('The basic collection of objects providing management of DHCP realy.')
mibBuilder.exportSymbols("A3COM-HUAWEI-DHCPR-MIB", hwDHCPRRxServerPktNum=hwDHCPRRxServerPktNum, hwDHCPRelayStatisticsReset=hwDHCPRelayStatisticsReset, hwDHCPRelayCycleStatus=hwDHCPRelayCycleStatus, hwDHCPRelayMIBGroups=hwDHCPRelayMIBGroups, hwDHCPRelayMIBConformance=hwDHCPRelayMIBConformance, hwDHCPRelayDiscoverPktNum=hwDHCPRelayDiscoverPktNum, hwDHCPRSeletAllocateModeEntry=hwDHCPRSeletAllocateModeEntry, hwDHCPRelayNakPktNum=hwDHCPRelayNakPktNum, hwDHCPRelayOfferPktNum=hwDHCPRelayOfferPktNum, hwDHCPRelayMIBCompliances=hwDHCPRelayMIBCompliances, PYSNMP_MODULE_ID=hwDHCPRelayMib, hwDHCPRIPRowStatus=hwDHCPRIPRowStatus, hwDHCPRelayRequestPktNum=hwDHCPRelayRequestPktNum, hwDHCPRTxClientBroPktNum=hwDHCPRTxClientBroPktNum, hwDHCPRelayAckPktNum=hwDHCPRelayAckPktNum, hwDHCPRRxClientPktNum=hwDHCPRRxClientPktNum, hwDHCPRTxServerPktNum=hwDHCPRTxServerPktNum, hwDHCPRTxClientUniPktNum=hwDHCPRTxClientUniPktNum, hwDHCPRSeletAllocateModeTable=hwDHCPRSeletAllocateModeTable, hwDHCPRIPEntry=hwDHCPRIPEntry, hwDHCPRTxClientPktNum=hwDHCPRTxClientPktNum, hwDHCPRRxBadPktNum=hwDHCPRRxBadPktNum, hwDHCPRelayReleasePktNum=hwDHCPRelayReleasePktNum, hwDHCPRelayMibObject=hwDHCPRelayMibObject, hwDHCPRelayMIBGroup=hwDHCPRelayMIBGroup, hwDHCPRelayInformPktNum=hwDHCPRelayInformPktNum, hwDHCPRelayMib=hwDHCPRelayMib, hwDHCPRSelectAllocateMode=hwDHCPRSelectAllocateMode, hwDHCPRIPTable=hwDHCPRIPTable, hwDHCPRIPAddr=hwDHCPRIPAddr, hwDHCPRelayDeclinePktNum=hwDHCPRelayDeclinePktNum)
