#
# PySNMP MIB module HPN-ICF-EPON-UNI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-EPON-UNI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:38:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
hpnicfEpon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfEpon")
ifDescr, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, NotificationType, Gauge32, Integer32, iso, Unsigned32, Counter64, Counter32, TimeTicks, MibIdentifier, ModuleIdentity, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "Gauge32", "Integer32", "iso", "Unsigned32", "Counter64", "Counter32", "TimeTicks", "MibIdentifier", "ModuleIdentity", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
MacAddress, TruthValue, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "TextualConvention", "RowStatus", "DisplayString")
hpnicfEponUni = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5))
if mibBuilder.loadTexts: hpnicfEponUni.setLastUpdated('200807281743Z')
if mibBuilder.loadTexts: hpnicfEponUni.setOrganization('')
if mibBuilder.loadTexts: hpnicfEponUni.setContactInfo('')
if mibBuilder.loadTexts: hpnicfEponUni.setDescription('The objects in this MIB module are used to manage and display current configuration of UNI (user network interface) which is based on the ONU(Optical Network Unit).')
hpnicfEponUniSysMan = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1))
hpnicfEponUniSysManTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1), )
if mibBuilder.loadTexts: hpnicfEponUniSysManTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniSysManTable.setDescription('This table defines several UNI system parameters.')
hpnicfEponUniSysManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniIndex"))
if mibBuilder.loadTexts: hpnicfEponUniSysManEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniSysManEntry.setDescription('The entry of hpnicfEponUniSysManTable.')
hpnicfEponUniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfEponUniIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniIndex.setDescription('The index value which uniquely identifies the FE(fast Ethernet) interface of the ONU.')
hpnicfEponUniDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniDescr.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniDescr.setDescription('A textual string containing information about the interface. This string should include the name of the manufacturer, the product name and the version of the interface hardware and software.')
hpnicfEponUniAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniAdminStatus.setDescription('The desired state of the user network interface. When a managed system initializes, all user network interfaces start with down(2) state. The testing(3)state indicates that no operational packets can be passed. As a result of either explicit management action or per configuration information retained by the managed system, hpnicfEponUniAdminStatus is then changed to either the up(1) or testing(3) states (or remains in the down(2) state).')
hpnicfEponUniMdi = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mdi-ii", 1), ("mdi-x", 2), ("mdi-auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniMdi.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMdi.setDescription('Type of the line connected to UNI interface: mdi-ii(straight-through cable), mdi-x (crossover cable), mdi-auto (auto-sensing).')
hpnicfEponUniPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniPriority.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniPriority.setDescription('The priority of user network interface. If the value is larger, the priority will be higher.')
hpnicfEponUniVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("vlantrunk", 1), ("access", 2), ("hybrid", 3), ("untagged", 4), ("transparent", 5), ("doubletagged", 6), ("tag", 7), ("translation", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniVlanType.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniVlanType.setDescription('UNI vlan types.')
hpnicfEponUniAccessVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniAccessVlan.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniAccessVlan.setDescription('The vlan ID assigned to untagged frames or Priority-Tagged frames received on user network interface.')
hpnicfEponUniTrunkPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniTrunkPvid.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniTrunkPvid.setDescription('PVID(port vlan ID), the vlan ID assigned to untagged frames or Priority-Tagged frames received on user network interface.')
hpnicfEponUniVLANTrunkAllowListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniVLANTrunkAllowListLow.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniVLANTrunkAllowListLow.setDescription("Each octet within this value specifies a set of eight vlans, with the first octet specifying vlans 1 through 8, the second octet specifying vlans 9 through 16, etc. Within each octet, the most significant bit represents the highest numbered VLAN, and the least significant bit represents the lowest numbered VLAN. Thus, each allowed vlan of the trunk port is represented by a single bit within the value of this object. If that bit has a value of '1' then that vlan is allowed in the set of vlans. the vlan is not allowed if its bit has a value of '0'.")
hpnicfEponUniVLANTrunkAllowListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniVLANTrunkAllowListHigh.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniVLANTrunkAllowListHigh.setDescription("Each octet within this value specifies a set of eight vlans, with the first octet specifying vlans 2049 through 2056, the second octet specifying vlans 2057 through 2064, etc. Within each octet, the most significant bit represents the highest numbered vlan, and the least significant bit represents the lowest numbered vlan. Thus, each allowed vlan of the trunk port is represented by a single bit within the value of this object. If that bit has a value of '1' then that vlan is allowed in the set of vlans; the vlan is not allowed if its bit has a value of '0'. ")
hpnicfEponUniInboundLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniInboundLineRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniInboundLineRate.setDescription('The value of the inbound line-rate. measured with kbps. The upper limit of the line-rate is the value of hpnicfEponUniLineRateMax in the entry. It must be multiple of the value of hpnicfEponUniLineRateStep. The default value of hpnicfEponUniLineRate is the value of hpnicfEponUniLineRateMax.')
hpnicfEponUniOutboundLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniOutboundLineRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniOutboundLineRate.setDescription('The value of the outbound line-rate. measured with kbps. The upper limit of the line-rate is the value of hpnicfEponUniLineRateMax in the entry. It must be multiple of the value of hpnicfEponUniLineRateStep. The default value of hpnicfEponUniLineRate is the value of hpnicfEponUniLineRateMax.')
hpnicfEponUniFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniFlowControl.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniFlowControl.setDescription('Flow control status. true(1) - Flow control status enable. false(2) - Flow control status disable.')
hpnicfEponUniSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 10, 100, 1000, 10000, 24000))).clone(namedValues=NamedValues(("auto", 0), ("s10M", 10), ("s100M", 100), ("s1000M", 1000), ("s10000M", 10000), ("s24000M", 24000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniSpeed.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniSpeed.setDescription('User network interface speed.')
hpnicfEponUniDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniDuplex.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniDuplex.setDescription('User network interface mode.')
hpnicfEponUniVlanVPNStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniVlanVPNStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniVlanVPNStatus.setDescription('vlan VPN status. true(1) - vlan VPN status enable. false(2) - vlan VPN disable.')
hpnicfEponUniCountReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniCountReset.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniCountReset.setDescription('Reset the counter which is about packets of the interface, then the counter will change to zero. There is no sense in reading this object.')
hpnicfEponUniPortIsolate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniPortIsolate.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniPortIsolate.setDescription(' enable - enable UNI port isolate setting. disable - disable UNI port isolate setting. ')
hpnicfEponUniVlanConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniVlanConfiguration.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniVlanConfiguration.setDescription(' The vlan configuration of the related vlan mode. Transparent vlan mode: hpnicfEponUniVlanConfiguration is a zero length string. Tag vlan mode: the first four octets were the tag assigned to untagged frames received on UNI, including TPID, VID,CFI and priority. Translation vlan mode: the first four octets were the old tag (including TPID, VID, CFI and priority), which is replaced by the new tag(including TPID, VID, CFI and priority), the second four octets. ')
hpnicfEponUniAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniAutoNegotiation.setDescription(' enable - enable auto negotiation. disable - disable auto negotiation. ')
hpnicfEponUniRestartAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("autoNegotiation", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniRestartAutoNeg.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniRestartAutoNeg.setDescription(' Force to restart the auto negotiation process. ')
hpnicfEponUniLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniLinkStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniLinkStatus.setDescription(' The link status of UNI. ')
hpnicfEponUniInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("gigabitethernetport", 1), ("fastethernetport", 2), ("voipport", 3), ("e1port", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniInterfaceType.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniInterfaceType.setDescription(' UNI interface type. ')
hpnicfEponUniVitualCableTest = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniVitualCableTest.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniVitualCableTest.setDescription(' True(1): Virtual cable test enable. False(2): Virtual cable test disable.')
hpnicfEponUniVCTCableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("abnormal", 2), ("abnormalOpen", 3), ("abnormalShort", 4), ("failure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniVCTCableStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniVCTCableStatus.setDescription(' Get the cable status. Normal(1),cable is normal. Abnormal(2),cable is abnormal. AbnormalOpen(3),cable is abnormal because of open circuit. AbnormalShort(4),cable is abnormal because of short circuit. Failure(5),cable is abnormal because of testing failure. ')
hpnicfEponUniVCTCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniVCTCableLength.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniVCTCableLength.setDescription(' Get the cable length. When hpnicfEponUniVCTCableStatus is normal, the node stands for the length from the UNI port to the port opposite. When hpnicfEponUniVCTCableStatus is abnormal, it stands for the lengh from the UNI port to the failure place. Unit:meter(m). ')
hpnicfEponUniVCTImpedanceMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-support", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniVCTImpedanceMismatch.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniVCTImpedanceMismatch.setDescription(' Get the cable impedance. Not-support(1),the UNI port does not support this function. True(2),impedance match. False(3),impedance mismatch.')
hpnicfEponUniVCTPairSkew = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniVCTPairSkew.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniVCTPairSkew.setDescription(' Get the symmetry of cable. If the function is not supported, the default value 0 will be returned. Unit:nanosecond(ns). ')
hpnicfEponUniVCTPairSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupport", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniVCTPairSwap.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniVCTPairSwap.setDescription(' NotSupport(1),the UNI port does not support this function. True(2),pair swap. False(3),not pair swap.')
hpnicfEponUniVCTPolaritySwap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupport", 1), ("true", 2), ("false", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniVCTPolaritySwap.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniVCTPolaritySwap.setDescription(' NotSupport(1),the UNI port does not support this function. True(2),polarity swap. False(3),not polarity swap.')
hpnicfEponUniVCTInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniVCTInsertionLoss.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniVCTInsertionLoss.setDescription(' If the function is not supported, the default value 0 will be returned. Unit:decibel(db). ')
hpnicfEponUniVCTReturnLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniVCTReturnLoss.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniVCTReturnLoss.setDescription(' If the function is not supported, the default value 0 will be returned. Unit:decibel(db). ')
hpnicfEponUniVCTNearendCrosstalk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniVCTNearendCrosstalk.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniVCTNearendCrosstalk.setDescription(' If the function is not supported, the default value 0 will be returned. Unit:decibel(db). ')
hpnicfEponUniVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 1, 1, 41), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfEponUniVlan.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniVlan.setDescription(' If the function is not supported, the default value 0 will be returned. Unit:decibel(db). ')
hpnicfEponUniCountTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2), )
if mibBuilder.loadTexts: hpnicfEponUniCountTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniCountTable.setDescription('A list of interface counter about frames entries.')
hpnicfEponUniCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniIndex"))
if mibBuilder.loadTexts: hpnicfEponUniCountEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniCountEntry.setDescription('An entry containing management information applicable to a particular interface.')
hpnicfEponUniInStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniInStatsPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniInStatsPkts.setDescription('The total number of frames (including bad frames, broadcast frames, and multicast frames) received.')
hpnicfEponUniInStatsUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniInStatsUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniInStatsUnicastPkts.setDescription('The total number of good frames received that are directed to the unicast address. Note that this does not include multicast and broadcast frames.')
hpnicfEponUniInStatsBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniInStatsBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniInStatsBroadcastPkts.setDescription('The total number of good frames received that are directed to the broadcast address. Note that this does not include multicast frames.')
hpnicfEponUniInStatsMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniInStatsMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniInStatsMulticastPkts.setDescription('The total number of good frames received that are directed to a multicast address. Note that this number does not include frames directed to the broadcast address.')
hpnicfEponUniInPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniInPausePkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniInPausePkts.setDescription('A count of MAC Control frames received on this interface by the pause(flow control) operation. This counter does not increment when the interface is in a half-duplex mode. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
hpnicfEponUniInTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniInTotalErrors.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniInTotalErrors.setDescription('Total count of the error frames received on this interface.')
hpnicfEponUniInStatsCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniInStatsCRCAlignErrors.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniInStatsCRCAlignErrors.setDescription('The total number of frames received that had a length (excluding framing bits, but including FCS octets) of between 64 and 1518 octets, inclusive, but had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error).')
hpnicfEponUniInStatsUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniInStatsUndersizePkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniInStatsUndersizePkts.setDescription('The total number of frames received that are less than 64 octets long (excluding framing bits, but including FCS octets) and are otherwise well formed.')
hpnicfEponUniInStatsOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniInStatsOversizePkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniInStatsOversizePkts.setDescription('The total number of frames received that are longer than 1518 octets (excluding framing bits, but including FCS octets) and are otherwise well formed.')
hpnicfEponUniInErrorbyOther = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniInErrorbyOther.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniInErrorbyOther.setDescription('The total number of error frames received on this interface.')
hpnicfEponUniOutStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniOutStatsPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniOutStatsPkts.setDescription('The total number of frames (including bad frames, broadcast frames, and multicast frames) sent.')
hpnicfEponUniOutStatsUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniOutStatsUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniOutStatsUnicastPkts.setDescription('The total number of good frames sent that are directed to the unicast address. Note that this does not include multicast and broadcast frames.')
hpnicfEponUniOutStatsBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniOutStatsBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniOutStatsBroadcastPkts.setDescription('The total number of good frames sent that are directed to the broadcast address. Note that this does not include multicast frames.')
hpnicfEponUniOutStatsMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniOutStatsMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniOutStatsMulticastPkts.setDescription('The total number of good frames sent that are directed to a multicast address. Note that this number does not include frames directed to the broadcast address.')
hpnicfEponUniOutStatsPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniOutStatsPausePkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniOutStatsPausePkts.setDescription('The total number of MAC control frames sent on this interface by the pause operation. This counter does not increment when the interface is in a half-duplex mode. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
hpnicfEponUniOutTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniOutTotalErrors.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniOutTotalErrors.setDescription('The total number of error frames sent on this interface.')
hpnicfEponUniOutStatsCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniOutStatsCollisions.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniOutStatsCollisions.setDescription('The best estimate of the total number of collisions on this Ethernet segment. The value returned will depend on the location of the RMON probe. Section 8.2.1.3 (10BASE-5) and section 10.3.1.3 (10BASE-2) of IEEE standard 802.3 states that a station must detect a collision, in the receive mode, if three or more stations are transmitting simultaneously. A repeater port must detect a collision when two or more stations are transmitting simultaneously. Thus a probe placed on a repeater port could record more collisions than a probe connected to a station on the same segment could. Probe location plays a much smaller role when considering 10BASE-T. 14.2.1.4 (10BASE-T) of IEEE standard 802.3 defines a collision as the simultaneous presence of signals on the DO and RD circuits (transmitting and receiving at the same time). A 10BASE-T station can only detect collisions when it is transmitting. Thus probes placed on a station and a repeater, should report the same number of collisions. Note also that an RMON probe inside a repeater should ideally report collisions between the repeater and one or more other hosts (transmit collisions as defined by IEEE 802.3k) plus receiver collisions observed on any coax segments to which the repeater is connected.')
hpnicfEponUniOutDelayExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniOutDelayExceededDiscards.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniOutDelayExceededDiscards.setDescription('The number of frames discarded by this port due to excessive transit delay through the bridge. It is incremented by both transparent and source route bridges.')
hpnicfEponUniOutErrorbyOther = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniOutErrorbyOther.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniOutErrorbyOther.setDescription('The total number of other error frames sent on this interface. Other error frames means the error frames out of collision frames and excessive delayed frames.')
hpnicfEponUniOutDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniOutDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniOutDroppedFrames.setDescription(' The total number of frames dropped because of buffer failure. ')
hpnicfEponUniIgmpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 3), )
if mibBuilder.loadTexts: hpnicfEponUniIgmpInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniIgmpInfoTable.setDescription('This table stores igmp information of UNI interface.')
hpnicfEponUniIgmpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniMacIndex"))
if mibBuilder.loadTexts: hpnicfEponUniIgmpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniIgmpInfoEntry.setDescription('The entry of hpnicfEponUniIgmpInfoTable.')
hpnicfEponUniMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfEponUniMacIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMacIndex.setDescription('The index uniquely identifies the igmp information in current UNI interface.')
hpnicfEponUniIgmpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniIgmpMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniIgmpMacAddress.setDescription('A 6-octet read-only value carrying the individual MAC address indicates which igmp group the UNI interface belonging to.')
hpnicfEponUniIgmpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniIgmpVlanId.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniIgmpVlanId.setDescription('An integer range from 1 to 4094 indicates the vlan which the igmp Mac address has joined in.')
hpnicfEponUniParaMan = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 4))
hpnicfEponUniLineRateMax = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniLineRateMax.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniLineRateMax.setDescription('The maximum value of the line-rate(kbps) that user network interface can be set.')
hpnicfEponUniLineRateStep = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniLineRateStep.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniLineRateStep.setDescription('The step of line-rate(kbps).')
hpnicfEponUniNumberOnOnu = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniNumberOnOnu.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniNumberOnOnu.setDescription('The user network interface number on ONU.')
hpnicfEponUniScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 5))
hpnicfEponUniPortPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 6), )
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyTable.setDescription(' UNI port policy configuration. ')
hpnicfEponUniPortPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniIndex"))
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyEntry.setDescription(' The entry of hpnicfEponUniPortPolicyTable. ')
hpnicfEponUniPortPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyStatus.setDescription(' enable - enable UNI upstream port policing. disable - disable UNI upstream port policing. ')
hpnicfEponUniPortPolicyCir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 6, 1, 2), Integer32().clone(102400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyCir.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyCir.setDescription(' The committed information rate, ranging from 1 to 102400, measured in kbps. ')
hpnicfEponUniPortPolicyBucketDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyBucketDepth.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyBucketDepth.setDescription(' The depth of the token bucket to tolerant the certain burst(CBS), ranging from 0 to 65535, measured in bytes. ')
hpnicfEponUniPortPolicyExtraBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyExtraBurst.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyExtraBurst.setDescription(' The extra token to permit the forwarding engine to finish the packet being sent when the bucket depth is exhausted, ranging from 0 to 65535, measured in bytes. ')
hpnicfEponUniPortPolicyInboundCir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyInboundCir.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyInboundCir.setDescription(' The inbound committed information rate, measured in kbps. ')
hpnicfEponUniPortPolicyInboundBucketDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyInboundBucketDepth.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyInboundBucketDepth.setDescription(' The inbound depth of the token bucket to tolerant the certain burst(CBS), ranging from 0 to 65535, measured in bytes. ')
hpnicfEponUniPortPolicyInboundExtraBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyInboundExtraBurst.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyInboundExtraBurst.setDescription(' The inbound extra token to permit the forwarding engine to finish the packet being sent when the bucket depth is exhausted, ranging from 0 to 65535, measured in bytes. ')
hpnicfEponUniPortPolicyOutboundCir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyOutboundCir.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyOutboundCir.setDescription(' The outbound committed information rate, stepped by 64, measured in kbps. ')
hpnicfEponUniPortPolicyOutboundPir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyOutboundPir.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniPortPolicyOutboundPir.setDescription(' The outbound peak information rate, stepped by 64, measured in kbps. ')
hpnicfEponUniMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 7), )
if mibBuilder.loadTexts: hpnicfEponUniMulticastTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastTable.setDescription(' UNI multicast configuration. ')
hpnicfEponUniMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniIndex"))
if mibBuilder.loadTexts: hpnicfEponUniMulticastEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastEntry.setDescription(' The entry of hpnicfEponUniPortPolicyTable. ')
hpnicfEponUniMulticastGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 7, 1, 1), Integer32().clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniMulticastGroupNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastGroupNumber.setDescription(' The allowed multicast group number that can be handled at the same time by UNI. ')
hpnicfEponUniMulticastVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniMulticastVlanList.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastVlanList.setDescription(' The multicast vlan list. The first two octets of the string represent the first VLAN ID; the second two octets of the string represent the second VLAN ID, and so on. It is a zero length string by default. ')
hpnicfEponUniMulticastStripStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniMulticastStripStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastStripStatus.setDescription(' true - strip the vlan tag of multicast packet. false - does not strip the vlan tag of multicast packet. ')
hpnicfEponUniMulticastFastleave = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 7, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniMulticastFastleave.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastFastleave.setDescription(' true(1) - fast leave of IGMP enable on ONU. false(2) - fast leave of IGMP disable on ONU. ')
hpnicfEponUniTechAbilityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 8), )
if mibBuilder.loadTexts: hpnicfEponUniTechAbilityTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniTechAbilityTable.setDescription(' UNI multicast configuration. ')
hpnicfEponUniTechAbilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniIndex"))
if mibBuilder.loadTexts: hpnicfEponUniTechAbilityEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniTechAbilityEntry.setDescription(' The entry of hpnicfEponUniTechAbilityTable. ')
hpnicfEponUniLocalTechAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniLocalTechAbility.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniLocalTechAbility.setDescription(' The local port capabilities of the UNI. Each two octets stand for a capability of UNI: the first two octets represent one capability and the second two octets represent another capability, and so on. The capabilities list: 1 - undefined, 2 - initializing, true ability not yet known, 14 - 10BASE-T, 142 - full duplex 10BASE-T, 23 - 100BASE-T4, 25 - 100BASE-TX, 252 - full duplex 100BASE-TX, 312 - PAUSE operation for full duplex links, 313 - asymmetric PAUSE operation for full duplex links, 314 - symmetric PAUSE operation for full duplex links, 32 - 100BASE-T2, 322 - full duplex 100BASE-T2, 36 - 1000BASE-X, 362 - full duplex 1000BASE-X, 40 - 1000BASE-T UTP PHY, 402 - full duplex 1000BASE-T UTP PHY, 37 - remote fault bit 1(RF1), 372 - remote fault bit 2(RF2), 8029 - 802.9ISLAN-16T. ')
hpnicfEponUniAdvertisedTechAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniAdvertisedTechAbility.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniAdvertisedTechAbility.setDescription(' The advertised port capabilities of the UNI. The capabilities list references the description of hpnicfEponUniLocalTechAbility. ')
hpnicfEponUniMulticastControlTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 9), )
if mibBuilder.loadTexts: hpnicfEponUniMulticastControlTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastControlTable.setDescription(' UNI multicast control parameters. ')
hpnicfEponUniMulticastControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniMulticastIndex"))
if mibBuilder.loadTexts: hpnicfEponUniMulticastControlEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastControlEntry.setDescription(' The entry of the table hpnicfEponUniMulticastControlTable. ')
hpnicfEponUniMulticastVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 9, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniMulticastVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastVlanIndex.setDescription(' The multicast vlan ID. ')
hpnicfEponUniMulticastAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniMulticastAddressList.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastAddressList.setDescription(' The multicast address, each four octets represents a multicast address, the address section ranging from the first four octets to the second four octets, and the like. ')
hpnicfEponUniMulticastAccessRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2), ("preview", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniMulticastAccessRule.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastAccessRule.setDescription(' deny - deny the multicast packet. permit - permit the multicast packet. preview - permit the multicast packet with conditions. ')
hpnicfEponUniMulticastChannelLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 9, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniMulticastChannelLimit.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastChannelLimit.setDescription(' The limitation of multicast preview channel number. ')
hpnicfEponUniMulticastPreTimeSlice = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 9, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniMulticastPreTimeSlice.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastPreTimeSlice.setDescription(' The time slice of multicast preview. ')
hpnicfEponUniMulticastPreTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 9, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniMulticastPreTimes.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastPreTimes.setDescription(' The number of multicast preview times. ')
hpnicfEponUniMulticastPreInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 9, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniMulticastPreInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastPreInterval.setDescription(' The interval between two consecutive previews, measured in minute. ')
hpnicfEponUniMulticastRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 9, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniMulticastRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastRowStatus.setDescription(' The status of this table entry. The active, createAndGo and the destory statuses are supported. ')
hpnicfEponUniMulticastIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 9, 1, 9), Integer32())
if mibBuilder.loadTexts: hpnicfEponUniMulticastIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastIndex.setDescription(' The index of the entry. ')
hpnicfEponUniMulticastSourceIpList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 9, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniMulticastSourceIpList.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastSourceIpList.setDescription(' This list contains many source ip addresses. Each ip address is contained in four octets. ')
hpnicfEponUniMulticastResetInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 9, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniMulticastResetInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastResetInterval.setDescription(' The interval is measured in minute. From the last preview limitation is reached, a customer can preview again after this interval is expired. ')
hpnicfEponUniQosIndexNextTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 10), )
if mibBuilder.loadTexts: hpnicfEponUniQosIndexNextTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniQosIndexNextTable.setDescription(' The next index table. ')
hpnicfEponUniQosIndexNextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniIndex"))
if mibBuilder.loadTexts: hpnicfEponUniQosIndexNextEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniQosIndexNextEntry.setDescription(' The entry of the table hpnicfEponUniQosIndexNextTable. ')
hpnicfEponUniQosConfIndexNext = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniQosConfIndexNext.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniQosConfIndexNext.setDescription(' This object contains an appropriate value to be used for hpnicfEponUniQosConfIndex when creating rows in the hpnicfEponUniQosConfTable. ')
hpnicfEponUniQosConfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 11), )
if mibBuilder.loadTexts: hpnicfEponUniQosConfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniQosConfTable.setDescription(' UNI Qos configuration. ')
hpnicfEponUniQosConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniQosConfIndex"))
if mibBuilder.loadTexts: hpnicfEponUniQosConfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniQosConfEntry.setDescription(' The entry of the table hpnicfEponUniQosConfTable. ')
hpnicfEponUniQosConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfEponUniQosConfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniQosConfIndex.setDescription(' The rule index. ')
hpnicfEponUniQosConfRuleIndexNext = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniQosConfRuleIndexNext.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniQosConfRuleIndexNext.setDescription(' This object contains an appropriate value to be used for hpnicfEponUniQosRuleIndex when creating rows in the hpnicfEponUniQosRuleTable. ')
hpnicfEponUniQosConfMappedQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 11, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniQosConfMappedQueue.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniQosConfMappedQueue.setDescription(' The queue that the ethernet frames will be mapped. ')
hpnicfEponUniQosConfMarkedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 11, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniQosConfMarkedPriority.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniQosConfMarkedPriority.setDescription(' Priority of the ethernet frames to be marked, which compliant with the 802.1D user priority standard. ')
hpnicfEponUniQosConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 11, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniQosConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniQosConfRowStatus.setDescription(' The status of this table entry. The active, createAndGo and the destory statuses are supported. ')
hpnicfEponUniQosRuleTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 12), )
if mibBuilder.loadTexts: hpnicfEponUniQosRuleTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniQosRuleTable.setDescription(' Qos sub rule of the UNI. ')
hpnicfEponUniQosRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniQosConfIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniQosRuleIndex"))
if mibBuilder.loadTexts: hpnicfEponUniQosRuleEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniQosRuleEntry.setDescription(' The entry of the table hpnicfEponUniQosRuleTable. ')
hpnicfEponUniQosRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: hpnicfEponUniQosRuleIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniQosRuleIndex.setDescription(' The sub rule index. ')
hpnicfEponUniQosRuleSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("dstmac", 1), ("srcmac", 2), ("ethernetpriority", 3), ("vlanid", 4), ("ethernettype", 5), ("dstip", 6), ("srcip", 7), ("ipprototype", 8), ("ipv4tosdscp", 9), ("ipv6precedence", 10), ("srcport", 11), ("dstport", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniQosRuleSelector.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniQosRuleSelector.setDescription(' The ethernet frame selector. dstmac - based on destination MAC address. srcmac - based on source MAC address. ethernetpriority - based on ethernet priority. vlanid - based on VLAN ID. ethernettype - based on ethernet type. dstip - based on destination IP address. srcip - based on source IP address. ipprototype - based on IP type(ipv4 or ipv6). ipv4tosdscp - based on IP TOS/DSCP. ipv6 - based IP precedence. srcport - based on layer 4 source port. dstport - based on layer 4 destination port. ')
hpnicfEponUniQosRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 12, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniQosRuleValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniQosRuleValue.setDescription(' The rule value based on the hpnicfEponUniQosRuleSelector. ')
hpnicfEponUniQosRuleMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 12, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniQosRuleMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniQosRuleMacAddress.setDescription(' MAC Address. ')
hpnicfEponUniQosRuleOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("nevermatch", 1), ("equal", 2), ("notequal", 3), ("lessthanequal", 4), ("greaterthanequal", 5), ("fieldexist", 6), ("fieldnotexist", 7), ("alwaysmatch", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniQosRuleOperator.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniQosRuleOperator.setDescription(' nervermatch - value never match. equal - field equal to the value. notequal - field not equal to the value. lessthanequal - field less than or equal to the value. greaterthanequal - field greater than or equal to the value. fieldexist - value is ignored if field exists. fieldnotexist - value is ignored if field does not exist. alwaysmatch - value always match. ')
hpnicfEponUniQosRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 12, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniQosRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniQosRuleRowStatus.setDescription(' The status of this table entry. Only active, createAndGo and the destory are supported. ')
hpnicfEponUniMirrorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 13), )
if mibBuilder.loadTexts: hpnicfEponUniMirrorGroupTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMirrorGroupTable.setDescription(' Qos sub rule of the UNI. ')
hpnicfEponUniMirrorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniMirrorGroupID"))
if mibBuilder.loadTexts: hpnicfEponUniMirrorGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMirrorGroupEntry.setDescription(' The entry of the hpnicfEponUniMirrorGroupTable. ')
hpnicfEponUniMirrorGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfEponUniMirrorGroupID.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMirrorGroupID.setDescription('Epon UNI mirror group ID.')
hpnicfEponUniMirrorInboundPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 13, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfEponUniMirrorInboundPortList.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMirrorInboundPortList.setDescription(" UNI inbound port list. Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the highest numbered UNI, and the least significant bit represents the lowest numbered UNI. Thus, each UNI port is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is allowed in the set of ports. the port is not allowed if its bit has a value of '0'. ")
hpnicfEponUniMirrorOutboundPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 13, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniMirrorOutboundPortList.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMirrorOutboundPortList.setDescription(' UNI outnbound port list, more infomation reference hpnicfEponUniMirrorInboundPortList ')
hpnicfEponUniMonitorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 13, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniMonitorPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMonitorPort.setDescription(' UNI monitor port. ')
hpnicfEponUniMirrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 13, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfEponUniMirrorRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMirrorRowStatus.setDescription(' RowStatus, Now support three status: createAndGo, active, destroy. ')
hpnicfEponUniMirrorGroupIdNextTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 14), )
if mibBuilder.loadTexts: hpnicfEponUniMirrorGroupIdNextTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMirrorGroupIdNextTable.setDescription(' The next index table, which is used by hpnicfEponUniMirrorGroupTable. ')
hpnicfEponUniMirrorGroupIdNextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfEponUniMirrorGroupIdNextEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMirrorGroupIdNextEntry.setDescription(' The entry of the table hpnicfEponUniMirrorGroupIdNextEntry. ')
hpnicfEponUniMirrorGroupIDNext = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniMirrorGroupIDNext.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMirrorGroupIDNext.setDescription(' This object contains an appropriate value to be used for hpnicfEponUniMirrorGroupID when creating rows in the hpnicfEponUniMirrorGroupTable. ')
hpnicfEponUniMulticastCtrlInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 15), )
if mibBuilder.loadTexts: hpnicfEponUniMulticastCtrlInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastCtrlInfoTable.setDescription(' UNI multicast information which is active . ')
hpnicfEponUniMulticastCtrlInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 15, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniMultActVlan"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniMultActAddress"))
if mibBuilder.loadTexts: hpnicfEponUniMulticastCtrlInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastCtrlInfoEntry.setDescription(' The entry of the table hpnicfEponUniMulticastCtrlInfoTable. ')
hpnicfEponUniMultActVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 15, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfEponUniMultActVlan.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMultActVlan.setDescription(' The multicast vlan ID which is active. ')
hpnicfEponUniMultActAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 15, 1, 2), IpAddress())
if mibBuilder.loadTexts: hpnicfEponUniMultActAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMultActAddress.setDescription(' The multicast address which is active. ')
hpnicfEponUniMultActAccessRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2), ("preview", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniMultActAccessRule.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMultActAccessRule.setDescription(' deny - deny the multicast packet. permit - permit the multicast packet. preview - permit the multicast packet with conditions. ')
hpnicfEponUniMultActPreTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniMultActPreTimes.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMultActPreTimes.setDescription(' The number of multicast preview times which is active. ')
hpnicfEponUniMultActPreRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniMultActPreRemain.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMultActPreRemain.setDescription(' The remanent time slice of multicast preview which is active. ')
hpnicfEponUniMulticastIndexNextTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 16), )
if mibBuilder.loadTexts: hpnicfEponUniMulticastIndexNextTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastIndexNextTable.setDescription(' The next index table, which is used by hpnicfEponUniMulticastControlTable. ')
hpnicfEponUniMulticastIndexNextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniIndex"))
if mibBuilder.loadTexts: hpnicfEponUniMulticastIndexNextEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastIndexNextEntry.setDescription(' The entry of the table hpnicfEponUniMulticastIndexNextEntry. ')
hpnicfEponUniMulticastConfIndexNext = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfEponUniMulticastConfIndexNext.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniMulticastConfIndexNext.setDescription(' This object contains an appropriate value to be used for hpnicfEponUniMulticastIndex when creating rows in the hpnicfEponUniMulticastControlTable. ')
hpnicfEponUniTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 2))
hpnicfEponUniTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 2, 0))
hpnicfEponUniLinkUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 2, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniIndex"), ("HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniDescr"), ("HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniAdminStatus"))
if mibBuilder.loadTexts: hpnicfEponUniLinkUpTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniLinkUpTrap.setDescription(' A hpnicfEponUniLinkUpTrap notification is sent when the UNI up event is detected and the transmitting switch is turned on. ')
hpnicfEponUniLinkDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 2, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniIndex"), ("HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniDescr"), ("HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniAdminStatus"))
if mibBuilder.loadTexts: hpnicfEponUniLinkDownTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniLinkDownTrap.setDescription(' A hpnicfEponUniLinkDownTrap notification is sent when the UNI down event is detected and the transmitting switch is turned on. ')
hpnicfEponUniLoopBackDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 2, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniIndex"), ("HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniDescr"), ("HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniVlan"))
if mibBuilder.loadTexts: hpnicfEponUniLoopBackDetectedTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniLoopBackDetectedTrap.setDescription(' A hpnicfEponUniLoopBackDetectedTrap notification is sent when the UNI loopback event is detected. ')
hpnicfEponUniLoopBackRecoveredTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 42, 5, 2, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniIndex"), ("HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniDescr"), ("HPN-ICF-EPON-UNI-MIB", "hpnicfEponUniVlan"))
if mibBuilder.loadTexts: hpnicfEponUniLoopBackRecoveredTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfEponUniLoopBackRecoveredTrap.setDescription(' A hpnicfEponUniLoopBackRecoveredTrap notification is sent when the UNI loopback is recovered. ')
mibBuilder.exportSymbols("HPN-ICF-EPON-UNI-MIB", hpnicfEponUniMulticastCtrlInfoEntry=hpnicfEponUniMulticastCtrlInfoEntry, hpnicfEponUniLinkDownTrap=hpnicfEponUniLinkDownTrap, hpnicfEponUniMirrorOutboundPortList=hpnicfEponUniMirrorOutboundPortList, hpnicfEponUniVlanVPNStatus=hpnicfEponUniVlanVPNStatus, hpnicfEponUniMulticastIndexNextEntry=hpnicfEponUniMulticastIndexNextEntry, hpnicfEponUniLineRateStep=hpnicfEponUniLineRateStep, hpnicfEponUniSysMan=hpnicfEponUniSysMan, hpnicfEponUniLocalTechAbility=hpnicfEponUniLocalTechAbility, hpnicfEponUniMulticastConfIndexNext=hpnicfEponUniMulticastConfIndexNext, hpnicfEponUniOutStatsPkts=hpnicfEponUniOutStatsPkts, hpnicfEponUniPortIsolate=hpnicfEponUniPortIsolate, hpnicfEponUniAdvertisedTechAbility=hpnicfEponUniAdvertisedTechAbility, PYSNMP_MODULE_ID=hpnicfEponUni, hpnicfEponUniInTotalErrors=hpnicfEponUniInTotalErrors, hpnicfEponUniOutboundLineRate=hpnicfEponUniOutboundLineRate, hpnicfEponUniMirrorRowStatus=hpnicfEponUniMirrorRowStatus, hpnicfEponUniPortPolicyCir=hpnicfEponUniPortPolicyCir, hpnicfEponUniQosConfEntry=hpnicfEponUniQosConfEntry, hpnicfEponUni=hpnicfEponUni, hpnicfEponUniMulticastStripStatus=hpnicfEponUniMulticastStripStatus, hpnicfEponUniTrunkPvid=hpnicfEponUniTrunkPvid, hpnicfEponUniVLANTrunkAllowListLow=hpnicfEponUniVLANTrunkAllowListLow, hpnicfEponUniParaMan=hpnicfEponUniParaMan, hpnicfEponUniCountReset=hpnicfEponUniCountReset, hpnicfEponUniFlowControl=hpnicfEponUniFlowControl, hpnicfEponUniQosConfTable=hpnicfEponUniQosConfTable, hpnicfEponUniAccessVlan=hpnicfEponUniAccessVlan, hpnicfEponUniScalarGroup=hpnicfEponUniScalarGroup, hpnicfEponUniTrapPrefix=hpnicfEponUniTrapPrefix, hpnicfEponUniNumberOnOnu=hpnicfEponUniNumberOnOnu, hpnicfEponUniMulticastResetInterval=hpnicfEponUniMulticastResetInterval, hpnicfEponUniMirrorGroupID=hpnicfEponUniMirrorGroupID, hpnicfEponUniVCTCableStatus=hpnicfEponUniVCTCableStatus, hpnicfEponUniMulticastAddressList=hpnicfEponUniMulticastAddressList, hpnicfEponUniInterfaceType=hpnicfEponUniInterfaceType, hpnicfEponUniMirrorInboundPortList=hpnicfEponUniMirrorInboundPortList, hpnicfEponUniVlanConfiguration=hpnicfEponUniVlanConfiguration, hpnicfEponUniMonitorPort=hpnicfEponUniMonitorPort, hpnicfEponUniPortPolicyOutboundPir=hpnicfEponUniPortPolicyOutboundPir, hpnicfEponUniSysManEntry=hpnicfEponUniSysManEntry, hpnicfEponUniMulticastPreInterval=hpnicfEponUniMulticastPreInterval, hpnicfEponUniVCTInsertionLoss=hpnicfEponUniVCTInsertionLoss, hpnicfEponUniMulticastTable=hpnicfEponUniMulticastTable, hpnicfEponUniQosRuleRowStatus=hpnicfEponUniQosRuleRowStatus, hpnicfEponUniAutoNegotiation=hpnicfEponUniAutoNegotiation, hpnicfEponUniSysManTable=hpnicfEponUniSysManTable, hpnicfEponUniMulticastVlanList=hpnicfEponUniMulticastVlanList, hpnicfEponUniOutStatsUnicastPkts=hpnicfEponUniOutStatsUnicastPkts, hpnicfEponUniVCTCableLength=hpnicfEponUniVCTCableLength, hpnicfEponUniInPausePkts=hpnicfEponUniInPausePkts, hpnicfEponUniQosRuleTable=hpnicfEponUniQosRuleTable, hpnicfEponUniPortPolicyInboundCir=hpnicfEponUniPortPolicyInboundCir, hpnicfEponUniPortPolicyInboundBucketDepth=hpnicfEponUniPortPolicyInboundBucketDepth, hpnicfEponUniTechAbilityTable=hpnicfEponUniTechAbilityTable, hpnicfEponUniVCTPairSkew=hpnicfEponUniVCTPairSkew, hpnicfEponUniMultActPreRemain=hpnicfEponUniMultActPreRemain, hpnicfEponUniMirrorGroupIdNextTable=hpnicfEponUniMirrorGroupIdNextTable, hpnicfEponUniMultActVlan=hpnicfEponUniMultActVlan, hpnicfEponUniMacIndex=hpnicfEponUniMacIndex, hpnicfEponUniMulticastAccessRule=hpnicfEponUniMulticastAccessRule, hpnicfEponUniMulticastPreTimes=hpnicfEponUniMulticastPreTimes, hpnicfEponUniQosRuleOperator=hpnicfEponUniQosRuleOperator, hpnicfEponUniTrap=hpnicfEponUniTrap, hpnicfEponUniPortPolicyStatus=hpnicfEponUniPortPolicyStatus, hpnicfEponUniInStatsUnicastPkts=hpnicfEponUniInStatsUnicastPkts, hpnicfEponUniMulticastVlanIndex=hpnicfEponUniMulticastVlanIndex, hpnicfEponUniLoopBackRecoveredTrap=hpnicfEponUniLoopBackRecoveredTrap, hpnicfEponUniInStatsUndersizePkts=hpnicfEponUniInStatsUndersizePkts, hpnicfEponUniVCTReturnLoss=hpnicfEponUniVCTReturnLoss, hpnicfEponUniVCTImpedanceMismatch=hpnicfEponUniVCTImpedanceMismatch, hpnicfEponUniMulticastChannelLimit=hpnicfEponUniMulticastChannelLimit, hpnicfEponUniPortPolicyEntry=hpnicfEponUniPortPolicyEntry, hpnicfEponUniQosConfMappedQueue=hpnicfEponUniQosConfMappedQueue, hpnicfEponUniOutDelayExceededDiscards=hpnicfEponUniOutDelayExceededDiscards, hpnicfEponUniSpeed=hpnicfEponUniSpeed, hpnicfEponUniInErrorbyOther=hpnicfEponUniInErrorbyOther, hpnicfEponUniVlanType=hpnicfEponUniVlanType, hpnicfEponUniLinkUpTrap=hpnicfEponUniLinkUpTrap, hpnicfEponUniLinkStatus=hpnicfEponUniLinkStatus, hpnicfEponUniQosConfRowStatus=hpnicfEponUniQosConfRowStatus, hpnicfEponUniInStatsMulticastPkts=hpnicfEponUniInStatsMulticastPkts, hpnicfEponUniMirrorGroupTable=hpnicfEponUniMirrorGroupTable, hpnicfEponUniPriority=hpnicfEponUniPriority, hpnicfEponUniMirrorGroupIDNext=hpnicfEponUniMirrorGroupIDNext, hpnicfEponUniMulticastCtrlInfoTable=hpnicfEponUniMulticastCtrlInfoTable, hpnicfEponUniMdi=hpnicfEponUniMdi, hpnicfEponUniQosConfIndex=hpnicfEponUniQosConfIndex, hpnicfEponUniQosRuleMacAddress=hpnicfEponUniQosRuleMacAddress, hpnicfEponUniPortPolicyExtraBurst=hpnicfEponUniPortPolicyExtraBurst, hpnicfEponUniInStatsCRCAlignErrors=hpnicfEponUniInStatsCRCAlignErrors, hpnicfEponUniIgmpInfoTable=hpnicfEponUniIgmpInfoTable, hpnicfEponUniVCTNearendCrosstalk=hpnicfEponUniVCTNearendCrosstalk, hpnicfEponUniMulticastControlEntry=hpnicfEponUniMulticastControlEntry, hpnicfEponUniMirrorGroupEntry=hpnicfEponUniMirrorGroupEntry, hpnicfEponUniMulticastEntry=hpnicfEponUniMulticastEntry, hpnicfEponUniIgmpInfoEntry=hpnicfEponUniIgmpInfoEntry, hpnicfEponUniVlan=hpnicfEponUniVlan, hpnicfEponUniTechAbilityEntry=hpnicfEponUniTechAbilityEntry, hpnicfEponUniIndex=hpnicfEponUniIndex, hpnicfEponUniInStatsPkts=hpnicfEponUniInStatsPkts, hpnicfEponUniQosConfMarkedPriority=hpnicfEponUniQosConfMarkedPriority, hpnicfEponUniMulticastFastleave=hpnicfEponUniMulticastFastleave, hpnicfEponUniVCTPairSwap=hpnicfEponUniVCTPairSwap, hpnicfEponUniVitualCableTest=hpnicfEponUniVitualCableTest, hpnicfEponUniMultActPreTimes=hpnicfEponUniMultActPreTimes, hpnicfEponUniPortPolicyBucketDepth=hpnicfEponUniPortPolicyBucketDepth, hpnicfEponUniOutStatsMulticastPkts=hpnicfEponUniOutStatsMulticastPkts, hpnicfEponUniQosIndexNextTable=hpnicfEponUniQosIndexNextTable, hpnicfEponUniIgmpMacAddress=hpnicfEponUniIgmpMacAddress, hpnicfEponUniOutDroppedFrames=hpnicfEponUniOutDroppedFrames, hpnicfEponUniLineRateMax=hpnicfEponUniLineRateMax, hpnicfEponUniMulticastControlTable=hpnicfEponUniMulticastControlTable, hpnicfEponUniVLANTrunkAllowListHigh=hpnicfEponUniVLANTrunkAllowListHigh, hpnicfEponUniMirrorGroupIdNextEntry=hpnicfEponUniMirrorGroupIdNextEntry, hpnicfEponUniMulticastSourceIpList=hpnicfEponUniMulticastSourceIpList, hpnicfEponUniMulticastIndexNextTable=hpnicfEponUniMulticastIndexNextTable, hpnicfEponUniInboundLineRate=hpnicfEponUniInboundLineRate, hpnicfEponUniOutStatsPausePkts=hpnicfEponUniOutStatsPausePkts, hpnicfEponUniVCTPolaritySwap=hpnicfEponUniVCTPolaritySwap, hpnicfEponUniMulticastRowStatus=hpnicfEponUniMulticastRowStatus, hpnicfEponUniDuplex=hpnicfEponUniDuplex, hpnicfEponUniQosIndexNextEntry=hpnicfEponUniQosIndexNextEntry, hpnicfEponUniQosRuleSelector=hpnicfEponUniQosRuleSelector, hpnicfEponUniRestartAutoNeg=hpnicfEponUniRestartAutoNeg, hpnicfEponUniMulticastPreTimeSlice=hpnicfEponUniMulticastPreTimeSlice, hpnicfEponUniIgmpVlanId=hpnicfEponUniIgmpVlanId, hpnicfEponUniQosRuleValue=hpnicfEponUniQosRuleValue, hpnicfEponUniMultActAddress=hpnicfEponUniMultActAddress, hpnicfEponUniInStatsOversizePkts=hpnicfEponUniInStatsOversizePkts, hpnicfEponUniQosRuleIndex=hpnicfEponUniQosRuleIndex, hpnicfEponUniMulticastIndex=hpnicfEponUniMulticastIndex, hpnicfEponUniLoopBackDetectedTrap=hpnicfEponUniLoopBackDetectedTrap, hpnicfEponUniOutStatsBroadcastPkts=hpnicfEponUniOutStatsBroadcastPkts, hpnicfEponUniQosRuleEntry=hpnicfEponUniQosRuleEntry, hpnicfEponUniQosConfRuleIndexNext=hpnicfEponUniQosConfRuleIndexNext, hpnicfEponUniOutStatsCollisions=hpnicfEponUniOutStatsCollisions, hpnicfEponUniMultActAccessRule=hpnicfEponUniMultActAccessRule, hpnicfEponUniPortPolicyTable=hpnicfEponUniPortPolicyTable, hpnicfEponUniOutTotalErrors=hpnicfEponUniOutTotalErrors, hpnicfEponUniMulticastGroupNumber=hpnicfEponUniMulticastGroupNumber, hpnicfEponUniPortPolicyInboundExtraBurst=hpnicfEponUniPortPolicyInboundExtraBurst, hpnicfEponUniInStatsBroadcastPkts=hpnicfEponUniInStatsBroadcastPkts, hpnicfEponUniDescr=hpnicfEponUniDescr, hpnicfEponUniCountEntry=hpnicfEponUniCountEntry, hpnicfEponUniOutErrorbyOther=hpnicfEponUniOutErrorbyOther, hpnicfEponUniQosConfIndexNext=hpnicfEponUniQosConfIndexNext, hpnicfEponUniAdminStatus=hpnicfEponUniAdminStatus, hpnicfEponUniCountTable=hpnicfEponUniCountTable, hpnicfEponUniPortPolicyOutboundCir=hpnicfEponUniPortPolicyOutboundCir)
