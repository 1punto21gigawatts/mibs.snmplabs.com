#
# PySNMP MIB module JUNIPER-SIP-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-SIP-COMMON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:01:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
InetPortNumber, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber")
jnxVoip, = mibBuilder.importSymbols("JUNIPER-JS-SMI", "jnxVoip")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Unsigned32, IpAddress, Gauge32, ObjectIdentity, Bits, MibIdentifier, NotificationType, Counter32, TimeTicks, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "IpAddress", "Gauge32", "ObjectIdentity", "Bits", "MibIdentifier", "NotificationType", "Counter32", "TimeTicks", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxSipCommonMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1))
if mibBuilder.loadTexts: jnxSipCommonMIB.setLastUpdated('200902092000Z')
if mibBuilder.loadTexts: jnxSipCommonMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxSipCommonMIB.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxSipCommonMIB.setDescription("This is Juniper Networks' implementation of enterprise specific MIB for SIP. This module defines objects which may be common to all SIP entities.")
jnxSip = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2))
jnxSipCommonMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1))
jnxSipCommonCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 1), )
if mibBuilder.loadTexts: jnxSipCommonCfgTable.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgTable.setDescription('This table contains the common configuration objects applicable to all SIP entities.')
jnxSipCommonCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 1, 1), ).setIndexNames((0, "JUNIPER-SIP-COMMON-MIB", "jnxSipCfgApplName"))
if mibBuilder.loadTexts: jnxSipCommonCfgEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgEntry.setDescription('A row of common configuration. Each row represents objects for a particular SIP entity instance present in this system.')
jnxSipCfgApplName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: jnxSipCfgApplName.setStatus('current')
if mibBuilder.loadTexts: jnxSipCfgApplName.setDescription('The name of the network application which uniquely identifies the application to which this entry is applicable.')
jnxSipCommonCfgProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgProtocolVersion.setDescription("This object will reflect the version of SIP supported by this SIP entity. It will follow the same format as SIP version information contained in the SIP messages generated by this SIP entity. For example, entities supporting SIP version 2 will return 'SIP/2.0' as dictated by the standard.")
jnxSipCommonCfgServiceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgServiceOperStatus.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgServiceOperStatus.setDescription('This object contains the current operational state of the SIP application. unknown : The operational status cannot be determined for some reason. up : The application is operating normally, and is processing (receiving and possibly issuing) SIP requests and responses. down : The application is currently unable to process SIP messages.')
jnxSipCommonCfgServiceStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgServiceStartTime.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgServiceStartTime.setDescription('The value of sysUpTime at the time the SIP entity was last started. If started prior to the last re-initialization of the local network management subsystem, then this object contains a zero value.')
jnxSipCommonCfgServiceLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgServiceLastChange.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgServiceLastChange.setDescription('The value of sysUpTime at the time the SIP entity entered its current operational state. If the current state was entered prior to the last re-initialization of the local network management subsystem, then this object contains a zero value.')
jnxSipCommonCfgOrganization = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgOrganization.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgOrganization.setDescription('This object contains the organization name which the SIP entity inserts into Organization headers of SIP messages processed by this system. If the string is empty, no Organization header is to be generated.')
jnxSipCommonCfgMaxTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgMaxTransactions.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgMaxTransactions.setDescription("This object indicates the maximum number of simultaneous transactions per second that the SIP entity can manage. In general, the value of this object SHOULD reflect a level of transaction processing per second that is considered high enough to impact the system's CPU and/or memory resources to the point of deteriorating SIP call processing but not high enough to cause catastrophic system failure.")
jnxSipCommonCfgEntityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 1, 1, 8), Bits().clone(namedValues=NamedValues(("other", 0), ("userAgent", 1), ("proxyServer", 2), ("redirectServer", 3), ("registrarServer", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgEntityType.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgEntityType.setDescription('This object identifies the list of SIP entities this row is related to. It is defined as a bit map. Each bit represents a type of SIP entity. If a bit has value 1, the SIP entity represented by this row plays the role of this entity type. If a bit has value 0, the SIP entity represented by this row does not act as this entity type Combinations of bits can be set when the SIP entity plays multiple SIP roles.')
jnxSipCommonPortTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 2), )
if mibBuilder.loadTexts: jnxSipCommonPortTable.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonPortTable.setDescription('This table contains the list of ports that each SIP entity in this system is allowed to use. These ports can be advertised using the Contact header in a REGISTER request or response.')
jnxSipCommonPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 2, 1), ).setIndexNames((0, "JUNIPER-SIP-COMMON-MIB", "jnxSipPortApplName"), (0, "JUNIPER-SIP-COMMON-MIB", "jnxSipCommonPort"))
if mibBuilder.loadTexts: jnxSipCommonPortEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonPortEntry.setDescription('Specification of a particular port. Each row represents those objects for a particular SIP entity present in this system.')
jnxSipPortApplName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 2, 1, 1), DisplayString())
if mibBuilder.loadTexts: jnxSipPortApplName.setStatus('current')
if mibBuilder.loadTexts: jnxSipPortApplName.setDescription('The name of the network application which uniquely identifies the application to which this entry is applicable.')
jnxSipCommonPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 2, 1, 2), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: jnxSipCommonPort.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonPort.setDescription('This object reflects a particular port that can be used by the SIP application.')
jnxSipCommonPortTransportRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 2, 1, 3), Bits().clone(namedValues=NamedValues(("other", 0), ("udp", 1), ("tcp", 2), ("sctp", 3), ("tlsTcp", 4), ("tlsSctp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonPortTransportRcv.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonPortTransportRcv.setDescription('This object will specify the transport protocol the SIP entity will use to receive SIP messages. This object is a bit map. Each bit represents a transport protocol. If a bit has value 1, then that transport protocol is currently being used. If a bit has value 0, then that transport protocol is currently not being used.')
jnxSipCommonOptionTagTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 3), )
if mibBuilder.loadTexts: jnxSipCommonOptionTagTable.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonOptionTagTable.setDescription("This table contains a list of the SIP option tags (SIP extensions) that either required, supported, or unsupported by the SIP entity. These option tags are used in the Require, Proxy-Require, Supported and Unsupported header fields. Example: if a user agent client supports and requires the server to support reliability of provisional responses (IETF RFC 3262), this table contains a row with the option tag string '100rel' in jnxSipCommonOptionTag and the OCTET STRING value of '1010 0000' or '0xA0' in jnxSipCommonOptionTagHeaderField. If a server does not support the required feature (indicated in a Require header to a UAS, or in a Proxy-Require to a Proxy Server), the server returns a 420 Bad Extension listing the feature in an Unsupported header. Normally the list of such features supported by an entity is static (i.e. will not change over time).")
jnxSipCommonOptionTagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 3, 1), ).setIndexNames((0, "JUNIPER-SIP-COMMON-MIB", "jnxSipOptionTagApplName"), (0, "JUNIPER-SIP-COMMON-MIB", "jnxSipCommonOptionTagIndex"))
if mibBuilder.loadTexts: jnxSipCommonOptionTagEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonOptionTagEntry.setDescription('A particular SIP option tag (extension) supported or unsupported by the SIP entity, and which may be supported or required by a peer. Each row represents those objects for a particular SIP entity present in this system.')
jnxSipOptionTagApplName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 3, 1, 1), DisplayString())
if mibBuilder.loadTexts: jnxSipOptionTagApplName.setStatus('current')
if mibBuilder.loadTexts: jnxSipOptionTagApplName.setDescription('The name of the network application which uniquely identifies the application to which this entry is applicable.')
jnxSipCommonOptionTagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: jnxSipCommonOptionTagIndex.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonOptionTagIndex.setDescription('This object uniquely identifies a conceptual row in the table.')
jnxSipCommonOptionTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonOptionTag.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonOptionTag.setDescription('This object indicates the SIP option tag. The option tag names are registered with IANA and available at http://www.iana.org/.')
jnxSipCommonOptionTagHeaderField = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 3, 1, 4), Bits().clone(namedValues=NamedValues(("require", 0), ("proxyRequire", 1), ("supported", 2), ("unsupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonOptionTagHeaderField.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonOptionTagHeaderField.setDescription('This object indicates whether the SIP option tag is supported (Supported header), unsupported (Unsupported header), required (Require or Proxy-Require header) by the SIP entity. A SIP option tag may be both supported and required.')
jnxSipCommonMethodSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 4), )
if mibBuilder.loadTexts: jnxSipCommonMethodSupportedTable.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonMethodSupportedTable.setDescription('This table contains a list of methods supported by each SIP entity in this system (see the standard set of SIP methods in Section 7.1 of RFC 3261). Any additional methods that may be incorporated into the SIP protocol can be represented by this table without any requirement to update this MIB module. The table is informational in nature; conveying to the NMS capabilities of the managed system.')
jnxSipCommonMethodSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 4, 1), ).setIndexNames((0, "JUNIPER-SIP-COMMON-MIB", "jnxSipMethodSupportedApplName"), (0, "JUNIPER-SIP-COMMON-MIB", "jnxSipCommonMethodSupportedIndex"))
if mibBuilder.loadTexts: jnxSipCommonMethodSupportedEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonMethodSupportedEntry.setDescription('A particular method supported by the SIP entity. Each row represents those objects for a particular SIP entity present in this system.')
jnxSipMethodSupportedApplName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 4, 1, 1), DisplayString())
if mibBuilder.loadTexts: jnxSipMethodSupportedApplName.setStatus('current')
if mibBuilder.loadTexts: jnxSipMethodSupportedApplName.setDescription('The name of the network application which uniquely identifies the application to which this entry is applicable.')
jnxSipCommonMethodSupportedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: jnxSipCommonMethodSupportedIndex.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonMethodSupportedIndex.setDescription('This object uniquely identifies a conceptual row in the table for a specific SIP method.')
jnxSipCommonMethodSupportedName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonMethodSupportedName.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonMethodSupportedName.setDescription("This object reflects the supported method's name. The method name MUST be all upper case (e.g, 'INVITE').")
jnxSipCommonCfgTimerTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 5), )
if mibBuilder.loadTexts: jnxSipCommonCfgTimerTable.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgTimerTable.setDescription('This table contains timer configuration objects applicable to SIP user agent and SIP stateful Proxy Server entities.')
jnxSipCommonCfgTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 5, 1), ).setIndexNames((0, "JUNIPER-SIP-COMMON-MIB", "jnxSipCfgTimerApplName"))
if mibBuilder.loadTexts: jnxSipCommonCfgTimerEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgTimerEntry.setDescription('A row of timer configuration. Each row represents those objects for a particular SIP entity present in this system.')
jnxSipCfgTimerApplName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 5, 1, 1), DisplayString())
if mibBuilder.loadTexts: jnxSipCfgTimerApplName.setStatus('current')
if mibBuilder.loadTexts: jnxSipCfgTimerApplName.setDescription('The name of the network application which uniquely identifies the application to which this entry is applicable.')
jnxSipCommonCfgTimerA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(500)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgTimerA.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgTimerA.setDescription('This object reflects the initial value for the retransmit timer for the INVITE method. The retransmit timer doubles after each retransmission, ensuring an exponential backoff in network traffic. This object represents the initial time a SIP entity will wait to receive a provisional response to an INVITE before resending the INVITE request.')
jnxSipCommonCfgTimerB = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(32000, 300000)).clone(32000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgTimerB.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgTimerB.setDescription('This object reflects the maximum time a SIP entity will wait to receive a final response to an INVITE. The timer is started upon transmission of the initial INVITE request.')
jnxSipCommonCfgTimerC = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(180000, 300000)).clone(180000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgTimerC.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgTimerC.setDescription('This object reflects the maximum time a SIP Proxy Server will wait to receive a provisional response to an INVITE. The Timer C MUST be set for each client transaction when an INVITE request is proxied.')
jnxSipCommonCfgTimerD = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300000)).clone(32000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgTimerD.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgTimerD.setDescription("This object reflects the amount of time that the server transaction can remain in the 'Completed' state when unreliable transports are used. The default value MUST be equal to or greater than 32000 for UDP transport, and its value MUST be 0 for TCP/SCTP transport.")
jnxSipCommonCfgTimerE = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(500)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgTimerE.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgTimerE.setDescription("This object reflects the initial value for the retransmit timer for a non-INVITE method while in 'Trying' state. The retransmit timer doubles after each retransmission until it reaches T2 to ensure an exponential backoff in network traffic. This object represents the initial time a SIP entity will wait to receive a provisional response to the request before resending the non-INVITE request.")
jnxSipCommonCfgTimerF = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(32000, 300000)).clone(32000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgTimerF.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgTimerF.setDescription('This object reflects the maximum time a SIP entity will wait to receive a final response to a non-INVITE request. The timer is started upon transmission of the initial request.')
jnxSipCommonCfgTimerG = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 5, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(500)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgTimerG.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgTimerG.setDescription('This object reflects the initial value for the retransmit timer for final responses to INVITE requests. If timer G fires, the response is passed to the transport layer again for retransmission, and timer G is set to fire in MIN(2*T1, T2) seconds. From then on, when timer G fires, the response is passed to the transport again for transmission, and timer G is reset with a value that doubles, unless that value exceeds T2, in which case, it is reset with the value of T2. The default value MUST be T1 for UDP transport, and its value MUST be 0 for reliable transport like TCP/SCTP.')
jnxSipCommonCfgTimerH = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 5, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(32000, 300000)).clone(32000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgTimerH.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgTimerH.setDescription("This object reflects the maximum time a server will wait to receive an ACK before it abandons retransmitting the response. The timer is started upon entering the 'Completed' state.")
jnxSipCommonCfgTimerI = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 5, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(5000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgTimerI.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgTimerI.setDescription("This object reflects the maximum time a SIP entity will wait to receive additional ACK message retransmissions. The timer is started upon entering the 'Confirmed' state. The default value MUST be T4 for UDP transport and its value MUST be 0 for reliable transport like TCP/SCTP.")
jnxSipCommonCfgTimerJ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 5, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(32000, 300000)).clone(32000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgTimerJ.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgTimerJ.setDescription("This object reflects the maximum time a SIP server will wait to receive retransmissions of non-INVITE requests. The timer is started upon entering the 'Completed' state for non-INVITE transactions. When timer J fires, the server MUST transition to the 'Terminated' state.")
jnxSipCommonCfgTimerK = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 5, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(5000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgTimerK.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgTimerK.setDescription("This object reflects the maximum time a SIP client will wait to receive retransmissions of responses to non-INVITE requests. The timer is started upon entering the 'Completed' state for non-INVITE transactions. When timer K fires, the server MUST transition to the 'Terminated' state. The default value MUST be T4 for UDP transport, and its value MUST be 0 for reliable transport like TCP/SCTP.")
jnxSipCommonCfgTimerT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(200, 10000)).clone(500)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgTimerT1.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgTimerT1.setDescription('This object reflects the T1 timer for a SIP entity. T1 is an estimate of the round-trip time (RTT) between the client and server transactions.')
jnxSipCommonCfgTimerT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 5, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(200, 10000)).clone(4000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgTimerT2.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgTimerT2.setDescription("This object reflects the T2 timer for a SIP entity. T2 is the maximum retransmit interval for non-INVITE requests and INVITE responses. It's used in various parts of the protocol to reset other Timer* objects to this value.")
jnxSipCommonCfgTimerT4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 15, 2, 1, 1, 5, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(200, 10000)).clone(5000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSipCommonCfgTimerT4.setStatus('current')
if mibBuilder.loadTexts: jnxSipCommonCfgTimerT4.setDescription("This object reflects the T4 timer for a SIP entity. T4 is the maximum duration a message will remain in the network. It represents the amount of time the network will take to clear messages between client and server transactions. It's used in various parts of the protocol to reset other Timer* objects to this value.")
mibBuilder.exportSymbols("JUNIPER-SIP-COMMON-MIB", jnxSipCommonMethodSupportedTable=jnxSipCommonMethodSupportedTable, jnxSipCfgApplName=jnxSipCfgApplName, jnxSipCommonCfgTimerB=jnxSipCommonCfgTimerB, jnxSipCommonCfgTimerI=jnxSipCommonCfgTimerI, jnxSipCommonCfgEntityType=jnxSipCommonCfgEntityType, jnxSipPortApplName=jnxSipPortApplName, jnxSipCommonCfgTimerE=jnxSipCommonCfgTimerE, jnxSipCommonCfgTimerD=jnxSipCommonCfgTimerD, jnxSipCommonCfgTimerEntry=jnxSipCommonCfgTimerEntry, jnxSipCommonCfgTimerF=jnxSipCommonCfgTimerF, jnxSipCommonCfgTimerTable=jnxSipCommonCfgTimerTable, jnxSipCommonOptionTag=jnxSipCommonOptionTag, jnxSipCommonCfgTimerC=jnxSipCommonCfgTimerC, PYSNMP_MODULE_ID=jnxSipCommonMIB, jnxSipCommonMIB=jnxSipCommonMIB, jnxSipCommonCfgTimerH=jnxSipCommonCfgTimerH, jnxSipCommonPortEntry=jnxSipCommonPortEntry, jnxSipCommonCfgProtocolVersion=jnxSipCommonCfgProtocolVersion, jnxSipCommonCfgServiceOperStatus=jnxSipCommonCfgServiceOperStatus, jnxSipCommonCfgOrganization=jnxSipCommonCfgOrganization, jnxSipCommonCfgServiceLastChange=jnxSipCommonCfgServiceLastChange, jnxSipCommonCfgTimerG=jnxSipCommonCfgTimerG, jnxSipCommonMethodSupportedName=jnxSipCommonMethodSupportedName, jnxSipCfgTimerApplName=jnxSipCfgTimerApplName, jnxSipCommonCfgTimerJ=jnxSipCommonCfgTimerJ, jnxSipCommonCfgTimerT1=jnxSipCommonCfgTimerT1, jnxSipCommonPort=jnxSipCommonPort, jnxSipOptionTagApplName=jnxSipOptionTagApplName, jnxSipCommonCfgTable=jnxSipCommonCfgTable, jnxSipCommonPortTable=jnxSipCommonPortTable, jnxSipCommonOptionTagTable=jnxSipCommonOptionTagTable, jnxSipCommonMethodSupportedEntry=jnxSipCommonMethodSupportedEntry, jnxSipCommonMethodSupportedIndex=jnxSipCommonMethodSupportedIndex, jnxSipCommonPortTransportRcv=jnxSipCommonPortTransportRcv, jnxSipCommonOptionTagHeaderField=jnxSipCommonOptionTagHeaderField, jnxSipCommonCfgTimerT4=jnxSipCommonCfgTimerT4, jnxSipCommonCfgMaxTransactions=jnxSipCommonCfgMaxTransactions, jnxSipMethodSupportedApplName=jnxSipMethodSupportedApplName, jnxSipCommonCfgTimerA=jnxSipCommonCfgTimerA, jnxSipCommonCfgTimerK=jnxSipCommonCfgTimerK, jnxSipCommonCfgEntry=jnxSipCommonCfgEntry, jnxSipCommonCfgServiceStartTime=jnxSipCommonCfgServiceStartTime, jnxSipCommonCfgTimerT2=jnxSipCommonCfgTimerT2, jnxSipCommonMIBObjects=jnxSipCommonMIBObjects, jnxSip=jnxSip, jnxSipCommonOptionTagIndex=jnxSipCommonOptionTagIndex, jnxSipCommonOptionTagEntry=jnxSipCommonOptionTagEntry)
