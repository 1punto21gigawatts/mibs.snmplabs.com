#
# PySNMP MIB module RADIUSCLIENTEXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADIUSCLIENTEXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:44:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
radiusClientExt, = mibBuilder.importSymbols("APENT-MIB", "radiusClientExt")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, NotificationType, ObjectIdentity, Counter64, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Unsigned32, iso, Integer32, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "ObjectIdentity", "Counter64", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Unsigned32", "iso", "Integer32", "Bits", "IpAddress")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
radiusClientExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2467, 1, 12, 1))
if mibBuilder.loadTexts: radiusClientExtMIB.setLastUpdated('9707202000Z')
if mibBuilder.loadTexts: radiusClientExtMIB.setOrganization('ArrowPoint Communications Inc.')
if mibBuilder.loadTexts: radiusClientExtMIB.setContactInfo(' Steve Colby Postal: ArrowPoint Communications Inc. 50 Nagog Park Acton, Massachusetts 01720 Tel: +1 978-206-3000 option 1 E-Mail: support@arrowpoint.com')
if mibBuilder.loadTexts: radiusClientExtMIB.setDescription('This MIB module describes the ArrowPoint Communications extensions to the client side of the Remote Access Dialin User Service (RADIUS) authentication protocol.')
apRadiusClientExtInvalidServerAddresses = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 12, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtInvalidServerAddresses.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtInvalidServerAddresses.setDescription('The total number of RADIUS Access-Response packets received from unknown addresses since client start-up.')
apRadiusClientExtIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 12, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtIdentifier.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtIdentifier.setDescription('The NAS-Identifier of the RADIUS client.')
apRadiusClientExtDeadTimer = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 12, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadiusClientExtDeadTimer.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtDeadTimer.setDescription('This variable specifies the number of minutes to skip down or not responsing Radius Servers.')
apRadiusClientExtProbe = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadiusClientExtProbe.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtProbe.setDescription('This variable specifies whether the Radius Client will probe down or not responding Radius Servers with probe Access-Request packets to determine their availability.')
apRadiusClientExtRetransmitLimit = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 12, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadiusClientExtRetransmitLimit.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtRetransmitLimit.setDescription('This variable specifies the number of times an authentication or accounting request is resent to each radius server after a timeout.')
apRadiusClientExtTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 12, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadiusClientExtTimeout.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtTimeout.setDescription('This variable specifies the interval the Radius Client will wait for the Radius Server to reply to an Authentication or Accounting Request.')
apRadiusClientExtSourceIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 12, 8), IpAddress().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadiusClientExtSourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtSourceIpAddress.setDescription('This variable specifies the source IP Address of the interface used by the Radius Client.')
apRadiusClientExtServerTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9), )
if mibBuilder.loadTexts: apRadiusClientExtServerTable.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtServerTable.setDescription('The (conceptual) table listing the RADIUS servers with which the client shares a secret.')
apRadiusClientExtServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1), ).setIndexNames((0, "RADIUSCLIENTEXT-MIB", "apRadiusClientExtAddress"))
if mibBuilder.loadTexts: apRadiusClientExtServerEntry.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtServerEntry.setDescription('An entry (conceptual row) representing a RADIUS server with which the client shares a secret.')
apRadiusClientExtAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtAddress.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtAddress.setDescription('The IP address of the RADIUS server referred to in this table entry.')
apRadiusClientExtRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtRoundTripTime.setDescription('The total roundtrip time of the last packet sent between the client and the RADIUS server referred to in this table entry.')
apRadiusClientExtAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtAccessRequests.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtAccessRequests.setDescription('The total number of RADIUS Access-Request packets sent to this server since client start-up. This does not include retransmissions.')
apRadiusClientExtAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtAccessRetransmissions.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtAccessRetransmissions.setDescription('The total number of RADIUS Access-Request packets retransmitted to the same server since client start-up.')
apRadiusClientExtAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtAccessAccepts.setDescription('The total number of RADIUS Access-Accept packets received from this server since client start-up.')
apRadiusClientExtAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtAccessRejects.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtAccessRejects.setDescription('The total number of RADIUS Access-Reject packets received from this server since client start-up.')
apRadiusClientExtAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtAccessChallenges.setDescription('The total number of RADIUS Access-Challenge packets received from this server since client start-up.')
apRadiusClientExtMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtMalformedAccessResponses.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtMalformedAccessResponses.setDescription('The total number of malformed RADIUS Access-Response packets received from this server since client start-up. Bad authenticators are not included as malformed access responses.')
apRadiusClientExtAuthenticationBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtAuthenticationBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtAuthenticationBadAuthenticators.setDescription('The total number of RADIUS Access-Response packets containing invalid authenticators received from this server since client start-up.')
apRadiusClientExtAuthenticationPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtAuthenticationPendingRequests.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtAuthenticationPendingRequests.setDescription('The total number of RADIUS Access-Request packets destined for this server that have not yet timed out or received a response. This variable is incremented when an Access-Request is sent and decremented due to a timeout or retransmission.')
apRadiusClientExtAuthenticationTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtAuthenticationTimeouts.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtAuthenticationTimeouts.setDescription('The total number of authentication timeouts to this server since client startup. After a timeout the client may retry to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as a Request as well as a timeout.')
apRadiusClientExtAccountingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtAccountingRequests.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtAccountingRequests.setDescription('The total number of RADIUS Accounting-Request packets sent since client start-up. This does not include retransmissions.')
apRadiusClientExtAccountingRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtAccountingRetransmissions.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtAccountingRetransmissions.setDescription('The total number of RADIUS Accounting-Request packets retransmitted to the same server since client start-up. Retransmissions include retries where the Identifier and Acct-Delay have been updated.')
apRadiusClientExtAccountingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtAccountingResponses.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtAccountingResponses.setDescription('The total number of RADIUS Accounting-Response packets received from this server since client start-up.')
apRadiusClientExtMalformedAccountingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtMalformedAccountingResponses.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtMalformedAccountingResponses.setDescription('The total number of malformed RADIUS Accounting-Response packets received from this server since client start-up. Bad authenticators are not included as malformed access responses.')
apRadiusClientExtAccountingBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtAccountingBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtAccountingBadAuthenticators.setDescription('The total number of RADIUS Accounting-Response packets which contained invalid authenticators received from this server since client start-up.')
apRadiusClientExtAccountingPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtAccountingPendingRequests.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtAccountingPendingRequests.setDescription('The total number of RADIUS Accounting-Request packets sent to this server that have not yet timed out or received a response. This variable is incremented when an Accounting-Request is sent and decremented due to a timeout or retransmission.')
apRadiusClientExtAccountingTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtAccountingTimeouts.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtAccountingTimeouts.setDescription('The total number of accounting timeouts to this server since client startup. After a timeout the client may retry to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as an Accounting-Request as well as a timeout.')
apRadiusClientExtUnknownType = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 9, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRadiusClientExtUnknownType.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtUnknownType.setDescription('The total number of RADIUS packets of unknown type which were received from this server since client start-up.')
apRadiusClientExtTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 12, 10), )
if mibBuilder.loadTexts: apRadiusClientExtTable.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtTable.setDescription('The table listing the RADIUS servers with which the client shares a secret.')
apRadiusClientExtRadServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 12, 10, 1), ).setIndexNames((0, "RADIUSCLIENTEXT-MIB", "apRadiusClientExtRadServerIpAddress"))
if mibBuilder.loadTexts: apRadiusClientExtRadServerEntry.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtRadServerEntry.setDescription('The information regarding a single RADIUS server with which the client shares a secret.')
apRadiusClientExtRadServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 10, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apRadiusClientExtRadServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtRadServerIpAddress.setDescription('The Radius Server IP Address.')
apRadiusClientExtRadServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1645)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apRadiusClientExtRadServerAuthPort.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtRadServerAuthPort.setDescription('The UDP port number on the Radius Server which to send Radius Authentication packets.')
apRadiusClientExtRadServerAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1646)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apRadiusClientExtRadServerAcctPort.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtRadServerAcctPort.setDescription('The UDP port number on the Radius Server which to send Radius Accounting packets.')
apRadiusClientExtRadServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apRadiusClientExtRadServerSecret.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtRadServerSecret.setDescription('This is the Radius Secret which is shared between this Radius Client and the Radius Server.')
apRadiusClientExtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 12, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apRadiusClientExtStatus.setStatus('current')
if mibBuilder.loadTexts: apRadiusClientExtStatus.setDescription('This object is used to create and destroy a Radius Server instance.')
mibBuilder.exportSymbols("RADIUSCLIENTEXT-MIB", PYSNMP_MODULE_ID=radiusClientExtMIB, apRadiusClientExtProbe=apRadiusClientExtProbe, apRadiusClientExtAccountingPendingRequests=apRadiusClientExtAccountingPendingRequests, apRadiusClientExtUnknownType=apRadiusClientExtUnknownType, apRadiusClientExtRadServerSecret=apRadiusClientExtRadServerSecret, apRadiusClientExtAuthenticationBadAuthenticators=apRadiusClientExtAuthenticationBadAuthenticators, apRadiusClientExtStatus=apRadiusClientExtStatus, apRadiusClientExtSourceIpAddress=apRadiusClientExtSourceIpAddress, apRadiusClientExtAccountingResponses=apRadiusClientExtAccountingResponses, apRadiusClientExtAddress=apRadiusClientExtAddress, apRadiusClientExtRadServerAuthPort=apRadiusClientExtRadServerAuthPort, apRadiusClientExtRoundTripTime=apRadiusClientExtRoundTripTime, apRadiusClientExtAuthenticationPendingRequests=apRadiusClientExtAuthenticationPendingRequests, apRadiusClientExtAccessChallenges=apRadiusClientExtAccessChallenges, apRadiusClientExtRadServerIpAddress=apRadiusClientExtRadServerIpAddress, apRadiusClientExtInvalidServerAddresses=apRadiusClientExtInvalidServerAddresses, apRadiusClientExtAccessRetransmissions=apRadiusClientExtAccessRetransmissions, apRadiusClientExtAccessAccepts=apRadiusClientExtAccessAccepts, apRadiusClientExtRadServerAcctPort=apRadiusClientExtRadServerAcctPort, apRadiusClientExtDeadTimer=apRadiusClientExtDeadTimer, apRadiusClientExtMalformedAccessResponses=apRadiusClientExtMalformedAccessResponses, apRadiusClientExtAccountingRequests=apRadiusClientExtAccountingRequests, apRadiusClientExtAccountingBadAuthenticators=apRadiusClientExtAccountingBadAuthenticators, apRadiusClientExtAccessRejects=apRadiusClientExtAccessRejects, apRadiusClientExtRetransmitLimit=apRadiusClientExtRetransmitLimit, apRadiusClientExtMalformedAccountingResponses=apRadiusClientExtMalformedAccountingResponses, apRadiusClientExtAccessRequests=apRadiusClientExtAccessRequests, apRadiusClientExtServerTable=apRadiusClientExtServerTable, apRadiusClientExtAuthenticationTimeouts=apRadiusClientExtAuthenticationTimeouts, apRadiusClientExtServerEntry=apRadiusClientExtServerEntry, radiusClientExtMIB=radiusClientExtMIB, apRadiusClientExtRadServerEntry=apRadiusClientExtRadServerEntry, apRadiusClientExtAccountingRetransmissions=apRadiusClientExtAccountingRetransmissions, apRadiusClientExtAccountingTimeouts=apRadiusClientExtAccountingTimeouts, apRadiusClientExtIdentifier=apRadiusClientExtIdentifier, apRadiusClientExtTable=apRadiusClientExtTable, apRadiusClientExtTimeout=apRadiusClientExtTimeout)
