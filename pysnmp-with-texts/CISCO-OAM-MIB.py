#
# PySNMP MIB module CISCO-OAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-OAM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:08:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
OwnerString, = mibBuilder.importSymbols("RMON-MIB", "OwnerString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, TimeTicks, Counter32, Integer32, Bits, ObjectIdentity, IpAddress, NotificationType, iso, Counter64, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "TimeTicks", "Counter32", "Integer32", "Bits", "ObjectIdentity", "IpAddress", "NotificationType", "iso", "Counter64", "ModuleIdentity")
TimeStamp, TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
ciscoOamPingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 15))
ciscoOamPingMIB.setRevisions(('2006-02-17 00:00', '2003-06-27 00:00', '2003-04-04 00:00', '1996-05-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoOamPingMIB.setRevisionsDescriptions(('Removed the OwnerString TEXTUAL-CONVENTION and imported the same from RMON-MIB.', 'Add object to oamLoopbackPingTable: - oamLoopbackPingMinRttuSec, - oamLoopbackPingAvgRttuSec, - oamLoopbackPingMaxRttuSec.', "Add objects to oamLoopbackPingTable: - oamLoopbackPingExecTime, - oamLoopbackPingDir, - oamLoopbackPingOperStatus Add new table oamLoopbackSegEndPointTable for OAM segment endpoint provisioning. Usage of oamLoopbackSegEndPointTable: If the loopback ping test type (oamLoopbackPingType) is 'segment', the test requires the endpoint under test and the remote ping endpoint are both OAM segment loopback endpoints. The table oamLoopbackSegEndPointTable is used to provision an ATM connection endpoint to be an OAM segment endpoint. If the endpoints are already OAM segment endpoints, the provisioning of the table is not required.", 'Initial version of the MIB.',))
if mibBuilder.loadTexts: ciscoOamPingMIB.setLastUpdated('200602170000Z')
if mibBuilder.loadTexts: ciscoOamPingMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoOamPingMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-atm@cisco.com')
if mibBuilder.loadTexts: ciscoOamPingMIB.setDescription('A MIB module for invoking OAM loopback Ping on ATM connections.')
ciscoOamPingMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 15, 1))
class CiscoOAMPingDir(TextualConvention, Integer32):
    description = 'Direction in which the OAM segment cells are sent: forward : send OAM loopback cells in the direction form the originator towards the destination of the connection. backward : send OAM loopback cells in the direction towards the originator of the connection.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("forward", 1), ("backward", 2))

class CiscoOAMPingStatus(TextualConvention, Integer32):
    description = 'Defines possible test status. success(1) - The test has completed. timeOut(2) - The test has been failed because the test does not receive loopback cell response from remote endpoint and it times out. resourceNotAvailable(3) - The resources required by the test is not available, such as other application is testing on the same endpoint. aborted(4) - The test is aborted due to the removal of connection endpoint or failed to proceed. inProgress(5) - The endpoint is still in progress of testing and waiting for the response. noResponseData(6) - If the test receives response from the remote end but without any data. failToStart(7) - The test fails to kickoff (internal messaging timeout).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("success", 1), ("timeOut", 2), ("resourceNotAvailable", 3), ("aborted", 4), ("inProgress", 5), ("noResponseData", 6), ("failToStart", 7))

oamLoopbackPingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1), )
if mibBuilder.loadTexts: oamLoopbackPingTable.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingTable.setDescription('A table of OAM loopback request entries. (This table is similar to the CISCO-PING-MIB.)')
oamLoopbackPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1), ).setIndexNames((0, "CISCO-OAM-MIB", "oamLoopbackPingSerialNumber"))
if mibBuilder.loadTexts: oamLoopbackPingEntry.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingEntry.setDescription('A OAM loopback request entry. A management station wishing to create an entry should first generate a pseudo-random serial number to be used as the index to this sparse table. The NMS should then create the associated instance of the row status and row owner objects. It must also, either in the same or in successive PDUs, create the associated instances specifying the VPI and VCI values. It should also modify the default values for the other configuration objects if the defaults are not appropriate. Once the appropriate instance of all the configuration objects have been created, either by an explicit SNMP set request or by default, the row status should be set to active to initiate the request. Note that this entire procedure may be initiated via a single set request which specifies a row status of createAndGo as well as specifies valid values for the non-defaulted configuration objects. Once the OAM sequence has been activated, it cannot be stopped -- it will run until the configured number of cells have been sent. Once the sequence completes, the management station should retrieve the values of the status objects of interest, and should then delete the entry. In order to prevent old entries from clogging the table, entries will be aged out, but an entry will never be deleted within 5 minutes of completing.')
oamLoopbackPingSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: oamLoopbackPingSerialNumber.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingSerialNumber.setDescription('Object which identifies a unique entry in the oamLoopbackPingTable. A management station wishing to initiate a OAM-loopback operation should use a pseudo-random value for this object when creating or modifying an instance of an oamLoopbackPingEntry. The RowStatus semantics of the oamLoopbackPingEntryStatus object will prevent access conflicts.')
oamLoopbackPingInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oamLoopbackPingInterface.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingInterface.setDescription('The interface of the connection on which OAM loopbacks are to be sent. Once an instance of this object is created, its value can not be changed. The value specified for this object must equate to a value of ifIndex in the ifTable.')
oamLoopbackPingVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oamLoopbackPingVpi.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingVpi.setDescription('The VPI of the connection on which OAM loopbacks are to be sent. Once an instance of this object is created, its value can not be changed.')
oamLoopbackPingVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oamLoopbackPingVci.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingVci.setDescription('Either -1 or the VCI of the connection on which F5 OAM loopback cells are to be sent. If the value of this object is -1, then an F4 OAM loopback cells will be sent on the VPC indicated by oamLoopbackPingVpi. An instance of this object cannot be created until the associated instance of oamLoopbackPingVpi is created. Once an instance of this object is created, its value can not be changed.')
oamLoopbackPingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("segment", 1), ("end2end", 2))).clone('end2end')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oamLoopbackPingType.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingType.setDescription('The type of OAM loopback to be performed.')
oamLoopbackPingLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="FF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oamLoopbackPingLocation.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingLocation.setDescription("The value to be placed in the 'Loopback Location ID' field of the OAM loopback cell. If this value is less than 16 octets in length, then it will be appended with zero-valued octets to form the required 96-bit value. One possibility is to set this value to the IP-address of the node at which the OAM loopback is to occur. An instance of this object cannot be created until the associated instance of oamLoopbackPingVpi is created. Once an instance of this object is created, its value can not be changed.")
oamLoopbackPingLocationFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipAddress", 1), ("nsapPrefix", 2), ("fixed16byteValue", 3))).clone('ipAddress')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oamLoopbackPingLocationFlag.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingLocationFlag.setDescription('Specifies what kind of information is embedded into the oamLoopbackPingLocation string. This flag is ignored when oamLoopbackPingType is set to segment.')
oamLoopbackPingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oamLoopbackPingCount.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingCount.setDescription('Specifies the number of OAM loopback cells to send to the target in this sequence.')
oamLoopbackPingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oamLoopbackPingTimeout.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingTimeout.setDescription("Specifies the amount of time to wait for a response to a transmitted OAM loopback cells before declaring the OAM loopback cells as 'dropped.'")
oamLoopbackPingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oamLoopbackPingDelay.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingDelay.setDescription('Specifies the minimum amount of time to wait before sending the next OAM loopback cell in a sequence after receiving a response or declaring a timeout for a previous OAM cell. The actual delay may be greater due to internal task scheduling.')
oamLoopbackPingTrapOnCompletion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oamLoopbackPingTrapOnCompletion.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingTrapOnCompletion.setDescription('Specifies whether or not a oamLoopbackPingCompletion trap should be issued on completion of the sequence of OAM loopback cells. If such a trap is desired, it is the responsibility of the management entity to ensure that the SNMP administrative model is configured in such a way as to allow the trap to be delivered.')
oamLoopbackPingSentCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLoopbackPingSentCells.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingSentCells.setDescription('The number of OAM loopback cells that have been sent to the target in this sequence.')
oamLoopbackPingReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLoopbackPingReceivedCells.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingReceivedCells.setDescription('The number of OAM loopback cells that have been received from the target in this sequence.')
oamLoopbackPingMinRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLoopbackPingMinRtt.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingMinRtt.setDescription('The minimum round trip time of all the OAM loopback cells that have been sent in this sequence. This object will not be created until the first OAM loopback response in a sequence is received.')
oamLoopbackPingAvgRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLoopbackPingAvgRtt.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingAvgRtt.setDescription('The average round trip time of all the OAM loopback cells that have been sent in this sequence. This object will not be created until the first OAM loopback response in a sequence is received.')
oamLoopbackPingMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLoopbackPingMaxRtt.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingMaxRtt.setDescription('The maximum round trip time of all the OAM loopback cells that have been sent in this sequence. This object will not be created until the first OAM loopback response in a sequence is received.')
oamLoopbackPingCompleted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLoopbackPingCompleted.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingCompleted.setDescription('Set to true when all the OAM loopback cells in this sequence have been either responded to or timed out.')
oamLoopbackPingEntryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 18), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oamLoopbackPingEntryOwner.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingEntryOwner.setDescription('The entity that configured this entry.')
oamLoopbackPingEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oamLoopbackPingEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingEntryStatus.setDescription('The status of this table entry. Once the entry status is set to active, the associate entry cannot be modified until the sequence completes (oamLoopbackPingCompleted is true).')
oamLoopbackPingDir = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 20), CiscoOAMPingDir()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oamLoopbackPingDir.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingDir.setDescription('This object set the traveling direction of the OAM segment loopback cells which are injected to the connection endpoint.')
oamLoopbackPingOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 21), CiscoOAMPingStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLoopbackPingOperStatus.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingOperStatus.setDescription('This object indicates the ping test status.')
oamLoopbackPingExecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 22), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLoopbackPingExecTime.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingExecTime.setDescription('The value of sysUpTime when the MIB object is created which triggers the loppback ping test.')
oamLoopbackPingMinRttuSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLoopbackPingMinRttuSec.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingMinRttuSec.setDescription('The minimum round trip time of all the OAM loopback cells that have been sent in this sequence. This object will not be created until the first OAM loopback response in a sequence is received. Notes: this object is the same as oamLoopbackPingMinRtt but the unit is in microseconds instead of milliseconds.')
oamLoopbackPingAvgRttuSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLoopbackPingAvgRttuSec.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingAvgRttuSec.setDescription('The average round trip time of all the OAM loopback cells that have been sent in this sequence. This object will not be created until the first OAM loopback response in a sequence is received. Notes: this object is the same as oamLoopbackPingAvgRtt but the unit is in microseconds instead of milliseconds.')
oamLoopbackPingMaxRttuSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: oamLoopbackPingMaxRttuSec.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingMaxRttuSec.setDescription('The maximum round trip time of all the OAM loopback cells that have been sent in this sequence. This object will not be created until the first OAM loopback response in a sequence is received. Notes: this object is the same as oamLoopbackPingMaxRtt but the unit is in microseconds instead of milliseconds.')
oamLoopbackSegEndPointTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 2), )
if mibBuilder.loadTexts: oamLoopbackSegEndPointTable.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackSegEndPointTable.setDescription("This table contains a list of OAM loopback segment endpoints. When the endpoint is an OAM segment endpoint, it is able to send ATM segment loop back cells or loop back the cells to the originator which initiates the OAM loop back ping test. The provisioning of this table is required if the loopback ping test type (oamLoopbackPingType) in oamLoopbackPingTable is 'segment', and the endpoint under test or the remote ping endpoint is not OAM segment loopback endpoints.")
oamLoopbackSegEndPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-OAM-MIB", "oamLoopSegVpi"), (0, "CISCO-OAM-MIB", "oamLoopSegVci"))
if mibBuilder.loadTexts: oamLoopbackSegEndPointEntry.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackSegEndPointEntry.setDescription('An entry in the segment endpoint table.')
oamLoopSegVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: oamLoopSegVpi.setStatus('current')
if mibBuilder.loadTexts: oamLoopSegVpi.setDescription('The VPI value of a VP or VC connection.')
oamLoopSegVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: oamLoopSegVci.setStatus('current')
if mibBuilder.loadTexts: oamLoopSegVci.setDescription('The VCI value of VC connection. For a VPC connection, the VCI value is 0.')
oamLoopSegRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 15, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oamLoopSegRowStatus.setStatus('current')
if mibBuilder.loadTexts: oamLoopSegRowStatus.setDescription("To create, delete an OAM segment entry. Only the value 'active', 'createAndGo', and 'destroy' are supported. If the connection endpoint does not exist, the entry could not be created. If the associated ATM connection is de-routed or deleted, the connection endpoint is gone. The associated row entry will be removed automatically.")
oamLoopbackPingMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 15, 2))
oamLoopbackPingMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 15, 2, 0))
oamLoopbackPingCompletionTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 15, 2, 0, 1)).setObjects(("CISCO-OAM-MIB", "oamLoopbackPingCompleted"))
if mibBuilder.loadTexts: oamLoopbackPingCompletionTrap.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackPingCompletionTrap.setDescription('A oamLoopbackPingCompleted trap is sent at the completion of a sequence of OAM loopback cells if such a trap was requested when the sequence was initiated.')
ciscoOamPingMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 15, 3))
ciscoOamPingMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 15, 3, 1))
ciscoOamPingMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 15, 3, 2))
ciscoOamPingMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 15, 3, 1, 1)).setObjects(("CISCO-OAM-MIB", "ciscoOamPingMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOamPingMIBCompliance = ciscoOamPingMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoOamPingMIBCompliance.setDescription('The compliance statement for the Cisco OAM MIB.')
ciscoOamPingMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 15, 3, 1, 2)).setObjects(("CISCO-OAM-MIB", "ciscoOamPing2MIBGroup"), ("CISCO-OAM-MIB", "oamLoopbackNotificationsGroup"), ("CISCO-OAM-MIB", "ciscoOamPingSegEndPointGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOamPingMIBCompliance2 = ciscoOamPingMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoOamPingMIBCompliance2.setDescription('The compliance statement for the Cisco OAM MIB.')
ciscoOamPingMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 15, 3, 1, 3)).setObjects(("CISCO-OAM-MIB", "ciscoOamPingMIBGroupRev3"), ("CISCO-OAM-MIB", "oamLoopbackNotificationsGroup"), ("CISCO-OAM-MIB", "ciscoOamPingSegEndPointGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOamPingMIBCompliance3 = ciscoOamPingMIBCompliance3.setStatus('current')
if mibBuilder.loadTexts: ciscoOamPingMIBCompliance3.setDescription('The compliance statement for the Cisco OAM MIB.')
ciscoOamPingMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 15, 3, 2, 1)).setObjects(("CISCO-OAM-MIB", "oamLoopbackPingInterface"), ("CISCO-OAM-MIB", "oamLoopbackPingVpi"), ("CISCO-OAM-MIB", "oamLoopbackPingVci"), ("CISCO-OAM-MIB", "oamLoopbackPingCount"), ("CISCO-OAM-MIB", "oamLoopbackPingType"), ("CISCO-OAM-MIB", "oamLoopbackPingLocation"), ("CISCO-OAM-MIB", "oamLoopbackPingLocationFlag"), ("CISCO-OAM-MIB", "oamLoopbackPingTimeout"), ("CISCO-OAM-MIB", "oamLoopbackPingDelay"), ("CISCO-OAM-MIB", "oamLoopbackPingTrapOnCompletion"), ("CISCO-OAM-MIB", "oamLoopbackPingSentCells"), ("CISCO-OAM-MIB", "oamLoopbackPingReceivedCells"), ("CISCO-OAM-MIB", "oamLoopbackPingMinRtt"), ("CISCO-OAM-MIB", "oamLoopbackPingAvgRtt"), ("CISCO-OAM-MIB", "oamLoopbackPingMaxRtt"), ("CISCO-OAM-MIB", "oamLoopbackPingCompleted"), ("CISCO-OAM-MIB", "oamLoopbackPingEntryOwner"), ("CISCO-OAM-MIB", "oamLoopbackPingEntryStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOamPingMIBGroup = ciscoOamPingMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoOamPingMIBGroup.setDescription('A collection of objects providing the ability to invoke the sending of OAM loopback cells.')
ciscoOamPing2MIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 15, 3, 2, 2)).setObjects(("CISCO-OAM-MIB", "oamLoopbackPingInterface"), ("CISCO-OAM-MIB", "oamLoopbackPingVpi"), ("CISCO-OAM-MIB", "oamLoopbackPingVci"), ("CISCO-OAM-MIB", "oamLoopbackPingCount"), ("CISCO-OAM-MIB", "oamLoopbackPingType"), ("CISCO-OAM-MIB", "oamLoopbackPingLocation"), ("CISCO-OAM-MIB", "oamLoopbackPingLocationFlag"), ("CISCO-OAM-MIB", "oamLoopbackPingTimeout"), ("CISCO-OAM-MIB", "oamLoopbackPingDelay"), ("CISCO-OAM-MIB", "oamLoopbackPingTrapOnCompletion"), ("CISCO-OAM-MIB", "oamLoopbackPingSentCells"), ("CISCO-OAM-MIB", "oamLoopbackPingReceivedCells"), ("CISCO-OAM-MIB", "oamLoopbackPingMinRtt"), ("CISCO-OAM-MIB", "oamLoopbackPingAvgRtt"), ("CISCO-OAM-MIB", "oamLoopbackPingMaxRtt"), ("CISCO-OAM-MIB", "oamLoopbackPingCompleted"), ("CISCO-OAM-MIB", "oamLoopbackPingEntryOwner"), ("CISCO-OAM-MIB", "oamLoopbackPingEntryStatus"), ("CISCO-OAM-MIB", "oamLoopbackPingDir"), ("CISCO-OAM-MIB", "oamLoopbackPingOperStatus"), ("CISCO-OAM-MIB", "oamLoopbackPingExecTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOamPing2MIBGroup = ciscoOamPing2MIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoOamPing2MIBGroup.setDescription('A collection of objects providing the ability to invoke the sending of OAM loopback cells.')
ciscoOamPingSegEndPointGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 15, 3, 2, 3)).setObjects(("CISCO-OAM-MIB", "oamLoopSegRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOamPingSegEndPointGroup = ciscoOamPingSegEndPointGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoOamPingSegEndPointGroup.setDescription('A collection of objects providing the ability to provision ATM connection endpoints to be OAM segment loopback endpoint.')
oamLoopbackNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 15, 3, 2, 4)).setObjects(("CISCO-OAM-MIB", "oamLoopbackPingCompletionTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oamLoopbackNotificationsGroup = oamLoopbackNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: oamLoopbackNotificationsGroup.setDescription('A collection of notifications for OAM loopback ping test.')
ciscoOamPingMIBGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 15, 3, 2, 5)).setObjects(("CISCO-OAM-MIB", "oamLoopbackPingInterface"), ("CISCO-OAM-MIB", "oamLoopbackPingVpi"), ("CISCO-OAM-MIB", "oamLoopbackPingVci"), ("CISCO-OAM-MIB", "oamLoopbackPingCount"), ("CISCO-OAM-MIB", "oamLoopbackPingType"), ("CISCO-OAM-MIB", "oamLoopbackPingLocation"), ("CISCO-OAM-MIB", "oamLoopbackPingLocationFlag"), ("CISCO-OAM-MIB", "oamLoopbackPingTimeout"), ("CISCO-OAM-MIB", "oamLoopbackPingDelay"), ("CISCO-OAM-MIB", "oamLoopbackPingTrapOnCompletion"), ("CISCO-OAM-MIB", "oamLoopbackPingSentCells"), ("CISCO-OAM-MIB", "oamLoopbackPingReceivedCells"), ("CISCO-OAM-MIB", "oamLoopbackPingMinRtt"), ("CISCO-OAM-MIB", "oamLoopbackPingAvgRtt"), ("CISCO-OAM-MIB", "oamLoopbackPingMaxRtt"), ("CISCO-OAM-MIB", "oamLoopbackPingCompleted"), ("CISCO-OAM-MIB", "oamLoopbackPingEntryOwner"), ("CISCO-OAM-MIB", "oamLoopbackPingEntryStatus"), ("CISCO-OAM-MIB", "oamLoopbackPingDir"), ("CISCO-OAM-MIB", "oamLoopbackPingOperStatus"), ("CISCO-OAM-MIB", "oamLoopbackPingExecTime"), ("CISCO-OAM-MIB", "oamLoopbackPingAvgRttuSec"), ("CISCO-OAM-MIB", "oamLoopbackPingMinRttuSec"), ("CISCO-OAM-MIB", "oamLoopbackPingMaxRttuSec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOamPingMIBGroupRev3 = ciscoOamPingMIBGroupRev3.setStatus('current')
if mibBuilder.loadTexts: ciscoOamPingMIBGroupRev3.setDescription('A collection of objects providing the ability to invoke the sending of OAM loopback cells.')
mibBuilder.exportSymbols("CISCO-OAM-MIB", ciscoOamPingMIBCompliances=ciscoOamPingMIBCompliances, CiscoOAMPingDir=CiscoOAMPingDir, oamLoopbackPingMIBTrapPrefix=oamLoopbackPingMIBTrapPrefix, oamLoopbackPingTrapOnCompletion=oamLoopbackPingTrapOnCompletion, ciscoOamPingMIBGroup=ciscoOamPingMIBGroup, oamLoopbackPingType=oamLoopbackPingType, oamLoopbackPingTimeout=oamLoopbackPingTimeout, ciscoOamPingMIBGroups=ciscoOamPingMIBGroups, ciscoOamPingMIBCompliance2=ciscoOamPingMIBCompliance2, ciscoOamPingMIB=ciscoOamPingMIB, oamLoopbackPingVci=oamLoopbackPingVci, oamLoopbackPingMIBTraps=oamLoopbackPingMIBTraps, oamLoopbackSegEndPointTable=oamLoopbackSegEndPointTable, ciscoOamPingMIBConformance=ciscoOamPingMIBConformance, oamLoopbackPingSentCells=oamLoopbackPingSentCells, oamLoopbackPingTable=oamLoopbackPingTable, ciscoOamPingMIBCompliance3=ciscoOamPingMIBCompliance3, oamLoopbackPingEntryOwner=oamLoopbackPingEntryOwner, ciscoOamPing2MIBGroup=ciscoOamPing2MIBGroup, ciscoOamPingMIBCompliance=ciscoOamPingMIBCompliance, oamLoopbackPingEntry=oamLoopbackPingEntry, oamLoopbackSegEndPointEntry=oamLoopbackSegEndPointEntry, oamLoopbackPingCount=oamLoopbackPingCount, oamLoopbackNotificationsGroup=oamLoopbackNotificationsGroup, PYSNMP_MODULE_ID=ciscoOamPingMIB, oamLoopbackPingSerialNumber=oamLoopbackPingSerialNumber, oamLoopSegVci=oamLoopSegVci, oamLoopSegRowStatus=oamLoopSegRowStatus, oamLoopbackPingDir=oamLoopbackPingDir, oamLoopbackPingExecTime=oamLoopbackPingExecTime, oamLoopbackPingVpi=oamLoopbackPingVpi, oamLoopSegVpi=oamLoopSegVpi, oamLoopbackPingLocationFlag=oamLoopbackPingLocationFlag, ciscoOamPingSegEndPointGroup=ciscoOamPingSegEndPointGroup, oamLoopbackPingMinRttuSec=oamLoopbackPingMinRttuSec, oamLoopbackPingEntryStatus=oamLoopbackPingEntryStatus, oamLoopbackPingDelay=oamLoopbackPingDelay, oamLoopbackPingInterface=oamLoopbackPingInterface, ciscoOamPingMIBGroupRev3=ciscoOamPingMIBGroupRev3, ciscoOamPingMIBObjects=ciscoOamPingMIBObjects, oamLoopbackPingOperStatus=oamLoopbackPingOperStatus, oamLoopbackPingCompleted=oamLoopbackPingCompleted, oamLoopbackPingAvgRtt=oamLoopbackPingAvgRtt, oamLoopbackPingReceivedCells=oamLoopbackPingReceivedCells, oamLoopbackPingLocation=oamLoopbackPingLocation, oamLoopbackPingMinRtt=oamLoopbackPingMinRtt, oamLoopbackPingAvgRttuSec=oamLoopbackPingAvgRttuSec, oamLoopbackPingCompletionTrap=oamLoopbackPingCompletionTrap, oamLoopbackPingMaxRttuSec=oamLoopbackPingMaxRttuSec, CiscoOAMPingStatus=CiscoOAMPingStatus, oamLoopbackPingMaxRtt=oamLoopbackPingMaxRtt)
