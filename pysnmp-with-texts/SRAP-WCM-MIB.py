#
# PySNMP MIB module SRAP-WCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SRAP-WCM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:10:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
a3Com, = mibBuilder.importSymbols("A3Com-products-MIB", "a3Com")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
iso, IpAddress, Counter64, Integer32, ModuleIdentity, Gauge32, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, TimeTicks, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "Counter64", "Integer32", "ModuleIdentity", "Gauge32", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "TimeTicks", "MibIdentifier", "Counter32")
DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress")
srAPModules, srAPWCM = mibBuilder.importSymbols("SRAP-GLOBAL-REG", "srAPModules", "srAPWCM")
srAPWCMMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 35, 1, 1, 5))
if mibBuilder.loadTexts: srAPWCMMIBModule.setLastUpdated('9905260000Z')
if mibBuilder.loadTexts: srAPWCMMIBModule.setOrganization('3Com')
if mibBuilder.loadTexts: srAPWCMMIBModule.setContactInfo(' Name: Yuli Hou Mail Stop: 4240 Address: 5400 Bayfront Plaza Zip: CA 95052 City: Santa Clara, Country: USA Phone: +001-408-326-1191 Fax: +001-408-326-6555 e-mail: Yuli_Hou@3com.com')
if mibBuilder.loadTexts: srAPWCMMIBModule.setDescription('The 3COM Wireless LAN Products Web Configuration Management MIB Module.')
wcmMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1))
wcmConf = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1))
apConfigMgmtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 1))
apPerformMgmtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 2))
apFaultMgmtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 3))
apSecurityMgmtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 4))
apEventGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 5))
wcmObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2))
apConfigMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1))
apManufactureInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1))
apSystemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2))
apSNMPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3))
apRFConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4))
apPerformMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2))
apRFStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1))
apEtherItfStat = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 2))
apRFItfStat = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 3))
apTrafficMatrix = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 4))
apFaultMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3))
apSecurityMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4))
wcmEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 3))
wcmEventsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 3, 0))
apModelnumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apModelnumber.setStatus('current')
if mibBuilder.loadTexts: apModelnumber.setDescription('The Model Number of the ACCESS Point device.')
apSerialnumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSerialnumber.setStatus('current')
if mibBuilder.loadTexts: apSerialnumber.setDescription('The Serial Number of the ACCESS Point system.')
apMyMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMyMacAddr.setStatus('current')
if mibBuilder.loadTexts: apMyMacAddr.setDescription('The MAC address of the ACCESS Point.')
apFirmwareVer = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFirmwareVer.setStatus('current')
if mibBuilder.loadTexts: apFirmwareVer.setDescription('The current version of the ACCESS Point firmware.')
apWebUiVer = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWebUiVer.setStatus('current')
if mibBuilder.loadTexts: apWebUiVer.setDescription('The current version of the ACCESS Point WEB Configration System.')
apMfgDate = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMfgDate.setStatus('current')
if mibBuilder.loadTexts: apMfgDate.setDescription('The Date of this ACCESS Point was manufactured.')
apProductName = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProductName.setStatus('current')
if mibBuilder.loadTexts: apProductName.setDescription('The Product Name of this ACCESS Point.')
apMfgName = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMfgName.setStatus('current')
if mibBuilder.loadTexts: apMfgName.setDescription('The Manufacture Name of this ACCESS Point.')
apHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apHardwareRev.setStatus('current')
if mibBuilder.loadTexts: apHardwareRev.setDescription('The Hardware Revision of this ACCESS Point.')
apDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDeviceName.setStatus('current')
if mibBuilder.loadTexts: apDeviceName.setDescription('An ASCII string to identify the Device Name of this ACCESS Point (up to 255 characters).')
apDeviceLoc = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDeviceLoc.setStatus('current')
if mibBuilder.loadTexts: apDeviceLoc.setDescription('An ASCII string to identify the Location of this ACCESS Point (up to 255 characters).')
apHelpFilePath = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHelpFilePath.setStatus('current')
if mibBuilder.loadTexts: apHelpFilePath.setDescription('An ASCII string to identify the Location of this ACCESS Point (up to 255 characters).')
apMyIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMyIPAddr.setStatus('current')
if mibBuilder.loadTexts: apMyIPAddr.setDescription('The IP address for the Access Point. It can be set when apStaticIPAddrEnable is set to is enabled.')
apSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSubnetMask.setStatus('current')
if mibBuilder.loadTexts: apSubnetMask.setDescription('The subnet mask for the Access Point. It can be set when apStaticIPAddrEnable is set to enabled.')
apGatewayIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apGatewayIPAddr.setStatus('current')
if mibBuilder.loadTexts: apGatewayIPAddr.setDescription('The IP address of the gateway for the Access Point.')
apAdditionalGatewaysTableLength = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAdditionalGatewaysTableLength.setStatus('current')
if mibBuilder.loadTexts: apAdditionalGatewaysTableLength.setDescription('The maximum number of entries in the Additional Gateways Table.')
apAdditionalGatewaysTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 8), )
if mibBuilder.loadTexts: apAdditionalGatewaysTable.setStatus('current')
if mibBuilder.loadTexts: apAdditionalGatewaysTable.setDescription('A table of information for additional Gateways. The current number of entries is 4(that mean aditional gateway is 3).')
apAdditionalGatewaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 8, 1), ).setIndexNames((0, "SRAP-WCM-MIB", "additionalGatewaysIndex"))
if mibBuilder.loadTexts: apAdditionalGatewaysEntry.setStatus('current')
if mibBuilder.loadTexts: apAdditionalGatewaysEntry.setDescription('An entry in the table of information for additional gateways for this ACCESS Point. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
additionalGatewaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: additionalGatewaysIndex.setStatus('current')
if mibBuilder.loadTexts: additionalGatewaysIndex.setDescription('Specific Gateway information Table index. Range (1..3).')
apAdditionalGatewaysIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAdditionalGatewaysIPAddr.setStatus('current')
if mibBuilder.loadTexts: apAdditionalGatewaysIPAddr.setDescription('The IP address of the Gateway used for this Access Point.')
apDHCPEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDHCPEnable.setStatus('current')
if mibBuilder.loadTexts: apDHCPEnable.setDescription('Enables/Disables Wireless DHCP mode for the Access Point. Default is disabled(2).')
apStaticIPAddrEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apStaticIPAddrEnable.setStatus('current')
if mibBuilder.loadTexts: apStaticIPAddrEnable.setDescription("Enables/Disables Static IP of ACCESS Point . Default is disabled(2). Before issuing this command, set 'apMyIPAddr', 'apSubnetMask', and 'apGatewayIPAddr' to the proper values.")
apSNMPRequests = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSNMPRequests.setStatus('current')
if mibBuilder.loadTexts: apSNMPRequests.setDescription('Indicates the number of SNMP requests to this SNMP Agent.')
apSNMPTraps = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSNMPTraps.setStatus('current')
if mibBuilder.loadTexts: apSNMPTraps.setDescription('Indicates the number of Traps that were generated by this SNMP Agent.')
apAllTrapsEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAllTrapsEnable.setStatus('current')
if mibBuilder.loadTexts: apAllTrapsEnable.setDescription('Enables/Disables all SNMP traps. Default is enabled(1).')
apColdBootTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("allTrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apColdBootTrapEnable.setStatus('current')
if mibBuilder.loadTexts: apColdBootTrapEnable.setDescription('Enables/Disables ACCESS Point Cold Boot trap. Default is allTrapHosts(4). This is a generic-trap and the trap code is 0. When not disabled the trap could be directed to TrapHost1, TrapHost2 or all TrapHosts. The apAllTrapsEnable mib variable should be enabled for this trap to be issued.')
apAuthenFailureTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("allTrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthenFailureTrapEnable.setStatus('current')
if mibBuilder.loadTexts: apAuthenFailureTrapEnable.setDescription('Enables/Disables authentication failure trap. Default is allTrapHosts(4). This is a generic-trap and the trap code is 4. When not disabled the trap could be directed to TrapHost1, TrapHost2 or all TrapHosts. The apAllTrapsEnable mib variable should be enabled for this trap to be issued.')
apRFTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("allTrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRFTrapEnable.setStatus('current')
if mibBuilder.loadTexts: apRFTrapEnable.setDescription('Enables/Disables ACCESS Point RF driver startup trap. Default is allTrapHosts(4). This is an a3com enterprise-specific trap. When not disabled the trap could be directed to TrapHost1, TrapHost2 or all TrapHosts. The apAllTrapsEnable mib variable should be enabled for this trap to be issued.')
apWarmBootTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("allTrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWarmBootTrapEnable.setStatus('current')
if mibBuilder.loadTexts: apWarmBootTrapEnable.setDescription('Enables/Disables Warm Boot trap. Default is allTrapHosts(4). This is a generic-trap and the trap code is 0. When not disabled the trap could be directed to TrapHost1, TrapHost2 or all TrapHosts. The apAllTrapsEnable mib variable should be enabled for this trap to be issued.')
apWCMaxAssocTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("allTrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWCMaxAssocTrapEnable.setStatus('current')
if mibBuilder.loadTexts: apWCMaxAssocTrapEnable.setDescription('Enables/Disables apWCMaxAssoc Trap. Default is allTrapHosts(4). When not disabled the trap could be directed to TrapHost1, TrapHost2 or all TrapHosts. The apAllTrapsEnable mib variable should be enabled for this trap to be issued.')
apThresholdAssociatedEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("allTrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apThresholdAssociatedEnable.setStatus('current')
if mibBuilder.loadTexts: apThresholdAssociatedEnable.setDescription('Enables/Disables apThresholdAssociated Trap. Default is allTrapHosts(4). When not disabled the trap could be directed to TrapHost1, TrapHost2 or all TrapHosts. The apAllTrapsEnable mib variable should be enabled for this trap to be issued.')
dslSecurityViolationEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("trapHost1", 2), ("trapHost2", 3), ("allTrapHosts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslSecurityViolationEnable.setStatus('current')
if mibBuilder.loadTexts: dslSecurityViolationEnable.setDescription('Enables/Disables dslSecurityViolation Trap. Default is allTrapHosts(4). When not disabled the trap could be directed to TrapHost1, TrapHost2 or all TrapHosts. The apAllTrapsEnable MIB variable should be enabled for this trap to be issued.')
apWlanServiceArea = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWlanServiceArea.setStatus('current')
if mibBuilder.loadTexts: apWlanServiceArea.setDescription('The WLAN Service Area of the ACCESS Point.')
apCountryName = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCountryName.setStatus('current')
if mibBuilder.loadTexts: apCountryName.setDescription('The country for which the ACCESS Point radio is configured. It is set at the factory and may not be altered.')
apWEPAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("openSystem", 1), ("wep40bShareKey", 2), ("wep128bShareKey", 3), ("wep128bpasswordsessionKey", 4), ("wepEAPMD5Authenticationwithnoencryption", 5), ("wepEAPMD5Authenticationwith40bsharedkey", 6), ("wepEAPMD5Authenticationwith128bsharedkey", 7), ("wepEAPMD5Authenticationwith128bpasswordsessionkey", 8), ("wepEAPTLSAuthenticationwith40bsessionkey", 9), ("wepEAPTLSAuthenticationwith128bsessionkey", 10), ("wepSerialAuthenticationwith40bsessionkey", 11), ("wepSerialAuthenticationwith128bsessionkey", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWEPAlgorithm.setStatus('current')
if mibBuilder.loadTexts: apWEPAlgorithm.setDescription('This attribute is a set of all the shared key WEP algorithms supported by the STAs. The following are the default values and the associated algorithm. Value = 1: open system Value = 2: 40 bit Key Value = 3: 128 bit Key IMPORTANT NOTE: The 128 bit WEP key ENcryption is currently restricted by U.S. laws.')
apShortPreamble = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apShortPreamble.setStatus('current')
if mibBuilder.loadTexts: apShortPreamble.setDescription('This attribute is a set to enable short preamble for compatibility within the 802.11 community. Setting it to enabled shall result in performance enhancement. Default is disabled.')
apMaxWCTrigger = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apMaxWCTrigger.setStatus('current')
if mibBuilder.loadTexts: apMaxWCTrigger.setDescription('Indicates the trigger point for sending apWCMaxAssocTrap trap. Range (1..255) The default value is 255.')
apRadioAutoSense = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioAutoSense.setStatus('current')
if mibBuilder.loadTexts: apRadioAutoSense.setDescription('This attribute is a set to enable Radio Auto Sense. Default is enabled.')
apRadioChannel = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioChannel.setStatus('current')
if mibBuilder.loadTexts: apRadioChannel.setDescription('This attribute is Radio Channel. This attribute can be written when apRadioAutoSense is disabled.')
apHighPerformance = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHighPerformance.setStatus('current')
if mibBuilder.loadTexts: apHighPerformance.setDescription('This attribute is a set to enable Radio High Performance. Default is disabled.')
apTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("medium", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTransmitPower.setStatus('current')
if mibBuilder.loadTexts: apTransmitPower.setDescription('This attribute is a set the transmit power from 1-100 micro watts.')
apRadioAntenna = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabledoneantenna", 1), ("bothantennaon", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRadioAntenna.setStatus('current')
if mibBuilder.loadTexts: apRadioAntenna.setDescription('This attribute is a set the section of radio antenna.')
thresholdAssociated = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thresholdAssociated.setStatus('current')
if mibBuilder.loadTexts: thresholdAssociated.setDescription('This attribute is a set the threshold of Associated Wireless Client. The default is 200.')
apDataRateMgmt = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDataRateMgmt.setStatus('current')
if mibBuilder.loadTexts: apDataRateMgmt.setDescription('This attribute is automatically or manually set the best data rate .')
apDataRate5 = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("optional", 1), ("required", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDataRate5.setStatus('current')
if mibBuilder.loadTexts: apDataRate5.setDescription('This attribute is a set the data rate to 5.5 Mb/sec .')
apDataRate11 = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 1, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("optional", 1), ("required", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDataRate11.setStatus('current')
if mibBuilder.loadTexts: apDataRate11.setDescription('This attribute is a set the data rate to 11.0 Mb/sec .')
rfTxUcastFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxUcastFrms.setStatus('current')
if mibBuilder.loadTexts: rfTxUcastFrms.setDescription(' The number of Unicast frames successfully transmitted.')
rfRxUcastFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxUcastFrms.setStatus('current')
if mibBuilder.loadTexts: rfRxUcastFrms.setDescription(' The number of Unicast frames successfully received ')
rfTxBcastFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxBcastFrms.setStatus('current')
if mibBuilder.loadTexts: rfTxBcastFrms.setDescription(' The number of Broadcast frames transmitted ')
rfRxBcastFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxBcastFrms.setStatus('current')
if mibBuilder.loadTexts: rfRxBcastFrms.setDescription(' The number of Broadcast frames received.')
rfTxMcastFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxMcastFrms.setStatus('current')
if mibBuilder.loadTexts: rfTxMcastFrms.setDescription(' The number of Multicast frames transmitted.')
rfRxMcastFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxMcastFrms.setStatus('current')
if mibBuilder.loadTexts: rfRxMcastFrms.setDescription(' The number of Multicast frames received.')
rfTxEncryptFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxEncryptFrms.setStatus('current')
if mibBuilder.loadTexts: rfTxEncryptFrms.setDescription(' The number of Encrypted frames transmitted.')
rfRxEncryptFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxEncryptFrms.setStatus('current')
if mibBuilder.loadTexts: rfRxEncryptFrms.setDescription(' The number of Encrypted frames received.')
rfTxFragFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxFragFrms.setStatus('current')
if mibBuilder.loadTexts: rfTxFragFrms.setDescription(' The number of frames fragments transmitted.')
rfRxFragFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxFragFrms.setStatus('current')
if mibBuilder.loadTexts: rfRxFragFrms.setDescription(' The number of frames fragments received.')
rfTxBeacons = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxBeacons.setStatus('current')
if mibBuilder.loadTexts: rfTxBeacons.setDescription(' The number of Beacon frames transmitted.')
rfRxBeacons = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxBeacons.setStatus('current')
if mibBuilder.loadTexts: rfRxBeacons.setDescription(' The number of Beacon frames received.')
rfTxACK = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxACK.setStatus('current')
if mibBuilder.loadTexts: rfTxACK.setDescription('The number of ACK frames transmitted in response to successfully received frames.')
rfRxACK = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxACK.setStatus('current')
if mibBuilder.loadTexts: rfRxACK.setDescription(' The number of frames transmitted that had their corresponding ACK frames successfully received frames.')
rfTxRTS = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxRTS.setStatus('current')
if mibBuilder.loadTexts: rfTxRTS.setDescription(' The number of RTS frames that were successfully transmitted.')
rfRxRTS = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxRTS.setStatus('current')
if mibBuilder.loadTexts: rfRxRTS.setDescription(' The number of RTS received frames.')
rfCTSFailures = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfCTSFailures.setStatus('current')
if mibBuilder.loadTexts: rfCTSFailures.setDescription(' The number of frames for which no CTS frames was received in response to a RTS frames being sent.')
rfRxCTS = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxCTS.setStatus('current')
if mibBuilder.loadTexts: rfRxCTS.setDescription(' The number of CTS frames received in response to a RTS.')
rfTxACKFailures = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxACKFailures.setStatus('current')
if mibBuilder.loadTexts: rfTxACKFailures.setDescription(' The number of frames transmitted that did not have their corresponding ACK packets successfully received.')
rfTxRetrys = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxRetrys.setStatus('current')
if mibBuilder.loadTexts: rfTxRetrys.setDescription(' The number of frames that were retransmitted.')
rfFCSErrors = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfFCSErrors.setStatus('current')
if mibBuilder.loadTexts: rfFCSErrors.setDescription(' The number of frames received with checksum error.')
rfRxDuplicateFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxDuplicateFrms.setStatus('current')
if mibBuilder.loadTexts: rfRxDuplicateFrms.setDescription(' The number of duplicate frames received.')
rfWEPUndecryptFrms = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfWEPUndecryptFrms.setStatus('current')
if mibBuilder.loadTexts: rfWEPUndecryptFrms.setDescription(" The number of frames received with the WEP sub-field of the Frame Control field set to one and the WEPOn value for the key mapped to the TA's MAC address indicates that the frame should not have been encrypted or that frame is discarded due to the receiving STA not implementing the privacy option.")
rfWEPICVErrors = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfWEPICVErrors.setStatus('current')
if mibBuilder.loadTexts: rfWEPICVErrors.setDescription(' The number of frames received with the WEP sub-field of the Frame Control field set to one and the value of the ICV as received in the frame does not match the ICV value that is calculated for the contents of the received frame.')
apEtherPacketsIns = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEtherPacketsIns.setStatus('current')
if mibBuilder.loadTexts: apEtherPacketsIns.setDescription('Indicates the number of good packets received on the Ethernet interface.')
apEtherPacketsOuts = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEtherPacketsOuts.setStatus('current')
if mibBuilder.loadTexts: apEtherPacketsOuts.setDescription('Indicates the number of packets successfully transmitted on the Ethernet interface.')
apEtherOctetsIns = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEtherOctetsIns.setStatus('current')
if mibBuilder.loadTexts: apEtherOctetsIns.setDescription('Indicates the number of good bytes received on the Ethernet interface.')
apEtherOctetsOuts = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEtherOctetsOuts.setStatus('current')
if mibBuilder.loadTexts: apEtherOctetsOuts.setDescription('Indicates the number of bytes successfully transmitted on the Ethernet interface.')
apEtherPktsInPerSec = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEtherPktsInPerSec.setStatus('current')
if mibBuilder.loadTexts: apEtherPktsInPerSec.setDescription('Indicates the number of good packets per second received on the Ethernet Interface.')
apEtherPktsOutPerSec = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEtherPktsOutPerSec.setStatus('current')
if mibBuilder.loadTexts: apEtherPktsOutPerSec.setDescription('Indicates the number of packets per second successfully transmitted on the Ethernet interface.')
apEtherOctInPerSec = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEtherOctInPerSec.setStatus('current')
if mibBuilder.loadTexts: apEtherOctInPerSec.setDescription('Indicates the number of good bytes per second received on the Ethernet Interface.')
apEtherOctOutPerSec = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 2, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEtherOctOutPerSec.setStatus('current')
if mibBuilder.loadTexts: apEtherOctOutPerSec.setDescription('Indicates the number of bytes per second successfully transmitted on the Ethernet interface.')
apRFFrmsIns = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFFrmsIns.setStatus('current')
if mibBuilder.loadTexts: apRFFrmsIns.setDescription('Indicates the number of good packets received on the RF interface.')
apRFFrmsOuts = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFFrmsOuts.setStatus('current')
if mibBuilder.loadTexts: apRFFrmsOuts.setDescription('Indicates the number of packets successfully transmitted on the RF interface.')
apRFOctetsIns = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFOctetsIns.setStatus('current')
if mibBuilder.loadTexts: apRFOctetsIns.setDescription('Indicates the number of good bytes received on the RF interface.')
apRFOctetsOuts = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFOctetsOuts.setStatus('current')
if mibBuilder.loadTexts: apRFOctetsOuts.setDescription('Indicates the number of bytes successfully transmitted on the RF interface.')
apRFFrmsInPerSec = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 3, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFFrmsInPerSec.setStatus('current')
if mibBuilder.loadTexts: apRFFrmsInPerSec.setDescription('Indicates the number of good packets per second received on the RF Interface.')
apRFFrmsOutPerSec = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 3, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFFrmsOutPerSec.setStatus('current')
if mibBuilder.loadTexts: apRFFrmsOutPerSec.setDescription('Indicates the number of packets per second successfully transmitted on the RF interface.')
apRFOctInPerSec = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 3, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFOctInPerSec.setStatus('current')
if mibBuilder.loadTexts: apRFOctInPerSec.setDescription('Indicates the number of good bytes per second received on the RF Interface.')
apRFOctOutPerSec = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 3, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFOctOutPerSec.setStatus('current')
if mibBuilder.loadTexts: apRFOctOutPerSec.setDescription('Indicates the number of bytes per second successfully transmitted on the RF interface.')
apEnetsNPktsToEnets = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnetsNPktsToEnets.setStatus('current')
if mibBuilder.loadTexts: apEnetsNPktsToEnets.setDescription('Indicates the number of packets sent from the Ethernet Interface the Ethernet Interface. Must be 0')
apRFNPktsToEnets = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFNPktsToEnets.setStatus('current')
if mibBuilder.loadTexts: apRFNPktsToEnets.setDescription('Indicates the number of packets sent from the RF Interface to the Ethernet Interface.')
apEnetsNPktsToRF = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnetsNPktsToRF.setStatus('current')
if mibBuilder.loadTexts: apEnetsNPktsToRF.setDescription('Indicates the number of packets sent from Ethernet Interface to the RF Interface. ')
apRFNPktsToRF = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apRFNPktsToRF.setStatus('current')
if mibBuilder.loadTexts: apRFNPktsToRF.setDescription('Indicates the number of packets sent from the RF Interfaceto the RF Interface. Must be 0')
apDSPerFreqStatTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 5), )
if mibBuilder.loadTexts: apDSPerFreqStatTable.setStatus('current')
if mibBuilder.loadTexts: apDSPerFreqStatTable.setDescription('A table of Radio Per Frequency statistics, which is based on the historical frequency records used by this Access Point. The current number of entries is 78.')
apDSPerFreqStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 5, 1), ).setIndexNames((0, "SRAP-WCM-MIB", "rfDSFrequency"))
if mibBuilder.loadTexts: apDSPerFreqStatEntry.setStatus('current')
if mibBuilder.loadTexts: apDSPerFreqStatEntry.setDescription('An entry in the table of Radio per frequency statistics. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
rfDSFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDSFrequency.setStatus('current')
if mibBuilder.loadTexts: rfDSFrequency.setDescription('Radio Frequency channel number.')
rfDSPerFqPktsSents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDSPerFqPktsSents.setStatus('current')
if mibBuilder.loadTexts: rfDSPerFqPktsSents.setDescription('Counter for the packets sent per frequency.')
rfDSPerFqPktsRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDSPerFqPktsRcvds.setStatus('current')
if mibBuilder.loadTexts: rfDSPerFqPktsRcvds.setDescription('Counter for the packets received per frequency.')
rfDSPerFqRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDSPerFqRetries.setStatus('current')
if mibBuilder.loadTexts: rfDSPerFqRetries.setDescription('Counter for the retries per frequency.')
apUpdateTemplateStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("downloadSuccessful", 1), ("downloadUnknownError", 2), ("downloadTimeout", 3), ("badFileName", 4), ("badMacAddrForRestoreFile", 5), ("incorrectFileImage", 6), ("tftpFileNotFound", 7), ("tftpAccessViolation", 8), ("tftpDiskfullOrAllocationExceeded", 9), ("tftpIllegalTFTPoperation", 10), ("tftpUnknownTransferID", 11), ("tftpFileAlreadyExists", 12), ("tftpNoSuchUser", 13), ("fileDownloadOrUpload", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apUpdateTemplateStatus.setStatus('current')
if mibBuilder.loadTexts: apUpdateTemplateStatus.setDescription('Reports the Firmware/HTML file download and update status.')
apBackupFileName = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apBackupFileName.setStatus('current')
if mibBuilder.loadTexts: apBackupFileName.setDescription('The name of the file to be backuped to the TFTP Server. (Including path name and total up to 255 characters.)')
apTemplateOperation = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("startBackup", 1), ("startTemplate", 2), ("startRestore", 3), ("uploadingData", 4), ("downloadingData", 5), ("notDownloading", 6), ("idle", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTemplateOperation.setStatus('current')
if mibBuilder.loadTexts: apTemplateOperation.setDescription("startBackup(1) - Backup the AP configuration through TFTP server. The AP backup configuration, named as apBackupFileName, will be saved in the default location of TFTP server. Before issuing this command, set 'apBackupFileName', and 'apTFTPServer' to the proper values. startTemplate(2) - This allows the network management platform to restore the template configuration of a AP, from one of it's previous backups. It is expected that common Parameters of AP in the backup configuration file, named as apRestoreFileName, will be restored to the AP. Before issuing this command, set 'apRestoreFileName', and 'apTFTPServer' to the proper values. startRestore(3) - This allows the network management platform to restore the full configuration of a AP, from one of it's previous backups. It is expected that full of the data in the backup configuration file, named as apRestoreFileName, will be restored to the AP. Before issuing this command, set 'apRestoreFileName', and 'apTFTPServer' to the proper values.")
apRestoreFileName = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRestoreFileName.setStatus('current')
if mibBuilder.loadTexts: apRestoreFileName.setDescription('The name of the file to be restored to the AP. (Including path name and total up to 255 characters.)')
apSyslogDstIpAddressTableLength = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSyslogDstIpAddressTableLength.setStatus('current')
if mibBuilder.loadTexts: apSyslogDstIpAddressTableLength.setDescription('The maximum number of entries in the Syslog Destination Ip Address Table.')
apSyslogDstIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 6), )
if mibBuilder.loadTexts: apSyslogDstIpAddressTable.setStatus('current')
if mibBuilder.loadTexts: apSyslogDstIpAddressTable.setDescription('A table of Syslog Destination Ip Address. The current number of entries is 2.')
apSyslogDstIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 6, 1), ).setIndexNames((0, "SRAP-WCM-MIB", "apSyslogDstIpAddressIndex"))
if mibBuilder.loadTexts: apSyslogDstIpAddressEntry.setStatus('current')
if mibBuilder.loadTexts: apSyslogDstIpAddressEntry.setDescription('An entry in the table of Syslog Destination Ip Address for this ACCESS Point. A row in this table cannot be created or deleted by SNMP operations on columns of the table.')
apSyslogDstIpAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: apSyslogDstIpAddressIndex.setStatus('current')
if mibBuilder.loadTexts: apSyslogDstIpAddressIndex.setDescription('Specific Syslog Destination Ip Address Table index. Range (1..2).')
apSyslogDstIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogDstIpAddress.setStatus('current')
if mibBuilder.loadTexts: apSyslogDstIpAddress.setDescription('The IP address of Syslog Destination used for this Access Point.')
apSyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogEnable.setStatus('current')
if mibBuilder.loadTexts: apSyslogEnable.setDescription('Enables/Disables syslog for the Access Point. Default is disabled(2).')
apACLViolations = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apACLViolations.setStatus('current')
if mibBuilder.loadTexts: apACLViolations.setDescription('Indicates the number of Access Control violations occurred.')
apEAPSupport = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("eap", 2), ("serialauth", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apEAPSupport.setStatus('current')
if mibBuilder.loadTexts: apEAPSupport.setDescription('The AP supprt the Extensive Authentication Protocol is enabled or disabled. Default is enabled.')
apAuthServerSupportNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAuthServerSupportNumber.setStatus('current')
if mibBuilder.loadTexts: apAuthServerSupportNumber.setDescription('The maximum number of entries in the Authenicator Server Table.')
apKeyServerSupportNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apKeyServerSupportNumber.setStatus('current')
if mibBuilder.loadTexts: apKeyServerSupportNumber.setDescription('The maximum number of entries in the Key Server Table.')
apAccountServerSupportNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccountServerSupportNumber.setStatus('current')
if mibBuilder.loadTexts: apAccountServerSupportNumber.setDescription('The maximum number of entries in the Accounting Server Table.')
apAuthServerTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 6), )
if mibBuilder.loadTexts: apAuthServerTable.setStatus('current')
if mibBuilder.loadTexts: apAuthServerTable.setDescription('A table of information for Authenticator Servers. Now support number of entries is 2.')
apAuthServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 6, 1), ).setIndexNames((0, "SRAP-WCM-MIB", "apAuthServerIndex"))
if mibBuilder.loadTexts: apAuthServerEntry.setStatus('current')
if mibBuilder.loadTexts: apAuthServerEntry.setDescription('An entry in the table of information for Authenticator Servers for this Access Point.')
apAuthServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apAuthServerIndex.setStatus('current')
if mibBuilder.loadTexts: apAuthServerIndex.setDescription('A number uniquely identifying each Authenticator server.')
apAuthServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthServerIPAddr.setStatus('current')
if mibBuilder.loadTexts: apAuthServerIPAddr.setDescription('The IP address of the Authenticator server referred to in this table entry.')
apAuthServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: apAuthServerPortNumber.setDescription('The UDP port the client is using to send requests to this Authenticator server.')
apAuthSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthSharedSecret.setStatus('mandatory')
if mibBuilder.loadTexts: apAuthSharedSecret.setDescription('This values indicates the shared key used by the authentication server.')
apAuthServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthServerRetransmit.setStatus('current')
if mibBuilder.loadTexts: apAuthServerRetransmit.setDescription('The number of times the access point tries to authenticate logon access.')
apAuthServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAuthServerTimeout.setStatus('current')
if mibBuilder.loadTexts: apAuthServerTimeout.setDescription('The number of seconds the access point waits for a reply from the RADIUS server before it resends the request')
apKeyServerTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 7), )
if mibBuilder.loadTexts: apKeyServerTable.setStatus('current')
if mibBuilder.loadTexts: apKeyServerTable.setDescription('A table of information for Key Servers. Now support number of entries is 2.')
apKeyServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 7, 1), ).setIndexNames((0, "SRAP-WCM-MIB", "apKeyServerIndex"))
if mibBuilder.loadTexts: apKeyServerEntry.setStatus('current')
if mibBuilder.loadTexts: apKeyServerEntry.setDescription('An entry in the table of information for Key Servers for this Access Point.')
apKeyServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apKeyServerIndex.setStatus('current')
if mibBuilder.loadTexts: apKeyServerIndex.setDescription('A number uniquely identifying each Key server.')
apKeyServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apKeyServerIPAddr.setStatus('current')
if mibBuilder.loadTexts: apKeyServerIPAddr.setDescription('The IP address of the Key server referred to in this table entry.')
apKeyServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apKeyServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: apKeyServerPortNumber.setDescription('The UDP port the client is using to send requests to this server.')
apAccountServerTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 8), )
if mibBuilder.loadTexts: apAccountServerTable.setStatus('current')
if mibBuilder.loadTexts: apAccountServerTable.setDescription('A table of information for Account Servers. Now support number of entries is 1.')
apAccountServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 8, 1), ).setIndexNames((0, "SRAP-WCM-MIB", "apAccountServerIndex"))
if mibBuilder.loadTexts: apAccountServerEntry.setStatus('current')
if mibBuilder.loadTexts: apAccountServerEntry.setDescription('An entry in the table of information for Account Servers for this Access Point.')
apAccountServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apAccountServerIndex.setStatus('current')
if mibBuilder.loadTexts: apAccountServerIndex.setDescription('A number uniquely identifying each Account server.')
apAccountServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAccountServerIPAddr.setStatus('current')
if mibBuilder.loadTexts: apAccountServerIPAddr.setDescription('The IP address of the Account server referred to in this table entry.')
apAccountServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAccountServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: apAccountServerPortNumber.setDescription('The UDP port the client is using to send requests to this server.')
apAccountServerSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAccountServerSharedSecret.setStatus('mandatory')
if mibBuilder.loadTexts: apAccountServerSharedSecret.setDescription('This values indicates the shared key used by the accounting server.')
apAccountServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAccountServerRetransmit.setStatus('current')
if mibBuilder.loadTexts: apAccountServerRetransmit.setDescription('The number of times the access point tries to accounting logon access.')
apAccountServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAccountServerTimeout.setStatus('current')
if mibBuilder.loadTexts: apAccountServerTimeout.setDescription('The number of seconds the access point waits for a reply from the RADIUS accounting server before it resends the request')
apFastReKeying = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFastReKeying.setStatus('current')
if mibBuilder.loadTexts: apFastReKeying.setDescription('The AP supprt the Fast-rekeying is enabled or disabled. Default is disabled.')
apTFTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTFTPServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: apTFTPServerPortNumber.setDescription('The TFTP Server port.')
apTFTPRetries = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTFTPRetries.setStatus('current')
if mibBuilder.loadTexts: apTFTPRetries.setDescription('The maximum retries number of tftp client in SRAPEE')
apTFTPTimeOutInterval = MibScalar((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTFTPTimeOutInterval.setStatus('current')
if mibBuilder.loadTexts: apTFTPTimeOutInterval.setDescription('The maximum time out interval of tftp client in SRAPEE')
apEncryptionTable = MibTable((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 13), )
if mibBuilder.loadTexts: apEncryptionTable.setStatus('current')
if mibBuilder.loadTexts: apEncryptionTable.setDescription('Conceptual table for Encryption setting of device')
apEncryptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: apEncryptionEntry.setStatus('current')
if mibBuilder.loadTexts: apEncryptionEntry.setDescription('An Entry (conceptual row) in the Encryption Table ifIndex - Each IEEE 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex.')
apEncryptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("wep64b", 2), ("wep128b", 3), ("wep152b", 4), ("tkipWPAPSK", 5), ("tkipWPAEnterprise", 6), ("aesWPAPSK", 7), ("aesWPAEnterprise", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apEncryptionMode.setStatus('current')
if mibBuilder.loadTexts: apEncryptionMode.setDescription('The encryption mode that each IEEE 802.11 Interface(apEncryptionMode.ifIndex) is using. Value: 1 = No Encryption 2 = 64 bit WEP 3 = 128 bit WEP 4 = 152 bit WEP 5 = TKIP using WPA-PSK 6 = TKIP using WPA-Enterprise 7 = AES using WPA-PSK 8 = AES using WPA-Enterprise')
apWPAPSKPassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWPAPSKPassPhrase.setStatus('current')
if mibBuilder.loadTexts: apWPAPSKPassPhrase.setDescription('A WPA Pre-Share Key Pass Phrase.')
apWEPDefaultKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWEPDefaultKeyID.setStatus('current')
if mibBuilder.loadTexts: apWEPDefaultKeyID.setDescription('The WEPDefaultKey N currently being used to encrypt data')
apWEPDefaultKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 13, 1, 4), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(5, 5), ValueSizeConstraint(13, 13), ValueSizeConstraint(16, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWEPDefaultKey1.setStatus('current')
if mibBuilder.loadTexts: apWEPDefaultKey1.setDescription('A WEP default secret key 1 value.')
apWEPDefaultKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 13, 1, 5), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(5, 5), ValueSizeConstraint(13, 13), ValueSizeConstraint(16, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWEPDefaultKey2.setStatus('current')
if mibBuilder.loadTexts: apWEPDefaultKey2.setDescription('A WEP default secret key 2 value.')
apWEPDefaultKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 13, 1, 6), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(5, 5), ValueSizeConstraint(13, 13), ValueSizeConstraint(16, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWEPDefaultKey3.setStatus('current')
if mibBuilder.loadTexts: apWEPDefaultKey3.setDescription('A WEP default secret key 3 value.')
apWEPDefaultKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 2, 4, 13, 1, 7), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(5, 5), ValueSizeConstraint(13, 13), ValueSizeConstraint(16, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWEPDefaultKey4.setStatus('current')
if mibBuilder.loadTexts: apWEPDefaultKey4.setDescription('A WEP default secret key 4 value.')
radioTransmitStop = NotificationType((1, 3, 6, 1, 4, 1, 43, 0, 95)).setObjects(("IF-MIB", "ifIndex"), ("SRAP-WCM-MIB", "apMyMacAddr"), ("SRAP-WCM-MIB", "apRadioChannel"))
if mibBuilder.loadTexts: radioTransmitStop.setStatus('current')
if mibBuilder.loadTexts: radioTransmitStop.setDescription('The radio has stopped transmitting due to a fault. There may be a jammed channel. The user should change the AP to the different channel or check if there is a RF hardware issue.')
radioReceiveStop = NotificationType((1, 3, 6, 1, 4, 1, 43, 0, 96)).setObjects(("IF-MIB", "ifIndex"), ("SRAP-WCM-MIB", "apMyMacAddr"), ("SRAP-WCM-MIB", "apRadioChannel"))
if mibBuilder.loadTexts: radioReceiveStop.setStatus('current')
if mibBuilder.loadTexts: radioReceiveStop.setDescription('The radio has stopped receiving due to a fault. There may be a jammed channel. The user should change the AP to the different channel or check if there is a RF hardware issue.')
exceedMaxAssociated = NotificationType((1, 3, 6, 1, 4, 1, 43, 0, 97)).setObjects(("IF-MIB", "ifIndex"), ("SRAP-WCM-MIB", "apMyMacAddr"))
if mibBuilder.loadTexts: exceedMaxAssociated.setStatus('current')
if mibBuilder.loadTexts: exceedMaxAssociated.setDescription('Exceed max 256 Associated clients. No more association of wireless clients allowed. The user can disassociate the idle wirless clients.')
exceedtThresholdAssociated = NotificationType((1, 3, 6, 1, 4, 1, 43, 0, 98)).setObjects(("IF-MIB", "ifIndex"), ("SRAP-WCM-MIB", "apMyMacAddr"))
if mibBuilder.loadTexts: exceedtThresholdAssociated.setStatus('current')
if mibBuilder.loadTexts: exceedtThresholdAssociated.setDescription('The number of Wireless Clients association reaches the threshold of the AP. Please check the MIB object, thresholdAssociated. The default is 200. The number of wireless client is more than the value of thresholdAssociated. This will affect the performace of the AP.')
dslSecurityViolation = NotificationType((1, 3, 6, 1, 4, 1, 43, 0, 99)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dslSecurityViolation.setStatus('current')
if mibBuilder.loadTexts: dslSecurityViolation.setDescription('For Wireless Client, User name or password is not correct in Dynamic Security Link database of AP. The user can check the AP admin if the account exists on the Dynamic Security Link database')
apManufactureInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 1, 1)).setObjects(("SRAP-WCM-MIB", "apModelnumber"), ("SRAP-WCM-MIB", "apSerialnumber"), ("SRAP-WCM-MIB", "apMyMacAddr"), ("SRAP-WCM-MIB", "apFirmwareVer"), ("SRAP-WCM-MIB", "apMfgDate"), ("SRAP-WCM-MIB", "apWebUiVer"), ("SRAP-WCM-MIB", "apProductName"), ("SRAP-WCM-MIB", "apMfgName"), ("SRAP-WCM-MIB", "apHardwareRev"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apManufactureInfoGroup = apManufactureInfoGroup.setStatus('current')
if mibBuilder.loadTexts: apManufactureInfoGroup.setDescription('The apManufactureInfo group')
apSystemConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 1, 2)).setObjects(("SRAP-WCM-MIB", "apDeviceName"), ("SRAP-WCM-MIB", "apDeviceLoc"), ("SRAP-WCM-MIB", "apHelpFilePath"), ("SRAP-WCM-MIB", "apMyIPAddr"), ("SRAP-WCM-MIB", "apSubnetMask"), ("SRAP-WCM-MIB", "apGatewayIPAddr"), ("SRAP-WCM-MIB", "apAdditionalGatewaysTableLength"), ("SRAP-WCM-MIB", "apAdditionalGatewaysIPAddr"), ("SRAP-WCM-MIB", "apDHCPEnable"), ("SRAP-WCM-MIB", "apStaticIPAddrEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSystemConfigGroup = apSystemConfigGroup.setStatus('current')
if mibBuilder.loadTexts: apSystemConfigGroup.setDescription('The apSystemConfig group')
apSNMPInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 1, 3)).setObjects(("SRAP-WCM-MIB", "apSNMPRequests"), ("SRAP-WCM-MIB", "apSNMPTraps"), ("SRAP-WCM-MIB", "apAllTrapsEnable"), ("SRAP-WCM-MIB", "apColdBootTrapEnable"), ("SRAP-WCM-MIB", "apAuthenFailureTrapEnable"), ("SRAP-WCM-MIB", "apRFTrapEnable"), ("SRAP-WCM-MIB", "apWarmBootTrapEnable"), ("SRAP-WCM-MIB", "apWCMaxAssocTrapEnable"), ("SRAP-WCM-MIB", "apThresholdAssociatedEnable"), ("SRAP-WCM-MIB", "dslSecurityViolationEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSNMPInfoGroup = apSNMPInfoGroup.setStatus('current')
if mibBuilder.loadTexts: apSNMPInfoGroup.setDescription('The apSNMPInfo group')
apRFConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 1, 4)).setObjects(("SRAP-WCM-MIB", "apWlanServiceArea"), ("SRAP-WCM-MIB", "apCountryName"), ("SRAP-WCM-MIB", "apShortPreamble"), ("SRAP-WCM-MIB", "apMaxWCTrigger"), ("SRAP-WCM-MIB", "apWEPAlgorithm"), ("SRAP-WCM-MIB", "apRadioAutoSense"), ("SRAP-WCM-MIB", "apRadioChannel"), ("SRAP-WCM-MIB", "apHighPerformance"), ("SRAP-WCM-MIB", "apTransmitPower"), ("SRAP-WCM-MIB", "apRadioAntenna"), ("SRAP-WCM-MIB", "thresholdAssociated"), ("SRAP-WCM-MIB", "apDataRateMgmt"), ("SRAP-WCM-MIB", "apDataRate5"), ("SRAP-WCM-MIB", "apDataRate11"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apRFConfigGroup = apRFConfigGroup.setStatus('current')
if mibBuilder.loadTexts: apRFConfigGroup.setDescription('The apRFConfig group')
apRFStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 2, 1)).setObjects(("SRAP-WCM-MIB", "rfTxUcastFrms"), ("SRAP-WCM-MIB", "rfRxUcastFrms"), ("SRAP-WCM-MIB", "rfTxBcastFrms"), ("SRAP-WCM-MIB", "rfRxBcastFrms"), ("SRAP-WCM-MIB", "rfTxMcastFrms"), ("SRAP-WCM-MIB", "rfRxMcastFrms"), ("SRAP-WCM-MIB", "rfTxEncryptFrms"), ("SRAP-WCM-MIB", "rfRxEncryptFrms"), ("SRAP-WCM-MIB", "rfTxFragFrms"), ("SRAP-WCM-MIB", "rfRxFragFrms"), ("SRAP-WCM-MIB", "rfTxBeacons"), ("SRAP-WCM-MIB", "rfRxBeacons"), ("SRAP-WCM-MIB", "rfTxACK"), ("SRAP-WCM-MIB", "rfRxACK"), ("SRAP-WCM-MIB", "rfTxRTS"), ("SRAP-WCM-MIB", "rfRxRTS"), ("SRAP-WCM-MIB", "rfCTSFailures"), ("SRAP-WCM-MIB", "rfRxCTS"), ("SRAP-WCM-MIB", "rfTxACKFailures"), ("SRAP-WCM-MIB", "rfTxRetrys"), ("SRAP-WCM-MIB", "rfFCSErrors"), ("SRAP-WCM-MIB", "rfRxDuplicateFrms"), ("SRAP-WCM-MIB", "rfWEPUndecryptFrms"), ("SRAP-WCM-MIB", "rfWEPICVErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apRFStatisticsGroup = apRFStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: apRFStatisticsGroup.setDescription('The apRFStatistics group')
apEtherItfStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 2, 2)).setObjects(("SRAP-WCM-MIB", "apEtherPacketsIns"), ("SRAP-WCM-MIB", "apEtherPacketsOuts"), ("SRAP-WCM-MIB", "apEtherOctetsIns"), ("SRAP-WCM-MIB", "apEtherOctetsOuts"), ("SRAP-WCM-MIB", "apEtherPktsInPerSec"), ("SRAP-WCM-MIB", "apEtherPktsOutPerSec"), ("SRAP-WCM-MIB", "apEtherOctInPerSec"), ("SRAP-WCM-MIB", "apEtherOctOutPerSec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apEtherItfStatGroup = apEtherItfStatGroup.setStatus('current')
if mibBuilder.loadTexts: apEtherItfStatGroup.setDescription('The apEtherInfStat group')
apRFItfStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 2, 3)).setObjects(("SRAP-WCM-MIB", "apRFFrmsIns"), ("SRAP-WCM-MIB", "apRFFrmsOuts"), ("SRAP-WCM-MIB", "apRFOctetsIns"), ("SRAP-WCM-MIB", "apRFOctetsOuts"), ("SRAP-WCM-MIB", "apRFFrmsInPerSec"), ("SRAP-WCM-MIB", "apRFFrmsOutPerSec"), ("SRAP-WCM-MIB", "apRFOctInPerSec"), ("SRAP-WCM-MIB", "apRFOctOutPerSec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apRFItfStatGroup = apRFItfStatGroup.setStatus('current')
if mibBuilder.loadTexts: apRFItfStatGroup.setDescription('The apRFInfStat group')
apTrafficMatrixGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 2, 4)).setObjects(("SRAP-WCM-MIB", "apEnetsNPktsToEnets"), ("SRAP-WCM-MIB", "apRFNPktsToEnets"), ("SRAP-WCM-MIB", "apEnetsNPktsToRF"), ("SRAP-WCM-MIB", "apRFNPktsToRF"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apTrafficMatrixGroup = apTrafficMatrixGroup.setStatus('current')
if mibBuilder.loadTexts: apTrafficMatrixGroup.setDescription('The apTrafficMatrix group')
apDSPerFreqStatTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 2, 5)).setObjects(("SRAP-WCM-MIB", "rfDSFrequency"), ("SRAP-WCM-MIB", "rfDSPerFqPktsSents"), ("SRAP-WCM-MIB", "rfDSPerFqPktsRcvds"), ("SRAP-WCM-MIB", "rfDSPerFqRetries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apDSPerFreqStatTableGroup = apDSPerFreqStatTableGroup.setStatus('current')
if mibBuilder.loadTexts: apDSPerFreqStatTableGroup.setDescription('The apDSPerFreqStatTable group')
apFaultMgmtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 3, 1)).setObjects(("SRAP-WCM-MIB", "apUpdateTemplateStatus"), ("SRAP-WCM-MIB", "apBackupFileName"), ("SRAP-WCM-MIB", "apTemplateOperation"), ("SRAP-WCM-MIB", "apRestoreFileName"), ("SRAP-WCM-MIB", "apSyslogDstIpAddressTableLength"), ("SRAP-WCM-MIB", "apSyslogDstIpAddress"), ("SRAP-WCM-MIB", "apSyslogEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apFaultMgmtGroup = apFaultMgmtGroup.setStatus('current')
if mibBuilder.loadTexts: apFaultMgmtGroup.setDescription('The apRFStatistics group')
apSecurityMgmtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 4, 1)).setObjects(("SRAP-WCM-MIB", "apACLViolations"), ("SRAP-WCM-MIB", "apEAPSupport"), ("SRAP-WCM-MIB", "apAuthServerSupportNumber"), ("SRAP-WCM-MIB", "apKeyServerSupportNumber"), ("SRAP-WCM-MIB", "apAccountServerSupportNumber"), ("SRAP-WCM-MIB", "apAuthServerIPAddr"), ("SRAP-WCM-MIB", "apAuthServerPortNumber"), ("SRAP-WCM-MIB", "apAuthSharedSecret"), ("SRAP-WCM-MIB", "apAuthServerRetransmit"), ("SRAP-WCM-MIB", "apAuthServerTimeout"), ("SRAP-WCM-MIB", "apKeyServerIPAddr"), ("SRAP-WCM-MIB", "apKeyServerPortNumber"), ("SRAP-WCM-MIB", "apAccountServerIPAddr"), ("SRAP-WCM-MIB", "apAccountServerPortNumber"), ("SRAP-WCM-MIB", "apAccountSharedSecret"), ("SRAP-WCM-MIB", "apAccountServerRetransmit"), ("SRAP-WCM-MIB", "apAccountServerTimeout"), ("SRAP-WCM-MIB", "apFastReKeying"), ("SRAP-WCM-MIB", "apTFTPServerPortNumber"), ("SRAP-WCM-MIB", "apTFTPRetries"), ("SRAP-WCM-MIB", "apTFTPTimeOutInterval"), ("SRAP-WCM-MIB", "apEncryptionMode"), ("SRAP-WCM-MIB", "apWPAPSKPassPhrase"), ("SRAP-WCM-MIB", "apWEPDefaultKeyID"), ("SRAP-WCM-MIB", "apWEPDefaultKey1"), ("SRAP-WCM-MIB", "apWEPDefaultKey2"), ("SRAP-WCM-MIB", "apWEPDefaultKey3"), ("SRAP-WCM-MIB", "apWEPDefaultKey4"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSecurityMgmtGroup = apSecurityMgmtGroup.setStatus('current')
if mibBuilder.loadTexts: apSecurityMgmtGroup.setDescription('The apSecurityMgmt group')
wcmNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 43, 35, 1, 7, 1, 1, 5, 1)).setObjects(("SRAP-WCM-MIB", "radioTransmitStop"), ("SRAP-WCM-MIB", "radioReceiveStop"), ("SRAP-WCM-MIB", "exceedMaxAssociated"), ("SRAP-WCM-MIB", "exceedtThresholdAssociated"), ("SRAP-WCM-MIB", "dslSecurityViolation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wcmNotificationGroup = wcmNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: wcmNotificationGroup.setDescription('The wcm Notifications.')
mibBuilder.exportSymbols("SRAP-WCM-MIB", apWarmBootTrapEnable=apWarmBootTrapEnable, apEtherPktsOutPerSec=apEtherPktsOutPerSec, apTFTPRetries=apTFTPRetries, wcmNotificationGroup=wcmNotificationGroup, apPerformMgmt=apPerformMgmt, apKeyServerSupportNumber=apKeyServerSupportNumber, apRestoreFileName=apRestoreFileName, apFaultMgmt=apFaultMgmt, apSNMPRequests=apSNMPRequests, apDeviceLoc=apDeviceLoc, apTrafficMatrixGroup=apTrafficMatrixGroup, apAdditionalGatewaysIPAddr=apAdditionalGatewaysIPAddr, apWebUiVer=apWebUiVer, apAuthServerEntry=apAuthServerEntry, apEtherPacketsOuts=apEtherPacketsOuts, apAuthServerSupportNumber=apAuthServerSupportNumber, apEtherOctetsIns=apEtherOctetsIns, apSecurityMgmt=apSecurityMgmt, additionalGatewaysIndex=additionalGatewaysIndex, apRFFrmsIns=apRFFrmsIns, apEncryptionMode=apEncryptionMode, rfTxUcastFrms=rfTxUcastFrms, apThresholdAssociatedEnable=apThresholdAssociatedEnable, rfRxMcastFrms=rfRxMcastFrms, apEtherOctetsOuts=apEtherOctetsOuts, apAuthServerIndex=apAuthServerIndex, rfRxUcastFrms=rfRxUcastFrms, rfRxBeacons=rfRxBeacons, rfTxEncryptFrms=rfTxEncryptFrms, rfDSFrequency=rfDSFrequency, apMyMacAddr=apMyMacAddr, apAuthServerIPAddr=apAuthServerIPAddr, apEtherPktsInPerSec=apEtherPktsInPerSec, apHelpFilePath=apHelpFilePath, rfRxDuplicateFrms=rfRxDuplicateFrms, apDataRate11=apDataRate11, apWEPDefaultKey4=apWEPDefaultKey4, wcmEventsV2=wcmEventsV2, wcmObjs=wcmObjs, apRFOctetsIns=apRFOctetsIns, apAdditionalGatewaysTableLength=apAdditionalGatewaysTableLength, apWEPDefaultKey3=apWEPDefaultKey3, apFaultMgmtGroup=apFaultMgmtGroup, rfTxFragFrms=rfTxFragFrms, apSystemConfigGroup=apSystemConfigGroup, apMyIPAddr=apMyIPAddr, rfFCSErrors=rfFCSErrors, apEncryptionEntry=apEncryptionEntry, apManufactureInfo=apManufactureInfo, exceedtThresholdAssociated=exceedtThresholdAssociated, apAuthServerPortNumber=apAuthServerPortNumber, apDHCPEnable=apDHCPEnable, apRFTrapEnable=apRFTrapEnable, apAuthSharedSecret=apAuthSharedSecret, rfWEPICVErrors=rfWEPICVErrors, apACLViolations=apACLViolations, apAuthServerRetransmit=apAuthServerRetransmit, apProductName=apProductName, apMfgName=apMfgName, radioTransmitStop=radioTransmitStop, apHighPerformance=apHighPerformance, apRFItfStat=apRFItfStat, apAllTrapsEnable=apAllTrapsEnable, apSecurityMgmtGroups=apSecurityMgmtGroups, apKeyServerPortNumber=apKeyServerPortNumber, apStaticIPAddrEnable=apStaticIPAddrEnable, apAccountServerRetransmit=apAccountServerRetransmit, apTrafficMatrix=apTrafficMatrix, rfTxRetrys=rfTxRetrys, rfTxACKFailures=rfTxACKFailures, dslSecurityViolation=dslSecurityViolation, exceedMaxAssociated=exceedMaxAssociated, apPerformMgmtGroups=apPerformMgmtGroups, apEventGroups=apEventGroups, rfTxBcastFrms=rfTxBcastFrms, rfTxMcastFrms=rfTxMcastFrms, apRFFrmsInPerSec=apRFFrmsInPerSec, apTFTPServerPortNumber=apTFTPServerPortNumber, apFaultMgmtGroups=apFaultMgmtGroups, apKeyServerIPAddr=apKeyServerIPAddr, apUpdateTemplateStatus=apUpdateTemplateStatus, apWEPDefaultKey2=apWEPDefaultKey2, apAccountServerIPAddr=apAccountServerIPAddr, apEtherOctOutPerSec=apEtherOctOutPerSec, radioReceiveStop=radioReceiveStop, apWEPAlgorithm=apWEPAlgorithm, apMfgDate=apMfgDate, rfTxBeacons=rfTxBeacons, rfDSPerFqRetries=rfDSPerFqRetries, apDataRateMgmt=apDataRateMgmt, apRFFrmsOutPerSec=apRFFrmsOutPerSec, apRadioAntenna=apRadioAntenna, rfDSPerFqPktsRcvds=rfDSPerFqPktsRcvds, apEtherItfStatGroup=apEtherItfStatGroup, apGatewayIPAddr=apGatewayIPAddr, rfRxEncryptFrms=rfRxEncryptFrms, wcmMIB=wcmMIB, apDeviceName=apDeviceName, apKeyServerTable=apKeyServerTable, apWPAPSKPassPhrase=apWPAPSKPassPhrase, apSyslogDstIpAddressTable=apSyslogDstIpAddressTable, apSyslogDstIpAddressIndex=apSyslogDstIpAddressIndex, apEAPSupport=apEAPSupport, apSyslogEnable=apSyslogEnable, apTemplateOperation=apTemplateOperation, apFastReKeying=apFastReKeying, apKeyServerIndex=apKeyServerIndex, apDataRate5=apDataRate5, apDSPerFreqStatTable=apDSPerFreqStatTable, apTransmitPower=apTransmitPower, apSyslogDstIpAddressTableLength=apSyslogDstIpAddressTableLength, apWEPDefaultKey1=apWEPDefaultKey1, apRFStatistics=apRFStatistics, apSerialnumber=apSerialnumber, dslSecurityViolationEnable=dslSecurityViolationEnable, apMaxWCTrigger=apMaxWCTrigger, apAuthenFailureTrapEnable=apAuthenFailureTrapEnable, apAuthServerTable=apAuthServerTable, apManufactureInfoGroup=apManufactureInfoGroup, apEtherPacketsIns=apEtherPacketsIns, wcmEvents=wcmEvents, apEtherItfStat=apEtherItfStat, apRFOctOutPerSec=apRFOctOutPerSec, rfRxRTS=rfRxRTS, apAccountServerTable=apAccountServerTable, apAuthServerTimeout=apAuthServerTimeout, srAPWCMMIBModule=srAPWCMMIBModule, apRadioChannel=apRadioChannel, apSecurityMgmtGroup=apSecurityMgmtGroup, apBackupFileName=apBackupFileName, apRFStatisticsGroup=apRFStatisticsGroup, apRFConfigGroup=apRFConfigGroup, apConfigMgmtGroups=apConfigMgmtGroups, apTFTPTimeOutInterval=apTFTPTimeOutInterval, apRFFrmsOuts=apRFFrmsOuts, rfCTSFailures=rfCTSFailures, rfRxCTS=rfRxCTS, apKeyServerEntry=apKeyServerEntry, apSNMPTraps=apSNMPTraps, apRFItfStatGroup=apRFItfStatGroup, apEtherOctInPerSec=apEtherOctInPerSec, apAccountServerTimeout=apAccountServerTimeout, apRFConfig=apRFConfig, rfTxACK=rfTxACK, apAccountServerSupportNumber=apAccountServerSupportNumber, apCountryName=apCountryName, rfWEPUndecryptFrms=rfWEPUndecryptFrms, apSNMPInfo=apSNMPInfo, rfDSPerFqPktsSents=rfDSPerFqPktsSents, apRadioAutoSense=apRadioAutoSense, apHardwareRev=apHardwareRev, apWCMaxAssocTrapEnable=apWCMaxAssocTrapEnable, apAdditionalGatewaysEntry=apAdditionalGatewaysEntry, apAccountServerEntry=apAccountServerEntry, apSubnetMask=apSubnetMask, apWlanServiceArea=apWlanServiceArea, apAccountServerSharedSecret=apAccountServerSharedSecret, apModelnumber=apModelnumber, apSNMPInfoGroup=apSNMPInfoGroup, rfTxRTS=rfTxRTS, apSyslogDstIpAddress=apSyslogDstIpAddress, apWEPDefaultKeyID=apWEPDefaultKeyID, apConfigMgmt=apConfigMgmt, wcmConf=wcmConf, apAdditionalGatewaysTable=apAdditionalGatewaysTable, apSyslogDstIpAddressEntry=apSyslogDstIpAddressEntry, apShortPreamble=apShortPreamble, rfRxBcastFrms=rfRxBcastFrms, rfRxFragFrms=rfRxFragFrms, thresholdAssociated=thresholdAssociated, rfRxACK=rfRxACK, apSystemConfig=apSystemConfig, apColdBootTrapEnable=apColdBootTrapEnable, apFirmwareVer=apFirmwareVer, apEncryptionTable=apEncryptionTable, apRFOctInPerSec=apRFOctInPerSec, apRFOctetsOuts=apRFOctetsOuts, apRFNPktsToEnets=apRFNPktsToEnets, apAccountServerIndex=apAccountServerIndex, apEnetsNPktsToRF=apEnetsNPktsToRF, apDSPerFreqStatEntry=apDSPerFreqStatEntry, apDSPerFreqStatTableGroup=apDSPerFreqStatTableGroup, apEnetsNPktsToEnets=apEnetsNPktsToEnets, apAccountServerPortNumber=apAccountServerPortNumber, apRFNPktsToRF=apRFNPktsToRF, PYSNMP_MODULE_ID=srAPWCMMIBModule)
