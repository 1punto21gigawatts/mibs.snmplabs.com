#
# PySNMP MIB module PANDATEL-BMP-MODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PANDATEL-BMP-MODEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
device_id, mdmSpecifics = mibBuilder.importSymbols("PANDATEL-MODEM-MIB", "device-id", "mdmSpecifics")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, MibIdentifier, iso, ObjectIdentity, Integer32, Counter64, enterprises, Bits, IpAddress, Gauge32, NotificationType, Unsigned32, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "iso", "ObjectIdentity", "Integer32", "Counter64", "enterprises", "Bits", "IpAddress", "Gauge32", "NotificationType", "Unsigned32", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
bmp_modem = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 301)).setLabel("bmp-modem")
bmp = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 301))
bmpModemTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 301, 1), )
if mibBuilder.loadTexts: bmpModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: bmpModemTable.setDescription('This table contains information about all BM-P modems in all racks.')
bmpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 301, 1, 1), ).setIndexNames((0, "PANDATEL-BMP-MODEM-MIB", "mdmRack"), (0, "PANDATEL-BMP-MODEM-MIB", "mdmModem"), (0, "PANDATEL-BMP-MODEM-MIB", "mdmPosition"))
if mibBuilder.loadTexts: bmpTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bmpTableEntry.setDescription('The index of the table.')
mdmRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 301, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRack.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRack.setDescription('The index of the rack where the modem is installed.')
mdmModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 301, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModem.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModem.setDescription('This variable displays the slot number where the corresponding modem is installed in the rack.')
mdmPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 301, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmPosition.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPosition.setDescription("This variable displays the location of the corresponding modem: 'local' or 'remote'. The modem which is plugged into a managed rack is 'local', the counterpart is 'remote'.")
mdmModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 301, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModemName.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModemName.setDescription('The verbal name of this modem.')
mdmDataEquipmentEmulation = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 301, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("other", 1), ("dte", 2), ("dce", 3), ("te", 4), ("nt", 5), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDataEquipmentEmulation.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDataEquipmentEmulation.setDescription("Interface mode of the unit: 'dte' or 'dce', 'te' or 'nt'.")
mdmClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 301, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("slave", 2), ("master", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmClockMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmClockMode.setDescription("The clock mode of the unit: 'master' or 'slave'.")
mdmDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 301, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("short", 3), ("long", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDistance.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDistance.setDescription("The transmission distance of the unit: 'long' or 'short'. 'Long' is valid for link data rates of up to 64 Kbps. For data rates higher than 64 Kbps this entry must be set to 'short'.")
mdmDataRateAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 301, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDataRateAdaptation.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDataRateAdaptation.setDescription('This entry enables or disables data rate adaptation, i.e. one unit operates at line speed and the other one at lower speeds (1.2, 2.4, 4.8 or 9.6 Kbps at 64 Kbps line speed and 1.2, 2.4, 4.8, 9.6 or 19.2 Kbps at 128 Kbps line speed).')
mdmClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 301, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 4), ("async", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: mdmClockSource.setDescription("The clock source of the link: 'internal', 'external', or 'async'.")
mdmDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 301, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("other", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDataRate.setDescription('The data rate at the interface in bits per seconds. If dataRateAdaptation is disabled, the data rate at the remote counterpart changes simultaneously. Otherwise the data rate at one unit is fixed to line speed and the data rate at the other unit must be set to speeds lower than line speed.')
mdmLocalCarrierDetect1 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 301, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("fo-link-and-remote-handshake", 2), ("fo-link", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLocalCarrierDetect1.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLocalCarrierDetect1.setDescription("The data carrier detect mode at the interface: if set to 'fo-link-and-remote-handshake' the DCD signal (resp. I for X.21, etc.) follows link status and remote RTS (resp. C for X.21, etc.), if set to 'fo-link' the DCD signal follows link status only.")
mdmLocalCarrierDetect2 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 301, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("fo-link-and-remote-handshake", 2), ("fo-link", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLocalCarrierDetect2.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLocalCarrierDetect2.setDescription("The data carrier detect mode 2 at the interface: if set to 'fo-link-and-remote-handshake' the DSR signal follows link status and remote RTS (resp. C for X.21, etc.), if set to 'fo-link' the DSR signal follows link status only.")
mibBuilder.exportSymbols("PANDATEL-BMP-MODEM-MIB", mdmDistance=mdmDistance, mdmDataRateAdaptation=mdmDataRateAdaptation, mdmModemName=mdmModemName, bmpTableEntry=bmpTableEntry, mdmDataEquipmentEmulation=mdmDataEquipmentEmulation, mdmClockSource=mdmClockSource, mdmRack=mdmRack, mdmModem=mdmModem, mdmPosition=mdmPosition, mdmLocalCarrierDetect1=mdmLocalCarrierDetect1, bmp=bmp, mdmLocalCarrierDetect2=mdmLocalCarrierDetect2, mdmClockMode=mdmClockMode, bmp_modem=bmp_modem, mdmDataRate=mdmDataRate, bmpModemTable=bmpModemTable)
