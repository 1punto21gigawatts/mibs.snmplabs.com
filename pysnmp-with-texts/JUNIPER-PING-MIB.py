#
# PySNMP MIB module JUNIPER-PING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-PING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:00:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
pingResultsIpTargetAddressType, pingCtlTargetAddressType, pingResultsMinRtt, pingResultsLastGoodProbe, pingResultsOperStatus, pingResultsIpTargetAddress, pingResultsSentProbes, pingProbeHistoryEntry, pingResultsEntry, pingResultsMaxRtt, pingResultsAverageRtt, OperationResponseStatus, pingResultsRttSumOfSquares, pingCtlTargetAddress, pingResultsProbeResponses = mibBuilder.importSymbols("DISMAN-PING-MIB", "pingResultsIpTargetAddressType", "pingCtlTargetAddressType", "pingResultsMinRtt", "pingResultsLastGoodProbe", "pingResultsOperStatus", "pingResultsIpTargetAddress", "pingResultsSentProbes", "pingProbeHistoryEntry", "pingResultsEntry", "pingResultsMaxRtt", "pingResultsAverageRtt", "OperationResponseStatus", "pingResultsRttSumOfSquares", "pingCtlTargetAddress", "pingResultsProbeResponses")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetPortNumber, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber")
jnxPingNotifications, jnxMibs = mibBuilder.importSymbols("JUNIPER-SMI", "jnxPingNotifications", "jnxMibs")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, ObjectIdentity, iso, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Gauge32, NotificationType, IpAddress, MibIdentifier, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ObjectIdentity", "iso", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Gauge32", "NotificationType", "IpAddress", "MibIdentifier", "Bits", "Counter64")
DateAndTime, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TruthValue", "TextualConvention")
jnxPingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 7))
jnxPingMIB.setRevisions(('2011-09-20 00:00', '2009-11-18 00:00', '2009-04-20 00:00', '2005-05-01 00:00', '2004-04-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxPingMIB.setRevisionsDescriptions(('Updated the jnxPingCtlTargetPort description.', 'Added jnxPingCtlEXseriesHWTimeStamp to jnxPingCtlTable.', 'Added jnxPingCtlTargetPort to jnxPingCtlTable.', 'Added jnxPingCtlTargetPort to jnxPingCtlTable.', 'Added traps plus additional results & history data.',))
if mibBuilder.loadTexts: jnxPingMIB.setLastUpdated('200911180000Z')
if mibBuilder.loadTexts: jnxPingMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxPingMIB.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxPingMIB.setDescription("This is Juniper Networks' implementation of enterprise specific portions of pingMib. Any data stored in this MIB has directly related entries in mib-2, pingMIB.")
jnxPingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1))
jnxPingImplementationTypeDomains = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 7, 2))
jnxPingIcmpTimeStamp = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 7, 2, 1))
if mibBuilder.loadTexts: jnxPingIcmpTimeStamp.setStatus('current')
if mibBuilder.loadTexts: jnxPingIcmpTimeStamp.setDescription("Indicates that an implementation is using the Internet Control Message Protocol (ICMP) 'TimeStamp' facility. This probe-type provides egress and ingress delay measurements.")
jnxPingHttpGet = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 7, 2, 2))
if mibBuilder.loadTexts: jnxPingHttpGet.setStatus('current')
if mibBuilder.loadTexts: jnxPingHttpGet.setDescription('Indicates that an implementation is using an HTTP GET query to calculate a round trip time.')
jnxPingHttpGetMetadata = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 7, 2, 3))
if mibBuilder.loadTexts: jnxPingHttpGetMetadata.setStatus('current')
if mibBuilder.loadTexts: jnxPingHttpGetMetadata.setDescription('Indicates that an implementation is using an HTTP GET Metadata query to calculate a round trip time.')
jnxPingDnsQuery = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 7, 2, 4))
if mibBuilder.loadTexts: jnxPingDnsQuery.setStatus('current')
if mibBuilder.loadTexts: jnxPingDnsQuery.setDescription('Indicates that an implementation is using a DNS query to calculate a round trip time.')
jnxPingNtpQuery = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 7, 2, 5))
if mibBuilder.loadTexts: jnxPingNtpQuery.setStatus('current')
if mibBuilder.loadTexts: jnxPingNtpQuery.setDescription('Indicates that an implementation is using an NTP query to calculate a round trip time.')
jnxPingUdpTimestamp = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 7, 2, 6))
if mibBuilder.loadTexts: jnxPingUdpTimestamp.setStatus('current')
if mibBuilder.loadTexts: jnxPingUdpTimestamp.setDescription('Indicates that an implementation is using a UDP timestamp query to calculate a round trip time. This probe-type provides egress and ingress delay measurements')
jnxPingCtlTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2), )
if mibBuilder.loadTexts: jnxPingCtlTable.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlTable.setDescription('Defines the jnxPing Control Table for providing enterprise specific options to the corresponding pingCtlTable entry.')
jnxPingCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1), ).setIndexNames((0, "JUNIPER-PING-MIB", "jnxPingCtlOwnerIndex"), (0, "JUNIPER-PING-MIB", "jnxPingCtlTestName"))
if mibBuilder.loadTexts: jnxPingCtlEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlEntry.setDescription('Defines an entry in the jnxPingCtlTable. This essentially augments the pingCtlTable with additional objects.')
jnxPingCtlOwnerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: jnxPingCtlOwnerIndex.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlOwnerIndex.setDescription("To facilitate the provisioning of access control by a security administrator using the View-Based Access Control Model (RFC 2575, VACM) for tables in which multiple users may need to independently create or modify entries, the initial index is used as an 'owner index'. Such an initial index has a syntax of SnmpAdminString, and can thus be trivially mapped to a securityName or groupName as defined in VACM, in accordance with a security policy. When used in conjunction with such a security policy all entries in the table belonging to a particular user (or group) will have the same value for this initial index. For a given user's entries in a particular table, the object identifiers for the information in these entries will have the same subidentifiers (except for the 'column' subidentifier) up to the end of the encoded owner index. To configure VACM to permit access to this portion of the table, one would create vacmViewTreeFamilyTable entries with the value of vacmViewTreeFamilySubtree including the owner index portion, and vacmViewTreeFamilyMask 'wildcarding' the column subidentifier. More elaborate configurations are possible.")
jnxPingCtlTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: jnxPingCtlTestName.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlTestName.setDescription('The name of the ping test. This is locally unique, within the scope of an pingCtlOwnerIndex.')
jnxPingCtlIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlIfName.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlIfName.setDescription('Setting this object to an interface name prior to starting a remote ping operation directs the ping probes to be transmitted over the specified interface. To specify the interface index instead, see pingCtlIfIndex. The interface name must be specified under interfaces statement of the JUNOS configuration. A zero length string value for this object means that this option is not enabled. The following values may be set simultaneously, however, only one value is used. The precedence order is a follows: pingCtlIfIndex (see pingCtlTable in pingMIB) jnxPingCtlIfName jnxPingCtlRoutingIfIndex (deprecated) jnxPingCtlRoutingIfName (deprecated) jnxPingCtlRoutingInstanceName')
jnxPingCtlRoutingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlRoutingIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: jnxPingCtlRoutingIfIndex.setDescription('Use this option to specify the routing instance used when directing outgoing ping packets. The interface ifIndex specified should be in the desired routing instance table. The interface specified will not necessarily be the interface packets are transmitted on. By default, the source address of the packets will be set to the address of the interface chosen. pingCtlSourceAddress should be used to override the choice for source address if necessary. A value of zero for this object means that this option is not enabled. NOTE: deprecated by jnxPingCtlRoutingInstanceName')
jnxPingCtlRoutingIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlRoutingIfName.setStatus('deprecated')
if mibBuilder.loadTexts: jnxPingCtlRoutingIfName.setDescription('Use this option to specify the routing instance used when directing outgoing ping packets. The interface name specified should be in the desired routing instance table. The interface specified will not necessarily be the interface packets are transmitted on. By default, the source address of the packets will be set to the address of the interface chosen. pingCtlSourceAddress should be used to override the choice for source address if necessary. NOTE: deprecated by jnxPingCtlRoutingInstanceName')
jnxPingCtlRoutingInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlRoutingInstanceName.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlRoutingInstanceName.setDescription('Use this option to specify the name of the routing instance used when directing outgoing ping packets. The instance name specified must be configured under routing-instances of the JUNOS configuration.')
jnxPingCtlRttThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000000))).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlRttThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlRttThreshold.setDescription('Maximum round trip time allowed. If this threshold is crossed by any probe, a jnxPingRttThresholdExceeded trap will be sent.')
jnxPingCtlRttStdDevThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000000))).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlRttStdDevThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlRttStdDevThreshold.setDescription('The maximum round trip time standard deviation allowed over the course of any test. If the calculated standard deviation of the round trip time at the end of any test exceeds this threshold, a jnxPingRttStdDevThresholdExceeded trap will be sent.')
jnxPingCtlRttJitterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000000))).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlRttJitterThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlRttJitterThreshold.setDescription('The maximum allowed jitter in the round trip time over the course of any test. Jitter is defined as the difference between the maximum and minimum round trip times measured over the course of a single test (jnxPingResultsMaxRttUs minus jnxPingResultsMinRttUs). If the measured jitter exceeds this threshold, a jnxPingRttJitterThresholdExceeded trap will be sent.')
jnxPingCtlEgressTimeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000000))).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlEgressTimeThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlEgressTimeThreshold.setDescription('Maximum egress trip time allowed. If this threshold is crossed by any probe, a jnxPingEgressThresholdExceeded trap will be sent. This applies only if the probe type (pingCtlType) provides one way delay measurements. Currently jnxPingIcmpTimeStamp is the only supported probe type with this property.')
jnxPingCtlEgressStdDevThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000000))).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlEgressStdDevThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlEgressStdDevThreshold.setDescription('The maximum egress trip time standard deviation allowed over the course of any test. If the calculated standard deviation of the egress trip time at the end of any test exceeds this threshold, a jnxPingEgressStdDevThresholdExceeded trap will be sent. This applies only if the probe type (pingCtlType) provides one way delay measurements. Currently jnxPingIcmpTimeStamp is the only supported probe type with this property.')
jnxPingCtlEgressJitterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000000))).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlEgressJitterThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlEgressJitterThreshold.setDescription('The maximum allowed jitter in the egress trip time over the course of any test. Jitter is defined as the difference between the maximum and minimum egress trip times measured over the course of a single test (jnxPingResultsMaxSrcDstt minus jnxPingResultsMinSrcDstt). If the measured jitter exceeds this threshold, a jnxPingEgressJitterThresholdExceeded trap will be sent. This applies only if the probe type (pingCtlType) provides one way delay measurements. Currently jnxPingIcmpTimeStamp is the only supported probe type with this property.')
jnxPingCtlIngressTimeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000000))).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlIngressTimeThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlIngressTimeThreshold.setDescription('Maximum ingress trip time allowed. If this threshold is crossed by any probe, a jnxPingIngressThresholdExceeded trap will be sent. This applies only if the probe type (pingCtlType) provides one way delay measurements. Currently jnxPingIcmpTimeStamp is the only supported probe type with this property.')
jnxPingCtlIngressStddevThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000000))).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlIngressStddevThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlIngressStddevThreshold.setDescription('The maximum ingress trip time standard deviation allowed over the course of any test. If the calculated standard deviation of the ingress trip time at the end of any test exceeds this threshold, a jnxPingIngressStddevThresholdExceeded trap will be sent. This applies only if the probe type (pingCtlType) provides one way delay measurements. Currently jnxPingIcmpTimeStamp is the only supported probe type with this property.')
jnxPingCtlIngressJitterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000000))).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlIngressJitterThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlIngressJitterThreshold.setDescription('The maximum allowed jitter in the ingress trip time over the course of any test. Jitter is defined as the difference between the maximum and minimum ingress trip times measured over the course of a single test (jnxPingResultsMaxDstSrct minus jnxPingResultsMinDstSrct). If the measured jitter exceeds this threshold, a jnxPingIngressJitterThresholdExceeded trap will be sent. This applies only if the probe type (pingCtlType) provides one way delay measurements. Currently jnxPingIcmpTimeStamp is the only supported probe type with this property.')
jnxPingCtlTrapGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 16), Bits().clone(namedValues=NamedValues(("rttThreshold", 0), ("rttStdDevThreshold", 1), ("rttJitterThreshold", 2), ("egressThreshold", 3), ("egressStdDevThreshold", 4), ("egressJitterThreshold", 5), ("ingressThreshold", 6), ("ingressStdDevThreshold", 7), ("ingressJitterThreshold", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlTrapGeneration.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlTrapGeneration.setDescription('The value of this object determines when and if to generate a notification for this entry: rttThreshold(0) - Generate a jnxPingRttThresholdExceeded notification when the configured rtt threshold is exceeded. rttStdDevThreshold(1) - Generate a jnxPingRttStdDevThresholdExceeded notification when the configured rtt standard deviation threshold is exceeded. rttJitterThreshold(2) - Generate a jnxPingRttJitterThresholdExceeded notification when the configured rtt jitter threshold is exceeded. egressThreshold(3) - Generate a jnxPingEgressThresholdExceeded notification when the configured egress threshold is exceeded. This applies only if the probe type supports one way measurments. egressStdDevThreshold(4) - Generate a jnxPingEgressStdDevThresholdExceeded notification when the configured egress standard deviation threshold is exceeded. This applies only if the probe type supports one way measurments. egressJitterThreshold(5) - Generate a jnxPingEgressJitterThresholdExceeded notification when the configured egress jitter threshold is exceeded. This applies only if the probe type supports one way measurments. ingressThreshold(6) - Generate a jnxPingIngressThresholdExceeded notification when the configured ingress threshold is exceeded. This applies only if the probe type supports one way measurments. ingressStdDevThreshold(7) - Generate a jnxPingIngressStdDevThresholdExceeded notification when the configured ingress standard deviation threshold is exceeded. This applies only if the probe type supports one way measurments. ingressJitterThreshold(8) - Generate a jnxPingIngressJitterThresholdExceeded notification when the configured ingress jitter threshold is exceeded. This applies only if the probe type supports one way measurments. The value of this object defaults to zero, indicating that none of the above options have been selected.')
jnxPingCtlTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 17), InetPortNumber().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(7, 7), ValueRangeConstraint(49152, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlTargetPort.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlTargetPort.setDescription('The target UDP/TCP port used by the probe. When ICMP ping is used, jnxPingCtlTargetPort value will be shown as 0.')
jnxPingCtlJseriesHWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlJseriesHWTimeStamp.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlJseriesHWTimeStamp.setDescription('Use to enable the RPM Hardware Timestamp feature on J-series routers. For M/T series routers, use the jnxPingCtlIfName and pingCtlByPassRouteTable objects to redirect probes to the AS Pic. For those routers, this object must have the value: false.')
jnxPingCtlOneWayHWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlOneWayHWTimeStamp.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlOneWayHWTimeStamp.setDescription('Use this object to enable Hardware Timestamp-based one-way measurements. If this object is not enabled (ie, set to true), no Hardware Timestamp based one way measurements or calculations will be performed for this control entry. This object applies to all Juniper routers. Note, due to clock synchronization artifacts, many one-way jitter measurements & calculations may include signifacant variations, in some cases orders of magnitude greater than the round trip times.')
jnxPingCtlMovAvgSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 20), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlMovAvgSize.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlMovAvgSize.setDescription('The Juniper RPM feature maintains a set of the most recent probe measurements & provides the same calculations over that collection as provided over a test (ie, average, standard deviation, etc). This data is available via the jnx-rpm mib or via the CLI/XML. The number of samples maintained in this moving collection is specified by this object. This value must be less than the number of samples maintained in the history table (ie, pingCtlMaxRows).')
jnxPingCtlMXseriesHWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlMXseriesHWTimeStamp.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlMXseriesHWTimeStamp.setDescription('Use to enable the RPM Hardware Timestamp feature on MX-series routers. For M/T series routers, use the jnxPingCtlIfName and pingCtlByPassRouteTable objects to redirect probes to the AS PIC. For those routers, this object must have the value: false.')
jnxPingCtlEXseriesHWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 2, 1, 22), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxPingCtlEXseriesHWTimeStamp.setStatus('current')
if mibBuilder.loadTexts: jnxPingCtlEXseriesHWTimeStamp.setDescription('Use to enable the RPM Hardware Timestamp feature on EX-series switches. For thoses, this object must have the value: false.')
jnxPingResultsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3), )
if mibBuilder.loadTexts: jnxPingResultsTable.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsTable.setDescription('Augments the pingResultsTable with additional data.')
jnxPingResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1), )
pingResultsEntry.registerAugmentions(("JUNIPER-PING-MIB", "jnxPingResultsEntry"))
jnxPingResultsEntry.setIndexNames(*pingResultsEntry.getIndexNames())
if mibBuilder.loadTexts: jnxPingResultsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsEntry.setDescription('Each entry provides additional ping test results.')
jnxPingResultsRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 1), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsRttUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsRttUs.setDescription('The round trip delays measured for the most recent successful probe during this test. Measured in microseconds.')
jnxPingResultsSumRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 2), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsSumRttUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsSumRttUs.setDescription('The sum of the round trip delays measured for all the probes during this test. Measured in microseconds.')
jnxPingResultsMinRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 3), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsMinRttUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsMinRttUs.setDescription('The minimum of the round trip delays measured for all the probes during this test. Measured in microseconds.')
jnxPingResultsMaxRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 4), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsMaxRttUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsMaxRttUs.setDescription('The maximum of the round trip delays measured for all the probes during this test. Measured in microseconds.')
jnxPingResultsAvgRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 5), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsAvgRttUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsAvgRttUs.setDescription('The average of the round trip delays measured for all the probes during this test. Measured in microseconds.')
jnxPingResultsStdDevRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 6), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsStdDevRttUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsStdDevRttUs.setDescription('The standard deviation of the round trip delays measured during this test. Measured in microseconds.')
jnxPingResultsEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 7), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsEgressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsEgressUs.setDescription('The egress trip delays measured for the most recent successful probe during this test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingResultsMinEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 8), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsMinEgressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsMinEgressUs.setDescription('The minimum of the egress trip delays measured over all probes during this test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingResultsMaxEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 9), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsMaxEgressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsMaxEgressUs.setDescription('The maximum of the egress trip delays measured over all probes during this test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingResultsAvgEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 10), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsAvgEgressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsAvgEgressUs.setDescription('The average of the egress trip delays measured over all probes during this test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingResultsStddevEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 11), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsStddevEgressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsStddevEgressUs.setDescription('The standard deviation of the egress trip delays measured over all probes during this test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingResultsIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 12), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsIngressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsIngressUs.setDescription('The ingress trip delays measured for the most recent successful probe during this test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingResultsMinIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 13), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsMinIngressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsMinIngressUs.setDescription('The minimum of the ingress trip delays measured for over all probes during this test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingResultsMaxIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 14), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsMaxIngressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsMaxIngressUs.setDescription('The maximum of the ingress trip delays measured over all probes during this test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingResultsAvgIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 15), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsAvgIngressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsAvgIngressUs.setDescription('The average of the ingress trip delays measured over all probes during this test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingResultsStddevIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 16), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsStddevIngressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsStddevIngressUs.setDescription('The standard deviation of the ingress trip delays measured over all probes during this test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingResultsJitterRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 17), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsJitterRttUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsJitterRttUs.setDescription('The jitter of the round trip delays measured for all the probes during this test. Measured in microseconds.')
jnxPingResultsJitterEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 18), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsJitterEgressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsJitterEgressUs.setDescription('The jitter of the egress trip delays measured for all the probes during this test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingResultsJitterIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 19), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsJitterIngressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsJitterIngressUs.setDescription('The jitter of the ingress trip delays measured for all the probes during this test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingResultsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 20), OperationResponseStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsStatus.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsStatus.setDescription('The result of the most recent probe.')
jnxPingResultsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsTime.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsTime.setDescription('Timestamp for when the most recent probe result was determined.')
jnxPingResultsOwnerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsOwnerIndex.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsOwnerIndex.setDescription('This object has the same value as pingCtlOwnerIndex and is provided for those applications that are unable to parse the value of pingCtlOwnerIndex from the instance portion of the OIDs belonging to this table.')
jnxPingResultsTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 3, 1, 23), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingResultsTestName.setStatus('current')
if mibBuilder.loadTexts: jnxPingResultsTestName.setDescription('This object has the same value as pingCtlTestName and is provided for those applications that are unable to parse the value of pingCtlTestName from the instance portion of the OIDs belonging to this table.')
jnxPingProbeHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 4), )
if mibBuilder.loadTexts: jnxPingProbeHistoryTable.setStatus('current')
if mibBuilder.loadTexts: jnxPingProbeHistoryTable.setDescription('Augments the pingHistoryTable with additional data.')
jnxPingProbeHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 4, 1), )
pingProbeHistoryEntry.registerAugmentions(("JUNIPER-PING-MIB", "jnxPingProbeHistoryEntry"))
jnxPingProbeHistoryEntry.setIndexNames(*pingProbeHistoryEntry.getIndexNames())
if mibBuilder.loadTexts: jnxPingProbeHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPingProbeHistoryEntry.setDescription('Each entry provides additional ping history data.')
jnxPingProbeHistoryResponseUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 4, 1, 1), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingProbeHistoryResponseUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingProbeHistoryResponseUs.setDescription('The amount of time measured in microseconds from when a probe was sent to when its response was received or when it timed out. The value of this object is reported as 0 when it is not possible to transmit a probe.')
jnxPingProbeHistoryJitterUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 4, 1, 2), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingProbeHistoryJitterUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingProbeHistoryJitterUs.setDescription('The time difference measured in microseconds between the maximum and minimum round trip times. Each history entry provides a running calculation of the jitter (calculated over the current test) at the time a probe was completed.')
jnxPingProbeHistoryResponseEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 4, 1, 3), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingProbeHistoryResponseEgressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingProbeHistoryResponseEgressUs.setDescription('The amount of time measured in microseconds from when a probe was sent to when it was received by destination. This applies only if the probe type (pingCtlType) provides one way delay measurements. For all other probe types, the value is irrelevant and will return 0.')
jnxPingProbeHistoryResponseIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 4, 1, 4), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingProbeHistoryResponseIngressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingProbeHistoryResponseIngressUs.setDescription('The amount of time measured in microseconds from when a probe was sent from the destination to when it was received. This applies only if the probe type (pingCtlType) provides one way delay measurements. For all other probe types, the value is irrelevant and will return 0.')
jnxPingProbeHistoryEgressJitterUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 4, 1, 5), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingProbeHistoryEgressJitterUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingProbeHistoryEgressJitterUs.setDescription('The time difference measured in microseconds between the maximum and minimum egress trip times. Each history entry provides a running calculation of the jitter (calculated over the current test) at the time a probe was completed. This applies only if the probe type (pingCtlType) provides one way delay measurements. For all other probe types, the value is irrelevant and will return 0.')
jnxPingProbeHistoryIngressJitterUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 4, 1, 6), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingProbeHistoryIngressJitterUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingProbeHistoryIngressJitterUs.setDescription('The time difference measured in microseconds between the maximum and minimum ingress trip times. Each history entry provides a running calculation of the jitter (calculated over the current test) at the time a probe was completed. This applies only if the probe type (pingCtlType) provides one way delay measurements. For all other probe types, the value is irrelevant and will return 0.')
jnxPingLastTestResultTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5), )
if mibBuilder.loadTexts: jnxPingLastTestResultTable.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultTable.setDescription('Stores result of the most recently completed test. Entry corresponding to a test will be created only after completion of first test.')
jnxPingLastTestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1), ).setIndexNames((0, "JUNIPER-PING-MIB", "jnxPingCtlOwnerIndex"), (0, "JUNIPER-PING-MIB", "jnxPingCtlTestName"))
if mibBuilder.loadTexts: jnxPingLastTestResultEntry.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultEntry.setDescription('Each entry provides most recently completed test result.')
jnxPingLastTestResultProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 1), Unsigned32()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultProbeResponses.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultProbeResponses.setDescription('Number of responses received in the most recently completed test.')
jnxPingLastTestResultSentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 2), Unsigned32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultSentProbes.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultSentProbes.setDescription('The value of this object reflects the number of probes sent in the most recently completed test.')
jnxPingLastTestResultSumRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 3), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultSumRttUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultSumRttUs.setDescription('The sum of the round trip delays measured for all the probes during the most recently completed test. Measured in microseconds.')
jnxPingLastTestResultMinRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 4), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultMinRttUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultMinRttUs.setDescription('The minimum of the round trip delays measured for all the probes during the most recently completed test. Measured in microseconds.')
jnxPingLastTestResultMaxRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 5), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultMaxRttUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultMaxRttUs.setDescription('The maximum of the round trip delays measured for all the probes during the most recently completed test. Measured in microseconds.')
jnxPingLastTestResultAvgRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 6), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultAvgRttUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultAvgRttUs.setDescription('The average of the round trip delays measured for all the probes during the most recently completed test. Measured in microseconds.')
jnxPingLastTestResultStdDevRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 7), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultStdDevRttUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultStdDevRttUs.setDescription('The standard deviation of the round trip delays measured during the most recently completed test. Measured in microseconds.')
jnxPingLastTestResultMinEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 8), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultMinEgressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultMinEgressUs.setDescription('The minimum of the egress trip delays measured over all probes during the most recently completed test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingLastTestResultMaxEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 9), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultMaxEgressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultMaxEgressUs.setDescription('The maximum of the egress trip delays measured over all probes during the most recently completed test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingLastTestResultAvgEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 10), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultAvgEgressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultAvgEgressUs.setDescription('The average of the egress trip delays measured over all probes during the most recently completed test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingLastTestResultStddevEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 11), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultStddevEgressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultStddevEgressUs.setDescription('The standard deviation of the egress trip delays measured over all probes during the most recently completed test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingLastTestResultMinIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 12), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultMinIngressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultMinIngressUs.setDescription('The minimum of the ingress trip delays measured for over all probes during the most recently completed test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingLastTestResultMaxIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 13), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultMaxIngressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultMaxIngressUs.setDescription('The maximum of the ingress trip delays measured over all probes during the most recently completed test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingLastTestResultAvgIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 14), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultAvgIngressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultAvgIngressUs.setDescription('The average of the ingress trip delays measured over all probes during the most recently completed test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingLastTestResultStddevIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 15), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultStddevIngressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultStddevIngressUs.setDescription('The standard deviation of the ingress trip delays measured over all probes during the most recently completed test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingLastTestResultPeakToPeakJitterRttUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 16), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultPeakToPeakJitterRttUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultPeakToPeakJitterRttUs.setDescription('This indicates the difference between the min and max delays over the course of the last completed test. Measured in microseconds.')
jnxPingLastTestResultPeakToPeakJitterEgressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 17), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultPeakToPeakJitterEgressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultPeakToPeakJitterEgressUs.setDescription('This indicates the difference between the min and max egress trip delays over the course of the last completed test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingLastTestResultPeakToPeakJitterIngressUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 18), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultPeakToPeakJitterIngressUs.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultPeakToPeakJitterIngressUs.setDescription('This indicates the difference between the min and max ingress trip delays over the course of the last completed test. Measured in microseconds. This applies only if the probe type (pingCtlType) provides one-way delay measurements. For all other probe types, their values are irrelevant and will return 0.')
jnxPingLastTestResultTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 7, 1, 5, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPingLastTestResultTime.setStatus('current')
if mibBuilder.loadTexts: jnxPingLastTestResultTime.setDescription('Timestamp for when the last test was completed.')
jnxPingNotificationPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0))
if mibBuilder.loadTexts: jnxPingNotificationPrefix.setStatus('current')
if mibBuilder.loadTexts: jnxPingNotificationPrefix.setDescription('All Juniper-specific ping notifications are registered under this branch.')
jnxPingRttThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0, 1)).setObjects(("DISMAN-PING-MIB", "pingCtlTargetAddressType"), ("DISMAN-PING-MIB", "pingCtlTargetAddress"), ("DISMAN-PING-MIB", "pingResultsOperStatus"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddressType"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddress"), ("JUNIPER-PING-MIB", "jnxPingResultsMinRttUs"), ("JUNIPER-PING-MIB", "jnxPingResultsMaxRttUs"), ("JUNIPER-PING-MIB", "jnxPingResultsAvgRttUs"), ("DISMAN-PING-MIB", "pingResultsProbeResponses"), ("DISMAN-PING-MIB", "pingResultsSentProbes"), ("DISMAN-PING-MIB", "pingResultsRttSumOfSquares"), ("DISMAN-PING-MIB", "pingResultsLastGoodProbe"), ("JUNIPER-PING-MIB", "jnxPingCtlRttThreshold"), ("JUNIPER-PING-MIB", "jnxPingResultsRttUs"))
if mibBuilder.loadTexts: jnxPingRttThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: jnxPingRttThresholdExceeded.setDescription('This notification is generated when the round trip time (jnxPingCtlRttThreshold) exceeds the configured threshold (jnxPingCtlRttThreshold) and the rttThreshold bit is set in jnxPingCtlTrapGeneration.')
jnxPingRttStdDevThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0, 2)).setObjects(("DISMAN-PING-MIB", "pingCtlTargetAddressType"), ("DISMAN-PING-MIB", "pingCtlTargetAddress"), ("DISMAN-PING-MIB", "pingResultsOperStatus"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddressType"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddress"), ("JUNIPER-PING-MIB", "jnxPingResultsMinRttUs"), ("JUNIPER-PING-MIB", "jnxPingResultsMaxRttUs"), ("JUNIPER-PING-MIB", "jnxPingResultsAvgRttUs"), ("DISMAN-PING-MIB", "pingResultsProbeResponses"), ("DISMAN-PING-MIB", "pingResultsSentProbes"), ("DISMAN-PING-MIB", "pingResultsRttSumOfSquares"), ("DISMAN-PING-MIB", "pingResultsLastGoodProbe"), ("JUNIPER-PING-MIB", "jnxPingCtlRttStdDevThreshold"), ("JUNIPER-PING-MIB", "jnxPingResultsStdDevRttUs"))
if mibBuilder.loadTexts: jnxPingRttStdDevThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: jnxPingRttStdDevThresholdExceeded.setDescription('This notification is generated when the standard deviation of the round trip time (jnxPingResultsStdDevRttUs) exceeds the configured threshold (jnxPingCtlRttStdDevThreshold) and the rttStdDevThreshold bit is set in jnxPingCtlTrapGeneration.')
jnxPingRttJitterThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0, 3)).setObjects(("DISMAN-PING-MIB", "pingCtlTargetAddressType"), ("DISMAN-PING-MIB", "pingCtlTargetAddress"), ("DISMAN-PING-MIB", "pingResultsOperStatus"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddressType"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddress"), ("JUNIPER-PING-MIB", "jnxPingResultsMinRttUs"), ("JUNIPER-PING-MIB", "jnxPingResultsMaxRttUs"), ("JUNIPER-PING-MIB", "jnxPingResultsAvgRttUs"), ("DISMAN-PING-MIB", "pingResultsProbeResponses"), ("DISMAN-PING-MIB", "pingResultsSentProbes"), ("DISMAN-PING-MIB", "pingResultsRttSumOfSquares"), ("DISMAN-PING-MIB", "pingResultsLastGoodProbe"), ("JUNIPER-PING-MIB", "jnxPingCtlRttJitterThreshold"))
if mibBuilder.loadTexts: jnxPingRttJitterThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: jnxPingRttJitterThresholdExceeded.setDescription('This notification is generated when the round trip time jitter (jnxPingResultsMaxRttUs minus jnxPingResultsMinRttUs) exceeds the configured threshold (jnxPingCtlRttJitterThreshold) and the rttJitterThreshold bit is set in jnxPingCtlTrapGeneration.')
jnxPingEgressThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0, 4)).setObjects(("DISMAN-PING-MIB", "pingCtlTargetAddressType"), ("DISMAN-PING-MIB", "pingCtlTargetAddress"), ("DISMAN-PING-MIB", "pingResultsOperStatus"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddressType"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddress"), ("JUNIPER-PING-MIB", "jnxPingResultsMinEgressUs"), ("JUNIPER-PING-MIB", "jnxPingResultsMaxEgressUs"), ("JUNIPER-PING-MIB", "jnxPingResultsAvgEgressUs"), ("DISMAN-PING-MIB", "pingResultsProbeResponses"), ("DISMAN-PING-MIB", "pingResultsSentProbes"), ("DISMAN-PING-MIB", "pingResultsLastGoodProbe"), ("JUNIPER-PING-MIB", "jnxPingCtlEgressTimeThreshold"), ("JUNIPER-PING-MIB", "jnxPingResultsEgressUs"))
if mibBuilder.loadTexts: jnxPingEgressThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: jnxPingEgressThresholdExceeded.setDescription('This notification is generated when the egress time (jnxPingResultsEgressUs) exceeds the configured threshold (jnxPingCtlEgressTimeThreshold) and the egressThreshold bit is set in jnxPingCtlTrapGeneration.')
jnxPingEgressStdDevThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0, 5)).setObjects(("DISMAN-PING-MIB", "pingCtlTargetAddressType"), ("DISMAN-PING-MIB", "pingCtlTargetAddress"), ("DISMAN-PING-MIB", "pingResultsOperStatus"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddressType"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddress"), ("JUNIPER-PING-MIB", "jnxPingResultsMinEgressUs"), ("JUNIPER-PING-MIB", "jnxPingResultsMaxEgressUs"), ("JUNIPER-PING-MIB", "jnxPingResultsAvgEgressUs"), ("DISMAN-PING-MIB", "pingResultsProbeResponses"), ("DISMAN-PING-MIB", "pingResultsSentProbes"), ("DISMAN-PING-MIB", "pingResultsLastGoodProbe"), ("JUNIPER-PING-MIB", "jnxPingResultsStddevEgressUs"), ("JUNIPER-PING-MIB", "jnxPingCtlEgressStdDevThreshold"), ("JUNIPER-PING-MIB", "jnxPingResultsStddevEgressUs"))
if mibBuilder.loadTexts: jnxPingEgressStdDevThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: jnxPingEgressStdDevThresholdExceeded.setDescription('This notification is generated when the standard deviation of the egress time (jnxPingResultsStddevEgressUs) exceeds the configured threshold (jnxPingCtlEgressStdDevThreshold) and the egressStdDevThreshold bit is set in jnxPingCtlTrapGeneration.')
jnxPingEgressJitterThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0, 6)).setObjects(("DISMAN-PING-MIB", "pingCtlTargetAddressType"), ("DISMAN-PING-MIB", "pingCtlTargetAddress"), ("DISMAN-PING-MIB", "pingResultsOperStatus"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddressType"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddress"), ("JUNIPER-PING-MIB", "jnxPingResultsMinEgressUs"), ("JUNIPER-PING-MIB", "jnxPingResultsMaxEgressUs"), ("JUNIPER-PING-MIB", "jnxPingResultsAvgEgressUs"), ("DISMAN-PING-MIB", "pingResultsProbeResponses"), ("DISMAN-PING-MIB", "pingResultsSentProbes"), ("DISMAN-PING-MIB", "pingResultsLastGoodProbe"), ("JUNIPER-PING-MIB", "jnxPingCtlEgressJitterThreshold"))
if mibBuilder.loadTexts: jnxPingEgressJitterThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: jnxPingEgressJitterThresholdExceeded.setDescription('This notification is generated when the egress time jitter (jnxPingResultsMaxEgressUs minus jnxPingResultsMinEgressUs) exceeds the configured threshold (jnxPingCtlEgressJitterThreshold) and the egressJitterThreshold bit is set in jnxPingCtlTrapGeneration.')
jnxPingIngressThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0, 7)).setObjects(("DISMAN-PING-MIB", "pingCtlTargetAddressType"), ("DISMAN-PING-MIB", "pingCtlTargetAddress"), ("DISMAN-PING-MIB", "pingResultsOperStatus"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddressType"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddress"), ("JUNIPER-PING-MIB", "jnxPingResultsMinIngressUs"), ("JUNIPER-PING-MIB", "jnxPingResultsMaxIngressUs"), ("JUNIPER-PING-MIB", "jnxPingResultsAvgIngressUs"), ("DISMAN-PING-MIB", "pingResultsProbeResponses"), ("DISMAN-PING-MIB", "pingResultsSentProbes"), ("DISMAN-PING-MIB", "pingResultsLastGoodProbe"), ("JUNIPER-PING-MIB", "jnxPingCtlIngressTimeThreshold"), ("JUNIPER-PING-MIB", "jnxPingResultsIngressUs"))
if mibBuilder.loadTexts: jnxPingIngressThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: jnxPingIngressThresholdExceeded.setDescription('This notification is generated when the ingress time (jnxPingResultsIngressUs) exceeds the configured threshold (jnxPingCtlIngressTimeThreshold) and the ingressThreshold bit is set in jnxPingCtlTrapGeneration.')
jnxPingIngressStddevThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0, 8)).setObjects(("DISMAN-PING-MIB", "pingCtlTargetAddressType"), ("DISMAN-PING-MIB", "pingCtlTargetAddress"), ("DISMAN-PING-MIB", "pingResultsOperStatus"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddressType"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddress"), ("JUNIPER-PING-MIB", "jnxPingResultsMinIngressUs"), ("JUNIPER-PING-MIB", "jnxPingResultsMaxIngressUs"), ("JUNIPER-PING-MIB", "jnxPingResultsAvgIngressUs"), ("DISMAN-PING-MIB", "pingResultsProbeResponses"), ("DISMAN-PING-MIB", "pingResultsSentProbes"), ("DISMAN-PING-MIB", "pingResultsLastGoodProbe"), ("JUNIPER-PING-MIB", "jnxPingResultsStddevIngressUs"), ("JUNIPER-PING-MIB", "jnxPingCtlIngressStddevThreshold"), ("JUNIPER-PING-MIB", "jnxPingResultsStddevIngressUs"))
if mibBuilder.loadTexts: jnxPingIngressStddevThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: jnxPingIngressStddevThresholdExceeded.setDescription('This notification is generated when the standard deviation of the ingress time (jnxPingResultsStddevIngressUs) exceeds the configured threshold (jnxPingCtlIngressStddevThreshold) and the ingressStdDevThreshold bit is set in jnxPingCtlTrapGeneration.')
jnxPingIngressJitterThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 9, 0, 9)).setObjects(("DISMAN-PING-MIB", "pingCtlTargetAddressType"), ("DISMAN-PING-MIB", "pingCtlTargetAddress"), ("DISMAN-PING-MIB", "pingResultsOperStatus"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddressType"), ("DISMAN-PING-MIB", "pingResultsIpTargetAddress"), ("JUNIPER-PING-MIB", "jnxPingResultsMinIngressUs"), ("JUNIPER-PING-MIB", "jnxPingResultsMaxIngressUs"), ("JUNIPER-PING-MIB", "jnxPingResultsAvgIngressUs"), ("DISMAN-PING-MIB", "pingResultsProbeResponses"), ("DISMAN-PING-MIB", "pingResultsSentProbes"), ("DISMAN-PING-MIB", "pingResultsLastGoodProbe"), ("JUNIPER-PING-MIB", "jnxPingCtlIngressJitterThreshold"))
if mibBuilder.loadTexts: jnxPingIngressJitterThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: jnxPingIngressJitterThresholdExceeded.setDescription('This notification is generated when the ingress time jitter (jnxPingResultsMaxIngressUs minus jnxPingResultsMinIngressUs) exceeds the configured threshold (jnxPingCtlIngressJitterThreshold) and the ingressJitterThreshold bit is set in jnxPingCtlTrapGeneration.')
mibBuilder.exportSymbols("JUNIPER-PING-MIB", jnxPingLastTestResultPeakToPeakJitterEgressUs=jnxPingLastTestResultPeakToPeakJitterEgressUs, jnxPingLastTestResultStdDevRttUs=jnxPingLastTestResultStdDevRttUs, jnxPingProbeHistoryTable=jnxPingProbeHistoryTable, jnxPingCtlMovAvgSize=jnxPingCtlMovAvgSize, jnxPingUdpTimestamp=jnxPingUdpTimestamp, jnxPingEgressStdDevThresholdExceeded=jnxPingEgressStdDevThresholdExceeded, jnxPingEgressJitterThresholdExceeded=jnxPingEgressJitterThresholdExceeded, jnxPingIngressStddevThresholdExceeded=jnxPingIngressStddevThresholdExceeded, jnxPingCtlOneWayHWTimeStamp=jnxPingCtlOneWayHWTimeStamp, jnxPingResultsAvgRttUs=jnxPingResultsAvgRttUs, jnxPingCtlEgressTimeThreshold=jnxPingCtlEgressTimeThreshold, jnxPingIngressThresholdExceeded=jnxPingIngressThresholdExceeded, jnxPingCtlIfName=jnxPingCtlIfName, jnxPingLastTestResultStddevEgressUs=jnxPingLastTestResultStddevEgressUs, jnxPingResultsTestName=jnxPingResultsTestName, jnxPingLastTestResultMaxIngressUs=jnxPingLastTestResultMaxIngressUs, jnxPingResultsMaxEgressUs=jnxPingResultsMaxEgressUs, jnxPingResultsJitterIngressUs=jnxPingResultsJitterIngressUs, jnxPingResultsStdDevRttUs=jnxPingResultsStdDevRttUs, jnxPingCtlRoutingInstanceName=jnxPingCtlRoutingInstanceName, jnxPingProbeHistoryEntry=jnxPingProbeHistoryEntry, jnxPingCtlMXseriesHWTimeStamp=jnxPingCtlMXseriesHWTimeStamp, jnxPingResultsStddevIngressUs=jnxPingResultsStddevIngressUs, jnxPingCtlTrapGeneration=jnxPingCtlTrapGeneration, jnxPingCtlTestName=jnxPingCtlTestName, jnxPingResultsAvgEgressUs=jnxPingResultsAvgEgressUs, jnxPingResultsMinIngressUs=jnxPingResultsMinIngressUs, jnxPingResultsMaxRttUs=jnxPingResultsMaxRttUs, jnxPingLastTestResultTable=jnxPingLastTestResultTable, jnxPingCtlIngressStddevThreshold=jnxPingCtlIngressStddevThreshold, jnxPingCtlJseriesHWTimeStamp=jnxPingCtlJseriesHWTimeStamp, jnxPingResultsRttUs=jnxPingResultsRttUs, jnxPingLastTestResultTime=jnxPingLastTestResultTime, jnxPingLastTestResultMinEgressUs=jnxPingLastTestResultMinEgressUs, jnxPingLastTestResultMaxRttUs=jnxPingLastTestResultMaxRttUs, jnxPingResultsMaxIngressUs=jnxPingResultsMaxIngressUs, jnxPingResultsMinEgressUs=jnxPingResultsMinEgressUs, jnxPingResultsJitterRttUs=jnxPingResultsJitterRttUs, jnxPingRttThresholdExceeded=jnxPingRttThresholdExceeded, jnxPingHttpGet=jnxPingHttpGet, jnxPingCtlEXseriesHWTimeStamp=jnxPingCtlEXseriesHWTimeStamp, jnxPingCtlEgressStdDevThreshold=jnxPingCtlEgressStdDevThreshold, jnxPingLastTestResultMaxEgressUs=jnxPingLastTestResultMaxEgressUs, jnxPingLastTestResultPeakToPeakJitterRttUs=jnxPingLastTestResultPeakToPeakJitterRttUs, PYSNMP_MODULE_ID=jnxPingMIB, jnxPingObjects=jnxPingObjects, jnxPingResultsTime=jnxPingResultsTime, jnxPingCtlRoutingIfIndex=jnxPingCtlRoutingIfIndex, jnxPingLastTestResultAvgRttUs=jnxPingLastTestResultAvgRttUs, jnxPingCtlEgressJitterThreshold=jnxPingCtlEgressJitterThreshold, jnxPingLastTestResultMinRttUs=jnxPingLastTestResultMinRttUs, jnxPingResultsStatus=jnxPingResultsStatus, jnxPingEgressThresholdExceeded=jnxPingEgressThresholdExceeded, jnxPingCtlRttThreshold=jnxPingCtlRttThreshold, jnxPingProbeHistoryJitterUs=jnxPingProbeHistoryJitterUs, jnxPingResultsEntry=jnxPingResultsEntry, jnxPingResultsJitterEgressUs=jnxPingResultsJitterEgressUs, jnxPingCtlTargetPort=jnxPingCtlTargetPort, jnxPingProbeHistoryIngressJitterUs=jnxPingProbeHistoryIngressJitterUs, jnxPingResultsSumRttUs=jnxPingResultsSumRttUs, jnxPingResultsIngressUs=jnxPingResultsIngressUs, jnxPingResultsAvgIngressUs=jnxPingResultsAvgIngressUs, jnxPingLastTestResultSumRttUs=jnxPingLastTestResultSumRttUs, jnxPingNotificationPrefix=jnxPingNotificationPrefix, jnxPingCtlIngressTimeThreshold=jnxPingCtlIngressTimeThreshold, jnxPingResultsMinRttUs=jnxPingResultsMinRttUs, jnxPingResultsOwnerIndex=jnxPingResultsOwnerIndex, jnxPingLastTestResultPeakToPeakJitterIngressUs=jnxPingLastTestResultPeakToPeakJitterIngressUs, jnxPingResultsEgressUs=jnxPingResultsEgressUs, jnxPingDnsQuery=jnxPingDnsQuery, jnxPingIngressJitterThresholdExceeded=jnxPingIngressJitterThresholdExceeded, jnxPingCtlIngressJitterThreshold=jnxPingCtlIngressJitterThreshold, jnxPingProbeHistoryResponseIngressUs=jnxPingProbeHistoryResponseIngressUs, jnxPingCtlRttStdDevThreshold=jnxPingCtlRttStdDevThreshold, jnxPingCtlRttJitterThreshold=jnxPingCtlRttJitterThreshold, jnxPingHttpGetMetadata=jnxPingHttpGetMetadata, jnxPingLastTestResultEntry=jnxPingLastTestResultEntry, jnxPingLastTestResultAvgEgressUs=jnxPingLastTestResultAvgEgressUs, jnxPingRttJitterThresholdExceeded=jnxPingRttJitterThresholdExceeded, jnxPingImplementationTypeDomains=jnxPingImplementationTypeDomains, jnxPingMIB=jnxPingMIB, jnxPingLastTestResultMinIngressUs=jnxPingLastTestResultMinIngressUs, jnxPingLastTestResultStddevIngressUs=jnxPingLastTestResultStddevIngressUs, jnxPingProbeHistoryResponseUs=jnxPingProbeHistoryResponseUs, jnxPingResultsTable=jnxPingResultsTable, jnxPingCtlEntry=jnxPingCtlEntry, jnxPingResultsStddevEgressUs=jnxPingResultsStddevEgressUs, jnxPingLastTestResultSentProbes=jnxPingLastTestResultSentProbes, jnxPingNtpQuery=jnxPingNtpQuery, jnxPingCtlOwnerIndex=jnxPingCtlOwnerIndex, jnxPingLastTestResultAvgIngressUs=jnxPingLastTestResultAvgIngressUs, jnxPingRttStdDevThresholdExceeded=jnxPingRttStdDevThresholdExceeded, jnxPingProbeHistoryResponseEgressUs=jnxPingProbeHistoryResponseEgressUs, jnxPingLastTestResultProbeResponses=jnxPingLastTestResultProbeResponses, jnxPingIcmpTimeStamp=jnxPingIcmpTimeStamp, jnxPingCtlRoutingIfName=jnxPingCtlRoutingIfName, jnxPingProbeHistoryEgressJitterUs=jnxPingProbeHistoryEgressJitterUs, jnxPingCtlTable=jnxPingCtlTable)
