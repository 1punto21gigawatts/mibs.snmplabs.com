#
# PySNMP MIB module Nortel-Magellan-Passport-AtmPnniMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-AtmPnniMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:26:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
atmIfIndex, atmIfVptIndex, atmIfVpt, atmIf = mibBuilder.importSymbols("Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex", "atmIfVptIndex", "atmIfVpt", "atmIf")
DisplayString, StorageType, Integer32, Unsigned32, RowStatus, Gauge32, Counter32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "DisplayString", "StorageType", "Integer32", "Unsigned32", "RowStatus", "Gauge32", "Counter32")
AsciiStringIndex, HexString, FixedPoint1, Hex, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "AsciiStringIndex", "HexString", "FixedPoint1", "Hex", "NonReplicated")
passportMIBs, = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, IpAddress, iso, Unsigned32, TimeTicks, Counter64, Bits, ObjectIdentity, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "IpAddress", "iso", "Unsigned32", "TimeTicks", "Counter64", "Bits", "ObjectIdentity", "Gauge32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
atmPnniMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 72))
atmIfVptPnni = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7))
atmIfVptPnniRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 1), )
if mibBuilder.loadTexts: atmIfVptPnniRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfVptPnni components.')
atmIfVptPnniRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"))
if mibBuilder.loadTexts: atmIfVptPnniRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRowStatusEntry.setDescription('A single entry in the table represents a single atmIfVptPnni component.')
atmIfVptPnniRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfVptPnni components. These components can be added and deleted.')
atmIfVptPnniComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfVptPnniStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniStorageType.setDescription('This variable represents the storage type value for the atmIfVptPnni tables.')
atmIfVptPnniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptPnniIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniIndex.setDescription('This variable represents the index for the atmIfVptPnni tables.')
atmIfVptPnniProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 10), )
if mibBuilder.loadTexts: atmIfVptPnniProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniProvTable.setDescription('This group contains the provisionable attributes for the Pnni component.')
atmIfVptPnniProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"))
if mibBuilder.loadTexts: atmIfVptPnniProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniProvEntry.setDescription('An entry in the atmIfVptPnniProvTable.')
atmIfVptPnniSoftPvcRetryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 999999)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniSoftPvcRetryPeriod.setStatus('obsolete')
if mibBuilder.loadTexts: atmIfVptPnniSoftPvcRetryPeriod.setDescription('This attribute represents the time in seconds to wait between call setup retries. The resolution is to the nearest 10 seconds. This attribute has been obsoleted and is replaced by the softPvpAndPvcRetryPeriod attribute.')
atmIfVptPnniSoftPvpAndPvcRetryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 999999)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniSoftPvpAndPvcRetryPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSoftPvpAndPvcRetryPeriod.setDescription('This attribute represents the time in seconds to wait between soft PVP or soft PVC call setup retries. The resolution is to the nearest 10 seconds.')
atmIfVptPnniSoftPvpAndPvcHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(50, 20000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniSoftPvpAndPvcHoldOffTime.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSoftPvpAndPvcHoldOffTime.setDescription('This attribute specifies how long to hold off retries following a release or the connection. The resolution is to the nearest 50 ms.')
atmIfVptPnniAdminWeightsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 11), )
if mibBuilder.loadTexts: atmIfVptPnniAdminWeightsTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAdminWeightsTable.setDescription('This group contains the provisionable administrative weights for the Pnni component. These weights will be used by Generic Connection Admission Control (GCAC) if administrative weight is the selected optimization criterion.')
atmIfVptPnniAdminWeightsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"))
if mibBuilder.loadTexts: atmIfVptPnniAdminWeightsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAdminWeightsEntry.setDescription('An entry in the atmIfVptPnniAdminWeightsTable.')
atmIfVptPnniCbrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(5040)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniCbrWeight.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniCbrWeight.setDescription('This attribute specifies the administrative weight assigned for setting up switched calls with a service category of Constant Bit Rate (CBR) for this PNNI interface. The value specified will be used by Generic Connection Admission Control (GCAC) if administrative weight is the selected optimization criterion; the higher the value, the less desirable the link will be in path selection.')
atmIfVptPnniRtVbrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(5040)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniRtVbrWeight.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRtVbrWeight.setDescription('This attribute specifies the administrative weight assigned for setting up switched calls with a service category of Real-Time Variable Bit Rate (RT-VBR) for this PNNI interface. The value specified will be used by Generic Connection Admission Control (GCAC) if administrative weight is the selected optimization criterion; the higher the value, the less desirable the link will be in path selection.')
atmIfVptPnniNrtVbrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(5040)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniNrtVbrWeight.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniNrtVbrWeight.setDescription('This attribute specifies the administrative weight assigned for setting up switched calls with a service category of Non Real-Time Variable Bit Rate (NRT-VBR) for this PNNI interface. The value specified will be used by Generic Connection Admission Control (GCAC) if administrative weight is the selected optimization criterion; the higher the value, the less desirable the link will be in path selection.')
atmIfVptPnniUbrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(5040)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniUbrWeight.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniUbrWeight.setDescription('This attribute specifies the administrative weight assigned for setting up switched calls with a service category of Unspecified Bit Rate (UBR) for this PNNI interface. The value specified will be used by Generic Connection Admission Control (GCAC) if administrative weight is the selected optimization criterion; the higher the value, the less desirable the link will be in path selection.')
atmIfVptPnniAcctOptTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 12), )
if mibBuilder.loadTexts: atmIfVptPnniAcctOptTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAcctOptTable.setDescription('This group contains the provisionable attributes for accounting.')
atmIfVptPnniAcctOptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"))
if mibBuilder.loadTexts: atmIfVptPnniAcctOptEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAcctOptEntry.setDescription('An entry in the atmIfVptPnniAcctOptTable.')
atmIfVptPnniAccountCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 12, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniAccountCollection.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAccountCollection.setDescription('This attribute is used to turn accounting on or off for SVC and SPVC connections. It also specifies the reason(s) for which accounting data is collected: billing, test, study, audit, or force. If the set of reasons is not empty then accounting records will be generated by this interface in the following situations: - on a TODA changeover if TODA is enabled; - every 12 hours (per connection) if TODA is disabled; - on every call clear (a call record with final cell counts). If none of the reasons is present, then accounting will be suppressed. The reason for collection is recorded in the accounting record, in the attribute callingCollectReason or calledCollectReason as appropriate. Description of bits: bill(0) test(1) study(2) audit(3) force(4)')
atmIfVptPnniAccountConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("origTerm", 0), ("intermediate", 1))).clone('intermediate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniAccountConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAccountConnectionType.setDescription('This attribute specifies whether accounting records generated by this interface should be marked as originating, terminating or intermediate. This attribute, in combination with the direction of the call, determines the value of attribute connPointType of the accounting record and may be used by downstream accounting processes to correlate the records. If the value is origTerm then records generated for incoming calls will be marked as originating and records generated for outgoing calls will be marked as terminating. If the value is intermediate then records generated for all calls will be marked as intermediate.')
atmIfVptPnniAccountClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniAccountClass.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAccountClass.setDescription('This attribute specifies the accounting class associated with the interface. Its meaning is determined by the network operator. Its value is simply recorded in the accounting records generated by this interface, in the attribute callingServiceType or calledServiceType as appropriate.')
atmIfVptPnniServiceExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniServiceExchange.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniServiceExchange.setDescription('This attribute specifies the data service exchange associated with this interface. Its meaning is determined by the network operator. Its value is simply recorded in the accounting records generated by this interface, in the attribute callingDse or calledDse as appropriate.')
atmIfVptPnniOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 13), )
if mibBuilder.loadTexts: atmIfVptPnniOperationalTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniOperationalTable.setDescription('This group contains the operational attributes for a Pnni component.')
atmIfVptPnniOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"))
if mibBuilder.loadTexts: atmIfVptPnniOperationalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniOperationalEntry.setDescription('An entry in the atmIfVptPnniOperationalTable.')
atmIfVptPnniPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniPortId.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniPortId.setDescription("This attribute indicates the port id of the PNNI interface, which is the parent AtmIf's instance number.")
atmIfVptPnniVProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 14), )
if mibBuilder.loadTexts: atmIfVptPnniVProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniVProvTable.setDescription('This group contains the provisionable attributes for the Pnni component which are specific to virtual PNNI interfaces.')
atmIfVptPnniVProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"))
if mibBuilder.loadTexts: atmIfVptPnniVProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniVProvEntry.setDescription('An entry in the atmIfVptPnniVProvTable.')
atmIfVptPnniVpci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniVpci.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniVpci.setDescription('This attribute specifies the Virtual Path Connection Identifier (VPCI) to be used between this signalling entity and its peer. The VPCI of the peer virtual PNNI must have the same value for switched connections to be set up across the interface.')
atmIfVptPnniSig = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2))
atmIfVptPnniSigRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 1), )
if mibBuilder.loadTexts: atmIfVptPnniSigRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfVptPnniSig components.')
atmIfVptPnniSigRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniSigIndex"))
if mibBuilder.loadTexts: atmIfVptPnniSigRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigRowStatusEntry.setDescription('A single entry in the table represents a single atmIfVptPnniSig component.')
atmIfVptPnniSigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfVptPnniSig components. These components cannot be added nor deleted.')
atmIfVptPnniSigComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfVptPnniSigStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigStorageType.setDescription('This variable represents the storage type value for the atmIfVptPnniSig tables.')
atmIfVptPnniSigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptPnniSigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigIndex.setDescription('This variable represents the index for the atmIfVptPnniSig tables.')
atmIfVptPnniSigProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 10), )
if mibBuilder.loadTexts: atmIfVptPnniSigProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigProvTable.setDescription('This attribute group contains the provisionable attributes for the Signalling component.')
atmIfVptPnniSigProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniSigIndex"))
if mibBuilder.loadTexts: atmIfVptPnniSigProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigProvEntry.setDescription('An entry in the atmIfVptPnniSigProvTable.')
atmIfVptPnniSigVci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniSigVci.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVci.setDescription('This attribute specifies the signalling channel number.')
atmIfVptPnniSigAddressConversion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("nativeE164", 1), ("nsap", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniSigAddressConversion.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigAddressConversion.setDescription('This attribute specifies the address conversion on the outgoing signalling PDUs. The options are none, nativeE164, or nsap. The none option is the default and if this option is chosen then nothing is done to the address information element (IE) in the outgoing signalling message. If nativeE164 option is chosen, then only NSAP encapsulated E.164 addresses with zeros in the ESI are converted to native E.164 format in the outgoing signalling message. If the NSAP address is not encapsulated E.164 or the ESI field is not zeros and the nativeE164 option is chosen, then the call is cleared. If the nsap option is chosen, then native E.164 addresses are converted to NSAP E.164 with zeros in the ESI field; otherwise the address is in NSAP format and is not changed.')
atmIfVptPnniSigStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 11), )
if mibBuilder.loadTexts: atmIfVptPnniSigStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
atmIfVptPnniSigStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniSigIndex"))
if mibBuilder.loadTexts: atmIfVptPnniSigStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigStateEntry.setDescription('An entry in the atmIfVptPnniSigStateTable.')
atmIfVptPnniSigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
atmIfVptPnniSigOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
atmIfVptPnniSigUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
atmIfVptPnniSigOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 12), )
if mibBuilder.loadTexts: atmIfVptPnniSigOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigOperTable.setDescription('This attribute contains the operational attributes for the AtmSignalling component.')
atmIfVptPnniSigOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniSigIndex"))
if mibBuilder.loadTexts: atmIfVptPnniSigOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigOperEntry.setDescription('An entry in the atmIfVptPnniSigOperTable.')
atmIfVptPnniSigLastTxCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigLastTxCauseCode.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigLastTxCauseCode.setDescription('This attribute indicates the cause code in the last transmitted signalling message that contains the CAUSE information element. The cause code is used to describe the reason for generating certain signalling messages.')
atmIfVptPnniSigLastTxDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 12, 1, 2), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigLastTxDiagCode.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigLastTxDiagCode.setDescription('This attribute contains the diagnostic code in the last transmitted signalling message. The diagnostic code is contained in the CAUSE information element and identifies an information element type or timer type. The diagnostic code is present only if a procedural error is detected by the signalling protocol. A diagnostic code is always accompanied by the cause code. If there is no failure, this attribute is set to 0.')
atmIfVptPnniSigLastRxCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigLastRxCauseCode.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigLastRxCauseCode.setDescription('This attribute contains the cause code in the last received signalling message that contains the CAUSE information element. The cause code is used to describe the reason for generating certain signalling messages.')
atmIfVptPnniSigLastRxDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 12, 1, 4), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigLastRxDiagCode.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigLastRxDiagCode.setDescription('This attribute contains the diagnostic code in the last received signalling message. The diagnostic code is contained in the CAUSE information element and identifies an information element type or timer type. The diagnostic code is present only if a procedural error is detected by the signalling protocol. A diagnostic code is always accompanied by the cause code. If there is no failure, this attribute is set to 0.')
atmIfVptPnniSigStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 13), )
if mibBuilder.loadTexts: atmIfVptPnniSigStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigStatsTable.setDescription('This attribute group contains the statistics associated with the AtmSignalling component.')
atmIfVptPnniSigStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniSigIndex"))
if mibBuilder.loadTexts: atmIfVptPnniSigStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigStatsEntry.setDescription('An entry in the atmIfVptPnniSigStatsTable.')
atmIfVptPnniSigCurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigCurrentConnections.setStatus('obsolete')
if mibBuilder.loadTexts: atmIfVptPnniSigCurrentConnections.setDescription('This attribute indicates the total number of currently active connections.')
atmIfVptPnniSigPeakConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 13, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigPeakConnections.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigPeakConnections.setDescription('This attribute indicates the high water mark of active point-to- point and point-to-multipoint connections.')
atmIfVptPnniSigSuccessfulConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigSuccessfulConnections.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigSuccessfulConnections.setDescription('This attribute counts the total number of switched point-to- point and point-to-multipoint connections that were successfully established. The counter wraps to 0 when the maximum value is exceeded.')
atmIfVptPnniSigFailedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigFailedConnections.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigFailedConnections.setDescription('This attribute counts the total number of switched connections that were not successfully established.The counter wraps to 0 when the maximum value is exceeded.')
atmIfVptPnniSigTxPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigTxPdus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigTxPdus.setDescription('This attribute counts the number of transmitted signalling PDUs.The counter wraps to 0 when the maximum value is exceeded.')
atmIfVptPnniSigRxPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigRxPdus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigRxPdus.setDescription('This attribute counts the number of received signalling PDUs.The counter wraps to 0 when the maximum value is exceeded.')
atmIfVptPnniSigCurrentPmpConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 13, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigCurrentPmpConnections.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigCurrentPmpConnections.setDescription('This attribute indicates the number of currently active point-to- multipoint connections.')
atmIfVptPnniSigPeakPmpConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 13, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigPeakPmpConnections.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigPeakPmpConnections.setDescription('This attribute indicates the high water mark of active point-to- multipoint connections.')
atmIfVptPnniSigSuccessfulPmpConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigSuccessfulPmpConnections.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigSuccessfulPmpConnections.setDescription('This attribute counts the total number of switched point-to- multipoint connections that were successfully established. The counter wraps to 0 when the maximum value is exceeded.')
atmIfVptPnniSigFailedPmpConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigFailedPmpConnections.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigFailedPmpConnections.setDescription('This attribute counts the number of switched point-to- multipoint connections that were not successfully established.The counter wraps to 0 when the maximum value is exceeded.')
atmIfVptPnniSigNewCurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 13, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigNewCurrentConnections.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigNewCurrentConnections.setDescription('This attribute indicates the total number of currently active point-to- point and point-to-multipoint connections.')
atmIfVptPnniSigVcd = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2))
atmIfVptPnniSigVcdRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2, 1), )
if mibBuilder.loadTexts: atmIfVptPnniSigVcdRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVcdRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfVptPnniSigVcd components.')
atmIfVptPnniSigVcdRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniSigIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniSigVcdIndex"))
if mibBuilder.loadTexts: atmIfVptPnniSigVcdRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVcdRowStatusEntry.setDescription('A single entry in the table represents a single atmIfVptPnniSigVcd component.')
atmIfVptPnniSigVcdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniSigVcdRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVcdRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfVptPnniSigVcd components. These components can be added and deleted.')
atmIfVptPnniSigVcdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigVcdComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVcdComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfVptPnniSigVcdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniSigVcdStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVcdStorageType.setDescription('This variable represents the storage type value for the atmIfVptPnniSigVcd tables.')
atmIfVptPnniSigVcdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptPnniSigVcdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVcdIndex.setDescription('This variable represents the index for the atmIfVptPnniSigVcd tables.')
atmIfVptPnniSigVcdProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2, 10), )
if mibBuilder.loadTexts: atmIfVptPnniSigVcdProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVcdProvTable.setDescription('This group contains the provisionable traffic attributes for a control channel.')
atmIfVptPnniSigVcdProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniSigIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniSigVcdIndex"))
if mibBuilder.loadTexts: atmIfVptPnniSigVcdProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVcdProvEntry.setDescription('An entry in the atmIfVptPnniSigVcdProvTable.')
atmIfVptPnniSigVcdTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 6, 7, 8))).clone(namedValues=NamedValues(("n3", 3), ("n6", 6), ("n7", 7), ("n8", 8))).clone('n6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniSigVcdTrafficDescType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVcdTrafficDescType.setDescription('This attribute specifies the type of traffic management which is applied to both the transmit and receive direction of this connection as defined in the ATM Forum. The trafficDescType determines the number and meaning of the parameters in the trafficDescParm attribute.')
atmIfVptPnniSigVcdAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3))).clone('rtVariableBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniSigVcdAtmServiceCategory.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVcdAtmServiceCategory.setDescription("This attribute specifies the ATM service category for both directions of the connection. The constantBitRate service category is intended for real time applications, that is those requiring tightly constrained delay and delay variation, as would be appropriate for voice and video applications. The consistent availability of a fixed quantity of bandwidth is considered appropriate for CBR service. Cells which are delayed beyond the value specified by CellTransfer Delay are assumed to be of significantly reduce value to the application. The rtVariableBitRate service category is intended for real time applications, that is those requiring tightly constrained delay and delay variation, as would be appropriate for voice and video applications. Sources are expected to transmit at a rate which varies with time. Equivalently, the source can be described as 'bursty'. Cells which are delayed beyond the value specified by CTD are assumed to be of significantly reduced value to the application. Real time VBR service may support statistical multiplexing of real time sources. The nrtVariableBitRate service category is intended for non-real time applications which have bursty traffic characteristics and which can be characterized in terms of a PCR, SCR, and MBS. For those cells which are transferred within the traffic contract, the application expects a low cell loss ratio. For all connections, it expects a bound on the mean cell transfer delay. Non-real time VBR service may support statistical multiplexing of connections. The unspecifiedBitRate service is intended for non-real time applications; that is, those not requiring tightly constrained delay and delay variation. UBR sources are expected to be bursty. UBR service supports a high degree of statistical multiplexing among sources. UBR service does not specify traffic related service guarantees. No numerical commitments are made with respect to the cell loss ratio experienced by a UBR connection, or as to the cell transfer delay experienced by cells on the connection.")
atmIfVptPnniSigVcdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniSigVcdQosClass.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVcdQosClass.setDescription('This attribute specifies the quality of service for both the forward and backward direction for this connection. Class 1 supports a QOS that meets Service Class A performance requirements (Circuit emulation, constant bit rate video). Class 2 supports a QOS that meets Service Class B performance requirements (Variable bit rate audio and video). Class 3 supports a QOS that meets Service Class C performance requirements (Connection-Oriented Data Transfer). Class 4 supports a QOS that meets Service Class D performance requirements (Connectionless Data Transfer). Class 0 is the unspecified bit rate QOS class; no objective is specified for the performance parameters.')
atmIfVptPnniSigVcdTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2, 10, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniSigVcdTrafficShaping.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVcdTrafficShaping.setDescription("This attribute specifies whether this connection uses traffic shaping when transmitting traffic to the ATM interface. When sameAsCa is selected, traffic shaping for this connection is based on the trafficShaping attribute of the connection's service category component under the AtmIf CA. If the service category has traffic shaping enabled, then traffic shaping is enabled for the connection. Note that enabling traffic shaping may have no effect under certain cases. These cases are listed in the description of the trafficShaping operational attribute, which is under the Vcc Tm and Vpc Tm components. When disabled is selected, traffic shaping for this connection is disabled.")
atmIfVptPnniSigVcdUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2, 10, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsCa", 3))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniSigVcdUnshapedTransmitQueueing.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVcdUnshapedTransmitQueueing.setDescription("This attribute only applies when this connection is unshaped. This attribute specifies the transmit queueing method for this connection if it is unshaped. Refer to the unshapedTransmitQueueing attribute under the AtmIf CA service category subcomponent for more details on the meaning of this attribute. When this attribute is set to sameAsCa, the transmit queueing method for the connection is based on the unshapedTransmitQueueing attribute of the connection's service category component under the ConnectionAdministrator. When this attribute is set to common, transmit traffic on this unshaped connection is destined for the common queue. The value sameAsInterface is for migration from previous software releases, but should no longer be used")
atmIfVptPnniSigVcdUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2, 10, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniSigVcdUsageParameterControl.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVcdUsageParameterControl.setDescription("This attribute specifies whether this connection enforces usage parameter control when receiving traffic from the ATM interface. When sameAsCa is selected, UPC for the connection is based on the usageParameterControl attribute of the connection's service category component under the ConnectionAdministrator. If the service category has UPC enabled, then UPC is enabled for the connection. Note that enabling UPC may have no effect under certain cases. These cases are listed in the description of the usageParameterControl operational attribute, which is under the Vcc Tm or Vpc Tm component. When disabled is selected, UPC for this connection is disabled. The value sameAsInterface is for migration from previous software releases, but should no longer be used")
atmIfVptPnniSigVcdTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2, 387), )
if mibBuilder.loadTexts: atmIfVptPnniSigVcdTdpTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVcdTdpTable.setDescription('This attribute is a vector of five traffic parameters whose meanings are defined by the trafficDescType attribute. The values of peak cell rate (PCR), sustained cell rate (SCR) and requested shaping rate are expressed in cell/s. Maximum burst size (MBS) is expressed in cells. CDVT is expressed in microseconds. The values of PCR, SCR, MBS and CDVT are used for connection admission control (CAC). The value of CDVT is only used for connections where the atmServiceCategory is constantBitRate. For all other values of atmServiceCategory, CDVT is ignored. The values of PCR, SCR and requested shaping rate are used to determine the actual shaping rate where traffic shaping is enabled. When trafficDescType is 3, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameter 1 must be non-zero. Parameters 2 and 3 must be zero. When trafficDescType is 6, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 2 represents the SCR for CLP equal to 0 and 1 traffic; parameter 3 represents the MBS for CLP equal to 0 and 1 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameters 1, 2, and 3 must be non-zero. Parameter 1 must be greater than or equal to parameter 2. Parameter 5 must either be zero (unused) or greater than or equal to parameter 2. When trafficDescType is 7, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 2 represents the SCR for CLP equal to 0 with cell discard; parameter 3 represents the MBS for CLP equal to 0 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameters 1, 2, and 3 must be non-zero. Parameter 1 must be greater than or equal to parameter 2. Parameter 5 must either be zero (unused) or greater than or equal to parameter 2. When trafficDescType is 8, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 2 represents the SCR for CLP equal to 0 traffic with cell tagging; parameter 3 represents the MBS for CLP equal to 0 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameters 1, 2, and 3 must be non-zero. Parameter 1 must be greater than or equal to parameter 2. Parameter 5 must either be zero (unused) or greater than or equal to parameter 2. Whenever it is valid for PCR to be specified, parameter 5 may also be used to specify a requested shaping rate. A non-zero value in parameter 5 overrides the value in parameter 1 and is used as the peak cell rate in calculations of CAC and shaping rate. For trafficDescType 3 the traffic is shaped at the next rate less than the PCR. For trafficDescType 6, 7, and 8, the traffic is shaped at the highest available rate which is between PCR and SCR. However, if there is no available shaping rate between PCR and SCR, traffic is shaped at the next rate above the PCR.')
atmIfVptPnniSigVcdTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2, 387, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniSigIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniSigVcdIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniSigVcdTdpIndex"))
if mibBuilder.loadTexts: atmIfVptPnniSigVcdTdpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVcdTdpEntry.setDescription('An entry in the atmIfVptPnniSigVcdTdpTable.')
atmIfVptPnniSigVcdTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2, 387, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptPnniSigVcdTdpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVcdTdpIndex.setDescription('This variable represents the atmIfVptPnniSigVcdTdpTable specific index for the atmIfVptPnniSigVcdTdpTable.')
atmIfVptPnniSigVcdTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 2, 2, 387, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniSigVcdTdpValue.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniSigVcdTdpValue.setDescription('This variable represents an individual value for the atmIfVptPnniSigVcdTdpTable.')
atmIfVptPnniRcc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3))
atmIfVptPnniRccRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 1), )
if mibBuilder.loadTexts: atmIfVptPnniRccRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfVptPnniRcc components.')
atmIfVptPnniRccRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniRccIndex"))
if mibBuilder.loadTexts: atmIfVptPnniRccRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccRowStatusEntry.setDescription('A single entry in the table represents a single atmIfVptPnniRcc component.')
atmIfVptPnniRccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniRccRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfVptPnniRcc components. These components cannot be added nor deleted.')
atmIfVptPnniRccComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniRccComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfVptPnniRccStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniRccStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccStorageType.setDescription('This variable represents the storage type value for the atmIfVptPnniRcc tables.')
atmIfVptPnniRccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptPnniRccIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccIndex.setDescription('This variable represents the index for the atmIfVptPnniRcc tables.')
atmIfVptPnniRccProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 10), )
if mibBuilder.loadTexts: atmIfVptPnniRccProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccProvTable.setDescription('This group contains the generic provisionable attributes of an Rcc component.')
atmIfVptPnniRccProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniRccIndex"))
if mibBuilder.loadTexts: atmIfVptPnniRccProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccProvEntry.setDescription('An entry in the atmIfVptPnniRccProvTable.')
atmIfVptPnniRccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(18)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniRccVci.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVci.setDescription('This attribute specifies the VCI for the Routing Control Channel (RCC). It is not recommended that the value be changed from the default of 18 unless absolutely necessary. If a different VCI is specified, ensure that the RCC at the far end is provisioned to use the same VCI, otherwise the RCC will not come up.')
atmIfVptPnniRccHlParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 11), )
if mibBuilder.loadTexts: atmIfVptPnniRccHlParmsTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccHlParmsTable.setDescription('This group contains the provisionable Hello protocol parameters for an Rcc component.')
atmIfVptPnniRccHlParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniRccIndex"))
if mibBuilder.loadTexts: atmIfVptPnniRccHlParmsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccHlParmsEntry.setDescription('An entry in the atmIfVptPnniRccHlParmsTable.')
atmIfVptPnniRccHelloHoldDown = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 11, 1, 1), FixedPoint1().subtype(subtypeSpec=ValueRangeConstraint(0, 655350))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniRccHelloHoldDown.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccHelloHoldDown.setDescription('This attribute is used to limit the rate at which this node sends out Hello packets. Specifically, it specifies the minimum time between successive Hellos. A value of 0 specifies that the value provisioned for the helloHoldDown attribute of the ARtg Pnni component should be used.')
atmIfVptPnniRccHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniRccHelloInterval.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccHelloInterval.setDescription('This attribute specifies the duration of the Hello Timer. Every helloInterval seconds, this node will send out a Hello packet to the neighbor node, subject to the helloHoldDown timer having expired at least once since the last Hello packet was sent. A value of 0 specifies that the value provisioned for the helloInterval attribute of the ARtg Pnni component should be used.')
atmIfVptPnniRccHelloInactivityFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniRccHelloInactivityFactor.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccHelloInactivityFactor.setDescription('This attribute specifies the number of Hello intervals allowed to pass without receiving a Hello from the neighbor node, before an attempt is made to re-stage. The hello inactivity timer is enabled in the oneWayInside, twoWayInside, oneWayOutside, twoWayOutside and commonOutside hello states (see the helloState attribute on the Rcc component for a description of these states). Note that the value for the Hello interval used in the calculation is the one specified in the Hello packet from the neighbor node. A value of 0 specifies that the value provisioned for the helloInactivityFactor attribute of the ARtg Pnni component should be used. DESCRIPTION')
atmIfVptPnniRccStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 12), )
if mibBuilder.loadTexts: atmIfVptPnniRccStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
atmIfVptPnniRccStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniRccIndex"))
if mibBuilder.loadTexts: atmIfVptPnniRccStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccStateEntry.setDescription('An entry in the atmIfVptPnniRccStateTable.')
atmIfVptPnniRccAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniRccAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
atmIfVptPnniRccOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniRccOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
atmIfVptPnniRccUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniRccUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
atmIfVptPnniRccOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 13), )
if mibBuilder.loadTexts: atmIfVptPnniRccOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccOperTable.setDescription('This group contains the operational attributes for an Rcc component.')
atmIfVptPnniRccOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniRccIndex"))
if mibBuilder.loadTexts: atmIfVptPnniRccOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccOperEntry.setDescription('An entry in the atmIfVptPnniRccOperTable.')
atmIfVptPnniRccType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("lowestLevelHorizLink", 1), ("lowestLevelOutsideLink", 2), ("horizontalLinkToLGN", 3), ("uplink", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniRccType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccType.setDescription('This attribute indicates the role of this link in the PNNI hierarchy. The following values are possible: unknown: the Hello protocol has not yet determined the role of the link. lowestLevelHorizLink: the link is a horizontal link between two lowest level nodes. lowestLevelOutsideLink: the link is an outside link between two border nodes. horizontalLinkToLgn: the link is a horizontal link to a Logical Group Node (LGN). uplink: the link is a uplink to a higher level LGN.')
atmIfVptPnniRccNegotiatedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unsupported", 0), ("version1point0", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniRccNegotiatedVersion.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccNegotiatedVersion.setDescription('This attribute indicates the PNNI version negotiated with the neighbor node.')
atmIfVptPnniRccHelloState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 0), ("down", 1), ("attempt", 2), ("oneWayInside", 3), ("twoWayInside", 4), ("oneWayOutside", 5), ("twoWayOutside", 6), ("commonOutside", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniRccHelloState.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccHelloState.setDescription("This attribute indicates the state of the Hello protocol exchange over this link. The following are the possible values for this attribute: down: the link is down; no PNNI routing packets will be sent over or received over such a link. This is the initial state of the Hello Finite State Machine, and can also be reached when lower-level protocols have indicated that the link is not usable. attempt: no Hello packets or Hello packets, with mismatch information, have been received recently from the neighbor. Attempts are made to contact the neighbor node by sending out Hello packets every helloInterval seconds. oneWayInside: Hello packets have been recently received from the neighbor and it has been established that both nodes are members of the same peer group, but the remote node ID and remote port ID in the neighbor's Hello packets were set to zero. A Hello packet is sent to the neighbor and the Hello timer is restarted. twoWayInside: Bidirectional communication over this link between this node and the neighbor node has been achieved. oneWayOutside: Hello packets have been recently received from the neighbor and it has been established that both nodes are members of a different peer group, but the remote node ID and remote port ID in the neighbor's Hello packets were set to zero. twoWayOutside: Hellos have recently been received from the neighbor indicating that the neighbor node belongs to a different peer group. The correct remote node ID and remote port ID fields were included in the Hello packet, but the nodal hierarchy list did not include any common peer group. This state can also be reached if a hierarchy mismatch occurs while in the commonOutside state. commonOutside: A common level of the routing hierarchy has been found, in addition to achieving full bi-directional communication between the two nodes.")
atmIfVptPnniRccRemoteNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 13, 1, 4), HexString().subtype(subtypeSpec=ValueSizeConstraint(22, 22)).setFixedLength(22)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniRccRemoteNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccRemoteNodeId.setDescription("This attribute indicates the neighbor node's node id.")
atmIfVptPnniRccRemotePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniRccRemotePortId.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccRemotePortId.setDescription("This attribute indicates the neighbor node's port id.")
atmIfVptPnniRccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 14), )
if mibBuilder.loadTexts: atmIfVptPnniRccStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccStatsTable.setDescription('This group contains the statistical attributes for an Rcc component.')
atmIfVptPnniRccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniRccIndex"))
if mibBuilder.loadTexts: atmIfVptPnniRccStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccStatsEntry.setDescription('An entry in the atmIfVptPnniRccStatsTable.')
atmIfVptPnniRccHelloPacketsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 14, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniRccHelloPacketsRx.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccHelloPacketsRx.setDescription('This attribute counts the total number of Hello packets received across this RCC, including bad and mismatched Hello packets. The counter wraps when it exceeds the maximum value.')
atmIfVptPnniRccHelloPacketsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniRccHelloPacketsTx.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccHelloPacketsTx.setDescription('This attribute counts the total number of Hello packets transmitted across this RCC. The counter wraps when it exceeds the maximum value.')
atmIfVptPnniRccMismatchedHelloPacketsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniRccMismatchedHelloPacketsRx.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccMismatchedHelloPacketsRx.setDescription('This attribute counts the total number of mismatched Hello packets received over this RCC. The counter wraps when it exceeds the maximum value.')
atmIfVptPnniRccBadHelloPacketsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniRccBadHelloPacketsRx.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccBadHelloPacketsRx.setDescription('This attribute counts the total number of bad Hello packets received over this RCC. The counter wraps when it exceeds the maximum value.')
atmIfVptPnniRccVcd = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2))
atmIfVptPnniRccVcdRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2, 1), )
if mibBuilder.loadTexts: atmIfVptPnniRccVcdRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVcdRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfVptPnniRccVcd components.')
atmIfVptPnniRccVcdRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniRccIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniRccVcdIndex"))
if mibBuilder.loadTexts: atmIfVptPnniRccVcdRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVcdRowStatusEntry.setDescription('A single entry in the table represents a single atmIfVptPnniRccVcd component.')
atmIfVptPnniRccVcdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniRccVcdRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVcdRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfVptPnniRccVcd components. These components can be added and deleted.')
atmIfVptPnniRccVcdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniRccVcdComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVcdComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfVptPnniRccVcdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniRccVcdStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVcdStorageType.setDescription('This variable represents the storage type value for the atmIfVptPnniRccVcd tables.')
atmIfVptPnniRccVcdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptPnniRccVcdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVcdIndex.setDescription('This variable represents the index for the atmIfVptPnniRccVcd tables.')
atmIfVptPnniRccVcdProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2, 10), )
if mibBuilder.loadTexts: atmIfVptPnniRccVcdProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVcdProvTable.setDescription('This group contains the provisionable traffic attributes for a control channel.')
atmIfVptPnniRccVcdProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniRccIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniRccVcdIndex"))
if mibBuilder.loadTexts: atmIfVptPnniRccVcdProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVcdProvEntry.setDescription('An entry in the atmIfVptPnniRccVcdProvTable.')
atmIfVptPnniRccVcdTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 6, 7, 8))).clone(namedValues=NamedValues(("n3", 3), ("n6", 6), ("n7", 7), ("n8", 8))).clone('n6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniRccVcdTrafficDescType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVcdTrafficDescType.setDescription('This attribute specifies the type of traffic management which is applied to both the transmit and receive direction of this connection as defined in the ATM Forum. The trafficDescType determines the number and meaning of the parameters in the trafficDescParm attribute.')
atmIfVptPnniRccVcdAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3))).clone('rtVariableBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniRccVcdAtmServiceCategory.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVcdAtmServiceCategory.setDescription("This attribute specifies the ATM service category for both directions of the connection. The constantBitRate service category is intended for real time applications, that is those requiring tightly constrained delay and delay variation, as would be appropriate for voice and video applications. The consistent availability of a fixed quantity of bandwidth is considered appropriate for CBR service. Cells which are delayed beyond the value specified by CellTransfer Delay are assumed to be of significantly reduce value to the application. The rtVariableBitRate service category is intended for real time applications, that is those requiring tightly constrained delay and delay variation, as would be appropriate for voice and video applications. Sources are expected to transmit at a rate which varies with time. Equivalently, the source can be described as 'bursty'. Cells which are delayed beyond the value specified by CTD are assumed to be of significantly reduced value to the application. Real time VBR service may support statistical multiplexing of real time sources. The nrtVariableBitRate service category is intended for non-real time applications which have bursty traffic characteristics and which can be characterized in terms of a PCR, SCR, and MBS. For those cells which are transferred within the traffic contract, the application expects a low cell loss ratio. For all connections, it expects a bound on the mean cell transfer delay. Non-real time VBR service may support statistical multiplexing of connections. The unspecifiedBitRate service is intended for non-real time applications; that is, those not requiring tightly constrained delay and delay variation. UBR sources are expected to be bursty. UBR service supports a high degree of statistical multiplexing among sources. UBR service does not specify traffic related service guarantees. No numerical commitments are made with respect to the cell loss ratio experienced by a UBR connection, or as to the cell transfer delay experienced by cells on the connection.")
atmIfVptPnniRccVcdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniRccVcdQosClass.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVcdQosClass.setDescription('This attribute specifies the quality of service for both the forward and backward direction for this connection. Class 1 supports a QOS that meets Service Class A performance requirements (Circuit emulation, constant bit rate video). Class 2 supports a QOS that meets Service Class B performance requirements (Variable bit rate audio and video). Class 3 supports a QOS that meets Service Class C performance requirements (Connection-Oriented Data Transfer). Class 4 supports a QOS that meets Service Class D performance requirements (Connectionless Data Transfer). Class 0 is the unspecified bit rate QOS class; no objective is specified for the performance parameters.')
atmIfVptPnniRccVcdTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2, 10, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniRccVcdTrafficShaping.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVcdTrafficShaping.setDescription("This attribute specifies whether this connection uses traffic shaping when transmitting traffic to the ATM interface. When sameAsCa is selected, traffic shaping for this connection is based on the trafficShaping attribute of the connection's service category component under the AtmIf CA. If the service category has traffic shaping enabled, then traffic shaping is enabled for the connection. Note that enabling traffic shaping may have no effect under certain cases. These cases are listed in the description of the trafficShaping operational attribute, which is under the Vcc Tm and Vpc Tm components. When disabled is selected, traffic shaping for this connection is disabled.")
atmIfVptPnniRccVcdUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2, 10, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsCa", 3))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniRccVcdUnshapedTransmitQueueing.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVcdUnshapedTransmitQueueing.setDescription("This attribute only applies when this connection is unshaped. This attribute specifies the transmit queueing method for this connection if it is unshaped. Refer to the unshapedTransmitQueueing attribute under the AtmIf CA service category subcomponent for more details on the meaning of this attribute. When this attribute is set to sameAsCa, the transmit queueing method for the connection is based on the unshapedTransmitQueueing attribute of the connection's service category component under the ConnectionAdministrator. When this attribute is set to common, transmit traffic on this unshaped connection is destined for the common queue. The value sameAsInterface is for migration from previous software releases, but should no longer be used")
atmIfVptPnniRccVcdUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2, 10, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniRccVcdUsageParameterControl.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVcdUsageParameterControl.setDescription("This attribute specifies whether this connection enforces usage parameter control when receiving traffic from the ATM interface. When sameAsCa is selected, UPC for the connection is based on the usageParameterControl attribute of the connection's service category component under the ConnectionAdministrator. If the service category has UPC enabled, then UPC is enabled for the connection. Note that enabling UPC may have no effect under certain cases. These cases are listed in the description of the usageParameterControl operational attribute, which is under the Vcc Tm or Vpc Tm component. When disabled is selected, UPC for this connection is disabled. The value sameAsInterface is for migration from previous software releases, but should no longer be used")
atmIfVptPnniRccVcdTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2, 387), )
if mibBuilder.loadTexts: atmIfVptPnniRccVcdTdpTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVcdTdpTable.setDescription('This attribute is a vector of five traffic parameters whose meanings are defined by the trafficDescType attribute. The values of peak cell rate (PCR), sustained cell rate (SCR) and requested shaping rate are expressed in cell/s. Maximum burst size (MBS) is expressed in cells. CDVT is expressed in microseconds. The values of PCR, SCR, MBS and CDVT are used for connection admission control (CAC). The value of CDVT is only used for connections where the atmServiceCategory is constantBitRate. For all other values of atmServiceCategory, CDVT is ignored. The values of PCR, SCR and requested shaping rate are used to determine the actual shaping rate where traffic shaping is enabled. When trafficDescType is 3, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameter 1 must be non-zero. Parameters 2 and 3 must be zero. When trafficDescType is 6, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 2 represents the SCR for CLP equal to 0 and 1 traffic; parameter 3 represents the MBS for CLP equal to 0 and 1 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameters 1, 2, and 3 must be non-zero. Parameter 1 must be greater than or equal to parameter 2. Parameter 5 must either be zero (unused) or greater than or equal to parameter 2. When trafficDescType is 7, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 2 represents the SCR for CLP equal to 0 with cell discard; parameter 3 represents the MBS for CLP equal to 0 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameters 1, 2, and 3 must be non-zero. Parameter 1 must be greater than or equal to parameter 2. Parameter 5 must either be zero (unused) or greater than or equal to parameter 2. When trafficDescType is 8, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 2 represents the SCR for CLP equal to 0 traffic with cell tagging; parameter 3 represents the MBS for CLP equal to 0 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameters 1, 2, and 3 must be non-zero. Parameter 1 must be greater than or equal to parameter 2. Parameter 5 must either be zero (unused) or greater than or equal to parameter 2. Whenever it is valid for PCR to be specified, parameter 5 may also be used to specify a requested shaping rate. A non-zero value in parameter 5 overrides the value in parameter 1 and is used as the peak cell rate in calculations of CAC and shaping rate. For trafficDescType 3 the traffic is shaped at the next rate less than the PCR. For trafficDescType 6, 7, and 8, the traffic is shaped at the highest available rate which is between PCR and SCR. However, if there is no available shaping rate between PCR and SCR, traffic is shaped at the next rate above the PCR.')
atmIfVptPnniRccVcdTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2, 387, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniRccIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniRccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniRccVcdTdpIndex"))
if mibBuilder.loadTexts: atmIfVptPnniRccVcdTdpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVcdTdpEntry.setDescription('An entry in the atmIfVptPnniRccVcdTdpTable.')
atmIfVptPnniRccVcdTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2, 387, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfVptPnniRccVcdTdpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVcdTdpIndex.setDescription('This variable represents the atmIfVptPnniRccVcdTdpTable specific index for the atmIfVptPnniRccVcdTdpTable.')
atmIfVptPnniRccVcdTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 3, 2, 387, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniRccVcdTdpValue.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniRccVcdTdpValue.setDescription('This variable represents an individual value for the atmIfVptPnniRccVcdTdpTable.')
atmIfVptPnniAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4))
atmIfVptPnniAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 1), )
if mibBuilder.loadTexts: atmIfVptPnniAddrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfVptPnniAddr components.')
atmIfVptPnniAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniAddrAddressIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniAddrAddressTypeIndex"))
if mibBuilder.loadTexts: atmIfVptPnniAddrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrRowStatusEntry.setDescription('A single entry in the table represents a single atmIfVptPnniAddr component.')
atmIfVptPnniAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniAddrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfVptPnniAddr components. These components can be added and deleted.')
atmIfVptPnniAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniAddrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfVptPnniAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniAddrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrStorageType.setDescription('This variable represents the storage type value for the atmIfVptPnniAddr tables.')
atmIfVptPnniAddrAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 40)))
if mibBuilder.loadTexts: atmIfVptPnniAddrAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrAddressIndex.setDescription('This variable represents an index for the atmIfVptPnniAddr tables.')
atmIfVptPnniAddrAddressTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("primary", 0), ("alternate", 1), ("registered", 2), ("default", 3))))
if mibBuilder.loadTexts: atmIfVptPnniAddrAddressTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrAddressTypeIndex.setDescription('This variable represents an index for the atmIfVptPnniAddr tables.')
atmIfVptPnniAddrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 10), )
if mibBuilder.loadTexts: atmIfVptPnniAddrOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrOperTable.setDescription('This attribute group contains the operational attributes for the Address component.')
atmIfVptPnniAddrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniAddrAddressIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniAddrAddressTypeIndex"))
if mibBuilder.loadTexts: atmIfVptPnniAddrOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrOperEntry.setDescription('An entry in the atmIfVptPnniAddrOperTable.')
atmIfVptPnniAddrScope = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 104))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniAddrScope.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrScope.setDescription('This attribute indicates the scope of the ATM address, which is the highest level to which this address will be advertised in the PNNI hierarchy. If no PnniInfo subcomponent has been provisioned, then the scope will default to the level of this node in the PNNI hierarchy. If this node does not participate in a PNNI hierarchy, then this attribute will have the value of -1.')
atmIfVptPnniAddrReachability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("internal", 0), ("exterior", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniAddrReachability.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrReachability.setDescription('This attribute indicates whether the address is internal or exterior. An internal reachable address is an address of a destination that is directly attached to the logical node advertising the address. An exterior reachable address is an address that can be reached through a PNNI routing domain, but which is not located in that PNNI routing domain.')
atmIfVptPnniAddrTermSP = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 2))
atmIfVptPnniAddrTermSPRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 2, 1), )
if mibBuilder.loadTexts: atmIfVptPnniAddrTermSPRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrTermSPRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfVptPnniAddrTermSP components.')
atmIfVptPnniAddrTermSPRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniAddrAddressIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniAddrAddressTypeIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniAddrTermSPIndex"))
if mibBuilder.loadTexts: atmIfVptPnniAddrTermSPRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrTermSPRowStatusEntry.setDescription('A single entry in the table represents a single atmIfVptPnniAddrTermSP component.')
atmIfVptPnniAddrTermSPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniAddrTermSPRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrTermSPRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfVptPnniAddrTermSP components. These components can be added and deleted.')
atmIfVptPnniAddrTermSPComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniAddrTermSPComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrTermSPComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfVptPnniAddrTermSPStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniAddrTermSPStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrTermSPStorageType.setDescription('This variable represents the storage type value for the atmIfVptPnniAddrTermSP tables.')
atmIfVptPnniAddrTermSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptPnniAddrTermSPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrTermSPIndex.setDescription('This variable represents the index for the atmIfVptPnniAddrTermSP tables.')
atmIfVptPnniAddrPnniInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 3))
atmIfVptPnniAddrPnniInfoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 3, 1), )
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfVptPnniAddrPnniInfo components.')
atmIfVptPnniAddrPnniInfoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniAddrAddressIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniAddrAddressTypeIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniAddrPnniInfoIndex"))
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoRowStatusEntry.setDescription('A single entry in the table represents a single atmIfVptPnniAddrPnniInfo component.')
atmIfVptPnniAddrPnniInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfVptPnniAddrPnniInfo components. These components can be added and deleted.')
atmIfVptPnniAddrPnniInfoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfVptPnniAddrPnniInfoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoStorageType.setDescription('This variable represents the storage type value for the atmIfVptPnniAddrPnniInfo tables.')
atmIfVptPnniAddrPnniInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoIndex.setDescription('This variable represents the index for the atmIfVptPnniAddrPnniInfo tables.')
atmIfVptPnniAddrPnniInfoProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 3, 10), )
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoProvTable.setDescription('This attribute group contains the provisioned attributes relating to PNNI for a PnniInfo component.')
atmIfVptPnniAddrPnniInfoProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfVptIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniAddrAddressIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniAddrAddressTypeIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfVptPnniAddrPnniInfoIndex"))
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoProvEntry.setDescription('An entry in the atmIfVptPnniAddrPnniInfoProvTable.')
atmIfVptPnniAddrPnniInfoScope = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 104)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoScope.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoScope.setDescription('This attribute specifies the scope of the ATM address, which is the highest level up to which this address will be advertised in the PNNI hierarchy. The scope must be set to a value numerically less than or equal to the level of the lowest level peer group containing this node. Setting the scope to 0 will cause the address to be advertised globally within this PNNI routing domain.')
atmIfVptPnniAddrPnniInfoReachability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 9, 7, 4, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("internal", 0), ("exterior", 1))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoReachability.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfVptPnniAddrPnniInfoReachability.setDescription('This attribute indicates whether the address is internal or exterior. An internal reachable address is an address of a destination that is directly attached to the logical node advertising the address. An exterior reachable address is an address that can be reached through a PNNI routing domain, but which is not located in that PNNI routing domain.')
atmIfPnni = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96))
atmIfPnniRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 1), )
if mibBuilder.loadTexts: atmIfPnniRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfPnni components.')
atmIfPnniRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"))
if mibBuilder.loadTexts: atmIfPnniRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRowStatusEntry.setDescription('A single entry in the table represents a single atmIfPnni component.')
atmIfPnniRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfPnni components. These components can be added and deleted.')
atmIfPnniComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfPnniStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniStorageType.setDescription('This variable represents the storage type value for the atmIfPnni tables.')
atmIfPnniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfPnniIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniIndex.setDescription('This variable represents the index for the atmIfPnni tables.')
atmIfPnniProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 10), )
if mibBuilder.loadTexts: atmIfPnniProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniProvTable.setDescription('This group contains the provisionable attributes for the Pnni component.')
atmIfPnniProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"))
if mibBuilder.loadTexts: atmIfPnniProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniProvEntry.setDescription('An entry in the atmIfPnniProvTable.')
atmIfPnniSoftPvcRetryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 999999)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniSoftPvcRetryPeriod.setStatus('obsolete')
if mibBuilder.loadTexts: atmIfPnniSoftPvcRetryPeriod.setDescription('This attribute represents the time in seconds to wait between call setup retries. The resolution is to the nearest 10 seconds. This attribute has been obsoleted and is replaced by the softPvpAndPvcRetryPeriod attribute.')
atmIfPnniSoftPvpAndPvcRetryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 999999)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniSoftPvpAndPvcRetryPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSoftPvpAndPvcRetryPeriod.setDescription('This attribute represents the time in seconds to wait between soft PVP or soft PVC call setup retries. The resolution is to the nearest 10 seconds.')
atmIfPnniSoftPvpAndPvcHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(50, 20000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniSoftPvpAndPvcHoldOffTime.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSoftPvpAndPvcHoldOffTime.setDescription('This attribute specifies how long to hold off retries following a release or the connection. The resolution is to the nearest 50 ms.')
atmIfPnniAdminWeightsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 11), )
if mibBuilder.loadTexts: atmIfPnniAdminWeightsTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAdminWeightsTable.setDescription('This group contains the provisionable administrative weights for the Pnni component. These weights will be used by Generic Connection Admission Control (GCAC) if administrative weight is the selected optimization criterion.')
atmIfPnniAdminWeightsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"))
if mibBuilder.loadTexts: atmIfPnniAdminWeightsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAdminWeightsEntry.setDescription('An entry in the atmIfPnniAdminWeightsTable.')
atmIfPnniCbrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(5040)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniCbrWeight.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniCbrWeight.setDescription('This attribute specifies the administrative weight assigned for setting up switched calls with a service category of Constant Bit Rate (CBR) for this PNNI interface. The value specified will be used by Generic Connection Admission Control (GCAC) if administrative weight is the selected optimization criterion; the higher the value, the less desirable the link will be in path selection.')
atmIfPnniRtVbrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(5040)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniRtVbrWeight.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRtVbrWeight.setDescription('This attribute specifies the administrative weight assigned for setting up switched calls with a service category of Real-Time Variable Bit Rate (RT-VBR) for this PNNI interface. The value specified will be used by Generic Connection Admission Control (GCAC) if administrative weight is the selected optimization criterion; the higher the value, the less desirable the link will be in path selection.')
atmIfPnniNrtVbrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(5040)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniNrtVbrWeight.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniNrtVbrWeight.setDescription('This attribute specifies the administrative weight assigned for setting up switched calls with a service category of Non Real-Time Variable Bit Rate (NRT-VBR) for this PNNI interface. The value specified will be used by Generic Connection Admission Control (GCAC) if administrative weight is the selected optimization criterion; the higher the value, the less desirable the link will be in path selection.')
atmIfPnniUbrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(5040)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniUbrWeight.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniUbrWeight.setDescription('This attribute specifies the administrative weight assigned for setting up switched calls with a service category of Unspecified Bit Rate (UBR) for this PNNI interface. The value specified will be used by Generic Connection Admission Control (GCAC) if administrative weight is the selected optimization criterion; the higher the value, the less desirable the link will be in path selection.')
atmIfPnniAcctOptTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 12), )
if mibBuilder.loadTexts: atmIfPnniAcctOptTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAcctOptTable.setDescription('This group contains the provisionable attributes for accounting.')
atmIfPnniAcctOptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"))
if mibBuilder.loadTexts: atmIfPnniAcctOptEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAcctOptEntry.setDescription('An entry in the atmIfPnniAcctOptTable.')
atmIfPnniAccountCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 12, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniAccountCollection.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAccountCollection.setDescription('This attribute is used to turn accounting on or off for SVC and SPVC connections. It also specifies the reason(s) for which accounting data is collected: billing, test, study, audit, or force. If the set of reasons is not empty then accounting records will be generated by this interface in the following situations: - on a TODA changeover if TODA is enabled; - every 12 hours (per connection) if TODA is disabled; - on every call clear (a call record with final cell counts). If none of the reasons is present, then accounting will be suppressed. The reason for collection is recorded in the accounting record, in the attribute callingCollectReason or calledCollectReason as appropriate. Description of bits: bill(0) test(1) study(2) audit(3) force(4)')
atmIfPnniAccountConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("origTerm", 0), ("intermediate", 1))).clone('intermediate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniAccountConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAccountConnectionType.setDescription('This attribute specifies whether accounting records generated by this interface should be marked as originating, terminating or intermediate. This attribute, in combination with the direction of the call, determines the value of attribute connPointType of the accounting record and may be used by downstream accounting processes to correlate the records. If the value is origTerm then records generated for incoming calls will be marked as originating and records generated for outgoing calls will be marked as terminating. If the value is intermediate then records generated for all calls will be marked as intermediate.')
atmIfPnniAccountClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniAccountClass.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAccountClass.setDescription('This attribute specifies the accounting class associated with the interface. Its meaning is determined by the network operator. Its value is simply recorded in the accounting records generated by this interface, in the attribute callingServiceType or calledServiceType as appropriate.')
atmIfPnniServiceExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniServiceExchange.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniServiceExchange.setDescription('This attribute specifies the data service exchange associated with this interface. Its meaning is determined by the network operator. Its value is simply recorded in the accounting records generated by this interface, in the attribute callingDse or calledDse as appropriate.')
atmIfPnniOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 13), )
if mibBuilder.loadTexts: atmIfPnniOperationalTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniOperationalTable.setDescription('This group contains the operational attributes for a Pnni component.')
atmIfPnniOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"))
if mibBuilder.loadTexts: atmIfPnniOperationalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniOperationalEntry.setDescription('An entry in the atmIfPnniOperationalTable.')
atmIfPnniPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniPortId.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniPortId.setDescription("This attribute indicates the port id of the PNNI interface, which is the parent AtmIf's instance number.")
atmIfPnniSig = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2))
atmIfPnniSigRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 1), )
if mibBuilder.loadTexts: atmIfPnniSigRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfPnniSig components.')
atmIfPnniSigRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniSigIndex"))
if mibBuilder.loadTexts: atmIfPnniSigRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigRowStatusEntry.setDescription('A single entry in the table represents a single atmIfPnniSig component.')
atmIfPnniSigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfPnniSig components. These components cannot be added nor deleted.')
atmIfPnniSigComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfPnniSigStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigStorageType.setDescription('This variable represents the storage type value for the atmIfPnniSig tables.')
atmIfPnniSigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfPnniSigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigIndex.setDescription('This variable represents the index for the atmIfPnniSig tables.')
atmIfPnniSigProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 10), )
if mibBuilder.loadTexts: atmIfPnniSigProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigProvTable.setDescription('This attribute group contains the provisionable attributes for the Signalling component.')
atmIfPnniSigProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniSigIndex"))
if mibBuilder.loadTexts: atmIfPnniSigProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigProvEntry.setDescription('An entry in the atmIfPnniSigProvTable.')
atmIfPnniSigVci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniSigVci.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVci.setDescription('This attribute specifies the signalling channel number.')
atmIfPnniSigAddressConversion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("nativeE164", 1), ("nsap", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniSigAddressConversion.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigAddressConversion.setDescription('This attribute specifies the address conversion on the outgoing signalling PDUs. The options are none, nativeE164, or nsap. The none option is the default and if this option is chosen then nothing is done to the address information element (IE) in the outgoing signalling message. If nativeE164 option is chosen, then only NSAP encapsulated E.164 addresses with zeros in the ESI are converted to native E.164 format in the outgoing signalling message. If the NSAP address is not encapsulated E.164 or the ESI field is not zeros and the nativeE164 option is chosen, then the call is cleared. If the nsap option is chosen, then native E.164 addresses are converted to NSAP E.164 with zeros in the ESI field; otherwise the address is in NSAP format and is not changed.')
atmIfPnniSigStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 11), )
if mibBuilder.loadTexts: atmIfPnniSigStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
atmIfPnniSigStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniSigIndex"))
if mibBuilder.loadTexts: atmIfPnniSigStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigStateEntry.setDescription('An entry in the atmIfPnniSigStateTable.')
atmIfPnniSigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
atmIfPnniSigOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
atmIfPnniSigUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
atmIfPnniSigOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 12), )
if mibBuilder.loadTexts: atmIfPnniSigOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigOperTable.setDescription('This attribute contains the operational attributes for the AtmSignalling component.')
atmIfPnniSigOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniSigIndex"))
if mibBuilder.loadTexts: atmIfPnniSigOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigOperEntry.setDescription('An entry in the atmIfPnniSigOperTable.')
atmIfPnniSigLastTxCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigLastTxCauseCode.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigLastTxCauseCode.setDescription('This attribute indicates the cause code in the last transmitted signalling message that contains the CAUSE information element. The cause code is used to describe the reason for generating certain signalling messages.')
atmIfPnniSigLastTxDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 12, 1, 2), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigLastTxDiagCode.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigLastTxDiagCode.setDescription('This attribute contains the diagnostic code in the last transmitted signalling message. The diagnostic code is contained in the CAUSE information element and identifies an information element type or timer type. The diagnostic code is present only if a procedural error is detected by the signalling protocol. A diagnostic code is always accompanied by the cause code. If there is no failure, this attribute is set to 0.')
atmIfPnniSigLastRxCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigLastRxCauseCode.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigLastRxCauseCode.setDescription('This attribute contains the cause code in the last received signalling message that contains the CAUSE information element. The cause code is used to describe the reason for generating certain signalling messages.')
atmIfPnniSigLastRxDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 12, 1, 4), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigLastRxDiagCode.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigLastRxDiagCode.setDescription('This attribute contains the diagnostic code in the last received signalling message. The diagnostic code is contained in the CAUSE information element and identifies an information element type or timer type. The diagnostic code is present only if a procedural error is detected by the signalling protocol. A diagnostic code is always accompanied by the cause code. If there is no failure, this attribute is set to 0.')
atmIfPnniSigStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 13), )
if mibBuilder.loadTexts: atmIfPnniSigStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigStatsTable.setDescription('This attribute group contains the statistics associated with the AtmSignalling component.')
atmIfPnniSigStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniSigIndex"))
if mibBuilder.loadTexts: atmIfPnniSigStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigStatsEntry.setDescription('An entry in the atmIfPnniSigStatsTable.')
atmIfPnniSigCurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigCurrentConnections.setStatus('obsolete')
if mibBuilder.loadTexts: atmIfPnniSigCurrentConnections.setDescription('This attribute indicates the total number of currently active connections.')
atmIfPnniSigPeakConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 13, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigPeakConnections.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigPeakConnections.setDescription('This attribute indicates the high water mark of active point-to- point and point-to-multipoint connections.')
atmIfPnniSigSuccessfulConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigSuccessfulConnections.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigSuccessfulConnections.setDescription('This attribute counts the total number of switched point-to- point and point-to-multipoint connections that were successfully established. The counter wraps to 0 when the maximum value is exceeded.')
atmIfPnniSigFailedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigFailedConnections.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigFailedConnections.setDescription('This attribute counts the total number of switched connections that were not successfully established.The counter wraps to 0 when the maximum value is exceeded.')
atmIfPnniSigTxPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigTxPdus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigTxPdus.setDescription('This attribute counts the number of transmitted signalling PDUs.The counter wraps to 0 when the maximum value is exceeded.')
atmIfPnniSigRxPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigRxPdus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigRxPdus.setDescription('This attribute counts the number of received signalling PDUs.The counter wraps to 0 when the maximum value is exceeded.')
atmIfPnniSigCurrentPmpConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 13, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigCurrentPmpConnections.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigCurrentPmpConnections.setDescription('This attribute indicates the number of currently active point-to- multipoint connections.')
atmIfPnniSigPeakPmpConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 13, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigPeakPmpConnections.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigPeakPmpConnections.setDescription('This attribute indicates the high water mark of active point-to- multipoint connections.')
atmIfPnniSigSuccessfulPmpConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigSuccessfulPmpConnections.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigSuccessfulPmpConnections.setDescription('This attribute counts the total number of switched point-to- multipoint connections that were successfully established. The counter wraps to 0 when the maximum value is exceeded.')
atmIfPnniSigFailedPmpConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigFailedPmpConnections.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigFailedPmpConnections.setDescription('This attribute counts the number of switched point-to- multipoint connections that were not successfully established.The counter wraps to 0 when the maximum value is exceeded.')
atmIfPnniSigNewCurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 13, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigNewCurrentConnections.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigNewCurrentConnections.setDescription('This attribute indicates the total number of currently active point-to- point and point-to-multipoint connections.')
atmIfPnniSigVcd = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2))
atmIfPnniSigVcdRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2, 1), )
if mibBuilder.loadTexts: atmIfPnniSigVcdRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVcdRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfPnniSigVcd components.')
atmIfPnniSigVcdRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniSigIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniSigVcdIndex"))
if mibBuilder.loadTexts: atmIfPnniSigVcdRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVcdRowStatusEntry.setDescription('A single entry in the table represents a single atmIfPnniSigVcd component.')
atmIfPnniSigVcdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniSigVcdRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVcdRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfPnniSigVcd components. These components can be added and deleted.')
atmIfPnniSigVcdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigVcdComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVcdComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfPnniSigVcdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniSigVcdStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVcdStorageType.setDescription('This variable represents the storage type value for the atmIfPnniSigVcd tables.')
atmIfPnniSigVcdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfPnniSigVcdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVcdIndex.setDescription('This variable represents the index for the atmIfPnniSigVcd tables.')
atmIfPnniSigVcdProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2, 10), )
if mibBuilder.loadTexts: atmIfPnniSigVcdProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVcdProvTable.setDescription('This group contains the provisionable traffic attributes for a control channel.')
atmIfPnniSigVcdProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniSigIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniSigVcdIndex"))
if mibBuilder.loadTexts: atmIfPnniSigVcdProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVcdProvEntry.setDescription('An entry in the atmIfPnniSigVcdProvTable.')
atmIfPnniSigVcdTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 6, 7, 8))).clone(namedValues=NamedValues(("n3", 3), ("n6", 6), ("n7", 7), ("n8", 8))).clone('n6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniSigVcdTrafficDescType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVcdTrafficDescType.setDescription('This attribute specifies the type of traffic management which is applied to both the transmit and receive direction of this connection as defined in the ATM Forum. The trafficDescType determines the number and meaning of the parameters in the trafficDescParm attribute.')
atmIfPnniSigVcdAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3))).clone('rtVariableBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniSigVcdAtmServiceCategory.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVcdAtmServiceCategory.setDescription("This attribute specifies the ATM service category for both directions of the connection. The constantBitRate service category is intended for real time applications, that is those requiring tightly constrained delay and delay variation, as would be appropriate for voice and video applications. The consistent availability of a fixed quantity of bandwidth is considered appropriate for CBR service. Cells which are delayed beyond the value specified by CellTransfer Delay are assumed to be of significantly reduce value to the application. The rtVariableBitRate service category is intended for real time applications, that is those requiring tightly constrained delay and delay variation, as would be appropriate for voice and video applications. Sources are expected to transmit at a rate which varies with time. Equivalently, the source can be described as 'bursty'. Cells which are delayed beyond the value specified by CTD are assumed to be of significantly reduced value to the application. Real time VBR service may support statistical multiplexing of real time sources. The nrtVariableBitRate service category is intended for non-real time applications which have bursty traffic characteristics and which can be characterized in terms of a PCR, SCR, and MBS. For those cells which are transferred within the traffic contract, the application expects a low cell loss ratio. For all connections, it expects a bound on the mean cell transfer delay. Non-real time VBR service may support statistical multiplexing of connections. The unspecifiedBitRate service is intended for non-real time applications; that is, those not requiring tightly constrained delay and delay variation. UBR sources are expected to be bursty. UBR service supports a high degree of statistical multiplexing among sources. UBR service does not specify traffic related service guarantees. No numerical commitments are made with respect to the cell loss ratio experienced by a UBR connection, or as to the cell transfer delay experienced by cells on the connection.")
atmIfPnniSigVcdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniSigVcdQosClass.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVcdQosClass.setDescription('This attribute specifies the quality of service for both the forward and backward direction for this connection. Class 1 supports a QOS that meets Service Class A performance requirements (Circuit emulation, constant bit rate video). Class 2 supports a QOS that meets Service Class B performance requirements (Variable bit rate audio and video). Class 3 supports a QOS that meets Service Class C performance requirements (Connection-Oriented Data Transfer). Class 4 supports a QOS that meets Service Class D performance requirements (Connectionless Data Transfer). Class 0 is the unspecified bit rate QOS class; no objective is specified for the performance parameters.')
atmIfPnniSigVcdTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2, 10, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniSigVcdTrafficShaping.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVcdTrafficShaping.setDescription("This attribute specifies whether this connection uses traffic shaping when transmitting traffic to the ATM interface. When sameAsCa is selected, traffic shaping for this connection is based on the trafficShaping attribute of the connection's service category component under the AtmIf CA. If the service category has traffic shaping enabled, then traffic shaping is enabled for the connection. Note that enabling traffic shaping may have no effect under certain cases. These cases are listed in the description of the trafficShaping operational attribute, which is under the Vcc Tm and Vpc Tm components. When disabled is selected, traffic shaping for this connection is disabled.")
atmIfPnniSigVcdUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2, 10, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsCa", 3))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniSigVcdUnshapedTransmitQueueing.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVcdUnshapedTransmitQueueing.setDescription("This attribute only applies when this connection is unshaped. This attribute specifies the transmit queueing method for this connection if it is unshaped. Refer to the unshapedTransmitQueueing attribute under the AtmIf CA service category subcomponent for more details on the meaning of this attribute. When this attribute is set to sameAsCa, the transmit queueing method for the connection is based on the unshapedTransmitQueueing attribute of the connection's service category component under the ConnectionAdministrator. When this attribute is set to common, transmit traffic on this unshaped connection is destined for the common queue. The value sameAsInterface is for migration from previous software releases, but should no longer be used")
atmIfPnniSigVcdUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2, 10, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniSigVcdUsageParameterControl.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVcdUsageParameterControl.setDescription("This attribute specifies whether this connection enforces usage parameter control when receiving traffic from the ATM interface. When sameAsCa is selected, UPC for the connection is based on the usageParameterControl attribute of the connection's service category component under the ConnectionAdministrator. If the service category has UPC enabled, then UPC is enabled for the connection. Note that enabling UPC may have no effect under certain cases. These cases are listed in the description of the usageParameterControl operational attribute, which is under the Vcc Tm or Vpc Tm component. When disabled is selected, UPC for this connection is disabled. The value sameAsInterface is for migration from previous software releases, but should no longer be used")
atmIfPnniSigVcdTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2, 387), )
if mibBuilder.loadTexts: atmIfPnniSigVcdTdpTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVcdTdpTable.setDescription('This attribute is a vector of five traffic parameters whose meanings are defined by the trafficDescType attribute. The values of peak cell rate (PCR), sustained cell rate (SCR) and requested shaping rate are expressed in cell/s. Maximum burst size (MBS) is expressed in cells. CDVT is expressed in microseconds. The values of PCR, SCR, MBS and CDVT are used for connection admission control (CAC). The value of CDVT is only used for connections where the atmServiceCategory is constantBitRate. For all other values of atmServiceCategory, CDVT is ignored. The values of PCR, SCR and requested shaping rate are used to determine the actual shaping rate where traffic shaping is enabled. When trafficDescType is 3, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameter 1 must be non-zero. Parameters 2 and 3 must be zero. When trafficDescType is 6, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 2 represents the SCR for CLP equal to 0 and 1 traffic; parameter 3 represents the MBS for CLP equal to 0 and 1 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameters 1, 2, and 3 must be non-zero. Parameter 1 must be greater than or equal to parameter 2. Parameter 5 must either be zero (unused) or greater than or equal to parameter 2. When trafficDescType is 7, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 2 represents the SCR for CLP equal to 0 with cell discard; parameter 3 represents the MBS for CLP equal to 0 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameters 1, 2, and 3 must be non-zero. Parameter 1 must be greater than or equal to parameter 2. Parameter 5 must either be zero (unused) or greater than or equal to parameter 2. When trafficDescType is 8, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 2 represents the SCR for CLP equal to 0 traffic with cell tagging; parameter 3 represents the MBS for CLP equal to 0 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameters 1, 2, and 3 must be non-zero. Parameter 1 must be greater than or equal to parameter 2. Parameter 5 must either be zero (unused) or greater than or equal to parameter 2. Whenever it is valid for PCR to be specified, parameter 5 may also be used to specify a requested shaping rate. A non-zero value in parameter 5 overrides the value in parameter 1 and is used as the peak cell rate in calculations of CAC and shaping rate. For trafficDescType 3 the traffic is shaped at the next rate less than the PCR. For trafficDescType 6, 7, and 8, the traffic is shaped at the highest available rate which is between PCR and SCR. However, if there is no available shaping rate between PCR and SCR, traffic is shaped at the next rate above the PCR.')
atmIfPnniSigVcdTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2, 387, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniSigIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniSigVcdIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniSigVcdTdpIndex"))
if mibBuilder.loadTexts: atmIfPnniSigVcdTdpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVcdTdpEntry.setDescription('An entry in the atmIfPnniSigVcdTdpTable.')
atmIfPnniSigVcdTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2, 387, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfPnniSigVcdTdpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVcdTdpIndex.setDescription('This variable represents the atmIfPnniSigVcdTdpTable specific index for the atmIfPnniSigVcdTdpTable.')
atmIfPnniSigVcdTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 2, 2, 387, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniSigVcdTdpValue.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniSigVcdTdpValue.setDescription('This variable represents an individual value for the atmIfPnniSigVcdTdpTable.')
atmIfPnniRcc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3))
atmIfPnniRccRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 1), )
if mibBuilder.loadTexts: atmIfPnniRccRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfPnniRcc components.')
atmIfPnniRccRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniRccIndex"))
if mibBuilder.loadTexts: atmIfPnniRccRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccRowStatusEntry.setDescription('A single entry in the table represents a single atmIfPnniRcc component.')
atmIfPnniRccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniRccRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfPnniRcc components. These components cannot be added nor deleted.')
atmIfPnniRccComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniRccComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfPnniRccStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniRccStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccStorageType.setDescription('This variable represents the storage type value for the atmIfPnniRcc tables.')
atmIfPnniRccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfPnniRccIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccIndex.setDescription('This variable represents the index for the atmIfPnniRcc tables.')
atmIfPnniRccProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 10), )
if mibBuilder.loadTexts: atmIfPnniRccProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccProvTable.setDescription('This group contains the generic provisionable attributes of an Rcc component.')
atmIfPnniRccProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniRccIndex"))
if mibBuilder.loadTexts: atmIfPnniRccProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccProvEntry.setDescription('An entry in the atmIfPnniRccProvTable.')
atmIfPnniRccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(18)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniRccVci.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVci.setDescription('This attribute specifies the VCI for the Routing Control Channel (RCC). It is not recommended that the value be changed from the default of 18 unless absolutely necessary. If a different VCI is specified, ensure that the RCC at the far end is provisioned to use the same VCI, otherwise the RCC will not come up.')
atmIfPnniRccHlParmsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 11), )
if mibBuilder.loadTexts: atmIfPnniRccHlParmsTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccHlParmsTable.setDescription('This group contains the provisionable Hello protocol parameters for an Rcc component.')
atmIfPnniRccHlParmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniRccIndex"))
if mibBuilder.loadTexts: atmIfPnniRccHlParmsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccHlParmsEntry.setDescription('An entry in the atmIfPnniRccHlParmsTable.')
atmIfPnniRccHelloHoldDown = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 11, 1, 1), FixedPoint1().subtype(subtypeSpec=ValueRangeConstraint(0, 655350))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniRccHelloHoldDown.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccHelloHoldDown.setDescription('This attribute is used to limit the rate at which this node sends out Hello packets. Specifically, it specifies the minimum time between successive Hellos. A value of 0 specifies that the value provisioned for the helloHoldDown attribute of the ARtg Pnni component should be used.')
atmIfPnniRccHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniRccHelloInterval.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccHelloInterval.setDescription('This attribute specifies the duration of the Hello Timer. Every helloInterval seconds, this node will send out a Hello packet to the neighbor node, subject to the helloHoldDown timer having expired at least once since the last Hello packet was sent. A value of 0 specifies that the value provisioned for the helloInterval attribute of the ARtg Pnni component should be used.')
atmIfPnniRccHelloInactivityFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniRccHelloInactivityFactor.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccHelloInactivityFactor.setDescription('This attribute specifies the number of Hello intervals allowed to pass without receiving a Hello from the neighbor node, before an attempt is made to re-stage. The hello inactivity timer is enabled in the oneWayInside, twoWayInside, oneWayOutside, twoWayOutside and commonOutside hello states (see the helloState attribute on the Rcc component for a description of these states). Note that the value for the Hello interval used in the calculation is the one specified in the Hello packet from the neighbor node. A value of 0 specifies that the value provisioned for the helloInactivityFactor attribute of the ARtg Pnni component should be used. DESCRIPTION')
atmIfPnniRccStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 12), )
if mibBuilder.loadTexts: atmIfPnniRccStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
atmIfPnniRccStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniRccIndex"))
if mibBuilder.loadTexts: atmIfPnniRccStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccStateEntry.setDescription('An entry in the atmIfPnniRccStateTable.')
atmIfPnniRccAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniRccAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
atmIfPnniRccOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniRccOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
atmIfPnniRccUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniRccUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
atmIfPnniRccOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 13), )
if mibBuilder.loadTexts: atmIfPnniRccOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccOperTable.setDescription('This group contains the operational attributes for an Rcc component.')
atmIfPnniRccOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniRccIndex"))
if mibBuilder.loadTexts: atmIfPnniRccOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccOperEntry.setDescription('An entry in the atmIfPnniRccOperTable.')
atmIfPnniRccType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("lowestLevelHorizLink", 1), ("lowestLevelOutsideLink", 2), ("horizontalLinkToLGN", 3), ("uplink", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniRccType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccType.setDescription('This attribute indicates the role of this link in the PNNI hierarchy. The following values are possible: unknown: the Hello protocol has not yet determined the role of the link. lowestLevelHorizLink: the link is a horizontal link between two lowest level nodes. lowestLevelOutsideLink: the link is an outside link between two border nodes. horizontalLinkToLgn: the link is a horizontal link to a Logical Group Node (LGN). uplink: the link is a uplink to a higher level LGN.')
atmIfPnniRccNegotiatedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unsupported", 0), ("version1point0", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniRccNegotiatedVersion.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccNegotiatedVersion.setDescription('This attribute indicates the PNNI version negotiated with the neighbor node.')
atmIfPnniRccHelloState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 0), ("down", 1), ("attempt", 2), ("oneWayInside", 3), ("twoWayInside", 4), ("oneWayOutside", 5), ("twoWayOutside", 6), ("commonOutside", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniRccHelloState.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccHelloState.setDescription("This attribute indicates the state of the Hello protocol exchange over this link. The following are the possible values for this attribute: down: the link is down; no PNNI routing packets will be sent over or received over such a link. This is the initial state of the Hello Finite State Machine, and can also be reached when lower-level protocols have indicated that the link is not usable. attempt: no Hello packets or Hello packets, with mismatch information, have been received recently from the neighbor. Attempts are made to contact the neighbor node by sending out Hello packets every helloInterval seconds. oneWayInside: Hello packets have been recently received from the neighbor and it has been established that both nodes are members of the same peer group, but the remote node ID and remote port ID in the neighbor's Hello packets were set to zero. A Hello packet is sent to the neighbor and the Hello timer is restarted. twoWayInside: Bidirectional communication over this link between this node and the neighbor node has been achieved. oneWayOutside: Hello packets have been recently received from the neighbor and it has been established that both nodes are members of a different peer group, but the remote node ID and remote port ID in the neighbor's Hello packets were set to zero. twoWayOutside: Hellos have recently been received from the neighbor indicating that the neighbor node belongs to a different peer group. The correct remote node ID and remote port ID fields were included in the Hello packet, but the nodal hierarchy list did not include any common peer group. This state can also be reached if a hierarchy mismatch occurs while in the commonOutside state. commonOutside: A common level of the routing hierarchy has been found, in addition to achieving full bi-directional communication between the two nodes.")
atmIfPnniRccRemoteNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 13, 1, 4), HexString().subtype(subtypeSpec=ValueSizeConstraint(22, 22)).setFixedLength(22)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniRccRemoteNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccRemoteNodeId.setDescription("This attribute indicates the neighbor node's node id.")
atmIfPnniRccRemotePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniRccRemotePortId.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccRemotePortId.setDescription("This attribute indicates the neighbor node's port id.")
atmIfPnniRccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 14), )
if mibBuilder.loadTexts: atmIfPnniRccStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccStatsTable.setDescription('This group contains the statistical attributes for an Rcc component.')
atmIfPnniRccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniRccIndex"))
if mibBuilder.loadTexts: atmIfPnniRccStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccStatsEntry.setDescription('An entry in the atmIfPnniRccStatsTable.')
atmIfPnniRccHelloPacketsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 14, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniRccHelloPacketsRx.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccHelloPacketsRx.setDescription('This attribute counts the total number of Hello packets received across this RCC, including bad and mismatched Hello packets. The counter wraps when it exceeds the maximum value.')
atmIfPnniRccHelloPacketsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniRccHelloPacketsTx.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccHelloPacketsTx.setDescription('This attribute counts the total number of Hello packets transmitted across this RCC. The counter wraps when it exceeds the maximum value.')
atmIfPnniRccMismatchedHelloPacketsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniRccMismatchedHelloPacketsRx.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccMismatchedHelloPacketsRx.setDescription('This attribute counts the total number of mismatched Hello packets received over this RCC. The counter wraps when it exceeds the maximum value.')
atmIfPnniRccBadHelloPacketsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniRccBadHelloPacketsRx.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccBadHelloPacketsRx.setDescription('This attribute counts the total number of bad Hello packets received over this RCC. The counter wraps when it exceeds the maximum value.')
atmIfPnniRccVcd = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2))
atmIfPnniRccVcdRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2, 1), )
if mibBuilder.loadTexts: atmIfPnniRccVcdRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVcdRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfPnniRccVcd components.')
atmIfPnniRccVcdRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniRccIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniRccVcdIndex"))
if mibBuilder.loadTexts: atmIfPnniRccVcdRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVcdRowStatusEntry.setDescription('A single entry in the table represents a single atmIfPnniRccVcd component.')
atmIfPnniRccVcdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniRccVcdRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVcdRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfPnniRccVcd components. These components can be added and deleted.')
atmIfPnniRccVcdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniRccVcdComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVcdComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfPnniRccVcdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniRccVcdStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVcdStorageType.setDescription('This variable represents the storage type value for the atmIfPnniRccVcd tables.')
atmIfPnniRccVcdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfPnniRccVcdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVcdIndex.setDescription('This variable represents the index for the atmIfPnniRccVcd tables.')
atmIfPnniRccVcdProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2, 10), )
if mibBuilder.loadTexts: atmIfPnniRccVcdProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVcdProvTable.setDescription('This group contains the provisionable traffic attributes for a control channel.')
atmIfPnniRccVcdProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniRccIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniRccVcdIndex"))
if mibBuilder.loadTexts: atmIfPnniRccVcdProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVcdProvEntry.setDescription('An entry in the atmIfPnniRccVcdProvTable.')
atmIfPnniRccVcdTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 6, 7, 8))).clone(namedValues=NamedValues(("n3", 3), ("n6", 6), ("n7", 7), ("n8", 8))).clone('n6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniRccVcdTrafficDescType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVcdTrafficDescType.setDescription('This attribute specifies the type of traffic management which is applied to both the transmit and receive direction of this connection as defined in the ATM Forum. The trafficDescType determines the number and meaning of the parameters in the trafficDescParm attribute.')
atmIfPnniRccVcdAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3))).clone('rtVariableBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniRccVcdAtmServiceCategory.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVcdAtmServiceCategory.setDescription("This attribute specifies the ATM service category for both directions of the connection. The constantBitRate service category is intended for real time applications, that is those requiring tightly constrained delay and delay variation, as would be appropriate for voice and video applications. The consistent availability of a fixed quantity of bandwidth is considered appropriate for CBR service. Cells which are delayed beyond the value specified by CellTransfer Delay are assumed to be of significantly reduce value to the application. The rtVariableBitRate service category is intended for real time applications, that is those requiring tightly constrained delay and delay variation, as would be appropriate for voice and video applications. Sources are expected to transmit at a rate which varies with time. Equivalently, the source can be described as 'bursty'. Cells which are delayed beyond the value specified by CTD are assumed to be of significantly reduced value to the application. Real time VBR service may support statistical multiplexing of real time sources. The nrtVariableBitRate service category is intended for non-real time applications which have bursty traffic characteristics and which can be characterized in terms of a PCR, SCR, and MBS. For those cells which are transferred within the traffic contract, the application expects a low cell loss ratio. For all connections, it expects a bound on the mean cell transfer delay. Non-real time VBR service may support statistical multiplexing of connections. The unspecifiedBitRate service is intended for non-real time applications; that is, those not requiring tightly constrained delay and delay variation. UBR sources are expected to be bursty. UBR service supports a high degree of statistical multiplexing among sources. UBR service does not specify traffic related service guarantees. No numerical commitments are made with respect to the cell loss ratio experienced by a UBR connection, or as to the cell transfer delay experienced by cells on the connection.")
atmIfPnniRccVcdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniRccVcdQosClass.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVcdQosClass.setDescription('This attribute specifies the quality of service for both the forward and backward direction for this connection. Class 1 supports a QOS that meets Service Class A performance requirements (Circuit emulation, constant bit rate video). Class 2 supports a QOS that meets Service Class B performance requirements (Variable bit rate audio and video). Class 3 supports a QOS that meets Service Class C performance requirements (Connection-Oriented Data Transfer). Class 4 supports a QOS that meets Service Class D performance requirements (Connectionless Data Transfer). Class 0 is the unspecified bit rate QOS class; no objective is specified for the performance parameters.')
atmIfPnniRccVcdTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2, 10, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniRccVcdTrafficShaping.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVcdTrafficShaping.setDescription("This attribute specifies whether this connection uses traffic shaping when transmitting traffic to the ATM interface. When sameAsCa is selected, traffic shaping for this connection is based on the trafficShaping attribute of the connection's service category component under the AtmIf CA. If the service category has traffic shaping enabled, then traffic shaping is enabled for the connection. Note that enabling traffic shaping may have no effect under certain cases. These cases are listed in the description of the trafficShaping operational attribute, which is under the Vcc Tm and Vpc Tm components. When disabled is selected, traffic shaping for this connection is disabled.")
atmIfPnniRccVcdUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2, 10, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsCa", 3))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniRccVcdUnshapedTransmitQueueing.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVcdUnshapedTransmitQueueing.setDescription("This attribute only applies when this connection is unshaped. This attribute specifies the transmit queueing method for this connection if it is unshaped. Refer to the unshapedTransmitQueueing attribute under the AtmIf CA service category subcomponent for more details on the meaning of this attribute. When this attribute is set to sameAsCa, the transmit queueing method for the connection is based on the unshapedTransmitQueueing attribute of the connection's service category component under the ConnectionAdministrator. When this attribute is set to common, transmit traffic on this unshaped connection is destined for the common queue. The value sameAsInterface is for migration from previous software releases, but should no longer be used")
atmIfPnniRccVcdUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2, 10, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniRccVcdUsageParameterControl.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVcdUsageParameterControl.setDescription("This attribute specifies whether this connection enforces usage parameter control when receiving traffic from the ATM interface. When sameAsCa is selected, UPC for the connection is based on the usageParameterControl attribute of the connection's service category component under the ConnectionAdministrator. If the service category has UPC enabled, then UPC is enabled for the connection. Note that enabling UPC may have no effect under certain cases. These cases are listed in the description of the usageParameterControl operational attribute, which is under the Vcc Tm or Vpc Tm component. When disabled is selected, UPC for this connection is disabled. The value sameAsInterface is for migration from previous software releases, but should no longer be used")
atmIfPnniRccVcdTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2, 387), )
if mibBuilder.loadTexts: atmIfPnniRccVcdTdpTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVcdTdpTable.setDescription('This attribute is a vector of five traffic parameters whose meanings are defined by the trafficDescType attribute. The values of peak cell rate (PCR), sustained cell rate (SCR) and requested shaping rate are expressed in cell/s. Maximum burst size (MBS) is expressed in cells. CDVT is expressed in microseconds. The values of PCR, SCR, MBS and CDVT are used for connection admission control (CAC). The value of CDVT is only used for connections where the atmServiceCategory is constantBitRate. For all other values of atmServiceCategory, CDVT is ignored. The values of PCR, SCR and requested shaping rate are used to determine the actual shaping rate where traffic shaping is enabled. When trafficDescType is 3, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameter 1 must be non-zero. Parameters 2 and 3 must be zero. When trafficDescType is 6, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 2 represents the SCR for CLP equal to 0 and 1 traffic; parameter 3 represents the MBS for CLP equal to 0 and 1 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameters 1, 2, and 3 must be non-zero. Parameter 1 must be greater than or equal to parameter 2. Parameter 5 must either be zero (unused) or greater than or equal to parameter 2. When trafficDescType is 7, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 2 represents the SCR for CLP equal to 0 with cell discard; parameter 3 represents the MBS for CLP equal to 0 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameters 1, 2, and 3 must be non-zero. Parameter 1 must be greater than or equal to parameter 2. Parameter 5 must either be zero (unused) or greater than or equal to parameter 2. When trafficDescType is 8, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 2 represents the SCR for CLP equal to 0 traffic with cell tagging; parameter 3 represents the MBS for CLP equal to 0 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameters 1, 2, and 3 must be non-zero. Parameter 1 must be greater than or equal to parameter 2. Parameter 5 must either be zero (unused) or greater than or equal to parameter 2. Whenever it is valid for PCR to be specified, parameter 5 may also be used to specify a requested shaping rate. A non-zero value in parameter 5 overrides the value in parameter 1 and is used as the peak cell rate in calculations of CAC and shaping rate. For trafficDescType 3 the traffic is shaped at the next rate less than the PCR. For trafficDescType 6, 7, and 8, the traffic is shaped at the highest available rate which is between PCR and SCR. However, if there is no available shaping rate between PCR and SCR, traffic is shaped at the next rate above the PCR.')
atmIfPnniRccVcdTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2, 387, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniRccIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniRccVcdIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniRccVcdTdpIndex"))
if mibBuilder.loadTexts: atmIfPnniRccVcdTdpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVcdTdpEntry.setDescription('An entry in the atmIfPnniRccVcdTdpTable.')
atmIfPnniRccVcdTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2, 387, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: atmIfPnniRccVcdTdpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVcdTdpIndex.setDescription('This variable represents the atmIfPnniRccVcdTdpTable specific index for the atmIfPnniRccVcdTdpTable.')
atmIfPnniRccVcdTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 3, 2, 387, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniRccVcdTdpValue.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniRccVcdTdpValue.setDescription('This variable represents an individual value for the atmIfPnniRccVcdTdpTable.')
atmIfPnniAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4))
atmIfPnniAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 1), )
if mibBuilder.loadTexts: atmIfPnniAddrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfPnniAddr components.')
atmIfPnniAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniAddrAddressIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniAddrAddressTypeIndex"))
if mibBuilder.loadTexts: atmIfPnniAddrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrRowStatusEntry.setDescription('A single entry in the table represents a single atmIfPnniAddr component.')
atmIfPnniAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniAddrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfPnniAddr components. These components can be added and deleted.')
atmIfPnniAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniAddrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfPnniAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniAddrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrStorageType.setDescription('This variable represents the storage type value for the atmIfPnniAddr tables.')
atmIfPnniAddrAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 40)))
if mibBuilder.loadTexts: atmIfPnniAddrAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrAddressIndex.setDescription('This variable represents an index for the atmIfPnniAddr tables.')
atmIfPnniAddrAddressTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("primary", 0), ("alternate", 1), ("registered", 2), ("default", 3))))
if mibBuilder.loadTexts: atmIfPnniAddrAddressTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrAddressTypeIndex.setDescription('This variable represents an index for the atmIfPnniAddr tables.')
atmIfPnniAddrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 10), )
if mibBuilder.loadTexts: atmIfPnniAddrOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrOperTable.setDescription('This attribute group contains the operational attributes for the Address component.')
atmIfPnniAddrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniAddrAddressIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniAddrAddressTypeIndex"))
if mibBuilder.loadTexts: atmIfPnniAddrOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrOperEntry.setDescription('An entry in the atmIfPnniAddrOperTable.')
atmIfPnniAddrScope = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 104))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniAddrScope.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrScope.setDescription('This attribute indicates the scope of the ATM address, which is the highest level to which this address will be advertised in the PNNI hierarchy. If no PnniInfo subcomponent has been provisioned, then the scope will default to the level of this node in the PNNI hierarchy. If this node does not participate in a PNNI hierarchy, then this attribute will have the value of -1.')
atmIfPnniAddrReachability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("internal", 0), ("exterior", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniAddrReachability.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrReachability.setDescription('This attribute indicates whether the address is internal or exterior. An internal reachable address is an address of a destination that is directly attached to the logical node advertising the address. An exterior reachable address is an address that can be reached through a PNNI routing domain, but which is not located in that PNNI routing domain.')
atmIfPnniAddrTermSP = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 2))
atmIfPnniAddrTermSPRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 2, 1), )
if mibBuilder.loadTexts: atmIfPnniAddrTermSPRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrTermSPRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfPnniAddrTermSP components.')
atmIfPnniAddrTermSPRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniAddrAddressIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniAddrAddressTypeIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniAddrTermSPIndex"))
if mibBuilder.loadTexts: atmIfPnniAddrTermSPRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrTermSPRowStatusEntry.setDescription('A single entry in the table represents a single atmIfPnniAddrTermSP component.')
atmIfPnniAddrTermSPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniAddrTermSPRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrTermSPRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfPnniAddrTermSP components. These components can be added and deleted.')
atmIfPnniAddrTermSPComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniAddrTermSPComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrTermSPComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfPnniAddrTermSPStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniAddrTermSPStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrTermSPStorageType.setDescription('This variable represents the storage type value for the atmIfPnniAddrTermSP tables.')
atmIfPnniAddrTermSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfPnniAddrTermSPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrTermSPIndex.setDescription('This variable represents the index for the atmIfPnniAddrTermSP tables.')
atmIfPnniAddrPnniInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 3))
atmIfPnniAddrPnniInfoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 3, 1), )
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoRowStatusTable.setDescription('This entry controls the addition and deletion of atmIfPnniAddrPnniInfo components.')
atmIfPnniAddrPnniInfoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniAddrAddressIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniAddrAddressTypeIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniAddrPnniInfoIndex"))
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoRowStatusEntry.setDescription('A single entry in the table represents a single atmIfPnniAddrPnniInfo component.')
atmIfPnniAddrPnniInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoRowStatus.setDescription('This variable is used as the basis for SNMP naming of atmIfPnniAddrPnniInfo components. These components can be added and deleted.')
atmIfPnniAddrPnniInfoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
atmIfPnniAddrPnniInfoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoStorageType.setDescription('This variable represents the storage type value for the atmIfPnniAddrPnniInfo tables.')
atmIfPnniAddrPnniInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoIndex.setDescription('This variable represents the index for the atmIfPnniAddrPnniInfo tables.')
atmIfPnniAddrPnniInfoProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 3, 10), )
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoProvTable.setDescription('This attribute group contains the provisioned attributes relating to PNNI for a PnniInfo component.')
atmIfPnniAddrPnniInfoProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-AtmCoreMIB", "atmIfIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniAddrAddressIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniAddrAddressTypeIndex"), (0, "Nortel-Magellan-Passport-AtmPnniMIB", "atmIfPnniAddrPnniInfoIndex"))
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoProvEntry.setDescription('An entry in the atmIfPnniAddrPnniInfoProvTable.')
atmIfPnniAddrPnniInfoScope = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 104)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoScope.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoScope.setDescription('This attribute specifies the scope of the ATM address, which is the highest level up to which this address will be advertised in the PNNI hierarchy. The scope must be set to a value numerically less than or equal to the level of the lowest level peer group containing this node. Setting the scope to 0 will cause the address to be advertised globally within this PNNI routing domain.')
atmIfPnniAddrPnniInfoReachability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 114, 96, 4, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("internal", 0), ("exterior", 1))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoReachability.setStatus('mandatory')
if mibBuilder.loadTexts: atmIfPnniAddrPnniInfoReachability.setDescription('This attribute indicates whether the address is internal or exterior. An internal reachable address is an address of a destination that is directly attached to the logical node advertising the address. An exterior reachable address is an address that can be reached through a PNNI routing domain, but which is not located in that PNNI routing domain.')
atmPnniGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 72, 1))
atmPnniGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 72, 1, 5))
atmPnniGroupBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 72, 1, 5, 1))
atmPnniGroupBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 72, 1, 5, 1, 2))
atmPnniCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 72, 3))
atmPnniCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 72, 3, 5))
atmPnniCapabilitiesBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 72, 3, 5, 1))
atmPnniCapabilitiesBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 72, 3, 5, 1, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-AtmPnniMIB", atmIfVptPnniSigRowStatus=atmIfVptPnniSigRowStatus, atmIfPnniAcctOptTable=atmIfPnniAcctOptTable, atmIfVptPnniNrtVbrWeight=atmIfVptPnniNrtVbrWeight, atmIfVptPnniSoftPvpAndPvcHoldOffTime=atmIfVptPnniSoftPvpAndPvcHoldOffTime, atmIfVptPnniRccStatsEntry=atmIfVptPnniRccStatsEntry, atmIfPnniSigVcdProvEntry=atmIfPnniSigVcdProvEntry, atmIfPnniSigAddressConversion=atmIfPnniSigAddressConversion, atmIfPnniRccVcdRowStatusTable=atmIfPnniRccVcdRowStatusTable, atmIfPnniSigVcdTrafficShaping=atmIfPnniSigVcdTrafficShaping, atmIfVptPnniSigSuccessfulConnections=atmIfVptPnniSigSuccessfulConnections, atmIfPnniAddrOperEntry=atmIfPnniAddrOperEntry, atmIfVptPnniAddrTermSPRowStatusEntry=atmIfVptPnniAddrTermSPRowStatusEntry, atmIfPnniUbrWeight=atmIfPnniUbrWeight, atmIfPnniSigFailedPmpConnections=atmIfPnniSigFailedPmpConnections, atmIfVptPnniRccVcdUnshapedTransmitQueueing=atmIfVptPnniRccVcdUnshapedTransmitQueueing, atmIfPnniSigVci=atmIfPnniSigVci, atmIfPnniSigVcdTdpValue=atmIfPnniSigVcdTdpValue, atmIfPnniRccVcdTrafficDescType=atmIfPnniRccVcdTrafficDescType, atmIfPnniAddrTermSPComponentName=atmIfPnniAddrTermSPComponentName, atmIfVptPnniSigVcdTdpIndex=atmIfVptPnniSigVcdTdpIndex, atmIfVptPnniAddrTermSPIndex=atmIfVptPnniAddrTermSPIndex, atmIfPnniAddrPnniInfoReachability=atmIfPnniAddrPnniInfoReachability, atmIfVptPnniAddrPnniInfoScope=atmIfVptPnniAddrPnniInfoScope, atmIfVptPnniIndex=atmIfVptPnniIndex, atmIfVptPnniRccComponentName=atmIfVptPnniRccComponentName, atmIfVptPnniRccStateTable=atmIfVptPnniRccStateTable, atmIfPnniSigLastTxDiagCode=atmIfPnniSigLastTxDiagCode, atmIfPnniRccType=atmIfPnniRccType, atmIfVptPnniRowStatusTable=atmIfVptPnniRowStatusTable, atmIfPnniProvEntry=atmIfPnniProvEntry, atmIfPnniRtVbrWeight=atmIfPnniRtVbrWeight, atmIfVptPnniSigIndex=atmIfVptPnniSigIndex, atmIfVptPnniSigOperationalState=atmIfVptPnniSigOperationalState, atmIfVptPnniRccVcdProvEntry=atmIfVptPnniRccVcdProvEntry, atmIfVptPnniRowStatusEntry=atmIfVptPnniRowStatusEntry, atmIfVptPnniRccProvEntry=atmIfVptPnniRccProvEntry, atmIfPnniSigOperEntry=atmIfPnniSigOperEntry, atmIfPnniSigLastRxCauseCode=atmIfPnniSigLastRxCauseCode, atmIfPnniSigAdminState=atmIfPnniSigAdminState, atmIfVptPnniAddrTermSPRowStatus=atmIfVptPnniAddrTermSPRowStatus, atmIfVptPnniSigVcdIndex=atmIfVptPnniSigVcdIndex, atmIfVptPnniSoftPvcRetryPeriod=atmIfVptPnniSoftPvcRetryPeriod, atmIfPnniSigStateEntry=atmIfPnniSigStateEntry, atmIfVptPnniSigVcdQosClass=atmIfVptPnniSigVcdQosClass, atmIfVptPnniRccRowStatusEntry=atmIfVptPnniRccRowStatusEntry, atmIfVptPnniSigLastTxCauseCode=atmIfVptPnniSigLastTxCauseCode, atmIfVptPnniSigFailedConnections=atmIfVptPnniSigFailedConnections, atmIfVptPnniRccNegotiatedVersion=atmIfVptPnniRccNegotiatedVersion, atmIfVptPnniRccVcdTdpTable=atmIfVptPnniRccVcdTdpTable, atmIfVptPnniAddrPnniInfoReachability=atmIfVptPnniAddrPnniInfoReachability, atmIfPnniAddrTermSP=atmIfPnniAddrTermSP, atmIfVptPnniComponentName=atmIfVptPnniComponentName, atmIfPnniRccVcdQosClass=atmIfPnniRccVcdQosClass, atmIfVptPnniSigRowStatusEntry=atmIfVptPnniSigRowStatusEntry, atmPnniCapabilities=atmPnniCapabilities, atmIfVptPnniSigVcdTdpValue=atmIfVptPnniSigVcdTdpValue, atmIfPnniRccVcdAtmServiceCategory=atmIfPnniRccVcdAtmServiceCategory, atmIfVptPnniRccVcdTdpValue=atmIfVptPnniRccVcdTdpValue, atmIfPnniAddrPnniInfoIndex=atmIfPnniAddrPnniInfoIndex, atmIfPnniRccVcdRowStatusEntry=atmIfPnniRccVcdRowStatusEntry, atmIfPnniSig=atmIfPnniSig, atmIfVptPnniRccHlParmsEntry=atmIfVptPnniRccHlParmsEntry, atmIfVptPnniRccStorageType=atmIfVptPnniRccStorageType, atmIfVptPnniRccRowStatus=atmIfVptPnniRccRowStatus, atmIfVptPnni=atmIfVptPnni, atmIfVptPnniAddrPnniInfoProvEntry=atmIfVptPnniAddrPnniInfoProvEntry, atmIfVptPnniSigCurrentConnections=atmIfVptPnniSigCurrentConnections, atmIfPnniRccAdminState=atmIfPnniRccAdminState, atmIfVptPnniAddr=atmIfVptPnniAddr, atmIfVptPnniSigVcdUsageParameterControl=atmIfVptPnniSigVcdUsageParameterControl, atmIfVptPnniSigVcdRowStatusEntry=atmIfVptPnniSigVcdRowStatusEntry, atmIfVptPnniSigVcdRowStatusTable=atmIfVptPnniSigVcdRowStatusTable, atmIfPnniAddrScope=atmIfPnniAddrScope, atmIfPnniRccIndex=atmIfPnniRccIndex, atmIfVptPnniRccMismatchedHelloPacketsRx=atmIfVptPnniRccMismatchedHelloPacketsRx, atmIfPnniAddrPnniInfoRowStatus=atmIfPnniAddrPnniInfoRowStatus, atmIfPnniSigOperTable=atmIfPnniSigOperTable, atmIfVptPnniAddrRowStatus=atmIfVptPnniAddrRowStatus, atmIfVptPnniStorageType=atmIfVptPnniStorageType, atmIfVptPnniSigPeakConnections=atmIfVptPnniSigPeakConnections, atmIfVptPnniSigStatsEntry=atmIfVptPnniSigStatsEntry, atmIfVptPnniRccVcdRowStatusTable=atmIfVptPnniRccVcdRowStatusTable, atmIfVptPnniSigRowStatusTable=atmIfVptPnniSigRowStatusTable, atmIfVptPnniSigNewCurrentConnections=atmIfVptPnniSigNewCurrentConnections, atmIfVptPnniRccProvTable=atmIfVptPnniRccProvTable, atmPnniGroupBE00=atmPnniGroupBE00, atmIfVptPnniVpci=atmIfVptPnniVpci, atmPnniCapabilitiesBE00A=atmPnniCapabilitiesBE00A, atmIfVptPnniSigVcdProvEntry=atmIfVptPnniSigVcdProvEntry, atmIfVptPnniSigFailedPmpConnections=atmIfVptPnniSigFailedPmpConnections, atmIfPnniRccStatsTable=atmIfPnniRccStatsTable, atmIfVptPnniSigVcdAtmServiceCategory=atmIfVptPnniSigVcdAtmServiceCategory, atmIfPnniSigOperationalState=atmIfPnniSigOperationalState, atmIfPnniSigLastTxCauseCode=atmIfPnniSigLastTxCauseCode, atmIfPnniAccountClass=atmIfPnniAccountClass, atmIfVptPnniVProvEntry=atmIfVptPnniVProvEntry, atmIfPnniSigVcdAtmServiceCategory=atmIfPnniSigVcdAtmServiceCategory, atmIfPnniCbrWeight=atmIfPnniCbrWeight, atmIfPnniAddrTermSPRowStatusTable=atmIfPnniAddrTermSPRowStatusTable, atmIfPnniAddrRowStatusTable=atmIfPnniAddrRowStatusTable, atmIfVptPnniRccHelloInterval=atmIfVptPnniRccHelloInterval, atmIfVptPnniUbrWeight=atmIfVptPnniUbrWeight, atmIfPnniAddrTermSPRowStatusEntry=atmIfPnniAddrTermSPRowStatusEntry, atmIfPnniRccHelloHoldDown=atmIfPnniRccHelloHoldDown, atmIfPnniNrtVbrWeight=atmIfPnniNrtVbrWeight, atmIfPnniRowStatusTable=atmIfPnniRowStatusTable, atmIfVptPnniRccOperationalState=atmIfVptPnniRccOperationalState, atmIfVptPnniAddrPnniInfoProvTable=atmIfVptPnniAddrPnniInfoProvTable, atmIfVptPnniProvTable=atmIfVptPnniProvTable, atmIfVptPnniAddrPnniInfo=atmIfVptPnniAddrPnniInfo, atmIfVptPnniSigSuccessfulPmpConnections=atmIfVptPnniSigSuccessfulPmpConnections, atmIfVptPnniRccOperTable=atmIfVptPnniRccOperTable, atmIfVptPnniSigVcdTdpTable=atmIfVptPnniSigVcdTdpTable, atmIfPnniSigRowStatus=atmIfPnniSigRowStatus, atmIfPnniRccRemoteNodeId=atmIfPnniRccRemoteNodeId, atmIfVptPnniSigVcdTrafficDescType=atmIfVptPnniSigVcdTrafficDescType, atmIfVptPnniAddrAddressIndex=atmIfVptPnniAddrAddressIndex, atmIfVptPnniRccRemoteNodeId=atmIfVptPnniRccRemoteNodeId, atmIfPnniSigUsageState=atmIfPnniSigUsageState, atmIfPnniProvTable=atmIfPnniProvTable, atmIfPnniSigIndex=atmIfPnniSigIndex, atmIfPnniSigVcdProvTable=atmIfPnniSigVcdProvTable, atmIfPnniComponentName=atmIfPnniComponentName, atmIfPnniRccHelloState=atmIfPnniRccHelloState, atmIfPnniAddrPnniInfo=atmIfPnniAddrPnniInfo, atmIfVptPnniSigVcd=atmIfVptPnniSigVcd, atmIfPnniSigRowStatusEntry=atmIfPnniSigRowStatusEntry, atmIfPnniAccountCollection=atmIfPnniAccountCollection, atmIfPnniOperationalEntry=atmIfPnniOperationalEntry, atmIfVptPnniSigRxPdus=atmIfVptPnniSigRxPdus, atmIfPnniAddrPnniInfoRowStatusTable=atmIfPnniAddrPnniInfoRowStatusTable, atmIfVptPnniSigStateEntry=atmIfVptPnniSigStateEntry, atmIfVptPnniSigVcdComponentName=atmIfVptPnniSigVcdComponentName, atmIfVptPnniSigLastTxDiagCode=atmIfVptPnniSigLastTxDiagCode, atmIfVptPnniSigVcdTrafficShaping=atmIfVptPnniSigVcdTrafficShaping, atmIfPnniRccRemotePortId=atmIfPnniRccRemotePortId, atmIfPnniRccNegotiatedVersion=atmIfPnniRccNegotiatedVersion, atmIfPnniAccountConnectionType=atmIfPnniAccountConnectionType, atmIfPnniAddrRowStatus=atmIfPnniAddrRowStatus, atmIfVptPnniSigOperTable=atmIfVptPnniSigOperTable, atmIfVptPnniAccountConnectionType=atmIfVptPnniAccountConnectionType, atmIfPnniSigSuccessfulPmpConnections=atmIfPnniSigSuccessfulPmpConnections, atmIfPnniRccRowStatusTable=atmIfPnniRccRowStatusTable, atmIfPnniAddrComponentName=atmIfPnniAddrComponentName, atmIfVptPnniSigVci=atmIfVptPnniSigVci, atmIfVptPnniRtVbrWeight=atmIfVptPnniRtVbrWeight, atmIfVptPnniSigStorageType=atmIfVptPnniSigStorageType, atmIfVptPnniRccType=atmIfVptPnniRccType, atmIfPnniRccRowStatus=atmIfPnniRccRowStatus, atmIfPnniRccProvEntry=atmIfPnniRccProvEntry, atmIfPnniRccVcdTdpTable=atmIfPnniRccVcdTdpTable, atmIfPnniStorageType=atmIfPnniStorageType, atmIfVptPnniRccVcdRowStatus=atmIfVptPnniRccVcdRowStatus, atmIfVptPnniAddrPnniInfoIndex=atmIfVptPnniAddrPnniInfoIndex, atmIfPnniSoftPvpAndPvcHoldOffTime=atmIfPnniSoftPvpAndPvcHoldOffTime, atmIfPnniSigStateTable=atmIfPnniSigStateTable, atmIfVptPnniSigVcdUnshapedTransmitQueueing=atmIfVptPnniSigVcdUnshapedTransmitQueueing, atmIfPnniRcc=atmIfPnniRcc, atmIfPnniAddrStorageType=atmIfPnniAddrStorageType, atmIfVptPnniSoftPvpAndPvcRetryPeriod=atmIfVptPnniSoftPvpAndPvcRetryPeriod, atmPnniGroupBE00A=atmPnniGroupBE00A, atmIfVptPnniRccVcdIndex=atmIfVptPnniRccVcdIndex, atmIfVptPnniSigVcdStorageType=atmIfVptPnniSigVcdStorageType, atmIfPnniAddrPnniInfoProvEntry=atmIfPnniAddrPnniInfoProvEntry, atmIfVptPnniSigCurrentPmpConnections=atmIfVptPnniSigCurrentPmpConnections, atmIfPnniSigComponentName=atmIfPnniSigComponentName, atmIfPnniSigVcdRowStatusTable=atmIfPnniSigVcdRowStatusTable, atmIfVptPnniRccIndex=atmIfVptPnniRccIndex, atmIfPnniSigStatsTable=atmIfPnniSigStatsTable, atmIfPnniAdminWeightsEntry=atmIfPnniAdminWeightsEntry, atmIfVptPnniRccVcd=atmIfVptPnniRccVcd, atmIfPnniSigVcdQosClass=atmIfPnniSigVcdQosClass, atmIfPnni=atmIfPnni, atmIfVptPnniServiceExchange=atmIfVptPnniServiceExchange, atmIfPnniRccStateEntry=atmIfPnniRccStateEntry, atmIfPnniSigVcdComponentName=atmIfPnniSigVcdComponentName, atmIfVptPnniRccHlParmsTable=atmIfVptPnniRccHlParmsTable, atmPnniGroup=atmPnniGroup, atmIfVptPnniRccVcdTrafficDescType=atmIfVptPnniRccVcdTrafficDescType, atmIfVptPnniRccHelloPacketsRx=atmIfVptPnniRccHelloPacketsRx, atmIfPnniSigProvEntry=atmIfPnniSigProvEntry, atmIfPnniSigCurrentPmpConnections=atmIfPnniSigCurrentPmpConnections, atmIfPnniRccMismatchedHelloPacketsRx=atmIfPnniRccMismatchedHelloPacketsRx, atmIfVptPnniRccHelloInactivityFactor=atmIfVptPnniRccHelloInactivityFactor, atmIfPnniAddrPnniInfoStorageType=atmIfPnniAddrPnniInfoStorageType, atmIfVptPnniSigOperEntry=atmIfVptPnniSigOperEntry, atmIfPnniOperationalTable=atmIfPnniOperationalTable, atmIfPnniSigPeakConnections=atmIfPnniSigPeakConnections, atmIfVptPnniRccVcdQosClass=atmIfVptPnniRccVcdQosClass, atmIfPnniRccHelloPacketsTx=atmIfPnniRccHelloPacketsTx, atmIfPnniAddrPnniInfoComponentName=atmIfPnniAddrPnniInfoComponentName, atmIfPnniSoftPvcRetryPeriod=atmIfPnniSoftPvcRetryPeriod, atmIfVptPnniAdminWeightsTable=atmIfVptPnniAdminWeightsTable, atmIfPnniRccHelloPacketsRx=atmIfPnniRccHelloPacketsRx, atmIfVptPnniRccVcdUsageParameterControl=atmIfVptPnniRccVcdUsageParameterControl, atmIfPnniAddrTermSPRowStatus=atmIfPnniAddrTermSPRowStatus, atmIfVptPnniSig=atmIfVptPnniSig, atmIfVptPnniRccVci=atmIfVptPnniRccVci, atmIfPnniAddrTermSPIndex=atmIfPnniAddrTermSPIndex, atmIfVptPnniPortId=atmIfVptPnniPortId, atmIfVptPnniSigPeakPmpConnections=atmIfVptPnniSigPeakPmpConnections, atmIfPnniSigRxPdus=atmIfPnniSigRxPdus, atmIfPnniAddrPnniInfoScope=atmIfPnniAddrPnniInfoScope, atmIfPnniRccVcdIndex=atmIfPnniRccVcdIndex, atmIfPnniAddr=atmIfPnniAddr, atmIfPnniSigVcdStorageType=atmIfPnniSigVcdStorageType, atmIfPnniSigVcd=atmIfPnniSigVcd, atmIfVptPnniRccRowStatusTable=atmIfVptPnniRccRowStatusTable, atmIfVptPnniRccVcdComponentName=atmIfVptPnniRccVcdComponentName, atmIfPnniRccVcdTdpEntry=atmIfPnniRccVcdTdpEntry, atmIfPnniAddrTermSPStorageType=atmIfPnniAddrTermSPStorageType, atmIfVptPnniRccHelloHoldDown=atmIfVptPnniRccHelloHoldDown, atmIfPnniSigStorageType=atmIfPnniSigStorageType, atmIfPnniRccVcdProvTable=atmIfPnniRccVcdProvTable, atmPnniMIB=atmPnniMIB, atmIfVptPnniRccStateEntry=atmIfVptPnniRccStateEntry, atmIfPnniRccVcdUnshapedTransmitQueueing=atmIfPnniRccVcdUnshapedTransmitQueueing, atmIfPnniRccVcdTrafficShaping=atmIfPnniRccVcdTrafficShaping, atmIfVptPnniOperationalTable=atmIfVptPnniOperationalTable, atmIfVptPnniSigAddressConversion=atmIfVptPnniSigAddressConversion, atmIfVptPnniSigStatsTable=atmIfVptPnniSigStatsTable, atmIfVptPnniAccountClass=atmIfVptPnniAccountClass, atmIfVptPnniRccVcdRowStatusEntry=atmIfVptPnniRccVcdRowStatusEntry, atmIfVptPnniProvEntry=atmIfVptPnniProvEntry, atmIfPnniSigVcdTdpIndex=atmIfPnniSigVcdTdpIndex, atmIfPnniAddrPnniInfoProvTable=atmIfPnniAddrPnniInfoProvTable, atmIfVptPnniVProvTable=atmIfVptPnniVProvTable, atmIfVptPnniAddrPnniInfoComponentName=atmIfVptPnniAddrPnniInfoComponentName, atmIfVptPnniAddrTermSP=atmIfVptPnniAddrTermSP, atmIfPnniAddrPnniInfoRowStatusEntry=atmIfPnniAddrPnniInfoRowStatusEntry, atmIfPnniPortId=atmIfPnniPortId, atmIfVptPnniOperationalEntry=atmIfVptPnniOperationalEntry, atmIfVptPnniRowStatus=atmIfVptPnniRowStatus, atmIfPnniRccOperationalState=atmIfPnniRccOperationalState, atmPnniGroupBE=atmPnniGroupBE, atmIfVptPnniAddrPnniInfoStorageType=atmIfVptPnniAddrPnniInfoStorageType, atmIfVptPnniAddrOperEntry=atmIfVptPnniAddrOperEntry, atmIfPnniAddrReachability=atmIfPnniAddrReachability, atmIfVptPnniRccAdminState=atmIfVptPnniRccAdminState, atmIfPnniSigVcdRowStatusEntry=atmIfPnniSigVcdRowStatusEntry, atmIfPnniRccStorageType=atmIfPnniRccStorageType, atmIfVptPnniSigStateTable=atmIfVptPnniSigStateTable, atmIfVptPnniSigUsageState=atmIfVptPnniSigUsageState, atmIfVptPnniAddrPnniInfoRowStatusEntry=atmIfVptPnniAddrPnniInfoRowStatusEntry, atmIfPnniSigVcdTrafficDescType=atmIfPnniSigVcdTrafficDescType, atmIfPnniSigPeakPmpConnections=atmIfPnniSigPeakPmpConnections, atmIfPnniSigTxPdus=atmIfPnniSigTxPdus, atmIfPnniRccVcd=atmIfPnniRccVcd, atmIfVptPnniAcctOptEntry=atmIfVptPnniAcctOptEntry, atmIfVptPnniRccVcdTrafficShaping=atmIfVptPnniRccVcdTrafficShaping, atmIfPnniRccVci=atmIfPnniRccVci, atmIfPnniRccBadHelloPacketsRx=atmIfPnniRccBadHelloPacketsRx, atmIfVptPnniRccBadHelloPacketsRx=atmIfVptPnniRccBadHelloPacketsRx, atmIfVptPnniAddrTermSPComponentName=atmIfVptPnniAddrTermSPComponentName)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-AtmPnniMIB", atmIfPnniSigProvTable=atmIfPnniSigProvTable, atmIfVptPnniAddrTermSPRowStatusTable=atmIfVptPnniAddrTermSPRowStatusTable, atmIfVptPnniSigTxPdus=atmIfVptPnniSigTxPdus, atmIfVptPnniAccountCollection=atmIfVptPnniAccountCollection, atmIfPnniSigCurrentConnections=atmIfPnniSigCurrentConnections, atmIfPnniRccStateTable=atmIfPnniRccStateTable, atmIfPnniAddrAddressIndex=atmIfPnniAddrAddressIndex, atmIfVptPnniSigLastRxCauseCode=atmIfVptPnniSigLastRxCauseCode, atmIfPnniRccProvTable=atmIfPnniRccProvTable, atmIfPnniRccVcdComponentName=atmIfPnniRccVcdComponentName, atmIfVptPnniAddrAddressTypeIndex=atmIfVptPnniAddrAddressTypeIndex, atmIfPnniAcctOptEntry=atmIfPnniAcctOptEntry, atmIfVptPnniSigLastRxDiagCode=atmIfVptPnniSigLastRxDiagCode, atmIfVptPnniRccRemotePortId=atmIfVptPnniRccRemotePortId, atmPnniCapabilitiesBE=atmPnniCapabilitiesBE, atmIfVptPnniRccOperEntry=atmIfVptPnniRccOperEntry, atmIfPnniSigVcdTdpEntry=atmIfPnniSigVcdTdpEntry, atmIfPnniRccVcdTdpIndex=atmIfPnniRccVcdTdpIndex, atmIfVptPnniAddrStorageType=atmIfVptPnniAddrStorageType, atmIfVptPnniSigProvTable=atmIfVptPnniSigProvTable, atmIfVptPnniRccVcdAtmServiceCategory=atmIfVptPnniRccVcdAtmServiceCategory, atmIfPnniRccVcdStorageType=atmIfPnniRccVcdStorageType, atmIfVptPnniSigVcdRowStatus=atmIfVptPnniSigVcdRowStatus, atmIfVptPnniRccUsageState=atmIfVptPnniRccUsageState, atmIfPnniRccVcdTdpValue=atmIfPnniRccVcdTdpValue, atmIfPnniRccRowStatusEntry=atmIfPnniRccRowStatusEntry, atmIfPnniSigVcdIndex=atmIfPnniSigVcdIndex, atmIfVptPnniRcc=atmIfVptPnniRcc, atmIfPnniSigRowStatusTable=atmIfPnniSigRowStatusTable, atmIfPnniSigVcdTdpTable=atmIfPnniSigVcdTdpTable, atmIfVptPnniAddrReachability=atmIfVptPnniAddrReachability, atmIfPnniAdminWeightsTable=atmIfPnniAdminWeightsTable, atmIfVptPnniSigProvEntry=atmIfVptPnniSigProvEntry, atmIfVptPnniRccVcdTdpIndex=atmIfVptPnniRccVcdTdpIndex, atmIfPnniRccHelloInactivityFactor=atmIfPnniRccHelloInactivityFactor, atmIfPnniRccVcdRowStatus=atmIfPnniRccVcdRowStatus, atmIfVptPnniAcctOptTable=atmIfVptPnniAcctOptTable, atmIfPnniSigFailedConnections=atmIfPnniSigFailedConnections, atmIfVptPnniSigVcdTdpEntry=atmIfVptPnniSigVcdTdpEntry, atmIfVptPnniAdminWeightsEntry=atmIfVptPnniAdminWeightsEntry, atmIfPnniRccHlParmsEntry=atmIfPnniRccHlParmsEntry, atmIfVptPnniAddrRowStatusEntry=atmIfVptPnniAddrRowStatusEntry, atmIfPnniSigLastRxDiagCode=atmIfPnniSigLastRxDiagCode, atmIfVptPnniAddrRowStatusTable=atmIfVptPnniAddrRowStatusTable, atmIfPnniSigSuccessfulConnections=atmIfPnniSigSuccessfulConnections, atmIfPnniRccVcdUsageParameterControl=atmIfPnniRccVcdUsageParameterControl, atmIfPnniSigNewCurrentConnections=atmIfPnniSigNewCurrentConnections, atmIfVptPnniRccVcdProvTable=atmIfVptPnniRccVcdProvTable, atmIfVptPnniRccStatsTable=atmIfVptPnniRccStatsTable, atmIfVptPnniCbrWeight=atmIfVptPnniCbrWeight, atmIfPnniSigVcdRowStatus=atmIfPnniSigVcdRowStatus, atmIfVptPnniSigVcdProvTable=atmIfVptPnniSigVcdProvTable, atmIfPnniSigVcdUnshapedTransmitQueueing=atmIfPnniSigVcdUnshapedTransmitQueueing, atmIfVptPnniAddrOperTable=atmIfVptPnniAddrOperTable, atmIfPnniRccComponentName=atmIfPnniRccComponentName, atmIfVptPnniRccHelloPacketsTx=atmIfVptPnniRccHelloPacketsTx, atmIfVptPnniAddrComponentName=atmIfVptPnniAddrComponentName, atmIfPnniRowStatus=atmIfPnniRowStatus, atmIfVptPnniAddrPnniInfoRowStatus=atmIfVptPnniAddrPnniInfoRowStatus, atmIfPnniSigStatsEntry=atmIfPnniSigStatsEntry, atmIfPnniRccUsageState=atmIfPnniRccUsageState, atmIfPnniSigVcdUsageParameterControl=atmIfPnniSigVcdUsageParameterControl, atmIfPnniRccStatsEntry=atmIfPnniRccStatsEntry, atmIfPnniRowStatusEntry=atmIfPnniRowStatusEntry, atmIfPnniAddrAddressTypeIndex=atmIfPnniAddrAddressTypeIndex, atmIfPnniSoftPvpAndPvcRetryPeriod=atmIfPnniSoftPvpAndPvcRetryPeriod, atmIfPnniRccOperEntry=atmIfPnniRccOperEntry, atmIfPnniServiceExchange=atmIfPnniServiceExchange, atmIfPnniRccVcdProvEntry=atmIfPnniRccVcdProvEntry, atmIfVptPnniSigComponentName=atmIfVptPnniSigComponentName, atmIfPnniAddrRowStatusEntry=atmIfPnniAddrRowStatusEntry, atmIfVptPnniAddrPnniInfoRowStatusTable=atmIfVptPnniAddrPnniInfoRowStatusTable, atmIfVptPnniAddrTermSPStorageType=atmIfVptPnniAddrTermSPStorageType, atmIfVptPnniRccHelloState=atmIfVptPnniRccHelloState, atmIfPnniIndex=atmIfPnniIndex, atmIfPnniRccHlParmsTable=atmIfPnniRccHlParmsTable, atmIfVptPnniRccVcdStorageType=atmIfVptPnniRccVcdStorageType, atmIfPnniAddrOperTable=atmIfPnniAddrOperTable, atmIfVptPnniAddrScope=atmIfVptPnniAddrScope, atmIfPnniRccHelloInterval=atmIfPnniRccHelloInterval, atmIfVptPnniRccVcdTdpEntry=atmIfVptPnniRccVcdTdpEntry, atmPnniCapabilitiesBE00=atmPnniCapabilitiesBE00, atmIfVptPnniSigAdminState=atmIfVptPnniSigAdminState, atmIfPnniRccOperTable=atmIfPnniRccOperTable)
