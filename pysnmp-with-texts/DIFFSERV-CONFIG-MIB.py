#
# PySNMP MIB module DIFFSERV-CONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DIFFSERV-CONFIG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:47:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Integer32, Bits, NotificationType, Counter32, ObjectIdentity, iso, IpAddress, Counter64, zeroDotZero, Unsigned32, Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, mib_2, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "NotificationType", "Counter32", "ObjectIdentity", "iso", "IpAddress", "Counter64", "zeroDotZero", "Unsigned32", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "mib-2", "MibIdentifier")
DateAndTime, RowPointer, TextualConvention, DisplayString, RowStatus, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "RowPointer", "TextualConvention", "DisplayString", "RowStatus", "StorageType")
diffServConfigMib = ModuleIdentity((1, 3, 6, 1, 2, 1, 108))
diffServConfigMib.setRevisions(('2004-01-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: diffServConfigMib.setRevisionsDescriptions(('Initial version published as RFC 3747',))
if mibBuilder.loadTexts: diffServConfigMib.setLastUpdated('200401220000Z')
if mibBuilder.loadTexts: diffServConfigMib.setOrganization('SNMPCONF WG')
if mibBuilder.loadTexts: diffServConfigMib.setContactInfo('SNMPCONF Working Group http://www.ietf.org/html.charters/snmpconf-charter.html WG mailing list: snmpconf@snmp.com Editors: Harrie Hazewinkel I.Net via Darwin 85 20019 - Settimo Milanese (MI) Italy EMail: harrie@inet.it David Partain Ericsson AB P.O. Box 1248 SE-581 12 Linkoping Sweden E-mail: David.Partain@ericsson.com')
if mibBuilder.loadTexts: diffServConfigMib.setDescription("This MIB module contains differentiated services specific managed objects to perform higher-level configuration management. This MIB allows policies to use 'templates' to instantiate Differentiated Services functional datapath configurations to be assigned (associated with an interface and direction) when a policy is activated. Copyright (C) The Internet Society (2004). This version of this MIB module is part of RFC 3747; see the RFC itself for full legal notices.")
diffServConfigMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 108, 1))
diffServConfigMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 108, 2))
diffServConfigTable = MibTable((1, 3, 6, 1, 2, 1, 108, 1, 2), )
if mibBuilder.loadTexts: diffServConfigTable.setStatus('current')
if mibBuilder.loadTexts: diffServConfigTable.setDescription("A table which defines the various per-hop-behaviors for which the system has default 'templates'.")
diffServConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 108, 1, 2, 1), ).setIndexNames((0, "DIFFSERV-CONFIG-MIB", "diffServConfigId"))
if mibBuilder.loadTexts: diffServConfigEntry.setStatus('current')
if mibBuilder.loadTexts: diffServConfigEntry.setDescription('An entry defining a per-hop-behavior. Each entry in this table combines the various parameters (entries) into a specific per-hop-behavior. Entries in this table might be defined by a vendor (pre-configured) or defined by a management application.')
diffServConfigId = MibTableColumn((1, 3, 6, 1, 2, 1, 108, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 116)))
if mibBuilder.loadTexts: diffServConfigId.setStatus('current')
if mibBuilder.loadTexts: diffServConfigId.setDescription('A unique id for the per-hop-behavior policy for at least the SNMP agent. For ease of administration the value may be unique within an administrative domain, but this is not required. The range of up to 116 octets is chosen to stay within the SMI limit of 128 sub-identifiers in an object identifier.')
diffServConfigDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 108, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServConfigDescr.setStatus('current')
if mibBuilder.loadTexts: diffServConfigDescr.setDescription("A human-readable description to identify this defined per-hop-behavior. Note that this is an SnmpAdminString, which permits UTF-8 strings. An administratively assigned identifier for a template that would be unique within an administrative domain. It is up to the management applications to agree how these are assigned within the administrative domain. Once a description, such as 'EF' is assigned, that has a certain set of parameters that achieve 'EF' from box to box. Management application code or script code can then scan the table to find the proper template and then assign it.")
diffServConfigOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 108, 1, 2, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServConfigOwner.setStatus('current')
if mibBuilder.loadTexts: diffServConfigOwner.setDescription('The owner who created this entry.')
diffServConfigLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 108, 1, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServConfigLastChange.setStatus('current')
if mibBuilder.loadTexts: diffServConfigLastChange.setDescription('The date and time when this entry was last changed.')
diffServConfigStart = MibTableColumn((1, 3, 6, 1, 2, 1, 108, 1, 2, 1, 5), RowPointer().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServConfigStart.setReference('Differentiated Services MIB module')
if mibBuilder.loadTexts: diffServConfigStart.setStatus('current')
if mibBuilder.loadTexts: diffServConfigStart.setDescription('The pointer to a functional datapath configuration template as set up in the DIFFSERV-MIB. This RowPointer should point to an instance of one of: diffServClfrEntry diffServMeterEntry diffServActionEntry diffServAlgDropEntry diffServQEntry A value of zeroDotZero in this attribute indicates no further Diffserv treatment is performed on traffic of this functional datapath. This also means that the template described by this row is not defined. If the row pointed to does not exist, the treatment is as if this attribute contains a value of zeroDotZero.')
diffServConfigStorage = MibTableColumn((1, 3, 6, 1, 2, 1, 108, 1, 2, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServConfigStorage.setStatus('current')
if mibBuilder.loadTexts: diffServConfigStorage.setDescription("The type of storage used for this row. Since an entry in this table serves as a starting point for a configuration, it is recommended that all entries comprising the configuration started by diffServConfigStart follow the storage type of this entry. Otherwise, after agent reboots a configuration may differ. It may very well be that the agent is not capable of detecting such changes and therefore, the management application should verify the correct configuration after a reboot. Rows with a StorageType of 'permanent' do not need to allow write access to any of the columnar objects in that row.")
diffServConfigStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 108, 1, 2, 1, 7), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServConfigStatus.setStatus('current')
if mibBuilder.loadTexts: diffServConfigStatus.setDescription('RowStatus object used for creation and deletion of rows in this table. All writable objects in this row may be modified at any time.')
diffServConfigMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 108, 2, 1))
diffServConfigMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 108, 2, 2))
diffServConfigMIBFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 108, 2, 1, 1)).setObjects(("DIFFSERV-CONFIG-MIB", "diffServConfigMIBConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    diffServConfigMIBFullCompliance = diffServConfigMIBFullCompliance.setStatus('current')
if mibBuilder.loadTexts: diffServConfigMIBFullCompliance.setDescription("The full compliance for this MIB module. For this compliance level the 'diffServMIBFullCompliance' must be met, since this MIB module depends on it in order to provide the configuration entries. ")
diffServConfigMIBConfigGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 108, 2, 2, 1)).setObjects(("DIFFSERV-CONFIG-MIB", "diffServConfigDescr"), ("DIFFSERV-CONFIG-MIB", "diffServConfigOwner"), ("DIFFSERV-CONFIG-MIB", "diffServConfigLastChange"), ("DIFFSERV-CONFIG-MIB", "diffServConfigStart"), ("DIFFSERV-CONFIG-MIB", "diffServConfigStorage"), ("DIFFSERV-CONFIG-MIB", "diffServConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    diffServConfigMIBConfigGroup = diffServConfigMIBConfigGroup.setStatus('current')
if mibBuilder.loadTexts: diffServConfigMIBConfigGroup.setDescription('The per-hop-behavior Group defines the MIB objects that describe the configuration template for the per-hop-behavior.')
mibBuilder.exportSymbols("DIFFSERV-CONFIG-MIB", diffServConfigId=diffServConfigId, diffServConfigDescr=diffServConfigDescr, diffServConfigMIBGroups=diffServConfigMIBGroups, diffServConfigMIBConformance=diffServConfigMIBConformance, diffServConfigOwner=diffServConfigOwner, diffServConfigStatus=diffServConfigStatus, diffServConfigTable=diffServConfigTable, diffServConfigEntry=diffServConfigEntry, diffServConfigMIBObjects=diffServConfigMIBObjects, diffServConfigMib=diffServConfigMib, diffServConfigMIBFullCompliance=diffServConfigMIBFullCompliance, PYSNMP_MODULE_ID=diffServConfigMib, diffServConfigMIBCompliances=diffServConfigMIBCompliances, diffServConfigMIBConfigGroup=diffServConfigMIBConfigGroup, diffServConfigLastChange=diffServConfigLastChange, diffServConfigStart=diffServConfigStart, diffServConfigStorage=diffServConfigStorage)
