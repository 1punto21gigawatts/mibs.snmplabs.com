#
# PySNMP MIB module CISCO-NBAR-PROTOCOL-DISCOVERY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-NBAR-PROTOCOL-DISCOVERY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:08:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, ModuleIdentity, Integer32, MibIdentifier, NotificationType, Bits, Unsigned32, TimeTicks, Gauge32, ObjectIdentity, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "ModuleIdentity", "Integer32", "MibIdentifier", "NotificationType", "Bits", "Unsigned32", "TimeTicks", "Gauge32", "ObjectIdentity", "Counter32", "Counter64")
TruthValue, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "TextualConvention")
ciscoNbarProtocolDiscoveryMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 244))
ciscoNbarProtocolDiscoveryMIB.setRevisions(('2002-08-16 00:00', '2001-12-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoNbarProtocolDiscoveryMIB.setRevisionsDescriptions(("Added comment that cnpdStatusLastUpdateTime becomes zero when PD disabled. Added comment that during overflow in cnpdAllStatsTable, the 32 bit counter not valid. There is no overflow support for it. One should only use the HC (64 bit) counters to get the stats in cnpdAllStatsTable Default cnpdTopNConfigStatsSelect changed from 'bitRateSum' to 'byteCountSum'. Added better rowStatus descriptions to TopNConfig and ThresholdConfig tables. Added comment to explain what TopNSampleTime really does - i.e only changes sample time for bitrate on an interface. Changed sizes of TopN and Threshold tables according to memory requirements and recommendations from various platforms. Added following objects to cnpdThresholdHistoryTable: cnpdThresholdHistoryValue cnpdThresholdHistoryType cnpdThresholdHistoryProtocol cnpdThresholdHistoryStatsSelect Changed reported objects in Notification Table to reflect changes in cnpdThresholdHistoryTable.", 'Initial version of this MIB module',))
if mibBuilder.loadTexts: ciscoNbarProtocolDiscoveryMIB.setLastUpdated('200208160000Z')
if mibBuilder.loadTexts: ciscoNbarProtocolDiscoveryMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoNbarProtocolDiscoveryMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 800 553-NETS E-mail: cs-cnpd-mib@cisco.com')
if mibBuilder.loadTexts: ciscoNbarProtocolDiscoveryMIB.setDescription('Cisco NBAR Protocol Discovery MIB NBAR - Network Based Application Recognition is an intelligent classification engine that recognizes applications that are static (which use fixed TCP or UDP port numbers), and stateful (which dynamically assign TCP or UDP port numbers). Protocol Discovery - uses NBAR to show you the mix of applications currently running on the network. Key statistics are associated with each protocol. These statistics can be used to define traffic classes and QoS policies. Functionality: 1. To enable/disable Protocol Discovery per interface. 2. Display the protocols/applications which NBAR currently recognizes. 3. To display various Protocol Discovery statistics. 4. A configurable top N table which lists protocols using user defined criteria. 5. To configure notifications (traps) based on configurable statistic thresholds. 6. To maintain a history table of all notification events.')
class CiscoPdProtocolIndex(TextualConvention, Unsigned32):
    description = 'An object which represents a unique identifier for a protocol or application which NBAR currently recognizes. The value of this object is defined in the cnpdSupportedProtocolsTable.'
    status = 'current'

class CiscoPdProtocolName(TextualConvention, OctetString):
    description = 'Name of an application or protocol, which NBAR is capable of recognizing. For example: ftp, vdolive and citrix.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

class CiscoPdDataType(TextualConvention, Integer32):
    description = 'These are the data types which NBAR can measure a particular protocol by. bitRateIn(1) - incoming bitrate. bitRateOut(2) - outgoing bitrate. bitRateSum(3) - sum of incoming and outgoing bitrate. byteCountIn(4) - incoming bytecount. byteCountOut(5) - outgoing bytecount. byteCountSum(6) - sum of incoming and outgoing bytecount. packetCountIn(7) - incoming packetcount. packetCountOut(8) - outgoing packetcount. packetCountSum(9) - sum of incoming and outgoing packetcount. UNITS: bitrate - unit is kilo bits per second bytecount - unit is bytes packetcount - unit is packets'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("bitRateIn", 1), ("bitRateOut", 2), ("bitRateSum", 3), ("byteCountIn", 4), ("byteCountOut", 5), ("byteCountSum", 6), ("packetCountIn", 7), ("packetCountOut", 8), ("packetCountSum", 9))

cnpdMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 244, 0))
cnpdMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 244, 1))
cnpdMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 244, 2))
cnpdStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 1))
cnpdAllStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 2))
cnpdTopNConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 3))
cnpdTopNStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 4))
cnpdThresholdConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 5))
cnpdThresholdHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 6))
cnpdNotificationsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 7))
cnpdSupportedProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 8))
cnpdMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 244, 2, 1))
cnpdMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 244, 2, 2))
cnpdSupportedProtocolsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 8, 1), )
if mibBuilder.loadTexts: cnpdSupportedProtocolsTable.setStatus('current')
if mibBuilder.loadTexts: cnpdSupportedProtocolsTable.setDescription('The Supported Protocols table lists all the protocols and applications which NBAR is currently capable of recognizing.')
cnpdSupportedProtocolsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 8, 1, 1), ).setIndexNames((0, "CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdSupportedProtocolsIndex"))
if mibBuilder.loadTexts: cnpdSupportedProtocolsEntry.setStatus('current')
if mibBuilder.loadTexts: cnpdSupportedProtocolsEntry.setDescription('A entry in the Supported Protocols table reflecting key information about a protocol.')
cnpdSupportedProtocolsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 8, 1, 1, 1), CiscoPdProtocolIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: cnpdSupportedProtocolsIndex.setStatus('current')
if mibBuilder.loadTexts: cnpdSupportedProtocolsIndex.setDescription('A unique identifier of a row in this table. Thus it also represents a unique identifier for a protocol or application which NBAR currently recognizes.')
cnpdSupportedProtocolsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 8, 1, 1, 2), CiscoPdProtocolName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdSupportedProtocolsName.setStatus('current')
if mibBuilder.loadTexts: cnpdSupportedProtocolsName.setDescription('This object reflects the valid string of a protocol or application which NBAR currently recognizes.')
cnpdStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 1, 1), )
if mibBuilder.loadTexts: cnpdStatusTable.setStatus('current')
if mibBuilder.loadTexts: cnpdStatusTable.setDescription('The cnpdStatusTable is used to enable and disable Protocol Discovery on an interface.')
cnpdStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cnpdStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cnpdStatusEntry.setDescription('An entry in the cnpdStatusTable contains objects for enabling or disabling Protocol Discovery on a per interface basis.')
cnpdStatusPdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnpdStatusPdEnable.setStatus('current')
if mibBuilder.loadTexts: cnpdStatusPdEnable.setDescription("This object is used to enable or disable Protocol Discovery on an interface. If set to 'true' - Protocol Discovery is enabled on this Interface. If set to 'false' - Protocol Discovery is disabled on this Interface.")
cnpdStatusLastUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 1, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdStatusLastUpdateTime.setStatus('current')
if mibBuilder.loadTexts: cnpdStatusLastUpdateTime.setDescription('The value of sysUpTime at the time Protocol Discovery was last enabled on an interface. If the interface does not have Protocol Discovery enabled this value is zero.')
cnpdAllStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 2, 1), )
if mibBuilder.loadTexts: cnpdAllStatsTable.setStatus('current')
if mibBuilder.loadTexts: cnpdAllStatsTable.setDescription('The cnpdAllStatsTable contains all the statistics available for all the protocols/applications currently recognized by NBAR Protocol Discovery for a particular interface. In the event of an overflow, the 32 bit counters are not valid. There is no overflow support.')
cnpdAllStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdAllStatsProtocolsIndex"))
if mibBuilder.loadTexts: cnpdAllStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cnpdAllStatsEntry.setDescription('An entry in the cnpdAllStatsTable table. This entry contains the statistics collected on all the protocols which NBAR classifies for a particular interface.')
cnpdAllStatsProtocolsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 2, 1, 1, 1), CiscoPdProtocolIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: cnpdAllStatsProtocolsIndex.setStatus('current')
if mibBuilder.loadTexts: cnpdAllStatsProtocolsIndex.setDescription('An object which represents a unique identifier for a protocol or application which NBAR currently recognizes. This object is an index into the SupportedProtocolsTable where details of the protocol can be found.')
cnpdAllStatsProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 2, 1, 1, 2), CiscoPdProtocolName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdAllStatsProtocolName.setStatus('current')
if mibBuilder.loadTexts: cnpdAllStatsProtocolName.setDescription('Name of the application or protocol, a unique textual string, assigned in the cnpdSupportedProtocolsTable.')
cnpdAllStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 2, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdAllStatsInPkts.setStatus('current')
if mibBuilder.loadTexts: cnpdAllStatsInPkts.setDescription('The packet count of inbound packets as determined by Protocol Discovery.')
cnpdAllStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 2, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdAllStatsOutPkts.setStatus('current')
if mibBuilder.loadTexts: cnpdAllStatsOutPkts.setDescription('The packet count of outbound packets as determined by Protocol Discovery.')
cnpdAllStatsInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 2, 1, 1, 5), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdAllStatsInBytes.setStatus('current')
if mibBuilder.loadTexts: cnpdAllStatsInBytes.setDescription('The byte count of inbound octets as determined by Protocol Discovery.')
cnpdAllStatsOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 2, 1, 1, 6), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdAllStatsOutBytes.setStatus('current')
if mibBuilder.loadTexts: cnpdAllStatsOutBytes.setDescription('The byte count of outbound octets as determined by Protocol Discovery.')
cnpdAllStatsHCInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 2, 1, 1, 7), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdAllStatsHCInPkts.setStatus('current')
if mibBuilder.loadTexts: cnpdAllStatsHCInPkts.setDescription('The packet count of inbound packets as determined by Protocol Discovery. This is the 64-bit (High Capacity) version of cnpdAllStatsInPkts.')
cnpdAllStatsHCOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 2, 1, 1, 8), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdAllStatsHCOutPkts.setStatus('current')
if mibBuilder.loadTexts: cnpdAllStatsHCOutPkts.setDescription('The packet count of outbound packets as determined by Protocol Discovery. This is the 64-bit (High Capacity) version of cnpdAllStatsOutPkts.')
cnpdAllStatsHCInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 2, 1, 1, 9), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdAllStatsHCInBytes.setStatus('current')
if mibBuilder.loadTexts: cnpdAllStatsHCInBytes.setDescription('The byte count of inbound octets as determined by Protocol Discovery. This is the 64-bit (High Capacity) version of cnpdAllStatsInBytes.')
cnpdAllStatsHCOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 2, 1, 1, 10), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdAllStatsHCOutBytes.setStatus('current')
if mibBuilder.loadTexts: cnpdAllStatsHCOutBytes.setDescription('The byte count of outbound octets as determined by Protocol Discovery. This is the 64-bit (High Capacity) version of cnpdAllStatsOutBytes.')
cnpdAllStatsInBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 2, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('kilo bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdAllStatsInBitRate.setStatus('current')
if mibBuilder.loadTexts: cnpdAllStatsInBitRate.setDescription('The inbound bit rate as determined by Protocol Discovery.')
cnpdAllStatsOutBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 2, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('kilo bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdAllStatsOutBitRate.setStatus('current')
if mibBuilder.loadTexts: cnpdAllStatsOutBitRate.setDescription('The outbound bit rate as determined by Protocol Discovery.')
cnpdTopNConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 3, 1), )
if mibBuilder.loadTexts: cnpdTopNConfigTable.setStatus('current')
if mibBuilder.loadTexts: cnpdTopNConfigTable.setDescription("The cnpdTopNConfigTable is used to configure cnpdTopNStatsTable's.")
cnpdTopNConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdTopNConfigIndex"))
if mibBuilder.loadTexts: cnpdTopNConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cnpdTopNConfigEntry.setDescription('This entry provides the objects to configure and thus initiate the generation of a cnpdTopNStatsTable..')
cnpdTopNConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: cnpdTopNConfigIndex.setStatus('current')
if mibBuilder.loadTexts: cnpdTopNConfigIndex.setDescription('A monotonically increasing integer which uniquely identifies a cnpdTopNConfigEntry in the cnpdTopNConfigTable.')
cnpdTopNConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 3, 1, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnpdTopNConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: cnpdTopNConfigIfIndex.setDescription('This object allows the management station to select the interface, which Protocol Discovery is running on, to be used to create this cnpdTopNConfigEntry.')
cnpdTopNConfigStatsSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 3, 1, 1, 3), CiscoPdDataType().clone('byteCountSum')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnpdTopNConfigStatsSelect.setStatus('current')
if mibBuilder.loadTexts: cnpdTopNConfigStatsSelect.setDescription('This object allows the management station to select the statistic used to base the order of the top-n table on. For example: a cnpdTopNConfigStatsSelect of bitRateSum means order this table based on each applications/protocols combined in and out bitrate.')
cnpdTopNConfigSampleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnpdTopNConfigSampleTime.setStatus('current')
if mibBuilder.loadTexts: cnpdTopNConfigSampleTime.setDescription('If the cnpdTopNConfigStatsSelect is bitRateIn, bitRateOut or bitRateSum, then this value is the interval in seconds that the bitrate is sampled. This has no effect if the cnpdTopNConfigStatsSelect is byte or packet based. When this object is modified by the management station, a new sample period is started regardless of whether the original cnpdTopNConfigSampleTime was finished.')
cnpdTopNConfigRequestedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 3, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnpdTopNConfigRequestedSize.setStatus('current')
if mibBuilder.loadTexts: cnpdTopNConfigRequestedSize.setDescription("The requested size of the associated cnpdTopNStatsTable entry. For example a cnpdTopNConfigRequestedSize of 20 indicates the management station wants to create an associated cnpdTopNStatsTable entry of 20 protocol/application's")
cnpdTopNConfigGrantedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 3, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdTopNConfigGrantedSize.setStatus('current')
if mibBuilder.loadTexts: cnpdTopNConfigGrantedSize.setDescription('The actual size of the associated cnpdTopNStatsTable entry. The reason this may differ from cnpdTopNConfigRequestedSize is because a management station may request a number of protocols that is greater than the number of protocols actually found by Protocol Discovery.')
cnpdTopNConfigTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 3, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdTopNConfigTime.setStatus('current')
if mibBuilder.loadTexts: cnpdTopNConfigTime.setDescription('The value of sysUpTime when the associated cnpdTopNStatsTable entry was created.')
cnpdTopNConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 3, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnpdTopNConfigStatus.setStatus('current')
if mibBuilder.loadTexts: cnpdTopNConfigStatus.setDescription("This object is used to create or delete the row entry in cnpdTopNConfigTable. When creating a row entry the management station is required to specify a value for cnpdTopNConfigIfIndex only. 'notReady' means that a row exists but either it has no valid IfIndex or it has not been set to createAndGo or active. 'active' means that a createAndGo or active has been issued, AND a valid ifIndex exists. Therefore if a row is 'active' it means a TopNStats entry has been generated. If you set an 'active' row to createAndWait it will get the status 'notReady'. If you set any row to 'notReady' - it will go to the 'notReadystate'. If you set any row to 'notInService' - it will go to the 'notInService' state and the corresponding TopNStatsEntry will be deleted. The same TopNConfig entry can be re-used without changes by setting it to 'active'. The corresponding TopStatsTable entry will be regenerated. This can be used by the NMS to poll a particular TopNConfig Entry. Changes to an existing TopNConfig entry can be made by setting the status to 'createAndWait' and changing the necessary objects. Setting it to 'createAndGo' or 'active' will cause the corresponding TopNStats entry to be regenerated.")
cnpdTopNStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 4, 1), )
if mibBuilder.loadTexts: cnpdTopNStatsTable.setStatus('current')
if mibBuilder.loadTexts: cnpdTopNStatsTable.setDescription('A cnpdTopNStatsTable describes an ordered list of protocols.')
cnpdTopNStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdTopNConfigIndex"), (0, "CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdTopNStatsIndex"))
if mibBuilder.loadTexts: cnpdTopNStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cnpdTopNStatsEntry.setDescription('This entry is used to store a set of objects which describe a cnpdTopNStatsTable. A cnpdTopNStatsTable is a number of protocols and statistics sorted according to the criteria in the associated cnpdTopNConfigEntry. Therefore a cnpdTopNStatsTable can differ in content and size according to what was configured in the associated cnpdTopNConfigTableEntry.')
cnpdTopNStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)))
if mibBuilder.loadTexts: cnpdTopNStatsIndex.setStatus('current')
if mibBuilder.loadTexts: cnpdTopNStatsIndex.setDescription('A monotonically increasing integer which uniquely identifies a cnpdTopNStatsEntry in the cnpdTopNStatsTable.')
cnpdTopNStatsProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 4, 1, 1, 2), CiscoPdProtocolName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdTopNStatsProtocolName.setStatus('current')
if mibBuilder.loadTexts: cnpdTopNStatsProtocolName.setDescription('Name of the application or protocol, a unique textual string, assigned in the cnpdSupportedProtocolsTable.')
cnpdTopNStatsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdTopNStatsRate.setStatus('current')
if mibBuilder.loadTexts: cnpdTopNStatsRate.setDescription('The amount of change in the selected statistic during this sampling interval. The selected statistic is the cnpdTopNConfigStatsSelect from the associated cnpdTopNConfigStatsEntry.')
cnpdTopNStatsHCRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 4, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdTopNStatsHCRate.setStatus('current')
if mibBuilder.loadTexts: cnpdTopNStatsHCRate.setDescription('The amount of change in the selected statistic during this sampling interval. The selected statistic is the cnpdTopNConfigStatsSelect from the associated cnpdTopNConfigStatsEntry. This is the 64-bit (High Capacity) version of cnpdTopNStatsRate.')
cnpdThresholdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 5, 1), )
if mibBuilder.loadTexts: cnpdThresholdConfigTable.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdConfigTable.setDescription('The cnpdThresholdConfigTable allows the management station to create thresholds for the purpose of sending notifications if breached, and creating a history of breached thresholds.')
cnpdThresholdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigIndex"))
if mibBuilder.loadTexts: cnpdThresholdConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdConfigEntry.setDescription('This entry contains configuration information to set thresholds for the purpose of notifications. The management station is allowed to set thresholds on individual statistics for individual protocols on an interface. If the threshold is breached by the protocol statistic, a new event is written to the cnpdThresholdHistoryTable, which in turn will generate a Notification Event. This function has a hysteresis mechanism to limit the generation of events. This mechanism generates one event as a threshold is crossed in the appropriate direction. No more events are generated for that threshold until the opposite threshold is crossed. This stops repeated Notification events being generated each time the value is sampled, when the value is above the threshold. Instead one notification is sent when the threshold is breached and one notification when the statistic drops below the threshold value again.')
cnpdThresholdConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: cnpdThresholdConfigIndex.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdConfigIndex.setDescription('A monotonically increasing integer which uniquely identifies an entry in the cnpdThresholdConfigTable.')
cnpdThresholdConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 5, 1, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnpdThresholdConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdConfigIfIndex.setDescription('This object allows the management station to select the interface, which Protocol Discovery is running on, to be used to create this cnpdThresholdConfigTable entry.')
cnpdThresholdConfigInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 5, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnpdThresholdConfigInterval.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdConfigInterval.setDescription('The interval in seconds over which the data is sampled and compared with cnpdThresholdConfigRising and cnpdThresholdConfigFalling thresholds.')
cnpdThresholdConfigSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2))).clone('absoluteValue')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnpdThresholdConfigSampleType.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdConfigSampleType.setDescription('The method of sampling the selected statistic and calculating the value to be compared against cnpdThresholdConfigRising or cnpdThresholdConfigFalling thresholds. If the value of this object is absoluteValue(1), the value at the end of the sampling interval cnpdThresholdConfigInterval, will be compared with the cnpdThresholdConfigRising and cnpdThresholdConfigFalling thresholds. In this mode, when cnpdThresholdConfigStatsSelect is byte or packet based, a maximum of two cnpdThresholdHistory entries will be created per application, as these byte and packet counts monotonically increase from zero. If the value of this object is deltaValue(2), the difference between the samples at the beginning and end of the cnpdThresholdConfigInterval will be compared with the cnpdThresholdConfigRising and cnpdThresholdConfigFalling thresholds. Because the difference in the previous and current samples are compared over the sample period cnpdThresholdConfigInterval, this mode provides more granularity to the thresholds because the NMS is now provided with the gradient or change in the cnpdThresholdConfigStatsSelect. Note that even though the sample value is monotonically increasing for byte and packet counts, cnpdThresholdConfigSampleType set to deltaValue, can generate falling cnpdThresholdHistory entries, because the gradient can be lower than the cnpdThresholdConfigFalling value.')
cnpdThresholdConfigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 5, 1, 1, 5), CiscoPdProtocolIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnpdThresholdConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdConfigProtocol.setDescription('The application or protocol which the management station wishes to configure a threshold on. This object is an index into the SupportedProtocolsTable where details of the protocol can be found. If cnpdThresholdConfigProtocolAny is set to TRUE this value will be ignored. If it is set to FALSE, then cnpdThresholdConfigProtocol will be the only protocol that is checked to see if it has breached the threshold.')
cnpdThresholdConfigProtocolAny = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 5, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnpdThresholdConfigProtocolAny.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdConfigProtocolAny.setDescription("If set to 'true' - this threshold is configured to check for any protocol which meets the threshold criteria. This means that multiple protocols can generate ThresholdHistoryTable entries. Each protocol is subject to the hysterisis mechanism. If set to 'false' - this threshold is configured to check for the protocol which meets the threshold criteria referred to by cnpdThresholdConfigProtocol.")
cnpdThresholdConfigStatsSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 5, 1, 1, 7), CiscoPdDataType().clone('bitRateSum')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnpdThresholdConfigStatsSelect.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdConfigStatsSelect.setDescription('This object allows the management station to select the statistic used to base the threshold on. For example a cnpdThresholdConfigStatsSelect of bitRateSum means cnpdThresholdConfigRising and cnpdThresholdConfigFalling are values based on the combined value of in and out bitrates.')
cnpdThresholdConfigStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rising", 1), ("falling", 2), ("risingOrFalling", 3))).clone('risingOrFalling')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnpdThresholdConfigStartup.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdConfigStartup.setDescription('This controls the type of notification that is sent when this threshold entry is first enabled. Because there is no previous sampling history, choosing one of these options determines the type of notification generated - Rising or Falling. If the first sample after this entry is enabled is greater than or equal to cnpdThresholdConfigRising and this object is equal to rising(1) or risingOrFalling(3), then a single rising notification will be generated. If the first sample after this entry is enabled is less than or equal to cnpdThresholdConfigFalling and this object is equal to falling(2) or risingOrFalling(3), then a single falling notification will be generated.')
cnpdThresholdConfigRising = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 5, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnpdThresholdConfigRising.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdConfigRising.setDescription('This is the threshold object which the managment station sets to determine if it gets breached. It indicates the statistic being sampled was rising. When the current sample is greater than or equal to this object, and the value at the last sampling interval was less than this object (in other words the value is rising), an entry in the cnpdThresholdHistoryTable will be created. After a rising event is generated, another such event will not be generated until the sampled value falls below this threshold and reaches the cnpdThresholdConfigFalling value. This ensures that samples which are taken after a cnpdThresholdConfigRising threshold event has been created, do not create further thresholds and therefore notifications, until the cnpdThresholdConfigFalling threshold has been met. Thus a very short cnpdThresholdConfigInterval can be chosen without risk of multiple notifications for the same threshold breach condition.')
cnpdThresholdConfigFalling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 5, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnpdThresholdConfigFalling.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdConfigFalling.setDescription('This is the threshold object which the management station sets to determine if it gets breached. It indicates the statistic being sampled was falling. When current sample is less than or equal to this object, and the value at the last sampling interval was greater than this object (in other words the value is falling), an entry in the cnpdThresholdHistoryTable will be created. After a falling event is generated, another such event will not be generated until the sampled value rises above this object and reaches the cnpdThresholdConfigRising value.')
cnpdThresholdConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 5, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnpdThresholdConfigStatus.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdConfigStatus.setDescription("This object is used to create or delete the row entry in cnpdThresholdConfigTable. When creating a row entry the management station is required to specify a value for cnpdThresholdConfigIfIndex, cnpdThresholdConfigRising and cnpdThresholdConfigFalling. 'active' means that a createAndGo or active has been issued, AND a valid ifIndex exists. And therefore if a row is 'active' it means a ThresholdHistory entry may have been generated if the value was breached. If you set an 'active' row to 'createAndWait' - it will in fact get the status 'notReady'. Likewise if you set any row to 'notInService' or 'notReady' it will go to the 'notReady' state.")
cnpdThresholdHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 6, 1), )
if mibBuilder.loadTexts: cnpdThresholdHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdHistoryTable.setDescription('The Threshold History table. Notifications are unreliable so this table provides a history of the last 5000 threshold breached events. A notification can be traced back to its cnpdThresholdHistoryEntry.')
cnpdThresholdHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdHistoryIndex"))
if mibBuilder.loadTexts: cnpdThresholdHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdHistoryEntry.setDescription('This entry is created each time a threshold is breached. Thus there is not necessarily a one to one relationship to cnpdThresholdConfigTable as not every Threshold configured will be breached.')
cnpdThresholdHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 6, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: cnpdThresholdHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdHistoryIndex.setDescription('A monotonically increasing integer which uniquely identifies this cnpdThresholdHistoryEntry in the cnpdThresholdHistory table.')
cnpdThresholdHistoryConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 6, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdThresholdHistoryConfigIndex.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdHistoryConfigIndex.setDescription('The cnpdThresholdConfigTable entry which generated this entry. Using this object the management station can backtrack to the appropriate cnpdThresholdConfigEntry.')
cnpdThresholdHistoryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 6, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdThresholdHistoryValue.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdHistoryValue.setDescription('The actual value of the statistic when the sampling was made.')
cnpdThresholdHistoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("risingBreach", 1), ("fallingBreach", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdThresholdHistoryType.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdHistoryType.setDescription('Describes whether this is an event caused by a rising or falling threshold breach.')
cnpdThresholdHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 6, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdThresholdHistoryTime.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdHistoryTime.setDescription('The value of sysUpTime of the running configuration when the event occurred.')
cnpdThresholdHistoryProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 6, 1, 1, 6), CiscoPdProtocolIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdThresholdHistoryProtocol.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdHistoryProtocol.setDescription('The application or protocol which the management station configured a threshold on. This object is an index into the SupportedProtocolsTable where details of the protocol can be found.')
cnpdThresholdHistoryStatsSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 6, 1, 1, 7), CiscoPdDataType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnpdThresholdHistoryStatsSelect.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdHistoryStatsSelect.setDescription('This is the statistic used to base the threshold on.')
cnpdNotificationsEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 244, 1, 7, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnpdNotificationsEnable.setStatus('current')
if mibBuilder.loadTexts: cnpdNotificationsEnable.setDescription("This object is used to enable or disable Notifications on a global basis. If set to 'true' - Notifications are enabled. If set to 'false' - Notifications are disabled.")
cnpdThresholdRisingEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 244, 0, 1)).setObjects(("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigIfIndex"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigStatsSelect"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdHistoryValue"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigRising"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigProtocol"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdHistoryTime"))
if mibBuilder.loadTexts: cnpdThresholdRisingEvent.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdRisingEvent.setDescription('A cnpdThresholdRisingEvent is sent whenever a notification entry crosses its rising threshold and generates an event that is added to the cnpdThresholdHistoryTable.')
cnpdThresholdFallingEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 244, 0, 2)).setObjects(("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigIfIndex"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigStatsSelect"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdHistoryValue"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigFalling"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigProtocol"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdHistoryTime"))
if mibBuilder.loadTexts: cnpdThresholdFallingEvent.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdFallingEvent.setDescription('A cnpdThresholdConfigFallingEvent is sent whenever a notification entry crosses its falling threshold and generates an event that is added to the cnpdThresholdHistoryTable.')
cnpdMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 244, 2, 1, 1)).setObjects(("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdStatsGroup"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdTopNGroup"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdGroup"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdMIBNotificationsGroup"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdMIBNotificationsConfigGroup"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdSupportedProtocolsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnpdMIBCompliance = cnpdMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cnpdMIBCompliance.setDescription('The compliance statement for entities that implement NBAR Protocol Discovery on a Cisco router.')
cnpdStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 244, 2, 2, 1)).setObjects(("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdStatusPdEnable"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdStatusLastUpdateTime"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdAllStatsProtocolName"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdAllStatsInPkts"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdAllStatsOutPkts"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdAllStatsInBytes"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdAllStatsOutBytes"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdAllStatsHCInPkts"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdAllStatsHCOutPkts"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdAllStatsHCInBytes"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdAllStatsHCOutBytes"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdAllStatsInBitRate"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdAllStatsOutBitRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnpdStatsGroup = cnpdStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cnpdStatsGroup.setDescription('Required objects to provide protocol application discovery info.')
cnpdTopNGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 244, 2, 2, 2)).setObjects(("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdTopNConfigIfIndex"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdTopNConfigStatsSelect"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdTopNConfigRequestedSize"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdTopNConfigSampleTime"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdTopNConfigGrantedSize"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdTopNConfigTime"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdTopNConfigStatus"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdTopNStatsProtocolName"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdTopNStatsRate"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdTopNStatsHCRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnpdTopNGroup = cnpdTopNGroup.setStatus('current')
if mibBuilder.loadTexts: cnpdTopNGroup.setDescription('The set of objects supported to record notification events.')
cnpdThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 244, 2, 2, 3)).setObjects(("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigIfIndex"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigInterval"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigSampleType"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigProtocol"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigStatsSelect"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigProtocolAny"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigStartup"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigRising"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigFalling"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdConfigStatus"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdHistoryConfigIndex"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdHistoryValue"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdHistoryType"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdHistoryTime"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdHistoryProtocol"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdHistoryStatsSelect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnpdThresholdGroup = cnpdThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: cnpdThresholdGroup.setDescription('The set of objects supported to record notification events.')
cnpdMIBNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 244, 2, 2, 4)).setObjects(("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdRisingEvent"), ("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdThresholdFallingEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnpdMIBNotificationsGroup = cnpdMIBNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: cnpdMIBNotificationsGroup.setDescription('The set of notification events supported.')
cnpdMIBNotificationsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 244, 2, 2, 5)).setObjects(("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdNotificationsEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnpdMIBNotificationsConfigGroup = cnpdMIBNotificationsConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cnpdMIBNotificationsConfigGroup.setDescription('The set of notification configuration events.')
cnpdSupportedProtocolsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 244, 2, 2, 6)).setObjects(("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "cnpdSupportedProtocolsName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnpdSupportedProtocolsGroup = cnpdSupportedProtocolsGroup.setStatus('current')
if mibBuilder.loadTexts: cnpdSupportedProtocolsGroup.setDescription('The set of objects describing a protocol or application.')
mibBuilder.exportSymbols("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", cnpdThresholdConfig=cnpdThresholdConfig, cnpdTopNConfigTable=cnpdTopNConfigTable, cnpdAllStatsProtocolName=cnpdAllStatsProtocolName, cnpdMIBCompliances=cnpdMIBCompliances, cnpdMIBObjects=cnpdMIBObjects, cnpdThresholdConfigIndex=cnpdThresholdConfigIndex, cnpdNotificationsEnable=cnpdNotificationsEnable, cnpdTopNConfigEntry=cnpdTopNConfigEntry, cnpdThresholdConfigStartup=cnpdThresholdConfigStartup, CiscoPdProtocolName=CiscoPdProtocolName, cnpdAllStatsHCInBytes=cnpdAllStatsHCInBytes, cnpdThresholdConfigStatsSelect=cnpdThresholdConfigStatsSelect, cnpdAllStatsHCInPkts=cnpdAllStatsHCInPkts, cnpdSupportedProtocolsGroup=cnpdSupportedProtocolsGroup, cnpdThresholdConfigFalling=cnpdThresholdConfigFalling, cnpdThresholdFallingEvent=cnpdThresholdFallingEvent, cnpdMIBGroups=cnpdMIBGroups, cnpdAllStatsInPkts=cnpdAllStatsInPkts, cnpdTopNConfigSampleTime=cnpdTopNConfigSampleTime, cnpdTopNConfig=cnpdTopNConfig, cnpdThresholdHistoryIndex=cnpdThresholdHistoryIndex, cnpdAllStatsInBitRate=cnpdAllStatsInBitRate, cnpdThresholdConfigSampleType=cnpdThresholdConfigSampleType, cnpdThresholdHistory=cnpdThresholdHistory, cnpdThresholdConfigProtocol=cnpdThresholdConfigProtocol, cnpdAllStats=cnpdAllStats, cnpdAllStatsOutPkts=cnpdAllStatsOutPkts, cnpdStatusLastUpdateTime=cnpdStatusLastUpdateTime, cnpdThresholdHistoryValue=cnpdThresholdHistoryValue, cnpdAllStatsProtocolsIndex=cnpdAllStatsProtocolsIndex, cnpdSupportedProtocolsTable=cnpdSupportedProtocolsTable, cnpdTopNStatsTable=cnpdTopNStatsTable, cnpdStatusEntry=cnpdStatusEntry, cnpdThresholdHistoryEntry=cnpdThresholdHistoryEntry, CiscoPdDataType=CiscoPdDataType, cnpdThresholdHistoryConfigIndex=cnpdThresholdHistoryConfigIndex, cnpdStatusTable=cnpdStatusTable, cnpdSupportedProtocolsEntry=cnpdSupportedProtocolsEntry, cnpdAllStatsOutBitRate=cnpdAllStatsOutBitRate, cnpdThresholdRisingEvent=cnpdThresholdRisingEvent, cnpdThresholdConfigTable=cnpdThresholdConfigTable, cnpdSupportedProtocolsName=cnpdSupportedProtocolsName, cnpdAllStatsHCOutPkts=cnpdAllStatsHCOutPkts, cnpdAllStatsInBytes=cnpdAllStatsInBytes, cnpdThresholdConfigEntry=cnpdThresholdConfigEntry, cnpdTopNConfigStatsSelect=cnpdTopNConfigStatsSelect, cnpdThresholdConfigRising=cnpdThresholdConfigRising, cnpdSupportedProtocolsIndex=cnpdSupportedProtocolsIndex, cnpdThresholdHistoryTable=cnpdThresholdHistoryTable, cnpdTopNConfigIfIndex=cnpdTopNConfigIfIndex, cnpdTopNConfigRequestedSize=cnpdTopNConfigRequestedSize, cnpdAllStatsEntry=cnpdAllStatsEntry, cnpdThresholdConfigIfIndex=cnpdThresholdConfigIfIndex, cnpdTopNStatsProtocolName=cnpdTopNStatsProtocolName, cnpdStatus=cnpdStatus, cnpdMIBConformance=cnpdMIBConformance, cnpdTopNStatsHCRate=cnpdTopNStatsHCRate, cnpdTopNConfigStatus=cnpdTopNConfigStatus, cnpdThresholdHistoryStatsSelect=cnpdThresholdHistoryStatsSelect, cnpdTopNConfigTime=cnpdTopNConfigTime, cnpdThresholdGroup=cnpdThresholdGroup, cnpdTopNStats=cnpdTopNStats, cnpdTopNConfigGrantedSize=cnpdTopNConfigGrantedSize, cnpdMIBNotificationsGroup=cnpdMIBNotificationsGroup, PYSNMP_MODULE_ID=ciscoNbarProtocolDiscoveryMIB, cnpdThresholdHistoryProtocol=cnpdThresholdHistoryProtocol, cnpdThresholdHistoryTime=cnpdThresholdHistoryTime, cnpdTopNStatsEntry=cnpdTopNStatsEntry, cnpdTopNStatsRate=cnpdTopNStatsRate, cnpdAllStatsTable=cnpdAllStatsTable, cnpdSupportedProtocols=cnpdSupportedProtocols, cnpdAllStatsHCOutBytes=cnpdAllStatsHCOutBytes, cnpdThresholdHistoryType=cnpdThresholdHistoryType, ciscoNbarProtocolDiscoveryMIB=ciscoNbarProtocolDiscoveryMIB, cnpdStatsGroup=cnpdStatsGroup, cnpdTopNStatsIndex=cnpdTopNStatsIndex, cnpdMIBNotifications=cnpdMIBNotifications, cnpdTopNGroup=cnpdTopNGroup, cnpdThresholdConfigStatus=cnpdThresholdConfigStatus, cnpdMIBCompliance=cnpdMIBCompliance, CiscoPdProtocolIndex=CiscoPdProtocolIndex, cnpdStatusPdEnable=cnpdStatusPdEnable, cnpdNotificationsConfig=cnpdNotificationsConfig, cnpdAllStatsOutBytes=cnpdAllStatsOutBytes, cnpdThresholdConfigInterval=cnpdThresholdConfigInterval, cnpdMIBNotificationsConfigGroup=cnpdMIBNotificationsConfigGroup, cnpdTopNConfigIndex=cnpdTopNConfigIndex, cnpdThresholdConfigProtocolAny=cnpdThresholdConfigProtocolAny)
