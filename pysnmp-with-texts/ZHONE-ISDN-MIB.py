#
# PySNMP MIB module ZHONE-ISDN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-ISDN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:47:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
PerfTotalCount, PerfCurrentCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfTotalCount", "PerfCurrentCount", "PerfIntervalCount")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, Unsigned32, Gauge32, Counter64, Integer32, Counter32, ObjectIdentity, ModuleIdentity, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "Unsigned32", "Gauge32", "Counter64", "Integer32", "Counter32", "ObjectIdentity", "ModuleIdentity", "Bits", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
zhoneTrapModules, zhonePhysical = mibBuilder.importSymbols("Zhone", "zhoneTrapModules", "zhonePhysical")
zhoneIsdn = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 7))
zhoneIsdn.setRevisions(('2003-03-03 11:58', '2003-02-04 18:04', '2000-09-27 10:57', '2000-09-27 19:42',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhoneIsdn.setRevisionsDescriptions(('V01.00.03 - Add/modified loopback types.', 'V01.00.02 - Add additional loopback types and added line-power for Malc ULC.', 'V01.00.00 Initial Release', 'V01.00.01 Corrected DDL markup',))
if mibBuilder.loadTexts: zhoneIsdn.setLastUpdated('200303031944Z')
if mibBuilder.loadTexts: zhoneIsdn.setOrganization('Zhone Technologies.')
if mibBuilder.loadTexts: zhoneIsdn.setContactInfo(' Postal: Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: zhoneIsdn.setDescription('ISDN BRI S/T Interface MIB module. This MIB manages the ISDN BRI S/T Interface on Zedge .')
zhoneIsdnTrap = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 8, 3))
if mibBuilder.loadTexts: zhoneIsdnTrap.setStatus('current')
if mibBuilder.loadTexts: zhoneIsdnTrap.setDescription(' Trap for zedge to be sent to ZMS for far end code violation.')
isdnMibV2Traps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 8, 3, 1))
if mibBuilder.loadTexts: isdnMibV2Traps.setStatus('current')
if mibBuilder.loadTexts: isdnMibV2Traps.setDescription('This object identity adds a zero(0) for the next to last sub-identifier which should be used for new SNMPv2 Traps.')
isdnTrapFrameSynchLoss = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 8, 3, 1, 1)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: isdnTrapFrameSynchLoss.setStatus('current')
if mibBuilder.loadTexts: isdnTrapFrameSynchLoss.setDescription('When the driver receives three successive out of synch frames then it will set the frame synch loss bit to true and then the application will send a trap to the NMS. After this when the driver detects 5 good frames then it will set the frame synch lossbit to false.')
isdnTrapFECV = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 8, 3, 1, 2)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: isdnTrapFECV.setStatus('current')
if mibBuilder.loadTexts: isdnTrapFECV.setDescription('Far end code violation Trap')
isdnTrapAmiViolations = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 8, 3, 1, 3)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: isdnTrapAmiViolations.setStatus('current')
if mibBuilder.loadTexts: isdnTrapAmiViolations.setDescription('Bad Ami violation Trap. If number of ami violation crosses the isdnThresholdAmiViolations then the application will send this to NMS.')
isdnTrapUnbalancedFrame = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 8, 3, 1, 4))
if mibBuilder.loadTexts: isdnTrapUnbalancedFrame.setStatus('current')
if mibBuilder.loadTexts: isdnTrapUnbalancedFrame.setDescription('This trap will be sent to NMS after the isdnThresholdUnbalancedFrame value is crossed. ')
zhoneIsdnMib = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1))
isdnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 1), )
if mibBuilder.loadTexts: isdnConfigTable.setStatus('current')
if mibBuilder.loadTexts: isdnConfigTable.setDescription('The ISDN BRI integrated S/T Interface Configuration Table. This table is indexed by IfIndex.It is created by aplication when the system comes up with default values. ')
isdnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: isdnConfigEntry.setStatus('current')
if mibBuilder.loadTexts: isdnConfigEntry.setDescription('An entry in the ISDN config table for each S/T Interface. ')
isdnLineTermClass = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("class1", 1), ("class2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnLineTermClass.setStatus('current')
if mibBuilder.loadTexts: isdnLineTermClass.setDescription('NT Terminal Mode.clas1 and class2 operations are as per CCITT I.430, ETSI ETS 300012, and ANSI T1.605 .These specification mandate two classes of operation for a TE with respect to D channel operation class1 : class1 is the higher class , used for signalling information class2 : This is the lower class. The default value is class1. ')
isdnActivationTimer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t2-50ms", 1), ("t2-100ms", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnActivationTimer2.setStatus('current')
if mibBuilder.loadTexts: isdnActivationTimer2.setDescription('Value of Activation Timer #2. t2-50ms(1): select 50ms for timer #2 t2-100ms(2): select 1000ms for timer #2 The default value is t2-50ms')
isdnLineLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("loop-back-none", 1), ("loop-back-b1-st-tr", 2), ("loop-back-b1-st-nt", 3), ("loop-back-b2-st-tr", 4), ("loop-back-b2-st-nt", 5), ("loop-back-b1-idl2-tr", 6), ("loop-back-b1-idl2-nt", 7), ("loop-back-b2-idl2-tr", 8), ("loop-back-b2-idl2-nt", 9), ("loop-back-2bd-idl2-tr", 10), ("loop-back-2bd-idl2-nt", 11), ("loop-back-2bd-u-interface-tr", 12), ("loop-back-2bd-u-interface-nt", 13), ("loop-back-2bd-external-analog", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnLineLoopBack.setStatus('current')
if mibBuilder.loadTexts: isdnLineLoopBack.setDescription('loop-back-none(1) :no loop back . loop-back-b1-st-tr(2): transparaent loopback on the S/T interface towards the user(B1 chanel). loop-back-b1-st-nt(3): non-transparent loopback onthe S/T interface towards the user(B1 chanel).. loop-back-b2-st-tr(4) :transparaent loopback on the S/T interface towards the user(B2 chanel). loop-back-b2-st-nt(5):non-transparent loopback on the S/T interface towards the user(B2 channel) loop-back-b1-idl2-tr(6):transparaent loopback on the IDL2 interface towards the system(B1 channel) loop-back-b1-idl2-nt(7):non-transparent loopback on the IDL2 interface towards the system(B1 channel) loop-back-b2-idl2-tr(8):transparaent loopback on the IDL2 interface towards the system(B2 channel) loop-back-b2-idl2-nt(9): non-transparent loopback on the IDL2 interface towards the system(B2 channel) loop-back-2bd-idl2-tr(10): transparent loopback on the IDL2 towards the system(2B + D channel) loop-back-2bd-idl2-nt(11): non-transparent loopback on the IDL2 towards the system(2B + D channel) loop-back-2bd-u-interface-tr (12): transparent loopback on the U interface towards the user(2B + D channel) loop-back-2bd-u-interface-nt (13): non-transparent loopback on the U interface(2B + D channel) loop-back-2bd-external-analog(14): loopback on the external analog interface towards the user(2B + D channel) st is loopback on the S/T interface towards the user. idl2 is loopback on the IDL2 interface towards the system. tr is transparent loopback. nt is non-transparent loopback. The default value is loop-back-none.')
isdnLinePower = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("sealing", 2), ("powering", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnLinePower.setStatus('current')
if mibBuilder.loadTexts: isdnLinePower.setDescription('State of the line power. off - no power on line. sealing - minimum current on line to preclude corrosion. powering - full current on line.')
isdnPerfDataCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 2), )
if mibBuilder.loadTexts: isdnPerfDataCurrentTable.setStatus('current')
if mibBuilder.loadTexts: isdnPerfDataCurrentTable.setDescription('The ISDN BRI S/T interface performance table which contains the performance data for curent 15 minutes. It contains information about the status of the ISDN S/T interface, including the error statistics.')
isdnPerfDataCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 2, 1), )
isdnConfigEntry.registerAugmentions(("ZHONE-ISDN-MIB", "isdnPerfDataCurrentEntry"))
isdnPerfDataCurrentEntry.setIndexNames(*isdnConfigEntry.getIndexNames())
if mibBuilder.loadTexts: isdnPerfDataCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: isdnPerfDataCurrentEntry.setDescription('An entry in current performance table for each ISDN BRI S/T interface for last 15 minutes.')
isdnPerfCurBadAmiViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 2, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnPerfCurBadAmiViolation.setStatus('current')
if mibBuilder.loadTexts: isdnPerfCurBadAmiViolation.setDescription('Current count of frames with incorrect number of AMI violations.')
isdnPerfCurUnbalancedFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 2, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnPerfCurUnbalancedFrame.setStatus('current')
if mibBuilder.loadTexts: isdnPerfCurUnbalancedFrame.setDescription('Current count of unbalanced frames.')
isdnPerCurErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 2, 1, 3), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnPerCurErrorSeconds.setStatus('current')
if mibBuilder.loadTexts: isdnPerCurErrorSeconds.setDescription('Curent ISDN Activation error seconds. ')
isdnPerCurFsyncSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 2, 1, 4), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnPerCurFsyncSeconds.setStatus('current')
if mibBuilder.loadTexts: isdnPerCurFsyncSeconds.setDescription('Currents Frame synch loss seconds .')
isdnPerfCurTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnPerfCurTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: isdnPerfCurTimeElapsed.setDescription('In the current 15 Min period number of seconds elapsed that these counts represent.')
isdnPerfDataPreviousTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 3), )
if mibBuilder.loadTexts: isdnPerfDataPreviousTable.setStatus('current')
if mibBuilder.loadTexts: isdnPerfDataPreviousTable.setDescription('The ISDN BRI S/T interface performance table, it contains statistics and information about the status of the ISDN S/T interface, including the error statistics for previous 15 minutes. ')
isdnPerfDataPreviousEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 3, 1), )
isdnConfigEntry.registerAugmentions(("ZHONE-ISDN-MIB", "isdnPerfDataPreviousEntry"))
isdnPerfDataPreviousEntry.setIndexNames(*isdnConfigEntry.getIndexNames())
if mibBuilder.loadTexts: isdnPerfDataPreviousEntry.setStatus('current')
if mibBuilder.loadTexts: isdnPerfDataPreviousEntry.setDescription('An entry in Previous performance table(for last 15 minutes before the current performance period) for each S/T interface.')
isdnPerfPrevBadAmiViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 3, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnPerfPrevBadAmiViolation.setStatus('current')
if mibBuilder.loadTexts: isdnPerfPrevBadAmiViolation.setDescription('count of frames with incorrect number of AMI violations in previous 15 minutes.')
isdnPerfPrevUnbalancedFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 3, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnPerfPrevUnbalancedFrame.setStatus('current')
if mibBuilder.loadTexts: isdnPerfPrevUnbalancedFrame.setDescription('In previous 15 minutes ,count of unbalanced frames.')
isdnPerPrevFsyncSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 3, 1, 3), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnPerPrevFsyncSeconds.setStatus('current')
if mibBuilder.loadTexts: isdnPerPrevFsyncSeconds.setDescription(' Frame synch error seconds in previous 15 minues.')
isdnPerfPrevErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 3, 1, 4), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnPerfPrevErrorSeconds.setStatus('current')
if mibBuilder.loadTexts: isdnPerfPrevErrorSeconds.setDescription('In previous 15 minutes ISDN Activation error seconds')
isdnPerfDataTotalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 4), )
if mibBuilder.loadTexts: isdnPerfDataTotalTable.setStatus('current')
if mibBuilder.loadTexts: isdnPerfDataTotalTable.setDescription("The ISDN BRI S/T interface performance table, it contains statistics and information about the status of the ISDN S/T interface, including the error statistics for up to the the last 24 hours. This is maintained in 15 minute intervals NOT including the current interval being accumulated. When the current period reaches 15 minutes, it's counts are rolled into the previous entry and added to these values. The 97th entry, previous to the 24 hour period is no longer included in these counts.")
isdnPerfDataTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 4, 1), )
isdnConfigEntry.registerAugmentions(("ZHONE-ISDN-MIB", "isdnPerfDataTotalEntry"))
isdnPerfDataTotalEntry.setIndexNames(*isdnConfigEntry.getIndexNames())
if mibBuilder.loadTexts: isdnPerfDataTotalEntry.setStatus('current')
if mibBuilder.loadTexts: isdnPerfDataTotalEntry.setDescription('An entry in total performance table for each S/T interface.')
isdnPerfTotalBadAmiViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 4, 1, 1), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnPerfTotalBadAmiViolation.setStatus('current')
if mibBuilder.loadTexts: isdnPerfTotalBadAmiViolation.setDescription('Total count of frames with incorrect number of AMI violations.')
isdnPerfTotalUnbalancedFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 4, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnPerfTotalUnbalancedFrame.setStatus('current')
if mibBuilder.loadTexts: isdnPerfTotalUnbalancedFrame.setDescription('Total count of unbalanced frames.')
isdnPerTotalFsyncSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 4, 1, 3), PerfTotalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnPerTotalFsyncSeconds.setStatus('current')
if mibBuilder.loadTexts: isdnPerTotalFsyncSeconds.setDescription('Total Frame synch error seconds.')
isdnPerfTotalErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 4, 1, 4), PerfTotalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnPerfTotalErrorSeconds.setStatus('current')
if mibBuilder.loadTexts: isdnPerfTotalErrorSeconds.setDescription('ISDN Activation error seconds')
isdnPerfTotalTimePeriodsElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnPerfTotalTimePeriodsElapsed.setStatus('current')
if mibBuilder.loadTexts: isdnPerfTotalTimePeriodsElapsed.setDescription('Number of 15 minute time periods that have been used in the performance total table. This value is normally 96 indicating a valid 24 hour time period except in the cases of a restart of this agent.')
isdnAlarmProfileTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 5), )
if mibBuilder.loadTexts: isdnAlarmProfileTable.setStatus('current')
if mibBuilder.loadTexts: isdnAlarmProfileTable.setDescription('This table contains information for Alarm conditions. The table is indexed by IfIndex . The alarm profile will be set per port basis usig ifIndex by the application when the system comes up. The operator can not create the profile , he can only change it . ')
isdnAlarmProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 5, 1), )
isdnConfigEntry.registerAugmentions(("ZHONE-ISDN-MIB", "isdnAlarmProfileEntry"))
isdnAlarmProfileEntry.setIndexNames(*isdnConfigEntry.getIndexNames())
if mibBuilder.loadTexts: isdnAlarmProfileEntry.setStatus('current')
if mibBuilder.loadTexts: isdnAlarmProfileEntry.setDescription('An entry in AlarmProfile Table. ')
isdnThresholdAmiViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 5, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnThresholdAmiViolations.setStatus('current')
if mibBuilder.loadTexts: isdnThresholdAmiViolations.setDescription('Threshold for number of AMI violation . If the number of violations cross this threshold then the notification is sent to NMS. 0 will disable the trap. The default value is 0. There is no range speciffied for this.')
isdnThresholdUnbalancedFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 7, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnThresholdUnbalancedFrame.setStatus('current')
if mibBuilder.loadTexts: isdnThresholdUnbalancedFrame.setDescription('Threshold for number of unbalanced frame after which the trap will be send to NMS.0 will disable the trap. The default value is 0. There is no range speciffied for this. ')
mibBuilder.exportSymbols("ZHONE-ISDN-MIB", isdnPerfDataCurrentTable=isdnPerfDataCurrentTable, isdnPerfDataPreviousTable=isdnPerfDataPreviousTable, zhoneIsdnTrap=zhoneIsdnTrap, isdnLineTermClass=isdnLineTermClass, PYSNMP_MODULE_ID=zhoneIsdn, isdnLineLoopBack=isdnLineLoopBack, isdnThresholdUnbalancedFrame=isdnThresholdUnbalancedFrame, isdnPerfTotalUnbalancedFrame=isdnPerfTotalUnbalancedFrame, isdnPerfDataTotalEntry=isdnPerfDataTotalEntry, isdnThresholdAmiViolations=isdnThresholdAmiViolations, isdnPerfPrevBadAmiViolation=isdnPerfPrevBadAmiViolation, isdnMibV2Traps=isdnMibV2Traps, isdnPerfDataCurrentEntry=isdnPerfDataCurrentEntry, isdnTrapAmiViolations=isdnTrapAmiViolations, isdnConfigEntry=isdnConfigEntry, isdnPerfDataPreviousEntry=isdnPerfDataPreviousEntry, isdnPerfTotalErrorSeconds=isdnPerfTotalErrorSeconds, zhoneIsdn=zhoneIsdn, zhoneIsdnMib=zhoneIsdnMib, isdnPerfCurBadAmiViolation=isdnPerfCurBadAmiViolation, isdnLinePower=isdnLinePower, isdnPerTotalFsyncSeconds=isdnPerTotalFsyncSeconds, isdnTrapUnbalancedFrame=isdnTrapUnbalancedFrame, isdnPerCurErrorSeconds=isdnPerCurErrorSeconds, isdnConfigTable=isdnConfigTable, isdnPerfTotalTimePeriodsElapsed=isdnPerfTotalTimePeriodsElapsed, isdnPerfPrevErrorSeconds=isdnPerfPrevErrorSeconds, isdnPerfPrevUnbalancedFrame=isdnPerfPrevUnbalancedFrame, isdnPerfTotalBadAmiViolation=isdnPerfTotalBadAmiViolation, isdnPerfCurTimeElapsed=isdnPerfCurTimeElapsed, isdnPerPrevFsyncSeconds=isdnPerPrevFsyncSeconds, isdnPerfDataTotalTable=isdnPerfDataTotalTable, isdnTrapFECV=isdnTrapFECV, isdnAlarmProfileTable=isdnAlarmProfileTable, isdnTrapFrameSynchLoss=isdnTrapFrameSynchLoss, isdnActivationTimer2=isdnActivationTimer2, isdnPerfCurUnbalancedFrame=isdnPerfCurUnbalancedFrame, isdnPerCurFsyncSeconds=isdnPerCurFsyncSeconds, isdnAlarmProfileEntry=isdnAlarmProfileEntry)
