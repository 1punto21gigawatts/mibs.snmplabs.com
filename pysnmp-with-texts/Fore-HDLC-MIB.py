#
# PySNMP MIB module Fore-HDLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-HDLC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:17:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
asx, = mibBuilder.importSymbols("Fore-Common-MIB", "asx")
trapLogIndex, = mibBuilder.importSymbols("Fore-TrapLog-MIB", "trapLogIndex")
ifIndex, ifName = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifName")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter32, Integer32, Counter64, Gauge32, IpAddress, iso, ObjectIdentity, MibIdentifier, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "Integer32", "Counter64", "Gauge32", "IpAddress", "iso", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
foreHdlcIfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20))
foreHdlcIfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 1), )
if mibBuilder.loadTexts: foreHdlcIfTable.setStatus('current')
if mibBuilder.loadTexts: foreHdlcIfTable.setDescription('A table containing HDLC interface configuration and status.')
foreHdlcIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreHdlcIfEntry.setStatus('current')
if mibBuilder.loadTexts: foreHdlcIfEntry.setDescription('A table entry containing the HDLC interface information.')
foreHdlcIfPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fast", 1), ("ppp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreHdlcIfPayloadType.setStatus('current')
if mibBuilder.loadTexts: foreHdlcIfPayloadType.setDescription('Indicates the configured mode for this interface.')
foreHdlcIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreHdlcIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: foreHdlcIfAdminStatus.setDescription('Indicates the admin status of this interface.')
foreHdlcIfFcsWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32))).clone(namedValues=NamedValues(("fcs16", 16), ("fcs32", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreHdlcIfFcsWidth.setStatus('current')
if mibBuilder.loadTexts: foreHdlcIfFcsWidth.setDescription('Indicates the configured width of the FCS on this interface.')
foreHdlcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 2), )
if mibBuilder.loadTexts: foreHdlcStatsTable.setStatus('current')
if mibBuilder.loadTexts: foreHdlcStatsTable.setDescription('A table containing HDLC interface Statistics')
foreHdlcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: foreHdlcStatsEntry.setStatus('current')
if mibBuilder.loadTexts: foreHdlcStatsEntry.setDescription('A table entry containing the HDLC statistics.')
foreHdlcIfTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreHdlcIfTxPackets.setStatus('current')
if mibBuilder.loadTexts: foreHdlcIfTxPackets.setDescription('The number of packets that have arrived at the HDLC SAP from the upper layer.')
foreHdlcIfTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreHdlcIfTxOctets.setStatus('current')
if mibBuilder.loadTexts: foreHdlcIfTxOctets.setDescription('The number of octets that the HDLC packet layer has passed to the lower layer.')
foreHdlcIfRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreHdlcIfRxPackets.setStatus('current')
if mibBuilder.loadTexts: foreHdlcIfRxPackets.setDescription('The number of packets that the HDLC SAP has passed to the upper layear.')
foreHdlcIfRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreHdlcIfRxOctets.setStatus('current')
if mibBuilder.loadTexts: foreHdlcIfRxOctets.setDescription('The number of octets that the HDLC packet layer has received from the lower layer.')
foreHdlcIfChecksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreHdlcIfChecksumErrors.setStatus('current')
if mibBuilder.loadTexts: foreHdlcIfChecksumErrors.setDescription('The number of packets that the HDLC packet layer has discarded due to checksum errors.')
foreHdlcIfLossOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreHdlcIfLossOfFrame.setStatus('current')
if mibBuilder.loadTexts: foreHdlcIfLossOfFrame.setDescription('Indicates whether or not loss of frame is being experienced in the incoming octet stream.')
foreHdlcLOFDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreHdlcLOFDetected.setStatus('current')
if mibBuilder.loadTexts: foreHdlcLOFDetected.setDescription('This trap indicates that the specified HDLC interface is experiencing Loss Of Frame (LOF) failure. An LOF failure is declared when the LOF defect persists fore a period of 2.5 +/- 0.5 seconds.')
foreHdlcLOFCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 20, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreHdlcLOFCleared.setStatus('current')
if mibBuilder.loadTexts: foreHdlcLOFCleared.setDescription('This trap indicates that the LOF failure identified by trap foreHdlcLOFDetected has been cleared. The LOF failure is cleared when the LOF defect is absent for 10 +/- 0.5 seconds.')
mibBuilder.exportSymbols("Fore-HDLC-MIB", foreHdlcIfEntry=foreHdlcIfEntry, foreHdlcStatsTable=foreHdlcStatsTable, foreHdlcStatsEntry=foreHdlcStatsEntry, foreHdlcIfLossOfFrame=foreHdlcIfLossOfFrame, foreHdlcIfFcsWidth=foreHdlcIfFcsWidth, foreHdlcIfTable=foreHdlcIfTable, foreHdlcIfChecksumErrors=foreHdlcIfChecksumErrors, foreHdlcIfAdminStatus=foreHdlcIfAdminStatus, foreHdlcIfRxOctets=foreHdlcIfRxOctets, foreHdlcIfPayloadType=foreHdlcIfPayloadType, foreHdlcIfTxPackets=foreHdlcIfTxPackets, foreHdlcLOFCleared=foreHdlcLOFCleared, foreHdlcIfTxOctets=foreHdlcIfTxOctets, foreHdlcIfGroup=foreHdlcIfGroup, foreHdlcIfRxPackets=foreHdlcIfRxPackets, foreHdlcLOFDetected=foreHdlcLOFDetected)
