#
# PySNMP MIB module E5-111-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/E5-111-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:58:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
BridgeId, Timeout, dot1dBasePort = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId", "Timeout", "dot1dBasePort")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
dot1dTrafficClass, = mibBuilder.importSymbols("P-BRIDGE-MIB", "dot1dTrafficClass")
PortList, VlanIndex, dot1qVlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList", "VlanIndex", "dot1qVlanIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, NotificationType, Bits, Unsigned32, Gauge32, Counter32, enterprises, iso, ModuleIdentity, MibIdentifier, Counter64, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "NotificationType", "Bits", "Unsigned32", "Gauge32", "Counter32", "enterprises", "iso", "ModuleIdentity", "MibIdentifier", "Counter64", "ObjectIdentity", "TimeTicks")
TextualConvention, PhysAddress, DisplayString, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString", "MacAddress", "RowStatus")
calixNetworks = MibIdentifier((1, 3, 6, 1, 4, 1, 6321))
calixRegistrations = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1))
calixProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2))
e5x100 = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3))
e5x111 = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2))
alarmconf = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2))
diagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4))
multicast = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7))
port = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8))
profile = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9))
switch = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 12))
statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13))
clear = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 14))
voip = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16))
aesSeriesCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 97))
iesSeriesCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98))
accessSwitchCommonATM = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 99))
alarmOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmOps.setStatus('current')
if mibBuilder.loadTexts: alarmOps.setDescription('The manager sets the corresponding bit value to 1 to start the operation and the agent clears the object to zero when the operation is successfully completed. The various bit positions are: BIT 1: clear BIT 2: cutoff')
alarmConfTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 2), )
if mibBuilder.loadTexts: alarmConfTable.setStatus('current')
if mibBuilder.loadTexts: alarmConfTable.setDescription('This table includes alarm configuration.')
alarmConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 2, 1), ).setIndexNames((0, "E5-111-MIB", "alarmConfId"))
if mibBuilder.loadTexts: alarmConfEntry.setStatus('current')
if mibBuilder.loadTexts: alarmConfEntry.setDescription('An entry in alarmConfTable.')
alarmConfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmConfId.setStatus('current')
if mibBuilder.loadTexts: alarmConfId.setDescription(' 5000:adslLine_up 5001:adslLine_down 5002:adslPerf_lol_thresh 5003:adslPerf_lof_thresh 5004:adslPerf_los_thresh 5005:adslPerf_lop_thresh 5006:adslPerf_es_thresh 5007:adslPerf_ses_thresh 5008:adslPerf_uas_thresh 5009:adslAtuc_loftrap 5010:adslAtuc_lostrap 5011:adslAtur_loftrap 5012:adslAtur_lostrap 5013:adslAtur_lprtrap 5014:ad_dhcp_rt_full 5015:ad_dhcp_dm_conflict 5016:ad_dhcp_entry_full 5017:ad_dhcp_ip_dup 5018:ad_dhcp_mac_dup 10000:eqptVol_err 10001:eqptEqpttemp_err 10002:eqptFan_err 10003:eqptHw_rtc_fail 10004:eqptHw_mon_fail 10005:eqptCold_start 10006:eqptWarm_start 10007:eqptAlm_input 10008:voip_battery_fail 10009:voip_clock_fail 10010:voip_ringer_fault 10011:eqptI2c_err 10012:eqptAlm_input2 10013:eqptAlm_input3 15000:sysReboot 15001:sysAco 15002:sysAlm_clear 15003:sysLogin_fail 15004:sysAnti_spoofing 15005:sysAlm_svrty_change 20000:enetUp 20001:enetDown 25000:voip_temp_error 25001:voip_dc_power_fail 25002:voip_ac_power_fail 25003:voip_ring_timer_fail 25004:voip_ring_rsrce_fail 25006:voip_call_setup_failed 25007:voip_call_threshold_violate ')
alarmConfFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("local1", 1), ("local2", 2), ("local3", 3), ("local4", 4), ("local5", 5), ("local6", 6), ("local7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmConfFacility.setStatus('current')
if mibBuilder.loadTexts: alarmConfFacility.setDescription('Alarm facility.')
alarmConfTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmConfTarget.setStatus('current')
if mibBuilder.loadTexts: alarmConfTarget.setDescription('The destination which alarms are reported to. Set the bit to 1 to enable the target. BIT 1: snmp trap BIT 2: syslog')
alarmConfSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmConfSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmConfSeverity.setDescription('Alarm severity')
alarmConfClearable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clearable", 1), ("unclearable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmConfClearable.setStatus('current')
if mibBuilder.loadTexts: alarmConfClearable.setDescription('Setting the object to one indicates that the alarm is to be cleared when user submits alarm clear.')
alarmCurrTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3), )
if mibBuilder.loadTexts: alarmCurrTable.setStatus('current')
if mibBuilder.loadTexts: alarmCurrTable.setDescription('This table includes current alarm information.')
alarmCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1), ).setIndexNames((0, "E5-111-MIB", "alarmCurrIndex"))
if mibBuilder.loadTexts: alarmCurrEntry.setStatus('current')
if mibBuilder.loadTexts: alarmCurrEntry.setDescription('An entry in alarmCurrTable.')
alarmCurrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrIndex.setStatus('current')
if mibBuilder.loadTexts: alarmCurrIndex.setDescription('Index of the alarm.')
alarmCurrOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrOccurTime.setStatus('current')
if mibBuilder.loadTexts: alarmCurrOccurTime.setDescription('Alarm occurence time (in hundredths of a second) since the system was last re-initialized.')
alarmCurrTrapOid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrTrapOid.setStatus('current')
if mibBuilder.loadTexts: alarmCurrTrapOid.setDescription('Trap OID of the alarm.')
alarmCurrParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrParam1.setStatus('current')
if mibBuilder.loadTexts: alarmCurrParam1.setDescription('The 1st parameter of the alarm.')
alarmCurrParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrParam2.setStatus('current')
if mibBuilder.loadTexts: alarmCurrParam2.setDescription('The 2nd parameter of the alarm.')
alarmCurrParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrParam3.setStatus('current')
if mibBuilder.loadTexts: alarmCurrParam3.setDescription('The 3rd parameter of the alarm.')
alarmCurrParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrParam4.setStatus('current')
if mibBuilder.loadTexts: alarmCurrParam4.setDescription('The 4th parameter of the alarm.')
alarmCurrParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrParam5.setStatus('current')
if mibBuilder.loadTexts: alarmCurrParam5.setDescription('The 5th parameter of the alarm.')
alarmCurrParam6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrParam6.setStatus('current')
if mibBuilder.loadTexts: alarmCurrParam6.setDescription('The 6th parameter of the alarm.')
alarmCurrParam7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrParam7.setStatus('current')
if mibBuilder.loadTexts: alarmCurrParam7.setDescription('The 7th parameter of the alarm.')
alarmCurrParam8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrParam8.setStatus('current')
if mibBuilder.loadTexts: alarmCurrParam8.setDescription('The 8th parameter of the alarm.')
alarmCurrTimeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrTimeDescr.setStatus('current')
if mibBuilder.loadTexts: alarmCurrTimeDescr.setDescription('The string representation of occurence time (YYYY/MM/DD HH:MM:SS).')
alarmCurrSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmCurrSeverity.setDescription('The severity of the alarm.')
alarmCurrDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrDescr.setStatus('current')
if mibBuilder.loadTexts: alarmCurrDescr.setDescription('The description of the alarm.')
alarmSeverityPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 4), )
if mibBuilder.loadTexts: alarmSeverityPortTable.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityPortTable.setDescription('This table includes the configuration of alarm reporting severity threshold for each port.')
alarmSeverityPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alarmSeverityPortEntry.setStatus('current')
if mibBuilder.loadTexts: alarmSeverityPortEntry.setDescription('An entry in alarmSeverityPortTable.')
severityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: severityThresh.setStatus('current')
if mibBuilder.loadTexts: severityThresh.setDescription('The minimum alarm severity that is reported.')
selt = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 3))
mlt = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4))
seltTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: seltTarget.setStatus('current')
if mibBuilder.loadTexts: seltTarget.setDescription('IfIndex of the port which would be performed single end loopback test.')
seltOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: seltOps.setStatus('current')
if mibBuilder.loadTexts: seltOps.setDescription('The manager sets the object to 1 to start the selt and the agent clears the object to zero when selt is successfully completed.')
seltStatus = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: seltStatus.setStatus('current')
if mibBuilder.loadTexts: seltStatus.setDescription('Status description of the selt result.')
seltCableType = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("awg24", 1), ("awg26", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: seltCableType.setStatus('current')
if mibBuilder.loadTexts: seltCableType.setDescription('The cable type that selt result indicates.')
seltLoopEstimateLengthFt = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 3, 5), Integer32()).setUnits('feet').setMaxAccess("readonly")
if mibBuilder.loadTexts: seltLoopEstimateLengthFt.setStatus('current')
if mibBuilder.loadTexts: seltLoopEstimateLengthFt.setDescription('The estimated loop length that selt result indicates.')
seltLoopEstimateLengthMeter = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 3, 6), Integer32()).setUnits('meter').setMaxAccess("readonly")
if mibBuilder.loadTexts: seltLoopEstimateLengthMeter.setStatus('current')
if mibBuilder.loadTexts: seltLoopEstimateLengthMeter.setDescription('The estimated loop length that selt result indicates.')
mltTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltTarget.setStatus('current')
if mibBuilder.loadTexts: mltTarget.setDescription('IfIndex of the port which would be performed Metallic Link Test.')
mltOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltOps.setStatus('current')
if mibBuilder.loadTexts: mltOps.setDescription('The manager sets the object to 1 to start the mlt and the agent clears the object to zero when mlt is successfully completed.')
mltOption = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("all", 1), ("vac", 2), ("vdc", 3), ("rload", 4), ("riso", 5), ("cap", 6), ("ren", 7), ("ring", 8), ("metering", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltOption.setStatus('current')
if mibBuilder.loadTexts: mltOption.setDescription('all : test all items vac: test AC voltage vdc: test DC voltage rload: test load resistance riso: test isolation resistance cap: test capacitor ren: test REN value ring: test ring voltage metering: test metering voltage')
mltForce = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("force", 1), ("notForce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltForce.setStatus('current')
if mibBuilder.loadTexts: mltForce.setDescription('Force test even the port is in use.')
mltResult = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5))
mltVacTip = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 1), Integer32()).setUnits('0.1 rms').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltVacTip.setStatus('current')
if mibBuilder.loadTexts: mltVacTip.setDescription('')
mltVacRing = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 2), Integer32()).setUnits('0.1 rms').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltVacRing.setStatus('current')
if mibBuilder.loadTexts: mltVacRing.setDescription('')
mltVacDiff = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 3), Integer32()).setUnits('0.1 rms').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltVacDiff.setStatus('current')
if mibBuilder.loadTexts: mltVacDiff.setDescription('')
mltVdcTip = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 4), Integer32()).setUnits('0.1 volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltVdcTip.setStatus('current')
if mibBuilder.loadTexts: mltVdcTip.setDescription('')
mltVdcRing = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 5), Integer32()).setUnits('0.1 volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltVdcRing.setStatus('current')
if mibBuilder.loadTexts: mltVdcRing.setDescription('')
mltVdcDiff = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 6), Integer32()).setUnits('0.1 volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltVdcDiff.setStatus('current')
if mibBuilder.loadTexts: mltVdcDiff.setDescription('')
mltRLoop = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 7), Integer32()).setUnits('0.1 ohm').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltRLoop.setStatus('current')
if mibBuilder.loadTexts: mltRLoop.setDescription('')
mltRtg = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 8), Integer32()).setUnits('0.1 ohm').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltRtg.setStatus('current')
if mibBuilder.loadTexts: mltRtg.setDescription('')
mltRrg = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 9), Integer32()).setUnits('0.1 ohm').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltRrg.setStatus('current')
if mibBuilder.loadTexts: mltRrg.setDescription('')
mltRtr = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 10), Integer32()).setUnits('0.1 ohm').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltRtr.setStatus('current')
if mibBuilder.loadTexts: mltRtr.setDescription('')
mltCtg = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 11), Integer32()).setUnits('10^-9 F').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltCtg.setStatus('current')
if mibBuilder.loadTexts: mltCtg.setDescription('')
mltCrg = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 12), Integer32()).setUnits('10^-9 F').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltCrg.setStatus('current')
if mibBuilder.loadTexts: mltCrg.setDescription('')
mltCtr = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 13), Integer32()).setUnits('10^-9 F').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltCtr.setStatus('current')
if mibBuilder.loadTexts: mltCtr.setDescription('')
mltRen = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 14), Integer32()).setUnits('0.1 ren').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltRen.setStatus('current')
if mibBuilder.loadTexts: mltRen.setDescription('')
mltVRing = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 15), Integer32()).setUnits('0.1 rms').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltVRing.setStatus('current')
if mibBuilder.loadTexts: mltVRing.setDescription('')
mltVMetering = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 16), Integer32()).setUnits('0.1 vpeak').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltVMetering.setStatus('current')
if mibBuilder.loadTexts: mltVMetering.setDescription('')
mltDialToneDetected = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltDialToneDetected.setStatus('current')
if mibBuilder.loadTexts: mltDialToneDetected.setDescription('')
mltDetectedDtmfCount = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltDetectedDtmfCount.setStatus('current')
if mibBuilder.loadTexts: mltDetectedDtmfCount.setDescription('')
mltDialToneDelay = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 19), Integer32()).setUnits('0.001 sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltDialToneDelay.setStatus('current')
if mibBuilder.loadTexts: mltDialToneDelay.setDescription('')
mltRelayTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 6), )
if mibBuilder.loadTexts: mltRelayTable.setStatus('current')
if mibBuilder.loadTexts: mltRelayTable.setDescription('Perform specified MLT relay function, or turn off MLT relay function in specified subscriber.')
mltRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mltRelayEntry.setStatus('current')
if mibBuilder.loadTexts: mltRelayEntry.setDescription('An entry of mltRelayTable.')
mltRelaySet = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3), ("off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltRelaySet.setStatus('current')
if mibBuilder.loadTexts: mltRelaySet.setDescription('By default, relay function is turned off.')
mcastBandwidth = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4))
igmpCount = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 5))
mvlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6))
queryVid = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 7))
igmpTimer = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 11))
auditQuery = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 12))
igmpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13))
igmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableProxy", 1), ("enableSnooping", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpEnable.setStatus('current')
if mibBuilder.loadTexts: igmpEnable.setDescription('Enable/disable IGMP protocol.')
igmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v2", 1), ("v3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpVersion.setStatus('current')
if mibBuilder.loadTexts: igmpVersion.setDescription('Setting IGMP version.')
igmpLeaveMode = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("immediateLeave", 1), ("lastMemberQuery", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpLeaveMode.setStatus('current')
if mibBuilder.loadTexts: igmpLeaveMode.setDescription('Configure IGMP leave message handling mode.')
mcastDefaultBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastDefaultBandwidth.setStatus('current')
if mibBuilder.loadTexts: mcastDefaultBandwidth.setDescription('Default bandwidth requirement for a multicast channel.')
maxNumOfMcastBw = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfMcastBw.setStatus('current')
if mibBuilder.loadTexts: maxNumOfMcastBw.setDescription('The maximum number of row entries that user can create in mcastBwTable.')
mcastBwTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 3), )
if mibBuilder.loadTexts: mcastBwTable.setStatus('current')
if mibBuilder.loadTexts: mcastBwTable.setDescription('This table defines bandwidth budget for a range of multicast IP channels.')
mcastBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 3, 1), ).setIndexNames((0, "E5-111-MIB", "mcastBwIndex"), (0, "E5-111-MIB", "mcastBwStartIp"), (0, "E5-111-MIB", "mcastBwEndIp"))
if mibBuilder.loadTexts: mcastBwEntry.setStatus('current')
if mibBuilder.loadTexts: mcastBwEntry.setDescription('An entry of mcastBwTable.')
mcastBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastBwIndex.setStatus('current')
if mibBuilder.loadTexts: mcastBwIndex.setDescription('The index which specify the entry.')
mcastBwStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastBwStartIp.setStatus('current')
if mibBuilder.loadTexts: mcastBwStartIp.setDescription('The start multicast IP of the bandwidth control range.')
mcastBwEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastBwEndIp.setStatus('current')
if mibBuilder.loadTexts: mcastBwEndIp.setDescription('The end multicast IP of the bandwidth control range.')
mcastBwBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 3, 1, 4), Integer32()).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mcastBwBandwidth.setStatus('current')
if mibBuilder.loadTexts: mcastBwBandwidth.setDescription('The bandwidth budget for the multicast IP channels.')
mcastBwRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mcastBwRowStatus.setStatus('current')
if mibBuilder.loadTexts: mcastBwRowStatus.setDescription('The row status of the entry.')
mcastBwPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 4), )
if mibBuilder.loadTexts: mcastBwPortTable.setStatus('current')
if mibBuilder.loadTexts: mcastBwPortTable.setDescription('This table specify the multicast bandwidth control of the port.')
mcastBwPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mcastBwPortEntry.setStatus('current')
if mibBuilder.loadTexts: mcastBwPortEntry.setDescription('An entry of mcastBwPortTable.')
mcastBwPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastBwPortEnable.setStatus('current')
if mibBuilder.loadTexts: mcastBwPortEnable.setDescription('Enable/disable multicast bandwidth control for a port.')
mcastBwPortBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 4, 1, 2), Integer32()).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastBwPortBandwidth.setStatus('current')
if mibBuilder.loadTexts: mcastBwPortBandwidth.setDescription('Set bandwidth threshold for a port.')
igmpCountPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 5, 1), )
if mibBuilder.loadTexts: igmpCountPortTable.setStatus('current')
if mibBuilder.loadTexts: igmpCountPortTable.setDescription('This table specify the IGMP count limiting of the port.')
igmpCountPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: igmpCountPortEntry.setStatus('current')
if mibBuilder.loadTexts: igmpCountPortEntry.setDescription('An entry of igmpCountPortTable.')
igmpCountPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpCountPortEnable.setStatus('current')
if mibBuilder.loadTexts: igmpCountPortEnable.setDescription('Enable/disable IGMP count limiting for a port.')
igmpCountPortLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpCountPortLimit.setStatus('current')
if mibBuilder.loadTexts: igmpCountPortLimit.setDescription('The maximum allowed IGMP report count for a port.')
maxNumOfMvlan = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfMvlan.setStatus('current')
if mibBuilder.loadTexts: maxNumOfMvlan.setDescription('The maximum number of row entries that user can create in mvlanTable.')
mvlanTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 2), )
if mibBuilder.loadTexts: mvlanTable.setStatus('current')
if mibBuilder.loadTexts: mvlanTable.setDescription('A table containing static configuration information for each multicast VLAN configured into the device.')
mvlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 2, 1), ).setIndexNames((0, "E5-111-MIB", "mvlanIndex"))
if mibBuilder.loadTexts: mvlanEntry.setStatus('current')
if mibBuilder.loadTexts: mvlanEntry.setDescription('An entry of mvlanTable.')
mvlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 2, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvlanIndex.setStatus('current')
if mibBuilder.loadTexts: mvlanIndex.setDescription('The VLAN-ID refering to this VLAN.')
mvlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mvlanName.setStatus('current')
if mibBuilder.loadTexts: mvlanName.setDescription('An administratively assigned string, which may be used to identify the VLAN.')
mvlanEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 2, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mvlanEgressPorts.setStatus('current')
if mibBuilder.loadTexts: mvlanEgressPorts.setDescription('The set of ports which are permanently assigned to the egress list for this multicast VLAN.')
mvlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 2, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mvlanUntaggedPorts.setStatus('current')
if mibBuilder.loadTexts: mvlanUntaggedPorts.setDescription('The set of ports which should transmit egress packets for this multicast VLAN as untagged.')
mvlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mvlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: mvlanRowStatus.setDescription('This object indicates the status of this entry.')
mvlanTranslateTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 3), )
if mibBuilder.loadTexts: mvlanTranslateTable.setStatus('current')
if mibBuilder.loadTexts: mvlanTranslateTable.setDescription('A table that contains multicast to VLAN translation.')
mvlanTranslateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 3, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "E5-111-MIB", "mvlanTranslateIndex"))
if mibBuilder.loadTexts: mvlanTranslateEntry.setStatus('current')
if mibBuilder.loadTexts: mvlanTranslateEntry.setDescription('An entry of mvlanTranslateTable.')
mvlanTranslateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvlanTranslateIndex.setStatus('current')
if mibBuilder.loadTexts: mvlanTranslateIndex.setDescription('The index which specif the entry.')
mvlanTranslateStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvlanTranslateStartIp.setStatus('current')
if mibBuilder.loadTexts: mvlanTranslateStartIp.setDescription('The start IP of the multicast VLAN translation.')
mvlanTranslateEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvlanTranslateEndIp.setStatus('current')
if mibBuilder.loadTexts: mvlanTranslateEndIp.setDescription('The end IP of the multicast VLAN translation.')
maxNumOfQryVid = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfQryVid.setStatus('current')
if mibBuilder.loadTexts: maxNumOfQryVid.setDescription('The maximum number of row entries that user can create in qryVidConfTable.')
qryVidConfTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 7, 2), )
if mibBuilder.loadTexts: qryVidConfTable.setStatus('current')
if mibBuilder.loadTexts: qryVidConfTable.setDescription('This table defines statically set VLANs used for response IGMP report.')
qryVidConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 7, 2, 1), ).setIndexNames((0, "E5-111-MIB", "qryVid"))
if mibBuilder.loadTexts: qryVidConfEntry.setStatus('current')
if mibBuilder.loadTexts: qryVidConfEntry.setDescription('An entry in qryVidConfTable.')
qryVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qryVid.setStatus('current')
if mibBuilder.loadTexts: qryVid.setDescription('VLAN ID.')
qryVidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 7, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qryVidRowStatus.setStatus('current')
if mibBuilder.loadTexts: qryVidRowStatus.setDescription('This object indicates the status of this entry.')
qryVidStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 7, 3), )
if mibBuilder.loadTexts: qryVidStatusTable.setStatus('current')
if mibBuilder.loadTexts: qryVidStatusTable.setDescription('This table shows statically set or dynamically learned VLANs used for response IGMP report.')
qryVidStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 7, 3, 1), ).setIndexNames((0, "E5-111-MIB", "qryVid"))
if mibBuilder.loadTexts: qryVidStatusEntry.setStatus('current')
if mibBuilder.loadTexts: qryVidStatusEntry.setDescription('An entry in qryVidStatusTable.')
qryVidType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qryVidType.setStatus('current')
if mibBuilder.loadTexts: qryVidType.setDescription('VLAN type.')
igmpQryInterval = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpQryInterval.setStatus('current')
if mibBuilder.loadTexts: igmpQryInterval.setDescription('Set IGMP query interval, 10~1000 in seconds.')
igmpRobust = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpRobust.setStatus('current')
if mibBuilder.loadTexts: igmpRobust.setDescription('Set IGMP query Robustness, 1~5.')
igmpQryRespInterval = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpQryRespInterval.setStatus('current')
if mibBuilder.loadTexts: igmpQryRespInterval.setDescription('Set IGMP query response interval, 1~100 in 100 milliseconds.')
igmpLastMemQryInterval = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpLastMemQryInterval.setStatus('current')
if mibBuilder.loadTexts: igmpLastMemQryInterval.setDescription('Set IGMP Last Member Query interval, 1~5 in 100 milliseconds.')
igmpLastMemQryRobust = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 11, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpLastMemQryRobust.setStatus('current')
if mibBuilder.loadTexts: igmpLastMemQryRobust.setDescription('Set Last Member Query Robustness, 1~5.')
auditQryEnable = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditQryEnable.setStatus('current')
if mibBuilder.loadTexts: auditQryEnable.setDescription('Enable/disable IGMP audit query.')
auditQryInterval = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditQryInterval.setStatus('current')
if mibBuilder.loadTexts: auditQryInterval.setDescription('Set IGMP Audit Query Interval, 1~4 in 100 milliseconds.')
auditQryRobust = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 12, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditQryRobust.setStatus('current')
if mibBuilder.loadTexts: auditQryRobust.setDescription('Set IGMP Audit Query Robustness, 1~5.')
maxNumberOfIgmpProfiles = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumberOfIgmpProfiles.setStatus('current')
if mibBuilder.loadTexts: maxNumberOfIgmpProfiles.setDescription('The max number of IGMP profiles in the system.')
igmpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 2), )
if mibBuilder.loadTexts: igmpProfileTable.setStatus('current')
if mibBuilder.loadTexts: igmpProfileTable.setDescription('A table that contains IGMP Profiles.')
igmpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 2, 1), ).setIndexNames((1, "E5-111-MIB", "igmpProfileName"))
if mibBuilder.loadTexts: igmpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: igmpProfileEntry.setDescription('The entry of IGMP Profile table.')
igmpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpProfileName.setStatus('current')
if mibBuilder.loadTexts: igmpProfileName.setDescription('The IGMP Profile name.')
igmpProfileEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpProfileEnable.setStatus('current')
if mibBuilder.loadTexts: igmpProfileEnable.setDescription('Enable/disable IGMP Profile.')
igmpProfileMaxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpProfileMaxGroup.setStatus('current')
if mibBuilder.loadTexts: igmpProfileMaxGroup.setDescription('Set maximum allowed multicast group, 1~64.')
igmpProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: igmpProfileRowStatus.setDescription('The row status of the IGMP Profile entry.')
igmpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 3), )
if mibBuilder.loadTexts: igmpFilterTable.setStatus('current')
if mibBuilder.loadTexts: igmpFilterTable.setDescription('A table that contains IGMP Filters.')
igmpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 3, 1), ).setIndexNames((0, "E5-111-MIB", "igmpProfileName"), (0, "E5-111-MIB", "igmpFilterIndex"))
if mibBuilder.loadTexts: igmpFilterEntry.setStatus('current')
if mibBuilder.loadTexts: igmpFilterEntry.setDescription('The entry of IGMP Filter table.')
igmpFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFilterIndex.setStatus('current')
if mibBuilder.loadTexts: igmpFilterIndex.setDescription('The index which specifies the filter rule.')
igmpFilterStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFilterStartIp.setStatus('current')
if mibBuilder.loadTexts: igmpFilterStartIp.setDescription('The start IP of the filter rule.')
igmpFilterEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFilterEndIp.setStatus('current')
if mibBuilder.loadTexts: igmpFilterEndIp.setDescription('The end IP of the filter rule.')
igmpProfilePortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 4), )
if mibBuilder.loadTexts: igmpProfilePortTable.setStatus('current')
if mibBuilder.loadTexts: igmpProfilePortTable.setDescription('This table specifies the IGMP Profile of the port.')
igmpProfilePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: igmpProfilePortEntry.setStatus('current')
if mibBuilder.loadTexts: igmpProfilePortEntry.setDescription('An entry in igmpProfilePortTable.')
igmpProfilePortProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpProfilePortProfile.setStatus('current')
if mibBuilder.loadTexts: igmpProfilePortProfile.setDescription('The IGMP Profile of the port.')
adslPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2))
pvc = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4))
ppvc = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5))
rpvc = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8))
paepvc = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10))
tlspvc = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11))
ipbpvc = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12))
voipPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13))
dtpvc = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14))
snrMgn = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15))
dslRate = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16))
gbond = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 51))
subrPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 1), )
if mibBuilder.loadTexts: subrPortTable.setStatus('current')
if mibBuilder.loadTexts: subrPortTable.setDescription('This table includes subscriber attributes for the port.')
subrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: subrPortEntry.setStatus('current')
if mibBuilder.loadTexts: subrPortEntry.setDescription('An entry in subrPortTable.')
subrPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subrPortName.setStatus('current')
if mibBuilder.loadTexts: subrPortName.setDescription('Name of the subscriber.')
subrPortTel = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subrPortTel.setStatus('current')
if mibBuilder.loadTexts: subrPortTel.setDescription('Telephone number of the subscriber.')
adslLineConfTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1), )
if mibBuilder.loadTexts: adslLineConfTable.setStatus('current')
if mibBuilder.loadTexts: adslLineConfTable.setDescription('This table includes common attributes describing the ADSL line.')
adslLineConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslLineConfEntry.setStatus('current')
if mibBuilder.loadTexts: adslLineConfEntry.setDescription('An entry in adslLineConfTable.')
adslLineConfAdslMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("gDotLite", 1), ("gDotDmt", 2), ("t1Dot413", 3), ("auto", 4), ("etsi", 5), ("adsl2", 6), ("adsl2Plus", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAdslMode.setStatus('current')
if mibBuilder.loadTexts: adslLineConfAdslMode.setDescription('G.lite and T1.413 are only applicable to annex A board. ETSI is only applicable to annex B board.')
adslLineConfAnnexL = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableNarrowMode", 1), ("enableWideMode", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAnnexL.setStatus('current')
if mibBuilder.loadTexts: adslLineConfAnnexL.setDescription('Enable/disable annex L for the port(Only in AnnexA).')
adslLineConfAnnexM = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAnnexM.setStatus('current')
if mibBuilder.loadTexts: adslLineConfAnnexM.setDescription('Enable/disable annex M for the port(For BCM AnnexA solution).')
adslLineConfAnnexI = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAnnexI.setStatus('current')
if mibBuilder.loadTexts: adslLineConfAnnexI.setDescription('Enable/disable annex I for the port(For BCM AnnexA solution).')
adslLineConfOptionMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfOptionMask.setStatus('current')
if mibBuilder.loadTexts: adslLineConfOptionMask.setDescription('The semantic for each bit is: BIT 1 : Disable Trellis BIT 2 : Disable Reed-Solomon BIT 3 : Disable upstream bitswap BIT 4 : Disable downstream bitswap BIT 5 : Disable 1-bit constellation BIT 6 : Disable transmit windowing BIT 7 : Disable s=0.5 support (ADSL1 only) BIT 8 : Disable G.lite rate limit (ADSL1 only) BIT 9 : Enable Nitro BIT 10: Enable US PHYR BIT 11: ENABLE DS PHYR')
adslLineConfPowerMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableL2", 1), ("enableL2", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfPowerMgmt.setStatus('current')
if mibBuilder.loadTexts: adslLineConfPowerMgmt.setDescription('Enable/disable power management for the port.')
adslLineConfPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fix", 1), ("priorityToPower", 2), ("priorityToRate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfPowerMode.setStatus('current')
if mibBuilder.loadTexts: adslLineConfPowerMode.setDescription('The power mode of the ADSL line.')
adslLineConfAturMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-130, 200))).setUnits('tenth dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAturMaxTxPower.setStatus('current')
if mibBuilder.loadTexts: adslLineConfAturMaxTxPower.setDescription('The maximum allowed transmit power of ATU-R.')
adslLineConfAtucMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 200))).setUnits('tenth dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAtucMaxTxPower.setStatus('current')
if mibBuilder.loadTexts: adslLineConfAtucMaxTxPower.setDescription('The maximum allowed transmit power of ATU-C.')
adslLineConfMaxRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-255, 255))).setUnits('tenth dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfMaxRxPower.setStatus('current')
if mibBuilder.loadTexts: adslLineConfMaxRxPower.setDescription('The maximum aggregate received power.')
adslLineConfAturCarrierMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAturCarrierMask.setStatus('current')
if mibBuilder.loadTexts: adslLineConfAturCarrierMask.setDescription('The upstream carrier mask. For CTLM AnnexA solution, bin is from 0 to 31; CTLM AnnexB solution, bin is from 0 to 63; BCM solution, bin is from 0 to 63. Bit set to 1 indicates the bin is masked off.')
adslLineConfAtucCarrierMask0 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAtucCarrierMask0.setStatus('current')
if mibBuilder.loadTexts: adslLineConfAtucCarrierMask0.setDescription('The downstream carrier mask. For CTLM AnnexA solution, bin is from 32 to 255; CTLM AnnexB solution, bin is from 64 to 255; BCM solution, bin is from 32 to 255. Bit set to 1 indicates the bin is masked off.')
adslLineConfAtucCarrierMask1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAtucCarrierMask1.setStatus('current')
if mibBuilder.loadTexts: adslLineConfAtucCarrierMask1.setDescription('The downstream carrier mask from bin 256 to 511. Bit set to 1 indicates the bin is masked off.')
adslLineConfAturInp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("zero", 1), ("zeroPointFive", 2), ("one", 3), ("two", 4), ("four", 5), ("eight", 6), ("sixteen", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAturInp.setStatus('current')
if mibBuilder.loadTexts: adslLineConfAturInp.setDescription('The upstream Impulse Noise Protection minimum setting in unit of DMT symbol. For CTLM solution, user can set value from 1 ~ 4, but for BCM solution, user can set value from 1 ~ 7.')
adslLineConfAtucInp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("zero", 1), ("zeroPointFive", 2), ("one", 3), ("two", 4), ("four", 5), ("eight", 6), ("sixteen", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAtucInp.setStatus('current')
if mibBuilder.loadTexts: adslLineConfAtucInp.setDescription('The downstream Impulse Noise Protection minimum setting in unit of DMT symbol. For CTLM solution, user can set value from 1 ~ 4, but for BCM solution, user can set value from 1 ~ 7.')
adslLineConfL0Time = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfL0Time.setStatus('current')
if mibBuilder.loadTexts: adslLineConfL0Time.setDescription('Set the minimum time in seconds that the ADSL line must stay in L0 power mode before changing to the L2 power mode. For CTLM solution, the range is 120 ~ 65535; for BCM solution, the range is 10 ~ 65535.')
adslLineConfL2Time = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfL2Time.setStatus('current')
if mibBuilder.loadTexts: adslLineConfL2Time.setDescription('Set minimum time in seconds that the ADSL line must stay in the L2 power mode before reducing the power again in the L2 power mode. For CTLM solution, the range is 60 ~ 65535; for BCM solution, the range is 10 ~ 65535.')
adslLineConfL2ATPR = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 18), Integer32()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfL2ATPR.setStatus('current')
if mibBuilder.loadTexts: adslLineConfL2ATPR.setDescription('Set the maximum Aggregate Transmit Power Reduction (ATPR) in decibels (dB) that is permitted in a L2 power reduction. The system can gradually decrease the ADSL line transmission power while it is in the L2 power mode. This is the largest individual power reduction allowed in the L2 power mode. For CTLM solution, the range is 1 ~ 5(dB); for BCM solution, the range is 0 ~ 15(dB).')
adslLineConfL2ATPRT = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 19), Integer32()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfL2ATPRT.setStatus('current')
if mibBuilder.loadTexts: adslLineConfL2ATPRT.setDescription('the maximum Aggregate Transmit Power Reduction Total (ATPRT) in decibels (dB) that is permitted in the L2 power mode. This is the total transmit power decrease that is allowed to occur in the L2 power mode. For CTLM solution, the range is 1 ~ 40(dB); for BCM solution, the range is 0 ~ 15(dB).')
adslLineConfMaxL2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 20), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfMaxL2Rate.setStatus('current')
if mibBuilder.loadTexts: adslLineConfMaxL2Rate.setDescription('configured maximum L2 rate. (32~4096 Kbps, 4 Kbps resolution. For CTLM solution, 0 for system assign; for BCM solution, default:4096.)')
adslLineConfMinL2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 21), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfMinL2Rate.setStatus('current')
if mibBuilder.loadTexts: adslLineConfMinL2Rate.setDescription('configured minimum L2 rate. (32~4096 Kbps, 4 Kbps resolution, For CTLM solution, 0 for system assign; for BCM solution, default:32.)')
adslLineConfL0toL2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 22), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfL0toL2Rate.setStatus('current')
if mibBuilder.loadTexts: adslLineConfL0toL2Rate.setDescription('configured transition L0 to L2 rate. (<=min_l2rate/2 and >= 16 Kbps, For CTLM solution, 0 for system assign; for BCM solution, default:16.)')
adslLineConfNitro = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfNitro.setStatus('current')
if mibBuilder.loadTexts: adslLineConfNitro.setDescription('Enable/disable nitro mode for the port(For BCM solution).')
adslLineConfUSPhyr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfUSPhyr.setStatus('current')
if mibBuilder.loadTexts: adslLineConfUSPhyr.setDescription('Enable/disable Upstream PHYR for the port(For BCM solution).')
adslLineConfDSPhyr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfDSPhyr.setStatus('current')
if mibBuilder.loadTexts: adslLineConfDSPhyr.setDescription('Enable/disable Downstream PHYR for the port(For BCM solution).')
adslPortBatchSet = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3))
adslPortTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslPortTarget.setStatus('current')
if mibBuilder.loadTexts: adslPortTarget.setDescription('The managed object is used for identify the target on which the port configuration should be performed. The target is encoded as: Byte 1: 0, Reserved(chaises) Byte 2~3: 0,0 Reserved(slot) Byte 4: 0, reserved Byte 5~11:each octet specifies a set of eight ports, with the first octet specifying ports 1 through 8, etc.')
adslPortOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslPortOps.setStatus('current')
if mibBuilder.loadTexts: adslPortOps.setDescription('The managed object is for ADSL line configuration. When the EMS wants to issue the desired operation, the EMS shall send SNMP-SET message to set the corresponding bit value to be 1. The various bit positions are: BIT 1: enable port BIT 2: disable port BIT 3: set ADSL mode BIT 4: set line profile BIT 5: set alarm profile BIT 6: enable Annex L to be narrow mode(Only in AnnexA) BIT 7: enable Annex L to be wide mode(Only in AnnexA) BIT 8: disable Annex L(Only in AnnexA) BIT 9: enable Annex M (For BCM AnnexA solution) BIT 10: disable Annex M (For BCM AnnexA solution) BIT 11: enable Annex I (For BCM AnnexA solution) BIT 12: disable Annex I (For BCM AnnexA solution) BIT 13: set option mask BIT 14: enable power management mode to be L2 BIT 15: enable power management mode to be L2 BIT 16: disable power management mode BIT 17: set power mode to be fixed BIT 18: set power mode to be priority to power BIT 19: set power mode to be priority to rate BIT 20: set ATU-R max Tx power BIT 21: set ATU-C max Tx power BIT 22: set max Rx power BIT 23: set ATU-R carrier mask BIT 24: set ATU-C carrier mask BIT 25: set ATU-R INP minimum setting BIT 26: set ATU-C INP minimum setting')
adslPortOps2 = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslPortOps2.setStatus('current')
if mibBuilder.loadTexts: adslPortOps2.setDescription('The managed object is for ADSL line configuration. When the EMS wants to issue the desired operation, the EMS shall send SNMP-SET message to set the corresponding bit value to be 1. The various bit positions are: BIT 1: set L0 Time BIT 2: set L2 Time BIT 3: set L2 ATPR BIT 4: set L2 ATPRT BIT 5: set maximum L2 rate BIT 6: set minimum L2 rate BIT 7: set transition L0 to L2 rate')
adslModeForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("gDotLite", 1), ("gDotDmt", 2), ("t1Dot413", 3), ("auto", 4), ("etsi", 5), ("adsl2", 6), ("adsl2Plus", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslModeForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslModeForBatchSet.setDescription('G.lite and T1.413 are only applicable to annex A board. ETSI is only applicable to annex B board.')
adslLineProfileForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineProfileForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslLineProfileForBatchSet.setDescription('The ADSL line profile.')
adslAlarmProfileForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslAlarmProfileForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslAlarmProfileForBatchSet.setDescription('The ADSL alarm profile.')
adslOptionMaskForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslOptionMaskForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslOptionMaskForBatchSet.setDescription('The semantic for each bit is identical to the object adslLineConfOptionMask.')
adslAturMaxTxPowerForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-130, 200))).setUnits('tenth dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslAturMaxTxPowerForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslAturMaxTxPowerForBatchSet.setDescription('The maximum allowed transmit power of ATU-R.')
adslAtucMaxTxPowerForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 200))).setUnits('tenth dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslAtucMaxTxPowerForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslAtucMaxTxPowerForBatchSet.setDescription('The maximum allowed transmit power of ATU-C.')
adslMaxRxPowerForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-255, 255))).setUnits('tenth dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslMaxRxPowerForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslMaxRxPowerForBatchSet.setDescription('The maximum aggregate received power.')
adslAturCarrierMaskForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslAturCarrierMaskForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslAturCarrierMaskForBatchSet.setDescription('The upstream carrier mask.For CTLM AnnexA solution, bin is from 0 to 31; CTLM AnnexB solution, bin is from 0 to 63; BCM solution, bin is from 0 to 63. Bit set to 1 indicates the bin is masked off.')
adslAtucCarrierMask0ForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslAtucCarrierMask0ForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslAtucCarrierMask0ForBatchSet.setDescription('The downstream carrier mask from bin 32 to 255. Bit set to 1 indicates the bin is masked off.')
adslAtucCarrierMask1ForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslAtucCarrierMask1ForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslAtucCarrierMask1ForBatchSet.setDescription('The downstream carrier mask from bin 256 to 511. Bit set to 1 indicates the bin is masked off.')
adslAturInpForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("zero", 1), ("zeroPointFive", 2), ("one", 3), ("two", 4), ("four", 5), ("eight", 6), ("sixteen", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslAturInpForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslAturInpForBatchSet.setDescription('The upstream Impulse Noise Protection minimum setting in unit of DMT symbol. For CTLM solution, user can set value from 1 ~ 4, but for BCM solution, user can set value from 1 ~ 7.')
adslAtucInpForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("zero", 1), ("zeroPointFive", 2), ("one", 3), ("two", 4), ("four", 5), ("eight", 6), ("sixteen", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslAtucInpForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslAtucInpForBatchSet.setDescription('The downstream Impulse Noise Protection minimum setting in unit of DMT symbol. For CTLM solution, user can set value from 1 ~ 4, but for BCM solution, user can set value from 1 ~ 7.')
adslL0TimeForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslL0TimeForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslL0TimeForBatchSet.setDescription('Set the minimum time in seconds that the ADSL line must stay in L0 power mode before changing to the L2 power mode. For CTLM solution, the range is 120 ~ 65535; for BCM solution, the range is 10 ~ 65535.')
adslL2TimeForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslL2TimeForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslL2TimeForBatchSet.setDescription('Set minimum time in seconds that the ADSL line must stay in the L2 power mode before reducing the power again in the L2 power mode. For CTLM solution, the range is 60 ~ 65535; for BCM solution, the range is 10 ~ 65535.')
adslL2ATPRForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 18), Integer32()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslL2ATPRForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslL2ATPRForBatchSet.setDescription('Set the maximum Aggregate Transmit Power Reduction (ATPR) in decibels (dB) that is permitted in a L2 power reduction. The system can gradually decrease the ADSL line transmission power while it is in the L2 power mode. This is the largest individual power reduction allowed in the L2 power mode. For CTLM solution, the range is 1 ~ 5(dB); for BCM solution, the range is 0 ~ 15(dB).')
adslL2ATPRTForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 19), Integer32()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslL2ATPRTForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslL2ATPRTForBatchSet.setDescription('the maximum Aggregate Transmit Power Reduction Total (ATPRT) in decibels (dB) that is permitted in the L2 power mode. This is the total transmit power decrease that is allowed to occur in the L2 power mode. For CTLM solution, the range is 1 ~ 40(dB); for BCM solution, the range is 0 ~ 15(dB).')
adslMaxL2RateForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 20), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslMaxL2RateForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslMaxL2RateForBatchSet.setDescription('configured maximum L2 rate. (32~4096 Kbps, 4 Kbps resolution. For CTLM solution, 0 for system assign; for BCM solution, default:4096.)')
adslMinL2RateForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 21), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslMinL2RateForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslMinL2RateForBatchSet.setDescription('configured minimum L2 rate. (32~4096 Kbps, 4 Kbps resolution, For CTLM solution, 0 for system assign; for BCM solution, default:32.)')
adslL0toL2RateForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 22), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslL0toL2RateForBatchSet.setStatus('current')
if mibBuilder.loadTexts: adslL0toL2RateForBatchSet.setDescription('configured transition L0 to L2 rate. (<=min_l2rate/2 and >= 16 Kbps, For CTLM solution, 0 for system assign; for BCM solution, default:16.)')
adslLineStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 4), )
if mibBuilder.loadTexts: adslLineStatusTable.setStatus('current')
if mibBuilder.loadTexts: adslLineStatusTable.setDescription('This table includes the ADSL line status.')
adslLineStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslLineStatusEntry.setStatus('current')
if mibBuilder.loadTexts: adslLineStatusEntry.setDescription('An entry in adslLineStatusTable.')
adslLineStatusMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("gDotLite", 1), ("gDotDmt", 2), ("t1Dot413", 3), ("etsi", 4), ("adsl2", 5), ("adsl2Plus", 6), ("none", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslLineStatusMode.setStatus('current')
if mibBuilder.loadTexts: adslLineStatusMode.setDescription('The link up mode of the ADSL line.')
adslLineUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslLineUpTime.setStatus('current')
if mibBuilder.loadTexts: adslLineUpTime.setDescription('The link up time of the ADSL line, in unit of seconds')
powerMgmtParamTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 5), )
if mibBuilder.loadTexts: powerMgmtParamTable.setStatus('current')
if mibBuilder.loadTexts: powerMgmtParamTable.setDescription('This table defines L0 to L2 power transition parameters.')
powerMgmtParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: powerMgmtParamEntry.setStatus('current')
if mibBuilder.loadTexts: powerMgmtParamEntry.setDescription('An entry in powerMgmtParamTable.')
powerMgmtL0Time = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 5, 1, 1), Integer32()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMgmtL0Time.setStatus('current')
if mibBuilder.loadTexts: powerMgmtL0Time.setDescription('The object specifies the minimum time in L0 mode before L2 mode may be entered.')
powerMgmtL2Time = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 5, 1, 2), Integer32()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMgmtL2Time.setStatus('current')
if mibBuilder.loadTexts: powerMgmtL2Time.setDescription('The object specifies the minimum time in L2 mode before trimming and in between power trims.')
powerMgmtL2Atpr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 5, 1, 3), Integer32()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMgmtL2Atpr.setStatus('current')
if mibBuilder.loadTexts: powerMgmtL2Atpr.setDescription('The maximum Aggregate Transmit Power Reduction.')
powerMgmtL2Atprt = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 5, 1, 4), Integer32()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMgmtL2Atprt.setStatus('current')
if mibBuilder.loadTexts: powerMgmtL2Atprt.setDescription('The maximum Aggregate Transmit Power Reduction Total.')
powerMgmtL2MinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 5, 1, 5), Integer32()).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMgmtL2MinRate.setStatus('current')
if mibBuilder.loadTexts: powerMgmtL2MinRate.setDescription('The object specifies the minimum L2 rate.')
powerMgmtL2MaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 5, 1, 6), Integer32()).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMgmtL2MaxRate.setStatus('current')
if mibBuilder.loadTexts: powerMgmtL2MaxRate.setDescription('The object specifies the maximum L2 rate.')
powerMgmtL2ThreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 5, 1, 7), Integer32()).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMgmtL2ThreshRate.setStatus('current')
if mibBuilder.loadTexts: powerMgmtL2ThreshRate.setDescription('The object specifies the rate threshold that triggers the line entering L0 or L2 mode.')
powerMgmtPSDTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 6), )
if mibBuilder.loadTexts: powerMgmtPSDTable.setStatus('current')
if mibBuilder.loadTexts: powerMgmtPSDTable.setDescription('This table provides the PSD setting for both ATU-C and ATU-R.')
powerMgmtPSDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: powerMgmtPSDEntry.setStatus('current')
if mibBuilder.loadTexts: powerMgmtPSDEntry.setDescription('An entry in powerMgmtPSDTable.')
powerMgmtAtucMaxPSD = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 6, 1, 1), Integer32()).setUnits('0.1dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMgmtAtucMaxPSD.setStatus('current')
if mibBuilder.loadTexts: powerMgmtAtucMaxPSD.setDescription('The object specifies the maximum ATU-C PSD.')
powerMgmtAturMaxPSD = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 6, 1, 2), Integer32()).setUnits('0.1dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMgmtAturMaxPSD.setStatus('current')
if mibBuilder.loadTexts: powerMgmtAturMaxPSD.setDescription('The object specifies the maximum ATU-R PSD.')
maxNumOfPvcs = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfPvcs.setStatus('current')
if mibBuilder.loadTexts: maxNumOfPvcs.setDescription('The maximum number of PVCs which could be created on a port.')
pvcTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2), )
if mibBuilder.loadTexts: pvcTable.setStatus('current')
if mibBuilder.loadTexts: pvcTable.setDescription('This table includes PVC configuration.')
pvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "pvcVpi"), (0, "E5-111-MIB", "pvcVci"), (0, "E5-111-MIB", "pvcPvid"))
if mibBuilder.loadTexts: pvcEntry.setStatus('current')
if mibBuilder.loadTexts: pvcEntry.setDescription('An entry in pvcTable.')
pvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcVpi.setStatus('current')
if mibBuilder.loadTexts: pvcVpi.setDescription('VPI of the pvc.')
pvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcVci.setStatus('current')
if mibBuilder.loadTexts: pvcVci.setDescription('VCI of the pvc.')
pvcPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPvid.setStatus('current')
if mibBuilder.loadTexts: pvcPvid.setDescription('Default VID of the pvc.')
pvcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvcPriority.setStatus('current')
if mibBuilder.loadTexts: pvcPriority.setDescription('802.1p default priority of the pvc.')
pvcProfileDS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvcProfileDS.setStatus('current')
if mibBuilder.loadTexts: pvcProfileDS.setDescription('The value of this object identifies the row in the atmProfileTable, which applies for this pvc in DS side.')
pvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvcRowStatus.setDescription('This object is used to create a new row or delete an existing row in this table.')
pvcProfileUS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvcProfileUS.setStatus('current')
if mibBuilder.loadTexts: pvcProfileUS.setDescription('The value of this object identifies the row in the atmProfileTable, which applies for this pvc in US side.')
pvcAcName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvcAcName.setStatus('current')
if mibBuilder.loadTexts: pvcAcName.setDescription('Access concentrator name for paepvc.')
pvcServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvcServiceName.setStatus('current')
if mibBuilder.loadTexts: pvcServiceName.setDescription('Service name for paepvc.')
pvcHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 13), Integer32()).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvcHelloTime.setStatus('current')
if mibBuilder.loadTexts: pvcHelloTime.setDescription('The system will close the PVC if there are not any LCP echo messages passed through during the LCP hello time.')
pvcStateTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 3), )
if mibBuilder.loadTexts: pvcStateTable.setStatus('current')
if mibBuilder.loadTexts: pvcStateTable.setDescription('This table show current PVC status.')
pvcStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "pvcStateVpi"), (0, "E5-111-MIB", "pvcStateVci"), (0, "E5-111-MIB", "pvcStatePvid"))
if mibBuilder.loadTexts: pvcStateEntry.setStatus('current')
if mibBuilder.loadTexts: pvcStateEntry.setDescription('An entry in pvcStateTable.')
pvcStateVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcStateVpi.setStatus('current')
if mibBuilder.loadTexts: pvcStateVpi.setDescription('VPI of the pvc.')
pvcStateVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcStateVci.setStatus('current')
if mibBuilder.loadTexts: pvcStateVci.setDescription('VCI of the pvc.')
pvcStatePvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 3, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcStatePvid.setStatus('current')
if mibBuilder.loadTexts: pvcStatePvid.setDescription('Default VID of the pvc.')
pvcStatePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcStatePriority.setStatus('current')
if mibBuilder.loadTexts: pvcStatePriority.setDescription('802.1p default priority of the pvc.')
pvcStateChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcStateChannelType.setStatus('current')
if mibBuilder.loadTexts: pvcStateChannelType.setDescription('The value of this object identifies the channel type at runtime.')
pvcStateEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcStateEncap.setStatus('current')
if mibBuilder.loadTexts: pvcStateEncap.setDescription('The value of this object identifies the channel encapsulation at runtime.')
pvcUsRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 4), )
if mibBuilder.loadTexts: pvcUsRateLimitTable.setStatus('current')
if mibBuilder.loadTexts: pvcUsRateLimitTable.setDescription('This table defines the upstream rate limit for each PVC.')
pvcUsRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "pvcVpi"), (0, "E5-111-MIB", "pvcVci"))
if mibBuilder.loadTexts: pvcUsRateLimitEntry.setStatus('current')
if mibBuilder.loadTexts: pvcUsRateLimitEntry.setDescription('An entry in pvcUsRateLimitTable.')
pvcUsRateLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcUsRateLimitEnable.setStatus('current')
if mibBuilder.loadTexts: pvcUsRateLimitEnable.setDescription('Enable/disable upstream rate limit for a PVC.')
pvcUsRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 4, 1, 2), Integer32()).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcUsRateLimit.setStatus('current')
if mibBuilder.loadTexts: pvcUsRateLimit.setDescription('Upstream rate limit in Kbps for a PVC.')
maxNumOfPriorityPvcs = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfPriorityPvcs.setStatus('current')
if mibBuilder.loadTexts: maxNumOfPriorityPvcs.setDescription('The maximum number of priority PVCs which could be created on a port.')
ppvcTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 2), )
if mibBuilder.loadTexts: ppvcTable.setStatus('current')
if mibBuilder.loadTexts: ppvcTable.setDescription('This table includes priority PVC configuration.')
ppvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "ppvcVpi"), (0, "E5-111-MIB", "ppvcVci"), (0, "E5-111-MIB", "ppvcPvid"))
if mibBuilder.loadTexts: ppvcEntry.setStatus('current')
if mibBuilder.loadTexts: ppvcEntry.setDescription('An entry in ppvcTable.')
ppvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppvcVpi.setStatus('current')
if mibBuilder.loadTexts: ppvcVpi.setDescription('VPI of the ppvc.')
ppvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppvcVci.setStatus('current')
if mibBuilder.loadTexts: ppvcVci.setDescription('VCI of the ppvc.')
ppvcPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 2, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppvcPvid.setStatus('current')
if mibBuilder.loadTexts: ppvcPvid.setDescription('Default VID of the ppvc.')
ppvcEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("llc", 1), ("vc", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ppvcEncap.setStatus('current')
if mibBuilder.loadTexts: ppvcEncap.setDescription('Encapsulation of the ppvc.')
ppvcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ppvcPriority.setStatus('current')
if mibBuilder.loadTexts: ppvcPriority.setDescription('802.1p default priority of the ppvc.')
ppvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ppvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: ppvcRowStatus.setDescription('This object is used to create a new row or delete an existing row in this table.')
ppvcMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 4), )
if mibBuilder.loadTexts: ppvcMemberTable.setStatus('current')
if mibBuilder.loadTexts: ppvcMemberTable.setDescription('This table includes priority PVC member configuration.')
ppvcMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "ppvcVpi"), (0, "E5-111-MIB", "ppvcVci"), (0, "E5-111-MIB", "ppvcMemberVpi"), (0, "E5-111-MIB", "ppvcMemberVci"), (0, "E5-111-MIB", "ppvcMemberPriority"))
if mibBuilder.loadTexts: ppvcMemberEntry.setStatus('current')
if mibBuilder.loadTexts: ppvcMemberEntry.setDescription('An entry in ppvcMemberTable.')
ppvcMemberVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppvcMemberVpi.setStatus('current')
if mibBuilder.loadTexts: ppvcMemberVpi.setDescription('VPI of the member ppvc.')
ppvcMemberVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppvcMemberVci.setStatus('current')
if mibBuilder.loadTexts: ppvcMemberVci.setDescription('VCI of the member ppvc.')
ppvcMemberPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppvcMemberPriority.setStatus('current')
if mibBuilder.loadTexts: ppvcMemberPriority.setDescription('802.1p default priority of the member ppvc.')
ppvcMemberProfileDS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ppvcMemberProfileDS.setStatus('current')
if mibBuilder.loadTexts: ppvcMemberProfileDS.setDescription('The profile of the member ppvc in DS side.')
ppvcMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ppvcMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: ppvcMemberRowStatus.setDescription('This object is used to create a new row or delete an existing row in this table.')
ppvcMemberProfileUS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ppvcMemberProfileUS.setStatus('current')
if mibBuilder.loadTexts: ppvcMemberProfileUS.setDescription('The profile of the member ppvc in US side.')
rpvcGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 1), )
if mibBuilder.loadTexts: rpvcGatewayTable.setStatus('current')
if mibBuilder.loadTexts: rpvcGatewayTable.setDescription('This table includes Routed Gateway configuration.')
rpvcGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 1, 1), ).setIndexNames((0, "E5-111-MIB", "rpvcGatewayIp"))
if mibBuilder.loadTexts: rpvcGatewayEntry.setStatus('current')
if mibBuilder.loadTexts: rpvcGatewayEntry.setDescription('An entry in Routed Gateway table.')
rpvcGatewayIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpvcGatewayIp.setStatus('current')
if mibBuilder.loadTexts: rpvcGatewayIp.setDescription('IP of RPVC gateway.')
rpvcGatewayVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 1, 1, 2), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpvcGatewayVlanId.setStatus('current')
if mibBuilder.loadTexts: rpvcGatewayVlanId.setDescription('Vlan id send to this RPVC gateway.')
rpvcGatewayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rpvcGatewayRowStatus.setStatus('current')
if mibBuilder.loadTexts: rpvcGatewayRowStatus.setDescription('This object is used to create a new row or delete an existing row in this table.')
rpvcGatewayPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpvcGatewayPriority.setStatus('current')
if mibBuilder.loadTexts: rpvcGatewayPriority.setDescription('802.1p p bit send to this RPVC gateway.')
rpvcTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2), )
if mibBuilder.loadTexts: rpvcTable.setStatus('current')
if mibBuilder.loadTexts: rpvcTable.setDescription('This table includes RPVC configuration.')
rpvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "rpvcVpi"), (0, "E5-111-MIB", "rpvcVci"), (0, "E5-111-MIB", "rpvcIp"), (0, "E5-111-MIB", "rpvcNetmask"))
if mibBuilder.loadTexts: rpvcEntry.setStatus('current')
if mibBuilder.loadTexts: rpvcEntry.setDescription('An entry in rpvcTable.')
rpvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpvcVpi.setStatus('current')
if mibBuilder.loadTexts: rpvcVpi.setDescription('VPI of the rpvc.')
rpvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpvcVci.setStatus('current')
if mibBuilder.loadTexts: rpvcVci.setDescription('VCI of the rpvc.')
rpvcDSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rpvcDSProfile.setStatus('current')
if mibBuilder.loadTexts: rpvcDSProfile.setDescription('The down stream profile of the rpvc.')
rpvcUSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rpvcUSProfile.setStatus('current')
if mibBuilder.loadTexts: rpvcUSProfile.setDescription('The up stream profile of the rpvc.')
rpvcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpvcIp.setStatus('current')
if mibBuilder.loadTexts: rpvcIp.setDescription('The IP of the rpvc.')
rpvcNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpvcNetmask.setStatus('current')
if mibBuilder.loadTexts: rpvcNetmask.setDescription('The IP mask of the rpvc IP.')
rpvcGatewayIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rpvcGatewayIpAddress.setStatus('current')
if mibBuilder.loadTexts: rpvcGatewayIpAddress.setDescription('The gateway IP of rpvc.')
rpvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rpvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: rpvcRowStatus.setDescription('This object is used to create a new row or delete an existing row in this table.')
rpvcRouteDomainTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 3), )
if mibBuilder.loadTexts: rpvcRouteDomainTable.setStatus('current')
if mibBuilder.loadTexts: rpvcRouteDomainTable.setDescription('This table includes RPVC route domain configuration.')
rpvcRouteDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "rpvcRouteDomainVpi"), (0, "E5-111-MIB", "rpvcRouteDomainVci"), (0, "E5-111-MIB", "rpvcRouteDomainIp"), (0, "E5-111-MIB", "rpvcRouteDomainNetmask"))
if mibBuilder.loadTexts: rpvcRouteDomainEntry.setStatus('current')
if mibBuilder.loadTexts: rpvcRouteDomainEntry.setDescription('An entry in rpvcRouteDomainTable.')
rpvcRouteDomainVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpvcRouteDomainVpi.setStatus('current')
if mibBuilder.loadTexts: rpvcRouteDomainVpi.setDescription('VPI of the rpvc.')
rpvcRouteDomainVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpvcRouteDomainVci.setStatus('current')
if mibBuilder.loadTexts: rpvcRouteDomainVci.setDescription('VCI of the rpvc.')
rpvcRouteDomainIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpvcRouteDomainIp.setStatus('current')
if mibBuilder.loadTexts: rpvcRouteDomainIp.setDescription('The route domain IP.')
rpvcRouteDomainNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpvcRouteDomainNetmask.setStatus('current')
if mibBuilder.loadTexts: rpvcRouteDomainNetmask.setDescription('The IP mask of the route domain IP.')
rpvcRouteDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rpvcRouteDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: rpvcRouteDomainRowStatus.setDescription('This object is used to create a new row or delete an existing row in this table.')
rpvcArpAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpvcArpAgingTime.setStatus('current')
if mibBuilder.loadTexts: rpvcArpAgingTime.setDescription('Set RPVC ARP proxy aging time 10..10000 seconds, 0 to disable againg.')
rpvcArpFlush = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpvcArpFlush.setStatus('current')
if mibBuilder.loadTexts: rpvcArpFlush.setDescription('Flush the RPVC ARP proxy table.')
dsBcastDisableTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 9), )
if mibBuilder.loadTexts: dsBcastDisableTable.setStatus('current')
if mibBuilder.loadTexts: dsBcastDisableTable.setDescription('This table includes Down Stream Bcast configuration.')
dsBcastDisableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "dsBcastDisableVlanId"))
if mibBuilder.loadTexts: dsBcastDisableEntry.setStatus('current')
if mibBuilder.loadTexts: dsBcastDisableEntry.setDescription('An entry in Down Stream Bcast table.')
dsBcastDisableVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsBcastDisableVlanId.setStatus('current')
if mibBuilder.loadTexts: dsBcastDisableVlanId.setDescription('downstream broadcast disabled vid.')
dsBcastDisableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsBcastDisableRowStatus.setStatus('current')
if mibBuilder.loadTexts: dsBcastDisableRowStatus.setDescription('This object is used to create a new row or delete an existing row in this table.')
paepvcTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1), )
if mibBuilder.loadTexts: paepvcTable.setStatus('current')
if mibBuilder.loadTexts: paepvcTable.setDescription('This table includes PPPoAoE PVC configuration.')
paepvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "paepvcVpi"), (0, "E5-111-MIB", "paepvcVci"), (0, "E5-111-MIB", "paepvcPvid"))
if mibBuilder.loadTexts: paepvcEntry.setStatus('current')
if mibBuilder.loadTexts: paepvcEntry.setDescription('An entry of paepvcTable.')
paepvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcVpi.setStatus('current')
if mibBuilder.loadTexts: paepvcVpi.setDescription('VPI of the pvc.')
paepvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcVci.setStatus('current')
if mibBuilder.loadTexts: paepvcVci.setDescription('VCI of the pvc.')
paepvcPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcPvid.setStatus('current')
if mibBuilder.loadTexts: paepvcPvid.setDescription('Default VID of the pvc.')
paepvcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: paepvcPriority.setStatus('current')
if mibBuilder.loadTexts: paepvcPriority.setDescription('802.1p default priority of the pvc.')
paepvcProfileDS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: paepvcProfileDS.setStatus('current')
if mibBuilder.loadTexts: paepvcProfileDS.setDescription('The value of this object identifies the row in the atmProfileTable, which applies for this pvc in DS side.')
paepvcAcName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: paepvcAcName.setStatus('current')
if mibBuilder.loadTexts: paepvcAcName.setDescription('Access concentrator name.')
paepvcServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: paepvcServiceName.setStatus('current')
if mibBuilder.loadTexts: paepvcServiceName.setDescription('Service name.')
paepvcHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 9), Integer32()).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: paepvcHelloTime.setStatus('current')
if mibBuilder.loadTexts: paepvcHelloTime.setDescription('The system will close the PVC if there are not any LCP echo messages passed through during the LCP hello time.')
paepvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: paepvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: paepvcRowStatus.setDescription('This object is used to create a new row or delete an existing row in this table.')
paepvcProfileUS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: paepvcProfileUS.setStatus('current')
if mibBuilder.loadTexts: paepvcProfileUS.setDescription('The value of this object identifies the row in the atmProfileTable, which applies for this pvc in US side.')
paepvcCvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 12), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: paepvcCvid.setStatus('current')
if mibBuilder.loadTexts: paepvcCvid.setDescription('Default C-VID of the pvc.')
paepvcCPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: paepvcCPriority.setStatus('current')
if mibBuilder.loadTexts: paepvcCPriority.setDescription('802.1p default C-priority of the pvc.')
tlspvcTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11, 1), )
if mibBuilder.loadTexts: tlspvcTable.setStatus('current')
if mibBuilder.loadTexts: tlspvcTable.setDescription('This table includes Transparent LAN Service (TLS) PVC configuration.')
tlspvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "tlspvcVpi"), (0, "E5-111-MIB", "tlspvcVci"), (0, "E5-111-MIB", "tlspvcSvid"))
if mibBuilder.loadTexts: tlspvcEntry.setStatus('current')
if mibBuilder.loadTexts: tlspvcEntry.setDescription('An entry of tlspvcTable.')
tlspvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlspvcVpi.setStatus('current')
if mibBuilder.loadTexts: tlspvcVpi.setDescription('VPI of the pvc.')
tlspvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlspvcVci.setStatus('current')
if mibBuilder.loadTexts: tlspvcVci.setDescription('VCI of the pvc.')
tlspvcSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11, 1, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlspvcSvid.setStatus('current')
if mibBuilder.loadTexts: tlspvcSvid.setDescription('s-tag VLAN ID of the pvc.')
tlspvcSpriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlspvcSpriority.setStatus('current')
if mibBuilder.loadTexts: tlspvcSpriority.setDescription('s-tag priority of the pvc.')
tlspvcProfileDS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlspvcProfileDS.setStatus('current')
if mibBuilder.loadTexts: tlspvcProfileDS.setDescription('The value of this object identifies the row in the atmProfileTable, which applies for this pvc in DS side.')
tlspvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlspvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: tlspvcRowStatus.setDescription('This object is used to create a new row or delete an existing row in this table.')
tlspvcProfileUS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlspvcProfileUS.setStatus('current')
if mibBuilder.loadTexts: tlspvcProfileUS.setDescription('The value of this object identifies the row in the atmProfileTable, which applies for this pvc in US side.')
ipbpvcDomainTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 1), )
if mibBuilder.loadTexts: ipbpvcDomainTable.setStatus('current')
if mibBuilder.loadTexts: ipbpvcDomainTable.setDescription('This table includes ipbpvc domain configuration. This table is supported by R3.00 and later versions.')
ipbpvcDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 1, 1), ).setIndexNames((0, "E5-111-MIB", "ipbpvcDomainName"))
if mibBuilder.loadTexts: ipbpvcDomainEntry.setStatus('current')
if mibBuilder.loadTexts: ipbpvcDomainEntry.setDescription('An entry of ipbpvcDomainTable.')
ipbpvcDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcDomainName.setStatus('current')
if mibBuilder.loadTexts: ipbpvcDomainName.setDescription('Name of the domain.')
ipbpvcDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipbpvcDomainRowStatus.setDescription('Row status of the table.')
ipbpvcDomainVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 2), )
if mibBuilder.loadTexts: ipbpvcDomainVlanTable.setStatus('current')
if mibBuilder.loadTexts: ipbpvcDomainVlanTable.setDescription('This table includes ipbpvc domain VLAN configuration. This table is supported by R3.00 and later versions.')
ipbpvcDomainVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 2, 1), ).setIndexNames((0, "E5-111-MIB", "ipbpvcDomainName"), (0, "E5-111-MIB", "ipbpvcDomainVlanId"))
if mibBuilder.loadTexts: ipbpvcDomainVlanEntry.setStatus('current')
if mibBuilder.loadTexts: ipbpvcDomainVlanEntry.setDescription('An entry of ipbpvcDomainVlanTable.')
ipbpvcDomainVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 2, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcDomainVlanId.setStatus('current')
if mibBuilder.loadTexts: ipbpvcDomainVlanId.setDescription('Set VLAN to join or leave the specified domain.')
ipbpvcDomainDhcpVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcDomainDhcpVlanEnable.setStatus('current')
if mibBuilder.loadTexts: ipbpvcDomainDhcpVlanEnable.setDescription('Enable/disable DHCP VLAN in a domain.')
ipbpvcDomainVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcDomainVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipbpvcDomainVlanRowStatus.setDescription('Row status of the table used to create/delete an entry.')
ipbpvcEdgeRouterTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 3), )
if mibBuilder.loadTexts: ipbpvcEdgeRouterTable.setStatus('current')
if mibBuilder.loadTexts: ipbpvcEdgeRouterTable.setDescription('This table includes ipbpvc edge router configuration. This table is supported by R3.00 and later versions.')
ipbpvcEdgeRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 3, 1), ).setIndexNames((0, "E5-111-MIB", "ipbpvcDomainName"), (0, "E5-111-MIB", "ipbpvcEdgeRouterIp"), (0, "E5-111-MIB", "ipbpvcEdgeRouterMask"), (0, "E5-111-MIB", "ipbpvcEdgeRouterVid"))
if mibBuilder.loadTexts: ipbpvcEdgeRouterEntry.setStatus('current')
if mibBuilder.loadTexts: ipbpvcEdgeRouterEntry.setDescription('An entry of ipbpvcEdgeRouterTable.')
ipbpvcEdgeRouterIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcEdgeRouterIp.setStatus('current')
if mibBuilder.loadTexts: ipbpvcEdgeRouterIp.setDescription('IP address of the edge router.')
ipbpvcEdgeRouterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 3, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcEdgeRouterVid.setStatus('current')
if mibBuilder.loadTexts: ipbpvcEdgeRouterVid.setDescription('VLAN ID of the edge router.')
ipbpvcEdgeRouterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcEdgeRouterMask.setStatus('current')
if mibBuilder.loadTexts: ipbpvcEdgeRouterMask.setDescription('Netmask of the edge router.')
ipbpvcEdgeRouterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcEdgeRouterRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipbpvcEdgeRouterRowStatus.setDescription('Row status of the table used to create/delete an entry.')
ipbpvcInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 4), )
if mibBuilder.loadTexts: ipbpvcInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: ipbpvcInterfaceTable.setDescription('This table includes ipbpvc interface configuration. This table is supported by R3.00 and later versions.')
ipbpvcInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 4, 1), ).setIndexNames((0, "E5-111-MIB", "ipbpvcDomainName"), (0, "E5-111-MIB", "ipbpvcInterfaceIp"), (0, "E5-111-MIB", "ipbpvcInterfaceMask"), (0, "E5-111-MIB", "ipbpvcInterfaceVid"))
if mibBuilder.loadTexts: ipbpvcInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: ipbpvcInterfaceEntry.setDescription('An entry of ipbpvcInterfaceTable.')
ipbpvcInterfaceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcInterfaceIp.setStatus('current')
if mibBuilder.loadTexts: ipbpvcInterfaceIp.setDescription('IP address of the interface.')
ipbpvcInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcInterfaceMask.setStatus('current')
if mibBuilder.loadTexts: ipbpvcInterfaceMask.setDescription('Netmask of the interface.')
ipbpvcInterfaceVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 4, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcInterfaceVid.setStatus('current')
if mibBuilder.loadTexts: ipbpvcInterfaceVid.setDescription('VLAN ID of the interface.')
ipbpvcInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: ipbpvcInterfaceIfIndex.setDescription('IfIndex of the interface.')
ipbpvcInterfaceVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 4, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcInterfaceVpi.setStatus('current')
if mibBuilder.loadTexts: ipbpvcInterfaceVpi.setDescription('VPI of the interface.')
ipbpvcInterfaceVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 4, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcInterfaceVci.setStatus('current')
if mibBuilder.loadTexts: ipbpvcInterfaceVci.setDescription('VCI of the interface.')
ipbpvcInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipbpvcInterfaceRowStatus.setDescription('Row status of the table used to create/delete an entry.')
ipbpvcRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 5), )
if mibBuilder.loadTexts: ipbpvcRouteTable.setStatus('current')
if mibBuilder.loadTexts: ipbpvcRouteTable.setDescription('This table includes ipbpvc route configuration. This table is supported by R3.00 and later versions.')
ipbpvcRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 5, 1), ).setIndexNames((0, "E5-111-MIB", "ipbpvcDomainName"), (0, "E5-111-MIB", "ipbpvcRouteIp"), (0, "E5-111-MIB", "ipbpvcRouteMask"), (0, "E5-111-MIB", "ipbpvcRouteNextHop"))
if mibBuilder.loadTexts: ipbpvcRouteEntry.setStatus('current')
if mibBuilder.loadTexts: ipbpvcRouteEntry.setDescription('An entry of ipbpvcRouteTable.')
ipbpvcRouteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcRouteIp.setStatus('current')
if mibBuilder.loadTexts: ipbpvcRouteIp.setDescription('IP address of the route.')
ipbpvcRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcRouteMask.setStatus('current')
if mibBuilder.loadTexts: ipbpvcRouteMask.setDescription('Netmask of the route.')
ipbpvcRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: ipbpvcRouteNextHop.setDescription('Next hop IP address of the route.')
ipbpvcRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcRouteMetric.setStatus('current')
if mibBuilder.loadTexts: ipbpvcRouteMetric.setDescription('Metric of the route.')
ipbpvcRoutePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 5, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcRoutePriority.setStatus('current')
if mibBuilder.loadTexts: ipbpvcRoutePriority.setDescription('Priority of the route. Note that the default value of this object is 8, which means we keep the original priority of the packet(frame).')
ipbpvcRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipbpvcRouteRowStatus.setDescription('Row status of the table used to create/delete an entry.')
ipbpvcTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6), )
if mibBuilder.loadTexts: ipbpvcTable.setStatus('current')
if mibBuilder.loadTexts: ipbpvcTable.setDescription('This table includes ipbpvc configuration. This table is supported by R3.00 and later versions.')
ipbpvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "ipbpvcVpi"), (0, "E5-111-MIB", "ipbpvcVci"), (0, "E5-111-MIB", "ipbpvcPvid"))
if mibBuilder.loadTexts: ipbpvcEntry.setStatus('current')
if mibBuilder.loadTexts: ipbpvcEntry.setDescription('An entry of ipbpvcTable.')
ipbpvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcVpi.setStatus('current')
if mibBuilder.loadTexts: ipbpvcVpi.setDescription('VPI of the PVC.')
ipbpvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcVci.setStatus('current')
if mibBuilder.loadTexts: ipbpvcVci.setDescription('VCI of the PVC.')
ipbpvcPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcPvid.setStatus('current')
if mibBuilder.loadTexts: ipbpvcPvid.setDescription('PVID of the PVC.')
ipbpvcEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipoe", 1), ("reserved", 2), ("ipoa", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcEncap.setStatus('current')
if mibBuilder.loadTexts: ipbpvcEncap.setDescription('Type of the PVC.')
ipbpvcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcPriority.setStatus('current')
if mibBuilder.loadTexts: ipbpvcPriority.setDescription('Priority of the PVC.')
ipbpvcProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcProfile.setStatus('current')
if mibBuilder.loadTexts: ipbpvcProfile.setDescription('Profile of the PVC.')
ipbpvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipbpvcRowStatus.setDescription('Row status of the table used to create/delete an entry.')
ipbpvcProfileUS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6, 1, 8), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcProfileUS.setStatus('current')
if mibBuilder.loadTexts: ipbpvcProfileUS.setDescription('US Profile of the PVC.')
arpproxy = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8))
arpproxyAge = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpproxyAge.setStatus('current')
if mibBuilder.loadTexts: arpproxyAge.setDescription('Aging time of the ARP proxy. This object is supported by R3.00 and later versions.')
arpproxyFlush = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8, 2))
arpproxyFlushTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("edgerouter", 2), ("interface", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpproxyFlushTarget.setStatus('current')
if mibBuilder.loadTexts: arpproxyFlushTarget.setDescription('The target whose ARP table to be flushed. This object is supported by R3.00 and later versions.')
arpproxyFlushOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpproxyFlushOps.setStatus('current')
if mibBuilder.loadTexts: arpproxyFlushOps.setDescription('Set the object to 1 to start flushing. This object is supported by R3.00 and later versions.')
arpproxyFlushEdgeRouterIp = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpproxyFlushEdgeRouterIp.setStatus('current')
if mibBuilder.loadTexts: arpproxyFlushEdgeRouterIp.setDescription('Flush ARP table for the specified edge router. This object is supported by R3.00 and later versions.')
arpproxyFlushEdgeRouterVid = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8, 2, 4), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpproxyFlushEdgeRouterVid.setStatus('current')
if mibBuilder.loadTexts: arpproxyFlushEdgeRouterVid.setDescription('Flush ARP table for the specified edge router. This object is supported by R3.00 and later versions.')
arpproxyFlushInterfaceIp = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpproxyFlushInterfaceIp.setStatus('current')
if mibBuilder.loadTexts: arpproxyFlushInterfaceIp.setDescription('Flush ARP table for the specified interface. This object is supported by R3.00 and later versions.')
arpproxyFlushInterfaceMask = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpproxyFlushInterfaceMask.setStatus('current')
if mibBuilder.loadTexts: arpproxyFlushInterfaceMask.setDescription('Flush ARP table for the specified interface. This object is supported by R3.00 and later versions.')
arpproxyFlushInterfaceVid = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8, 2, 7), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpproxyFlushInterfaceVid.setStatus('current')
if mibBuilder.loadTexts: arpproxyFlushInterfaceVid.setDescription('Flush ARP table for the specified interface. This object is supported by R3.00 and later versions.')
dtpvcTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1), )
if mibBuilder.loadTexts: dtpvcTable.setStatus('current')
if mibBuilder.loadTexts: dtpvcTable.setDescription('This table includes Double Tagging (DT) PVC configuration.')
dtpvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "dtpvcVpi"), (0, "E5-111-MIB", "dtpvcVci"), (0, "E5-111-MIB", "dtpvcSvid"))
if mibBuilder.loadTexts: dtpvcEntry.setStatus('current')
if mibBuilder.loadTexts: dtpvcEntry.setDescription('An entry of dtpvcTable.')
dtpvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcVpi.setStatus('current')
if mibBuilder.loadTexts: dtpvcVpi.setDescription('VPI of the pvc.')
dtpvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcVci.setStatus('current')
if mibBuilder.loadTexts: dtpvcVci.setDescription('VCI of the pvc.')
dtpvcSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcSvid.setStatus('current')
if mibBuilder.loadTexts: dtpvcSvid.setDescription('s-tag VLAN ID of the pvc.')
dtpvcSpriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcSpriority.setStatus('current')
if mibBuilder.loadTexts: dtpvcSpriority.setDescription('s-tag priority of the pvc.')
dtpvcCvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 5), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcCvid.setStatus('current')
if mibBuilder.loadTexts: dtpvcCvid.setDescription('c-tag VLAN ID of the pvc.')
dtpvcCpriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcCpriority.setStatus('current')
if mibBuilder.loadTexts: dtpvcCpriority.setDescription('c-tag priority of the pvc.')
dtpvcDSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcDSProfile.setStatus('current')
if mibBuilder.loadTexts: dtpvcDSProfile.setDescription('The value of this object identifies the row in the atmProfileTable, which applies for this dtpvc in DS side.')
dtpvcUSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcUSProfile.setStatus('current')
if mibBuilder.loadTexts: dtpvcUSProfile.setDescription('The value of this object identifies the row in the atmProfileTable, which applies for this dtpvc in US side.')
dtpvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: dtpvcRowStatus.setDescription('This object is used to create a new row or delete an existing row in this table.')
dtpvcSuperChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcSuperChannel.setStatus('current')
if mibBuilder.loadTexts: dtpvcSuperChannel.setDescription('Specified the configured DTPVC is a super channel.')
dtpvcAcName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcAcName.setStatus('current')
if mibBuilder.loadTexts: dtpvcAcName.setDescription('Access concentrator name for paepvc.')
dtpvcServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcServiceName.setStatus('current')
if mibBuilder.loadTexts: dtpvcServiceName.setDescription('Service name for paepvc.')
dtpvcHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 13), Integer32()).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcHelloTime.setStatus('current')
if mibBuilder.loadTexts: dtpvcHelloTime.setDescription('The system will close the PVC if there are not any LCP echo messages passed through during the LCP hello time.')
dtpvcStateTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2), )
if mibBuilder.loadTexts: dtpvcStateTable.setStatus('current')
if mibBuilder.loadTexts: dtpvcStateTable.setDescription('This table show current DTPVC status.')
dtpvcStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "dtpvcStateVpi"), (0, "E5-111-MIB", "dtpvcStateVci"), (0, "E5-111-MIB", "dtpvcStateSvid"))
if mibBuilder.loadTexts: dtpvcStateEntry.setStatus('current')
if mibBuilder.loadTexts: dtpvcStateEntry.setDescription('An entry in dtpvcStateTable.')
dtpvcStateVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcStateVpi.setStatus('current')
if mibBuilder.loadTexts: dtpvcStateVpi.setDescription('VPI of the dtpvc.')
dtpvcStateVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcStateVci.setStatus('current')
if mibBuilder.loadTexts: dtpvcStateVci.setDescription('VCI of the dtpvc.')
dtpvcStateSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcStateSvid.setStatus('current')
if mibBuilder.loadTexts: dtpvcStateSvid.setDescription('Default S-VID of the dtpvc.')
dtpvcStateSPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcStateSPriority.setStatus('current')
if mibBuilder.loadTexts: dtpvcStateSPriority.setDescription('S-priority of the dtpvc.')
dtpvcStateCvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2, 1, 5), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcStateCvid.setStatus('current')
if mibBuilder.loadTexts: dtpvcStateCvid.setDescription('Default C-VID of the dtpvc.')
dtpvcStateCPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcStateCPriority.setStatus('current')
if mibBuilder.loadTexts: dtpvcStateCPriority.setDescription('C-priority of the dtpvc.')
dtpvcStateChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcStateChannelType.setStatus('current')
if mibBuilder.loadTexts: dtpvcStateChannelType.setDescription('The value of this object identifies the channel type at runtime.')
dtpvcStateEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcStateEncap.setStatus('current')
if mibBuilder.loadTexts: dtpvcStateEncap.setDescription('The value of this object identifies the channel encapsulation at runtime.')
gbondGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 51, 1), )
if mibBuilder.loadTexts: gbondGroupTable.setStatus('current')
if mibBuilder.loadTexts: gbondGroupTable.setDescription('A table containing the G.Bond configuration information for each bonding group of the device.')
gbondGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 51, 1, 1), ).setIndexNames((0, "E5-111-MIB", "gbondGroupName"))
if mibBuilder.loadTexts: gbondGroupEntry.setStatus('current')
if mibBuilder.loadTexts: gbondGroupEntry.setDescription('An entry of gbondTable.')
gbondGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 51, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gbondGroupName.setStatus('current')
if mibBuilder.loadTexts: gbondGroupName.setDescription('An administratively assigned string, which may be used to identify bonding group.')
gbondGroupPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 51, 1, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gbondGroupPorts.setStatus('current')
if mibBuilder.loadTexts: gbondGroupPorts.setDescription('The set of ports which are currently assigned to the bonding group of specified group name. Byte 1: Reserved(chassis) Byte 2~3: Reserved(slot) Byte 4: Reserved Byte 5~11:each octet specifies a set of eight ports, with the first octet specifying ports 1 through 8, etc.')
gbondGroupUpRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 51, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gbondGroupUpRate.setStatus('current')
if mibBuilder.loadTexts: gbondGroupUpRate.setDescription('The UP stream rate.')
gbondGroupDownRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 51, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gbondGroupDownRate.setStatus('current')
if mibBuilder.loadTexts: gbondGroupDownRate.setDescription('The DOWN stream rate.')
gbondGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 51, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gbondGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: gbondGroupRowStatus.setDescription('This object indicates the status of this entry.')
voipSipLineConfTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 1), )
if mibBuilder.loadTexts: voipSipLineConfTable.setStatus('current')
if mibBuilder.loadTexts: voipSipLineConfTable.setDescription('This table includes common attributes describing the VoIP line.')
voipSipLineConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: voipSipLineConfEntry.setStatus('current')
if mibBuilder.loadTexts: voipSipLineConfEntry.setDescription('An entry in voipSipLineConfTable.')
voipSipLineConfSipProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipSipLineConfSipProfile.setStatus('current')
if mibBuilder.loadTexts: voipSipLineConfSipProfile.setDescription('SIP profile name.')
voipSipLineConfSipCallSvcProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipSipLineConfSipCallSvcProfile.setStatus('current')
if mibBuilder.loadTexts: voipSipLineConfSipCallSvcProfile.setDescription('SIP call service profile name.')
voipSipLineConfDspProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipSipLineConfDspProfile.setStatus('current')
if mibBuilder.loadTexts: voipSipLineConfDspProfile.setDescription('DSP profile name.')
portOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 2))
voipPortTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipPortTarget.setStatus('current')
if mibBuilder.loadTexts: voipPortTarget.setDescription('The managed object is used for identify the target on which the port configuration should be performed. The target is encoded as: Byte 1: 0, Reserved(chaises) Byte 2~3: 0,0 Reserved(slot) Byte 4: 0, Reserved Byte 5~11:Each octet specifies a set of eight ports, with the first octet specifying ports 1 through 8, etc.')
voipPortOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipPortOps.setStatus('current')
if mibBuilder.loadTexts: voipPortOps.setDescription('The managed object is for VoIP configuration. When the EMS wants to issue the desired operation, the EMS shall send SNMP-SET message to set the corresponding bit value to be 1. The various bit positions are: BIT 1: enable port BIT 2: disable port')
voipPortEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipPortEnableStatus.setStatus('current')
if mibBuilder.loadTexts: voipPortEnableStatus.setDescription('This read only entry is for showing current voip enable/disable status of each port. The status is encoded as: Byte 1: 0, Reserved Byte 2~3: 0,0 Reserved Byte 4: 0, Reserved Byte 5~11:Each octet specifies a set of eight ports, with the first octet specifying ports 1 through 8, etc. ')
voipPortTelTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 3), )
if mibBuilder.loadTexts: voipPortTelTable.setStatus('current')
if mibBuilder.loadTexts: voipPortTelTable.setDescription('This table includes VoIP tel for the port.')
voipPortTelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: voipPortTelEntry.setStatus('current')
if mibBuilder.loadTexts: voipPortTelEntry.setDescription('An entry in voipPortTelTable.')
voipPortTel = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipPortTel.setStatus('current')
if mibBuilder.loadTexts: voipPortTel.setDescription("VoIP's telephone number of the specified port.")
voipH248LineConfTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 7), )
if mibBuilder.loadTexts: voipH248LineConfTable.setStatus('current')
if mibBuilder.loadTexts: voipH248LineConfTable.setDescription('This table includes common attributes describing the VoIP line.')
voipH248LineConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: voipH248LineConfEntry.setStatus('current')
if mibBuilder.loadTexts: voipH248LineConfEntry.setDescription('An entry in voipH248LineConfTable.')
voipH248LineConfMgName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 7, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipH248LineConfMgName.setStatus('current')
if mibBuilder.loadTexts: voipH248LineConfMgName.setDescription('MG name.')
voipH248LineConfDspProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 7, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipH248LineConfDspProfile.setStatus('current')
if mibBuilder.loadTexts: voipH248LineConfDspProfile.setDescription('DSP profile name.')
voipH248LineConfVBDProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 7, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipH248LineConfVBDProfile.setStatus('current')
if mibBuilder.loadTexts: voipH248LineConfVBDProfile.setDescription('DSP profile name for Voice Band Data (FAX or Modem) mode.')
voipPortH248TerminationTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 8), )
if mibBuilder.loadTexts: voipPortH248TerminationTable.setStatus('current')
if mibBuilder.loadTexts: voipPortH248TerminationTable.setDescription('This table includes Termination name.')
voipPortH248TerminationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: voipPortH248TerminationEntry.setStatus('current')
if mibBuilder.loadTexts: voipPortH248TerminationEntry.setDescription('An entry in voipPortH248TerminationTable.')
voipPortH248TermName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 8, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipPortH248TermName.setStatus('current')
if mibBuilder.loadTexts: voipPortH248TermName.setDescription('Termination name of MG.')
voipPortGainTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 6), )
if mibBuilder.loadTexts: voipPortGainTable.setStatus('current')
if mibBuilder.loadTexts: voipPortGainTable.setDescription('This table includes Port Gain.')
voipPortGainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: voipPortGainEntry.setStatus('current')
if mibBuilder.loadTexts: voipPortGainEntry.setDescription('An entry in voipPortGainTable.')
voipPortTXGain = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 6, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipPortTXGain.setStatus('current')
if mibBuilder.loadTexts: voipPortTXGain.setDescription('TX Gain of the port, -200~200 in unit of 0.1dB.')
voipPortRXGain = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipPortRXGain.setStatus('current')
if mibBuilder.loadTexts: voipPortRXGain.setDescription('RX Gain of the port, -200~200 in unit of 0.1dB.')
snrMgnTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1), )
if mibBuilder.loadTexts: snrMgnTable.setStatus('current')
if mibBuilder.loadTexts: snrMgnTable.setDescription('A table containing the per port SNR Margin configuration.')
snrMgnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: snrMgnEntry.setStatus('current')
if mibBuilder.loadTexts: snrMgnEntry.setDescription('An entry of snrMgnTable.')
snrMgnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("profile", 0), ("line", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnMode.setStatus('current')
if mibBuilder.loadTexts: snrMgnMode.setDescription('Configure DSL SNR margin configuration mode of the specified ports. Profile: the SNR margin configuration comes from DSL profile. Line: the SNR margin configuration comes from line configuration.')
snrMgnUcTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUcTarget.setStatus('current')
if mibBuilder.loadTexts: snrMgnUcTarget.setDescription('Configured Target Signal/Noise Margin. This is the Noise Margin the modem must achieve with a BER of 10-7 or better to successfully complete initialization.')
snrMgnUcMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUcMax.setStatus('current')
if mibBuilder.loadTexts: snrMgnUcMax.setDescription('Configured Maximum acceptable Signal/Noise Margin. If the Noise Margin is above this the modem should attempt to reduce its power output to optimize its operation.')
snrMgnUcMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUcMin.setStatus('current')
if mibBuilder.loadTexts: snrMgnUcMin.setDescription('Configured Minimum acceptable Signal/Noise Margin. If the noise margin falls below this level, the modem should attempt to increase its power output. If that is not possible the modem will attempt to re-initialize or shut down.')
snrMgnUcDownshift = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUcDownshift.setStatus('current')
if mibBuilder.loadTexts: snrMgnUcDownshift.setDescription("Configured Signal/Noise Margin for rate downshift. If the noise margin falls below this level, the modem should attempt to decrease its transmit rate. In the case that RADSL mode is not present, the value will be `0'.")
snrMgnUcUpshift = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUcUpshift.setStatus('current')
if mibBuilder.loadTexts: snrMgnUcUpshift.setDescription("Configured Signal/Noise Margin for rate upshift. If the noise margin rises above this level, the modem should attempt to increase its transmit rate. In the case that RADSL is not present, the value will be `0'.")
snrMgnUrTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUrTarget.setStatus('current')
if mibBuilder.loadTexts: snrMgnUrTarget.setDescription('Configured Target Signal/Noise Margin. This is the Noise Margin the modem must achieve with a BER of 10-7 or better to successfully complete initialization.')
snrMgnUrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUrMax.setStatus('current')
if mibBuilder.loadTexts: snrMgnUrMax.setDescription('Configured Maximum acceptable Signal/Noise Margin. If the Noise Margin is above this the modem should attempt to reduce its power output to optimize its operation.')
snrMgnUrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUrMin.setStatus('current')
if mibBuilder.loadTexts: snrMgnUrMin.setDescription('Configured Minimum acceptable Signal/Noise Margin. If the noise margin falls below this level, the modem should attempt to increase its power output. If that is not possible the modem will attempt to re-initialize or shut down.')
snrMgnUrDownshift = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUrDownshift.setStatus('current')
if mibBuilder.loadTexts: snrMgnUrDownshift.setDescription("Configured Signal/Noise Margin for rate downshift. If the noise margin falls below this level, the modem should attempt to decrease its transmit rate. In the case that RADSL mode is not present, the value will be `0'.")
snrMgnUrUpshift = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUrUpshift.setStatus('current')
if mibBuilder.loadTexts: snrMgnUrUpshift.setDescription("Configured Signal/Noise Margin for rate upshift. If the noise margin rises above this level, the modem should attempt to increase its transmit rate. In the case that RADSL is not present, the value will be `0'.")
dslRateTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1), )
if mibBuilder.loadTexts: dslRateTable.setStatus('current')
if mibBuilder.loadTexts: dslRateTable.setDescription('A table containing the per port DSL Rate configuration.')
dslRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dslRateEntry.setStatus('current')
if mibBuilder.loadTexts: dslRateEntry.setDescription('An entry of dslRateTable.')
dslRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("profile", 0), ("line", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslRateMode.setStatus('current')
if mibBuilder.loadTexts: dslRateMode.setDescription('Configure DSL Rate configuration mode of the specified ports. Profile: the DSL Rate configuration comes from DSL profile. Line: the DSL Rate configuration comes from line configuration.')
dslRateLatencyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interleave", 1), ("fast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslRateLatencyMode.setStatus('current')
if mibBuilder.loadTexts: dslRateLatencyMode.setDescription('The latency mode is fast or interleave')
dslRateXtucMaxInterleaveDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('milli-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslRateXtucMaxInterleaveDelay.setStatus('current')
if mibBuilder.loadTexts: dslRateXtucMaxInterleaveDelay.setDescription('Configured maximum Interleave Delay for this channel. Interleave delay applies only to the interleave channel and defines the mapping (relative spacing) between subsequent input bytes at the interleaver input and their placement in the bit stream at the interleaver output. Larger numbers provide greater separation between consecutive input bytes in the output bit stream allowing for improved impulse noise immunity at the expense of payload latency.')
dslRateXtucMaxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1, 1, 4), Unsigned32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslRateXtucMaxTxRate.setStatus('current')
if mibBuilder.loadTexts: dslRateXtucMaxTxRate.setDescription("Configured Maximum Transmit rate for `Fast' or `Interleave' channels, in bps.")
dslRateXtucMinTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1, 1, 5), Unsigned32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslRateXtucMinTxRate.setStatus('current')
if mibBuilder.loadTexts: dslRateXtucMinTxRate.setDescription("Configured Minimum Transmit rate for `Fast' or `Interleave' channels, in bps")
dslRateXturMaxInterleaveDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('milli-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslRateXturMaxInterleaveDelay.setStatus('current')
if mibBuilder.loadTexts: dslRateXturMaxInterleaveDelay.setDescription('Configured maximum Interleave Delay for this channel. Interleave delay applies only to the interleave channel and defines the mapping (relative spacing) between subsequent input bytes at the interleaver input and their placement in the bit stream at the interleaver output. Larger numbers provide greater separation between consecutive input bytes in the output bit stream allowing for improved impulse noise immunity at the expense of payload latency')
dslRateXturMaxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1, 1, 7), Unsigned32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslRateXturMaxTxRate.setStatus('current')
if mibBuilder.loadTexts: dslRateXturMaxTxRate.setDescription('Configured Target Signal/Noise Margin. This is the Noise Margin the modem must achieve with a BER of 10-7 or better to successfully complete initialization.')
dslRateXturMinTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1, 1, 8), Unsigned32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslRateXturMinTxRate.setStatus('current')
if mibBuilder.loadTexts: dslRateXturMinTxRate.setDescription("Configured Maximum Transmit rate for `Fast' or `Interleave' channels, in bps.")
voipProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7))
sipProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1))
maxNumOfSipProfiles = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfSipProfiles.setStatus('current')
if mibBuilder.loadTexts: maxNumOfSipProfiles.setDescription('The maximum number of SIP profiles supported by the system.')
sipProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2), )
if mibBuilder.loadTexts: sipProfileTable.setStatus('current')
if mibBuilder.loadTexts: sipProfileTable.setDescription('This table includes SIP protocol related configuration.')
sipProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1), ).setIndexNames((1, "E5-111-MIB", "sipProfileName"))
if mibBuilder.loadTexts: sipProfileEntry.setStatus('current')
if mibBuilder.loadTexts: sipProfileEntry.setDescription('An entry in sipProfileTable.')
sipProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipProfileName.setStatus('current')
if mibBuilder.loadTexts: sipProfileName.setDescription('This object is used by the SIP profile table in order to identify a row of this table.')
sipProfileSipSvr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileSipSvr.setStatus('current')
if mibBuilder.loadTexts: sipProfileSipSvr.setDescription('IP used for SIP registration or SIP domain name.')
sipProfileRegSvr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileRegSvr.setStatus('current')
if mibBuilder.loadTexts: sipProfileRegSvr.setDescription('Registration server IP or registration server domain name.')
sipProfileProxySvr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileProxySvr.setStatus('current')
if mibBuilder.loadTexts: sipProfileProxySvr.setDescription('Proxy server IP or proxy server doamin name.')
sipProfileSipPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileSipPort.setStatus('current')
if mibBuilder.loadTexts: sipProfileSipPort.setDescription('SIP UA port number.')
sipProfileRegSvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileRegSvrPort.setStatus('current')
if mibBuilder.loadTexts: sipProfileRegSvrPort.setDescription('Registration server port number.')
sipProfileProxySvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileProxySvrPort.setStatus('current')
if mibBuilder.loadTexts: sipProfileProxySvrPort.setDescription('Proxy server port number.')
sipProfileUriType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useSipUri", 1), ("useTelUri", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileUriType.setStatus('current')
if mibBuilder.loadTexts: sipProfileUriType.setDescription('')
sipProfilePbit = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfilePbit.setStatus('current')
if mibBuilder.loadTexts: sipProfilePbit.setDescription('802.1p bit for SIP and RTP packet.')
sipProfileDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileDscp.setStatus('current')
if mibBuilder.loadTexts: sipProfileDscp.setDescription('DSCP for SIP and RTP packet.')
sipProfileKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileKeepAlive.setStatus('current')
if mibBuilder.loadTexts: sipProfileKeepAlive.setDescription('')
sipProfileSe = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(90, 65535))).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileSe.setStatus('current')
if mibBuilder.loadTexts: sipProfileSe.setDescription('Session expiration time in seconds.')
sipProfilePrack = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfilePrack.setStatus('current')
if mibBuilder.loadTexts: sipProfilePrack.setDescription('')
sipProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: sipProfileRowStatus.setDescription('This object is used to create a new row or delete an existing row in the table.')
sipProfileRegExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(120, 2073600))).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileRegExpire.setStatus('current')
if mibBuilder.loadTexts: sipProfileRegExpire.setDescription('Registration expiration time in seconds.')
maxNumOfSipCallSvcProfiles = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfSipCallSvcProfiles.setStatus('current')
if mibBuilder.loadTexts: maxNumOfSipCallSvcProfiles.setDescription('The maximum number of SIP call service profiles supported by the system.')
sipCallSvcProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4), )
if mibBuilder.loadTexts: sipCallSvcProfileTable.setStatus('current')
if mibBuilder.loadTexts: sipCallSvcProfileTable.setDescription('This table includes SIP call service related configuration.')
sipCallSvcProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1), ).setIndexNames((1, "E5-111-MIB", "sipCallSvcProfileName"))
if mibBuilder.loadTexts: sipCallSvcProfileEntry.setStatus('current')
if mibBuilder.loadTexts: sipCallSvcProfileEntry.setDescription('An entry in sipCallSvcProfileTable.')
sipCallSvcProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipCallSvcProfileName.setStatus('current')
if mibBuilder.loadTexts: sipCallSvcProfileName.setDescription('This object is used by the SIP call service profile table in order to identify a row of this table.')
sipCallSvcProfilePasswdOn = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfilePasswdOn.setStatus('current')
if mibBuilder.loadTexts: sipCallSvcProfilePasswdOn.setDescription('Password is necessary or not for SIP registration.')
sipCallSvcProfilePasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfilePasswd.setStatus('current')
if mibBuilder.loadTexts: sipCallSvcProfilePasswd.setDescription('SIP registration password.')
sipCallSvcProfileNumberPlanOn = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileNumberPlanOn.setStatus('current')
if mibBuilder.loadTexts: sipCallSvcProfileNumberPlanOn.setDescription('')
sipCallSvcProfileNumberPlanCc = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileNumberPlanCc.setStatus('current')
if mibBuilder.loadTexts: sipCallSvcProfileNumberPlanCc.setDescription('Country code, only digit 0..9 are allowed.')
sipCallSvcProfileNumberPlanNdc = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileNumberPlanNdc.setStatus('current')
if mibBuilder.loadTexts: sipCallSvcProfileNumberPlanNdc.setDescription('National destination code, only digit 0..9 are allowed.')
sipCallSvcProfileNumberPlanTable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 7), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileNumberPlanTable.setStatus('current')
if mibBuilder.loadTexts: sipCallSvcProfileNumberPlanTable.setDescription('Numbering plan table name.')
sipCallSvcProfileStateMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileStateMask.setStatus('current')
if mibBuilder.loadTexts: sipCallSvcProfileStateMask.setDescription('Bit 1 callforward : call forward(Not supported) Bit 2 callhold : call hold Bit 3 callwait : call waiting Bit 4 callreturn : call return(Not supported) Bit 5 calltransfer : call transfer Bit 6 clip : caller line identification presentation (Caller ID) Bit 7 clir : caller line identification restriction Bit 8 dnd : do not disturb Bit 9 conference : native 3-way conference')
sipCallSvcProfileDtmf = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bypass", 1), ("rfc2833", 2), ("rfc2833like", 3), ("sipinfo", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileDtmf.setStatus('current')
if mibBuilder.loadTexts: sipCallSvcProfileDtmf.setDescription('dtmf bypass : bypass DTMF tone dtmf rfc2833 : DTMF tone relay according to RFC2833 dtmf rfc2833like : DTMF tone relay by SIP INFO message, but RFC2833 payload dtmf sipinfo : DTMF tone relay by SIP INFO message')
sipCallSvcProfileFax = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("g711", 1), ("t38", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileFax.setStatus('current')
if mibBuilder.loadTexts: sipCallSvcProfileFax.setDescription('fax g711 : FAX service pass through by ITU-T G.711 fax t38 : FAX service by ITU-T T.38')
sipCallSvcProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: sipCallSvcProfileRowStatus.setDescription('This object is used to create a new row or delete an existing row in the table.')
sipCallSvcProfileFlashType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("invite", 1), ("rfc2833", 2), ("rfc2833like", 3), ("sipinfo-1", 4), ("sipinfo-2", 5), ("sipinfo-3", 6), ("sipinfo-4", 7), ("sipinfo-5", 8), ("sipinfo-6", 9), ("bypass", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileFlashType.setStatus('current')
if mibBuilder.loadTexts: sipCallSvcProfileFlashType.setDescription("flash invite : will send SIP INVITE message while press flash button. flash bypass : flash event will be handled by current switch type specified in sipCallSvcProfileSwitchType. flash rfc2833 : flash event will send by RTP event (16) defined in RFC 2833. flash rfc2833like : flash event will send by SIP INFO message but RTP payload. flash sipinfo-1 : flash event will be sent by SIP INFO signal=16 message. flash sipinfo-2 : flash event will be sent by SIP INFO signal=hf message. flash sipinfo-3 : flash event will be sent by SIP INFO signal=hook-flash message. flash sipinfo-4 : flash event will be sent by SIP INFO plain text 'FLASH' message. flash sipinfo-5 : flash event will be sent by multiple SIP INFO signal messages and content of signal messages come from sipCallSvcProfileFlashInfo. flash sipinfo-6 : flash event will be sent by SIP INFO and payload is specified in sipCallSvcProfileFlashInfo.")
sipCallSvcProfileFlashInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 13), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileFlashInfo.setStatus('current')
if mibBuilder.loadTexts: sipCallSvcProfileFlashInfo.setDescription('Strings carried in SIP INFO when specified in sipCallSvcProfileFlashType is sipinfo-5 and sipinfo-6.')
sipCallSvcProfileSoftSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("metaswitch", 1), ("nortel", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileSoftSwitchType.setStatus('current')
if mibBuilder.loadTexts: sipCallSvcProfileSoftSwitchType.setDescription("Softswitch type is configured to specify softswitch-dependent behavior, currently only flash event is softswitch-dependent and should follow the softswitch type setting. When configured the flash event to 'bypass', E5 will follow the softswitch type setting to report hook flash event.")
maxNumOfDspProfiles = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfDspProfiles.setStatus('current')
if mibBuilder.loadTexts: maxNumOfDspProfiles.setDescription('The maximum number of DSP profiles supported by the system.')
dspProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3), )
if mibBuilder.loadTexts: dspProfileTable.setStatus('current')
if mibBuilder.loadTexts: dspProfileTable.setDescription('This table includes DSP related configuration.')
dspProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1), ).setIndexNames((1, "E5-111-MIB", "dspProfileName"))
if mibBuilder.loadTexts: dspProfileEntry.setStatus('current')
if mibBuilder.loadTexts: dspProfileEntry.setDescription('An entry in dspProfileTable.')
dspProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspProfileName.setStatus('current')
if mibBuilder.loadTexts: dspProfileName.setDescription('This object is used by the DSP profile table in order to identify a row of this table.')
dspProfileCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspProfileCodec.setStatus('current')
if mibBuilder.loadTexts: dspProfileCodec.setDescription('0x01: g711a 0x02: g711mu 0x03: g723 0x04: g726-16 0x05: g726-24 0x06: g726-32 0x07: g726-40 0x08: g729ab the value of dspProfileCodec is OCTET STRING, there are 8 Octets, each octect is specified as 0x01, 0x03, 0x02, 0x07,0x00, 0x00, 0x00, 0x00 (to specify different CODE in priority) specify as: g711a, g723, g711mu, g726-40 ')
dspProfilePlayBufferMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 500))).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspProfilePlayBufferMinDelay.setStatus('current')
if mibBuilder.loadTexts: dspProfilePlayBufferMinDelay.setDescription('Play buffer minimum delay in milliseconds. It should be less than or equal to dspProfilePlayBufferMaxDelay.')
dspProfilePlayBufferMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 500))).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspProfilePlayBufferMaxDelay.setStatus('current')
if mibBuilder.loadTexts: dspProfilePlayBufferMaxDelay.setDescription('Play buffer maximum delay in milliseconds. It should be greater than or equal to dspProfilePlayBufferMinDelay.')
dspProfileEchoTail = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("echotail8", 1), ("echotail16", 2), ("echotail32", 3), ("echotail128", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspProfileEchoTail.setStatus('current')
if mibBuilder.loadTexts: dspProfileEchoTail.setDescription('Echo cancellation echo tail period in milliseconds.')
dspProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: dspProfileRowStatus.setDescription('This object is used to create a new row or delete an existing row in the table.')
dspProfileG711Vpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("g711x10ms", 1), ("g711x20ms", 2), ("g711x30ms", 3), ("g711x40ms", 4)))).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspProfileG711Vpi.setStatus('current')
if mibBuilder.loadTexts: dspProfileG711Vpi.setDescription('Voice Packetization Interval(VPI) of codec G.711 in milliseconds. The values are 10, 20, 30, 40')
dspProfileG723Vpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("g723x30ms", 1), ("g723x60ms", 2)))).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspProfileG723Vpi.setStatus('current')
if mibBuilder.loadTexts: dspProfileG723Vpi.setDescription('Voice Packetization Interval(VPI) of G.723 codec in milliseconds. The values are 30,60')
dspProfileG726Vpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("g726x10ms", 1), ("g726x20ms", 2), ("g726x30ms", 3), ("g726x40ms", 4)))).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspProfileG726Vpi.setStatus('current')
if mibBuilder.loadTexts: dspProfileG726Vpi.setDescription('Voice Packetization Interval(VPI) of G.726 codec in milliseconds. The values are 10, 20, 30, 40')
dspProfileG729Vpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("g729x10ms", 1), ("g729x20ms", 2), ("g729x30ms", 3), ("g729x40ms", 4), ("g729x50ms", 5), ("g729x60ms", 6)))).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspProfileG729Vpi.setStatus('current')
if mibBuilder.loadTexts: dspProfileG729Vpi.setDescription('Voice Packetization Interval(VPI) of G.729 codec in milliseconds. The values are 10, 20, 30, 40, 50, 60')
h248Profile = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4))
maxNumOfH248Profiles = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfH248Profiles.setStatus('current')
if mibBuilder.loadTexts: maxNumOfH248Profiles.setDescription('The maximum number of H248 profiles supported by the system.')
h248ProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2), )
if mibBuilder.loadTexts: h248ProfileTable.setStatus('current')
if mibBuilder.loadTexts: h248ProfileTable.setDescription('This table includes H248 profile related configuration.')
h248ProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1), ).setIndexNames((1, "E5-111-MIB", "h248ProfileName"))
if mibBuilder.loadTexts: h248ProfileEntry.setStatus('current')
if mibBuilder.loadTexts: h248ProfileEntry.setDescription('An entry in h248ProfileTable.')
h248ProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h248ProfileName.setStatus('current')
if mibBuilder.loadTexts: h248ProfileName.setDescription('This object is used by the H248 profile table in order to identify a row of this table.')
h248ProfileMgcSvr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileMgcSvr.setStatus('current')
if mibBuilder.loadTexts: h248ProfileMgcSvr.setDescription('MGC IP or MGC doamin name.')
h248ProfileMgcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileMgcPort.setStatus('current')
if mibBuilder.loadTexts: h248ProfileMgcPort.setDescription('MGC port number.')
h248ProfileMgc2On = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileMgc2On.setStatus('current')
if mibBuilder.loadTexts: h248ProfileMgc2On.setDescription('Secondary MGC on/off.')
h248ProfileMgc2Svr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileMgc2Svr.setStatus('current')
if mibBuilder.loadTexts: h248ProfileMgc2Svr.setDescription('Secondary MGC IP or MGC doamin name. h248ProfileMgc2On needs to turn on if user want to set Secondary MGC IP or domain name.')
h248ProfileMgc2Port = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileMgc2Port.setStatus('current')
if mibBuilder.loadTexts: h248ProfileMgc2Port.setDescription('Secondary MGC port number. h248ProfileMgc2On needs to turn on if user want to set Secondary MGC port number.')
h248ProfileTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("udp", 1), ("tcp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileTransport.setStatus('current')
if mibBuilder.loadTexts: h248ProfileTransport.setDescription('Transport procotol used by the H.248 protocol stack.')
h248ProfileEncode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("longtext", 1), ("shorttext", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileEncode.setStatus('current')
if mibBuilder.loadTexts: h248ProfileEncode.setDescription('Encoding type used by the H.248 protocol stack')
h248ProfilePbit = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfilePbit.setStatus('current')
if mibBuilder.loadTexts: h248ProfilePbit.setDescription('802.1p bit for H.248 packet.')
h248ProfileDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileDscp.setStatus('current')
if mibBuilder.loadTexts: h248ProfileDscp.setDescription('DSCP for H.248 packet.')
h248ProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: h248ProfileRowStatus.setDescription('This object is used to create a new row or delete an existing row in the table.')
h248ProfileVbd = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileVbd.setStatus('current')
if mibBuilder.loadTexts: h248ProfileVbd.setDescription('VBD mode support on/off')
h248ProfileEphemeralPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileEphemeralPrefix.setStatus('current')
if mibBuilder.loadTexts: h248ProfileEphemeralPrefix.setDescription('Ephemeral Termination Prefix')
h248ProfileSoftswitch = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("metaswitch", 1), ("nortelCs1500", 2), ("nortelCs2000", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileSoftswitch.setStatus('current')
if mibBuilder.loadTexts: h248ProfileSoftswitch.setDescription('Softswitch type')
h248ProfileForceVer = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileForceVer.setStatus('current')
if mibBuilder.loadTexts: h248ProfileForceVer.setDescription('Force using H.248 version 1')
h248ProfileStartRTPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 64000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileStartRTPPort.setStatus('current')
if mibBuilder.loadTexts: h248ProfileStartRTPPort.setDescription('Start of RTP port number.')
h248ProfileEndRTPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5000, 65000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileEndRTPPort.setStatus('current')
if mibBuilder.loadTexts: h248ProfileEndRTPPort.setDescription('End of RTP port number.')
h248ProfileEphemeralStartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 19), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileEphemeralStartNumber.setStatus('current')
if mibBuilder.loadTexts: h248ProfileEphemeralStartNumber.setDescription('Ephemeral termination suffix start number, up to 15 digits.')
h248ProfileEphemeralSuffixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileEphemeralSuffixLength.setStatus('current')
if mibBuilder.loadTexts: h248ProfileEphemeralSuffixLength.setDescription('Ephemeral termination suffix number length , padding zero at the front if not long enough.')
h248ProfilePhysicalPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfilePhysicalPrefix.setStatus('current')
if mibBuilder.loadTexts: h248ProfilePhysicalPrefix.setDescription('Physical Termination Prefix.')
h248ProfilePhysicalStartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 22), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfilePhysicalStartNumber.setStatus('current')
if mibBuilder.loadTexts: h248ProfilePhysicalStartNumber.setDescription('Physical termination suffix start number, up to 15 digits.')
h248ProfilePhysicalSuffixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfilePhysicalSuffixLength.setStatus('current')
if mibBuilder.loadTexts: h248ProfilePhysicalSuffixLength.setDescription('Physical termination suffix number length , padding zero at the front if not long enough.')
dscp = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 10))
vlanIsolation = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 12))
enetMtu = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 13))
dhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51))
macfilter = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53))
dhcpSnoop = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55))
acl = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56))
pppoeAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 57))
macff = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60))
dscpMappingTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 10, 1), )
if mibBuilder.loadTexts: dscpMappingTable.setStatus('current')
if mibBuilder.loadTexts: dscpMappingTable.setDescription('The table contains DSCP mapping configuration for the adsl and ethernet ports.')
dscpMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 10, 1, 1), ).setIndexNames((0, "E5-111-MIB", "dscpSrcCodePoint"))
if mibBuilder.loadTexts: dscpMappingEntry.setStatus('current')
if mibBuilder.loadTexts: dscpMappingEntry.setDescription('An entry of dscpMappingTable.')
dscpSrcCodePoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dscpSrcCodePoint.setStatus('current')
if mibBuilder.loadTexts: dscpSrcCodePoint.setDescription('The DSCP source code point used for mapping.')
dscpMapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dscpMapPriority.setStatus('current')
if mibBuilder.loadTexts: dscpMapPriority.setDescription('The mapping p bits that will replace the source p bits in the incoming packet.')
dscpPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 10, 2), )
if mibBuilder.loadTexts: dscpPortTable.setStatus('current')
if mibBuilder.loadTexts: dscpPortTable.setDescription('The table contains DSCP mapping configuration for the adsl and ethernet ports.')
dscpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 10, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dscpPortEntry.setStatus('current')
if mibBuilder.loadTexts: dscpPortEntry.setDescription('An entry of dscpPortTable.')
dscpStatusEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dscpStatusEnable.setStatus('current')
if mibBuilder.loadTexts: dscpStatusEnable.setDescription('The DSCP port status.')
vlanIsolationTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 12, 1), )
if mibBuilder.loadTexts: vlanIsolationTable.setStatus('current')
if mibBuilder.loadTexts: vlanIsolationTable.setDescription('A table contains configuration of isolated VLAN.')
vlanIsolationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 12, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanIsolationEntry.setStatus('current')
if mibBuilder.loadTexts: vlanIsolationEntry.setDescription('An entry of vlanIsolationTable.')
vlanIsolationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 12, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanIsolationRowStatus.setStatus('current')
if mibBuilder.loadTexts: vlanIsolationRowStatus.setDescription('Row status of the table used to create/delete an entry.')
enetMtuEntry = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enetMtuEntry.setStatus('current')
if mibBuilder.loadTexts: enetMtuEntry.setDescription('Sets the MTU size for layer 2 frame, size from 1526 to 1532, default value is 1526.')
dhcpRelay82Table = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2), )
if mibBuilder.loadTexts: dhcpRelay82Table.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82Table.setDescription('A table that contains DHCP Relay configuration.')
dhcpRelay82Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: dhcpRelay82Entry.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82Entry.setDescription('The entry of DHCP Relay table.')
dhcpRelay82PrimaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelay82PrimaryServer.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82PrimaryServer.setDescription('The IP address of the DHCP Relay primary server.')
dhcpRelay82SecondaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelay82SecondaryServer.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82SecondaryServer.setDescription('The IP address of the DHCP Relay secondary server.')
dhcpRelay82ActiveServer = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("third", 3), ("fourth", 4), ("fifth", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelay82ActiveServer.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82ActiveServer.setDescription('The current active DHCP Relay server.')
dhcpRelay82Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelay82Enable.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82Enable.setDescription('Enable/disable DHCP relay and Option82 function.')
dhcpRelay82Info = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelay82Info.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82Info.setDescription('User specific Option82 information.')
dhcpRelay82RelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("all", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelay82RelayMode.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82RelayMode.setDescription('DHCP relay mode.')
dhcpRelay82Suboption2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelay82Suboption2Enable.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82Suboption2Enable.setDescription('Enable/disable Option 82 sub-option 2.')
dhcpRelay82Suboption2Info = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelay82Suboption2Info.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82Suboption2Info.setDescription('User specified information for Option 82 sub-option 2.')
dhcpRelay82EntryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("all", 2), ("disable", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelay82EntryEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82EntryEnable.setDescription('Enable/disable DHCP Relay')
dhcpRelay82EntryOptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("private", 1), ("tr101", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelay82EntryOptionMode.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82EntryOptionMode.setDescription('Option82 format.')
dhcpRelay82VlanIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelay82VlanIp.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82VlanIp.setDescription('The IP address of the DHCP Relay interface for this VLAN.')
dhcpRelay82VlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelay82VlanMask.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82VlanMask.setDescription('The network mask of the DHCP Relay interface for this VLAN.')
dhcpRelay82VlanGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelay82VlanGateway.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82VlanGateway.setDescription('The gateway of the DHCP Relay interface for this VLAN.')
dhcpRelay82ThirdServer = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelay82ThirdServer.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82ThirdServer.setDescription('The IP address of the DHCP Relay third server.')
dhcpRelay82FourthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelay82FourthServer.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82FourthServer.setDescription('The IP address of the DHCP Relay fourth server.')
dhcpRelay82FifthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelay82FifthServer.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82FifthServer.setDescription('The IP address of the DHCP Relay fifth server.')
dhcpRelay82ServerVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelay82ServerVid.setStatus('current')
if mibBuilder.loadTexts: dhcpRelay82ServerVid.setDescription('The VID of the DHCP Relay server for this VLAN.')
dhcpRelayTest = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 8))
dhcpRelayTestVid = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayTestVid.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayTestVid.setDescription('Setting the VID of the test server.')
dhcpRelayTestIp = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayTestIp.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayTestIp.setDescription('Setting the IP of the test server.')
dhcpRelayTestOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayTestOps.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayTestOps.setDescription('Set the object to 1 to test DHCP server.')
dhcpRelayTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 8, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayTestStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayTestStatus.setDescription('Display testing server status.')
dhcpRelayArp = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 9))
dhcpRelayArpShowTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 9, 1), )
if mibBuilder.loadTexts: dhcpRelayArpShowTable.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayArpShowTable.setDescription('The table displays DHCP ARP.')
dhcpRelayArpShowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 9, 1, 1), ).setIndexNames((0, "E5-111-MIB", "dhcpRelayArpShowVid"), (0, "E5-111-MIB", "dhcpRelayArpShowIp"))
if mibBuilder.loadTexts: dhcpRelayArpShowEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayArpShowEntry.setDescription('An entry of dhcpRelayArpShowTable.')
dhcpRelayArpShowVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayArpShowVid.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayArpShowVid.setDescription('Display the VID of the DHCP ARP entry.')
dhcpRelayArpShowIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 9, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayArpShowIp.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayArpShowIp.setDescription('Display the IP of the DHCP ARP entry.')
dhcpRelayArpShowMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 9, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayArpShowMac.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayArpShowMac.setDescription('Display the MAC of the DHCP ARP entry.')
dhcpRelayArpFlushOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayArpFlushOps.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayArpFlushOps.setDescription('Set the object to 1 to start flushing.')
macFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 1), )
if mibBuilder.loadTexts: macFilterPortTable.setStatus('current')
if mibBuilder.loadTexts: macFilterPortTable.setDescription('This table includes the status of mac filtering for each port.')
macFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: macFilterPortEntry.setStatus('current')
if mibBuilder.loadTexts: macFilterPortEntry.setDescription('An entry in macFilterPortTable.')
macFilterPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("enableMacFilter", 1), ("enableMacCount", 2), ("disable", 4), ("enableMacFilterAndMacCount", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilterPortEnable.setStatus('current')
if mibBuilder.loadTexts: macFilterPortEnable.setDescription('Enable/disable MAC filtering for the port.')
macFilterPortMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilterPortMacCount.setStatus('current')
if mibBuilder.loadTexts: macFilterPortMacCount.setDescription('The total number of MAC addresses allowed for the port.')
macFilterPortFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilterPortFilterMode.setStatus('current')
if mibBuilder.loadTexts: macFilterPortFilterMode.setDescription('The mac filter mode (accept or deny) for the port.')
maxNumOfMacFiltersInSystem = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfMacFiltersInSystem.setStatus('current')
if mibBuilder.loadTexts: maxNumOfMacFiltersInSystem.setDescription('The max number of mac filters supported in the system.')
maxNumOfMacFiltersPerPort = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfMacFiltersPerPort.setStatus('current')
if mibBuilder.loadTexts: maxNumOfMacFiltersPerPort.setDescription('The max number of mac filters supported per port.')
currNumOfMacFiltersInSystem = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currNumOfMacFiltersInSystem.setStatus('current')
if mibBuilder.loadTexts: currNumOfMacFiltersInSystem.setDescription('The current number of mac filters in the system.')
macFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 5), )
if mibBuilder.loadTexts: macFilterTable.setStatus('current')
if mibBuilder.loadTexts: macFilterTable.setDescription('A table that contains the mac filter addresses.')
macFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "macFilterAddr"))
if mibBuilder.loadTexts: macFilterEntry.setStatus('current')
if mibBuilder.loadTexts: macFilterEntry.setDescription('The entry of macFilterTable.')
macFilterAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 5, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFilterAddr.setStatus('current')
if mibBuilder.loadTexts: macFilterAddr.setDescription('The mac address which can pass through or be rejected from the port.')
macFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: macFilterRowStatus.setDescription('The row status of the entry.')
macfilterBatchSet = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 6))
macfilterTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 6, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macfilterTarget.setStatus('current')
if mibBuilder.loadTexts: macfilterTarget.setDescription('This managed object is used for identify the target on which the port configuration should be performed. The target is encoded as: Byte 1: 0, Reserved(chassis) Byte 2~3: 0, Reserved(slot) Byte 4: 0, reserved Byte 5~11:each octet specifies a set of eight ports, with the first octet specifying ports 1 through 8, etc.')
macfilterOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macfilterOps.setStatus('current')
if mibBuilder.loadTexts: macfilterOps.setDescription('The corresponding bit is set to 1 to start the operation. The various bit positions are: BIT 1: enable mac filter BIT 2: enable mac count filter BIT 3: disable mac filter BIT 4: set mac count BIT 5: disable mac count filter.')
macFilterMacCountForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilterMacCountForBatchSet.setStatus('current')
if mibBuilder.loadTexts: macFilterMacCountForBatchSet.setDescription('The total number of MAC addresses allowed for a port.')
ouiFilterTableOld = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 7), )
if mibBuilder.loadTexts: ouiFilterTableOld.setStatus('current')
if mibBuilder.loadTexts: ouiFilterTableOld.setDescription('A table that contains the OUI filter addresses.')
ouiFilterEntryOld = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "ouiFilterAddrOld"))
if mibBuilder.loadTexts: ouiFilterEntryOld.setStatus('current')
if mibBuilder.loadTexts: ouiFilterEntryOld.setDescription('The entry of ouiFilterTableOld.')
ouiFilterAddrOld = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 7, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ouiFilterAddrOld.setStatus('current')
if mibBuilder.loadTexts: ouiFilterAddrOld.setDescription('The first three bytes of the mac address which can pass through or be rejected from the port.')
ouiFilterRowStatusOld = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ouiFilterRowStatusOld.setStatus('current')
if mibBuilder.loadTexts: ouiFilterRowStatusOld.setDescription('The row status of the entry.')
maxNumOfOuiFiltersPerPort = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfOuiFiltersPerPort.setStatus('current')
if mibBuilder.loadTexts: maxNumOfOuiFiltersPerPort.setDescription('The max number of OUI filters supported per port.')
ouiFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 9), )
if mibBuilder.loadTexts: ouiFilterPortTable.setStatus('current')
if mibBuilder.loadTexts: ouiFilterPortTable.setDescription('This table includes the status of oui filtering for each port.')
ouiFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ouiFilterPortEntry.setStatus('current')
if mibBuilder.loadTexts: ouiFilterPortEntry.setDescription('An entry in macFilterPortTable.')
ouiFilterPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableOuiFilter", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ouiFilterPortEnable.setStatus('current')
if mibBuilder.loadTexts: ouiFilterPortEnable.setDescription('Enable/disable oui filtering for the port.')
ouiFilterPortFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ouiFilterPortFilterMode.setStatus('current')
if mibBuilder.loadTexts: ouiFilterPortFilterMode.setDescription('The oui filter mode (accept or deny) for the port.')
maxNumOfOuiFiltersInSystem = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfOuiFiltersInSystem.setStatus('current')
if mibBuilder.loadTexts: maxNumOfOuiFiltersInSystem.setDescription('The max number of OUI filters supported in system.')
maxNumOfOuiFiltersPerVlan = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfOuiFiltersPerVlan.setStatus('current')
if mibBuilder.loadTexts: maxNumOfOuiFiltersPerVlan.setDescription('The max number of OUI filters supported per vlan.')
ouiFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 12), )
if mibBuilder.loadTexts: ouiFilterTable.setStatus('current')
if mibBuilder.loadTexts: ouiFilterTable.setDescription('A table that contains the OUI filter addresses.')
ouiFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 12, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "E5-111-MIB", "ouiFilterAddr"))
if mibBuilder.loadTexts: ouiFilterEntry.setStatus('current')
if mibBuilder.loadTexts: ouiFilterEntry.setDescription('The entry of ouiFilterTable.')
ouiFilterAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 12, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ouiFilterAddr.setStatus('current')
if mibBuilder.loadTexts: ouiFilterAddr.setDescription('The first three bytes of the mac address which can pass through or be rejected from the vlan.')
ouiFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ouiFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: ouiFilterRowStatus.setDescription('The row status of the entry.')
ouiFilterVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 13), )
if mibBuilder.loadTexts: ouiFilterVlanTable.setStatus('current')
if mibBuilder.loadTexts: ouiFilterVlanTable.setDescription('This table includes the status of oui filtering for each configured VLAN.')
ouiFilterVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 13, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: ouiFilterVlanEntry.setStatus('current')
if mibBuilder.loadTexts: ouiFilterVlanEntry.setDescription('An entry in ouiFilterVlanTable.')
ouiFilterVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableOuiFilter", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ouiFilterVlanEnable.setStatus('current')
if mibBuilder.loadTexts: ouiFilterVlanEnable.setDescription('Enable/disable oui filtering for the VLAN.')
ouiFilterVlanFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ouiFilterVlanFilterMode.setStatus('current')
if mibBuilder.loadTexts: ouiFilterVlanFilterMode.setDescription('The oui filter mode (accept or deny) for the VLAN.')
dhcpSnoopPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 1), )
if mibBuilder.loadTexts: dhcpSnoopPortTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopPortTable.setDescription('This table includes DHCP snooping enable/disable for each port.')
dhcpSnoopPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dhcpSnoopPortEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopPortEntry.setDescription('An entry of dhcpSnoopPortTable.')
dhcpSnoopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopEnable.setDescription('Enable/disable DHCP snooping for a port.')
dhcpSnoopMaxcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopMaxcnt.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopMaxcnt.setDescription('Set the max entries of the DHCP ARP table.')
dhcpSnoopSmacverifyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopSmacverifyEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopSmacverifyEnable.setDescription('Enable/disable DHCP source MAC verify for a port.')
dhcpSnoopTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopTarget.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopTarget.setDescription('This managed object is used for identify the target on which the operation should be performed. The target is encoded as: Byte 1: the octet specifies a set of eight chassis, chassis 0 through 7 Byte 2~3: each octet specifies a set of eight slots, with the first octet specifying slots 1 through 8 and the second octet specifying slots 9 through 16. Byte 4: reserved Byte 5~11:each octet specifies a set of eight ports, with the first octet specifying ports 1 through 8, etc.')
dhcpSnoopOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopOps.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopOps.setDescription('The corresponding bit is set to 1 to start the operation. The various bit positions are: BIT 1: DHCP snooping table flush.')
dhcpStaticTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 4), )
if mibBuilder.loadTexts: dhcpStaticTable.setStatus('current')
if mibBuilder.loadTexts: dhcpStaticTable.setDescription('This table defines DHCP static IP addresses.')
dhcpStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "dhcpStaticIpAddr"))
if mibBuilder.loadTexts: dhcpStaticEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpStaticEntry.setDescription('An entry of dhcpStaticTable.')
dhcpStaticIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStaticIpAddr.setStatus('current')
if mibBuilder.loadTexts: dhcpStaticIpAddr.setDescription('The IP address which can pass through the port.')
dhcpStaticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpStaticRowStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpStaticRowStatus.setDescription('Row status of the table entry.')
maxNumOfDhcpStaticIp = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfDhcpStaticIp.setStatus('current')
if mibBuilder.loadTexts: maxNumOfDhcpStaticIp.setDescription('The maximum number of DHCP static IP addresses which can be created for a port.')
dhcpSnoopMaxcntMode = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopMaxcntMode.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopMaxcntMode.setDescription('When DHCP snooping table is full, new DHCP lease will replace first one in option 0 or will be dropped in option 1.')
aclSetTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 1), )
if mibBuilder.loadTexts: aclSetTable.setStatus('current')
if mibBuilder.loadTexts: aclSetTable.setDescription('aclsetTable.')
aclSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "aclSetVpi"), (0, "E5-111-MIB", "aclSetVci"), (0, "E5-111-MIB", "aclSetProfileName"))
if mibBuilder.loadTexts: aclSetEntry.setStatus('current')
if mibBuilder.loadTexts: aclSetEntry.setDescription('An entry of aclSetTable.')
aclSetVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclSetVpi.setStatus('current')
if mibBuilder.loadTexts: aclSetVpi.setDescription('VPI value')
aclSetVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclSetVci.setStatus('current')
if mibBuilder.loadTexts: aclSetVci.setDescription('VCI value')
aclSetProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclSetProfileName.setStatus('current')
if mibBuilder.loadTexts: aclSetProfileName.setDescription('ACL Profile name')
aclSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclSetRowStatus.setStatus('current')
if mibBuilder.loadTexts: aclSetRowStatus.setDescription('RowStatus of aclSetEntry')
aclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2), )
if mibBuilder.loadTexts: aclProfileTable.setStatus('current')
if mibBuilder.loadTexts: aclProfileTable.setDescription('aclProfileTable.')
aclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1), ).setIndexNames((0, "E5-111-MIB", "aclProfileRuleName"))
if mibBuilder.loadTexts: aclProfileEntry.setStatus('current')
if mibBuilder.loadTexts: aclProfileEntry.setDescription('An entry of aclProfileTable.')
aclProfileRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileRuleName.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleName.setDescription('Profile rule name')
aclProfileRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleNumber.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleNumber.setDescription('The managed object is for acl profile rule configuration. etype <etype> vlan <vid> (1), etype <etype> smac <mac> (2), etype <etype> dmac <mac> (3), vlan <vid> smac <mac> (4), vlan <vid> dmac <mac> (5), smac <mac> dmac <mac> (6), vlan <vid> priority <priority> (7), etype <etype> (8), vlan <vid> (9), smac <mac> (10), dmac <mac> (11), priority <priority> (12), protocol <protocol> (13), {srcip <ip>/<mask>{|dstip <ip>/<mask>{|tos <stos> <etos>{|srcport <sport> <eport> {|dstport <sport> <eport>}}}}} (14) ')
aclProfileActionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileActionNumber.setStatus('current')
if mibBuilder.loadTexts: aclProfileActionNumber.setDescription('Profile action number. Bit 1: rate Bit 2: rvlan Bit 3: rpri Bit 4: deny Bit 1, Bit 2 & Bit 3 can multiple selection.')
aclProfileRuleParamMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleParamMask.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleParamMask.setDescription('Profile rule parameter mask. BIT 1: srcip <ip>/<mask> BIT 2: dstip <ip>/<mask> BIT 3: tos <stos> <etos> BIT 4: srcport <sport> <eport> BIT 5: dstport <sport> <eport>')
aclProfileRuleEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleEtype.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleEtype.setDescription('Profile rule etype')
aclProfileRuleVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleVid.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleVid.setDescription('Profile rule vid')
aclProfileRuleSmac = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 7), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleSmac.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleSmac.setDescription('Profile rule source MAC')
aclProfileRuleDmac = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 8), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleDmac.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleDmac.setDescription('Profile rule destination MAC')
aclProfileRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRulePriority.setStatus('current')
if mibBuilder.loadTexts: aclProfileRulePriority.setDescription('Profile rule priority')
aclProfileRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleProtocol.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleProtocol.setDescription('Profile rule protocol. icmp(1),igmp(2),ip(4),tcp(6), udp(17),gre(47),ospf(89), other ptype')
aclProfileRuleSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleSrcIP.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleSrcIP.setDescription('Profile rule source IP')
aclProfileRuleSrcIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleSrcIPMask.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleSrcIPMask.setDescription('The subnet mask of source IP mask')
aclProfileRuleDestIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleDestIP.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleDestIP.setDescription('Profile rule source IP')
aclProfileRuleDestIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleDestIPMask.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleDestIPMask.setDescription('The subnet mask of dest IP mask')
aclProfileRuleStartTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleStartTos.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleStartTos.setDescription('Profile rule start type of service')
aclProfileRuleEndTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleEndTos.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleEndTos.setDescription('Profile rule end type of service')
aclProfileRuleSrcStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleSrcStartPort.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleSrcStartPort.setDescription('Profile rule source start port')
aclProfileRuleSrcEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleSrcEndPort.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleSrcEndPort.setDescription('Profile rule source end port')
aclProfileRuleDestStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleDestStartPort.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleDestStartPort.setDescription('Profile rule destination start port')
aclProfileRuleDestEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleDestEndPort.setStatus('current')
if mibBuilder.loadTexts: aclProfileRuleDestEndPort.setDescription('Profile rule destination end port')
aclProfileActionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileActionRate.setStatus('current')
if mibBuilder.loadTexts: aclProfileActionRate.setDescription('Profile action to replace to this rate')
aclProfileActionrvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileActionrvlan.setStatus('current')
if mibBuilder.loadTexts: aclProfileActionrvlan.setDescription('Profile action to replace to this vlan')
aclProfileActionrpri = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileActionrpri.setStatus('current')
if mibBuilder.loadTexts: aclProfileActionrpri.setDescription('Profile action to replace to this priority')
aclProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 24), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: aclProfileRowStatus.setDescription('The row status of the entry.')
pppoeAgentTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 57, 1), )
if mibBuilder.loadTexts: pppoeAgentTable.setStatus('current')
if mibBuilder.loadTexts: pppoeAgentTable.setDescription('A table that contains PPPoE DHCP Relay configuration.')
pppoeAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 57, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: pppoeAgentEntry.setStatus('current')
if mibBuilder.loadTexts: pppoeAgentEntry.setDescription('An entry of pppoeAgentTable.')
pppoeAgentEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 57, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppoeAgentEnable.setStatus('current')
if mibBuilder.loadTexts: pppoeAgentEnable.setDescription('Enable/disable DHCP relay and Option82 function.')
pppoeAgentInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 57, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppoeAgentInfo.setStatus('current')
if mibBuilder.loadTexts: pppoeAgentInfo.setDescription('User specific Option82 information.')
pppoeAgentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 57, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppoeAgentRowStatus.setStatus('current')
if mibBuilder.loadTexts: pppoeAgentRowStatus.setDescription('Row status of the table entry.')
pppoeAgentOptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 57, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("private", 1), ("tr101", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppoeAgentOptionMode.setStatus('current')
if mibBuilder.loadTexts: pppoeAgentOptionMode.setDescription('Option82 format.')
maxNumOfPppoeDhcpRelay82Conf = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 57, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfPppoeDhcpRelay82Conf.setStatus('current')
if mibBuilder.loadTexts: maxNumOfPppoeDhcpRelay82Conf.setDescription('The maximum number of rows that can be created in pppoeAgentTable.')
macFfTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 1), )
if mibBuilder.loadTexts: macFfTable.setStatus('current')
if mibBuilder.loadTexts: macFfTable.setDescription('A table that contains MAC Force Forwarding configuration.')
macFfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 1, 1), ).setIndexNames((0, "E5-111-MIB", "macFfIndex"))
if mibBuilder.loadTexts: macFfEntry.setStatus('current')
if mibBuilder.loadTexts: macFfEntry.setDescription('An entry of macFfTable.')
macFfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfIndex.setStatus('current')
if mibBuilder.loadTexts: macFfIndex.setDescription('Index of the MACFF.')
macFfVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFfVid.setStatus('current')
if mibBuilder.loadTexts: macFfVid.setDescription('The VLAN-ID refering to this AR/AS.')
macFfArIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFfArIP.setStatus('current')
if mibBuilder.loadTexts: macFfArIP.setDescription('IP of this AR/AS')
macFfSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFfSrcIP.setStatus('current')
if mibBuilder.loadTexts: macFfSrcIP.setDescription('The source IP address of the MACFF.')
macFfSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFfSrcMask.setStatus('current')
if mibBuilder.loadTexts: macFfSrcMask.setDescription('The subnet mask of source IP mask.')
macFfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macFfRowStatus.setStatus('current')
if mibBuilder.loadTexts: macFfRowStatus.setDescription('The row status of the MacFfEntry entry.')
macFfArpFlush = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFfArpFlush.setStatus('current')
if mibBuilder.loadTexts: macFfArpFlush.setDescription('Set the object to 1 to flush mac table.')
maxNumOfMacFfVlanInSystem = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfMacFfVlanInSystem.setStatus('current')
if mibBuilder.loadTexts: maxNumOfMacFfVlanInSystem.setDescription('The max number of macff Vlans supported in the system.')
macFfVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 5), )
if mibBuilder.loadTexts: macFfVlanTable.setStatus('current')
if mibBuilder.loadTexts: macFfVlanTable.setDescription('A table that contains MAC Force Forwarding Vlan configuration.')
macFfVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 5, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: macFfVlanEntry.setStatus('current')
if mibBuilder.loadTexts: macFfVlanEntry.setDescription('An entry of macFfVlanTable.')
macFfVlanRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macFfVlanRowstatus.setStatus('current')
if mibBuilder.loadTexts: macFfVlanRowstatus.setDescription('Row status of the table used to create/delete an entry.')
macFfVlanUnknownUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flood", 1), ("drop", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macFfVlanUnknownUnicast.setStatus('current')
if mibBuilder.loadTexts: macFfVlanUnknownUnicast.setDescription('Setting downstream unknown uni-cast packet on macff vlan to flooding or dropping.')
macFfStaticIPTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 6), )
if mibBuilder.loadTexts: macFfStaticIPTable.setStatus('current')
if mibBuilder.loadTexts: macFfStaticIPTable.setDescription(' ')
macFfStaticIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 6, 1), ).setIndexNames((0, "E5-111-MIB", "macFfStaticIPPort"), (0, "E5-111-MIB", "macFfStaticIPVid"), (0, "E5-111-MIB", "macFfstaticIP"), (0, "E5-111-MIB", "macFfStaticIPMask"))
if mibBuilder.loadTexts: macFfStaticIPEntry.setStatus('current')
if mibBuilder.loadTexts: macFfStaticIPEntry.setDescription('An entry of macFfTable.')
macFfStaticIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfStaticIPPort.setStatus('current')
if mibBuilder.loadTexts: macFfStaticIPPort.setDescription(' The port number, 1 ~ 48.')
macFfStaticIPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfStaticIPVid.setStatus('current')
if mibBuilder.loadTexts: macFfStaticIPVid.setDescription('VLAN ID of the IP range, 1 ~ 4094, the vid should be enable the MACFF function first.')
macFfstaticIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfstaticIP.setStatus('current')
if mibBuilder.loadTexts: macFfstaticIP.setDescription('The specified IP range.')
macFfStaticIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfStaticIPMask.setStatus('current')
if mibBuilder.loadTexts: macFfStaticIPMask.setDescription('Mask_bits is 24 .. 32.')
macFfStaticIPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macFfStaticIPRowStatus.setStatus('current')
if mibBuilder.loadTexts: macFfStaticIPRowStatus.setDescription('The row status used to configure the table entry.')
accessCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 5))
extAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 8))
user = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9))
usbCastCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 10))
dsbCastCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 11))
stdioTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stdioTimeout.setStatus('current')
if mibBuilder.loadTexts: stdioTimeout.setDescription('Set the CLI/TELNET/WEB Session timeout, 0, or 1~300 minutes, 0 => disable.')
isConfigChanged = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isConfigChanged.setStatus('current')
if mibBuilder.loadTexts: isConfigChanged.setDescription('If system configuration has been changed.')
fwUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 14))
delayedReboot = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 15))
securedClientTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 5, 2), )
if mibBuilder.loadTexts: securedClientTable.setStatus('current')
if mibBuilder.loadTexts: securedClientTable.setDescription('A table that contains information about secured clients.')
securedClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 5, 2, 1), ).setIndexNames((0, "E5-111-MIB", "securedClientIndex"))
if mibBuilder.loadTexts: securedClientEntry.setStatus('current')
if mibBuilder.loadTexts: securedClientEntry.setDescription('A list of secured client entry.')
securedClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securedClientIndex.setStatus('current')
if mibBuilder.loadTexts: securedClientIndex.setDescription('The index of the entry.')
securedClientStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 5, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securedClientStartIp.setStatus('current')
if mibBuilder.loadTexts: securedClientStartIp.setDescription('The starting IP address of the secured client set.')
securedClientEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 5, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securedClientEndIp.setStatus('current')
if mibBuilder.loadTexts: securedClientEndIp.setDescription('The ending IP address of the secured client set.')
securedClientService = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securedClientService.setStatus('current')
if mibBuilder.loadTexts: securedClientService.setDescription('Each bit corresponds to a service. The bit is set to 1 if the service is enabled, and set to 0 if the service is disabled. The various bit positions are: BIT 1: telnet BIT 2: ftp BIT 3: web BIT 4: icmp BIT 5: not support BIT 6: snmp.')
securedClientEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securedClientEnable.setStatus('current')
if mibBuilder.loadTexts: securedClientEnable.setDescription('Enable/disable the entry.')
extAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 8, 1), )
if mibBuilder.loadTexts: extAlarmTable.setStatus('current')
if mibBuilder.loadTexts: extAlarmTable.setDescription('A table that contains external alarm information.')
extAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 8, 1, 1), ).setIndexNames((0, "E5-111-MIB", "extAlarmIndex"))
if mibBuilder.loadTexts: extAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: extAlarmEntry.setDescription('The entry of external alarm table.')
extAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: extAlarmIndex.setDescription('The index of the entry.')
extAlarmname = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extAlarmname.setStatus('current')
if mibBuilder.loadTexts: extAlarmname.setDescription('The external alarm name.')
extAlarmstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extAlarmstatus.setStatus('current')
if mibBuilder.loadTexts: extAlarmstatus.setDescription("Dispaly 'Normal' or 'Alarm' string")
extAlarmTriggeredMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closeAlarm", 1), ("openAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extAlarmTriggeredMode.setStatus('current')
if mibBuilder.loadTexts: extAlarmTriggeredMode.setDescription('The external alarm triggered mode.')
userAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("radius", 2), ("localThenRadius", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthMode.setStatus('current')
if mibBuilder.loadTexts: userAuthMode.setDescription('User authentication procsssing mode.')
userAuthServerIp = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthServerIp.setStatus('current')
if mibBuilder.loadTexts: userAuthServerIp.setDescription('The IP address of the authentication server.')
userAuthServerPort = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthServerPort.setStatus('current')
if mibBuilder.loadTexts: userAuthServerPort.setDescription('The port of the authentication server.')
userAuthServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthServerSecret.setStatus('current')
if mibBuilder.loadTexts: userAuthServerSecret.setDescription('The secret between the authentication server and the NE for authentication process.')
userTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 5), )
if mibBuilder.loadTexts: userTable.setStatus('current')
if mibBuilder.loadTexts: userTable.setDescription('A table that contains user information.')
userEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 5, 1), ).setIndexNames((0, "E5-111-MIB", "userName"))
if mibBuilder.loadTexts: userEntry.setStatus('current')
if mibBuilder.loadTexts: userEntry.setDescription('An entry of userTable.')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('The user name.')
userPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 5, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userPassword.setStatus('current')
if mibBuilder.loadTexts: userPassword.setDescription('The user password.')
userPriviledge = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("middle", 2), ("low", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userPriviledge.setStatus('current')
if mibBuilder.loadTexts: userPriviledge.setDescription('The user priviledge to decide what operation the user can and cannot do.')
userRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userRowStatus.setStatus('current')
if mibBuilder.loadTexts: userRowStatus.setDescription('The row status used to create or delete a user.')
userAuthDefaultPriviledge = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("high", 1), ("middle", 2), ("low", 3), ("deny", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthDefaultPriviledge.setStatus('current')
if mibBuilder.loadTexts: userAuthDefaultPriviledge.setDescription('The user default priviledge to be assigned when radius authentication succeds but no user priviledge information(radius service-type) is provided.')
usBcastCtrlEnable = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usBcastCtrlEnable.setStatus('current')
if mibBuilder.loadTexts: usBcastCtrlEnable.setDescription('Enable/disable upstream broadcast control.')
usBcastCtrlRate = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 10, 2), Integer32()).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usBcastCtrlRate.setStatus('current')
if mibBuilder.loadTexts: usBcastCtrlRate.setDescription('32~49984 in step of 32kbps')
dsBcastCtrlEnable = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsBcastCtrlEnable.setStatus('current')
if mibBuilder.loadTexts: dsBcastCtrlEnable.setDescription('Enable/disable downstream broadcast control.')
dsBcastCtrlRate = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 11, 2), Integer32()).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsBcastCtrlRate.setStatus('current')
if mibBuilder.loadTexts: dsBcastCtrlRate.setDescription('32~1000000 in step of 32 kbps')
fwUpgradeVersion = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 14, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fwUpgradeVersion.setStatus('current')
if mibBuilder.loadTexts: fwUpgradeVersion.setDescription('Configure the target firmware version that will be upgraded.')
fwUpgradeCheck = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fwUpgradeCheck.setStatus('current')
if mibBuilder.loadTexts: fwUpgradeCheck.setDescription('Enable/disable firmware upgrade version checking feature.')
fwUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 14, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwUpgradeStatus.setStatus('current')
if mibBuilder.loadTexts: fwUpgradeStatus.setDescription('Display current firmware upgrade status.')
delayedRebootTimer = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 15, 1), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: delayedRebootTimer.setStatus('current')
if mibBuilder.loadTexts: delayedRebootTimer.setDescription('5~1800 secs, 0: reboot immediately.')
delayedRebootRemainingTime = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 15, 2), Integer32()).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: delayedRebootRemainingTime.setStatus('current')
if mibBuilder.loadTexts: delayedRebootRemainingTime.setDescription('Display the remaining time of scheduled reboot.')
delayedRebootCancel = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("cancel", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: delayedRebootCancel.setStatus('current')
if mibBuilder.loadTexts: delayedRebootCancel.setDescription('cancel the scheduled reboot.')
dhcpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11))
paepvcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12))
macStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 13))
ipbpvcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14))
voipStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15))
macffStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16))
enetStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 17))
adslStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 18))
igmpQueryCntTotal = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpQueryCntTotal.setStatus('current')
if mibBuilder.loadTexts: igmpQueryCntTotal.setDescription('The total number of IGMP query messages received.')
igmpReportCntTotal = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpReportCntTotal.setStatus('current')
if mibBuilder.loadTexts: igmpReportCntTotal.setDescription('The total number of IGMP report messages received.')
igmpLeaveCntTotal = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpLeaveCntTotal.setStatus('current')
if mibBuilder.loadTexts: igmpLeaveCntTotal.setDescription('The total number of IGMP leave messages received.')
igmpNumOfActiveGroups = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpNumOfActiveGroups.setStatus('current')
if mibBuilder.loadTexts: igmpNumOfActiveGroups.setDescription('The total number of IGMP learned groups.')
igmpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 5), )
if mibBuilder.loadTexts: igmpGroupTable.setStatus('current')
if mibBuilder.loadTexts: igmpGroupTable.setDescription('This table includes igmp group information.')
igmpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 5, 1), ).setIndexNames((0, "E5-111-MIB", "igmpGroupIp"))
if mibBuilder.loadTexts: igmpGroupEntry.setStatus('current')
if mibBuilder.loadTexts: igmpGroupEntry.setDescription('An entry in igmpGroupTable.')
igmpGroupIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupIp.setStatus('current')
if mibBuilder.loadTexts: igmpGroupIp.setDescription('igmp group IP')
igmpGroupvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupvid.setStatus('current')
if mibBuilder.loadTexts: igmpGroupvid.setDescription('vlan id')
igmpGroupnumberOfMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupnumberOfMembers.setStatus('current')
if mibBuilder.loadTexts: igmpGroupnumberOfMembers.setDescription('number Of Members')
igmpGroupMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupMemberPorts.setStatus('current')
if mibBuilder.loadTexts: igmpGroupMemberPorts.setDescription('Group Member Ports')
igmpGroupPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 6), )
if mibBuilder.loadTexts: igmpGroupPortTable.setStatus('current')
if mibBuilder.loadTexts: igmpGroupPortTable.setDescription('This table includes igmp Group port information.')
igmpGroupPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "igmpGroupPortIp"), (0, "E5-111-MIB", "igmpGroupPortvid"))
if mibBuilder.loadTexts: igmpGroupPortEntry.setStatus('current')
if mibBuilder.loadTexts: igmpGroupPortEntry.setDescription('An entry in igmpGroupPortTable.')
igmpGroupPortIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupPortIp.setStatus('current')
if mibBuilder.loadTexts: igmpGroupPortIp.setDescription('Igmp Group IP')
igmpGroupPortvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupPortvid.setStatus('current')
if mibBuilder.loadTexts: igmpGroupPortvid.setDescription('Igmp Group vid')
igmpGroupV2Table = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 7), )
if mibBuilder.loadTexts: igmpGroupV2Table.setStatus('current')
if mibBuilder.loadTexts: igmpGroupV2Table.setDescription('A table that displays IGMP learned group member information.')
igmpGroupV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 7, 1), ).setIndexNames((0, "E5-111-MIB", "igmpGroupV2Vid"), (0, "E5-111-MIB", "igmpGroupV2Ip"))
if mibBuilder.loadTexts: igmpGroupV2Entry.setStatus('current')
if mibBuilder.loadTexts: igmpGroupV2Entry.setDescription('An entry of igmpGroupV2Table.')
igmpGroupV2Vid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 7, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupV2Vid.setStatus('current')
if mibBuilder.loadTexts: igmpGroupV2Vid.setDescription('The IGMP group VLAN ID.')
igmpGroupV2Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupV2Ip.setStatus('current')
if mibBuilder.loadTexts: igmpGroupV2Ip.setDescription('The multicast IP address.')
igmpGroupV2NumOfMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupV2NumOfMembers.setStatus('current')
if mibBuilder.loadTexts: igmpGroupV2NumOfMembers.setDescription('The number of member ports in the group.')
igmpGroupV2MemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 7, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupV2MemberPorts.setStatus('current')
if mibBuilder.loadTexts: igmpGroupV2MemberPorts.setDescription('The member port list of the group.')
igmpGroupPortV2Table = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 8), )
if mibBuilder.loadTexts: igmpGroupPortV2Table.setStatus('current')
if mibBuilder.loadTexts: igmpGroupPortV2Table.setDescription('A table that displays IGMP joined groups in this port.')
igmpGroupPortV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "igmpGroupPortV2Vid"), (0, "E5-111-MIB", "igmpGroupPortV2Ip"), (0, "E5-111-MIB", "igmpGroupPortV2SourceIp"))
if mibBuilder.loadTexts: igmpGroupPortV2Entry.setStatus('current')
if mibBuilder.loadTexts: igmpGroupPortV2Entry.setDescription('An entry of igmpGroupPortV2Table.')
igmpGroupPortV2Vid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 8, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupPortV2Vid.setStatus('current')
if mibBuilder.loadTexts: igmpGroupPortV2Vid.setDescription('The IGMP group VLAN ID.')
igmpGroupPortV2Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupPortV2Ip.setStatus('current')
if mibBuilder.loadTexts: igmpGroupPortV2Ip.setDescription('The multicast IP address.')
igmpGroupPortV2SourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupPortV2SourceIp.setStatus('current')
if mibBuilder.loadTexts: igmpGroupPortV2SourceIp.setDescription('The source IP address that joins the IGMP group.')
igmpPortCtrlPduTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 9), )
if mibBuilder.loadTexts: igmpPortCtrlPduTable.setStatus('current')
if mibBuilder.loadTexts: igmpPortCtrlPduTable.setDescription('A table that displays IGMP related counter values in this port.')
igmpPortCtrlPduEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: igmpPortCtrlPduEntry.setStatus('current')
if mibBuilder.loadTexts: igmpPortCtrlPduEntry.setDescription('An entry of igmpPortCtrlPduTable.')
igmpPortCtrlPduQueryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpPortCtrlPduQueryCnt.setStatus('current')
if mibBuilder.loadTexts: igmpPortCtrlPduQueryCnt.setDescription('The total number of IGMP query messages received in this port.')
igmpPortCtrlPduReportCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpPortCtrlPduReportCnt.setStatus('current')
if mibBuilder.loadTexts: igmpPortCtrlPduReportCnt.setDescription('The total number of IGMP report messages received in this port.')
igmpPortCtrlPduLeaveCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpPortCtrlPduLeaveCnt.setStatus('current')
if mibBuilder.loadTexts: igmpPortCtrlPduLeaveCnt.setDescription('The total number of IGMP leave messages received in this port.')
igmpPortNumOfActiveGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpPortNumOfActiveGroups.setStatus('current')
if mibBuilder.loadTexts: igmpPortNumOfActiveGroups.setDescription('The total number of active IGMP groups in this port.')
igmpPortCtrlAuditLeaveCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpPortCtrlAuditLeaveCnt.setStatus('current')
if mibBuilder.loadTexts: igmpPortCtrlAuditLeaveCnt.setDescription('The total number of groups left by audit query.')
dhcpSnoopIpTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 1), )
if mibBuilder.loadTexts: dhcpSnoopIpTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopIpTable.setDescription('This table shows the IP addresses and netmasks offered by the DHCP server.')
dhcpSnoopIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "dhcpSnoopIp"))
if mibBuilder.loadTexts: dhcpSnoopIpEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopIpEntry.setDescription('An entry of dhcpSnoopIpTable.')
dhcpSnoopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopIp.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopIp.setDescription('The snooped IP address.')
dhcpSnoopMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 1, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopMac.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopMac.setDescription('The snooped MAC address.')
dhcpSnoopVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 1, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopVid.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopVid.setDescription('The snooped VLAN ID.')
dhcpSnoopMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopMask.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopMask.setDescription('The snooped IP mask')
dhcpSnoopGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopGateway.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopGateway.setDescription('The snooped Gateway.')
dhcpSnoopRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopRouteMap.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopRouteMap.setDescription('The refrence bit map of the dhcp route')
dhcpSnoopCounterTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 2), )
if mibBuilder.loadTexts: dhcpSnoopCounterTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopCounterTable.setDescription('This table shows the DHCP statistics.')
dhcpSnoopCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dhcpSnoopCounterEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopCounterEntry.setDescription('An entry of dhcpSnoopCounterTable.')
dhcpDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDiscovery.setStatus('current')
if mibBuilder.loadTexts: dhcpDiscovery.setDescription('The total number of received DHCP server discovery packets.')
dhcpOffer = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpOffer.setStatus('current')
if mibBuilder.loadTexts: dhcpOffer.setDescription('The total number of received DHCP server offer packets.')
dhcpRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRequest.setStatus('current')
if mibBuilder.loadTexts: dhcpRequest.setDescription('The total number of received DHCP IP request packets.')
dhcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpAck.setStatus('current')
if mibBuilder.loadTexts: dhcpAck.setDescription('The total number of received DHCP IP acknowledge packets.')
dhcpAckBySnoopFull = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpAckBySnoopFull.setStatus('current')
if mibBuilder.loadTexts: dhcpAckBySnoopFull.setDescription('The total number of received DHCP IP acknowledge packets that replace the oldest snooping entry in snooping table due to table full.')
dhcpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 3), )
if mibBuilder.loadTexts: dhcpRouteTable.setStatus('current')
if mibBuilder.loadTexts: dhcpRouteTable.setDescription('A table that contains dhcp route information.')
dhcpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 3, 1), ).setIndexNames((0, "E5-111-MIB", "dhcpRouteIndex"))
if mibBuilder.loadTexts: dhcpRouteEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpRouteEntry.setDescription('An entry of dhcpRouteTable.')
dhcpRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRouteIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpRouteIndex.setDescription('')
dhcpRouteVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 3, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRouteVid.setStatus('current')
if mibBuilder.loadTexts: dhcpRouteVid.setDescription('The VLAN-ID refering to this dhcp route.')
dhcpRouteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRouteIP.setStatus('current')
if mibBuilder.loadTexts: dhcpRouteIP.setDescription('IP of this dhcp route')
dhcpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRouteMask.setStatus('current')
if mibBuilder.loadTexts: dhcpRouteMask.setDescription('The subnet mask of source IP mask.')
dhcpRouteGwIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRouteGwIP.setStatus('current')
if mibBuilder.loadTexts: dhcpRouteGwIP.setDescription('The gateway IP address.')
paepvcSessionTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 1), )
if mibBuilder.loadTexts: paepvcSessionTable.setStatus('current')
if mibBuilder.loadTexts: paepvcSessionTable.setDescription('This table shows the paepvc session statistics.')
paepvcSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "paepvcSessionVpi"), (0, "E5-111-MIB", "paepvcSessionVci"))
if mibBuilder.loadTexts: paepvcSessionEntry.setStatus('current')
if mibBuilder.loadTexts: paepvcSessionEntry.setDescription('An entry of paepvcSessionTable.')
paepvcSessionVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcSessionVpi.setStatus('current')
if mibBuilder.loadTexts: paepvcSessionVpi.setDescription('The PAEPVC VPI.')
paepvcSessionVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcSessionVci.setStatus('current')
if mibBuilder.loadTexts: paepvcSessionVci.setDescription('The PAEPVC VCI.')
paepvcSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("pppoe", 2), ("ppp", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcSessionState.setStatus('current')
if mibBuilder.loadTexts: paepvcSessionState.setDescription('The PAEPVC status.')
paepvcSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcSessionId.setStatus('current')
if mibBuilder.loadTexts: paepvcSessionId.setDescription('The PAEPVC session ID.')
paepvcSessionUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 1, 1, 5), Unsigned32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcSessionUptime.setStatus('current')
if mibBuilder.loadTexts: paepvcSessionUptime.setDescription('The PAEPVC session uptime.')
paepvcSessionacname = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcSessionacname.setStatus('current')
if mibBuilder.loadTexts: paepvcSessionacname.setDescription('Access concentrator name.')
paepvcSessionsrvcname = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcSessionsrvcname.setStatus('current')
if mibBuilder.loadTexts: paepvcSessionsrvcname.setDescription('Service name.')
paepvcCountTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2), )
if mibBuilder.loadTexts: paepvcCountTable.setStatus('current')
if mibBuilder.loadTexts: paepvcCountTable.setDescription('This table shows the paepvc counters.')
paepvcCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "paepvcCountVpi"), (0, "E5-111-MIB", "paepvcCountVci"))
if mibBuilder.loadTexts: paepvcCountEntry.setStatus('current')
if mibBuilder.loadTexts: paepvcCountEntry.setDescription('An entry of paepvcCountTable.')
paepvcCountVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountVpi.setStatus('current')
if mibBuilder.loadTexts: paepvcCountVpi.setDescription('The PAEPVC VPI.')
paepvcCountVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountVci.setStatus('current')
if mibBuilder.loadTexts: paepvcCountVci.setDescription('The PAEPVC VCI.')
paepvcCountPppLcpCfgReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountPppLcpCfgReqRx.setStatus('current')
if mibBuilder.loadTexts: paepvcCountPppLcpCfgReqRx.setDescription('The number of ppp lcp config-request received.')
paepvcCountPppLcpEchoReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountPppLcpEchoReqRx.setStatus('current')
if mibBuilder.loadTexts: paepvcCountPppLcpEchoReqRx.setDescription('The number of ppp lcp echo-request received.')
paepvcCountPppLcpEchoReplyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountPppLcpEchoReplyRx.setStatus('current')
if mibBuilder.loadTexts: paepvcCountPppLcpEchoReplyRx.setDescription('The number of ppp lcp echo-reply received.')
paepvcCountPadiTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountPadiTx.setStatus('current')
if mibBuilder.loadTexts: paepvcCountPadiTx.setDescription('The number of pppoe padi transfered')
paepvcCountPadoRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountPadoRx.setStatus('current')
if mibBuilder.loadTexts: paepvcCountPadoRx.setDescription('The number of pppoe pado received')
paepvcCountPadrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountPadrTx.setStatus('current')
if mibBuilder.loadTexts: paepvcCountPadrTx.setDescription('The number of pppoe padr transfered')
paepvcCountPadsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountPadsRx.setStatus('current')
if mibBuilder.loadTexts: paepvcCountPadsRx.setDescription('The number of pppoe pads received')
paepvcCountPadtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountPadtTx.setStatus('current')
if mibBuilder.loadTexts: paepvcCountPadtTx.setDescription('The number of pppoe padt transfered')
paepvcCountPadtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountPadtRx.setStatus('current')
if mibBuilder.loadTexts: paepvcCountPadtRx.setDescription('The number of pppoe padt received')
paepvcCountSrvcnameErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountSrvcnameErrRx.setStatus('current')
if mibBuilder.loadTexts: paepvcCountSrvcnameErrRx.setDescription('The number of pppoe service name error received')
paepvcCountAcSystemErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountAcSystemErrRx.setStatus('current')
if mibBuilder.loadTexts: paepvcCountAcSystemErrRx.setDescription('The number of pppoe access concentrator name error received')
paepvcCountGenericErrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountGenericErrTx.setStatus('current')
if mibBuilder.loadTexts: paepvcCountGenericErrTx.setDescription('The number of pppoe generic error transfered')
paepvcCountGenericErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountGenericErrRx.setStatus('current')
if mibBuilder.loadTexts: paepvcCountGenericErrRx.setDescription('The number of pppoe generic error received')
macDisplayTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macDisplayTarget.setStatus('current')
if mibBuilder.loadTexts: macDisplayTarget.setDescription('This managed object is a filter used for identify the target from which the MAC addresses are learned in macTable. The target could be: 99: all ports in the system 98: all subscriber ports 97: all Ethernet ports IfIndex is used for identifying subscriber ports and Ethernet Ports(e.g. 1 ~ 50).')
macTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 13, 2), )
if mibBuilder.loadTexts: macTable.setStatus('current')
if mibBuilder.loadTexts: macTable.setDescription('A table that contains information about unicast entries for which the bridge has forwarding and/or filtering information. This information is used by the transparent bridging function in determining how to propagate a received frame.')
macEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 13, 2, 1), ).setIndexNames((0, "E5-111-MIB", "macAddress"))
if mibBuilder.loadTexts: macEntry.setStatus('current')
if mibBuilder.loadTexts: macEntry.setDescription('An entry of macTable.')
macAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 13, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddress.setStatus('current')
if mibBuilder.loadTexts: macAddress.setDescription('A unicast MAC address for which the bridge has forwarding and/or filtering information.')
macPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPort.setStatus('current')
if mibBuilder.loadTexts: macPort.setDescription('The port from which the mac address has been learned.')
macStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macStatus.setStatus('current')
if mibBuilder.loadTexts: macStatus.setDescription('The status of this entry.')
arpproxyTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1), )
if mibBuilder.loadTexts: arpproxyTable.setStatus('current')
if mibBuilder.loadTexts: arpproxyTable.setDescription('Display ARP table. This table is supported by R3.00 and later versions.')
arpproxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1), ).setIndexNames((0, "E5-111-MIB", "ipbpvcDomainName"), (0, "E5-111-MIB", "arpproxyIp"))
if mibBuilder.loadTexts: arpproxyEntry.setStatus('current')
if mibBuilder.loadTexts: arpproxyEntry.setDescription('An entry of arpproxyTable.')
arpproxyIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyIp.setStatus('current')
if mibBuilder.loadTexts: arpproxyIp.setDescription('')
arpproxyMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyMac.setStatus('current')
if mibBuilder.loadTexts: arpproxyMac.setDescription('')
arpproxyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyIfIndex.setStatus('current')
if mibBuilder.loadTexts: arpproxyIfIndex.setDescription('')
arpproxyVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyVpi.setStatus('current')
if mibBuilder.loadTexts: arpproxyVpi.setDescription('')
arpproxyVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyVci.setStatus('current')
if mibBuilder.loadTexts: arpproxyVci.setDescription('')
arpproxyInterfaceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyInterfaceIp.setStatus('current')
if mibBuilder.loadTexts: arpproxyInterfaceIp.setDescription('')
arpproxyInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyInterfaceMask.setStatus('current')
if mibBuilder.loadTexts: arpproxyInterfaceMask.setDescription('')
arpproxyInterfaceVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 8), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyInterfaceVid.setStatus('current')
if mibBuilder.loadTexts: arpproxyInterfaceVid.setDescription('')
arpproxyDhcpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyDhcpIp.setStatus('current')
if mibBuilder.loadTexts: arpproxyDhcpIp.setDescription('')
arpproxyType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upstream", 1), ("downstream", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyType.setStatus('current')
if mibBuilder.loadTexts: arpproxyType.setDescription('')
ipbpvcIfDynamicTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 2), )
if mibBuilder.loadTexts: ipbpvcIfDynamicTable.setStatus('current')
if mibBuilder.loadTexts: ipbpvcIfDynamicTable.setDescription('Display runtime interfaces. This table is supported by R3.00 and later versions.')
ipbpvcIfDynamicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 2, 1), ).setIndexNames((0, "E5-111-MIB", "ipbpvcDomainName"), (0, "E5-111-MIB", "ipbpvcIfDynamicIp"), (0, "E5-111-MIB", "ipbpvcIfDynamicMask"), (0, "E5-111-MIB", "ipbpvcDomainVlanId"))
if mibBuilder.loadTexts: ipbpvcIfDynamicEntry.setStatus('current')
if mibBuilder.loadTexts: ipbpvcIfDynamicEntry.setDescription('An entry of ipbpvcIfDynamicTable.')
ipbpvcIfDynamicIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcIfDynamicIp.setStatus('current')
if mibBuilder.loadTexts: ipbpvcIfDynamicIp.setDescription('')
ipbpvcIfDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcIfDynamicMask.setStatus('current')
if mibBuilder.loadTexts: ipbpvcIfDynamicMask.setDescription('')
ipbpvcIfDynamicIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcIfDynamicIfIndex.setStatus('current')
if mibBuilder.loadTexts: ipbpvcIfDynamicIfIndex.setDescription('')
ipbpvcIfDynamicVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcIfDynamicVpi.setStatus('current')
if mibBuilder.loadTexts: ipbpvcIfDynamicVpi.setDescription('')
ipbpvcIfDynamicVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcIfDynamicVci.setStatus('current')
if mibBuilder.loadTexts: ipbpvcIfDynamicVci.setDescription('')
ipbpvcRouteDynamicTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 3), )
if mibBuilder.loadTexts: ipbpvcRouteDynamicTable.setStatus('current')
if mibBuilder.loadTexts: ipbpvcRouteDynamicTable.setDescription('Display runtime routing table. This table is supported by R3.00 and later versions.')
ipbpvcRouteDynamicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 3, 1), ).setIndexNames((0, "E5-111-MIB", "ipbpvcDomainName"), (0, "E5-111-MIB", "ipbpvcRouteDynamicType"), (0, "E5-111-MIB", "ipbpvcRouteDynamicIp"), (0, "E5-111-MIB", "ipbpvcRouteDynamicMask"))
if mibBuilder.loadTexts: ipbpvcRouteDynamicEntry.setStatus('current')
if mibBuilder.loadTexts: ipbpvcRouteDynamicEntry.setDescription('An entry of ipbpvcRouteDynamicTable.')
ipbpvcRouteDynamicType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upstream", 1), ("downstream", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcRouteDynamicType.setStatus('current')
if mibBuilder.loadTexts: ipbpvcRouteDynamicType.setDescription('')
ipbpvcRouteDynamicIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcRouteDynamicIp.setStatus('current')
if mibBuilder.loadTexts: ipbpvcRouteDynamicIp.setDescription('')
ipbpvcRouteDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcRouteDynamicMask.setStatus('current')
if mibBuilder.loadTexts: ipbpvcRouteDynamicMask.setDescription('')
ipbpvcRouteDynamicNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcRouteDynamicNextHop.setStatus('current')
if mibBuilder.loadTexts: ipbpvcRouteDynamicNextHop.setDescription('')
ipbpvcRouteDynamicMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcRouteDynamicMetric.setStatus('current')
if mibBuilder.loadTexts: ipbpvcRouteDynamicMetric.setDescription('')
ipbpvcRouteDynamicPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcRouteDynamicPriority.setStatus('current')
if mibBuilder.loadTexts: ipbpvcRouteDynamicPriority.setDescription('')
enetSfpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 17, 2), )
if mibBuilder.loadTexts: enetSfpInfoTable.setStatus('current')
if mibBuilder.loadTexts: enetSfpInfoTable.setDescription('This table includes sfp info of enet port.')
enetSfpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 17, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: enetSfpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: enetSfpInfoEntry.setDescription('An entry in enetSfpInfoTable.')
enetSfpInfoTxpower = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('10^-4 mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSfpInfoTxpower.setStatus('current')
if mibBuilder.loadTexts: enetSfpInfoTxpower.setDescription('Measured Tx Output Power.')
enetSfpInfoRxpower = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('10^-4 C').setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSfpInfoRxpower.setStatus('current')
if mibBuilder.loadTexts: enetSfpInfoRxpower.setDescription('Measured Rx Output Power.')
enetSfpInfoTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1280000, 1280000))).setUnits('10^-4 C').setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSfpInfoTemperature.setStatus('current')
if mibBuilder.loadTexts: enetSfpInfoTemperature.setDescription('Measured temperature.')
enetSfpInfoTxBias = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 17, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 131000))).setUnits('10^-3 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSfpInfoTxBias.setStatus('current')
if mibBuilder.loadTexts: enetSfpInfoTxBias.setDescription('Measured tx bias.')
enetSfpInfoVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 17, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000))).setUnits('0.1mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSfpInfoVoltage.setStatus('current')
if mibBuilder.loadTexts: enetSfpInfoVoltage.setDescription('Measured voltage.')
adslPortUtilTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 18, 1), )
if mibBuilder.loadTexts: adslPortUtilTable.setStatus('current')
if mibBuilder.loadTexts: adslPortUtilTable.setDescription('This table includes adsl port utilization.')
adslPortUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 18, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslPortUtilEntry.setStatus('current')
if mibBuilder.loadTexts: adslPortUtilEntry.setDescription('An entry in adslPortUtilEntry.')
adslPortUtilTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslPortUtilTx.setStatus('current')
if mibBuilder.loadTexts: adslPortUtilTx.setDescription("Measure adsl port's tx utilization.")
adslPortUtilRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslPortUtilRx.setStatus('current')
if mibBuilder.loadTexts: adslPortUtilRx.setDescription("Measure adsl port's rx utilization.")
macFfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 1), )
if mibBuilder.loadTexts: macFfStatsTable.setStatus('current')
if mibBuilder.loadTexts: macFfStatsTable.setDescription('A table that contains MAC Force Forwarding static configuration and dynamic information.')
macFfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 1, 1), ).setIndexNames((0, "E5-111-MIB", "macFfStatsIndex"))
if mibBuilder.loadTexts: macFfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: macFfStatsEntry.setDescription('An entry of macFfStatsTable.')
macFfStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfStatsIndex.setStatus('current')
if mibBuilder.loadTexts: macFfStatsIndex.setDescription('Index of the MACFF.')
macFfStatsVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 1, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfStatsVid.setStatus('current')
if mibBuilder.loadTexts: macFfStatsVid.setDescription('The VLAN-ID refering to this AR/AS.')
macFfStatsArIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfStatsArIP.setStatus('current')
if mibBuilder.loadTexts: macFfStatsArIP.setDescription('IP of this AR/AS')
macFfStatsSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfStatsSrcIP.setStatus('current')
if mibBuilder.loadTexts: macFfStatsSrcIP.setDescription('The source IP address of the MACFF.')
macFfStatsSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfStatsSrcMask.setStatus('current')
if mibBuilder.loadTexts: macFfStatsSrcMask.setDescription('The subnet mask of source IP mask.')
macFfArpTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 2), )
if mibBuilder.loadTexts: macFfArpTable.setStatus('current')
if mibBuilder.loadTexts: macFfArpTable.setDescription('A table that contains MAC Force Forwarding ARP information.')
macFfArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 2, 1), ).setIndexNames((0, "E5-111-MIB", "macFfArpVid"), (0, "E5-111-MIB", "macFfArpIP"))
if mibBuilder.loadTexts: macFfArpEntry.setStatus('current')
if mibBuilder.loadTexts: macFfArpEntry.setDescription('An entry of macFfArpTable.')
macFfArpVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 2, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpVid.setStatus('current')
if mibBuilder.loadTexts: macFfArpVid.setDescription('The VLAN-ID refering to this AR/AS.')
macFfArpIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpIP.setStatus('current')
if mibBuilder.loadTexts: macFfArpIP.setDescription('IP of this AR/AS.')
macFfArpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpPort.setStatus('current')
if mibBuilder.loadTexts: macFfArpPort.setDescription('Port of this AR/AS.')
macFfArpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 2, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpMac.setStatus('current')
if mibBuilder.loadTexts: macFfArpMac.setDescription('MAC address of the AR or AS.')
macFfArpCounterTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 3), )
if mibBuilder.loadTexts: macFfArpCounterTable.setStatus('current')
if mibBuilder.loadTexts: macFfArpCounterTable.setDescription('A table that contains MAC Force Forwarding ARP counter information.')
macFfArpCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: macFfArpCounterEntry.setStatus('current')
if mibBuilder.loadTexts: macFfArpCounterEntry.setDescription('An entry of macFfArpCounterTable.')
macFfArpCounterRequestTX = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpCounterRequestTX.setStatus('current')
if mibBuilder.loadTexts: macFfArpCounterRequestTX.setDescription('ARP Request TX counter.')
macFfArpCounterRequestRX = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpCounterRequestRX.setStatus('current')
if mibBuilder.loadTexts: macFfArpCounterRequestRX.setDescription('ARP Request RX counter.')
macFfArpCounterRequestRXDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpCounterRequestRXDrop.setStatus('current')
if mibBuilder.loadTexts: macFfArpCounterRequestRXDrop.setDescription('ARP Request RX drop counter.')
macFfArpCounterReplyTX = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpCounterReplyTX.setStatus('current')
if mibBuilder.loadTexts: macFfArpCounterReplyTX.setDescription('ARP Reply TX counter.')
macFfArpCounterReplyRX = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpCounterReplyRX.setStatus('current')
if mibBuilder.loadTexts: macFfArpCounterReplyRX.setDescription('ARP Reply RX counter.')
macFfArpCounterReplyRXDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpCounterReplyRXDrop.setStatus('current')
if mibBuilder.loadTexts: macFfArpCounterReplyRXDrop.setDescription('ARP Reply RX drop counter.')
voipLineStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 1), )
if mibBuilder.loadTexts: voipLineStatusTable.setStatus('current')
if mibBuilder.loadTexts: voipLineStatusTable.setDescription('The table displays VoIP line status.')
voipLineStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: voipLineStatusEntry.setStatus('current')
if mibBuilder.loadTexts: voipLineStatusEntry.setDescription('An entry of voipLineStatusTable.')
voipLineStatusPhoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("onHook", 2), ("offHook", 3), ("ringing", 4), ("powerCutDown", 5), ("testing", 6), ("fault", 7), ("bad", 8), ("uninitialized", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineStatusPhoneStatus.setStatus('current')
if mibBuilder.loadTexts: voipLineStatusPhoneStatus.setDescription('Phone status of the line.')
voipLineStatusServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("disabled", 1), ("outOfService", 2), ("idle", 3), ("waitingForDialing", 4), ("dialingOut", 5), ("ringing", 6), ("conversationCaller", 7), ("conversationCallee", 8), ("faxModemCaller", 9), ("faxModemCallee", 10), ("waitingForOnHook", 11), ("dialingTimeout", 12), ("alertingOffHook", 13), ("powerCutDown", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineStatusServiceStatus.setStatus('current')
if mibBuilder.loadTexts: voipLineStatusServiceStatus.setDescription('Service status of the line.')
voipLineInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2), )
if mibBuilder.loadTexts: voipLineInfoTable.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoTable.setDescription('The table displays VoIP line information.')
voipLineInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: voipLineInfoEntry.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoEntry.setDescription('An entry of voipLineInfoTable.')
voipLineInfoSipLocalUri = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoSipLocalUri.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoSipLocalUri.setDescription('')
voipLineInfoSipRemoteUri = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoSipRemoteUri.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoSipRemoteUri.setDescription('')
voipLineInfoRtpTxCodecType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpTxCodecType.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoRtpTxCodecType.setDescription('')
voipLineInfoRtpRxCodecType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpRxCodecType.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoRtpRxCodecType.setDescription('')
voipLineInfoRtpTxPt = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpTxPt.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoRtpTxPt.setDescription('')
voipLineInfoRtpRxPt = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpRxPt.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoRtpRxPt.setDescription('')
voipLineInfoRtpLocalIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpLocalIp.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoRtpLocalIp.setDescription('')
voipLineInfoRtpRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpRemoteIp.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoRtpRemoteIp.setDescription('')
voipLineInfoRtpLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpLocalPort.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoRtpLocalPort.setDescription('')
voipLineInfoRtpRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpRemotePort.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoRtpRemotePort.setDescription('')
voipLineInfoSipLocalUri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoSipLocalUri2.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoSipLocalUri2.setDescription('')
voipLineInfoSipRemoteUri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoSipRemoteUri2.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoSipRemoteUri2.setDescription('')
voipLineInfoRtpTxCodecType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpTxCodecType2.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoRtpTxCodecType2.setDescription('')
voipLineInfoRtpRxCodecType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpRxCodecType2.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoRtpRxCodecType2.setDescription('')
voipLineInfoRtpTxPt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpTxPt2.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoRtpTxPt2.setDescription('')
voipLineInfoRtpRxPt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpRxPt2.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoRtpRxPt2.setDescription('')
voipLineInfoRtpLocalIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpLocalIp2.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoRtpLocalIp2.setDescription('')
voipLineInfoRtpRemoteIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpRemoteIp2.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoRtpRemoteIp2.setDescription('')
voipLineInfoRtpLocalPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpLocalPort2.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoRtpLocalPort2.setDescription('')
voipLineInfoRtpRemotePort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpRemotePort2.setStatus('current')
if mibBuilder.loadTexts: voipLineInfoRtpRemotePort2.setDescription('')
voipH248Status = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 3))
voipH248StatusMgName = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipH248StatusMgName.setStatus('current')
if mibBuilder.loadTexts: voipH248StatusMgName.setDescription('MG name.')
voipH248StatusMgStatus = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("registering", 2), ("registered", 3), ("unregistering", 4), ("unregistered", 5), ("disconnected", 6), ("disabled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipH248StatusMgStatus.setStatus('current')
if mibBuilder.loadTexts: voipH248StatusMgStatus.setDescription('Mg connection status.')
voipActiveCallStat = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 4))
voipActiveCallStatCurrentActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipActiveCallStatCurrentActiveCalls.setStatus('current')
if mibBuilder.loadTexts: voipActiveCallStatCurrentActiveCalls.setDescription('Number of current active calls.')
voipActiveCallStatFailAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipActiveCallStatFailAttempts.setStatus('current')
if mibBuilder.loadTexts: voipActiveCallStatFailAttempts.setDescription('Failed attempts to setup active call.')
counterClearTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 14, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: counterClearTarget.setStatus('current')
if mibBuilder.loadTexts: counterClearTarget.setDescription('This managed object is used for identify the target on which the counter would be cleared. The target is encoded as: Byte 1: reserved Byte 2~3: reserved Byte 4: reserved Byte 5~11:each octet specifies a set of eight ports, with the first octet specifying ports 1 through 8, etc.')
counterClearOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 14, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: counterClearOps.setStatus('current')
if mibBuilder.loadTexts: counterClearOps.setDescription('The corresponding bit is set to 1 to start the operation. The various bit positions are: BIT 1: clear interface counters BIT 2: clear pvc packet counters BIT 3: clear port ATM counters BIT 4: clear pvc ATM counters BIT 5: clear DHCP counters BIT 6: clear IGMP counters BIT 7: clear IGMP port counters BIT 8: clear MACFF ARP counters BIT 9: clear current lineperf BIT 10: clear current 15 minute lineperf BIT 11: clear current 1 day lineperf')
counterClearVpi = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 14, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: counterClearVpi.setStatus('current')
if mibBuilder.loadTexts: counterClearVpi.setDescription('VPI of the pvc whose counters would be cleared.')
counterClearVci = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 14, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: counterClearVci.setStatus('current')
if mibBuilder.loadTexts: counterClearVci.setDescription('VCI of the pvc whose counters would be cleared.')
voipArp = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 1))
voipSip = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2))
voipIp = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 3))
voipDns = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 4))
voipH248 = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 10))
voipRing = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11))
voipActiveCall = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 13))
voipArpFlushOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipArpFlushOps.setStatus('current')
if mibBuilder.loadTexts: voipArpFlushOps.setDescription('Set the object to 1 to start flushing.')
voipArpShowTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 1, 2), )
if mibBuilder.loadTexts: voipArpShowTable.setStatus('current')
if mibBuilder.loadTexts: voipArpShowTable.setDescription('Display ARP entries learnt in specified slot.')
voipArpShowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 1, 2, 1), ).setIndexNames((0, "E5-111-MIB", "voipArpShowIp"))
if mibBuilder.loadTexts: voipArpShowEntry.setStatus('current')
if mibBuilder.loadTexts: voipArpShowEntry.setDescription('An entry of voipArpShowTable.')
voipArpShowIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipArpShowIp.setStatus('current')
if mibBuilder.loadTexts: voipArpShowIp.setDescription('')
voipArpShowMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 1, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipArpShowMac.setStatus('current')
if mibBuilder.loadTexts: voipArpShowMac.setDescription('')
maxNumOfVoipNumberPlan = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfVoipNumberPlan.setStatus('current')
if mibBuilder.loadTexts: maxNumOfVoipNumberPlan.setDescription('The maximum number of VoIP number plan supported by the system.')
voipNumberPlanTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 2), )
if mibBuilder.loadTexts: voipNumberPlanTable.setStatus('current')
if mibBuilder.loadTexts: voipNumberPlanTable.setDescription('Configure numbering plan entry of specified index in specified payphone charging table.')
voipNumberPlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 2, 1), ).setIndexNames((0, "E5-111-MIB", "voipNumberPlanName"), (0, "E5-111-MIB", "voipNumberPlanIndex"))
if mibBuilder.loadTexts: voipNumberPlanEntry.setStatus('current')
if mibBuilder.loadTexts: voipNumberPlanEntry.setDescription('An entry of voipNumberPlanTable.')
voipNumberPlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipNumberPlanName.setStatus('current')
if mibBuilder.loadTexts: voipNumberPlanName.setDescription('Numbering plan table name.')
voipNumberPlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipNumberPlanIndex.setStatus('current')
if mibBuilder.loadTexts: voipNumberPlanIndex.setDescription('')
voipNumberPlanPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 2, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipNumberPlanPattern.setStatus('current')
if mibBuilder.loadTexts: voipNumberPlanPattern.setDescription("Allowed characters are 0~9, *, T, S, P, x, ., | and range format characters that include '~', ',' and parenthesis '(', ')', brackets '[', ']', braces '{', '}' and at most one parenthesis pair are allowed, Examples: '002(*)', '0(*)', and '(*)'. '*' represents one or more digit characters 'x' represents any digit character 'T' timeout send of dial string, can only appear at the end of pattern 'S' star phone key (*) match character in dial plan 'P' pound key (#) match character in dial plan '.' represents zero or more repetitions of character or range that precedes it, can't use the dot character '.' in brackets '|' used to separate multiple number plan patterns [n~m,k] match a range of digits n~m or a specified digit k, '[' and ']' must pair and nest brackets is illegal '~' and ',' are allowed showing in brackets only '~' connected characters must be digit {n} match n digits")
voipNumberPlanRule = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 2, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipNumberPlanRule.setStatus('current')
if mibBuilder.loadTexts: voipNumberPlanRule.setDescription("Allowed characters are 0~9, and '\\c' stand for country code, '\\d' stand for national destination code, '\\1' stand for matched string enclosed by the parenthesis pair, '\\n' stand for no local disconnect '\\p' stand for partial pattern '\\t' stand for confirmation tone play '\\tr' stand for recall dial tone play 'deny' stand for the pattern specified is not allowed. Examples: '\\1', '\\c\\1', and '\\c\\d\\1'.")
voipNumberPlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipNumberPlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: voipNumberPlanRowStatus.setDescription('This object is used to create a new entry or delete an existing entry in this table.')
voipNumberPlanDftTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 3), )
if mibBuilder.loadTexts: voipNumberPlanDftTable.setStatus('current')
if mibBuilder.loadTexts: voipNumberPlanDftTable.setDescription('Configure the action rule after inter-digit timeout in specified entry of numbering plan table.')
voipNumberPlanDftEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 3, 1), ).setIndexNames((0, "E5-111-MIB", "voipNumberPlanName"))
if mibBuilder.loadTexts: voipNumberPlanDftEntry.setStatus('current')
if mibBuilder.loadTexts: voipNumberPlanDftEntry.setDescription('An entry of voipNumberDftPlanTable.')
voipNumberPlanDftRule = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 3, 1, 1), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipNumberPlanDftRule.setStatus('current')
if mibBuilder.loadTexts: voipNumberPlanDftRule.setDescription("Allowed characters are 0~9, and '\\c' stand for country code, '\\d' stand for national destination code, '\\1' stand for matched string enclosed by the parenthesis pair, '\\n' stand for no local disconnect '\\p' stand for partial pattern '\\t' stand for confirmation tone play 'deny' stand for the pattern specified is not allowed. Examples: '\\1', '\\c\\1', and '\\c\\d\\1'.")
digitSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 4))
timeoutSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 4, 1))
initialTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: initialTimeout.setStatus('current')
if mibBuilder.loadTexts: initialTimeout.setDescription('First digit must be dialed before this timeout, 1 ~ 20 seconds.')
interDigitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interDigitTimeout.setStatus('current')
if mibBuilder.loadTexts: interDigitTimeout.setDescription('If no pattern string is fully matched, the inter-digit timeout will trigger device to send out current dialed digits, 1 ~ 20 seconds.')
digitPauseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitPauseTimeout.setStatus('current')
if mibBuilder.loadTexts: digitPauseTimeout.setDescription('If a pattern string is end with the T pattern, the pattern string will not be matched until the timeout happens, 1 ~ 20 seconds.')
matchingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matchingTimeout.setStatus('current')
if mibBuilder.loadTexts: matchingTimeout.setDescription('If a pattern string is fully matched, and there are other pattern strings partially matched, the pattern string will be sent out if the timeout happens, 1 ~ 20 seconds.')
voipIpSetIp = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipIpSetIp.setStatus('current')
if mibBuilder.loadTexts: voipIpSetIp.setDescription("VoIP's IP address.")
voipIpSetVid = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 3, 2), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipIpSetVid.setStatus('current')
if mibBuilder.loadTexts: voipIpSetVid.setDescription("VoIP's VLAN ID.")
voipIpSetMask = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipIpSetMask.setStatus('current')
if mibBuilder.loadTexts: voipIpSetMask.setDescription("VoIP's network mask.")
voipDnsIp = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipDnsIp.setStatus('current')
if mibBuilder.loadTexts: voipDnsIp.setDescription('IP address.')
maxNumOfVoipRoute = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfVoipRoute.setStatus('current')
if mibBuilder.loadTexts: maxNumOfVoipRoute.setDescription('The maximum number of VoIP routing entries.')
voipRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 8), )
if mibBuilder.loadTexts: voipRouteTable.setStatus('current')
if mibBuilder.loadTexts: voipRouteTable.setDescription('')
voipRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 8, 1), ).setIndexNames((0, "E5-111-MIB", "voipRouteIp"), (0, "E5-111-MIB", "voipRouteGateway"), (0, "E5-111-MIB", "voipRouteMask"))
if mibBuilder.loadTexts: voipRouteEntry.setStatus('current')
if mibBuilder.loadTexts: voipRouteEntry.setDescription('An entry of voipRouteTable.')
voipRouteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipRouteIp.setStatus('current')
if mibBuilder.loadTexts: voipRouteIp.setDescription('IP address.')
voipRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipRouteGateway.setStatus('current')
if mibBuilder.loadTexts: voipRouteGateway.setDescription('Gateway IP.')
voipRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipRouteMask.setStatus('current')
if mibBuilder.loadTexts: voipRouteMask.setDescription('Network mask.')
voipRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipRouteMetric.setStatus('current')
if mibBuilder.loadTexts: voipRouteMetric.setDescription('Metric number of the route.')
voipRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: voipRouteRowStatus.setDescription('This object is used to create a new entry or delete an existing entry in this table.')
voipCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("usa", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipCountryCode.setStatus('current')
if mibBuilder.loadTexts: voipCountryCode.setDescription('Configure country (information) for VoIP services.')
voipBootRegDelay = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipBootRegDelay.setStatus('current')
if mibBuilder.loadTexts: voipBootRegDelay.setDescription('Registration delay in seconds.')
voipRingTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1), )
if mibBuilder.loadTexts: voipRingTable.setStatus('current')
if mibBuilder.loadTexts: voipRingTable.setDescription('')
voipRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1, 1), ).setIndexNames((0, "E5-111-MIB", "voipRingIndex"))
if mibBuilder.loadTexts: voipRingEntry.setStatus('current')
if mibBuilder.loadTexts: voipRingEntry.setDescription('An entry of voipRouteTable.')
voipRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipRingIndex.setStatus('current')
if mibBuilder.loadTexts: voipRingIndex.setDescription('')
voipRingName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipRingName.setStatus('current')
if mibBuilder.loadTexts: voipRingName.setDescription('Ring identifier used in SIP Alert-Info header field')
voipRingOn1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipRingOn1.setStatus('current')
if mibBuilder.loadTexts: voipRingOn1.setDescription('first on time in milliseconds')
voipRingOff1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipRingOff1.setStatus('current')
if mibBuilder.loadTexts: voipRingOff1.setDescription('first off time in milliseconds')
voipRingOn2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipRingOn2.setStatus('current')
if mibBuilder.loadTexts: voipRingOn2.setDescription('second on time in milliseconds')
voipRingOff2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipRingOff2.setStatus('current')
if mibBuilder.loadTexts: voipRingOff2.setDescription('second off time in milliseconds')
voipRingOn3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipRingOn3.setStatus('current')
if mibBuilder.loadTexts: voipRingOn3.setDescription('third on time in milliseconds')
voipRingOff3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipRingOff3.setStatus('current')
if mibBuilder.loadTexts: voipRingOff3.setDescription('third off time in milliseconds')
voipRingSetDefault = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipRingSetDefault.setStatus('current')
if mibBuilder.loadTexts: voipRingSetDefault.setDescription('Set the index to default value.')
voipActiveCallMaxActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipActiveCallMaxActiveCalls.setStatus('current')
if mibBuilder.loadTexts: voipActiveCallMaxActiveCalls.setDescription('Configure maximum number of concurrent active calls, 0~96.')
voipActiveCallThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipActiveCallThreshold.setStatus('current')
if mibBuilder.loadTexts: voipActiveCallThreshold.setDescription('The threshold to report or clear alarm, 50~100.')
voipMode = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sip", 1), ("csip", 2), ("h248", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipMode.setStatus('current')
if mibBuilder.loadTexts: voipMode.setDescription('Configure the Mode for VoIP Service.')
maxNumOfVoipH248MgConf = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfVoipH248MgConf.setStatus('current')
if mibBuilder.loadTexts: maxNumOfVoipH248MgConf.setDescription('The maximum number of virtual media gateway supported by the system.')
voipH248MgConf = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 10, 2))
voipH248MgName = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 10, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipH248MgName.setStatus('current')
if mibBuilder.loadTexts: voipH248MgName.setDescription('MG name.')
voipH248MgEnable = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 10, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipH248MgEnable.setStatus('current')
if mibBuilder.loadTexts: voipH248MgEnable.setDescription('Enable/disable MG.')
voipH248MgH248Profile = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 10, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipH248MgH248Profile.setStatus('current')
if mibBuilder.loadTexts: voipH248MgH248Profile.setDescription('H248 profile name used by MG.')
voipH248MgPort = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 10, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipH248MgPort.setStatus('current')
if mibBuilder.loadTexts: voipH248MgPort.setDescription('Port number used by MG.')
mibBuilder.exportSymbols("E5-111-MIB", voipStats=voipStats, alarmCurrParam6=alarmCurrParam6, adslMinL2RateForBatchSet=adslMinL2RateForBatchSet, dslRateTable=dslRateTable, igmpGroupMemberPorts=igmpGroupMemberPorts, voipSipLineConfSipCallSvcProfile=voipSipLineConfSipCallSvcProfile, arpproxyFlush=arpproxyFlush, dhcpRelayArpShowIp=dhcpRelayArpShowIp, aclProfileRuleStartTos=aclProfileRuleStartTos, dhcpRelayTestVid=dhcpRelayTestVid, dhcpStaticTable=dhcpStaticTable, macFfEntry=macFfEntry, dslRateXtucMinTxRate=dslRateXtucMinTxRate, dslRateXturMaxInterleaveDelay=dslRateXturMaxInterleaveDelay, seltCableType=seltCableType, ppvcEntry=ppvcEntry, rpvcRouteDomainRowStatus=rpvcRouteDomainRowStatus, paepvcCountAcSystemErrRx=paepvcCountAcSystemErrRx, adslStats=adslStats, adslLineConfMaxRxPower=adslLineConfMaxRxPower, voipSip=voipSip, ouiFilterAddr=ouiFilterAddr, delayedRebootTimer=delayedRebootTimer, macFfIndex=macFfIndex, mvlanTable=mvlanTable, mltRtr=mltRtr, securedClientStartIp=securedClientStartIp, igmpGroupPortV2Vid=igmpGroupPortV2Vid, dsBcastDisableEntry=dsBcastDisableEntry, alarmCurrTimeDescr=alarmCurrTimeDescr, dhcpRelayArpShowMac=dhcpRelayArpShowMac, h248ProfilePhysicalStartNumber=h248ProfilePhysicalStartNumber, userPriviledge=userPriviledge, aclProfileActionrpri=aclProfileActionrpri, voipLineInfoRtpLocalPort=voipLineInfoRtpLocalPort, mvlan=mvlan, maxNumOfDspProfiles=maxNumOfDspProfiles, voipPortTelTable=voipPortTelTable, dtpvcDSProfile=dtpvcDSProfile, subrPortTable=subrPortTable, paepvcRowStatus=paepvcRowStatus, sipProfilePrack=sipProfilePrack, adslLineConfTable=adslLineConfTable, pvcTable=pvcTable, igmpFilterEndIp=igmpFilterEndIp, igmpGroupV2Table=igmpGroupV2Table, enetSfpInfoTemperature=enetSfpInfoTemperature, pppoeAgentOptionMode=pppoeAgentOptionMode, rpvcGatewayVlanId=rpvcGatewayVlanId, mltRLoop=mltRLoop, paepvcCountGenericErrRx=paepvcCountGenericErrRx, voipLineInfoRtpTxCodecType2=voipLineInfoRtpTxCodecType2, voipNumberPlanIndex=voipNumberPlanIndex, snrMgnMode=snrMgnMode, ppvcMemberProfileDS=ppvcMemberProfileDS, sipProfileTable=sipProfileTable, voipH248LineConfMgName=voipH248LineConfMgName, adslAtucCarrierMask1ForBatchSet=adslAtucCarrierMask1ForBatchSet, aesSeriesCommon=aesSeriesCommon, dhcpRelayArpShowTable=dhcpRelayArpShowTable, mcastBwStartIp=mcastBwStartIp, ouiFilterVlanEnable=ouiFilterVlanEnable, dtpvcStateEntry=dtpvcStateEntry, aclProfileRuleDestStartPort=aclProfileRuleDestStartPort, ipbpvcInterfaceEntry=ipbpvcInterfaceEntry, dtpvcStateVpi=dtpvcStateVpi, aclProfileRuleParamMask=aclProfileRuleParamMask, mltRelayTable=mltRelayTable, sipProfileSipSvr=sipProfileSipSvr, macfilterTarget=macfilterTarget, ouiFilterEntry=ouiFilterEntry, voipLineInfoRtpLocalPort2=voipLineInfoRtpLocalPort2, alarmConfFacility=alarmConfFacility, mltForce=mltForce, mltRen=mltRen, ppvcMemberTable=ppvcMemberTable, mltVacDiff=mltVacDiff, alarmCurrParam4=alarmCurrParam4, igmpFilterEntry=igmpFilterEntry, igmpFilterStartIp=igmpFilterStartIp, macFilterPortEntry=macFilterPortEntry, pvcAcName=pvcAcName, dspProfileEchoTail=dspProfileEchoTail, queryVid=queryVid, igmpGroupvid=igmpGroupvid, dhcpSnoopCounterTable=dhcpSnoopCounterTable, voipArpShowTable=voipArpShowTable, sipCallSvcProfileFlashType=sipCallSvcProfileFlashType, pvcUsRateLimitTable=pvcUsRateLimitTable, digitPauseTimeout=digitPauseTimeout, voipPortOps=voipPortOps, alarmConfTarget=alarmConfTarget, portOperations=portOperations, pppoeAgent=pppoeAgent, adslLineConfAtucCarrierMask1=adslLineConfAtucCarrierMask1, extAlarmIndex=extAlarmIndex, alarmConfSeverity=alarmConfSeverity, sipProfileUriType=sipProfileUriType, mltVdcRing=mltVdcRing, h248ProfileSoftswitch=h248ProfileSoftswitch, macFilterEntry=macFilterEntry, igmpPortCtrlPduEntry=igmpPortCtrlPduEntry, macFfArpCounterReplyRX=macFfArpCounterReplyRX, dscpStatusEnable=dscpStatusEnable, voipLineInfoRtpRxCodecType=voipLineInfoRtpRxCodecType, powerMgmtParamEntry=powerMgmtParamEntry, rpvcVpi=rpvcVpi, sipCallSvcProfileStateMask=sipCallSvcProfileStateMask, dhcpSnoopRouteMap=dhcpSnoopRouteMap, dspProfileName=dspProfileName, macFfRowStatus=macFfRowStatus, rpvc=rpvc, igmpQryRespInterval=igmpQryRespInterval, dhcpRelay82FourthServer=dhcpRelay82FourthServer, aclProfileActionNumber=aclProfileActionNumber, arpproxyIp=arpproxyIp, adslModeForBatchSet=adslModeForBatchSet, ppvcMemberEntry=ppvcMemberEntry, macFfArpIP=macFfArpIP, voipLineInfoTable=voipLineInfoTable, macFfStatsArIP=macFfStatsArIP, ouiFilterVlanFilterMode=ouiFilterVlanFilterMode, voip=voip, paepvcSessionVpi=paepvcSessionVpi, macFfStaticIPEntry=macFfStaticIPEntry, voipPortTarget=voipPortTarget, seltOps=seltOps, h248ProfileName=h248ProfileName, multicast=multicast, mltOption=mltOption, pvcStateChannelType=pvcStateChannelType, macFfArpFlush=macFfArpFlush, voipMode=voipMode, adslAtucMaxTxPowerForBatchSet=adslAtucMaxTxPowerForBatchSet, macStatus=macStatus, arpproxyVpi=arpproxyVpi, enetSfpInfoRxpower=enetSfpInfoRxpower, igmpReportCntTotal=igmpReportCntTotal, securedClientIndex=securedClientIndex, pppoeAgentEntry=pppoeAgentEntry, ipbpvcDomainName=ipbpvcDomainName, voipLineInfoSipRemoteUri=voipLineInfoSipRemoteUri, dhcpRelay82VlanIp=dhcpRelay82VlanIp, voipH248LineConfDspProfile=voipH248LineConfDspProfile, snrMgnUcUpshift=snrMgnUcUpshift, mlt=mlt, dtpvcStateChannelType=dtpvcStateChannelType, sipProfileDscp=sipProfileDscp, mltTarget=mltTarget, igmpProfile=igmpProfile, paepvcCountPadsRx=paepvcCountPadsRx, delayedReboot=delayedReboot, rpvcRowStatus=rpvcRowStatus, h248ProfileEncode=h248ProfileEncode, dhcpRelay82Enable=dhcpRelay82Enable, ipbpvcIfDynamicMask=ipbpvcIfDynamicMask, powerMgmtL2ThreshRate=powerMgmtL2ThreshRate, igmpGroupPortvid=igmpGroupPortvid, powerMgmtParamTable=powerMgmtParamTable, ppvcPvid=ppvcPvid, maxNumOfH248Profiles=maxNumOfH248Profiles, macFilterPortTable=macFilterPortTable, seltTarget=seltTarget, igmpGroupPortV2SourceIp=igmpGroupPortV2SourceIp, voipH248MgH248Profile=voipH248MgH248Profile, rpvcRouteDomainIp=rpvcRouteDomainIp, voipIpSetIp=voipIpSetIp, mltDialToneDetected=mltDialToneDetected, paepvc=paepvc, aclProfileRuleDestEndPort=aclProfileRuleDestEndPort, voipH248LineConfTable=voipH248LineConfTable, voipLineStatusServiceStatus=voipLineStatusServiceStatus, pvcStateEntry=pvcStateEntry, igmpRobust=igmpRobust, dslRateMode=dslRateMode, igmpPortNumOfActiveGroups=igmpPortNumOfActiveGroups, pvcPriority=pvcPriority, counterClearOps=counterClearOps, subrPortEntry=subrPortEntry, maxNumOfMacFiltersPerPort=maxNumOfMacFiltersPerPort, macFfStatsVid=macFfStatsVid, mltVdcTip=mltVdcTip, adslLineConfL2ATPR=adslLineConfL2ATPR, auditQryEnable=auditQryEnable, macFilterAddr=macFilterAddr, mltResult=mltResult, dtpvcSpriority=dtpvcSpriority, voipLineInfoRtpLocalIp=voipLineInfoRtpLocalIp, auditQryRobust=auditQryRobust, mltVacRing=mltVacRing, dtpvcSuperChannel=dtpvcSuperChannel, gbondGroupName=gbondGroupName, sipProfileSipPort=sipProfileSipPort, sipCallSvcProfileNumberPlanTable=sipCallSvcProfileNumberPlanTable, arpproxyMac=arpproxyMac, voipNumberPlanDftTable=voipNumberPlanDftTable, igmpLastMemQryInterval=igmpLastMemQryInterval, voipLineInfoSipRemoteUri2=voipLineInfoSipRemoteUri2, voipRingEntry=voipRingEntry, enetSfpInfoTxBias=enetSfpInfoTxBias, dhcpRouteIP=dhcpRouteIP, sipCallSvcProfileName=sipCallSvcProfileName, adslLineStatusMode=adslLineStatusMode, igmpGroupnumberOfMembers=igmpGroupnumberOfMembers, dslRateLatencyMode=dslRateLatencyMode, arpproxyFlushEdgeRouterVid=arpproxyFlushEdgeRouterVid, switch=switch, tlspvcRowStatus=tlspvcRowStatus, seltStatus=seltStatus, ppvcVci=ppvcVci, arpproxyFlushInterfaceIp=arpproxyFlushInterfaceIp, powerMgmtAturMaxPSD=powerMgmtAturMaxPSD, voipLineInfoRtpRxPt2=voipLineInfoRtpRxPt2, voipIp=voipIp, voipLineInfoRtpTxPt2=voipLineInfoRtpTxPt2, adslPort=adslPort, ouiFilterEntryOld=ouiFilterEntryOld, dhcpStaticRowStatus=dhcpStaticRowStatus, paepvcProfileDS=paepvcProfileDS, adslMaxRxPowerForBatchSet=adslMaxRxPowerForBatchSet, dsBcastCtrlEnable=dsBcastCtrlEnable, adslPortUtilTx=adslPortUtilTx, rpvcRouteDomainTable=rpvcRouteDomainTable, snrMgnUrDownshift=snrMgnUrDownshift, ipbpvcIfDynamicVci=ipbpvcIfDynamicVci, interDigitTimeout=interDigitTimeout, macFfArpEntry=macFfArpEntry, mvlanTranslateStartIp=mvlanTranslateStartIp, adslAlarmProfileForBatchSet=adslAlarmProfileForBatchSet, ipbpvcInterfaceVci=ipbpvcInterfaceVci, maxNumOfOuiFiltersPerVlan=maxNumOfOuiFiltersPerVlan, seltLoopEstimateLengthMeter=seltLoopEstimateLengthMeter, paepvcSessionVci=paepvcSessionVci, dhcpSnoopMask=dhcpSnoopMask, macStats=macStats, adslLineUpTime=adslLineUpTime, mvlanEntry=mvlanEntry, paepvcPvid=paepvcPvid, powerMgmtAtucMaxPSD=powerMgmtAtucMaxPSD, h248ProfileStartRTPPort=h248ProfileStartRTPPort, h248Profile=h248Profile, maxNumOfSipProfiles=maxNumOfSipProfiles, voipLineInfoRtpTxCodecType=voipLineInfoRtpTxCodecType, dhcpRelayArp=dhcpRelayArp, paepvcStats=paepvcStats, alarmConfEntry=alarmConfEntry, alarmCurrDescr=alarmCurrDescr, h248ProfileMgc2Svr=h248ProfileMgc2Svr, gbondGroupDownRate=gbondGroupDownRate, ipbpvcDomainEntry=ipbpvcDomainEntry, isConfigChanged=isConfigChanged, adslLineConfEntry=adslLineConfEntry, ipbpvcDomainVlanRowStatus=ipbpvcDomainVlanRowStatus, fwUpgradeVersion=fwUpgradeVersion)
mibBuilder.exportSymbols("E5-111-MIB", mltOps=mltOps, voipActiveCallStat=voipActiveCallStat, voipRingOn1=voipRingOn1, adslAturInpForBatchSet=adslAturInpForBatchSet, arpproxyFlushTarget=arpproxyFlushTarget, mcastBwPortEntry=mcastBwPortEntry, rpvcRouteDomainVci=rpvcRouteDomainVci, macFfVid=macFfVid, counterClearTarget=counterClearTarget, paepvcCountPadoRx=paepvcCountPadoRx, aclProfileRuleSrcStartPort=aclProfileRuleSrcStartPort, voipNumberPlanName=voipNumberPlanName, ouiFilterPortFilterMode=ouiFilterPortFilterMode, macAddress=macAddress, mltRrg=mltRrg, sipProfilePbit=sipProfilePbit, paepvcProfileUS=paepvcProfileUS, dspProfileRowStatus=dspProfileRowStatus, voipLineStatusEntry=voipLineStatusEntry, igmpFilterTable=igmpFilterTable, userAuthServerPort=userAuthServerPort, mltCtg=mltCtg, statistics=statistics, initialTimeout=initialTimeout, dspProfilePlayBufferMaxDelay=dspProfilePlayBufferMaxDelay, dhcpSnoopVid=dhcpSnoopVid, ipbpvcInterfaceVpi=ipbpvcInterfaceVpi, dtpvcVpi=dtpvcVpi, macFfArpTable=macFfArpTable, macFfVlanTable=macFfVlanTable, snrMgnUcDownshift=snrMgnUcDownshift, voipRingIndex=voipRingIndex, sipProfile=sipProfile, paepvcVpi=paepvcVpi, voipH248MgPort=voipH248MgPort, igmpProfilePortTable=igmpProfilePortTable, arpproxyType=arpproxyType, voipH248=voipH248, powerMgmtL2MinRate=powerMgmtL2MinRate, aclProfileRowStatus=aclProfileRowStatus, voipH248MgName=voipH248MgName, adslLineConfDSPhyr=adslLineConfDSPhyr, paepvcCountPppLcpEchoReplyRx=paepvcCountPppLcpEchoReplyRx, voipLineInfoRtpRemotePort=voipLineInfoRtpRemotePort, rpvcRouteDomainEntry=rpvcRouteDomainEntry, adslLineConfAturMaxTxPower=adslLineConfAturMaxTxPower, ouiFilterRowStatusOld=ouiFilterRowStatusOld, alarmCurrParam1=alarmCurrParam1, enetStats=enetStats, alarmOps=alarmOps, powerMgmtL2Atpr=powerMgmtL2Atpr, dhcpRelay82EntryEnable=dhcpRelay82EntryEnable, adslLineProfileForBatchSet=adslLineProfileForBatchSet, aclProfileEntry=aclProfileEntry, ipbpvcIfDynamicIfIndex=ipbpvcIfDynamicIfIndex, usbCastCtrl=usbCastCtrl, ipbpvcRouteEntry=ipbpvcRouteEntry, voipH248StatusMgStatus=voipH248StatusMgStatus, alarmCurrTable=alarmCurrTable, macFfArpCounterTable=macFfArpCounterTable, ipbpvcEncap=ipbpvcEncap, dhcpRelay82FifthServer=dhcpRelay82FifthServer, paepvcCountVci=paepvcCountVci, ipbpvcRouteDynamicIp=ipbpvcRouteDynamicIp, alarmSeverityPortTable=alarmSeverityPortTable, adslLineConfPowerMgmt=adslLineConfPowerMgmt, voipArpShowIp=voipArpShowIp, ipbpvcVpi=ipbpvcVpi, severityThresh=severityThresh, dtpvcStateEncap=dtpvcStateEncap, alarmConfClearable=alarmConfClearable, sys=sys, dtpvcVci=dtpvcVci, dsbCastCtrl=dsbCastCtrl, securedClientService=securedClientService, ipbpvcIfDynamicTable=ipbpvcIfDynamicTable, voipSipLineConfDspProfile=voipSipLineConfDspProfile, dhcpSnoopMac=dhcpSnoopMac, paepvcCountPadtTx=paepvcCountPadtTx, gbondGroupPorts=gbondGroupPorts, voipSipLineConfEntry=voipSipLineConfEntry, sipProfileRowStatus=sipProfileRowStatus, pvcUsRateLimitEnable=pvcUsRateLimitEnable, paepvcSessionState=paepvcSessionState, ipbpvcDomainVlanId=ipbpvcDomainVlanId, macff=macff, mcastBwRowStatus=mcastBwRowStatus, digitSetup=digitSetup, securedClientEnable=securedClientEnable, voipLineInfoRtpTxPt=voipLineInfoRtpTxPt, voipRingOff1=voipRingOff1, enetMtu=enetMtu, enetSfpInfoVoltage=enetSfpInfoVoltage, adslPortOps2=adslPortOps2, currNumOfMacFiltersInSystem=currNumOfMacFiltersInSystem, userAuthDefaultPriviledge=userAuthDefaultPriviledge, adslLineConfAturInp=adslLineConfAturInp, dhcpRelay82SecondaryServer=dhcpRelay82SecondaryServer, h248ProfilePhysicalPrefix=h248ProfilePhysicalPrefix, igmpQueryCntTotal=igmpQueryCntTotal, mvlanRowStatus=mvlanRowStatus, maxNumOfQryVid=maxNumOfQryVid, calixProducts=calixProducts, igmpProfileMaxGroup=igmpProfileMaxGroup, macFfArpCounterEntry=macFfArpCounterEntry, voipDns=voipDns, delayedRebootCancel=delayedRebootCancel, dhcpRouteGwIP=dhcpRouteGwIP, ppvcMemberVci=ppvcMemberVci, voipH248Status=voipH248Status, igmpPortCtrlPduLeaveCnt=igmpPortCtrlPduLeaveCnt, pvcVci=pvcVci, voipLineInfoRtpRxCodecType2=voipLineInfoRtpRxCodecType2, h248ProfileMgcPort=h248ProfileMgcPort, dslRate=dslRate, dhcpAck=dhcpAck, snrMgnTable=snrMgnTable, adslLineConfAnnexI=adslLineConfAnnexI, snrMgnUcTarget=snrMgnUcTarget, dslRateEntry=dslRateEntry, dspProfileG711Vpi=dspProfileG711Vpi, arpproxyTable=arpproxyTable, ipbpvcIfDynamicIp=ipbpvcIfDynamicIp, dhcpRouteIndex=dhcpRouteIndex, macFfVlanRowstatus=macFfVlanRowstatus, voipPortGainTable=voipPortGainTable, dhcpRelay82Info=dhcpRelay82Info, paepvcCountSrvcnameErrRx=paepvcCountSrvcnameErrRx, dslRateXtucMaxTxRate=dslRateXtucMaxTxRate, dhcpRelay82Suboption2Enable=dhcpRelay82Suboption2Enable, dtpvcStateCPriority=dtpvcStateCPriority, voipRouteMetric=voipRouteMetric, voipRingSetDefault=voipRingSetDefault, snrMgnEntry=snrMgnEntry, tlspvcSvid=tlspvcSvid, ppvcMemberRowStatus=ppvcMemberRowStatus, rpvcIp=rpvcIp, igmpGroupPortEntry=igmpGroupPortEntry, vlanIsolationTable=vlanIsolationTable, ipbpvcInterfaceIfIndex=ipbpvcInterfaceIfIndex, dhcpStaticEntry=dhcpStaticEntry, dhcpOffer=dhcpOffer, dhcpAckBySnoopFull=dhcpAckBySnoopFull, mvlanTranslateEntry=mvlanTranslateEntry, snrMgnUrMax=snrMgnUrMax, igmpGroupTable=igmpGroupTable, igmpCountPortEntry=igmpCountPortEntry, h248ProfileMgcSvr=h248ProfileMgcSvr, dhcpSnoopSmacverifyEnable=dhcpSnoopSmacverifyEnable, userAuthServerSecret=userAuthServerSecret, sipCallSvcProfileRowStatus=sipCallSvcProfileRowStatus, voipPortTXGain=voipPortTXGain, alarmCurrIndex=alarmCurrIndex, macFfVlanEntry=macFfVlanEntry, dhcpRouteTable=dhcpRouteTable, voipSipLineConfSipProfile=voipSipLineConfSipProfile, ipbpvcEdgeRouterVid=ipbpvcEdgeRouterVid, accessCtrl=accessCtrl, dhcpRelayTestStatus=dhcpRelayTestStatus, maxNumOfVoipRoute=maxNumOfVoipRoute, voipIpSetMask=voipIpSetMask, voipRingOff2=voipRingOff2, dspProfileCodec=dspProfileCodec, sipProfileEntry=sipProfileEntry, mltVdcDiff=mltVdcDiff, igmpProfileEntry=igmpProfileEntry, h248ProfileMgc2Port=h248ProfileMgc2Port, dslRateXturMinTxRate=dslRateXturMinTxRate, voipH248LineConfVBDProfile=voipH248LineConfVBDProfile, delayedRebootRemainingTime=delayedRebootRemainingTime, userAuthMode=userAuthMode, voipActiveCall=voipActiveCall, mltVacTip=mltVacTip, voipPortH248TermName=voipPortH248TermName, port=port, pvcStateVci=pvcStateVci, igmpEnable=igmpEnable, voipLineInfoRtpRemoteIp2=voipLineInfoRtpRemoteIp2, rpvcGatewayPriority=rpvcGatewayPriority, dhcpSnoopIpEntry=dhcpSnoopIpEntry, dhcpRelayTest=dhcpRelayTest, userEntry=userEntry, pvcStateEncap=pvcStateEncap, ipbpvcInterfaceIp=ipbpvcInterfaceIp, adslL0TimeForBatchSet=adslL0TimeForBatchSet, sipProfileKeepAlive=sipProfileKeepAlive, aclProfileRuleSrcIP=aclProfileRuleSrcIP, aclProfileRuleName=aclProfileRuleName, extAlarmTriggeredMode=extAlarmTriggeredMode, igmpProfilePortEntry=igmpProfilePortEntry, sipCallSvcProfileTable=sipCallSvcProfileTable, paepvcSessionsrvcname=paepvcSessionsrvcname, voipNumberPlanRowStatus=voipNumberPlanRowStatus, arpproxyEntry=arpproxyEntry, counterClearVci=counterClearVci, snrMgnUrTarget=snrMgnUrTarget, dhcpRelayArpShowEntry=dhcpRelayArpShowEntry, voipLineInfoRtpRemotePort2=voipLineInfoRtpRemotePort2, stdioTimeout=stdioTimeout, adslLineConfAtucMaxTxPower=adslLineConfAtucMaxTxPower, pvcStateTable=pvcStateTable, macFilterPortEnable=macFilterPortEnable, ipbpvcRouteDynamicType=ipbpvcRouteDynamicType, ipbpvcRouteDynamicMask=ipbpvcRouteDynamicMask, adslL0toL2RateForBatchSet=adslL0toL2RateForBatchSet, voipH248StatusMgName=voipH248StatusMgName, sipProfileRegExpire=sipProfileRegExpire, userPassword=userPassword, paepvcSessionId=paepvcSessionId, tlspvcTable=tlspvcTable, arpproxyFlushInterfaceVid=arpproxyFlushInterfaceVid, sipProfileRegSvr=sipProfileRegSvr, voipRouteIp=voipRouteIp, macFfArpCounterReplyRXDrop=macFfArpCounterReplyRXDrop, igmpProfileRowStatus=igmpProfileRowStatus, macFfStatsEntry=macFfStatsEntry, igmpProfilePortProfile=igmpProfilePortProfile, seltLoopEstimateLengthFt=seltLoopEstimateLengthFt, ipbpvcPvid=ipbpvcPvid, macFilterMacCountForBatchSet=macFilterMacCountForBatchSet, igmpGroupPortTable=igmpGroupPortTable, igmpCount=igmpCount, auditQryInterval=auditQryInterval, userAuthServerIp=userAuthServerIp, enetSfpInfoEntry=enetSfpInfoEntry, rpvcGatewayRowStatus=rpvcGatewayRowStatus, adslPortOps=adslPortOps, adslAturMaxTxPowerForBatchSet=adslAturMaxTxPowerForBatchSet, ipbpvcRouteNextHop=ipbpvcRouteNextHop, aclSetTable=aclSetTable, maxNumOfVoipNumberPlan=maxNumOfVoipNumberPlan, pppoeAgentInfo=pppoeAgentInfo, adslAtucInpForBatchSet=adslAtucInpForBatchSet, mltVMetering=mltVMetering, powerMgmtL2Atprt=powerMgmtL2Atprt, mvlanIndex=mvlanIndex, enetMtuEntry=enetMtuEntry, dhcpRelay82Table=dhcpRelay82Table, dspProfileEntry=dspProfileEntry, dsBcastDisableTable=dsBcastDisableTable, voipPortH248TerminationTable=voipPortH248TerminationTable, enetSfpInfoTxpower=enetSfpInfoTxpower, voipLineInfoSipLocalUri2=voipLineInfoSipLocalUri2, adslPortUtilRx=adslPortUtilRx, maxNumberOfIgmpProfiles=maxNumberOfIgmpProfiles, paepvcAcName=paepvcAcName, voipPortTel=voipPortTel, extAlarmTable=extAlarmTable, dtpvcUSProfile=dtpvcUSProfile, h248ProfileEphemeralSuffixLength=h248ProfileEphemeralSuffixLength, aclProfileRuleDestIP=aclProfileRuleDestIP, ipbpvcRouteIp=ipbpvcRouteIp, e5x111=e5x111, h248ProfileEndRTPPort=h248ProfileEndRTPPort)
mibBuilder.exportSymbols("E5-111-MIB", igmpProfileEnable=igmpProfileEnable, pvcStatePvid=pvcStatePvid, ouiFilterPortEnable=ouiFilterPortEnable, fwUpgradeCheck=fwUpgradeCheck, adslL2TimeForBatchSet=adslL2TimeForBatchSet, macffStats=macffStats, voipNumberPlanRule=voipNumberPlanRule, qryVidType=qryVidType, voipLineInfoEntry=voipLineInfoEntry, arpproxyInterfaceVid=arpproxyInterfaceVid, voipPortEnableStatus=voipPortEnableStatus, igmpGroupEntry=igmpGroupEntry, dhcpRouteMask=dhcpRouteMask, voipRouteGateway=voipRouteGateway, ipbpvcRoutePriority=ipbpvcRoutePriority, dhcpSnoopPortTable=dhcpSnoopPortTable, pvcRowStatus=pvcRowStatus, rpvcRouteDomainNetmask=rpvcRouteDomainNetmask, adslPortTarget=adslPortTarget, alarmCurrSeverity=alarmCurrSeverity, dtpvcServiceName=dtpvcServiceName, igmpLeaveCntTotal=igmpLeaveCntTotal, arpproxyIfIndex=arpproxyIfIndex, dhcpRouteEntry=dhcpRouteEntry, ipbpvcDomainVlanTable=ipbpvcDomainVlanTable, paepvcCountVpi=paepvcCountVpi, h248ProfileEphemeralStartNumber=h248ProfileEphemeralStartNumber, ipbpvcStats=ipbpvcStats, dhcpSnoopTarget=dhcpSnoopTarget, macFfStatsSrcMask=macFfStatsSrcMask, voipActiveCallMaxActiveCalls=voipActiveCallMaxActiveCalls, ipbpvcEntry=ipbpvcEntry, macFfSrcIP=macFfSrcIP, igmpLastMemQryRobust=igmpLastMemQryRobust, paepvcSessionUptime=paepvcSessionUptime, h248ProfileVbd=h248ProfileVbd, mltVRing=mltVRing, adslLineConfMaxL2Rate=adslLineConfMaxL2Rate, paepvcSessionacname=paepvcSessionacname, gbondGroupEntry=gbondGroupEntry, aclProfileRuleDmac=aclProfileRuleDmac, paepvcCountPadtRx=paepvcCountPadtRx, aclSetEntry=aclSetEntry, voipNumberPlanDftEntry=voipNumberPlanDftEntry, ipbpvcInterfaceVid=ipbpvcInterfaceVid, macFfArIP=macFfArIP, extAlarmname=extAlarmname, dsBcastDisableVlanId=dsBcastDisableVlanId, arpproxyFlushInterfaceMask=arpproxyFlushInterfaceMask, powerMgmtL0Time=powerMgmtL0Time, profile=profile, mcastBwEntry=mcastBwEntry, paepvcCountPppLcpEchoReqRx=paepvcCountPppLcpEchoReqRx, counterClearVpi=counterClearVpi, ppvc=ppvc, ipbpvcInterfaceMask=ipbpvcInterfaceMask, igmpVersion=igmpVersion, maxNumOfMcastBw=maxNumOfMcastBw, dtpvcEntry=dtpvcEntry, mltDialToneDelay=mltDialToneDelay, alarmCurrParam8=alarmCurrParam8, dtpvcStateSvid=dtpvcStateSvid, powerMgmtL2Time=powerMgmtL2Time, rpvcArpAgingTime=rpvcArpAgingTime, igmpGroupV2Ip=igmpGroupV2Ip, mcastBwBandwidth=mcastBwBandwidth, mltRtg=mltRtg, mcastBwTable=mcastBwTable, igmpProfileTable=igmpProfileTable, voipArp=voipArp, dhcpStats=dhcpStats, user=user, snrMgnUcMin=snrMgnUcMin, adslPortUtilEntry=adslPortUtilEntry, dscpPortTable=dscpPortTable, dhcpSnoopIpTable=dhcpSnoopIpTable, sipCallSvcProfileFlashInfo=sipCallSvcProfileFlashInfo, sipCallSvcProfileNumberPlanOn=sipCallSvcProfileNumberPlanOn, sipCallSvcProfileNumberPlanNdc=sipCallSvcProfileNumberPlanNdc, maxNumOfOuiFiltersInSystem=maxNumOfOuiFiltersInSystem, securedClientEndIp=securedClientEndIp, igmpNumOfActiveGroups=igmpNumOfActiveGroups, h248ProfileEphemeralPrefix=h248ProfileEphemeralPrefix, usBcastCtrlRate=usBcastCtrlRate, paepvcServiceName=paepvcServiceName, tlspvc=tlspvc, igmpGroupV2Vid=igmpGroupV2Vid, clear=clear, maxNumOfPriorityPvcs=maxNumOfPriorityPvcs, ppvcRowStatus=ppvcRowStatus, securedClientEntry=securedClientEntry, paepvcCountEntry=paepvcCountEntry, dtpvcStateVci=dtpvcStateVci, h248ProfileRowStatus=h248ProfileRowStatus, dhcpSnoopIp=dhcpSnoopIp, dtpvcStateTable=dtpvcStateTable, h248ProfileTransport=h248ProfileTransport, mltCtr=mltCtr, ppvcVpi=ppvcVpi, vlanIsolationRowStatus=vlanIsolationRowStatus, macFfStaticIPRowStatus=macFfStaticIPRowStatus, macFfStatsTable=macFfStatsTable, macFfStaticIPPort=macFfStaticIPPort, pvcStatePriority=pvcStatePriority, ppvcMemberVpi=ppvcMemberVpi, paepvcSessionEntry=paepvcSessionEntry, pvcVpi=pvcVpi, voipCountryCode=voipCountryCode, rpvcArpFlush=rpvcArpFlush, aclProfileRuleProtocol=aclProfileRuleProtocol, macFfArpCounterRequestRX=macFfArpCounterRequestRX, mvlanTranslateTable=mvlanTranslateTable, sipCallSvcProfileDtmf=sipCallSvcProfileDtmf, pppoeAgentTable=pppoeAgentTable, dslRateXtucMaxInterleaveDelay=dslRateXtucMaxInterleaveDelay, dhcpSnoop=dhcpSnoop, voipLineInfoRtpRemoteIp=voipLineInfoRtpRemoteIp, dhcpRelay82ThirdServer=dhcpRelay82ThirdServer, dhcpRouteVid=dhcpRouteVid, igmpGroupPortIp=igmpGroupPortIp, macPort=macPort, macEntry=macEntry, macFfStaticIPMask=macFfStaticIPMask, voipNumberPlanPattern=voipNumberPlanPattern, macFfArpMac=macFfArpMac, igmpFilterIndex=igmpFilterIndex, arpproxyVci=arpproxyVci, adslLineConfUSPhyr=adslLineConfUSPhyr, pvcHelloTime=pvcHelloTime, igmpGroupV2NumOfMembers=igmpGroupV2NumOfMembers, alarmCurrParam3=alarmCurrParam3, igmpCountPortEnable=igmpCountPortEnable, dhcpRelay82PrimaryServer=dhcpRelay82PrimaryServer, adslLineConfAdslMode=adslLineConfAdslMode, igmpProfileName=igmpProfileName, ipbpvcVci=ipbpvcVci, ouiFilterVlanEntry=ouiFilterVlanEntry, dtpvcStateCvid=dtpvcStateCvid, qryVidStatusTable=qryVidStatusTable, calixRegistrations=calixRegistrations, adslAturCarrierMaskForBatchSet=adslAturCarrierMaskForBatchSet, pvcServiceName=pvcServiceName, alarmCurrOccurTime=alarmCurrOccurTime, rpvcGatewayTable=rpvcGatewayTable, arpproxy=arpproxy, adslPortUtilTable=adslPortUtilTable, igmpQryInterval=igmpQryInterval, voipNumberPlanEntry=voipNumberPlanEntry, voipLineStatusPhoneStatus=voipLineStatusPhoneStatus, rpvcGatewayIp=rpvcGatewayIp, voipPortTelEntry=voipPortTelEntry, voipSipLineConfTable=voipSipLineConfTable, macFfSrcMask=macFfSrcMask, dspProfileG726Vpi=dspProfileG726Vpi, dtpvcAcName=dtpvcAcName, mcastBwIndex=mcastBwIndex, adslMaxL2RateForBatchSet=adslMaxL2RateForBatchSet, ipbpvcEdgeRouterTable=ipbpvcEdgeRouterTable, tlspvcProfileUS=tlspvcProfileUS, dhcpSnoopPortEntry=dhcpSnoopPortEntry, paepvcCvid=paepvcCvid, igmpGroupV2MemberPorts=igmpGroupV2MemberPorts, igmpTimer=igmpTimer, ipbpvcPriority=ipbpvcPriority, mvlanName=mvlanName, paepvcCountTable=paepvcCountTable, dspProfilePlayBufferMinDelay=dspProfilePlayBufferMinDelay, ipbpvcEdgeRouterRowStatus=ipbpvcEdgeRouterRowStatus, pvcUsRateLimitEntry=pvcUsRateLimitEntry, paepvcPriority=paepvcPriority, voipPortGainEntry=voipPortGainEntry, aclSetVci=aclSetVci, macFfArpCounterRequestTX=macFfArpCounterRequestTX, sipCallSvcProfileNumberPlanCc=sipCallSvcProfileNumberPlanCc, aclProfileRuleSrcEndPort=aclProfileRuleSrcEndPort, adslPortBatchSet=adslPortBatchSet, dhcpRelay82ActiveServer=dhcpRelay82ActiveServer, arpproxyDhcpIp=arpproxyDhcpIp, voipLineStatusTable=voipLineStatusTable, timeoutSetup=timeoutSetup, snrMgnUrUpshift=snrMgnUrUpshift, extAlarmstatus=extAlarmstatus, adslLineStatusEntry=adslLineStatusEntry, voipActiveCallStatFailAttempts=voipActiveCallStatFailAttempts, igmpCountPortTable=igmpCountPortTable, voipRouteTable=voipRouteTable, auditQuery=auditQuery, voipArpShowEntry=voipArpShowEntry, adslLineConfAturCarrierMask=adslLineConfAturCarrierMask, dtpvcCpriority=dtpvcCpriority, qryVidRowStatus=qryVidRowStatus, snrMgnUrMin=snrMgnUrMin, dhcpRelayArpFlushOps=dhcpRelayArpFlushOps, dsBcastCtrlRate=dsBcastCtrlRate, dsBcastDisableRowStatus=dsBcastDisableRowStatus, adslLineConfL0toL2Rate=adslLineConfL0toL2Rate, macFfTable=macFfTable, arpproxyInterfaceIp=arpproxyInterfaceIp, voipArpShowMac=voipArpShowMac, igmpGroupPortV2Table=igmpGroupPortV2Table, dhcpDiscovery=dhcpDiscovery, voipActiveCallStatCurrentActiveCalls=voipActiveCallStatCurrentActiveCalls, mvlanEgressPorts=mvlanEgressPorts, pvcEntry=pvcEntry, adslL2ATPRForBatchSet=adslL2ATPRForBatchSet, qryVidConfEntry=qryVidConfEntry, adslLineConfMinL2Rate=adslLineConfMinL2Rate, extAlarm=extAlarm, voipRouteEntry=voipRouteEntry, maxNumOfOuiFiltersPerPort=maxNumOfOuiFiltersPerPort, voipH248LineConfEntry=voipH248LineConfEntry, dtpvcTable=dtpvcTable, ouiFilterPortEntry=ouiFilterPortEntry, dtpvc=dtpvc, pvcPvid=pvcPvid, sipProfileName=sipProfileName, selt=selt, dspProfileTable=dspProfileTable, ouiFilterPortTable=ouiFilterPortTable, dhcpSnoopMaxcntMode=dhcpSnoopMaxcntMode, h248ProfileEntry=h248ProfileEntry, macfilterOps=macfilterOps, usBcastCtrlEnable=usBcastCtrlEnable, dhcpSnoopCounterEntry=dhcpSnoopCounterEntry, aclProfileRuleSmac=aclProfileRuleSmac, vlanIsolationEntry=vlanIsolationEntry, h248ProfileDscp=h248ProfileDscp, ipbpvcEdgeRouterIp=ipbpvcEdgeRouterIp, aclProfileRuleEtype=aclProfileRuleEtype, paepvcHelloTime=paepvcHelloTime, dscpMappingEntry=dscpMappingEntry, aclProfileRulePriority=aclProfileRulePriority, ppvcPriority=ppvcPriority, voipRing=voipRing, maxNumOfPppoeDhcpRelay82Conf=maxNumOfPppoeDhcpRelay82Conf, dhcpRequest=dhcpRequest, paepvcSessionTable=paepvcSessionTable, ipbpvcRouteDynamicNextHop=ipbpvcRouteDynamicNextHop, sipProfileProxySvr=sipProfileProxySvr, igmpPortCtrlAuditLeaveCnt=igmpPortCtrlAuditLeaveCnt, ipbpvcIfDynamicEntry=ipbpvcIfDynamicEntry, voipNumberPlanDftRule=voipNumberPlanDftRule, paepvcVci=paepvcVci, gbondGroupTable=gbondGroupTable, dtpvcCvid=dtpvcCvid, aclSetRowStatus=aclSetRowStatus, macFfArpPort=macFfArpPort, mcastBwPortBandwidth=mcastBwPortBandwidth, ipbpvc=ipbpvc, mvlanUntaggedPorts=mvlanUntaggedPorts, dtpvcHelloTime=dtpvcHelloTime, macFfVlanUnknownUnicast=macFfVlanUnknownUnicast, iesSeriesCommon=iesSeriesCommon, powerMgmtPSDEntry=powerMgmtPSDEntry)
mibBuilder.exportSymbols("E5-111-MIB", sipCallSvcProfileEntry=sipCallSvcProfileEntry, ipbpvcDomainDhcpVlanEnable=ipbpvcDomainDhcpVlanEnable, powerMgmtPSDTable=powerMgmtPSDTable, ipbpvcRouteRowStatus=ipbpvcRouteRowStatus, paepvcCPriority=paepvcCPriority, dhcp=dhcp, aclSetVpi=aclSetVpi, accessSwitchCommonATM=accessSwitchCommonATM, ipbpvcIfDynamicVpi=ipbpvcIfDynamicVpi, adslLineConfAnnexM=adslLineConfAnnexM, pvc=pvc, h248ProfileMgc2On=h248ProfileMgc2On, dscpPortEntry=dscpPortEntry, ipbpvcInterfaceRowStatus=ipbpvcInterfaceRowStatus, enetSfpInfoTable=enetSfpInfoTable, h248ProfilePbit=h248ProfilePbit, h248ProfilePhysicalSuffixLength=h248ProfilePhysicalSuffixLength, dhcpRelayTestIp=dhcpRelayTestIp, adslLineConfAtucInp=adslLineConfAtucInp, maxNumOfSipCallSvcProfiles=maxNumOfSipCallSvcProfiles, ipbpvcRouteDynamicPriority=ipbpvcRouteDynamicPriority, aclProfileTable=aclProfileTable, ipbpvcTable=ipbpvcTable, igmpGroupIp=igmpGroupIp, sipProfileRegSvrPort=sipProfileRegSvrPort, sipCallSvcProfileFax=sipCallSvcProfileFax, adslLineConfL2Time=adslLineConfL2Time, pvcStateVpi=pvcStateVpi, sipProfileProxySvrPort=sipProfileProxySvrPort, paepvcCountPadrTx=paepvcCountPadrTx, h248ProfileForceVer=h248ProfileForceVer, arpproxyFlushEdgeRouterIp=arpproxyFlushEdgeRouterIp, ouiFilterAddrOld=ouiFilterAddrOld, ipbpvcRouteTable=ipbpvcRouteTable, mltCrg=mltCrg, dspProfileG729Vpi=dspProfileG729Vpi, ouiFilterTableOld=ouiFilterTableOld, userTable=userTable, aclSetProfileName=aclSetProfileName, rpvcVci=rpvcVci, adslLineConfAtucCarrierMask0=adslLineConfAtucCarrierMask0, alarmCurrParam7=alarmCurrParam7, ipbpvcRowStatus=ipbpvcRowStatus, mcastDefaultBandwidth=mcastDefaultBandwidth, mltDetectedDtmfCount=mltDetectedDtmfCount, paepvcCountPadiTx=paepvcCountPadiTx, arpproxyFlushOps=arpproxyFlushOps, dhcpRelay82ServerVid=dhcpRelay82ServerVid, macFfStatsSrcIP=macFfStatsSrcIP, adslLineConfNitro=adslLineConfNitro, alarmCurrEntry=alarmCurrEntry, macFfArpVid=macFfArpVid, dhcpRelay82VlanGateway=dhcpRelay82VlanGateway, dtpvcStateSPriority=dtpvcStateSPriority, ipbpvcRouteMask=ipbpvcRouteMask, voipLineInfoSipLocalUri=voipLineInfoSipLocalUri, adslLineConfL0Time=adslLineConfL0Time, adslLineConfOptionMask=adslLineConfOptionMask, maxNumOfMacFfVlanInSystem=maxNumOfMacFfVlanInSystem, dtpvcSvid=dtpvcSvid, ouiFilterRowStatus=ouiFilterRowStatus, gbondGroupUpRate=gbondGroupUpRate, macFfStaticIPVid=macFfStaticIPVid, igmpGroupV2Entry=igmpGroupV2Entry, alarmCurrTrapOid=alarmCurrTrapOid, ipbpvcDomainTable=ipbpvcDomainTable, snrMgnUcMax=snrMgnUcMax, acl=acl, aclProfileRuleVid=aclProfileRuleVid, macfilterBatchSet=macfilterBatchSet, adslOptionMaskForBatchSet=adslOptionMaskForBatchSet, ipbpvcRouteDynamicTable=ipbpvcRouteDynamicTable, sipCallSvcProfileSoftSwitchType=sipCallSvcProfileSoftSwitchType, maxNumOfMacFiltersInSystem=maxNumOfMacFiltersInSystem, voipRouteMask=voipRouteMask, ipbpvcDomainVlanEntry=ipbpvcDomainVlanEntry, ipbpvcProfileUS=ipbpvcProfileUS, ppvcEncap=ppvcEncap, dhcpRelayArpShowVid=dhcpRelayArpShowVid, voipBootRegDelay=voipBootRegDelay, voipRingOff3=voipRingOff3, fwUpgradeStatus=fwUpgradeStatus, adslL2ATPRTForBatchSet=adslL2ATPRTForBatchSet, adslLineConfPowerMode=adslLineConfPowerMode, voipProfile=voipProfile, voipPort=voipPort, mltRelayEntry=mltRelayEntry, dhcpSnoopOps=dhcpSnoopOps, maxNumOfVoipH248MgConf=maxNumOfVoipH248MgConf, tlspvcVpi=tlspvcVpi, voipActiveCallThreshold=voipActiveCallThreshold, rpvcRouteDomainVpi=rpvcRouteDomainVpi, dslRateXturMaxTxRate=dslRateXturMaxTxRate, macDisplayTarget=macDisplayTarget, tlspvcVci=tlspvcVci, dhcpRelay82Entry=dhcpRelay82Entry, powerMgmtL2MaxRate=powerMgmtL2MaxRate, mcastBwEndIp=mcastBwEndIp, rpvcDSProfile=rpvcDSProfile, macFilterPortFilterMode=macFilterPortFilterMode, igmpCountPortLimit=igmpCountPortLimit, tlspvcEntry=tlspvcEntry, igmpGroupPortV2Entry=igmpGroupPortV2Entry, pvcProfileUS=pvcProfileUS, adslLineStatusTable=adslLineStatusTable, rpvcGatewayEntry=rpvcGatewayEntry, userRowStatus=userRowStatus, alarmconf=alarmconf, igmpLeaveMode=igmpLeaveMode, mvlanTranslateEndIp=mvlanTranslateEndIp, alarmCurrParam2=alarmCurrParam2, sipProfileSe=sipProfileSe, tlspvcProfileDS=tlspvcProfileDS, mcastBandwidth=mcastBandwidth, dscpMappingTable=dscpMappingTable, macFilterRowStatus=macFilterRowStatus, e5x100=e5x100, aclProfileRuleNumber=aclProfileRuleNumber, extAlarmEntry=extAlarmEntry, voipH248MgConf=voipH248MgConf, paepvcCountGenericErrTx=paepvcCountGenericErrTx, dspProfileG723Vpi=dspProfileG723Vpi, voipIpSetVid=voipIpSetVid, maxNumOfMvlan=maxNumOfMvlan, mvlanTranslateIndex=mvlanTranslateIndex, ipbpvcDomainRowStatus=ipbpvcDomainRowStatus, sipCallSvcProfilePasswdOn=sipCallSvcProfilePasswdOn, dhcpRelayTestOps=dhcpRelayTestOps, dhcpStaticIpAddr=dhcpStaticIpAddr, dhcpSnoopGateway=dhcpSnoopGateway, macFfArpCounterReplyTX=macFfArpCounterReplyTX, dscp=dscp, voipLineInfoRtpRxPt=voipLineInfoRtpRxPt, voipLineInfoRtpLocalIp2=voipLineInfoRtpLocalIp2, dscpMapPriority=dscpMapPriority, voipH248MgEnable=voipH248MgEnable, maxNumOfDhcpStaticIp=maxNumOfDhcpStaticIp, alarmConfId=alarmConfId, qryVid=qryVid, vlanIsolation=vlanIsolation, aclProfileRuleDestIPMask=aclProfileRuleDestIPMask, securedClientTable=securedClientTable, macFfArpCounterRequestRXDrop=macFfArpCounterRequestRXDrop, voipArpFlushOps=voipArpFlushOps, ppvcMemberPriority=ppvcMemberPriority, macfilter=macfilter, paepvcCountPppLcpCfgReqRx=paepvcCountPppLcpCfgReqRx, qryVidConfTable=qryVidConfTable, igmpGroupPortV2Ip=igmpGroupPortV2Ip, h248ProfileTable=h248ProfileTable, alarmSeverityPortEntry=alarmSeverityPortEntry, aclProfileRuleSrcIPMask=aclProfileRuleSrcIPMask, voipRingTable=voipRingTable, ipbpvcInterfaceTable=ipbpvcInterfaceTable, pvcUsRateLimit=pvcUsRateLimit, dhcpSnoopEnable=dhcpSnoopEnable, gbondGroupRowStatus=gbondGroupRowStatus, ouiFilterTable=ouiFilterTable, macFfStaticIPTable=macFfStaticIPTable, mcastBwPortEnable=mcastBwPortEnable, dhcpRelay82Suboption2Info=dhcpRelay82Suboption2Info, voipNumberPlanTable=voipNumberPlanTable, trap=trap, rpvcUSProfile=rpvcUSProfile, adslLineConfL2ATPRT=adslLineConfL2ATPRT, voipPortH248TerminationEntry=voipPortH248TerminationEntry, calixNetworks=calixNetworks, qryVidStatusEntry=qryVidStatusEntry, dtpvcRowStatus=dtpvcRowStatus, dscpSrcCodePoint=dscpSrcCodePoint, dhcpRelay82RelayMode=dhcpRelay82RelayMode, alarmCurrParam5=alarmCurrParam5, subrPortTel=subrPortTel, dhcpRelay82EntryOptionMode=dhcpRelay82EntryOptionMode, arpproxyInterfaceMask=arpproxyInterfaceMask, ipbpvcProfile=ipbpvcProfile, ppvcTable=ppvcTable, macFfstaticIP=macFfstaticIP, ouiFilterVlanTable=ouiFilterVlanTable, aclProfileActionRate=aclProfileActionRate, userName=userName, ipbpvcRouteDynamicEntry=ipbpvcRouteDynamicEntry, macFilterPortMacCount=macFilterPortMacCount, aclProfileRuleEndTos=aclProfileRuleEndTos, rpvcGatewayIpAddress=rpvcGatewayIpAddress, rpvcTable=rpvcTable, igmpPortCtrlPduQueryCnt=igmpPortCtrlPduQueryCnt, sipCallSvcProfilePasswd=sipCallSvcProfilePasswd, ipbpvcEdgeRouterMask=ipbpvcEdgeRouterMask, macTable=macTable, voipRingOn2=voipRingOn2, voipDnsIp=voipDnsIp, fwUpgrade=fwUpgrade, pvcProfileDS=pvcProfileDS, ipbpvcEdgeRouterEntry=ipbpvcEdgeRouterEntry, rpvcNetmask=rpvcNetmask, ppvcMemberProfileUS=ppvcMemberProfileUS, adslLineConfAnnexL=adslLineConfAnnexL, subrPortName=subrPortName, arpproxyAge=arpproxyAge, rpvcEntry=rpvcEntry, tlspvcSpriority=tlspvcSpriority, igmpPortCtrlPduTable=igmpPortCtrlPduTable, gbond=gbond, mltRelaySet=mltRelaySet, igmpPortCtrlPduReportCnt=igmpPortCtrlPduReportCnt, alarmConfTable=alarmConfTable, mcastBwPortTable=mcastBwPortTable, ipbpvcRouteDynamicMetric=ipbpvcRouteDynamicMetric, voipRingName=voipRingName, dhcpRelay82VlanMask=dhcpRelay82VlanMask, adslAtucCarrierMask0ForBatchSet=adslAtucCarrierMask0ForBatchSet, voipRingOn3=voipRingOn3, macFilterTable=macFilterTable, snrMgn=snrMgn, ipbpvcRouteMetric=ipbpvcRouteMetric, dhcpSnoopMaxcnt=dhcpSnoopMaxcnt, maxNumOfPvcs=maxNumOfPvcs, voipRouteRowStatus=voipRouteRowStatus, paepvcEntry=paepvcEntry, paepvcTable=paepvcTable, voipPortRXGain=voipPortRXGain, matchingTimeout=matchingTimeout, diagnostic=diagnostic, pppoeAgentEnable=pppoeAgentEnable, pppoeAgentRowStatus=pppoeAgentRowStatus, aclProfileActionrvlan=aclProfileActionrvlan, macFfStatsIndex=macFfStatsIndex)
