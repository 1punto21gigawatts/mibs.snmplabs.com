#
# PySNMP MIB module ESAFE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ESAFE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:06:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
clabProjDocsis, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjDocsis")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, ObjectIdentity, Gauge32, ModuleIdentity, TimeTicks, Integer32, Counter64, NotificationType, Counter32, MibIdentifier, Unsigned32, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "Gauge32", "ModuleIdentity", "TimeTicks", "Integer32", "Counter64", "NotificationType", "Counter32", "MibIdentifier", "Unsigned32", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, PhysAddress, DateAndTime, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DateAndTime", "DisplayString", "TruthValue")
esafeMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14))
esafeMib.setRevisions(('2017-06-15 00:00', '2014-04-03 00:00', '2013-08-08 00:00', '2013-04-04 00:00', '2007-08-03 00:00', '2006-07-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: esafeMib.setRevisionsDescriptions(('Revised per eDOCSIS-N-17.1744-1 to add Apache License information.', 'Revised version includes ECN eDOCSIS-N-13.1128 and published as I27.', 'Revised version includes ECN eDOCSIS-N-13.1107 and published as I26.', 'Revised version includes ECN eDOCSIS-N-13.1092 and published as I25.', 'This revision published as CM-SP-eDOCSIS-I13.', 'This revision published as CM-SP-eDOCSIS-I09.',))
if mibBuilder.loadTexts: esafeMib.setLastUpdated('201706150000Z')
if mibBuilder.loadTexts: esafeMib.setOrganization('Cable Television Laboratories, Inc.')
if mibBuilder.loadTexts: esafeMib.setContactInfo('Postal: Cable Television Laboratories, Inc. 858 Coal Creek Circle Louisville, CO 80027 U.S.A. Phone: +1 303-661-9100 Fax: +1 303-661-9199 E-mail: mibs@cablelabs.com')
if mibBuilder.loadTexts: esafeMib.setDescription("Licensed under the Apache License, Version 2.0 (the 'License'); you may not use this file except in compliance with the License. You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. This MIB module provides the management objects necessary to configure functionality of eSAFE components of a device implementing an eDOCSIS compliant cable modem and one or more eSAFE elements. Copyright 1999-2017 Cable Television Laboratories, Inc. All rights reserved.")
esafeMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1))
esafeBase = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 1))
esafePsMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 2))
esafeMtaMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 3))
esafeStbMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 4))
esafeErouterMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 5))
esafeProvisioningStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 1, 1), )
if mibBuilder.loadTexts: esafeProvisioningStatusTable.setStatus('current')
if mibBuilder.loadTexts: esafeProvisioningStatusTable.setDescription('This table contains the current provisioning status of each implemented eSAFE, and information about the last failure or exception condition in the eSAFE provisioning process, if applicable.')
esafeProvisioningStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: esafeProvisioningStatusEntry.setStatus('current')
if mibBuilder.loadTexts: esafeProvisioningStatusEntry.setDescription('An entry in this table is created for each eSAFE implemented in the eDOCSIS compliant device.')
esafeProvisioningStatusProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInitiated", 1), ("inProgress", 2), ("finished", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esafeProvisioningStatusProgress.setReference('CableHome PSDEV MIB Specification CH-SP-MIB-PSDEV-C01-060728, Section 4, cabhPsDevProvState object.')
if mibBuilder.loadTexts: esafeProvisioningStatusProgress.setStatus('current')
if mibBuilder.loadTexts: esafeProvisioningStatusProgress.setDescription('The current state of the eSAFE provisioning process. notInitiated(1) indicates that the eSAFE has not yet begun its provisioning process. inProgress(2) indicates that the eSAFE is in the process of provisioning. finished(3) indicates that the eSAFE completed its provisioning process. Provisioning success or failure information is provided by esafeProvisioningStatusFailureFound and may also be extended by specific eSAFE MIB objects.')
esafeProvisioningStatusFailureFound = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esafeProvisioningStatusFailureFound.setReference('PacketCable Provisioning specification, Provisioning Overview section; CableHome specification, Provisioning Processes section.')
if mibBuilder.loadTexts: esafeProvisioningStatusFailureFound.setStatus('current')
if mibBuilder.loadTexts: esafeProvisioningStatusFailureFound.setDescription("true(1) indicates that the eSAFE encountered an error condition during the provisioning process. An eSAFE could start a looping process from a previous flow step after a failure, therefore this value is retained until the flow step that initially failed eventually passes or is updated with another error condition. The eSAFE device needs to reflect in the value of 'esafePsProvisioningStatusFailureFound' any recognized errors even if it is still in the process of provisioning, i.e., when esafeProvisioningStatusProgress has a value of inProgress(2). Other eSAFE specifications provide the requirements for those eSAFE devices with respect to this object.")
esafeProvisioningStatusFailureFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 1, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esafeProvisioningStatusFailureFlow.setReference('PacketCable Provisioning specification, Provisioning Overview section; CableHome specification, Provisioning Processes section.')
if mibBuilder.loadTexts: esafeProvisioningStatusFailureFlow.setStatus('current')
if mibBuilder.loadTexts: esafeProvisioningStatusFailureFlow.setDescription("If esafeProvisioningStatusFailureFound is true(1) this object contains the label for the provisioning flow step in which the error condition was encountered, otherwise an empty value is reported. The value of this object corresponds to the provisioning sequence 'Flow Step' designator for the associated eSAFE, as defined in the eSAFE specification. For example, an ePS will report a value such as CHPSWMD-1, and an eMTA will report a value such as MTA-1. Other eSAFE specifications provide the requirements for those eSAFE devices with respect to this object.")
esafeProvisioningStatusFailureEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esafeProvisioningStatusFailureEventID.setReference('PacketCable Provisioning specification, Appendix I Provisioning Events; CableHome specification, Appendix II Format and Content for Event, SYSLOG, and SNMP Trap.')
if mibBuilder.loadTexts: esafeProvisioningStatusFailureEventID.setStatus('current')
if mibBuilder.loadTexts: esafeProvisioningStatusFailureEventID.setDescription("If esafeProvisioningStatusFailureFound is true(1) this object contains the eSAFE log error Event Identifier defined in the eSAFE specification, otherwise it returns a value '0'. For an eMTA type eSAFE, this object reports the PacketCable EventID value from the Provisioning Events table, e.g., 65535. For an ePS type eSAFE, this object reports the EventID value from the Defined Events for CableHome table, e.g., 68000100. Other eSAFE specifications provide the requirements for those eSAFE devices with respect to this object.")
esafeProvisioningStatusFailureErrorText = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 1, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esafeProvisioningStatusFailureErrorText.setReference('PacketCable Provisioning specification, PacketCable Management Event Mechanism specification; CableHome specification, Appendix II Format and Content for Event, SYSLOG, and SNMP Trap.')
if mibBuilder.loadTexts: esafeProvisioningStatusFailureErrorText.setStatus('current')
if mibBuilder.loadTexts: esafeProvisioningStatusFailureErrorText.setDescription("If esafeProvisioningStatusFailureFound is true(1) this object contains the eSAFE log error messages based on the eSAFE specification, otherwise it returns an empty string. For an eMTA type eSAFE, this object reports the value from the 'Comments' column of the Provisioning Events table, e.g., 'The DNS Response from the DNS server did not resolve the TFTP FQDN.' For an ePS type eSAFE this object reports the value from the 'Event Text' column of the Defined Events for CableHome table, e.g., 'DHCP Failed - Discover sent, no offer received'. Other eSAFE specifications provide the requirements for those eSAFE devices with respect to this object.")
esafeProvisioningStatusLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 1, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esafeProvisioningStatusLastUpdate.setStatus('current')
if mibBuilder.loadTexts: esafeProvisioningStatusLastUpdate.setDescription('The value of the eCM docsDevDateTime when this row entry was last updated.')
esafeDevStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 1, 2), )
if mibBuilder.loadTexts: esafeDevStatusTable.setStatus('current')
if mibBuilder.loadTexts: esafeDevStatusTable.setDescription('This table contains entries that provide the SNMP manager with status information pertaining to each implemented eSAFE device. While this table MUST be implemented by all eDOCSIS devices, the support for reporting such information and the status conditions supported will be determined by the corresponding eSAFE specifications. It is highly recommended that the eSAFE MIBs themselves have objects to specify more detailed information.')
esafeDevStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: esafeDevStatusEntry.setStatus('current')
if mibBuilder.loadTexts: esafeDevStatusEntry.setDescription('An entry in this table MUST be created for each eSAFE device behind the eCM. The index needs to be the corresponding index in the ifTable for the associated eSAFE device.')
esafeDevServiceIntImpact = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("significant", 1), ("none", 2), ("unsupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esafeDevServiceIntImpact.setStatus('current')
if mibBuilder.loadTexts: esafeDevServiceIntImpact.setDescription('The value of this MIB object indicates the service interruption impact assessment of the corresponding eSAFE device as determined by the current status of the eSAFE device, in accordance with the directives provided in the eSAFE specification. If esafeDevServiceIntImpact is set to significant (1), it indicates that the corresponding eSAFE device (as per the eSAFE specification) identifies a significant impact on the active services at the given point in time. This impact level is highly recommended for critical or real-time services, though the impact assessment is left to the directives provided by the associated eSAFE specification. If esafeDevServiceIntImpact is set to none (2), it indicates that the corresponding eSAFE device (as per the eSAFE specification) identifies no significant impact on the services offered at the given point in time. If esafeDevServiceIntImpact is unsupported(3), it indicates that the corresponding eSAFE device has no known interfaces to support this feature or the eSAFE specification does not recommend this feature. If the eSAFE specification specifies the use of this mechanism then it MUST define definitive states for the impacts (significant or none) and the value of unsupported(3) MUST not be used by the eDOCSIS device for that eSAFE interface. However, if the corresponding eSAFE specification does not provide any directives then the value MUST be set to unsupported(3). If there exists multiple services being offered by an eSAFE device (Either multiple services or multiple instances of the same service), this MIB MUST indicate the highest possible impact and other impact information SHOULD be populated in the associated esafeDevServiceIntImpactInfo table.')
esafeDevServiceIntImpactInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esafeDevServiceIntImpactInfo.setStatus('current')
if mibBuilder.loadTexts: esafeDevServiceIntImpactInfo.setDescription("This object provides more information to the SNMP Managers regarding the condition reported in esafeDevServiceIntImpact. The eSAFE device vendor could use this to fill in specific vendor strings or values that could add value or provide more information related to the status. Examples: For eMTA devices: Lines 1 and 3 have active connections, Line 2 is not provisioned. <Value of the corresponding MIB object in the eMTA MIBs, if applicable> For other eSAFE devices: Critical video streaming in progress, please wait for 5.30 minutes <Value of the corresponding MIB object in the eSAFE MIBs, if applicable>. The device MUST report 'No Additional Information' in case the associated eSAFE vendor cannot obtain information from the eSAFE device.")
esafePsCableHomeModeControl = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabledMode", 1), ("provSystem", 2), ("dormantCHMode", 3))).clone('dormantCHMode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esafePsCableHomeModeControl.setReference('CableHome specifications, CableHome Operational Modes section.')
if mibBuilder.loadTexts: esafePsCableHomeModeControl.setStatus('current')
if mibBuilder.loadTexts: esafePsCableHomeModeControl.setDescription("This object provides control over the mode of operation of the CableHome ePS eSAFE element of the eDOCSIS compliant device. When this object is set to disabledMode(1), the ePS eSAFE element is instructed to switch to CableHome Disabled Mode operation. When this object is set to provSystem(2), the ePS eSAFE element restarts its provisioning process. When this object is set to dormantCHMode(3), the ePS eSAFE element is instructed to switch to CableHome Dormant Mode operation. In this mode the ePS restarts its provisioning process omitting CableHome-specific DHCP Options 60 and 43 in the DHCP DISCOVER and DHCP REQUEST messages, acquires an IP address lease from the cable operator's DHCP server, and operates in unmanaged Dormant CableHome Mode regardless of the values of the file and siaddr fields or of the values of DHCP options that might otherwise configure the ePS to operate in DHCP Provisioning Mode or in SNMP Provisioning Mode. The value of this object MUST persist across cable modem resets.")
esafePsCableHomeModeStatus = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabledMode", 1), ("dormantCHMode", 2), ("cableHomeMode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esafePsCableHomeModeStatus.setReference('CableHome specification, CableHome Operational Models section.')
if mibBuilder.loadTexts: esafePsCableHomeModeStatus.setStatus('current')
if mibBuilder.loadTexts: esafePsCableHomeModeStatus.setDescription('This object provides visibility to the current mode of operation of the CableHome ePS eSAFE element of the eDOCSIS compliant device. If the value of this object is disabledMode(1), the ePS eSAFE element is currently operating in CableHome Disabled Mode. If the value of this object is dormantCHMode(2), the ePS is currently operating in Dormant CableHome Mode. If the value of this object is cableHomeMode(3), the ePS is currently operating in CableHome mode.')
esafeErouterAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("ipv4Only", 2), ("ipv6Only", 3), ("ipv4AndIpv6", 4), ("noTLV202dot1Present", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esafeErouterAdminMode.setReference('DOCSIS IPv4 and IPv6 eRouter Specification, CM-SP-eRouter-I02-070223.')
if mibBuilder.loadTexts: esafeErouterAdminMode.setStatus('current')
if mibBuilder.loadTexts: esafeErouterAdminMode.setDescription('This object provides visibility to the eRouter mode of operation as specified by TLV 202.1. If the value of this object is disabled(1), the eRouter was configured via TLV 202.1 in the cable modem configuration file to not initialize as described in the eRouter Initialization section of the CableLabs IPv4 and IPv6 eRouter Specification. If the value of this object is ipv4Only(2), the eRouter was configured via TLV 202.1 in the cable modem configuration file to operate with an IPv4 network address and with the IPv4 stack operational and to operate without an IPv6 network address and to not run an IPv6 protocol stack. If the value of this object is ipv6Only(3), the eRouter was configured via TLV 202.1 in the cable modem configuration file to operate with an IPv6 network address and with the IPv6 stack operational and to operate without an IPv4 network address and to not run an IPv4 protocol stack. If the value of this object is ipv4AndIpv6(4), the eRouter was configured via TLV 202.1 in the cable modem configuration file to operate with an IPv4 network address and an IPv6 network address and to run both IPv4 and IPv6 protocol stacks. If the value of the object is noTLV202dot1Present(5), the eRouter was not configured via TLV 202.1 in the cable modem configuration file.')
esafeErouterOperMode = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("ipv4OnlyFwding", 2), ("ipv6OnlyFwding", 3), ("ipv4AndIpv6Fwding", 4), ("noIpv4AndNoIpv6Fwding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esafeErouterOperMode.setReference('DOCSIS IPv4 and IPv6 eRouter Specification, CM-SP-eRouter-I02-070223.')
if mibBuilder.loadTexts: esafeErouterOperMode.setStatus('current')
if mibBuilder.loadTexts: esafeErouterOperMode.setDescription('This object provides visibility to the current mode of operation of the DOCSIS eRouter eSAFE element of the eDOCSIS compliant device. If the value of this object is disabled(1), the eRouter eSAFE element has been administratively Disabled. The eDOCSIS device will bridge traffic according to the configuration of the DOCSIS embedded cable modem (eCM) If the value of this object is ipv4OnlyFwding(2), the eRouter eSAFE element is currently operating with the IPv4 protocol stack operational, is forwarding IPv4 traffic, and is not running an IPv6 protocol stack and not forwarding IPv6 traffic. If the value of this object is ipv6OnlyFwding(3), the eRouter eSAFE element is currently operating with the IPv6 protocol stack operational, is forwarding IPv6 traffic, and is not running an IPv4 protocol stack and not forwarding IPv4 traffic. If the value of this object is ipv4AndIpv6Fwding(4), the eRouter eSAFE element is currently operating with both the IPv4 protocol stack and IPv6 protocol stack operational, and is forwarding IPv4 and IPv6 traffic. If the value of this object is noIpv4AndNoIpv6Fwding(5), the eRouter is currently operating with neither the IPv4 nor IPv6 protocol stack running. The eRouter is unable to pass traffic between the Operator-Facing Interface and the Customer-Facing Interface. ')
esafeErouterPhysAddress = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 5, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esafeErouterPhysAddress.setStatus('current')
if mibBuilder.loadTexts: esafeErouterPhysAddress.setDescription('The physical address of the operator-facing interface of the DOCSIS eRouter eSAFE element.')
esafeErouterInitModeControl = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ipDisabled", 1), ("ipv4Only", 2), ("ipv6Only", 3), ("ipv4AndIpv6", 4), ("honoreRouterInitMode", 5))).clone('honoreRouterInitMode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esafeErouterInitModeControl.setReference('DOCSIS IPv4 and IPv6 eRouter Specification, CM-SP-eRouter-I09-130404 Annex B.3.')
if mibBuilder.loadTexts: esafeErouterInitModeControl.setStatus('current')
if mibBuilder.loadTexts: esafeErouterInitModeControl.setDescription('This object provides control over the initialization mode of the DOCSIS eRouter eSAFE element. Except when set to honoreRouterInitMode(5), the value of this object MUST override all Initialization Mode and Operation Mode encodings encapsulated in the eCM configuration file, e.g. TLV 202.1. This object can only be set via an SNMP management Station. This object cannot be included in the eCM configuration file. When this object is set to ipDisabled(1), the eRouter is instructed to switch to IP Protocol Disabled Mode and transparently bridge all traffic as described in the eRouter Initialization section of the CableLabs IPv4 and IPv6 eRouter Specification. When this object is set to ipv4Only(2), the eRouter is instructed to switch to IPv4 Protocol Enabled Mode. When this object is set to ipv6Only(3), the eRouter is instructed to switch to IPv6 Protocol Enabled Mode. When this object is set to ipv4AndIpv6(4), the eRouter is instructed to switch to Dual IP Protocol Enabled Mode. When this object is set to honoreRouterInitMode(5), the eRouter is instructed to honor the eRouter Initialization Mode Encoding encapsulated in the eCM Config File under TLV 202 as described in the Configuration of eRouter Operational Parameters section of the CableLabs eRouter Specification. The value of this object MUST persist across cable modem resets.')
esafeErouterSoftReset = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 1, 5, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esafeErouterSoftReset.setReference('DOCSIS IPv4 and IPv6 eRouter Specification, CM-SP-eRouter-I10-130808 Annex B.5.')
if mibBuilder.loadTexts: esafeErouterSoftReset.setStatus('current')
if mibBuilder.loadTexts: esafeErouterSoftReset.setDescription('This object provides a mechanism to soft reset the DOCSIS eRouter eSAFE element. This object can only be set via an SNMP management Station. This object cannot be included in the eCM configuration file. Setting this object to true(1) causes the DOCSIS eRouter eSAFE element to perform a soft reset, without resetting the eCM. Reading this object always returns false(2). When esafeErouterSoftReset is set to true(1), the eRouter performs a Soft Reset as described in Annex B.5 of [eRouter]. The value of esafeErouterSoftReset object MUST NOT persist across cable modem reinitialization.')
esafeMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 2))
esafeMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 2, 1))
esafeMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 2, 2))
esafeMibBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 2, 1, 1)).setObjects(("ESAFE-MIB", "esafeBaseGroup"), ("ESAFE-MIB", "esafePsMibGroup"), ("ESAFE-MIB", "esafeErouterMibGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esafeMibBasicCompliance = esafeMibBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: esafeMibBasicCompliance.setDescription('The compliance statement for eSAFE MIB objects.')
esafeBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 2, 2, 1)).setObjects(("ESAFE-MIB", "esafeProvisioningStatusProgress"), ("ESAFE-MIB", "esafeProvisioningStatusFailureFound"), ("ESAFE-MIB", "esafeProvisioningStatusFailureFlow"), ("ESAFE-MIB", "esafeProvisioningStatusFailureEventID"), ("ESAFE-MIB", "esafeProvisioningStatusFailureErrorText"), ("ESAFE-MIB", "esafeProvisioningStatusLastUpdate"), ("ESAFE-MIB", "esafeDevServiceIntImpact"), ("ESAFE-MIB", "esafeDevServiceIntImpactInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esafeBaseGroup = esafeBaseGroup.setStatus('current')
if mibBuilder.loadTexts: esafeBaseGroup.setDescription('Group of eSAFE Base objects in the eSAFE MIB.')
esafePsMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 2, 2, 2)).setObjects(("ESAFE-MIB", "esafePsCableHomeModeControl"), ("ESAFE-MIB", "esafePsCableHomeModeStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esafePsMibGroup = esafePsMibGroup.setStatus('current')
if mibBuilder.loadTexts: esafePsMibGroup.setDescription('Group of embedded PS-specific objects in the eSAFE MIB.')
esafeErouterMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 14, 2, 2, 3)).setObjects(("ESAFE-MIB", "esafeErouterAdminMode"), ("ESAFE-MIB", "esafeErouterOperMode"), ("ESAFE-MIB", "esafeErouterPhysAddress"), ("ESAFE-MIB", "esafeErouterInitModeControl"), ("ESAFE-MIB", "esafeErouterSoftReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    esafeErouterMibGroup = esafeErouterMibGroup.setStatus('current')
if mibBuilder.loadTexts: esafeErouterMibGroup.setDescription('Group of embedded Router-specific objects in the eSAFE MIB.')
mibBuilder.exportSymbols("ESAFE-MIB", esafeBaseGroup=esafeBaseGroup, esafeProvisioningStatusLastUpdate=esafeProvisioningStatusLastUpdate, esafeErouterMibObjects=esafeErouterMibObjects, esafeErouterSoftReset=esafeErouterSoftReset, esafeStbMibObjects=esafeStbMibObjects, esafeProvisioningStatusEntry=esafeProvisioningStatusEntry, esafeDevStatusTable=esafeDevStatusTable, esafeDevServiceIntImpact=esafeDevServiceIntImpact, PYSNMP_MODULE_ID=esafeMib, esafeErouterInitModeControl=esafeErouterInitModeControl, esafeMib=esafeMib, esafeProvisioningStatusFailureFound=esafeProvisioningStatusFailureFound, esafeProvisioningStatusProgress=esafeProvisioningStatusProgress, esafeMibGroups=esafeMibGroups, esafeMibObjects=esafeMibObjects, esafeMibCompliances=esafeMibCompliances, esafeMibBasicCompliance=esafeMibBasicCompliance, esafePsMibObjects=esafePsMibObjects, esafeErouterMibGroup=esafeErouterMibGroup, esafeErouterPhysAddress=esafeErouterPhysAddress, esafeProvisioningStatusTable=esafeProvisioningStatusTable, esafePsCableHomeModeControl=esafePsCableHomeModeControl, esafeBase=esafeBase, esafeDevServiceIntImpactInfo=esafeDevServiceIntImpactInfo, esafePsMibGroup=esafePsMibGroup, esafePsCableHomeModeStatus=esafePsCableHomeModeStatus, esafeDevStatusEntry=esafeDevStatusEntry, esafeErouterOperMode=esafeErouterOperMode, esafeProvisioningStatusFailureFlow=esafeProvisioningStatusFailureFlow, esafeErouterAdminMode=esafeErouterAdminMode, esafeMtaMibObjects=esafeMtaMibObjects, esafeProvisioningStatusFailureErrorText=esafeProvisioningStatusFailureErrorText, esafeProvisioningStatusFailureEventID=esafeProvisioningStatusFailureEventID, esafeMibConformance=esafeMibConformance)
