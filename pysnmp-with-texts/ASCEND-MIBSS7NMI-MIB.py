#
# PySNMP MIB module ASCEND-MIBSS7NMI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBSS7NMI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:28:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, ModuleIdentity, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, TimeTicks, NotificationType, iso, ObjectIdentity, Integer32, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "TimeTicks", "NotificationType", "iso", "ObjectIdentity", "Integer32", "MibIdentifier", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

mibsS7Profile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 121))
mibpRITunlStatProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 158))
mibsS7ProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 121, 1), )
if mibBuilder.loadTexts: mibsS7ProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibsS7ProfileTable.setDescription('A list of mibsS7Profile profile entries.')
mibsS7ProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1), ).setIndexNames((0, "ASCEND-MIBSS7NMI-MIB", "sS7Profile-Index-o"))
if mibBuilder.loadTexts: mibsS7ProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibsS7ProfileEntry.setDescription('A mibsS7Profile entry containing objects that maps to the parameters of mibsS7Profile profile.')
sS7Profile_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 1), Integer32()).setLabel("sS7Profile-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: sS7Profile_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_Index_o.setDescription('')
sS7Profile_Enabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("sS7Profile-Enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_Enabled.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_Enabled.setDescription("When set to 'no', interface to the SS7 gateway is disabled.")
sS7Profile_ControlProtocol = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("asgcp", 1), ("ipdc0X", 2), ("q931Plus", 3)))).setLabel("sS7Profile-ControlProtocol").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_ControlProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_ControlProtocol.setDescription('Control protocol between the access server and the signaling gateway.')
sS7Profile_PrimaryIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 4), IpAddress()).setLabel("sS7Profile-PrimaryIpAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_PrimaryIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_PrimaryIpAddress.setDescription('IP address of the primary SS7 gateway.')
sS7Profile_PrimaryTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 5), Integer32()).setLabel("sS7Profile-PrimaryTcpPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_PrimaryTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_PrimaryTcpPort.setDescription('TCP port on primary SS7 gateway.')
sS7Profile_SecondaryIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 6), IpAddress()).setLabel("sS7Profile-SecondaryIpAddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_SecondaryIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_SecondaryIpAddress.setDescription('IP address of the secondary SS7 gateway.')
sS7Profile_SecondaryTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 7), Integer32()).setLabel("sS7Profile-SecondaryTcpPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_SecondaryTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_SecondaryTcpPort.setDescription('TCP port on the secondary SS7 gateway.')
sS7Profile_BayId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 8), DisplayString()).setLabel("sS7Profile-BayId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_BayId.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_BayId.setDescription('Bay ID defines the bay this device belongs to. Used for registration purposes only. The content of this field is reported to the gateway during the device registration process.')
sS7Profile_SystemType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 9), DisplayString()).setLabel("sS7Profile-SystemType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_SystemType.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_SystemType.setDescription('Model ID and/or type of equipment. Used for device registration only. Must be listed in the database on the Gateway.')
sS7Profile_TransportOptions_Type = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascend", 1), ("tcpEncaps2", 2)))).setLabel("sS7Profile-TransportOptions-Type").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_TransportOptions_Type.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_TransportOptions_Type.setDescription('The type of transport layer that is to be used')
sS7Profile_TransportOptions_DeviceId = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 11), Integer32()).setLabel("sS7Profile-TransportOptions-DeviceId").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_TransportOptions_DeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_TransportOptions_DeviceId.setDescription('A code that uniquely identifies this device to the Gateway. If multiple remote access servers are configured to use the same signaling gateway, every one of those servers must be assigned an identifier that is unique within the group.')
sS7Profile_TransportOptions_T1Duration = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 12), Integer32()).setLabel("sS7Profile-TransportOptions-T1Duration").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_TransportOptions_T1Duration.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_TransportOptions_T1Duration.setDescription('Value of the ACK delay timer in milliseconds. This timer specifies the maximum delay for an acknowledgement when an I-frame is received. Default value is 1000 (1 second). The value must be less than T2 on the peer.')
sS7Profile_TransportOptions_T2Duration = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 13), Integer32()).setLabel("sS7Profile-TransportOptions-T2Duration").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_TransportOptions_T2Duration.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_TransportOptions_T2Duration.setDescription('Value of the transmission timeout timer in milliseconds. This timer specifies how long this endpoint should wait for an acknowledgement. Default value is 3000 (3 seconds). The value must be greater than T1 on the peer.')
sS7Profile_TransportOptions_T3Duration = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 14), Integer32()).setLabel("sS7Profile-TransportOptions-T3Duration").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_TransportOptions_T3Duration.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_TransportOptions_T3Duration.setDescription('Value of the persistent error timer in milliseconds. This timer specifies the maximum duration of attempts to re-establish a link before the transport layer flushes the data queues and sends an error indication up. Default value is 30000 (30 seconds).')
sS7Profile_TransportOptions_WindowSize = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 15), Integer32()).setLabel("sS7Profile-TransportOptions-WindowSize").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_TransportOptions_WindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_TransportOptions_WindowSize.setDescription('Maximum number of sequentially numbered data packets that can be sent while pending acknowledgement at any given time. Default value is 7.')
sS7Profile_TransportOptions_AckThreshold = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 16), Integer32()).setLabel("sS7Profile-TransportOptions-AckThreshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_TransportOptions_AckThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_TransportOptions_AckThreshold.setDescription('The threshold for triggering an acknowledgement while receiving data packets. As soon as the specified number of packets is received, an ACK is sent back regardless of the value of T1 timer. The value of this parameter may not be greater than the window size. Default value is 6.')
sS7Profile_TransportOptions_HeartBeat = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("sS7Profile-TransportOptions-HeartBeat").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_TransportOptions_HeartBeat.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_TransportOptions_HeartBeat.setDescription("When set to 'no', layer 2 heartbeat mechanism is not enabled.")
sS7Profile_TransportOptions_Tos_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("sS7Profile-TransportOptions-Tos-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_TransportOptions_Tos_Active.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_TransportOptions_Tos_Active.setDescription('Activate type of service for this connection.')
sS7Profile_TransportOptions_Tos_Precedence = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 33, 65, 97, 129, 161, 193, 225))).clone(namedValues=NamedValues(("n-000", 1), ("n-001", 33), ("n-010", 65), ("n-011", 97), ("n-100", 129), ("n-101", 161), ("n-110", 193), ("n-111", 225)))).setLabel("sS7Profile-TransportOptions-Tos-Precedence").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_TransportOptions_Tos_Precedence.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_TransportOptions_Tos_Precedence.setDescription('Tag the precedence bits (priority bits) in the TOS octet of IP datagram header with this value when match occurs.')
sS7Profile_TransportOptions_Tos_TypeOfService = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 9, 17))).clone(namedValues=NamedValues(("normal", 1), ("cost", 3), ("reliability", 5), ("throughput", 9), ("latency", 17)))).setLabel("sS7Profile-TransportOptions-Tos-TypeOfService").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_TransportOptions_Tos_TypeOfService.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_TransportOptions_Tos_TypeOfService.setDescription('Tag the type of service field in the TOS octet of IP datagram header with this value when match occurs.')
sS7Profile_TransportOptions_Tos_ApplyTo = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1025, 2049, 3073))).clone(namedValues=NamedValues(("incoming", 1025), ("outgoing", 2049), ("both", 3073)))).setLabel("sS7Profile-TransportOptions-Tos-ApplyTo").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_TransportOptions_Tos_ApplyTo.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_TransportOptions_Tos_ApplyTo.setDescription('Define how the type-of-service applies to data flow for this connection.')
sS7Profile_TransportOptions_Tos_MarkingType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("precedenceTos", 1), ("dscp", 2)))).setLabel("sS7Profile-TransportOptions-Tos-MarkingType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_TransportOptions_Tos_MarkingType.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_TransportOptions_Tos_MarkingType.setDescription('Select type of packet marking.')
sS7Profile_TransportOptions_Tos_Dscp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 39), DisplayString()).setLabel("sS7Profile-TransportOptions-Tos-Dscp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_TransportOptions_Tos_Dscp.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_TransportOptions_Tos_Dscp.setDescription('DSCP tag to be used in marking of the packets (if marking-type = dscp).')
sS7Profile_UseSystemIpAddressAsSource = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("sS7Profile-UseSystemIpAddressAsSource").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_UseSystemIpAddressAsSource.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_UseSystemIpAddressAsSource.setDescription("When set to 'yes', use configured System IP Address as source ip address. When set to 'no', use IP Address of outgoing interface as source ip address.")
sS7Profile_IpdcSourceAdddress = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 32), IpAddress()).setLabel("sS7Profile-IpdcSourceAdddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_IpdcSourceAdddress.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_IpdcSourceAdddress.setDescription('IP address to be used on the private network')
sS7Profile_Vrouter = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 33), DisplayString()).setLabel("sS7Profile-Vrouter").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_Vrouter.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_Vrouter.setDescription('Specifies the virtual router to be used.')
sS7Profile_CongestionControl_CongestionControlType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("l3QueueDepth", 2)))).setLabel("sS7Profile-CongestionControl-CongestionControlType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_CongestionControl_CongestionControlType.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_CongestionControl_CongestionControlType.setDescription('Type of the congestion control algorithm to use.')
sS7Profile_CongestionControl_Cl1Level = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 20), Integer32()).setLabel("sS7Profile-CongestionControl-Cl1Level").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_CongestionControl_Cl1Level.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_CongestionControl_Cl1Level.setDescription("The level at which 'congestion level 1' indication will be issued. The value is interpreted according to the configured congestion control 'type'.")
sS7Profile_CongestionControl_Cl1Action = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ignore", 1), ("sendInfoToMgc", 2)))).setLabel("sS7Profile-CongestionControl-Cl1Action").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_CongestionControl_Cl1Action.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_CongestionControl_Cl1Action.setDescription('Action taken when congestion level 1 (defined by the value of cl1-level) is reached.')
sS7Profile_CongestionControl_Cl2Level = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 22), Integer32()).setLabel("sS7Profile-CongestionControl-Cl2Level").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_CongestionControl_Cl2Level.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_CongestionControl_Cl2Level.setDescription("The level at which 'congestion level 2' indication will be issued. The value is interpreted according to the configured congestion control 'type'.")
sS7Profile_CongestionControl_Cl2Action = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("sendInfoToMgc", 2), ("rejectNewCall", 3)))).setLabel("sS7Profile-CongestionControl-Cl2Action").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_CongestionControl_Cl2Action.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_CongestionControl_Cl2Action.setDescription('Action taken when congestion level 2 (defined by the value of cl2-level) is reached.')
sS7Profile_SignalingHeartbeat_Enabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("sS7Profile-SignalingHeartbeat-Enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_SignalingHeartbeat_Enabled.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_SignalingHeartbeat_Enabled.setDescription('When set to yes, TNT will generate signaling heartbeat to MGC based on the interval configured in signaling-heartbeat interval.')
sS7Profile_SignalingHeartbeat_Interval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 25), Integer32()).setLabel("sS7Profile-SignalingHeartbeat-Interval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_SignalingHeartbeat_Interval.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_SignalingHeartbeat_Interval.setDescription('The time interval in seconds for layer 3 heartbeat messages.')
sS7Profile_ResilienceOptions_Type = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("releaseAll", 1), ("maintainActive", 2), ("timedRelease", 3)))).setLabel("sS7Profile-ResilienceOptions-Type").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_ResilienceOptions_Type.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_ResilienceOptions_Type.setDescription('The type of resilience action required when line state changes.')
sS7Profile_ResilienceOptions_Duration = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 28), Integer32()).setLabel("sS7Profile-ResilienceOptions-Duration").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_ResilienceOptions_Duration.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_ResilienceOptions_Duration.setDescription('The duration in milli seconds for which calls should be maintained when line state changes. Valid only if the type is configured as timed-release.')
sS7Profile_PriTunnelingOptions_Enabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("sS7Profile-PriTunnelingOptions-Enabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_PriTunnelingOptions_Enabled.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_PriTunnelingOptions_Enabled.setDescription('When set to yes, we will synchronize the d-channel status with the IPDC signaling link state.')
sS7Profile_PriTunnelingOptions_Duration = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 30), Integer32()).setLabel("sS7Profile-PriTunnelingOptions-Duration").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_PriTunnelingOptions_Duration.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_PriTunnelingOptions_Duration.setDescription('The duration in milliseconds after which bringing down D-channel of tunneled-pri-signaling lines will be initiated.')
sS7Profile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 121, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("sS7Profile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: sS7Profile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: sS7Profile_Action_o.setDescription('')
mibpRITunlStatProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 158, 1), )
if mibBuilder.loadTexts: mibpRITunlStatProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibpRITunlStatProfileTable.setDescription('A list of mibpRITunlStatProfile profile entries.')
mibpRITunlStatProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 158, 1, 1), ).setIndexNames((0, "ASCEND-MIBSS7NMI-MIB", "pRITunlStatProfile-Index-o"))
if mibBuilder.loadTexts: mibpRITunlStatProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibpRITunlStatProfileEntry.setDescription('A mibpRITunlStatProfile entry containing objects that maps to the parameters of mibpRITunlStatProfile profile.')
pRITunlStatProfile_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 158, 1, 1, 1), Integer32()).setLabel("pRITunlStatProfile-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: pRITunlStatProfile_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: pRITunlStatProfile_Index_o.setDescription('')
pRITunlStatProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 158, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("pRITunlStatProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: pRITunlStatProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: pRITunlStatProfile_Action_o.setDescription('')
mibBuilder.exportSymbols("ASCEND-MIBSS7NMI-MIB", sS7Profile_ControlProtocol=sS7Profile_ControlProtocol, mibsS7ProfileTable=mibsS7ProfileTable, sS7Profile_Enabled=sS7Profile_Enabled, pRITunlStatProfile_Index_o=pRITunlStatProfile_Index_o, sS7Profile_UseSystemIpAddressAsSource=sS7Profile_UseSystemIpAddressAsSource, mibsS7Profile=mibsS7Profile, sS7Profile_PriTunnelingOptions_Enabled=sS7Profile_PriTunnelingOptions_Enabled, sS7Profile_ResilienceOptions_Type=sS7Profile_ResilienceOptions_Type, sS7Profile_TransportOptions_Type=sS7Profile_TransportOptions_Type, sS7Profile_SystemType=sS7Profile_SystemType, mibsS7ProfileEntry=mibsS7ProfileEntry, sS7Profile_Vrouter=sS7Profile_Vrouter, sS7Profile_SecondaryTcpPort=sS7Profile_SecondaryTcpPort, sS7Profile_TransportOptions_HeartBeat=sS7Profile_TransportOptions_HeartBeat, sS7Profile_CongestionControl_Cl1Level=sS7Profile_CongestionControl_Cl1Level, sS7Profile_CongestionControl_Cl2Level=sS7Profile_CongestionControl_Cl2Level, DisplayString=DisplayString, mibpRITunlStatProfileEntry=mibpRITunlStatProfileEntry, sS7Profile_TransportOptions_Tos_Active=sS7Profile_TransportOptions_Tos_Active, sS7Profile_TransportOptions_Tos_Dscp=sS7Profile_TransportOptions_Tos_Dscp, sS7Profile_TransportOptions_DeviceId=sS7Profile_TransportOptions_DeviceId, sS7Profile_Index_o=sS7Profile_Index_o, sS7Profile_IpdcSourceAdddress=sS7Profile_IpdcSourceAdddress, mibpRITunlStatProfileTable=mibpRITunlStatProfileTable, sS7Profile_ResilienceOptions_Duration=sS7Profile_ResilienceOptions_Duration, sS7Profile_TransportOptions_T2Duration=sS7Profile_TransportOptions_T2Duration, sS7Profile_PrimaryTcpPort=sS7Profile_PrimaryTcpPort, mibpRITunlStatProfile=mibpRITunlStatProfile, sS7Profile_TransportOptions_T1Duration=sS7Profile_TransportOptions_T1Duration, sS7Profile_Action_o=sS7Profile_Action_o, sS7Profile_TransportOptions_T3Duration=sS7Profile_TransportOptions_T3Duration, sS7Profile_CongestionControl_Cl1Action=sS7Profile_CongestionControl_Cl1Action, sS7Profile_SignalingHeartbeat_Interval=sS7Profile_SignalingHeartbeat_Interval, sS7Profile_PriTunnelingOptions_Duration=sS7Profile_PriTunnelingOptions_Duration, sS7Profile_CongestionControl_Cl2Action=sS7Profile_CongestionControl_Cl2Action, pRITunlStatProfile_Action_o=pRITunlStatProfile_Action_o, sS7Profile_PrimaryIpAddress=sS7Profile_PrimaryIpAddress, sS7Profile_TransportOptions_Tos_TypeOfService=sS7Profile_TransportOptions_Tos_TypeOfService, sS7Profile_TransportOptions_WindowSize=sS7Profile_TransportOptions_WindowSize, sS7Profile_CongestionControl_CongestionControlType=sS7Profile_CongestionControl_CongestionControlType, sS7Profile_BayId=sS7Profile_BayId, sS7Profile_TransportOptions_AckThreshold=sS7Profile_TransportOptions_AckThreshold, sS7Profile_TransportOptions_Tos_ApplyTo=sS7Profile_TransportOptions_Tos_ApplyTo, sS7Profile_SecondaryIpAddress=sS7Profile_SecondaryIpAddress, sS7Profile_TransportOptions_Tos_MarkingType=sS7Profile_TransportOptions_Tos_MarkingType, sS7Profile_SignalingHeartbeat_Enabled=sS7Profile_SignalingHeartbeat_Enabled, sS7Profile_TransportOptions_Tos_Precedence=sS7Profile_TransportOptions_Tos_Precedence)
