#
# PySNMP MIB module CISCO-PROP-ATM-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-PROP-ATM-IF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:10:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, TimeTicks, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, ObjectIdentity, ModuleIdentity, iso, Counter64, NotificationType, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "ObjectIdentity", "ModuleIdentity", "iso", "Counter64", "NotificationType", "IpAddress", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoPropAtmIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 319))
ciscoPropAtmIfMIB.setRevisions(('2002-12-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoPropAtmIfMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoPropAtmIfMIB.setLastUpdated('200212040000Z')
if mibBuilder.loadTexts: ciscoPropAtmIfMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoPropAtmIfMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-voice-gateway@cisco.com')
if mibBuilder.loadTexts: ciscoPropAtmIfMIB.setDescription('This MIB is designed for Propietary ATM (propAtm) interfaces. The propAtm interfaces are identified in the ifTable entries with ifType 197 (as defined in IANAifType-MIB). This interface is a switch virtual interface which does not have any physical connector(jack). ')
ciscoPropAtmIfMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 319, 0))
ciscoPropAtmIfMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 319, 1))
cpAtmIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 1))
cpAtmIfVirtualPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2))
cpAtmIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 1, 1), )
if mibBuilder.loadTexts: cpAtmIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfConfigTable.setDescription('This table is used to configure propAtm interfaces. Each entry in this table has a corresponding ifTable entry with ifType propAtm(197). The ifIndex value of that associated ifTable entry is used to index this this table. The entry of this table is added after its associated ifEntry is added in the ifTable of IF-MIB. It is impossible to add/delete entry to/from this table. ')
cpAtmIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cpAtmIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfConfigEntry.setDescription('An entry in the cpAtmIfConfigTable table for each propAtm port interface. .')
cpAtmIfMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(7000000)).setUnits('cells-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpAtmIfMaxBandwidth.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfMaxBandwidth.setDescription("The propATM interface's maximum cell rate. ")
cpAtmIfStatsEgressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 1), )
if mibBuilder.loadTexts: cpAtmIfStatsEgressTable.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfStatsEgressTable.setDescription('This table reflects real-time statistics associated with each of propAtm interfaces on the egress side. Ingress terminology is used for the cells that are generated by the voice gateway on the TDM side and are going toward the ATM switch. Egress terminology means the cells that are coming from the ATM switch into the TDM side. This table contains statistics from this egress point of view. ')
cpAtmIfStatsEgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cpAtmIfStatsEgressEntry.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfStatsEgressEntry.setDescription('An entry in the cpAtmIfStatsEgressTable table for each propAtm port interface. CLP-0 means Cell Loss Priority = 0, CLP-1 means Cell Loss Priority = 1. ')
cpAtmIfEgrRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfEgrRcvClp0Cells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfEgrRcvClp0Cells.setDescription('The number of CLP-0 cells received from switch at the traffic management and policing device. ')
cpAtmIfEgrRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfEgrRcvClp1Cells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfEgrRcvClp1Cells.setDescription('The number of CLP-1 cells received from switch at the traffic management and policing device. ')
cpAtmIfEgrClp0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfEgrClp0DiscCells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfEgrClp0DiscCells.setDescription('The number of CLP-0 cells discarded due to policing. ')
cpAtmIfEgrClp1DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfEgrClp1DiscCells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfEgrClp1DiscCells.setDescription('The number of CLP-1 cells discarded due to policing. ')
cpAtmIfEgrRcvOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfEgrRcvOAMCells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfEgrRcvOAMCells.setDescription('The number of OAM cells received from the switch at the traffic management and policing device. ')
cpAtmIfEgrRcvEFCICells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfEgrRcvEFCICells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfEgrRcvEFCICells.setDescription('The number of EFCI cells received from the switch at traffic management and policing device. ')
cpAtmIfHCEgrRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfHCEgrRcvClp0Cells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCEgrRcvClp0Cells.setDescription('The number of CLP-0 cells received from switch at the traffic management and policing device. This object is a 64-bit version of cpAtmIfEgrRcvClp0Cells. ')
cpAtmIfHCEgrRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfHCEgrRcvClp1Cells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCEgrRcvClp1Cells.setDescription('The number of CLP-1 cells received from switch at the traffic management and policing device. This object is a 64-bit version of cpAtmIfEgrRcvClp1Cells. ')
cpAtmIfHCEgrClp0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfHCEgrClp0DiscCells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCEgrClp0DiscCells.setDescription('The number of CLP-0 cells discarded due to policing. This object is a 64-bit version of cpAtmIfEgrClp0DiscCells. ')
cpAtmIfHCEgrClp1DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfHCEgrClp1DiscCells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCEgrClp1DiscCells.setDescription('The number of CLP-1 cells discarded due to policing. This object is a 64-bit version of cpAtmIfEgrClp1DiscCells. ')
cpAtmIfHCEgrRcvOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfHCEgrRcvOAMCells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCEgrRcvOAMCells.setDescription('The number of OAM cells received from the switch at the traffic management and policing device. This object is a 64-bit version of cpAtmIfEgrRcvOAMCells. ')
cpAtmIfHCEgrRcvEFCICells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfHCEgrRcvEFCICells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCEgrRcvEFCICells.setDescription('The number of EFCI cells received from the switch at traffic management and policing device. This object is a 64-bit version of cpAtmIfEgrRcvEFCICells. ')
cpAtmIfEgressIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 2), )
if mibBuilder.loadTexts: cpAtmIfEgressIntervalTable.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfEgressIntervalTable.setDescription('This table reflects interval(each 15 minute) statistics associated witheach of the propAtm interfaces on egress side. ')
cpAtmIfEgressIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-PROP-ATM-IF-MIB", "cpAtmIfEgressIntervalNumber"))
if mibBuilder.loadTexts: cpAtmIfEgressIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfEgressIntervalEntry.setDescription('An entry in the cpAtmIfEgressIntervalTable table for each propAtm port interface. CLP-0 means Cell Loss Priority = 0, CLP-1 means Cell Loss Priority = 1. ')
cpAtmIfEgressIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: cpAtmIfEgressIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfEgressIntervalNumber.setDescription('Index of the table which represents the interval number. An interval number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the 15 minutes interval completed 23 hours an 45 minutes prior to interval 1. ')
cpAtmIfIntEgrRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfIntEgrRcvClp0Cells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfIntEgrRcvClp0Cells.setDescription('The number of CLP-0 cells received from switch at the traffic management and policing device during a 15 minute interval. ')
cpAtmIfIntEgrRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfIntEgrRcvClp1Cells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfIntEgrRcvClp1Cells.setDescription('The number of CLP-1 cells received from switch at the traffic management and policing device during a 15 minute interval. ')
cpAtmIfIntEgrClp0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfIntEgrClp0DiscCells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfIntEgrClp0DiscCells.setDescription('The number of CLP-0 cells discarded due to policing during a 15 minute interval. ')
cpAtmIfIntEgrClp1DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfIntEgrClp1DiscCells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfIntEgrClp1DiscCells.setDescription('The number of CLP-1 cells discarded due to policing during a 15 minute interval. ')
cpAtmIfIntEgrRcvOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfIntEgrRcvOAMCells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfIntEgrRcvOAMCells.setDescription('The number of OAM cells received from the switch at the traffic management and policing device during a 15 minute interval. ')
cpAtmIfIntEgrRcvEFCICells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfIntEgrRcvEFCICells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfIntEgrRcvEFCICells.setDescription('The number of EFCI cells received from the switch at traffic management and policing device during a 15 minute interval. ')
cpAtmIfHCIntEgrRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfHCIntEgrRcvClp0Cells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCIntEgrRcvClp0Cells.setDescription('The number of CLP-0 cells received from switch at the traffic management and policing device during a 15 minute interval. This object is a 64-bit version of cpAtmIfIntEgrRcvClp0Cells. ')
cpAtmIfHCIntEgrRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfHCIntEgrRcvClp1Cells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCIntEgrRcvClp1Cells.setDescription('The number of CLP-1 cells received from switch at the traffic management and policing device during a 15 minute interval. This object is a 64-bit version of cpAtmIfIntEgrRcvClp1Cells. ')
cpAtmIfHCIntEgrClp0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfHCIntEgrClp0DiscCells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCIntEgrClp0DiscCells.setDescription('The number of CLP-0 cells discarded due to policing during a 15 minute interval. This object is a 64-bit version of cpAtmIfIntEgrClp0DiscCells. ')
cpAtmIfHCIntEgrClp1DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfHCIntEgrClp1DiscCells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCIntEgrClp1DiscCells.setDescription('The number of CLP-1 cells discarded due to policing during a 15 minute interval. This object is a 64-bit version of cpAtmIfIntEgrClp1DiscCells. ')
cpAtmIfHCIntEgrRcvOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfHCIntEgrRcvOAMCells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCIntEgrRcvOAMCells.setDescription('The number of OAM cells received from the switch at the traffic management and policing device during a 15 minute interval. This object is a 64-bit version of cpAtmIfIntEgrRcvOAMCells. ')
cpAtmIfHCIntEgrRcvEFCICells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfHCIntEgrRcvEFCICells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCIntEgrRcvEFCICells.setDescription('The number of EFCI cells received from the switch at traffic management and policing device during a 15 minute interval. This object is a 64-bit version of cpAtmIfIntEgrRcvEFCICells. ')
cpAtmIfStatsIngressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 3), )
if mibBuilder.loadTexts: cpAtmIfStatsIngressTable.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfStatsIngressTable.setDescription('This table reflects real time statistics associated with each of the the propAtm interfaces on the ingress side. Ingress terminology is used for the cells that are generated by the voice gateway on the TDM side and are going toward the ATM switch. Egress terminology means the cells that are coming from the ATM switch into TDM side. This table contains statistics from this ingress point of view. ')
cpAtmIfStatsIngressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cpAtmIfStatsIngressEntry.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfStatsIngressEntry.setDescription('An entry in the cpAtmIfStatsIngressTable table for each propAtm port interface. CLP-0 means Cell Loss Priority = 0, CLP-1 means Cell Loss Priority = 1. ')
cpAtmIfIngXmtClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfIngXmtClp0Cells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfIngXmtClp0Cells.setDescription('The number of CLP-0 cells transmitted to the switch after traffic management and policing in ingress direction.')
cpAtmIfIngXmtClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfIngXmtClp1Cells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfIngXmtClp1Cells.setDescription('The number of CLP-1 cells transmitted to the switch after traffic management and policing in ingress direction.')
cpAtmIfIngXmtEFCICells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfIngXmtEFCICells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfIngXmtEFCICells.setDescription('The number of EFCI cells transmitted to the switch after traffic management and policing in ingress direction.')
cpAtmIfIngXmtOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfIngXmtOAMCells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfIngXmtOAMCells.setDescription('The number of OAM loopback cells transmitted to switch after traffic management and policing in ingress direction.')
cpAtmIfHCIngXmtClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfHCIngXmtClp0Cells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCIngXmtClp0Cells.setDescription('The number of CLP-0 cells transmitted to the switch after traffic management and policing in ingress direction. This object is a 64-bit version of cpAtmIfIngXmtClp0Cells. ')
cpAtmIfHCIngXmtClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfHCIngXmtClp1Cells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCIngXmtClp1Cells.setDescription('The number of CLP-1 cells transmitted to the switch after traffic management and policing in ingress direction. This object is a 64-bit version of cpAtmIfIngXmtClp1Cells. ')
cpAtmIfHCIngXmtEFCICells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfHCIngXmtEFCICells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCIngXmtEFCICells.setDescription('The number of EFCI cells transmitted to the switch after traffic management and policing in ingress direction. This object is a 64-bit version of cpAtmIfIngXmtEFCICells. ')
cpAtmIfHCIngXmtOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 319, 1, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAtmIfHCIngXmtOAMCells.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCIngXmtOAMCells.setDescription('The number of OAM loopback cells transmitted to switch after traffic management and policing in ingress direction. This object is a 64-bit version of cpAtmIfIngXmtOAMCells.')
cpAtmIfMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 319, 2))
cpAtmIfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 319, 2, 1))
cpAtmIfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 319, 2, 2))
cpAtmIfMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 319, 2, 1, 1)).setObjects(("CISCO-PROP-ATM-IF-MIB", "cpAtmIfConfigGroup"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfEgressStatMIBGroup"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfEgressIntervalMIBGroup"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfIngressStatMIBGroup"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCEgressStatMIBGroup"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCEgressIntervalMIBGroup"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCIngressStatMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpAtmIfMIBCompliance = cpAtmIfMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfMIBCompliance.setDescription('The compliance statement for the SNMP entities which implement ciscoPropAtmIfMIB.')
cpAtmIfConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 319, 2, 2, 1)).setObjects(("CISCO-PROP-ATM-IF-MIB", "cpAtmIfMaxBandwidth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpAtmIfConfigGroup = cpAtmIfConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfConfigGroup.setDescription('These are objects related to configuration of propAtm Interface. ')
cpAtmIfEgressStatMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 319, 2, 2, 2)).setObjects(("CISCO-PROP-ATM-IF-MIB", "cpAtmIfEgrRcvClp0Cells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfEgrRcvClp1Cells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfEgrClp0DiscCells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfEgrClp1DiscCells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfEgrRcvOAMCells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfEgrRcvEFCICells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpAtmIfEgressStatMIBGroup = cpAtmIfEgressStatMIBGroup.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfEgressStatMIBGroup.setDescription('These are objects related to Egress Statistics of propAtm interfaces. ')
cpAtmIfEgressIntervalMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 319, 2, 2, 3)).setObjects(("CISCO-PROP-ATM-IF-MIB", "cpAtmIfIntEgrRcvClp0Cells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfIntEgrRcvClp1Cells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfIntEgrClp0DiscCells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfIntEgrClp1DiscCells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfIntEgrRcvOAMCells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfIntEgrRcvEFCICells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpAtmIfEgressIntervalMIBGroup = cpAtmIfEgressIntervalMIBGroup.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfEgressIntervalMIBGroup.setDescription('These are objects related to Egress Interval Statistics of propAtm Interfaces. ')
cpAtmIfIngressStatMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 319, 2, 2, 4)).setObjects(("CISCO-PROP-ATM-IF-MIB", "cpAtmIfIngXmtClp0Cells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfIngXmtClp1Cells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfIngXmtEFCICells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfIngXmtOAMCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpAtmIfIngressStatMIBGroup = cpAtmIfIngressStatMIBGroup.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfIngressStatMIBGroup.setDescription('These are objects related to Ingress Statistics of propAtm interfaces. ')
cpAtmIfHCEgressStatMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 319, 2, 2, 5)).setObjects(("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCEgrRcvClp0Cells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCEgrRcvClp1Cells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCEgrClp0DiscCells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCEgrClp1DiscCells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCEgrRcvOAMCells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCEgrRcvEFCICells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpAtmIfHCEgressStatMIBGroup = cpAtmIfHCEgressStatMIBGroup.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCEgressStatMIBGroup.setDescription('These are objects related to Egress Statistics of propAtm interfaces. This group is a 64-bit version of cpAtmIfEgressStatMIBGroup. ')
cpAtmIfHCEgressIntervalMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 319, 2, 2, 6)).setObjects(("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCIntEgrRcvClp0Cells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCIntEgrRcvClp1Cells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCIntEgrClp0DiscCells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCIntEgrClp1DiscCells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCIntEgrRcvOAMCells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCIntEgrRcvEFCICells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpAtmIfHCEgressIntervalMIBGroup = cpAtmIfHCEgressIntervalMIBGroup.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCEgressIntervalMIBGroup.setDescription('These are objects related to Egress Interval Statistics of propAtm Interfaces. This group is a 64-bit version of cpAtmIfEgressIntervalMIBGroup. ')
cpAtmIfHCIngressStatMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 319, 2, 2, 7)).setObjects(("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCIngXmtClp0Cells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCIngXmtClp1Cells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCIngXmtEFCICells"), ("CISCO-PROP-ATM-IF-MIB", "cpAtmIfHCIngXmtOAMCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpAtmIfHCIngressStatMIBGroup = cpAtmIfHCIngressStatMIBGroup.setStatus('current')
if mibBuilder.loadTexts: cpAtmIfHCIngressStatMIBGroup.setDescription('These are objects related to Ingress Statistics of propAtm interfaces. This group is a 64-bit version of cpAtmIfIngressStatMIBGroup. ')
mibBuilder.exportSymbols("CISCO-PROP-ATM-IF-MIB", cpAtmIfEgressIntervalNumber=cpAtmIfEgressIntervalNumber, cpAtmIfHCIngXmtOAMCells=cpAtmIfHCIngXmtOAMCells, cpAtmIfEgressStatMIBGroup=cpAtmIfEgressStatMIBGroup, cpAtmIfIntEgrClp1DiscCells=cpAtmIfIntEgrClp1DiscCells, cpAtmIfMIBCompliance=cpAtmIfMIBCompliance, cpAtmIfHCIngXmtClp0Cells=cpAtmIfHCIngXmtClp0Cells, cpAtmIfStatsIngressEntry=cpAtmIfStatsIngressEntry, cpAtmIfHCEgrRcvOAMCells=cpAtmIfHCEgrRcvOAMCells, cpAtmIfHCEgrRcvClp1Cells=cpAtmIfHCEgrRcvClp1Cells, cpAtmIfStatsEgressEntry=cpAtmIfStatsEgressEntry, cpAtmIfMIBCompliances=cpAtmIfMIBCompliances, cpAtmIfHCIntEgrClp1DiscCells=cpAtmIfHCIntEgrClp1DiscCells, cpAtmIfEgrRcvOAMCells=cpAtmIfEgrRcvOAMCells, cpAtmIfEgressIntervalTable=cpAtmIfEgressIntervalTable, cpAtmIfIntEgrClp0DiscCells=cpAtmIfIntEgrClp0DiscCells, cpAtmIfHCEgressIntervalMIBGroup=cpAtmIfHCEgressIntervalMIBGroup, cpAtmIfHCIngXmtEFCICells=cpAtmIfHCIngXmtEFCICells, cpAtmIfHCEgrRcvEFCICells=cpAtmIfHCEgrRcvEFCICells, cpAtmIfIntEgrRcvEFCICells=cpAtmIfIntEgrRcvEFCICells, ciscoPropAtmIfMIB=ciscoPropAtmIfMIB, cpAtmIfIngXmtOAMCells=cpAtmIfIngXmtOAMCells, cpAtmIfHCIntEgrRcvClp1Cells=cpAtmIfHCIntEgrRcvClp1Cells, cpAtmIfConfig=cpAtmIfConfig, cpAtmIfConfigGroup=cpAtmIfConfigGroup, cpAtmIfIngXmtClp0Cells=cpAtmIfIngXmtClp0Cells, cpAtmIfStatsEgressTable=cpAtmIfStatsEgressTable, ciscoPropAtmIfMIBNotifs=ciscoPropAtmIfMIBNotifs, cpAtmIfIngXmtClp1Cells=cpAtmIfIngXmtClp1Cells, cpAtmIfIntEgrRcvClp1Cells=cpAtmIfIntEgrRcvClp1Cells, cpAtmIfMaxBandwidth=cpAtmIfMaxBandwidth, cpAtmIfStatsIngressTable=cpAtmIfStatsIngressTable, cpAtmIfHCIntEgrRcvClp0Cells=cpAtmIfHCIntEgrRcvClp0Cells, cpAtmIfEgrRcvEFCICells=cpAtmIfEgrRcvEFCICells, cpAtmIfHCEgrClp0DiscCells=cpAtmIfHCEgrClp0DiscCells, PYSNMP_MODULE_ID=ciscoPropAtmIfMIB, cpAtmIfHCEgrRcvClp0Cells=cpAtmIfHCEgrRcvClp0Cells, cpAtmIfEgressIntervalEntry=cpAtmIfEgressIntervalEntry, cpAtmIfHCIntEgrRcvEFCICells=cpAtmIfHCIntEgrRcvEFCICells, cpAtmIfConfigTable=cpAtmIfConfigTable, cpAtmIfEgrClp1DiscCells=cpAtmIfEgrClp1DiscCells, cpAtmIfIntEgrRcvClp0Cells=cpAtmIfIntEgrRcvClp0Cells, cpAtmIfVirtualPortStats=cpAtmIfVirtualPortStats, ciscoPropAtmIfMIBObjects=ciscoPropAtmIfMIBObjects, cpAtmIfEgrRcvClp0Cells=cpAtmIfEgrRcvClp0Cells, cpAtmIfHCIngXmtClp1Cells=cpAtmIfHCIngXmtClp1Cells, cpAtmIfIntEgrRcvOAMCells=cpAtmIfIntEgrRcvOAMCells, cpAtmIfEgressIntervalMIBGroup=cpAtmIfEgressIntervalMIBGroup, cpAtmIfEgrRcvClp1Cells=cpAtmIfEgrRcvClp1Cells, cpAtmIfIngXmtEFCICells=cpAtmIfIngXmtEFCICells, cpAtmIfHCEgressStatMIBGroup=cpAtmIfHCEgressStatMIBGroup, cpAtmIfMIBConformance=cpAtmIfMIBConformance, cpAtmIfEgrClp0DiscCells=cpAtmIfEgrClp0DiscCells, cpAtmIfConfigEntry=cpAtmIfConfigEntry, cpAtmIfHCIntEgrRcvOAMCells=cpAtmIfHCIntEgrRcvOAMCells, cpAtmIfHCIngressStatMIBGroup=cpAtmIfHCIngressStatMIBGroup, cpAtmIfHCEgrClp1DiscCells=cpAtmIfHCEgrClp1DiscCells, cpAtmIfHCIntEgrClp0DiscCells=cpAtmIfHCIntEgrClp0DiscCells, cpAtmIfMIBGroups=cpAtmIfMIBGroups, cpAtmIfIngressStatMIBGroup=cpAtmIfIngressStatMIBGroup)
