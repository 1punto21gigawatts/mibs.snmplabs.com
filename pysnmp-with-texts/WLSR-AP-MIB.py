#
# PySNMP MIB module WLSR-AP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WLSR-AP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
wlsrEnterpriseMibModules, = mibBuilder.importSymbols("ARUBA-MIB", "wlsrEnterpriseMibModules")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, Integer32, TextualConvention, ModuleIdentity, IpAddress, Unsigned32, snmpModules, TimeTicks, Counter64, Counter32, MibIdentifier, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "Integer32", "TextualConvention", "ModuleIdentity", "IpAddress", "Unsigned32", "snmpModules", "TimeTicks", "Counter64", "Counter32", "MibIdentifier", "Gauge32", "iso")
TAddress, TimeInterval, MacAddress, StorageType, TextualConvention, PhysAddress, DisplayString, TestAndIncr, TruthValue, RowStatus, TDomain = mibBuilder.importSymbols("SNMPv2-TC", "TAddress", "TimeInterval", "MacAddress", "StorageType", "TextualConvention", "PhysAddress", "DisplayString", "TestAndIncr", "TruthValue", "RowStatus", "TDomain")
wlsrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1))
wlsrMIB.setRevisions(('1908-04-16 02:06',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wlsrMIB.setRevisionsDescriptions(('The initial revision.',))
if mibBuilder.loadTexts: wlsrMIB.setLastUpdated('0804160206Z')
if mibBuilder.loadTexts: wlsrMIB.setOrganization('Aruba Wireless Networks')
if mibBuilder.loadTexts: wlsrMIB.setContactInfo('Postal: 1322 Crossman Avenue Sunnyvale, CA 94089 E-mail: dl-support@arubanetworks.com Phone: +1 408 227 4500')
if mibBuilder.loadTexts: wlsrMIB.setDescription('This MIB is for managing the Access Points and Air Monitors. ')
wlsrConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1))
wlsrStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3))
wlsrAirMonitorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4))
wlsrTrapsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100))
wlsrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1), )
if mibBuilder.loadTexts: wlsrConfigTable.setStatus('current')
if mibBuilder.loadTexts: wlsrConfigTable.setDescription(' Table will list the configuration data of a wifi interface. ')
wlsrConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1), ).setIndexNames((0, "WLSR-AP-MIB", "wlsrBSSID"))
if mibBuilder.loadTexts: wlsrConfigEntry.setStatus('current')
if mibBuilder.loadTexts: wlsrConfigEntry.setDescription(' A Wifi configuration entry ')
wlsrBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: wlsrBSSID.setStatus('current')
if mibBuilder.loadTexts: wlsrBSSID.setDescription(' BSSID of the WIFI Interface ')
wlsrESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrESSID.setStatus('current')
if mibBuilder.loadTexts: wlsrESSID.setDescription(' ESSID of the WIFI Interface ')
wlsrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("adhoc", 2), ("monitor", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrMode.setStatus('current')
if mibBuilder.loadTexts: wlsrMode.setDescription(' Mode of the Access Point. Master indicates that we are operating as Access Point. monitor indicates that the AP is an Air Monitor. ')
wlsrCurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrCurrentChannel.setStatus('current')
if mibBuilder.loadTexts: wlsrCurrentChannel.setDescription(' The current operating frequency channel of the DSSS PHY. ')
wlsrTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrTxPower.setStatus('current')
if mibBuilder.loadTexts: wlsrTxPower.setDescription(' Transmit power of the Access point. The value is between 0 ... 4 ')
wlsrRTSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2347))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrRTSThreshold.setStatus('current')
if mibBuilder.loadTexts: wlsrRTSThreshold.setDescription(' This attribute shall indicate the number of octets in an MPDU, below which an RTS/CTS handshake shall not be performed. ')
wlsrRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrRetryLimit.setStatus('current')
if mibBuilder.loadTexts: wlsrRetryLimit.setDescription(' This attribute shall indicate the maximum number of transmission attempts of a frame, the length of which is less than or equal to dot11RTSThreshold, that shall be made before a failure condition is indicated. The default value of this attribute shall be 7. ')
wlsrPreamble = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrPreamble.setStatus('current')
if mibBuilder.loadTexts: wlsrPreamble.setDescription(' The current radio preamble type in use by the wifi interface. ')
wlsrBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrBeaconInterval.setStatus('current')
if mibBuilder.loadTexts: wlsrBeaconInterval.setDescription(' This object shall specify the number of TU that a station shall use for scheduling Beacon transmissions. This value is transmitted in Beacon and Probe Response frames. ')
wlsrPowerMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrPowerMgmt.setStatus('current')
if mibBuilder.loadTexts: wlsrPowerMgmt.setDescription(' This attribute indicates whether Power Management is enabled or not. ')
wlsrLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrLoadBalance.setStatus('current')
if mibBuilder.loadTexts: wlsrLoadBalance.setDescription(' This attribute indicates if load balancing is enabled or disabled. ')
wlsrSupportedRates = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 12), Bits().clone(namedValues=NamedValues(("unused0", 0), ("unused1", 1), ("unused2", 2), ("unused3", 3), ("rate54Mbps", 4), ("rate48Mbps", 5), ("rate36Mbps", 6), ("rate24Mbps", 7), ("rate18Mbps", 8), ("rate12Mbps", 9), ("rate9Mbps", 10), ("rate6Mbps", 11), ("rate11Mbps", 12), ("rate5Mbps", 13), ("rate2Mbps", 14), ("rate1Mbps", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrSupportedRates.setStatus('current')
if mibBuilder.loadTexts: wlsrSupportedRates.setDescription(' Basic Bit rates supported by this WIFI interface. ')
wlsrDTIMPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrDTIMPeriod.setStatus('current')
if mibBuilder.loadTexts: wlsrDTIMPeriod.setDescription(' This attribute shall specify the number of beacon intervals that shall elapse between transmission of Beacons frames containing a TIM element whose DTIM Count field is 0. This value is transmitted in the DTIM Period field of Beacon frames. ')
wlsrLMSAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrLMSAddress.setStatus('current')
if mibBuilder.loadTexts: wlsrLMSAddress.setDescription(' This attribute indicates the IP Address of the Local switch that the AP is connected to. ')
wlsrEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 15), Bits().clone(namedValues=NamedValues(("unused0", 0), ("unused1", 1), ("unused2", 2), ("unused3", 3), ("unused4", 4), ("unused5", 5), ("unused6", 6), ("xSec", 7), ("wpa2PreAuth", 8), ("aes8021x", 9), ("aesPSK", 10), ("dynamicTkip", 11), ("staticTkip", 12), ("dynamicWep", 13), ("staticWep", 14), ("disabled", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrEncryption.setStatus('current')
if mibBuilder.loadTexts: wlsrEncryption.setDescription(' This attribute indicates the Encryption type of the WIFI interface. ')
wlsrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStatus.setStatus('current')
if mibBuilder.loadTexts: wlsrStatus.setDescription(' This attribute indicates the status of the WIFI Interface. ')
wlsrAgeout = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAgeout.setStatus('current')
if mibBuilder.loadTexts: wlsrAgeout.setDescription(' This attribute indicates the ageout value in seconds. ')
wlsrMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2347))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrMTU.setStatus('current')
if mibBuilder.loadTexts: wlsrMTU.setDescription(' This attribute indicates the MTU of the WIFI Interface. ')
wlsrLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrLocation.setStatus('current')
if mibBuilder.loadTexts: wlsrLocation.setDescription(' This attribute indicates the Location of the Access Point in Building.Floor.location format. ')
wlsrHideSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrHideSSID.setStatus('current')
if mibBuilder.loadTexts: wlsrHideSSID.setDescription(' This attribute indicates if SSID is hidden or not. ')
wlsrDenyBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrDenyBroadcast.setStatus('current')
if mibBuilder.loadTexts: wlsrDenyBroadcast.setDescription(' A True value indicates that Broadcast is disabled. ')
wlsrBGmode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bgMixed", 1), ("bOnly", 2), ("gOnly", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrBGmode.setStatus('current')
if mibBuilder.loadTexts: wlsrBGmode.setDescription(' This attributes indicates the mode of the WIFI Interface ')
wlsrCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 10, 11, 12))).clone(namedValues=NamedValues(("noCard", 1), ("intersil", 2), ("atherosA", 3), ("atherosBG", 4), ("atherosABG", 5), ("ar5212A", 10), ("ar5212BG", 11), ("ar5212ABG", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrCardType.setStatus('current')
if mibBuilder.loadTexts: wlsrCardType.setDescription(' Indicates the type of the radio card. ')
wlsrRegDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrRegDomain.setStatus('deprecated')
if mibBuilder.loadTexts: wlsrRegDomain.setDescription(' This Object represents the configured Regulatory Domain this AP will adhere to. 1 -- US 2 -- JAPAN 3 -- EU 4 -- EU2 5 -- EU3 6 -- KOREA 7 -- CHINA 8 -- France 9 -- Singapore 10 -- MALAY 11 -- BRAZIL 12 -- Taiwan 13 -- Czech Republic 14 -- GR 15 -- South Africa 16 -- Argentina 17 -- Australia 18 -- Chile ')
wlsrCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrCountryCode.setStatus('current')
if mibBuilder.loadTexts: wlsrCountryCode.setDescription(' This Object represents the configured Country code . ')
wlsrTxRates = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 1, 1, 1, 27), Bits().clone(namedValues=NamedValues(("unused0", 0), ("unused1", 1), ("unused2", 2), ("unused3", 3), ("rate54Mbps", 4), ("rate48Mbps", 5), ("rate36Mbps", 6), ("rate24Mbps", 7), ("rate18Mbps", 8), ("rate12Mbps", 9), ("rate9Mbps", 10), ("rate6Mbps", 11), ("rate11Mbps", 12), ("rate5Mbps", 13), ("rate2Mbps", 14), ("rate1Mbps", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrTxRates.setStatus('current')
if mibBuilder.loadTexts: wlsrTxRates.setDescription(' Transmit Bit rates supported by this WIFI interface. ')
wlsrStatsChannelGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3))
wlsrChannelStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1), )
if mibBuilder.loadTexts: wlsrChannelStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsrChannelStatsTable.setDescription(' Table contains the Channel Statistics. ')
wlsrChannelStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1), ).setIndexNames((0, "WLSR-AP-MIB", "wlsrChStatsChannel"))
if mibBuilder.loadTexts: wlsrChannelStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsrChannelStatsEntry.setDescription('Channel Statistics Table')
wlsrChStatsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165)))
if mibBuilder.loadTexts: wlsrChStatsChannel.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsChannel.setDescription(' The frequency Channel on which these statistics are collected. ')
wlsrChStatsNumAPs = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsNumAPs.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsNumAPs.setDescription(' This attribute indicates the number of APs using this channel. ')
wlsrChStatsNumStations = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsNumStations.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsNumStations.setDescription(' This attribute indicates the number of stations using this channel. ')
wlsrChStatsTotPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotPkts.setDescription(' This attribute indicates the total packets observed on this channel. ')
wlsrChStatsTotBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytes.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotBytes.setDescription(' This attribute indicates the total Bytes observed on this channel. ')
wlsrChStatsTotRetryPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotRetryPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotRetryPkts.setDescription(' This attribute indicates the total Retry Packets observed on this channel. ')
wlsrChStatsTotFragmentedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotFragmentedPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotFragmentedPkts.setDescription(' This attribute indicates the total Fragmented Packets observed on this channel. ')
wlsrChStatsTotPhyErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPhyErrPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotPhyErrPkts.setDescription(' This attribute indicates the total Physical Error Packets observed on this channel. ')
wlsrChStatsTotMacErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotMacErrPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotMacErrPkts.setDescription(' This attribute indicates the total Mac errors packets observed on this channel. ')
wlsrChStatsFrameErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsFrameErrorRate.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsFrameErrorRate.setDescription(' Frame errors as a percentage of total frames on this channel. ')
wlsrChStatsFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsFrameRetryRate.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsFrameRetryRate.setDescription(' The Frame Retry Rate ')
wlsrChStatsFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsFrameLowSpeedRate.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsFrameLowSpeedRate.setDescription(' Frame Low speed error rate in kbps. ')
wlsrChStatsFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsFrameNonUnicastRate.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsFrameNonUnicastRate.setDescription(' Frame non Unicast rate in kbps. ')
wlsrChStatsFrameBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsFrameBandwidthRate.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsFrameBandwidthRate.setDescription(' Frame Bandwidth rate in kbps. ')
wlsrChStatsFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsFrameFragmentationRate.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsFrameFragmentationRate.setDescription(' Frame Fragmentation Rate in kbps. ')
wlsrChStatsMonitoredTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 1, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsMonitoredTime.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsMonitoredTime.setDescription(' Time in ticks, since we were observing this channel. ')
wlsrChannelRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2), )
if mibBuilder.loadTexts: wlsrChannelRateStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsrChannelRateStatsTable.setDescription(' This table contains all the per channel Packet and Byte Counts but represented in terms of rate categories. ')
wlsrChannelRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1), ).setIndexNames((0, "WLSR-AP-MIB", "wlsrChStatsChannel"))
if mibBuilder.loadTexts: wlsrChannelRateStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsrChannelRateStatsEntry.setDescription('Channel Rate Statistics.')
wlsrChStatsTotPktsAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt1Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt1Mbps.setDescription(' This attribute indicates the total number of packets observed on this channel at 1Mbps rate. ')
wlsrChStatsTotBytesAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt1Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt1Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this channel at 1Mbps rate. ')
wlsrChStatsTotPktsAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt2Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt2Mbps.setDescription(' This attribute indicates the total number of packets observed on this channel at 2Mbps rate. ')
wlsrChStatsTotBytesAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt2Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt2Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this channel at 2Mbps rate. ')
wlsrChStatsTotPktsAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt5Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt5Mbps.setDescription(' This attribute indicates the total number of packets observed on this channel at 5Mbps rate. ')
wlsrChStatsTotBytesAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt5Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt5Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this channel at 5Mbps rate. ')
wlsrChStatsTotPktsAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt11Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt11Mbps.setDescription(' This attribute indicates the total number of packets observed on this channel at 11Mbps rate. ')
wlsrChStatsTotBytesAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt11Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt11Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this channel at 11Mbps rate. ')
wlsrChStatsTotPktsAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt6Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt6Mbps.setDescription(' This attribute indicates the total number of packets observed on this channel at 6Mbps rate. ')
wlsrChStatsTotBytesAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt6Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt6Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this channel at 6Mbps rate. ')
wlsrChStatsTotPktsAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt12Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt12Mbps.setDescription(' This attribute indicates the total number of packets observed on this channel at 12Mbps rate. ')
wlsrChStatsTotBytesAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt12Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt12Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this channel at 12Mbps rate. ')
wlsrChStatsTotPktsAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt18Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt18Mbps.setDescription(' This attribute indicates the total number of packets observed on this channel at 18Mbps rate. ')
wlsrChStatsTotBytesAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt18Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt18Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this channel at 18Mbps rate. ')
wlsrChStatsTotPktsAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt24Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt24Mbps.setDescription(' This attribute indicates the total number of packets observed on this channel at 24Mbps rate. ')
wlsrChStatsTotBytesAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt24Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt24Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this channel at 24Mbps rate. ')
wlsrChStatsTotPktsAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt36Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt36Mbps.setDescription(' This attribute indicates the total number of packets observed on this channel at 36Mbps rate. ')
wlsrChStatsTotBytesAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt36Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt36Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this channel at 36Mbps rate. ')
wlsrChStatsTotPktsAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt48Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt48Mbps.setDescription(' This attribute indicates the total number of packets observed on this channel at 48Mbps rate. ')
wlsrChStatsTotBytesAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt48Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt48Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this channel at 48Mbps rate. ')
wlsrChStatsTotPktsAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt54Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotPktsAt54Mbps.setDescription(' This attribute indicates the total number of packets observed on this channel at 54Mbps rate. ')
wlsrChStatsTotBytesAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt54Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotBytesAt54Mbps.setDescription(' This attribute indicates the total number of Bytes observed on this channel at 54Mbps rate. ')
wlsrChannelDATypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 3), )
if mibBuilder.loadTexts: wlsrChannelDATypeStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsrChannelDATypeStatsTable.setDescription(' This table contains all the per channel Packet and Byte Counts but broken down in terms of Destination Address Type. ')
wlsrChannelDATypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 3, 1), ).setIndexNames((0, "WLSR-AP-MIB", "wlsrChStatsChannel"))
if mibBuilder.loadTexts: wlsrChannelDATypeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsrChannelDATypeStatsEntry.setDescription('Channel Statistics based on the Address Type.')
wlsrChStatsTotDABroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotDABroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotDABroadcastPkts.setDescription(' This attribute indicates the total number of Broadcast packets observed on this channel. ')
wlsrChStatsTotDABroadcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotDABroadcastBytes.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotDABroadcastBytes.setDescription(' This attribute indicates the total number of Broadcast Bytes observed on this channel. ')
wlsrChStatsTotDAMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotDAMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotDAMulticastPkts.setDescription(' This attribute indicates the total number of Multicast packets observed on this channel. ')
wlsrChStatsTotDAMulticastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotDAMulticastBytes.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotDAMulticastBytes.setDescription(' This attribute indicates the total number of Multicast Bytes observed on this channel. ')
wlsrChStatsTotDAUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotDAUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotDAUnicastPkts.setDescription(' This attribute indicates the total number of Unicast packets observed on this channel. ')
wlsrChStatsTotDAUnicastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotDAUnicastBytes.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotDAUnicastBytes.setDescription(' This attribute indicates the total number of Unicast Bytes observed on this channel. ')
wlsrChannelFrameTypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 4), )
if mibBuilder.loadTexts: wlsrChannelFrameTypeStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsrChannelFrameTypeStatsTable.setDescription(' This table contains all the per channel Packet and Byte Counts but broken down into different Frame Types. ')
wlsrChannelFrameTypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 4, 1), ).setIndexNames((0, "WLSR-AP-MIB", "wlsrChStatsChannel"))
if mibBuilder.loadTexts: wlsrChannelFrameTypeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsrChannelFrameTypeStatsEntry.setDescription('Channel Statistics based on Frame Type.')
wlsrChStatsTotMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotMgmtPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotMgmtPkts.setDescription(' This attribute indicates the total number of Management packets observed on this channel. ')
wlsrChStatsTotMgmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotMgmtBytes.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotMgmtBytes.setDescription(' This attribute indicates the total number of Management Bytes observed on this channel. ')
wlsrChStatsTotCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotCtrlPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotCtrlPkts.setDescription(' This attribute indicates the total number of Control packets observed on this channel. ')
wlsrChStatsTotCtrlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotCtrlBytes.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotCtrlBytes.setDescription(' This attribute indicates the total number of Control Bytes observed on this channel. ')
wlsrChStatsTotDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotDataPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotDataPkts.setDescription(' This attribute indicates the total number of Data packets observed on this channel. ')
wlsrChStatsTotDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsTotDataBytes.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsTotDataBytes.setDescription(' This attribute indicates the total number of Data Bytes observed on this channel. ')
wlsrChannelPktSizeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 5), )
if mibBuilder.loadTexts: wlsrChannelPktSizeStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsrChannelPktSizeStatsTable.setDescription(' This table contains all the per channel Packet and Byte Counts but broken down into different Packet Sizes. ')
wlsrChannelPktSizeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 5, 1), ).setIndexNames((0, "WLSR-AP-MIB", "wlsrChStatsChannel"))
if mibBuilder.loadTexts: wlsrChannelPktSizeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsrChannelPktSizeStatsEntry.setDescription('Channel Statistics based on the packet sizes.')
wlsrChStatsPkts63Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsPkts63Bytes.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsPkts63Bytes.setDescription(' This attribute indicates the total number of packets that were less than 64 bytes long. ')
wlsrChStatsPkts64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsPkts64To127.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsPkts64To127.setDescription(' This attribute indicates the total number of packets that were between 64 and 127 bytes long. ')
wlsrChStatsPkts128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsPkts128To255.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsPkts128To255.setDescription(' This attribute indicates the total number of packets that were between 128 and 255 bytes long. ')
wlsrChStatsPkts256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsPkts256To511.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsPkts256To511.setDescription(' This attribute indicates the total number of packets that were between 256 and 511 bytes long. ')
wlsrChStatsPkts512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsPkts512To1023.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsPkts512To1023.setDescription(' This attribute indicates the total number of packets that were between 512 and 1023 bytes long. ')
wlsrChStatsPkts1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 3, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrChStatsPkts1024To1518.setStatus('current')
if mibBuilder.loadTexts: wlsrChStatsPkts1024To1518.setDescription(' This attribute indicates the total number of packets that were between 1024 and 1518 bytes long. ')
wlsrStatsStaGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4))
wlsrStaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1), )
if mibBuilder.loadTexts: wlsrStaStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsrStaStatsTable.setDescription(' This Table contains all the Aggregate statistics collected for a station. ')
wlsrStaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1), ).setIndexNames((0, "WLSR-AP-MIB", "wlsrStaAddress"))
if mibBuilder.loadTexts: wlsrStaStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsrStaStatsEntry.setDescription('Station Statistics.')
wlsrStaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: wlsrStaAddress.setStatus('current')
if mibBuilder.loadTexts: wlsrStaAddress.setDescription(' Mac Address of the Station connected to this Access Point. ')
wlsrStaTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxPkts.setDescription(' This attribute indicates the total packets Transmitted to the Station. ')
wlsrStaTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytes.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxBytes.setDescription(' This attribute indicates the total Bytes Transmitted to the Station. ')
wlsrStaRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxPkts.setDescription(' This attribute indicates the total packets Received from the Station. ')
wlsrStaRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytes.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxBytes.setDescription(' This attribute indicates the total Bytes Received from the Station. ')
wlsrStaTxRetryPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxRetryPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxRetryPkts.setDescription(' This attribute indicates the Retry Packets transmitted by the station ')
wlsrStaRxRetryPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxRetryPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxRetryPkts.setDescription(' This attribute indicates the Retry Packets received from the station ')
wlsrStaTxFragmentedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxFragmentedPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxFragmentedPkts.setDescription(' This attribute indicates the Fragmented Packets transmitted by the station. ')
wlsrStaRxFragmentedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxFragmentedPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxFragmentedPkts.setDescription(' This attribute indicates the Fragmented Packets Received from the station. ')
wlsrStaReceiveErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaReceiveErrPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrStaReceiveErrPkts.setDescription(' This attribute indicates the total Error Packets received from this station. ')
wlsrStaTxTotSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxTotSignal.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxTotSignal.setDescription(' The attribute indicates the total transmitted signal computed for this station. ')
wlsrStaTxSignalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxSignalPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxSignalPkts.setDescription(' This attribute indicates the total Signal Packets transmitted by this station. ')
wlsrStaTxCurSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxCurSignal.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxCurSignal.setDescription(' This attribute indicate the stations current transmit signal strength. ')
wlsrStaTxHighSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxHighSignal.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxHighSignal.setDescription(' This attribute indicate the stations high transmit signal strength. ')
wlsrStaRxTotNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxTotNoise.setStatus('deprecated')
if mibBuilder.loadTexts: wlsrStaRxTotNoise.setDescription(' Total Noise. ')
wlsrStaRxNoisePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxNoisePkts.setStatus('deprecated')
if mibBuilder.loadTexts: wlsrStaRxNoisePkts.setDescription(' Received Noise. ')
wlsrStaRxCurrentNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxCurrentNoise.setStatus('deprecated')
if mibBuilder.loadTexts: wlsrStaRxCurrentNoise.setDescription(' Current Noise. ')
wlsrStaRxHighNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxHighNoise.setStatus('deprecated')
if mibBuilder.loadTexts: wlsrStaRxHighNoise.setDescription(' High Noise ')
wlsrStaRxLowNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxLowNoise.setStatus('deprecated')
if mibBuilder.loadTexts: wlsrStaRxLowNoise.setDescription(' Low Noise ')
wlsrStaFrameRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaFrameRetryRate.setStatus('current')
if mibBuilder.loadTexts: wlsrStaFrameRetryRate.setDescription(' Station Frame Retry Rate in kbps. ')
wlsrStaFrameLowSpeedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaFrameLowSpeedRate.setStatus('current')
if mibBuilder.loadTexts: wlsrStaFrameLowSpeedRate.setDescription(' Station Frame Low speed error rate in kbps. ')
wlsrStaFrameNonUnicastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaFrameNonUnicastRate.setStatus('current')
if mibBuilder.loadTexts: wlsrStaFrameNonUnicastRate.setDescription(' Station Frame Non Unicast rate in kbps. ')
wlsrStaFrameRetryErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaFrameRetryErrorRate.setStatus('current')
if mibBuilder.loadTexts: wlsrStaFrameRetryErrorRate.setDescription(' Station Frame Retry Error Rate in kbps. ')
wlsrStaFrameBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaFrameBandwidthRate.setStatus('current')
if mibBuilder.loadTexts: wlsrStaFrameBandwidthRate.setDescription(' Station Frame Bandwidth rate in kbps. ')
wlsrStaFrameFragmentationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaFrameFragmentationRate.setStatus('current')
if mibBuilder.loadTexts: wlsrStaFrameFragmentationRate.setDescription(' Station Frame Fragmentation Rate in kbps. ')
wlsrStaFrameHighBandwidthRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaFrameHighBandwidthRate.setStatus('current')
if mibBuilder.loadTexts: wlsrStaFrameHighBandwidthRate.setDescription(' Station Frame High Bandwidth Rate in kbps. ')
wlsrStaRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2), )
if mibBuilder.loadTexts: wlsrStaRateStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRateStatsTable.setDescription(' This table contains all the per channel Packet and Byte Counts but represented in terms of rate categories. ')
wlsrStaRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1), ).setIndexNames((0, "WLSR-AP-MIB", "wlsrStaAddress"))
if mibBuilder.loadTexts: wlsrStaRateStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRateStatsEntry.setDescription(' Station Rate Stats Table')
wlsrStaTxPktsAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt1Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxPktsAt1Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 1Mbps rate. ')
wlsrStaTxBytesAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt1Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxBytesAt1Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 1Mbps rate. ')
wlsrStaTxPktsAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt2Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxPktsAt2Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 2Mbps rate. ')
wlsrStaTxBytesAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt2Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxBytesAt2Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 2Mbps rate. ')
wlsrStaTxPktsAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt5Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxPktsAt5Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 5Mbps rate. ')
wlsrStaTxBytesAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt5Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxBytesAt5Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 5Mbps rate. ')
wlsrStaTxPktsAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt11Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxPktsAt11Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 11Mbps rate. ')
wlsrStaTxBytesAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt11Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxBytesAt11Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 11Mbps rate. ')
wlsrStaTxPktsAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt6Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxPktsAt6Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 6Mbps rate. ')
wlsrStaTxBytesAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt6Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxBytesAt6Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 6Mbps rate. ')
wlsrStaTxPktsAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt12Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxPktsAt12Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 12Mbps rate. ')
wlsrStaTxBytesAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt12Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxBytesAt12Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 12Mbps rate. ')
wlsrStaTxPktsAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt18Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxPktsAt18Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 18Mbps rate. ')
wlsrStaTxBytesAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt18Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxBytesAt18Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 18Mbps rate. ')
wlsrStaTxPktsAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt24Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxPktsAt24Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 24Mbps rate. ')
wlsrStaTxBytesAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt24Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxBytesAt24Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 24Mbps rate. ')
wlsrStaTxPktsAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt36Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxPktsAt36Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 36Mbps rate. ')
wlsrStaTxBytesAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt36Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxBytesAt36Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 36Mbps rate. ')
wlsrStaTxPktsAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt48Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxPktsAt48Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 48Mbps rate. ')
wlsrStaTxBytesAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt48Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxBytesAt48Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 48Mbps rate. ')
wlsrStaTxPktsAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPktsAt54Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxPktsAt54Mbps.setDescription(' This attribute indicates the number of Packets Transmitted by the station at 54Mbps rate. ')
wlsrStaTxBytesAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxBytesAt54Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxBytesAt54Mbps.setDescription(' This attribute indicates the number of Octets Transmitted by the station at 54Mbps rate. ')
wlsrStaRxPktsAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt1Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxPktsAt1Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 1Mbps rate. ')
wlsrStaRxBytesAt1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt1Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxBytesAt1Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 1Mbps rate. ')
wlsrStaRxPktsAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt2Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxPktsAt2Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 2Mbps rate. ')
wlsrStaRxBytesAt2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt2Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxBytesAt2Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 2Mbps rate. ')
wlsrStaRxPktsAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt5Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxPktsAt5Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 5Mbps rate. ')
wlsrStaRxBytesAt5Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt5Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxBytesAt5Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 5Mbps rate. ')
wlsrStaRxPktsAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt11Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxPktsAt11Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 11Mbps rate. ')
wlsrStaRxBytesAt11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt11Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxBytesAt11Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 11Mbps rate. ')
wlsrStaRxPktsAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt6Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxPktsAt6Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 6Mbps rate. ')
wlsrStaRxBytesAt6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt6Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxBytesAt6Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 6Mbps rate. ')
wlsrStaRxPktsAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt12Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxPktsAt12Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 12Mbps rate. ')
wlsrStaRxBytesAt12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt12Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxBytesAt12Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 12Mbps rate. ')
wlsrStaRxPktsAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt18Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxPktsAt18Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 18Mbps rate. ')
wlsrStaRxBytesAt18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt18Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxBytesAt18Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 18Mbps rate. ')
wlsrStaRxPktsAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt24Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxPktsAt24Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 24Mbps rate. ')
wlsrStaRxBytesAt24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt24Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxBytesAt24Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 24Mbps rate. ')
wlsrStaRxPktsAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt36Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxPktsAt36Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 36Mbps rate. ')
wlsrStaRxBytesAt36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt36Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxBytesAt36Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 36Mbps rate. ')
wlsrStaRxPktsAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt48Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxPktsAt48Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 48Mbps rate. ')
wlsrStaRxBytesAt48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt48Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxBytesAt48Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 48Mbps rate. ')
wlsrStaRxPktsAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPktsAt54Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxPktsAt54Mbps.setDescription(' This attribute indicates the number of Packets Received by the station at 54Mbps rate. ')
wlsrStaRxBytesAt54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxBytesAt54Mbps.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxBytesAt54Mbps.setDescription(' This attribute indicates the number of Octets Received by the station at 54Mbps rate. ')
wlsrStaDATypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 3), )
if mibBuilder.loadTexts: wlsrStaDATypeStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsrStaDATypeStatsTable.setDescription(' This table contains all the per channel Packet and Byte Counts but broken down in terms of Destination Address Type. ')
wlsrStaDATypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 3, 1), ).setIndexNames((0, "WLSR-AP-MIB", "wlsrStaAddress"))
if mibBuilder.loadTexts: wlsrStaDATypeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsrStaDATypeStatsEntry.setDescription('Station Statistics based on the Destination Address Type.')
wlsrStaTxDABroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxDABroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxDABroadcastPkts.setDescription(' This attribute indicates the number of Broadcast packets transmitted by this Station. ')
wlsrStaTxDABroadcastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxDABroadcastBytes.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxDABroadcastBytes.setDescription(' This attribute indicates the number of Broadcast Bytes transmitted by this Station. ')
wlsrStaTxDAMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxDAMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxDAMulticastPkts.setDescription(' This attribute indicates the number of Multicast packets transmitted by this station. ')
wlsrStaTxDAMulticastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxDAMulticastBytes.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxDAMulticastBytes.setDescription(' This attribute indicates the number of Multicast Bytes transmitted by this station. ')
wlsrStaTxDAUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxDAUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxDAUnicastPkts.setDescription(' This attribute indicates the total of Unicast packets transmitted by this station. ')
wlsrStaTxDAUnicastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxDAUnicastBytes.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxDAUnicastBytes.setDescription(' This attribute indicates the total of Unicast Bytes transmitted by this station. ')
wlsrStaFrameTypeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4), )
if mibBuilder.loadTexts: wlsrStaFrameTypeStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsrStaFrameTypeStatsTable.setDescription(' This table contains all the per channel Packet and Byte Counts but broken down into different Frame Types. ')
wlsrStaFrameTypeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1), ).setIndexNames((0, "WLSR-AP-MIB", "wlsrStaAddress"))
if mibBuilder.loadTexts: wlsrStaFrameTypeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsrStaFrameTypeStatsEntry.setDescription('Station Frame Type Stats Entry.')
wlsrStaTxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxMgmtPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxMgmtPkts.setDescription(' This attribute indicates the Transmitted Management packets from a station. ')
wlsrStaTxMgmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxMgmtBytes.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxMgmtBytes.setDescription(' This attribute indicates the Transmitted Management Bytes from a station ')
wlsrStaTxCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxCtrlPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxCtrlPkts.setDescription(' This attribute indicates the Transmitted Control packets from a station ')
wlsrStaTxCtrlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxCtrlBytes.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxCtrlBytes.setDescription(' This attribute indicates the Transmitted Control Bytes from a station ')
wlsrStaTxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxDataPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxDataPkts.setDescription(' This attribute indicates the Transmitted Data packets from a station ')
wlsrStaTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxDataBytes.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxDataBytes.setDescription(' This attribute indicates the Transmitted Data Bytes observed on this channel. ')
wlsrStaRxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxMgmtPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxMgmtPkts.setDescription(' This attribute indicates the number of received Management packets at a station. ')
wlsrStaRxMgmtBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxMgmtBytes.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxMgmtBytes.setDescription(' This attribute indicates the number of received Management Bytes at a station. ')
wlsrStaRxCtrlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxCtrlPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxCtrlPkts.setDescription(' This attribute indicates the number of received Control packets at a station. ')
wlsrStaRxCtrlBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxCtrlBytes.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxCtrlBytes.setDescription(' This attribute indicates the number of received Control Bytes at a station. ')
wlsrStaRxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxDataPkts.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxDataPkts.setDescription(' This attribute indicates the number of received Data packets at a station. ')
wlsrStaRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxDataBytes.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxDataBytes.setDescription(' This attribute indicates the number of received Data Bytes at a station. ')
wlsrStaPktSizeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5), )
if mibBuilder.loadTexts: wlsrStaPktSizeStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsrStaPktSizeStatsTable.setDescription(' This table contains all the per channel Packet and Byte Counts but broken down into different Packet Sizes. ')
wlsrStaPktSizeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1), ).setIndexNames((0, "WLSR-AP-MIB", "wlsrStaAddress"))
if mibBuilder.loadTexts: wlsrStaPktSizeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsrStaPktSizeStatsEntry.setDescription('Station Packet Size Stats.')
wlsrStaTxPkts63Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPkts63Bytes.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxPkts63Bytes.setDescription(' This attribute indicates the number of packets transmitted by the station that were less than 64 bytes long. ')
wlsrStaTxPkts64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPkts64To127.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxPkts64To127.setDescription(' This attribute indicates the number of packets transmitted by the station that were between 64 and 127 bytes long. ')
wlsrStaTxPkts128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPkts128To255.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxPkts128To255.setDescription(' This attribute indicates the number of packets transmitted by the station that were between 128 and 255 bytes long. ')
wlsrStaTxPkts256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPkts256To511.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxPkts256To511.setDescription(' This attribute indicates the number of packets transmitted by the station that were between 256 and 511 bytes long. ')
wlsrStaTxPkts512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPkts512To1023.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxPkts512To1023.setDescription(' This attribute indicates the number of packets transmitted by the station that were between 512 and 1023 bytes long. ')
wlsrStaTxPkts1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaTxPkts1024To1518.setStatus('current')
if mibBuilder.loadTexts: wlsrStaTxPkts1024To1518.setDescription(' This attribute indicates the number of packets transmitted by the station that were between 1024 and 1518 bytes long. ')
wlsrStaRxPkts63Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPkts63Bytes.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxPkts63Bytes.setDescription(' This attribute indicates the number of packets Received by the station that were less than 64 bytes long. ')
wlsrStaRxPkts64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPkts64To127.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxPkts64To127.setDescription(' This attribute indicates the number of packets Received by the station that were between 64 and 127 bytes long. ')
wlsrStaRxPkts128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPkts128To255.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxPkts128To255.setDescription(' This attribute indicates the number of packets Received by the station that were between 128 and 255 bytes long. ')
wlsrStaRxPkts256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPkts256To511.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxPkts256To511.setDescription(' This attribute indicates the number of packets Received by the station that were between 256 and 511 bytes long. ')
wlsrStaRxPkts512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPkts512To1023.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxPkts512To1023.setDescription(' This attribute indicates the number of packets Received by the station that were between 512 and 1023 bytes long. ')
wlsrStaRxPkts1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 3, 4, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrStaRxPkts1024To1518.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRxPkts1024To1518.setDescription(' This attribute indicates the number of packets Received by the station that were between 1024 and 1518 bytes long. ')
wlsrAirMonitorApListTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1), )
if mibBuilder.loadTexts: wlsrAirMonitorApListTable.setStatus('current')
if mibBuilder.loadTexts: wlsrAirMonitorApListTable.setDescription(' This table contains all the Access Points monitored by the AM. ')
wlsrAirMonitorApListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1), ).setIndexNames((0, "WLSR-AP-MIB", "wlsrAmApBSSID"))
if mibBuilder.loadTexts: wlsrAirMonitorApListEntry.setStatus('current')
if mibBuilder.loadTexts: wlsrAirMonitorApListEntry.setDescription('Ap List Entry')
wlsrAmApBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: wlsrAmApBSSID.setStatus('current')
if mibBuilder.loadTexts: wlsrAmApBSSID.setDescription(' BSSID of the Access Point. ')
wlsrAmSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAmSSID.setStatus('current')
if mibBuilder.loadTexts: wlsrAmSSID.setDescription(' This attribute indicates the SSID of the AP. ')
wlsrAmChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAmChannel.setStatus('current')
if mibBuilder.loadTexts: wlsrAmChannel.setDescription(' This attribute indicates the channel on which this AP is operating. ')
wlsrAmPhysicalType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot11b", 1), ("dot11a", 2), ("dot11g", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAmPhysicalType.setStatus('current')
if mibBuilder.loadTexts: wlsrAmPhysicalType.setDescription(' This attribute indicates the physical layer type. ')
wlsrAmAccessPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("genericAp", 1), ("softAp", 2), ("ciscoAp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAmAccessPointType.setStatus('current')
if mibBuilder.loadTexts: wlsrAmAccessPointType.setDescription(' This attribute indicates the type of AP. ')
wlsrAmRAPType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("valid", 1), ("interfering", 2), ("unsecure", 3), ("dos", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAmRAPType.setStatus('current')
if mibBuilder.loadTexts: wlsrAmRAPType.setDescription(' Type of the Access Point. ')
wlsrAmRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAmRSSI.setStatus('current')
if mibBuilder.loadTexts: wlsrAmRSSI.setDescription(' Access point Receiver Signal Strength Indicator. ')
wlsrAmMonitoredTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAmMonitoredTime.setStatus('current')
if mibBuilder.loadTexts: wlsrAmMonitoredTime.setDescription(' Time in ticks, since the AM is observing this access point. ')
wlsrAmInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAmInactivityTime.setStatus('current')
if mibBuilder.loadTexts: wlsrAmInactivityTime.setDescription(' Access point Inactivity Time. ')
wlsrAmLoadBalancing = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAmLoadBalancing.setStatus('current')
if mibBuilder.loadTexts: wlsrAmLoadBalancing.setDescription(' The attributes indicates whether Load balancing is enabled for this access point. ')
wlsrTrapObjectsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100))
wlsrTargetApBSSID = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrTargetApBSSID.setStatus('current')
if mibBuilder.loadTexts: wlsrTargetApBSSID.setDescription(' This Object is used in the traps to indicate the BSSID of the Access Point, for which we are raising the trap. If an Air Monitor is sending the trap then this will indicate AP. If an Access Point is sending the trap, then it will point to itself. ')
wlsrTargetApSSID = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrTargetApSSID.setStatus('current')
if mibBuilder.loadTexts: wlsrTargetApSSID.setDescription(' This Object is used in the traps to indicate the SSID of the Access Point, for which we are raising the trap. If an Air Monitor is sending the trap then this will indicate AP. If an Access Point is sending the trap, then it will point to itself. ')
wlsrTargetApChannel = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 165))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrTargetApChannel.setStatus('current')
if mibBuilder.loadTexts: wlsrTargetApChannel.setDescription(' This Object is used in the traps to indicate the Channel of the Access Point, for which we are raising the trap. If an Air Monitor is sending the trap then this will indicate AP. If an Access Point is sending the trap, then it will point to itself. ')
wlsrSourceMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrSourceMac.setStatus('current')
if mibBuilder.loadTexts: wlsrSourceMac.setDescription(' This Object is used in the traps to indicate the MAC address of the Source. ')
wlsrNodeMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrNodeMac.setStatus('current')
if mibBuilder.loadTexts: wlsrNodeMac.setDescription(' This Object is used in the traps to indicate the MAC address of a Node. ')
wlsrFrameType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("associateRequest", 1), ("associateResponse", 2), ("reassociateRequest", 3), ("reassociateResponse", 4), ("probeRequest", 5), ("probeResponse", 6), ("beacon", 9), ("atim", 10), ("disassociate", 11), ("auth", 12), ("deauth", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrFrameType.setStatus('current')
if mibBuilder.loadTexts: wlsrFrameType.setDescription(' This Object is used in the traps to indicate the Frame Type. ')
wlsrAddressType = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("srcAddress", 1), ("dstAddress", 2), ("bssid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrAddressType.setStatus('current')
if mibBuilder.loadTexts: wlsrAddressType.setDescription(' This Object is used in the traps to indicate the Address Type. ')
wlsrSignatureName = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrSignatureName.setStatus('current')
if mibBuilder.loadTexts: wlsrSignatureName.setDescription(' This Object is used in the traps to indicate the Signature Name. ')
wlsrMatchedMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrMatchedMac.setStatus('current')
if mibBuilder.loadTexts: wlsrMatchedMac.setDescription(' This Object is used in the traps to indicate the Macaddress. ')
wlsrMatchedIp = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrMatchedIp.setStatus('current')
if mibBuilder.loadTexts: wlsrMatchedIp.setDescription(' This Object is used in the traps to indicate the Ip Address. ')
wlsrReceiverMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrReceiverMac.setStatus('current')
if mibBuilder.loadTexts: wlsrReceiverMac.setDescription(' This Object is used in the traps to indicate the MAC address of the Receiver. ')
wlsrTransmitterMac = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrTransmitterMac.setStatus('current')
if mibBuilder.loadTexts: wlsrTransmitterMac.setDescription(' This Object is used in the traps to indicate the MAC address of the Transmitter. ')
wlsrRSSI = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrRSSI.setStatus('current')
if mibBuilder.loadTexts: wlsrRSSI.setDescription(' This Object is used in the traps to indicate the Signal Strength Indicator. ')
wlsrRogueInfoURL = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrRogueInfoURL.setStatus('current')
if mibBuilder.loadTexts: wlsrRogueInfoURL.setDescription(' This Object is used to point to the WEBGUI Rogue AP information URL. ')
wlsrInterferingAPInfoURL = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 100, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsrInterferingAPInfoURL.setStatus('current')
if mibBuilder.loadTexts: wlsrInterferingAPInfoURL.setDescription(' This Object is used to point to the WEBGUI Rogue interfering AP information URL. ')
wlsrUnsecureApDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1001)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrMatchedMac"), ("WLSR-AP-MIB", "wlsrMatchedIp"), ("WLSR-AP-MIB", "wlsrRogueInfoURL"))
if mibBuilder.loadTexts: wlsrUnsecureApDetected.setStatus('current')
if mibBuilder.loadTexts: wlsrUnsecureApDetected.setDescription(' This trap indicates that an Unsecure Access Point is detected by an Air Monitor located at wlsrLocation on channel wlsrCurrentChannel. The AP is declared unsecure, because we matched it to the wlsrMatchedMac/wlsrMatchedIp. ')
wlsrStaImpersonation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1002)).setObjects(("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrLocation"))
if mibBuilder.loadTexts: wlsrStaImpersonation.setStatus('current')
if mibBuilder.loadTexts: wlsrStaImpersonation.setDescription(' This trap indicates that an AM at location wlsrLocation detected a Station impersonation. ')
wlsrReservedChannelViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1003)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrReservedChannelViolation.setStatus('current')
if mibBuilder.loadTexts: wlsrReservedChannelViolation.setDescription(' This trap indicates that an Access Point is detected by an AP at location wlsrLocation, which violates the Reserved Channel configuration. ')
wlsrValidSSIDViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1004)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrValidSSIDViolation.setStatus('current')
if mibBuilder.loadTexts: wlsrValidSSIDViolation.setDescription(' This trap indicates that an Access Point violating Valid SSID is detected by an AP at wlsrLocation. ')
wlsrChannelMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1005)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrChannelMisconfiguration.setStatus('current')
if mibBuilder.loadTexts: wlsrChannelMisconfiguration.setDescription(' This trap indicates that an Access Point has a bad channel configuration. ')
wlsrOUIMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1006)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrOUIMisconfiguration.setStatus('current')
if mibBuilder.loadTexts: wlsrOUIMisconfiguration.setDescription(' This trap indicates that an Access Point has bad OUI configuration. ')
wlsrSSIDMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1007)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrSSIDMisconfiguration.setStatus('current')
if mibBuilder.loadTexts: wlsrSSIDMisconfiguration.setDescription(' This trap indicates that an Access Point has bad SSID configuration. ')
wlsrShortPreableMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1008)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrShortPreableMisconfiguration.setStatus('current')
if mibBuilder.loadTexts: wlsrShortPreableMisconfiguration.setDescription(' This trap indicates that an Access Point has bad Short preamble configuration. ')
wlsrWPAMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1009)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrWPAMisconfiguration.setStatus('current')
if mibBuilder.loadTexts: wlsrWPAMisconfiguration.setDescription(' This trap indicates that an Access Point has bad WPA configuration. ')
wlsrAdhocNetworkDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1010)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrAdhocNetworkDetected.setStatus('current')
if mibBuilder.loadTexts: wlsrAdhocNetworkDetected.setDescription(' This trap indicates that an AM has detected an Adhoc network. ')
wlsrStaPolicyViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1011)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrStaPolicyViolation.setStatus('current')
if mibBuilder.loadTexts: wlsrStaPolicyViolation.setDescription(' This trap indicates that a Valid Station policy is violated. ')
wlsrRepeatWEPIVViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1012)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrRepeatWEPIVViolation.setStatus('current')
if mibBuilder.loadTexts: wlsrRepeatWEPIVViolation.setDescription(' This trap indicates that an AP/AM detected a Repeat WEP-IV violation. ')
wlsrWeakWEPIVViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1013)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrWeakWEPIVViolation.setStatus('current')
if mibBuilder.loadTexts: wlsrWeakWEPIVViolation.setDescription(' This trap indicates that an AP/AM detected a Weak WEP-IV violation. ')
wlsrChannelInterferenceDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1014)).setObjects(("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrChannelInterferenceDetected.setStatus('current')
if mibBuilder.loadTexts: wlsrChannelInterferenceDetected.setDescription(' This trap indicates that an AM/AP located at wlsrLocation has detected a channel interference on wlsrCurrentChannel. ')
wlsrAPInterferenceDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1015)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrAPInterferenceDetected.setStatus('current')
if mibBuilder.loadTexts: wlsrAPInterferenceDetected.setDescription(' This trap indicates that an AM/AP located at wlsrLocation has detected an AP interference on wlsrCurrentChannel. ')
wlsrStaInterferenceDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1016)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrStaInterferenceDetected.setStatus('current')
if mibBuilder.loadTexts: wlsrStaInterferenceDetected.setDescription(' This trap indicates that an AM/AP located at wlsrLocation has detected a Station interference on wlsrCurrentChannel. ')
wlsrFrameRetryRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1017)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrFrameRetryRateExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsrFrameRetryRateExceeded.setDescription(' This trap indicates that an AM/AP located at wlsrLocation is reporting that an AP wlsrTargetApBSSID has exceeded an upper threshold for Frame Retry Rate for AP wlsrTargetApBSSID. ')
wlsrFrameReceiveErrorRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1018)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApChannel"), ("WLSR-AP-MIB", "wlsrLocation"))
if mibBuilder.loadTexts: wlsrFrameReceiveErrorRateExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsrFrameReceiveErrorRateExceeded.setDescription(' This trap indicates that an AM/AP located at wlsrLocation is reporting that an AP wlsrTargetApBSSID has exceeded an upper threshold for Frame Receive Error Rate for AP wlsrTargetApBSSID. ')
wlsrFrameFragmentationRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1019)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApChannel"), ("WLSR-AP-MIB", "wlsrLocation"))
if mibBuilder.loadTexts: wlsrFrameFragmentationRateExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsrFrameFragmentationRateExceeded.setDescription(' This trap indicates that an AM/AP located at wlsrLocation is reporting that an AP wlsrTargetApBSSID has exceeded an upper threshold for Frame Fragmentation Rate for AP wlsrTargetApBSSID. ')
wlsrFrameBandWidthRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1020)).setObjects(("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrFrameBandWidthRateExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsrFrameBandWidthRateExceeded.setDescription(' This trap indicates that an AM/AP located at wlsrLocation is reporting that a station wlsrStaAddress has exceeded the allocated Bandwidth rate. ')
wlsrFrameLowSpeedRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1021)).setObjects(("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrFrameLowSpeedRateExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsrFrameLowSpeedRateExceeded.setDescription(' This trap indicates that an AM/AP located at wlsrLocation is reporting that a station wlsrStaAddress has exceeded the Low speed rate. ')
wlsrFrameNonUnicastRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1022)).setObjects(("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrFrameNonUnicastRateExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsrFrameNonUnicastRateExceeded.setDescription(' This trap indicates that an AM/AP located at wlsrLocation is reporting that a station wlsrStaAddress has exceeded the Non Unicast traffic rate. ')
wlsrLoadbalancingEnabled = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1023)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrLoadbalancingEnabled.setStatus('current')
if mibBuilder.loadTexts: wlsrLoadbalancingEnabled.setDescription(' This trap indicates that an AM/AP located at wlsrLocation is reporting that an AP with BSSID wlsrTargetApBSSID has enabled Load balancing. ')
wlsrChannelFrameRetryRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1024)).setObjects(("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrChannelFrameRetryRateExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsrChannelFrameRetryRateExceeded.setDescription(' This trap indicates that an AM/AP located at wlsrLocation is reporting that it exceeded an upper threshold for Frame Retry Rate. ')
wlsrChannelFrameFragmentationRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1025)).setObjects(("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrChannelFrameFragmentationRateExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsrChannelFrameFragmentationRateExceeded.setDescription(' This trap indicates that an AM/AP located at wlsrLocation is reporting that it exceeded an upper threshold for Frame Fragmentation Rate. ')
wlsrChannelFrameErrorRateExceeded = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1026)).setObjects(("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrChannelFrameErrorRateExceeded.setStatus('current')
if mibBuilder.loadTexts: wlsrChannelFrameErrorRateExceeded.setDescription(' This trap indicates that an AM/AP located at wlsrLocation is reporting that it exceeded an upper threshold for Frame Error Rate. ')
wlsrSignatureMatch = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1027)).setObjects(("WLSR-AP-MIB", "wlsrSignatureName"), ("WLSR-AP-MIB", "wlsrSourceMac"), ("WLSR-AP-MIB", "wlsrRSSI"), ("WLSR-AP-MIB", "wlsrLocation"))
if mibBuilder.loadTexts: wlsrSignatureMatch.setStatus('current')
if mibBuilder.loadTexts: wlsrSignatureMatch.setDescription(' This trap indicates that we detected a signature match. ')
wlsrChannelRateAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1028)).setObjects(("WLSR-AP-MIB", "wlsrFrameType"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrChannelRateAnomaly.setStatus('current')
if mibBuilder.loadTexts: wlsrChannelRateAnomaly.setDescription(' This trap indicates that an AP/AM at wlsrLocation detected frames of type wlsrFrameType on wlsrCurrentChannel which exceeds the configured IDS rate threshold. ')
wlsrNodeRateAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1029)).setObjects(("WLSR-AP-MIB", "wlsrFrameType"), ("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrRSSI"), ("WLSR-AP-MIB", "wlsrLocation"))
if mibBuilder.loadTexts: wlsrNodeRateAnomaly.setStatus('current')
if mibBuilder.loadTexts: wlsrNodeRateAnomaly.setDescription(' This trap indicates that an AP/AM at wlsrLocation detected frames of type wlsrFrameType transmitted by node wlsrNodeMac which exceeds the configured IDS rate threshold. ')
wlsrEAPRateAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1030)).setObjects(("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrEAPRateAnomaly.setStatus('current')
if mibBuilder.loadTexts: wlsrEAPRateAnomaly.setDescription(' This trap indicates that the number of EAP Handshake packets received by an AP/AM at wlsrLocation exceeds the configured IDS EAP Handshake rate. ')
wlsrSignalAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1031)).setObjects(("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrSignalAnomaly.setStatus('current')
if mibBuilder.loadTexts: wlsrSignalAnomaly.setDescription(' This trap indicates that an AP/AM at wlsrLocation detected a Signal Anomaly on wlsrCurrentChannel. ')
wlsrSequenceNumberAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1032)).setObjects(("WLSR-AP-MIB", "wlsrSourceMac"), ("WLSR-AP-MIB", "wlsrRSSI"), ("WLSR-AP-MIB", "wlsrLocation"))
if mibBuilder.loadTexts: wlsrSequenceNumberAnomaly.setStatus('current')
if mibBuilder.loadTexts: wlsrSequenceNumberAnomaly.setDescription(' This trap indicates that an AP/AM at wlsrLocation received packets which exceeds the acceptable sequence number difference. The acceptable sequence number difference is an IDS Configuration object. ')
wlsrDisconnectStationAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1033)).setObjects(("WLSR-AP-MIB", "wlsrFrameType"), ("WLSR-AP-MIB", "wlsrSourceMac"), ("WLSR-AP-MIB", "wlsrRSSI"), ("WLSR-AP-MIB", "wlsrLocation"))
if mibBuilder.loadTexts: wlsrDisconnectStationAttack.setStatus('current')
if mibBuilder.loadTexts: wlsrDisconnectStationAttack.setDescription(' This trap indicates that an AP/AM detected a station Disconnect attack. ')
wlsrApFloodAttack = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1034)).setObjects(("WLSR-AP-MIB", "wlsrLocation"))
if mibBuilder.loadTexts: wlsrApFloodAttack.setStatus('current')
if mibBuilder.loadTexts: wlsrApFloodAttack.setDescription(" This trap is triggered when the number of spurious AP's detected by an AP/AM at wlsrLocation exceeds the configured IDS threshold. ")
wlsrAdhocNetwork = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1035)).setObjects(("WLSR-AP-MIB", "wlsrSourceMac"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrRSSI"), ("WLSR-AP-MIB", "wlsrLocation"))
if mibBuilder.loadTexts: wlsrAdhocNetwork.setStatus('current')
if mibBuilder.loadTexts: wlsrAdhocNetwork.setDescription(' This trap indicates that an AP/AM at wlsrLocation detected an Adhoc Network. Node wlsrSourceMac is connected to an adhoc AP wlsrTargetApBSSID with wlsrTargetApSSID ssid. ')
wlsrWirelessBridge = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1036)).setObjects(("WLSR-AP-MIB", "wlsrTransmitterMac"), ("WLSR-AP-MIB", "wlsrReceiverMac"), ("WLSR-AP-MIB", "wlsrRSSI"), ("WLSR-AP-MIB", "wlsrLocation"))
if mibBuilder.loadTexts: wlsrWirelessBridge.setStatus('current')
if mibBuilder.loadTexts: wlsrWirelessBridge.setDescription(' This trap indicates that an AP/AM at wlsrLocation detected a Wireless Bridge. The detected bridge is between wlsrSourceMac and wlsrReceiverMac. ')
wlsrInvalidMacOUI = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1037)).setObjects(("WLSR-AP-MIB", "wlsrAddressType"), ("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrRSSI"), ("WLSR-AP-MIB", "wlsrLocation"))
if mibBuilder.loadTexts: wlsrInvalidMacOUI.setStatus('current')
if mibBuilder.loadTexts: wlsrInvalidMacOUI.setDescription(' This trap indicates that an AP/AM at wlsrLocation detected an Invalid MAC OUI in transmission from the Node wlsrNodeMac. The invalid mac is the <wlsrAddressType>. ')
wlsrLoadbalancingDisabled = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1038)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrTargetApChannel"), ("WLSR-AP-MIB", "wlsrLocation"))
if mibBuilder.loadTexts: wlsrLoadbalancingDisabled.setStatus('current')
if mibBuilder.loadTexts: wlsrLoadbalancingDisabled.setDescription(' This trap indicates that an AM/AP located at wlsrLocation is reporting that an AP with BSSID wlsrTargetApBSSID has disabled Load balancing. ')
wlsrWEPMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1039)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrWEPMisconfiguration.setStatus('current')
if mibBuilder.loadTexts: wlsrWEPMisconfiguration.setDescription(' This trap indicates that an Access Point has bad WEP configuration. ')
wlsrStaRepeatWEPIVViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1040)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrStaRepeatWEPIVViolation.setStatus('current')
if mibBuilder.loadTexts: wlsrStaRepeatWEPIVViolation.setDescription(' This trap indicates that an AP/AM detected a Repeat WEP-IV violation. for a Station ')
wlsrStaWeakWEPIVViolation = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1041)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrStaWeakWEPIVViolation.setStatus('current')
if mibBuilder.loadTexts: wlsrStaWeakWEPIVViolation.setDescription(' This trap indicates that an AP/AM detected a Weak WEP-IV violation. for a Station ')
wlsrStaAssociatedToUnsecureAp = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1042)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrNodeMac"), ("WLSR-AP-MIB", "wlsrRogueInfoURL"))
if mibBuilder.loadTexts: wlsrStaAssociatedToUnsecureAp.setStatus('current')
if mibBuilder.loadTexts: wlsrStaAssociatedToUnsecureAp.setDescription(' This trap indicates that a station with wlsrNodeMac associated with an Unsecure Access Point wlsrTargetApBSSID. This is detected by an Air Monitor located at wlsrLocation on channel wlsrCurrentChannel. ')
wlsrAdhocNetworkBridgeDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1043)).setObjects(("WLSR-AP-MIB", "wlsrSourceMac"), ("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"))
if mibBuilder.loadTexts: wlsrAdhocNetworkBridgeDetected.setStatus('current')
if mibBuilder.loadTexts: wlsrAdhocNetworkBridgeDetected.setDescription(' This trap indicates that an AM has detected an Adhoc network that is bridging to a wired network ')
wlsrInterferingApDetected = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 3, 1, 1, 100, 1044)).setObjects(("WLSR-AP-MIB", "wlsrTargetApBSSID"), ("WLSR-AP-MIB", "wlsrTargetApSSID"), ("WLSR-AP-MIB", "wlsrLocation"), ("WLSR-AP-MIB", "wlsrCurrentChannel"), ("WLSR-AP-MIB", "wlsrInterferingAPInfoURL"))
if mibBuilder.loadTexts: wlsrInterferingApDetected.setStatus('current')
if mibBuilder.loadTexts: wlsrInterferingApDetected.setDescription(' This trap indicates that an Interfering Access Point is detected by an Air Monitor located at wlsrLocation on channel wlsrCurrentChannel. ')
mibBuilder.exportSymbols("WLSR-AP-MIB", wlsrDTIMPeriod=wlsrDTIMPeriod, wlsrTargetApBSSID=wlsrTargetApBSSID, wlsrStaRxDataBytes=wlsrStaRxDataBytes, wlsrStaTxPktsAt36Mbps=wlsrStaTxPktsAt36Mbps, wlsrFrameRetryRateExceeded=wlsrFrameRetryRateExceeded, wlsrStaRxPkts256To511=wlsrStaRxPkts256To511, wlsrAmChannel=wlsrAmChannel, wlsrStaTxCtrlPkts=wlsrStaTxCtrlPkts, wlsrStaStatsEntry=wlsrStaStatsEntry, wlsrChStatsPkts63Bytes=wlsrChStatsPkts63Bytes, wlsrStaRxPkts64To127=wlsrStaRxPkts64To127, wlsrInterferingAPInfoURL=wlsrInterferingAPInfoURL, wlsrStaRxPktsAt24Mbps=wlsrStaRxPktsAt24Mbps, wlsrStaTxPkts=wlsrStaTxPkts, wlsrBSSID=wlsrBSSID, wlsrChStatsTotPktsAt11Mbps=wlsrChStatsTotPktsAt11Mbps, wlsrOUIMisconfiguration=wlsrOUIMisconfiguration, wlsrStaRxCurrentNoise=wlsrStaRxCurrentNoise, wlsrStaInterferenceDetected=wlsrStaInterferenceDetected, wlsrStaTxBytesAt36Mbps=wlsrStaTxBytesAt36Mbps, wlsrStaRxPktsAt2Mbps=wlsrStaRxPktsAt2Mbps, wlsrStaReceiveErrPkts=wlsrStaReceiveErrPkts, wlsrStaRxPktsAt18Mbps=wlsrStaRxPktsAt18Mbps, wlsrChStatsTotCtrlBytes=wlsrChStatsTotCtrlBytes, wlsrChStatsTotBytesAt1Mbps=wlsrChStatsTotBytesAt1Mbps, wlsrChannelInterferenceDetected=wlsrChannelInterferenceDetected, wlsrStaTxDataBytes=wlsrStaTxDataBytes, wlsrChStatsTotPktsAt24Mbps=wlsrChStatsTotPktsAt24Mbps, wlsrFrameNonUnicastRateExceeded=wlsrFrameNonUnicastRateExceeded, wlsrChStatsTotDAMulticastBytes=wlsrChStatsTotDAMulticastBytes, wlsrStaTxSignalPkts=wlsrStaTxSignalPkts, wlsrStaTxBytesAt11Mbps=wlsrStaTxBytesAt11Mbps, wlsrChStatsTotMgmtPkts=wlsrChStatsTotMgmtPkts, wlsrChannelFrameRetryRateExceeded=wlsrChannelFrameRetryRateExceeded, wlsrTrapObjectsGroup=wlsrTrapObjectsGroup, wlsrChannelStatsTable=wlsrChannelStatsTable, wlsrChannelRateStatsEntry=wlsrChannelRateStatsEntry, wlsrChStatsNumStations=wlsrChStatsNumStations, wlsrPowerMgmt=wlsrPowerMgmt, wlsrWirelessBridge=wlsrWirelessBridge, wlsrChStatsTotCtrlPkts=wlsrChStatsTotCtrlPkts, wlsrChannelPktSizeStatsEntry=wlsrChannelPktSizeStatsEntry, wlsrStaRxBytesAt6Mbps=wlsrStaRxBytesAt6Mbps, wlsrStaRxPktsAt36Mbps=wlsrStaRxPktsAt36Mbps, wlsrStaRxBytesAt54Mbps=wlsrStaRxBytesAt54Mbps, wlsrStaFrameTypeStatsTable=wlsrStaFrameTypeStatsTable, wlsrStaFrameNonUnicastRate=wlsrStaFrameNonUnicastRate, wlsrDisconnectStationAttack=wlsrDisconnectStationAttack, wlsrBGmode=wlsrBGmode, wlsrLMSAddress=wlsrLMSAddress, wlsrStaImpersonation=wlsrStaImpersonation, wlsrConfigGroup=wlsrConfigGroup, wlsrConfigEntry=wlsrConfigEntry, wlsrStaRateStatsTable=wlsrStaRateStatsTable, wlsrChStatsTotPktsAt6Mbps=wlsrChStatsTotPktsAt6Mbps, wlsrStaTxMgmtBytes=wlsrStaTxMgmtBytes, wlsrAdhocNetworkDetected=wlsrAdhocNetworkDetected, wlsrStaTxHighSignal=wlsrStaTxHighSignal, wlsrChStatsFrameErrorRate=wlsrChStatsFrameErrorRate, wlsrSSIDMisconfiguration=wlsrSSIDMisconfiguration, wlsrStaRxPktsAt11Mbps=wlsrStaRxPktsAt11Mbps, wlsrStatus=wlsrStatus, wlsrStaTxBytesAt6Mbps=wlsrStaTxBytesAt6Mbps, wlsrMTU=wlsrMTU, wlsrStatsStaGroup=wlsrStatsStaGroup, wlsrChStatsTotBytesAt48Mbps=wlsrChStatsTotBytesAt48Mbps, wlsrChStatsTotDAMulticastPkts=wlsrChStatsTotDAMulticastPkts, wlsrCountryCode=wlsrCountryCode, wlsrValidSSIDViolation=wlsrValidSSIDViolation, wlsrChStatsFrameFragmentationRate=wlsrChStatsFrameFragmentationRate, wlsrStaRateStatsEntry=wlsrStaRateStatsEntry, wlsrStaFrameRetryRate=wlsrStaFrameRetryRate, wlsrAirMonitorGroup=wlsrAirMonitorGroup, wlsrStaTxPkts256To511=wlsrStaTxPkts256To511, wlsrShortPreableMisconfiguration=wlsrShortPreableMisconfiguration, wlsrFrameBandWidthRateExceeded=wlsrFrameBandWidthRateExceeded, wlsrStaDATypeStatsEntry=wlsrStaDATypeStatsEntry, wlsrStaFrameTypeStatsEntry=wlsrStaFrameTypeStatsEntry, wlsrStaRxRetryPkts=wlsrStaRxRetryPkts, wlsrStaTxPktsAt1Mbps=wlsrStaTxPktsAt1Mbps, wlsrStaTxPkts1024To1518=wlsrStaTxPkts1024To1518, wlsrStaWeakWEPIVViolation=wlsrStaWeakWEPIVViolation, wlsrChStatsTotBytesAt36Mbps=wlsrChStatsTotBytesAt36Mbps, wlsrStaFrameLowSpeedRate=wlsrStaFrameLowSpeedRate, wlsrStaTxDAUnicastPkts=wlsrStaTxDAUnicastPkts, wlsrLocation=wlsrLocation, wlsrStaTxRetryPkts=wlsrStaTxRetryPkts, wlsrStaTxPktsAt5Mbps=wlsrStaTxPktsAt5Mbps, wlsrStaTxMgmtPkts=wlsrStaTxMgmtPkts, wlsrSourceMac=wlsrSourceMac, wlsrInterferingApDetected=wlsrInterferingApDetected, wlsrChannelDATypeStatsEntry=wlsrChannelDATypeStatsEntry, wlsrWPAMisconfiguration=wlsrWPAMisconfiguration, wlsrStaRxCtrlBytes=wlsrStaRxCtrlBytes, wlsrStaDATypeStatsTable=wlsrStaDATypeStatsTable, wlsrAPInterferenceDetected=wlsrAPInterferenceDetected, wlsrStaRxPktsAt1Mbps=wlsrStaRxPktsAt1Mbps, wlsrAmRAPType=wlsrAmRAPType, wlsrChStatsTotPktsAt2Mbps=wlsrChStatsTotPktsAt2Mbps, wlsrStaRxPktsAt6Mbps=wlsrStaRxPktsAt6Mbps, wlsrChStatsFrameLowSpeedRate=wlsrChStatsFrameLowSpeedRate, wlsrStaRxBytes=wlsrStaRxBytes, wlsrStaRxPkts=wlsrStaRxPkts, wlsrSequenceNumberAnomaly=wlsrSequenceNumberAnomaly, wlsrStaRxPkts128To255=wlsrStaRxPkts128To255, wlsrRSSI=wlsrRSSI, wlsrChStatsTotBytesAt5Mbps=wlsrChStatsTotBytesAt5Mbps, wlsrUnsecureApDetected=wlsrUnsecureApDetected, wlsrChStatsTotDAUnicastBytes=wlsrChStatsTotDAUnicastBytes, wlsrChStatsMonitoredTime=wlsrChStatsMonitoredTime, wlsrStaRxPktsAt5Mbps=wlsrStaRxPktsAt5Mbps, wlsrChStatsTotDABroadcastPkts=wlsrChStatsTotDABroadcastPkts, wlsrStaTxDAUnicastBytes=wlsrStaTxDAUnicastBytes, wlsrDenyBroadcast=wlsrDenyBroadcast, wlsrStaRxBytesAt36Mbps=wlsrStaRxBytesAt36Mbps, wlsrConfigTable=wlsrConfigTable, wlsrStatsGroup=wlsrStatsGroup, wlsrChStatsPkts64To127=wlsrChStatsPkts64To127, wlsrStaTxPktsAt12Mbps=wlsrStaTxPktsAt12Mbps, wlsrAmApBSSID=wlsrAmApBSSID, wlsrAmPhysicalType=wlsrAmPhysicalType, wlsrRogueInfoURL=wlsrRogueInfoURL, wlsrStaRxBytesAt18Mbps=wlsrStaRxBytesAt18Mbps, wlsrEncryption=wlsrEncryption, wlsrChannelFrameFragmentationRateExceeded=wlsrChannelFrameFragmentationRateExceeded, wlsrRetryLimit=wlsrRetryLimit, wlsrChStatsTotPktsAt48Mbps=wlsrChStatsTotPktsAt48Mbps, wlsrSignalAnomaly=wlsrSignalAnomaly, wlsrWEPMisconfiguration=wlsrWEPMisconfiguration, wlsrAdhocNetworkBridgeDetected=wlsrAdhocNetworkBridgeDetected, wlsrStaRxBytesAt2Mbps=wlsrStaRxBytesAt2Mbps, wlsrChStatsTotMgmtBytes=wlsrChStatsTotMgmtBytes, wlsrChStatsTotPktsAt18Mbps=wlsrChStatsTotPktsAt18Mbps, wlsrStaFrameBandwidthRate=wlsrStaFrameBandwidthRate, wlsrStaRepeatWEPIVViolation=wlsrStaRepeatWEPIVViolation, wlsrRegDomain=wlsrRegDomain, wlsrAmRSSI=wlsrAmRSSI, wlsrFrameType=wlsrFrameType, wlsrChStatsTotBytes=wlsrChStatsTotBytes, wlsrChannelPktSizeStatsTable=wlsrChannelPktSizeStatsTable, wlsrStaTxDABroadcastPkts=wlsrStaTxDABroadcastPkts, wlsrStaTxPkts63Bytes=wlsrStaTxPkts63Bytes, wlsrChannelFrameErrorRateExceeded=wlsrChannelFrameErrorRateExceeded, wlsrESSID=wlsrESSID, wlsrChStatsPkts256To511=wlsrChStatsPkts256To511, wlsrRTSThreshold=wlsrRTSThreshold, wlsrChStatsPkts128To255=wlsrChStatsPkts128To255, wlsrStaRxBytesAt11Mbps=wlsrStaRxBytesAt11Mbps, wlsrChStatsFrameRetryRate=wlsrChStatsFrameRetryRate, wlsrStaAssociatedToUnsecureAp=wlsrStaAssociatedToUnsecureAp, wlsrStaTxPktsAt48Mbps=wlsrStaTxPktsAt48Mbps, wlsrStaTxBytesAt1Mbps=wlsrStaTxBytesAt1Mbps, wlsrChStatsTotDABroadcastBytes=wlsrChStatsTotDABroadcastBytes, wlsrStaRxPkts1024To1518=wlsrStaRxPkts1024To1518, wlsrStaTxBytesAt48Mbps=wlsrStaTxBytesAt48Mbps, wlsrStaPolicyViolation=wlsrStaPolicyViolation, wlsrStaFrameHighBandwidthRate=wlsrStaFrameHighBandwidthRate, wlsrStaTxCtrlBytes=wlsrStaTxCtrlBytes, wlsrAmSSID=wlsrAmSSID, wlsrCardType=wlsrCardType, wlsrChStatsTotBytesAt11Mbps=wlsrChStatsTotBytesAt11Mbps, wlsrChStatsTotDataPkts=wlsrChStatsTotDataPkts, wlsrFrameReceiveErrorRateExceeded=wlsrFrameReceiveErrorRateExceeded, wlsrTargetApSSID=wlsrTargetApSSID, wlsrStaTxBytes=wlsrStaTxBytes, wlsrMatchedIp=wlsrMatchedIp, wlsrStaStatsTable=wlsrStaStatsTable, wlsrStaRxLowNoise=wlsrStaRxLowNoise, wlsrStaTxPktsAt54Mbps=wlsrStaTxPktsAt54Mbps, wlsrAmInactivityTime=wlsrAmInactivityTime, wlsrStaRxPktsAt12Mbps=wlsrStaRxPktsAt12Mbps, wlsrStaAddress=wlsrStaAddress, wlsrChStatsTotBytesAt24Mbps=wlsrChStatsTotBytesAt24Mbps, wlsrMode=wlsrMode, wlsrChStatsTotPktsAt36Mbps=wlsrChStatsTotPktsAt36Mbps, wlsrChStatsTotBytesAt54Mbps=wlsrChStatsTotBytesAt54Mbps, wlsrReservedChannelViolation=wlsrReservedChannelViolation, wlsrAdhocNetwork=wlsrAdhocNetwork, wlsrChannelFrameTypeStatsTable=wlsrChannelFrameTypeStatsTable, wlsrStaTxDataPkts=wlsrStaTxDataPkts, wlsrStaPktSizeStatsTable=wlsrStaPktSizeStatsTable, wlsrFrameLowSpeedRateExceeded=wlsrFrameLowSpeedRateExceeded, wlsrMatchedMac=wlsrMatchedMac, wlsrLoadbalancingDisabled=wlsrLoadbalancingDisabled, wlsrChStatsTotBytesAt2Mbps=wlsrChStatsTotBytesAt2Mbps, wlsrChStatsTotPktsAt12Mbps=wlsrChStatsTotPktsAt12Mbps, wlsrStaRxBytesAt1Mbps=wlsrStaRxBytesAt1Mbps, wlsrStaTxBytesAt5Mbps=wlsrStaTxBytesAt5Mbps, wlsrStaTxBytesAt54Mbps=wlsrStaTxBytesAt54Mbps, wlsrStaTxPkts512To1023=wlsrStaTxPkts512To1023, wlsrStaRxDataPkts=wlsrStaRxDataPkts, wlsrStaTxCurSignal=wlsrStaTxCurSignal, wlsrApFloodAttack=wlsrApFloodAttack, wlsrStaTxBytesAt12Mbps=wlsrStaTxBytesAt12Mbps, wlsrChStatsTotBytesAt12Mbps=wlsrChStatsTotBytesAt12Mbps, wlsrStaTxBytesAt2Mbps=wlsrStaTxBytesAt2Mbps, wlsrStaTxBytesAt24Mbps=wlsrStaTxBytesAt24Mbps, wlsrMIB=wlsrMIB, wlsrChannelRateStatsTable=wlsrChannelRateStatsTable, wlsrStaRxMgmtBytes=wlsrStaRxMgmtBytes, wlsrChStatsTotBytesAt18Mbps=wlsrChStatsTotBytesAt18Mbps, wlsrAirMonitorApListEntry=wlsrAirMonitorApListEntry, wlsrChStatsTotMacErrPkts=wlsrChStatsTotMacErrPkts, wlsrStaRxPktsAt54Mbps=wlsrStaRxPktsAt54Mbps, wlsrStaRxPkts512To1023=wlsrStaRxPkts512To1023, wlsrChStatsTotPktsAt54Mbps=wlsrChStatsTotPktsAt54Mbps, wlsrStaRxPktsAt48Mbps=wlsrStaRxPktsAt48Mbps, wlsrAmMonitoredTime=wlsrAmMonitoredTime, wlsrStaRxMgmtPkts=wlsrStaRxMgmtPkts, wlsrInvalidMacOUI=wlsrInvalidMacOUI, wlsrLoadbalancingEnabled=wlsrLoadbalancingEnabled, wlsrChStatsPkts1024To1518=wlsrChStatsPkts1024To1518, wlsrChStatsTotRetryPkts=wlsrChStatsTotRetryPkts, wlsrTransmitterMac=wlsrTransmitterMac, wlsrStaTxDAMulticastPkts=wlsrStaTxDAMulticastPkts, wlsrChStatsPkts512To1023=wlsrChStatsPkts512To1023, wlsrChStatsTotFragmentedPkts=wlsrChStatsTotFragmentedPkts, wlsrChStatsTotPktsAt5Mbps=wlsrChStatsTotPktsAt5Mbps, wlsrChStatsNumAPs=wlsrChStatsNumAPs, wlsrAmAccessPointType=wlsrAmAccessPointType, wlsrHideSSID=wlsrHideSSID, wlsrStaRxFragmentedPkts=wlsrStaRxFragmentedPkts, wlsrChStatsFrameNonUnicastRate=wlsrChStatsFrameNonUnicastRate, wlsrStaRxBytesAt12Mbps=wlsrStaRxBytesAt12Mbps, wlsrStaRxBytesAt24Mbps=wlsrStaRxBytesAt24Mbps, wlsrStaTxPkts64To127=wlsrStaTxPkts64To127, wlsrAirMonitorApListTable=wlsrAirMonitorApListTable, wlsrSignatureMatch=wlsrSignatureMatch, wlsrStaTxFragmentedPkts=wlsrStaTxFragmentedPkts, wlsrLoadBalance=wlsrLoadBalance, wlsrAddressType=wlsrAddressType, wlsrEAPRateAnomaly=wlsrEAPRateAnomaly, wlsrChStatsFrameBandwidthRate=wlsrChStatsFrameBandwidthRate, wlsrStaRxTotNoise=wlsrStaRxTotNoise, wlsrStaRxPkts63Bytes=wlsrStaRxPkts63Bytes, wlsrTxRates=wlsrTxRates, wlsrCurrentChannel=wlsrCurrentChannel, PYSNMP_MODULE_ID=wlsrMIB, wlsrStaTxDAMulticastBytes=wlsrStaTxDAMulticastBytes, wlsrSignatureName=wlsrSignatureName, wlsrAgeout=wlsrAgeout, wlsrPreamble=wlsrPreamble, wlsrStaPktSizeStatsEntry=wlsrStaPktSizeStatsEntry, wlsrStaTxTotSignal=wlsrStaTxTotSignal, wlsrTxPower=wlsrTxPower, wlsrReceiverMac=wlsrReceiverMac, wlsrChannelRateAnomaly=wlsrChannelRateAnomaly, wlsrChStatsTotPkts=wlsrChStatsTotPkts, wlsrTrapsGroup=wlsrTrapsGroup, wlsrChStatsTotDAUnicastPkts=wlsrChStatsTotDAUnicastPkts, wlsrStaTxPktsAt2Mbps=wlsrStaTxPktsAt2Mbps, wlsrStaTxPktsAt18Mbps=wlsrStaTxPktsAt18Mbps, wlsrStaRxBytesAt5Mbps=wlsrStaRxBytesAt5Mbps, wlsrStaFrameRetryErrorRate=wlsrStaFrameRetryErrorRate)
mibBuilder.exportSymbols("WLSR-AP-MIB", wlsrNodeMac=wlsrNodeMac, wlsrStatsChannelGroup=wlsrStatsChannelGroup, wlsrStaFrameFragmentationRate=wlsrStaFrameFragmentationRate, wlsrStaTxBytesAt18Mbps=wlsrStaTxBytesAt18Mbps, wlsrChannelStatsEntry=wlsrChannelStatsEntry, wlsrChStatsTotPktsAt1Mbps=wlsrChStatsTotPktsAt1Mbps, wlsrStaRxHighNoise=wlsrStaRxHighNoise, wlsrChStatsChannel=wlsrChStatsChannel, wlsrNodeRateAnomaly=wlsrNodeRateAnomaly, wlsrStaRxBytesAt48Mbps=wlsrStaRxBytesAt48Mbps, wlsrStaTxPktsAt6Mbps=wlsrStaTxPktsAt6Mbps, wlsrStaTxPkts128To255=wlsrStaTxPkts128To255, wlsrChannelDATypeStatsTable=wlsrChannelDATypeStatsTable, wlsrStaRxCtrlPkts=wlsrStaRxCtrlPkts, wlsrChStatsTotDataBytes=wlsrChStatsTotDataBytes, wlsrStaRxNoisePkts=wlsrStaRxNoisePkts, wlsrChStatsTotPhyErrPkts=wlsrChStatsTotPhyErrPkts, wlsrStaTxPktsAt24Mbps=wlsrStaTxPktsAt24Mbps, wlsrBeaconInterval=wlsrBeaconInterval, wlsrRepeatWEPIVViolation=wlsrRepeatWEPIVViolation, wlsrStaTxPktsAt11Mbps=wlsrStaTxPktsAt11Mbps, wlsrChStatsTotBytesAt6Mbps=wlsrChStatsTotBytesAt6Mbps, wlsrWeakWEPIVViolation=wlsrWeakWEPIVViolation, wlsrChannelFrameTypeStatsEntry=wlsrChannelFrameTypeStatsEntry, wlsrTargetApChannel=wlsrTargetApChannel, wlsrFrameFragmentationRateExceeded=wlsrFrameFragmentationRateExceeded, wlsrChannelMisconfiguration=wlsrChannelMisconfiguration, wlsrStaTxDABroadcastBytes=wlsrStaTxDABroadcastBytes, wlsrAmLoadBalancing=wlsrAmLoadBalancing, wlsrSupportedRates=wlsrSupportedRates)
