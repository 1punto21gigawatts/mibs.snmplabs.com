#
# PySNMP MIB module MSSQLSERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MSSQLSERVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:15:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, Unsigned32, Gauge32, NotificationType, Counter64, IpAddress, enterprises, Counter32, Integer32, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "Unsigned32", "Gauge32", "NotificationType", "Counter64", "IpAddress", "enterprises", "Counter32", "Integer32", "MibIdentifier", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
microsoft = MibIdentifier((1, 3, 6, 1, 4, 1, 311))
software = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1))
apps = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 4))
mssqlServer = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 4, 1))
mssqlServerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1))
mssqlSrvTable = MibTable((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 1), )
if mibBuilder.loadTexts: mssqlSrvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvTable.setDescription('This table contains a single row for the SQL Server installed on the system.')
mssqlSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 1, 1), ).setIndexNames((0, "MSSQLSERVER-MIB", "mssqlSrvVendorName"))
if mibBuilder.loadTexts: mssqlSrvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvEntry.setDescription('mssqlSrvTable entries.')
mssqlSrvVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvVendorName.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvVendorName.setDescription('The name of the database server vendor.')
mssqlSrvProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvProductName.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvProductName.setDescription('The product name of the database server.')
mssqlSrvVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvVersion.setDescription('The version of installed SQL Server.')
mssqlSrvContact = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvContact.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvContact.setDescription('Contact person for this SQL Server installation.')
mssqlSrvState = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("running", 1), ("paused", 2), ("stopped", 3), ("starting", 4), ("stopping", 5), ("continuing", 6), ("pausing", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvState.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvState.setDescription('The state of SQL Server. Unknown(1) means we are unable to determine the state of the server, Running(2) means the server is available and can be used, Paused(3) means the server is running, but new connections cannot currently be established, and Stopped(4) means the server is not running and unavailable.')
mssqlSrvInfoTable = MibTable((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2), )
if mibBuilder.loadTexts: mssqlSrvInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoTable.setDescription('This table contains general information regarding the active SQL Server process, including performance counters.')
mssqlSrvInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1), ).setIndexNames((0, "MSSQLSERVER-MIB", "mssqlSrvInfoServerName"))
if mibBuilder.loadTexts: mssqlSrvInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoEntry.setDescription('mssqlSrvInfoTable entries.')
mssqlSrvInfoServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoServerName.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoServerName.setDescription('The name of the local SQL Server.')
mssqlSrvInfoStartupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoStartupTime.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoStartupTime.setDescription('The date and time at which the current running SQL Server process was last started.')
mssqlSrvInfoTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoTrans.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoTrans.setDescription('The number of command batches completed since SQL Server was last started.')
mssqlSrvInfoPageReads = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoPageReads.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoPageReads.setDescription('The number of physical page reads completed since SQL Server was started.')
mssqlSrvInfoSinglePageWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoSinglePageWrites.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoSinglePageWrites.setDescription('The number of single page writes completed since the SQL Server was started (does not include log writes, cache flushes (Lazy Writer), or batch writes).')
mssqlSrvInfoBatchWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoBatchWrites.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoBatchWrites.setDescription('The number of pages written to disk using batch I/O since SQL Server was started.')
mssqlSrvInfoLazyWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoLazyWrites.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoLazyWrites.setDescription('The number of pages flushed to disk by the Lazy Writer since SQL Server was started.')
mssqlSrvInfoLogWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoLogWrites.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoLogWrites.setDescription('The number of log pages physically written to disk since SQL Server was started.')
mssqlSrvInfoOutstandingReads = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoOutstandingReads.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoOutstandingReads.setDescription('The number of physical reads pending.')
mssqlSrvInfoOutstandingWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoOutstandingWrites.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoOutstandingWrites.setDescription('The number of physical writes pending.')
mssqlSrvInfoCacheHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoCacheHitRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoCacheHitRatio.setDescription('The percentage of time that a requested data page was found in the data cache (instead of being read from disk).')
mssqlSrvInfoFreeBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoFreeBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoFreeBuffers.setDescription('The number of data cache buffers currently in the free pool.')
mssqlSrvInfoNetworkReads = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoNetworkReads.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoNetworkReads.setDescription('The number of tabular data stream (TDS) packets read from the network since SQL Server was started.')
mssqlSrvInfoNetworkWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoNetworkWrites.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoNetworkWrites.setDescription('The number of tabular data stream (TDS) packets written to the network since SQL Server was started.')
mssqlSrvInfoRAPhysicalReads = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoRAPhysicalReads.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoRAPhysicalReads.setDescription('Physical reads (each consisting of 8 - 2K pages) issued by Read Ahead Manager since SQL Server was started.')
mssqlSrvInfoUserConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoUserConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoUserConnections.setDescription('The number of open user connections.')
mssqlSrvInfoTotalLocks = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoTotalLocks.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoTotalLocks.setDescription('A count of all locks being used by SQL Server.')
mssqlSrvInfoTotalBlockingLocks = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoTotalBlockingLocks.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoTotalBlockingLocks.setDescription('A count of all locks blocking other processes.')
mssqlSrvInfoUsersBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvInfoUsersBlocked.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvInfoUsersBlocked.setDescription('The number of users blocked by other users.')
mssqlSrvConfigParamTable = MibTable((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 3), )
if mibBuilder.loadTexts: mssqlSrvConfigParamTable.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvConfigParamTable.setDescription('This table contains entries for the SQL Server configuration parameters.')
mssqlSrvConfigParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 3, 1), )
if mibBuilder.loadTexts: mssqlSrvConfigParamEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvConfigParamEntry.setDescription('mssqlSrvConfigParamTable entries. The SQL Server configuration parameter name is used as the index value.')
mssqlSrvConfigParamName = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvConfigParamName.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvConfigParamName.setDescription('Name of SQL Server configuration parameter.')
mssqlSrvConfigParamMax = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvConfigParamMax.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvConfigParamMax.setDescription('The maximum configurable value for the associated SQL Server configuration parameter.')
mssqlSrvConfigParamMin = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvConfigParamMin.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvConfigParamMin.setDescription('The minimum configurable value for the associated SQL Server configuration parameter.')
mssqlSrvConfigParamConfigValue = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvConfigParamConfigValue.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvConfigParamConfigValue.setDescription('The current configured value for the associated SQL Server configuration parameter.')
mssqlSrvConfigParamRunValue = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvConfigParamRunValue.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvConfigParamRunValue.setDescription('The current run value for the associated SQL Server configuration parameter.')
mssqlSrvDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 4), )
if mibBuilder.loadTexts: mssqlSrvDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvDeviceTable.setDescription('This table contains entries for each SQL Server device on the system.')
mssqlSrvDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 4, 1), ).setIndexNames((0, "MSSQLSERVER-MIB", "mssqlSrvDeviceLogicalName"))
if mibBuilder.loadTexts: mssqlSrvDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvDeviceEntry.setDescription('mssqlSrvDeviceTable entries.')
mssqlSrvDeviceLogicalName = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvDeviceLogicalName.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvDeviceLogicalName.setDescription('The logical name of the defined database or dump device.')
mssqlSrvDevicePhysicalName = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvDevicePhysicalName.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvDevicePhysicalName.setDescription('The physical name including the file system path and file name.')
mssqlSrvDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlSrvDeviceDescription.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlSrvDeviceDescription.setDescription('Detailed description of the device including the type of device, size, and the media type.')
mssqlDbTable = MibTable((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 5), )
if mibBuilder.loadTexts: mssqlDbTable.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbTable.setDescription('This table contains a list of SQL Server databases. The table contains a single row for each database (whether the database is actually accessible or not).')
mssqlDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 5, 1), ).setIndexNames((0, "MSSQLSERVER-MIB", "mssqlDbId"), (0, "MSSQLSERVER-MIB", "mssqlDbState"))
if mibBuilder.loadTexts: mssqlDbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbEntry.setDescription('mssqlDbTable entries.')
mssqlDbId = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbId.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbId.setDescription('The dbid of the database.')
mssqlDbName = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbName.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbName.setDescription('The name of the database.')
mssqlDbState = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("active", 1), ("singleUser", 2), ("dboonly", 3), ("readOnly", 4), ("offline", 5), ("suspect", 6), ("loading", 7), ("publishing", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbState.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbState.setDescription('The state of the database. Valid states are defined as follows: Active(1), Single User(2), DBO Only(3), Read Only(4), Offline(5), Suspect(6), Loading(7), and Publishing(8).')
mssqlDbInfoTable = MibTable((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 6), )
if mibBuilder.loadTexts: mssqlDbInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbInfoTable.setDescription('This table contains detailed information about SQL Server databases. In order for this table to be populated, the database must be accessible (as determined by checking mssqlDbState).')
mssqlDbInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 6, 1), ).setIndexNames((0, "MSSQLSERVER-MIB", "mssqlDbInfoDbId"))
if mibBuilder.loadTexts: mssqlDbInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbInfoEntry.setDescription('mssqlDbInfoTable entries.')
mssqlDbInfoDbId = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbInfoDbId.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbInfoDbId.setDescription('The dbid of the database associated with this row.')
mssqlDbInfoDbName = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbInfoDbName.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbInfoDbName.setDescription('The name of the database associated with this row.')
mssqlDbInfoCreationDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbInfoCreationDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbInfoCreationDateTime.setDescription('The date and time that the database associated with this row was created.')
mssqlDbInfoOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbInfoOwner.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbInfoOwner.setDescription('The owner of the database associated with this row.')
mssqlDbInfoSize = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbInfoSize.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbInfoSize.setDescription('The size in KB of the database associated with this row.')
mssqlDbInfoUnallocatedSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbInfoUnallocatedSpace.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbInfoUnallocatedSpace.setDescription('The unallocated space in KB of the database associated with this row.')
mssqlDbInfoReservedSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbInfoReservedSpace.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbInfoReservedSpace.setDescription('The reserved space in KB of the database associated with this row.')
mssqlDbInfoDataSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbInfoDataSpace.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbInfoDataSpace.setDescription('The used data space in KB of the database associated with this row.')
mssqlDbInfoIndexSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbInfoIndexSpace.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbInfoIndexSpace.setDescription('The used index space in KB of the database associated with this row.')
mssqlDbInfoUnusedSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbInfoUnusedSpace.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbInfoUnusedSpace.setDescription('The unused space in KB of the database associated with this row.')
mssqlDbInfoLastTrLogDump = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 6, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbInfoLastTrLogDump.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbInfoLastTrLogDump.setDescription('The date and time that the latest transaction log dump for this database was taken.')
mssqlDbInfoLogSize = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbInfoLogSize.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbInfoLogSize.setDescription('The size in KB of the transaction log for the database associated with this row.')
mssqlDbInfoLogSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbInfoLogSpaceUsed.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbInfoLogSpaceUsed.setDescription('The percentage of transaction log space for the database associated with this row.')
mssqlDbOptionTable = MibTable((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 7), )
if mibBuilder.loadTexts: mssqlDbOptionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbOptionTable.setDescription('This table contains the list of possible database options and indicates which are set for a given dastabase.')
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 7, 1) + (1000, ), Integer32())
mssqlDbOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 7, 1), ).setIndexNames((0, "MSSQLSERVER-MIB", "mssqlDbOptionDbId"), (0, "MSSQLSERVER-MIB", "pysmiFakeCol1000"))
if mibBuilder.loadTexts: mssqlDbOptionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbOptionEntry.setDescription('mssqlDbOptionTable entries. The dbid of the database is used as the index value associated with this row.')
mssqlDbOptionDbId = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbOptionDbId.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbOptionDbId.setDescription('The dbid of the database associated with this row.')
mssqlDbOptionDbName = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbOptionDbName.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbOptionDbName.setDescription('The name of the database associated with this row.')
mssqlDbOptionSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbOptionSetName.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbOptionSetName.setDescription('The name of the database option that is set for the database associated with this row.')
mssqlDbDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 8), )
if mibBuilder.loadTexts: mssqlDbDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbDeviceTable.setDescription('This table contains entries for each device fragment on which a particular SQL Server database has been created or altered.')
pysmiFakeCol1001 = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 8, 1) + (1001, ), Integer32())
mssqlDbDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 8, 1), ).setIndexNames((0, "MSSQLSERVER-MIB", "mssqlDbDeviceDbId"), (0, "MSSQLSERVER-MIB", "pysmiFakeCol1001"))
if mibBuilder.loadTexts: mssqlDbDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbDeviceEntry.setDescription('mssqlDbDeviceTable entries. The dbid of the database is used as index value associated with this row.')
mssqlDbDeviceDbId = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbDeviceDbId.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbDeviceDbId.setDescription('The dbid of the database associated with this row.')
mssqlDbDeviceDbName = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbDeviceDbName.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbDeviceDbName.setDescription('The name of the database associated with this row.')
mssqlDbDeviceFragmentName = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbDeviceFragmentName.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbDeviceFragmentName.setDescription('The name of a device fragment on which the database has been created or altered.')
mssqlDbDeviceFragmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbDeviceFragmentSize.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbDeviceFragmentSize.setDescription('The size in KB of the device fragment on which the database has been created or altered.')
mssqlDbDeviceFragmentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 4, 1, 1, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssqlDbDeviceFragmentUsage.setStatus('mandatory')
if mibBuilder.loadTexts: mssqlDbDeviceFragmentUsage.setDescription('Indicates if the device fragment contains data, log, or data and log.')
mibBuilder.exportSymbols("MSSQLSERVER-MIB", mssqlDbName=mssqlDbName, mssqlDbInfoSize=mssqlDbInfoSize, mssqlDbInfoEntry=mssqlDbInfoEntry, mssqlSrvInfoNetworkWrites=mssqlSrvInfoNetworkWrites, mssqlSrvDeviceTable=mssqlSrvDeviceTable, mssqlServerObjects=mssqlServerObjects, mssqlSrvInfoUsersBlocked=mssqlSrvInfoUsersBlocked, mssqlSrvConfigParamMin=mssqlSrvConfigParamMin, mssqlSrvEntry=mssqlSrvEntry, mssqlSrvState=mssqlSrvState, mssqlSrvContact=mssqlSrvContact, mssqlSrvDevicePhysicalName=mssqlSrvDevicePhysicalName, mssqlDbDeviceEntry=mssqlDbDeviceEntry, mssqlSrvConfigParamTable=mssqlSrvConfigParamTable, pysmiFakeCol1001=pysmiFakeCol1001, mssqlSrvInfoLazyWrites=mssqlSrvInfoLazyWrites, software=software, mssqlSrvInfoEntry=mssqlSrvInfoEntry, mssqlDbOptionTable=mssqlDbOptionTable, mssqlDbOptionDbId=mssqlDbOptionDbId, mssqlDbInfoDbName=mssqlDbInfoDbName, mssqlDbInfoUnallocatedSpace=mssqlDbInfoUnallocatedSpace, mssqlSrvConfigParamMax=mssqlSrvConfigParamMax, mssqlDbInfoLogSize=mssqlDbInfoLogSize, mssqlSrvInfoTable=mssqlSrvInfoTable, mssqlSrvVendorName=mssqlSrvVendorName, mssqlSrvInfoSinglePageWrites=mssqlSrvInfoSinglePageWrites, mssqlSrvInfoBatchWrites=mssqlSrvInfoBatchWrites, mssqlDbInfoUnusedSpace=mssqlDbInfoUnusedSpace, apps=apps, mssqlSrvInfoTrans=mssqlSrvInfoTrans, mssqlSrvInfoUserConnections=mssqlSrvInfoUserConnections, mssqlSrvInfoPageReads=mssqlSrvInfoPageReads, mssqlSrvInfoTotalLocks=mssqlSrvInfoTotalLocks, mssqlSrvInfoFreeBuffers=mssqlSrvInfoFreeBuffers, mssqlDbDeviceDbId=mssqlDbDeviceDbId, mssqlDbOptionEntry=mssqlDbOptionEntry, mssqlSrvTable=mssqlSrvTable, mssqlDbState=mssqlDbState, mssqlSrvDeviceDescription=mssqlSrvDeviceDescription, mssqlDbInfoOwner=mssqlDbInfoOwner, pysmiFakeCol1000=pysmiFakeCol1000, mssqlSrvConfigParamRunValue=mssqlSrvConfigParamRunValue, mssqlSrvConfigParamConfigValue=mssqlSrvConfigParamConfigValue, mssqlDbInfoLogSpaceUsed=mssqlDbInfoLogSpaceUsed, mssqlDbInfoReservedSpace=mssqlDbInfoReservedSpace, mssqlServer=mssqlServer, mssqlSrvConfigParamEntry=mssqlSrvConfigParamEntry, mssqlSrvInfoTotalBlockingLocks=mssqlSrvInfoTotalBlockingLocks, mssqlSrvDeviceLogicalName=mssqlSrvDeviceLogicalName, mssqlSrvInfoRAPhysicalReads=mssqlSrvInfoRAPhysicalReads, mssqlSrvProductName=mssqlSrvProductName, mssqlSrvInfoOutstandingReads=mssqlSrvInfoOutstandingReads, mssqlSrvInfoCacheHitRatio=mssqlSrvInfoCacheHitRatio, microsoft=microsoft, mssqlDbDeviceDbName=mssqlDbDeviceDbName, mssqlSrvInfoServerName=mssqlSrvInfoServerName, mssqlSrvDeviceEntry=mssqlSrvDeviceEntry, mssqlDbInfoCreationDateTime=mssqlDbInfoCreationDateTime, mssqlDbId=mssqlDbId, mssqlSrvInfoStartupTime=mssqlSrvInfoStartupTime, mssqlSrvVersion=mssqlSrvVersion, mssqlDbInfoIndexSpace=mssqlDbInfoIndexSpace, mssqlDbInfoTable=mssqlDbInfoTable, mssqlSrvInfoOutstandingWrites=mssqlSrvInfoOutstandingWrites, mssqlDbEntry=mssqlDbEntry, mssqlSrvConfigParamName=mssqlSrvConfigParamName, mssqlDbOptionDbName=mssqlDbOptionDbName, mssqlSrvInfoNetworkReads=mssqlSrvInfoNetworkReads, mssqlDbDeviceFragmentName=mssqlDbDeviceFragmentName, mssqlDbInfoLastTrLogDump=mssqlDbInfoLastTrLogDump, mssqlDbInfoDbId=mssqlDbInfoDbId, mssqlDbTable=mssqlDbTable, mssqlDbDeviceTable=mssqlDbDeviceTable, mssqlDbDeviceFragmentUsage=mssqlDbDeviceFragmentUsage, mssqlDbOptionSetName=mssqlDbOptionSetName, mssqlSrvInfoLogWrites=mssqlSrvInfoLogWrites, mssqlDbInfoDataSpace=mssqlDbInfoDataSpace, mssqlDbDeviceFragmentSize=mssqlDbDeviceFragmentSize)
