#
# PySNMP MIB module NETSCREEN-SET-AUTH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-SET-AUTH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
netscreenSetting, netscreenSettingMibModule = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenSetting", "netscreenSettingMibModule")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, Gauge32, IpAddress, Counter32, ObjectIdentity, MibIdentifier, Counter64, Integer32, NotificationType, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "Gauge32", "IpAddress", "Counter32", "ObjectIdentity", "MibIdentifier", "Counter64", "Integer32", "NotificationType", "iso", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
netscreenSetAuthMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 7, 0, 2))
netscreenSetAuthMibModule.setRevisions(('2004-05-03 00:00', '2004-11-10 20:22', '2004-03-03 00:00', '2003-11-10 00:00', '2002-04-27 00:00', '2001-05-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netscreenSetAuthMibModule.setRevisionsDescriptions(('Added nsSetAuthCfgEntry attributes', 'Modified copyright and contact information', 'Converted to SMIv2 by Longview Software', 'Correct spelling mistake', 'More than one auth setting allowed in one system', 'Creation Date',))
if mibBuilder.loadTexts: netscreenSetAuthMibModule.setLastUpdated('200411102022Z')
if mibBuilder.loadTexts: netscreenSetAuthMibModule.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: netscreenSetAuthMibModule.setContactInfo('Customer Support 1194 North Mathilda Avenue Sunnyvale, California 94089-1206 USA Tel: 1-800-638-8296 E-mail: customerservice@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: netscreenSetAuthMibModule.setDescription('This module defines the object that are used to monitor all the configuration info')
nsSetAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 7, 2))
nsSetAuthCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1), )
if mibBuilder.loadTexts: nsSetAuthCfgTable.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgTable.setDescription('The authentication configuration of NetScreen device.')
nsSetAuthCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1), ).setIndexNames((0, "NETSCREEN-SET-AUTH-MIB", "nsSetAuthCfgIdx"))
if mibBuilder.loadTexts: nsSetAuthCfgEntry.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgEntry.setDescription('NetScreen admin user authentication setting table.')
nsSetAuthCfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgIdx.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgIdx.setDescription('Authentication server config index.')
nsSetAuthCfgVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgVsys.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgVsys.setDescription('Virtural system the setting belongs to.')
nsSetAuthCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgName.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgName.setDescription('Authentication server setting entry name.')
nsSetAuthCfgPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgPrimary.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgPrimary.setDescription('Primary authentication server IP or domain name.')
nsSetAuthCfgBackup1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgBackup1.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgBackup1.setDescription("First backup authentication server IP or domain name.It's optional.")
nsSetAuthCfgBackup2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgBackup2.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgBackup2.setDescription("Secondary backup authentication server IP or domain name.It's optional.")
nsSetAuthCfgConnIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgConnIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgConnIdleTimeout.setDescription('connection timeout threshold setting. 0 means no timeout setting.')
nsSetAuthCfgAuthAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgAuthAccount.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgAuthAccount.setDescription('Allow authentication account.')
nsSetAuthCfgIkeAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgIkeAccount.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgIkeAccount.setDescription('Allow IKE account.')
nsSetAuthCfgL2tpAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgL2tpAccount.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgL2tpAccount.setDescription('Allow L2tp account.')
nsSetAuthCfgAdminAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgAdminAccount.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgAdminAccount.setDescription('Allow administration account.')
nsSetAuthCfgXauthAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgXauthAccount.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgXauthAccount.setDescription('Allow Xauth account.')
nsSetAuthCfgMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("build-in-user-db", 0), ("radius-server", 1), ("secureId-server", 2), ("ldap-server", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgMethod.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgMethod.setDescription('NetScreen device admin user authentication method.')
nsSetAuthCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgPort.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgPort.setDescription('Server listening port number.')
nsSetAuthCfgSecCliRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSecCliRetry.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgSecCliRetry.setDescription('SecureID client client retry times')
nsSetAuthCfgSecCliTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSecCliTimeout.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgSecCliTimeout.setDescription('SecureID client timeout threshold.')
nsSetAuthCfgSecEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sdi", 0), ("des", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSecEncType.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgSecEncType.setDescription('SecureID traffic encryption type.')
nsSetAuthCfgSecUseDuress = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSecUseDuress.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgSecUseDuress.setDescription('Use duress in SecureID authentication.')
nsSetAuthCfgLDAPCni = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgLDAPCni.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgLDAPCni.setDescription('LDAP server common name identifier')
nsSetAuthCfgLDAPDn = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgLDAPDn.setStatus('current')
if mibBuilder.loadTexts: nsSetAuthCfgLDAPDn.setDescription('LDAP server distinguished name')
nsSetAuthCfgSepChar = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSepChar.setStatus('mandatory')
if mibBuilder.loadTexts: nsSetAuthCfgSepChar.setDescription('Seperator character for this entry')
nsSetAuthCfgSepNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSepNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nsSetAuthCfgSepNumber.setDescription('Seperator number for this entry')
nsSetAuthCfgRevInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgRevInterval.setStatus('mandatory')
if mibBuilder.loadTexts: nsSetAuthCfgRevInterval.setDescription('Revert interval for this entry')
nsSetAuthCfgRadRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgRadRetries.setStatus('mandatory')
if mibBuilder.loadTexts: nsSetAuthCfgRadRetries.setDescription('Radius retries for this entries')
nsSetAuthCfgEnableStnID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgEnableStnID.setStatus('mandatory')
if mibBuilder.loadTexts: nsSetAuthCfgEnableStnID.setDescription('Enable/Disable call station ID for this entry.')
nsSetAuthCfgDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: nsSetAuthCfgDomainName.setDescription('Domain name for this entry')
nsSetAuthCfgAcctSessIdLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgAcctSessIdLen.setStatus('mandatory')
if mibBuilder.loadTexts: nsSetAuthCfgAcctSessIdLen.setDescription('Acct session identifier length for this entry')
nsSetAuthCfgRFC2138Compatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgRFC2138Compatibility.setStatus('mandatory')
if mibBuilder.loadTexts: nsSetAuthCfgRFC2138Compatibility.setDescription('Is RFC2138 compatible for this entry')
nsSetAuthCfgSourceIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSourceIfName.setStatus('mandatory')
if mibBuilder.loadTexts: nsSetAuthCfgSourceIfName.setDescription('Source interface name for this entry')
nsSetAuthCfgAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgAcctPort.setStatus('mandatory')
if mibBuilder.loadTexts: nsSetAuthCfgAcctPort.setDescription('Radius accounting port for this entry')
nsSetAuthCfgAcctListActn = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("cleanup-sess", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgAcctListActn.setStatus('mandatory')
if mibBuilder.loadTexts: nsSetAuthCfgAcctListActn.setDescription('Radius accounting action for this entry')
nsSetAuthCfgSourceIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 7, 2, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSetAuthCfgSourceIfInfo.setStatus('mandatory')
if mibBuilder.loadTexts: nsSetAuthCfgSourceIfInfo.setDescription('Source interface info for this entry. Returns -1 if no interface is selected')
mibBuilder.exportSymbols("NETSCREEN-SET-AUTH-MIB", nsSetAuthCfgSecUseDuress=nsSetAuthCfgSecUseDuress, nsSetAuth=nsSetAuth, nsSetAuthCfgIkeAccount=nsSetAuthCfgIkeAccount, nsSetAuthCfgVsys=nsSetAuthCfgVsys, nsSetAuthCfgSepChar=nsSetAuthCfgSepChar, nsSetAuthCfgSourceIfName=nsSetAuthCfgSourceIfName, nsSetAuthCfgBackup2=nsSetAuthCfgBackup2, nsSetAuthCfgDomainName=nsSetAuthCfgDomainName, netscreenSetAuthMibModule=netscreenSetAuthMibModule, nsSetAuthCfgRevInterval=nsSetAuthCfgRevInterval, nsSetAuthCfgConnIdleTimeout=nsSetAuthCfgConnIdleTimeout, nsSetAuthCfgPort=nsSetAuthCfgPort, nsSetAuthCfgLDAPDn=nsSetAuthCfgLDAPDn, nsSetAuthCfgAcctListActn=nsSetAuthCfgAcctListActn, nsSetAuthCfgAcctSessIdLen=nsSetAuthCfgAcctSessIdLen, nsSetAuthCfgSecCliTimeout=nsSetAuthCfgSecCliTimeout, nsSetAuthCfgMethod=nsSetAuthCfgMethod, nsSetAuthCfgName=nsSetAuthCfgName, nsSetAuthCfgAdminAccount=nsSetAuthCfgAdminAccount, nsSetAuthCfgBackup1=nsSetAuthCfgBackup1, nsSetAuthCfgIdx=nsSetAuthCfgIdx, nsSetAuthCfgEntry=nsSetAuthCfgEntry, nsSetAuthCfgSecCliRetry=nsSetAuthCfgSecCliRetry, nsSetAuthCfgRadRetries=nsSetAuthCfgRadRetries, nsSetAuthCfgTable=nsSetAuthCfgTable, nsSetAuthCfgRFC2138Compatibility=nsSetAuthCfgRFC2138Compatibility, nsSetAuthCfgAuthAccount=nsSetAuthCfgAuthAccount, nsSetAuthCfgSepNumber=nsSetAuthCfgSepNumber, nsSetAuthCfgAcctPort=nsSetAuthCfgAcctPort, PYSNMP_MODULE_ID=netscreenSetAuthMibModule, nsSetAuthCfgPrimary=nsSetAuthCfgPrimary, nsSetAuthCfgEnableStnID=nsSetAuthCfgEnableStnID, nsSetAuthCfgLDAPCni=nsSetAuthCfgLDAPCni, nsSetAuthCfgXauthAccount=nsSetAuthCfgXauthAccount, nsSetAuthCfgSourceIfInfo=nsSetAuthCfgSourceIfInfo, nsSetAuthCfgSecEncType=nsSetAuthCfgSecEncType, nsSetAuthCfgL2tpAccount=nsSetAuthCfgL2tpAccount)
