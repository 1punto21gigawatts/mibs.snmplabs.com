#
# PySNMP MIB module NETSCREEN-VPN-L2TP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-VPN-L2TP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
netscreenVpn, netscreenVpnMibModule = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenVpn", "netscreenVpnMibModule")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, Counter64, Counter32, iso, Integer32, Gauge32, ObjectIdentity, ModuleIdentity, TimeTicks, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "Counter64", "Counter32", "iso", "Integer32", "Gauge32", "ObjectIdentity", "ModuleIdentity", "TimeTicks", "MibIdentifier", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netscreenVpnL2tpMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 4, 0, 8))
netscreenVpnL2tpMibModule.setRevisions(('2004-05-03 00:00', '2004-03-03 00:00', '2000-08-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netscreenVpnL2tpMibModule.setRevisionsDescriptions(('Modified copyright and contact information', 'Converted to SMIv2 by Longview Software', 'Creation Date',))
if mibBuilder.loadTexts: netscreenVpnL2tpMibModule.setLastUpdated('200405032022Z')
if mibBuilder.loadTexts: netscreenVpnL2tpMibModule.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: netscreenVpnL2tpMibModule.setContactInfo('Customer Support 1194 North Mathilda Avenue Sunnyvale, California 94089-1206 USA Tel: 1-800-638-8296 E-mail: customerservice@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: netscreenVpnL2tpMibModule.setDescription('This module defines NetScreen private MIBs for L2tp configuration.')
nsVpnL2TP = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 4, 8))
nsVpnL2tpDefTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1), )
if mibBuilder.loadTexts: nsVpnL2tpDefTable.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpDefTable.setDescription('This table specifies the configuration attributes for NetScreen L2TP tunnel.')
nsVpnL2tpDefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1), ).setIndexNames((0, "NETSCREEN-VPN-L2TP-MIB", "nsVpnL2tpDefVsys"))
if mibBuilder.loadTexts: nsVpnL2tpDefEntry.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpDefEntry.setDescription('Each entry in the nsVpnL2tpDefEntry holds a set of configuration parameters associated with an instance of L2TP configuration.')
nsVpnL2tpDefVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefVsys.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpDefVsys.setDescription('virtual system id')
nsVpnL2tpDefPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefPool.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpDefPool.setDescription('IP pool used by the default L2TP setting.')
nsVpnL2tpDefAuthDb = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("local", 0), ("radius", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefAuthDb.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpDefAuthDb.setDescription('l2tp authentication database.')
nsVpnL2tpDefPPPAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pap", 1), ("chap", 2), ("any", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefPPPAuth.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpDefPPPAuth.setDescription('l2tp PPP authentication algorithm.')
nsVpnL2tpDefRadServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefRadServer.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpDefRadServer.setDescription("l2tp RADIUS Server's IP address or name.")
nsVpnL2tpDefPriDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefPriDns.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpDefPriDns.setDescription("DNS Primary Server's IP address.")
nsVpnL2tpDefSecDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefSecDns.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpDefSecDns.setDescription("DNS Secondary Server's IP address.")
nsVpnL2tpDefPriWins = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefPriWins.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpDefPriWins.setDescription("WINS Primary Server's IP address.")
nsVpnL2tpDefSecWins = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpDefSecWins.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpDefSecWins.setDescription("WINS Secondary Server's IP address.")
nsVpnL2tpTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2), )
if mibBuilder.loadTexts: nsVpnL2tpTunnelTable.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpTunnelTable.setDescription('This table specifies the configuration attributes for NetScreen L2TP tunnel.')
nsVpnL2tpTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1), ).setIndexNames((0, "NETSCREEN-VPN-L2TP-MIB", "nsVpnL2tpTunIndex"))
if mibBuilder.loadTexts: nsVpnL2tpTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpTunnelEntry.setDescription('Each entry in the nsVpnL2tpTunnelTable holds a set of configuration parameters associated with an instance of L2TP tunnel.')
nsVpnL2tpTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunIndex.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpTunIndex.setDescription('A unique value for l2tp tunnel table. Its value ranges between 0 and 65535 and may not be contigous.')
nsVpnL2tpTunId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunId.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpTunId.setDescription('l2tp tunnel id.')
nsVpnL2tpTunName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunName.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpTunName.setDescription('l2tp tunnel name.')
nsVpnL2tpTunUsrOrGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunUsrOrGroup.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpTunUsrOrGroup.setDescription('Dialup user or group using this l2tp tunnel.')
nsVpnL2tpTunPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunPeerIp.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpTunPeerIp.setDescription("L2tp tunnel peer's IP address.")
nsVpnL2tpTunHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunHost.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpTunHost.setDescription("L2tp tunnel's host name.")
nsVpnL2tpTunKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunKeepAlive.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpTunKeepAlive.setDescription('Keep alive time threshold for a l2tp tunnel.')
nsVpnL2tpTunVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpTunVsys.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpTunVsys.setDescription('Virtual system this tunnel belongs to')
nsVpnL2tpMonTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3), )
if mibBuilder.loadTexts: nsVpnL2tpMonTunnelTable.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonTunnelTable.setDescription('This table specifies the monitoring attributes for NetScreen L2TP tunnel.')
nsVpnL2tpMonTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1), ).setIndexNames((0, "NETSCREEN-VPN-L2TP-MIB", "nsVpnL2tpMonTunId"))
if mibBuilder.loadTexts: nsVpnL2tpMonTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonTunnelEntry.setDescription('Each entry in the nsVpnL2tpMonTunnelTable holds a set of monitoring parameters associated with an instance of L2TP tunnel.')
nsVpnL2tpMonTunId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunId.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonTunId.setDescription('L2tp tunnel id. Its value ranges between 1 and 65535 and may not be contigous.')
nsVpnL2tpMonTunPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunPeerId.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonTunPeerId.setDescription('L2tp tunnel peer id.')
nsVpnL2tpMonTunName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunName.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonTunName.setDescription('L2tp tunnel name.')
nsVpnL2tpMonTunPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunPeerIp.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonTunPeerIp.setDescription("L2tp tunnel peer's IP address.")
nsVpnL2tpMonTunPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunPort.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonTunPort.setDescription('L2tp tunnel port number.')
nsVpnL2tpMonTunPeerHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunPeerHost.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonTunPeerHost.setDescription("L2tp tunnel peer's host name.")
nsVpnL2tpMonTunCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunCalls.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonTunCalls.setDescription('Total calls for this tunnel.')
nsVpnL2tpMonTunState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("wait-reply", 2), ("wait-conn", 3), ("establish", 4), ("dead", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunState.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonTunState.setDescription('L2tp tunnel state.')
nsVpnL2tpMonTunVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonTunVsys.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonTunVsys.setDescription('Virtual system this tunnel belongs to')
nsVpnL2tpMonCallTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4), )
if mibBuilder.loadTexts: nsVpnL2tpMonCallTable.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonCallTable.setDescription('This table specifies the monitoring attributes for NetScreen L2TP calls.')
nsVpnL2tpMonCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1), ).setIndexNames((0, "NETSCREEN-VPN-L2TP-MIB", "nsVpnL2tpMonCallTunId"), (0, "NETSCREEN-VPN-L2TP-MIB", "nsVpnL2tpMonCallId"))
if mibBuilder.loadTexts: nsVpnL2tpMonCallEntry.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonCallEntry.setDescription('Each entry in the nsVpnL2tpMonCallTable holds a set of monitoring parameters associated with an instance of L2TP tunnel and call id.')
nsVpnL2tpMonCallTunId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallTunId.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonCallTunId.setDescription('L2tp tunnel id. Its value ranges between 1 and 65535 and may not be contigous.')
nsVpnL2tpMonCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallId.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonCallId.setDescription('L2tp call id.')
nsVpnL2tpMonCallPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallPeerId.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonCallPeerId.setDescription('L2tp call peer id.')
nsVpnL2tpMonCallIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallIp.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonCallIp.setDescription('L2tp call assigned IP address.')
nsVpnL2tpMonCallUser = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallUser.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonCallUser.setDescription('L2tp call user name.')
nsVpnL2tpMonCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("incoming", 2), ("outgoing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallType.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonCallType.setDescription('Call type.')
nsVpnL2tpMonCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("wait-conn", 2), ("establish", 3), ("wait-tunnel", 4), ("wait-reply", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallState.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonCallState.setDescription('L2tp call state.')
nsVpnL2tpMonCallEstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallEstTime.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonCallEstTime.setDescription('L2tp call establish time. This is the sysUptime when the call was established')
nsVpnL2tpMonCallVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 8, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnL2tpMonCallVsys.setStatus('current')
if mibBuilder.loadTexts: nsVpnL2tpMonCallVsys.setDescription('Virtual system this tunnel belongs to')
mibBuilder.exportSymbols("NETSCREEN-VPN-L2TP-MIB", nsVpnL2tpTunKeepAlive=nsVpnL2tpTunKeepAlive, nsVpnL2tpTunVsys=nsVpnL2tpTunVsys, nsVpnL2tpMonCallState=nsVpnL2tpMonCallState, nsVpnL2tpDefPriWins=nsVpnL2tpDefPriWins, nsVpnL2tpDefRadServer=nsVpnL2tpDefRadServer, nsVpnL2tpMonCallTable=nsVpnL2tpMonCallTable, nsVpnL2tpTunHost=nsVpnL2tpTunHost, nsVpnL2tpMonTunPeerIp=nsVpnL2tpMonTunPeerIp, nsVpnL2tpMonCallIp=nsVpnL2tpMonCallIp, nsVpnL2tpMonTunPeerHost=nsVpnL2tpMonTunPeerHost, nsVpnL2tpDefSecDns=nsVpnL2tpDefSecDns, nsVpnL2tpMonTunCalls=nsVpnL2tpMonTunCalls, nsVpnL2tpMonTunVsys=nsVpnL2tpMonTunVsys, nsVpnL2tpMonTunState=nsVpnL2tpMonTunState, nsVpnL2tpDefEntry=nsVpnL2tpDefEntry, nsVpnL2tpMonCallEntry=nsVpnL2tpMonCallEntry, nsVpnL2tpDefTable=nsVpnL2tpDefTable, nsVpnL2tpTunId=nsVpnL2tpTunId, nsVpnL2tpMonCallUser=nsVpnL2tpMonCallUser, nsVpnL2tpDefPPPAuth=nsVpnL2tpDefPPPAuth, nsVpnL2tpMonCallEstTime=nsVpnL2tpMonCallEstTime, nsVpnL2tpTunnelTable=nsVpnL2tpTunnelTable, nsVpnL2tpTunIndex=nsVpnL2tpTunIndex, nsVpnL2tpDefSecWins=nsVpnL2tpDefSecWins, nsVpnL2TP=nsVpnL2TP, nsVpnL2tpTunPeerIp=nsVpnL2tpTunPeerIp, nsVpnL2tpMonTunName=nsVpnL2tpMonTunName, nsVpnL2tpMonTunPort=nsVpnL2tpMonTunPort, nsVpnL2tpMonCallId=nsVpnL2tpMonCallId, nsVpnL2tpDefVsys=nsVpnL2tpDefVsys, netscreenVpnL2tpMibModule=netscreenVpnL2tpMibModule, nsVpnL2tpMonTunId=nsVpnL2tpMonTunId, nsVpnL2tpTunUsrOrGroup=nsVpnL2tpTunUsrOrGroup, nsVpnL2tpMonTunnelEntry=nsVpnL2tpMonTunnelEntry, nsVpnL2tpMonCallVsys=nsVpnL2tpMonCallVsys, nsVpnL2tpDefAuthDb=nsVpnL2tpDefAuthDb, PYSNMP_MODULE_ID=netscreenVpnL2tpMibModule, nsVpnL2tpDefPool=nsVpnL2tpDefPool, nsVpnL2tpMonCallPeerId=nsVpnL2tpMonCallPeerId, nsVpnL2tpTunName=nsVpnL2tpTunName, nsVpnL2tpMonTunPeerId=nsVpnL2tpMonTunPeerId, nsVpnL2tpMonCallTunId=nsVpnL2tpMonCallTunId, nsVpnL2tpTunnelEntry=nsVpnL2tpTunnelEntry, nsVpnL2tpMonTunnelTable=nsVpnL2tpMonTunnelTable, nsVpnL2tpMonCallType=nsVpnL2tpMonCallType, nsVpnL2tpDefPriDns=nsVpnL2tpDefPriDns)
