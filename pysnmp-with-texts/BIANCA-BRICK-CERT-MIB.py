#
# PySNMP MIB module BIANCA-BRICK-CERT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-CERT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Integer32, IpAddress, Counter32, Gauge32, TimeTicks, Counter64, ObjectIdentity, iso, Unsigned32, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "IpAddress", "Counter32", "Gauge32", "TimeTicks", "Counter64", "ObjectIdentity", "iso", "Unsigned32", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
ipsec = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 26))
class DisplayString(OctetString):
    pass

cert = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 26, 33))
certGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 1))
certGlobHttpProxy = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certGlobHttpProxy.setStatus('mandatory')
if mibBuilder.loadTexts: certGlobHttpProxy.setDescription('This object specifies the HTTP proxy server which must be used to access the HTTP certificate servers defined. It takes either an IP-address or a fully qualified domain name.')
certGlobSocksServer = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certGlobSocksServer.setStatus('mandatory')
if mibBuilder.loadTexts: certGlobSocksServer.setDescription('This object specifies the SOCKS server which must be used to access the HTTP and LDAP certificate servers defined. It takes either an IP-address or a fully qualified domain name.')
certGlobMaxCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certGlobMaxCacheEntries.setStatus('mandatory')
if mibBuilder.loadTexts: certGlobMaxCacheEntries.setDescription('This object specifies the maximum number of certificate-cache entries allowed.')
certGlobMaxPathLength = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certGlobMaxPathLength.setStatus('mandatory')
if mibBuilder.loadTexts: certGlobMaxPathLength.setDescription('This object specifies the maximum number of intermediate CA certificates between a trusted root CA and a peer certificate accepted.')
certGlobMaxRestarts = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certGlobMaxRestarts.setStatus('mandatory')
if mibBuilder.loadTexts: certGlobMaxRestarts.setDescription('This object specifies the maximum number of restarts in one certificate search.')
certGlobMaxCertValidity = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certGlobMaxCertValidity.setStatus('mandatory')
if mibBuilder.loadTexts: certGlobMaxCertValidity.setDescription('This object specifies the maximum validity period of a certificate in seconds. A certificate will not be considered valid for a longer period of time even if its validity field specifies a longer period.')
certGlobMaxCrlValidity = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certGlobMaxCrlValidity.setStatus('mandatory')
if mibBuilder.loadTexts: certGlobMaxCrlValidity.setDescription('This object specifies the maximum validity period of a certificate revocation list in seconds. A crl will not be considered valid for a longer period of time even if its validity field specifies a longer period.')
certGlobNegCachePeriod = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certGlobNegCachePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: certGlobNegCachePeriod.setDescription('This object specifies the period in seconds a certificate or crl search with a negative result will be remembered. Within this time, no new search will be performed for the same item.')
certServerTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 2), )
if mibBuilder.loadTexts: certServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: certServerTable.setDescription('The certServerTable contains the list of certificate servers used for certificate and crl requests.')
certServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 2, 1), ).setIndexNames((0, "BIANCA-BRICK-CERT-MIB", "certServerPreference"))
if mibBuilder.loadTexts: certServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: certServerEntry.setDescription('A certificate server entry defines the name of a certificate server together with the protocols used to access it.')
certServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certServerName.setStatus('mandatory')
if mibBuilder.loadTexts: certServerName.setDescription('This object specifies the name of a certificate server.')
certServerUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certServerUrl.setStatus('mandatory')
if mibBuilder.loadTexts: certServerUrl.setDescription('This object specifies the url used for accessing the certificate server. Syntax: [<scheme>:][//[<user>[:<password>]@]<host>[:<port>]]/[<path>] example: ldap://myname:mypass@ldap.ca.com:389/ .')
certServerPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certServerPreference.setStatus('mandatory')
if mibBuilder.loadTexts: certServerPreference.setDescription('This object specifies the preference of this server with respect to the others. Servers with lower priority are accessed prior to others.')
certServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("server", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certServerType.setStatus('mandatory')
if mibBuilder.loadTexts: certServerType.setDescription('This object specifies the type of the entry and is used to delete it.')
certTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3), )
if mibBuilder.loadTexts: certTable.setStatus('mandatory')
if mibBuilder.loadTexts: certTable.setDescription('The certTable contains the list of certificates, including own certificates and those of the trusted certificate authorities.')
certEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1), ).setIndexNames((0, "BIANCA-BRICK-CERT-MIB", "certIndex"))
if mibBuilder.loadTexts: certEntry.setStatus('mandatory')
if mibBuilder.loadTexts: certEntry.setDescription("A certEntry contains either a peer's certificate, an own certficate or a certificate of a trusted certification authority, depending on the settings of the certFlags field.")
certIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certIndex.setStatus('mandatory')
if mibBuilder.loadTexts: certIndex.setDescription('A unique index of this certificate entry.')
certDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certDescription.setStatus('mandatory')
if mibBuilder.loadTexts: certDescription.setDescription('This object specifies the name of the X.509 Certificate.')
certIsCA = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certIsCA.setStatus('mandatory')
if mibBuilder.loadTexts: certIsCA.setDescription('This object specifies how the certificate is treated internally. Possible Values: true(1), -- A certificate of a trusted root CA false(2) -- An own or peer certificate.')
certForceTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certForceTrusted.setStatus('mandatory')
if mibBuilder.loadTexts: certForceTrusted.setDescription('This object specifies how the certificate is treated internally. Possible Values: true(1), -- Always trust this certificate without -- considering any CAs false(2) -- trust this certificate only, if there -- exists a valid trust path from a CA to it -- and it is not revoked.')
certNoCrls = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certNoCrls.setStatus('mandatory')
if mibBuilder.loadTexts: certNoCrls.setDescription('This object specifies how the certificate is treated internally. Possible Values: true(1), -- do not check for certificate revocation -- lists for this CA (no meaning for non-CA -- certificates) false(2) -- check for certificate revocation -- lists for this CA (no meaning for non-CA -- certificates).')
certSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: certSerialNumber.setDescription('This object specifies the serial number of the certificate.')
certSubjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certSubjectName.setStatus('mandatory')
if mibBuilder.loadTexts: certSubjectName.setDescription('The subject name of the certificate.')
certSubjectAltNames = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certSubjectAltNames.setStatus('mandatory')
if mibBuilder.loadTexts: certSubjectAltNames.setDescription('The subject alternative name of the certificate. For IPSec, this field (not the subject name) is taken by default as the peer id, if not otherwise specified.')
certIssuerName = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certIssuerName.setStatus('mandatory')
if mibBuilder.loadTexts: certIssuerName.setDescription('The name of the certificate authority which issued this certificate.')
certIssuerAltNames = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certIssuerAltNames.setStatus('mandatory')
if mibBuilder.loadTexts: certIssuerAltNames.setDescription('The alternative names of the certificate authority which issued this certificate.')
certValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certValidity.setStatus('mandatory')
if mibBuilder.loadTexts: certValidity.setDescription('The validity period of this certificate in human readable form.')
certPubKeyInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certPubKeyInfo.setStatus('mandatory')
if mibBuilder.loadTexts: certPubKeyInfo.setDescription('This string shows the properties of the public key certified in this certificate. These are the algorithm for which the key is used and its length.')
certKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certKeyId.setStatus('mandatory')
if mibBuilder.loadTexts: certKeyId.setDescription('The key id as contained in the extensions of the certificate, if any.')
certPrivateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certPrivateKey.setStatus('mandatory')
if mibBuilder.loadTexts: certPrivateKey.setDescription('The index of the private key from the ipsecPublicKeyTable corresponding to the public key in this certificate. Used only for own certificates.')
certMD5Fingerprint = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certMD5Fingerprint.setStatus('mandatory')
if mibBuilder.loadTexts: certMD5Fingerprint.setDescription('The fingerprint of the certificate computed as an MD5 hash of the DER encoded binary certificate data.')
certSHA1Fingerprint = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certSHA1Fingerprint.setStatus('mandatory')
if mibBuilder.loadTexts: certSHA1Fingerprint.setDescription('The fingerprint of the certificate computed as an SHA1 hash of the DER encoded binary certificate data.')
certRevListTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 6), )
if mibBuilder.loadTexts: certRevListTable.setStatus('mandatory')
if mibBuilder.loadTexts: certRevListTable.setDescription('The certRevListTable contains the dynamic list of certificate revocation lists currently cached by the system.')
certRevListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 6, 1), ).setIndexNames((0, "BIANCA-BRICK-CERT-MIB", "certRevListIndex"))
if mibBuilder.loadTexts: certRevListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: certRevListEntry.setDescription('This object describes a certificate revocation list (CRL) currently in the systems dynamic CRL cache.')
certRevListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certRevListIndex.setStatus('mandatory')
if mibBuilder.loadTexts: certRevListIndex.setDescription('A unique index of this CRL.')
certRevListDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certRevListDescription.setStatus('mandatory')
if mibBuilder.loadTexts: certRevListDescription.setDescription('This object specifies the name of the certificate revocation list.')
certRevListIssuerName = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certRevListIssuerName.setStatus('mandatory')
if mibBuilder.loadTexts: certRevListIssuerName.setDescription('The name of the certificate authority which issued this CRL.')
certRevListIssuerAltNames = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certRevListIssuerAltNames.setStatus('mandatory')
if mibBuilder.loadTexts: certRevListIssuerAltNames.setDescription('The alternative names of the certificate authority which issued this CRL.')
certRevListSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certRevListSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: certRevListSerialNumber.setDescription('The serial number of the CRL.')
certRevListValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certRevListValidity.setStatus('mandatory')
if mibBuilder.loadTexts: certRevListValidity.setDescription('The issuing date of this CRL and the date the issuer is willing to issue the net update in human readable form.')
certRevListNumCerts = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certRevListNumCerts.setStatus('mandatory')
if mibBuilder.loadTexts: certRevListNumCerts.setDescription('The number of certificates contained in the CRL defined by this entry.')
mibBuilder.exportSymbols("BIANCA-BRICK-CERT-MIB", certGlobMaxRestarts=certGlobMaxRestarts, certServerEntry=certServerEntry, certEntry=certEntry, certRevListValidity=certRevListValidity, certSubjectName=certSubjectName, certKeyId=certKeyId, ipsec=ipsec, certServerTable=certServerTable, certServerPreference=certServerPreference, certGlobMaxCacheEntries=certGlobMaxCacheEntries, DisplayString=DisplayString, certGlobMaxCertValidity=certGlobMaxCertValidity, certRevListTable=certRevListTable, certRevListIssuerName=certRevListIssuerName, certPrivateKey=certPrivateKey, private=private, certNoCrls=certNoCrls, enterprises=enterprises, cert=cert, certRevListNumCerts=certRevListNumCerts, bibo=bibo, certGlobHttpProxy=certGlobHttpProxy, certIssuerName=certIssuerName, certRevListEntry=certRevListEntry, certRevListIndex=certRevListIndex, certRevListIssuerAltNames=certRevListIssuerAltNames, certForceTrusted=certForceTrusted, certDescription=certDescription, certRevListSerialNumber=certRevListSerialNumber, certIsCA=certIsCA, certGlobMaxPathLength=certGlobMaxPathLength, certGlobSocksServer=certGlobSocksServer, org=org, dod=dod, certMD5Fingerprint=certMD5Fingerprint, certGlobals=certGlobals, certIssuerAltNames=certIssuerAltNames, certSHA1Fingerprint=certSHA1Fingerprint, certIndex=certIndex, certGlobNegCachePeriod=certGlobNegCachePeriod, certPubKeyInfo=certPubKeyInfo, certValidity=certValidity, bintec=bintec, certRevListDescription=certRevListDescription, certServerName=certServerName, certServerUrl=certServerUrl, certSerialNumber=certSerialNumber, certTable=certTable, internet=internet, certServerType=certServerType, certGlobMaxCrlValidity=certGlobMaxCrlValidity, certSubjectAltNames=certSubjectAltNames)
