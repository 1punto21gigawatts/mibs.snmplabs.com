#
# PySNMP MIB module PDN-SFP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-SFP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:39:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pdn_ietf_drafts, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-ietf-drafts")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, ModuleIdentity, iso, Unsigned32, MibIdentifier, Counter64, NotificationType, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "ModuleIdentity", "iso", "Unsigned32", "MibIdentifier", "Counter64", "NotificationType", "ObjectIdentity", "Bits")
DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention")
pdnSfp = ModuleIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3))
pdnSfp.setRevisions(('2003-04-23 00:00', '2003-02-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pdnSfp.setRevisionsDescriptions(('Added new enum to sfpEncoding MIB Object', 'Initial MIB Creation',))
if mibBuilder.loadTexts: pdnSfp.setLastUpdated('200304230000Z')
if mibBuilder.loadTexts: pdnSfp.setOrganization('Paradyne Corp MIB Working Group')
if mibBuilder.loadTexts: pdnSfp.setContactInfo('Paradyne Networks, Inc. 8545, 126th Ave. N., Largo, FL 33779 www.paradyne.com General Comments to: mibwg_team@paradyne.com Editors: Prakash Easwar')
if mibBuilder.loadTexts: pdnSfp.setDescription('SFP is short for Small Form-Factor Pluggable (SFP) Transceiver. They plug into an SFP Compaitble Port and allow for compact Hardware design SFP modules contain an EEPROM containing information about the part. This MIB defines objects which will allow an NMS to extract the information from the SFP modules in a MIB format. The MIB objects defined in this MIB are based on the **Small Form Factor Pluggable (SFP) Transceiver MultiSource Agreement(MSA)** Since SFP MODULES are an extension of the port itself, the ifIndex for a sfp Compatible Port will be used to access information from these modules. The Entity MIB (RFC 2737) Should Contain Entries for Each SFP Module. SFP to Port to PortIfIndex can be acheived via the Entity MIB (RFC2737)')
sfpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1))
sfpMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 2))
sfpMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 3))
sfpCompatibleInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpCompatibleInterfaceCount.setStatus('current')
if mibBuilder.loadTexts: sfpCompatibleInterfaceCount.setDescription('The number of physical ports in the system which are sfp compatible')
sfpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2), )
if mibBuilder.loadTexts: sfpInfoTable.setStatus('current')
if mibBuilder.loadTexts: sfpInfoTable.setDescription('The sfp information table.')
sfpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sfpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sfpInfoEntry.setDescription('An entry in the SFP Information Table')
sfpIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("gbic", 2), ("fixed", 3), ("sfp", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpIdentifier.setStatus('current')
if mibBuilder.loadTexts: sfpIdentifier.setDescription('The type of serial transceiver unknown -- Unknown or unspecified gbic -- GBIC fixed -- Module/connector soldered to motherboard sfp -- SFP transceiver other -- Vendor specific')
sfpVendorSpecificIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorSpecificIdentifier.setStatus('current')
if mibBuilder.loadTexts: sfpVendorSpecificIdentifier.setDescription('The vendor specific identifier. This Object will be set to value other than {0,0} only if sfpIdentifier returns a value of other')
sfpExtIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("simd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpExtIdentifier.setStatus('current')
if mibBuilder.loadTexts: sfpExtIdentifier.setDescription('The type of serial transceiver unknown -- Unknown or unspecified simd -- Serial ID module Definition')
sfpConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("unknown", 1), ("sc", 2), ("fcscc1", 3), ("fcscc2", 4), ("bnctnc", 5), ("fcch", 6), ("fiberJack", 7), ("lc", 8), ("mtrj", 9), ("mu", 10), ("sg", 11), ("opticalPigtail", 12), ("hssdcii", 13), ("copperPigtail", 14), ("other", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConnector.setStatus('current')
if mibBuilder.loadTexts: sfpConnector.setDescription('The type of external connector provided unknown -- Unknown or unspecified sc -- SC fcscc1 -- Fibre Channel Style 1 copper connector fcscc2 -- Fibre Channel Style 2 copper connector bnctnc -- BNC-TNC fcch -- Fibre Channel coaxial headers fiberJack -- Fiber Jack lc -- LC mtrj -- MT-RJ mu -- MU sg -- SG opticalPigtail -- Optical Pigtail hssdcii -- HSSDC II copperPigtail -- Copper Pigtail other -- Vendor specific')
sfpVendorSpecificConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorSpecificConnector.setStatus('current')
if mibBuilder.loadTexts: sfpVendorSpecificConnector.setDescription('The type of vendor specific Connector. This Object will be set to value other than {0,0} only if sfpConnector returns a value of other')
sfpTransceiverComplianceCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 6), Bits().clone(namedValues=NamedValues(("unknown", 0), ("oc48LongReach1", 1), ("oc48LongReach2", 2), ("oc48LongReach3", 3), ("oc48IntermediateReach1", 4), ("oc48IntermediateReach2", 5), ("oc48ShortReach", 6), ("oc12SMLongReach1", 7), ("oc12SMLongReach2", 8), ("oc12SMLongReach3", 9), ("oc12SMIntermediateReach1", 10), ("oc12SMIntermediateReach2", 11), ("oc12MMShortReach", 12), ("oc3SMLongReach1", 13), ("oc3SMLongReach2", 14), ("oc3SMLongReach3", 15), ("oc3SMIntermediateReach1", 16), ("oc3SMIntermediateReach2", 17), ("oc3MMShortReach", 18), ("base1000T", 19), ("base1000CX", 20), ("base1000LX", 21), ("base1000SX", 22), ("sx1x", 23), ("lx1x", 24), ("copperActive1x", 25), ("copperPassive1x", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTransceiverComplianceCodes.setStatus('current')
if mibBuilder.loadTexts: sfpTransceiverComplianceCodes.setDescription('The sfp transceiver codes for sonet unknown -- Unknown -- SONET Compliance Codes -- oc48LongReach1 -- OC-48, long reach, SONET LR-1 Compliant oc48LongReach2 -- OC-48, long reach, SONET LR-2 Compliant oc48LongReach3 -- OC-48, long reach, SONET LR-3 Compliant oc48IntermediateReach1 -- OC-48, intermediate reach, SONET IR-1 Compliant oc48IntermediateReach2 -- OC-48, intermediate reach, SONET IR-2 Compliant oc48ShortReach -- OC-48 short reach, SONET SR Compliant oc12SMLongReach1 -- OC-12, single mode long reach, SONET LR-1 Compliant oc12SMLongReach2 -- OC-12, single mode long reach, SONET LR-2 Compliant oc12SMLongReach3 -- OC-12, single mode long reach, SONET LR-3 Compliant oc12SMIntermediateReach1 -- OC-12, songle mode intermediate reach, SONET IR-1 Compliant oc12SMIntermediateReach2 -- OC-12, songle mode intermediate reach, SONET IR-2 Compliant oc12MMShortReach -- OC-12 multi-mode short reach, SONET SR Compliant oc3SMLongReach1 -- OC-3, single mode long reach, SONET LR-1 Compliant oc3SMLongReach2 -- OC-3, single mode long reach, SONET LR-2 Compliant oc3SMLongReach3 -- OC-3, single mode long reach, SONET LR-3 Compliant oc3SMIntermediateReach1 -- OC-3, songle mode intermediate reach, SONET IR-1 Compliant oc3SMIntermediateReach2 -- OC-3, songle mode intermediate reach, SONET IR-2 Compliant oc3MMShortReach -- OC-3 multi-mode short reach, SONET SR Compliant -- Gigabit Ethernet Compliance Codes -- base1000T -- 1000BASE-T base1000CX -- 1000BASE-CX base1000LX -- 1000BASE-LX base1000SX -- 1000BASE-SX -- Infiniband Compliance Codes -- lx1x -- 1X LX sx1x -- 1X SX copperActive1x -- 1X Copper Active copperPassive1x -- 1X Copper Passive')
sfpFibreChannelLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 7), Bits().clone(namedValues=NamedValues(("unknown", 0), ("veryLong", 1), ("short", 2), ("intermediate", 3), ("long", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpFibreChannelLinkLength.setStatus('current')
if mibBuilder.loadTexts: sfpFibreChannelLinkLength.setDescription('The link length for fibre unknown -- Unknown veryLong -- very long distance short -- short distance intermediate -- intermediate distance long -- long distance notFibre -- The transmission is media is not Fibre')
sfpFibreChannelTransmitterTechnology = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 8), Bits().clone(namedValues=NamedValues(("unknown", 0), ("lc", 1), ("el1", 2), ("el2", 3), ("sn", 4), ("sl", 5), ("ll", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpFibreChannelTransmitterTechnology.setStatus('current')
if mibBuilder.loadTexts: sfpFibreChannelTransmitterTechnology.setDescription('The fibre channel transmitter technology unknown -- Unknown lc -- Longwave Laser el1 -- Electrical inter-enclosure el2 -- Electrical intra-enclosure sn -- Shortwave laser w/o OFC sl -- Shortwave laser w/ OFC ll -- Longwave Laser')
sfpFibreChannelTransmissionMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 9), Bits().clone(namedValues=NamedValues(("unknown", 0), ("tw", 1), ("tp", 2), ("mi", 3), ("tv", 4), ("m6", 5), ("m5", 6), ("sm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpFibreChannelTransmissionMedia.setStatus('current')
if mibBuilder.loadTexts: sfpFibreChannelTransmissionMedia.setDescription('The fibre channel transmitter technology unknown -- Unknown tw -- Twin Axial Pair tp -- Shielded Twisted Pair mi -- Miniature Coax tv -- Video Coax m6 -- Multi-mode, 62.5mi m5 -- Multi-mode, 50mi sm -- Single Mode')
sfpFibreChannelTransmissionSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 10), Bits().clone(namedValues=NamedValues(("unknown", 0), ("mbps400", 1), ("mbps200", 2), ("mbps100", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpFibreChannelTransmissionSpeed.setStatus('current')
if mibBuilder.loadTexts: sfpFibreChannelTransmissionSpeed.setDescription('The fibre channel transmission speed unknown -- Unknown mbps400 -- Twin Axial Pair mbps200 -- Shielded Twisted Pair mbps100 -- Miniature Coax')
sfpEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("b8b10", 2), ("b4b5", 3), ("nrz", 4), ("manchester", 5), ("sonetScrambled", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpEncoding.setStatus('current')
if mibBuilder.loadTexts: sfpEncoding.setDescription('The type of serial encoding that is the nominal design target of the particular SFP transceiver unknown -- Unknown or unspecified b8b10 -- 8B10B b4b5 -- 4B5B nrz -- NRZ manchester -- Manchester, sonetScrambled -- SONET Scrambled')
sfpBRNominal100Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 12), Integer32()).setUnits('100 Megabits per second (Mbps)').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpBRNominal100Mbps.setStatus('current')
if mibBuilder.loadTexts: sfpBRNominal100Mbps.setDescription('The nominal bit rate(BR, nominal) which is specified in unitd of 100mbps, rounded off to the nearest 100 Mbps. The bit rate includes those bits necessary to encode and delimit the signal as well as those bits carrying data information. A value of 0 indicates that the bit rate is not specified and must be determined from the tranceiver technology. The actual information transfer rate will depend on the encoding of the data, as defined by the encoding value.')
sfpLength9MiKm = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 13), Integer32()).setUnits('Kilometer(Km)').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpLength9MiKm.setStatus('current')
if mibBuilder.loadTexts: sfpLength9MiKm.setDescription('The link length that is supported by the sfp transceiver while operating in compliance with applicable standards using single mode fibre (9 micron). The value is in units of kilometers. A value of 255 means that the sfp transceiver supports a link length greater than 254 Km. A value of 0 means that the transceiver does not support single mode fibre (9 micron) or that the length information must be determined from the transceiver technology')
sfpLength9Mi100M = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 14), Integer32()).setUnits('100 Meters(M)').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpLength9Mi100M.setStatus('current')
if mibBuilder.loadTexts: sfpLength9Mi100M.setDescription('The link length that is supported by the sfp transceiver while operating in compliance with applicable standards using single mode fibre (9 micron).The value is in units of 100 meters. A value of 255 means that the sfp transceiver supports a link length greater than 25.4 Km. A value of 0 means that the transceiver does not support single mode fibre (9 micron) or that the length information must be determined from the transceiver technology')
sfpLength50Mi10M = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 15), Integer32()).setUnits('10 Meters(M)').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpLength50Mi10M.setStatus('current')
if mibBuilder.loadTexts: sfpLength50Mi10M.setDescription('The link length that is supported by the sfp transceiver while operating in compliance with applicable standards using multi-mode fibre (50 micron). The value is in units of 10 meters. A value of 255 means that the sfp transceiver supports a link length greater than 2.54 Km. A value of 0 means that the transceiver does not support multi-mode fibre (50 micron) or that the length information must be determined from the transceiver technology')
sfpLength62Pt5Mi10M = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 16), Integer32()).setUnits('10 Meters(M)').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpLength62Pt5Mi10M.setStatus('current')
if mibBuilder.loadTexts: sfpLength62Pt5Mi10M.setDescription('The link length that is supported by the sfp transceiver while operating in compliance with applicable standards using multi-mode fibre (62.5 micron). The value is in units of 10 meters. A value of 255 means that the sfp transceiver supports a link length greater than 2.54 Km. A value of 0 means that the transceiver does not support multi-mode fibre (62.5 micron) or that the length information must be determined from the transceiver technology')
sfpLengthCopperM = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 17), Integer32()).setUnits('1 Meter(M)').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpLengthCopperM.setStatus('current')
if mibBuilder.loadTexts: sfpLengthCopperM.setDescription('The link length that is supported by the sfp transceiver while operating in compliance with applicable standards using copper cable. The value is in units of 1 meters. A value of 255 means that the sfp transceiver supports a link length greater than 254 meters. A value of 0 means that the transceiver does not support copper cables or that the length information must be determined from the transceiver technology')
sfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorName.setStatus('current')
if mibBuilder.loadTexts: sfpVendorName.setDescription('The sfp vendor name which is essentially the full name of the corporation, a commonly accepted abbreviation of the name of the corporation, the SCSI company code for the corporation, or the stock exchange code for the corporation.')
sfpVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorOUI.setStatus('current')
if mibBuilder.loadTexts: sfpVendorOUI.setDescription('The sfp vendor organizationally unique identifier field (vendor OUI) that contains the IEEE company identifier for the vendor. A value of all zero in the 3 octet field indicates that the vendor OUI is unspecified')
sfpVendorPN = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorPN.setStatus('current')
if mibBuilder.loadTexts: sfpVendorPN.setDescription('The sfp vendor part number (Vendor PN) or product name if the Vendor PN is unspecified, the null string {0, 0} will be returned')
sfpVendorSN = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorSN.setStatus('current')
if mibBuilder.loadTexts: sfpVendorSN.setDescription('The sfp vendor serial number (Vendor SN) if the Vendor SN is unspecified, the null string {0, 0} will be returned')
sfpVendorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorRev.setStatus('current')
if mibBuilder.loadTexts: sfpVendorRev.setDescription('The sfp vendor product revision number (Vendor Rev) if the Vendor Rev is unspecified, the null string {0, 0} will be returned')
sfpLaserWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 23), Integer32()).setUnits('Nano Meter(NM)').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpLaserWavelength.setStatus('current')
if mibBuilder.loadTexts: sfpLaserWavelength.setDescription('Nominal Transmitter output wavelength at room temperature.')
sfpOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 24), Bits().clone(namedValues=NamedValues(("unknown", 0), ("rateSelect", 1), ("txDisable", 2), ("txFault", 3), ("losNormal", 5), ("losInverted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpOptions.setStatus('current')
if mibBuilder.loadTexts: sfpOptions.setDescription('The options implemented in the SFP transceiver unknown -- Unknown rateSelect -- RATE_SELECT is implemented. If this bit is not set, no control of pin is required. If this bit is set, then active control if the rate select pin is required. In Both cases, compliance with mlutiple rate standards should be determined by the following objects sfpTransceiverComplianceCodes sfpFibreChannelTransmissionSpeed txDisable -- TX_DISABLE is impelmented and disables the serial output txFault -- TX_FAULT is implemented. losNormal -- loss of signal implemented los high indicates the received optical power is below the worst case receiver sensitivity (as defined by the standard in use. los low indicates normal operation losInverted -- loss of signal implemented los low indicates the received optical power is below the worst case receiver sensitivity (as defined by the standard in use. los high indicates normal operation')
sfpBRMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 25), Integer32()).setUnits('percent below sfpBRNominal').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpBRMin.setStatus('current')
if mibBuilder.loadTexts: sfpBRMin.setDescription('The lower bit rate limit at which the SFP transceiver will meet its specifications (BR, min) is specified in units of 1% below the nominal bit rate. A value of zero indicates that this field is not specified.')
sfpBRMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 26), Integer32()).setUnits('percent above sfpBRNominal').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpBRMax.setStatus('current')
if mibBuilder.loadTexts: sfpBRMax.setDescription('The upper bit rate limit at which the SFP transceiver will meet its specifications (BR, max) is specified in units of 1% above the nominal bit rate. A value of zero indicates that this field is not specified.')
sfpVendorDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorDate.setStatus('current')
if mibBuilder.loadTexts: sfpVendorDate.setDescription('The Vendors date')
sfpVendorSpecificLotCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorSpecificLotCode.setStatus('current')
if mibBuilder.loadTexts: sfpVendorSpecificLotCode.setDescription('The Vendor Specific Lot code. A value of {0, 0} indicates that the lot code is unspecified')
sfpVendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorSpecificData.setStatus('current')
if mibBuilder.loadTexts: sfpVendorSpecificData.setDescription('Vendor Specific Information which can be read from the SFP transceiver')
sfpStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 2, 1, 30), Bits().clone(namedValues=NamedValues(("unknown", 0), ("notInstalled", 1), ("installed", 2), ("faulty", 3), ("operational", 4), ("enabled", 5), ("disabled", 6), ("inValidCCBase", 7), ("inValidCCExt", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpStatusCurrent.setStatus('current')
if mibBuilder.loadTexts: sfpStatusCurrent.setDescription('The current state of the sfp transceiver unknown -- Unknown notInstalled -- the SFP transceiver is not installed installed -- the sfp transceiver has been installed faulty -- the sfp transceiver is faulty operational -- the sfp transceiver is working properly enabled -- the sfp transceiver has been enabled disabled -- the sfp transceiver has been diabled, invalidCCBase -- indicates that the first 64 bytes of serial information in the SFP transceiver is invalid. The check is done by comparing the 64-th byte with the sum of the contents of the first 63 bytes (bytes 0 to 62, inclusive). invalidCCExt -- indicates that the first 32 bytes of the extended serial information in the SFP tranceiver is invalid. The check is done by comparing theu 95-th byte with the sum of the contents of the first 32 bytes (bytes 64 to 94, inclusive).')
sfpCommandTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 3), )
if mibBuilder.loadTexts: sfpCommandTable.setStatus('current')
if mibBuilder.loadTexts: sfpCommandTable.setDescription('The sfp command table.')
sfpCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sfpCommandEntry.setStatus('current')
if mibBuilder.loadTexts: sfpCommandEntry.setDescription('An entry in the SFP Command Table')
sfpCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noCmd", 1), ("enable", 2), ("disable", 3), ("reset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpCommand.setStatus('current')
if mibBuilder.loadTexts: sfpCommand.setDescription('This Object specifies the command to be applied to the sfp transceiver associated with a physical interface noCmd -- no command has been issued to this sfp device enable -- enables the sfp device disable -- disables the sfp device reset -- resets the sfp device when read the last command issued to the sfp device will be returned or noCmd will be returned if a command has not been issued yet')
sfpNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 1, 4), Bits().clone(namedValues=NamedValues(("faulty", 0), ("operational", 1), ("inserted", 2), ("removed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: sfpNotificationEnable.setDescription('Provides the ability to enable and disable notifications defined in this mib faulty indicates sfpEventFaulty notifications should be generated when the sfp is detected as being faulty operational indicates sfpEventOperational notifications should be generated when the sfp is detected as being working properly inserted indicates sfpEventInserted notifications should be generated when the sfp is insreted into a physical port removed indicates sfpEventRemoved notifications should be generated when the sfp is removed from a physical port')
sfpNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 2, 0))
sfpEventFaulty = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 2, 0, 1)).setObjects(("PDN-SFP-MIB", "sfpStatusCurrent"))
if mibBuilder.loadTexts: sfpEventFaulty.setStatus('current')
if mibBuilder.loadTexts: sfpEventFaulty.setDescription('The sfpEventFaulty notification is sent when the sfp associated with a physical port is detected as being faulty')
sfpEventOperational = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 2, 0, 2)).setObjects(("PDN-SFP-MIB", "sfpStatusCurrent"))
if mibBuilder.loadTexts: sfpEventOperational.setStatus('current')
if mibBuilder.loadTexts: sfpEventOperational.setDescription('The sfpEventOperational notification is sent when the sfp associated with a physical port is detected as being working normally')
sfpEventInserted = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 2, 0, 3)).setObjects(("PDN-SFP-MIB", "sfpStatusCurrent"))
if mibBuilder.loadTexts: sfpEventInserted.setStatus('current')
if mibBuilder.loadTexts: sfpEventInserted.setDescription('The sfpEventInserted notification is sent when the sfp is inserted into a physical port')
sfpEventRemoved = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 2, 0, 4)).setObjects(("PDN-SFP-MIB", "sfpStatusCurrent"))
if mibBuilder.loadTexts: sfpEventRemoved.setStatus('current')
if mibBuilder.loadTexts: sfpEventRemoved.setDescription('The sfpEventRemoved notification is sent when the sfp is removed from a physical port')
sfpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 3, 1))
sfpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 3, 2))
sfpReadWriteCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 3, 2, 1)).setObjects(("PDN-SFP-MIB", "sfpCommandGroup"), ("PDN-SFP-MIB", "sfpNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sfpReadWriteCompliance = sfpReadWriteCompliance.setStatus('current')
if mibBuilder.loadTexts: sfpReadWriteCompliance.setDescription('Compliance statement configuring the sfp device.')
sfpReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 3, 2, 2)).setObjects(("PDN-SFP-MIB", "sfpMIBObjectsGroup"), ("PDN-SFP-MIB", "sfpInformationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sfpReadOnlyCompliance = sfpReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: sfpReadOnlyCompliance.setDescription('Compliance statement reading the SFP information.')
sfpNotificationCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 3, 2, 3)).setObjects(("PDN-SFP-MIB", "sfpEventGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sfpNotificationCompliance = sfpNotificationCompliance.setStatus('current')
if mibBuilder.loadTexts: sfpNotificationCompliance.setDescription('Compliance statement sfp device notifications.')
sfpMIBObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 3, 1, 1)).setObjects(("PDN-SFP-MIB", "sfpCompatibleInterfaceCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sfpMIBObjectsGroup = sfpMIBObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: sfpMIBObjectsGroup.setDescription('A collection of scalar objects in section sfpMIBObjects providing information about sfp compatible intefaces')
sfpInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 3, 1, 2)).setObjects(("PDN-SFP-MIB", "sfpIdentifier"), ("PDN-SFP-MIB", "sfpVendorSpecificIdentifier"), ("PDN-SFP-MIB", "sfpExtIdentifier"), ("PDN-SFP-MIB", "sfpConnector"), ("PDN-SFP-MIB", "sfpVendorSpecificConnector"), ("PDN-SFP-MIB", "sfpTransceiverComplianceCodes"), ("PDN-SFP-MIB", "sfpFibreChannelLinkLength"), ("PDN-SFP-MIB", "sfpFibreChannelTransmitterTechnology"), ("PDN-SFP-MIB", "sfpFibreChannelTransmissionMedia"), ("PDN-SFP-MIB", "sfpFibreChannelTransmissionSpeed"), ("PDN-SFP-MIB", "sfpEncoding"), ("PDN-SFP-MIB", "sfpBRNominal100Mbps"), ("PDN-SFP-MIB", "sfpLength9MiKm"), ("PDN-SFP-MIB", "sfpLength9Mi100M"), ("PDN-SFP-MIB", "sfpLength50Mi10M"), ("PDN-SFP-MIB", "sfpLength62Pt5Mi10M"), ("PDN-SFP-MIB", "sfpLengthCopperM"), ("PDN-SFP-MIB", "sfpVendorName"), ("PDN-SFP-MIB", "sfpVendorOUI"), ("PDN-SFP-MIB", "sfpVendorPN"), ("PDN-SFP-MIB", "sfpVendorSN"), ("PDN-SFP-MIB", "sfpVendorRev"), ("PDN-SFP-MIB", "sfpLaserWavelength"), ("PDN-SFP-MIB", "sfpOptions"), ("PDN-SFP-MIB", "sfpBRMin"), ("PDN-SFP-MIB", "sfpBRMax"), ("PDN-SFP-MIB", "sfpVendorDate"), ("PDN-SFP-MIB", "sfpVendorSpecificLotCode"), ("PDN-SFP-MIB", "sfpVendorSpecificData"), ("PDN-SFP-MIB", "sfpStatusCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sfpInformationGroup = sfpInformationGroup.setStatus('current')
if mibBuilder.loadTexts: sfpInformationGroup.setDescription('A collection of sfpInfoTable objects providing information applicable to sfp transceivers.')
sfpCommandGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 3, 1, 3)).setObjects(("PDN-SFP-MIB", "sfpCommand"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sfpCommandGroup = sfpCommandGroup.setStatus('current')
if mibBuilder.loadTexts: sfpCommandGroup.setDescription('A collection of sfpCommandTable objects providing a way to issue commands to an sfp transceiver.')
sfpNotificationsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 3, 1, 4)).setObjects(("PDN-SFP-MIB", "sfpNotificationEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sfpNotificationsGroup = sfpNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: sfpNotificationsGroup.setDescription('A collection of scalar objects in section sfpMIBObjects to enable/disable notifications sent by the agent')
sfpEventGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 14, 3, 3, 1, 5)).setObjects(("PDN-SFP-MIB", "sfpEventFaulty"), ("PDN-SFP-MIB", "sfpEventOperational"), ("PDN-SFP-MIB", "sfpEventInserted"), ("PDN-SFP-MIB", "sfpEventRemoved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sfpEventGroup = sfpEventGroup.setStatus('current')
if mibBuilder.loadTexts: sfpEventGroup.setDescription('A collection of sfp notifications')
mibBuilder.exportSymbols("PDN-SFP-MIB", sfpFibreChannelTransmitterTechnology=sfpFibreChannelTransmitterTechnology, sfpCommand=sfpCommand, sfpNotificationsPrefix=sfpNotificationsPrefix, sfpNotificationsGroup=sfpNotificationsGroup, sfpVendorSpecificLotCode=sfpVendorSpecificLotCode, sfpVendorSN=sfpVendorSN, sfpVendorSpecificConnector=sfpVendorSpecificConnector, pdnSfp=pdnSfp, sfpMIBNotifications=sfpMIBNotifications, sfpVendorDate=sfpVendorDate, sfpGroups=sfpGroups, sfpFibreChannelLinkLength=sfpFibreChannelLinkLength, sfpNotificationCompliance=sfpNotificationCompliance, sfpTransceiverComplianceCodes=sfpTransceiverComplianceCodes, sfpFibreChannelTransmissionSpeed=sfpFibreChannelTransmissionSpeed, sfpCompatibleInterfaceCount=sfpCompatibleInterfaceCount, sfpLength50Mi10M=sfpLength50Mi10M, sfpStatusCurrent=sfpStatusCurrent, sfpLength9MiKm=sfpLength9MiKm, sfpVendorSpecificData=sfpVendorSpecificData, sfpReadOnlyCompliance=sfpReadOnlyCompliance, sfpEventInserted=sfpEventInserted, sfpLengthCopperM=sfpLengthCopperM, PYSNMP_MODULE_ID=pdnSfp, sfpIdentifier=sfpIdentifier, sfpReadWriteCompliance=sfpReadWriteCompliance, sfpEventFaulty=sfpEventFaulty, sfpInfoEntry=sfpInfoEntry, sfpEventOperational=sfpEventOperational, sfpLength9Mi100M=sfpLength9Mi100M, sfpEncoding=sfpEncoding, sfpNotificationEnable=sfpNotificationEnable, sfpEventGroup=sfpEventGroup, sfpInformationGroup=sfpInformationGroup, sfpBRMin=sfpBRMin, sfpMIBObjectsGroup=sfpMIBObjectsGroup, sfpInfoTable=sfpInfoTable, sfpVendorPN=sfpVendorPN, sfpBRNominal100Mbps=sfpBRNominal100Mbps, sfpVendorSpecificIdentifier=sfpVendorSpecificIdentifier, sfpVendorRev=sfpVendorRev, sfpExtIdentifier=sfpExtIdentifier, sfpConnector=sfpConnector, sfpMIBConformance=sfpMIBConformance, sfpBRMax=sfpBRMax, sfpLength62Pt5Mi10M=sfpLength62Pt5Mi10M, sfpCommandTable=sfpCommandTable, sfpFibreChannelTransmissionMedia=sfpFibreChannelTransmissionMedia, sfpVendorName=sfpVendorName, sfpCommandEntry=sfpCommandEntry, sfpVendorOUI=sfpVendorOUI, sfpOptions=sfpOptions, sfpCommandGroup=sfpCommandGroup, sfpLaserWavelength=sfpLaserWavelength, sfpCompliances=sfpCompliances, sfpMIBObjects=sfpMIBObjects, sfpEventRemoved=sfpEventRemoved)
