#
# PySNMP MIB module DLINK-3100-rndMng (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLINK-3100-rndMng
# Produced by pysmi-0.3.4 at Wed May  1 12:49:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
rnd, = mibBuilder.importSymbols("DLINK-3100-MIB", "rnd")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Counter32, ObjectIdentity, Integer32, TimeTicks, Unsigned32, iso, NotificationType, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "ObjectIdentity", "Integer32", "TimeTicks", "Unsigned32", "iso", "NotificationType", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "MibIdentifier")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
rndMng = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1))
rndMng.setRevisions(('2009-02-24 00:00', '2007-10-24 00:00', '2006-06-20 00:00', '2004-06-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rndMng.setRevisionsDescriptions(('Added rlRunningCDBequalToStartupCDB object.', 'Added rlGroupManagement branch.', 'Added rlRebootDelay object', 'Initial version of this MIB.',))
if mibBuilder.loadTexts: rndMng.setLastUpdated('200606200000Z')
if mibBuilder.loadTexts: rndMng.setOrganization('Dlink, Inc.')
if mibBuilder.loadTexts: rndMng.setContactInfo('www.dlink.com')
if mibBuilder.loadTexts: rndMng.setDescription('The private MIB module definition for RND general management MIB.')
rndSysId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndSysId.setStatus('current')
if mibBuilder.loadTexts: rndSysId.setDescription('Identification of an RND device. The device type for each integer clarifies the sysObjectID in MIB - II.')
rndAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("reset", 1), ("sendNetworkTab", 2), ("deleteNetworkTab", 3), ("sendRoutingTab", 4), ("deleteRoutingTab", 5), ("sendLanTab", 6), ("deleteLanTab", 7), ("deleteArpTab", 8), ("sendArpTab", 9), ("deleteRouteTab", 10), ("sendRouteTab", 11), ("backupSPFRoutingTab", 12), ("backupIPRoutingTab", 13), ("backupNetworkTab", 14), ("backupLanTab", 15), ("backupArpTab", 16), ("backupIPXRipTab", 17), ("backupIPXSAPTab", 18), ("resetStartupCDB", 19), ("eraseStartupCDB", 20), ("deleteZeroHopRoutingAllocTab", 21), ("slipDisconnect", 22), ("deleteDynamicLanTab", 23), ("eraseRunningCDB", 24), ("copyStartupToRunning", 25), ("none", 26), ("resetToFactoryDefaults", 27)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndAction.setStatus('current')
if mibBuilder.loadTexts: rndAction.setDescription('This variable enables the operator to perform one of the specified actions on the tables maintained by the network device. Send actions require support of proprietery File exchange protocol.')
rndFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndFileName.setStatus('current')
if mibBuilder.loadTexts: rndFileName.setDescription('The name of the file used internally by RND for transferring tables maintained by network devices, using a prorietary File exchange protocol.')
rlSnmpVersionSupported = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSnmpVersionSupported.setStatus('current')
if mibBuilder.loadTexts: rlSnmpVersionSupported.setDescription('Indicates the snmp versions that are supported by this device.')
rlSnmpMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSnmpMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlSnmpMibVersion.setDescription('Indicates the snmp support version that is supported by this device.')
rlCpuUtilEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCpuUtilEnable.setStatus('current')
if mibBuilder.loadTexts: rlCpuUtilEnable.setDescription('Enables measurement of the device CPU utilization. In order to get real values for rlCpuUtilDuringLastSecond, rlCpuUtilDuringLastMinute and rlCpuUtilDuringLast5Minutes, the value of this object must be true.')
rlCpuUtilDuringLastSecond = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCpuUtilDuringLastSecond.setStatus('current')
if mibBuilder.loadTexts: rlCpuUtilDuringLastSecond.setDescription('Percentage of the device CPU utilization during last second. The value 101 is a dummy value, indicating that the CPU utilization was not measured (since measurement is disabled or was disabled during last second).')
rlCpuUtilDuringLastMinute = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCpuUtilDuringLastMinute.setStatus('current')
if mibBuilder.loadTexts: rlCpuUtilDuringLastMinute.setDescription('Percentage of the device CPU utilization during last minute. The value 101 is a dummy value, indicating that the CPU utilization was not measured (since measurement is disabled or was disabled during last minute).')
rlCpuUtilDuringLast5Minutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCpuUtilDuringLast5Minutes.setStatus('current')
if mibBuilder.loadTexts: rlCpuUtilDuringLast5Minutes.setDescription('Percentage of the device CPU utilization during the last 5 minutes. The value 101 is a dummy value, indicating that the CPU utilization was not measured (since measurement is disabled or was disabled during last 5 minutes).')
rlRebootDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 10), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRebootDelay.setStatus('current')
if mibBuilder.loadTexts: rlRebootDelay.setDescription('Setting the variable will cause the device to reboot rlRebootDelay timeticks from the moment this variable was set. If not set, the variable will return a value of 4294967295. If set to 4294967295, reboot action is cancelled. The maximum delay is set by the host parameter: reboot_delay_max')
rlGroupManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11))
rlGroupMngQuery = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("query", 1), ("idle", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlGroupMngQuery.setStatus('current')
if mibBuilder.loadTexts: rlGroupMngQuery.setDescription('Setting value query will cause the device to query for UPNP devices on the network. The device will always return value idle for GET.')
rlGroupMngQueryPeriod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 2), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlGroupMngQueryPeriod.setStatus('current')
if mibBuilder.loadTexts: rlGroupMngQueryPeriod.setDescription('Sets desired interval between queries for UPNP devices on the network. Setting 0 will result in no such query. Note that the actual query interval might be less than the set value if another application running in the device requested a shorter interval. Likewise setting 0 will not necessarily stop periodic queries if another application is still interested in periodic polling.')
rlGroupMngLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGroupMngLastUpdate.setStatus('current')
if mibBuilder.loadTexts: rlGroupMngLastUpdate.setDescription('The last time rlGroupMng MIB was updated.')
rlGroupMngDevicesTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4), )
if mibBuilder.loadTexts: rlGroupMngDevicesTable.setStatus('current')
if mibBuilder.loadTexts: rlGroupMngDevicesTable.setDescription('The table showing the discovered devices.')
rlGroupMngDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1), ).setIndexNames((0, "DLINK-3100-rndMng", "rlGroupMngDeviceIdType"), (0, "DLINK-3100-rndMng", "rlGroupMngDeviceId"), (0, "DLINK-3100-rndMng", "rlGroupMngSubdevice"))
if mibBuilder.loadTexts: rlGroupMngDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: rlGroupMngDeviceEntry.setDescription(' The row definition for this table.')
rlGroupMngDeviceIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: rlGroupMngDeviceIdType.setStatus('current')
if mibBuilder.loadTexts: rlGroupMngDeviceIdType.setDescription('The IP address type of the discovered device ')
rlGroupMngDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 2), InetAddress())
if mibBuilder.loadTexts: rlGroupMngDeviceId.setStatus('current')
if mibBuilder.loadTexts: rlGroupMngDeviceId.setDescription('The IP address of the discovered device ')
rlGroupMngSubdevice = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 3), Integer32())
if mibBuilder.loadTexts: rlGroupMngSubdevice.setStatus('current')
if mibBuilder.loadTexts: rlGroupMngSubdevice.setDescription('A subdevice within the rlGroupMngDeviceId. Only subdevices with greatest specifity will be kept (specific UUID device is more specific than basic device which is in turn more specific than root device. ')
rlGroupMngDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGroupMngDeviceDescription.setStatus('current')
if mibBuilder.loadTexts: rlGroupMngDeviceDescription.setDescription('The discovery protocol description of the device.')
rlGroupMngGroupMngEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGroupMngGroupMngEnabled.setStatus('current')
if mibBuilder.loadTexts: rlGroupMngGroupMngEnabled.setDescription('Indicates whether the device has Group Management enable.')
rlGroupMngGroupLLDPDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGroupMngGroupLLDPDeviceId.setStatus('current')
if mibBuilder.loadTexts: rlGroupMngGroupLLDPDeviceId.setDescription('The LLDP device id. If it is empty the device id is not known (either it is a non-MTS device or a non-LLDP supporting MTS device.')
rlGroupMngDeviceVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGroupMngDeviceVendor.setStatus('current')
if mibBuilder.loadTexts: rlGroupMngDeviceVendor.setDescription('The vendor of the device. If empty the vendor is not known.')
rlGroupMngDeviceAdvertisedCachingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 8), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGroupMngDeviceAdvertisedCachingTime.setStatus('current')
if mibBuilder.loadTexts: rlGroupMngDeviceAdvertisedCachingTime.setDescription('The caching time advertised by the device. If no update for this device has been received during this caching time the system will assume that the device has left the network and will therefore remove its entry from the table.')
rlGroupMngDeviceLocationURL = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 9), DisplayString()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGroupMngDeviceLocationURL.setStatus('current')
if mibBuilder.loadTexts: rlGroupMngDeviceLocationURL.setDescription('The URL inidicating the location of the XML presenting the details of the device.')
rlGroupMngDeviceLastSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGroupMngDeviceLastSeen.setStatus('current')
if mibBuilder.loadTexts: rlGroupMngDeviceLastSeen.setDescription('The value of sysUpTime at the moment of last reception of an update for this device. ')
rlRunningCDBequalToStartupCDB = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRunningCDBequalToStartupCDB.setStatus('current')
if mibBuilder.loadTexts: rlRunningCDBequalToStartupCDB.setDescription('Indicates whether there are changes in running CDB that were not saved in flash.')
mibBuilder.exportSymbols("DLINK-3100-rndMng", rlCpuUtilDuringLast5Minutes=rlCpuUtilDuringLast5Minutes, rndSysId=rndSysId, rlCpuUtilDuringLastSecond=rlCpuUtilDuringLastSecond, rlGroupMngQuery=rlGroupMngQuery, rndMng=rndMng, PYSNMP_MODULE_ID=rndMng, rlSnmpVersionSupported=rlSnmpVersionSupported, rlGroupMngDeviceDescription=rlGroupMngDeviceDescription, rndAction=rndAction, rlGroupMngLastUpdate=rlGroupMngLastUpdate, rlRunningCDBequalToStartupCDB=rlRunningCDBequalToStartupCDB, rlGroupMngQueryPeriod=rlGroupMngQueryPeriod, rlGroupManagement=rlGroupManagement, rlGroupMngDeviceEntry=rlGroupMngDeviceEntry, rlCpuUtilDuringLastMinute=rlCpuUtilDuringLastMinute, rlGroupMngDeviceLastSeen=rlGroupMngDeviceLastSeen, rlGroupMngDeviceLocationURL=rlGroupMngDeviceLocationURL, rlGroupMngSubdevice=rlGroupMngSubdevice, rndFileName=rndFileName, rlCpuUtilEnable=rlCpuUtilEnable, rlGroupMngDevicesTable=rlGroupMngDevicesTable, rlGroupMngDeviceAdvertisedCachingTime=rlGroupMngDeviceAdvertisedCachingTime, rlGroupMngGroupLLDPDeviceId=rlGroupMngGroupLLDPDeviceId, rlGroupMngDeviceVendor=rlGroupMngDeviceVendor, rlSnmpMibVersion=rlSnmpMibVersion, rlGroupMngGroupMngEnabled=rlGroupMngGroupMngEnabled, rlGroupMngDeviceId=rlGroupMngDeviceId, rlRebootDelay=rlRebootDelay, rlGroupMngDeviceIdType=rlGroupMngDeviceIdType)
