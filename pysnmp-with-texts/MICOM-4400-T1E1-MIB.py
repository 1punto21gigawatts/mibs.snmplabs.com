#
# PySNMP MIB module MICOM-4400-T1E1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-4400-T1E1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:12:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
mcmSysAsciiTimeOfDay, = mibBuilder.importSymbols("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, TimeTicks, Counter64, Bits, Gauge32, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, NotificationType, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "TimeTicks", "Counter64", "Bits", "Gauge32", "ModuleIdentity", "MibIdentifier", "NotificationType", "ObjectIdentity", "NotificationType", "iso", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
micom_2t1e1 = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 22)).setLabel("micom-2t1e1")
t1e1_r2_configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1)).setLabel("t1e1-r2-configuration")
t1e1_r2_control = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 2)).setLabel("t1e1-r2-control")
t1e1_r2_status = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3)).setLabel("t1e1-r2-status")
t1e1_r2_statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 4)).setLabel("t1e1-r2-statistics")
mcm4400t1e1LineCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 1), )
if mibBuilder.loadTexts: mcm4400t1e1LineCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineCfgTable.setDescription('NAME = ; DESC = The T1/E1 Line Configuration table. \\ (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcm4400t1e1LineCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 1, 1), ).setIndexNames((0, "MICOM-4400-T1E1-MIB", "mcm4400t1e1LineCfgLineID"))
if mibBuilder.loadTexts: mcm4400t1e1LineCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineCfgEntry.setDescription('NAME = ; DESC = An entry in the T1/E1 Line Configuration \\ table. (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineCfgLineID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("network", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineCfgLineID.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineCfgLineID.setDescription('NAME = ; DESC = The T1/E1 line identification specifies which line \\ is to be configured. Used as the index to the \\ T1/E1 Line Configuration table. (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineCfgProfileNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm4400t1e1LineCfgProfileNum.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineCfgProfileNum.setDescription('NAME = ; DESC = The value of this object indicates the profile \\ to be used to configure the specified T1/E1 \\ line. (Operational); HELP = 1: expected as default profile for local line. \\ 2: expected as default profile for network line.; CAPABILITIES = ;')
mcm4400t1e1ProfCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 2), )
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgTable.setDescription('NAME = ; DESC = The T1/E1 Profile Configuration table. \\ (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcm4400t1e1ProfCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 2, 1), ).setIndexNames((0, "MICOM-4400-T1E1-MIB", "mcm4400t1e1ProfCfgProfileNum"))
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgEntry.setDescription('NAME = ; DESC = An entry in the T1/E1 Profile Configuration \\ table. (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1ProfCfgProfileNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgProfileNum.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgProfileNum.setDescription('NAME = ; DESC = The value of this object indicates the profile \\ number. Used as an index to the T1/E1 \\ Profile Configuration table. (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1ProfCfgT1FrameFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("superFrame", 1), ("extendedSuperFrame", 2))).clone('superFrame')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgT1FrameFmt.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgT1FrameFmt.setDescription('NAME = ; DESC = The value of this object specifies the T1 \\ frame format used in the line. (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1ProfCfgT1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aMI", 1), ("b8ZS", 2))).clone('aMI')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgT1LineCode.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgT1LineCode.setDescription('NAME = ; DESC = The value of this object specifies the T1 \\ coding format used in the line. (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1ProfCfgE1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aMI", 1), ("hDB3", 2))).clone('aMI')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgE1LineCode.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgE1LineCode.setDescription('NAME = ; DESC = The value of this object specifies the E1 \\ coding format used in the line. (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1ProfCfgIdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgIdleCode.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgIdleCode.setDescription('NAME = ; DESC = The value of this object specifies the code \\ to be filled in the line when idle. (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1ProfCfgT1LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("lessThan110Feet", 1), ("lessThan220Feet", 2), ("lessThan330Feet", 3), ("lessThan440Feet", 4), ("externalLBO", 5), ("greaterThan665Feet", 6), ("lessThan550Feet", 7), ("lessThan660Feet", 8))).clone('lessThan110Feet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgT1LineBuildOut.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgT1LineBuildOut.setDescription('NAME = ; DESC = The value of this object specifies the cable \\ length attached to a local T1 line. (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1ProfCfgT1Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgT1Loopback.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgT1Loopback.setDescription('NAME = ; DESC = The value of this object specifies whether \\ to enable or disable the T1 line loopback \\ to be invoked. (Operational); HELP = 1: expected as default for a local T1 line profile. \\ 2: expected as default for a network T1 line profile.; CAPABILITIES = ;')
mcm4400t1e1ProfCfgE1CRC4 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgE1CRC4.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgE1CRC4.setDescription('NAME = ; DESC = The value of this object specifies whether \\ to enable or disable a T1 line CRC4. (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1ProfCfgE1TS16Conn = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("toCAS", 1), ("idle", 2), ("bypass", 3), ("toDataPort1", 4), ("toDataPort2", 5))).clone('toCAS')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgE1TS16Conn.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1ProfCfgE1TS16Conn.setDescription('NAME = ; DESC = The value of this object specifies where the \\ TS16 goes (for a T1 line). (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1DS0ChConnTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 3), )
if mibBuilder.loadTexts: mcm4400t1e1DS0ChConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DS0ChConnTable.setDescription('NAME = ; DESC = The T1/E1 DS0 Channel Connection \\ Configuration table.(Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcm4400t1e1DS0ChConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 3, 1), ).setIndexNames((0, "MICOM-4400-T1E1-MIB", "mcm4400t1e1DS0ChConnLineID"), (0, "MICOM-4400-T1E1-MIB", "mcm4400t1e1DS0ChConnDS0Index"))
if mibBuilder.loadTexts: mcm4400t1e1DS0ChConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DS0ChConnEntry.setDescription('NAME = ; DESC = An entry in the T1/E1 DS0 Channel \\ Connection Configuration table. (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1DS0ChConnLineID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("network", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1DS0ChConnLineID.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DS0ChConnLineID.setDescription('NAME = ; DESC = The T1/E1 line identification specifies which line \\ is to be configured. Used as an index to the \\ T1/E1 DS0 Channel Connection Configuration \\ table. (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1DS0ChConnDS0Index = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1DS0ChConnDS0Index.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DS0ChConnDS0Index.setDescription('NAME = ; DESC = The T1/E1 DS0 index specifies which time slot \\ is to be connected. Used as an index to the \\ T1/E1 DS0 Channel Connection Configuration \\ table. (Operational); HELP = For T1, 24 is the maximum. An error will be \\ returned for a T1 DS0 index greater than 24.; CAPABILITIES = ;')
mcm4400t1e1DS0ChConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))).clone(namedValues=NamedValues(("idle", 1), ("bypassVoice", 2), ("bypassData", 3), ("toWANPort1", 4), ("toWANPort2", 5), ("toDataPort1", 6), ("toDataPort2", 7), ("toDVMChannelB1", 8), ("toDVMChannelB2", 9), ("toDVMChannelB3", 10), ("toDVMChannelB4", 11), ("toDVMChannelB5", 12), ("toDVMChannelB6", 13), ("toDVMChannelC1", 14), ("toDVMChannelC2", 15), ("toDVMChannelC3", 16), ("toDVMChannelC4", 17), ("toDVMChannelC5", 18), ("toDVMChannelC6", 19), ("toDVMChannelC7", 20), ("toDVMChannelC8", 21), ("toDVMChannelC9", 22), ("toDVMChannelC10", 23), ("toDVMChannelC11", 24), ("toDVMChannelC12", 25), ("toDVMChannelD1", 26), ("toDVMChannelD2", 27), ("toDVMChannelD3", 28), ("toDVMChannelD4", 29), ("toDVMChannelD5", 30), ("toDVMChannelD6", 31), ("toDVMChannelD7", 32), ("toDVMChannelD8", 33), ("toDVMChannelD9", 34), ("toDVMChannelD10", 35), ("toDVMChannelD11", 36), ("toDVMChannelD12", 37)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm4400t1e1DS0ChConnState.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DS0ChConnState.setDescription('NAME = ; DESC = The value of this object specifies where the \\ T1/E1 line channel slot (DS0) is to be connected \\ to. (Operational); HELP = Note 1: if 2-37 is selected, the previous setting \\ must be idle, or an error will be returned. \\ Note 2: if idle is specified and the previous setting \\ was bypass (voice or data), the corresponding DS0 \\ in the other line will also be set to idle automatically. \\ Note 3: if bypass (voice or data) is specified, the \\ corresponding DS0 in the other line will also be \\ set to the same bypass mode automatically.; CAPABILITIES = ;')
mcm4400t1e1DPCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 4), )
if mibBuilder.loadTexts: mcm4400t1e1DPCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPCfgTable.setDescription('NAME = ; DESC = The T1/E1 Data Port Configuration table. \\ (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcm4400t1e1DPCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 4, 1), ).setIndexNames((0, "MICOM-4400-T1E1-MIB", "mcm4400t1e1DPCfgPortNum"))
if mibBuilder.loadTexts: mcm4400t1e1DPCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPCfgEntry.setDescription('NAME = ; DESC = An entry in the T1/E1 Data Port \\ Configuration table. (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1DPCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port1", 1), ("port2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1DPCfgPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPCfgPortNum.setDescription('NAME = ; DESC = The T1/E1 port number specifies which data port \\ is to be configured. Used as an index to the \\ T1/E1 Data Port Configuration table. (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1DPCfgDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate64kbps", 1), ("rate56kbps", 2))).clone('rate64kbps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm4400t1e1DPCfgDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPCfgDataRate.setDescription('NAME = ; DESC = The value of this object selects the baud rate \\ for the specified data port. (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1DPCfgClock = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internalClock", 1), ("tailCircuit", 2))).clone('internalClock')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm4400t1e1DPCfgClock.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPCfgClock.setDescription('NAME = ; DESC = The value of this object selects the clock \\ source for the specified data port. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1DPCfgDTRCntl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("forcedOn", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm4400t1e1DPCfgDTRCntl.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPCfgDTRCntl.setDescription('NAME = ; DESC = The value of this object selects the DTR \\ control for the specified data port. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1DPCfgRTSCntl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("forcedOn", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm4400t1e1DPCfgRTSCntl.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPCfgRTSCntl.setDescription('NAME = ; DESC = The value of this object selects the RTS \\ control for the specified data port. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcm4400t1e1SysCfgClockSource = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("networkLineExternal", 1), ("localLineExternal", 2), ("internal", 3))).clone('networkLineExternal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcm4400t1e1SysCfgClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1SysCfgClockSource.setDescription('NAME = ; DESC = The value of this object specifies where the \\ system clock comes from. (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvm4400t1e1LineCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 6), )
if mibBuilder.loadTexts: nvm4400t1e1LineCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1LineCfgTable.setDescription('NAME = ; DESC = The T1/E1 Line Configuration table. \\ (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvm4400t1e1LineCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 6, 1), ).setIndexNames((0, "MICOM-4400-T1E1-MIB", "nvm4400t1e1LineCfgLineID"))
if mibBuilder.loadTexts: nvm4400t1e1LineCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1LineCfgEntry.setDescription('NAME = ; DESC = An entry in the T1/E1 Line Configuration \\ table. (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1LineCfgLineID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("network", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1LineCfgLineID.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1LineCfgLineID.setDescription('NAME = ; DESC = The T1/E1 line identification specifies which line \\ is to be configured. Used as the index to the \\ T1/E1 Line Configuration table. (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1LineCfgProfileNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1LineCfgProfileNum.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1LineCfgProfileNum.setDescription('NAME = ; DESC = The value of this object indicates the profile \\ to be used to configure the specified T1/E1 \\ line. (Configuration); HELP = 1: expected as default profile for local line. \\ 2: expected as default profile for network line.; CAPABILITIES = ;')
nvm4400t1e1ProfCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 7), )
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgTable.setDescription('NAME = ; DESC = The T1/E1 Profile Configuration table. \\ (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvm4400t1e1ProfCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 7, 1), ).setIndexNames((0, "MICOM-4400-T1E1-MIB", "nvm4400t1e1ProfCfgProfileNum"))
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgEntry.setDescription('NAME = ; DESC = An entry in the T1/E1 Profile Configuration \\ table. (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1ProfCfgProfileNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgProfileNum.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgProfileNum.setDescription('NAME = ; DESC = The value of this object indicates the profile \\ number. Used as an index to the T1/E1 \\ Profile Configuration table. (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1ProfCfgT1FrameFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("superFrame", 1), ("extendedSuperFrame", 2))).clone('superFrame')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgT1FrameFmt.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgT1FrameFmt.setDescription('NAME = ; DESC = The value of this object specifies the T1 \\ frame format used in the line. (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1ProfCfgT1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aMI", 1), ("b8ZS", 2))).clone('aMI')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgT1LineCode.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgT1LineCode.setDescription('NAME = ; DESC = The value of this object specifies the T1 \\ coding format used in the line. (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1ProfCfgE1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aMI", 1), ("hDB3", 2))).clone('aMI')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgE1LineCode.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgE1LineCode.setDescription('NAME = ; DESC = The value of this object specifies the E1 \\ coding format used in the line. (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1ProfCfgIdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(127)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgIdleCode.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgIdleCode.setDescription('NAME = ; DESC = The value of this object specifies the code \\ to be filled in the line when idle. (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1ProfCfgT1LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("lessThan110Feet", 1), ("lessThan220Feet", 2), ("lessThan330Feet", 3), ("lessThan440Feet", 4), ("externalLBO", 5), ("greaterThan665Feet", 6), ("lessThan550Feet", 7), ("lessThan660Feet", 8))).clone('lessThan110Feet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgT1LineBuildOut.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgT1LineBuildOut.setDescription('NAME = ; DESC = The value of this object specifies the cable \\ length attached to a local T1 line. (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1ProfCfgT1Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgT1Loopback.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgT1Loopback.setDescription('NAME = ; DESC = The value of this object specifies whether \\ to enable or disable the T1 line loopback \\ to be invoked. (Configuration); HELP = 1: expected as default for a local T1 line profile. \\ 2: expected as default for a network T1 line profile.; CAPABILITIES = ;')
nvm4400t1e1ProfCfgE1CRC4 = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgE1CRC4.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgE1CRC4.setDescription('NAME = ; DESC = The value of this object specifies whether \\ to enable or disable a T1 line CRC4. (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1ProfCfgE1TS16Conn = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("toCAS", 1), ("idle", 2), ("bypass", 3), ("toDataPort1", 4), ("toDataPort2", 5))).clone('toCAS')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgE1TS16Conn.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1ProfCfgE1TS16Conn.setDescription('NAME = ; DESC = The value of this object specifies where the \\ TS16 goes (for a T1 line). (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1DS0ChConnTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 8), )
if mibBuilder.loadTexts: nvm4400t1e1DS0ChConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1DS0ChConnTable.setDescription('NAME = ; DESC = The T1/E1 DS0 Channel Connection \\ Configuration table.(Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvm4400t1e1DS0ChConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 8, 1), ).setIndexNames((0, "MICOM-4400-T1E1-MIB", "nvm4400t1e1DS0ChConnLineID"), (0, "MICOM-4400-T1E1-MIB", "nvm4400t1e1DS0ChConnDS0Index"))
if mibBuilder.loadTexts: nvm4400t1e1DS0ChConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1DS0ChConnEntry.setDescription('NAME = ; DESC = An entry in the T1/E1 DS0 Channel \\ Connection Configuration table. (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1DS0ChConnLineID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("network", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1DS0ChConnLineID.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1DS0ChConnLineID.setDescription('NAME = ; DESC = The T1/E1 line identification specifies which line \\ is to be configured. Used as an index to the \\ T1/E1 DS0 Channel Connection Configuration \\ table. (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1DS0ChConnDS0Index = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1DS0ChConnDS0Index.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1DS0ChConnDS0Index.setDescription('NAME = ; DESC = The T1/E1 DS0 index specifies which time slot \\ is to be connected. Used as an index to the \\ T1/E1 DS0 Channel Connection Configuration \\ table. (Configuration); HELP = For T1, 24 is the maximum. An error will be \\ returned for a T1 DS0 index greater than 24.; CAPABILITIES = ;')
nvm4400t1e1DS0ChConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))).clone(namedValues=NamedValues(("idle", 1), ("bypassVoice", 2), ("bypassData", 3), ("toWANPort1", 4), ("toWANPort2", 5), ("toDataPort1", 6), ("toDataPort2", 7), ("toDVMChannelB1", 8), ("toDVMChannelB2", 9), ("toDVMChannelB3", 10), ("toDVMChannelB4", 11), ("toDVMChannelB5", 12), ("toDVMChannelB6", 13), ("toDVMChannelC1", 14), ("toDVMChannelC2", 15), ("toDVMChannelC3", 16), ("toDVMChannelC4", 17), ("toDVMChannelC5", 18), ("toDVMChannelC6", 19), ("toDVMChannelC7", 20), ("toDVMChannelC8", 21), ("toDVMChannelC9", 22), ("toDVMChannelC10", 23), ("toDVMChannelC11", 24), ("toDVMChannelC12", 25), ("toDVMChannelD1", 26), ("toDVMChannelD2", 27), ("toDVMChannelD3", 28), ("toDVMChannelD4", 29), ("toDVMChannelD5", 30), ("toDVMChannelD6", 31), ("toDVMChannelD7", 32), ("toDVMChannelD8", 33), ("toDVMChannelD9", 34), ("toDVMChannelD10", 35), ("toDVMChannelD11", 36), ("toDVMChannelD12", 37)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1DS0ChConnState.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1DS0ChConnState.setDescription('NAME = ; DESC = The value of this object specifies where the \\ T1/E1 line channel slot (DS0) is to be connected \\ to. (Configuration); HELP = Note 1: if 2-37 is selected, the previous setting \\ must be idle, or an error will be returned. \\ Note 2: if idle is specified and the previous setting \\ was bypass (voice or data), the corresponding DS0 \\ in the other line will also be set to idle automatically. \\ Note 3: if bypass (voice or data) is specified, the \\ corresponding DS0 in the other line will also be \\ set to the same bypass mode automatically.; CAPABILITIES = ;')
nvm4400t1e1DPCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 9), )
if mibBuilder.loadTexts: nvm4400t1e1DPCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1DPCfgTable.setDescription('NAME = ; DESC = The T1/E1 Data Port Configuration table. \\ (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvm4400t1e1DPCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 9, 1), ).setIndexNames((0, "MICOM-4400-T1E1-MIB", "nvm4400t1e1DPCfgPortNum"))
if mibBuilder.loadTexts: nvm4400t1e1DPCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1DPCfgEntry.setDescription('NAME = ; DESC = An entry in the T1/E1 Data Port \\ Configuration table. (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1DPCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port1", 1), ("port2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1DPCfgPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1DPCfgPortNum.setDescription('NAME = ; DESC = The T1/E1 port number specifies which data port \\ is to be configured. Used as an index to the \\ T1/E1 Data Port Configuration table. (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1DPCfgDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate64kbps", 1), ("rate56kbps", 2))).clone('rate64kbps')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1DPCfgDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1DPCfgDataRate.setDescription('NAME = ; DESC = The value of this object selects the baud rate \\ for the specified data port. (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1DPCfgClock = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internalClock", 1), ("tailCircuit", 2))).clone('internalClock')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1DPCfgClock.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1DPCfgClock.setDescription('NAME = ; DESC = The value of this object selects the clock \\ source for the specified data port. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1DPCfgDTRCntl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("forcedOn", 2))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1DPCfgDTRCntl.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1DPCfgDTRCntl.setDescription('NAME = ; DESC = The value of this object selects the DTR \\ control for the specified data port. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1DPCfgRTSCntl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("forcedOn", 2))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1DPCfgRTSCntl.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1DPCfgRTSCntl.setDescription('NAME = ; DESC = The value of this object selects the RTS \\ control for the specified data port. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvm4400t1e1SysCfgClockSource = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("networkLineExternal", 1), ("localLineExternal", 2), ("internal", 3))).clone('networkLineExternal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvm4400t1e1SysCfgClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: nvm4400t1e1SysCfgClockSource.setDescription('NAME = ; DESC = The value of this object specifies where the \\ system clock comes from. (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcm4400t1e1LineStatusTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 1), )
if mibBuilder.loadTexts: mcm4400t1e1LineStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatusTable.setDescription('NAME = ; DESC = The T1/E1 Line Status Display table. \\ HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcm4400t1e1LineStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 1, 1), ).setIndexNames((0, "MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400t1e1LineStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatusEntry.setDescription('NAME = ; DESC = An entry in the T1/E1 Line Status Display \\ table.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineStatusLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("localLine", 1), ("networkLine", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatusLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatusLineIndex.setDescription('NAME = ; DESC = The T1/E1 line index specifies which line is to \\ be displayed. Used as an index to the \\ T1/E1 Line Status Display table.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineStatusInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatusInterface.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatusInterface.setDescription('NAME = ; DESC = The value of this object indicates the interface \\ type as either T1 or E1 for the \\ T1/E1 Line Status Display table.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineStatusImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("line120ohm", 1), ("line75ohm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatusImpedance.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatusImpedance.setDescription('NAME = ; DESC = The value of this object indicates the impedance \\ for the specified line.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineStatusTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inLineLoopback", 2), ("inChannelLoopback", 3), ("inChannelPatternTest", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatusTestMode.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatusTestMode.setDescription('NAME = ; DESC = The value of this object indicates if the specified \\ line is in a loopback test mode.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineStatusTestingDS0Ch = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatusTestingDS0Ch.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatusTestingDS0Ch.setDescription('NAME = ; DESC = The value of this object indicates which DS0 \\ channel is in channel loopback or channel pattern \\ test mode now.; HELP = 0: none.\\ 1-30: DS0 channel number.; CAPABILITIES = ;')
mcm4400t1e1LineStatusAISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatusAISAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatusAISAlarm.setDescription('NAME = ; DESC = The value of this object indicates if the AIS \\ (Alarm Indication Signal) alarm is preset for \\ the specified line.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineStatusRedAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatusRedAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatusRedAlarm.setDescription('NAME = ; DESC = The value of this object indicates if the Red \\ alarm is preset for the specified line.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineStatusYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatusYellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatusYellowAlarm.setDescription('NAME = ; DESC = The value of this object indicates if the Yellow \\ alarm is preset for the specified line. (Not \\ applicable in E1.) ; HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineStatusTS16AIS = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatusTS16AIS.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatusTS16AIS.setDescription('NAME = ; DESC = The value of this object indicates if the TS16 \\ (Time Slot 16) AIS alarm is preset for the \\ specified line. (Not applicable in T1.) ; HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineStatusOOSMFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatusOOSMFAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatusOOSMFAlarm.setDescription('NAME = ; DESC = The value of this object indicates if the \\ OOSMF (Out Of Signal Multi-Frame) alarm \\ is preset for the specified line. (Not \\ applicable in T1.) ; HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineStatusMFASAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatusMFASAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatusMFASAlarm.setDescription('NAME = ; DESC = The value of this object indicates if the \\ MFAS (Multi-Frame Alignment Signal - \\ Y bit) alarm is preset for the specified line. \\ (Not applicable in T1.) ; HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineStatusFASAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatusFASAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatusFASAlarm.setDescription('NAME = ; DESC = The value of this object indicates if the \\ FAS (Frame Alignment Signal - A bit) \\ alarm is preset for the specified line. \\ (Not applicable in T1.) ; HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineStatusOOCMFAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatusOOCMFAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatusOOCMFAlarm.setDescription('NAME = ; DESC = The value of this object indicates if the \\ OOCMF (Out Of CRC Multi-Frame) \\ alarm is preset for the specified line. \\ (Not applicable in T1.) ; HELP = ; CAPABILITIES = ;')
mcm4400t1e1SysStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 2))
mcm4400t1e1SysStatusCardType = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("t1SingleLineAccessModule", 1), ("t1DualLineAccessModule", 2), ("e1SingleLineAccessModule", 3), ("e1DualLineAccessModule", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1SysStatusCardType.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1SysStatusCardType.setDescription('NAME = ; DESC = The value of this object indicates the T1/E1 \\ card type.; HELP = 1: TAM1 - network line only. \\ 2: TAM2 - both local and network lines. \\ 3: EAM1 - network line only. \\ 4: EAM2 - both local and network lines.; CAPABILITIES = NET_CFG, VPN_CFG ;')
mcm4400t1e1SysStatusOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dead", 1), ("aliveButNotReady", 2), ("downloadFail", 3), ("downloadInProgress", 4), ("normal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1SysStatusOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1SysStatusOperStatus.setDescription('NAME = ; DESC = The value of this object indicates the operation \\ status of the T1/E1 control unit.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG ;')
mcm4400t1e1SysStatusLEDTest = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1SysStatusLEDTest.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1SysStatusLEDTest.setDescription('NAME = ; DESC = The value of this object specifies if the \\ LED test is in progress.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG ;')
mcm4400t1e1SysStatusSelfTestResults = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("testPassed", 1), ("testFailed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1SysStatusSelfTestResults.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1SysStatusSelfTestResults.setDescription('NAME = ; DESC = The value of this object specifies the \\ results of the T1/E1 self test.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG ;')
mcm4400t1e1SysStatusFlashEPROMSt = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("erased", 2), ("invalidChecksum", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1SysStatusFlashEPROMSt.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1SysStatusFlashEPROMSt.setDescription('NAME = ; DESC = The value of this object specifies the current \\ state of the flash EPROM in the T1/E1 \\ access board.; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG ;')
mcm4400t1e1SysStatusApplSwID = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1SysStatusApplSwID.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1SysStatusApplSwID.setDescription('NAME = ; DESC = The value of this object indicates the T1/E1 \\ application software ID (Null terminated string).; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG ;')
mcm4400t1e1SysStatusBootSwVer = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1SysStatusBootSwVer.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1SysStatusBootSwVer.setDescription('NAME = ; DESC = The value of this object indicates the T1/E1 \\ software version (Null terminated string).; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG ;')
mcm4400t1e1DPStatusTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 3), )
if mibBuilder.loadTexts: mcm4400t1e1DPStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPStatusTable.setDescription('NAME = ; DESC = The T1/E1 Data Port Status Display table. \\ HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcm4400t1e1DPStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 3, 1), ).setIndexNames((0, "MICOM-4400-T1E1-MIB", "mcm4400t1e1DPStatusPortNumber"))
if mibBuilder.loadTexts: mcm4400t1e1DPStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPStatusEntry.setDescription('NAME = ; DESC = An entry in the T1/E1 Data Port Status \\ Display table.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1DPStatusPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port1", 1), ("port2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1DPStatusPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPStatusPortNumber.setDescription('NAME = ; DESC = The value of this object specifies the data port \\ number. Used as the index to the T1/E1 \\ Data Port Status Display table.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1DPStatusDTRInputSt = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1DPStatusDTRInputSt.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPStatusDTRInputSt.setDescription('NAME = ; DESC = The value of this object indicates the current \\ DTR state for the specified data port.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1DPStatusRTSInputSt = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1DPStatusRTSInputSt.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPStatusRTSInputSt.setDescription('NAME = ; DESC = The value of this object indicates the current \\ RTS state for the specified data port.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1DPStatusDSROutputSt = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1DPStatusDSROutputSt.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPStatusDSROutputSt.setDescription('NAME = ; DESC = The value of this object indicates the current \\ DSR state for the specified data port.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1DPStatusDCDOutputSt = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1DPStatusDCDOutputSt.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPStatusDCDOutputSt.setDescription('NAME = ; DESC = The value of this object indicates the current \\ DCD state for the specified data port.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1DPStatusCTSOutputSt = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1DPStatusCTSOutputSt.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPStatusCTSOutputSt.setDescription('NAME = ; DESC = The value of this object indicates the current \\ CTS state for the specified data port.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1DS0ChSigTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 4), )
if mibBuilder.loadTexts: mcm4400t1e1DS0ChSigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DS0ChSigTable.setDescription('NAME = ; DESC = The T1/E1 DS0 Channel Signaling Display \\ table. \\ HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcm4400t1e1DS0ChSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 4, 1), ).setIndexNames((0, "MICOM-4400-T1E1-MIB", "mcm4400t1e1DS0ChSigLineID"), (0, "MICOM-4400-T1E1-MIB", "mcm4400t1e1DS0ChSigDS0Index"))
if mibBuilder.loadTexts: mcm4400t1e1DS0ChSigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DS0ChSigEntry.setDescription('NAME = ; DESC = An entry in the T1/E1 DS0 Channel \\ Signaling Display table.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1DS0ChSigLineID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("network", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1DS0ChSigLineID.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DS0ChSigLineID.setDescription('NAME = ; DESC = The T1/E1 line ID specifies which line is to \\ be displayed. Used as an index to the \\ T1/E1 DS0 Channel Signaling Display table.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1DS0ChSigDS0Index = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1DS0ChSigDS0Index.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DS0ChSigDS0Index.setDescription('NAME = ; DESC = The DS0 Index specifies which time slot is \\ to be displayed. Used as an index to the \\ T1/E1 DS0 Channel Signaling Display table.; HELP = For T1, 24 is the maximum. An error will be \\ returned if a value greater than 24 is selected.; CAPABILITIES = ;')
mcm4400t1e1DS0ChSigInABCDBits = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1DS0ChSigInABCDBits.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DS0ChSigInABCDBits.setDescription('NAME = ; DESC = The value of this object indicates the input \\ ABCD bit pattern.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1DS0ChSigOutABCDBits = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1DS0ChSigOutABCDBits.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DS0ChSigOutABCDBits.setDescription('NAME = ; DESC = The value of this object indicates the output \\ ABCD bit pattern.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1ChTestResultsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 5))
mcm4400t1e1ChTestResultsLineID = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("network", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1ChTestResultsLineID.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1ChTestResultsLineID.setDescription('NAME = ; DESC = The line ID specifies which T1/E1 line has \\ a DS0channel in test mode.; HELP = 3 is returned if no DS0 channel is in test mode.; CAPABILITIES = NET_CFG, VPN_CFG ;')
mcm4400t1e1ChTestResultsDS0Ch = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1ChTestResultsDS0Ch.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1ChTestResultsDS0Ch.setDescription('NAME = ; DESC = The value of this object specifies which DS0 \\ channel is in test mode.; HELP = For T1, 24 is the maximum. Also, 0 will be \\ returned if no DS0 channels are in test mode.; CAPABILITIES = NET_CFG, VPN_CFG ;')
mcm4400t1e1ChTestResultsErrorCnt = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 3, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1ChTestResultsErrorCnt.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1ChTestResultsErrorCnt.setDescription('NAME = ; DESC = The value of this object indicates the number \\ of errors accumulated since the test had been \\ started.; HELP = An error can be detected only when in channel \\ pattern test mode. Channel loopback will always \\ be 0.; CAPABILITIES = NET_CFG, VPN_CFG ;')
mcm4400t1e1LineStatsTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 4, 1), )
if mibBuilder.loadTexts: mcm4400t1e1LineStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatsTable.setDescription('NAME = ; DESC = The T1/E1 Line Statistics Display table. \\ HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcm4400t1e1LineStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 4, 1, 1), ).setIndexNames((0, "MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatsLineIndex"))
if mibBuilder.loadTexts: mcm4400t1e1LineStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatsEntry.setDescription('NAME = ; DESC = An entry in the T1/E1 Line Statistics \\ Display table.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineStatsLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("localLine", 1), ("networkLine", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatsLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatsLineIndex.setDescription('NAME = ; DESC = The T1/E1 line index specifies which line is to \\ be displayed. Used as an index to the \\ T1/E1 Line Statistics Display table.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineStatsInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatsInterface.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatsInterface.setDescription('NAME = ; DESC = The value of this object indicates the interface \\ type as either T1 or E1 for the \\ T1/E1 Line Statistics Display table.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineStatsFramingBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatsFramingBitError.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatsFramingBitError.setDescription('NAME = ; DESC = The value of this object indicates the framing \\ bit errors on the specified line.; HELP = Valid for E1 only. For T1, 0 will be returned.; CAPABILITIES = ;')
mcm4400t1e1LineStatsLineCdViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatsLineCdViolation.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatsLineCdViolation.setDescription('NAME = ; DESC = The value of this object indicates the line \\ code violations on the specified line.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineStatsFarEndBlkError = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatsFarEndBlkError.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatsFarEndBlkError.setDescription('NAME = ; DESC = The value of this object indicates the far \\ end block errors on the specified line.; HELP = Valid for E1 only. For T1, 0 will be returned.; CAPABILITIES = ;')
mcm4400t1e1LineStatsCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatsCRCError.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatsCRCError.setDescription('NAME = ; DESC = The value of this object indicates the CRC \\ errors on the specified line.; HELP = Valid for E1 only. For T1, 0 will be returned.; CAPABILITIES = ;')
mcm4400t1e1LineStatsBufferOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatsBufferOverrun.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatsBufferOverrun.setDescription('NAME = ; DESC = The value of this object indicates the \\ buffer overruns on the specified line.; HELP = Valid for E1 only. For T1, 0 will be returned.; CAPABILITIES = ;')
mcm4400t1e1LineStatsBufferUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatsBufferUnderrun.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatsBufferUnderrun.setDescription('NAME = ; DESC = The value of this object indicates the \\ buffer underruns on the specified line.; HELP = Valid for E1 only. For T1, 0 will be returned.; CAPABILITIES = ;')
mcm4400t1e1LineStatsFrmSyncBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatsFrmSyncBitError.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatsFrmSyncBitError.setDescription('NAME = ; DESC = The value of this object indicates the frame \\ synchronization bit errors on the specified line.; HELP = Valid for T1 only. For E1, 0 will be returned.; CAPABILITIES = ;')
mcm4400t1e1LineStatsOutOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatsOutOfFrame.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatsOutOfFrame.setDescription('NAME = ; DESC = The value of this object indicates the out of \\ frame statistics on the specified line.; HELP = Valid for T1 only. For E1, 0 will be returned.; CAPABILITIES = ;')
mcm4400t1e1LineStatsTotalFrameSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineStatsTotalFrameSlip.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineStatsTotalFrameSlip.setDescription('NAME = ; DESC = The value of this object indicates the total \\ frame slips on the specified line.; HELP = Valid for T1 only. For E1, 0 will be returned.; CAPABILITIES = ;')
mcm4400t1e1DS0ChTestCmdTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 2, 1), )
if mibBuilder.loadTexts: mcm4400t1e1DS0ChTestCmdTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DS0ChTestCmdTable.setDescription('NAME = ; DESC = The T1/E1 DS0 Channel Test Command \\ table. \\ HELP = ; CAPABILITIES = NET_OPER, VPN_OPER ;')
mcm4400t1e1DS0ChTestCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 2, 1, 1), ).setIndexNames((0, "MICOM-4400-T1E1-MIB", "mcm4400t1e1DS0ChTestCmdLineID"), (0, "MICOM-4400-T1E1-MIB", "mcm4400t1e1DS0ChTestCmdDS0Index"))
if mibBuilder.loadTexts: mcm4400t1e1DS0ChTestCmdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DS0ChTestCmdEntry.setDescription('NAME = ; DESC = An entry in the T1/E1 DS0 Channel \\ Test Command table.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1DS0ChTestCmdLineID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("network", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1DS0ChTestCmdLineID.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DS0ChTestCmdLineID.setDescription('NAME = ; DESC = The T1/E1 line ID specifies which line is to \\ be tested. Used as an index to the \\ T1/E1 DS0 Channel Test Command table.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1DS0ChTestCmdDS0Index = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1DS0ChTestCmdDS0Index.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DS0ChTestCmdDS0Index.setDescription('NAME = ; DESC = The DS0 Index specifies which time slot is \\ to be tested. Used as an index to the \\ T1/E1 DS0 Channel Test Command table.; HELP = For T1, 24 is the maximum. An error will be \\ returned if a value greater than 24 is selected.; CAPABILITIES = ;')
mcm4400t1e1DS0ChTestCmdTstPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("qrss", 1), ("tp511", 2), ("loop", 3), ("fixed-E1Only", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcm4400t1e1DS0ChTestCmdTstPattern.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DS0ChTestCmdTstPattern.setDescription('NAME = ; DESC = Setting this object will initiate various \\ test pattern testing on the specified T1/E1 \\ DS0 channel.; HELP = For QRSS, TP511, and Fixed, the T1/E1 \\ access module will generate and verify the \\ selected test pattern. \\ For Loop test, it simply loops the input \\ data back to the same DS0 channel. \\ In T1, if 4 is specified, an error will be \\ returned.; CAPABILITIES = ;')
mcm4400t1e1LineTestCmdTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 2, 2), )
if mibBuilder.loadTexts: mcm4400t1e1LineTestCmdTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineTestCmdTable.setDescription('NAME = ; DESC = The T1/E1 Line Test Command \\ table. \\ HELP = ; CAPABILITIES = NET_OPER, VPN_OPER ;')
mcm4400t1e1LineTestCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 2, 2, 1), ).setIndexNames((0, "MICOM-4400-T1E1-MIB", "mcm4400t1e1LineTestCmdLineID"))
if mibBuilder.loadTexts: mcm4400t1e1LineTestCmdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineTestCmdEntry.setDescription('NAME = ; DESC = An entry in the T1/E1 Line Test \\ Command table.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineTestCmdLineID = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("network", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1LineTestCmdLineID.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineTestCmdLineID.setDescription('NAME = ; DESC = The T1/E1 line ID specifies which line is to \\ be tested. Used as the index to the \\ T1/E1 Line Test Command table.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1LineTestCmdTstPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("externalLineLoopback", 1), ("externalDigitalLoopback", 2), ("internalLineLoopback", 3), ("internalDigitalLoopback", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcm4400t1e1LineTestCmdTstPattern.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1LineTestCmdTstPattern.setDescription('NAME = ; DESC = Setting this object will initiate various \\ tests on the specified T1/E1 line.; HELP = Line Loopback: receiver or transmitter is \\ connected to transmitter or receiver; respectively. \\ Digital Loopback: data is stripped off the \\ DS0 channel and reinserted in the same channel. \\ External: data coming from the line. \\ Internal: data going to the line.; CAPABILITIES = ;')
mcm4400t1e1DPTestCmdTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 2, 3), )
if mibBuilder.loadTexts: mcm4400t1e1DPTestCmdTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPTestCmdTable.setDescription('NAME = ; DESC = The T1/E1 Data Port Test Command \\ table. \\ HELP = ; CAPABILITIES = NET_OPER, VPN_OPER ;')
mcm4400t1e1DPTestCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 2, 3, 1), ).setIndexNames((0, "MICOM-4400-T1E1-MIB", "mcm4400t1e1DPTestCmdPortNum"))
if mibBuilder.loadTexts: mcm4400t1e1DPTestCmdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPTestCmdEntry.setDescription('NAME = ; DESC = An entry in the T1/E1 Data Port \\ Test Command table.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1DPTestCmdPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dataPort1", 1), ("dataPort2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcm4400t1e1DPTestCmdPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPTestCmdPortNum.setDescription('NAME = ; DESC = The T1/E1 Port Number specifies which data \\ port is to be tested. Used as the index to the \\ T1/E1 Data Port Test Command table.; HELP = ; CAPABILITIES = ;')
mcm4400t1e1DPTestCmdTstPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalLoopback", 1), ("internalLoopback", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcm4400t1e1DPTestCmdTstPattern.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1DPTestCmdTstPattern.setDescription('NAME = ; DESC = Setting this object will initiate various \\ tests on the specified T1/E1 data port.; HELP = External: loop back data coming from the \\ device attached to the port. \\ Internal: loop back data coming from the \\ DS0 channel.; CAPABILITIES = ;')
mcm4400t1e1SysControlActionCmd = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 22, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("testLED", 1), ("resetT1E1", 2), ("clearCounter", 3), ("download", 4), ("stopChannelTest", 5), ("stopLineTest", 6), ("stopPortTest", 7), ("stopLEDTest", 8), ("stopAllTests", 9)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcm4400t1e1SysControlActionCmd.setStatus('mandatory')
if mibBuilder.loadTexts: mcm4400t1e1SysControlActionCmd.setDescription('NAME = ; DESC = Setting this object will perform various \\ actions on the T1/E1 system. \\ Note: Starting with software release 3.0, \\ the enumeration clearCounter (3) is \\ not supported. The enumeration is included \\ here only to support backwards compatibility \\ for software versions prior to release 3.0.; HELP = 1: initiate LED test. \\ 2: reset T1/E1 module. \\ 3: clear statistics counters. \\ 4: download code. \\ 5: stop DS0 channel test. \\ 6: stop line test. \\ 7: stop port test. \\ 8: stop LED test. \\ 9: stop all tests.; CAPABILITIES = NET_OPER, VPN_OPER ;')
mcm4400T1NoCodeImage = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,1)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcm4400T1NoCodeImage.setDescription("NAME = ; DESC = Indicates that the built image doesn't \\ contain T1 code.\\ Severity Level: MAJOR.; HELP = The Image loaded does not contain T1 code.\\ Load a new Image that includes T1 code, or \\ consult with the System Admin. or Field \\ Personnel.;")
mcm4400T1DownloadFail = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,2)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcm4400T1DownloadFail.setDescription('NAME = ; DESC = Indicates a failure occurred during the T1 \\ code download.\\ Severity Level: MAJOR; HELP = Retry the download. Re-boot the access device and \\ check if it downloads correctly. Also, verify \\ the T1 code that is build with access device image \\ is the right version. If problem persist, consult \\ your system admin., or field personnel.;')
mcm4400T1OutOfOrder = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,3)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcm4400T1OutOfOrder.setDescription('NAME = ; DESC = Indicates the T1 is not responding.\\ Severity Level: CRITICAL.; HELP = Management frame is out of order. Check for \\ Framing error. If it does not recover, Please \\ contact your Sys Admin. or Field personnel.;')
mcm4400T1OutOfOrderRecovered = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,4)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcm4400T1OutOfOrderRecovered.setDescription('NAME = ; DESC = Indicates recovery from the T1 out of order condition.\\ Severity Level: INFORMATIVE.; HELP = T1 is responding. Normal Status Indicator.;')
mcm4400T1FailToSyncUp = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,5)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcm4400T1FailToSyncUp.setDescription('NAME = ; DESC = Indicates the T1 is unable to sync up.\\ Severity Level : CRITICAL.; HELP = Check the physical connection locally, and \\ to the remote device. Possible protocol error. \\ If problem still persist, contact your \\ system admin., or field personnel.;')
mcm4400T1FailToSyncUpRecovered = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,6)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcm4400T1FailToSyncUpRecovered.setDescription('NAME = ; DESC = Indicates recovery from the T1 failure \\ to sync up condition.\\ Severity Level: INFORMATIVE.; HELP = T1 has recovered. Normal Status Indicator.;')
mcm4400T1AISAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,7)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400T1AISAlarmSet.setDescription('NAME = ; DESC = Indicates a T1 AIS Alarm condition is present.\\ Severity Level: CRITICAL.; HELP = Check physical link of the local T1, and the Remote \\ PBX. Possible Framing error. If problem is not \\ resolved, contact sys admin., or field personnel.;')
mcm4400T1AISAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,8)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400T1AISAlarmClear.setDescription('NAME = ; DESC = Indicates a T1 AIS Alarm condition has cleared.\\ Severity Level: INFORMATIVE.; HELP = T1 AIS Alarm is cleared. Normal Status Indicator.;')
mcm4400T1RedAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,9)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400T1RedAlarmSet.setDescription('NAME = ; DESC = Indicates a T1 Red Alarm condition is present.\\ Severity Level: CRITICAL.; HELP = Check the Physical Connection to remote. \\ If the Alarm condition is still persistant, \\ contact your Field Personnel.;')
mcm4400T1RedAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,10)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400T1RedAlarmClear.setDescription('NAME = ; DESC = Indicates a T1 Red Alarm condition has cleared.\\ Severity Level: IMFORMATIVE. ; HELP = Red Alarm Cleared. Normal Status Indicator!.;')
mcm4400T1YellowAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,11)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400T1YellowAlarmSet.setDescription('NAME = ; DESC = Indicates a T1 Yellow Alarm condition is present.\\ Severity Level: MINOR.; HELP = TX or RX side for physical connection may be faulty; \\ Possible Framing error with Remote device. Run Loopback \\ test if possible, & determine the problem. If that does not\\ help, please contact Field Personnel or System admin.;')
mcm4400T1YellowAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,12)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400T1YellowAlarmClear.setDescription('NAME = ; DESC = Indicates a T1 Yellow Alarm condition has cleared.\\ Severity Level: INFORMATIVE.; HELP = Yellow Alarm is cleared. Normal Status Indicator!.;')
mcm4400E1NoCodeImage = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,13)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcm4400E1NoCodeImage.setDescription("NAME = ; DESC = Indicates that the built image doesn't \\ contain E1 code.\\ Severity Level: MAJOR.; HELP = The Image loaded does not contain E1 code.\\ Load a new Image that includes E1 code, or \\ consult with the System Admin. or Field \\ Personnel.;")
mcm4400E1DownloadFail = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,14)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcm4400E1DownloadFail.setDescription('NAME = ; DESC = Indicates a failure occurred during the E1 \\ code download.\\ Severity Level: MAJOR. ; HELP = Retry the download. Re-boot the access device and \\ check if it downloads correctly. Also, verify \\ the E1 code that is built with access device \\ image is the right version. If problem persist, \\ consult your system admin., or field personnel.;')
mcm4400E1OutOfOrder = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,15)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcm4400E1OutOfOrder.setDescription('NAME = ; DESC = Indicates the E1 is not responding.\\ Severity Level: CRITICAL.; HELP = Management frame is out of order. Check for \\ Framing error. If it does not recover, Please \\ contact your Sys Admin. or Field personnel.;')
mcm4400E1OutOfOrderRecovered = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,16)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcm4400E1OutOfOrderRecovered.setDescription('NAME = ; DESC = Indicates recovery from the E1 out of order condition.\\ Severity Level: INFORMATIVE.; HELP = E1 is responding. Normal Status Indicator.;')
mcm4400E1FailToSyncUp = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,17)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcm4400E1FailToSyncUp.setDescription('NAME = ; DESC = Indicates the E1 is unable to sync up.\\ Severity Level: CRITICAL.; HELP = Check the physical connection locally, and \\ to the remote device. Possible protocol error. \\ If problem still persist, contact your \\ system admin., or field personnel.;')
mcm4400E1FailToSyncUpRecovered = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,18)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"))
if mibBuilder.loadTexts: mcm4400E1FailToSyncUpRecovered.setDescription('NAME = ; DESC = Indicates recovery from the E1 failure \\ to sync up condition.\\ Severity Level: INFORMATIVE.; HELP = E1 has recovered. Normal Status Indicator.;')
mcm4400E1AISAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,19)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400E1AISAlarmSet.setDescription('NAME = ; DESC = Indicates an E1 AIS Alarm condition is present.\\ Severity Level: MAJOR.; HELP = Check physical link of the local E1, and the Remote \\ PBX. Possible Framing error. If problem is not \\ resolved, contact sys admin., or field personnel.;')
mcm4400E1AISAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,20)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400E1AISAlarmClear.setDescription('NAME = ; DESC = Indicates an E1 AIS Alarm condition has cleared.\\ Severity Level: INFORMATIVE. ; HELP = E1 AIS Alarm is cleared. Normal Status Indicator.;')
mcm4400E1RedAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,21)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400E1RedAlarmSet.setDescription('NAME = ; DESC = Indicates an E1 Red Alarm condition is present.\\ Severity Level: MAJOR.; HELP = Check the Physical Connection to remote. \\ Run a loopback test and determine the problem. \\ If the Alarm condition is still persistant, \\ contact your Field Personnel.;')
mcm4400E1RedAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,22)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400E1RedAlarmClear.setDescription('NAME = ; DESC = Indicates an E1 Red Alarm condition has cleared.\\ Severity Level: INFORMATIVE.; HELP = Red Alarm Cleared. Normal Status Indicator!.;')
mcm4400E1TS16AISAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,23)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400E1TS16AISAlarmSet.setDescription('NAME = ; DESC = Indicates an E1 TS16 AIS Alarm is present.\\ Severity Level: MAJOR.; HELP = TX or RX side for physical connection may be faulty; \\ Possible Framing error with Remote device. Run Loopback \\ test if possible, & determine the problem. If that does not\\ help, please contact Field Personnel or System admin.;')
mcm4400E1TS16AISAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,24)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400E1TS16AISAlarmClear.setDescription('NAME = ; DESC = Indicates an E1 TS16 AIS Alarm has cleared.\\ Severity Level: INFORMATIVE.; HELP = Alarm is cleared. Normal Status Indicator!.;')
mcm4400E1OOSMFAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,25)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400E1OOSMFAlarmSet.setDescription('NAME = ; DESC = Indicates an E1 00SMF Alarm is present.\\ Severity Level: MAJOR.; HELP = Framing error due to signal loss. Run Loopback \\ test and determine the problem. For further help \\ contact your Field Personnel.;')
mcm4400E1OOSMFAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,26)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400E1OOSMFAlarmClear.setDescription('NAME = ; DESC = Indicates an E1 00SMF Alarm has cleared.\\ Severity Level: INFORMATIVE.; HELP = OOSMF Alarm is cleared. Normal Status Indicator!.;')
mcm4400E1RemoteYBitAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,27)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400E1RemoteYBitAlarmSet.setDescription('NAME = ; DESC = Indicates an E1 Remote Y Bit Alarm is present.\\ Severity Level: MAJOR.; HELP = Run Loopback test, and determine the condition. \\ For further help, contact Field Personnel.;')
mcm4400E1RemoteYBitAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,28)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400E1RemoteYBitAlarmClear.setDescription('NAME = ; DESC = Indicates an E1 Remote Y Bit Alarm has cleared.\\ Severity Level: INFORMATIVE.; HELP = Remote YBit Alarm is cleared. Normal Status \\ Indicator.;')
mcm4400E1RemoteABitAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,29)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400E1RemoteABitAlarmSet.setDescription('NAME = ; DESC = Indicates an E1 Remote A Bit Alarm is present.\\ Severity Level: MAJOR.; HELP = Possible frame Error. Please run loopback test \\ and determine the condition. If Alarm \\ is not cleared, contact your Field Personnel.;')
mcm4400E1RemoteABitAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,30)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400E1RemoteABitAlarmClear.setDescription('NAME = ; DESC = Indicates an E1 Remote Y Bit Alarm has cleared.\\ Severity Level: INFORMATIVE.; HELP = Alarm is cleared. Normal Status Indicator!.;')
mcm4400E1OOCMFAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,31)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400E1OOCMFAlarmSet.setDescription('NAME = ; DESC = Indicates an E1 00CMF Alarm is present.\\ Severity Level: MAJOR.; HELP = CRC multframe alignment is lost. Run loobback \\ test and determine the problem. For further \\ help, contact Field Personnel. ;')
mcm4400E1OOCMFAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 22) + (0,32)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-4400-T1E1-MIB", "mcm4400t1e1LineStatusLineIndex"))
if mibBuilder.loadTexts: mcm4400E1OOCMFAlarmClear.setDescription('NAME = ; DESC = Indicates an E1 00CMF Alarm has cleared.\\ Severity Level: INFORMATIVE.; HELP = OOCMF Alarm is cleared. Normal Status Indicator.;')
mibBuilder.exportSymbols("MICOM-4400-T1E1-MIB", mcm4400t1e1ProfCfgT1LineBuildOut=mcm4400t1e1ProfCfgT1LineBuildOut, mcm4400t1e1LineTestCmdEntry=mcm4400t1e1LineTestCmdEntry, nvm4400t1e1DS0ChConnEntry=nvm4400t1e1DS0ChConnEntry, mcm4400t1e1DS0ChSigTable=mcm4400t1e1DS0ChSigTable, mcm4400t1e1ProfCfgE1CRC4=mcm4400t1e1ProfCfgE1CRC4, mcm4400t1e1LineTestCmdLineID=mcm4400t1e1LineTestCmdLineID, mcm4400t1e1LineCfgProfileNum=mcm4400t1e1LineCfgProfileNum, mcm4400t1e1SysControlActionCmd=mcm4400t1e1SysControlActionCmd, mcm4400t1e1LineStatsTable=mcm4400t1e1LineStatsTable, nvm4400t1e1DPCfgTable=nvm4400t1e1DPCfgTable, mcm4400E1TS16AISAlarmClear=mcm4400E1TS16AISAlarmClear, nvm4400t1e1ProfCfgT1Loopback=nvm4400t1e1ProfCfgT1Loopback, mcm4400t1e1SysStatusLEDTest=mcm4400t1e1SysStatusLEDTest, mcm4400E1RedAlarmSet=mcm4400E1RedAlarmSet, mcm4400T1RedAlarmClear=mcm4400T1RedAlarmClear, mcm4400t1e1DS0ChConnDS0Index=mcm4400t1e1DS0ChConnDS0Index, mcm4400t1e1DS0ChSigDS0Index=mcm4400t1e1DS0ChSigDS0Index, mcm4400E1FailToSyncUp=mcm4400E1FailToSyncUp, nvm4400t1e1ProfCfgT1LineCode=nvm4400t1e1ProfCfgT1LineCode, mcm4400t1e1LineStatsFrmSyncBitError=mcm4400t1e1LineStatsFrmSyncBitError, mcm4400t1e1DS0ChSigOutABCDBits=mcm4400t1e1DS0ChSigOutABCDBits, t1e1_r2_status=t1e1_r2_status, mcm4400t1e1ProfCfgEntry=mcm4400t1e1ProfCfgEntry, nvm4400t1e1DPCfgEntry=nvm4400t1e1DPCfgEntry, mcm4400t1e1DS0ChTestCmdLineID=mcm4400t1e1DS0ChTestCmdLineID, mcm4400T1RedAlarmSet=mcm4400T1RedAlarmSet, mcm4400t1e1LineStatsBufferUnderrun=mcm4400t1e1LineStatsBufferUnderrun, mcm4400E1AISAlarmClear=mcm4400E1AISAlarmClear, nvm4400t1e1DPCfgRTSCntl=nvm4400t1e1DPCfgRTSCntl, mcm4400t1e1DPCfgClock=mcm4400t1e1DPCfgClock, mcm4400t1e1ProfCfgT1LineCode=mcm4400t1e1ProfCfgT1LineCode, nvm4400t1e1ProfCfgT1FrameFmt=nvm4400t1e1ProfCfgT1FrameFmt, mcm4400t1e1DPStatusDCDOutputSt=mcm4400t1e1DPStatusDCDOutputSt, mcm4400E1OutOfOrderRecovered=mcm4400E1OutOfOrderRecovered, mcm4400E1RedAlarmClear=mcm4400E1RedAlarmClear, mcm4400t1e1LineStatusImpedance=mcm4400t1e1LineStatusImpedance, mcm4400T1FailToSyncUpRecovered=mcm4400T1FailToSyncUpRecovered, mcm4400t1e1LineStatusOOCMFAlarm=mcm4400t1e1LineStatusOOCMFAlarm, mcm4400t1e1LineCfgEntry=mcm4400t1e1LineCfgEntry, mcm4400t1e1LineStatsEntry=mcm4400t1e1LineStatsEntry, mcm4400t1e1DPStatusPortNumber=mcm4400t1e1DPStatusPortNumber, mcm4400t1e1LineCfgTable=mcm4400t1e1LineCfgTable, mcm4400T1YellowAlarmSet=mcm4400T1YellowAlarmSet, mcm4400E1OOSMFAlarmSet=mcm4400E1OOSMFAlarmSet, mcm4400t1e1ChTestResultsGroup=mcm4400t1e1ChTestResultsGroup, mcm4400t1e1SysStatusSelfTestResults=mcm4400t1e1SysStatusSelfTestResults, nvm4400t1e1ProfCfgIdleCode=nvm4400t1e1ProfCfgIdleCode, mcm4400E1RemoteYBitAlarmSet=mcm4400E1RemoteYBitAlarmSet, mcm4400T1NoCodeImage=mcm4400T1NoCodeImage, nvm4400t1e1ProfCfgTable=nvm4400t1e1ProfCfgTable, mcm4400t1e1ProfCfgE1TS16Conn=mcm4400t1e1ProfCfgE1TS16Conn, mcm4400t1e1DPCfgEntry=mcm4400t1e1DPCfgEntry, mcm4400t1e1DPStatusRTSInputSt=mcm4400t1e1DPStatusRTSInputSt, mcm4400t1e1DPStatusCTSOutputSt=mcm4400t1e1DPStatusCTSOutputSt, mcm4400t1e1DPCfgDataRate=mcm4400t1e1DPCfgDataRate, mcm4400t1e1DS0ChSigInABCDBits=mcm4400t1e1DS0ChSigInABCDBits, mcm4400t1e1ProfCfgT1FrameFmt=mcm4400t1e1ProfCfgT1FrameFmt, mcm4400T1AISAlarmSet=mcm4400T1AISAlarmSet, mcm4400t1e1DPTestCmdPortNum=mcm4400t1e1DPTestCmdPortNum, t1e1_r2_configuration=t1e1_r2_configuration, mcm4400t1e1ProfCfgTable=mcm4400t1e1ProfCfgTable, mcm4400t1e1DS0ChTestCmdTable=mcm4400t1e1DS0ChTestCmdTable, mcm4400E1OOSMFAlarmClear=mcm4400E1OOSMFAlarmClear, mcm4400T1FailToSyncUp=mcm4400T1FailToSyncUp, nvm4400t1e1DS0ChConnDS0Index=nvm4400t1e1DS0ChConnDS0Index, nvm4400t1e1DPCfgDTRCntl=nvm4400t1e1DPCfgDTRCntl, mcm4400t1e1LineStatsTotalFrameSlip=mcm4400t1e1LineStatsTotalFrameSlip, mcm4400t1e1DPStatusDTRInputSt=mcm4400t1e1DPStatusDTRInputSt, mcm4400t1e1DPStatusDSROutputSt=mcm4400t1e1DPStatusDSROutputSt, mcm4400t1e1LineStatsOutOfFrame=mcm4400t1e1LineStatsOutOfFrame, mcm4400t1e1ChTestResultsDS0Ch=mcm4400t1e1ChTestResultsDS0Ch, mcm4400t1e1LineTestCmdTstPattern=mcm4400t1e1LineTestCmdTstPattern, mcm4400E1OutOfOrder=mcm4400E1OutOfOrder, mcm4400t1e1DPCfgRTSCntl=mcm4400t1e1DPCfgRTSCntl, mcm4400t1e1DPTestCmdTstPattern=mcm4400t1e1DPTestCmdTstPattern, nvm4400t1e1ProfCfgE1CRC4=nvm4400t1e1ProfCfgE1CRC4, mcm4400t1e1LineStatsCRCError=mcm4400t1e1LineStatsCRCError, mcm4400T1OutOfOrder=mcm4400T1OutOfOrder, mcm4400t1e1LineStatusFASAlarm=mcm4400t1e1LineStatusFASAlarm, mcm4400t1e1DS0ChTestCmdDS0Index=mcm4400t1e1DS0ChTestCmdDS0Index, mcm4400t1e1LineStatusAISAlarm=mcm4400t1e1LineStatusAISAlarm, t1e1_r2_statistics=t1e1_r2_statistics, mcm4400t1e1SysStatusCardType=mcm4400t1e1SysStatusCardType, mcm4400t1e1LineTestCmdTable=mcm4400t1e1LineTestCmdTable, nvm4400t1e1DS0ChConnTable=nvm4400t1e1DS0ChConnTable, mcm4400E1RemoteYBitAlarmClear=mcm4400E1RemoteYBitAlarmClear, nvm4400t1e1ProfCfgE1TS16Conn=nvm4400t1e1ProfCfgE1TS16Conn, mcm4400t1e1DPStatusTable=mcm4400t1e1DPStatusTable, nvm4400t1e1DS0ChConnLineID=nvm4400t1e1DS0ChConnLineID, mcm4400t1e1LineStatsFramingBitError=mcm4400t1e1LineStatsFramingBitError, mcm4400t1e1DS0ChSigEntry=mcm4400t1e1DS0ChSigEntry, nvm4400t1e1SysCfgClockSource=nvm4400t1e1SysCfgClockSource, nvm4400t1e1LineCfgProfileNum=nvm4400t1e1LineCfgProfileNum, mcm4400t1e1LineStatsBufferOverrun=mcm4400t1e1LineStatsBufferOverrun, mcm4400E1NoCodeImage=mcm4400E1NoCodeImage, mcm4400E1RemoteABitAlarmClear=mcm4400E1RemoteABitAlarmClear, nvm4400t1e1DPCfgDataRate=nvm4400t1e1DPCfgDataRate, mcm4400t1e1LineStatusTS16AIS=mcm4400t1e1LineStatusTS16AIS, mcm4400E1AISAlarmSet=mcm4400E1AISAlarmSet, mcm4400t1e1LineStatusTable=mcm4400t1e1LineStatusTable, nvm4400t1e1ProfCfgEntry=nvm4400t1e1ProfCfgEntry, nvm4400t1e1LineCfgEntry=nvm4400t1e1LineCfgEntry, mcm4400t1e1DPTestCmdEntry=mcm4400t1e1DPTestCmdEntry, mcm4400t1e1DPStatusEntry=mcm4400t1e1DPStatusEntry, mcm4400T1YellowAlarmClear=mcm4400T1YellowAlarmClear, nvm4400t1e1ProfCfgT1LineBuildOut=nvm4400t1e1ProfCfgT1LineBuildOut, mcm4400t1e1SysStatusFlashEPROMSt=mcm4400t1e1SysStatusFlashEPROMSt, mcm4400t1e1LineStatsLineCdViolation=mcm4400t1e1LineStatsLineCdViolation, mcm4400t1e1SysStatusBootSwVer=mcm4400t1e1SysStatusBootSwVer, mcm4400t1e1DPTestCmdTable=mcm4400t1e1DPTestCmdTable, mcm4400t1e1LineStatusMFASAlarm=mcm4400t1e1LineStatusMFASAlarm, nvm4400t1e1ProfCfgE1LineCode=nvm4400t1e1ProfCfgE1LineCode, mcm4400t1e1ProfCfgIdleCode=mcm4400t1e1ProfCfgIdleCode, mcm4400t1e1ChTestResultsErrorCnt=mcm4400t1e1ChTestResultsErrorCnt, mcm4400T1AISAlarmClear=mcm4400T1AISAlarmClear, mcm4400t1e1ChTestResultsLineID=mcm4400t1e1ChTestResultsLineID, nvm4400t1e1DPCfgPortNum=nvm4400t1e1DPCfgPortNum, mcm4400E1OOCMFAlarmSet=mcm4400E1OOCMFAlarmSet, nvm4400t1e1LineCfgLineID=nvm4400t1e1LineCfgLineID, mcm4400T1DownloadFail=mcm4400T1DownloadFail, mcm4400t1e1DS0ChConnState=mcm4400t1e1DS0ChConnState, mcm4400t1e1DS0ChSigLineID=mcm4400t1e1DS0ChSigLineID, t1e1_r2_control=t1e1_r2_control, mcm4400t1e1LineStatusLineIndex=mcm4400t1e1LineStatusLineIndex, mcm4400t1e1ProfCfgE1LineCode=mcm4400t1e1ProfCfgE1LineCode, mcm4400T1OutOfOrderRecovered=mcm4400T1OutOfOrderRecovered, mcm4400E1TS16AISAlarmSet=mcm4400E1TS16AISAlarmSet, nvm4400t1e1ProfCfgProfileNum=nvm4400t1e1ProfCfgProfileNum, mcm4400t1e1ProfCfgT1Loopback=mcm4400t1e1ProfCfgT1Loopback, mcm4400E1FailToSyncUpRecovered=mcm4400E1FailToSyncUpRecovered, nvm4400t1e1LineCfgTable=nvm4400t1e1LineCfgTable, mcm4400t1e1LineStatusEntry=mcm4400t1e1LineStatusEntry, mcm4400t1e1DS0ChConnTable=mcm4400t1e1DS0ChConnTable, mcm4400t1e1LineStatsFarEndBlkError=mcm4400t1e1LineStatsFarEndBlkError, mcm4400t1e1LineStatusTestMode=mcm4400t1e1LineStatusTestMode, mcm4400t1e1LineStatusOOSMFAlarm=mcm4400t1e1LineStatusOOSMFAlarm, mcm4400t1e1SysStatusApplSwID=mcm4400t1e1SysStatusApplSwID, mcm4400t1e1DPCfgTable=mcm4400t1e1DPCfgTable, mcm4400t1e1ProfCfgProfileNum=mcm4400t1e1ProfCfgProfileNum, nvm4400t1e1DS0ChConnState=nvm4400t1e1DS0ChConnState, mcm4400t1e1SysStatusGroup=mcm4400t1e1SysStatusGroup, mcm4400t1e1DPCfgPortNum=mcm4400t1e1DPCfgPortNum, mcm4400t1e1LineStatusInterface=mcm4400t1e1LineStatusInterface, nvm4400t1e1DPCfgClock=nvm4400t1e1DPCfgClock, mcm4400t1e1LineStatusRedAlarm=mcm4400t1e1LineStatusRedAlarm, mcm4400t1e1DS0ChTestCmdEntry=mcm4400t1e1DS0ChTestCmdEntry, mcm4400E1OOCMFAlarmClear=mcm4400E1OOCMFAlarmClear, mcm4400t1e1SysCfgClockSource=mcm4400t1e1SysCfgClockSource, mcm4400t1e1DS0ChTestCmdTstPattern=mcm4400t1e1DS0ChTestCmdTstPattern, mcm4400t1e1DS0ChConnLineID=mcm4400t1e1DS0ChConnLineID, mcm4400t1e1LineStatusTestingDS0Ch=mcm4400t1e1LineStatusTestingDS0Ch, mcm4400t1e1SysStatusOperStatus=mcm4400t1e1SysStatusOperStatus, mcm4400t1e1LineCfgLineID=mcm4400t1e1LineCfgLineID, mcm4400E1DownloadFail=mcm4400E1DownloadFail, mcm4400E1RemoteABitAlarmSet=mcm4400E1RemoteABitAlarmSet, micom_2t1e1=micom_2t1e1, mcm4400t1e1LineStatsInterface=mcm4400t1e1LineStatsInterface, mcm4400t1e1LineStatusYellowAlarm=mcm4400t1e1LineStatusYellowAlarm, mcm4400t1e1DS0ChConnEntry=mcm4400t1e1DS0ChConnEntry, mcm4400t1e1LineStatsLineIndex=mcm4400t1e1LineStatsLineIndex, mcm4400t1e1DPCfgDTRCntl=mcm4400t1e1DPCfgDTRCntl)
