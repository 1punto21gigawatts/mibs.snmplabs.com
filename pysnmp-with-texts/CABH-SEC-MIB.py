#
# PySNMP MIB module CABH-SEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CABH-SEC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:44:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
clabProjCableHome, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjCableHome")
X509Certificate, = mibBuilder.importSymbols("DOCS-BPI2-MIB", "X509Certificate")
docsDevFilterIpEntry, = mibBuilder.importSymbols("DOCS-CABLE-DEVICE-MIB", "docsDevFilterIpEntry")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress")
ZeroBasedCounter32, = mibBuilder.importSymbols("RMON2-MIB", "ZeroBasedCounter32")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, TimeTicks, Counter64, Integer32, MibIdentifier, Bits, IpAddress, NotificationType, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, ObjectIdentity, zeroDotZero = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "Counter64", "Integer32", "MibIdentifier", "Bits", "IpAddress", "NotificationType", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "ObjectIdentity", "zeroDotZero")
TimeStamp, TextualConvention, DisplayString, TruthValue, VariablePointer, DateAndTime, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "DisplayString", "TruthValue", "VariablePointer", "DateAndTime", "RowStatus")
cabhSecMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2))
if mibBuilder.loadTexts: cabhSecMib.setLastUpdated('200408060000Z')
if mibBuilder.loadTexts: cabhSecMib.setOrganization('CableLabs Broadband Access Department')
if mibBuilder.loadTexts: cabhSecMib.setContactInfo('Kevin Luehrs Postal: Cable Television Laboratories, Inc. 858 Coal Creek Circle Louisville, Colorado 80027 U.S.A. Phone: +1 303-661-9100 Fax: +1 303-661-9199 E-mail: k.luehrs@cablelabs.com; mibs@cablelabs.com')
if mibBuilder.loadTexts: cabhSecMib.setDescription('This MIB module supplies the basic management objects for the Security Portal Services.')
cabhSecMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5))
cabhSecFwObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 1))
cabhSecFwBase = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 1, 1))
cabhSecFwLogCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 1, 2))
cabhSecCertObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 2))
cabhSecKerbObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 3))
cabhSecKerbBase = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 3, 1))
cabhSec2FwObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4))
cabhSec2FwBase = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 1))
cabhSec2FwEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 2))
cabhSec2FwLog = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3))
cabhSec2FwFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4))
cabhSecFwPolicyFileEnable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSecFwPolicyFileEnable.setStatus('deprecated')
if mibBuilder.loadTexts: cabhSecFwPolicyFileEnable.setDescription('This parameter indicates whether or not to enable the firewall functionality.')
cabhSecFwPolicyFileURL = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSecFwPolicyFileURL.setReference('CableHome 1.0 Specification, CH-SP-CH1.0-I05-030801, 11.3.5.2 Firewall Rule Set Management Parameters.')
if mibBuilder.loadTexts: cabhSecFwPolicyFileURL.setStatus('deprecated')
if mibBuilder.loadTexts: cabhSecFwPolicyFileURL.setDescription('A policy rule set file download is triggered when the value used to SET this object is different than the value in the cabhSecFwPolicySuccessfulFileURL object.')
cabhSecFwPolicyFileHash = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(20, 20), )).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSecFwPolicyFileHash.setStatus('deprecated')
if mibBuilder.loadTexts: cabhSecFwPolicyFileHash.setDescription('Hash of the contents of the rules set file, calculated and sent to the PS prior to sending the rules set file. For the SHA-1 authentication algorithm the length of the hash is 160 bits. This hash value is encoded in binary format.')
cabhSecFwPolicyFileOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("inProgress", 1), ("complete", 2), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSecFwPolicyFileOperStatus.setStatus('deprecated')
if mibBuilder.loadTexts: cabhSecFwPolicyFileOperStatus.setDescription('inProgress(1) indicates a firewall configuration file download is underway. complete (2) indicates the firewall configuration file downloaded and configured successfully. completeFromMgt(3) This state is deprecated. failed(4) indicates the last attempted firewall configuration file download or processing failed ordinarily due to TFTP timeout.')
cabhSecFwPolicyFileCurrentVersion = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSecFwPolicyFileCurrentVersion.setStatus('deprecated')
if mibBuilder.loadTexts: cabhSecFwPolicyFileCurrentVersion.setDescription('The rule set version currently operating in the PS device. This object should be in the syntax used by the individual vendor to identify software versions. Any PS element MUST return a string descriptive of the current rule set file load. If this is not applicable, this object MUST contain an empty string.')
cabhSecFwPolicySuccessfulFileURL = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSecFwPolicySuccessfulFileURL.setReference('CableHome 1.0 Specification, CH-SP-CH1.0-I05-030801, 11.3.5.2 Firewall Rule Set Management Parameters.')
if mibBuilder.loadTexts: cabhSecFwPolicySuccessfulFileURL.setStatus('deprecated')
if mibBuilder.loadTexts: cabhSecFwPolicySuccessfulFileURL.setDescription('Contains the location of the last successful downloaded policy rule set file in the format pointed in the reference. If a successful download has never occurred, this MIB object MUST report empty string.')
cabhSecFwEventType1Enable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSecFwEventType1Enable.setStatus('deprecated')
if mibBuilder.loadTexts: cabhSecFwEventType1Enable.setDescription('This object enables or disables logging of type 1 firewall event messages. Type 1 event messages report attempts from both private and public clients to traverse the firewall that violate the Security Policy.')
cabhSecFwEventType2Enable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSecFwEventType2Enable.setStatus('deprecated')
if mibBuilder.loadTexts: cabhSecFwEventType2Enable.setDescription('This object enables or disables logging of type 2 firewall event messages. Type 2 event messages report identified Denial of Service attack attempts.')
cabhSecFwEventType3Enable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSecFwEventType3Enable.setStatus('deprecated')
if mibBuilder.loadTexts: cabhSecFwEventType3Enable.setDescription('Enables or disables logging of type 3 firewall event messages. Type 3 event messages report changes made to the following firewall management parameters: cabhSecFwPolicyFileURL, cabhSecFwPolicyFileCurrentVersion, cabhSecFwPolicyFileEnable')
cabhSecFwEventAttackAlertThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSecFwEventAttackAlertThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: cabhSecFwEventAttackAlertThreshold.setDescription('If the number of type 1 or 2 hacker attacks exceeds this threshold in the period define by cabhSecFwEventAttackAlertPeriod, a firewall message event MUST be logged with priority level 4.')
cabhSecFwEventAttackAlertPeriod = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSecFwEventAttackAlertPeriod.setStatus('deprecated')
if mibBuilder.loadTexts: cabhSecFwEventAttackAlertPeriod.setDescription('Indicates the period to be used (in hours) for the cabhSecFwEventAttackAlertThreshold. This MIB variable should always keep track of the last x hours of events meaning that if the variable is set to track events for 10 hours then when the 11th hour is reached, the 1st hour of events is deleted from the tracking log. A default value is set to zero, meaning zero time, so that this MIB variable will not track any events unless configured.')
cabhSecCertPsCert = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 2, 1), X509Certificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSecCertPsCert.setStatus('current')
if mibBuilder.loadTexts: cabhSecCertPsCert.setDescription('The X509 DER-encoded PS certificate.')
cabhSec2FwEnable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSec2FwEnable.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwEnable.setDescription('This parameter indicates whether to enable or disable the firewall.')
cabhSec2FwPolicyFileURL = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSec2FwPolicyFileURL.setReference('CableHome 1.1 Specification, CH-SP-CH1.1-I05-040806, 11.6.4.8.1 Firewall Rule Set Management MIB Objects.')
if mibBuilder.loadTexts: cabhSec2FwPolicyFileURL.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwPolicyFileURL.setDescription('A policy rule set file download is triggered when the value used to SET this object is different than the value in the cabhSec2FwPolicySuccessfulFileURL object.')
cabhSec2FwPolicyFileHash = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(20, 20), )).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSec2FwPolicyFileHash.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwPolicyFileHash.setDescription('Hash of the contents of the firewall configuration file. For the SHA-1 authentication algorithm the length of the hash is 160 bits. This hash value is encoded in binary format.')
cabhSec2FwPolicyFileOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inProgress", 1), ("complete", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwPolicyFileOperStatus.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwPolicyFileOperStatus.setDescription('InProgress(1) indicates a firewall configuration file download is underway. Complete(2) indicates the firewall configuration file was downloaded and processed successfully. Failed(3) indicates that the last attempted firewall configuration file download or processing failed.')
cabhSec2FwPolicyFileCurrentVersion = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSec2FwPolicyFileCurrentVersion.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwPolicyFileCurrentVersion.setDescription('A label set by the cable operator that can be used to track various versions of configured rulesets. Once the label is set and configured rules are changed, it may not accurately reflect the version of configured rules running on the box. If this object has never been configured, it MUST contain an empty string.')
cabhSec2FwClearPreviousRuleset = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSec2FwClearPreviousRuleset.setReference('CableHome specification Security section')
if mibBuilder.loadTexts: cabhSec2FwClearPreviousRuleset.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwClearPreviousRuleset.setDescription("If set to 'true', the PS MUST clear all entries in the docsDevFilterIpTable. Reading this value always returns false.")
cabhSec2FwPolicySelection = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("factoryDefault", 1), ("configuredRulesetBoth", 2), ("factoryDefaultAndConfiguredRulesetBoth", 3), ("configuredRulesetDocsDevFilterIpTable", 4), ("configuredRulesetCabhSec2FwLocalFilterIpTable", 5), ("factoryDefaultAndDocsDevFilterIpTable", 6), ("factoryDefaultAndCabhSec2FwLocalFilterIpTable", 7))).clone('factoryDefault')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSec2FwPolicySelection.setReference('CableHome specification Security section.')
if mibBuilder.loadTexts: cabhSec2FwPolicySelection.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwPolicySelection.setDescription('This object allows for selection of the filtering policy as defined by the following options: factoryDefault (1) The firewall filters against the Factory Default Ruleset in the cabhSec2FwFactoryDefaultFilterTable. configuredRulesetBoth (2) The firewall filters against the Configured Ruleset defined by both the docsDevFilterIpTable and the cabhSec2FwLocalFilterIpTable. factoryDefaultAndConfiguredRulesetBoth (3) The firewall filters against the CableHome specified Factory Default Ruleset in the cabhSec2FwFactoryDefaultFilterTable and the Configured Ruleset in the docsDevFilterIpTable and the cabhSec2FwLocalFilterIpTable. configuredRulesetDocsDevFilterIpTable(4) The firewall filters against the Configured Ruleset defined by the docsDevFilterIpTable. configuredRulesetCabhSec2FwLocalFilterIpTable (5) The firewall filters against the Configured Ruleset defined by the cabhSec2FwLocalFilterIpTable. factoryDefaultAndDocsDevFilterIpTable (6) The firewall filters against the Factory Default Ruleset and the Configured Ruleset defined by the DocsDevFilterIpTable. factoryDefaultAndCabhSec2FwLocalFilterIpTable (7) The firewall filters against the Factory Default Ruleset and the Configured Ruleset defined by the cabhSec2FwLocalFilterIpTable.')
cabhSec2FwEventSetToFactory = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSec2FwEventSetToFactory.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwEventSetToFactory.setDescription("If set to 'true', entries in cabhSec2FwEventControlEntry are set to their default values. Reading this value always returns false.")
cabhSec2FwEventLastSetToFactory = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwEventLastSetToFactory.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwEventLastSetToFactory.setDescription('The value of sysUpTime when cabhSec2FwEventSetToFactory was Last set to true. Zero if never reset.')
cabhSec2FwPolicySuccessfulFileURL = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwPolicySuccessfulFileURL.setReference('CableHome 1.1 Specification, CH-SP-CH1.1-I05-040806, 11.6.4.8.1 Firewall Rule Set Management MIB Objects.')
if mibBuilder.loadTexts: cabhSec2FwPolicySuccessfulFileURL.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwPolicySuccessfulFileURL.setDescription('Contains the location of the last successful downloaded policy rule set file in the format pointed in the reference. If a successful download has not yet occurred, this MIB object should report empty string.')
cabhSec2FwConfiguredRulesetPriority = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("docsDevFilterIpTable", 1), ("cabhSec2FwLocalFilterIpTable", 2))).clone('cabhSec2FwLocalFilterIpTable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSec2FwConfiguredRulesetPriority.setReference('CableHome specification Security section.')
if mibBuilder.loadTexts: cabhSec2FwConfiguredRulesetPriority.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwConfiguredRulesetPriority.setDescription('This object defines which Configured Ruleset filter rule has priority when a conflict exists between a filter rule in the docsDevFilterIpTable and a filter rule in the cabhSec2FwLocalFilterIpTable as indicated by the following options: docsDevFilterIpTable (1) indicates that filter rules in the docsDevFilterIpTable have priority over any conflicting filters that may exist in the cabhSec2FwLocalFilterIpTable. cabhSec2FwLocalFilterIpTable (2) indicates that filter rules in the cabhSec2FwLocalFilterIpTable have priority over any conflicting filters that may exist in the docsDevFilterIpTable.')
cabhSec2FwClearLocalRuleset = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSec2FwClearLocalRuleset.setReference('CableHome specification Security section')
if mibBuilder.loadTexts: cabhSec2FwClearLocalRuleset.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwClearLocalRuleset.setDescription("If set to 'true', the PS MUST clear all entries in the cabhSec2FwLocalFilterIpTable. Reading this value always returns false.")
cabhSec2FwEventControlTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 2, 1), )
if mibBuilder.loadTexts: cabhSec2FwEventControlTable.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwEventControlTable.setDescription('This table controls the reporting of the Firewall Attacks events')
cabhSec2FwEventControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 2, 1, 1), ).setIndexNames((0, "CABH-SEC-MIB", "cabhSec2FwEventType"))
if mibBuilder.loadTexts: cabhSec2FwEventControlEntry.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwEventControlEntry.setDescription('Allows configuration of the reporting mechanisms for a particular type of attack.')
cabhSec2FwEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2), ("type3", 3), ("type4", 4), ("type5", 5), ("type6", 6))))
if mibBuilder.loadTexts: cabhSec2FwEventType.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwEventType.setDescription('Classification of the different types of attacks. Type 1 logs all attempts from both LAN and WAN clients to traverse the Firewall that violate the Security Policy. Type 2 logs identified Denial of Service attack attempts. Type 3 logs all changes made to the cabhSec2FwPolicyFileURL, cabhSec2FwPolicyFileCurrentVersion or cabhSec2FwPolicyFileEnable objects. Type 4 logs all failed attempts to modify cabhSec2FwPolicyFileURL and cabhSec2FwPolicyFileEnable objects. Type 5 logs allowed inbound packets from the WAN. Type 6 logs allowed outbound packets from the LAN.')
cabhSec2FwEventEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSec2FwEventEnable.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwEventEnable.setDescription('Enables or disables counting and logging of firewall events by type as assigned by cabhSec2FwEventType.')
cabhSec2FwEventThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSec2FwEventThreshold.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwEventThreshold.setDescription('Number of attacks to count before sending the appropriate event by type as assigned by cabhSec2FwEventType.')
cabhSec2FwEventInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 744))).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSec2FwEventInterval.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwEventInterval.setDescription('Indicates the time interval in hours to count and log occurrences of a firewall event type as assigned in cabhSec2FwEventType. If this MIB has a value of zero then there is no interval assigned and the PS will not count or log events.')
cabhSec2FwEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 2, 1, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwEventCount.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwEventCount.setDescription('Indicates the current count up to the cabhSec2FwEventThreshold value by type as assigned by cabhSec2FwEventType.')
cabhSec2FwEventLogReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 2, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSec2FwEventLogReset.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwEventLogReset.setDescription('Setting this object to true clears the log table for the specified event type. Reading this object always returns false.')
cabhSec2FwEventLogLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 2, 1, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwEventLogLastReset.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwEventLogLastReset.setDescription('The value of sysUpTime when cabhSec2FwEventLogReset was last set to true. Zero if never reset.')
cabhSec2FwLogTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3, 1), )
if mibBuilder.loadTexts: cabhSec2FwLogTable.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLogTable.setDescription('Contains a log of packet information as related to events enabled by the cable operator. The types are defined in the CableHome 1.1 specification and require various objects to be included in the log. The following is a description for what is expected in the log for each type Type 1, Type 2, Type 5 and Type 6 table MUST include cabhSec2FwEventType, cabhSec2FwEventPriority, cabhSec2FwEventId, cabhSec2FwLogTime, cabhSec2FwIpProtocol, cabhSec2FwIpSourceAddr, cabhSec2FwIpDestAddr, cabhSec2FwIpSourcePort, cabhSec2FwIpDestPort, cabhSec2Fw, cabhSec2FwReplayCount. The other values not used by Types 1, 2, 5 and 6 are default values. Type 3 and Type 4 MUST include cabhSec2FwEventType, cabhSec2FwEventPriority, cabhSec2FwEventId, cabhSec2FwLogTime, cabhSec2FwIpSourceAddr, cabhSec2FwLogMIBPointer. The other values not used by type 3 and 4 are default values. When applicable, Type 1, Type 5,and Type 6 MUST also include cabhSec2FwLogMatchingFilterTableName, cabhSec2FwLogMatchingFilterTableIndex, cabhSec2FwLogMatchingFilterDescr.')
cabhSec2FwLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3, 1, 1), ).setIndexNames((0, "CABH-SEC-MIB", "cabhSec2FwLogIndex"))
if mibBuilder.loadTexts: cabhSec2FwLogEntry.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLogEntry.setDescription('Each entry contains the log of firewall events')
cabhSec2FwLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cabhSec2FwLogIndex.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLogIndex.setDescription('A sequence number for the specific events under a cabhSec2FwEventType.')
cabhSec2FwLogEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2), ("type3", 3), ("type4", 4), ("type5", 5), ("type6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwLogEventType.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLogEventType.setDescription('Classification of the different types of attacks. Type 1 logs all attempts from both LAN and WAN clients to traverse the Firewall that violate the Security Policy. Type 2 logs identified Denial of Service attack attempts. Type 3 logs all changes made to the cabhSec2FwPolicyFileURL, cabhSec2FwPolicyFileCurrentVersion or cabhSec2FwPolicyFileEnable objects. Type 4 logs all failed attempts to modify cabhSec2FwPolicyFileURL and cabhSec2FwPolicyFileEnable objects. Type 5 logs allowed inbound packets from the WAN. Type 6 logs allowed outbound packets from the LAN.')
cabhSec2FwLogEventPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("information", 7), ("debug", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwLogEventPriority.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLogEventPriority.setDescription('The priority level of this event as defined by CableHome Specification. If a priority is not assigned in the CableHome specification for a particular event then the vendor or cable operator may assign priorities. These are ordered from most serious (emergency)to least serious (debug).')
cabhSec2FwLogEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwLogEventId.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLogEventId.setDescription('The assigned event ID.')
cabhSec2FwLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwLogTime.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLogTime.setDescription('The time that this entry was created by the PS.')
cabhSec2FwLogIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwLogIpProtocol.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLogIpProtocol.setDescription('The IP Protocol.')
cabhSec2FwLogIpSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3, 1, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwLogIpSourceAddr.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLogIpSourceAddr.setDescription('The Source IP Address of the packet logged.')
cabhSec2FwLogIpDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwLogIpDestAddr.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLogIpDestAddr.setDescription('The Destination IP Address of the packet logged.')
cabhSec2FwLogIpSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3, 1, 1, 9), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwLogIpSourcePort.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLogIpSourcePort.setDescription('The Source IP Port of the packet logged.')
cabhSec2FwLogIpDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3, 1, 1, 10), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwLogIpDestPort.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLogIpDestPort.setDescription('The Source IP Port of the packet logged.')
cabhSec2FwLogMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwLogMessageType.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLogMessageType.setDescription('The ICMP defined types.')
cabhSec2FwLogReplayCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwLogReplayCount.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLogReplayCount.setDescription('The number of identical attack packets that were seen by the firewall based on cabhSec2FwLogIpProtocol, cabhSec2FwLogIpSourceAddr, cabhSec2FwLogIpDestAddr, cabhSec2FwLogIpSourcePort, cabhSec2FwLogIpDestPort and cabhSec2FwLogMessageType.')
cabhSec2FwLogMIBPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3, 1, 1, 13), VariablePointer().clone((0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwLogMIBPointer.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLogMIBPointer.setDescription('Identifies if the cabhSec2FwPolicyFileURL or the cabhSec2FwEnable MIB object changed or an attempt was made to change it.')
cabhSec2FwLogMatchingFilterTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cabhSec2FwFactoryDefaultFilterTable", 1), ("docsDevFilterIpTable", 2), ("cabhSec2FwLocalFilterIpTable", 3), ("none", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwLogMatchingFilterTableName.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLogMatchingFilterTableName.setDescription('When applicable, cabhSec2FwLogMatchingFilterTableName indicates the filter table name containing the last filter rule matched that caused the event to be generated.')
cabhSec2FwLogMatchingFilterTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwLogMatchingFilterTableIndex.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLogMatchingFilterTableIndex.setDescription('When applicable, cabhSec2FwLogMatchingFilterTableIndex indicates the filter table index if the last filter rule matched that caused the event to be generated. If the value is 0, the event was not caused by a filter rule match. ')
cabhSec2FwLogMatchingFilterDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 3, 1, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwLogMatchingFilterDescr.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLogMatchingFilterDescr.setDescription('When applicable, cabhSec2FwLogMatchingFilterDesc contains the description value found in the cabhSec2FwFilterScheduleDesc MIB object or the cabhSec2FwLocalFilterIpDesc MIB object of the last filter rule matched that caused the event to be generated.')
cabhSec2FwFilterScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 1), )
if mibBuilder.loadTexts: cabhSec2FwFilterScheduleTable.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFilterScheduleTable.setDescription('Extends the filtering matching parameters of docsDevFilterIpTable defined in RFC 2669 for CableHome Residential Gateways to include time day intervals and days of the week.')
cabhSec2FwFilterScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 1, 1), )
docsDevFilterIpEntry.registerAugmentions(("CABH-SEC-MIB", "cabhSec2FwFilterScheduleEntry"))
cabhSec2FwFilterScheduleEntry.setIndexNames(*docsDevFilterIpEntry.getIndexNames())
if mibBuilder.loadTexts: cabhSec2FwFilterScheduleEntry.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFilterScheduleEntry.setDescription('Extended values for entries of docsDevFilterIpTable. If the PS has not aqcuire ToD the entire docsDevFilterIpEntry rule set is ignored. Note: A filter time period may include two days (e.g from 10 PM to 4 AM). A filter time period that includes two days is identified by the absolute value of the cabhSec2FwFilterScheduleEndTime being less than the absolute value of the cabhSec2FwFilterScheduleStartTime. The cabhSec2FwFilterScheduleDOW setting and the cabhSec2FwFilterScheduleStartTime value indicate what day and time the filter becomes active. The cabhSec2FwFilterScheduleEndTime indicates when the filter becomes inactive on the second day. The maximum filter time period that includes two days is 24 hours. If cabhSec2FwFilterScheduleStartTime is less than or equal to the cabhSec2FwFilterScheduleEndTime the time period of the filter falls in the same day.')
cabhSec2FwFilterScheduleStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2359))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwFilterScheduleStartTime.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFilterScheduleStartTime.setDescription("The start time for matching the filter ruleset in the specified days indicated in cabhSec2FwFilterScheduleDOW. Time is represented in Military Time, e.g., 8:30 AM is represented as 830 and 11:45 PM as 2345. An attempt to set this object to an invalid military time value, e.g., 1182, returns 'wrongValue' error.")
cabhSec2FwFilterScheduleEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2359)).clone(2359)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwFilterScheduleEndTime.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFilterScheduleEndTime.setDescription("The end time for matching the filter rule for the days indicated in cabhSec2FwFilterScheduleDOW. The filter rule associated with this end time MUST not be disabled until the minute following the time indicated by this MIB object. If the time period is for two days, identified by cabhSec2FwFilterScheduleEndTime being less than cabhSec2FwFilterScheduleStartTime, then the cabhSec2FwFilterScheduleDOW settings do not apply to this MIB object. Time is represented in the same manner as in cabhSec2FwFilterScheduleStartTime. An attempt to set this object to an invalid military time value, e.g., 1182, returns 'wrongValue' error.")
cabhSec2FwFilterScheduleDOW = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 1, 1, 3), Bits().clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6))).clone(hexValue="fe")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwFilterScheduleDOW.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFilterScheduleDOW.setDescription("If the day of week bit associated with the PS given day is '1', this object criteria matches.")
cabhSec2FwFilterScheduleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwFilterScheduleDescr.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFilterScheduleDescr.setDescription('A filter rule description configured by the cable operator or subscriber.')
cabhSec2FwFactoryDefaultFilterTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 2), )
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterTable.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterTable.setDescription('Contains the firewall factory default ruleset as defined by the CableLabs CableHome 1.1 Specification.')
cabhSec2FwFactoryDefaultFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 2, 1), ).setIndexNames((0, "CABH-SEC-MIB", "cabhSec2FwFactoryDefaultFilterIndex"))
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterEntry.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterEntry.setDescription('Contains the firewall factory default ruleset.')
cabhSec2FwFactoryDefaultFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterIndex.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterIndex.setDescription('Index used to order the application of filters. The filter with the lowest index is always applied first.')
cabhSec2FwFactoryDefaultFilterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("allow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterControl.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterControl.setDescription('If set to deny(1), all packets matching this filter will be discarded. If set to allow(2), all packets matching this filter will be accepted. The cabhSec2FwFactoryDefaultFilterContinue object is Set to true, and therefore the PS MUST continue to scan the table for other matches to apply the match with the highest cabhSec2FwFactoryDefaultFilterIndex value.')
cabhSec2FwFactoryDefaultFilterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterIfIndex.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterIfIndex.setDescription('The index number assigned to this object MUST match to the IfIndex numbering assigned in the ifTable from the Interfaces Group MIB [RFC 2863], and as specified in CH 1.1 Spec, Table 6-16 Numbering Interfaces in the ifTable. If the value is zero, the filter applies to all interfaces. This object MUST be specified to create a row in this table.')
cabhSec2FwFactoryDefaultFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterDirection.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterDirection.setDescription('This value represents direction in relationship to the assigned cabhSec2FwFactoryDefaultFilterIfIndex in this particular rule, meaning that the PS MUST represent traffic direction as follows: inbound(1)traffic, outbound(2) traffic, or both(3)inbound and outbound traffic.')
cabhSec2FwFactoryDefaultFilterSaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 2, 1, 5), InetAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterSaddr.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterSaddr.setDescription("The source IP address, or portion thereof, that is to be matched for this filter. The source address is first masked (and'ed) against cabhSec2FwFactoryDefaultFilterSmask before being compared to this value. A value of 0 for this object and 0 for the mask matches all IP addresses.")
cabhSec2FwFactoryDefaultFilterSmask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 2, 1, 6), InetAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterSmask.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterSmask.setDescription("A bit mask that is to be applied to the source address prior to matching. This mask is not necessarily the same as a subnet mask, but 1's bits must be leftmost and contiguous.")
cabhSec2FwFactoryDefaultFilterDaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 2, 1, 7), InetAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterDaddr.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterDaddr.setDescription("The destination IP address, or portion thereof, that is to be matched for this filter. The destination address is first masked (and'ed) against cabhSec2FwFactoryDefaultFilterDmask before being compared to this value. A value of 0 for this object and 0 for the mask matches all IP addresses.")
cabhSec2FwFactoryDefaultFilterDmask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 2, 1, 8), InetAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterDmask.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterDmask.setDescription("A bit mask that is to be applied to the destination address prior to matching. This mask is not necessarily the same as a subnet mask, but 1's bits must be leftmost and contiguous.")
cabhSec2FwFactoryDefaultFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterProtocol.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterProtocol.setDescription('The protocol value that is to be matched. For example: icmp is 1, tcp is 6, udp is 17. A value of 65535 matches ANY protocol.')
cabhSec2FwFactoryDefaultFilterSourcePortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterSourcePortLow.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterSourcePortLow.setDescription('If cabhSec2FwFactoryDefaultFilterProtocol is udp or tcp, this is the inclusive lower bound of the transport-layer source port range that is to be matched, otherwise it is ignored during matching.')
cabhSec2FwFactoryDefaultFilterSourcePortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterSourcePortHigh.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterSourcePortHigh.setDescription('If cabhSec2FwFactoryDefaultFilterProtocol is udp or tcp, this is the inclusive upper bound of the transport-layer source port range that is to be matched, otherwise it is ignored during matching.')
cabhSec2FwFactoryDefaultFilterDestPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterDestPortLow.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterDestPortLow.setDescription('If cabhSec2FwFactoryDefaultFilterProtocol is udp or tcp, this is the inclusive lower bound of the transport-layer destination port range that is to be matched, otherwise it is ignored during matching.')
cabhSec2FwFactoryDefaultFilterDestPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterDestPortHigh.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterDestPortHigh.setDescription('If cabhSec2FwFactoryDefaultFilterProtocol is udp or tcp, this is the inclusive upper bound of the transport-layer destination port range that is to be matched, otherwise it is ignored during matching.')
cabhSec2FwFactoryDefaultFilterContinue = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 2, 1, 14), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterContinue.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwFactoryDefaultFilterContinue.setDescription('This value is always set to true so the PS MUST continue scanning and applying rules.')
cabhSec2FwLocalFilterIpTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3), )
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpTable.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpTable.setDescription('Contains a configured filtering Ruleset for the PS firewall.')
cabhSec2FwLocalFilterIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1), ).setIndexNames((0, "CABH-SEC-MIB", "cabhSec2FwLocalFilterIpIndex"))
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpEntry.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpEntry.setDescription('Contains a configured filter rule for the PS firewall. If the PS has not aqcuired ToD, entries that do not have default time settings are ignored. Note, that a filter time period may include two days (e.g from 10 PM to 4 AM). A filter time period that includes two days is identified by the absolute value of the cabhSec2FwLocalFilterIpEndTime being less then the absolute value of the cabhSec2FwLocalFilterIpStartTime. The cabhSec2FwLocalFilterIpDOW setting and the cabhSec2FwLocalFilterIpStartTime value indicate what day and time the filter becomes active. The cabhSec2FwLocalFilterIpEndTime indicates when the filter becomes inactive on the second day. The maximum filter time period that includes two days is 24 hours. If cabhSec2FwLocalFilterIpStartTime is less than or equal to the cabhSec2FwLocalFilterIpEndTime the time period of the filter falls in the same day.')
cabhSec2FwLocalFilterIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpIndex.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpIndex.setDescription('Index used to order the application of filters. The filter with the lowest index is always applied first.')
cabhSec2FwLocalFilterIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpStatus.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpStatus.setDescription('Controls and reflects the status of rows in this table. Creation of the rows may be done via either create-and-wait or create-and-go, but the filter is not applied until this object is set to (or changes to) active. There is no restriction in changing any object in a row while this object is set to active.')
cabhSec2FwLocalFilterIpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("allow", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpControl.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpControl.setDescription('If set to deny(1), all packets matching this filter will be discarded. If set to allow(2), all packets matching this filter will be accepted. The cabhSec2FwLocalFilterIpContinue object is Set to true, and therefore the PS MUST continue to scan the table for other matches to apply the match with the highest cabhSec2FwLocalFilterIpIndex value.')
cabhSec2FwLocalFilterIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 4), InterfaceIndexOrZero().clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpIfIndex.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpIfIndex.setDescription('The index number assigned to this object MUST match to the IfIndex numbering assigned in the ifTable from the Interfaces Group MIB [RFC 2863], and as specified in CH 1.1 Spec, Table 6-16 Numbering Interfaces in the ifTable.')
cabhSec2FwLocalFilterIpDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpDirection.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpDirection.setDescription('This value represents direction in relationship to the assigned cabhSec2FwLocalFilterIpIfIndex in this particular rule, meaning that the PS MUST represent traffic direction as follows: inbound(1)traffic, outbound(2) traffic, or both(3)inbound and outbound traffic.')
cabhSec2FwLocalFilterIpSaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 6), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpSaddr.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpSaddr.setDescription("The source IP address, or portion thereof, that is to be matched for this filter. The source address is first masked (and'ed) against cabhSec2FwLocalFilterIpSmask before being compared to this value. A value of 0 for this object and 0 for the mask matches all IP addresses.")
cabhSec2FwLocalFilterIpSmask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 7), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpSmask.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpSmask.setDescription("A bit mask that is to be applied to the source address prior to matching. This mask is not necessarily the same as a subnet mask, but 1's bits must be leftmost and contiguous.")
cabhSec2FwLocalFilterIpDaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 8), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpDaddr.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpDaddr.setDescription("The destination IP address, or portion thereof, that is to be matched for this filter. The destination address is first masked (and'ed) against cabhSec2FwLocalFilterIpDmask before being compared to this value. A value of 0 for this object and 0 for the mask matches all IP addresses.")
cabhSec2FwLocalFilterIpDmask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 9), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpDmask.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpDmask.setDescription("A bit mask that is to be applied to the destination address prior to matching. This mask is not necessarily the same as a subnet mask, but 1's bits must be leftmost and contiguous.")
cabhSec2FwLocalFilterIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpProtocol.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpProtocol.setDescription('The protocol value that is to be matched. For example: icmp is 1, tcp is 6, udp is 17. A value of 65535 matches ANY protocol.')
cabhSec2FwLocalFilterIpSourcePortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpSourcePortLow.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpSourcePortLow.setDescription('If cabhSec2FwLocalFilterIpProtocol is udp or tcp, this is the inclusive lower bound of the transport-layer source port range that is to be matched, otherwise it is ignored during matching.')
cabhSec2FwLocalFilterIpSourcePortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpSourcePortHigh.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpSourcePortHigh.setDescription('If cabhSec2FwLocalFilterIpProtocol is udp or tcp, this is the inclusive upper bound of the transport-layer source port range that is to be matched, otherwise it is ignored during matching.')
cabhSec2FwLocalFilterIpDestPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpDestPortLow.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpDestPortLow.setDescription('If cabhSec2FwLocalFilterIpProtocol is udp or tcp, this is the inclusive lower bound of the transport-layer destination port range that is to be matched, otherwise it is ignored during matching.')
cabhSec2FwLocalFilterIpDestPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpDestPortHigh.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpDestPortHigh.setDescription('If cabhSec2FwLocalFilterIpProtocol is udp or tcp, this is the inclusive upper bound of the transport-layer destination port range that is to be matched, otherwise it is ignored during matching.')
cabhSec2FwLocalFilterIpMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpMatches.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpMatches.setDescription('Counts the number of times this filter was matched. This object is initialized to 0 at boot, or at row creation, and is reset only upon reboot.')
cabhSec2FwLocalFilterIpContinue = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 16), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpContinue.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpContinue.setDescription('This value is always set to true so the PS MUST continue scanning and applying rules.')
cabhSec2FwLocalFilterIpStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2359))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpStartTime.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpStartTime.setDescription("The start time for matching the filter ruleset in the specified days indicated in cabhSec2FwLocalFilterIpDOW. Time is represented in Military Time, e.g., 8:30 AM is represented as 830 and 11:45 PM as 2345. An attempt to set this object to an invalid military time value, e.g., 1182, returns 'wrongValue' error.")
cabhSec2FwLocalFilterIpEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2359)).clone(2359)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpEndTime.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpEndTime.setDescription("The end time for matching the filter ruleset for the days indicated in cabhSec2FwLocalFilterIpDOW. The filter rule associated with this end time MUST not be disabled until the minute following the time indicated by this MIB object. If the time period is for two days, identified by cabhSec2FwLocalFilterIpEndTime being less than cabhSec2FwLocalFilterIpStartTime, then the cabhSec2FwLocalFilterIpDOW settings do not apply to this MIB object. Time is represented in the same manner as in cabhSec2FwLocalFilterIpStartTime. An attempt to set this object to an invalid military time value, e.g., 1182, returns 'wrongValue' error.")
cabhSec2FwLocalFilterIpDOW = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 19), Bits().clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6))).clone(hexValue="fe")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpDOW.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpDOW.setDescription("If the day of week bit associated with the PS given day is '1', this object criteria matches.")
cabhSec2FwLocalFilterIpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 4, 4, 3, 1, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpDescr.setStatus('current')
if mibBuilder.loadTexts: cabhSec2FwLocalFilterIpDescr.setDescription('A filter rule description configured by the cable operator or subscriber.')
cabhSecKerbPKINITGracePeriod = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 600)).clone(30)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSecKerbPKINITGracePeriod.setStatus('current')
if mibBuilder.loadTexts: cabhSecKerbPKINITGracePeriod.setDescription('The PKINIT Grace Period is needed by the PS to know when it should start retrying to get a new ticket. The PS MUST obtain a new Kerberos ticket (with a PKINIT exchange)this many minutes before the old ticket expires.')
cabhSecKerbTGSGracePeriod = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(10)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSecKerbTGSGracePeriod.setStatus('current')
if mibBuilder.loadTexts: cabhSecKerbTGSGracePeriod.setDescription('The TGS Grace Period is needed by the PS to know when it should start retrying to get a new ticket. The PS MUST obtain a new Kerberos ticket (with a TGS Request) this many minutes before the old ticket expires.')
cabhSecKerbUnsolicitedKeyMaxTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 600)).clone(600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSecKerbUnsolicitedKeyMaxTimeout.setStatus('current')
if mibBuilder.loadTexts: cabhSecKerbUnsolicitedKeyMaxTimeout.setDescription('This timeout applies to PS initiated AP-REQ/REP key management exchange with NMS. The maximum timeout is the value which may not be exceeded in the exponential backoff algorithm.')
cabhSecKerbUnsolicitedKeyMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 5, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cabhSecKerbUnsolicitedKeyMaxRetries.setStatus('current')
if mibBuilder.loadTexts: cabhSecKerbUnsolicitedKeyMaxRetries.setDescription('The number of retries the PS is allowed for AP-REQ/REP key management exchange initiation with the NMS. This is the maximum number of retries before the PS gives up attempting to establish an SNMPv3 security association with NMS.')
cabhSecNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 3))
cabhSecConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 4))
cabhSecCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 4, 1))
cabhSecGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 4, 2))
cabhSecCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 4, 1, 1)).setObjects(("CABH-SEC-MIB", "cabhSecCertGroup"), ("CABH-SEC-MIB", "cabhSecKerbGroup"), ("CABH-SEC-MIB", "cabhSecGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhSecCompliance = cabhSecCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cabhSecCompliance.setDescription('The compliance statement for CableHome Security.')
cabhSec2Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 4, 1, 2)).setObjects(("CABH-SEC-MIB", "cabhSecCertGroup"), ("CABH-SEC-MIB", "cabhSecKerbGroup"), ("CABH-SEC-MIB", "cabhSec2Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhSec2Compliance = cabhSec2Compliance.setStatus('current')
if mibBuilder.loadTexts: cabhSec2Compliance.setDescription('The compliance statement for CableHome 1.1 Security.')
cabhSecGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 4, 2, 1)).setObjects(("CABH-SEC-MIB", "cabhSecFwPolicyFileEnable"), ("CABH-SEC-MIB", "cabhSecFwPolicyFileURL"), ("CABH-SEC-MIB", "cabhSecFwPolicyFileHash"), ("CABH-SEC-MIB", "cabhSecFwPolicyFileOperStatus"), ("CABH-SEC-MIB", "cabhSecFwPolicyFileCurrentVersion"), ("CABH-SEC-MIB", "cabhSecFwPolicySuccessfulFileURL"), ("CABH-SEC-MIB", "cabhSecFwEventType1Enable"), ("CABH-SEC-MIB", "cabhSecFwEventType2Enable"), ("CABH-SEC-MIB", "cabhSecFwEventType3Enable"), ("CABH-SEC-MIB", "cabhSecFwEventAttackAlertThreshold"), ("CABH-SEC-MIB", "cabhSecFwEventAttackAlertPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhSecGroup = cabhSecGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cabhSecGroup.setDescription('Group of objects in CableHome 1.0 Firewall MIB.')
cabhSecCertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 4, 2, 2)).setObjects(("CABH-SEC-MIB", "cabhSecCertPsCert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhSecCertGroup = cabhSecCertGroup.setStatus('current')
if mibBuilder.loadTexts: cabhSecCertGroup.setDescription('Group of objects in CableHome gateway for PS Certificate.')
cabhSecKerbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 4, 2, 3)).setObjects(("CABH-SEC-MIB", "cabhSecKerbPKINITGracePeriod"), ("CABH-SEC-MIB", "cabhSecKerbTGSGracePeriod"), ("CABH-SEC-MIB", "cabhSecKerbUnsolicitedKeyMaxTimeout"), ("CABH-SEC-MIB", "cabhSecKerbUnsolicitedKeyMaxRetries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhSecKerbGroup = cabhSecKerbGroup.setStatus('current')
if mibBuilder.loadTexts: cabhSecKerbGroup.setDescription('Group of objects in CableHome gateway for Kerberos.')
cabhSec2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 4, 2, 4, 2, 4)).setObjects(("CABH-SEC-MIB", "cabhSec2FwEnable"), ("CABH-SEC-MIB", "cabhSec2FwPolicyFileURL"), ("CABH-SEC-MIB", "cabhSec2FwPolicyFileHash"), ("CABH-SEC-MIB", "cabhSec2FwPolicyFileOperStatus"), ("CABH-SEC-MIB", "cabhSec2FwPolicyFileCurrentVersion"), ("CABH-SEC-MIB", "cabhSec2FwClearPreviousRuleset"), ("CABH-SEC-MIB", "cabhSec2FwPolicySelection"), ("CABH-SEC-MIB", "cabhSec2FwEventSetToFactory"), ("CABH-SEC-MIB", "cabhSec2FwEventLastSetToFactory"), ("CABH-SEC-MIB", "cabhSec2FwPolicySuccessfulFileURL"), ("CABH-SEC-MIB", "cabhSec2FwEventEnable"), ("CABH-SEC-MIB", "cabhSec2FwEventThreshold"), ("CABH-SEC-MIB", "cabhSec2FwEventInterval"), ("CABH-SEC-MIB", "cabhSec2FwEventCount"), ("CABH-SEC-MIB", "cabhSec2FwEventLogReset"), ("CABH-SEC-MIB", "cabhSec2FwEventLogLastReset"), ("CABH-SEC-MIB", "cabhSec2FwLogEventType"), ("CABH-SEC-MIB", "cabhSec2FwLogEventPriority"), ("CABH-SEC-MIB", "cabhSec2FwLogEventId"), ("CABH-SEC-MIB", "cabhSec2FwLogTime"), ("CABH-SEC-MIB", "cabhSec2FwLogIpProtocol"), ("CABH-SEC-MIB", "cabhSec2FwLogIpSourceAddr"), ("CABH-SEC-MIB", "cabhSec2FwLogIpDestAddr"), ("CABH-SEC-MIB", "cabhSec2FwLogIpSourcePort"), ("CABH-SEC-MIB", "cabhSec2FwLogIpDestPort"), ("CABH-SEC-MIB", "cabhSec2FwLogMessageType"), ("CABH-SEC-MIB", "cabhSec2FwLogReplayCount"), ("CABH-SEC-MIB", "cabhSec2FwLogMIBPointer"), ("CABH-SEC-MIB", "cabhSec2FwFilterScheduleStartTime"), ("CABH-SEC-MIB", "cabhSec2FwFilterScheduleEndTime"), ("CABH-SEC-MIB", "cabhSec2FwFilterScheduleDOW"), ("CABH-SEC-MIB", "cabhSec2FwFactoryDefaultFilterControl"), ("CABH-SEC-MIB", "cabhSec2FwFactoryDefaultFilterIfIndex"), ("CABH-SEC-MIB", "cabhSec2FwFactoryDefaultFilterDirection"), ("CABH-SEC-MIB", "cabhSec2FwFactoryDefaultFilterSaddr"), ("CABH-SEC-MIB", "cabhSec2FwFactoryDefaultFilterSmask"), ("CABH-SEC-MIB", "cabhSec2FwFactoryDefaultFilterDaddr"), ("CABH-SEC-MIB", "cabhSec2FwFactoryDefaultFilterDmask"), ("CABH-SEC-MIB", "cabhSec2FwFactoryDefaultFilterProtocol"), ("CABH-SEC-MIB", "cabhSec2FwFactoryDefaultFilterSourcePortLow"), ("CABH-SEC-MIB", "cabhSec2FwFactoryDefaultFilterSourcePortHigh"), ("CABH-SEC-MIB", "cabhSec2FwFactoryDefaultFilterDestPortLow"), ("CABH-SEC-MIB", "cabhSec2FwFactoryDefaultFilterDestPortHigh"), ("CABH-SEC-MIB", "cabhSec2FwFactoryDefaultFilterContinue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cabhSec2Group = cabhSec2Group.setStatus('current')
if mibBuilder.loadTexts: cabhSec2Group.setDescription('Group of objects in CableHome 1.1 Firewall MIB.')
mibBuilder.exportSymbols("CABH-SEC-MIB", cabhSec2FwLogIpProtocol=cabhSec2FwLogIpProtocol, cabhSec2FwLocalFilterIpTable=cabhSec2FwLocalFilterIpTable, cabhSec2FwClearLocalRuleset=cabhSec2FwClearLocalRuleset, cabhSecFwPolicyFileOperStatus=cabhSecFwPolicyFileOperStatus, cabhSecConformance=cabhSecConformance, cabhSec2FwEnable=cabhSec2FwEnable, cabhSec2FwLogMessageType=cabhSec2FwLogMessageType, cabhSec2FwEventLogLastReset=cabhSec2FwEventLogLastReset, cabhSecMib=cabhSecMib, cabhSec2FwLocalFilterIpDirection=cabhSec2FwLocalFilterIpDirection, cabhSec2FwFactoryDefaultFilterDestPortHigh=cabhSec2FwFactoryDefaultFilterDestPortHigh, cabhSec2FwObjects=cabhSec2FwObjects, cabhSec2FwFactoryDefaultFilterDmask=cabhSec2FwFactoryDefaultFilterDmask, cabhSec2FwLocalFilterIpEntry=cabhSec2FwLocalFilterIpEntry, cabhSec2FwPolicyFileURL=cabhSec2FwPolicyFileURL, cabhSecFwPolicyFileCurrentVersion=cabhSecFwPolicyFileCurrentVersion, cabhSec2FwLogIpDestAddr=cabhSec2FwLogIpDestAddr, cabhSec2FwFactoryDefaultFilterDestPortLow=cabhSec2FwFactoryDefaultFilterDestPortLow, cabhSec2FwLocalFilterIpSourcePortHigh=cabhSec2FwLocalFilterIpSourcePortHigh, cabhSec2FwLocalFilterIpControl=cabhSec2FwLocalFilterIpControl, cabhSec2FwLocalFilterIpContinue=cabhSec2FwLocalFilterIpContinue, cabhSec2FwEventControlEntry=cabhSec2FwEventControlEntry, cabhSec2FwEventCount=cabhSec2FwEventCount, cabhSecFwEventType3Enable=cabhSecFwEventType3Enable, cabhSec2FwLocalFilterIpSaddr=cabhSec2FwLocalFilterIpSaddr, cabhSecKerbPKINITGracePeriod=cabhSecKerbPKINITGracePeriod, cabhSec2FwFactoryDefaultFilterEntry=cabhSec2FwFactoryDefaultFilterEntry, cabhSec2FwPolicyFileOperStatus=cabhSec2FwPolicyFileOperStatus, cabhSec2FwPolicySelection=cabhSec2FwPolicySelection, cabhSec2FwConfiguredRulesetPriority=cabhSec2FwConfiguredRulesetPriority, cabhSec2FwLog=cabhSec2FwLog, cabhSecFwBase=cabhSecFwBase, cabhSec2FwLogReplayCount=cabhSec2FwLogReplayCount, cabhSecFwEventType1Enable=cabhSecFwEventType1Enable, cabhSec2FwFactoryDefaultFilterProtocol=cabhSec2FwFactoryDefaultFilterProtocol, cabhSecGroups=cabhSecGroups, cabhSec2FwLocalFilterIpIfIndex=cabhSec2FwLocalFilterIpIfIndex, cabhSec2FwPolicyFileCurrentVersion=cabhSec2FwPolicyFileCurrentVersion, cabhSec2FwFilterScheduleDescr=cabhSec2FwFilterScheduleDescr, cabhSec2FwFactoryDefaultFilterSourcePortHigh=cabhSec2FwFactoryDefaultFilterSourcePortHigh, cabhSecKerbUnsolicitedKeyMaxRetries=cabhSecKerbUnsolicitedKeyMaxRetries, cabhSecFwEventAttackAlertPeriod=cabhSecFwEventAttackAlertPeriod, cabhSecKerbTGSGracePeriod=cabhSecKerbTGSGracePeriod, cabhSec2FwFactoryDefaultFilterControl=cabhSec2FwFactoryDefaultFilterControl, cabhSecKerbGroup=cabhSecKerbGroup, cabhSec2FwLogIpSourceAddr=cabhSec2FwLogIpSourceAddr, cabhSec2FwEvent=cabhSec2FwEvent, cabhSec2FwFactoryDefaultFilterDaddr=cabhSec2FwFactoryDefaultFilterDaddr, cabhSec2FwPolicySuccessfulFileURL=cabhSec2FwPolicySuccessfulFileURL, PYSNMP_MODULE_ID=cabhSecMib, cabhSec2FwBase=cabhSec2FwBase, cabhSec2FwLocalFilterIpStartTime=cabhSec2FwLocalFilterIpStartTime, cabhSec2FwEventType=cabhSec2FwEventType, cabhSec2FwFactoryDefaultFilterSmask=cabhSec2FwFactoryDefaultFilterSmask, cabhSec2FwPolicyFileHash=cabhSec2FwPolicyFileHash, cabhSecCompliances=cabhSecCompliances, cabhSec2FwFilterScheduleEndTime=cabhSec2FwFilterScheduleEndTime, cabhSec2FwFactoryDefaultFilterIfIndex=cabhSec2FwFactoryDefaultFilterIfIndex, cabhSec2FwLogTable=cabhSec2FwLogTable, cabhSec2FwLocalFilterIpStatus=cabhSec2FwLocalFilterIpStatus, cabhSec2FwLocalFilterIpDescr=cabhSec2FwLocalFilterIpDescr, cabhSecKerbObjects=cabhSecKerbObjects, cabhSec2FwLocalFilterIpProtocol=cabhSec2FwLocalFilterIpProtocol, cabhSecCompliance=cabhSecCompliance, cabhSec2FwLocalFilterIpDestPortLow=cabhSec2FwLocalFilterIpDestPortLow, cabhSec2FwLogEventId=cabhSec2FwLogEventId, cabhSecKerbBase=cabhSecKerbBase, cabhSec2FwClearPreviousRuleset=cabhSec2FwClearPreviousRuleset, cabhSecFwLogCtl=cabhSecFwLogCtl, cabhSec2FwLogTime=cabhSec2FwLogTime, cabhSec2FwFactoryDefaultFilterSourcePortLow=cabhSec2FwFactoryDefaultFilterSourcePortLow, cabhSec2FwEventLogReset=cabhSec2FwEventLogReset, cabhSec2FwLocalFilterIpSmask=cabhSec2FwLocalFilterIpSmask, cabhSecKerbUnsolicitedKeyMaxTimeout=cabhSecKerbUnsolicitedKeyMaxTimeout, cabhSec2FwLocalFilterIpDestPortHigh=cabhSec2FwLocalFilterIpDestPortHigh, cabhSec2FwFactoryDefaultFilterDirection=cabhSec2FwFactoryDefaultFilterDirection, cabhSec2FwFilterScheduleTable=cabhSec2FwFilterScheduleTable, cabhSec2FwLogMatchingFilterDescr=cabhSec2FwLogMatchingFilterDescr, cabhSecFwEventType2Enable=cabhSecFwEventType2Enable, cabhSec2FwLocalFilterIpDOW=cabhSec2FwLocalFilterIpDOW, cabhSec2FwFactoryDefaultFilterSaddr=cabhSec2FwFactoryDefaultFilterSaddr, cabhSecFwObjects=cabhSecFwObjects, cabhSecFwPolicyFileEnable=cabhSecFwPolicyFileEnable, cabhSecFwPolicySuccessfulFileURL=cabhSecFwPolicySuccessfulFileURL, cabhSec2FwLogEntry=cabhSec2FwLogEntry, cabhSec2FwFactoryDefaultFilterTable=cabhSec2FwFactoryDefaultFilterTable, cabhSec2FwLogIpSourcePort=cabhSec2FwLogIpSourcePort, cabhSec2FwEventEnable=cabhSec2FwEventEnable, cabhSec2FwLogMIBPointer=cabhSec2FwLogMIBPointer, cabhSec2FwFactoryDefaultFilterContinue=cabhSec2FwFactoryDefaultFilterContinue, cabhSec2FwEventThreshold=cabhSec2FwEventThreshold, cabhSec2FwLocalFilterIpIndex=cabhSec2FwLocalFilterIpIndex, cabhSec2FwLocalFilterIpDmask=cabhSec2FwLocalFilterIpDmask, cabhSec2FwLocalFilterIpEndTime=cabhSec2FwLocalFilterIpEndTime, cabhSec2FwEventSetToFactory=cabhSec2FwEventSetToFactory, cabhSecCertGroup=cabhSecCertGroup, cabhSec2FwFilterScheduleDOW=cabhSec2FwFilterScheduleDOW, cabhSecFwPolicyFileHash=cabhSecFwPolicyFileHash, cabhSec2FwLogMatchingFilterTableIndex=cabhSec2FwLogMatchingFilterTableIndex, cabhSecMibObjects=cabhSecMibObjects, cabhSecCertObjects=cabhSecCertObjects, cabhSec2FwFactoryDefaultFilterIndex=cabhSec2FwFactoryDefaultFilterIndex, cabhSec2FwEventLastSetToFactory=cabhSec2FwEventLastSetToFactory, cabhSec2FwLogEventType=cabhSec2FwLogEventType, cabhSec2FwLocalFilterIpSourcePortLow=cabhSec2FwLocalFilterIpSourcePortLow, cabhSec2FwEventInterval=cabhSec2FwEventInterval, cabhSec2FwLogIndex=cabhSec2FwLogIndex, cabhSec2FwFilter=cabhSec2FwFilter, cabhSec2FwLogMatchingFilterTableName=cabhSec2FwLogMatchingFilterTableName, cabhSec2FwFilterScheduleStartTime=cabhSec2FwFilterScheduleStartTime, cabhSec2FwLocalFilterIpDaddr=cabhSec2FwLocalFilterIpDaddr, cabhSecCertPsCert=cabhSecCertPsCert, cabhSec2Compliance=cabhSec2Compliance, cabhSecFwEventAttackAlertThreshold=cabhSecFwEventAttackAlertThreshold, cabhSecGroup=cabhSecGroup, cabhSec2FwLogEventPriority=cabhSec2FwLogEventPriority, cabhSec2FwEventControlTable=cabhSec2FwEventControlTable, cabhSec2FwLogIpDestPort=cabhSec2FwLogIpDestPort, cabhSec2Group=cabhSec2Group, cabhSecNotification=cabhSecNotification, cabhSec2FwFilterScheduleEntry=cabhSec2FwFilterScheduleEntry, cabhSecFwPolicyFileURL=cabhSecFwPolicyFileURL, cabhSec2FwLocalFilterIpMatches=cabhSec2FwLocalFilterIpMatches)
