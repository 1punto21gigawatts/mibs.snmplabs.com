#
# PySNMP MIB module CISCO-ENVMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ENVMON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:49:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, iso, Integer32, Counter32, TimeTicks, IpAddress, Counter64, ModuleIdentity, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "Integer32", "Counter32", "TimeTicks", "IpAddress", "Counter64", "ModuleIdentity", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "NotificationType")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
ciscoEnvMonMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 13))
ciscoEnvMonMIB.setRevisions(('2003-12-01 00:00', '2003-11-25 00:00', '2002-10-15 00:00', '2002-07-17 00:00', '2002-02-04 00:00', '2001-08-30 00:00', '2001-08-16 00:00', '2001-05-07 00:00', '2000-01-31 00:00', '1998-10-22 00:00', '1998-08-05 00:00', '1996-11-12 00:00', '1995-08-15 00:00', '1995-03-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoEnvMonMIB.setRevisionsDescriptions(('Added c37xx (13) and other (14) as values for ciscoEnvMonPresent', 'Added ciscoEnvMonMIBMiscNotifGroup.', 'Added c7600(12) as values for ciscoEnvMonPresent', 'Added optional groups ciscoEnvMonEnableStatChangeGroup and ciscoEnvMonStatChangeNotifGroup.', 'Added osr7600(11) as values for ciscoEnvMonPresent', 'Added c10000(10) as values for ciscoEnvMonPresent', 'Added cat4000(9) as values for ciscoEnvMonPresent', 'Added cat6000(7),ubr7200(8) as values for ciscoEnvMonPresent', 'Add notFunctioning to CiscoEnvMonState. ', 'Renamed enumerated value internalRPS(5) as internalRedundant(5) and added description for ciscoEnvMonSupplySource enumerated values. ', 'Add enumerated value internalRPS(5) to ciscoEnvMonSupplySource. ', 'Add monitoring support for c3600 series router', 'Specify a correct (non-negative) range for several index objects.', 'Miscellaneous changes including monitoring support for c7000 series redundant power supplies.',))
if mibBuilder.loadTexts: ciscoEnvMonMIB.setLastUpdated('200312010000Z')
if mibBuilder.loadTexts: ciscoEnvMonMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoEnvMonMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoEnvMonMIB.setDescription('The MIB module to describe the status of the Environmental Monitor on those devices which support one.')
class CiscoEnvMonState(TextualConvention, Integer32):
    description = 'Represents the state of a device being monitored. Valid values are: normal(1): the environment is good, such as low temperature. warning(2): the environment is bad, such as temperature above normal operation range but not too high. critical(3): the environment is very bad, such as temperature much higher than normal operation limit. shutdown(4): the environment is the worst, the system should be shutdown immediately. notPresent(5): the environmental monitor is not present, such as temperature sensors do not exist. notFunctioning(6): the environmental monitor does not function properly, such as a temperature sensor generates a abnormal data like 1000 C. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ("shutdown", 4), ("notPresent", 5), ("notFunctioning", 6))

class CiscoSignedGauge(TextualConvention, Integer32):
    description = 'Represents the current value of an entity, as a signed integer.'
    status = 'current'

ciscoEnvMonObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 13, 1))
ciscoEnvMonPresent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("oldAgs", 1), ("ags", 2), ("c7000", 3), ("ci", 4), ("cAccessMon", 6), ("cat6000", 7), ("ubr7200", 8), ("cat4000", 9), ("c10000", 10), ("osr7600", 11), ("c7600", 12), ("c37xx", 13), ("other", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonPresent.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonPresent.setDescription('The type of environmental monitor located in the chassis. An oldAgs environmental monitor card is identical to an ags environmental card except that it is not capable of supplying data, and hence no instance of the remaining objects in this MIB will be returned in response to an SNMP query. Note that only a firmware upgrade is required to convert an oldAgs into an ags card.')
ciscoEnvMonVoltageStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2), )
if mibBuilder.loadTexts: ciscoEnvMonVoltageStatusTable.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonVoltageStatusTable.setDescription('The table of voltage status maintained by the environmental monitor.')
ciscoEnvMonVoltageStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1), ).setIndexNames((0, "CISCO-ENVMON-MIB", "ciscoEnvMonVoltageStatusIndex"))
if mibBuilder.loadTexts: ciscoEnvMonVoltageStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonVoltageStatusEntry.setDescription('An entry in the voltage status table, representing the status of the associated testpoint maintained by the environmental monitor.')
ciscoEnvMonVoltageStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: ciscoEnvMonVoltageStatusIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonVoltageStatusIndex.setDescription('Unique index for the testpoint being instrumented. This index is for SNMP purposes only, and has no intrinsic meaning.')
ciscoEnvMonVoltageStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonVoltageStatusDescr.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonVoltageStatusDescr.setDescription('Textual description of the testpoint being instrumented. This description is a short textual label, suitable as a human-sensible identification for the rest of the information in the entry.')
ciscoEnvMonVoltageStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 3), CiscoSignedGauge()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonVoltageStatusValue.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonVoltageStatusValue.setDescription('The current measurement of the testpoint being instrumented.')
ciscoEnvMonVoltageThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 4), Integer32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonVoltageThresholdLow.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonVoltageThresholdLow.setDescription('The lowest value that the associated instance of the object ciscoEnvMonVoltageStatusValue may obtain before an emergency shutdown of the managed device is initiated.')
ciscoEnvMonVoltageThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 5), Integer32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonVoltageThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonVoltageThresholdHigh.setDescription('The highest value that the associated instance of the object ciscoEnvMonVoltageStatusValue may obtain before an emergency shutdown of the managed device is initiated.')
ciscoEnvMonVoltageLastShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 6), Integer32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonVoltageLastShutdown.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonVoltageLastShutdown.setDescription('The value of the associated instance of the object ciscoEnvMonVoltageStatusValue at the time an emergency shutdown of the managed device was last initiated. This value is stored in non-volatile RAM and hence is able to survive the shutdown.')
ciscoEnvMonVoltageState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 2, 1, 7), CiscoEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonVoltageState.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonVoltageState.setDescription('The current state of the testpoint being instrumented.')
ciscoEnvMonTemperatureStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3), )
if mibBuilder.loadTexts: ciscoEnvMonTemperatureStatusTable.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonTemperatureStatusTable.setDescription('The table of ambient temperature status maintained by the environmental monitor.')
ciscoEnvMonTemperatureStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1), ).setIndexNames((0, "CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureStatusIndex"))
if mibBuilder.loadTexts: ciscoEnvMonTemperatureStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonTemperatureStatusEntry.setDescription('An entry in the ambient temperature status table, representing the status of the associated testpoint maintained by the environmental monitor.')
ciscoEnvMonTemperatureStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: ciscoEnvMonTemperatureStatusIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonTemperatureStatusIndex.setDescription('Unique index for the testpoint being instrumented. This index is for SNMP purposes only, and has no intrinsic meaning.')
ciscoEnvMonTemperatureStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonTemperatureStatusDescr.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonTemperatureStatusDescr.setDescription('Textual description of the testpoint being instrumented. This description is a short textual label, suitable as a human-sensible identification for the rest of the information in the entry.')
ciscoEnvMonTemperatureStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1, 3), Gauge32()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonTemperatureStatusValue.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonTemperatureStatusValue.setDescription('The current measurement of the testpoint being instrumented.')
ciscoEnvMonTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1, 4), Integer32()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonTemperatureThreshold.setDescription('The highest value that the associated instance of the object ciscoEnvMonTemperatureStatusValue may obtain before an emergency shutdown of the managed device is initiated.')
ciscoEnvMonTemperatureLastShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1, 5), Integer32()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonTemperatureLastShutdown.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonTemperatureLastShutdown.setDescription('The value of the associated instance of the object ciscoEnvMonTemperatureStatusValue at the time an emergency shutdown of the managed device was last initiated. This value is stored in non-volatile RAM and hence is able to survive the shutdown.')
ciscoEnvMonTemperatureState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 3, 1, 6), CiscoEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonTemperatureState.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonTemperatureState.setDescription('The current state of the testpoint being instrumented.')
ciscoEnvMonFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 4), )
if mibBuilder.loadTexts: ciscoEnvMonFanStatusTable.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonFanStatusTable.setDescription('The table of fan status maintained by the environmental monitor.')
ciscoEnvMonFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 4, 1), ).setIndexNames((0, "CISCO-ENVMON-MIB", "ciscoEnvMonFanStatusIndex"))
if mibBuilder.loadTexts: ciscoEnvMonFanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonFanStatusEntry.setDescription('An entry in the fan status table, representing the status of the associated fan maintained by the environmental monitor.')
ciscoEnvMonFanStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: ciscoEnvMonFanStatusIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonFanStatusIndex.setDescription('Unique index for the fan being instrumented. This index is for SNMP purposes only, and has no intrinsic meaning.')
ciscoEnvMonFanStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonFanStatusDescr.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonFanStatusDescr.setDescription('Textual description of the fan being instrumented. This description is a short textual label, suitable as a human-sensible identification for the rest of the information in the entry.')
ciscoEnvMonFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 4, 1, 3), CiscoEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonFanState.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonFanState.setDescription('The current state of the fan being instrumented.')
ciscoEnvMonSupplyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 5), )
if mibBuilder.loadTexts: ciscoEnvMonSupplyStatusTable.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonSupplyStatusTable.setDescription('The table of power supply status maintained by the environmental monitor card.')
ciscoEnvMonSupplyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 5, 1), ).setIndexNames((0, "CISCO-ENVMON-MIB", "ciscoEnvMonSupplyStatusIndex"))
if mibBuilder.loadTexts: ciscoEnvMonSupplyStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonSupplyStatusEntry.setDescription('An entry in the power supply status table, representing the status of the associated power supply maintained by the environmental monitor card.')
ciscoEnvMonSupplyStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: ciscoEnvMonSupplyStatusIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonSupplyStatusIndex.setDescription('Unique index for the power supply being instrumented. This index is for SNMP purposes only, and has no intrinsic meaning.')
ciscoEnvMonSupplyStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonSupplyStatusDescr.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonSupplyStatusDescr.setDescription('Textual description of the power supply being instrumented. This description is a short textual label, suitable as a human-sensible identification for the rest of the information in the entry.')
ciscoEnvMonSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 5, 1, 3), CiscoEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonSupplyState.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonSupplyState.setDescription('The current state of the power supply being instrumented.')
ciscoEnvMonSupplySource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ac", 2), ("dc", 3), ("externalPowerSupply", 4), ("internalRedundant", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonSupplySource.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonSupplySource.setDescription('The power supply source. unknown - Power supply source unknown ac - AC power supply dc - DC power supply externalPowerSupply - External power supply internalRedundant - Internal redundant power supply ')
ciscoEnvMonAlarmContacts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 13, 1, 6), Bits().clone(namedValues=NamedValues(("minorVisual", 0), ("majorVisual", 1), ("criticalVisual", 2), ("minorAudible", 3), ("majorAudible", 4), ("criticalAudible", 5), ("input", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoEnvMonAlarmContacts.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonAlarmContacts.setDescription('Each bit is set to reflect the respective alarm being set. The bit will be cleared when the respective alarm is cleared.')
ciscoEnvMonMIBNotificationEnables = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 13, 2))
ciscoEnvMonEnableShutdownNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 13, 2, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEnvMonEnableShutdownNotification.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonEnableShutdownNotification.setDescription('This variable indicates whether the system produces the ciscoEnvMonShutdownNotification. A false value will prevent shutdown notifications from being generated by this system.')
ciscoEnvMonEnableVoltageNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 13, 2, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEnvMonEnableVoltageNotification.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEnvMonEnableVoltageNotification.setDescription('This variable indicates whether the system produces the ciscoEnvMonVoltageNotification. A false value will prevent voltage notifications from being generated by this system. This object is deprecated in favour of ciscoEnvMonEnableStatChangeNotif.')
ciscoEnvMonEnableTemperatureNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 13, 2, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEnvMonEnableTemperatureNotification.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEnvMonEnableTemperatureNotification.setDescription('This variable indicates whether the system produces the ciscoEnvMonTemperatureNotification. A false value prevents temperature notifications from being sent by this entity. This object is deprecated in favour of ciscoEnvMonEnableStatChangeNotif.')
ciscoEnvMonEnableFanNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 13, 2, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEnvMonEnableFanNotification.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEnvMonEnableFanNotification.setDescription('This variable indicates whether the system produces the ciscoEnvMonFanNotification. A false value prevents fan notifications from being sent by this entity. This object is deprecated in favour of ciscoEnvMonEnableStatChangeNotif.')
ciscoEnvMonEnableRedundantSupplyNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 13, 2, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEnvMonEnableRedundantSupplyNotification.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEnvMonEnableRedundantSupplyNotification.setDescription('This variable indicates whether the system produces the ciscoEnvMonRedundantSupplyNotification. A false value prevents redundant supply notifications from being generated by this system. This object is deprecated in favour of ciscoEnvMonEnableStatChangeNotif.')
ciscoEnvMonEnableStatChangeNotif = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 13, 2, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoEnvMonEnableStatChangeNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonEnableStatChangeNotif.setDescription('This variable indicates whether the system produces the ciscoEnvMonVoltStatusChangeNotif, ciscoEnvMonTempStatusChangeNotif, ciscoEnvMonFanStatusChangeNotif and ciscoEnvMonSuppStatusChangeNotif. A false value will prevent these notifications from being generated by this system.')
ciscoEnvMonMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 13, 3))
ciscoEnvMonMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0))
ciscoEnvMonShutdownNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 1))
if mibBuilder.loadTexts: ciscoEnvMonShutdownNotification.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonShutdownNotification.setDescription('A ciscoEnvMonShutdownNotification is sent if the environmental monitor detects a testpoint reaching a critical state and is about to initiate a shutdown. This notification contains no objects so that it may be encoded and sent in the shortest amount of time possible. Even so, management applications should not rely on receiving such a notification as it may not be sent before the shutdown completes.')
ciscoEnvMonVoltageNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 2)).setObjects(("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageStatusValue"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageState"))
if mibBuilder.loadTexts: ciscoEnvMonVoltageNotification.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEnvMonVoltageNotification.setDescription('A ciscoEnvMonVoltageNotification is sent if the voltage measured at a given testpoint is outside the normal range for the testpoint (i.e. is at the warning, critical, or shutdown stage). Since such a notification is usually generated before the shutdown state is reached, it can convey more data and has a better chance of being sent than does the ciscoEnvMonShutdownNotification. This notification is deprecated in favour of ciscoEnvMonVoltStatusChangeNotif.')
ciscoEnvMonTemperatureNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 3)).setObjects(("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureStatusValue"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureState"))
if mibBuilder.loadTexts: ciscoEnvMonTemperatureNotification.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEnvMonTemperatureNotification.setDescription('A ciscoEnvMonTemperatureNotification is sent if the temperature measured at a given testpoint is outside the normal range for the testpoint (i.e. is at the warning, critical, or shutdown stage). Since such a Notification is usually generated before the shutdown state is reached, it can convey more data and has a better chance of being sent than does the ciscoEnvMonShutdownNotification. This notification is deprecated in favour of ciscoEnvMonTempStatusChangeNotif.')
ciscoEnvMonFanNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 4)).setObjects(("CISCO-ENVMON-MIB", "ciscoEnvMonFanStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonFanState"))
if mibBuilder.loadTexts: ciscoEnvMonFanNotification.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEnvMonFanNotification.setDescription('A ciscoEnvMonFanNotification is sent if any one of the fans in the fan array (where extant) fails. Since such a notification is usually generated before the shutdown state is reached, it can convey more data and has a better chance of being sent than does the ciscoEnvMonShutdownNotification. This notification is deprecated in favour of ciscoEnvMonFanStatusChangeNotif.')
ciscoEnvMonRedundantSupplyNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 5)).setObjects(("CISCO-ENVMON-MIB", "ciscoEnvMonSupplyStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonSupplyState"))
if mibBuilder.loadTexts: ciscoEnvMonRedundantSupplyNotification.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEnvMonRedundantSupplyNotification.setDescription('A ciscoEnvMonRedundantSupplyNotification is sent if the redundant power supply (where extant) fails. Since such a notification is usually generated before the shutdown state is reached, it can convey more data and has a better chance of being sent than does the ciscoEnvMonShutdownNotification. This notification is deprecated in favour of ciscoEnvMonSuppStatusChangeNotif.')
ciscoEnvMonVoltStatusChangeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 6)).setObjects(("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageStatusValue"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageState"))
if mibBuilder.loadTexts: ciscoEnvMonVoltStatusChangeNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonVoltStatusChangeNotif.setDescription('A ciscoEnvMonVoltStatusChangeNotif is sent if there is change in the state of a device being monitored by ciscoEnvMonVoltageState.')
ciscoEnvMonTempStatusChangeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 7)).setObjects(("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureStatusValue"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureState"))
if mibBuilder.loadTexts: ciscoEnvMonTempStatusChangeNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonTempStatusChangeNotif.setDescription('A ciscoEnvMonTempStatusChangeNotif is sent if there is change in the state of a device being monitored by ciscoEnvMonTemperatureState.')
ciscoEnvMonFanStatusChangeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 8)).setObjects(("CISCO-ENVMON-MIB", "ciscoEnvMonFanStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonFanState"))
if mibBuilder.loadTexts: ciscoEnvMonFanStatusChangeNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonFanStatusChangeNotif.setDescription('A ciscoEnvMonFanStatusChangeNotif is sent if there is change in the state of a device being monitored by ciscoEnvMonFanState.')
ciscoEnvMonSuppStatusChangeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 13, 3, 0, 9)).setObjects(("CISCO-ENVMON-MIB", "ciscoEnvMonSupplyStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonSupplyState"))
if mibBuilder.loadTexts: ciscoEnvMonSuppStatusChangeNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonSuppStatusChangeNotif.setDescription('A ciscoEnvMonSupplyStatChangeNotif is sent if there is change in the state of a device being monitored by ciscoEnvMonSupplyState.')
ciscoEnvMonMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 13, 4))
ciscoEnvMonMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 1))
ciscoEnvMonMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 2))
ciscoEnvMonMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 1, 1)).setObjects(("CISCO-ENVMON-MIB", "ciscoEnvMonMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnvMonMIBCompliance = ciscoEnvMonMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEnvMonMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco Environmental Monitor MIB. This is deprecated and new compliance ciscoEnvMonMIBComplianceRev1 is added.')
ciscoEnvMonMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 1, 2)).setObjects(("CISCO-ENVMON-MIB", "ciscoEnvMonMIBGroupRev"), ("CISCO-ENVMON-MIB", "ciscoEnvMonMIBNotifGroup"), ("CISCO-ENVMON-MIB", "ciscoEnvMonEnableStatChangeGroup"), ("CISCO-ENVMON-MIB", "ciscoEnvMonStatChangeNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnvMonMIBComplianceRev1 = ciscoEnvMonMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco Environmental Monitor MIB.')
ciscoEnvMonMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 2, 1)).setObjects(("CISCO-ENVMON-MIB", "ciscoEnvMonPresent"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageStatusValue"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageThresholdLow"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageThresholdHigh"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageLastShutdown"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageState"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureStatusValue"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureThreshold"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureLastShutdown"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureState"), ("CISCO-ENVMON-MIB", "ciscoEnvMonFanStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonFanState"), ("CISCO-ENVMON-MIB", "ciscoEnvMonSupplyStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonSupplyState"), ("CISCO-ENVMON-MIB", "ciscoEnvMonSupplySource"), ("CISCO-ENVMON-MIB", "ciscoEnvMonAlarmContacts"), ("CISCO-ENVMON-MIB", "ciscoEnvMonEnableShutdownNotification"), ("CISCO-ENVMON-MIB", "ciscoEnvMonEnableVoltageNotification"), ("CISCO-ENVMON-MIB", "ciscoEnvMonEnableTemperatureNotification"), ("CISCO-ENVMON-MIB", "ciscoEnvMonEnableFanNotification"), ("CISCO-ENVMON-MIB", "ciscoEnvMonEnableRedundantSupplyNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnvMonMIBGroup = ciscoEnvMonMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEnvMonMIBGroup.setDescription('A collection of objects providing environmental monitoring capability to a cisco chassis. This group is deprecated in favour of ciscoEnvMonMIBGroupRev.')
ciscoEnvMonMIBGroupRev = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 2, 2)).setObjects(("CISCO-ENVMON-MIB", "ciscoEnvMonPresent"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageStatusValue"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageThresholdLow"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageThresholdHigh"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageLastShutdown"), ("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageState"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureStatusValue"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureThreshold"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureLastShutdown"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureState"), ("CISCO-ENVMON-MIB", "ciscoEnvMonFanStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonFanState"), ("CISCO-ENVMON-MIB", "ciscoEnvMonSupplyStatusDescr"), ("CISCO-ENVMON-MIB", "ciscoEnvMonSupplyState"), ("CISCO-ENVMON-MIB", "ciscoEnvMonSupplySource"), ("CISCO-ENVMON-MIB", "ciscoEnvMonAlarmContacts"), ("CISCO-ENVMON-MIB", "ciscoEnvMonEnableShutdownNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnvMonMIBGroupRev = ciscoEnvMonMIBGroupRev.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonMIBGroupRev.setDescription('A collection of objects providing environmental monitoring capability to a cisco chassis.')
ciscoEnvMonEnableStatChangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 2, 3)).setObjects(("CISCO-ENVMON-MIB", "ciscoEnvMonEnableStatChangeNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnvMonEnableStatChangeGroup = ciscoEnvMonEnableStatChangeGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonEnableStatChangeGroup.setDescription('A collection of objects providing enabling/disabling of the status change notifications for environmental monitoring.')
ciscoEnvMonMIBNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 2, 4)).setObjects(("CISCO-ENVMON-MIB", "ciscoEnvMonShutdownNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnvMonMIBNotifGroup = ciscoEnvMonMIBNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonMIBNotifGroup.setDescription('A notification group providing shutdown notification for environmental monitoring. ')
ciscoEnvMonStatChangeNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 2, 5)).setObjects(("CISCO-ENVMON-MIB", "ciscoEnvMonVoltStatusChangeNotif"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTempStatusChangeNotif"), ("CISCO-ENVMON-MIB", "ciscoEnvMonFanStatusChangeNotif"), ("CISCO-ENVMON-MIB", "ciscoEnvMonSuppStatusChangeNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnvMonStatChangeNotifGroup = ciscoEnvMonStatChangeNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEnvMonStatChangeNotifGroup.setDescription('A collection of notifications providing the status change for environmental monitoring.')
ciscoEnvMonMIBMiscNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 13, 4, 2, 6)).setObjects(("CISCO-ENVMON-MIB", "ciscoEnvMonVoltageNotification"), ("CISCO-ENVMON-MIB", "ciscoEnvMonTemperatureNotification"), ("CISCO-ENVMON-MIB", "ciscoEnvMonFanNotification"), ("CISCO-ENVMON-MIB", "ciscoEnvMonRedundantSupplyNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnvMonMIBMiscNotifGroup = ciscoEnvMonMIBMiscNotifGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEnvMonMIBMiscNotifGroup.setDescription('A collection of various notifications for the enviromental monitoring mib module. The notifications the group and the group are both in deprecated state. The notifications in the group were deprecated in favour of notifications in ciscoEnvMonStatChangeNotifGroup.')
mibBuilder.exportSymbols("CISCO-ENVMON-MIB", ciscoEnvMonTemperatureStatusTable=ciscoEnvMonTemperatureStatusTable, ciscoEnvMonEnableRedundantSupplyNotification=ciscoEnvMonEnableRedundantSupplyNotification, ciscoEnvMonEnableFanNotification=ciscoEnvMonEnableFanNotification, ciscoEnvMonMIBNotifGroup=ciscoEnvMonMIBNotifGroup, ciscoEnvMonSupplyStatusEntry=ciscoEnvMonSupplyStatusEntry, ciscoEnvMonVoltageStatusIndex=ciscoEnvMonVoltageStatusIndex, ciscoEnvMonSupplyStatusTable=ciscoEnvMonSupplyStatusTable, ciscoEnvMonVoltageNotification=ciscoEnvMonVoltageNotification, ciscoEnvMonStatChangeNotifGroup=ciscoEnvMonStatChangeNotifGroup, ciscoEnvMonTemperatureStatusEntry=ciscoEnvMonTemperatureStatusEntry, ciscoEnvMonMIBGroup=ciscoEnvMonMIBGroup, ciscoEnvMonMIBCompliances=ciscoEnvMonMIBCompliances, ciscoEnvMonTemperatureStatusIndex=ciscoEnvMonTemperatureStatusIndex, ciscoEnvMonVoltageState=ciscoEnvMonVoltageState, ciscoEnvMonTemperatureThreshold=ciscoEnvMonTemperatureThreshold, ciscoEnvMonTemperatureLastShutdown=ciscoEnvMonTemperatureLastShutdown, ciscoEnvMonVoltageStatusTable=ciscoEnvMonVoltageStatusTable, ciscoEnvMonMIBNotificationEnables=ciscoEnvMonMIBNotificationEnables, ciscoEnvMonMIBNotificationPrefix=ciscoEnvMonMIBNotificationPrefix, ciscoEnvMonTempStatusChangeNotif=ciscoEnvMonTempStatusChangeNotif, ciscoEnvMonFanStatusChangeNotif=ciscoEnvMonFanStatusChangeNotif, ciscoEnvMonTemperatureStatusValue=ciscoEnvMonTemperatureStatusValue, ciscoEnvMonFanStatusEntry=ciscoEnvMonFanStatusEntry, ciscoEnvMonVoltageStatusEntry=ciscoEnvMonVoltageStatusEntry, ciscoEnvMonSupplyStatusIndex=ciscoEnvMonSupplyStatusIndex, ciscoEnvMonFanState=ciscoEnvMonFanState, ciscoEnvMonMIB=ciscoEnvMonMIB, ciscoEnvMonMIBComplianceRev1=ciscoEnvMonMIBComplianceRev1, ciscoEnvMonVoltageThresholdLow=ciscoEnvMonVoltageThresholdLow, ciscoEnvMonSupplySource=ciscoEnvMonSupplySource, ciscoEnvMonFanNotification=ciscoEnvMonFanNotification, ciscoEnvMonTemperatureStatusDescr=ciscoEnvMonTemperatureStatusDescr, ciscoEnvMonMIBMiscNotifGroup=ciscoEnvMonMIBMiscNotifGroup, ciscoEnvMonEnableStatChangeNotif=ciscoEnvMonEnableStatChangeNotif, ciscoEnvMonEnableTemperatureNotification=ciscoEnvMonEnableTemperatureNotification, ciscoEnvMonRedundantSupplyNotification=ciscoEnvMonRedundantSupplyNotification, ciscoEnvMonEnableVoltageNotification=ciscoEnvMonEnableVoltageNotification, ciscoEnvMonEnableShutdownNotification=ciscoEnvMonEnableShutdownNotification, ciscoEnvMonSupplyState=ciscoEnvMonSupplyState, ciscoEnvMonMIBConformance=ciscoEnvMonMIBConformance, ciscoEnvMonFanStatusIndex=ciscoEnvMonFanStatusIndex, ciscoEnvMonFanStatusTable=ciscoEnvMonFanStatusTable, ciscoEnvMonObjects=ciscoEnvMonObjects, ciscoEnvMonMIBCompliance=ciscoEnvMonMIBCompliance, ciscoEnvMonTemperatureNotification=ciscoEnvMonTemperatureNotification, CiscoSignedGauge=CiscoSignedGauge, ciscoEnvMonVoltageLastShutdown=ciscoEnvMonVoltageLastShutdown, ciscoEnvMonVoltageStatusValue=ciscoEnvMonVoltageStatusValue, ciscoEnvMonShutdownNotification=ciscoEnvMonShutdownNotification, PYSNMP_MODULE_ID=ciscoEnvMonMIB, ciscoEnvMonSuppStatusChangeNotif=ciscoEnvMonSuppStatusChangeNotif, ciscoEnvMonMIBGroupRev=ciscoEnvMonMIBGroupRev, ciscoEnvMonFanStatusDescr=ciscoEnvMonFanStatusDescr, ciscoEnvMonTemperatureState=ciscoEnvMonTemperatureState, ciscoEnvMonVoltageStatusDescr=ciscoEnvMonVoltageStatusDescr, CiscoEnvMonState=CiscoEnvMonState, ciscoEnvMonPresent=ciscoEnvMonPresent, ciscoEnvMonVoltStatusChangeNotif=ciscoEnvMonVoltStatusChangeNotif, ciscoEnvMonVoltageThresholdHigh=ciscoEnvMonVoltageThresholdHigh, ciscoEnvMonSupplyStatusDescr=ciscoEnvMonSupplyStatusDescr, ciscoEnvMonAlarmContacts=ciscoEnvMonAlarmContacts, ciscoEnvMonMIBGroups=ciscoEnvMonMIBGroups, ciscoEnvMonEnableStatChangeGroup=ciscoEnvMonEnableStatChangeGroup, ciscoEnvMonMIBNotifications=ciscoEnvMonMIBNotifications)
