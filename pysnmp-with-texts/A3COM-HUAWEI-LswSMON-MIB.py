#
# PySNMP MIB module A3COM-HUAWEI-LswSMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-LswSMON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:05:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
huaweiMgmt, huaweiDatacomm = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "huaweiMgmt", "huaweiDatacomm")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Gauge32, MibIdentifier, iso, ModuleIdentity, Counter64, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, Unsigned32, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "MibIdentifier", "iso", "ModuleIdentity", "Counter64", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "Unsigned32", "NotificationType", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hwSmonExtend = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 26))
smonExtendObject = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 26, 1))
hwdot1qVlanStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1qVlanStatNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hwdot1qVlanStatNumber.setDescription('The number of vlans that can collect statistics of packets.')
hwdot1qVlanStatStatusTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 26, 1, 2), )
if mibBuilder.loadTexts: hwdot1qVlanStatStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwdot1qVlanStatStatusTable.setDescription('VLAN statistics status table.')
hwdot1qVlanStatStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 26, 1, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-LswSMON-MIB", "hwdot1qVlanStatEnableIndex"))
if mibBuilder.loadTexts: hwdot1qVlanStatStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwdot1qVlanStatStatusEntry.setDescription(' VLAN statistics status table entry.')
hwdot1qVlanStatEnableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 26, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1qVlanStatEnableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hwdot1qVlanStatEnableIndex.setDescription('Vlan index .')
hwdot1qVlanStatEnableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 5, 25, 26, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1qVlanStatEnableStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hwdot1qVlanStatEnableStatus.setDescription('VLAN Statistics Status.It represent the current VLAN supports statistic or not.')
mibBuilder.exportSymbols("A3COM-HUAWEI-LswSMON-MIB", smonExtendObject=smonExtendObject, hwdot1qVlanStatEnableIndex=hwdot1qVlanStatEnableIndex, hwdot1qVlanStatStatusEntry=hwdot1qVlanStatStatusEntry, hwSmonExtend=hwSmonExtend, hwdot1qVlanStatStatusTable=hwdot1qVlanStatStatusTable, hwdot1qVlanStatNumber=hwdot1qVlanStatNumber, hwdot1qVlanStatEnableStatus=hwdot1qVlanStatEnableStatus)
