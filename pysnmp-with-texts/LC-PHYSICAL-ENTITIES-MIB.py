#
# PySNMP MIB module LC-PHYSICAL-ENTITIES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LC-PHYSICAL-ENTITIES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:06:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
lancastMibModulesA, lancastTraps = mibBuilder.importSymbols("LANCAST-MIB", "lancastMibModulesA", "lancastTraps")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter64, TimeTicks, NotificationType, Counter32, ObjectIdentity, Unsigned32, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "TimeTicks", "NotificationType", "Counter32", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier", "Bits", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
physicalEntities = ModuleIdentity((1, 3, 6, 1, 4, 1, 2745, 1, 2))
physicalEntities.setRevisions(('1999-03-03 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: physicalEntities.setRevisionsDescriptions(('REV 1.0 original Draft',))
if mibBuilder.loadTexts: physicalEntities.setLastUpdated('9903031200Z')
if mibBuilder.loadTexts: physicalEntities.setOrganization('Lancast Inc')
if mibBuilder.loadTexts: physicalEntities.setContactInfo('Contact: Customer Service Tel: 1-877-526-2278 ext 136 Fax: 1-603-594-2887 Web: info@lancast.com')
if mibBuilder.loadTexts: physicalEntities.setDescription('This is the enterprise MIB definition file for the Physical Entities of Lancast Managed products. Copyright 1999 Lancast Inc.')
chassisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2))
backPlaneGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2745, 1, 2, 3))
powerSupplyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4))
modulesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5))
ePortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6))
serialPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7))
chassisTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1), )
if mibBuilder.loadTexts: chassisTable.setStatus('current')
if mibBuilder.loadTexts: chassisTable.setDescription('A table of relevent information pertaining to each chassis contained within this system.')
chassisTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "chassisEntityIndex"))
if mibBuilder.loadTexts: chassisTableEntry.setStatus('current')
if mibBuilder.loadTexts: chassisTableEntry.setDescription('An entry in the table, containing relevant information about a specific chassis contained within this system.')
chassisEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisEntityIndex.setStatus('current')
if mibBuilder.loadTexts: chassisEntityIndex.setDescription('A unique value, the entPhysicalIndex from the entity MIB, which identifies this chassis.')
chassisDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisDescription.setStatus('current')
if mibBuilder.loadTexts: chassisDescription.setDescription('A textual string describing a chassis contained within this system.')
chassisPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPartNumber.setStatus('current')
if mibBuilder.loadTexts: chassisPartNumber.setDescription('A textual string of the part number assigned to this chassis.')
chassisNumSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNumSlots.setStatus('current')
if mibBuilder.loadTexts: chassisNumSlots.setDescription('The number of I/O slots that this chassis supports.')
chassisCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisCurrentTemp.setStatus('current')
if mibBuilder.loadTexts: chassisCurrentTemp.setDescription('The temperature of this chassis measured in Celcius degrees. This object will be contained in the tempStatusChange trap,')
chassisMaxTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisMaxTemp.setStatus('current')
if mibBuilder.loadTexts: chassisMaxTemp.setDescription('The maximum temperature for this chassis. If this temperature is exceeded failures may result. This object will be contained in the tempStatusChange Trap,')
chassisReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("resetable", 2), ("not-resetable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisReset.setStatus('current')
if mibBuilder.loadTexts: chassisReset.setDescription('The trigger to reset this chassis. If the design of this chassis does not include this feature then this object will default to not-resetable and no sets to this object will be allowed. If the design does permit a reset then the only valid state that a user can set this object to is is reset. A read of this object will return either resetable or not-resetable.')
lastEntityResetReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cold-start", 1), ("nms-sw-reset", 2), ("download-reset", 3), ("watch-dog-timeout", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastEntityResetReason.setStatus('current')
if mibBuilder.loadTexts: lastEntityResetReason.setDescription('This object specifies the reason the last reset was applied. This object is included in the entityResetTrap pdu.')
lastEntityResetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastEntityResetIndex.setStatus('current')
if mibBuilder.loadTexts: lastEntityResetIndex.setDescription('This object specifies the physical entity index, entPhysicalIndex from the entity MIB, of the last entity that was reset. This object is included in the entityResetTrap pdu.')
lastEntityResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastEntityResetTime.setStatus('current')
if mibBuilder.loadTexts: lastEntityResetTime.setDescription('This object specifies the time the last reset was applied to an entity. This object is included in the entityResetTrap pdu.')
lastEntityResetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 9, 10))).clone(namedValues=NamedValues(("chassis", 3), ("module", 9), ("port", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastEntityResetType.setStatus('current')
if mibBuilder.loadTexts: lastEntityResetType.setDescription('This object specifies the type of entity that was last reset. The values are are a subset from the entity mib entPhysicalClass object.')
backPlaneTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 3, 1), )
if mibBuilder.loadTexts: backPlaneTable.setStatus('current')
if mibBuilder.loadTexts: backPlaneTable.setDescription('A table of relevent information pertaining to a backplane contained within this system.')
backPlaneTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 3, 1, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "backPlaneEntityIndex"))
if mibBuilder.loadTexts: backPlaneTableEntry.setStatus('current')
if mibBuilder.loadTexts: backPlaneTableEntry.setDescription('An entry in the table, containing relevant information about a specific backplane contained within this system.')
backPlaneEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backPlaneEntityIndex.setStatus('current')
if mibBuilder.loadTexts: backPlaneEntityIndex.setDescription('A unique value, the entPhysicalIndex from the entity MIB, that identifies a back plane for which this entry contains information.')
backPlaneDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backPlaneDescription.setStatus('current')
if mibBuilder.loadTexts: backPlaneDescription.setDescription('A textual string describing a backPlane contained within this system.')
backPlanePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backPlanePartNumber.setStatus('current')
if mibBuilder.loadTexts: backPlanePartNumber.setDescription('A textual string of the part number of this back plane.')
backPlaneSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backPlaneSerialNumber.setStatus('current')
if mibBuilder.loadTexts: backPlaneSerialNumber.setDescription('A textual string of the serial number of this back plane.')
backPlaneManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backPlaneManufactureDate.setStatus('current')
if mibBuilder.loadTexts: backPlaneManufactureDate.setDescription('A textual string of the manufacture date of this back plane.')
backPlaneHWRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backPlaneHWRevisionNumber.setStatus('current')
if mibBuilder.loadTexts: backPlaneHWRevisionNumber.setDescription('A textual string of the hardware revision date of this back plane.')
powerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4, 1), )
if mibBuilder.loadTexts: powerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: powerSupplyTable.setDescription('A table of relevent information pertaining to a backplane contained within this system.')
powerSupplyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4, 1, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "powerSupplyEntityIndex"))
if mibBuilder.loadTexts: powerSupplyTableEntry.setStatus('current')
if mibBuilder.loadTexts: powerSupplyTableEntry.setDescription('An entry in the table, containing relevant information about a specific backplane contained within this system.')
powerSupplyEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyEntityIndex.setStatus('current')
if mibBuilder.loadTexts: powerSupplyEntityIndex.setDescription('A unique value, the entPhysicalIndex from the entity MIB, that identifies a power supply for which this entry contains information.')
powerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: powerSupplyStatus.setDescription('The on off state of this power supply.')
powerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ac", 1), ("dc", 2), ("universal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyType.setStatus('current')
if mibBuilder.loadTexts: powerSupplyType.setDescription('The type of this power supply.')
powerSupply5vCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupply5vCurrent.setStatus('current')
if mibBuilder.loadTexts: powerSupply5vCurrent.setDescription('The actual voltage level of this 5 volt supply as measured in millivolts.')
powerSupply5vMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupply5vMin.setStatus('current')
if mibBuilder.loadTexts: powerSupply5vMin.setDescription('The minimum operating voltage level of this 5 volt supply, measured in millivolts.')
powerSupply5vMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupply5vMax.setStatus('current')
if mibBuilder.loadTexts: powerSupply5vMax.setDescription('The maximum operating voltage level of this 5 volt supply, measured in millivolts.')
powerSupplyUnitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ps-A", 1), ("ps-B", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyUnitIdentifier.setStatus('current')
if mibBuilder.loadTexts: powerSupplyUnitIdentifier.setDescription('The identifier of this supply.')
moduleTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1), )
if mibBuilder.loadTexts: moduleTable.setStatus('current')
if mibBuilder.loadTexts: moduleTable.setDescription('A table of common information relevent to modules within this system.')
moduleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "modEntityIndex"))
if mibBuilder.loadTexts: moduleTableEntry.setStatus('current')
if mibBuilder.loadTexts: moduleTableEntry.setDescription('An entry in the common module information table.')
modEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modEntityIndex.setStatus('current')
if mibBuilder.loadTexts: modEntityIndex.setDescription('A unique value, entPhysicalIndex from the entity MIB, that identifies a module for which this entry contains information.')
modAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-applicable", 0), ("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modAdminState.setStatus('current')
if mibBuilder.loadTexts: modAdminState.setDescription('The desired state of up or down of this module. If the design of this module does not include the abiltiy to control this module then this object will default to not-applicable and no sets to this object will be allowed. If the design does permit control then up and down are the valid states that a user can set this object to.')
modOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modOperStatus.setStatus('current')
if mibBuilder.loadTexts: modOperStatus.setDescription('The current operational (up/down) state of this module.')
modType = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("reserved", 2), ("mgmnt", 3), ("singleTwister", 4), ("dualTwister", 5), ("redundantTwister", 6), ("displayModule", 7), ("singleTwister2", 8), ("fixedPort", 9), ("rateAdapter", 10), ("gigabitTwister", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modType.setStatus('current')
if mibBuilder.loadTexts: modType.setDescription('The type of module resident in this system.')
modDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modDescription.setStatus('current')
if mibBuilder.loadTexts: modDescription.setDescription('A textual description of this type of module.')
modName = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modName.setStatus('current')
if mibBuilder.loadTexts: modName.setDescription('A user defined name for this module.')
modPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modPartNumber.setStatus('current')
if mibBuilder.loadTexts: modPartNumber.setDescription('A textual string identifying the part number of this module.')
modSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modSerialNumber.setStatus('current')
if mibBuilder.loadTexts: modSerialNumber.setDescription('A textual string identifying the serieal number of this module.')
modManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modManufactureDate.setStatus('current')
if mibBuilder.loadTexts: modManufactureDate.setDescription('A textual string identifying the date that this module was manufactured.')
modDiagnosticTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modDiagnosticTestStatus.setStatus('current')
if mibBuilder.loadTexts: modDiagnosticTestStatus.setDescription('A textual string indicating the status of the last diagnostic test performed on this module including the date and time.')
modHWRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modHWRevisionNumber.setStatus('current')
if mibBuilder.loadTexts: modHWRevisionNumber.setDescription('A textual string identifying the hardware revision number of this module.')
modNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modNumPorts.setStatus('current')
if mibBuilder.loadTexts: modNumPorts.setDescription('The number of ports conntained within this module.')
modFirstSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modFirstSlot.setStatus('current')
if mibBuilder.loadTexts: modFirstSlot.setDescription('The first slot which is the leftmost slot that this module physically resides in.')
modNumSlotsOccupied = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modNumSlotsOccupied.setStatus('current')
if mibBuilder.loadTexts: modNumSlotsOccupied.setDescription('The total number of slots that this module physically occupies.')
modReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("resetable", 2), ("not-resetable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modReset.setStatus('current')
if mibBuilder.loadTexts: modReset.setDescription('The trigger to reset this module. If the design of this module does not include this feature then this object will default to not-resetable and no sets to this object will be allowed. If the design does permit a reset then the only valid state that a user can set this object to is is reset. A read of this object will return either resetable or not-resetable.')
mgmntTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2), )
if mibBuilder.loadTexts: mgmntTable.setStatus('current')
if mibBuilder.loadTexts: mgmntTable.setDescription('A table of information common to management modules within this system.')
mgmntTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "mgmntEntityIndex"))
if mibBuilder.loadTexts: mgmntTableEntry.setStatus('current')
if mibBuilder.loadTexts: mgmntTableEntry.setDescription('An entry in the managment module information table.')
mgmntEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntEntityIndex.setStatus('current')
if mibBuilder.loadTexts: mgmntEntityIndex.setDescription('A unique value, the entPhysicalIndex from the entity MIB, that identifies a managemnt module for which this entry contains information.')
mgmntBootImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntBootImageName.setStatus('current')
if mibBuilder.loadTexts: mgmntBootImageName.setDescription('A textual description of the name of the Boot image.')
mgmntBootImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntBootImageVersion.setStatus('current')
if mibBuilder.loadTexts: mgmntBootImageVersion.setDescription('A textual description of the version of the Boot image The vesion will include the time and date of the build.')
mgmntCoreImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntCoreImageName.setStatus('current')
if mibBuilder.loadTexts: mgmntCoreImageName.setDescription('A textual description of the name of the Core image.')
mgmntCoreImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntCoreImageVersion.setStatus('current')
if mibBuilder.loadTexts: mgmntCoreImageVersion.setDescription('A textual description of the version of the Core image The vesion will include the time and date of the build.')
mgmntAppImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntAppImageName.setStatus('current')
if mibBuilder.loadTexts: mgmntAppImageName.setDescription('A textual description of the name of the Application (personality) image.')
mgmntAppImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntAppImageVersion.setStatus('current')
if mibBuilder.loadTexts: mgmntAppImageVersion.setDescription('A textual description of the version of the Application (personality) image. The vesion will include the time and date of the build.')
mgmntRamMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntRamMemorySize.setStatus('current')
if mibBuilder.loadTexts: mgmntRamMemorySize.setDescription('The size of RAM memory measured in number of bytes.')
mgmntFlashMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntFlashMemorySize.setStatus('current')
if mibBuilder.loadTexts: mgmntFlashMemorySize.setDescription('The size of Flash memory measured in number of bytes.')
mgmntNVRamMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntNVRamMemorySize.setStatus('current')
if mibBuilder.loadTexts: mgmntNVRamMemorySize.setDescription('The size of Non Volatile Ram memory measured in number of bytes.')
mgmnt5vCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmnt5vCurrent.setStatus('current')
if mibBuilder.loadTexts: mgmnt5vCurrent.setDescription('The actual voltage level of this 3.3 volt input as measured in millivolts.')
mgmnt5vMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmnt5vMin.setStatus('current')
if mibBuilder.loadTexts: mgmnt5vMin.setDescription('The minimum operating voltage level of this 5 volt input, measured in millivolts.')
mgmnt5vMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmnt5vMax.setStatus('current')
if mibBuilder.loadTexts: mgmnt5vMax.setDescription('The maximum operating voltage level of this 5 volt input, measured in millivolts.')
mgmnt3pt3vCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmnt3pt3vCurrent.setStatus('current')
if mibBuilder.loadTexts: mgmnt3pt3vCurrent.setDescription('The actual voltage level of this 3.3 volt input as measured in millivolts.')
mgmnt3pt3vMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmnt3pt3vMin.setStatus('current')
if mibBuilder.loadTexts: mgmnt3pt3vMin.setDescription('The minimum operating voltage level of this 3.3 volt input, measured in millivolts.')
mgmnt3pt3vMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmnt3pt3vMax.setStatus('current')
if mibBuilder.loadTexts: mgmnt3pt3vMax.setDescription('The maximum operating voltage level of this 3.3 volt input, measured in millivolts.')
mgmntDiagnosticBootError = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmntDiagnosticBootError.setStatus('current')
if mibBuilder.loadTexts: mgmntDiagnosticBootError.setDescription('This object indicates the status of the diagnostic boot tests. An error is indicated by turning the error indicator on the management module is on.')
singleTwisterTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 3), )
if mibBuilder.loadTexts: singleTwisterTable.setStatus('current')
if mibBuilder.loadTexts: singleTwisterTable.setDescription('A table of information common to single twister modules.')
singleTwisterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 3, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "stwEntityIndex"))
if mibBuilder.loadTexts: singleTwisterTableEntry.setStatus('current')
if mibBuilder.loadTexts: singleTwisterTableEntry.setDescription('An entry in the single Twister table of information.')
stwEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stwEntityIndex.setStatus('current')
if mibBuilder.loadTexts: stwEntityIndex.setDescription('A unique value, the entPhysicalIndex from the entity MIB, that identifies a single twister module for which this entry contains information.')
stwLinkLossCarryForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stwLinkLossCarryForward.setStatus('current')
if mibBuilder.loadTexts: stwLinkLossCarryForward.setDescription('The ability of an input port to forward the link test pulse to its output port. If disabled the output port will always generate link pulses, regardless of input port link status.')
dualTwisterTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 4), )
if mibBuilder.loadTexts: dualTwisterTable.setStatus('current')
if mibBuilder.loadTexts: dualTwisterTable.setDescription('A table of information common to dual twister modules.')
dualTwisterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 4, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "stwEntityIndex"))
if mibBuilder.loadTexts: dualTwisterTableEntry.setStatus('current')
if mibBuilder.loadTexts: dualTwisterTableEntry.setDescription('An entry in the dual Twister table of information.')
dtwEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtwEntityIndex.setStatus('current')
if mibBuilder.loadTexts: dtwEntityIndex.setDescription('A unique value, the entPhysicalIndex from the entity MIB, that identifies a dual twister module for which this entry contains information.')
dtwLinkLossCarryForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtwLinkLossCarryForward.setStatus('current')
if mibBuilder.loadTexts: dtwLinkLossCarryForward.setDescription('The ability of an input port to forward the link test pulse to its output port. If disabled the output port will always generate link pulses, regardless of input port link status.')
redundantTwisterTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5), )
if mibBuilder.loadTexts: redundantTwisterTable.setStatus('current')
if mibBuilder.loadTexts: redundantTwisterTable.setDescription('A table of information common to redundant twister modules.')
redundantTwisterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "rtwEntityIndex"))
if mibBuilder.loadTexts: redundantTwisterTableEntry.setStatus('current')
if mibBuilder.loadTexts: redundantTwisterTableEntry.setDescription('An entry in the table containing redundant twister information.')
rtwEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtwEntityIndex.setStatus('current')
if mibBuilder.loadTexts: rtwEntityIndex.setDescription('A unique value, the entPhysicalIndex from the entity MIB, that identifies a redundant twister module for which this entry contains information.')
rtwAutoRestorePrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("not-selectable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtwAutoRestorePrimary.setStatus('current')
if mibBuilder.loadTexts: rtwAutoRestorePrimary.setDescription('This object controls the ability to perform auto restoration back to the primary circuit if a secondary switchover had previously occurred. When rtwModeControl is selectAB then this object is not selectable and a read of this value will always return not selectable.')
rtwLinkLossCarryForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtwLinkLossCarryForward.setStatus('current')
if mibBuilder.loadTexts: rtwLinkLossCarryForward.setDescription('The ability of an input port to forward the link test pulse to its output port. If disabled the output port will always generate link pulses, regardless of input port link status.')
rtwActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtwActivePort.setStatus('current')
if mibBuilder.loadTexts: rtwActivePort.setDescription('This object reflects the port that is both receiving and transmitting packets. If the active port is the secondary then the secondary led indicator will be turned on.')
rtwRedundantTransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-applicable", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtwRedundantTransmission.setStatus('current')
if mibBuilder.loadTexts: rtwRedundantTransmission.setDescription('The ability of the primary and secondary output ports to transmit the received main input signal simultaneously. When rtwModeControl is selectAB then this object is not selectable and a read of this value will always return not-applicable.')
rtwSecondarySwitchOver = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtwSecondarySwitchOver.setStatus('current')
if mibBuilder.loadTexts: rtwSecondarySwitchOver.setDescription('This object reflects whether an automatic switch from the primary port to the secondary port has taken place.')
rtwLinkPulseControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-applicable", 0), ("both-ports", 1), ("active-port", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtwLinkPulseControl.setStatus('current')
if mibBuilder.loadTexts: rtwLinkPulseControl.setDescription('This object controls the forwarding of the link test pulse to both the primary and secondary ports or the slected port in rtwActivePort. When rtwModeControl is selectAB then this object is not selectable and a read of this value will always return not-applicable.')
rtwModeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redundant", 1), ("selectAB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtwModeControl.setStatus('current')
if mibBuilder.loadTexts: rtwModeControl.setDescription('This objects selects the operational mode. Redundant mode provides automatic switchover for port failure redundancy while ABSelect provides a basic A/B port selector.')
rtwABSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 5, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("selectA", 1), ("selectB", 2), ("not-selectable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtwABSelect.setStatus('current')
if mibBuilder.loadTexts: rtwABSelect.setDescription('This object selects the output port that will send and receive packets. If the design of this module does not include the abiltiy to select the mode, then this object will default to not-selectable and no sets to this object will be allowed.')
ePortTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1), )
if mibBuilder.loadTexts: ePortTable.setStatus('current')
if mibBuilder.loadTexts: ePortTable.setDescription('A table of relevant information about the ports(s) contained within a module.')
ePortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "ePortEntityIndex"))
if mibBuilder.loadTexts: ePortTableEntry.setStatus('current')
if mibBuilder.loadTexts: ePortTableEntry.setDescription('An entry in the table containing port related information within a module.')
ePortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ePortEntityIndex.setDescription('A unique value, the entPhysicalIndex from the entity MIB, that identifies a port for which this entry contains information.')
ePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortIfIndex.setStatus('current')
if mibBuilder.loadTexts: ePortIfIndex.setDescription('A unique identifier indicating the MIB-II interface number of this port. NOTE: ports on media translators DO NOT conform to MIB-II definition of an interface.')
ePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("e10BaseT", 2), ("e10BaseFL-MM", 3), ("e10BaseFL-SM", 4), ("e100BaseTX", 5), ("e100BaseFX-MM", 6), ("e100BaseFX-SM", 7), ("e10-100Base-TX", 8), ("e1000Base-LX", 9), ("e1000Base-SX", 10), ("e1000Base-FX", 11), ("e10Base-SX", 12), ("e100Base-SX", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortType.setStatus('current')
if mibBuilder.loadTexts: ePortType.setDescription('A unique value that identifies the type of port. Included in the port type is the maximum speed at which this port may operate at and the cable type.')
ePortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortDescription.setStatus('current')
if mibBuilder.loadTexts: ePortDescription.setDescription('A textual description of this type of port.')
ePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortName.setStatus('current')
if mibBuilder.loadTexts: ePortName.setDescription('The user defined name of this port.')
ePortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("link-detected", 1), ("no-link", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortLinkStatus.setStatus('current')
if mibBuilder.loadTexts: ePortLinkStatus.setDescription('The link status of this port. This status indicates the reception of link test pulse signals generated from an attached device. This object is used in the ePortLinkStatusChangeTrap.')
ePortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-applicable", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortAdminState.setStatus('current')
if mibBuilder.loadTexts: ePortAdminState.setDescription('The desired state of this port. If the design of this module does not include the abiltiy to control this port then this object will default to not-applicable and no sets to this object will be allowed. If the design does permit control then enable and disable are the only valid states that a user can set this object to. This object is used in the PortControlTrap.')
ePortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortOperStatus.setStatus('current')
if mibBuilder.loadTexts: ePortOperStatus.setDescription('This object indicates the current operational state of this port.')
ePortDuplexAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-applicable", 0), ("half", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortDuplexAdmin.setStatus('current')
if mibBuilder.loadTexts: ePortDuplexAdmin.setDescription('This object specifies the desired state of half or full duplex mode for this port. If the design of this module does not include the ability to select duplex, then this object will default to not-applicable and no sets to this object will be allowed. If the design does permit duplex selection then half and full are the valid states that a user can set this object to.')
ePortDuplexOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortDuplexOper.setStatus('current')
if mibBuilder.loadTexts: ePortDuplexOper.setDescription('This object indicates the current duplex mode of this port.')
ePortSpeedAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("not-applicable", 0), ("tenMbit", 1), ("onehundredMbit", 2), ("gigabit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortSpeedAdmin.setStatus('current')
if mibBuilder.loadTexts: ePortSpeedAdmin.setDescription('This object indicates the current speed that this port is operating at. If the design of this module does not include the abiltiy to control the speed of this then this object will default to not-applicable and no sets to this object will be allowed. If the design does permit control then all but not-applicable are valid states that a user can set this object to.')
ePortSpeedOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tenMbit", 1), ("onehundredMbit", 2), ("gigabit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortSpeedOper.setStatus('current')
if mibBuilder.loadTexts: ePortSpeedOper.setDescription('This object specifies the desired speed that this port is operating at.')
ePortAutoNegotiationAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-applicable", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortAutoNegotiationAdmin.setStatus('current')
if mibBuilder.loadTexts: ePortAutoNegotiationAdmin.setDescription('This object indicates the current state of auto negotiation for this port. If the design of this module does not include the ability to select auto negotiation, then this object will default to not-applicable and no sets to this object will be allowed. If the design does permit auto negotiation selection then all but not-applicable are valid states that a user can set this object to.')
ePortAutoNegotiationOper = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortAutoNegotiationOper.setStatus('current')
if mibBuilder.loadTexts: ePortAutoNegotiationOper.setDescription('This object specifices the desired state of auto negotiation selection. If enabled, this port is capable of auto negotiating full/half duplex and port speed selection.')
ePortReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("resetable", 2), ("not-resetable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ePortReset.setStatus('current')
if mibBuilder.loadTexts: ePortReset.setDescription('The trigger to reset this port. If the design of this module does not include this feature then this object will default to not-resetable and no sets to this object will be allowed. If the design does permit a reset then the only valid state that a user can set this object to is is reset. A read of this object will return either resetable or not-resetable.')
ePortActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortActivity.setStatus('current')
if mibBuilder.loadTexts: ePortActivity.setDescription('This object indicates data reception and transmision activity on the active port(s).')
ePortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("rj11", 2), ("rj21", 3), ("rj45", 4), ("bnc", 5), ("sc", 6), ("st", 7), ("sma", 8), ("mt-rj", 9), ("vf-45", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortConnector.setStatus('current')
if mibBuilder.loadTexts: ePortConnector.setDescription('This object indicates the connector type that this port supports.')
ePortParentRelPos = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 6, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePortParentRelPos.setStatus('current')
if mibBuilder.loadTexts: ePortParentRelPos.setDescription('This object indicates this ports relative position in the module to which it is member of.')
serialPortTable = MibTable((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1), )
if mibBuilder.loadTexts: serialPortTable.setStatus('current')
if mibBuilder.loadTexts: serialPortTable.setDescription('A table of relevent information pertaining to each serial port contained within this system.')
serialPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1), ).setIndexNames((0, "LC-PHYSICAL-ENTITIES-MIB", "serialPortEntityIndex"))
if mibBuilder.loadTexts: serialPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: serialPortTableEntry.setDescription('An entry in the table, containing relevant information about a specific serial port contained within this system.')
serialPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: serialPortEntityIndex.setDescription('A unique value, the entPhysicalIndex from the entity MIB, which identifies this serial port.')
serialPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortDescription.setStatus('current')
if mibBuilder.loadTexts: serialPortDescription.setDescription('A textual description of this type of port.')
serialPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialPortName.setStatus('current')
if mibBuilder.loadTexts: serialPortName.setDescription('The user defined name of this port.')
serialPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9600, 19200, 38400))).clone(namedValues=NamedValues(("baud-9600", 9600), ("baud-19200", 19200), ("baud-38400", 38400)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortSpeed.setStatus('current')
if mibBuilder.loadTexts: serialPortSpeed.setDescription('The speed that this port transmits and receives at.')
serialPortDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8))).clone(namedValues=NamedValues(("five", 5), ("six", 6), ("seven", 7), ("eight", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortDataBits.setStatus('current')
if mibBuilder.loadTexts: serialPortDataBits.setDescription('The number of bits in a character.')
serialPortParity = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("even", 2), ("odd", 3), ("mark", 4), ("space", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortParity.setStatus('current')
if mibBuilder.loadTexts: serialPortParity.setDescription("The port's sense of a character parity bit.")
serialPortStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("one-five", 2), ("two", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortStopBits.setStatus('current')
if mibBuilder.loadTexts: serialPortStopBits.setDescription('The number of stop bits for this port.')
serialPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("xon-xoff", 2), ("hardware", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortFlowControl.setStatus('current')
if mibBuilder.loadTexts: serialPortFlowControl.setDescription('The type of flow control for this port.')
serialPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 2745, 1, 2, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("db9", 1), ("db25", 2), ("rj45", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialPortConnector.setStatus('current')
if mibBuilder.loadTexts: serialPortConnector.setDescription('This object indicates the connector type that this port supports.')
tempStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 11)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "chassisEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "chassisCurrentTemp"), ("LC-PHYSICAL-ENTITIES-MIB", "chassisMaxTemp"))
if mibBuilder.loadTexts: tempStatusChange.setStatus('current')
if mibBuilder.loadTexts: tempStatusChange.setDescription('This trap will be sent when the temperature falls outside of the exceptable range. The values of chassisEntityIndex, chassisCurrentTemp and chassisMaxTemp will be included in this traps varBind list.')
backPlaneFailure = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 12)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"))
if mibBuilder.loadTexts: backPlaneFailure.setStatus('current')
if mibBuilder.loadTexts: backPlaneFailure.setDescription('This trap will be sent when there is a backplane failure. The value of modFirstSlot will be included in this traps varBind list.')
powerSupply5vChange = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 13)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupply5vCurrent"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupply5vMin"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupply5vMax"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyUnitIdentifier"))
if mibBuilder.loadTexts: powerSupply5vChange.setStatus('current')
if mibBuilder.loadTexts: powerSupply5vChange.setDescription('This trap will be sent when the voltage from the 5 volt power supply falls outside of the exceptable range. The values of powerSupplyEntityIndex, powerSupply5vCurrent, powerSupplyMin, powerSupply5vMax and powerSupplyUnitIdentifier will be included in this traps varBind list.')
powerSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 14)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyStatus"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyUnitIdentifier"))
if mibBuilder.loadTexts: powerSupplyStatusChange.setStatus('current')
if mibBuilder.loadTexts: powerSupplyStatusChange.setDescription('This trap will be sent when a power supply is either turned on or off. The values of powerSupplyEntityIndex, powerSupplyStatus and powerSupplyUnitIdentifier will be included in this traps varBind list.')
powerSupplyInsertion = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 15)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyType"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyUnitIdentifier"))
if mibBuilder.loadTexts: powerSupplyInsertion.setStatus('current')
if mibBuilder.loadTexts: powerSupplyInsertion.setDescription('This trap will be sent when a power supply is inserted. The values of powerSupplyEntityIndex, powerSupplyType and powerSupplyUnitIdentifier will be included in this traps varBind list.')
powerSupplyRemoval = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 16)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyType"), ("LC-PHYSICAL-ENTITIES-MIB", "powerSupplyUnitIdentifier"))
if mibBuilder.loadTexts: powerSupplyRemoval.setStatus('current')
if mibBuilder.loadTexts: powerSupplyRemoval.setDescription('This trap will be sent when a power supply is removed. The values of powerSupplyEntityIndex, powerSupplyType and powerSupplyUnitIdentifier will be included in this traps varBind list.')
chassisEntityReset = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 17)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "lastEntityResetIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "lastEntityResetReason"), ("LC-PHYSICAL-ENTITIES-MIB", "lastEntityResetTime"))
if mibBuilder.loadTexts: chassisEntityReset.setStatus('current')
if mibBuilder.loadTexts: chassisEntityReset.setDescription('This trap is sent when a chassis is reset. The values of lastEntityResetIndex, lastEntityResetReason, and lastEntityResetTime will be included in this traps varBind list.')
moduleEntityReset = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 18)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "lastEntityResetIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "lastEntityResetReason"), ("LC-PHYSICAL-ENTITIES-MIB", "lastEntityResetTime"), ("LC-PHYSICAL-ENTITIES-MIB", "modType"), ("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"), ("LC-PHYSICAL-ENTITIES-MIB", "modNumSlotsOccupied"))
if mibBuilder.loadTexts: moduleEntityReset.setStatus('current')
if mibBuilder.loadTexts: moduleEntityReset.setDescription('This trap is sent when a module is reset. The values of lastEntityResetIndex, lastEntityResetReason, and lastEntityResetTime, modType, modFirstSlot and modNumSlotsOccupied will be included in this traps varBind list.')
eportEntityReset = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 19)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "lastEntityResetIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "lastEntityResetReason"), ("LC-PHYSICAL-ENTITIES-MIB", "lastEntityResetTime"), ("LC-PHYSICAL-ENTITIES-MIB", "modType"), ("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"), ("LC-PHYSICAL-ENTITIES-MIB", "modNumSlotsOccupied"), ("LC-PHYSICAL-ENTITIES-MIB", "ePortParentRelPos"))
if mibBuilder.loadTexts: eportEntityReset.setStatus('current')
if mibBuilder.loadTexts: eportEntityReset.setDescription('This trap is sent when a port is reset. The values of lastEntityResetIndex, lastEntityResetReason, and lastEntityResetTime, modType, modFirstSlot, modNumSlotsOccupied, and ePortParentRelPos will be included in this traps varBind list.')
moduleInsertion = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 20)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "modEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "modType"), ("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"), ("LC-PHYSICAL-ENTITIES-MIB", "modNumSlotsOccupied"))
if mibBuilder.loadTexts: moduleInsertion.setStatus('current')
if mibBuilder.loadTexts: moduleInsertion.setDescription('This trap is sent when a module is inserted to a slot. The values of modEntityIndex, modFirstSlot, modType, modNumSlotsOccupied will be included in this traps varBind list.')
moduleRemoval = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 21)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "modEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "modType"), ("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"), ("LC-PHYSICAL-ENTITIES-MIB", "modNumSlotsOccupied"))
if mibBuilder.loadTexts: moduleRemoval.setStatus('current')
if mibBuilder.loadTexts: moduleRemoval.setDescription('This trap is sent when a module is removed from a slot. The values of modEntityIndex, modFirstSlot, modType, modNumSlotsOccupied will be included in this traps varBind list.')
unknownModule = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 22)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "modEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "modType"), ("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"))
if mibBuilder.loadTexts: unknownModule.setStatus('current')
if mibBuilder.loadTexts: unknownModule.setDescription("This trap is sent when a module is inserted and it's type cannot be determined. The values of modEntityIndex, modType, modFirstSlot, modNumSlotsOccupied will be included in this traps varBind list.")
moduleFailure = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 23)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"))
if mibBuilder.loadTexts: moduleFailure.setStatus('current')
if mibBuilder.loadTexts: moduleFailure.setDescription('This trap is sent when a module fails and thus is inaccessible. The value of modFirtSlot will be included in this traps varBind list.')
ePortLinkStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 24)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "ePortEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "ePortLinkStatus"), ("LC-PHYSICAL-ENTITIES-MIB", "modType"), ("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"), ("LC-PHYSICAL-ENTITIES-MIB", "modNumSlotsOccupied"))
if mibBuilder.loadTexts: ePortLinkStatusChange.setStatus('current')
if mibBuilder.loadTexts: ePortLinkStatusChange.setDescription('This trap is sent when there is a change in the link state of a port. The values of ePortLinkStatus, ePortIndex, modType, modFirstSlot, and modNumSlotsOccupied will be included in this traps varBind list.')
ePortAdminChange = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 25)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "ePortEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "ePortAdminState"), ("LC-PHYSICAL-ENTITIES-MIB", "modType"), ("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"), ("LC-PHYSICAL-ENTITIES-MIB", "modNumSlotsOccupied"))
if mibBuilder.loadTexts: ePortAdminChange.setStatus('current')
if mibBuilder.loadTexts: ePortAdminChange.setDescription('This trap is sent when a user changes the admin state of a port from enable to disable or vice versa. The values of ePortAdminState ePortEntityIndex, modType, modFirstSlot, modNumSlotsOccupied, will be included in this traps varBind list.')
rtwSwitchOverChange = NotificationType((1, 3, 6, 1, 4, 1, 2745, 1, 0, 26)).setObjects(("LC-PHYSICAL-ENTITIES-MIB", "rtwEntityIndex"), ("LC-PHYSICAL-ENTITIES-MIB", "rtwActivePort"), ("LC-PHYSICAL-ENTITIES-MIB", "modFirstSlot"), ("LC-PHYSICAL-ENTITIES-MIB", "modNumSlotsOccupied"))
if mibBuilder.loadTexts: rtwSwitchOverChange.setStatus('current')
if mibBuilder.loadTexts: rtwSwitchOverChange.setDescription('This trap is sent when a switchover from the primary to the secondary port and vice versa has occured. The values of rtwEntityIndex, rtwActivePort, modFirstSlot, modNumSlotsOccupied will be included in this traps varBind list.')
mibBuilder.exportSymbols("LC-PHYSICAL-ENTITIES-MIB", mgmntAppImageName=mgmntAppImageName, powerSupplyRemoval=powerSupplyRemoval, chassisGroup=chassisGroup, physicalEntities=physicalEntities, mgmnt5vCurrent=mgmnt5vCurrent, ePortAdminState=ePortAdminState, ePortAutoNegotiationAdmin=ePortAutoNegotiationAdmin, rtwAutoRestorePrimary=rtwAutoRestorePrimary, powerSupplyType=powerSupplyType, powerSupplyTableEntry=powerSupplyTableEntry, modNumSlotsOccupied=modNumSlotsOccupied, ePortDuplexAdmin=ePortDuplexAdmin, moduleRemoval=moduleRemoval, serialPortSpeed=serialPortSpeed, moduleInsertion=moduleInsertion, singleTwisterTableEntry=singleTwisterTableEntry, rtwABSelect=rtwABSelect, rtwSwitchOverChange=rtwSwitchOverChange, powerSupplyUnitIdentifier=powerSupplyUnitIdentifier, tempStatusChange=tempStatusChange, powerSupplyTable=powerSupplyTable, rtwSecondarySwitchOver=rtwSecondarySwitchOver, powerSupply5vMax=powerSupply5vMax, backPlaneGroup=backPlaneGroup, mgmntTableEntry=mgmntTableEntry, ePortSpeedAdmin=ePortSpeedAdmin, ePortActivity=ePortActivity, rtwLinkLossCarryForward=rtwLinkLossCarryForward, mgmntFlashMemorySize=mgmntFlashMemorySize, ePortName=ePortName, serialPortEntityIndex=serialPortEntityIndex, mgmntBootImageVersion=mgmntBootImageVersion, mgmntTable=mgmntTable, ePortDescription=ePortDescription, chassisMaxTemp=chassisMaxTemp, powerSupply5vMin=powerSupply5vMin, backPlaneHWRevisionNumber=backPlaneHWRevisionNumber, modPartNumber=modPartNumber, PYSNMP_MODULE_ID=physicalEntities, serialPortParity=serialPortParity, backPlaneSerialNumber=backPlaneSerialNumber, ePortType=ePortType, ePortParentRelPos=ePortParentRelPos, mgmntBootImageName=mgmntBootImageName, modDiagnosticTestStatus=modDiagnosticTestStatus, chassisEntityIndex=chassisEntityIndex, modFirstSlot=modFirstSlot, ePortIfIndex=ePortIfIndex, ePortReset=ePortReset, ePortGroup=ePortGroup, serialPortName=serialPortName, moduleFailure=moduleFailure, redundantTwisterTable=redundantTwisterTable, moduleEntityReset=moduleEntityReset, rtwActivePort=rtwActivePort, modManufactureDate=modManufactureDate, serialPortGroup=serialPortGroup, chassisTableEntry=chassisTableEntry, unknownModule=unknownModule, ePortConnector=ePortConnector, powerSupplyGroup=powerSupplyGroup, lastEntityResetTime=lastEntityResetTime, mgmntAppImageVersion=mgmntAppImageVersion, dualTwisterTableEntry=dualTwisterTableEntry, modNumPorts=modNumPorts, mgmntDiagnosticBootError=mgmntDiagnosticBootError, mgmntRamMemorySize=mgmntRamMemorySize, backPlanePartNumber=backPlanePartNumber, mgmntCoreImageName=mgmntCoreImageName, eportEntityReset=eportEntityReset, dtwEntityIndex=dtwEntityIndex, serialPortDescription=serialPortDescription, powerSupplyInsertion=powerSupplyInsertion, modDescription=modDescription, backPlaneManufactureDate=backPlaneManufactureDate, serialPortStopBits=serialPortStopBits, rtwLinkPulseControl=rtwLinkPulseControl, backPlaneDescription=backPlaneDescription, modOperStatus=modOperStatus, modHWRevisionNumber=modHWRevisionNumber, ePortOperStatus=ePortOperStatus, mgmntEntityIndex=mgmntEntityIndex, powerSupplyEntityIndex=powerSupplyEntityIndex, rtwEntityIndex=rtwEntityIndex, rtwModeControl=rtwModeControl, chassisEntityReset=chassisEntityReset, serialPortFlowControl=serialPortFlowControl, serialPortTable=serialPortTable, modulesGroup=modulesGroup, stwLinkLossCarryForward=stwLinkLossCarryForward, backPlaneTable=backPlaneTable, dtwLinkLossCarryForward=dtwLinkLossCarryForward, lastEntityResetIndex=lastEntityResetIndex, serialPortConnector=serialPortConnector, ePortEntityIndex=ePortEntityIndex, backPlaneFailure=backPlaneFailure, serialPortTableEntry=serialPortTableEntry, moduleTable=moduleTable, modEntityIndex=modEntityIndex, mgmnt3pt3vCurrent=mgmnt3pt3vCurrent, ePortTable=ePortTable, ePortDuplexOper=ePortDuplexOper, mgmnt3pt3vMin=mgmnt3pt3vMin, ePortAdminChange=ePortAdminChange, backPlaneTableEntry=backPlaneTableEntry, ePortLinkStatusChange=ePortLinkStatusChange, chassisDescription=chassisDescription, singleTwisterTable=singleTwisterTable, ePortAutoNegotiationOper=ePortAutoNegotiationOper, powerSupply5vCurrent=powerSupply5vCurrent, dualTwisterTable=dualTwisterTable, chassisTable=chassisTable, modType=modType, ePortTableEntry=ePortTableEntry, chassisNumSlots=chassisNumSlots, ePortSpeedOper=ePortSpeedOper, lastEntityResetReason=lastEntityResetReason, lastEntityResetType=lastEntityResetType, chassisPartNumber=chassisPartNumber, chassisReset=chassisReset, modAdminState=modAdminState, serialPortDataBits=serialPortDataBits, powerSupplyStatusChange=powerSupplyStatusChange, ePortLinkStatus=ePortLinkStatus, stwEntityIndex=stwEntityIndex, mgmnt3pt3vMax=mgmnt3pt3vMax, moduleTableEntry=moduleTableEntry, modSerialNumber=modSerialNumber, chassisCurrentTemp=chassisCurrentTemp, redundantTwisterTableEntry=redundantTwisterTableEntry, rtwRedundantTransmission=rtwRedundantTransmission, backPlaneEntityIndex=backPlaneEntityIndex, mgmntCoreImageVersion=mgmntCoreImageVersion, modName=modName, mgmnt5vMin=mgmnt5vMin, powerSupply5vChange=powerSupply5vChange, mgmnt5vMax=mgmnt5vMax, modReset=modReset, mgmntNVRamMemorySize=mgmntNVRamMemorySize, powerSupplyStatus=powerSupplyStatus)
