#
# PySNMP MIB module ZHONE-PHY-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-PHY-SONET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:47:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Bits, Counter32, Gauge32, MibIdentifier, ObjectIdentity, Counter64, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "Counter32", "Gauge32", "MibIdentifier", "ObjectIdentity", "Counter64", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "ModuleIdentity", "TimeTicks")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
sonetMediumEntry, sonetPathCurrentStatus, sonetSectionCurrentStatus, sonetLineCurrentStatus = mibBuilder.importSymbols("SONET-MIB", "sonetMediumEntry", "sonetPathCurrentStatus", "sonetSectionCurrentStatus", "sonetLineCurrentStatus")
zhoneModules, zhoneSonet = mibBuilder.importSymbols("Zhone", "zhoneModules", "zhoneSonet")
phySonet = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 16))
phySonet.setRevisions(('2004-08-18 11:47', '2003-07-10 13:30', '2002-03-26 14:30', '2001-09-12 15:08', '2001-07-19 18:00', '2001-02-22 11:35', '2000-12-19 15:23', '2000-12-18 16:20',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: phySonet.setRevisionsDescriptions(('1.03.04 - Add zhoneSonetErrorStatsTable.', '1.03.02 Add sonetPathStatusChange trap.', '1.03.01 Add sonetSectionStatusChange trap and sonetLineStatusChange trap.', 'V01.03.00 Changed names for valid values for sonetClockTransmitSource', 'V01.02.00 Add Sonet clock source change trap.', 'V01.01.00 - Add Sonet Medium Extension Table.', 'V01.00.01 - Add Zhone keywords.', 'V01.00.00 - Initial Release',))
if mibBuilder.loadTexts: phySonet.setLastUpdated('200408181330Z')
if mibBuilder.loadTexts: phySonet.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: phySonet.setContactInfo(' Postal: Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: phySonet.setDescription('SONET physical MIB to configure and monitor SONET physical attributes. ')
sonetClockTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 9, 1), )
if mibBuilder.loadTexts: sonetClockTable.setStatus('current')
if mibBuilder.loadTexts: sonetClockTable.setDescription('MIB table for clock related configuration for SONET interfaces.')
sonetClockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 9, 1, 1), )
sonetMediumEntry.registerAugmentions(("ZHONE-PHY-SONET-MIB", "sonetClockEntry"))
sonetClockEntry.setIndexNames(*sonetMediumEntry.getIndexNames())
if mibBuilder.loadTexts: sonetClockEntry.setStatus('current')
if mibBuilder.loadTexts: sonetClockEntry.setDescription('An entry of the sonetClockEntry. sonetClockEntry is augmented to sonetMediumEntry defined in rfc2558.mib. Whenever a row is instantiated in the sonetMediumTable, a corresponding row will be instantiated in the sonetClockTable.')
sonetClockExternalRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetClockExternalRecovery.setStatus('current')
if mibBuilder.loadTexts: sonetClockExternalRecovery.setDescription("This variable indicates if external clock recovery is enabled for this SONET interface. The default value is 'enabled'.")
sonetClockTransmitSource = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loopTiming", 1), ("throughTiming", 2), ("localTiming", 3), ("external155MHz", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetClockTransmitSource.setStatus('current')
if mibBuilder.loadTexts: sonetClockTransmitSource.setDescription("This variable describes the SONET transmit clock source. Valid values are: loopTiming - transmit clock synthesized from the recovered receive clock. throughTiming - transmit clock is derived from the recovered receive clock of another SONET interface. localTiming - transmit clock synthesized from a local clock source or that an external clock is attached to the box containing the interface. external155MHz - transmit clock synthesized from an external 155.52 MHz source. The default value is 'loopTiming'. 'external155MHz' option is not valid for Sechtor 100.")
sonetMediumExtTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 9, 2), )
if mibBuilder.loadTexts: sonetMediumExtTable.setStatus('current')
if mibBuilder.loadTexts: sonetMediumExtTable.setDescription('This is an extenion of the standard Sonet MIB (RFC 2558).')
sonetMediumExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 9, 2, 1), )
sonetMediumEntry.registerAugmentions(("ZHONE-PHY-SONET-MIB", "sonetMediumExtEntry"))
sonetMediumExtEntry.setIndexNames(*sonetMediumEntry.getIndexNames())
if mibBuilder.loadTexts: sonetMediumExtEntry.setStatus('current')
if mibBuilder.loadTexts: sonetMediumExtEntry.setDescription('Each row is an extension to the sonetMediumTable for Zhone specific fields. This row is created when the augmented sonetMediumEntry is created.')
sonetMediumExtScrambleEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 2, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetMediumExtScrambleEnabled.setStatus('current')
if mibBuilder.loadTexts: sonetMediumExtScrambleEnabled.setDescription('This field describes the enabled status of the Sonet Scramble mode. If this field is true(1) then Scramble mode is enabled, if this field is false(2) scramble mode is disable.')
sonetMediumExtLineScrmEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 2, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetMediumExtLineScrmEnabled.setStatus('current')
if mibBuilder.loadTexts: sonetMediumExtLineScrmEnabled.setDescription('This field describes the enabled status of the Line level Sonet Scramble mode. If this field is true(1), then Scramble mode is enabled. If this field is false(2), scramble mode is disable.')
sonetTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 9, 3))
if mibBuilder.loadTexts: sonetTraps.setStatus('current')
if mibBuilder.loadTexts: sonetTraps.setDescription('All Zhone Sonet traps will be defined under this object identity.')
sonetV2Traps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 9, 3, 0))
if mibBuilder.loadTexts: sonetV2Traps.setStatus('current')
if mibBuilder.loadTexts: sonetV2Traps.setDescription('This object identity adds a zero(0) for the next to last sub-identifier which should be used for new SNMPv2 Traps.')
sonetClockTransmitSourceChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 9, 3, 0, 1)).setObjects(("ZHONE-PHY-SONET-MIB", "sonetClockExternalRecovery"), ("ZHONE-PHY-SONET-MIB", "sonetClockTransmitSource"))
if mibBuilder.loadTexts: sonetClockTransmitSourceChange.setStatus('current')
if mibBuilder.loadTexts: sonetClockTransmitSourceChange.setDescription('A notification trap is sent when either sonetClockExternalRecovery or sonetClockTransmitSource is changed. The trap object is identified by the OID instance of sonetClockTransmitSource described in the OBJECTS clause.')
sonetSectionStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 9, 3, 0, 2)).setObjects(("SONET-MIB", "sonetSectionCurrentStatus"))
if mibBuilder.loadTexts: sonetSectionStatusChange.setStatus('current')
if mibBuilder.loadTexts: sonetSectionStatusChange.setDescription('A notification trap is sent when there is a change in the sonet SECTION status. Currenly the following are supported: NO-DEFECT = 1 LOS = 2 LOF = 4 The trap object is identified by the OID instance of sonetSectionCurrentStatus described in the OBJECTS clause.')
sonetLineStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 9, 3, 0, 3)).setObjects(("SONET-MIB", "sonetLineCurrentStatus"))
if mibBuilder.loadTexts: sonetLineStatusChange.setStatus('current')
if mibBuilder.loadTexts: sonetLineStatusChange.setDescription('A notification trap is sent when there is a change in the sonet LINE status. Currenly the following are supported: NO-DEFECT = 1 AIS = 2 RDI = 4 The trap object is identified by the OID instance of sonetLineCurrentStatus described in the OBJECTS clause.')
sonetPathStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 9, 3, 0, 4)).setObjects(("SONET-MIB", "sonetPathCurrentStatus"))
if mibBuilder.loadTexts: sonetPathStatusChange.setStatus('current')
if mibBuilder.loadTexts: sonetPathStatusChange.setDescription('A notification trap is sent when there is a change in the sonetPathCurrentStatus. Currenly the following are supported: 1 sonetPathNoDefect 2 sonetPathSTSLOP 4 sonetPathSTSAIS 8 sonetPathSTSRDI 16 sonetPathUnequipped 32 sonetPathSignalLabelMismatch The trap object is identified by the OID instance of sonetPathCurrentStatus described in the OBJECTS clause.')
zhoneSonetErrorStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6), )
if mibBuilder.loadTexts: zhoneSonetErrorStatsTable.setStatus('current')
if mibBuilder.loadTexts: zhoneSonetErrorStatsTable.setDescription('Description.')
zhoneSonetErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1), ).setIndexNames((0, "ZHONE-PHY-SONET-MIB", "zhoneSonetErrorStatsIndex"))
if mibBuilder.loadTexts: zhoneSonetErrorStatsEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneSonetErrorStatsEntry.setDescription('Description.')
zhoneSonetErrorStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneSonetErrorStatsIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneSonetErrorStatsIndex.setDescription('Description.')
zhoneSonetErrorStatsLineFebeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsLineFebeCount.setStatus('current')
if mibBuilder.loadTexts: zhoneSonetErrorStatsLineFebeCount.setDescription('Number of RLOP far-end block errors (FEBE).')
zhoneSonetErrorStatsPathFebeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsPathFebeCount.setStatus('current')
if mibBuilder.loadTexts: zhoneSonetErrorStatsPathFebeCount.setDescription('Number of RPOP far-end block errors (FEBE).')
zhoneSonetErrorStatsLineBipCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsLineBipCount.setStatus('current')
if mibBuilder.loadTexts: zhoneSonetErrorStatsLineBipCount.setDescription('Number of Receive Line Overhead Processor (RLOP) BIP-8 errors. The RLOP is responsible for line-level alarms and for monitoring performance.')
zhoneSonetErrorStatsSectionBipCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsSectionBipCount.setStatus('current')
if mibBuilder.loadTexts: zhoneSonetErrorStatsSectionBipCount.setDescription('Number of Receive Section Overhead Processor (RSOP) bit-interleaved parity (BIP)-8 errors. The RSOP synchronizes and descrambles frames and provides section-level alarms and performance monitoring.')
zhoneSonetErrorStatsPathBipCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsPathBipCount.setStatus('current')
if mibBuilder.loadTexts: zhoneSonetErrorStatsPathBipCount.setDescription('Number of Receive Path Overhead Processor (RPOP) BIP-8 errors. The RSOP interprets pointers and extracts path overhead and the synchronous payload envelope. It is also responsible for path-level alarms and for monitoring performance.')
zhoneSonetErrorStatsOofCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsOofCount.setStatus('current')
if mibBuilder.loadTexts: zhoneSonetErrorStatsOofCount.setDescription('Near end is out of frame. False indicates that the line is up and in frame.')
zhoneSonetErrorStatsRxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsRxCellCount.setStatus('current')
if mibBuilder.loadTexts: zhoneSonetErrorStatsRxCellCount.setDescription('Receive ATM Cell Processor (RACP) receive cell count.')
zhoneSonetErrorStatsTxCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsTxCellCount.setStatus('current')
if mibBuilder.loadTexts: zhoneSonetErrorStatsTxCellCount.setDescription('Transmit ATM Cell Processor (TACP) transmit cell count.')
zhoneSonetErrorStatsHecCorrectedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsHecCorrectedCount.setStatus('current')
if mibBuilder.loadTexts: zhoneSonetErrorStatsHecCorrectedCount.setDescription('Number of corrected HEC cells.')
zhoneSonetErrorStatsHecUncorrectedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsHecUncorrectedCount.setStatus('current')
if mibBuilder.loadTexts: zhoneSonetErrorStatsHecUncorrectedCount.setDescription('Number of uncorrected dropped HEC cells.')
zhoneSonetErrorStatsCellFifoOverflowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsCellFifoOverflowCount.setStatus('current')
if mibBuilder.loadTexts: zhoneSonetErrorStatsCellFifoOverflowCount.setDescription('Number of cells dropped because of first in, first out (FIFO) overflow.')
zhoneSonetErrorStatsLocdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 9, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSonetErrorStatsLocdCount.setStatus('current')
if mibBuilder.loadTexts: zhoneSonetErrorStatsLocdCount.setDescription('Loss of cell delineation.')
mibBuilder.exportSymbols("ZHONE-PHY-SONET-MIB", sonetLineStatusChange=sonetLineStatusChange, zhoneSonetErrorStatsPathBipCount=zhoneSonetErrorStatsPathBipCount, zhoneSonetErrorStatsSectionBipCount=zhoneSonetErrorStatsSectionBipCount, sonetTraps=sonetTraps, zhoneSonetErrorStatsPathFebeCount=zhoneSonetErrorStatsPathFebeCount, zhoneSonetErrorStatsRxCellCount=zhoneSonetErrorStatsRxCellCount, sonetMediumExtEntry=sonetMediumExtEntry, sonetMediumExtTable=sonetMediumExtTable, sonetClockEntry=sonetClockEntry, sonetSectionStatusChange=sonetSectionStatusChange, sonetClockExternalRecovery=sonetClockExternalRecovery, sonetClockTransmitSource=sonetClockTransmitSource, sonetMediumExtLineScrmEnabled=sonetMediumExtLineScrmEnabled, zhoneSonetErrorStatsHecCorrectedCount=zhoneSonetErrorStatsHecCorrectedCount, zhoneSonetErrorStatsTable=zhoneSonetErrorStatsTable, zhoneSonetErrorStatsIndex=zhoneSonetErrorStatsIndex, zhoneSonetErrorStatsLineFebeCount=zhoneSonetErrorStatsLineFebeCount, phySonet=phySonet, sonetV2Traps=sonetV2Traps, sonetMediumExtScrambleEnabled=sonetMediumExtScrambleEnabled, zhoneSonetErrorStatsEntry=zhoneSonetErrorStatsEntry, zhoneSonetErrorStatsLineBipCount=zhoneSonetErrorStatsLineBipCount, PYSNMP_MODULE_ID=phySonet, zhoneSonetErrorStatsHecUncorrectedCount=zhoneSonetErrorStatsHecUncorrectedCount, sonetPathStatusChange=sonetPathStatusChange, sonetClockTransmitSourceChange=sonetClockTransmitSourceChange, sonetClockTable=sonetClockTable, zhoneSonetErrorStatsCellFifoOverflowCount=zhoneSonetErrorStatsCellFifoOverflowCount, zhoneSonetErrorStatsOofCount=zhoneSonetErrorStatsOofCount, zhoneSonetErrorStatsLocdCount=zhoneSonetErrorStatsLocdCount, zhoneSonetErrorStatsTxCellCount=zhoneSonetErrorStatsTxCellCount)
