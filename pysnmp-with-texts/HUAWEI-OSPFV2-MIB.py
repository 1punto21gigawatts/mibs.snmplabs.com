#
# PySNMP MIB module HUAWEI-OSPFV2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-OSPFV2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:47:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ospfNbrIpAddr, ospfRouterId, ospfNbrRtrId, ospfLsdbLsid, ospfNbrState, ospfLsdbRouterId, ospfNbrAddressLessIndex = mibBuilder.importSymbols("OSPF-MIB", "ospfNbrIpAddr", "ospfRouterId", "ospfNbrRtrId", "ospfLsdbLsid", "ospfNbrState", "ospfLsdbRouterId", "ospfNbrAddressLessIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, TimeTicks, Counter32, Gauge32, Integer32, iso, Counter64, IpAddress, Bits, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "Counter32", "Gauge32", "Integer32", "iso", "Counter64", "IpAddress", "Bits", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32")
TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
hwOspfv2MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155))
if mibBuilder.loadTexts: hwOspfv2MIB.setLastUpdated('201004221150Z')
if mibBuilder.loadTexts: hwOspfv2MIB.setOrganization('Huawei Technologies co., Ltd.')
if mibBuilder.loadTexts: hwOspfv2MIB.setContactInfo('R&D BeiJing Huawei Technologies co., Ltd. Huawei Bld., NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China http://www.huawei.com Zip:100085 Http://www.huawei.com E-mail:support@huawei.com')
if mibBuilder.loadTexts: hwOspfv2MIB.setDescription('The HUAWEI-OSPFV2-MIB contains objects to manage the system configuration. It defines the model used to represent configuration data that exists elsewhere in the system and on peripheral devices. The MIB is proper for system configuration. There are no constraints on this MIB.')
hwOspfv2MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 1))
hwOspfv2MIBBinding = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwOspfv2MIBBinding.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2MIBBinding.setDescription('The ID of OSPF process that is bound to OSPF public MIB and the process will respond to SNMP requests from OSPF public MIB. The default value 0 means that no process is bound to OSPF public MIB.')
hwOspfv2ChangeTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 2))
hwOspfv2MIBObjectsChange = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 2, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2MIBObjectsChange.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2MIBObjectsChange.setDescription('This node is used to record the time ticks when hwOspfv2MIBObjectsTable changed last time.')
hwOspfv2ProcessChange = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 2, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2ProcessChange.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2ProcessChange.setDescription('This node is used to record the time ticks when hwOspfv2ProcessTable changed last time.')
hwOspfv2AreaChange = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2AreaChange.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaChange.setDescription('This node is used to record the time ticks when hwOspfv2AreaTable changed last time.')
hwOspfv2NetworkChange = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 2, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2NetworkChange.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NetworkChange.setDescription('This node is used to record the time ticks when hwOspfv2NetworkTable changed last time.')
hwOspfv2ProcessTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3), )
if mibBuilder.loadTexts: hwOspfv2ProcessTable.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2ProcessTable.setDescription("Information describes the configured parameters of the router's attached OSPF processes.")
hwOspfv2ProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1), ).setIndexNames((0, "HUAWEI-OSPFV2-MIB", "hwOspfv2ProcessIdIndex"))
if mibBuilder.loadTexts: hwOspfv2ProcessEntry.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2ProcessEntry.setDescription("Information describes the configured parameters of the router's attached OSPF processes.")
hwOspfv2ProcessIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwOspfv2ProcessIdIndex.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2ProcessIdIndex.setDescription('The process ID indicates the OSPF process number. The value ranges from 1 to 65535.')
hwOspfv2VpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2VpnName.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2VpnName.setDescription('The name of VPN instance to which the process belongs. The process instance needs to be specified when the process is created, and then cannot be changed.')
hwOspfv2ConfigRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2ConfigRouterId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2ConfigRouterId.setDescription('A 32-bit integer uniquely identifies the router in the Autonomous System. OSPF private router ID can be configured through this node. The default value is 0.0.0.0. If the value of this node is 0.0.0.0, it means that no private router ID is set for this process. ')
hwOspfv2ActualRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2ActualRouterId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2ActualRouterId.setDescription("This node is used to get actual router ID of process and it is a read-only node. If the node hwOspfv2ConfigRouterId is not set, the actual router ID should default to the value of one of the router's IP interface addresses. By default, the value is '00000000'H.")
hwOspfv2BandwidthReference = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 5), Unsigned32().clone(100)).setUnits('Mbit/s').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2BandwidthReference.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2BandwidthReference.setDescription('The reference value that is used to calculate the link cost. If there is no explicit link cost, OSPF calculates the cost according to the bandwidth of the link (cost = reference value (M)/bandwidth).')
hwOspfv2Description = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2Description.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2Description.setDescription('The description of the OSPF process.')
hwOspfv2LsaArriveIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 10000), )).clone(-1)).setUnits('millionSecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2LsaArriveIntvl.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2LsaArriveIntvl.setDescription('To avoid wasting network resources due to network changes, OSPF defines that the interval for receiving LSAs is 1 second. In a stable network, if the fast speed of route convergence is required, you can cancel the interval of receiving LSAs by setting it to 0 seconds. Routers can thus detect changes of topology and route in time. This speeds up route convergence. By default, this object is -1, indicating that an intelligent timer is enabled instead. Note that -1 is not a configurable value. Instead, by set the intelligent timer (hwOspfv2LsaArriveMaxIntvl, hwOspfv2LsaArriveStartIntvl and hwOspfv2LsaArriveHoldIntvl) to default value, it will get back to default configuration.')
hwOspfv2LsaArriveMaxIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 10000), )).clone(1000)).setUnits('millionSecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2LsaArriveMaxIntvl.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2LsaArriveMaxIntvl.setDescription('This object indicates the maximum interval of intelligent-timer for receiving OSPF LSAs. When hwOspfv2LsaArriveMaxIntvl is specified, you need also specify hwOspfv2LsaArriveStartIntvl and hwOspfv2LsaArriveHoldIntvl, but you cannot specify hwOspfv2LsaArriveIntvl. Note that -1 is not a configurable value. Instead, by set the intelligent timer to default value, it will get back to default configuration.')
hwOspfv2LsaArriveStartIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 1000), )).clone(500)).setUnits('millionSecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2LsaArriveStartIntvl.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2LsaArriveStartIntvl.setDescription('This object indicates the initial interval of intelligent-timer for receiving OSPF LSAs. When hwOspfv2LsaArriveStartIntvl is specified, you need also specify hwOspfv2LsaArriveMaxIntvl and hwOspfv2LsaArriveHoldIntvl, but you cannot specify hwOspfv2LsaArriveIntvl. Note that -1 is not a configurable value. Instead, by set the intelligent timer to default value, it will get back to default configuration.')
hwOspfv2LsaArriveHoldIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 5000), )).clone(500)).setUnits('millionSecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2LsaArriveHoldIntvl.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2LsaArriveHoldIntvl.setDescription('This object indicates the Holdtime interval of intelligent-timer for receiving OSPF LSAs. After an intelligent timer is enabled, the interval for receiving LSAs is as follows: The initial interval for receiving LSAs is specified by the parameter start-interval. The interval for receiving LSAs for the nth (n>2) time is equal to hold-interval*2(n-1). When the interval specified by hold-interval*2(n-1) reaches the maximum interval specified by max-interval, OSPF receives LSAs at the maximum interval for three consecutive times. Then, OSPF receives LSAs at the initial interval specified by start-interval. When hwOspfv2LsaArriveHoldIntvl is specified, you need also specify wOspfv2LsaArriveMaxIntvl and hwOspfv2LsaArriveStartIntvl, but you cannot specify hwOspfv2LsaArriveIntvl. Note that -1 is not a configurable value. Instead, by set the intelligent timer to default value, it will get back to default configuration.')
hwOspfv2LsaOrigIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), )).clone(-1)).setUnits('millionSecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2LsaOrigIntvl.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2LsaOrigIntvl.setDescription('To avoid wasting network source due to network changes, OSPF defines that the interval for updating LSAs is 5 seconds. In a stable network, if the speed of route convergence is required to be fast, you can cancel the interval for updating LSAs by setting it to 0 seconds. So, routers can detect changes of topology and route in time. This speeds up route convergence. By default, this object is -1, indicating that an intelligent timer is enabled instead. Note that -1 is not a configurable value. Instead, by set the intelligent timer (hwOspfv2LsaOrigMaxIntvl, hwOspfv2LsaOrigStartIntvl, and hwOspfv2LsaOrigHoldIntvl) to default value, it will get back to default configuration.')
hwOspfv2LsaOrigMaxIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 10000), )).clone(5000)).setUnits('millionSecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2LsaOrigMaxIntvl.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2LsaOrigMaxIntvl.setDescription('This object indicates the maximum interval of intelligent-timer for updating OSPF LSAs. When hwOspfv2LsaOrigMaxIntvl is specified, you need also specify hwOspfv2LsaOrigStartIntvl and hwOspfv2LsaOrigHoldIntvl, but you cannot specify hwOspfv2LsaOrigIntvl. Note that -1 is not a configurable value. Instead, by set the intelligent timer to default value, it will get back to default configuration.')
hwOspfv2LsaOrigStartIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 1000), )).clone(500)).setUnits('millionSecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2LsaOrigStartIntvl.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2LsaOrigStartIntvl.setDescription('This object indicates the initial interval of intelligent-timer for updating OSPF LSAs. When hwOspfv2LsaOrigStartIntvl is specified, you need also specify hwOspfv2LsaOrigMaxIntvl and hwOspfv2LsaOrigHoldIntvl, but you cannot specify hwOspfv2LsaOrigIntvl. Note that -1 is not a configurable value. Instead, by set the intelligent timer to default value, it will get back to default configuration.')
hwOspfv2LsaOrigHoldIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 5000), )).clone(1000)).setUnits('millionSecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2LsaOrigHoldIntvl.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2LsaOrigHoldIntvl.setDescription('This object indicates the Holdtime interval of intelligent-timer for updating OSPF LSAs. After an intelligent timer is enabled, the interval for updating LSAs is as follows: The initial interval for updating LSAs is specified by the parameter start-interval. The interval for updating LSAs for the nth (n>2) time is equal to hold-interval*2(n-1). When the interval specified by hold-interval*2(n-1) reaches the maximum interval specified by max-interval, OSPF updates LSAs at the maximum interval for three consecutive times. Then, OSPF updates LSAs at the initial interval specified by start-interval. When hwOspfv2LsaOrigHoldIntvl is specified, you need also specify hwOspfv2LsaOrigMaxIntvl and hwOspfv2LsaOrigStartIntvl, but you cannot specify hwOspfv2LsaOrigIntvl. Note that -1 is not a configurable value. Instead, by set the intelligent timer to default value, it will get back to default configuration.')
hwOspfv2LsaOrigIntvlOtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 10), )).clone(5)).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2LsaOrigIntvlOtherType.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2LsaOrigIntvlOtherType.setDescription('This object indicates the interval for updating LSAs, excluding OSPF router LSAs and network LSAs. hwOspfv2LsaOrigIntvlOtherType and hwOspfv2LsaOrigIntvl cannot be specified together. Here -1 indicated that hwOspfv2LsaOrigIntvl is enabled instead. Note that -1 is not a configurable value. Instead, by set this node to default value, it will get back to default configuration. ')
hwOspfv2LsdbOverflowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2LsdbOverflowLimit.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2LsdbOverflowLimit.setDescription('The maximum number of external LSAs in OSPF LSDB. When this node is set to 0, it means that no limits exist.')
hwOspfv2MaxLoadBalaNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 17), Integer32().clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2MaxLoadBalaNumber.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2MaxLoadBalaNumber.setDescription('The maximum number of equal-cost routes to a destination in the routing table.')
hwOspfv2AseRouteMaxNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000000)).clone(5000000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AseRouteMaxNumber.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AseRouteMaxNumber.setDescription('The maximum number of ASE routes that are supported by OSPF.')
hwOspfv2InterRouteMaxNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000000)).clone(1000000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2InterRouteMaxNumber.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2InterRouteMaxNumber.setDescription('The maximum number of inter-area routes that are supported by OSPF.')
hwOspfv2IntraRouteMaxNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000)).clone(100000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2IntraRouteMaxNumber.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2IntraRouteMaxNumber.setDescription('The maximum number of intra-area routes that are supported by OSPF.')
hwOspfv2RetransLimitMaxNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2RetransLimitMaxNumber.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2RetransLimitMaxNumber.setDescription('The maximum count of retransmission. The value is an integer that ranges from 2 to 255. When the retransmission limit is disabled, the value is set to 0.')
hwOspfv2Rfc1583Compatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 22), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2Rfc1583Compatibility.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2Rfc1583Compatibility.setDescription('It is used to enable the routing rule for compatible RFC 1583.')
hwOspfv2ShamHello = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 23), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2ShamHello.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2ShamHello.setDescription('It is used to enable the sham-hello feature of OSPF. After the feature is enabled, OSPF updates the timeout timer of the neighbor when receiving protocol packets of various types.')
hwOspfv2SpfSchIntvlUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("second", 1), ("millionSecond", 2), ("none", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2SpfSchIntvlUnit.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2SpfSchIntvlUnit.setDescription('The value of the object identifies the interval unit for OSPF to calculate routes. This object must be specified together with hwOspfv2SpfSchIntervalNumber. By default, this object is none, indicating that an intelligent timer is enabled instead. Note that none is not a configurable value. Instead, by set the intelligent timer (hwOspfv2SpfSchMaxIntvl, hwOspfv2SpfSchStartIntvl, and hwOspfv2SpfSchHoldIntvl) to default value, it will get back to default configuration.')
hwOspfv2SpfSchIntvlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10000), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2SpfSchIntvlNumber.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2SpfSchIntvlNumber.setDescription('The value of the object identifies the interval for OSPF to calculate routes. This object must be specified together with hwOspfv2SpfSchIntervalUnit. By default, this object is -1, indicating that an intelligent timer is enabled instead. Note that -1 is not a configurable value. Instead, by set the intelligent timer (hwOspfv2SpfSchMaxIntvl, hwOspfv2SpfSchStartIntvl, and hwOspfv2SpfSchHoldIntvl) to default value, it will get back to default configuration.')
hwOspfv2SpfSchMaxIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 20000), )).clone(10000)).setUnits('millionSecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2SpfSchMaxIntvl.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2SpfSchMaxIntvl.setDescription('This object indicates the maximum interval of intelligent timer for OSPF to perform the SPF calculation. When hwOspfv2SpfSchMaxIntvl is specified, you need also specify hwOspfv2SpfSchStartIntvl and hwOspfv2SpfSchHoldIntvl, but you cannot specify hwOspfv2SpfSchIntvlUnit or hwOspfv2SpfSchIntvlNumber. Note that -1 is not a configurable value. Instead, by set the intelligent timer to default value, it will get back to default configuration.')
hwOspfv2SpfSchStartIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 1000), )).clone(500)).setUnits('millionSecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2SpfSchStartIntvl.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2SpfSchStartIntvl.setDescription('This object indicates the initial interval of intelligent timer for OSPF to perform the SPF calculation. When hwOspfv2SpfSchStartIntvl is specified, you need also specify hwOspfv2SpfSchMaxIntvl and hwOspfv2SpfSchHoldIntvl, but you cannot specify hwOspfv2SpfSchIntvlUnit or hwOspfv2SpfSchIntvlNumber. Note that -1 is not a configurable value. Instead, by set the intelligent timer to default value, it will get back to default configuration.')
hwOspfv2SpfSchHoldIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 5000), )).clone(1000)).setUnits('millionSecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2SpfSchHoldIntvl.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2SpfSchHoldIntvl.setDescription('This object indicates the Holdtime interval of intelligent timer for OSPF to perform the SPF calculation. After an intelligent timer is enabled, the interval for the SPF calculation is as follows: The initial interval for the SPF calculation is specified by the parameter start-interval. The interval for the SPF calculation for the nth (n>2) time is equal to hold-interval*2(n-1). When the interval specified by hold-interval*2(n-1) reaches the maximum interval specified by max-interval, OSPF performs the SPF calculation at the maximum interval for three consecutive times. Then, OSPF performs the SPF calculation at the initial interval specified by start-interval. When hwOspfv2SpfSchHoldIntvl is specified, you need also specify hwOspfv2SpfSchMaxIntvl and hwOspfv2SpfSchStartIntvl, but you cannot specify hwOspfv2SpfSchIntvlUnit or hwOspfv2SpfSchIntvlNumber. Note that -1 is not a configurable value. Instead, by set the intelligent timer to default value, it will get back to default configuration.')
hwOspfv2OpaqueCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 29), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2OpaqueCapability.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2OpaqueCapability.setDescription('It is used to enable opaque-LSAs capability. When the capability is enabled, then the OSPF process can generate opaque LSAs and process the opaque LSAs received from neighbors.')
hwOspfv2TrafficAdjustment = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 30), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2TrafficAdjustment.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2TrafficAdjustment.setDescription('It is used to enable IGP-shortcut feature. The value false means disable. Otherwise, the value true means enable. If you want to set this node to false, please check whether Local MT feature is disabled. When Local MT feature is enabled, this node cannot be set to false.')
hwOspfv2TrafficAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 31), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2TrafficAdvertise.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2TrafficAdvertise.setDescription('It is used to enable IGP-shortcut and Forwarding Adjacency feature.')
hwOspfv2FlushTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2FlushTimer.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2FlushTimer.setDescription('The value of the flush timer. When configuring or undoing OSPF process, flush self-originated LSAs first. If the timer expires, stop flushing LSAs, and then reset the process. This timer is one-off. When flushing is finished, it recovers to 0.')
hwOspfv2ProcessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 3, 1, 33), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2ProcessRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2ProcessRowStatus.setDescription('This node is used to create and destroy rows. Because CreateAndWait is not supported, you can set this node to CreatAndGo to create a new process. If the process is created successfully, the value of this node changes to active.')
hwOspfv2AreaTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4), )
if mibBuilder.loadTexts: hwOspfv2AreaTable.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaTable.setDescription("Information describes the configured parameters of the router's attached OSPF areas.")
hwOspfv2AreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1), ).setIndexNames((0, "HUAWEI-OSPFV2-MIB", "hwOspfv2ProcessIdIndex"), (0, "HUAWEI-OSPFV2-MIB", "hwOspfv2AreaIdIndex"))
if mibBuilder.loadTexts: hwOspfv2AreaEntry.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaEntry.setDescription(" Information describes the configured parameters of the router's attached OSPF areas.")
hwOspfv2AreaIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: hwOspfv2AreaIdIndex.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaIdIndex.setDescription('A 32-bit integer uniquely identifies an area. Area ID 0.0.0.0 is used for the OSPF backbone.')
hwOspfv2AreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nssa", 1), ("stub", 2), ("normal", 3))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaType.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaType.setDescription('Specify the type of area: nssa(1), stub(2), normal(3).')
hwOspfv2AreaNoSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaNoSummary.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaNoSummary.setDescription('This node is used to reduce the number of LSAs that are transmitted to the NSSA or Stub area. You can configure this node as an ABR. This also prevents the ABR from transmitting Summary LSA (Type-3 LSA) to the NSSA or Stub area. Note: All nodes about NSSA property (hwOspfv2AreaType, hwOspfv2AreaNoSummary, hwOspfv2AreaNssaFlushTimer, hwOspfv2AreaNssaNoImportRoute, hwOspfv2AreaNssaDefAdvertise, hwOspfv2AreaNssaTransAlways, hwOspfv2AreaNssaTransTimer, hwOspfv2AreaNssaAllowFaZero, hwOspfv2AreaNssaSuppressFa, and hwOspfv2AreaNssaSetNBit) should be set together.')
hwOspfv2AreaNssaFlushTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaNssaFlushTimer.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaNssaFlushTimer.setDescription('The value of the flush timer. When configuring or undoing NSSA feature, flush self-originated Type-5 and Type-7 LSAs first. If the timer expires, stop flushing LSAs, and then reset the area. This timer is one-off. When flushing is finished, it recovers to 0. ')
hwOspfv2AreaNssaDefAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaNssaDefAdvertise.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaNssaDefAdvertise.setDescription('This node is used to decide whether default Type-7 LSAs should be originated. When this node is set to true, for ABR router it must originate Type-7 LSAs, while for ASBR router only if the route to 0.0.0.0 exists, it should originate Type-7 LSAs.')
hwOspfv2AreaNssaNoImportRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaNssaNoImportRoute.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaNssaNoImportRoute.setDescription('This node is used to decide whether the external route is imported to NSSA area. On ASBR, if this node is set to true, the external route can not be advertised to the NSSA area.')
hwOspfv2AreaNssaTransAlways = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaNssaTransAlways.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaNssaTransAlways.setDescription('This node specifies whether or not an NSSA router will unconditionally translate Type-7 LSAs to Type-5 LSAs when acting as an NSSA border router. When hwOspfAreaNssaTranslateAlways is set to true, Type-7 LSAs are always translated regardless of the translator state of other NSSA border routers. When hwOspfAreaNssaTranslateAlways is set to false, an NSSA border router will participate in the translator election process. The router will translate Type-7 LSAs to Type-5 LSAs only after being selected.')
hwOspfv2AreaNssaTransTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaNssaTransTimer.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaNssaTransTimer.setDescription('This node is used to configure translator stability interval. This minimizes excessive flushing of translated Type-7 LSAs and provides a more stable translator transition. If the area type is not NSSA, the default value of the translator stability interval parameter is 0 seconds, and hwOspfv2AreaType is stub(2) or normal(3). If the type of the area is NSSA, the default value of the translator stability interval parameter is 40 seconds, and hwOspfv2AreaType is nssa(1).')
hwOspfv2AreaNssaAllowFaZero = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaNssaAllowFaZero.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaNssaAllowFaZero.setDescription('When this node is set to true, the forwarding address of Type-7 LSAs can be filled with zero when the router generates Type-7 LSAs.')
hwOspfv2AreaNssaSuppressFa = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaNssaSuppressFa.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaNssaSuppressFa.setDescription('When this node is set to true, the forwarding address of Type-7 LSAs can be filled with zero when the ABR translates Type-7 LSAs into Type-5 LSAs.')
hwOspfv2AreaNssaSetNBit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaNssaSetNBit.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaNssaSetNBit.setDescription('When this node is set to true, N-bit should be set in the option when sending DD packets.')
hwOspfv2AreaDefCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 16777214), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaDefCost.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaDefCost.setDescription('This node is used to specify the cost of the default routes that flush to stub area by the ABR. The value ranges from 0 to 16777214. The default value is -1.')
hwOspfv2AreaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaDescription.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaDescription.setDescription('This node is used to specify the description of the area.')
hwOspfv2AreaFilterExpAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 2999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaFilterExpAcl.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaFilterExpAcl.setDescription('This object indicates the number of basic ACL. The ACL number ranges from 2000 to 2999. The default value is 0, indicating no configuration. The object is used to filter the Summary LSAs that leave the area. It is incompatible with hwOspfv2AreaFilterExpAclName, hwOspfv2AreaFilterExpPrefix, and hwOspfv2AreaFilterExpPolicy. Only one object can be configured each time.')
hwOspfv2AreaFilterExpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 169)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaFilterExpPrefix.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaFilterExpPrefix.setDescription('This object indicates the name of the address prefix list. The name is a string of 1 to 169 characters. The object is used to filter the Summary LSAs that leave the area. It is incompatible with hwOspfv2AreaFilterExpAcl, hwOspfv2AreaFilterExpAclName, and hwOspfv2AreaFilterExpPolicy. Only one object can be configured each time.')
hwOspfv2AreaFilterExpPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaFilterExpPolicy.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaFilterExpPolicy.setDescription('This object indicates the name of the routing policy. The name is a string of 1 to 40 characters. The object is used to filter the Summary LSAs that leave the area. It is incompatible with hwOspfv2AreaFilterExpAcl, hwOspfv2AreaFilterExpAclName, and hwOspfv2AreaFilterExpPrefix. Only one object can be configured each time.')
hwOspfv2AreaFilterImpAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 2999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaFilterImpAcl.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaFilterImpAcl.setDescription('This object indicates the number of basic ACL. The value ranges from 2000 to 2999. The default value is 0, indicating no configuration. The object is used to filter the Summary LSAs that enter the area. It is incompatible with hwOspfv2AreaFilterImpAclName, hwOspfv2AreaFilterImpPrefix, and hwOspfv2AreaFilterImpPolicy. Only one object can be configured each time.')
hwOspfv2AreaFilterImpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 169)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaFilterImpPrefix.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaFilterImpPrefix.setDescription('This object indicates the name of the address prefix list. The name is a string of 1 to 169 characters. The object is used to filter the Summary LSAs that enter the area. It is incompatible with hwOspfv2AreaFilterImpAcl, hwOspfv2AreaFilterImpAclName, and hwOspfv2AreaFilterImpPolicy. Only one node can be configured each time.')
hwOspfv2AreaFilterImpPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaFilterImpPolicy.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaFilterImpPolicy.setDescription('This object indicates the name of the routing policy. The name is a string of 1 to 40 characters. The object is used to filter the Summary LSAs that enter the area. It is incompatible with hwOspfv2AreaFilterImpAcl, hwOspfv2AreaFilterImpAclName and hwOspfv2AreaFilterImpPrefix. Only one node can be configured each time.')
hwOspfv2AreaAuthModeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("md5", 3), ("hmd5", 4), ("keychain", 5))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaAuthModeType.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaAuthModeType.setDescription('The type of the OSPF area authentication mode. none(1): not configured. simple(2): indicates the simple authentication mode. md5(3): indicates the md5 cipher mode. hmd5(4): indicates the hmac-md5 cipher mode. keychain(5): indicates the keychain authentication mode. Note: If this value is set to simple(2), you should specify hwOspfv2AreaAuthPasswordType and hwOspfv2AreaAuthText, but cannot specify hwOspfv2AreaAuthKeyId. To configure the simple authentication mode with the authentication key being NULL, set hwOspfv2AreaAuthPasswordType to plainText(2) and set hwOspfv2AreaAuthText to a string of 0 characters. If this value is set to md5(3) or hmd5(4), you can specify hwOspfv2AreaAuthKeyId or not. Once you specify hwOspfv2AreaAuthKeyId, you should specify hwOspfv2AreaAuthPasswordType and hwOspfv2AreaAuthText at the same time. If this value is set to keychain(5), you should specify it and hwOspfv2AreaAuthText together, but should not specify hwOspfv2AreaAuthKeyId and hwOspfv2AreaAuthPasswordType.')
hwOspfv2AreaAuthPasswordType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("plainText", 2), ("cipherText", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaAuthPasswordType.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaAuthPasswordType.setDescription('Specify the type of area authentication key. plaintext(2): If this node is set to plaintext(2), you can specify only the plain text authentication key on the node hwOspfAreaAuthText. When viewing the configuration file, display the password in plain mode. ciphertext(3): If this node is set to ciphertext(3), you can specify the cipher text authentication key or cipher text authentication key in node hwOspfv2AreaAuthText. When viewing the configuration file, display the password in cipher mode. Note: If you set this node to plaintext(2) or ciphertext(3), you should set the node hwOspfv2AreaAuthText at the same time.')
hwOspfv2AreaAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaAuthKeyId.setDescription('Specify the authentication key ID for MD5 or HMAC-MD5 authentication mode. The value of the ID is an integer that ranges from 1 to 255. The default value 0 means no configuration.')
hwOspfv2AreaAuthText = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 23), DisplayString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaAuthText.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaAuthText.setDescription("In simple authentication, this object indicates the authentication key. It's a string of 1 to 8 characters in plain text or 24 characters in cipher text. In MD5 or HMAC-MD5 authentication, this object also indicates the authentication key. It's a string of 1 to 255 characters in plain text or 20 to 392 characters in cipher text. In keychain authentication, this object indicates the keychain name. It's a string of 1 to 47 characters. When read, hwOspfv2AreaAuthText always returns an octet string of length zero.")
hwOspfv2AreaMplsTe = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("stdEnable", 2), ("stdDisable", 3))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaMplsTe.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaMplsTe.setDescription('The node is used to enable the MPLS-TE capability. disable(1): no configuration. stdEnable(2): accepts only the LSAs in the standard format. That is, an LSA is rejected if it has more than one Top level TLV. stdDisable(3): accepts the LSAs not in the standard format.')
hwOspfv2AreaAreaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 25), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaAreaRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaAreaRowStatus.setDescription('This node is used to create and destroy rows. Because CreateAndWait is not supported, you can set this node to CreatAndGo to create a new area. If the area is created successfully, the value of this node changes to active.')
hwOspfv2AreaFilterExpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaFilterExpAclName.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaFilterExpAclName.setDescription('This object indicates the ACL name. Note that the ACL can only be used as basic ACL. The object is used to filter the Summary LSAs that leave the area. It is incompatible with hwOspfv2AreaFilterExpAcl, hwOspfv2AreaFilterExpPrefix, and hwOspfv2AreaFilterExpPolicy. Only one object can be configured each time.')
hwOspfv2AreaFilterImpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 4, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2AreaFilterImpAclName.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaFilterImpAclName.setDescription('This object indicates the ACL name. Note that the ACL can only be used as basic ACL. The object is used to filter the Summary LSAs that enter the area. It is incompatible with hwOspfv2AreaFilterImpAcl, hwOspfv2AreaFilterImpPrefix, and hwOspfv2AreaFilterImpPolicy. Only one object can be configured each time.')
hwOspfv2NetworkTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 5), )
if mibBuilder.loadTexts: hwOspfv2NetworkTable.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NetworkTable.setDescription("Information describes the configured parameters of the router's attached OSPF networks.")
hwOspfv2NetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 5, 1), ).setIndexNames((0, "HUAWEI-OSPFV2-MIB", "hwOspfv2ProcessIdIndex"), (0, "HUAWEI-OSPFV2-MIB", "hwOspfv2AreaIdIndex"), (0, "HUAWEI-OSPFV2-MIB", "hwOspfv2NetworkIpAddrIndex"), (0, "HUAWEI-OSPFV2-MIB", "hwOspfv2NetworkIpMaskIndex"))
if mibBuilder.loadTexts: hwOspfv2NetworkEntry.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NetworkEntry.setDescription("Information describes the configured parameters of the router's attached OSPF networks.")
hwOspfv2NetworkIpAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: hwOspfv2NetworkIpAddrIndex.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NetworkIpAddrIndex.setDescription('Network IP address: specifies the address of the network segment where the interface resides.')
hwOspfv2NetworkIpMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwOspfv2NetworkIpMaskIndex.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NetworkIpMaskIndex.setDescription("Network IP mask: specifies the wildcard mask of an IP address, which is similar to the reversed form of the mask of an IP address. '1' represents that the corresponding bit in the IP address is ignored and '0' represents that this bit must be reserved.")
hwOspfv2NetworkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv2NetworkRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NetworkRowStatus.setDescription('This node is used to create and destroy rows. Because CreateAndWait is not supported, you can set this node to CreatAndGo to create a new network. If the network is created successfully, the value of this node changes to active.')
hwOspfv2NeighborTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 6), )
if mibBuilder.loadTexts: hwOspfv2NeighborTable.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NeighborTable.setDescription('This object indicates the configured parameters of the OSPF neighbors attached to the router.')
hwOspfv2NeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 6, 1), ).setIndexNames((0, "HUAWEI-OSPFV2-MIB", "hwOspfv2ProcessIdIndex"), (0, "HUAWEI-OSPFV2-MIB", "hwOspfv2AreaIdIndex"), (0, "HUAWEI-OSPFV2-MIB", "hwOspfv2SelfIfnetIndex"), (0, "HUAWEI-OSPFV2-MIB", "hwOspfv2NbrIpAddrIndex"))
if mibBuilder.loadTexts: hwOspfv2NeighborEntry.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NeighborEntry.setDescription('This object indicates the configured parameters of the OSPF neighbors attached to the router.')
hwOspfv2SelfIfnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwOspfv2SelfIfnetIndex.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2SelfIfnetIndex.setDescription('This object indicates the unique value for each interface.')
hwOspfv2NbrIpAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwOspfv2NbrIpAddrIndex.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NbrIpAddrIndex.setDescription('This object indicates the IP address of the OSPF neighbor.')
hwOspfv2SelfRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2SelfRouterId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2SelfRouterId.setDescription('This object indicates the 32-bit integer that uniquely identifies the router in the Autonomous System. It is the router ID of itself.')
hwOspfv2SelfIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2SelfIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2SelfIfIpAddress.setDescription('This object indicates the IP address of the OSPF interface associated with this neighbor.')
hwOspfv2SelfIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2SelfIfName.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2SelfIfName.setDescription('The name of the OSPF interface associated with this neighbor.')
hwOspfv2NbrIfDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 6, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2NbrIfDesignatedRouter.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NbrIfDesignatedRouter.setDescription("This object indicates the IP address of the designated router that is obtained from the DD packets from this neighbor. By default, the value is '00000000'H.")
hwOspfv2NbrIfBackupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 6, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2NbrIfBackupDesignatedRouter.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NbrIfBackupDesignatedRouter.setDescription("This object indicates the IP address of the backup designated router which is obtained from the DD packets from this neighbor. By default, the value is '00000000'H.")
hwOspfv2NbrIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2NbrIfMtu.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NbrIfMtu.setDescription('This object indicates the size of the largest IP datagram that can be sent out the sending interface without fragmentation. It is obtained from the DD packets from this neighbor. By default, the value is 0. The MTU of the interface should be set to 0 in the DD packets when the MTU is not enabled on the OSPF interface.')
hwOspfv2NbrRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 6, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2NbrRouterId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NbrRouterId.setDescription('This object indicates the router ID of this neighbor.')
hwOspfv2NbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2NbrState.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NbrState.setDescription('This object indicates the state of the relationship with this neighbor. By default, the state is down.')
hwOspfv2NbrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2NbrMode.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NbrMode.setDescription('This object indicates whether this neighbor is master or slave through the DD negotiation.')
hwOspfv2NbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2NbrPriority.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NbrPriority.setDescription('This object indicates the priority of this neighbor in the designated router election algorithm. The value 0 signifies that the neighbor is not eligible to become the designated router on this particular network. By default, the value is 1.')
hwOspfv2NbrUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 6, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2NbrUpTime.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NbrUpTime.setDescription('This object indicates the time (in seconds) since the state of this neighbor has been full.')
hwOspfv2NbrAuthSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 6, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2NbrAuthSequence.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NbrAuthSequence.setDescription('This object indicates the unsigned 32-bit non-decreasing sequence number. Used to guard against replay attacks. By default, the value is 0.')
hwOspfv2NbrDeadTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 6, 1, 15), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 235926000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2NbrDeadTimeLeft.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NbrDeadTimeLeft.setDescription('This object indicates the period (in seconds) after which this neighbor is declared dead.')
hwOspfv2NbrGrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("doingGR", 2), ("helper", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2NbrGrStatus.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NbrGrStatus.setDescription('This object indicates whether the neighbor performs GR or functions as a GR helper. By default, the state is normal.')
hwOspfv2InterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 7), )
if mibBuilder.loadTexts: hwOspfv2InterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2InterfaceTable.setDescription('The Interface Table describes the interfaces from the viewpoint of OSPF.')
hwOspfv2InterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 7, 1), ).setIndexNames((0, "HUAWEI-OSPFV2-MIB", "hwOspfv2ProcessIdIndex"), (0, "HUAWEI-OSPFV2-MIB", "hwOspfv2AreaIdIndex"), (0, "HUAWEI-OSPFV2-MIB", "hwOspfv2InterfaceIndex"))
if mibBuilder.loadTexts: hwOspfv2InterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2InterfaceEntry.setDescription('Information describes the configured parameters of the OSPF interfaces.')
hwOspfv2InterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: hwOspfv2InterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2InterfaceIndex.setDescription('A unique value for each interface.')
hwOspfv2InterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv2InterfaceName.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2InterfaceName.setDescription('The name of the OSPF interface.')
hwOspfv2TrapsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 30))
hwOspfv2NbrChgReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 100))).clone(namedValues=NamedValues(("adjacencyHoldTimerExpired", 1), ("physicalInterfaceChange", 2), ("ospfProtocolReason", 3), ("bfdSessionStateChange", 4), ("configureChange", 5), ("peerRouterReason", 6), ("waitingForEstablishingNeighbor", 7), ("alarmCleared", 100)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwOspfv2NbrChgReason.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NbrChgReason.setDescription('The reason of the OSPF neighbor state change.')
hwOspfv2IfChgReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 30, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("configureChange", 1), ("physicalInterfaceChange", 2), ("alarmCleared", 100)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwOspfv2IfChgReason.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2IfChgReason.setDescription('The reason of the OSPF interface state change.')
hwOspfv2Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 31))
hwOspfV2NeighborUnavailable = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 31, 1)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfNbrIpAddr"), ("OSPF-MIB", "ospfNbrAddressLessIndex"), ("OSPF-MIB", "ospfNbrRtrId"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2SelfIfName"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2VpnName"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2NbrChgReason"))
if mibBuilder.loadTexts: hwOspfV2NeighborUnavailable.setStatus('current')
if mibBuilder.loadTexts: hwOspfV2NeighborUnavailable.setDescription('These objects are used to monitor/manage changed OSPF neighbor alarm parameters.')
hwOspfV2NeighborUnavailableClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 31, 2)).setObjects(("OSPF-MIB", "ospfRouterId"), ("OSPF-MIB", "ospfNbrIpAddr"), ("OSPF-MIB", "ospfNbrAddressLessIndex"), ("OSPF-MIB", "ospfNbrRtrId"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2SelfIfName"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2VpnName"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2NbrChgReason"))
if mibBuilder.loadTexts: hwOspfV2NeighborUnavailableClear.setStatus('current')
if mibBuilder.loadTexts: hwOspfV2NeighborUnavailableClear.setDescription('These objects are used to monitor/manage changed OSPF neighbor clear alarm parameters.')
hwOspfv2IntraAreaRouteridConflict = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 31, 3)).setObjects(("HUAWEI-OSPFV2-MIB", "hwOspfv2SelfRouterId"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2NbrRouterId"))
if mibBuilder.loadTexts: hwOspfv2IntraAreaRouteridConflict.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2IntraAreaRouteridConflict.setDescription('The object is used to monitor router ID conflict in an intra area.')
hwOspfv2IntraAreaDRIpAddressConflict = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 31, 4)).setObjects(("HUAWEI-OSPFV2-MIB", "hwOspfv2SelfRouterId"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2SelfIfIpAddress"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2SelfIfName"), ("OSPF-MIB", "ospfLsdbLsid"), ("OSPF-MIB", "ospfLsdbRouterId"))
if mibBuilder.loadTexts: hwOspfv2IntraAreaDRIpAddressConflict.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2IntraAreaDRIpAddressConflict.setDescription('The object is used to monitor conflicted IP addresses of DRs in an intra area.')
hwOspfv2Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 32))
hwOspfv2Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 32, 1))
hwOspfv2ModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 32, 1, 1)).setObjects(("HUAWEI-OSPFV2-MIB", "hwOspfv2MIBObjectsGroup"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaGroup"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2NetworkGroup"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2NeighborGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv2ModuleFullCompliance = hwOspfv2ModuleFullCompliance.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2ModuleFullCompliance.setDescription('The compliance statement for entities implementing the Huawei OSPF MIB')
hwOspfv2Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 32, 2))
hwOspfv2MIBObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 32, 2, 1)).setObjects(("HUAWEI-OSPFV2-MIB", "hwOspfv2MIBBinding"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv2MIBObjectsGroup = hwOspfv2MIBObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2MIBObjectsGroup.setDescription('These objects are used to monitor/manage OSPF general parameters.')
hwOspfv2ProcessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 32, 2, 2)).setObjects(("HUAWEI-OSPFV2-MIB", "hwOspfv2VpnName"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2ConfigRouterId"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2ActualRouterId"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2BandwidthReference"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2Description"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2LsdbOverflowLimit"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2MaxLoadBalaNumber"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AseRouteMaxNumber"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2InterRouteMaxNumber"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2IntraRouteMaxNumber"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2RetransLimitMaxNumber"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2Rfc1583Compatibility"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2ShamHello"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2OpaqueCapability"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2TrafficAdjustment"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2TrafficAdvertise"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2FlushTimer"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2SpfSchHoldIntvl"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2SpfSchStartIntvl"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2SpfSchMaxIntvl"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2LsaOrigIntvlOtherType"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2LsaOrigHoldIntvl"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2LsaOrigStartIntvl"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2LsaOrigMaxIntvl"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2LsaArriveHoldIntvl"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2LsaArriveStartIntvl"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2LsaArriveMaxIntvl"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2LsaArriveIntvl"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2SpfSchIntvlUnit"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2SpfSchIntvlNumber"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2LsaOrigIntvl"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2ProcessRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv2ProcessGroup = hwOspfv2ProcessGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2ProcessGroup.setDescription('These objects are used to monitor/manage OSPF process parameters.')
hwOspfv2AreaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 32, 2, 4)).setObjects(("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaType"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaNoSummary"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaNssaFlushTimer"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaNssaDefAdvertise"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaNssaNoImportRoute"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaNssaTransAlways"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaNssaTransTimer"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaNssaAllowFaZero"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaNssaSuppressFa"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaNssaSetNBit"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaDefCost"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaDescription"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaFilterExpAcl"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaFilterExpPrefix"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaFilterExpPolicy"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaFilterImpAcl"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaFilterImpPrefix"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaFilterImpPolicy"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaAuthModeType"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaAuthPasswordType"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaAuthKeyId"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaAuthText"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaMplsTe"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaAreaRowStatus"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaFilterExpAclName"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaFilterImpAclName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv2AreaGroup = hwOspfv2AreaGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2AreaGroup.setDescription('These objects are used to monitor/manage OSPF area parameters.')
hwOspfv2NetworkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 32, 2, 5)).setObjects(("HUAWEI-OSPFV2-MIB", "hwOspfv2NetworkRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv2NetworkGroup = hwOspfv2NetworkGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NetworkGroup.setDescription('These objects are used to monitor/manage OSPF network parameters.')
hwOspfv2NeighborGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 32, 2, 6)).setObjects(("HUAWEI-OSPFV2-MIB", "hwOspfv2SelfRouterId"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2SelfIfIpAddress"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2SelfIfName"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2NbrIfDesignatedRouter"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2NbrIfBackupDesignatedRouter"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2NbrIfMtu"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2NbrRouterId"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2NbrState"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2NbrMode"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2NbrPriority"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2NbrUpTime"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2NbrAuthSequence"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2NbrDeadTimeLeft"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2NbrGrStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv2NeighborGroup = hwOspfv2NeighborGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2NeighborGroup.setDescription('These objects are used to monitor/manage changed OSPF neighbor parameters')
hwOspfv2ChangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 32, 2, 7)).setObjects(("HUAWEI-OSPFV2-MIB", "hwOspfv2MIBObjectsChange"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2ProcessChange"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2AreaChange"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2NetworkChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv2ChangeGroup = hwOspfv2ChangeGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2ChangeGroup.setDescription('These objects are used to monitor/manage changed OSPF table parameters')
hwOspfTrapEventGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 32, 2, 8)).setObjects(("HUAWEI-OSPFV2-MIB", "hwOspfV2NeighborUnavailable"), ("HUAWEI-OSPFV2-MIB", "hwOspfV2NeighborUnavailableClear"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2IntraAreaRouteridConflict"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2IntraAreaDRIpAddressConflict"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfTrapEventGroup = hwOspfTrapEventGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfTrapEventGroup.setDescription('These objects are used to monitor/manage changed OSPF private alarm parameters.')
hwOspfv2TrapsObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 32, 2, 9)).setObjects(("HUAWEI-OSPFV2-MIB", "hwOspfv2NbrChgReason"), ("HUAWEI-OSPFV2-MIB", "hwOspfv2IfChgReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv2TrapsObjectsGroup = hwOspfv2TrapsObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2TrapsObjectsGroup.setDescription('The objects are used to monitor/manage the neighbor state change from full to others.')
hwOspfv2InterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 155, 32, 2, 10)).setObjects(("HUAWEI-OSPFV2-MIB", "hwOspfv2InterfaceName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv2InterfaceGroup = hwOspfv2InterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv2InterfaceGroup.setDescription('These objects are used to monitor/manage changed OSPF interface parameters.')
mibBuilder.exportSymbols("HUAWEI-OSPFV2-MIB", hwOspfv2ProcessEntry=hwOspfv2ProcessEntry, hwOspfv2AreaFilterExpPolicy=hwOspfv2AreaFilterExpPolicy, hwOspfv2NbrUpTime=hwOspfv2NbrUpTime, hwOspfv2Compliances=hwOspfv2Compliances, hwOspfv2TrafficAdjustment=hwOspfv2TrafficAdjustment, hwOspfv2MIB=hwOspfv2MIB, hwOspfv2MIBObjects=hwOspfv2MIBObjects, hwOspfv2NbrAuthSequence=hwOspfv2NbrAuthSequence, hwOspfV2NeighborUnavailable=hwOspfV2NeighborUnavailable, hwOspfv2MIBBinding=hwOspfv2MIBBinding, hwOspfv2ModuleFullCompliance=hwOspfv2ModuleFullCompliance, hwOspfv2AreaFilterImpPrefix=hwOspfv2AreaFilterImpPrefix, hwOspfv2InterfaceGroup=hwOspfv2InterfaceGroup, hwOspfv2AreaMplsTe=hwOspfv2AreaMplsTe, hwOspfv2AreaNssaSetNBit=hwOspfv2AreaNssaSetNBit, hwOspfv2InterRouteMaxNumber=hwOspfv2InterRouteMaxNumber, hwOspfv2SelfIfnetIndex=hwOspfv2SelfIfnetIndex, hwOspfv2IfChgReason=hwOspfv2IfChgReason, hwOspfv2NeighborEntry=hwOspfv2NeighborEntry, hwOspfv2NbrIfDesignatedRouter=hwOspfv2NbrIfDesignatedRouter, hwOspfv2VpnName=hwOspfv2VpnName, hwOspfv2ChangeGroup=hwOspfv2ChangeGroup, hwOspfTrapEventGroup=hwOspfTrapEventGroup, hwOspfv2InterfaceEntry=hwOspfv2InterfaceEntry, hwOspfv2AreaIdIndex=hwOspfv2AreaIdIndex, hwOspfv2TrapsObjects=hwOspfv2TrapsObjects, hwOspfv2NetworkRowStatus=hwOspfv2NetworkRowStatus, hwOspfv2SpfSchStartIntvl=hwOspfv2SpfSchStartIntvl, hwOspfv2AreaAuthModeType=hwOspfv2AreaAuthModeType, hwOspfv2SpfSchMaxIntvl=hwOspfv2SpfSchMaxIntvl, hwOspfv2InterfaceIndex=hwOspfv2InterfaceIndex, hwOspfv2IntraAreaRouteridConflict=hwOspfv2IntraAreaRouteridConflict, hwOspfv2IntraRouteMaxNumber=hwOspfv2IntraRouteMaxNumber, hwOspfv2LsaOrigMaxIntvl=hwOspfv2LsaOrigMaxIntvl, hwOspfv2ChangeTable=hwOspfv2ChangeTable, hwOspfv2AreaFilterImpAcl=hwOspfv2AreaFilterImpAcl, hwOspfv2AreaNssaDefAdvertise=hwOspfv2AreaNssaDefAdvertise, hwOspfv2NeighborGroup=hwOspfv2NeighborGroup, hwOspfv2SelfIfName=hwOspfv2SelfIfName, hwOspfv2NetworkTable=hwOspfv2NetworkTable, hwOspfv2NetworkGroup=hwOspfv2NetworkGroup, hwOspfv2InterfaceTable=hwOspfv2InterfaceTable, hwOspfV2NeighborUnavailableClear=hwOspfV2NeighborUnavailableClear, hwOspfv2LsaOrigStartIntvl=hwOspfv2LsaOrigStartIntvl, hwOspfv2BandwidthReference=hwOspfv2BandwidthReference, hwOspfv2AreaFilterExpPrefix=hwOspfv2AreaFilterExpPrefix, hwOspfv2NbrIfBackupDesignatedRouter=hwOspfv2NbrIfBackupDesignatedRouter, hwOspfv2AreaFilterExpAcl=hwOspfv2AreaFilterExpAcl, hwOspfv2FlushTimer=hwOspfv2FlushTimer, hwOspfv2NbrDeadTimeLeft=hwOspfv2NbrDeadTimeLeft, hwOspfv2NbrGrStatus=hwOspfv2NbrGrStatus, hwOspfv2AreaNssaSuppressFa=hwOspfv2AreaNssaSuppressFa, hwOspfv2NetworkChange=hwOspfv2NetworkChange, hwOspfv2NbrState=hwOspfv2NbrState, hwOspfv2AreaFilterImpAclName=hwOspfv2AreaFilterImpAclName, hwOspfv2AreaAreaRowStatus=hwOspfv2AreaAreaRowStatus, hwOspfv2LsaArriveHoldIntvl=hwOspfv2LsaArriveHoldIntvl, hwOspfv2ProcessChange=hwOspfv2ProcessChange, hwOspfv2NetworkIpAddrIndex=hwOspfv2NetworkIpAddrIndex, hwOspfv2Groups=hwOspfv2Groups, hwOspfv2AreaGroup=hwOspfv2AreaGroup, hwOspfv2ProcessTable=hwOspfv2ProcessTable, hwOspfv2OpaqueCapability=hwOspfv2OpaqueCapability, hwOspfv2ProcessRowStatus=hwOspfv2ProcessRowStatus, hwOspfv2InterfaceName=hwOspfv2InterfaceName, hwOspfv2AreaDefCost=hwOspfv2AreaDefCost, hwOspfv2MIBObjectsChange=hwOspfv2MIBObjectsChange, hwOspfv2SpfSchIntvlUnit=hwOspfv2SpfSchIntvlUnit, hwOspfv2TrapsObjectsGroup=hwOspfv2TrapsObjectsGroup, hwOspfv2RetransLimitMaxNumber=hwOspfv2RetransLimitMaxNumber, hwOspfv2NetworkEntry=hwOspfv2NetworkEntry, hwOspfv2LsaOrigIntvl=hwOspfv2LsaOrigIntvl, hwOspfv2SpfSchIntvlNumber=hwOspfv2SpfSchIntvlNumber, hwOspfv2AreaEntry=hwOspfv2AreaEntry, hwOspfv2AreaNssaFlushTimer=hwOspfv2AreaNssaFlushTimer, hwOspfv2NbrMode=hwOspfv2NbrMode, hwOspfv2AreaNoSummary=hwOspfv2AreaNoSummary, hwOspfv2LsaArriveStartIntvl=hwOspfv2LsaArriveStartIntvl, hwOspfv2NeighborTable=hwOspfv2NeighborTable, hwOspfv2LsaArriveIntvl=hwOspfv2LsaArriveIntvl, hwOspfv2NbrPriority=hwOspfv2NbrPriority, hwOspfv2SelfIfIpAddress=hwOspfv2SelfIfIpAddress, hwOspfv2MIBObjectsGroup=hwOspfv2MIBObjectsGroup, hwOspfv2LsaOrigIntvlOtherType=hwOspfv2LsaOrigIntvlOtherType, hwOspfv2TrafficAdvertise=hwOspfv2TrafficAdvertise, hwOspfv2ProcessGroup=hwOspfv2ProcessGroup, hwOspfv2LsaOrigHoldIntvl=hwOspfv2LsaOrigHoldIntvl, hwOspfv2AreaFilterExpAclName=hwOspfv2AreaFilterExpAclName, hwOspfv2ProcessIdIndex=hwOspfv2ProcessIdIndex, hwOspfv2AreaAuthPasswordType=hwOspfv2AreaAuthPasswordType, hwOspfv2SelfRouterId=hwOspfv2SelfRouterId, hwOspfv2Rfc1583Compatibility=hwOspfv2Rfc1583Compatibility, hwOspfv2AreaAuthText=hwOspfv2AreaAuthText, hwOspfv2Description=hwOspfv2Description, hwOspfv2Conformance=hwOspfv2Conformance, hwOspfv2NbrChgReason=hwOspfv2NbrChgReason, hwOspfv2LsdbOverflowLimit=hwOspfv2LsdbOverflowLimit, hwOspfv2AreaFilterImpPolicy=hwOspfv2AreaFilterImpPolicy, hwOspfv2AreaDescription=hwOspfv2AreaDescription, hwOspfv2NbrRouterId=hwOspfv2NbrRouterId, hwOspfv2NbrIpAddrIndex=hwOspfv2NbrIpAddrIndex, hwOspfv2AreaNssaTransAlways=hwOspfv2AreaNssaTransAlways, hwOspfv2AreaType=hwOspfv2AreaType, hwOspfv2MaxLoadBalaNumber=hwOspfv2MaxLoadBalaNumber, PYSNMP_MODULE_ID=hwOspfv2MIB, hwOspfv2NbrIfMtu=hwOspfv2NbrIfMtu, hwOspfv2SpfSchHoldIntvl=hwOspfv2SpfSchHoldIntvl, hwOspfv2AreaChange=hwOspfv2AreaChange, hwOspfv2LsaArriveMaxIntvl=hwOspfv2LsaArriveMaxIntvl, hwOspfv2Traps=hwOspfv2Traps, hwOspfv2NetworkIpMaskIndex=hwOspfv2NetworkIpMaskIndex, hwOspfv2AreaNssaNoImportRoute=hwOspfv2AreaNssaNoImportRoute, hwOspfv2AreaTable=hwOspfv2AreaTable, hwOspfv2ActualRouterId=hwOspfv2ActualRouterId, hwOspfv2ShamHello=hwOspfv2ShamHello, hwOspfv2AreaNssaAllowFaZero=hwOspfv2AreaNssaAllowFaZero, hwOspfv2AseRouteMaxNumber=hwOspfv2AseRouteMaxNumber, hwOspfv2ConfigRouterId=hwOspfv2ConfigRouterId, hwOspfv2AreaAuthKeyId=hwOspfv2AreaAuthKeyId, hwOspfv2AreaNssaTransTimer=hwOspfv2AreaNssaTransTimer, hwOspfv2IntraAreaDRIpAddressConflict=hwOspfv2IntraAreaDRIpAddressConflict)
