#
# PySNMP MIB module ZYXEL-RADIUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-RADIUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:51:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter64, MibIdentifier, ObjectIdentity, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, Counter32, NotificationType, Unsigned32, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "MibIdentifier", "ObjectIdentity", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "Counter32", "NotificationType", "Unsigned32", "Gauge32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelRadius = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71))
if mibBuilder.loadTexts: zyxelRadius.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelRadius.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelRadius.setContactInfo('')
if mibBuilder.loadTexts: zyxelRadius.setDescription('The subtree for radius')
zyxelRadiusServerSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 1))
zyxelRadiusServerNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 2))
zyxelRadiusAuthenticationServerSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 1, 1))
zyRadiusAuthenticationServerMode = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indexPriority", 1), ("roundRobin", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyRadiusAuthenticationServerMode.setStatus('current')
if mibBuilder.loadTexts: zyRadiusAuthenticationServerMode.setDescription('This field is valid only if you configure multiple RADIUS servers. Select indexPriority and the switch tries to authenticate with the first configured RADIU server, if the RADIUS server does not respond then this switch tries to authenticate with the second RADIUS server. Select roundRobin to alternate between the RADIUS servers that it sends authentication requests to.')
zyRadiusAuthenticationServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyRadiusAuthenticationServerTimeout.setStatus('current')
if mibBuilder.loadTexts: zyRadiusAuthenticationServerTimeout.setDescription('Specify the amount of time in seconds that the switch waits for an authentication request response from the RADIUS server. If you are using indexPriority for your authentication and you are using two RADIUS servers then the timeout value is divided between the two RADIUS servers. For example, if you set the timeout value to 30 seconds, then the Switch waits for a response from the first RADIUS server for 15 seconds and then tries the second RADIUS server. ')
zyxelRadiusAuthenticationServerTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 1, 1, 3), )
if mibBuilder.loadTexts: zyxelRadiusAuthenticationServerTable.setStatus('current')
if mibBuilder.loadTexts: zyxelRadiusAuthenticationServerTable.setDescription('The table contains RADIUS authentication server configuration.')
zyxelRadiusAuthenticationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 1, 1, 3, 1), ).setIndexNames((0, "ZYXEL-RADIUS-MIB", "zyRadiusAuthenticationServerIndex"))
if mibBuilder.loadTexts: zyxelRadiusAuthenticationServerEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelRadiusAuthenticationServerEntry.setDescription('An entry contains RADIUS authentication server configuration.')
zyRadiusAuthenticationServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: zyRadiusAuthenticationServerIndex.setStatus('current')
if mibBuilder.loadTexts: zyRadiusAuthenticationServerIndex.setDescription('An index that uniquely identifies a RADIUS authentication entry.')
zyRadiusAuthenticationServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 1, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyRadiusAuthenticationServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: zyRadiusAuthenticationServerIpAddr.setDescription('Enter IP address of an external RADIUS authentication server.')
zyRadiusAuthenticationServerUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyRadiusAuthenticationServerUdpPort.setStatus('current')
if mibBuilder.loadTexts: zyRadiusAuthenticationServerUdpPort.setDescription('The default port of a RADIUS server for authentication is 1812. You need not change this value unless your netwrok administrator instructs you to do so.')
zyRadiusAuthenticationServerSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyRadiusAuthenticationServerSharedSecret.setStatus('current')
if mibBuilder.loadTexts: zyRadiusAuthenticationServerSharedSecret.setDescription('Specify a password as the key to be shared between the external RADIUS authentication server and the switch. This key is not sent over the network. This key must be the same on the external RADIUS authentication server and the switch.')
zyxelRadiusAccountingServerSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 1, 2))
zyRadiusAccountingServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyRadiusAccountingServerTimeout.setStatus('current')
if mibBuilder.loadTexts: zyRadiusAccountingServerTimeout.setDescription('Specify the amount of time in seconds that the switch waits for an accounting request response from the RADIUS accounting server.')
zyxelRadiusAccountingServerTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 1, 2, 2), )
if mibBuilder.loadTexts: zyxelRadiusAccountingServerTable.setStatus('current')
if mibBuilder.loadTexts: zyxelRadiusAccountingServerTable.setDescription('The table contains RADIUS accounting server configuration.')
zyxelRadiusAccountingServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 1, 2, 2, 1), ).setIndexNames((0, "ZYXEL-RADIUS-MIB", "zyRadiusAccountingServerIndex"))
if mibBuilder.loadTexts: zyxelRadiusAccountingServerEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelRadiusAccountingServerEntry.setDescription('An entry contains RADIUS accounting server configuration.')
zyRadiusAccountingServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 1, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: zyRadiusAccountingServerIndex.setStatus('current')
if mibBuilder.loadTexts: zyRadiusAccountingServerIndex.setDescription('An index that uniquely identifies a RADIUS accounting entry.')
zyRadiusAccountingServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 1, 2, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyRadiusAccountingServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: zyRadiusAccountingServerIpAddr.setDescription('Enter IP address of an external RADIUS accounting server.')
zyRadiusAccountingServerUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyRadiusAccountingServerUdpPort.setStatus('current')
if mibBuilder.loadTexts: zyRadiusAccountingServerUdpPort.setDescription('The default port of a RADIUS accounting server for accounting is 1813. You need not change this value unless your network administator instructs you to do so.')
zyRadiusAccountingServerSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyRadiusAccountingServerSharedSecret.setStatus('current')
if mibBuilder.loadTexts: zyRadiusAccountingServerSharedSecret.setDescription('Specify a password as the key to be shared between the external RADIUS accounting server and the switch. This key is not sent over the network. This key must be the same on the external RADIUS accounting server and the switch')
zyRadiusServerAuthenticationServerNotReachable = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 2, 1)).setObjects(("ZYXEL-RADIUS-MIB", "zyRadiusAuthenticationServerIndex"))
if mibBuilder.loadTexts: zyRadiusServerAuthenticationServerNotReachable.setStatus('current')
if mibBuilder.loadTexts: zyRadiusServerAuthenticationServerNotReachable.setDescription('RADIUS authentication server is not reachable. Network element does not receive replies from RADIUS authentication server.')
zyRadiusServerAccountingServerNotReachable = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 2, 2)).setObjects(("ZYXEL-RADIUS-MIB", "zyRadiusAccountingServerIndex"))
if mibBuilder.loadTexts: zyRadiusServerAccountingServerNotReachable.setStatus('current')
if mibBuilder.loadTexts: zyRadiusServerAccountingServerNotReachable.setDescription('RADIUS accounting server is not reachable. Network element does not receive replies from RADIUS accounting server.')
zyRadiusServerAuthenticationServerNotReachableRecovered = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 2, 3)).setObjects(("ZYXEL-RADIUS-MIB", "zyRadiusAuthenticationServerIndex"))
if mibBuilder.loadTexts: zyRadiusServerAuthenticationServerNotReachableRecovered.setStatus('current')
if mibBuilder.loadTexts: zyRadiusServerAuthenticationServerNotReachableRecovered.setDescription('RADIUS authentication server is recovered to rechable.')
zyRadiusServerAccountingServerNotReachableRecovered = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 71, 2, 4)).setObjects(("ZYXEL-RADIUS-MIB", "zyRadiusAccountingServerIndex"))
if mibBuilder.loadTexts: zyRadiusServerAccountingServerNotReachableRecovered.setStatus('current')
if mibBuilder.loadTexts: zyRadiusServerAccountingServerNotReachableRecovered.setDescription('RADIUS accounting server is recovered to rechable.')
mibBuilder.exportSymbols("ZYXEL-RADIUS-MIB", zyRadiusServerAuthenticationServerNotReachable=zyRadiusServerAuthenticationServerNotReachable, zyxelRadiusAuthenticationServerEntry=zyxelRadiusAuthenticationServerEntry, zyxelRadiusAccountingServerEntry=zyxelRadiusAccountingServerEntry, zyxelRadiusAuthenticationServerTable=zyxelRadiusAuthenticationServerTable, zyRadiusAuthenticationServerSharedSecret=zyRadiusAuthenticationServerSharedSecret, zyRadiusAccountingServerSharedSecret=zyRadiusAccountingServerSharedSecret, zyRadiusAccountingServerIndex=zyRadiusAccountingServerIndex, zyRadiusAuthenticationServerIpAddr=zyRadiusAuthenticationServerIpAddr, zyRadiusServerAuthenticationServerNotReachableRecovered=zyRadiusServerAuthenticationServerNotReachableRecovered, zyxelRadiusAccountingServerTable=zyxelRadiusAccountingServerTable, zyRadiusAuthenticationServerIndex=zyRadiusAuthenticationServerIndex, zyxelRadiusAuthenticationServerSetup=zyxelRadiusAuthenticationServerSetup, zyxelRadiusAccountingServerSetup=zyxelRadiusAccountingServerSetup, zyRadiusAccountingServerUdpPort=zyRadiusAccountingServerUdpPort, zyRadiusAccountingServerIpAddr=zyRadiusAccountingServerIpAddr, zyxelRadiusServerSetup=zyxelRadiusServerSetup, zyRadiusAuthenticationServerMode=zyRadiusAuthenticationServerMode, zyRadiusServerAccountingServerNotReachableRecovered=zyRadiusServerAccountingServerNotReachableRecovered, zyxelRadius=zyxelRadius, zyxelRadiusServerNotifications=zyxelRadiusServerNotifications, zyRadiusAccountingServerTimeout=zyRadiusAccountingServerTimeout, PYSNMP_MODULE_ID=zyxelRadius, zyRadiusAuthenticationServerTimeout=zyRadiusAuthenticationServerTimeout, zyRadiusServerAccountingServerNotReachable=zyRadiusServerAccountingServerNotReachable, zyRadiusAuthenticationServerUdpPort=zyRadiusAuthenticationServerUdpPort)
