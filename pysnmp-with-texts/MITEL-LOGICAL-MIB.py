#
# PySNMP MIB module MITEL-LOGICAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MITEL-LOGICAL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:13:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, ModuleIdentity, Integer32, IpAddress, ObjectIdentity, MibIdentifier, NotificationType, Counter32, enterprises, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "ModuleIdentity", "Integer32", "IpAddress", "ObjectIdentity", "MibIdentifier", "NotificationType", "Counter32", "enterprises", "Gauge32", "TimeTicks")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
mitelRouterLogicalGroup = ModuleIdentity((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4))
mitelRouterLogicalGroup.setRevisions(('2003-03-24 09:47', '1999-03-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mitelRouterLogicalGroup.setRevisionsDescriptions(('Convert to SMIv2', 'Logical MIB Version 1.0',))
if mibBuilder.loadTexts: mitelRouterLogicalGroup.setLastUpdated('200303240947Z')
if mibBuilder.loadTexts: mitelRouterLogicalGroup.setOrganization('MITEL Corporation')
if mibBuilder.loadTexts: mitelRouterLogicalGroup.setContactInfo('Standards Group, Postal: MITEL Corporation 350 Legget Drive, PO Box 13089 Kanata, Ontario Canada K2K 1X3 Tel: +1 613 592 2122 Fax: +1 613 592 4784 E-mail: std@mitel.com')
if mibBuilder.loadTexts: mitelRouterLogicalGroup.setDescription('The MITEL Logical MIB module.')
mitel = MibIdentifier((1, 3, 6, 1, 4, 1, 1027))
mitelProprietary = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 4))
mitelPropIpNetworking = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 4, 8))
mitelIpNetRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1))
mitelIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 1))
mitelIdCallServers = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 1, 2))
mitelIdCsIpera1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 1, 2, 4))
mitelLogGrpLogicalTable = MibTable((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 1), )
if mibBuilder.loadTexts: mitelLogGrpLogicalTable.setStatus('current')
if mibBuilder.loadTexts: mitelLogGrpLogicalTable.setDescription('A table containing information about logical LAN destinations.')
mitelLogGrpLogicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 1, 1), ).setIndexNames((0, "MITEL-LOGICAL-MIB", "mitelLogicalTblIndex"))
if mibBuilder.loadTexts: mitelLogGrpLogicalEntry.setStatus('current')
if mibBuilder.loadTexts: mitelLogGrpLogicalEntry.setDescription("Each entry of this table contains information about a specific logical interface to a local area network. Each logical LAN can support routing functions, these are considered virtual interfaces. The logical LAN can be permanently attached to a physical port (LAN or WAN) or it can float among available physical resources (WAN's only).")
mitelLogicalTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelLogicalTblIndex.setStatus('current')
if mibBuilder.loadTexts: mitelLogicalTblIndex.setDescription('This object identifies the instance of this entry in the table.')
mitelLogicalTblDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogicalTblDestName.setStatus('current')
if mibBuilder.loadTexts: mitelLogicalTblDestName.setDescription('The Ascii string associated with this logical destination LAN. Default is Net N (N is mitelLogicalTblIndex).')
mitelLogicalTblType = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelLogicalTblType.setStatus('current')
if mibBuilder.loadTexts: mitelLogicalTblType.setDescription('This object determines whether this network interface is locally connected to a LAN or is connected to a LAN via a WAN. If this object is set to local(1) then this interface is associated with one of the physical LAN interfaces via the ifIndex. If this object indicates remote(2) then this network is reachable through a wide area network (WAN) as described in mitelLogGrpLogicalWanTable.')
mitelLogicalTblAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogicalTblAdminStatus.setStatus('current')
if mibBuilder.loadTexts: mitelLogicalTblAdminStatus.setDescription('The current desired state of this sub-layer. Default is down.')
mitelLogGrpLogicalWanTable = MibTable((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 2), )
if mibBuilder.loadTexts: mitelLogGrpLogicalWanTable.setStatus('current')
if mibBuilder.loadTexts: mitelLogGrpLogicalWanTable.setDescription('A table containing configuration parameters for wide area network connections to logical LAN destinations that are accessible via interfaces. Each entry is logically tied to a logical LAN destination entry via mitelLogicalTblIndex.')
mitelLogGrpLogicalWanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 2, 1), ).setIndexNames((0, "MITEL-LOGICAL-MIB", "mitelLogicalTblIndex"))
if mibBuilder.loadTexts: mitelLogGrpLogicalWanEntry.setStatus('current')
if mibBuilder.loadTexts: mitelLogGrpLogicalWanEntry.setDescription('Each entry of this table contains information about a specific logical interface to a REMOTELY connected local area network. The instance of mitelLogicalTblIndex used to index into this table is the same instance value used to index into the grLogicalTable.')
mitelLogWanTblCmprsn = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("any", 2), ("gandalf", 3), ("stac", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogWanTblCmprsn.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanTblCmprsn.setDescription('This object indicates whether or not this interface is to perform data compression. Default is none.')
mitelLogWanTblCmprsnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("fza", 2), ("fzap", 3), ("concryption", 4), ("encryption", 5), ("stacNoCheckMode", 6), ("stacLCBCheckMode", 7), ("stacCRCCheckMode", 8), ("stacSeqNumbers", 9), ("stacExtendedMode", 10), ("stacAscendLCBMode", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelLogWanTblCmprsnStatus.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanTblCmprsnStatus.setDescription('This object describes the type of compression used on this destination.')
mitelLogWanTblEncryptn = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogWanTblEncryptn.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanTblEncryptn.setDescription('This object describes whether or not PPP encryption is proposed to the peer. Default is disabled.')
mitelLogWanTblBackupOvrflow = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("backup", 2), ("overflow", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogWanTblBackupOvrflow.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanTblBackupOvrflow.setDescription('This object determines if this interface is to attempt to bring up another link to the same destination if the traffic over the primary link exceeds a pre-determined threshold, in the case of overflow(3). Otherwise, if backup(2) is selected the interface will bring up an alternate link to the same destination in the case that the primary link fails. Default is disabled(1).')
mitelLogWanTblThshld = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogWanTblThshld.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanTblThshld.setDescription('This object determines the transmit threshold which when exceeded will cause an attempt to bring up another path. The returned value of this object has no meaning when threshold overflow is not enabled. Default is 80.')
mitelLogWanTblConnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogWanTblConnTimer.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanTblConnTimer.setDescription('When threshold overflow is enabled this object determines the amount of time in seconds that the average threshold must be exceeded (or below) before another link is established (or disconnected). Default is 30.')
mitelLogWanTblDiscTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogWanTblDiscTimer.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanTblDiscTimer.setDescription('The time a non-permanent link will remain connected without traffic. Default is 30.')
mitelLogWanTblProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ppp", 1), ("framerelay", 2), ("x25", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogWanTblProtocolType.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanTblProtocolType.setDescription('The protocol type that this destination is over. Default is ppp.')
mitelLogGrpLogicalWanPortTable = MibTable((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 3), )
if mibBuilder.loadTexts: mitelLogGrpLogicalWanPortTable.setStatus('current')
if mibBuilder.loadTexts: mitelLogGrpLogicalWanPortTable.setDescription('This configuration table identifies the characteristics of each potential transportation pipe to a remote site. Each entry in this table is associated with an entry in the grLogWanTable via its mitelLogicalTblIndex. Multiple entries can be associated with a single entry in the mitelLogGrpLogicalWanTable.')
mitelLogGrpLogicalWanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 3, 1), ).setIndexNames((0, "MITEL-LOGICAL-MIB", "mitelLogicalTblIndex"), (0, "MITEL-LOGICAL-MIB", "mitelLogWanPortTblIndex"))
if mibBuilder.loadTexts: mitelLogGrpLogicalWanPortEntry.setStatus('current')
if mibBuilder.loadTexts: mitelLogGrpLogicalWanPortEntry.setDescription('Each entry of this table contains information about a single WAN resource used by a logical interface to a remote local area network. The instance of mitelLogicalTblIndex used to index into this table is the same instance value used to index into the mitelLogicalTable. Multiple entries in this table having the same mitelLogicalTblIndex usually indicates backup or multi-linking functionality.')
mitelLogWanPortTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelLogWanPortTblIndex.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanPortTblIndex.setDescription('Identifies the port index associated with this entry.')
mitelLogWanPortTblWanType = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("permanent", 1), ("ondemand", 2), ("incomming", 3), ("outgoing", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogWanPortTblWanType.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanPortTblWanType.setDescription('Indicates whether or not this link is to be used as a permanent or ondemand link. Default is ondemand')
mitelLogWanPortTblTransType = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hdlc", 1), ("modem", 2), ("ethernet", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogWanPortTblTransType.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanPortTblTransType.setDescription('The transport type that this destination is over. Default is HDLC.')
mitelLogWanPortTblRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogWanPortTblRetry.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanPortTblRetry.setDescription('Determines the retry count for dial up WAN circuits. Default is 10.')
mitelLogWanPortTblRetryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogWanPortTblRetryPeriod.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanPortTblRetryPeriod.setDescription('Determines the retry period in seconds for dial up WAN circuits. Default is 10 seconds.')
mitelLogWanPortTblPrepend = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogWanPortTblPrepend.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanPortTblPrepend.setDescription('Indicates in most cases an Ascii string that will be prepended to the destination address. Default is NULL.')
mitelLogWanPortTblDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogWanPortTblDestAddr.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanPortTblDestAddr.setDescription('Indicates the destination address that this interface will call (ie: phone number). Default is NULL.')
mitelLogWanPortTblNextDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogWanPortTblNextDestAddr.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanPortTblNextDestAddr.setDescription('Indicates the next destination address that this interface will call (ie: phone number). Default is NULL.')
mitelLogWanPortTblChId = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogWanPortTblChId.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanPortTblChId.setDescription('This object is a unique identifier for this network channel. e.g. DLCI for frame-relay. The value must be within the defined range or if not used the DEFAULT value should be 0.')
mitelLogWanPortTblDialback = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogWanPortTblDialback.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanPortTblDialback.setDescription('Enables/disables dialback option. If enabled the system will drop the link and then dial the user back using the configured dial string or a dial string reported from an authentication server. Default is disabled.')
mitelLogWanPortTblAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mitelLogWanPortTblAdminStatus.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanPortTblAdminStatus.setDescription('The current desired state of this sub-layer. Default is down.')
mitelLogWanPortTblOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("connecting", 1), ("connected", 2), ("disconnecting", 3), ("disconnected", 4), ("retryExhausted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelLogWanPortTblOperStatus.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanPortTblOperStatus.setDescription('The current active state of this sub-layer.')
mitelLogWanPortTblStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 8, 1, 4, 3, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mitelLogWanPortTblStatus.setReference('Textual Conventions for Version 2 of the Simple Network Management Protocol (RFC 1443).')
if mibBuilder.loadTexts: mitelLogWanPortTblStatus.setStatus('current')
if mibBuilder.loadTexts: mitelLogWanPortTblStatus.setDescription('The current status of this entry.')
mitelIpera1000Notifications = NotificationGroup((1, 3, 6, 1, 4, 1, 1027, 1, 2, 4, 0)).setObjects(("MITEL-LOGICAL-MIB", "mitelWanRetryThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mitelIpera1000Notifications = mitelIpera1000Notifications.setStatus('current')
if mibBuilder.loadTexts: mitelIpera1000Notifications.setDescription('Notifications for Call Server IPera 1000.')
mitelWanRetryThreshold = NotificationType((1, 3, 6, 1, 4, 1, 1027, 1, 2, 4, 0, 403)).setObjects(("MITEL-LOGICAL-MIB", "mitelLogWanPortTblStatus"))
if mibBuilder.loadTexts: mitelWanRetryThreshold.setStatus('current')
if mibBuilder.loadTexts: mitelWanRetryThreshold.setDescription('The mitelWanRetryThreshold trap is generated by the router whenever the maximum number of retries have been exhausted when attempting to contact a remote site on a specific serial interface. The mitelLogicalTblIndex will provided in the variable bindings for this trap type.')
mibBuilder.exportSymbols("MITEL-LOGICAL-MIB", PYSNMP_MODULE_ID=mitelRouterLogicalGroup, mitelLogWanTblThshld=mitelLogWanTblThshld, mitelLogGrpLogicalWanPortTable=mitelLogGrpLogicalWanPortTable, mitelIdentification=mitelIdentification, mitelLogWanPortTblDialback=mitelLogWanPortTblDialback, mitelLogWanPortTblRetry=mitelLogWanPortTblRetry, mitelLogWanPortTblOperStatus=mitelLogWanPortTblOperStatus, mitelLogicalTblAdminStatus=mitelLogicalTblAdminStatus, mitelIdCsIpera1000=mitelIdCsIpera1000, mitelWanRetryThreshold=mitelWanRetryThreshold, mitel=mitel, mitelLogWanTblProtocolType=mitelLogWanTblProtocolType, mitelRouterLogicalGroup=mitelRouterLogicalGroup, mitelLogicalTblIndex=mitelLogicalTblIndex, mitelLogWanPortTblRetryPeriod=mitelLogWanPortTblRetryPeriod, mitelLogWanPortTblNextDestAddr=mitelLogWanPortTblNextDestAddr, mitelLogWanPortTblPrepend=mitelLogWanPortTblPrepend, mitelLogicalTblType=mitelLogicalTblType, mitelIdCallServers=mitelIdCallServers, mitelLogWanTblConnTimer=mitelLogWanTblConnTimer, mitelIpera1000Notifications=mitelIpera1000Notifications, mitelPropIpNetworking=mitelPropIpNetworking, mitelLogWanPortTblStatus=mitelLogWanPortTblStatus, mitelLogWanPortTblWanType=mitelLogWanPortTblWanType, mitelLogWanTblCmprsnStatus=mitelLogWanTblCmprsnStatus, mitelIpNetRouter=mitelIpNetRouter, mitelLogWanPortTblChId=mitelLogWanPortTblChId, mitelLogWanPortTblTransType=mitelLogWanPortTblTransType, mitelLogGrpLogicalWanTable=mitelLogGrpLogicalWanTable, mitelLogWanTblBackupOvrflow=mitelLogWanTblBackupOvrflow, mitelLogWanTblDiscTimer=mitelLogWanTblDiscTimer, mitelLogGrpLogicalWanPortEntry=mitelLogGrpLogicalWanPortEntry, mitelLogGrpLogicalTable=mitelLogGrpLogicalTable, mitelLogWanTblEncryptn=mitelLogWanTblEncryptn, mitelLogWanPortTblAdminStatus=mitelLogWanPortTblAdminStatus, mitelLogWanPortTblDestAddr=mitelLogWanPortTblDestAddr, mitelLogWanTblCmprsn=mitelLogWanTblCmprsn, mitelLogWanPortTblIndex=mitelLogWanPortTblIndex, mitelLogicalTblDestName=mitelLogicalTblDestName, mitelLogGrpLogicalWanEntry=mitelLogGrpLogicalWanEntry, mitelProprietary=mitelProprietary, mitelLogGrpLogicalEntry=mitelLogGrpLogicalEntry)
