#
# PySNMP MIB module A3COM-HUAWEI-SSH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-SSH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:07:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cCommon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cCommon")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, TimeTicks, Bits, Counter64, NotificationType, iso, Unsigned32, Integer32, Gauge32, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "Bits", "Counter64", "NotificationType", "iso", "Unsigned32", "Integer32", "Gauge32", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
h3cSSH = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22))
h3cSSH.setRevisions(('2007-11-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cSSH.setRevisionsDescriptions(('This MIB is used to configure SSH server.',))
if mibBuilder.loadTexts: h3cSSH.setLastUpdated('200711190000Z')
if mibBuilder.loadTexts: h3cSSH.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: h3cSSH.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: h3cSSH.setDescription('The initial version.')
h3cSSHServerMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1))
h3cSSHServerMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1))
h3cSSHServerGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 1))
h3cSSHServerVersion = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSSHServerVersion.setStatus('current')
if mibBuilder.loadTexts: h3cSSHServerVersion.setDescription('The protocol version of the SSH server.')
h3cSSHServerCompatibleSSH1x = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableCompatibleSSH1x", 1), ("disableCompatibleSSH1x", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSSHServerCompatibleSSH1x.setStatus('current')
if mibBuilder.loadTexts: h3cSSHServerCompatibleSSH1x.setDescription('Supporting compatibility with SSH versions 1.x. It is known that there are still devices using the previous versions. During the transition period, it is important to be able to work in a way that is compatible with the installed SSH clients and servers that use the older version of the protocol.')
h3cSSHServerRekeyInterval = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSSHServerRekeyInterval.setStatus('current')
if mibBuilder.loadTexts: h3cSSHServerRekeyInterval.setDescription('The time interval of regenerating SSH server key. The unit is hour.')
h3cSSHServerAuthRetries = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSSHServerAuthRetries.setStatus('current')
if mibBuilder.loadTexts: h3cSSHServerAuthRetries.setDescription('The limit times of a specified user can retry.')
h3cSSHServerAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSSHServerAuthTimeout.setStatus('current')
if mibBuilder.loadTexts: h3cSSHServerAuthTimeout.setDescription('The SSH server has a timeout for authentication and disconnect if the authentication has not been accepted within the timeout period. The unit is second.')
h3cSFTPServerIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSFTPServerIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: h3cSFTPServerIdleTimeout.setDescription('The SFTP server has a timeout for idle connection if a user has no activities within the timeout period. The unit is minute.')
h3cSSHServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableSSHServer", 1), ("disableSSHServer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSSHServerEnable.setStatus('current')
if mibBuilder.loadTexts: h3cSSHServerEnable.setDescription('Enable SSH server function.')
h3cSFTPServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableSFTPService", 1), ("disableSFTPService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cSFTPServerEnable.setStatus('current')
if mibBuilder.loadTexts: h3cSFTPServerEnable.setDescription('Enable SFTP server function.')
h3cSSHUserConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 2))
h3cSSHUserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 2, 1), )
if mibBuilder.loadTexts: h3cSSHUserConfigTable.setStatus('current')
if mibBuilder.loadTexts: h3cSSHUserConfigTable.setDescription('A table for managing SSH users.')
h3cSSHUserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 2, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-SSH-MIB", "h3cSSHUserName"))
if mibBuilder.loadTexts: h3cSSHUserConfigEntry.setStatus('current')
if mibBuilder.loadTexts: h3cSSHUserConfigEntry.setDescription('SSH users configuration entry.')
h3cSSHUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 2, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: h3cSSHUserName.setStatus('current')
if mibBuilder.loadTexts: h3cSSHUserName.setDescription('The name of SSH user.')
h3cSSHUserServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("all", 2), ("stelnet", 3), ("sftp", 4))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSSHUserServiceType.setStatus('current')
if mibBuilder.loadTexts: h3cSSHUserServiceType.setDescription('The service type of SSH user uses.')
h3cSSHUserAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("password", 2), ("publicKey", 3), ("any", 4), ("publicKeyPassword", 5))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSSHUserAuthType.setStatus('current')
if mibBuilder.loadTexts: h3cSSHUserAuthType.setDescription('The authentication type of SSH user chooses.')
h3cSSHUserPublicKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSSHUserPublicKeyName.setStatus('current')
if mibBuilder.loadTexts: h3cSSHUserPublicKeyName.setDescription('The public key which is used for authentication.')
h3cSSHUserWorkDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSSHUserWorkDirectory.setStatus('current')
if mibBuilder.loadTexts: h3cSSHUserWorkDirectory.setDescription("The SFTP user's work directory associates with an existing user.")
h3cSSHUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cSSHUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cSSHUserRowStatus.setDescription("The row status variable, used in accordance to installation and removal conventions for conceptual rows. When the `h3cSSHUserRowStatus' is set to active(1), no objects in this table can be modified. When 'h3cSSHUserRowStatus' is set to notInService(2), every object except the 'h3cSSHUserName' object in this table can be modified. To create a row in this table, a manager must set this object to createAndGo(4). Until instances of all corresponding columns are appropriately configured, the value of the corresponding instance of the h3cSSHUserRowStatus column is 'notReady'.")
h3cSSHSessionInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 3), )
if mibBuilder.loadTexts: h3cSSHSessionInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cSSHSessionInfoTable.setDescription('A table for SSH sessions.')
h3cSSHSessionInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-SSH-MIB", "h3cSSHSessionID"))
if mibBuilder.loadTexts: h3cSSHSessionInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cSSHSessionInfoEntry.setDescription('The SSH session information entry.')
h3cSSHSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cSSHSessionID.setStatus('current')
if mibBuilder.loadTexts: h3cSSHSessionID.setDescription('The identifier of SSH session.')
h3cSSHSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSSHSessionUserName.setStatus('current')
if mibBuilder.loadTexts: h3cSSHSessionUserName.setDescription('The user name of SSH session.')
h3cSSHSessionUserIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 3, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSSHSessionUserIpAddrType.setStatus('current')
if mibBuilder.loadTexts: h3cSSHSessionUserIpAddrType.setDescription('The user IP address type of SSH session.')
h3cSSHSessionUserIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 3, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSSHSessionUserIpAddr.setStatus('current')
if mibBuilder.loadTexts: h3cSSHSessionUserIpAddr.setDescription('The user IP address of SSH session.')
h3cSSHSessionClientVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSSHSessionClientVersion.setStatus('current')
if mibBuilder.loadTexts: h3cSSHSessionClientVersion.setDescription('The client version of SSH session. It is known that there are still devices using the previous versions.')
h3cSSHSessionServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("stelnet", 2), ("sftp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSSHSessionServiceType.setStatus('current')
if mibBuilder.loadTexts: h3cSSHSessionServiceType.setDescription('The service type of SSH session.')
h3cSSHSessionEncry = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("aes128CBC", 2), ("desCBC", 3), ("des3CBC", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSSHSessionEncry.setStatus('current')
if mibBuilder.loadTexts: h3cSSHSessionEncry.setDescription('The encryption algorithm of SSH session. There are several encryption algorithms used in SSH protocol, please refer to RFC4253 Section 6.3.')
h3cSSHSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("init", 1), ("verExchange", 2), ("keysExchange", 3), ("authRequest", 4), ("serviceRequest", 5), ("established", 6), ("disconnect", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cSSHSessionState.setStatus('current')
if mibBuilder.loadTexts: h3cSSHSessionState.setDescription('The status of SSH session. init : This session is in initial status. verExchange : This session is in version exchanging. keysExchange : This session is in keys exchanging. authRequest : This session is in authentication requesting. serviceRequest : This session is in service requesting. established : This session has been established. disconnected : This session has been disconnected.')
h3cSSHServerObjForTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 2))
h3cSSHAttemptUserName = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 2, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cSSHAttemptUserName.setStatus('current')
if mibBuilder.loadTexts: h3cSSHAttemptUserName.setDescription('The user name of the attacker who attempted to log in.')
h3cSSHAttemptIpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 2, 2), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cSSHAttemptIpAddrType.setStatus('current')
if mibBuilder.loadTexts: h3cSSHAttemptIpAddrType.setDescription('The IP address type of the attacker who attempted to log in.')
h3cSSHAttemptIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 2, 3), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cSSHAttemptIpAddr.setStatus('current')
if mibBuilder.loadTexts: h3cSSHAttemptIpAddr.setDescription('The IP address of the attacker who attempted to log in.')
h3cSSHUserAuthFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exceedRetries", 1), ("authTimeout", 2), ("otherReason", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cSSHUserAuthFailureReason.setStatus('current')
if mibBuilder.loadTexts: h3cSSHUserAuthFailureReason.setDescription('The reason for that a user failed to log in.')
h3cSSHServerNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 3))
h3cSSHServerNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 3, 0))
h3cSSHUserAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 3, 0, 1)).setObjects(("A3COM-HUAWEI-SSH-MIB", "h3cSSHAttemptUserName"), ("A3COM-HUAWEI-SSH-MIB", "h3cSSHAttemptIpAddrType"), ("A3COM-HUAWEI-SSH-MIB", "h3cSSHAttemptIpAddr"), ("A3COM-HUAWEI-SSH-MIB", "h3cSSHUserAuthFailureReason"))
if mibBuilder.loadTexts: h3cSSHUserAuthFailure.setStatus('current')
if mibBuilder.loadTexts: h3cSSHUserAuthFailure.setDescription('The trap is generated when a user fails to authentication.')
h3cSSHVersionNegotiationFailure = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 3, 0, 2)).setObjects(("A3COM-HUAWEI-SSH-MIB", "h3cSSHAttemptIpAddrType"), ("A3COM-HUAWEI-SSH-MIB", "h3cSSHAttemptIpAddr"))
if mibBuilder.loadTexts: h3cSSHVersionNegotiationFailure.setStatus('current')
if mibBuilder.loadTexts: h3cSSHVersionNegotiationFailure.setDescription('The trap is generated when a user fails to negotiate SSH protocol version.')
h3cSSHUserLogin = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 3, 0, 3)).setObjects(("A3COM-HUAWEI-SSH-MIB", "h3cSSHSessionUserName"), ("A3COM-HUAWEI-SSH-MIB", "h3cSSHSessionUserIpAddrType"), ("A3COM-HUAWEI-SSH-MIB", "h3cSSHSessionUserIpAddr"))
if mibBuilder.loadTexts: h3cSSHUserLogin.setStatus('current')
if mibBuilder.loadTexts: h3cSSHUserLogin.setDescription('The trap is generated when a user logs in successfully.')
h3cSSHUserLogoff = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 22, 1, 3, 0, 4)).setObjects(("A3COM-HUAWEI-SSH-MIB", "h3cSSHSessionUserName"), ("A3COM-HUAWEI-SSH-MIB", "h3cSSHSessionUserIpAddrType"), ("A3COM-HUAWEI-SSH-MIB", "h3cSSHSessionUserIpAddr"))
if mibBuilder.loadTexts: h3cSSHUserLogoff.setStatus('current')
if mibBuilder.loadTexts: h3cSSHUserLogoff.setDescription('The trap is generated when a user logs off.')
mibBuilder.exportSymbols("A3COM-HUAWEI-SSH-MIB", h3cSSHUserConfig=h3cSSHUserConfig, h3cSSHUserConfigEntry=h3cSSHUserConfigEntry, h3cSSHUserRowStatus=h3cSSHUserRowStatus, h3cSSHServerNotificationsPrefix=h3cSSHServerNotificationsPrefix, h3cSSHUserLogoff=h3cSSHUserLogoff, h3cSSHSessionUserIpAddrType=h3cSSHSessionUserIpAddrType, h3cSSHUserPublicKeyName=h3cSSHUserPublicKeyName, h3cSSHUserAuthType=h3cSSHUserAuthType, h3cSSH=h3cSSH, h3cSSHServerAuthTimeout=h3cSSHServerAuthTimeout, h3cSSHAttemptIpAddrType=h3cSSHAttemptIpAddrType, h3cSSHSessionClientVersion=h3cSSHSessionClientVersion, h3cSSHServerMIBObjects=h3cSSHServerMIBObjects, PYSNMP_MODULE_ID=h3cSSH, h3cSSHSessionEncry=h3cSSHSessionEncry, h3cSSHSessionServiceType=h3cSSHSessionServiceType, h3cSSHSessionID=h3cSSHSessionID, h3cSFTPServerEnable=h3cSFTPServerEnable, h3cSSHUserAuthFailure=h3cSSHUserAuthFailure, h3cSSHServerCompatibleSSH1x=h3cSSHServerCompatibleSSH1x, h3cSSHVersionNegotiationFailure=h3cSSHVersionNegotiationFailure, h3cSSHSessionState=h3cSSHSessionState, h3cSSHServerMIB=h3cSSHServerMIB, h3cSSHUserAuthFailureReason=h3cSSHUserAuthFailureReason, h3cSFTPServerIdleTimeout=h3cSFTPServerIdleTimeout, h3cSSHSessionInfoTable=h3cSSHSessionInfoTable, h3cSSHAttemptUserName=h3cSSHAttemptUserName, h3cSSHSessionInfoEntry=h3cSSHSessionInfoEntry, h3cSSHServerEnable=h3cSSHServerEnable, h3cSSHSessionUserName=h3cSSHSessionUserName, h3cSSHServerAuthRetries=h3cSSHServerAuthRetries, h3cSSHAttemptIpAddr=h3cSSHAttemptIpAddr, h3cSSHServerRekeyInterval=h3cSSHServerRekeyInterval, h3cSSHServerNotifications=h3cSSHServerNotifications, h3cSSHSessionUserIpAddr=h3cSSHSessionUserIpAddr, h3cSSHServerVersion=h3cSSHServerVersion, h3cSSHServerGlobalConfig=h3cSSHServerGlobalConfig, h3cSSHUserName=h3cSSHUserName, h3cSSHUserLogin=h3cSSHUserLogin, h3cSSHUserServiceType=h3cSSHUserServiceType, h3cSSHUserWorkDirectory=h3cSSHUserWorkDirectory, h3cSSHServerObjForTrap=h3cSSHServerObjForTrap, h3cSSHUserConfigTable=h3cSSHUserConfigTable)
