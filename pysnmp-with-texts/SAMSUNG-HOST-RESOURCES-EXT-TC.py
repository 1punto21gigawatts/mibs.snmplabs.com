#
# PySNMP MIB module SAMSUNG-HOST-RESOURCES-EXT-TC (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SAMSUNG-HOST-RESOURCES-EXT-TC
# Produced by pysmi-0.3.4 at Wed May  1 15:00:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
samsungCommonMIB, = mibBuilder.importSymbols("SAMSUNG-COMMON-MIB", "samsungCommonMIB")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Bits, Gauge32, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, iso, TimeTicks, Counter32, Counter64, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "Gauge32", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "iso", "TimeTicks", "Counter32", "Counter64", "NotificationType", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
scmHrTC = ModuleIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52))
if mibBuilder.loadTexts: scmHrTC.setLastUpdated('0407170000Z')
if mibBuilder.loadTexts: scmHrTC.setOrganization('Samsung Corporation - SCMI Working Group')
if mibBuilder.loadTexts: scmHrTC.setContactInfo(' SCMI Editors Email: coherence@crt.samsung.com ')
if mibBuilder.loadTexts: scmHrTC.setDescription("Version: 1.00 The TC module for textual conventions, enumerated types, OIDs, and other volatile elements of the companion Host Resources Extensions MIB ('scmHrMIB'), which supports extended configuration and management of various host resources for network accessible host systems. These modules augment and extend the original IETF Host Resources MIB (RFC 2790). Usage: This MIB module introduces support for the 'realization' of both 'physical' and 'logical' devices, consistent with ISO DPA (Document Printing Application), ISO/IEC 10175, as reflected in the object 'scmHrDevInfoRealization'. Note: Conforming implementations SHALL NOT 'bubble up' status from 'physical' devices to associated 'logical' devices. All devices SHALL report their own status ONLY. See: Section 9 'Supplement' in SCMI Extensions to IETF Host Resources TC, for implementation guidance for this TC module. Copyright (C) 1995-2003 Samsung Corporation. All Rights Reserved.")
scmHrDeviceTypes = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2))
if mibBuilder.loadTexts: scmHrDeviceTypes.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceTypes.setDescription('The root of all additional device types defined in HRX TC.')
scmHrDeviceHostSystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 101))
if mibBuilder.loadTexts: scmHrDeviceHostSystem.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceHostSystem.setDescription("Host system device type - manufacturer independent. For host systems which instrument multiple devices and support MIBs with tables INDEXed by 'hrDeviceIndex', the single 'scmHrDeviceHostSystem' device represents the 'root' device which MAY be used to manage overall host system defaults, configuration, status, etc.")
if mibBuilder.loadTexts: scmHrDeviceHostSystem.setReference("See: 'scmHrDeviceHostSystemHistory' in this SCMI HRX TC.")
scmHrDeviceScanner = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 102))
if mibBuilder.loadTexts: scmHrDeviceScanner.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceScanner.setDescription("Scanner device type - manufacturer independent. An 'scmHrDeviceScanner' device with 'scmHrDevInfoRealization' of 'physical' is a 'real' input device (eg, a 'scan channel' on a multifunction printer). An 'scmHrDeviceScanner' device with 'scmHrDevInfoRealization' of 'logical' is a 'virtual' input device (eg, a 'personality' of a 'scan channel' on a multifunction printer).")
if mibBuilder.loadTexts: scmHrDeviceScanner.setReference("See: 'scmHrDeviceScannerHistory' in this SCMI HRX TC.")
scmHrDeviceCopier = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 103))
if mibBuilder.loadTexts: scmHrDeviceCopier.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceCopier.setDescription("Copier device type - manufacturer independent. An 'scmHrDeviceCopier' device with 'scmHrDevInfoRealization' of 'physical' is a 'real' I/O device (eg, a 'copier' on a multifunction printer). An 'scmHrDeviceCopier' device with 'scmHrDevInfoRealization' of 'logical' is a 'virtual' I/O device (eg, a 'personality' of a 'copier' on a multifunction printer).")
if mibBuilder.loadTexts: scmHrDeviceCopier.setReference("See: 'scmHrDeviceCopierHistory' in this SCMI HRX TC.")
scmHrDeviceFax = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 104))
if mibBuilder.loadTexts: scmHrDeviceFax.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceFax.setDescription("Fax device type - manufacturer independent. An 'scmHrDeviceFax' device with 'scmHrDevInfoRealization' of 'physical' is a 'real' I/O device (eg, a 'fax channel' on a multifunction printer). An 'scmHrDeviceFax' device with 'scmHrDevInfoRealization' of 'logical' is a 'virtual' I/O device (eg, a 'personality' of a 'fax channel' on a multifunction printer).")
if mibBuilder.loadTexts: scmHrDeviceFax.setReference("See: 'scmHrDeviceFaxHistory' in this SCMI HRX TC.")
scmHrDeviceMailbox = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 105))
if mibBuilder.loadTexts: scmHrDeviceMailbox.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceMailbox.setDescription("Mailbox device type - manufacturer independent. An 'scmHrDeviceMailbox' device is a 'multi-bin' output device, with each 'bin' assigned to a user, group, account, etc, and (optionally) physical security associated with each 'bin'. An 'scmHrDeviceMailbox' device with 'scmHrDevInfoRealization' of 'physical' is a 'real' output device (eg, a 'tower mailbox' on a high-end printer). An 'scmHrDeviceMailbox' device with 'scmHrDevInfoRealization' of 'logical' is a 'virtual' output device (eg, a 'personality' of a 'tower mailbox' on a high-end printer). An 'scmHrDeviceMailbox' device with 'scmHrDevInfoRealization' of 'logical' MAY also indicate the current configuration of a 'physical' device of type 'scmHrDeviceMailboxSorter'.")
if mibBuilder.loadTexts: scmHrDeviceMailbox.setReference("See: 'scmHrDeviceMailboxSorter' and 'scmHrDeviceSorter'.")
scmHrDeviceFinisher = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 106))
if mibBuilder.loadTexts: scmHrDeviceFinisher.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceFinisher.setDescription("Finisher device type - manufacturer independent. An 'scmHrDeviceFinisher' device is an output finishing device. An 'scmHrDeviceFinisher' device with 'scmHrDevInfoRealization' of 'physical' is a 'real' output device (eg, a 'stapler' on a high-end printer). An 'scmHrDeviceFinisher' device with 'scmHrDevInfoRealization' of 'logical' is a 'virtual' output device (eg, a 'personality' of a 'stapler' on a high-end printer).")
scmHrDeviceFeeder = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 107))
if mibBuilder.loadTexts: scmHrDeviceFeeder.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceFeeder.setDescription("Feeder device type - manufacturer independent. An 'scmHrDeviceFeeder' device is an input device. An 'scmHrDeviceFeeder' device with 'scmHrDevInfoRealization' of 'physical' is a 'real' output device (eg, a 'high-capacity feeder' on a high-end printer). An 'scmHrDeviceFeeder' device with 'scmHrDevInfoRealization' of 'logical' is a 'virtual' output device (eg, a 'personality' of a 'high-capacity feeder' on a high-end printer).")
scmHrDeviceSorter = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 108))
if mibBuilder.loadTexts: scmHrDeviceSorter.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceSorter.setDescription("Sorter device type - manufacturer independent. An 'scmHrDeviceSorter' device is a 'multi-bin' output device, with each 'bin' assigned to a copy of the current job, and NO physical security associated with each 'bin'. An 'scmHrDeviceSorter' device with 'scmHrDevInfoRealization' of 'physical' is a 'real' output device (eg, a '10-bin sorter' on a mid-range printer). An 'scmHrDeviceSorter' device with 'scmHrDevInfoRealization' of 'logical' is a 'virtual' output device (eg, a 'personality' of a '10-bin sorter' on a mid-range printer). An 'scmHrDeviceSorter' device with 'scmHrDevInfoRealization' of 'logical' MAY also indicate the current configuration of a 'physical' device of type 'scmHrDeviceMailboxSorter'.")
if mibBuilder.loadTexts: scmHrDeviceSorter.setReference("See: 'scmHrDeviceMailboxSorter' and 'scmHrDeviceMailbox'.")
scmHrDeviceMailboxSorter = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 109))
if mibBuilder.loadTexts: scmHrDeviceMailboxSorter.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceMailboxSorter.setDescription("MailboxSorter device type - manufacturer independent. An 'scmHrDeviceMailboxSorter' is a 'multi-bin' output device, which MAY be configured as either a 'mailbox' or a 'sorter', by a system adminstrator or by default product configuration. An 'scmHrDeviceMailboxSorter' with 'scmHrDevInfoRealization' of 'physical' is a 'real' output device and associated with associated with exactly two 'logical' output devices of types 'scmHrDeviceMailbox' and 'scmHrDeviceSorter' - one of these 'logical' devices MAY be 'running' (currently configured) - at least one SHALL be 'down' (NOT currently configured).")
scmHrDevicePrintAppliance = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 110))
if mibBuilder.loadTexts: scmHrDevicePrintAppliance.setStatus('current')
if mibBuilder.loadTexts: scmHrDevicePrintAppliance.setDescription("Print appliance device type - manufacturer independent. An 'scmHrDevicePrintAppliance' is a network printing appliance with 'scmHrDevInfoRealization' of 'physical'. An 'scmHrDevicePrintAppliance' SHALL statically and/or actively discover available network printers and SHOULD advertise them as supported output devices, using rows in 'hrDeviceTable' of IETF HR MIB (RFC 2790) and 'prtGeneralTable' of the Printer MIB (RFC 1759 or successor), with 'hrDeviceType' set to 'hrDevicePrinter'. An 'scmHrDevicePrintAppliance' SHALL NOT use 'hrDeviceIndex' of '1' (first row) for an 'hrDevicePrinter' row, because a network printing appliance is an enhanced spooler and NOT a printer.")
if mibBuilder.loadTexts: scmHrDevicePrintAppliance.setReference("See: 'hrDevicePrinter' in IETF Host Resources MIB (RFC 2790). See: 'scmHrDevicePrinterHistory' in this SCMI HRX TC.")
scmHrDeviceMarker = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 111))
if mibBuilder.loadTexts: scmHrDeviceMarker.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceMarker.setDescription("Marker Engine device type - manufacturer independent. An 'scmHrDeviceMarker' device with 'scmHrDevInfoRealization' of 'physical' is a 'real' output device (eg, the 'marking engine' on a multifunction printer or copier). The marking engine is the module that accepts a print ready image and physical media as input and outputs physical media with a physical representation of the print ready input image. The 'scmHrDeviceMarker' is a single module within a group of modules that cumulatively are represented by 'hrDevicePrinter'. The marker shall represent the whole marker as a single physical unit and should maintain a single entry in the 'hrDeviceTable' for all products that support a single marking engine regardless of internal engine mark points. (e.g. B&W, Highlight Color and Full Color Presses shall have a single entry in 'hrDeviceTable'). Multiple entries of 'scmHrDeviceMarker' may exist in the 'hrDeviceTable' if the system supports multiple print engines whether chained, in parallel or in any other configuration. An 'scmHrDeviceMarker' SHALL NOT use 'hrDeviceIndex' of '1' (first row). The index 1 is reserved for an 'hrDevicePrinter' row.")
scmHrDeviceFinisherBFM = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 112))
if mibBuilder.loadTexts: scmHrDeviceFinisherBFM.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceFinisherBFM.setDescription("Basic Finisher Module device type - manufacturer independent. An 'scmHrDeviceFinisherBFM' device is a basic output finishing device. An 'scmHrDeviceFinisherBFM' device with 'scmHrDevInfoRealization' of 'physical' is a 'real' output device (eg, a 'stapler' on a high-end printer). An 'scmHrDeviceFinisherBFM' device with 'scmHrDevInfoRealization' of 'logical' is a 'virtual' output device (eg, a 'personality' of a 'stapler' on a high-end printer).")
scmHrDeviceFinisherMFF = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 113))
if mibBuilder.loadTexts: scmHrDeviceFinisherMFF.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceFinisherMFF.setDescription("Multi-Function Finisher device type - manufacturer independent. An 'scmHrDeviceFinisherMFF' device is a multi-function output finishing device. An 'scmHrDeviceFinisherMFF' device with 'scmHrDevInfoRealization' of 'physical' is a 'real' output device (eg, a 'saddle stitcher', 'C-Folder', 'Z-Folder', 'Hole Puncher' on a high-end printer). An 'scmHrDeviceFinisherMFF' device with 'scmHrDevInfoRealization' of 'logical' is a 'virtual' output device (eg, a 'personality' of a 'saddle stitcher', 'C-Folder', 'Z-Folder', 'Hole Puncher' on a high-end printer).")
scmHrDeviceFinisherXIM = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 114))
if mibBuilder.loadTexts: scmHrDeviceFinisherXIM.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceFinisherXIM.setDescription("eXternal Interface Module Finisher device type. An 'scmHrDeviceFinisherXIM' device is a hardware interface used to pass media from a Samsung printing device to a 3rd party finishing devices. The 'scmHrDeviceFinihserXIM' may or may not contain its own output trays or finishing capabilities. An 'scmHrDeviceFinisherXIM' device with 'scmHrDevInfoRealization' of 'physical' is a 'real' output device (e.g., an 'output bridge' on a high-end printer).")
scmHrDeviceFinisher3rdParty = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 115))
if mibBuilder.loadTexts: scmHrDeviceFinisher3rdParty.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceFinisher3rdParty.setDescription("3rd Party Finisher device type - manufacturer independent. An 'scmHrDeviceFinisher3rdParty' device is an output finishing device. An 'scmHrDeviceFinisher3rdParty' device with 'scmHrDevInfoRealization' of 'physical' is a 'real' output device (eg, a 'stapler' on a high-end printer). An 'scmHrDeviceFinisher3rdParty' device with 'scmHrDevInfoRealization' of 'logical' is a 'virtual' output device (eg, a 'personality' of a 'stapler' on a high-end printer).")
scmHrDevicePaymentInterface = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 116))
if mibBuilder.loadTexts: scmHrDevicePaymentInterface.setStatus('current')
if mibBuilder.loadTexts: scmHrDevicePaymentInterface.setDescription("Payment Interface device type - manufacturer independent. An 'scmHrDevicePaymentInterface' device is an payment authorization device. An 'scmHrDevicePaymentInterface' device with 'scmHrDevInfoRealization' of 'physical' is a 'real' point of purchase validation device (eg, a 'coin operated', 'smart card' or other form of point of purchase payment for services rendered on a multi-function printer or copier). An 'scmHrDevicePaymentInterface' device with 'scmHrDevInfoRealization' of 'logical' is a 'virtual' point of purchase validation device (eg, a software service that accepts payment through the Web or some other form of remote point of purchase payment for services rendered on a multi-function printer or copier).")
scmHrDeviceInterposer = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 117))
if mibBuilder.loadTexts: scmHrDeviceInterposer.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceInterposer.setDescription("Interposer device type - manufacturer independent. An 'scmHrDeviceInterposer' device is an input device which physically resides downstream of the print engine amongst finishing modules. An 'scmHrDeviceInterposer' device with 'scmHrDevInfoRealization' of 'physical' is a 'real' input device (eg, a 'high-capacity Interposing feeder' that physically resides amongst finishing modules on a high-end printer). An 'scmHrDeviceInterposer' device with 'scmHrDevInfoRealization' of 'logical' is a 'virtual' input device (eg, a 'personality' of a 'high-capacity Interposing feeder' that physically resides amongst finishing modules on a high-end printer). Interposers are essentially feeders that are placed downstream of the print engine paper path and upstream of finishing devices. Interposer fed media is not marked by the print engine; instead media fed from an interposer is inserted before, between or after marked pages. The media constitutes covers, separators etc.")
scmHrDeviceHostSystemHistory = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 151))
if mibBuilder.loadTexts: scmHrDeviceHostSystemHistory.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceHostSystemHistory.setDescription('Host system history device type - manufacturer independent.')
if mibBuilder.loadTexts: scmHrDeviceHostSystemHistory.setReference("See: 'scmHrDeviceHostSystem' in this SCMI HRX TC.")
scmHrDeviceScannerHistory = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 152))
if mibBuilder.loadTexts: scmHrDeviceScannerHistory.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceScannerHistory.setDescription('Scanner history device type - manufacturer independent.')
if mibBuilder.loadTexts: scmHrDeviceScannerHistory.setReference("See: 'scmHrDeviceScanner' in this SCMI HRX TC.")
scmHrDeviceCopierHistory = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 153))
if mibBuilder.loadTexts: scmHrDeviceCopierHistory.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceCopierHistory.setDescription('Copier history device type - manufacturer independent.')
if mibBuilder.loadTexts: scmHrDeviceCopierHistory.setReference("See: 'scmHrDeviceCopier' in this SCMI HRX TC.")
scmHrDeviceFaxHistory = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 154))
if mibBuilder.loadTexts: scmHrDeviceFaxHistory.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceFaxHistory.setDescription('Fax history device type - manufacturer independent.')
if mibBuilder.loadTexts: scmHrDeviceFaxHistory.setReference("See: 'scmHrDeviceFax' in this SCMI HRX TC.")
scmHrDevicePrinterHistory = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 55))
if mibBuilder.loadTexts: scmHrDevicePrinterHistory.setStatus('current')
if mibBuilder.loadTexts: scmHrDevicePrinterHistory.setDescription('Printer history device type - manufacturer independent.')
if mibBuilder.loadTexts: scmHrDevicePrinterHistory.setReference("See: 'hrDevicePrinter' in the IETF HR MIB.")
scmHrCruXerographicModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 201))
if mibBuilder.loadTexts: scmHrCruXerographicModule.setStatus('current')
if mibBuilder.loadTexts: scmHrCruXerographicModule.setDescription("CRU xerographic module - manufacturer independent. An 'scmHrCruXerographicModule' device is a customer replaceable unit, with 'scmHrDevInfoRealization' of 'physical'.")
scmHrCruFuserModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 202))
if mibBuilder.loadTexts: scmHrCruFuserModule.setStatus('current')
if mibBuilder.loadTexts: scmHrCruFuserModule.setDescription("CRU fuser module - manufacturer independent. An 'scmHrCruFuserModule' device is a customer replaceable unit, with 'scmHrDevInfoRealization' of 'physical'.")
scmHrCruTonerBottleModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 203))
if mibBuilder.loadTexts: scmHrCruTonerBottleModule.setStatus('current')
if mibBuilder.loadTexts: scmHrCruTonerBottleModule.setDescription("CRU toner bottle module - manufacturer independent. An 'scmHrCruTonerBottleModule' device is a customer replaceable unit, with 'scmHrDevInfoRealization' of 'physical'.")
scmHrCruCollectorBottleModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 204))
if mibBuilder.loadTexts: scmHrCruCollectorBottleModule.setStatus('current')
if mibBuilder.loadTexts: scmHrCruCollectorBottleModule.setDescription("CRU (developer) collector bottle - manufacturer independent. An 'scmHrCruCollectorBottleModule' device is a customer replaceable unit, with 'scmHrDevInfoRealization' of 'physical'.")
scmHrCruTrayFeedHeadModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 205))
if mibBuilder.loadTexts: scmHrCruTrayFeedHeadModule.setStatus('current')
if mibBuilder.loadTexts: scmHrCruTrayFeedHeadModule.setDescription("CRU tray feed head module - manufacturer independent. An 'scmHrCruTrayFeedHeadModule' device is a customer replaceable unit, with 'scmHrDevInfoRealization' of 'physical'.")
scmHrCruAdfFeedHeadModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 206))
if mibBuilder.loadTexts: scmHrCruAdfFeedHeadModule.setStatus('current')
if mibBuilder.loadTexts: scmHrCruAdfFeedHeadModule.setDescription("CRU ADF feed head module - manufacturer independent. An 'scmHrCruAdfFeedHeadModule' device is a customer replaceable unit, with 'scmHrDevInfoRealization' of 'physical'. Note: ADF is an acronym for 'automatic document feeder'.")
scmHrCruFuserWebModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 207))
if mibBuilder.loadTexts: scmHrCruFuserWebModule.setStatus('current')
if mibBuilder.loadTexts: scmHrCruFuserWebModule.setDescription("CRU fuser web module - manufacturer independent. An 'scmHrCruFuserWebModule' device is a customer replaceable unit, with 'scmHrDevInfoRealization' of 'physical'. Note: A 'fuser web' is an oil-soaked fiber roll in a fuser, which prevents toner from getting on the fuser roll. The 'fuser web' device would normally be replaced several times before the actual fuser device ('scmHrCRUFuserModule') is replaced.")
scmHrCruFilterModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 208))
if mibBuilder.loadTexts: scmHrCruFilterModule.setStatus('current')
if mibBuilder.loadTexts: scmHrCruFilterModule.setDescription("CRU filter module - manufacturer independent. An 'scmHrCruFilterModule' device is a customer replaceable filter or filter unit, with 'scmHrDevInfoRealization' of 'physical'.")
scmHrCruCleanerUnitModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 209))
if mibBuilder.loadTexts: scmHrCruCleanerUnitModule.setStatus('current')
if mibBuilder.loadTexts: scmHrCruCleanerUnitModule.setDescription("CRU cleaner unit module - manufacturer independent. An 'scmHrCruCleanerUnitModule' device is a customer replaceable cleaner unit, with 'scmHrDevInfoRealization' of 'physical' (eg, a belt cleaner or a photoreceptor cleaner).")
if mibBuilder.loadTexts: scmHrCruCleanerUnitModule.setReference("See: 'cleanerUnit' in 'PrtMarkerSuppliesTypeTC' in the Printer MIB v2.")
scmHrCruTransferUnitModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 210))
if mibBuilder.loadTexts: scmHrCruTransferUnitModule.setStatus('current')
if mibBuilder.loadTexts: scmHrCruTransferUnitModule.setDescription("CRU transfer unit module - manufacturer independent. An 'scmHrCruTransferUnitModule' device is a customer replaceable transfer unit, with 'scmHrDevInfoRealization' of 'physical'.")
if mibBuilder.loadTexts: scmHrCruTransferUnitModule.setReference("See: 'transferUnit' in 'PrtMarkerSuppliesTypeTC' in the Printer MIB v2.")
scmHrCruTransferRollerModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 211))
if mibBuilder.loadTexts: scmHrCruTransferRollerModule.setStatus('current')
if mibBuilder.loadTexts: scmHrCruTransferRollerModule.setDescription("CRU transfer roller module - manufacturer independent. An 'scmHrCruTransferRollerModule' device is a customer replaceable transfer roller, with 'scmHrDevInfoRealization' of 'physical' (eg, a biased transfer roller).")
if mibBuilder.loadTexts: scmHrCruTransferRollerModule.setReference("See: 'transferUnit' in 'PrtMarkerSuppliesTypeTC' in the Printer MIB v2.")
scmHrCruPFPFeedRollModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 212))
if mibBuilder.loadTexts: scmHrCruPFPFeedRollModule.setStatus('current')
if mibBuilder.loadTexts: scmHrCruPFPFeedRollModule.setDescription("CRU Paper Feed Platform module - manufacturer independent. An 'scmHrCruPaperFeedModule' device is a customer replaceable unit, with 'scmHrDevInfoRealization' of 'physical'.")
scmHrCruPFPRetardRollModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 213))
if mibBuilder.loadTexts: scmHrCruPFPRetardRollModule.setStatus('current')
if mibBuilder.loadTexts: scmHrCruPFPRetardRollModule.setDescription("CRU PFP Retard Roll module - manufacturer independent. An 'scmHrCruPFPRetardRollModule' device is a customer replaceable unit, with 'scmHrDevInfoRealization' of 'physical'.")
scmHrDeviceUSBPort = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 250))
if mibBuilder.loadTexts: scmHrDeviceUSBPort.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceUSBPort.setDescription('The device type identifier used for a Universal Serial Bus port.')
scmHrDeviceFlashDIMMFileStore = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 260))
if mibBuilder.loadTexts: scmHrDeviceFlashDIMMFileStore.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceFlashDIMMFileStore.setDescription(' The device type identifier used for a Flash DIMM that contains a file system that is used to store files such as font opposed to a Flash DIMM that contains a boot loader.')
scmHrDeviceFlashDIMMBootLoader = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 2, 261))
if mibBuilder.loadTexts: scmHrDeviceFlashDIMMBootLoader.setStatus('current')
if mibBuilder.loadTexts: scmHrDeviceFlashDIMMBootLoader.setDescription('The device type identifier used for a Flash DIMM that contains the boot loader for a device. Files may or may not be stored on this device. As opposed to a Flash DIMM that contains a file store system.')
scmHrAdminServiceTypes = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 3))
if mibBuilder.loadTexts: scmHrAdminServiceTypes.setStatus('current')
if mibBuilder.loadTexts: scmHrAdminServiceTypes.setDescription('The root of all host system management service types (classes) defined in the Host Resources Extensions TC.')
if mibBuilder.loadTexts: scmHrAdminServiceTypes.setReference("See: 'ScmSecPosixVerbs' and 'scmSecServiceTypeOID' in SCMI Security TC/MIB.")
scmHrAdminObjectService = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 3, 1))
if mibBuilder.loadTexts: scmHrAdminObjectService.setStatus('current')
if mibBuilder.loadTexts: scmHrAdminObjectService.setDescription('The host system object management service.')
if mibBuilder.loadTexts: scmHrAdminObjectService.setReference("See: 'scmSysAdminObject...' in SCMI System Admin MIB. See: 'ScmSecPosixVerbs' and 'scmSecServiceTypeOID' in SCMI Security TC/MIB.")
scmHrAdminServerService = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 3, 2))
if mibBuilder.loadTexts: scmHrAdminServerService.setStatus('current')
if mibBuilder.loadTexts: scmHrAdminServerService.setDescription('The host system server management service.')
if mibBuilder.loadTexts: scmHrAdminServerService.setReference("See: 'scmSysAdminServer...' in SCMI System Admin MIB, 'hrSW[Running|Installed]Table' in IETF HR MIB, and 'scmHrSW[Running|Installed]ExtTable' in SCMI HRX MIB. See: 'ScmSecPosixVerbs' and 'scmSecServiceTypeOID' in SCMI Security TC/MIB.")
scmHrAdminDeviceService = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 3, 3))
if mibBuilder.loadTexts: scmHrAdminDeviceService.setStatus('current')
if mibBuilder.loadTexts: scmHrAdminDeviceService.setDescription('The host system device management service.')
if mibBuilder.loadTexts: scmHrAdminDeviceService.setReference("See: 'scmSysAdminDevice...' in SCMI System Admin MIB, 'hrDeviceTable' in IETF HR MIB, and 'scmHrDev[Info|Help|Mgmt|Power|Traffic|Calendar]Table' in SCMI HRX MIB. See: 'ScmSecPosixVerbs' and 'scmSecServiceTypeOID' in SCMI Security TC/MIB.")
scmHrAdminJobService = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 3, 4))
if mibBuilder.loadTexts: scmHrAdminJobService.setStatus('current')
if mibBuilder.loadTexts: scmHrAdminJobService.setDescription('The host system job management service.')
if mibBuilder.loadTexts: scmHrAdminJobService.setReference("See: 'scmSysAdminJob...' in SCMI System Admin MIB, and 'scmJob[...]Table' in SCMI Job Monitoring MIB. See: 'ScmSecPosixVerbs' and 'scmSecServiceTypeOID' in SCMI Security TC/MIB.")
scmHrAdminDocService = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 3, 5))
if mibBuilder.loadTexts: scmHrAdminDocService.setStatus('current')
if mibBuilder.loadTexts: scmHrAdminDocService.setDescription('The host system document management service.')
if mibBuilder.loadTexts: scmHrAdminDocService.setReference("See: 'scmSysAdminDoc...' in SCMI System Admin MIB, and 'scmDoc[...]Table' in SCMI Job Monitoring MIB. See: 'ScmSecPosixVerbs' and 'scmSecServiceTypeOID' in SCMI Security TC/MIB.")
scmHrAdminSecurityService = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 3, 6))
if mibBuilder.loadTexts: scmHrAdminSecurityService.setStatus('current')
if mibBuilder.loadTexts: scmHrAdminSecurityService.setDescription('The host system security management service.')
if mibBuilder.loadTexts: scmHrAdminSecurityService.setReference("See: 'scmSysAdminSecurity...' in SCMI System Admin MIB. See: 'ScmSecPosixVerbs' and 'scmSecServiceTypeOID' in SCMI Security TC/MIB.")
scmHrAdminCommsService = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 3, 7))
if mibBuilder.loadTexts: scmHrAdminCommsService.setStatus('current')
if mibBuilder.loadTexts: scmHrAdminCommsService.setDescription('The host system communications management service.')
if mibBuilder.loadTexts: scmHrAdminCommsService.setReference("See: 'scmSysAdminComms...' in SCMI System Admin MIB and SCMI Comms Config and Comms Engine MIBs. See: 'ScmSecPosixVerbs' and 'scmSecServiceTypeOID' in SCMI Security TC/MIB.")
scmHrAdminDeviceOperationTypes = ObjectIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4))
if mibBuilder.loadTexts: scmHrAdminDeviceOperationTypes.setStatus('current')
if mibBuilder.loadTexts: scmHrAdminDeviceOperationTypes.setDescription("The root of all host resources admin device operation types defined in the Host Resources Extensions TC. Usage: The following OIDs support access control for the simple device admin operations defined in 'ScmHrDevMgmtCommandRequest' and used in 'scmHrDevMgmtCommandRequest' in the SCMI HRX MIB, via 'scmSec[Master|Policy]VerbTypeOID' in the SCMI Security MIB, WITHOUT requiring implementation of the SCMI System Admin MIB.")
if mibBuilder.loadTexts: scmHrAdminDeviceOperationTypes.setReference("See: 'scmSec[Master|Policy]VerbTypeOID' in SCMI Security MIB.")
scmHrAdminDeviceNone = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 1))
scmHrAdminDeviceStartup = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 2))
scmHrAdminDeviceResetWarning = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 3))
scmHrAdminDeviceTest = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 4))
scmHrAdminDeviceShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 5))
scmHrAdminDeviceQuiesce = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 6))
scmHrAdminDeviceResetCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 7))
scmHrAdminDeviceResetWarm = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 8))
scmHrAdminDeviceResetCold = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 9))
scmHrAdminDeviceResetFactory = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 10))
scmHrAdminDeviceFlushInput = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 11))
scmHrAdminDeviceFlushOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 12))
scmHrAdminDeviceFlushInOut = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 13))
scmHrAdminDeviceManage = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 14))
scmHrAdminDeviceRefresh = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 15))
scmHrAdminDeviceWarmUp = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 16))
scmHrAdminDeviceCoolDown = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 17))
scmHrAdminDeviceEnergySave = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 18))
scmHrAdminDeviceWakeUp = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 19))
scmHrAdminDevicePowerToReady = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 20))
scmHrAdminDevicePowerToStandby = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 21))
scmHrAdminDevicePowerToSleep = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 4, 22))
class ScmHrDevCalendarDayOfWeek(TextualConvention, Integer32):
    description = "The day of week when the command specified in a conceptual row in the 'scmHrDevCalendarTable' SHALL be invoked."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7), ("everyDay", 8), ("businessOpenDay", 9), ("businessClosedDay", 10), ("businessHoliday", 11))

class ScmHrDevCalendarTimeOfDay(TextualConvention, Integer32):
    description = "The time of day when the command specified in a conceptual row in the 'scmHrDevCalendarTable' SHALL be invoked, specified as hours (0..23) multiplied by 100, added to minutes (0..59), added to a constant bias of 10000 (avoids an index value of zero in 'scmHrDevCalendarTimeOfDay')."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(10000, 12359)

class ScmHrDevDetailType(TextualConvention, Integer32):
    reference = "See: 'scmHrDevDetailUnitClass' and 'scmHrDevDetailUnit' for syntax of device detail."
    description = "The type of the device detail information specified in this conceptual row in the 'scmHrDevDetailTable'. Usage: Conforming management stations and management agents SHALL implement specified semantics for device detail types."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 130, 140, 160, 161, 162, 163, 191, 192, 193, 194, 200, 201, 202, 203, 204, 210, 211, 212, 213, 220, 221, 230, 231, 232))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("deviceName", 3), ("deviceAlias", 4), ("deviceType", 5), ("deviceDescription", 6), ("deviceID", 7), ("deviceTree", 8), ("deviceContext", 9), ("deviceManufacturer", 10), ("deviceModel", 11), ("deviceSerialNumber", 12), ("deviceVendor", 13), ("deviceVersion", 14), ("deviceServiceByCustomer", 15), ("deviceReplaceByCustomer", 16), ("deviceServicePlanName", 17), ("deviceServicePlanPassword", 18), ("deviceReplaceByWarranty", 19), ("deviceLifetimeUsage", 20), ("deviceReorderLifetimeLimit", 21), ("deviceWarningLifetimeLimit", 22), ("deviceReplaceLifetimeLimit", 23), ("deviceMaximumLifetimeLimit", 24), ("deviceDaysUntilReorderMsg", 25), ("deviceDaysUntilWarningMsg", 26), ("deviceDaysUntilReplaceMsg", 27), ("deviceDaysUntilMaximumMsg", 28), ("deviceLifetimeMsgDisplay", 29), ("deviceAccountingUsage", 30), ("deviceReorderOnDate", 31), ("deviceWarningOnDate", 32), ("deviceReplaceOnDate", 33), ("deviceMaximumOnDate", 34), ("deviceLifetimeErrorCount", 35), ("deviceLifetimeErrorLimit", 36), ("deviceLifetimeWarningCount", 37), ("deviceLifetimeWarningLimit", 38), ("deviceTriggerDaysForReorder", 41), ("deviceTriggerDaysForWarning", 42), ("deviceTriggerDaysForReplace", 43), ("deviceTriggerDaysForMaximum", 44), ("deviceReorderMsgSentDate", 51), ("deviceWarningMsgSentDate", 52), ("deviceReplaceMsgSentDate", 53), ("deviceMaximumMsgSentDate", 54), ("deviceReorderToVendorDate", 55), ("deviceReorderConfirmDate", 56), ("deviceReplaceDate", 57), ("deviceReplaceSystemUsage", 58), ("deviceReplaceWithGeneric", 59), ("deviceHelpName", 60), ("deviceHelpAddress", 61), ("deviceHelpDescription", 62), ("deviceHelpLocation", 63), ("deviceHelpURI", 64), ("deviceTranslatorSupport", 71), ("deviceTranslatorReady", 72), ("deviceInitialValueJobSupport", 73), ("deviceInitialValueDocSupport", 74), ("deviceMultipleDocSupport", 75), ("deviceCancelDocSupport", 76), ("deviceForeignJobsVisible", 77), ("deviceInitialValueJobDefault", 78), ("deviceInitialValueDocDefault", 79), ("deviceInputMaxSpeedTrafficUnit", 80), ("deviceInputMaxSpeedTimeUnit", 81), ("deviceInputMaxSpeed", 82), ("deviceOutputMaxSpeedTrafficUnit", 83), ("deviceOutputMaxSpeedTimeUnit", 84), ("deviceOutputMaxSpeed", 85), ("deviceFeedResolutionSupport", 86), ("deviceXFeedResolutionSupport", 87), ("deviceSchedulerSupport", 88), ("deviceSchedulerReady", 89), ("devicePhysicalNameSupport", 90), ("devicePhysicalNameReady", 91), ("deviceLogicalNameSupport", 92), ("deviceLogicalNameReady", 93), ("devicePhysicalIndexSupport", 94), ("devicePhysicalIndexReady", 95), ("deviceLogicalIndexSupport", 96), ("deviceLogicalIndexReady", 97), ("deviceJobServiceDeviceIndex", 98), ("deviceJobHistoryDeviceIndex", 99), ("deviceFontIndexSupport", 100), ("deviceFontIndexReady", 101), ("deviceResourceIndexSupport", 102), ("deviceResourceIndexReady", 103), ("devicePowerModeName", 110), ("devicePowerModeType", 111), ("devicePowerModeDescription", 112), ("devicePowerModeSupport", 113), ("devicePowerTimeUnit", 114), ("devicePowerWarmerSupport", 115), ("devicePowerCoolerSupport", 116), ("devicePowerWarmerDelay", 117), ("devicePowerWarmerDuration", 118), ("devicePowerCoolerDelay", 119), ("devicePowerCoolerDuration", 120), ("devicePowerWarmerTrigger", 121), ("devicePowerCoolerTrigger", 122), ("deviceNextWarmerModeIndex", 123), ("deviceNextCoolerModeIndex", 124), ("deviceEnergyStarSuspendMode", 125), ("deviceProcessorFrwID", 130), ("deviceNetworkIfIndex", 140), ("deviceDiskStorageAccess", 160), ("deviceDiskStorageMedia", 161), ("deviceDiskStorageRemovable", 162), ("deviceDiskStorageCapacity", 163), ("deviceJobIncompleteTimeout", 191), ("deviceJobProgrammingTimeout", 192), ("deviceJobHoldDeleteTimeout", 193), ("deviceJobPauseResumeTimeout", 194), ("deviceGuestJobPolicy", 200), ("deviceAlienJobPolicy", 201), ("deviceEventLogFullPolicy", 202), ("deviceJobLogFullPolicy", 203), ("deviceRequestLogFullPolicy", 204), ("deviceUniversalProductCode", 210), ("deviceModelName", 211), ("deviceModelDescription", 212), ("deviceModelNumber", 213), ("deviceManufacturerURI", 220), ("deviceModelURI", 221), ("deviceServiceUsage", 230), ("deviceDeltaServiceUsage", 231), ("deviceRolloverValue", 232))

class ScmHrDevDetailUnitClass(TextualConvention, Integer32):
    description = "The value unit class of the device detail information specified in this conceptual row in the 'scmHrDevDetailTable'. Usage: Used to select a textual convention for specifying the units of this device detail value. Usage: Some of the value unit class enumerations specify that the actual unit is REQUIRED to be selected in '...DetailUnit' and REQUIRE '...DetailValueString' contains a value in units (and are commented as such below). Usage: Some of the value unit class enumerations specify the actual unit DIRECTLY and REQUIRE that '...DetailUnit' be zero and REQUIRE '...DetailValueString' contains a value in the named textual convention (or a bit-mask derived from it) (and are commented as such below). Usage: Some of the value unit class enumerations specify that '...DetailValueString' SHALL contain a bit-mask which is formed via the bit-wise OR of '2**(n)', where (n) is each selected enumerated value in the named textual convention. (see 'scmGenBaseSNMPDomainSupport' object in SCMI General MIB)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("classGenOptionValueSyntax", 3), ("classDateAndTime", 4), ("classHrDevCalendarDayOfWeek", 5), ("classHrDevCalendarTimeOfDay", 6), ("classHrDevMgmtCommandRequest", 7), ("classHrDevPowerTimeUnit", 8), ("classHrDevTrafficUnit", 9), ("classRowPersistence", 10), ("classRowPersistenceMask", 11), ("classLogFullPolicy", 12), ("classLogFullPolicyMask", 13), ("classHrDevInfoStatus", 14), ("classHrDevInfoStatusMask", 15), ("classHrDevInfoXStatus", 16), ("classHrDpaState", 17), ("classHrDpaConditions", 18), ("classHrDpaAvailability", 19), ("classHrDpaObjectClassSupport", 20), ("classHrDpaJobValidateSupport", 21), ("classJMJobState", 22), ("classJMJobStateMask", 23), ("classSecGuestJobPolicy", 24), ("classSecGuestJobPolicyMask", 25), ("classSecPosixRights", 26), ("classSecPosixVerbs", 27), ("classSvcMonJobConfirmSupport", 28), ("classSvcMonAttachmentPDLSupport", 29))

class ScmHrDevInfoRealization(TextualConvention, Integer32):
    reference = "See: 'hrDeviceType' in the basic Device Group of the IETF Host Resources MIB (RFC 2790). See: Section 9.4 'Printer Object attributes' of ISO DPA (Document Printing Application) ISO/IEC 10175 (Final Text, March 1996) for a discussion of 'printer realizations' of 'physical', 'logical', and 'logical-and-physical' types (the latter unique to DPA)."
    description = "An extended device type (or device 'realization'), used by system administrators and end users of this device. Usage: The use of either 'other' or 'unknown' is uninformative and SHOULD be avoided by conforming implementations. * 'physical' - 'real' device installed on this managed system; * 'logical' - 'virtual' device configured on this managed system; * 'logicalAndPhysical' - 'combined' device (from ISO DPA ??)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 11, 12, 13))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("physical", 11), ("logical", 12), ("logicalAndPhysical", 13))

class ScmHrDevInfoStatus(TextualConvention, Integer32):
    reference = "See: 'hrDeviceStatus' in the basic Device Group of the IETF Host Resources MIB (RFC 2790). See: 'scmHrDevInfoXStatus', 'scmHrDevInfoConditions', and 'scmHrDevInfoXConditions' in the Host Resources Extensions MIB."
    description = "The current operational state of the device described by this row of the table. A value 'unknown(1)' indicates that the current state of the device is unknown. 'running(2)' indicates that the device is up and running and that no unusual error conditions are known. The 'warning(3)' state indicates that agent has been informed of an unusual error condition by the operational software (eg, a disk device driver) but that the device is still 'operational'. An example would be a high number of soft errors on a disk. A value of 'testing(4)', indicates that the device is not available for use because it is in the testing state. The state of 'down(5)' is used only when the agent has been informed that the device is not available for any use. Usage: Conforming implementations SHALL NOT 'bubble up' status from 'physical' devices to associated 'logical' devices. All devices SHALL report their own status ONLY. Usage: Devices in the 'down' state SHOULD NOT be accepting new work (or still processing old work). Devices in the 'running' state SHOULD be prepared to accept new work. Usage: The use of the state 'unknown' is uninformative and SHOULD be avoided by conforming implementations. Usage: This is a textual convention representation of the 'hrDeviceStatus' enumeration in the IETF Host Resources MIB (RFC 2790), rewritten from SMIv1 style (RFCs 1155 and 1212) into SMIv2 style (RFCs 1902/2578, 1903/2579, and 1904/2580)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("running", 2), ("warning", 3), ("testing", 4), ("down", 5))

class ScmHrDevInfoXStatus(TextualConvention, Integer32):
    reference = "See: Section 9.4.9 'Printer-state' of ISO DPA (Document Printing Application) ISO/IEC 10175 (Final Text, 18 May 1995) for a discussion of the printer states used here. Note that the DPA state 'connecting-to-printer' has no meaning in the context of a 'physical' printer device, but only in the context of an intermediate DP-Server presenting a 'logical' printer device. See: 'hrPrinterStatus' and 'hrPrinterDetectedErrorState' in the IETF Host Resources MIB (RFC 2790) for related discussion. See: 'hrDeviceStatus' in the basic Device Group of the IETF Host Resources MIB (RFC 2790). See: 'scmHrDevInfoConditions' and 'scmHrDevInfoXConditions' in the Host Resources Extensions MIB."
    description = "An extended device status, used by system administrators and end users of this device (here, read 'state' for 'status'). Usage: Conforming implementations SHALL NOT 'bubble up' status from 'physical' devices to associated 'logical' devices. All devices SHALL report their own status ONLY. Usage: Exactly one enumeration of extended device status SHALL be defined, with ranges for each basic device type (eg, 'hrDevicePrinter'). The legal range for extended device status for a given device type (either defined by RFC 2790 or by this MIB) is found by multiplying the final arc of the the device type OID by 100 - the result is the device specific range base - the end of the device specific range is 99 larger. These device specific extended device status values SHALL be reissued periodically in the 'ScmHrDevInfoXStatus' textual convention."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 99, 100, 200, 300, 400, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 600, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 10100, 10200, 10300, 10400, 10500, 11100, 11200, 11300, 11400, 11500, 11600, 11700, 20000, 20001, 20002, 20003, 20004, 20005, 20006, 40000))
    namedValues = NamedValues(("commonNone", 0), ("commonOther", 1), ("commonUnknown", 2), ("commonLast", 99), ("otherNone", 100), ("unknownNone", 200), ("processorNone", 300), ("networkNone", 400), ("printerNone", 500), ("printerOther", 501), ("printerUnknown", 502), ("printerIdle", 503), ("printerPrinting", 504), ("printerNeedsAttention", 505), ("printerPaused", 506), ("printerShutdown", 507), ("printerJobStartWait", 508), ("printerJobEndWait", 509), ("printerNeedsKeyOperator", 510), ("printerJobPasswordWait", 511), ("printerTimedOut", 512), ("printerConnectingToPrinter", 513), ("diskStorageNone", 600), ("videoNone", 1000), ("audioNone", 1100), ("coprocessorNone", 1200), ("keyboardNone", 1300), ("modemNone", 1400), ("parallelPortNone", 1500), ("pointingNone", 1600), ("serialPortNone", 1700), ("tapeNone", 1800), ("clockNone", 1900), ("volatileMemoryNone", 2000), ("nonVolatileMemoryNone", 2100), ("hostSystemNone", 10100), ("scannerNone", 10200), ("copierNone", 10300), ("faxNone", 10400), ("mailboxNone", 10500), ("markerNone", 11100), ("finisherBFMNone", 11200), ("finisherMFFNone", 11300), ("finisherXIMNone", 11400), ("finisher3rdPartyNone", 11500), ("paymentInterfaceNone", 11600), ("interposerNone", 11700), ("cruNone", 20000), ("cruOther", 20001), ("cruUnknown", 20002), ("cruReady", 20003), ("cruReorder", 20004), ("cruReplace", 20005), ("cruFault", 20006), ("reserved", 40000))

class ScmHrDevInfoConditions(TextualConvention, Integer32):
    reference = "See: 'hrDeviceStatus' in the basic Device Group of the IETF Host Resources MIB (RFC 2790). See: 'scmHrDevInfoXStatus' and 'scmHrDevInfoXConditions' in the Host Resources Extensions MIB."
    description = "A relatively generic description of the current 'conditions' of this device, specified in a bit-mask. 1 : startupInProgress -- 2**0 2 : resetWarningInProgresss -- 2**1 (optional) 4 : testInProgress -- 2**2 8 : shutdownInProgress -- 2**3 (optional) 16 : quiesceInProgress -- 2**4 (optional) 32 : resetCountersInProgress -- 2**5 (optional) 64 : resetWarmInProgress -- 2**6 128 : resetColdInProgress -- 2**7 256 : resetFactoryInProgress -- 2**8 512 : flushInputInProgress -- 2**9 1024 : flushOutputInProgress -- 2**10 2048 : flushInOutInProgress -- 2**11 4096 : manageInProgress -- 2**12 (optional) The above basic 'conditions' record the original intent of the current command, when it results in delayed state transitions before arriving at the 'target' state. They augment the state information available from 'hrDeviceStatus'. 8192 : warmUpDelayInProgress -- 2**13 (optional) 16384 : warmUpCycleInProgress -- 2**14 (optional) 32768 : readyMode -- 2**15 (optional) 65536 : coolDownDelayInProgress -- 2**16 (optional) 131072 : coolDownCycleInProgress -- 2**17 (optional) 262144 : standbyMode -- 2**18 (optional) 524288 : energySaveDelayInProgress -- 2**19 (optional) 1048576 : energySaveCycleInProgress -- 2**20 (optional) 2097152 : sleepMode -- 2**21 (optional) 4194304 : wakeUpDelayInProgress -- 2**22 (optional) 8388608 : wakeUpCycleInProgress -- 2**23 (optional) 16777216 : powerToReadyInProgress -- 2**24 (optional) 33554432 : powerToStandbyInProgress -- 2**25 (optional) 67108864 : powerToSleepInProgress -- 2**26 (optional) The above optional 'conditions' record the progress of device 'warm up', 'cool down', 'energy save', and 'wake up' power mgmt cycles and also define the device 'readyMode', 'standbyMode', and 'sleepMode' qualifiers to the generic 'hrDeviceStatus' of 'running(2)', 'warning(3)', or 'testing(4)' (but NOT 'down(5)'). See the power management cycle feature support and feature time objects in the Device Power Group of the Host Resources Ext MIB. Usage: It is desirable that the implementor report 'conditions' of all devices corresponding to conceptual rows in the 'hrDeviceTable' as accurately as feasible. 'Conditions' occur within or across 'states' in a finite state machine (FSM) implementation of a device. They represent both short term and long term conditions. Usage: A device with 'hrDeviceStatus' of 'running(2)' might have 'scmHrDevInfoConditions' of 'quiesceInProgress', indicating that the device will soon transition to 'hrDeviceStatus' of 'down(5)'. Usage: A multi-bit example of 'scmHrDevInfoConditions' is 'quiesceInProgress' concurrently with 'standbyMode', ie, the device has previously 'cooled down' and will soon transition from 'hrDeviceStatus' of 'running(2)' to 'down(5)'."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class ScmHrDevInfoXConditions(TextualConvention, Integer32):
    reference = "See: 'hrDeviceStatus' in the basic Device Group of the IETF Host Resources MIB (RFC 2790). See: 'scmHrDevInfoXStatus' and 'scmHrDevInfoConditions' in the Host Resources Extensions MIB."
    description = "A device specific description of the extended 'conditions' of this device, specified in a bit-mask. Usage: For FUTURE expansion. Usage: Exactly one bit mask of extended device conditions SHALL be defined for each basic device type (eg, 'hrDevicePrinter'). These device specific extended device conditions values SHALL be reissued periodically in the 'ScmHrDevInfoXConditions' textual convention. These device specific extended device conditions are mutually exclusive and 'overloaded' in the single reporting object 'scmHrDevInfoXConditions'."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class ScmHrDevMgmtCommandRequest(TextualConvention, Integer32):
    reference = "See: 'dot5Commands' in IEEE 802.5 Token Ring MIB (RFC 1748) and 'hrDeviceStatus' in IETF Host Resources MIB (RFC 2790). Compare: 'ifOperStatus' (current) and 'ifAdminStatus' (desired) in the Interfaces Group of IETF MIB-II (RFC 1213); 'RowStatus' textual convention in IETF SMIv2 (RFC 1902/2578). See: Section 4 'Print Utilities' (pages 71 to 212) of POSIX Sys Admin (IEEE 1387.4 / Draft 8, October 1994). See: OBJECT clause in MODULE-COMPLIANCE macro of SCMI Ext to Host Resources MIB, for compliance info. See: Section 3.4 'SCMI Standard Tagged Management Data' and Section 3.5 'Simple Device Management Requests' in SCMI Ext to Host Resources TC. See: Section 3.5.3 'Secure Simple Device Mgmt Requests' in SCMI Security TC."
    description = "A write of this type by an (authorized) management station invokes a command for this device. A read of this type always returns the command currently in progress or last completed. It is mandatory that a conforming management agent ensure that the contents of this object remain 'in bounds' - an undefined value SHALL be replaced by 'none' - ie, although rejected with error in the SetResponse PDU, this object SHALL NOT contain any such undefined value. At system initialization, this object SHALL contain 'none'. * 'none' - NO action(s) SHALL be taken, except to clear '...CommandData' and set '...CommandStatus' to 'noError'. * 'test' or 'manage' - the associated '...CommandData' object SHOULD/SHALL be specified in the same SetRequest PDU. * all other commands - the associated '...CommandData' object MAY be specified in the same SetRequest PDU. * 'startup', 'resetWarm', 'resetCold', or 'resetFactory' - the final state SHALL be 'running' (after cycle completes) - the sequence of states SHOULD be 'down' -> 'testing' -> 'running' - the final power mode SHALL be 'ready'. * 'startup' - this device SHALL transition from the 'down' state to the 'running' state and 'ready' power mode. * 'resetWarning' - this device SHALL transition from the 'warning' state to the 'running' state (because a management station has acknowledged the management agent's previous warning). * 'test' - this device SHALL transition immediately (ie, without attempting graceful quiesce) to the 'testing' state; it is a local matter (ie, device specific) how this command is processed; however, '...CommandData' SHOULD be specified. * 'shutdown' - this device SHALL transition immediately (ie, without attempting graceful quiesce) to the 'down' state and 'off' power mode. * 'quiesce' - this device MAY transition gracefully to the 'down' state, or it MAY choose to treat a 'quiesce' as 'shutdown'. * 'resetCounters' - all device counters SHALL be reset to zero and the device SHALL remain in the same state and power mode. * 'resetWarm' - a device 'warm restart' SHALL be performed (ie, without a power cycle reset). * 'resetCold' - a device 'cold restart' SHALL be performed (ie, with a power cycle reset). * 'resetFactory' - all factory defaults SHALL be restored, and a device 'cold restart' SHALL be performed (ie, with a power cycle reset). * 'flushInput' - all device input (in progress or internally queued) SHALL be gracefully flushed. * 'flushOutput' - all device output (in progress or internally queued) SHALL be gracefully flushed. * 'flushInOut' - all device input and output output (in progress or internally queued) SHALL be gracefully flushed. * 'manage' - it is a local matter (ie, device specific) how this command is processed; however, '...CommandData' SHALL be specified. * 'refresh' - the device SHALL promptly read all of its manageable configuration parameters, but SHALL NOT perform a reset. * 'warmUp' - the device SHALL transition from the 'standby' mode to the 'ready' mode - invalid from any other power mode (optional command for remote device power management). * 'coolDown' - the device SHALL transition from the 'ready' mode to the 'standby' mode - invalid from any other power mode (optional command for remote device power management). * 'energySave' - the device SHALL transition from the 'standby' mode to the 'sleep' mode - invalid from any other power mode (optional command for remote device power management). * 'wakeUp' - the device SHALL transition from the 'sleep' mode to the 'standby' mode - invalid from any other power mode (optional command for remote device power management). * 'powerToReady' - the device SHALL transition from the 'standby' mode or the 'sleep' mode to the 'ready' mode (optional command for remote device power management). * 'powerToStandby' - the device SHALL transition from the 'ready' mode or the 'sleep' mode to the 'standby' mode (optional command for remote device power management). * 'powerToSleep' - the device SHALL transition from the 'ready' mode or the 'standby' mode to the 'sleep' mode (optional command for remote device power management). Note: All of the POSIX and SCMI device level operations are taken from the POSIX System Admin std (IEEE 1387.4) and aligned with the high-end SCMI System Admin MIB."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 2301, 2302, 2321, 2322, 2323, 2324, 2325, 2326, 2331, 2332, 2333, 2334, 2335, 2336, 2341, 2342, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 2901, 2902, 2921, 2922, 2923, 2924, 2925, 2926, 2931, 2932, 2933, 2934, 2935, 2936, 2941, 2942))
    namedValues = NamedValues(("none", 1), ("startup", 2), ("resetWarning", 3), ("test", 4), ("shutdown", 5), ("quiesce", 6), ("resetCounters", 7), ("resetWarm", 8), ("resetCold", 9), ("resetFactory", 10), ("flushInput", 11), ("flushOutput", 12), ("flushInOut", 13), ("manage", 14), ("refresh", 15), ("warmUp", 16), ("coolDown", 17), ("energySave", 18), ("wakeUp", 19), ("powerToReady", 20), ("powerToStandby", 21), ("powerToSleep", 22), ("deviceCreate", 1301), ("deviceDelete", 1302), ("deviceList", 1303), ("deviceSet", 1304), ("deviceClean", 1305), ("deviceDisable", 1306), ("deviceEnable", 1307), ("devicePause", 1308), ("deviceResume", 1309), ("deviceShutdown", 1310), ("deviceQueueList", 1311), ("deviceJobCreate", 1312), ("deviceManage", 2301), ("deviceRestart", 2302), ("deviceInstall", 2321), ("deviceUpgrade", 2322), ("deviceBackup", 2323), ("deviceRestore", 2324), ("deviceConfigure", 2325), ("deviceDiagnose", 2326), ("deviceResetCounters", 2331), ("deviceResetWarm", 2332), ("deviceResetCold", 2333), ("deviceResetFactory", 2334), ("deviceFormat", 2335), ("deviceRefresh", 2336), ("deviceLogin", 2341), ("deviceLogout", 2342), ("entityCreate", 1901), ("entityDelete", 1902), ("entityList", 1903), ("entitySet", 1904), ("entityClean", 1905), ("entityDisable", 1906), ("entityEnable", 1907), ("entityPause", 1908), ("entityResume", 1909), ("entityShutdown", 1910), ("entityQueueList", 1911), ("entityJobCreate", 1912), ("entityManage", 2901), ("entityRestart", 2902), ("entityInstall", 2921), ("entityUpgrade", 2922), ("entityBackup", 2923), ("entityRestore", 2924), ("entityConfigure", 2925), ("entityDiagnose", 2926), ("entityResetCounters", 2931), ("entityResetWarm", 2932), ("entityResetCold", 2933), ("entityResetFactory", 2934), ("entityFormat", 2935), ("entityRefresh", 2936), ("entityLogin", 2941), ("entityLogout", 2942))

class ScmHrDevMgmtCommandData(TextualConvention, OctetString):
    reference = "See: Section 4 'Print Utilities' (pages 71 to 212) of POSIX Sys Admin (IEEE 1387.4 / Draft 8, October 1994). See: 'hrDeviceStatus' in the Device group of the IETF Host Resources MIB (RFC 2790). See: Section 3.4 'SCMI Standard Tagged Management Data' and Section 3.5 'Simple Device Management Requests' in SCMI Ext to Host Resources TC. See: Section 3.5.3 'Secure Simple Device Mgmt Requests' in SCMI Security TC."
    description = "A write of this type specifies: a) a 'test' command subtype and any accompanying 'test' device specific data; or b) a 'manage' command subtype and any accompanying 'manage' device specific data; or c) device specific data accompanying any other command. A read of this type always returns the data (if any) which accompanied the current or last completed command."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class ScmHrDevMgmtCommandDataTag(TextualConvention, OctetString):
    reference = "See: Section 4 'Print Utilities' (pages 71 to 212) of POSIX Sys Admin (IEEE 1387.4 / Draft 8, October 1994). See: 'hrDeviceStatus' in the Device group of the IETF Host Resources MIB (RFC 2790). See: Section 3.4 'SCMI Standard Tagged Management Data' and Section 3.5 'Simple Device Management Requests' in SCMI Ext to Host Resources TC. See: Section 3.5.3 'Secure Simple Device Mgmt Requests' in SCMI Security TC."
    description = "SCMI device management commands are passed as enumerated types in 'scmHrDevMgmtCommandRequest' in the SCMI HRX MIB. Other SCMI management commands are passed as enumerated types in 'scmCommsMgmtCommandRequest', 'scmSimpleJobMgmtOperation', etc, in the SCMI Comms Engine, Simple Job Mgmt, and other MIBs. SCMI management commands MAY also require one or more arguments (in addition to any specific variable bindings of MIB objects). Required arguments are passed as 'tagged string arguments' in 'scmHrDevMgmtCommandData', 'scmSimpleJobMgmtData', etc. Each 'tagged string argument' substring is of the form: 'TT=value:' where: 'TT' two-character 'tag', naming argument type '=' literal equal sign, beginning argument value 'value' human-readable string, encoding argument value ':' literal colon, terminating argument value SCMI conforming management stations SHALL terminate ALL 'tagged string argument' substrings properly with colon (':'). SCMI standard 'tagged string arguments' MAY pass colon (':') in their 'value' by escaping it with backslash ('\\'). SCMI conforming management agents SHALL interpret backslash followed by ANY other character as the literal value of the second character (ie, backslash is permitted, and is NOT restricted to certain following characters). SCMI standard 'tags' for data in 'tagged string arguments', (in 'scmHrDevMgmtCommandData', 'scmSimpleJobMgmtData', etc) are as follows: -- Generic Data (no object mapping to MIBs) -- For domain-specific future extensions to operations * SC [Sub-Command - domain-specific, must be FIRST tag present] -- syntax 'ScmFixedLocaleDisplayString (SIZE (0..255))' -- domain-specific sub-command for management request -- passed in fixed locale (see 'scmGenFixedLocalizationIndex') -- passed as character string, NOT as binary value -- For generic access to any IETF or SCMI defined objects * OI [Object Identifier - no object mapping] -- syntax 'OBJECT IDENTIFIER' -- object identifier of object (WITHOUT instance qualifiers) -- passed as dotted decimal OID or as object label -- (eg, 'hrDeviceID'), NOT as binary object identifier * OV [Object Value - no object mapping] -- syntax 'ScmFixedLocaleDisplayString (SIZE (0..255))' -- object value of object -- passed as character string, NOT as binary value -- passed in fixed locale (see 'scmGenFixedLocalizationIndex') -- For protection against 'replay' attacks * DT [Date and Time - no object mapping] -- (see 'hrSystemDate' in System group of IETF HR MIB) -- syntax 'DateAndTime' -- date and time stamp for management request -- passed as dotted decimal string (ie, 'yyyy.mm.dd.hh.mm.ss'), -- NOT as binary value * NI [Noise Information - no object mapping] -- syntax 'ScmFixedLocaleDisplayString (SIZE (0..255))' -- arbitrary noise info for management request -- passed as hexadecimal string, NOT as binary value * SI [Sequence Identifier - no object mapping] -- syntax 'Ordinal32' -- sequence ID for management request (for 'secure streams') -- passed as decimal string, NOT as binary value -- Security Data from SCMI Security MIB (63sec) -- For account-based authentication * AI 'scmSecAccountIndex' -- syntax 'Ordinal32' -- index of account (ie, account ID) -- passed as decimal string, NOT as binary value * AN 'scmSecAccountName' -- syntax 'ScmFixedLocaleDisplayString (SIZE (0..255))' -- human-readable name of account (ie, account label) -- passed in fixed locale (see 'scmGenFixedLocalizationIndex') * AC 'scmSecAccountPasscode' -- syntax 'ScmFixedLocaleDisplayString (SIZE (0..255))' -- protected numeric password of account -- passed as hexadecimal string, NOT as binary value -- (protected text form, NOT cleartext password) * AW 'scmSecAccountPassword' -- syntax 'ScmFixedLocaleDisplayString (SIZE (0..255))' -- protected alphanumeric password of account -- passed as hexadecimal string, NOT as binary value -- (protected text form, NOT cleartext password) -- For user-based authentication * UI 'scmSecUserIndex' -- syntax 'Ordinal32' -- index of user (ie, user ID) -- passed as decimal string, NOT as binary value * UN 'scmSecUserName' -- syntax 'ScmFixedLocaleDisplayString (SIZE (0..255))' -- human-readable name of user (ie, user label) -- passed in fixed locale (see 'scmGenFixedLocalizationIndex') * UC 'scmSecUserPasscode' -- syntax 'ScmFixedLocaleDisplayString (SIZE (0..255))' -- protected numeric password of user -- passed as hexadecimal string, NOT as binary value -- (protected text form, NOT cleartext password) * UW 'scmSecUserPassword' -- syntax 'ScmFixedLocaleDisplayString (SIZE (0..255))' -- protected alphanumeric password of user -- passed as hexadecimal string, NOT as binary value -- (protected text form, NOT cleartext password) -- System group of IETF MIB-II (RFC 1213) * ZD 'sysDescr' -- syntax 'DisplayString (SIZE (0..255))' -- (NVT ASCII string) -- textual description of host system, -- passed as ASCII string, NOT as localized string -- (see SCMI MIB Implementer's Guide for the format -- of sysDescr). -- (see 'hrDeviceDescr' of type 'DisplayString' in IETF HR MIB) * ZI 'sysObjectID' -- syntax 'OBJECT IDENTIFIER' -- product ID of host system -- passed as dotted decimal OID or as system product ID label -- (eg, 'scmPidStarship20'), NOT as binary object identifier -- (see 'hrDeviceID' of type 'ProductID' in IETF HR MIB) * ZS 'sysServices' -- syntax 'INTEGER (0..127)' -- bit-mask of services host system offers -- passed as decimal string, NOT as binary value -- Interface group of IETF MIB-II (RFC 1213) * IX 'ifIndex' -- syntax 'INTEGER (1..2147483647)' -- index of host system interface conceptual row -- (REQUIRED for 'entityCreate') -- passed as decimal string, NOT as binary index * ID 'ifDescr' -- syntax 'DisplayString (SIZE (0..255))' -- (NVT ASCII string) -- textual description of host system interface, -- including manufacturer, product name, version of hardware * IY 'ifType' -- syntax 'INTEGER (1..2147483647)' (enumeration) -- (see 'IANAifType' textual convention in 'IANAifType-MIB') -- type of host system interface -- passed as decimal string or as interface type enum label -- (eg, 'iso88025-tokenRing'), NOT as binary value * IM 'ifMtu' -- syntax 'INTEGER (0..2147483647)' -- max transmission unit (datagram) on host system interface -- passed as decimal string, NOT as binary value * IS 'ifSpeed' -- syntax 'INTEGER (0..2147483647)' -- speed (bits/second) of host system interface -- passed as decimal string, NOT as binary value * IP 'ifPhysAddress' -- syntax 'PhysAddress' -- physical address of host system interface -- passed as hexadecimal string, NOT as binary value * IZ 'ifSpecific' -- syntax 'OBJECT IDENTIFIER' -- reference to media-specific MIB for host system interface -- passed as dotted decimal OID or as media-specific MIB label -- (eg, 'EtherLike-MIB'), NOT as binary value -- System group of IETF HR MIB (RFC 2790) * ZA 'hrSystemDate' -- syntax 'DateAndTime' -- local date and time on host system -- passed as dotted decimal string (ie, 'yyyy.mm.dd.hh.mm.ss'), -- NOT as binary value * ZL 'hrSystemInitialLoadDevice' -- syntax 'INTEGER (1..2147483647)' -- (see 'hrDeviceIndex' in IETF HR MIB) -- index of 'hrDeviceEntry' for host system boot device -- (usually a disk drive or ROM) -- passed as decimal string, NOT as binary value * ZP 'hrSystemInitialLoadParameters' -- syntax 'InternationalDisplayString (SIZE (0..128))' -- host system boot parameters (eg, pathname and options) -- passed in dynamic locale -- (see 'scmGenCurrentLocalizationIndex') * ZM 'hrSystemMaxProcesses' -- syntax 'INTEGER (0..2147483647)' -- max number of process contexts supported on host system -- or zero (if no fixed limit) -- passed as decimal string, NOT as binary value -- Storage group of IETF HR MIB (RFC 2790) * SX 'hrStorageIndex' -- syntax 'INTEGER (1..2147483647)' -- index of host system storage conceptual row -- (REQUIRED for 'entityCreate') -- passed as decimal string, NOT as binary index * SY 'hrStorageType' -- syntax 'OBJECT IDENTIFIER' -- (see 'hrStorageTypes' in IETF HR MIB) -- type of host system storage -- passed as dotted decimal OID or as storage type label * SD 'hrStorageDescr' -- syntax 'DisplayString (SIZE (0..64))' -- (NVT ASCII string) -- textual description of host system storage, -- including the type and instance of the storage -- passed as ASCII string, NOT as localized string * SU 'hrStorageAllocationUnits' -- syntax 'INTEGER (1..2147483647)' -- (size in bytes) -- size of allocation units on host system storage -- passed as decimal string, NOT as binary value * SS 'hrStorageSize' -- syntax 'INTEGER (1..2147483647)' -- (size in allocation units) -- size in 'hrStorageAllocationUnits' of host system storage -- passed as decimal string, NOT as binary value -- Device table in Device group of IETF HR MIB (RFC 2790) * DX 'hrDeviceIndex' -- syntax 'INTEGER (1..2147483647)' -- index of host system device conceptual row -- (REQUIRED for 'deviceCreate') -- passed as decimal string, NOT as binary index * DY 'hrDeviceType' -- syntax 'OBJECT IDENTIFIER' -- (see 'hrDeviceTypes' in IETF HR MIB) -- type of host system device -- (certain device types make related table entries MANDATORY) -- passed as dotted decimal OID or as device type label -- (eg, 'hrDevicePrinter'), NOT as binary 'OBJECT IDENTIFIER' * DD 'hrDeviceDescr' -- syntax 'DisplayString' (SIZE (0..64)) -- (NVT ASCII string) -- textual description of host system device, -- including manufacturer and revision, and -- (optionally) serial number -- passed as ASCII string, NOT as localized string * DI 'hrDeviceID' -- syntax 'ProductID' -- (manufacturer defined object identifier) -- product ID of host system device -- passed as dotted decimal OID or as device product ID label -- (eg, 'scmPidStarship20'), NOT as binary object identifier -- Processor table in Device group of IETF HR MIB (RFC 2790) * PI 'hrProcessorFrwID' -- syntax 'ProductID' -- (manufacturer defined object identifier) -- product ID of firmware associated with processor device -- passed as dotted decimal OID or as firmware product ID label -- (for device types 'hrDeviceProcessor' in HR Device table) -- Network table in Device group of IETF HR MIB (RFC 2790) * NI 'hrNetworkIfIndex' -- syntax 'INTEGER (1..2147483647)' -- (see 'ifIndex' in IETF MIB-II) -- index of 'ifEntry' associated with network device -- passed as decimal string, NOT as binary index -- (for device types 'hrDeviceNetwork' in HR Device table) -- Disk Storage table in Device group of IETF HR MIB (RFC 2790) * KA 'hrDiskStorageAccess' -- syntax 'INTEGER (1..2)' (enumeration) -- access (including write-protect) of disk storage device -- passed as decimal string or as access enum label -- (eg, 'readOnly'), NOT as binary value -- (for device types 'hrDeviceDiskStorage' in HR Device table) * KM 'hrDiskStorageMedia' -- syntax 'INTEGER (1..8)' (enumeration) -- type of media used in disk storage device -- passed as decimal string or as media enum label -- (eg, 'hardDisk'), NOT as binary value -- (for device types 'hrDeviceDiskStorage' in HR Device table) * KR 'hrDiskStorageRemoveble' -- syntax 'Boolean' (true/false, defined in IETF HR MIB) -- indicates if media MAY be removed for disk storage device -- (note the spelling error in 'hrDiskStorageRemoveble' !!) -- passed as decimal string or as boolean enum label -- (eg, 'true'), NOT as binary value -- (for device types 'hrDeviceDiskStorage' in HR Device table) * KC 'hrDiskStorageCapacity' -- syntax 'KBytes' (kilobytes, defined in IETF HR MIB) -- total size of disk storage device -- passed as decimal string, NOT as binary value -- (for device types 'hrDeviceDiskStorage' in HR Device table) -- Partition table in Device group of IETF HR MIB (RFC 2790) * XX 'hrPartitionIndex' -- syntax 'INTEGER (1..2147483647)' -- index of disk storage partition -- (REQUIRED for 'entityCreate') -- passed as decimal string, NOT as binary index -- (for device types 'hrDeviceDiskStorage' in HR Device table) * XL 'hrPartitionLabel' -- syntax 'InternationalDisplayString (SIZE (0..128))' -- textual description of disk storage partition -- passed in dynamic locale -- (see 'scmGenCurrentLocalizationIndex') -- (for device types 'hrDeviceDiskStorage' in HR Device table) * XI 'hrPartitionID' -- syntax 'OCTET STRING (SIZE (0..128))' -- descriptor (possibly binary) of disk storage partition -- passed as hexadecimal string, NOT as binary value -- (for device types 'hrDeviceDiskStorage' in HR Device table) * XS 'hrPartitionSize' -- syntax 'KBytes' (kilobytes, defined in IETF HR MIB) -- total size of disk storage partition -- passed as decimal string, NOT as binary value -- (for device types 'hrDeviceDiskStorage' in HR Device table) * XF 'hrPartitionFSIndex' -- syntax 'INTEGER (0..2147483647)' -- (see 'hrFSIndex' in IETF HR MIB) -- index of 'hrFSEntry' mounted on disk storage partition -- or zero, if none -- passed as decimal string, NOT as binary value -- (exactly ONE file system MAY be mounted on a partition) -- (note that multiple partitions MAY support ONE file system, -- but multiple file systems MAY NOT reside on ONE partition) -- (for device types 'hrDeviceDiskStorage' in HR Device table) -- File System table in Device group of IETF HR MIB (RFC 2790) * FX 'hrFSIndex' -- syntax 'INTEGER (1..2147483647)' -- index of file system -- (REQUIRED for 'entityCreate') -- passed as decimal string, NOT as binary index -- (for device types 'hrDeviceDiskStorage' in HR Device table) * FM 'hrFSMountPoint' -- syntax 'InternationalDisplayString (SIZE (0..128))' -- path name of the root of file system -- passed in dynamic locale -- (see 'scmGenCurrentLocalizationIndex') -- (for device types 'hrDeviceDiskStorage' in HR Device table) * FR 'hrFSRemoteMountPoint' -- syntax 'InternationalDisplayString (SIZE (0..128))' -- name or address of server file system is mounted from -- passed in dynamic locale -- (see 'scmGenCurrentLocalizationIndex') -- (for device types 'hrDeviceDiskStorage' in HR Device table) * FY 'hrFSType' -- syntax 'OBJECT IDENTIFIER' -- (see 'hrFSTypes' in IETF HR MIB) -- type of file system -- passed as dotted decimal OID or as file system type label -- (eg, 'hrFSiso9660'), NOT as binary 'OBJECT IDENTIFIER' -- (for device types 'hrDeviceDiskStorage' in HR Device table) * FA 'hrFSAccess' -- syntax 'INTEGER (1..2)' (enumeration) -- access of WHOLE file system (NOT individual files) -- passed as decimal string or as access enum label -- (eg, 'readOnly'), NOT as binary value -- (for device types 'hrDeviceDiskStorage' in HR Device table) * FB 'hrFSBootable' -- syntax 'Boolean' (true/false, defined in IETF HR MIB) -- indicates if file system is bootable -- passed as decimal string or as boolean enum label -- (eg, 'true'), NOT as binary value -- (for device types 'hrDeviceDiskStorage' in HR Device table) * FS 'hrFSStorageIndex' -- syntax 'INTEGER (0..2147483647)' -- (see 'hrStorageIndex' in IETF HR MIB) -- index of 'hrStorageEntry' for file system -- or zero, if none -- passed as decimal string, NOT as binary value -- (exactly ONE file system MAY be mounted on a partition) -- (note that multiple partitions MAY support ONE file system, -- but multiple file systems MAY NOT reside on ONE partition) -- (for device types 'hrDeviceDiskStorage' in HR Device table) -- Software Running group of IETF HR MIB (RFC 2790) * RO 'hrSWOSIndex' -- syntax 'INTEGER (1..2147483647)' -- index of operating system running software conceptual row -- passed as decimal string, NOT as binary index * RX 'hrSWRunIndex' -- syntax 'INTEGER (1..2147483647)' -- index of host system running software conceptual row -- (REQUIRED for 'entityCreate') -- passed as decimal string, NOT as binary index * RN 'hrSWRunName' -- syntax 'InternationalDisplayString (SIZE (0..64))' -- textual description of running software, -- including manufacturer, revision, local name, and -- (optionally) serial number -- passed in dynamic locale -- (see 'scmGenCurrentLocalizationIndex') * RI 'hrSWRunID' -- syntax 'ProductID' -- (manufacturer defined object identifier) -- product ID of running software -- passed as dotted decimal OID or as software product ID label -- (eg, 'scmPidStarship20'), NOT as binary object identifier * RF 'hrSWRunPath' -- syntax 'InternationalDisplayString (SIZE (0..128))' -- initial load path (file) of running software -- passed in dynamic locale -- (see 'scmGenCurrentLocalizationIndex') * RP 'hrSWRunParameters' -- syntax 'InternationalDisplayString (SIZE (0..128))' -- initial load parameters (arguments) of running software -- passed in dynamic locale -- (see 'scmGenCurrentLocalizationIndex') * RY 'hrSWRunType' -- syntax 'INTEGER (1..4)' (enumeration) -- type of running software -- passed as decimal string or as software type enum label -- (eg, 'application'), NOT as binary value -- Software Installed group of IETF HR MIB (RFC 2790) * WX 'hrSWInstalledIndex' -- syntax 'INTEGER (1..2147483647)' -- index of host system installed software conceptual row -- (REQUIRED for 'entityCreate') -- passed as decimal string, NOT as binary index * WN 'hrSWInstalledName' -- syntax 'InternationalDisplayString (SIZE (0..64))' -- textual description of installed software, -- including manufacturer, revision, local name, and -- (optionally) serial number -- passed in dynamic locale -- (see 'scmGenCurrentLocalizationIndex') * WI 'hrSWInstalledID' -- syntax 'ProductID' -- (manufacturer defined object identifier) -- product ID of installed software -- passed as dotted decimal OID or as software product ID label -- (eg, 'scmPidStarship20'), NOT as binary object identifier * WY 'hrSWInstalledType' -- syntax 'INTEGER (1..4)' (enumeration) -- type of installed software -- passed as decimal string or as software type enum label -- (eg, 'application'), NOT as binary value -- Color Calibration Information * CN [Color Name - no object mapping] -- syntax 'DisplayString (SIZE (2))' -- name of a color (color plus level) -- color: C=cyan, M=magenta, Y=yellow, K=Black -- color: R=red, G=green, B=blue -- level: S=shadow, M=midbalance, H=highlight, W=whitepoint -- (eg, 'CN=CS:' specifies a color name of 'cyan-shadow') -- (see 'TCxx' system color calibration tests below) * CV [Color Value - no object mapping] -- syntax 'INTEGER (0..100)' -- value of a color (specified by previous 'CN=xx' element) -- (eg, 'CV=20:' specifies a color value of '20') -- (see 'TCxx' system color calibration tests below) -- SNMP Community Names (for SNMPv1c and SNMPv2c) * CO [Community Name Ordinal - no direct object mapping] -- syntax 'Ordinal32' -- ordinal for storing the 'CR|CW|CT' value below to an array -- (eg, 'CO=1' refers to object 'scmGenBaseSNMPxxxCommunity') -- (see 'CR', 'CW', and 'CT' below) * CR 'scmGenBaseSNMPReadCommunity' -- syntax 'ScmFixedLocaleDisplayString (SIZE (0..255))' -- read community name for SNMP 'Get|GetNext|GetBulk' PDUs -- passed in fixed locale (see 'scmGenFixedLocalizationIndex') -- (eg, 'CR=:' clears all read community names) -- (eg, 'CR=public:' sets a read community name of 'public') * CW 'scmGenBaseSNMPWriteCommunity' -- syntax 'ScmFixedLocaleDisplayString (SIZE (0..255))' -- write community name for SNMP 'Set|Get|GetNext|GetBulk' PDUs -- passed in fixed locale (see 'scmGenFixedLocalizationIndex') * CT 'scmGenBaseSNMPTrapCommunity' -- syntax 'ScmFixedLocaleDisplayString (SIZE (0..255))' -- trap community name for SNMP 'Inform|Trap' PDUs -- passed in fixed locale (see 'scmGenFixedLocalizationIndex') -- Job Data from SCMI Job Monitoring MIB (41jobmon) * JA 'scmJobSubmittingApplication' -- syntax 'CodeIndexedStringIndex' -- job programmatic originator (as opposed to job human owner) -- passed in fixed locale (see 'scmGenFixedLocalizationIndex') * JC 'scmJobClientId' -- syntax 'ScmGlobalUniqueID' -- job client-assigned identifier -- passed as dotted decimal string, NOT as a binary OID * JD 'scmDocName' -- syntax 'CodeIndexedStringIndex' -- document name -- passed in fixed locale (see 'scmGenFixedLocalizationIndex') * JF 'scmDocFileName' -- syntax 'CodeIndexedStringIndex' -- document filename (MAY be used for print-by-reference) -- passed in fixed locale (see 'scmGenFixedLocalizationIndex') * JH 'jobHoldSet' in 'scmJobStateReasons' -- syntax 'TruthValue' -- job hold (for creating job with held-by-user condition) -- passed as '1' (true) or '2' (false), NOT as binary value * JM 'scmJobMessageFromAdministrator' -- syntax 'CodeIndexedStringIndex' -- job message from system administrator -- passed in fixed locale (see 'scmGenFixedLocalizationIndex') * JN 'scmJobName' -- syntax 'CodeIndexedStringIndex' -- job name -- passed in fixed locale (see 'scmGenFixedLocalizationIndex') * JO 'scmJobOwner' -- syntax 'CodeIndexedStringIndex' -- job human owner (as opposed to job programmatic originator) -- passed in fixed locale (see 'scmGenFixedLocalizationIndex') * JP 'scmJobPriority' -- syntax 'INTEGER (0..100)' -- job priority (0=unspecified, 1=lowest, 100=highest) -- passed as decimal string, NOT as binary index * JR 'scmJobRetentionPeriod' -- syntax 'Cardinal32' -- job retention period (in seconds after completion) -- passed as decimal string, NOT as binary value * JS 'scmJobServiceType' -- syntax 'ScmJMJobServiceTypeOID' (OBJECT IDENTIFIER) -- job service type -- passed as dotted decimal OID or as job service type label -- (eg, 'scmJobServicePrintOID'), -- NOT as binary 'OBJECT IDENTIFIER' * JT 'scmJobProcessAfter' -- syntax 'DateAndTime' -- job process after calendar date and time -- passed as dotted decimal string (ie, 'yyyy.mm.dd.hh.mm.ss'), -- NOT as binary value * JU 'scmJobComment' -- syntax 'CodeIndexedStringIndex' -- job comment from user (eg, for banner sheet) -- passed in fixed locale (see 'scmGenFixedLocalizationIndex') * JW ['system job' standard type - no object mapping] -- syntax 'DisplayString' -- 'system job' standard type (standardized below) -- (REQUIRED for 'deviceJobCreate') -- passed as ASCII string, NOT as localized string -- (copied to 'scmJobName', unless 'JN' tag is specified) * JX ['system job' extended type - no object mapping] -- syntax 'DisplayString' -- 'system job' extended type (freeform, no standards) -- (OPTIONAL for 'deviceJobCreate') -- passed as ASCII string, NOT as localized string -- (appended to 'scmJobName', unless 'JN' tag is specified) SCMI standard 'system job' types for use in 'JW' arguments (in 'scmHrDevMgmtCommandData' and 'scmSimpleJobMgmtData') and for the value of 'scmJobName' (unless 'JN' tag is specified) are as follows: -- Accounting Reports * ACCT (basic) accounting report * AEXT (extended) accounting report -- Configuration Reports * CONF (basic) system configuration report * CEXT (extended) system configuration report * CMEM (installed) memory configuration report * CMSR media (supported and ready) configuration report * CNET network interfaces configuration report * COPT (installed) optional devices configuration report * CPDL (JCL and/or PDL) interpreters configuration report * CPRO network protocols configuration report * CSWI (installed) software configuration report -- Demos * DEMO (basic) demo job * DEXT (extended) demo job -- Font Reports * FONT (basic) fonts report * FEXT (extended) fonts report * FPCL (installed) HP PCL fonts report * FPSX (installed) Adobe PostScript fonts report -- List Directories and/or Files -- See section 3.4.1 'List Directory (LIST) Requests' -- in SCMI Ext to Host Resources TC. * LIST list tree of disk directories (but NOT contents) * LALL list tree of disk directories (including all files) * LDIR list (specific) disk directory * LERR list system error file * LLOG list system log file * LFIL list (specific) file -- Local UI Menu Reports * MENU (basic) local UI menu tree report * MEXT (extended) local UI menu tree report -- Document Resources Reports * RSRC (basic) document resources report * REXT (extended) document resources report -- System Tests * TEST (basic) system test * TEXT (extended) system test * TMEM (installed) memory verfication test report * TNET network interfaces verification test report * TOPT (installed) optional devices test report * TPAT print test pattern (especially for printers and copiers) * TPDL (JCL and/or PDL) interpreters system test report * TPRO network protocols verification test report * TSWI (installed) software verfication test report -- System Color Calibration Tests * TCAC print automatic color chart (auto calibration) * TCBC print balance chart (manual calibration) * TCCC print corrected color chart (color calibration) * TCSC scan automatic color chart (auto calibration) * TCTC print tone chart (manual calibration) * TCUC print uncorrected color chart (color calibration) * TCBV set balance values (manual calibration) * TCTV set tone values (manual calibration) -- User Reports * USER (basic) configured users report * UEXT (extended) configured users report The above SCMI standard 'tags' MAY be extended in the future."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class ScmHrDevPowerModeType(TextualConvention, Integer32):
    description = "A device power mode type, used by system administrators of this device for power management details. Usage: Used in 'devicePowerModeType' Device Detail, to clearly identify the referenced power mode (without resort to strings)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("readyMode", 3), ("standbyMode", 4), ("sleepMode", 5), ("offMode", 6))

class ScmHrDevPowerTimeUnit(TextualConvention, Integer32):
    description = 'A device power cycle time unit, used by system administrators of this device for power management cycle times. Usage: Used to scale the values in the Device Power group, for convenience and (optional) high resolution.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("microsecond", 3), ("millisecond", 4), ("second", 5), ("kilosecond", 6), ("megasecond", 7), ("minute", 8), ("hour", 9), ("day", 10), ("week", 11), ("month", 12), ("year", 13))

class ScmHrDevTrafficUnit(TextualConvention, Integer32):
    description = "The type of traffic unit used to measure input and/or output traffic for this device. Usage: The use of either 'other' or 'unknown' is uninformative and SHOULD be avoided by conforming implementations. Usage: 'mediaImage' - SHOULD be used ONLY for softcopy INPUT page images (scan, copy, fax, etc.). 'mediaImpression' - SHOULD be used ONLY for hardcopy OUTPUT page impressions (print, copy, fax, etc.) 'mediaSheet' - SHOULD be used ONLY for hardcopy OUTPUT and does NOT always equal output pages (e.g., duplex or N-up printing)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("binaryBit", 11), ("binaryNibble", 12), ("binaryOctet", 13), ("binaryLine", 14), ("textCharacter", 15), ("textWord", 16), ("textLine", 17), ("textSentence", 18), ("textParagraph", 19), ("mediaBlock", 20), ("mediaSector", 21), ("mediaRow", 22), ("mediaColumn", 23), ("mediaPacket", 24), ("mediaCell", 25), ("mediaImage", 26), ("mediaImpression", 27), ("mediaSheet", 28), ("lengthInch", 29), ("lengthFoot", 30), ("lengthYard", 31), ("lengthMile", 32), ("lengthMicrometer", 33), ("lengthMillimeter", 34), ("lengthCentimeter", 35), ("lengthMeter", 36), ("lengthKilometer", 37), ("volumeMicroliter", 38), ("volumeMilliliter", 39), ("volumeLiter", 40), ("volumeKiloliter", 41), ("weightMicrogram", 42), ("weightMilligram", 43), ("weightGram", 44), ("weightKilogram", 45), ("areaSqInch", 50), ("areaSqFoot", 51), ("areaSqYard", 52), ("areaSqMile", 53), ("areaSqMicrometer", 54), ("areaSqMillimeter", 55), ("areaSqCentimeter", 56), ("areaSqMeter", 57), ("areaSqKilometer", 58), ("areaSheet", 59), ("media100Image", 60), ("media100Impression", 61), ("media100Sheet", 62), ("length100Foot", 63), ("length100Meter", 64), ("area100SqFoot", 65), ("area10SqMeter", 66), ("area100Sheet", 67))

class ScmHrGroupSupport(TextualConvention, Integer32):
    description = "The terse conformance statement of ALL mandatory, conditionally mandatory, and optional IETF Host Resources MIB (RFC 2790) and SCMI Ext to Host Resources MIB objects which are supported by this management agent implementation (ie, version) on this host system, specified in a bit-mask. The current set of values (which MAY be extended in the future) is given below: -- IETF Host Resources MIB object groups 1 : hrSystemGroup -- 2**0 2 : hrStorageGroup -- 2**1 4 : hrDeviceGroup -- 2**2 8 : hrSWRunGroup -- 2**3 16 : hrSWRunPerfGroup -- 2**4 32 : hrSWInstalledGroup -- 2**5 -- SCMI Ext to Host Resources MIB object groups 64 : scmHrDevInfoGroup -- 2**6 128 : scmHrDevHelpGroup -- 2**7 256 : scmHrDevMgmtGroup -- 2**8 512 : scmHrDevPowerGroup -- 2**9 1024 : scmHrDevTrafficGroup -- 2**10 2048 : scmHrSystemFaultGroup -- 2**11 4096 : scmHrGeneralGroup -- 2**12 8192 : scmHrDevCalendarGroup -- 2**13 16384 : scmHrSWRunGroup -- 2**14 32768 : scmHrSWInstalledGroup -- 2**15 65536 : scmHrDevDetailGroup -- 2**16 131072 : scmHrStorageExtGroup -- 2**17 262144 : scmHrStorageDetailGroup -- 2**18 524288 : scmHrDevCoverGroup -- 2**19 1048576 : scmHrDevAlertGroup -- 2**20 2097152 : scmHrConsoleScreenGroup -- 2**21 4194304 : scmHrConsoleTabGroup -- 2**22 -- IETF Host Resources MIB tables for specific device types 33554432 : hrProcessorTable -- 2**25 67108864 : hrNetworkTable -- 2**26 134217728 : hrPrinterTable -- 2**27 268435456 : hrDiskStorageTable -- 2**28 536870912 : hrPartitionTable -- 2**29 1073741824 : hrFSTable -- 2**30 -- 2**31 NOT used, due to 'Integer32|Cardinal32' semantics Usage: Conforming management agents SHALL accurately report their support for IETF Host Resources MIB (RFC 2790) and SCMI Ext to Host Resources MIB object groups."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class ScmHrSWRunXStatus(TextualConvention, Integer32):
    reference = "See: 'hrSWRunStatus' in the basic Software Running Group of the IETF Host Resources MIB (RFC 2790)."
    description = "An extended software status, used by system administrators and end users of this software (here, read 'state' for 'status'). Note: This extended software status is present for future extensions."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("other", 1), ("unknown", 2))

class ScmHrStorageDetailType(TextualConvention, Integer32):
    reference = "See: 'scmHrStorageDetailUnit' for units of storage detail."
    description = "The type of the storage detail information specified in this conceptual row in the 'scmHrStorageDetailTable'. Usage: Used to describe system-, program-, or thread-level memory allocations/reservations. Usage: 'hrStorageEntry' and (optionally) 'scmHrStorageEntry' MAY be referenced via 'scmSecServiceHrStorageIndex' in the Service group of the SCMI Security MIB. Usage: Conforming management stations and management agents SHALL implement specified semantics for storage detail types."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 30, 31, 32, 33, 40, 41, 42))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("storageName", 3), ("storageAlias", 4), ("storageType", 5), ("storageDescription", 6), ("storageAllocationUnits", 7), ("storageTree", 8), ("storageContext", 9), ("storageInputBuffer", 10), ("storageOutputBuffer", 11), ("storageImageBuffer", 12), ("storageMarkerBuffer", 13), ("storagePageBuffer", 14), ("storageTranslationBuffer", 15), ("storageWorkingBuffer", 16), ("storageFontCache", 20), ("storageFormCache", 21), ("storageLogoCache", 22), ("storageMacroCache", 23), ("storageStyleCache", 24), ("storageHeapMemory", 30), ("storagePrefixMemory", 31), ("storageStackMemory", 32), ("storageWorkingMemory", 33), ("storageBaseAddress", 40), ("storageWordSize", 41), ("storagePageSize", 42))

class ScmHrStorageRealization(TextualConvention, Integer32):
    reference = "See: 'ScmHrDevInfoRealization' textual convention in the SCMI Ext to Host Resources TC. See: 'scmHrDevInfoRealization' in the Device Info group of the SCMI Ext to Host Resources MIB."
    description = "An extended storage type (or storage 'realization'), used by system administrators and end users of this storage. Usage: The use of either 'other' or 'unknown' is uninformative and SHOULD be avoided by conforming implementations. * 'physicalSystem' - 'real' memory installed on a 'system' whose product is found via 'scmHrStorageProductDeviceIndex' and whose CPU is found via 'scmHrStoragePlatformDeviceIndex' and whose self is found via 'scmHrStorageMatchingDeviceIndex'; * 'physicalProgram' - 'real' memory assigned to a 'program' (memory which is 'pinned' and is NOT paged to disk storage) whose program is found via 'scmHrStorageSWRunIndex'; * 'physicalThread' - 'real' memory assigned to a 'thread' (memory which is 'pinned' and is NOT paged to disk storage) whose program/thread is found via 'scmHrStorageSWRunIndex'; * 'logicalSystem' - 'virtual' memory assigned to a 'system' (memory which is NOT 'pinned' and MAY be paged to disk storage) whose product is found via 'scmHrStorageProductDeviceIndex' and whose CPU is found via 'scmHrStoragePlatformDeviceIndex' and whose self is found via 'scmHrStorageMatchingDeviceIndex'; * 'logicalProgram' - 'virtual' memory assigned to a 'program' (memory which is NOT 'pinned' and MAY be paged to disk storage) whose program is found via 'scmHrStorageSWRunIndex'; * 'logicalThread' - 'virtual' memory assigned to a 'thread' (memory which is NOT 'pinned' and MAY be paged to disk storage) whose program/thread is found via 'scmHrStorageSWRunIndex'."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 10, 11, 12, 20, 21, 22))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("physicalSystem", 10), ("physicalProgram", 11), ("physicalThread", 12), ("logicalSystem", 20), ("logicalProgram", 21), ("logicalThread", 22))

class ScmHrDpaAvailability(TextualConvention, Integer32):
    reference = "See: Section 9.1.6.6 '[Generic attribute] Availability' and Annex A 'id-val-availability-...' in DPA (ISO/IEC 10175-1 Final Text, March 1996)."
    description = 'The generic availability of this system, device, service, etc.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6))
    namedValues = NamedValues(("high", 1), ("normal", 2), ("low", 3), ("none", 5), ("unknown", 6))

class ScmHrDpaConditions(TextualConvention, Integer32):
    reference = "See: Section 9.5.4 'Server-state', section 9.1.6.4 '[Generic attribute] State', and Annex A 'id-val-state-...' in DPA (ISO/IEC 10175-1 Final Text, March 1996). See: Section D.2.3 'Server State Transitions' in DPA Mgmt Service (ISO 10175-3 Draft, October 1996). See: Section 4 'Printing Utilities - Command Line Interface' in POSIX DPA Client (IEEE 1387.4, October 1994)."
    description = "The generic conditions (ie, state reasons) of this system, device, service, etc, specified in a bit-mask. -- DPA - Service level operations -- See section D.2.3 of DPA Mgmt Service (ISO 10175-3) -- and section 4 of POSIX DPA Client (IEEE 1387.4) 1 : cleanedByOperator -- 2**0 2 : cleanedBySystem -- 2**1 -- all jobs deleted by operator/system -- 'serviceClean' in 'ScmSvcMonServiceMgmtOperation' -- 'pdclean' in POSIX DPA Client 4 : disabledByOperator -- 2**2 8 : disabledBySystem -- 2**3 -- all new jobs rejected by system -- 'serviceDisable' in 'ScmSvcMonServiceMgmtOperation' -- 'pddisable' in POSIX DPA Client 16 : pausedByOperator -- 2**4 32 : pausedBySystem -- 2**5 -- all existing job output suspended on system -- 'servicePause' in 'ScmSvcMonServiceMgmtOperation' -- 'pdpause' in POSIX DPA Client 64 : shutdownByOperator -- 2**6 - 'pdshutdown' 128 : shutdownBySystem -- 2**7 - 'pdshutdown' -- service state is 'terminating', then 'unavailable' -- 'serviceShutdown' in 'ScmSvcMonServiceMgmtOperation' -- 'pdshutdown' in POSIX DPA Client -- SCMI - Service level extended operations 256 : diagnosedByOperator -- 2**8 512 : diagnosedBySystem -- 2**9 -- 'serviceDiagnose' in 'ScmSvcMonServiceMgmtOperation' 1024 : resetByOperator -- 2**10 2048 : resetBySystem -- 2**11 -- 'serviceReset[Cold|Warm|Factory]' -- in 'ScmSvcMonServiceMgmtOperation' 4096 : startedByOperator -- 2**12 8192 : startedBySystem -- 2**13 -- 'service[Create|Install|Upgrade|Restart]' -- in 'ScmSvcMonServiceMgmtOperation' -- SCMI - Document service activities (during 'ready' state) 65536 : activeCopy -- 2**16 131072 : activePrint -- 2**17 262144 : activeScan -- 2**18 524288 : activeFaxReceive -- 2**19 1048576 : activeFaxSend -- 2**20 2097152 : activeFileReceive -- 2**21 4194304 : activeFileSend -- 2**22 8388608 : activeMailReceive -- 2**23 16777216 : activeMailSend -- 2**24 33554432 : activeImageProcess -- 2**25 67108864 : activeOCR -- 2**26 134217728 : activeDistribute -- 2**27 Usage: The above 'conditions' augment the service state in 'scmSvcMonService[Current|Previous]State' and the service mgmt information in 'scmSvcMonServiceMgmt[Operation|InProgress]'. Usage: Conforming management agents SHALL report all 'conditions' of entities accurately. 'Conditions' occur within or across 'states' in a finite state machine implementation of a system, device, service, etc. Usage: A service with 'scmSvcMonServiceCurrentState' of 'ready(1)' might have 'scmSvcMonServiceConditions' of 'disabledByOperator', indicating that the service will not accept new jobs. Usage: Multi-bit examples of 'scmSvcMonServiceConditions' are 'disabledByOperator' concurrently with 'pausedByOperator' and 'activePrint' concurrently with 'activeMailSend'."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class ScmHrDpaJobValidateSupport(TextualConvention, Integer32):
    reference = "See: Section 9.5.10 'Job-validates-supported' (server), section 9.2.4.12 'Job-validate' (job), and Annex A 'id-val-job-validate-...' in DPA (ISO/IEC 10175-1 Final Text, March 1996)."
    description = "The job validation support of this system, service, etc, specified in a bit-mask. The current set of values (which MAY be extended in the future) is given below: -- ISO DPA standard values 1 : validateAndProcess -- generalized from DPA 'print' 2 : validateSubmitOnly -- error check, do NOT process -- SCMI standard values 4 : validateSyntaxOnly -- check syntax only 8 : validateSemanticsOnly -- check syntax/ranges/states 16 : validateLocalOnly -- check semantic/local services 32 : validateDistributed -- check distributed services 64 : validateCreateLocal -- create local child jobs 128 : validateCreateRemote -- create remote child jobs Usage: Conforming management agents SHALL accurately report their support for job validation modes."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class ScmHrDpaObjectClassSupport(TextualConvention, Integer32):
    reference = "See: Section 9.5.5 'Object-classes-supported' (server), section 9.1.6.1 'Object-class' (system), Annex A 'id-oc-...' in DPA (ISO/IEC 10175-1 Final Text, March 1996)."
    description = "The object class support of this system, service, etc, specified in a bit-mask. The current set of values (which MAY be extended in the future) is given below: -- ISO DPA standard values 1 : generic -- 2**0 2 : job -- 2**1 4 : printer -- 2**2 8 : server -- 2**3 16 : medium -- 2**4 32 : font -- 2**5 256 : transferMethod -- 2**8 512 : deliveryMethod -- 2**9 1024 : auxiliarySheet -- 2**10 2048 : finishing -- 2**11 4096 : output -- 2**12 8192 : imposition -- 2**13 16384 : scheduler -- 2**14 32768 : document -- 2**15 65536 : resource -- 2**16 131072 : initialValueJob -- 2**17 262144 : initialValueDocument -- 2**18 524288 : resourceContext -- 2**19 1048576 : auxiliarySheetPackage -- 2**20 -- SCMI standard values 16777216 : deviceHostSystem -- 2**24 33554432 : deviceScanner -- 2**25 67108864 : deviceCopier -- 2**26 134217728 : deviceFax -- 2**27 268435456 : deviceMailbox -- 2**28 536870912 : deviceFinisher -- 2**29 1073741824 : deviceCRU -- 2**30 -- 2**31 NOT used, due to 'Integer32|Cardinal32' semantics Usage: Conforming management agents SHALL accurately report their support for object classes (ISO DPA and SCMI)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class ScmHrDpaState(TextualConvention, Integer32):
    reference = "See: Section 9.1.6.4 '[Generic attribute] State' and Annex A 'id-val-state-...' in DPA (ISO/IEC 10175-1 Final Text, March 1996)."
    description = "The generic state of this object (system, device, service, etc.). The following standard values are defined (in section 9.1.6.4 'State' of ISO 10175-1): * 'ready' - This object is ready to be used without human intervention. * 'onRequest' - This object requires human intervention in order to be used. * 'unavailable' - This object is NOT available for use even with human intervention. * 'unknown' - This state of this object is NOT known. * 'busy' - This object is temporarily inaccessible due to dynamic constraints, but will become 'ready' without human intervention. * 'initializing' - This object is being initialized (and is therefore temporarily inaccessible). * 'terminating' - This object is being terminated (and is therefore permanently inaccessible)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("ready", 1), ("onRequest", 2), ("unavailable", 3), ("unknown", 4), ("busy", 5), ("initializing", 6), ("terminating", 7))

sCmHrDummy = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999))
sCmHrDevCalendarDayOfWeek = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 1), ScmHrDevCalendarDayOfWeek())
if mibBuilder.loadTexts: sCmHrDevCalendarDayOfWeek.setStatus('current')
if mibBuilder.loadTexts: sCmHrDevCalendarDayOfWeek.setDescription('Dummy - DO NOT USE')
sCmHrDevCalendarTimeOfDay = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 2), ScmHrDevCalendarTimeOfDay())
if mibBuilder.loadTexts: sCmHrDevCalendarTimeOfDay.setStatus('current')
if mibBuilder.loadTexts: sCmHrDevCalendarTimeOfDay.setDescription('Dummy - DO NOT USE')
sCmHrDevDetailType = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 3), ScmHrDevDetailType())
if mibBuilder.loadTexts: sCmHrDevDetailType.setStatus('current')
if mibBuilder.loadTexts: sCmHrDevDetailType.setDescription('Dummy - DO NOT USE')
sCmHrDevDetailUnitClass = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 4), ScmHrDevDetailUnitClass())
if mibBuilder.loadTexts: sCmHrDevDetailUnitClass.setStatus('current')
if mibBuilder.loadTexts: sCmHrDevDetailUnitClass.setDescription('Dummy - DO NOT USE')
sCmHrDevInfoRealization = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 5), ScmHrDevInfoRealization())
if mibBuilder.loadTexts: sCmHrDevInfoRealization.setStatus('current')
if mibBuilder.loadTexts: sCmHrDevInfoRealization.setDescription('Dummy - DO NOT USE')
sCmHrDevInfoStatus = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 6), ScmHrDevInfoStatus())
if mibBuilder.loadTexts: sCmHrDevInfoStatus.setStatus('current')
if mibBuilder.loadTexts: sCmHrDevInfoStatus.setDescription('Dummy - DO NOT USE')
sCmHrDevInfoXStatus = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 7), ScmHrDevInfoXStatus())
if mibBuilder.loadTexts: sCmHrDevInfoXStatus.setStatus('current')
if mibBuilder.loadTexts: sCmHrDevInfoXStatus.setDescription('Dummy - DO NOT USE')
sCmHrDevInfoConditions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 8), ScmHrDevInfoConditions())
if mibBuilder.loadTexts: sCmHrDevInfoConditions.setStatus('current')
if mibBuilder.loadTexts: sCmHrDevInfoConditions.setDescription('Dummy - DO NOT USE')
sCmHrDevInfoXConditions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 9), ScmHrDevInfoXConditions())
if mibBuilder.loadTexts: sCmHrDevInfoXConditions.setStatus('current')
if mibBuilder.loadTexts: sCmHrDevInfoXConditions.setDescription('Dummy - DO NOT USE')
sCmHrDevMgmtCommandRequest = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 10), ScmHrDevMgmtCommandRequest())
if mibBuilder.loadTexts: sCmHrDevMgmtCommandRequest.setStatus('current')
if mibBuilder.loadTexts: sCmHrDevMgmtCommandRequest.setDescription('Dummy - DO NOT USE')
sCmHrDevMgmtCommandData = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 11), ScmHrDevMgmtCommandData())
if mibBuilder.loadTexts: sCmHrDevMgmtCommandData.setStatus('current')
if mibBuilder.loadTexts: sCmHrDevMgmtCommandData.setDescription('Dummy - DO NOT USE')
sCmHrDevMgmtCommandDataTag = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 12), ScmHrDevMgmtCommandDataTag())
if mibBuilder.loadTexts: sCmHrDevMgmtCommandDataTag.setStatus('current')
if mibBuilder.loadTexts: sCmHrDevMgmtCommandDataTag.setDescription('Dummy - DO NOT USE')
sCmHrDevPowerModeType = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 13), ScmHrDevPowerModeType())
if mibBuilder.loadTexts: sCmHrDevPowerModeType.setStatus('current')
if mibBuilder.loadTexts: sCmHrDevPowerModeType.setDescription('Dummy - DO NOT USE')
sCmHrDevPowerTimeUnit = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 14), ScmHrDevPowerTimeUnit())
if mibBuilder.loadTexts: sCmHrDevPowerTimeUnit.setStatus('current')
if mibBuilder.loadTexts: sCmHrDevPowerTimeUnit.setDescription('Dummy - DO NOT USE')
sCmHrDevTrafficUnit = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 15), ScmHrDevTrafficUnit())
if mibBuilder.loadTexts: sCmHrDevTrafficUnit.setStatus('current')
if mibBuilder.loadTexts: sCmHrDevTrafficUnit.setDescription('Dummy - DO NOT USE')
sCmHrGroupSupport = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 16), ScmHrGroupSupport())
if mibBuilder.loadTexts: sCmHrGroupSupport.setStatus('current')
if mibBuilder.loadTexts: sCmHrGroupSupport.setDescription('Dummy - DO NOT USE')
sCmHrSWRunXStatus = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 17), ScmHrSWRunXStatus())
if mibBuilder.loadTexts: sCmHrSWRunXStatus.setStatus('current')
if mibBuilder.loadTexts: sCmHrSWRunXStatus.setDescription('Dummy - DO NOT USE')
sCmHrStorageDetailType = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 18), ScmHrStorageDetailType())
if mibBuilder.loadTexts: sCmHrStorageDetailType.setStatus('current')
if mibBuilder.loadTexts: sCmHrStorageDetailType.setDescription('Dummy - DO NOT USE')
sCmHrStorageRealization = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 19), ScmHrStorageRealization())
if mibBuilder.loadTexts: sCmHrStorageRealization.setStatus('current')
if mibBuilder.loadTexts: sCmHrStorageRealization.setDescription('Dummy - DO NOT USE')
sCmHrDpaAvailability = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 20), ScmHrDpaAvailability())
if mibBuilder.loadTexts: sCmHrDpaAvailability.setStatus('current')
if mibBuilder.loadTexts: sCmHrDpaAvailability.setDescription('Dummy - DO NOT USE')
sCmHrDpaConditions = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 21), ScmHrDpaConditions())
if mibBuilder.loadTexts: sCmHrDpaConditions.setStatus('current')
if mibBuilder.loadTexts: sCmHrDpaConditions.setDescription('Dummy - DO NOT USE')
sCmHrDpaJobValidateSupport = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 22), ScmHrDpaJobValidateSupport())
if mibBuilder.loadTexts: sCmHrDpaJobValidateSupport.setStatus('current')
if mibBuilder.loadTexts: sCmHrDpaJobValidateSupport.setDescription('Dummy - DO NOT USE')
sCmHrDpaObjectClassSupport = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 23), ScmHrDpaObjectClassSupport())
if mibBuilder.loadTexts: sCmHrDpaObjectClassSupport.setStatus('current')
if mibBuilder.loadTexts: sCmHrDpaObjectClassSupport.setDescription('Dummy - DO NOT USE')
sCmHrDpaState = MibScalar((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 52, 999, 24), ScmHrDpaState())
if mibBuilder.loadTexts: sCmHrDpaState.setStatus('current')
if mibBuilder.loadTexts: sCmHrDpaState.setDescription('Dummy - DO NOT USE')
mibBuilder.exportSymbols("SAMSUNG-HOST-RESOURCES-EXT-TC", scmHrAdminDeviceEnergySave=scmHrAdminDeviceEnergySave, scmHrDeviceUSBPort=scmHrDeviceUSBPort, scmHrAdminDeviceResetWarm=scmHrAdminDeviceResetWarm, ScmHrDevMgmtCommandRequest=ScmHrDevMgmtCommandRequest, scmHrAdminDeviceResetCold=scmHrAdminDeviceResetCold, sCmHrDevPowerModeType=sCmHrDevPowerModeType, ScmHrStorageRealization=ScmHrStorageRealization, ScmHrDevPowerModeType=ScmHrDevPowerModeType, scmHrDeviceCopier=scmHrDeviceCopier, sCmHrDevDetailType=sCmHrDevDetailType, sCmHrDevDetailUnitClass=sCmHrDevDetailUnitClass, scmHrCruAdfFeedHeadModule=scmHrCruAdfFeedHeadModule, scmHrAdminDeviceManage=scmHrAdminDeviceManage, sCmHrDpaConditions=sCmHrDpaConditions, scmHrAdminDeviceWarmUp=scmHrAdminDeviceWarmUp, ScmHrDevInfoStatus=ScmHrDevInfoStatus, sCmHrStorageDetailType=sCmHrStorageDetailType, ScmHrDpaJobValidateSupport=ScmHrDpaJobValidateSupport, scmHrAdminDevicePowerToReady=scmHrAdminDevicePowerToReady, scmHrAdminJobService=scmHrAdminJobService, scmHrDeviceFinisherXIM=scmHrDeviceFinisherXIM, sCmHrDevTrafficUnit=sCmHrDevTrafficUnit, scmHrCruFuserWebModule=scmHrCruFuserWebModule, sCmHrDevMgmtCommandData=sCmHrDevMgmtCommandData, scmHrDeviceTypes=scmHrDeviceTypes, scmHrDeviceFinisherBFM=scmHrDeviceFinisherBFM, scmHrCruCleanerUnitModule=scmHrCruCleanerUnitModule, ScmHrDevInfoConditions=ScmHrDevInfoConditions, sCmHrDpaAvailability=sCmHrDpaAvailability, sCmHrDpaJobValidateSupport=sCmHrDpaJobValidateSupport, scmHrDeviceScanner=scmHrDeviceScanner, scmHrCruFilterModule=scmHrCruFilterModule, ScmHrDevCalendarTimeOfDay=ScmHrDevCalendarTimeOfDay, scmHrAdminDeviceQuiesce=scmHrAdminDeviceQuiesce, ScmHrDpaAvailability=ScmHrDpaAvailability, ScmHrStorageDetailType=ScmHrStorageDetailType, sCmHrDevInfoStatus=sCmHrDevInfoStatus, scmHrDeviceMarker=scmHrDeviceMarker, ScmHrGroupSupport=ScmHrGroupSupport, sCmHrSWRunXStatus=sCmHrSWRunXStatus, scmHrDeviceFeeder=scmHrDeviceFeeder, scmHrDeviceFlashDIMMFileStore=scmHrDeviceFlashDIMMFileStore, scmHrAdminDeviceCoolDown=scmHrAdminDeviceCoolDown, scmHrDeviceScannerHistory=scmHrDeviceScannerHistory, scmHrCruPFPRetardRollModule=scmHrCruPFPRetardRollModule, scmHrDevicePrinterHistory=scmHrDevicePrinterHistory, scmHrDeviceSorter=scmHrDeviceSorter, scmHrAdminCommsService=scmHrAdminCommsService, scmHrDeviceMailbox=scmHrDeviceMailbox, scmHrAdminDeviceRefresh=scmHrAdminDeviceRefresh, scmHrAdminDevicePowerToStandby=scmHrAdminDevicePowerToStandby, scmHrDeviceFaxHistory=scmHrDeviceFaxHistory, scmHrAdminDeviceResetCounters=scmHrAdminDeviceResetCounters, scmHrCruXerographicModule=scmHrCruXerographicModule, scmHrCruPFPFeedRollModule=scmHrCruPFPFeedRollModule, scmHrAdminDeviceResetFactory=scmHrAdminDeviceResetFactory, scmHrAdminDeviceFlushInput=scmHrAdminDeviceFlushInput, scmHrDeviceFinisher3rdParty=scmHrDeviceFinisher3rdParty, scmHrAdminServerService=scmHrAdminServerService, scmHrDeviceInterposer=scmHrDeviceInterposer, scmHrAdminDeviceTest=scmHrAdminDeviceTest, ScmHrDpaObjectClassSupport=ScmHrDpaObjectClassSupport, scmHrDevicePaymentInterface=scmHrDevicePaymentInterface, sCmHrDevInfoConditions=sCmHrDevInfoConditions, ScmHrDpaConditions=ScmHrDpaConditions, scmHrAdminDocService=scmHrAdminDocService, scmHrDeviceFax=scmHrDeviceFax, scmHrCruFuserModule=scmHrCruFuserModule, scmHrCruCollectorBottleModule=scmHrCruCollectorBottleModule, ScmHrDevDetailType=ScmHrDevDetailType, scmHrAdminObjectService=scmHrAdminObjectService, ScmHrDevTrafficUnit=ScmHrDevTrafficUnit, sCmHrDevCalendarTimeOfDay=sCmHrDevCalendarTimeOfDay, scmHrDeviceFinisherMFF=scmHrDeviceFinisherMFF, ScmHrDevPowerTimeUnit=ScmHrDevPowerTimeUnit, ScmHrDpaState=ScmHrDpaState, sCmHrDevMgmtCommandDataTag=sCmHrDevMgmtCommandDataTag, ScmHrDevInfoXStatus=ScmHrDevInfoXStatus, scmHrCruTonerBottleModule=scmHrCruTonerBottleModule, ScmHrDevMgmtCommandDataTag=ScmHrDevMgmtCommandDataTag, scmHrAdminDeviceFlushInOut=scmHrAdminDeviceFlushInOut, scmHrDevicePrintAppliance=scmHrDevicePrintAppliance, sCmHrDpaState=sCmHrDpaState, scmHrDeviceFinisher=scmHrDeviceFinisher, ScmHrDevMgmtCommandData=ScmHrDevMgmtCommandData, scmHrTC=scmHrTC, sCmHrDevInfoXStatus=sCmHrDevInfoXStatus, sCmHrGroupSupport=sCmHrGroupSupport, scmHrDeviceHostSystemHistory=scmHrDeviceHostSystemHistory, ScmHrDevDetailUnitClass=ScmHrDevDetailUnitClass, scmHrDeviceFlashDIMMBootLoader=scmHrDeviceFlashDIMMBootLoader, sCmHrDevCalendarDayOfWeek=sCmHrDevCalendarDayOfWeek, scmHrAdminDeviceStartup=scmHrAdminDeviceStartup, scmHrAdminDevicePowerToSleep=scmHrAdminDevicePowerToSleep, scmHrAdminDeviceShutdown=scmHrAdminDeviceShutdown, scmHrDeviceMailboxSorter=scmHrDeviceMailboxSorter, scmHrAdminDeviceService=scmHrAdminDeviceService, scmHrCruTrayFeedHeadModule=scmHrCruTrayFeedHeadModule, scmHrAdminDeviceFlushOutput=scmHrAdminDeviceFlushOutput, sCmHrDpaObjectClassSupport=sCmHrDpaObjectClassSupport, scmHrAdminDeviceOperationTypes=scmHrAdminDeviceOperationTypes, PYSNMP_MODULE_ID=scmHrTC, sCmHrDevPowerTimeUnit=sCmHrDevPowerTimeUnit, scmHrAdminDeviceWakeUp=scmHrAdminDeviceWakeUp, sCmHrDevInfoRealization=sCmHrDevInfoRealization, scmHrCruTransferUnitModule=scmHrCruTransferUnitModule, scmHrAdminServiceTypes=scmHrAdminServiceTypes, scmHrDeviceHostSystem=scmHrDeviceHostSystem, ScmHrDevInfoXConditions=ScmHrDevInfoXConditions, sCmHrStorageRealization=sCmHrStorageRealization, sCmHrDevMgmtCommandRequest=sCmHrDevMgmtCommandRequest, ScmHrSWRunXStatus=ScmHrSWRunXStatus, ScmHrDevInfoRealization=ScmHrDevInfoRealization, sCmHrDevInfoXConditions=sCmHrDevInfoXConditions, scmHrCruTransferRollerModule=scmHrCruTransferRollerModule, ScmHrDevCalendarDayOfWeek=ScmHrDevCalendarDayOfWeek, scmHrAdminDeviceNone=scmHrAdminDeviceNone, scmHrAdminDeviceResetWarning=scmHrAdminDeviceResetWarning, sCmHrDummy=sCmHrDummy, scmHrDeviceCopierHistory=scmHrDeviceCopierHistory, scmHrAdminSecurityService=scmHrAdminSecurityService)
