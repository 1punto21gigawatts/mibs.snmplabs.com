#
# PySNMP MIB module APTIS-ACTIONS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APTIS-ACTIONS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:24:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
aptis_actions, Boolean = mibBuilder.importSymbols("APTIS-MIB", "aptis-actions", "Boolean")
aptis_modules, = mibBuilder.importSymbols("APTIS-REG-MIB", "aptis-modules")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Unsigned32, TimeTicks, iso, IpAddress, MibIdentifier, Gauge32, Counter64, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Unsigned32", "TimeTicks", "iso", "IpAddress", "MibIdentifier", "Gauge32", "Counter64", "Counter32", "ObjectIdentity")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
aptisActionsModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2637, 1, 1, 5))
if mibBuilder.loadTexts: aptisActionsModule.setLastUpdated('0004140000Z')
if mibBuilder.loadTexts: aptisActionsModule.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: aptisActionsModule.setContactInfo(' Technical Support/Customer Service Nortel Networks Postal: 11 Elizabeth Drive Chelmsford, MA 01824 Tel: In the USA: Dial 1-800-758-4827 to contact a Technical Support engineer. Outside the USA: Contact your Regional Nortel Networks Support Prime. For information about the Nortel Networks Network Access Division, go to the World Wide Web (WWW) site at http://www.nortelnetworks.com.')
if mibBuilder.loadTexts: aptisActionsModule.setDescription('The following variables describe the administrative actions that may be invoked through SNMP.')
resetTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3510), )
if mibBuilder.loadTexts: resetTable.setStatus('current')
if mibBuilder.loadTexts: resetTable.setDescription('CVX Chassis <RESET> Options.')
resetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3510, 1), ).setIndexNames((0, "APTIS-ACTIONS-MIB", "resetInstance"))
if mibBuilder.loadTexts: resetEntry.setStatus('current')
if mibBuilder.loadTexts: resetEntry.setDescription('This is the structure of entries in the resetTable.')
resetInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3510, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: resetInstance.setStatus('current')
if mibBuilder.loadTexts: resetInstance.setDescription('Each invocation of this action will have a unique instance number, assigned by the switch.')
resetStatusGeneral = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3510, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("started", 0), ("succeeded", 1), ("failed", 2), ("errParam", 4))).clone('started')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: resetStatusGeneral.setStatus('current')
if mibBuilder.loadTexts: resetStatusGeneral.setDescription('This is the standard actionStatus enum used for all actions.')
resetResetType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3510, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hard", 1), ("cold", 2), ("warm", 3))).clone('hard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: resetResetType.setStatus('current')
if mibBuilder.loadTexts: resetResetType.setDescription('Select the type of reset requested.')
flashWriteTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3501), )
if mibBuilder.loadTexts: flashWriteTable.setStatus('current')
if mibBuilder.loadTexts: flashWriteTable.setDescription("This action causes a portion of the configuration subtree to be written out to a text file on one of the CVX system's local flash cards.")
flashWriteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3501, 1), ).setIndexNames((0, "APTIS-ACTIONS-MIB", "flashWriteInstance"))
if mibBuilder.loadTexts: flashWriteEntry.setStatus('current')
if mibBuilder.loadTexts: flashWriteEntry.setDescription('This is the structure of entries in the flashWriteTable.')
flashWriteInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3501, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flashWriteInstance.setStatus('current')
if mibBuilder.loadTexts: flashWriteInstance.setDescription('Each invocation of this action will have a unique instance number, assigned by the switch.')
flashWriteStatusGeneral = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3501, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("started", 0), ("succeeded", 1), ("failed", 2), ("errParam", 4))).clone('started')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flashWriteStatusGeneral.setStatus('current')
if mibBuilder.loadTexts: flashWriteStatusGeneral.setDescription('This is the standard actionStatus enum used for all actions.')
flashWriteStatusSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3501, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noError", 0), ("badArgs", 1), ("lackOfResources", 2), ("genFail", 3))).clone('noError')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flashWriteStatusSpecific.setStatus('current')
if mibBuilder.loadTexts: flashWriteStatusSpecific.setDescription('If generalStatus is err-param or failed, this will hold a more specific error number.')
flashWritePathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3501, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flashWritePathString.setStatus('current')
if mibBuilder.loadTexts: flashWritePathString.setDescription('The starting node in the configuration tree. The contents of all the nodes under this node will be written out to the text file.')
flashWriteFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3501, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flashWriteFileName.setStatus('current')
if mibBuilder.loadTexts: flashWriteFileName.setDescription('The relative file name to hold the text config. The CVX file system uses drive C: to refer to the bottom flash card, and D: to refer to the top flash card. If the drive letter is not specified, then C: is assumed. If this file exists, it will only be overwritten with a complete copy of the output from this action. NOTE that the file CONFIG.CVX is not accessible through this action. To save the config to flash where it will be used at the next reboot, use the flashSave action instead.')
flashWriteBytesWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3501, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flashWriteBytesWritten.setStatus('current')
if mibBuilder.loadTexts: flashWriteBytesWritten.setDescription('On success, the total number of bytes written to flash.')
flashWriteVerboseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3501, 1, 14), Boolean().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flashWriteVerboseMode.setStatus('current')
if mibBuilder.loadTexts: flashWriteVerboseMode.setDescription('Setting this field to TRUE requests that the output file contain all configuration values, otherwise only those that differ from the default values.')
flashReadTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3502), )
if mibBuilder.loadTexts: flashReadTable.setStatus('current')
if mibBuilder.loadTexts: flashReadTable.setDescription("This action causes the configuration subtree to be read to one of the CVX system's local flash cards.")
flashReadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3502, 1), ).setIndexNames((0, "APTIS-ACTIONS-MIB", "flashReadInstance"))
if mibBuilder.loadTexts: flashReadEntry.setStatus('current')
if mibBuilder.loadTexts: flashReadEntry.setDescription('This is the structure of entries in the flashReadTable.')
flashReadInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3502, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flashReadInstance.setStatus('current')
if mibBuilder.loadTexts: flashReadInstance.setDescription('Each invocation of this action will have a unique instance number, assigned by the switch.')
flashReadStatusGeneral = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3502, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5))).clone(namedValues=NamedValues(("started", 0), ("succeeded", 1), ("failed", 2), ("badFile", 4), ("genFail", 5))).clone('started')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flashReadStatusGeneral.setStatus('current')
if mibBuilder.loadTexts: flashReadStatusGeneral.setDescription('This is the standard actionStatus enum used for all actions.')
flashReadFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3502, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flashReadFileName.setStatus('current')
if mibBuilder.loadTexts: flashReadFileName.setDescription('The relative file name to hold the text config. The CVX file system uses drive C: to refer to the bottom flash card, and D: to refer to the top flash card. If the drive letter is not specified, then C: is assumed.')
flashReadLinesRead = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3502, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flashReadLinesRead.setStatus('current')
if mibBuilder.loadTexts: flashReadLinesRead.setDescription('On success, the total number of lines read from flash.')
flashSaveTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3503), )
if mibBuilder.loadTexts: flashSaveTable.setStatus('current')
if mibBuilder.loadTexts: flashSaveTable.setDescription("This action saves the configuration to the flash file CONFIG.CVX. It is equivalent to the 'write' command in the CLI.")
flashSaveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3503, 1), ).setIndexNames((0, "APTIS-ACTIONS-MIB", "flashSaveInstance"))
if mibBuilder.loadTexts: flashSaveEntry.setStatus('current')
if mibBuilder.loadTexts: flashSaveEntry.setDescription('This is the structure of entries in the flashSaveTable.')
flashSaveInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3503, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flashSaveInstance.setStatus('current')
if mibBuilder.loadTexts: flashSaveInstance.setDescription('Each invocation of this action will have a unique instance number, assigned by the switch.')
flashSaveStatusGeneral = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3503, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("started", 0), ("succeeded", 1), ("failed", 2), ("errParam", 4))).clone('started')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flashSaveStatusGeneral.setStatus('current')
if mibBuilder.loadTexts: flashSaveStatusGeneral.setDescription('This is the standard actionStatus enum used for all actions.')
flashSaveStatusSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 3503, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("noError", 0), ("lackOfResources", 2), ("genFail", 3))).clone('noError')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: flashSaveStatusSpecific.setStatus('current')
if mibBuilder.loadTexts: flashSaveStatusSpecific.setDescription('If generalStatus is err-param or failed, this will hold a more specific error number.')
sessionTerminateTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 3, 230), )
if mibBuilder.loadTexts: sessionTerminateTable.setStatus('current')
if mibBuilder.loadTexts: sessionTerminateTable.setDescription('This action allows a remote manager to terminate an active session.')
sessionTerminateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 3, 230, 1), ).setIndexNames((0, "APTIS-ACTIONS-MIB", "sessionTerminateInstance"))
if mibBuilder.loadTexts: sessionTerminateEntry.setStatus('current')
if mibBuilder.loadTexts: sessionTerminateEntry.setDescription('This is the structure of entries in the sessionTerminateTable.')
sessionTerminateInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 230, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTerminateInstance.setStatus('current')
if mibBuilder.loadTexts: sessionTerminateInstance.setDescription('Each invocation of this action will have a unique instance number, assigned by the switch.')
sessionTerminateStatusGeneral = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 230, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("started", 0), ("succeeded", 1), ("failed", 2), ("errParam", 4))).clone('started')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTerminateStatusGeneral.setStatus('current')
if mibBuilder.loadTexts: sessionTerminateStatusGeneral.setDescription('This is the standard actionStatus enum used for all actions.')
sessionTerminateStatusSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 230, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noError", 0), ("badSignature", 1), ("badSession", 2), ("genFail", 3))).clone('noError')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTerminateStatusSpecific.setStatus('current')
if mibBuilder.loadTexts: sessionTerminateStatusSpecific.setDescription('If generalStatus is err-param or failed, this will hold a more specific error number.')
sessionTerminateBootEra = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 230, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTerminateBootEra.setStatus('current')
if mibBuilder.loadTexts: sessionTerminateBootEra.setDescription("An input parameter to the session-terminate action. Together with the sessionID, uniquely identifies the session to terminate. If a value is provided, it must match the current value of bootEra, so this field is only provided as a safeguard to ensure that sessions from the wrong boot era can't be terminated accidentally.")
sessionTerminateSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 230, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTerminateSessionID.setStatus('current')
if mibBuilder.loadTexts: sessionTerminateSessionID.setDescription('An input parameter to the session-terminate action, naming the session which should be terminated.')
sessionTerminateSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 230, 1, 13), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionTerminateSignature.setStatus('current')
if mibBuilder.loadTexts: sessionTerminateSignature.setDescription('An input parameter to the session-terminate action, providing a cryptographically secure verification that the manager requesting the termination has the appropriate credentials to do so. NOTE: the exact algorithm for generating the signature has not yet been determined.')
slotControlTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 3, 203), )
if mibBuilder.loadTexts: slotControlTable.setStatus('current')
if mibBuilder.loadTexts: slotControlTable.setDescription('slot control')
slotControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 3, 203, 1), ).setIndexNames((0, "APTIS-ACTIONS-MIB", "slotControlInstance"))
if mibBuilder.loadTexts: slotControlEntry.setStatus('current')
if mibBuilder.loadTexts: slotControlEntry.setDescription('This is the structure of entries in the slotControlTable.')
slotControlInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 203, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slotControlInstance.setStatus('current')
if mibBuilder.loadTexts: slotControlInstance.setDescription('Each invocation of this action will have a unique instance number, assigned by the switch.')
slotControlStatusGeneral = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 203, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("started", 0), ("succeeded", 1), ("failed", 2), ("errParam", 4))).clone('started')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slotControlStatusGeneral.setStatus('current')
if mibBuilder.loadTexts: slotControlStatusGeneral.setDescription('like, did it work, or what? This is the standard actionStatus enum used for all actions.')
slotControlStatusSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 203, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("noCard", 1), ("notAllowed", 2), ("badSlot", 3), ("inUse", 4), ("inappropriate", 5))).clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slotControlStatusSpecific.setStatus('current')
if mibBuilder.loadTexts: slotControlStatusSpecific.setDescription('like, did it work, or what? If the generalStatus is err-param or failed, this will hold a more specific error number.')
slotControlSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 203, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slotControlSlotIndex.setStatus('current')
if mibBuilder.loadTexts: slotControlSlotIndex.setDescription('The physical slot number.')
slotControlSlotAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 203, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("slotNoChange", 0), ("slotDown", 1), ("slotDownPend", 2), ("slotUp", 3), ("slotReset", 4), ("slotDownTimed", 5), ("slotAbortDry", 6))).clone('slotNoChange')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slotControlSlotAction.setStatus('current')
if mibBuilder.loadTexts: slotControlSlotAction.setDescription('The action requested for this slot.')
t1TestTable = MibTable((1, 3, 6, 1, 4, 1, 2637, 2, 3, 2106), )
if mibBuilder.loadTexts: t1TestTable.setStatus('current')
if mibBuilder.loadTexts: t1TestTable.setDescription('T1 Testing Control.')
t1TestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2637, 2, 3, 2106, 1), ).setIndexNames((0, "APTIS-ACTIONS-MIB", "t1TestInstance"))
if mibBuilder.loadTexts: t1TestEntry.setStatus('current')
if mibBuilder.loadTexts: t1TestEntry.setDescription('This is the structure of entries in the t1TestTable.')
t1TestInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 2106, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1TestInstance.setStatus('current')
if mibBuilder.loadTexts: t1TestInstance.setDescription('T1 Test Instance.')
t1TestTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 2106, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ones", 1), ("zeros", 2), ("fives", 3), ("qrss", 4))).clone('ones')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1TestTestType.setStatus('current')
if mibBuilder.loadTexts: t1TestTestType.setDescription('type of test to run.')
t1TestSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 2106, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("slot1", 1), ("slot2", 2), ("slot3", 3), ("slot4", 4), ("slot5", 5), ("slot6", 6), ("slot7", 7), ("slot8", 8), ("slot11", 11), ("slot12", 12), ("slot13", 13), ("slot14", 14), ("slot15", 15), ("slot16", 16), ("slot17", 17), ("slot18", 18))).clone('slot1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1TestSlotNumber.setStatus('current')
if mibBuilder.loadTexts: t1TestSlotNumber.setDescription('ID of the slot to run the test on.')
t1TestPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 2106, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56))).clone(namedValues=NamedValues(("ds11", 1), ("ds12", 2), ("ds13", 3), ("ds14", 4), ("ds15", 5), ("ds16", 6), ("ds17", 7), ("ds18", 8), ("ds19", 9), ("ds110", 10), ("ds111", 11), ("ds112", 12), ("ds113", 13), ("ds114", 14), ("ds115", 15), ("ds116", 16), ("ds117", 17), ("ds118", 18), ("ds119", 19), ("ds120", 20), ("ds121", 21), ("ds122", 22), ("ds123", 23), ("ds124", 24), ("ds125", 25), ("ds126", 26), ("ds127", 27), ("ds128", 28), ("ds129", 29), ("ds130", 30), ("ds131", 31), ("ds132", 32), ("ds133", 33), ("ds134", 34), ("ds135", 35), ("ds136", 36), ("ds137", 37), ("ds138", 38), ("ds139", 39), ("ds140", 40), ("ds141", 41), ("ds142", 42), ("ds143", 43), ("ds144", 44), ("ds145", 45), ("ds146", 46), ("ds147", 47), ("ds148", 48), ("ds149", 49), ("ds150", 50), ("ds151", 51), ("ds152", 52), ("ds153", 53), ("ds154", 54), ("ds155", 55), ("ds156", 56))).clone('ds11')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1TestPortNumber.setStatus('current')
if mibBuilder.loadTexts: t1TestPortNumber.setDescription('ID of the DS1 to run the test on.')
t1TestTestLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 2106, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30000)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1TestTestLength.setStatus('current')
if mibBuilder.loadTexts: t1TestTestLength.setDescription('number of bytes of data to send.')
t1TestErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 2106, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1TestErrorRate.setStatus('current')
if mibBuilder.loadTexts: t1TestErrorRate.setDescription('percentage of data received with errors.')
t1TestState = MibTableColumn((1, 3, 6, 1, 4, 1, 2637, 2, 3, 2106, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("initializing", 1), ("loopingUp", 2), ("sendingData", 3), ("checkingResults", 4), ("loopingDown", 5), ("complete", 6), ("failed", 7), ("cancelled", 8))).clone('initializing')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t1TestState.setStatus('current')
if mibBuilder.loadTexts: t1TestState.setDescription('current state of test.')
mibBuilder.exportSymbols("APTIS-ACTIONS-MIB", flashWriteTable=flashWriteTable, flashSaveStatusGeneral=flashSaveStatusGeneral, sessionTerminateSignature=sessionTerminateSignature, sessionTerminateEntry=sessionTerminateEntry, sessionTerminateSessionID=sessionTerminateSessionID, t1TestErrorRate=t1TestErrorRate, flashReadFileName=flashReadFileName, sessionTerminateInstance=sessionTerminateInstance, slotControlTable=slotControlTable, slotControlSlotIndex=slotControlSlotIndex, slotControlStatusSpecific=slotControlStatusSpecific, flashWriteEntry=flashWriteEntry, flashSaveEntry=flashSaveEntry, resetEntry=resetEntry, resetStatusGeneral=resetStatusGeneral, flashReadTable=flashReadTable, sessionTerminateTable=sessionTerminateTable, slotControlStatusGeneral=slotControlStatusGeneral, resetTable=resetTable, resetInstance=resetInstance, flashWriteBytesWritten=flashWriteBytesWritten, flashReadEntry=flashReadEntry, flashReadLinesRead=flashReadLinesRead, flashReadInstance=flashReadInstance, t1TestPortNumber=t1TestPortNumber, PYSNMP_MODULE_ID=aptisActionsModule, flashWriteStatusGeneral=flashWriteStatusGeneral, slotControlInstance=slotControlInstance, flashWriteInstance=flashWriteInstance, t1TestTestType=t1TestTestType, flashSaveTable=flashSaveTable, flashSaveInstance=flashSaveInstance, slotControlSlotAction=slotControlSlotAction, sessionTerminateStatusSpecific=sessionTerminateStatusSpecific, t1TestState=t1TestState, sessionTerminateStatusGeneral=sessionTerminateStatusGeneral, aptisActionsModule=aptisActionsModule, sessionTerminateBootEra=sessionTerminateBootEra, flashReadStatusGeneral=flashReadStatusGeneral, t1TestInstance=t1TestInstance, slotControlEntry=slotControlEntry, t1TestTable=t1TestTable, t1TestTestLength=t1TestTestLength, t1TestSlotNumber=t1TestSlotNumber, flashWriteFileName=flashWriteFileName, flashWriteVerboseMode=flashWriteVerboseMode, flashWriteStatusSpecific=flashWriteStatusSpecific, flashSaveStatusSpecific=flashSaveStatusSpecific, t1TestEntry=t1TestEntry, resetResetType=resetResetType, flashWritePathString=flashWritePathString)
