#
# PySNMP MIB module MDM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MDM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:11:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ModuleIdentity, MibIdentifier, Counter64, Integer32, TimeTicks, IpAddress, Counter32, experimental, Gauge32, ObjectIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "MibIdentifier", "Counter64", "Integer32", "TimeTicks", "IpAddress", "Counter32", "experimental", "Gauge32", "ObjectIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
mdm = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6))
mdmID = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 1))
mdmIDTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 1, 1), )
if mibBuilder.loadTexts: mdmIDTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIDTable.setDescription('A list of modem ID entries.')
mdmIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 1, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmIDIndex"))
if mibBuilder.loadTexts: mdmIDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIDEntry.setDescription('An Identification table entry, containing objects which define the identity and capabilities of a modem.')
mdmIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIDIndex.setDescription('A unique value for each modem configured in the system based on the values in the entity table in the USR extensions to the chassis mib.')
mdmIDModel = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 11, 12, 13, 14, 15, 16, 30, 31, 32, 33, 39))).clone(namedValues=NamedValues(("unknown", 1), ("v32bisDualStandard", 2), ("hst", 3), ("v32bis", 4), ("v32terboDualStandard", 11), ("v32terbo", 12), ("v32terboFax", 13), ("v34DualStandard", 14), ("v34", 15), ("v34Fax", 16), ("v34FaxISDN", 30), ("x2", 31), ("hdm24Channel", 32), ("hdm30Channel", 33), ("cdma", 39)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIDModel.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIDModel.setDescription('Defines the model (ie. V.23, HST, etc.) of the modem represented by this row in the table.')
mdmIDCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("unknown", 1), ("northamerica", 2), ("japan", 3), ("finland", 4), ("sweden", 5), ("uk", 6), ("norway", 7), ("switzerland", 8), ("netherlands", 9), ("southAfrica", 10), ("italy", 11), ("newZealand", 12), ("czech", 13), ("belgium", 14), ("denmark", 15), ("australia", 16), ("france", 17), ("germany", 18), ("ccitt", 19), ("austria", 20), ("ireland", 21), ("spain", 22), ("portugal", 23), ("malaysia", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIDCountry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIDCountry.setDescription('This object identifies the country or countries that this modem is designed for use in.')
mdmIDHardwareSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIDHardwareSerNum.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIDHardwareSerNum.setDescription("The modem's hardware serial number as stored in EEPROM.")
mdmIDHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIDHardwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIDHardwareRev.setDescription("The hardware revision of the modem as stored in the modem's EEPROM.")
mdmIDSupervisorSwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIDSupervisorSwRev.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIDSupervisorSwRev.setDescription("The revision of the software being executed by the modem's supervisor processor.")
mdmIDDataPumpSwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIDDataPumpSwRev.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIDDataPumpSwRev.setDescription("The revision of software being executed by the modem's data pump processor.")
mdmIDIoProcessorSwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIDIoProcessorSwRev.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIDIoProcessorSwRev.setDescription("The revison of software being executed by the modem's IO Control Processor.")
mdmIDSupervisorDate = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmIDSupervisorDate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmIDSupervisorDate.setDescription('The supervisor build date.')
mdmLi = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 2))
mdmLiTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1), )
if mibBuilder.loadTexts: mdmLiTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiTable.setDescription('A list of configurable Line Interface objects for a modem. The number of table entries is given by modemNumber.')
mdmLiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmLiIndex"))
if mibBuilder.loadTexts: mdmLiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiEntry.setDescription('Objects which define the line interface characteristics for a particualar modem.')
mdmLiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmLiIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiIndex.setDescription('Index into the Line Interface table. This index is the value from the chassis mib entity relation table that is applicable for a particular modem.')
mdmLiDialPause = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiDialPause.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiDialPause.setDescription("Duration in seconds for the pause(') option in the dial command and the pause between command re-executions(> and A>) Default = 2. Equates to the modem's S8 register.")
mdmLiCarrierRecDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiCarrierRecDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiCarrierRecDelay.setDescription("Duration in 10ths of a second that the remote modem's carrier signal must be present before recognition. Ignored at speeds above 2400. Equates to the modem's S9 register. Default=6.")
mdmLiCarrierLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiCarrierLoss.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiCarrierLoss.setDescription("Duration in 10ths of a second the modem waits after loss of carrier before hanging up. This allows the modem to distinguish between a momentary lapse in line quality and a true disconnect. When equal to 255 the modem will remain off hook until DTR drops or an ATH command is recieved. Equates to the modem's S10 register. Default=7.")
mdmLiToneDialTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiToneDialTiming.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiToneDialTiming.setDescription("Duration and spacing in milliseconds of dialed Touch Tones. Equates to the modem's S10 register. Default=70.")
mdmLiDteRxDataDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiDteRxDataDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiDteRxDataDelay.setDescription("Duration in 10ths of a second that the modem inserts a RX transmission delay between CD and the first recieved character. Intended for custom applications and not recomended for general usage. Equates to the modem's S35 register. Default=0.")
mdmLiTransmiter = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiTransmiter.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiTransmiter.setDescription("Enables the modem to transmit data. Corresponds to the modem 'C' register. Default=2.")
mdmLiDialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pulse", 1), ("tone", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiDialMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiDialMode.setDescription('Determines whether the modem uses pulse or tone for dialing when initiating outgoing calls. Equates to the P and T registers in the modem. Default=0.')
mdmLiGuardTone = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("european550", 2), ("uk1800", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiGuardTone.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiGuardTone.setDescription("This object is required for modems answering calls that originate from sites outside of North America. The modem's must be operating in either 1200 or 2400 bps and be using the V.32 answer sequence. This object defines what guard tone is used for answering calls. This object equates to the &G register in US Robotics modems. Default=none.")
mdmLiLeasedLine = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("cellularHSTMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiLeasedLine.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiLeasedLine.setDescription("Enables modem to operate in leased line mode. When enabled the local an remote modems make a continuous connection without dialing. Should the connection be broken the modem's will attempt to automaticly reestablish it(see mdmCcLeasedLineRest). Equates to the modem's &L register Default = disabled.")
mdmLiLeasedLineRestDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiLeasedLineRestDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiLeasedLineRestDelay.setDescription('Sets the duration, in seconds, of the delay between when the modem senses loss of carrier and when it attempts to reestablish a leased line connection. The default setting of 15 should be appropriate for most installations.')
mdmLiPulseMakeBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("northAmerica", 1), ("britishCommonwealth", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiPulseMakeBreak.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiPulseMakeBreak.setDescription("Determines the ratio of off hook to on hook interval for Pulse dialing. Equates to the modem's &P register. Default=North America.")
mdmLiAnswerTone = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiAnswerTone.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiAnswerTone.setDescription("Disables the 2100 Hz Answer tone allowing V.42 modems to connect more quickly and/or eliminating problems with older 2400-bps modems that do not recognise this tone. Equates to the modem's S27.3 register. Default=Enabled.")
mdmLiRemoteEscGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiRemoteEscGuardTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiRemoteEscGuardTime.setDescription('Sets the duration in 20 millisecond increments of the guard time that the modem requires preceding and following the remote escape sequence. The default is 200 or 4 seconds.')
mdmLiRemoteEscChar = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiRemoteEscChar.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiRemoteEscChar.setDescription('Specifies the decimal value of the character used in the remote access escape code for entering online command mode on this modem from the remote site. Default = 126(~).')
mdmLiRemAccessLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiRemAccessLimit.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiRemAccessLimit.setDescription('Determines the number of attempts to enter remote online command mode that are allowed for any one connection. The default is 0 which disables the remote access functon.')
mdmLiRemPassword0 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiRemPassword0.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiRemPassword0.setDescription('The password that allows a dial-in user to gain view only access to this modems parameters. A maximum of 8 characters is allowed.')
mdmLiRemPassword1 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiRemPassword1.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiRemPassword1.setDescription('The password used by a dial-in user to gain read-write access to this modems configuration. Maximum length is 8 characters.')
mdmLiTransmitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiTransmitLevel.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLiTransmitLevel.setDescription('Specifies the signal level of the modem transmitter in negative db.')
mdmLiSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nic", 1), ("t1Tdm", 2), ("priTdm", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLiSrc.setStatus('optional')
if mibBuilder.loadTexts: mdmLiSrc.setDescription('Specifies either NIC or TDM as the source for the line interface.')
mdmDc = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 3))
mdmDcTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 3, 1), )
if mibBuilder.loadTexts: mdmDcTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDcTable.setDescription('A table of configurable objects that define the operation of Data Compression in the modem.')
mdmDcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 3, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmDcIndex"))
if mibBuilder.loadTexts: mdmDcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDcEntry.setDescription('Objects which define Data Compression operation for a modem.')
mdmDcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDcIndex.setDescription('The index into the Data Compression table. This object contains the unique value for this modem as defined in the chassis mib entity relation table.')
mdmDcDataCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("autoEnable", 2), ("enable", 3), ("mnpWoCompression", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDcDataCompression.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDcDataCompression.setDescription('Determines when and how data compression is enabled. Corresponds to the &K register in USR modems.')
mdmTf = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 4))
mdmTfTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 1), )
if mibBuilder.loadTexts: mdmTfTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTfTable.setDescription('Table of test functions for modems. There is a table entry for each modem the quantity of which is specified by modemNumber.')
mdmTfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmTfIndex"))
if mibBuilder.loadTexts: mdmTfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTfEntry.setDescription('Objects used to request thet the modem perform certain diagnostic tests.')
mdmTfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTfIndex.setDescription('A unique value used to identify this modem the value of which is determined by the entity table in the chassis mib and used as a method to index into the test function table.')
mdmTfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTfTest.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTfTest.setDescription("Equates to modem's S16 register.")
mdmTfTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTfTestTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTfTestTime.setDescription('Duration in seconds that the tests specified by mdmTfTestControl are to execute. Default=0(indefinate).')
mdmTfV54 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTfV54.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTfV54.setDescription("Corresponds to modem's &T register and provides tests specified by V.54. Default=normal.")
mdmTfV54Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTfV54Errors.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTfV54Errors.setDescription('The number of errors occurring during the last V54 loopback test.')
mdmTfATG = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTfATG.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTfATG.setDescription('ATG data from the modem')
mdmTfDialInToneTest = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTfDialInToneTest.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTfDialInToneTest.setDescription('This object is used to enable Dial in Tone Tests.')
mdmTfToneTestCallRef = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 53))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTfToneTestCallRef.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTfToneTestCallRef.setDescription('This object is used to send the call reference info with the tone test.')
mdmTfToneTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 2), )
if mibBuilder.loadTexts: mdmTfToneTable.setStatus('optional')
if mibBuilder.loadTexts: mdmTfToneTable.setDescription('Table for modem tone tests')
mdmTfToneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 2, 1), ).setIndexNames((0, "MDM-MIB", "mdmTfToneIndex"))
if mibBuilder.loadTexts: mdmTfToneEntry.setStatus('optional')
if mibBuilder.loadTexts: mdmTfToneEntry.setDescription('Objects for modem tone tests')
mdmTfToneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTfToneIndex.setStatus('optional')
if mibBuilder.loadTexts: mdmTfToneIndex.setDescription('A value used to ID this modem')
mdmTfTxFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTfTxFreq.setStatus('optional')
if mibBuilder.loadTexts: mdmTfTxFreq.setDescription('Modem tone test TX frequency')
mdmTfTxAmpl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTfTxAmpl.setStatus('optional')
if mibBuilder.loadTexts: mdmTfTxAmpl.setDescription('Modem tone test TX amplitude')
mdmTfRxFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTfRxFreq.setStatus('optional')
if mibBuilder.loadTexts: mdmTfRxFreq.setDescription('Modem tone test RX frequency')
mdmTfRxAmpl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTfRxAmpl.setStatus('optional')
if mibBuilder.loadTexts: mdmTfRxAmpl.setDescription('Modem tone test RX amplitude')
mdmTfRspndrTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3), )
if mibBuilder.loadTexts: mdmTfRspndrTable.setStatus('optional')
if mibBuilder.loadTexts: mdmTfRspndrTable.setDescription('Table for 105/102 responder test results.')
mdmTfRspndrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1), ).setIndexNames((0, "MDM-MIB", "mdmTfRspndrIndex"))
if mibBuilder.loadTexts: mdmTfRspndrEntry.setStatus('optional')
if mibBuilder.loadTexts: mdmTfRspndrEntry.setDescription('Objects containing the 105/102 responder test result dB levels and test status values.')
mdmTfRspndrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTfRspndrIndex.setStatus('optional')
if mibBuilder.loadTexts: mdmTfRspndrIndex.setDescription('A value used to ID this modem.')
mdmTf404FarNearLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTf404FarNearLvl.setStatus('optional')
if mibBuilder.loadTexts: mdmTf404FarNearLvl.setDescription('404 Hz tone at -16 dB loss test level. Far to near. Level in 0.1 dB resolution.')
mdmTf404NearFarLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTf404NearFarLvl.setStatus('optional')
if mibBuilder.loadTexts: mdmTf404NearFarLvl.setDescription('404 Hz tone at -16 dB loss test level. Near to far. Level in 0.1 dB resolution.')
mdmTf1004FarNearLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTf1004FarNearLvl.setStatus('optional')
if mibBuilder.loadTexts: mdmTf1004FarNearLvl.setDescription('1004 Hz tone at -16 dB loss test level. Far to near. Level in 0.1 dB resolution.')
mdmTf1004NearFarLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTf1004NearFarLvl.setStatus('optional')
if mibBuilder.loadTexts: mdmTf1004NearFarLvl.setDescription('1004 Hz tone at -16 dB loss test level. Near to far. Level in 0.1 dB resolution.')
mdmTf2804FarNearLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTf2804FarNearLvl.setStatus('optional')
if mibBuilder.loadTexts: mdmTf2804FarNearLvl.setDescription('2804 Hz tone at -16 dB loss test level. Far to near. Level in 0.1 dB resolution.')
mdmTf2804NearFarLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTf2804NearFarLvl.setStatus('optional')
if mibBuilder.loadTexts: mdmTf2804NearFarLvl.setDescription('2804 Hz tone at -16 dB loss test level. Near to far. Level in 0.1 dB resolution.')
mdmTfCmsgFarNearLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTfCmsgFarNearLvl.setStatus('optional')
if mibBuilder.loadTexts: mdmTfCmsgFarNearLvl.setDescription('C-message test level. Far to near. Level in 0.1 dB resolution.')
mdmTfCmsgNearFarLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTfCmsgNearFarLvl.setStatus('optional')
if mibBuilder.loadTexts: mdmTfCmsgNearFarLvl.setDescription('C-message test level. Near to far. Level in 0.1 dB resolution.')
mdmTfCnotchFarNearLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTfCnotchFarNearLvl.setStatus('optional')
if mibBuilder.loadTexts: mdmTfCnotchFarNearLvl.setDescription('C-notch test level. Far to near. Level in 0.1 dB resolution.')
mdmTfCnotchNearFarLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTfCnotchNearFarLvl.setStatus('optional')
if mibBuilder.loadTexts: mdmTfCnotchNearFarLvl.setDescription('C-notch test level. Near to far. Level in 0.1 dB resolution.')
mdmtTfSigNoiseFarNearLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmtTfSigNoiseFarNearLvl.setStatus('optional')
if mibBuilder.loadTexts: mdmtTfSigNoiseFarNearLvl.setDescription('Signal to noise ratio level. Far to near. Level in 0.1 dB resolution.')
mdmtTfSigNoiseNearFarLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmtTfSigNoiseNearFarLvl.setStatus('optional')
if mibBuilder.loadTexts: mdmtTfSigNoiseNearFarLvl.setDescription('Signal to noise ratio level. Near to far. Level in 0.1 dB resolution.')
mdmTf404FarNearSts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTest", 1), ("success", 2), ("noResponder", 3), ("unsupported", 4), ("timeOut", 5), ("noToneDetected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTf404FarNearSts.setStatus('optional')
if mibBuilder.loadTexts: mdmTf404FarNearSts.setDescription('404 Hz tone at -16 dB loss test status. Far to near. Default=noTest(1).')
mdmTf404NearFarSts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTest", 1), ("success", 2), ("noResponder", 3), ("unsupported", 4), ("timeOut", 5), ("noToneDetected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTf404NearFarSts.setStatus('optional')
if mibBuilder.loadTexts: mdmTf404NearFarSts.setDescription('404 Hz tone at -16 db loss test status. Near to far. Default=noTest(1).')
mdmTf1004FarNearSts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTest", 1), ("success", 2), ("noResponder", 3), ("unsupported", 4), ("timeOut", 5), ("noToneDetected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTf1004FarNearSts.setStatus('optional')
if mibBuilder.loadTexts: mdmTf1004FarNearSts.setDescription('1004 Hz tone at -16 dB loss test status. Far to near. Default=noTest(1).')
mdmTf1004NearFarSts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTest", 1), ("success", 2), ("noResponder", 3), ("unsupported", 4), ("timeOut", 5), ("noToneDetected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTf1004NearFarSts.setStatus('optional')
if mibBuilder.loadTexts: mdmTf1004NearFarSts.setDescription('1004 Hz tone at -16 dB loss test status. Near to far. Default=noTest(1).')
mdmTf2804FarNearSts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTest", 1), ("success", 2), ("noResponder", 3), ("unsupported", 4), ("timeOut", 5), ("noToneDetected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTf2804FarNearSts.setStatus('optional')
if mibBuilder.loadTexts: mdmTf2804FarNearSts.setDescription('2804 Hz tone at -16 dB loss test status. Far to near. Default=noTest(1).')
mdmTf2804NearFarSts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTest", 1), ("success", 2), ("noResponder", 3), ("unsupported", 4), ("timeOut", 5), ("noToneDetected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTf2804NearFarSts.setStatus('optional')
if mibBuilder.loadTexts: mdmTf2804NearFarSts.setDescription('2804 Hz tone at -16 dB loss test status. Near to far. Default=noTest(1).')
mdmTfCmsgFarNearSts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTest", 1), ("success", 2), ("noResponder", 3), ("unsupported", 4), ("timeOut", 5), ("noToneDetected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTfCmsgFarNearSts.setStatus('optional')
if mibBuilder.loadTexts: mdmTfCmsgFarNearSts.setDescription('C-message test status. Far to near. Default=noTest(1).')
mdmTfCmsgNearFarSts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTest", 1), ("success", 2), ("noResponder", 3), ("unsupported", 4), ("timeOut", 5), ("noToneDetected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTfCmsgNearFarSts.setStatus('optional')
if mibBuilder.loadTexts: mdmTfCmsgNearFarSts.setDescription('C-message test status. Near to far. Default=noTest(1).')
mdmTfCnotchFarNearSts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTest", 1), ("success", 2), ("noResponder", 3), ("unsupported", 4), ("timeOut", 5), ("noToneDetected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTfCnotchFarNearSts.setStatus('optional')
if mibBuilder.loadTexts: mdmTfCnotchFarNearSts.setDescription('C-notch test status. Far to near. Default=noTest(1).')
mdmTfCnotchNearFarSts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTest", 1), ("success", 2), ("noResponder", 3), ("unsupported", 4), ("timeOut", 5), ("noToneDetected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTfCnotchNearFarSts.setStatus('optional')
if mibBuilder.loadTexts: mdmTfCnotchNearFarSts.setDescription('C-notch test status. Near to far. Default=noTest(1).')
mdmTfSigNoiseFarNearSts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTest", 1), ("success", 2), ("noResponder", 3), ("unsupported", 4), ("timeOut", 5), ("noToneDetected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTfSigNoiseFarNearSts.setStatus('optional')
if mibBuilder.loadTexts: mdmTfSigNoiseFarNearSts.setDescription('Signal to noise ratio status. Far to near. Default=noTest(1).')
mdmTfSigNoiseNearFarSts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTest", 1), ("success", 2), ("noResponder", 3), ("unsupported", 4), ("timeOut", 5), ("noToneDetected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTfSigNoiseNearFarSts.setStatus('optional')
if mibBuilder.loadTexts: mdmTfSigNoiseNearFarSts.setDescription('Signal to noise ratio status. Near to far. Default=noTest(1).')
mdmTf0dB1004FarNearLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTf0dB1004FarNearLvl.setStatus('optional')
if mibBuilder.loadTexts: mdmTf0dB1004FarNearLvl.setDescription('1004 Hz tone at 0 db loss test level. Far to near. Level in 0.1 dB resolution.')
mdmTf0dB1004NearFarLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTf0dB1004NearFarLvl.setStatus('optional')
if mibBuilder.loadTexts: mdmTf0dB1004NearFarLvl.setDescription('1004 Hz tone at 0 db loss test level. Near to far. Level in 0.1 dB resolution.')
mdmTf0dB1004FarNearSts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTest", 1), ("success", 2), ("noResponder", 3), ("unsupported", 4), ("timeOut", 5), ("noToneDetected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTf0dB1004FarNearSts.setStatus('optional')
if mibBuilder.loadTexts: mdmTf0dB1004FarNearSts.setDescription('1004 Hz tone at 0 db loss test status. Far to near. Default=noTest(1).')
mdmTf0dB1004NearFarSts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 4, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTest", 1), ("success", 2), ("noResponder", 3), ("unsupported", 4), ("timeOut", 5), ("noToneDetected", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTf0dB1004NearFarSts.setStatus('optional')
if mibBuilder.loadTexts: mdmTf0dB1004NearFarSts.setDescription('1004 Hz tone at 0 db loss test status. Near to Far. Default=noTest(1).')
mdmDi = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 5))
mdmDiTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1), )
if mibBuilder.loadTexts: mdmDiTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiTable.setDescription('Table of DTE interface objects. The number of table entries is specified by modemNumber.')
mdmDiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmDiIndex"))
if mibBuilder.loadTexts: mdmDiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiEntry.setDescription('Objects that define the DTE interface for a modem.')
mdmDiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDiIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiIndex.setDescription('The index for the DTE interface table contains the unique value associated with this modem as defined in the chassis mib entity table.')
mdmDiEscCodeGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiEscCodeGuardTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiEscCodeGuardTime.setDescription("Duration in 50ths of a second of idle time that must precede and follow the modem's command mode escape code. Default=50.")
mdmDiLocalEscChar = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiLocalEscChar.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiLocalEscChar.setDescription('Decimal equivalent of the character that is used to escape to on-line command mode. Values between 128 and 255 disable the escape code. Default=43(+).')
mdmDiCarriageRetChar = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiCarriageRetChar.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiCarriageRetChar.setDescription('Specifies the decimal equivalent of the carriage return character. Default=13.')
mdmDiLineFeedChar = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiLineFeedChar.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiLineFeedChar.setDescription('Specifies the decimal equivalent of the line feed character. Default=10.')
mdmDiBackspaceChar = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiBackspaceChar.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiBackspaceChar.setDescription('Specifies the decimal equivalent of the backspace character. Default=8.')
mdmDiDelAsBackspace = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("backspace", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiDelAsBackspace.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiDelAsBackspace.setDescription('Defines functionality of the delete key. Acts either to delete the character the cursor is currently on or acts the same as the backspace key. Default=delete.')
mdmDiResetOnDtrEna = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiResetOnDtrEna.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiResetOnDtrEna.setDescription('When enabled, this option will cause the modem to restart when the DTR control signal drops. Default=disabled.')
mdmDiResultCodePauseDis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiResultCodePauseDis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiResultCodePauseDis.setDescription('When enabled, the modem pauses 250ms before transmission of any result code. Default=enable.')
mdmDiInterbridgeEna = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiInterbridgeEna.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiInterbridgeEna.setDescription("When enabled, the modem operates in a mode that is compatible with an 'Appletalk InterBridge Network'. Default=disabled.")
mdmDiBreakLen = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiBreakLen.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiBreakLen.setDescription('Defines the duration of break characters that are sent to the DTE in ARQ mode. Defined in 10ms increments. Default=10(100ms).')
mdmDiXonChar = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiXonChar.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiXonChar.setDescription('Defines the decimal equivalent of the Xon character. This character will be used when software flow control is enabled. Default=17.')
mdmDiXoffChar = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiXoffChar.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiXoffChar.setDescription('Defines the decimal equivalent of the xoff character. This character will be used when software flow control is enabled. Default=19.')
mdmDiDsrPulseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiDsrPulseTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiDsrPulseTime.setDescription('Duration in 20 millisecond increments that the DSR signal is pulsed when the modem is configured for pulsed DSR mode. Default=150.')
mdmDiRtsCtsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiRtsCtsDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiRtsCtsDelay.setDescription('Duration in 10 millisecond increments that the modem delays setting CTS after detecting the presence of RTS. Default=1.')
mdmDiHiSpeedResCodeEna = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiHiSpeedResCodeEna.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiHiSpeedResCodeEna.setDescription('Determines if connection establishment result codes above 9600 are sent to the DTE. Default=enable.')
mdmDiCmdLocalEchoEna = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiCmdLocalEchoEna.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiCmdLocalEchoEna.setDescription('Defines whether or not the characters transmitted by the DTE are echoed back when in command mode. Default=disabled.')
mdmDiDataModeEchoEna = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiDataModeEchoEna.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiDataModeEchoEna.setDescription("Defines whether or not the DTE's transmitted data is echoed back durring a connection(half duplex). Default=disabled.")
mdmDiDteDataRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("followsLinkRate", 1), ("fixed", 2), ("arqFixedNonArqFollows", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiDteDataRateMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiDteDataRateMode.setDescription('Defines how the modem determines the DTE data rate. When set to the default, follows link rate, the modem switches the DTE speed to match the link rate. When set to fixed, the DTE speed remains at the default DTE data rate or the rate of the last AT command. When set to ARQ fixed-Non ARQ follows the dte speed remains fixed for ARQ calls and follows the link rate for non ARQ calls.')
mdmDiCdOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiCdOverride.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiCdOverride.setDescription('Defines the operation of the CD(Carrier Detect) signal. When overridden the CD signal is always asserted. Default=normal.')
mdmDiDtrOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiDtrOverride.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiDtrOverride.setDescription('Defines operation with regard to DTR. When overridden the DTR signal is always assumed to be present. Default=normal.')
mdmDiDsrOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dsrOveridden", 1), ("modemControled", 2), ("pulsedCtsFollowsCd", 3), ("pulsed", 4), ("dsrEqualsCd", 5), ("normalCtsFollowsCd", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiDsrOverride.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiDsrOverride.setDescription("Determines the functionality of the modem's DSR signal. Default=Override.")
mdmDiEiaLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDiEiaLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiEiaLineStatus.setDescription("Provides a mechanism for the console to determine the current state of the DTE's EIA signals.")
mdmDiTransmitFlowCntl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("hardware", 2), ("software", 3), ("hardwareAndSoftware", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiTransmitFlowCntl.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiTransmitFlowCntl.setDescription('Determines if transmit flow control is enabled and if so whether it is hardware or software. Default=none.')
mdmDiSoftwareRxFlowCntl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("xonXoffLocalRemote", 2), ("xonXoffLocal", 3), ("hpHostMode", 4), ("hpTerminalMode", 5), ("localIncommingXonXoff", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiSoftwareRxFlowCntl.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiSoftwareRxFlowCntl.setDescription('Determines if receive software flow control is enabled as well as what type. Default=none.')
mdmDiHardwareRxFlowCntl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rtsCtsDelayed", 1), ("rtsIgnored", 2), ("dataOnRtsHigh", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiHardwareRxFlowCntl.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiHardwareRxFlowCntl.setDescription('Determines if receive hardware flow control is enabled as well as how it is implemented. Default=RTS ignored.')
mdmDiBreakHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("destructiveNotSent", 1), ("destructiveExpedited", 2), ("nondestructiveExpedited", 3), ("nondestructiveNotSent", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiBreakHandling.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiBreakHandling.setDescription("Defines the method used to handle received breaks. When defined as destructive the modem's transmit data buffer is flushed. When defined as expidited, the break preceeds any pending data in the transmit buffer. Default=Destructive,Expidited.")
mdmDiDteNvramLock = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiDteNvramLock.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiDteNvramLock.setDescription('When locked, prohibits the DTE user from changing any of the NVRAM settings in the modem. Default=unlocked.')
mdmDiSerialFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bit8NoParity", 1), ("bit7EvenParity", 2), ("bit7OddParity", 3), ("bit7MarkParity", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiSerialFormat.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiSerialFormat.setDescription("Defines the data bits and parity of the modem's DTE. Used in situations where the attached DTE is unable to send AT commands to initialize the DTE format. Default=8 bit no parity.")
mdmDiDefaultDteDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 12, 13, 16, 17, 22))).clone(namedValues=NamedValues(("bps110", 1), ("bps300", 2), ("bps600", 3), ("bps1200", 4), ("bps2400", 5), ("bps4800", 6), ("bps9600", 8), ("bps19K", 12), ("bps38K", 13), ("unknown", 16), ("bps57K", 17), ("bps115K", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiDefaultDteDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiDefaultDteDataRate.setDescription('Defines the data rate of the DTE. Useful in those cases where the DTE is incapable of sending an AT command to initialize the data rate and a fixed data rate is required. Default=9600.')
mdmDiRemAccessMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiRemAccessMsg.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiRemAccessMsg.setDescription("Specifies if the modem is to send the 'Modem Unavailable' message to the DTE when the DTE attempts to send data to a modem that is curently in command mode with a remote DTE. Default = enabled.")
mdmDiV25DteDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("bps1200", 1), ("bps2400", 2), ("bps4800", 3), ("bps7200", 4), ("bps9600", 5), ("bps12K", 6), ("bps14K", 7), ("bps16K", 8), ("bps19K", 9), ("bps21K", 10), ("bps24K", 11), ("bps26K", 12), ("bps28K", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiV25DteDataRate.setStatus('optional')
if mibBuilder.loadTexts: mdmDiV25DteDataRate.setDescription('Defines the DTE Data Rates supported for V25 bis.')
mdmDiSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nic", 1), ("packetBus", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiSrc.setStatus('optional')
if mibBuilder.loadTexts: mdmDiSrc.setDescription('Specifies either NIC or Packet Bus as the source for the DTE interface.')
mdmDiSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiSlot.setStatus('optional')
if mibBuilder.loadTexts: mdmDiSlot.setDescription('Specifies the slot address as the DTE interface source when mdmdiSrc is configured for Packet Bus.')
mdmDiBusyClock = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("extClock1", 1), ("busyOut", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiBusyClock.setStatus('optional')
if mibBuilder.loadTexts: mdmDiBusyClock.setDescription('specifies whether the modem will support either the current transmit clock or a new busy out.')
mdmDiAtString = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiAtString.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiAtString.setDescription('Provides an interface for issuing an AT command to the modem. Not implemented as a command so as to allow the object to be saved to NVRAM and subsequently configured during power-up.')
mdmDiDtrRecognitionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 5, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDiDtrRecognitionTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiDtrRecognitionTime.setDescription('S25 register tells the modem how quickly to react when DTR transitions from off to on. Default is 20. Increments are in 10 ms.')
mdmSc = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 6))
mdmScTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1), )
if mibBuilder.loadTexts: mdmScTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScTable.setDescription('Table of configurable objects which determine the operation of the Signal Converter. The quantity of entries in this table is defined by modemNumber.')
mdmScEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmScIndex"))
if mibBuilder.loadTexts: mdmScEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScEntry.setDescription("Objects that define the operation of the modem's Signal Converter.")
mdmScIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmScIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScIndex.setDescription('The unique value found in the chassis mib entity relation table that references this modem.')
mdmScLinkRateSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))).clone(namedValues=NamedValues(("variable", 1), ("bps300", 2), ("bps1200", 3), ("bps2400", 4), ("bps4800", 5), ("bps7200", 6), ("bps9600", 7), ("bps12000", 8), ("bps14400", 9), ("bps16800", 10), ("bps19200", 11), ("bps21600", 12), ("bps24000", 13), ("bps26400", 14), ("bps28800", 15), ("bps31200", 16), ("bps33600", 17), ("bps33333", 18), ("bps37333", 19), ("bps41333", 20), ("bps42666", 21), ("bps44000", 22), ("bps45333", 23), ("bps46666", 24), ("bps48000", 25), ("bps49333", 26), ("bps50666", 27), ("bps52000", 28), ("bps53333", 29), ("bps54666", 30), ("bps56000", 31), ("bps57333", 32), ("bps64000", 33), ("bps28000", 34), ("bps29333", 35), ("bps30666", 36), ("bps32000", 37), ("bps34666", 38), ("bps36000", 39), ("bps38666", 40), ("bps40000", 41), ("bps58666", 42), ("bps60000", 43), ("bps61333", 44), ("bps62666", 45)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScLinkRateSelect.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScLinkRateSelect.setDescription('Determines if the link will run at a fixed or variable data rate. Default=variable.')
mdmScNonArqBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bytes1500", 1), ("bytes128", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScNonArqBufSize.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScNonArqBufSize.setDescription(' Sets the sizer of the transmit buffer for non-ARQ mode operation to either 128 bytes or 1.5K. The smaller size is for low speed interactive applications, the large size is for file transfer. Default=128.')
mdmScNonMnpDataCapture = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScNonMnpDataCapture.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScNonMnpDataCapture.setDescription('Causes received characters to be buffered when the modem is attempting to negotiate an MNP call and the remote modem is not. Default=disabled.')
mdmScSyncTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("rxLinkClock", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScSyncTimingSource.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScSyncTimingSource.setDescription('Specifies the clock source when operating in synchronous mode. Default=internal.')
mdmScHstMod = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScHstMod.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScHstMod.setDescription('May be used to disable HST operation on USRobotics Dual Standard modems. Default=enable.')
mdmScHiFreqEq = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScHiFreqEq.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScHiFreqEq.setDescription("Allows modem's high frequency equalization to be disabled if it causes problems on shorter lines. Default=enabled.")
mdmScBackChanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bps450", 1), ("bps300", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScBackChanRate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScBackChanRate.setDescription('Specifies the lower speed used in the asymetrical (HST) mode of operation. The 300 bps setting is provided for compatibility with early HST modems. Default=450.')
mdmScV21Mod = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScV21Mod.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScV21Mod.setDescription('When enabled, the modem will answer both bell 103 and V.21 calls but originates only V.21 calls. Default=disabled.')
mdmScV32UnencodedMod = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScV32UnencodedMod.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScV32UnencodedMod.setDescription('Allows unencoded modulation in V.32 mode. Although part of the CCITT V.32 recomendation it is rarely used. Default=disabled.')
mdmScV32Mod = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScV32Mod.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScV32Mod.setDescription('Allows V.32 modulation to be disabled on USRobotics Dual Standard modems. Default=enabled.')
mdmScBell208 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScBell208.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScBell208.setDescription('Allows modems that support Bell 208 modulation to include Bell 208 as part of the negotiation sequence. Default=Bell 208 disabled.')
mdmScV32Bis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScV32Bis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScV32Bis.setDescription('Allows V.32 bis modulation to be disabled. On USRobotics Dual Standard modems this may be useful in troublshooting HST operation. Default=V.32 bis enabled.')
mdmScV32BisEnhance = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScV32BisEnhance.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScV32BisEnhance.setDescription('Allows USRobotics V.32 Enahnced mode to be disabled for purposes of troubleshooting Default=enabled.')
mdmScV32QuickRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScV32QuickRetrain.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScV32QuickRetrain.setDescription("Allows the faster retrains that occur with USR's enhanced V.32 mode to be disabled for troubleshooting purposes. Default=enabled.")
mdmScV23 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScV23.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScV23.setDescription('Allows the modem to negotiate a V.23 connection(used in U.K.) after failing to negotiate a higher rate. Default=disabled.')
mdmScHiSpeedModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v32", 1), ("hst", 2), ("bell208", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScHiSpeedModulation.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScHiSpeedModulation.setDescription('Defines the handshaking options used in negotiation of high speed calls. Default=CCITT V.32 ')
mdmScFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScFallback.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScFallback.setDescription('Defines whether or not the modem will be allowed to change protocols it detects a significant change in the line characteristics. If the modem is unable to maintain transmission with the current modulation technique it would fall back to a lower speed and if the line then improved it would upshift to a higher speed. Default=enabled.')
mdmScV32TerboModeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScV32TerboModeEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScV32TerboModeEnable.setDescription('Allows the V32 Terbo mode to be disabled/enabled.')
mdmScV34ModeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScV34ModeEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScV34ModeEnable.setDescription('Allows V34 mode to be disabled/enabled.')
mdmScVFCSymRate2400 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScVFCSymRate2400.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScVFCSymRate2400.setDescription('Allows the 2400 symbol rate to be disabled/enabled on V.FC modems.')
mdmScVFCSymRate2743 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScVFCSymRate2743.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScVFCSymRate2743.setDescription('Allows the 2743 symbol rate to be disabled/enabled on V.FC modems.')
mdmScVFCSymRate2800 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScVFCSymRate2800.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScVFCSymRate2800.setDescription('Allows the 2800 symbol rate to be disabled/enabled on V.FC modems.')
mdmScVFCSymRate3000 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScVFCSymRate3000.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScVFCSymRate3000.setDescription('Allows the 3000 symbol rate to be disabled/enabled on V.FC modems.')
mdmScVFCSymRate3200 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScVFCSymRate3200.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScVFCSymRate3200.setDescription('Allows the 3200 symbol rate to be disabled/enabled on V.FC modems.')
mdmScVFCSymRate3429 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScVFCSymRate3429.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScVFCSymRate3429.setDescription('Allows the 3429 symbol rate to be disabled/enabled on V.FC modems.')
mdmScVFC8S2DMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScVFC8S2DMapping.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScVFC8S2DMapping.setDescription('Allows the 8S-2D mapping to be disabled/enabled on V.FC modems.')
mdmScVFC16S4DMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScVFC16S4DMapping.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScVFC16S4DMapping.setDescription('Allows the 16S-4D mapping to be disabled/enabled on V.FC modems.')
mdmScVFC32S2DMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScVFC32S2DMapping.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScVFC32S2DMapping.setDescription('Allows the 32S-2D mapping to be disabled/enabled on V.FC modems.')
mdmScVFC64S4DMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScVFC64S4DMapping.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScVFC64S4DMapping.setDescription('Allows the 64S-4D mapping to be disabled/enabled on V.FC modems.')
mdmScVFCNonLinearCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScVFCNonLinearCoding.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScVFCNonLinearCoding.setDescription('Allows the non-linear coding to be disabled/enabled on V.FC modems.')
mdmScVFCTxLevelDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScVFCTxLevelDeviation.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScVFCTxLevelDeviation.setDescription('Allows the TX level deviation to be disabled/enabled on V.FC modems.')
mdmScVFCPreEmphasis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScVFCPreEmphasis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScVFCPreEmphasis.setDescription('Allows the pre-emphasis to be disabled/enabled on V.FC modems.')
mdmScVFCPreCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScVFCPreCoding.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScVFCPreCoding.setDescription('Allows the precoding to be disabled/enabled on V.FC modems.')
mdmScVFCShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScVFCShaping.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScVFCShaping.setDescription('Allows the shaping to be disabled/enabled on V.FC modems.')
mdmScVFCModeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScVFCModeEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScVFCModeEnable.setDescription('Allows to disable/enable V.FC mode in order to troubleshoot a connection.')
mdmScV8 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScV8.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScV8.setDescription('Allow V8 mode to be disabled/enabled')
mdmSCV8CallIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmSCV8CallIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: mdmSCV8CallIndicator.setDescription('Allow V.8. call indicater to be disabled/enabled.')
mdmScV34pModeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScV34pModeEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScV34pModeEnable.setDescription('Allows V34 plus modulation mode to be disabled. (default=0/enabled)')
mdmSc300 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmSc300.setStatus('mandatory')
if mibBuilder.loadTexts: mdmSc300.setDescription('Restrict 300 baud negotiations. Register S48.0 Default is disable (0) restriction.')
mdmSc1200 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmSc1200.setStatus('mandatory')
if mibBuilder.loadTexts: mdmSc1200.setDescription('Restrict 1200 baud negotiations. Register S48.1 Default is disable (0) restriction.')
mdmSc2400 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmSc2400.setStatus('mandatory')
if mibBuilder.loadTexts: mdmSc2400.setDescription('Restrict 2400 baud negotiations. Register S48.2 Default is disable (0) restriction.')
mdmScHighSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScHighSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScHighSpeed.setDescription('Restrict highspeed baud negotiations. Register S48.3 Default is disable (0) restriction.')
mdmScSelectiveReject = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScSelectiveReject.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScSelectiveReject.setDescription('Selective Reject register S51.6 is a function of the V.42/LAPM protocol. The default is enable (1)')
mdmScPhExclusionDel = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScPhExclusionDel.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScPhExclusionDel.setDescription('Enable/disable phone extension delay S51.7. Default is enable ')
mdmScLinkRateAmpU = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))).clone(namedValues=NamedValues(("variable", 1), ("bps300", 2), ("bps1200", 3), ("bps2400", 4), ("bps4800", 5), ("bps7200", 6), ("bps9600", 7), ("bps12000", 8), ("bps14400", 9), ("bps16800", 10), ("bps19200", 11), ("bps21600", 12), ("bps24000", 13), ("bps26400", 14), ("bps28800", 15), ("bps31200", 16), ("bps33600", 17), ("bps33333", 18), ("bps37333", 19), ("bps41333", 20), ("bps42666", 21), ("bps44000", 22), ("bps45333", 23), ("bps46666", 24), ("bps48000", 25), ("bps49333", 26), ("bps50666", 27), ("bps52000", 28), ("bps53333", 29), ("bps54666", 30), ("bps56000", 31), ("bps57333", 32), ("bps64000", 33), ("bps28000", 34), ("bps29333", 35), ("bps30666", 36), ("bps32000", 37), ("bps34666", 38), ("bps36000", 39), ("bps38666", 40), ("bps40000", 41), ("bps58666", 42), ("bps60000", 43), ("bps61333", 44), ("bps62666", 45)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScLinkRateAmpU.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScLinkRateAmpU.setDescription('Minimum high-speed direction link speed Default=variable.')
mdmScLowerSpeedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))).clone(namedValues=NamedValues(("variable", 1), ("bps300", 2), ("bps1200", 3), ("bps2400", 4), ("bps4800", 5), ("bps7200", 6), ("bps9600", 7), ("bps12000", 8), ("bps14400", 9), ("bps16800", 10), ("bps19200", 11), ("bps21600", 12), ("bps24000", 13), ("bps26400", 14), ("bps28800", 15), ("bps31200", 16), ("bps33600", 17), ("bps33333", 18), ("bps37333", 19), ("bps41333", 20), ("bps42666", 21), ("bps44000", 22), ("bps45333", 23), ("bps46666", 24), ("bps48000", 25), ("bps49333", 26), ("bps50666", 27), ("bps52000", 28), ("bps53333", 29), ("bps54666", 30), ("bps56000", 31), ("bps57333", 32), ("bps64000", 33), ("bps28000", 34), ("bps29333", 35), ("bps30666", 36), ("bps32000", 37), ("bps34666", 38), ("bps36000", 39), ("bps38666", 40), ("bps40000", 41), ("bps58666", 42), ("bps60000", 43), ("bps61333", 44), ("bps62666", 45)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScLowerSpeedMin.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScLowerSpeedMin.setDescription('Lower speed direction minimum Default=1.')
mdmScLowerSpeedMax = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))).clone(namedValues=NamedValues(("variable", 1), ("bps300", 2), ("bps1200", 3), ("bps2400", 4), ("bps4800", 5), ("bps7200", 6), ("bps9600", 7), ("bps12000", 8), ("bps14400", 9), ("bps16800", 10), ("bps19200", 11), ("bps21600", 12), ("bps24000", 13), ("bps26400", 14), ("bps28800", 15), ("bps31200", 16), ("bps33600", 17), ("bps33333", 18), ("bps37333", 19), ("bps41333", 20), ("bps42666", 21), ("bps44000", 22), ("bps45333", 23), ("bps46666", 24), ("bps48000", 25), ("bps49333", 26), ("bps50666", 27), ("bps52000", 28), ("bps53333", 29), ("bps54666", 30), ("bps56000", 31), ("bps57333", 32), ("bps64000", 33), ("bps28000", 34), ("bps29333", 35), ("bps30666", 36), ("bps32000", 37), ("bps34666", 38), ("bps36000", 39), ("bps38666", 40), ("bps40000", 41), ("bps58666", 42), ("bps60000", 43), ("bps61333", 44), ("bps62666", 45)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScLowerSpeedMax.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScLowerSpeedMax.setDescription('Lower speed direction maximum Default=1.')
mdmScX2Client = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScX2Client.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScX2Client.setDescription('X2 Client Mode Disable Default=enabled.')
mdmScX2Server = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScX2Server.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScX2Server.setDescription('X2 Server Mode Disable Default=enabled.')
mdmScX2Symmetric = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScX2Symmetric.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScX2Symmetric.setDescription('X2 Symmetric Mode Disable Default=enable.')
mdmScX2HighPowerConst = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScX2HighPowerConst.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScX2HighPowerConst.setDescription('This object is used to enable/disable the X2 high-power constellation. This object is only valid in countries, where it is legal. It corresponds to S Register 76.7 Default = Disable(1).')
mdmScPiafs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScPiafs.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScPiafs.setDescription('This object is used to enable/disable PIAFS protocol. It corresponds to S Register 72.4 Default = enable(1).')
mdmScPiafsV42bis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScPiafsV42bis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScPiafsV42bis.setDescription('This object is used to enable/disable PIAFS V42bis compression protocol. It corresponds to S Register 72.5. Default = enable(1).')
mdmScTxPwrLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScTxPwrLvl.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScTxPwrLvl.setDescription('This object configures the power level. It applies to S-register S82.')
mdmScTxPwrLvlApplied = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inputToFarEndOfCodec", 1), ("outputOfTheServerModem", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScTxPwrLvlApplied.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScTxPwrLvlApplied.setDescription('This object configures where the power level is applied. It applies to S-register S81.0.')
mdmScX2Version2 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScX2Version2.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScX2Version2.setDescription('This object is the x2 Version 2 Modulation. It applies to S-register S81.1 ')
mdmScV34Fallback = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScV34Fallback.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScV34Fallback.setDescription('This object is the x2 fallback to v34. It applies to S-register S76.3 ')
mdmScV90Analogue = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScV90Analogue.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScV90Analogue.setDescription('This object controls the enable/disable of the V.90 client modulation.Default=Enable(1).')
mdmScV90Digital = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScV90Digital.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScV90Digital.setDescription('This object controls the enable/disable of the V.90 server modulation.Default=Enable(1).')
mdmScV90AllDigital = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 6, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmScV90AllDigital.setStatus('mandatory')
if mibBuilder.loadTexts: mdmScV90AllDigital.setDescription('This object controls the enable/disable of the V.90 symmetric modulation. Default=Enable(1).')
mdmCc = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 7))
mdmCcTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1), )
if mibBuilder.loadTexts: mdmCcTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcTable.setDescription('A table containing the call control parameters for each modem in the chassis.')
mdmCcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmCcIndex"))
if mibBuilder.loadTexts: mdmCcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcEntry.setDescription('Call control parameters for a modem. These define the sequence of operation related to how a call is negotiated.')
mdmCcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcIndex.setDescription('The index which uniquely identifies the modem to which this entry is applicable. The value corresponds to the value of the index to the entity table in the chassis MIB that corresponds to the same modem.')
mdmCcDialDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcDialDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcDialDelay.setDescription('Defines the number of seconds the modem waits between going off hook and begining to dial. Ignored when result code options 2,4,6,or 7 are active. Default=2.')
mdmCcWaitForCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcWaitForCarrier.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcWaitForCarrier.setDescription('Defines the number of seconds the modem will wait for a carrier signal after dialing. Default=60.')
mdmCcInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcInactivityTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcInactivityTimer.setDescription('Sets the duration (in seconds) that the modem will maintain a connection when there is no activity on the phone line. The feature is disabled when set to 0. Default=0.')
mdmCcAutoDialOnDtrEna = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcAutoDialOnDtrEna.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcAutoDialOnDtrEna.setDescription('When enabled the modem will dial the number present in mdmCCPhoneString0 when the DTR signal transitions from low to high. Default=disable(1).')
mdmCcAutoDialOnPwrUpEna = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcAutoDialOnPwrUpEna.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcAutoDialOnPwrUpEna.setDescription('When enabled, the modem will dial the number present in mdmCcPhoneString0 on power up or after a reset. Default=disable(1).')
mdmCcGhostPortLockEna = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcGhostPortLockEna.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcGhostPortLockEna.setDescription('When enabled, the modem requires that DTR go low before it will accept another call. The modem also implements a Fast Connect mode where CD is asserted before the link negotiation is complete. Default=disable(1).')
mdmCcQuietResultCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("displayResult", 1), ("noResult", 2), ("originateOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcQuietResultCodes.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcQuietResultCodes.setDescription('Determines whether or not the modem transmits result codes to the DTE. Default=noResult(2).')
mdmCcResponseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("numeric", 1), ("verbal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcResponseMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcResponseMode.setDescription('Determines whether the modem transmits result codes in the verbal or numeric mode. Default=verbal(2).')
mdmCcResultCodeOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcResultCodeOptions.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcResultCodeOptions.setDescription("Defines one of eight result code subsets and also defines indirectly how the modem reacts to dial tone etc. Equates to the modem's X register Default=1.")
mdmCcArqResultCodeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("arqResultsDisabled", 1), ("arqResultsEnabled", 2), ("includeHstV32", 3), ("includeProtocol", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcArqResultCodeMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcArqResultCodeMode.setDescription('Defines whether or not the ARQ result codes are sent to the DTE on connection(if result codes are enabled). Default=arqResultsEnabled(2).')
mdmCcEscCodeRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("goOnHook", 1), ("enterCommandMode", 2), ("ignoreEscCode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcEscCodeRsp.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcEscCodeRsp.setDescription('Defines the action of the modem in response to the escape code(+++). The default value is determined by the state of Dip switch 2-3 on power up.')
mdmCcAtRecognition = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("queryOnly", 2), ("enableAll", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcAtRecognition.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcAtRecognition.setDescription('Determines which, if any, AT commands the modem will recognize or accept from the DTE. Default=ignore(1).')
mdmCcMgmtSysMsgDis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcMgmtSysMsgDis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcMgmtSysMsgDis.setDescription('Determines if the modem is to send special result codes, triggered by user conflicts with the management system, to the DTE. Default=enable(1).')
mdmCcV32ToneDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcV32ToneDuration.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcV32ToneDuration.setDescription('Specifies the duration (in 10ths of a second) that the modem transmits the 3000/600 Hz answer tones for V.32 handshaking. A setting of 0 eliminates these tones and will result in faster connect times for V.21 and V.23 calls. Default=8.')
mdmCcAutoAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcAutoAnswer.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcAutoAnswer.setDescription('Determines the number of rings that the modem will answer calls on. When set to 0 the modem can only originate calls. Default=1.')
mdmCcAnswerInOrigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcAnswerInOrigMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcAnswerInOrigMode.setDescription('When enabled the modem will answer calls using the sequence normaly used by the originating modem. Default=disable(1).')
mdmCcArqBufWait = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcArqBufWait.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcArqBufWait.setDescription('Sets the duration (in seconds) that the modem waits on an ARQ call before clearing the transmit buffer and dropping carrier after DTR drops. This is to allow time for the remote modem to acknowledge receipt of all transmitted data. Default=0.')
mdmCcPhoneString0 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcPhoneString0.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcPhoneString0.setDescription("Phone number stored in modem's non volitile memory. Useful in providing quick access to frequently called numbers. In addition mdmCcPhoneString0 is used for the dial on power up and dial on DTR options.")
mdmCcPhoneString1 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcPhoneString1.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcPhoneString1.setDescription("Phone number stored in the modem's non volitile memory, useful for providing quick access to frequently called numbers.")
mdmCcPhoneString2 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcPhoneString2.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcPhoneString2.setDescription("Phone number stored in the modem's non volitile memory, useful in providing quick access to frequently called numbers.")
mdmCcPhoneString3 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcPhoneString3.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcPhoneString3.setDescription("Phone number stored in the modem's non volitile memory, useful in providing quick access to frequently called numbers.")
mdmCcErrorCntlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("syncMode", 2), ("normalArq", 3), ("arqOnly", 4), ("v25bisChar", 5), ("v25bisBit", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcErrorCntlMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcErrorCntlMode.setDescription('Defines if the modem is operating in synchronous or asynchronous mode and how it responds relative to negotiation of error control on asynchronous connections. When set to the default, normalArq(3), the modem attempts to connect with error control but if unable to negotiate it connects anyway. When set to none(1), async connections do not attempt to use error control. When set to arqOnly(4), the modem will hang up if unable to negotiate error contol. When set to syncMode(2), the modem will not connect asynchronously.')
mdmCcMiMic = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcMiMic.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcMiMic.setDescription('Specifies whether the modem will recognize MI/MIC closure as the mechanism for detecting incomming calls. Default=disable(1).')
mdmCcMnpWith1200 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcMnpWith1200.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcMnpWith1200.setDescription('Determines if the modem will include MNP/V42 negotiation on 1200 bps connections. Default=enable(1).')
mdmCcMnpWith2400 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcMnpWith2400.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcMnpWith2400.setDescription('Determines if the modem will include MNP/V43 negotiation on 2400 bps calls. default=enable(1).')
mdmCcMnpWithV32 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcMnpWithV32.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcMnpWithV32.setDescription('Determines if the modem will include MNP/V42 negotiation on V.32 connections. Default=enable(1).')
mdmCcMnpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcMnpTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcMnpTimeout.setDescription('Specifies the MNP/V42 link request timeout for negotiation of 1200 and 2400 bps calls. Default=5.')
mdmCcV21V23FallBackTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcV21V23FallBackTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcV21V23FallBackTimer.setDescription('V21/V23 fallback timer, 1/10 sec. NVRAM S Register S29. Default=20')
mdmCcAddnlAnswToneDur = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcAddnlAnswToneDur.setStatus('optional')
if mibBuilder.loadTexts: mdmCcAddnlAnswToneDur.setDescription('Additional answer tone duration, 1/10 sec. NVRAM S Register S49. Default=16.')
mdmCcBillingDelayPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcBillingDelayPeriod.setStatus('optional')
if mibBuilder.loadTexts: mdmCcBillingDelayPeriod.setDescription('Billing Delay Period. 1/50 sec. NVRAM S Register S50. Default=100.')
mdmCcCarrierAccessCode1 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcCarrierAccessCode1.setStatus('optional')
if mibBuilder.loadTexts: mdmCcCarrierAccessCode1.setDescription('The DNIS Carrier Access Code (CAC) Number. This is a string which contains a number from 1 to 10 digits (e.g. 9501755). This is the 1st of 3 CACs.')
mdmCcCarrierAccessCode2 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcCarrierAccessCode2.setStatus('optional')
if mibBuilder.loadTexts: mdmCcCarrierAccessCode2.setDescription('The DNIS Carrier Access Code (CAC) Number. This is a string which contains a number from 1 to 10 digits. This is the 2nd of 3 CACs.')
mdmCcCarrierAccessCode3 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcCarrierAccessCode3.setStatus('optional')
if mibBuilder.loadTexts: mdmCcCarrierAccessCode3.setDescription('The DNIS Carrier Access Code (CAC) Number. This is a string which contains a number from 1 to 10 digits. This is the 3rd of 3 CACs.')
mdmCcCallingInitStr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcCallingInitStr1.setStatus('optional')
if mibBuilder.loadTexts: mdmCcCallingInitStr1.setDescription('This is the Carrier Access Code (CAC) initialization string. This string is a configuration string of 1 to 30 characters (e.g. &F, &F&B1&R1, etc.) This string does NOT include the AT attention prefix. This is the 1st of 4 CAC init strings.')
mdmCcCallingInitStr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcCallingInitStr2.setStatus('optional')
if mibBuilder.loadTexts: mdmCcCallingInitStr2.setDescription('This is the Carrier Access Code (CAC) initialization string. This string is 1 to 30 characters. It does NOT include the AT attention prefix. It is the 2nd of 4 CAC init strings.')
mdmCcCallingInitStr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcCallingInitStr3.setStatus('optional')
if mibBuilder.loadTexts: mdmCcCallingInitStr3.setDescription('This is the Carrier Access Code (CAC) initialization string. This is a string of 1 to 30 characters. It does NOT include the AT attention prefix. This is the 3rd of 4 CAC init strings.')
mdmCcCallingInitStr4 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcCallingInitStr4.setStatus('optional')
if mibBuilder.loadTexts: mdmCcCallingInitStr4.setDescription('This is the Carrier Access Code (CAC) initialization string. This is a string of 1 to 30 characters. It does NOT include the AT attention prefix. This is the 4th of 4 CAC init strings.')
mdmCcDataFaxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dataMode", 1), ("faxClass1Mode", 2), ("dataFaxClass1Mode", 3), ("faxClass2Mode", 4), ("dataFaxClass2Mode", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcDataFaxMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcDataFaxMode.setDescription('Gives the current Data/FAX mode of the modem.')
mdmCcT1CallSetupProc = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalSetup", 1), ("noSetup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcT1CallSetupProc.setStatus('optional')
if mibBuilder.loadTexts: mdmCcT1CallSetupProc.setDescription("Determines T1 call setup procedures used. Choices are 'normal' or 'none'. None assumes a dedicated (leased) DS0 assigned to the modem. Default=normalSetup(1).")
mdmCcT1DialToneType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mfTones", 1), ("dtmfTones", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcT1DialToneType.setStatus('optional')
if mibBuilder.loadTexts: mdmCcT1DialToneType.setDescription('Determines if MF or DTMF tones are used for T1 signaling. Default = mfTones(1).')
mdmCcT1KpStMfTones = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcT1KpStMfTones.setStatus('optional')
if mibBuilder.loadTexts: mdmCcT1KpStMfTones.setDescription('Determines the usage of KP and ST MF tone encapsulation of the dial sequence. Default=enable(1).')
mdmCcT1CallInitStrUse = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcT1CallInitStrUse.setStatus('optional')
if mibBuilder.loadTexts: mdmCcT1CallInitStrUse.setDescription('Determines if calling init strings are used or not. Default=enable(1).')
mdmCcT1CallInitStrBase = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dnisBase", 1), ("aniBase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcT1CallInitStrBase.setStatus('optional')
if mibBuilder.loadTexts: mdmCcT1CallInitStrBase.setDescription('Determines if the calling init strings are based upon DNIS or ANI. Default=dnisBase(1).')
mdmCcIntBlackListDis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcIntBlackListDis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcIntBlackListDis.setDescription('Disable BlackList restriction in the international modems. Default=0 (enable) s40.1 reg ')
mdmCcOffHookRestrict = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcOffHookRestrict.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcOffHookRestrict.setDescription('Disable off-hook restriction in the international modems. Default=0 (enable) S40.2 reg')
mdmCcT1DialInAniDig = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcT1DialInAniDig.setStatus('optional')
if mibBuilder.loadTexts: mdmCcT1DialInAniDig.setDescription('Sets the number of ANI digits allowed in incoming calls. Default = 0.')
mdmCcT1DialInDnisDig = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcT1DialInDnisDig.setStatus('optional')
if mibBuilder.loadTexts: mdmCcT1DialInDnisDig.setDescription('Sets the number of DNIS/DID digits allowed in incoming calls. Default = 0.')
mdmCcNoPbNoConnEna = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcNoPbNoConnEna.setStatus('optional')
if mibBuilder.loadTexts: mdmCcNoPbNoConnEna.setDescription('Sets if to answer a call when there is no Packet Bus link. Normal is the Default =0')
mdmCcIdleDiscPatt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcIdleDiscPatt.setStatus('optional')
if mibBuilder.loadTexts: mdmCcIdleDiscPatt.setDescription('Idle disconnect pattern sent to the T1 NAC. Normal values: USA = 1, international = 84. Default = 1. Configure the T1 identically. Consult the help screen, user manual or US Robotics before changing. Modem register S71.')
mdmCcMnp10 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcMnp10.setStatus('optional')
if mibBuilder.loadTexts: mdmCcMnp10.setDescription('S61.4 register disable/enable MNP10 originate mode.')
mdmCcMnp10Ec = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcMnp10Ec.setStatus('optional')
if mibBuilder.loadTexts: mdmCcMnp10Ec.setDescription('S61.5 register disable/enable MNP10EC originate mode.')
mdmCcAtzPbHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normalAtz", 1), ("atzPbIgnored", 2), ("atzPbNvram", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcAtzPbHandling.setStatus('optional')
if mibBuilder.loadTexts: mdmCcAtzPbHandling.setDescription('ATZ handling over Packet Bus. S72 REG')
mdmCcDefltPRISlot = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcDefltPRISlot.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcDefltPRISlot.setDescription('Default dialout PRI slot. Default = 1')
mdmCcExtDTMFToneSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcExtDTMFToneSupport.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcExtDTMFToneSupport.setDescription('Enable/Disable DTMF extended support. Default = disable')
mdmCcDataOverVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcDataOverVoice.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcDataOverVoice.setDescription('Data Over Voice support originate S68.1.')
mdmCc2100AnswerTone = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCc2100AnswerTone.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCc2100AnswerTone.setDescription('Data Over Voice support answer S68.2.')
mdmCcEnableV120v42Bis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcEnableV120v42Bis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcEnableV120v42Bis.setDescription('V.42bis Compression over V.120. S67.4')
mdmCcHdlcLicIe = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcHdlcLicIe.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcHdlcLicIe.setDescription('This object is to Enable\\Disable LIC IE message for HDLC protocols. S Register S68.3')
mdmCcDtmfTerminationTone = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcDtmfTerminationTone.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcDtmfTerminationTone.setDescription('This object is to set the DTMF Termination Tone.')
mdmCcAfaxMaxRateSrvOpt20 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bps2400", 1), ("bps4800", 2), ("bps7200", 3), ("bps9600", 4), ("bps12000", 5), ("bps14400", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcAfaxMaxRateSrvOpt20.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcAfaxMaxRateSrvOpt20.setDescription('This object is used to limit the maximum rate for an Analog Fax Connection. Service option 20. Upper nibble of the S94 register.')
mdmCcAfaxMaxRateSrvOpt21 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 7, 1, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bps2400", 1), ("bps4800", 2), ("bps7200", 3), ("bps9600", 4), ("bps12000", 5), ("bps14400", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCcAfaxMaxRateSrvOpt21.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCcAfaxMaxRateSrvOpt21.setDescription('This object is used to limit the maximum rate for an Analog Fax Connection. Service option 21. Lower nibble of S94 register.')
mdmEc = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 8))
mdmEcTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 8, 1), )
if mibBuilder.loadTexts: mdmEcTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEcTable.setDescription('A table of Error Control Parameters for each modem in this system, the quantity of entries is given by modemNumber.')
mdmEcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 8, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmEcIndex"))
if mibBuilder.loadTexts: mdmEcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEcEntry.setDescription('Configurable objects which define the modems error control operation.')
mdmEcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEcIndex.setDescription('This object contains the unique value assigned to this modem in the chassis mib entity relation table and is used as the mechanism for correctly indexing into this table.')
mdmEcMnp3Dis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmEcMnp3Dis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEcMnp3Dis.setDescription('Determines if the modem will negotiate for MNP level 3 error correction. Default=enable.')
mdmEcMnp4Dis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmEcMnp4Dis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEcMnp4Dis.setDescription('Determines if the modem will negotiate for MNP level 4 error correction. Default=enable.')
mdmEcMnpUnusual = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmEcMnpUnusual.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEcMnpUnusual.setDescription('Determines if the modem will attempt to negotiate for MNP operation used in some early 2400bps modems. Default=disable.')
mdmEcV42MnpHandshake = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableAll", 1), ("enableV42disableMnp", 2), ("disablev42enablemnp", 3), ("disableDetectionPhase", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmEcV42MnpHandshake.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEcV42MnpHandshake.setDescription('Determines what types of error correction the modem will attempt to negotiate. When configured for the default, full V.42 and MNP, the modem first tries to connect with V42 error control and then with MNP error control. When set to disable either V42 or MNP the modem will only attempt to negotiate the enabled protocol. When set to disable the V42 detect phase, it is not included in the handshaking process. This allows for faster connections between V42 modems.')
mdmCs = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 9))
mdmCsTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1), )
if mibBuilder.loadTexts: mdmCsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsTable.setDescription('A table of modem status and call statistic parameters for each modem in the chassis.')
mdmCsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmCsIndex"))
if mibBuilder.loadTexts: mdmCsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsEntry.setDescription('Objects that define the modem status and statistics specific to a the current connection when the modem is on line or to the last connection when the modem is idle.')
mdmCsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsIndex.setDescription('The index value which uniquely identifies the modem to which this entry is applicable. The value corresponds to the index of the same modem in the entity table of the chassis MIB.')
mdmCsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 33, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62))).clone(namedValues=NamedValues(("idle", 1), ("offHook", 2), ("dialing", 3), ("ringing", 4), ("ringRcvd", 5), ("linkNegotiation", 6), ("onlineOriginate", 7), ("onlineAnswer", 8), ("localCommandMode", 9), ("remoteCommandMode", 10), ("lineBusiedOut", 11), ("toneTest", 12), ("responderTest105", 13), ("responderTest102", 14), ("failed", 33), ("testingRom", 49), ("testingRam", 50), ("testingNvram", 51), ("analogLoopback", 52), ("localDigitalLoopback", 53), ("remoteDigitalLoopback", 54), ("selfTest", 55), ("phoneTest", 56), ("nonManagedDevice", 57), ("slotEmpty", 58), ("modemDisabled", 59), ("notResponding", 60), ("nonManagableDevice", 61), ("miuFailed", 62)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsStatus.setDescription('Current status of a modem including presence(idle), availability(disabled), and call progress states.')
mdmCsLastNumberDialedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsLastNumberDialedOut.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsLastNumberDialedOut.setDescription('An ASCII string which represents the last phone number dialed by the modem.')
mdmCsLastNumberDialedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsLastNumberDialedIn.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsLastNumberDialedIn.setDescription('An ASCII string representing the last number dialed in(if known). This is the 950-xxx (DNIS) number.')
mdmCsLastCallingPartyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsLastCallingPartyNum.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsLastCallingPartyNum.setDescription('An ASCII string representing the current or last party that called this modem. Only known in ANI applications.')
mdmCsOriginateAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("originateInOriginate", 1), ("originateInAnswer", 2), ("answerInOriginate", 3), ("answerInAnswer", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsOriginateAnswer.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsOriginateAnswer.setDescription('Defines whether the last or current call was originated or answered.')
mdmCsRings = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsRings.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsRings.setDescription('Defines the quantity of rings detected before the DTE answered with DTR on the last incomming call.')
mdmCsDisconnectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111))).clone(namedValues=NamedValues(("dtrDrop", 1), ("escapeSequence", 2), ("athCommand", 3), ("carrierLoss", 4), ("inactivityTimout", 5), ("mnpIncompatible", 6), ("undefined", 7), ("remotePassword", 8), ("linkPassword", 9), ("retransmitLimit", 10), ("linkDisconnectMsgReceived", 11), ("noLoopCurrent", 12), ("invalidSpeed", 13), ("unableToRetrain", 14), ("managementCommand", 15), ("noDialTone", 16), ("keyAbort", 17), ("lineBusy", 18), ("noAnswer", 19), ("voice", 20), ("noAnswerTone", 21), ("noCarrier", 22), ("undetermined", 23), ("v42SabmeTimeout", 24), ("v42BreakTimeout", 25), ("v42DisconnectCmd", 26), ("v42IdExchangeFail", 27), ("v42BadSetup", 28), ("v42InvalidCodeWord", 29), ("v42StringToLong", 30), ("v42InvalidCommand", 31), ("none", 32), ("v32Cleardown", 33), ("dialSecurity", 34), ("remoteAccessDenied", 35), ("loopLoss", 36), ("ds0Teardown", 37), ("promptNotEnabled", 38), ("noPromptingInSync", 39), ("nonArqMode", 40), ("modeIncompatible", 41), ("noPromptInNonARQ", 42), ("dialBackLink", 43), ("linkAbort", 44), ("autopassFailed", 45), ("pbGenericError", 46), ("pbLinkErrTxPreAck", 47), ("pbLinkErrTxTardyACK", 48), ("pbTransmitBusTimeout", 49), ("pbReceiveBusTimeout", 50), ("pbLinkErrTxTAL", 51), ("pbLinkErrRxTAL", 52), ("pbTransmitMasterTimeout", 53), ("pbClockMissing", 54), ("pbReceivedLsWhileLinkUp", 55), ("pbOutOfSequenceFrame", 56), ("pbBadFrame", 57), ("pbAckWaitTimeout", 58), ("pbReceivedAckSequenceErr", 59), ("pbReceiveOvrflwRNRFailed", 60), ("pbReceiveMsgBufOvrflw", 61), ("rcvdGatewayDiscCmd", 62), ("tokenPassingTimeout", 63), ("dspInterruptTimeout", 64), ("mnpProtocolViolation", 65), ("class2FaxHangupCmd", 66), ("hstSpeedSwitchTimeout", 67), ("tooManyUnacked", 68), ("timerExpired", 69), ("t1Glare", 70), ("priDialoutRqTimeout", 71), ("abortAnlgDstOvrIsdn", 72), ("normalUserCallClear", 73), ("normalUnspecified", 74), ("bearerIncompatibility", 75), ("protocolErrorEvent", 76), ("abnormalDisconnect", 77), ("invalidCauseValue", 78), ("resourceUnavailable", 79), ("remotHungUpDuringTraining", 80), ("trainingTimeout", 81), ("incomingModemNotAvailable", 82), ("incomingInvalidBearerCap", 83), ("incomingInvalidChannelID", 84), ("incomingInvalidProgInd", 85), ("incomingInvalidCallingPty", 86), ("incomingInvalidCalledPty", 87), ("incomingCallBlock", 88), ("incomingLoopStNoRingOff", 89), ("outgoingTelcoDisconnect", 90), ("outgoingEMWinkTimeout", 91), ("outgoingEMWinkTooShort", 92), ("outgoingNoChannelAvail", 93), ("dspReboot", 94), ("noDSPRespToKA", 95), ("noDSPRespToDisc", 96), ("dspTailPtrInvalid", 97), ("dspHeadPtrInvalid", 98), ("dataProcessingGenericErr", 99), ("timeslotUnavailable", 100), ("gmtTimeNotSet", 101), ("chasAwarenessNotAvailable", 102), ("r2InvalidChannelDirection", 103), ("r2ChannelBlockedByNetwork", 104), ("r2Glare", 105), ("r2OutgoingCallBlocked", 106), ("r2DNISNotFound", 107), ("r2SigCauseCongestion", 108), ("r2SigCauseUnallocNumber", 109), ("r2DSPFatalError", 110), ("callBlacklisted", 111)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsDisconnectReason.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsDisconnectReason.setDescription('Defines the reason that the last call was terminated.')
mdmCsConnectFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111))).clone(namedValues=NamedValues(("dtrDrop", 1), ("escapeSequence", 2), ("athCommand", 3), ("carrierLoss", 4), ("inactivityTimout", 5), ("mnpIncompatible", 6), ("undefined", 7), ("remotePassword", 8), ("linkPassword", 9), ("retransmitLimit", 10), ("linkDisconnectMsgReceived", 11), ("noLoopCurrent", 12), ("invalidSpeed", 13), ("unableToRetrain", 14), ("managementCommand", 15), ("noDialTone", 16), ("keyAbort", 17), ("lineBusy", 18), ("noAnswer", 19), ("voice", 20), ("noAnswerTone", 21), ("noCarrier", 22), ("undetermined", 23), ("v42SabmeTimeout", 24), ("v42BreakTimeout", 25), ("v42DisconnectCmd", 26), ("v42IdExchangeFail", 27), ("v42BadSetup", 28), ("v42InvalidCodeWord", 29), ("v42StringToLong", 30), ("v42InvalidCommand", 31), ("none", 32), ("v32Cleardown", 33), ("dialSecurity", 34), ("remoteAccessDenied", 35), ("loopLoss", 36), ("ds0Teardown", 37), ("promptNotEnabled", 38), ("noPromptingInSync", 39), ("nonArqMode", 40), ("modeIncompatible", 41), ("noPromptInNonARQ", 42), ("dialBackLink", 43), ("linkAbort", 44), ("autopassFailed", 45), ("pbGenericError", 46), ("pbLinkErrTxPreAck", 47), ("pbLinkErrTxTardyACK", 48), ("pbTransmitBusTimeout", 49), ("pbReceiveBusTimeout", 50), ("pbLinkErrTxTAL", 51), ("pbLinkErrRxTAL", 52), ("pbTransmitMasterTimeout", 53), ("pbClockMissing", 54), ("pbReceivedLsWhileLinkUp", 55), ("pbOutOfSequenceFrame", 56), ("pbBadFrame", 57), ("pbAckWaitTimeout", 58), ("pbReceivedAckSequenceErr", 59), ("pbReceiveOvrflwRNRFailed", 60), ("pbReceiveMsgBufOvrflw", 61), ("rcvdGatewayDiscCmd", 62), ("tokenPassingTimeout", 63), ("dspInterruptTimeout", 64), ("mnpProtocolViolation", 65), ("class2FaxHangupCmd", 66), ("hstSpeedSwitchTimeout", 67), ("tooManyUnacked", 68), ("timerExpired", 69), ("t1Glare", 70), ("priDialoutRqTimeout", 71), ("abortAnlgDstOvrIsdn", 72), ("normalUserCallClear", 73), ("normalUnspecified", 74), ("bearerIncompatibility", 75), ("protocolErrorEvent", 76), ("abnormalDisconnect", 77), ("invalidCauseValue", 78), ("resourceUnavailable", 79), ("remotHungUpDuringTraining", 80), ("trainingTimeout", 81), ("incomingModemNotAvailable", 82), ("incomingInvalidBearerCap", 83), ("incomingInvalidChannelID", 84), ("incomingInvalidProgInd", 85), ("incomingInvalidCallingPty", 86), ("incomingInvalidCalledPty", 87), ("incomingCallBlock", 88), ("incomingLoopStNoRingOff", 89), ("outgoingTelcoDisconnect", 90), ("outgoingEMWinkTimeout", 91), ("outgoingEMWinkTooShort", 92), ("outgoingNoChannelAvail", 93), ("dspReboot", 94), ("noDSPRespToKA", 95), ("noDSPRespToDisc", 96), ("dspTailPtrInvalid", 97), ("dspHeadPtrInvalid", 98), ("dataProcessingGenericErr", 99), ("timeslotUnavailable", 100), ("gmtTimeNotSet", 101), ("chasAwarenessNotAvailable", 102), ("r2InvalidChannelDirection", 103), ("r2ChannelBlockedByNetwork", 104), ("r2Glare", 105), ("r2OutgoingCallBlocked", 106), ("r2DNISNotFound", 107), ("r2SigCauseCongestion", 108), ("r2SigCauseUnallocNumber", 109), ("r2DSPFatalError", 110), ("callBlacklisted", 111)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsConnectFailReason.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsConnectFailReason.setDescription('Defines the reason for failure if indeed the last call attempt failed.')
mdmCsInitialTxLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))).clone(namedValues=NamedValues(("bps110", 1), ("bps300", 2), ("bps600", 3), ("bps1200", 4), ("bps2400", 5), ("bps4800", 6), ("bps7200", 7), ("bps9600", 8), ("bps12K", 9), ("bps14K", 10), ("bps16K", 11), ("bps19K", 12), ("bps38K", 13), ("bps75", 14), ("bps450", 15), ("unknown", 16), ("bps57K", 17), ("bps21K", 18), ("bps24K", 19), ("bps26K", 20), ("bps28K", 21), ("bps31K", 23), ("bps33K", 24), ("bps25333", 25), ("bps26666", 26), ("bps28000", 27), ("bps29333", 28), ("bps30666", 29), ("bps32000", 30), ("bps33333", 31), ("bps34666", 32), ("bps36000", 33), ("bps37333", 34), ("bps38666", 35), ("bps40000", 36), ("bps41333", 37), ("bps42666", 38), ("bps44000", 39), ("bps45333", 40), ("bps46666", 41), ("bps48000", 42), ("bps49333", 43), ("bps50666", 44), ("bps52000", 45), ("bps53333", 46), ("bps54666", 47), ("bps56000", 48), ("bps57333", 49), ("bps58666", 50), ("bps60000", 51), ("bps61333", 52), ("bps62666", 53), ("bps64000", 54)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsInitialTxLinkRate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsInitialTxLinkRate.setDescription("The transmit speed at which the modem initialy connected on it's last or current call.")
mdmCsInitialRxLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))).clone(namedValues=NamedValues(("bps110", 1), ("bps300", 2), ("bps600", 3), ("bps1200", 4), ("bps2400", 5), ("bps4800", 6), ("bps7200", 7), ("bps9600", 8), ("bps12K", 9), ("bps14K", 10), ("bps16K", 11), ("bps19K", 12), ("bps38K", 13), ("bps75", 14), ("bps450", 15), ("unknown", 16), ("bps57K", 17), ("bps21K", 18), ("bps24K", 19), ("bps26K", 20), ("bps28K", 21), ("bps31K", 23), ("bps33K", 24), ("bps25333", 25), ("bps26666", 26), ("bps28000", 27), ("bps29333", 28), ("bps30666", 29), ("bps32000", 30), ("bps33333", 31), ("bps34666", 32), ("bps36000", 33), ("bps37333", 34), ("bps38666", 35), ("bps40000", 36), ("bps41333", 37), ("bps42666", 38), ("bps44000", 39), ("bps45333", 40), ("bps46666", 41), ("bps48000", 42), ("bps49333", 43), ("bps50666", 44), ("bps52000", 45), ("bps53333", 46), ("bps54666", 47), ("bps56000", 48), ("bps57333", 49), ("bps58666", 50), ("bps60000", 51), ("bps61333", 52), ("bps62666", 53), ("bps64000", 54)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsInitialRxLinkRate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsInitialRxLinkRate.setDescription("The receive speed at which the modem initialy connected on it's previous or current call.")
mdmCsFinalTxLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))).clone(namedValues=NamedValues(("bps110", 1), ("bps300", 2), ("bps600", 3), ("bps1200", 4), ("bps2400", 5), ("bps4800", 6), ("bps7200", 7), ("bps9600", 8), ("bps12K", 9), ("bps14K", 10), ("bps16K", 11), ("bps19K", 12), ("bps38K", 13), ("bps75", 14), ("bps450", 15), ("unknown", 16), ("bps57K", 17), ("bps21K", 18), ("bps24K", 19), ("bps26K", 20), ("bps28K", 21), ("bps31K", 23), ("bps33K", 24), ("bps25333", 25), ("bps26666", 26), ("bps28000", 27), ("bps29333", 28), ("bps30666", 29), ("bps32000", 30), ("bps33333", 31), ("bps34666", 32), ("bps36000", 33), ("bps37333", 34), ("bps38666", 35), ("bps40000", 36), ("bps41333", 37), ("bps42666", 38), ("bps44000", 39), ("bps45333", 40), ("bps46666", 41), ("bps48000", 42), ("bps49333", 43), ("bps50666", 44), ("bps52000", 45), ("bps53333", 46), ("bps54666", 47), ("bps56000", 48), ("bps57333", 49), ("bps58666", 50), ("bps60000", 51), ("bps61333", 52), ("bps62666", 53), ("bps64000", 54)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsFinalTxLinkRate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsFinalTxLinkRate.setDescription('The current transmit link rate of a connection, or the last link rate of the last connection.')
mdmCsFinalRxLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))).clone(namedValues=NamedValues(("bps110", 1), ("bps300", 2), ("bps600", 3), ("bps1200", 4), ("bps2400", 5), ("bps4800", 6), ("bps7200", 7), ("bps9600", 8), ("bps12K", 9), ("bps14K", 10), ("bps16K", 11), ("bps19K", 12), ("bps38K", 13), ("bps75", 14), ("bps450", 15), ("unknown", 16), ("bps57K", 17), ("bps21K", 18), ("bps24K", 19), ("bps26K", 20), ("bps28K", 21), ("bps31K", 23), ("bps33K", 24), ("bps25333", 25), ("bps26666", 26), ("bps28000", 27), ("bps29333", 28), ("bps30666", 29), ("bps32000", 30), ("bps33333", 31), ("bps34666", 32), ("bps36000", 33), ("bps37333", 34), ("bps38666", 35), ("bps40000", 36), ("bps41333", 37), ("bps42666", 38), ("bps44000", 39), ("bps45333", 40), ("bps46666", 41), ("bps48000", 42), ("bps49333", 43), ("bps50666", 44), ("bps52000", 45), ("bps53333", 46), ("bps54666", 47), ("bps56000", 48), ("bps57333", 49), ("bps58666", 50), ("bps60000", 51), ("bps61333", 52), ("bps62666", 53), ("bps64000", 54)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsFinalRxLinkRate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsFinalRxLinkRate.setDescription('The current receive link rate of a connection, or the last link rate of the last connection.')
mdmCsModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("usRoboticsHST", 1), ("ccittV32", 2), ("ccittV22bis", 3), ("bell103", 4), ("ccittV21", 5), ("bell212", 6), ("ccittV32bis", 7), ("ccittV23", 8), ("noConnection", 9), ("bell208b", 10), ("v21FaxClass1", 11), ("v27FaxClass1", 12), ("v29FaxClass1", 13), ("v17FaxClass1", 14), ("v21FaxClass2", 15), ("v27FaxClass2", 16), ("v29FaxClass2", 17), ("v17FaxClass2", 18), ("v32Terbo", 19), ("v34", 20), ("vFC", 21), ("v34plus", 22), ("x2server", 23), ("v110", 24), ("v120", 25), ("x75", 26), ("asyncSyncPPP", 27), ("clearChannel", 28), ("x2client", 29), ("x2symmetric", 30), ("piafs", 31), ("x2version2", 32), ("v90Analogue", 33), ("v90Digital", 34), ("v90AllDigital", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsModulationType.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsModulationType.setDescription('Specifies the current/final modulation type of the current or last call. The value can be different from the object mdmCsInitModulationType only for X2/V.90 calls.')
mdmCsSyncAsyncModeUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asynchronous", 1), ("synchronous", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsSyncAsyncModeUsed.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsSyncAsyncModeUsed.setDescription('Defines whether the current or last call was synchronous or asynchronous.')
mdmCsErrorControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("none", 1), ("mnpLevel3", 2), ("mnpLevel4", 3), ("ccittV42", 4), ("usRoboticsHST", 5), ("synchronousNone", 6), ("mnpLevel2", 7), ("mnp10", 8), ("v42Etc", 9), ("mnp10Ec", 10), ("lapmEc", 11), ("v42Etc2", 12), ("ccittV42SREJ", 13), ("piafs", 14), ("v120", 15), ("x75", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsErrorControlType.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsErrorControlType.setDescription('Specifies the Error control settings in the current or last call. (short form)')
mdmCsCompressionType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ccittV42bis", 2), ("mnpLevel5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsCompressionType.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsCompressionType.setDescription('Specifies the data compression used in the current or last call. (short format)')
mdmCsEqualizationType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("long", 1), ("short", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsEqualizationType.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsEqualizationType.setDescription('Specifies the equalization used in the current or last call.')
mdmCsFallbackEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsFallbackEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsFallbackEnabled.setDescription('Specifies whether line speed fallbacks were negotiated on the current or previous call.')
mdmCsCharsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsCharsSent.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsCharsSent.setDescription('Specifies the number of characters sent on the current or previous call.')
mdmCsCharsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsCharsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsCharsReceived.setDescription('Specifies the number of characters received in the current or previous call.')
mdmCsOctetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsOctetsSent.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsOctetsSent.setDescription('Specifies the number of octets sent in the current or previous call.')
mdmCsOctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsOctetsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsOctetsReceived.setDescription('Specifies the number of octets received in the current or previous call.')
mdmCsBlocksSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsBlocksSent.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsBlocksSent.setDescription('Specifies the number of blocks sent in the current or previous call.')
mdmCsBlocksReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsBlocksReceived.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsBlocksReceived.setDescription('Specifies the number of blocks received in the current or previous call.')
mdmCsBlocksResent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsBlocksResent.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsBlocksResent.setDescription('Specifies the number of blocks the modem has had to retransmit due to block errors or timeouts in the current or previous call.')
mdmCsRetrainsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsRetrainsRequested.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsRetrainsRequested.setDescription('Specifies the number of retrains requested in the current or previous call.')
mdmCsRetrainsGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsRetrainsGranted.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsRetrainsGranted.setDescription('Specifies the number of retrains granted in the current or previous call.')
mdmCsLineReversalQty = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsLineReversalQty.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsLineReversalQty.setDescription('Specifies the number of times the HST high and low speeds directions have been reversed in the current or previous call.')
mdmCsCharsLost = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsCharsLost.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsCharsLost.setDescription('Specifies the number of characters lost on the current or previous call. Not meaningful on synchronous calls.')
mdmCsBackChannelRate = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bps450", 1), ("bps300", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsBackChannelRate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsBackChannelRate.setDescription('Specifies the negotiated HST back channel speed on the current or previous call.')
mdmCsBlerQty = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsBlerQty.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsBlerQty.setDescription('Specifies the number of block errors received on the link in the current or last call.')
mdmCsLinkTimeoutQty = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsLinkTimeoutQty.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsLinkTimeoutQty.setDescription('Specifies the number of link protocol timeouts on the current or previous call.')
mdmCsFallbackQty = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsFallbackQty.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsFallbackQty.setDescription('Specifies the quantity of link speed fallbacks that occured on the current or previous call.')
mdmCsUpshiftQty = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsUpshiftQty.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsUpshiftQty.setDescription('Specifies the number of link speed upshifts have occured in the current or previous call.')
mdmCsLinkNakQty = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsLinkNakQty.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsLinkNakQty.setDescription('Specifies the quantity of negative acknowledgements sent in response to errored blocks received on the link in the current or previous call.')
mdmCsGainHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsGainHitCount.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsGainHitCount.setDescription('The modem calculates the gain that is required to adjust the received signal to the ideal level. This defines the number of times that the gain was recalculated durring the current or previous call.')
mdmCsSecurityUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsSecurityUserName.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsSecurityUserName.setDescription('The last dial security user that initiated the Call. This object is not saved to NVRAM.')
mdmCsCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsCallDuration.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsCallDuration.setDescription('This is the length of the call in hh:mm:ss format. The maximum value reported will be 9999:59:59.')
mdmCsCallRefNum = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsCallRefNum.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsCallRefNum.setDescription('Call Reference Number')
mdmCsPriCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsPriCardSlot.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsPriCardSlot.setDescription('Primary Card Slot')
mdmCsTDMTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsTDMTimeSlot.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsTDMTimeSlot.setDescription('Time Division Multipexing Time Slot')
mdmCsPriCardSpanLine = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsPriCardSpanLine.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsPriCardSpanLine.setDescription('Primary Card Span Line')
mdmCsBChannelUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsBChannelUsed.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsBChannelUsed.setDescription('B Channel Used')
mdmCsQCarrFreqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQCarrFreqTx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQCarrFreqTx.setDescription('Transmit carrier value (Hz).')
mdmCsQCarrFreqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQCarrFreqRx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQCarrFreqRx.setDescription('Receive carrier value (Hz).')
mdmCsQSymRateTx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQSymRateTx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQSymRateTx.setDescription('Transmit symbol rate.')
mdmCsQSymRateRx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQSymRateRx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQSymRateRx.setDescription('Receive symbol rate.')
mdmCsQTrellisTx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("trellis8S-2D", 1), ("trellis16S-4D", 2), ("trellis32S-2D", 3), ("trellis64S-4D", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQTrellisTx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQTrellisTx.setDescription('Transmit Trellis coding.')
mdmCsQTrellisRx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("trellis8S-2D", 1), ("trellis16S-4D", 2), ("trellis32S-2D", 3), ("trellis64S-4D", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQTrellisRx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQTrellisRx.setDescription('Receive Trellis coding.')
mdmCsQNonLinCdTx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQNonLinCdTx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQNonLinCdTx.setDescription('Status of transmit non-linear coding.')
mdmCsQNonLinCdRx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQNonLinCdRx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQNonLinCdRx.setDescription('Status of receive non-linear coding.')
mdmCsQPrecodingTx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQPrecodingTx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQPrecodingTx.setDescription('Status of transmit precoding.')
mdmCsQPrecodingRx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQPrecodingRx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQPrecodingRx.setDescription('Status of receive precoding.')
mdmCsQShapingTx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQShapingTx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQShapingTx.setDescription('Status of transmit shaping.')
mdmCsQShapingRx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQShapingRx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQShapingRx.setDescription('Status of receive shaping.')
mdmCsQPreemphTx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQPreemphTx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQPreemphTx.setDescription('Transmit pre-emphasis (-dBm).')
mdmCsQPreemphRx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQPreemphRx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQPreemphRx.setDescription('Receive pre-emphasis (-dBm).')
mdmCsQRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQRxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQRxLevel.setDescription('Receive level (X 10) (-dBm).')
mdmCsQTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQTxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQTxLevel.setDescription('Transmit level (X 10) (-dBm).')
mdmCsQSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQSNR.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQSNR.setDescription('Signal to noise (x 10) (dB).')
mdmCsQNearEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQNearEcho.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQNearEcho.setDescription('Near echo (x 10) (dB).')
mdmCsQFarEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQFarEcho.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQFarEcho.setDescription('Far echo (x 10) (dB).')
mdmCsQRndTripDly = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQRndTripDly.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQRndTripDly.setDescription('Round trip delay (msec).')
mdmCsQPacketSizeCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQPacketSizeCurr.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQPacketSizeCurr.setDescription('Current packet size (bytes).')
mdmCsQPacketSizeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQPacketSizeLow.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQPacketSizeLow.setDescription('Min. packet size (bytes).')
mdmCsQPacketSizeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQPacketSizeHigh.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQPacketSizeHigh.setDescription('Max. packet size (bytes).')
mdmCsQCellTxLevelCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQCellTxLevelCurr.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQCellTxLevelCurr.setDescription('Current Tx level cellular (x 10)(-dBm).')
mdmCsQCellTxLevelLow = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQCellTxLevelLow.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQCellTxLevelLow.setDescription('Min. Tx level cellular (x 10)(-dBm).')
mdmCsQCellTxLevelHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQCellTxLevelHigh.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQCellTxLevelHigh.setDescription('Max. Tx level cellular (x 10)(-dBm).')
mdmCsQSNRLevelCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQSNRLevelCurr.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQSNRLevelCurr.setDescription('Current SNR level cellular (x 10) (-dBm).')
mdmCsQSNRLevelLow = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQSNRLevelLow.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQSNRLevelLow.setDescription('Min. SNR level cellular (x 10) (-dBm).')
mdmCsQSNRLevelHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQSNRLevelHigh.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQSNRLevelHigh.setDescription('Max. SNR level cellular (x 10) (-dBm).')
mdmCsQCellularProt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("mnp10", 2), ("mnp10ec", 3), ("v42etc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQCellularProt.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQCellularProt.setDescription('Current cellular protocol.')
mdmCsFreqProbeData = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 75), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsFreqProbeData.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsFreqProbeData.setDescription('Probe frequency.')
mdmCsLevelProbeData = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 76), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsLevelProbeData.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsLevelProbeData.setDescription('Probe level.')
mdmCsQTimingOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQTimingOffset.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQTimingOffset.setDescription('Timing Offset in parts per million.')
mdmCsQCarrierOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQCarrierOffset.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQCarrierOffset.setDescription('Carrier Offset in Hertz.')
mdmCsQCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mulaw", 1), ("alaw", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsQCoding.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsQCoding.setDescription('PCM Coding mu/A law Default=mulaw.')
mdmCsTrainingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 81), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsTrainingInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsTrainingInfo.setDescription('Training Information')
mdmCsX2signature = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 82), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsX2signature.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsX2signature.setDescription('X2 diagnostics information from modem in hex.')
mdmCsX2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("x2v90NotOperational", 1), ("x2Operational", 2), ("v8DisabledLocal", 3), ("x2DisabledLocal", 4), ("baud3200DisabledLocal", 5), ("speedLimitedLocal", 6), ("v8notDetectedFromRemote", 7), ("x2notDetectedFromRemote", 8), ("incompatibleX2Versions", 9), ("incompatibleX2Modes", 10), ("baud3200DisabledRemote", 11), ("excessiveHFAttenuation", 12), ("channelNoSymbolRate", 13), ("exitBeforeX2Connect", 14), ("v90Operational", 15), ("x2v90Operational", 16), ("v90DisabledLocal", 17), ("x2v90DisabledLocal", 18), ("v90SymRatesDisabledLcl", 19), ("v90NotDetectedFrmRemote", 20), ("x2v90NotDetectedFrmRmt", 21), ("incompatibleV90Versions", 22), ("incompatibleV90Modes", 23), ("v90IncompactibleSymRate", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsX2Status.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsX2Status.setDescription('x2 status of modem.')
mdmCsCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("analogCall", 1), ("chT1WinkStart", 2), ("chT1ImmediateStart", 3), ("chT1LoopStart", 4), ("chT1GroundStart", 5), ("chT1PRICall", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsCallType.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsCallType.setDescription('Call type information.')
mdmCsCallStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsCallStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsCallStartTime.setDescription('Call started time in GMT format.')
mdmCsCallEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsCallEndTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsCallEndTime.setDescription('Call Ended time in GMT format.')
mdmCsDigitalPadAttenuated = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsDigitalPadAttenuated.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsDigitalPadAttenuated.setDescription('Attenuation of the digital pad in tenths of DB.')
mdmCsInitModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("usRoboticsHST", 1), ("ccittV32", 2), ("ccittV22bis", 3), ("bell103", 4), ("ccittV21", 5), ("bell212", 6), ("ccittV32bis", 7), ("ccittV23", 8), ("noConnection", 9), ("bell208b", 10), ("v21FaxClass1", 11), ("v27FaxClass1", 12), ("v29FaxClass1", 13), ("v17FaxClass1", 14), ("v21FaxClass2", 15), ("v27FaxClass2", 16), ("v29FaxClass2", 17), ("v17FaxClass2", 18), ("v32Terbo", 19), ("v34", 20), ("vFC", 21), ("v34plus", 22), ("x2server", 23), ("v110", 24), ("v120", 25), ("x75", 26), ("asyncSyncPPP", 27), ("clearChannel", 28), ("x2client", 29), ("x2symmetric", 30), ("piafs", 31), ("x2version2", 32), ("v90Analogue", 33), ("v90Digital", 34), ("v90AllDigital", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsInitModulationType.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsInitModulationType.setDescription('Specifies the modulation type of the current or last call. The value can be different from the object mdmCsModulationType only for X2/V.90 calls.')
mdmCsRxMinSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))).clone(namedValues=NamedValues(("bps110", 1), ("bps300", 2), ("bps600", 3), ("bps1200", 4), ("bps2400", 5), ("bps4800", 6), ("bps7200", 7), ("bps9600", 8), ("bps12K", 9), ("bps14K", 10), ("bps16K", 11), ("bps19K", 12), ("bps38K", 13), ("bps75", 14), ("bps450", 15), ("unknown", 16), ("bps57K", 17), ("bps21K", 18), ("bps24K", 19), ("bps26K", 20), ("bps28K", 21), ("bps31K", 23), ("bps33K", 24), ("bps25333", 25), ("bps26666", 26), ("bps28000", 27), ("bps29333", 28), ("bps30666", 29), ("bps32000", 30), ("bps33333", 31), ("bps34666", 32), ("bps36000", 33), ("bps37333", 34), ("bps38666", 35), ("bps40000", 36), ("bps41333", 37), ("bps42666", 38), ("bps44000", 39), ("bps45333", 40), ("bps46666", 41), ("bps48000", 42), ("bps49333", 43), ("bps50666", 44), ("bps52000", 45), ("bps53333", 46), ("bps54666", 47), ("bps56000", 48), ("bps57333", 49), ("bps58666", 50), ("bps60000", 51), ("bps61333", 52), ("bps62666", 53), ("bps64000", 54)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsRxMinSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsRxMinSpeed.setDescription('Current/Last Session MIN Rx Speed.')
mdmCsRxMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))).clone(namedValues=NamedValues(("bps110", 1), ("bps300", 2), ("bps600", 3), ("bps1200", 4), ("bps2400", 5), ("bps4800", 6), ("bps7200", 7), ("bps9600", 8), ("bps12K", 9), ("bps14K", 10), ("bps16K", 11), ("bps19K", 12), ("bps38K", 13), ("bps75", 14), ("bps450", 15), ("unknown", 16), ("bps57K", 17), ("bps21K", 18), ("bps24K", 19), ("bps26K", 20), ("bps28K", 21), ("bps31K", 23), ("bps33K", 24), ("bps25333", 25), ("bps26666", 26), ("bps28000", 27), ("bps29333", 28), ("bps30666", 29), ("bps32000", 30), ("bps33333", 31), ("bps34666", 32), ("bps36000", 33), ("bps37333", 34), ("bps38666", 35), ("bps40000", 36), ("bps41333", 37), ("bps42666", 38), ("bps44000", 39), ("bps45333", 40), ("bps46666", 41), ("bps48000", 42), ("bps49333", 43), ("bps50666", 44), ("bps52000", 45), ("bps53333", 46), ("bps54666", 47), ("bps56000", 48), ("bps57333", 49), ("bps58666", 50), ("bps60000", 51), ("bps61333", 52), ("bps62666", 53), ("bps64000", 54)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsRxMaxSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsRxMaxSpeed.setDescription('Current/Last Session MAX Rx Speed.')
mdmCsTxMinSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))).clone(namedValues=NamedValues(("bps110", 1), ("bps300", 2), ("bps600", 3), ("bps1200", 4), ("bps2400", 5), ("bps4800", 6), ("bps7200", 7), ("bps9600", 8), ("bps12K", 9), ("bps14K", 10), ("bps16K", 11), ("bps19K", 12), ("bps38K", 13), ("bps75", 14), ("bps450", 15), ("unknown", 16), ("bps57K", 17), ("bps21K", 18), ("bps24K", 19), ("bps26K", 20), ("bps28K", 21), ("bps31K", 23), ("bps33K", 24), ("bps25333", 25), ("bps26666", 26), ("bps28000", 27), ("bps29333", 28), ("bps30666", 29), ("bps32000", 30), ("bps33333", 31), ("bps34666", 32), ("bps36000", 33), ("bps37333", 34), ("bps38666", 35), ("bps40000", 36), ("bps41333", 37), ("bps42666", 38), ("bps44000", 39), ("bps45333", 40), ("bps46666", 41), ("bps48000", 42), ("bps49333", 43), ("bps50666", 44), ("bps52000", 45), ("bps53333", 46), ("bps54666", 47), ("bps56000", 48), ("bps57333", 49), ("bps58666", 50), ("bps60000", 51), ("bps61333", 52), ("bps62666", 53), ("bps64000", 54)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsTxMinSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsTxMinSpeed.setDescription('Current/Last Session MIN Tx Speed.')
mdmCsTxMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))).clone(namedValues=NamedValues(("bps110", 1), ("bps300", 2), ("bps600", 3), ("bps1200", 4), ("bps2400", 5), ("bps4800", 6), ("bps7200", 7), ("bps9600", 8), ("bps12K", 9), ("bps14K", 10), ("bps16K", 11), ("bps19K", 12), ("bps38K", 13), ("bps75", 14), ("bps450", 15), ("unknown", 16), ("bps57K", 17), ("bps21K", 18), ("bps24K", 19), ("bps26K", 20), ("bps28K", 21), ("bps31K", 23), ("bps33K", 24), ("bps25333", 25), ("bps26666", 26), ("bps28000", 27), ("bps29333", 28), ("bps30666", 29), ("bps32000", 30), ("bps33333", 31), ("bps34666", 32), ("bps36000", 33), ("bps37333", 34), ("bps38666", 35), ("bps40000", 36), ("bps41333", 37), ("bps42666", 38), ("bps44000", 39), ("bps45333", 40), ("bps46666", 41), ("bps48000", 42), ("bps49333", 43), ("bps50666", 44), ("bps52000", 45), ("bps53333", 46), ("bps54666", 47), ("bps56000", 48), ("bps57333", 49), ("bps58666", 50), ("bps60000", 51), ("bps61333", 52), ("bps62666", 53), ("bps64000", 54)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsTxMaxSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsTxMaxSpeed.setDescription('Current/Last Session MAX Tx Speed.')
mdmCsCollectedDTMFDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 9, 1, 1, 93), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCsCollectedDTMFDigits.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCsCollectedDTMFDigits.setDescription('This object is an ASCII array of the DTMF digits collected from the client.')
mdmEv = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 10))
mdmEvTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1), )
if mibBuilder.loadTexts: mdmEvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvTable.setDescription('A list of modem events.')
mdmEvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmEvIndex"))
if mibBuilder.loadTexts: mdmEvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvEntry.setDescription('Modem events that can be managed.')
mdmEvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvIndex.setDescription('Index into event table.')
mdmEvWatchdogTimouts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvWatchdogTimouts.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvWatchdogTimouts.setDescription('Quantity of times that a watchdog timeout has been detected for this modem.')
mdmEvDteIdleTimouts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvDteIdleTimouts.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvDteIdleTimouts.setDescription('The number of times that the modem has had no DTE activity for the time specified by mdmEtDteIdleThresh.')
mdmEvInConnectEstabs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvInConnectEstabs.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvInConnectEstabs.setDescription('The number of times that the modem has reported a incomming connection established event.')
mdmEvOutConnectEstabs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvOutConnectEstabs.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvOutConnectEstabs.setDescription('The number of times that the modem has reported an outgoing connection established event.')
mdmEvInConnectTerms = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvInConnectTerms.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvInConnectTerms.setDescription('The number of times the modem has reported an incomming connection terminated event.')
mdmEvOutConnectTerms = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvOutConnectTerms.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvOutConnectTerms.setDescription('The number of times the modem has reported an outgoing connection termination event.')
mdmEvConnectAttemptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvConnectAttemptFails.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvConnectAttemptFails.setDescription('The number of times the modem has reported a connect attempt failure event. This does not include those connect attempt failures that are reported due to no dial tone and no loop current.')
mdmEvConnectTimouts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvConnectTimouts.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvConnectTimouts.setDescription('The number of times that the NMC has detected a call that has has a duration in excess of the threshold defined in mdmEtConnectThresh.')
mdmEvMgmtBusFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvMgmtBusFailures.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvMgmtBusFailures.setDescription('The number of times the NMC has been unable to get a response from the modem to requests on the management bus.')
mdmEvResetByDtes = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvResetByDtes.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvResetByDtes.setDescription('The number of times that the modem has been reset by the DTE via the ATZ command or by DTR drop.')
mdmEvDtrFalses = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvDtrFalses.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvDtrFalses.setDescription('The number of times the modem has reported DTR False events. The DTR false event timeout is based on mdmEtDtrFalseThresh.')
mdmEvDtrTrues = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvDtrTrues.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvDtrTrues.setDescription('The number of times the modem has reported DTR True events. The modem reports these events to the NMC based on the value of mdmEtDtrTrueTresh.')
mdmEvNoTones = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvNoTones.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvNoTones.setDescription('The number of times the modem reported no tones.')
mdmEvNoLoops = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvNoLoops.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvNoLoops.setDescription('The number of times the modem reported no loop current events.')
mdmEvBlers = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvBlers.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvBlers.setDescription('The number of times the modem reported BLERs.')
mdmEvFallBacks = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvFallBacks.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvFallBacks.setDescription('The number of times the modem reported fall backs.')
mdmEvInConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvInConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvInConnectTime.setDescription('Cumulative counter for inbound call connect time.')
mdmEvInTotalBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvInTotalBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvInTotalBytesRx.setDescription('Cumulative counter for number of bytes received on inbound calls.')
mdmEvInTotalBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvInTotalBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvInTotalBytesTx.setDescription('Cumulative counter for number of bytes transmitted on inbound calls.')
mdmEvOutConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvOutConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvOutConnectTime.setDescription('Cumulative counter for outbound call connect time.')
mdmEvOutTotalBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvOutTotalBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvOutTotalBytesRx.setDescription('Cumulative counter for number of bytes received on outbound calls.')
mdmEvOutTotalBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvOutTotalBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvOutTotalBytesTx.setDescription('Cumulative counter for number of bytes transmitted on outbound calls.')
mdmEvInConnAttemptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvInConnAttemptFails.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvInConnAttemptFails.setDescription('The number of times the modem has reported a inbound connect attempt failure event. This does not include those connect attempt failues that are reported due to no dial time and no loop current.')
mdmEvOutConnAttemptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 10, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEvOutConnAttemptFails.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEvOutConnAttemptFails.setDescription('The number of times the modem has reported a outbound connect attempt failure event. This does not include those connect attempt failures that are reported due to no dial tone and no loop current.')
mdmEt = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 11))
mdmEtTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 11, 1), )
if mibBuilder.loadTexts: mdmEtTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEtTable.setDescription('Table of event thresholds used for setting up the modem to report events that can in turn be monitored by RMON.')
mdmEtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 11, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmEtIndex"))
if mibBuilder.loadTexts: mdmEtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEtEntry.setDescription('Event Thresholds that are used by the modem and the NMC to qualify certain events.')
mdmEtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmEtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEtIndex.setDescription('Index into table used to identify the the specific modem, contians the unique value from the chassis mib entity table.')
mdmEtDteIdleThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmEtDteIdleThresh.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEtDteIdleThresh.setDescription("Defines the length of time for the modem to wait before reporting a 'DTE transmit data idle' event. (There must be no activity on the DTE transmit line for the specified quantity of minutes.")
mdmEtDtrFalseThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmEtDtrFalseThresh.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEtDtrFalseThresh.setDescription("Defines the quantity of seconds that will be used by the modem to qualify a 'DTR False' event.")
mdmEtDtrTrueThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmEtDtrTrueThresh.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEtDtrTrueThresh.setDescription("Defines the quantity of seconds that the modem will use to qualify a 'DTR True' event.")
mdmEtConnTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmEtConnTimeLimit.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEtConnTimeLimit.setDescription("Defines the number of minutes that a call may be connected before triggering the 'connect timer limit' event. A value of zero for this limit means that no event is to be detected (ie. no time limit).")
mdmEtBlerThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmEtBlerThresh.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEtBlerThresh.setDescription("Defines the number of BLERs that will be used to qualify the 'BLER count at threshold' event for a given call.")
mdmEtFallbackThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmEtFallbackThresh.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEtFallbackThresh.setDescription("Defines the number of fallbacks at which the 'fallback count at threshold' event will be generated for a given call.")
mdmCd = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 12))
mdmCdTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 12, 1), )
if mibBuilder.loadTexts: mdmCdTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCdTable.setDescription('The command table contains an entry for each modem installed in a chassis. It provides a means for processing actions requested by the management console. The mechanism used is to set the command and get the result which will indicate the success of the request.')
mdmCdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 12, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmCdIndex"))
if mibBuilder.loadTexts: mdmCdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCdEntry.setDescription('Objects that are used to request that certain actions be taken by the modem itself or that the NMC take certain actions for the modem.')
mdmCdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCdIndex.setDescription('The index value which uniquely identifies the modem to which this entry is applicable. The value corresponds to the index of the corresponding modem in the entity table of the chassis MIB.')
mdmCdMgtStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 12, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCdMgtStationId.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCdMgtStationId.setDescription('This object is a generic read-write variable that a Management Station (MS) can use to guarantee that the results from a given command are the results of a command issued by that specific MS. Each MS must SET a unique value to this object when doing commands and GET the value of this object together with uchasCmdReqId and uchasCmdResult to detect interference from other MSs.')
mdmCdReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 12, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCdReqId.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCdReqId.setDescription('This object contains the value of the request-id field in the SNMP PDU which invoked the most recent command or test on this modem. If the request-id is unknown or undefined, this object contains the value zero.')
mdmCdFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 34, 35))).clone(namedValues=NamedValues(("noCommand", 1), ("softwareReset", 2), ("storeToNvram", 3), ("restoreFromDflt", 4), ("restoreFromNvram", 5), ("offHook", 6), ("onHook", 7), ("sndTone", 8), ("rcvTone", 9), ("endTest", 10), ("rspndrTest105", 11), ("rspndrTest102", 12), ("lclAnlgLpbk", 13), ("lclDgtlLpbk", 14), ("rmtDgtlLpbk", 15), ("selfTest", 16), ("testRam", 17), ("testRom", 18), ("testNVRAM", 19), ("v54LclAnlgLpbk", 20), ("v54RmtDgtlLpbk", 21), ("idlePhoneLine", 22), ("loadHwFlowDflt", 23), ("loadSwFlowDflt", 24), ("loadMnp10CllulrDflt", 25), ("loadV42CllulrMblDflt", 26), ("loadV42CllulrFxdDflt", 27), ("hardBusyAtDisable", 33), ("softBusyAtDisable", 34), ("restoreLineAt", 35)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCdFunction.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCdFunction.setDescription('This object contains a value that describes the command that is being invoked.')
mdmCdForce = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("force", 1), ("noForce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCdForce.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCdForce.setDescription('In certain cases the modem may be in a state where certain commands could adversely affect connectiuons. In such cases, a command request with this object not present or set to noForce will result in a warning. If the operator elects to ignore such warnings, this object can be set to force in a subsequent request to cause the command to be carried out regardless of the potetialy hazzerdous effect.')
mdmCdParam = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 12, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCdParam.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCdParam.setDescription('This object can contain parameters that are specific to the particualar command being issued.')
mdmCdResult = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCdResult.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCdResult.setDescription('This object contains the result of the most recently requested command or test, or the value none(1) if no commands have been requested since last reset.')
mdmCdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 8, 12, 13, 14, 17, 20, 22, 24, 25, 31, 51, 52, 53, 54, 73, 89, 90, 91, 92))).clone(namedValues=NamedValues(("noError", 1), ("unable", 2), ("unrecognizedCommand", 6), ("slotEmpty", 8), ("noResponse", 12), ("notConnected", 13), ("connected", 14), ("onLine", 17), ("unsupportedCommand", 20), ("deviceDisabled", 22), ("deviceInTestMode", 24), ("testFailed", 25), ("deviceInSecurityMode", 31), ("noRTS", 51), ("noDTR", 52), ("wrongLoopbackSpeed", 53), ("noLoopbackInARQ", 54), ("pendingSoftwareDownload", 73), ("invalidFrequency", 89), ("noLoopCurrent", 90), ("noDialTone", 91), ("noLineDetected", 92)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCdCode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCdCode.setDescription('The value of this object indicates a further description of what went wrong when a command fails.')
mdmTe = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 13))
mdmTeTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1), )
if mibBuilder.loadTexts: mdmTeTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeTable.setDescription('A table containing an enable for each trap that a modem entity is capable of generating. Some of these events occur often and traps may flood the network if care is not taken to avoid such conditions. These traps should be enabled sparingly. (usually only when debugging a problem on a particular modem)')
mdmTeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmTeIndex"))
if mibBuilder.loadTexts: mdmTeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeEntry.setDescription('There is one modem trap enable row for each modem entity in the NAS chassis.')
mdmTeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeIndex.setDescription('A unique index which identifies the modem for which these trap enables pertain. The index to the trap enable table matches the index of the corresponding modem in the entity table in the chassis MIB.')
mdmTeInConnEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeInConnEstablished.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeInConnEstablished.setDescription('Enables generation of an SNMP trap upon detection of an incoming connection establishment on the specified modem.')
mdmTeOutConnEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeOutConnEstablished.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeOutConnEstablished.setDescription('Enables generation of an SNMP trap upon detection of an outgoing connection establishment on the specified modem.')
mdmTeInConnTerminated = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeInConnTerminated.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeInConnTerminated.setDescription('Enables generation of an SNMP trap upon detection of an incoming connection termination on the specified modem.')
mdmTeOutConnTerminated = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeOutConnTerminated.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeOutConnTerminated.setDescription('Enables generation of an SNMP trap upon detection of an outgoing connection terminated on the specified modem.')
mdmTeConnAttemptFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeConnAttemptFailure.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeConnAttemptFailure.setDescription('Enables generation of an SNMP trap upon detection of a connection attemp failure on the specified modem.')
mdmTeConnLimitExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeConnLimitExpired.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeConnLimitExpired.setDescription('Enables generation of an SNMP trap upon detection of the expiration of the connection time limit on the specified modem.')
mdmTeDteXmitDataIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeDteXmitDataIdle.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeDteXmitDataIdle.setDescription('Enables generation of an SNMP trap upon detection of DTE transmit data idle on the specified modem.')
mdmTeDtrTrue = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeDtrTrue.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeDtrTrue.setDescription('Enables generation of an SNMP trap upon detection of DTR going true on the specified modem.')
mdmTeDtrFalse = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeDtrFalse.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeDtrFalse.setDescription('Enables generation of an SNMP trap upon detection of DTR going false on the specified modem.')
mdmTeBlerCountAtThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeBlerCountAtThresh.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeBlerCountAtThresh.setDescription('Enables generation of an SNMP trap upon detection of the BLER count at the specified threshold on the specified modem.')
mdmTeFallbkCountAtThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeFallbkCountAtThresh.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeFallbkCountAtThresh.setDescription('Enables generation of an SNMP trap upon detection of the fallback count at the specified threshold on the specified modem.')
mdmTeNoDialTone = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeNoDialTone.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeNoDialTone.setDescription('Enables generation of an SNMP trap upon detection of no dial tone on the specified modem.')
mdmTeNoLoopCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeNoLoopCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeNoLoopCurrent.setDescription('Enables generation of an SNMP trap upon detection of no loop current on the specified modem.')
mdmTeResetByDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeResetByDTE.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeResetByDTE.setDescription('Enables generation of an SNMP trap upon detection of reset by DTE on the specified modem.')
mdmTeDialOutCallDur = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeDialOutCallDur.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeDialOutCallDur.setDescription('Enables the dial out (from the NMC) call duration trap. Default = disable(2).')
mdmTeDialInCallDur = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeDialInCallDur.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeDialInCallDur.setDescription('Enables the dial in (to the NMC) call duration trap. Default = disable(2).')
mdmTePbActive = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTePbActive.setStatus('optional')
if mibBuilder.loadTexts: mdmTePbActive.setDescription('Enables the Packet Bus Active. Default = disable(2).')
mdmTePbLost = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTePbLost.setStatus('optional')
if mibBuilder.loadTexts: mdmTePbLost.setDescription('Enables the Packet Bus Lost trap. Default = disable(2).')
mdmTeDteRingNoAns = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeDteRingNoAns.setStatus('optional')
if mibBuilder.loadTexts: mdmTeDteRingNoAns.setDescription('Enables the Dte Ring No Answer trap. Default = disable(2).')
mdmTePbClockLossEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTePbClockLossEvent.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTePbClockLossEvent.setDescription('This object is used to disable the ability for a NAC to report when the packet bus clock has been lost. Default = disableAll(2).')
mdmTePbClockRestoreEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTePbClockRestoreEvent.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTePbClockRestoreEvent.setDescription('This object is used to disable the ability for a NAC to report when the packet bus clock has been restored. Default = disableAll(2).')
mdmTeInConnAttemptFail = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeInConnAttemptFail.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeInConnAttemptFail.setDescription('Enables generation of a SNMP trap upon detection of an inbound connection attempt failure on the specified modem.')
mdmTeOutConnAttemptFail = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTeOutConnAttemptFail.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTeOutConnAttemptFail.setDescription('Enables generation of a SNMP trap upon detection of an outbound connection attempt failure on the specified modem.')
mdmTe105ResponderTest = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 13, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTe105ResponderTest.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTe105ResponderTest.setDescription('Enables generation of a SNMP trap upon detection of a 105 responder test on the specified modem.')
mdmLs = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 14))
mdmLsTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 14, 1), )
if mibBuilder.loadTexts: mdmLsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLsTable.setDescription('A table defining all the Link Security parameters for each modem in the chassis.')
mdmLsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 14, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmLsIndex"))
if mibBuilder.loadTexts: mdmLsTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLsTableEntry.setDescription('Link Security parameters for a modem. These define the link level security operations which take place when a call is negotiated.')
mdmLsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmLsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLsIndex.setDescription('The index which uniquely identifies the modem to which this entry is applicable. The value corresponds to the value of the index to the entity table in the chassis MIB that corresponds to the same modem.')
mdmLsSecurityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLsSecurityEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLsSecurityEnable.setDescription('Allows to disable/enable the dial security feature for the modem.')
mdmLsFallbackPromptEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLsFallbackPromptEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLsFallbackPromptEnable.setDescription('Disables/enables the prompting by the called modem when the auto pass password supplied by the caller fails or if no password is supplied at all.')
mdmLsForcePromptEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLsForcePromptEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLsForcePromptEnable.setDescription('If this is enabled, the modem will prompt the remote user for a password regardless of the success of the modem to negotiate the auto pass password.')
mdmLsLocAccPasswdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLsLocAccPasswdEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLsLocAccPasswdEnable.setDescription('Disables/enables the Local Access Password feature used to establish security check when accessing any security setting.')
mdmLsDialBackEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLsDialBackEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLsDialBackEnable.setDescription('If this is set to enable the modem, after successful password validation, will disconnect and dial out to the originating modem.')
mdmLsAutoPassPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 14, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLsAutoPassPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLsAutoPassPasswd.setDescription('Contains the Auto Pass Password used for establishing Link security during call negotiation.')
mdmLsLocalAccessPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 14, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLsLocalAccessPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLsLocalAccessPasswd.setDescription('Contains the Local Access password used when accessing any security setting and when Local Access password feature is enabled.')
mdmLsAccountPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 14, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLsAccountPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLsAccountPasswd.setDescription('Contains the fall back password which must be entered if auto pass password is not satisfied.')
mdmHs = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 15))
mdmHsTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 15, 1), )
if mibBuilder.loadTexts: mdmHsTable.setStatus('optional')
if mibBuilder.loadTexts: mdmHsTable.setDescription('A table containing the Hub security parameters accessible in the modem.')
mdmHsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 15, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmHsIndex"))
if mibBuilder.loadTexts: mdmHsEntry.setStatus('optional')
if mibBuilder.loadTexts: mdmHsEntry.setDescription('There is one entry in this table for each modem entity found in the chassis mib entity table.')
mdmHsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHsIndex.setStatus('optional')
if mibBuilder.loadTexts: mdmHsIndex.setDescription('An index that uniquely identifies the modem to which this row in the Hub Security table pertains. The value of this index matches the value of the index for the corresonding entity in the entity table of the Chassis MIB.')
mdmHsDialInEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("allowNoNMC", 2), ("refuseNoNMC", 3), ("busyOutNoNMC", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmHsDialInEnable.setStatus('optional')
if mibBuilder.loadTexts: mdmHsDialInEnable.setDescription("Allows the modem to be configured for dial-in security. Enabling this effectively disables the modem's built-in Link security operation. The default for this object is disabled.")
mdmHsDialOutEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("refuseNoNMC", 2), ("allowNoNMC", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmHsDialOutEnable.setStatus('optional')
if mibBuilder.loadTexts: mdmHsDialOutEnable.setDescription("Allows modems to be configured for dial-out security. Enabling this effectively disables the modem's built-in link security operation. The default value for this object is disabled.")
mdmHsDtrDcdDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmHsDtrDcdDelay.setStatus('optional')
if mibBuilder.loadTexts: mdmHsDtrDcdDelay.setDescription('Allows configuration of the time delay (in 100ths of a second) between reciept of DTR and assertion of DCD when the user on an incomming security call has successfully compleated the security dialog. This object only applies to modems using an RS232 like interface.')
mdmHsDtrDsrDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmHsDtrDsrDelay.setStatus('optional')
if mibBuilder.loadTexts: mdmHsDtrDsrDelay.setDescription('Allows configuration of the delay (in 100ths of a second) between detection of DTR and assertion of DSR when an incomming security call has completed security negotiation successfully.')
mdmAutoResponse = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 16))
mdmArTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1), )
if mibBuilder.loadTexts: mdmArTable.setStatus('optional')
if mibBuilder.loadTexts: mdmArTable.setDescription('Table of auto response scripts for each modem in the chassis. The number of table entries is specified by modemNumber.')
mdmArEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmArIndex"))
if mibBuilder.loadTexts: mdmArEntry.setStatus('optional')
if mibBuilder.loadTexts: mdmArEntry.setDescription('List of configurable auto response scripts.')
mdmArIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmArIndex.setStatus('optional')
if mibBuilder.loadTexts: mdmArIndex.setDescription('Index in to the auto response table. This index contains the unique value associated with the modem as defined in the chassis mib entity table.')
mdmArIncomConnectEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArIncomConnectEstab.setStatus('optional')
if mibBuilder.loadTexts: mdmArIncomConnectEstab.setDescription('This script is triggered when a Total Control WAN HUB modem establishes a connection with a remote modem. The remote modem is the caller.')
mdmArOutgoConnectEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArOutgoConnectEstab.setStatus('optional')
if mibBuilder.loadTexts: mdmArOutgoConnectEstab.setDescription('This script is triggered when a Total Control WAN HUB modem establishes a connection with a remote modem. The Total Control WAN HUB modem is the caller.')
mdmArIncomConnectTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArIncomConnectTerm.setStatus('optional')
if mibBuilder.loadTexts: mdmArIncomConnectTerm.setDescription('This script is triggered after a remote modem has called a Total Control WAN HUB modem, but the connection between them terminated for some reason.')
mdmArOutgoConnectTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArOutgoConnectTerm.setStatus('optional')
if mibBuilder.loadTexts: mdmArOutgoConnectTerm.setDescription('This script is triggered after a Total Control WAN HUB modem called a remote modem, but the connection between them terminated for some reason.')
mdmArConnectAttemptFail = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArConnectAttemptFail.setStatus('optional')
if mibBuilder.loadTexts: mdmArConnectAttemptFail.setDescription('This script is triggered when a Total Control WAN HUB modem fails to connect with a remote modem for an incoming or an outgoing call.')
mdmArConnectTimeExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArConnectTimeExpire.setStatus('optional')
if mibBuilder.loadTexts: mdmArConnectTimeExpire.setDescription('This script is triggered when a connection duration exceeds the user defined connection time limit.')
mdmArResetByDte = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArResetByDte.setStatus('optional')
if mibBuilder.loadTexts: mdmArResetByDte.setDescription('This script is triggered when a modem has been reset by a DTE.')
mdmArDteXmitIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArDteXmitIdle.setStatus('optional')
if mibBuilder.loadTexts: mdmArDteXmitIdle.setDescription("This script is triggered when a modem's DTE remains idle for specified amount of minutes that is defined by a user.")
mdmArBlersAtThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArBlersAtThresh.setStatus('optional')
if mibBuilder.loadTexts: mdmArBlersAtThresh.setDescription('This script is triggered when a Total Control WAN HUB modem receives a certain amount of block errors. This amount can be configured by a user.')
mdmArFbacksAtThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArFbacksAtThresh.setStatus('optional')
if mibBuilder.loadTexts: mdmArFbacksAtThresh.setDescription('This script is triggered when a Total Control WAN HUB modem reaches a certain amount of fall backs within a single session. This amount can be configured by a user.')
mdmArDialOutLoginFail = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArDialOutLoginFail.setStatus('optional')
if mibBuilder.loadTexts: mdmArDialOutLoginFail.setDescription('This script is triggered when a user, who is attempting to dial out from a Total Control WAN HUB modem that supports dial security, enters an invalid response to a prompt.')
mdmArDialOutRestrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArDialOutRestrNum.setStatus('optional')
if mibBuilder.loadTexts: mdmArDialOutRestrNum.setDescription('This script is triggered when a user, who is attempting to dial out from a Total Control WAN HUB modem that supports dial security, uses a restricted number.')
mdmArDialInLoginFail = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArDialInLoginFail.setStatus('optional')
if mibBuilder.loadTexts: mdmArDialInLoginFail.setDescription('This script is triggered when a user, who is attempting to dial in from a remote modem in to a Total Control WAN HUB modem that supports dial security, enters an invalid response to a prompt.')
mdmArDialBackRestrNum = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArDialBackRestrNum.setStatus('optional')
if mibBuilder.loadTexts: mdmArDialBackRestrNum.setDescription('This script is triggered when a user, who is attempting to dial in from a remote modem in to a Total Control WAN HUB modem that supports dial security, requests the Total Control WAN HUB modem to dial back to a restricted number.')
mdmArDialBackRestModem = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArDialBackRestModem.setStatus('optional')
if mibBuilder.loadTexts: mdmArDialBackRestModem.setDescription('This script is triggered when a user, who is attempting to dial in from a remote modem in to a Total Control WAN HUB modem that supports dial security, requests the Total Control WAN HUB modem to dial back using a restricted Total Control WAN HUB modem.')
mdmArLoginAttemptsExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArLoginAttemptsExceed.setStatus('optional')
if mibBuilder.loadTexts: mdmArLoginAttemptsExceed.setDescription('This script is triggered when a user, who is dialing in to or out of the Total Control WAN HUB modem, exceeds the number of correct user name/password response attempts.')
mdmArUserBlacklisted = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArUserBlacklisted.setStatus('optional')
if mibBuilder.loadTexts: mdmArUserBlacklisted.setDescription('This script is triggered when a user, who is dialing in to or out of the Total Control WAN HUB modem, exceeds the number of password prompt retries. At this point the user becomes black listed.')
mdmArAttmpLoginByBlistUsr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArAttmpLoginByBlistUsr.setStatus('optional')
if mibBuilder.loadTexts: mdmArAttmpLoginByBlistUsr.setDescription('This script is triggered when a user, who has been black listed, is trying to dial in to or out of a Total Control WAN HUB modem.')
mdmArRspAttemptLimExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArRspAttemptLimExceed.setStatus('optional')
if mibBuilder.loadTexts: mdmArRspAttemptLimExceed.setDescription('This script is triggered when a user, who is dialing in to or out of a Total Control WAN HUB modem, exceeds the number of security prompt retries during a single dial security session.')
mdmArWatchdog = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArWatchdog.setStatus('optional')
if mibBuilder.loadTexts: mdmArWatchdog.setDescription('This script is triggered when a software failure has occurred on a modem.')
mdmArMgtBusFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArMgtBusFailure.setStatus('optional')
if mibBuilder.loadTexts: mdmArMgtBusFailure.setDescription('This script is triggered when a contact with a modem, via the management bus, has been lost.')
mdmArDtrTrue = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArDtrTrue.setStatus('optional')
if mibBuilder.loadTexts: mdmArDtrTrue.setDescription("This script is triggered when a modem's DTE transitions it DTR line from low to high and holds it high for the specified number of seconds. This amount is user configurable.")
mdmArDtrFalse = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArDtrFalse.setStatus('optional')
if mibBuilder.loadTexts: mdmArDtrFalse.setDescription("This script is triggered when a modem's DTE transitions it DTR line from high to low and holds it low for the specified number of seconds. This amount is user configurable.")
mdmArMdmRingNoAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArMdmRingNoAnswer.setStatus('optional')
if mibBuilder.loadTexts: mdmArMdmRingNoAnswer.setDescription('This script is triggered when a Total Control WAN HUB modem, configured for auto answer, fails to answer an incoming call within a specified number of rings. This amount is user configurable.')
mdmArDteRingNoAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArDteRingNoAnswer.setStatus('optional')
if mibBuilder.loadTexts: mdmArDteRingNoAnswer.setDescription('This script is triggered when a DTE fials to raise DTR in response to an incoming call for a specified amount of rings. This amount is user configurable.')
mdmArNoDialTone = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArNoDialTone.setStatus('optional')
if mibBuilder.loadTexts: mdmArNoDialTone.setDescription('This script is triggered when a Total Control WAN HUB modem goes off hook, but detects an inadequate dial tone level on an analog phone line.')
mdmArNoLoopCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArNoLoopCurrent.setStatus('optional')
if mibBuilder.loadTexts: mdmArNoLoopCurrent.setDescription('This script is triggered when a Total Control WAN HUB modem goes off hook, but it does not detect the presence of loop current on an analog phone line.')
mdmArTimer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArTimer1.setStatus('optional')
if mibBuilder.loadTexts: mdmArTimer1.setDescription('This script is triggered when the first general purpose timer expires.')
mdmArTimer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArTimer2.setStatus('optional')
if mibBuilder.loadTexts: mdmArTimer2.setDescription('This script is triggered when the second general purpose timer expires.')
mdmArTimer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArTimer3.setStatus('optional')
if mibBuilder.loadTexts: mdmArTimer3.setDescription('This script is triggered when the third general purpose timer expires.')
mdmArTimer4 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArTimer4.setStatus('optional')
if mibBuilder.loadTexts: mdmArTimer4.setDescription('This script is triggered when the fourth general purpose timer expires.')
mdmArPacketBusActive = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArPacketBusActive.setStatus('optional')
if mibBuilder.loadTexts: mdmArPacketBusActive.setDescription('This script is triggered when a packet bus active event is detected by the modem.')
mdmArPacketBusLost = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 16, 1, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmArPacketBusLost.setStatus('optional')
if mibBuilder.loadTexts: mdmArPacketBusLost.setDescription('This script is triggered when a packet bus lost event is detected by the modem.')
mdmCe = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 17))
mdmCeTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1), )
if mibBuilder.loadTexts: mdmCeTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeTable.setDescription('A list of configurable Cellular Support object for a modem. The number of table entries is given by modemNumber.')
mdmCeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmCeIndex"))
if mibBuilder.loadTexts: mdmCeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeEntry.setDescription('Objects which define the Cellular characteristics for a particular modem.')
mdmCeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeIndex.setDescription('This index value which uniquely identifies the modem to which this entry is applicable. The value corresponds to the index of the corresponding modem in the entity table of the chassis MIB.')
mdmCeMnp10Dis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCeMnp10Dis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeMnp10Dis.setDescription('This object is bit 0 of S-register 60. It disable/enables MNP10 negotiation mostly used with cellular operations. (defualt=0)')
mdmCeMnpxDis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCeMnpxDis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeMnpxDis.setDescription('This object is bit 1 of S-register 60. It will enable/disable the MNP extended services to be active during negotiation. This will mean that MNP10 will use V.42 to negotiate. (defualt=0)')
mdmCeComp = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mnp5", 1), ("v42bis", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCeComp.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeComp.setDescription('This object is bit 2 of S-register 60. It selects which compression type will be negotiated if allowed by other modem settings. (default =0>')
mdmCeOperDis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCeOperDis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeOperDis.setDescription('This object is bit 3 of S-register 60. It announces that at least one end of the link will be across a cellular network. Therefore, the Dyncamic Transmit Algorithm will be active. (default=0)')
mdmCeLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkAtHighSpeed", 1), ("linkAt1200BpsV22", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCeLinkSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeLinkSpeed.setDescription('This object is bit 4 of register 60 tells the modem which speed to establish the link at. (default=0)')
mdmCeShortFormRules = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("form1CodeWords512", 2), ("form2CodeWords1024", 3), ("form3CodeWords2048", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCeShortFormRules.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeShortFormRules.setDescription('This object is the S-register 61. It takes a value from 0 to 3 and regulates the V.42bis Short Form Negotiation rules. The short form assumes that the maximum string length is always 32 octets and that the direction of compression is always bi-directional. (default=0)')
mdmCeDceBitraLim = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("maxDceRate", 1), ("bps4800", 2), ("bps7200", 3), ("bps9600", 4), ("bps12000", 5), ("bps14400", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCeDceBitraLim.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeDceBitraLim.setDescription('This object is the S-register 64. It limits DCE bitrates to values equal to or below the chosen setting. (default=0)')
mdmCeDceTxLev = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("modemContrlTxLev", 1), ("dBm10", 2), ("dBm11", 3), ("dBm12", 4), ("dBm13", 5), ("dBm14", 6), ("dBm15", 7), ("dBm16", 8), ("dBm17", 9), ("dBm18", 10), ("dBm19", 11), ("dBm20", 12), ("dBm21", 13), ("dBm22", 14), ("dBm23", 15), ("dBm24", 16), ("dBm25", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCeDceTxLev.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeDceTxLev.setDescription('This object is S-register 65. It selects DCE TX level to use during cellular operations. (default=0)')
mdmCeV42EtcDis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCeV42EtcDis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeV42EtcDis.setDescription('This object is the bit 0 of S-register 66. It enables/disables ETC. (default=0)')
mdmCeV42CellSite = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixedSite", 1), ("mobileSite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCeV42CellSite.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeV42CellSite.setDescription('This object is the bit 1 of S-register 66. It selects fixed or mobile site operations. (default=0)')
mdmCeV42EtcCallToneDis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCeV42EtcCallToneDis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeV42EtcCallToneDis.setDescription('This object is the bit 2 of S-register 66. It enables/disables ETC calling tone. (default=0)')
mdmCeV42EtcTxLevConDis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCeV42EtcTxLevConDis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeV42EtcTxLevConDis.setDescription('This object is the bit 3 of S-register 66. It enables/disables forced ETC TX level control. (default=0)')
mdmCeDceStartRate = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("bps4800", 2), ("bps9600", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCeDceStartRate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeDceStartRate.setDescription('This object is the bits 4 and 5 of S-register 66. It sets the DCE startup rate. (default=0)')
mdmCeV42DceTxDemDis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCeV42DceTxDemDis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeV42DceTxDemDis.setDescription('This object is the bit 6 of S-register 66. It enables/disables DCE TX De-emphasis. (default=0)')
mdmCeMnp10FallbackDis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCeMnp10FallbackDis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeMnp10FallbackDis.setDescription('This object is the bit 5 of S-register 60. It enables/disables MNP10 fallback. (default=0)')
mdmCeMnp10FallforDis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCeMnp10FallforDis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeMnp10FallforDis.setDescription('This object is the bit 6 of S-register 60. It enables/disables MNP10 fallforward. (default=0)')
mdmCeDbNoEtcDis = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCeDbNoEtcDis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeDbNoEtcDis.setDescription('This object is the bit 7 of S-register 66. It enables/disables non-ETC originate mode. (default=0/disable)')
mdmCeMnpxDetPhEna = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 17, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCeMnpxDetPhEna.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCeMnpxDetPhEna.setDescription('This object is the bit 7 of S-register 60. It enables/disables the MNPX detection phase during connection establishment. (default=0/enable).')
mdmSts = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 18))
mdmStsTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 18, 1), )
if mibBuilder.loadTexts: mdmStsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmStsTable.setDescription('A table containing configuration information for each NAC in the NAS chassis that supports packet bus datagrams.')
mdmStsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 18, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmStsIndex"))
if mibBuilder.loadTexts: mdmStsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmStsEntry.setDescription('There is one configuration row for each modem entity.')
mdmStsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmStsIndex.setDescription("A unique value for each card in the chassis. The value of this object matches the value of the index of the corresponding card's entry in the entity table of the chassis MIB.")
mdmStsPbClock = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("clockMaster", 2), ("clockSlave", 3), ("noClockPresent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStsPbClock.setStatus('mandatory')
if mibBuilder.loadTexts: mdmStsPbClock.setDescription('This object defines the current status of the packet bus clock.')
mdmMa = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 6, 19))
mdmMaTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 6, 19, 1), )
if mibBuilder.loadTexts: mdmMaTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmMaTable.setDescription('A Mapping table entry, containing objects which define the card level configuration each modem is mapped to and the unique change indicator.')
mdmMaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 6, 19, 1, 1), ).setIndexNames((0, "MDM-MIB", "mdmMaIndex"))
if mibBuilder.loadTexts: mdmMaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmMaEntry.setDescription('Objects which define the Mapping and Status for a particular modem.')
mdmMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmMaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmMaIndex.setDescription('This index value which uniquely identifies the modem to which this entry is applicable. The value corresponds to the index of the corresponding modem in the entity table of the chassis MIB.')
mdmMaChangeIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("cfgChanged", 2), ("cfgUnchanged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmMaChangeIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: mdmMaChangeIndicator.setDescription('A value of changed indicates that the card level configuration for a specific channel on a HDM is not the one in use on that channel.')
mdmMaChannelConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 6, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("group1", 1), ("group2", 2), ("group3", 3), ("group4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmMaChannelConfig.setStatus('mandatory')
if mibBuilder.loadTexts: mdmMaChannelConfig.setDescription('Values of group(1), group(2), group(3), group(4) represent the HDM card level configuration of 1..4 used by this channel.')
mibBuilder.exportSymbols("MDM-MIB", mdmCeV42EtcTxLevConDis=mdmCeV42EtcTxLevConDis, mdmEvNoLoops=mdmEvNoLoops, mdmArTimer2=mdmArTimer2, mdmEcMnp4Dis=mdmEcMnp4Dis, mdmScX2Client=mdmScX2Client, mdmCcMiMic=mdmCcMiMic, mdmTeFallbkCountAtThresh=mdmTeFallbkCountAtThresh, mdmTfCnotchNearFarLvl=mdmTfCnotchNearFarLvl, mdmCsBackChannelRate=mdmCsBackChannelRate, mdmCsStatus=mdmCsStatus, mdmCsQNonLinCdTx=mdmCsQNonLinCdTx, mdmArDtrFalse=mdmArDtrFalse, mdmScHiFreqEq=mdmScHiFreqEq, mdmArFbacksAtThresh=mdmArFbacksAtThresh, mdmCcMnpWithV32=mdmCcMnpWithV32, mdmCsLastNumberDialedOut=mdmCsLastNumberDialedOut, mdmIDEntry=mdmIDEntry, mdmScEntry=mdmScEntry, mdmCsPriCardSlot=mdmCsPriCardSlot, mdmDcTable=mdmDcTable, mdmCeV42CellSite=mdmCeV42CellSite, mdmCcCallingInitStr3=mdmCcCallingInitStr3, mdmLiLeasedLine=mdmLiLeasedLine, mdmDiBusyClock=mdmDiBusyClock, mdmStsTable=mdmStsTable, mdmDiLineFeedChar=mdmDiLineFeedChar, mdmEcIndex=mdmEcIndex, mdmLiIndex=mdmLiIndex, mdmCcQuietResultCodes=mdmCcQuietResultCodes, mdmCcInactivityTimer=mdmCcInactivityTimer, mdmDiIndex=mdmDiIndex, mdmCdMgtStationId=mdmCdMgtStationId, mdmArBlersAtThresh=mdmArBlersAtThresh, mdmLiLeasedLineRestDelay=mdmLiLeasedLineRestDelay, mdmEc=mdmEc, mdmIDDataPumpSwRev=mdmIDDataPumpSwRev, mdmCcT1DialToneType=mdmCcT1DialToneType, mdmLiRemPassword0=mdmLiRemPassword0, mdmCsFinalRxLinkRate=mdmCsFinalRxLinkRate, mdmArTimer4=mdmArTimer4, mdmCcCallingInitStr4=mdmCcCallingInitStr4, mdmCsEqualizationType=mdmCsEqualizationType, mdmDiTable=mdmDiTable, mdmCsQPacketSizeCurr=mdmCsQPacketSizeCurr, mdmTeInConnTerminated=mdmTeInConnTerminated, mdmDiCdOverride=mdmDiCdOverride, mdmCsTrainingInfo=mdmCsTrainingInfo, mdmTeOutConnTerminated=mdmTeOutConnTerminated, mdmCcEntry=mdmCcEntry, mdmCcBillingDelayPeriod=mdmCcBillingDelayPeriod, mdmCdResult=mdmCdResult, mdmCeDceTxLev=mdmCeDceTxLev, mdmCsOctetsReceived=mdmCsOctetsReceived, mdmCsCallRefNum=mdmCsCallRefNum, mdmDiBreakHandling=mdmDiBreakHandling, mdmDiTransmitFlowCntl=mdmDiTransmitFlowCntl, mdmLsLocAccPasswdEnable=mdmLsLocAccPasswdEnable, mdmTeResetByDTE=mdmTeResetByDTE, mdmCcPhoneString2=mdmCcPhoneString2, mdmTfTxAmpl=mdmTfTxAmpl, mdmCeMnpxDetPhEna=mdmCeMnpxDetPhEna, mdmCcIndex=mdmCcIndex, mdmDiEiaLineStatus=mdmDiEiaLineStatus, mdmEvOutTotalBytesRx=mdmEvOutTotalBytesRx, mdmEvDtrTrues=mdmEvDtrTrues, mdmScHighSpeed=mdmScHighSpeed, mdmDiHardwareRxFlowCntl=mdmDiHardwareRxFlowCntl, mdmTf1004NearFarLvl=mdmTf1004NearFarLvl, mdmLiDialPause=mdmLiDialPause, mdmArNoLoopCurrent=mdmArNoLoopCurrent, mdmTf0dB1004FarNearLvl=mdmTf0dB1004FarNearLvl, mdmTfCmsgFarNearSts=mdmTfCmsgFarNearSts, mdmCcMnp10=mdmCcMnp10, mdmCcEscCodeRsp=mdmCcEscCodeRsp, mdmDiSrc=mdmDiSrc, mdmCsPriCardSpanLine=mdmCsPriCardSpanLine, mdmCdReqId=mdmCdReqId, mdmTfTable=mdmTfTable, mdmScPiafsV42bis=mdmScPiafsV42bis, mdmCsTable=mdmCsTable, mdmTeConnLimitExpired=mdmTeConnLimitExpired, mdmEvBlers=mdmEvBlers, mdmEvOutConnectEstabs=mdmEvOutConnectEstabs, mdmCsQShapingRx=mdmCsQShapingRx, mdmArDialBackRestModem=mdmArDialBackRestModem, mdmArAttmpLoginByBlistUsr=mdmArAttmpLoginByBlistUsr, mdmCsSecurityUserName=mdmCsSecurityUserName, mdmTf0dB1004NearFarSts=mdmTf0dB1004NearFarSts, mdmTeEntry=mdmTeEntry, mdmScV90Digital=mdmScV90Digital, mdmDiDsrPulseTime=mdmDiDsrPulseTime, mdmCsQTrellisRx=mdmCsQTrellisRx, mdmID=mdmID, mdmCc=mdmCc, mdmEvWatchdogTimouts=mdmEvWatchdogTimouts, mdmLiGuardTone=mdmLiGuardTone, mdmLiRemAccessLimit=mdmLiRemAccessLimit, mdmTfRspndrTable=mdmTfRspndrTable, mdmTfToneEntry=mdmTfToneEntry, mdmCcV32ToneDuration=mdmCcV32ToneDuration, mdmStsIndex=mdmStsIndex, mdmEtIndex=mdmEtIndex, mdmCsQPreemphTx=mdmCsQPreemphTx, mdmTe=mdmTe, mdmCsLineReversalQty=mdmCsLineReversalQty, mdmLiPulseMakeBreak=mdmLiPulseMakeBreak, mdmTeOutConnAttemptFail=mdmTeOutConnAttemptFail, mdmCsRxMinSpeed=mdmCsRxMinSpeed, mdmEt=mdmEt, mdmMa=mdmMa, mdmCsQCarrierOffset=mdmCsQCarrierOffset, mdmScV90AllDigital=mdmScV90AllDigital, mdmCsRings=mdmCsRings, mdmEcMnpUnusual=mdmEcMnpUnusual, mdmArDteXmitIdle=mdmArDteXmitIdle, mdmScVFCSymRate2743=mdmScVFCSymRate2743, mdmCsQSNRLevelHigh=mdmCsQSNRLevelHigh, mdmCcOffHookRestrict=mdmCcOffHookRestrict, mdmIDTable=mdmIDTable, mdmDiDelAsBackspace=mdmDiDelAsBackspace, mdmDiSerialFormat=mdmDiSerialFormat, mdmCeLinkSpeed=mdmCeLinkSpeed, mdmTfRxFreq=mdmTfRxFreq, mdmScV34pModeEnable=mdmScV34pModeEnable, mdmCcV21V23FallBackTimer=mdmCcV21V23FallBackTimer, mdmArEntry=mdmArEntry, mdmCsSyncAsyncModeUsed=mdmCsSyncAsyncModeUsed, mdmSc300=mdmSc300, mdmCcResponseMode=mdmCcResponseMode, mdmTf404NearFarLvl=mdmTf404NearFarLvl, mdmStsPbClock=mdmStsPbClock, mdmCsQPacketSizeHigh=mdmCsQPacketSizeHigh, mdmCeMnpxDis=mdmCeMnpxDis, mdmLiTable=mdmLiTable, mdmTeOutConnEstablished=mdmTeOutConnEstablished, mdmDiBreakLen=mdmDiBreakLen, mdmCsCallDuration=mdmCsCallDuration, mdmTf0dB1004NearFarLvl=mdmTf0dB1004NearFarLvl, mdmScHstMod=mdmScHstMod, mdmTePbLost=mdmTePbLost, mdmCsOriginateAnswer=mdmCsOriginateAnswer, mdmCdIndex=mdmCdIndex, nas=nas, mdmCcT1DialInAniDig=mdmCcT1DialInAniDig, mdmCsUpshiftQty=mdmCsUpshiftQty, mdmEvOutConnectTime=mdmEvOutConnectTime, mdmCcResultCodeOptions=mdmCcResultCodeOptions, mdmTf2804FarNearSts=mdmTf2804FarNearSts, mdmArMdmRingNoAnswer=mdmArMdmRingNoAnswer, mdmCcNoPbNoConnEna=mdmCcNoPbNoConnEna, mdmScVFCModeEnable=mdmScVFCModeEnable, mdmTfToneTable=mdmTfToneTable, mdmScIndex=mdmScIndex, mdmEvTable=mdmEvTable, mdmLs=mdmLs, mdmEvInConnectTime=mdmEvInConnectTime, mdmCcT1CallInitStrUse=mdmCcT1CallInitStrUse, mdmLiToneDialTiming=mdmLiToneDialTiming, mdmTfCnotchNearFarSts=mdmTfCnotchNearFarSts, mdmCsTxMaxSpeed=mdmCsTxMaxSpeed, mdmArLoginAttemptsExceed=mdmArLoginAttemptsExceed, mdmScVFCShaping=mdmScVFCShaping, mdmScTxPwrLvlApplied=mdmScTxPwrLvlApplied, mdmArMgtBusFailure=mdmArMgtBusFailure, mdmArConnectTimeExpire=mdmArConnectTimeExpire, mdmCcCallingInitStr2=mdmCcCallingInitStr2, mdmCsQNonLinCdRx=mdmCsQNonLinCdRx, mdmCsCallStartTime=mdmCsCallStartTime, mdmAutoResponse=mdmAutoResponse, mdmDiDteNvramLock=mdmDiDteNvramLock, mdmScLinkRateSelect=mdmScLinkRateSelect, mdmLsLocalAccessPasswd=mdmLsLocalAccessPasswd, mdmScNonArqBufSize=mdmScNonArqBufSize, mdmCeEntry=mdmCeEntry, mdmScVFC64S4DMapping=mdmScVFC64S4DMapping, mdmCdTable=mdmCdTable, mdmCcCallingInitStr1=mdmCcCallingInitStr1, mdmCcCarrierAccessCode2=mdmCcCarrierAccessCode2, mdmIDCountry=mdmIDCountry, mdmScVFCPreEmphasis=mdmScVFCPreEmphasis, mdmCsModulationType=mdmCsModulationType, mdmStsEntry=mdmStsEntry, mdmIDModel=mdmIDModel, mdmCeTable=mdmCeTable, mdmTfTestTime=mdmTfTestTime, mdmScVFCSymRate3200=mdmScVFCSymRate3200, mdmScLinkRateAmpU=mdmScLinkRateAmpU, mdmCeMnp10FallforDis=mdmCeMnp10FallforDis, mdmArOutgoConnectTerm=mdmArOutgoConnectTerm, mdmCsDigitalPadAttenuated=mdmCsDigitalPadAttenuated, mdmCcGhostPortLockEna=mdmCcGhostPortLockEna, mdmTeDialOutCallDur=mdmTeDialOutCallDur, mdmCsQPreemphRx=mdmCsQPreemphRx, mdmCsDisconnectReason=mdmCsDisconnectReason, mdmCsBlocksResent=mdmCsBlocksResent, mdmScBell208=mdmScBell208, mdmCsQRndTripDly=mdmCsQRndTripDly, mdmLiCarrierRecDelay=mdmLiCarrierRecDelay, mdmIDSupervisorDate=mdmIDSupervisorDate, mdmCsCharsReceived=mdmCsCharsReceived, mdmCcMnpWith1200=mdmCcMnpWith1200, mdmTfEntry=mdmTfEntry, mdmCsX2Status=mdmCsX2Status, mdmMaChannelConfig=mdmMaChannelConfig, mdmScVFCPreCoding=mdmScVFCPreCoding, mdmCsInitModulationType=mdmCsInitModulationType, mdmTf404NearFarSts=mdmTf404NearFarSts, mdmCcMgmtSysMsgDis=mdmCcMgmtSysMsgDis, mdmArTimer3=mdmArTimer3, mdmArDialInLoginFail=mdmArDialInLoginFail, mdmCsBlocksSent=mdmCsBlocksSent, mdmArNoDialTone=mdmArNoDialTone, mdmArDialOutLoginFail=mdmArDialOutLoginFail, mdmCcHdlcLicIe=mdmCcHdlcLicIe, mdmCsQTrellisTx=mdmCsQTrellisTx, mdmEtEntry=mdmEtEntry, mdmTfCmsgNearFarLvl=mdmTfCmsgNearFarLvl, mdmDiAtString=mdmDiAtString, mdmScPhExclusionDel=mdmScPhExclusionDel, mdmScNonMnpDataCapture=mdmScNonMnpDataCapture, mdmDiRemAccessMsg=mdmDiRemAccessMsg, mdmCsQSNRLevelCurr=mdmCsQSNRLevelCurr, mdmCsFinalTxLinkRate=mdmCsFinalTxLinkRate, mdmEvIndex=mdmEvIndex, mdmHsTable=mdmHsTable, mdmTfRspndrEntry=mdmTfRspndrEntry, mdmLiSrc=mdmLiSrc, mdmCsTxMinSpeed=mdmCsTxMinSpeed, mdmCeV42EtcCallToneDis=mdmCeV42EtcCallToneDis, mdmScX2HighPowerConst=mdmScX2HighPowerConst, mdmCsBChannelUsed=mdmCsBChannelUsed, mdmCsQSNRLevelLow=mdmCsQSNRLevelLow, mdmDcEntry=mdmDcEntry, mdmHsDialInEnable=mdmHsDialInEnable, mdmTf1004FarNearSts=mdmTf1004FarNearSts, mdmTeInConnAttemptFail=mdmTeInConnAttemptFail, mdmCsGainHitCount=mdmCsGainHitCount, mdmLiRemoteEscChar=mdmLiRemoteEscChar, mdmEcEntry=mdmEcEntry, mdmTf2804FarNearLvl=mdmTf2804FarNearLvl, mdmDc=mdmDc, mdmScHiSpeedModulation=mdmScHiSpeedModulation, mdmTeIndex=mdmTeIndex, mdmCs=mdmCs, mdmEvConnectAttemptFails=mdmEvConnectAttemptFails, mdmTfRspndrIndex=mdmTfRspndrIndex, mdmSCV8CallIndicator=mdmSCV8CallIndicator, mdmDiBackspaceChar=mdmDiBackspaceChar, mdmArIncomConnectEstab=mdmArIncomConnectEstab, mdmScX2Version2=mdmScX2Version2, mdmCcMnp10Ec=mdmCcMnp10Ec, mdmSc2400=mdmSc2400, mdmEvEntry=mdmEvEntry, mdmCeMnp10Dis=mdmCeMnp10Dis)
mibBuilder.exportSymbols("MDM-MIB", mdmTePbClockLossEvent=mdmTePbClockLossEvent, mdmEvInTotalBytesRx=mdmEvInTotalBytesRx, mdmArDteRingNoAnswer=mdmArDteRingNoAnswer, mdmArWatchdog=mdmArWatchdog, mdmDiLocalEscChar=mdmDiLocalEscChar, mdmDiDtrRecognitionTime=mdmDiDtrRecognitionTime, mdmScV21Mod=mdmScV21Mod, mdmTeTable=mdmTeTable, mdmIDHardwareSerNum=mdmIDHardwareSerNum, mdmCcEnableV120v42Bis=mdmCcEnableV120v42Bis, mdmTfTxFreq=mdmTfTxFreq, mdmEvOutTotalBytesTx=mdmEvOutTotalBytesTx, mdmHsDialOutEnable=mdmHsDialOutEnable, mdmTeBlerCountAtThresh=mdmTeBlerCountAtThresh, mdmCsQCellTxLevelLow=mdmCsQCellTxLevelLow, mdmCcAutoAnswer=mdmCcAutoAnswer, mdmCsCallType=mdmCsCallType, mdmArDialOutRestrNum=mdmArDialOutRestrNum, mdmScV32Mod=mdmScV32Mod, mdmEcTable=mdmEcTable, mdmCsInitialRxLinkRate=mdmCsInitialRxLinkRate, mdmScVFCSymRate2800=mdmScVFCSymRate2800, mdmCsQCarrFreqRx=mdmCsQCarrFreqRx, mdmCsQPrecodingRx=mdmCsQPrecodingRx, mdmEvNoTones=mdmEvNoTones, mdmEtDtrTrueThresh=mdmEtDtrTrueThresh, mdmCcT1CallSetupProc=mdmCcT1CallSetupProc, mdmCsTDMTimeSlot=mdmCsTDMTimeSlot, mdmTfCmsgFarNearLvl=mdmTfCmsgFarNearLvl, mdmEcV42MnpHandshake=mdmEcV42MnpHandshake, mdmCsInitialTxLinkRate=mdmCsInitialTxLinkRate, mdmDiDtrOverride=mdmDiDtrOverride, mdmCsEntry=mdmCsEntry, mdmEtFallbackThresh=mdmEtFallbackThresh, mdmDiRtsCtsDelay=mdmDiRtsCtsDelay, mdmCeDceStartRate=mdmCeDceStartRate, mdmCsQRxLevel=mdmCsQRxLevel, mdmCeV42DceTxDemDis=mdmCeV42DceTxDemDis, mdmScVFC32S2DMapping=mdmScVFC32S2DMapping, mdmCeMnp10FallbackDis=mdmCeMnp10FallbackDis, mdmTfCnotchFarNearSts=mdmTfCnotchFarNearSts, mdmEtTable=mdmEtTable, mdmCd=mdmCd, mdmCeV42EtcDis=mdmCeV42EtcDis, mdmHs=mdmHs, mdmCsQPacketSizeLow=mdmCsQPacketSizeLow, mdmTeDteRingNoAns=mdmTeDteRingNoAns, mdmCc2100AnswerTone=mdmCc2100AnswerTone, mdmEvOutConnectTerms=mdmEvOutConnectTerms, mdmCsQShapingTx=mdmCsQShapingTx, mdmMaIndex=mdmMaIndex, mdmCeShortFormRules=mdmCeShortFormRules, mdmLsAutoPassPasswd=mdmLsAutoPassPasswd, mdmCeDceBitraLim=mdmCeDceBitraLim, mdmCcMnpTimeout=mdmCcMnpTimeout, mdmCsConnectFailReason=mdmCsConnectFailReason, mdm=mdm, mdmCsQSymRateRx=mdmCsQSymRateRx, mdmArIncomConnectTerm=mdmArIncomConnectTerm, mdmLsFallbackPromptEnable=mdmLsFallbackPromptEnable, mdmDcIndex=mdmDcIndex, mdmCsRetrainsGranted=mdmCsRetrainsGranted, mdmCcPhoneString3=mdmCcPhoneString3, mdmCe=mdmCe, mdmDiDataModeEchoEna=mdmDiDataModeEchoEna, mdmDi=mdmDi, mdmDiDefaultDteDataRate=mdmDiDefaultDteDataRate, mdmEvOutConnAttemptFails=mdmEvOutConnAttemptFails, mdmTeConnAttemptFailure=mdmTeConnAttemptFailure, mdmCcTable=mdmCcTable, mdmSc1200=mdmSc1200, mdmCcAddnlAnswToneDur=mdmCcAddnlAnswToneDur, mdmScV34ModeEnable=mdmScV34ModeEnable, mdmCcDataOverVoice=mdmCcDataOverVoice, mdmLiAnswerTone=mdmLiAnswerTone, mdmArRspAttemptLimExceed=mdmArRspAttemptLimExceed, mdmLiTransmiter=mdmLiTransmiter, mdmTeNoLoopCurrent=mdmTeNoLoopCurrent, mdmTfDialInToneTest=mdmTfDialInToneTest, mdmDiResultCodePauseDis=mdmDiResultCodePauseDis, mdmArIndex=mdmArIndex, mdmScVFCTxLevelDeviation=mdmScVFCTxLevelDeviation, mdmDiXonChar=mdmDiXonChar, mdmCcAfaxMaxRateSrvOpt21=mdmCcAfaxMaxRateSrvOpt21, mdmDiDsrOverride=mdmDiDsrOverride, mdmTePbClockRestoreEvent=mdmTePbClockRestoreEvent, mdmTfATG=mdmTfATG, mdmCeComp=mdmCeComp, mdmIDIndex=mdmIDIndex, mdmTeDtrFalse=mdmTeDtrFalse, mdmLsTable=mdmLsTable, mdmLsAccountPasswd=mdmLsAccountPasswd, mdmDiV25DteDataRate=mdmDiV25DteDataRate, mdmTfRxAmpl=mdmTfRxAmpl, mdmDiEntry=mdmDiEntry, mdmCcAutoDialOnPwrUpEna=mdmCcAutoDialOnPwrUpEna, mdmEvInConnectTerms=mdmEvInConnectTerms, mdmCsFallbackEnabled=mdmCsFallbackEnabled, mdmEvInTotalBytesTx=mdmEvInTotalBytesTx, mdmTfSigNoiseNearFarSts=mdmTfSigNoiseNearFarSts, mdmDiXoffChar=mdmDiXoffChar, mdmScV32UnencodedMod=mdmScV32UnencodedMod, mdmIDSupervisorSwRev=mdmIDSupervisorSwRev, mdmScV32BisEnhance=mdmScV32BisEnhance, mdmEtBlerThresh=mdmEtBlerThresh, mdmCcErrorCntlMode=mdmCcErrorCntlMode, mdmEvResetByDtes=mdmEvResetByDtes, mdmCsOctetsSent=mdmCsOctetsSent, mdmHsDtrDsrDelay=mdmHsDtrDsrDelay, mdmCcWaitForCarrier=mdmCcWaitForCarrier, mdmCcIdleDiscPatt=mdmCcIdleDiscPatt, mdmEtDteIdleThresh=mdmEtDteIdleThresh, mdmScVFCSymRate3000=mdmScVFCSymRate3000, mdmArTable=mdmArTable, mdmCsQSNR=mdmCsQSNR, mdmCcDtmfTerminationTone=mdmCcDtmfTerminationTone, mdmCsLastCallingPartyNum=mdmCsLastCallingPartyNum, mdmArDialBackRestrNum=mdmArDialBackRestrNum, mdmCeDbNoEtcDis=mdmCeDbNoEtcDis, mdmCsCollectedDTMFDigits=mdmCsCollectedDTMFDigits, mdmMaEntry=mdmMaEntry, mdmCcMnpWith2400=mdmCcMnpWith2400, mdmArPacketBusActive=mdmArPacketBusActive, mdmScX2Symmetric=mdmScX2Symmetric, mdmLiEntry=mdmLiEntry, mdmDiCmdLocalEchoEna=mdmDiCmdLocalEchoEna, mdmLiTransmitLevel=mdmLiTransmitLevel, mdmCcArqResultCodeMode=mdmCcArqResultCodeMode, mdmCsLinkNakQty=mdmCsLinkNakQty, mdmCsQCellularProt=mdmCsQCellularProt, mdmLsSecurityEnable=mdmLsSecurityEnable, mdmCsQCarrFreqTx=mdmCsQCarrFreqTx, mdmTf404FarNearLvl=mdmTf404FarNearLvl, mdmCcT1DialInDnisDig=mdmCcT1DialInDnisDig, mdmArConnectAttemptFail=mdmArConnectAttemptFail, mdmTfSigNoiseFarNearSts=mdmTfSigNoiseFarNearSts, mdmIDHardwareRev=mdmIDHardwareRev, mdmArUserBlacklisted=mdmArUserBlacklisted, mdmScV32TerboModeEnable=mdmScV32TerboModeEnable, mdmCcDataFaxMode=mdmCcDataFaxMode, usr=usr, mdmCcArqBufWait=mdmCcArqBufWait, mdmLsDialBackEnable=mdmLsDialBackEnable, mdmTeInConnEstablished=mdmTeInConnEstablished, mdmCcCarrierAccessCode3=mdmCcCarrierAccessCode3, mdmCcPhoneString1=mdmCcPhoneString1, mdmDcDataCompression=mdmDcDataCompression, mdmCsCompressionType=mdmCsCompressionType, mdmArOutgoConnectEstab=mdmArOutgoConnectEstab, mdmTeNoDialTone=mdmTeNoDialTone, mdmCcDefltPRISlot=mdmCcDefltPRISlot, mdmDiInterbridgeEna=mdmDiInterbridgeEna, mdmCeIndex=mdmCeIndex, mdmCdCode=mdmCdCode, mdmEv=mdmEv, mdmDiSoftwareRxFlowCntl=mdmDiSoftwareRxFlowCntl, mdmCsQSymRateTx=mdmCsQSymRateTx, mdmTeDteXmitDataIdle=mdmTeDteXmitDataIdle, mdmTfTest=mdmTfTest, mdmCsErrorControlType=mdmCsErrorControlType, mdmMaTable=mdmMaTable, mdmCsQTxLevel=mdmCsQTxLevel, mdmCsQFarEcho=mdmCsQFarEcho, mdmEvMgmtBusFailures=mdmEvMgmtBusFailures, mdmEvInConnectEstabs=mdmEvInConnectEstabs, mdmTf404FarNearSts=mdmTf404FarNearSts, mdmScVFCNonLinearCoding=mdmScVFCNonLinearCoding, mdmCcT1CallInitStrBase=mdmCcT1CallInitStrBase, mdmLiDteRxDataDelay=mdmLiDteRxDataDelay, mdmDiSlot=mdmDiSlot, mdmEtDtrFalseThresh=mdmEtDtrFalseThresh, mdmLiCarrierLoss=mdmLiCarrierLoss, mdmLsTableEntry=mdmLsTableEntry, mdmCcPhoneString0=mdmCcPhoneString0, mdmArTimer1=mdmArTimer1, mdmCdEntry=mdmCdEntry, mdmTePbActive=mdmTePbActive, mdmCdParam=mdmCdParam, mdmTf1004NearFarSts=mdmTf1004NearFarSts, mdmScVFCSymRate2400=mdmScVFCSymRate2400, mdmScV90Analogue=mdmScV90Analogue, mdmCsQPrecodingTx=mdmCsQPrecodingTx, mdmEcMnp3Dis=mdmEcMnp3Dis, mdmScBackChanRate=mdmScBackChanRate, mdmEvDteIdleTimouts=mdmEvDteIdleTimouts, mdmScV23=mdmScV23, mdmCsBlerQty=mdmCsBlerQty, mdmCsQTimingOffset=mdmCsQTimingOffset, mdmScV32QuickRetrain=mdmScV32QuickRetrain, mdmTf2804NearFarLvl=mdmTf2804NearFarLvl, mdmDiEscCodeGuardTime=mdmDiEscCodeGuardTime, mdmCcAtRecognition=mdmCcAtRecognition, mdmTfCnotchFarNearLvl=mdmTfCnotchFarNearLvl, mdmCsBlocksReceived=mdmCsBlocksReceived, mdmMaChangeIndicator=mdmMaChangeIndicator, mdmEvFallBacks=mdmEvFallBacks, mdmCcAtzPbHandling=mdmCcAtzPbHandling, mdmArDtrTrue=mdmArDtrTrue, mdmTfV54=mdmTfV54, mdmCdForce=mdmCdForce, mdmScVFC8S2DMapping=mdmScVFC8S2DMapping, mdmCsLastNumberDialedIn=mdmCsLastNumberDialedIn, mdmScSyncTimingSource=mdmScSyncTimingSource, mdmScV8=mdmScV8, mdmCcAutoDialOnDtrEna=mdmCcAutoDialOnDtrEna, mdmCcDialDelay=mdmCcDialDelay, mdmIDIoProcessorSwRev=mdmIDIoProcessorSwRev, mdmHsIndex=mdmHsIndex, mdmScPiafs=mdmScPiafs, mdmTf2804NearFarSts=mdmTf2804NearFarSts, mdmCsQCellTxLevelHigh=mdmCsQCellTxLevelHigh, mdmEvDtrFalses=mdmEvDtrFalses, mdmSts=mdmSts, mdmTeDtrTrue=mdmTeDtrTrue, mdmScVFC16S4DMapping=mdmScVFC16S4DMapping, mdmScVFCSymRate3429=mdmScVFCSymRate3429, mdmLiDialMode=mdmLiDialMode, mdmCcAfaxMaxRateSrvOpt20=mdmCcAfaxMaxRateSrvOpt20, mdmScTxPwrLvl=mdmScTxPwrLvl, mdmScFallback=mdmScFallback, mdmCsFallbackQty=mdmCsFallbackQty, mdmDiCarriageRetChar=mdmDiCarriageRetChar, mdmScTable=mdmScTable, mdmDiHiSpeedResCodeEna=mdmDiHiSpeedResCodeEna, mdmArResetByDte=mdmArResetByDte, mdmCdFunction=mdmCdFunction, mdmLsIndex=mdmLsIndex, mdmLi=mdmLi, mdmCsQCellTxLevelCurr=mdmCsQCellTxLevelCurr, mdmCsCallEndTime=mdmCsCallEndTime, mdmTeDialInCallDur=mdmTeDialInCallDur, mdmCsRetrainsRequested=mdmCsRetrainsRequested, mdmTfToneIndex=mdmTfToneIndex, mdmCsLevelProbeData=mdmCsLevelProbeData, mdmScV32Bis=mdmScV32Bis, mdmTe105ResponderTest=mdmTe105ResponderTest, mdmCsRxMaxSpeed=mdmCsRxMaxSpeed, mdmCcCarrierAccessCode1=mdmCcCarrierAccessCode1, mdmTf1004FarNearLvl=mdmTf1004FarNearLvl, mdmCsIndex=mdmCsIndex, mdmScSelectiveReject=mdmScSelectiveReject, mdmScLowerSpeedMax=mdmScLowerSpeedMax, mdmCsCharsLost=mdmCsCharsLost, mdmCsCharsSent=mdmCsCharsSent, mdmHsEntry=mdmHsEntry, mdmCsX2signature=mdmCsX2signature, mdmEvConnectTimouts=mdmEvConnectTimouts, mdmEvInConnAttemptFails=mdmEvInConnAttemptFails, mdmDiResetOnDtrEna=mdmDiResetOnDtrEna, mdmTfIndex=mdmTfIndex, mdmScV34Fallback=mdmScV34Fallback, mdmCcAnswerInOrigMode=mdmCcAnswerInOrigMode, mdmEtConnTimeLimit=mdmEtConnTimeLimit, mdmScLowerSpeedMin=mdmScLowerSpeedMin)
mibBuilder.exportSymbols("MDM-MIB", mdmCcIntBlackListDis=mdmCcIntBlackListDis, mdmCsQNearEcho=mdmCsQNearEcho, mdmCsLinkTimeoutQty=mdmCsLinkTimeoutQty, mdmTfV54Errors=mdmTfV54Errors, mdmtTfSigNoiseFarNearLvl=mdmtTfSigNoiseFarNearLvl, mdmLiRemoteEscGuardTime=mdmLiRemoteEscGuardTime, mdmCcExtDTMFToneSupport=mdmCcExtDTMFToneSupport, mdmHsDtrDcdDelay=mdmHsDtrDcdDelay, mdmTfToneTestCallRef=mdmTfToneTestCallRef, mdmtTfSigNoiseNearFarLvl=mdmtTfSigNoiseNearFarLvl, mdmTfCmsgNearFarSts=mdmTfCmsgNearFarSts, mdmLiRemPassword1=mdmLiRemPassword1, mdmCsQCoding=mdmCsQCoding, mdmArPacketBusLost=mdmArPacketBusLost, mdmCcT1KpStMfTones=mdmCcT1KpStMfTones, mdmScX2Server=mdmScX2Server, mdmTf0dB1004FarNearSts=mdmTf0dB1004FarNearSts, mdmDiDteDataRateMode=mdmDiDteDataRateMode, mdmCsFreqProbeData=mdmCsFreqProbeData, mdmSc=mdmSc, mdmTf=mdmTf, mdmLsForcePromptEnable=mdmLsForcePromptEnable, mdmCeOperDis=mdmCeOperDis)
