#
# PySNMP MIB module ARTEM-COMPOINT-BLD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ARTEM-COMPOINT-BLD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:25:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, ObjectIdentity, NotificationType, Counter32, MibIdentifier, Gauge32, Counter64, ModuleIdentity, IpAddress, Bits, iso, Unsigned32, Integer32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "NotificationType", "Counter32", "MibIdentifier", "Gauge32", "Counter64", "ModuleIdentity", "IpAddress", "Bits", "iso", "Unsigned32", "Integer32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, RowStatus, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "MacAddress", "TruthValue")
artem = ModuleIdentity((1, 3, 6, 1, 4, 1, 4280))
artem.setRevisions(('2005-06-10 12:17', '2005-05-24 13:24', '2005-04-29 12:05',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: artem.setRevisionsDescriptions(('Updated Revision and last-updated.', 'Removed artemBLDIfTableIndex and artemBLDIfIndex from artemBLDIfTable. Index is now ifIndex.', 'Initial version.',))
if mibBuilder.loadTexts: artem.setLastUpdated('200506101217Z')
if mibBuilder.loadTexts: artem.setOrganization('Funkwerk Enterprise Communications.')
if mibBuilder.loadTexts: artem.setContactInfo('juergen.lachmann@funkwerk-ec.com.')
if mibBuilder.loadTexts: artem.setDescription('Funkwerk Enterprise Communications MIB file that provides additional attributes not covered by standard MIBs for Broken Link Detection in artem products.')
artemBLD = ObjectIdentity((1, 3, 6, 1, 4, 1, 4280, 6))
if mibBuilder.loadTexts: artemBLD.setStatus('current')
if mibBuilder.loadTexts: artemBLD.setDescription('Definitions and attributes for Broken Link Detection.')
artemBLDAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 4280, 6, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemBLDAdminStatus.setStatus('current')
if mibBuilder.loadTexts: artemBLDAdminStatus.setDescription('This attribute selects whether periodic BLD link checking is administratively enabled.')
artemBLDLinkState = MibScalar((1, 3, 6, 1, 4, 1, 4280, 6, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemBLDLinkState.setStatus('current')
if mibBuilder.loadTexts: artemBLDLinkState.setDescription('This attribute indicates whether the IP target monitored by BLD is currently reachable.')
artemBLDTargetAddress = MibScalar((1, 3, 6, 1, 4, 1, 4280, 6, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemBLDTargetAddress.setStatus('current')
if mibBuilder.loadTexts: artemBLDTargetAddress.setDescription('This attribute holds the IP address of the connection target which is periodically checked by BLD.')
artemBLDTargetIf = MibScalar((1, 3, 6, 1, 4, 1, 4280, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: artemBLDTargetIf.setStatus('current')
if mibBuilder.loadTexts: artemBLDTargetIf.setDescription('This attribute hold the ifIndex of the interface that received the most recent reply from the BLD target. The value 0 indicates that no reply has been received.')
artemBLDCheckInterval = MibScalar((1, 3, 6, 1, 4, 1, 4280, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemBLDCheckInterval.setStatus('current')
if mibBuilder.loadTexts: artemBLDCheckInterval.setDescription('This is the interval between successive checks whether the BLD target is reachable.')
artemBLDTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4280, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemBLDTimeout.setStatus('current')
if mibBuilder.loadTexts: artemBLDTimeout.setDescription('This attribute defines the timeout for replies from the BLD target.')
artemBLDRetries = MibScalar((1, 3, 6, 1, 4, 1, 4280, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: artemBLDRetries.setStatus('current')
if mibBuilder.loadTexts: artemBLDRetries.setDescription('This attribute defines the number of timer BLD retries to reach the target after an initial failed attempt until the connection is considered broken.')
artemBLDIfTable = MibTable((1, 3, 6, 1, 4, 1, 4280, 6, 8), )
if mibBuilder.loadTexts: artemBLDIfTable.setStatus('current')
if mibBuilder.loadTexts: artemBLDIfTable.setDescription('This is table of all interfaces which will be modified when BLD detects that its target is unreachable. AP type interfaces are temporarily closed and will not allow any client to associate. Bridge type interfaces are unlocked if their operational status is disabled(2).')
artemBLDIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4280, 6, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: artemBLDIfEntry.setStatus('current')
if mibBuilder.loadTexts: artemBLDIfEntry.setDescription('An entry in artemBLDIfTable.')
artemBLDIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4280, 6, 8, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: artemBLDIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: artemBLDIfRowStatus.setDescription('Auxiliary variable for creation of new object instances and/or the deletion of existing object instances.')
artemBLDNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 4280, 6, 9))
artemBLDConnection = NotificationType((1, 3, 6, 1, 4, 1, 4280, 6, 9, 1)).setObjects(("IF-MIB", "ifIndex"), ("ARTEM-COMPOINT-BLD-MIB", "artemBLDLinkState"))
if mibBuilder.loadTexts: artemBLDConnection.setStatus('current')
if mibBuilder.loadTexts: artemBLDConnection.setDescription('This notification is triggered for every interface in artemBLDIfTable whenever BLD detects a change in target link state.')
artemBLDGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4280, 6, 10)).setObjects(("ARTEM-COMPOINT-BLD-MIB", "artemBLDAdminStatus"), ("ARTEM-COMPOINT-BLD-MIB", "artemBLDLinkState"), ("ARTEM-COMPOINT-BLD-MIB", "artemBLDTargetAddress"), ("ARTEM-COMPOINT-BLD-MIB", "artemBLDTargetIf"), ("ARTEM-COMPOINT-BLD-MIB", "artemBLDCheckInterval"), ("ARTEM-COMPOINT-BLD-MIB", "artemBLDTimeout"), ("ARTEM-COMPOINT-BLD-MIB", "artemBLDRetries"), ("ARTEM-COMPOINT-BLD-MIB", "artemBLDIfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    artemBLDGroup = artemBLDGroup.setStatus('current')
if mibBuilder.loadTexts: artemBLDGroup.setDescription('Attributes for artem Broken Link Detection (BLD).')
artemBLDNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4280, 6, 11)).setObjects(("ARTEM-COMPOINT-BLD-MIB", "artemBLDConnection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    artemBLDNotificationGroup = artemBLDNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: artemBLDNotificationGroup.setDescription('Notifications for BLD events')
mibBuilder.exportSymbols("ARTEM-COMPOINT-BLD-MIB", artemBLDCheckInterval=artemBLDCheckInterval, artemBLDGroup=artemBLDGroup, artemBLDIfRowStatus=artemBLDIfRowStatus, artemBLDLinkState=artemBLDLinkState, artem=artem, artemBLDTargetAddress=artemBLDTargetAddress, artemBLD=artemBLD, artemBLDIfEntry=artemBLDIfEntry, artemBLDNotificationGroup=artemBLDNotificationGroup, artemBLDIfTable=artemBLDIfTable, artemBLDAdminStatus=artemBLDAdminStatus, artemBLDNotification=artemBLDNotification, artemBLDTargetIf=artemBLDTargetIf, artemBLDTimeout=artemBLDTimeout, PYSNMP_MODULE_ID=artem, artemBLDConnection=artemBLDConnection, artemBLDRetries=artemBLDRetries)
