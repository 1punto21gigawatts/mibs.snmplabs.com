#
# PySNMP MIB module ZYXEL-L2PT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-L2PT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:50:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Unsigned32, ModuleIdentity, iso, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, TimeTicks, Counter64, ObjectIdentity, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "ModuleIdentity", "iso", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "TimeTicks", "Counter64", "ObjectIdentity", "NotificationType", "Bits")
MacAddress, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "DisplayString", "TextualConvention")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelL2pt = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 39))
if mibBuilder.loadTexts: zyxelL2pt.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelL2pt.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelL2pt.setContactInfo('')
if mibBuilder.loadTexts: zyxelL2pt.setDescription('The subtree for Layer 2 Protocol Tunneling (L2PT)')
zyxelL2ptSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 39, 1))
zyL2ptState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 39, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyL2ptState.setStatus('current')
if mibBuilder.loadTexts: zyL2ptState.setDescription("Enable/disable L2PT (Layer 2 protocol tunneling) feature on the switch. L2PT is used on the service provider's edge devices. L2PT allows edge switches to tunnel layer 2 STP (Spanning Tree Protocol), CDP (Cisco Discovery Protocol) and VTP (VLAN Trunking Protocol) packets between customer switches connected through the service provider's network. The edge switch encapsulates layer 2 protocol packets with a specific MAC address before sending them across the service provider's network to other edge switches.")
zyL2ptMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 39, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyL2ptMacAddress.setStatus('current')
if mibBuilder.loadTexts: zyL2ptMacAddress.setDescription('Specify an MAC address with which the switch uses to encapsulate the layer 2 protocol packets by replacing the destination MAC address in the packets.')
zyxelL2ptTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 39, 1, 3), )
if mibBuilder.loadTexts: zyxelL2ptTable.setStatus('current')
if mibBuilder.loadTexts: zyxelL2ptTable.setDescription('The table contains L2PT configuration.')
zyxelL2ptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 39, 1, 3, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelL2ptEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelL2ptEntry.setDescription('An entry contains L2PT configuration.')
zyL2ptProtocolGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 39, 1, 3, 1, 1), Bits().clone(namedValues=NamedValues(("cdp", 0), ("stp", 1), ("vtp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyL2ptProtocolGroup.setStatus('current')
if mibBuilder.loadTexts: zyL2ptProtocolGroup.setDescription("Enable/disable L2PT protocols on the port. Select this option to have the Switch tunnel CDP (Cisco Discovery Protocol) packets so that other Cisco devices can be discovered through the service provider's network. Select this option to have the Switch tunnel STP (Spanning Tree Protocol) packets so that STP can run properly across the service provider's network and spanning trees can be set up based on bridge information from all (local and remote) networks. Select this option to have the Switch tunnel VTP (VLAN Trunking Protocol) packets so that all customer switches can use consistent VLAN configuration through the service provider's network.")
zyL2ptPointToPointProtocolGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 39, 1, 3, 1, 2), Bits().clone(namedValues=NamedValues(("pagp", 0), ("lacp", 1), ("udld", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyL2ptPointToPointProtocolGroup.setStatus('current')
if mibBuilder.loadTexts: zyL2ptPointToPointProtocolGroup.setDescription("Enable/Disable L2PT point-to-point protocols on the port. The switch supports PAgP (Port Aggregation Protocol), LACP (Link Aggregation Control Protocol) and UDLD (UniDirectional Link Detection) tunneling for a point-to-point topology. Both PAgP and UDLD are Cisco's proprietary data link layer protocols. PAgP is similar to LACP and used to set up a logical aggregation of Ethernet ports automatically. UDLD is to determine the link's physical status and detect a unidirectional link.")
zyL2ptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 39, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("access", 1), ("tunnel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyL2ptMode.setStatus('current')
if mibBuilder.loadTexts: zyL2ptMode.setDescription("Select access to have the switch encapsulate the incoming layer 2 protocol packets and forward them to the tunnel port(s). Select access for ingress ports at the edge of the service provider's network. Select Tunnel for egress ports at the edge of the service provider's network.")
mibBuilder.exportSymbols("ZYXEL-L2PT-MIB", zyL2ptProtocolGroup=zyL2ptProtocolGroup, zyxelL2ptEntry=zyxelL2ptEntry, zyxelL2ptTable=zyxelL2ptTable, zyL2ptMacAddress=zyL2ptMacAddress, zyL2ptPointToPointProtocolGroup=zyL2ptPointToPointProtocolGroup, zyL2ptState=zyL2ptState, PYSNMP_MODULE_ID=zyxelL2pt, zyxelL2pt=zyxelL2pt, zyxelL2ptSetup=zyxelL2ptSetup, zyL2ptMode=zyL2ptMode)
