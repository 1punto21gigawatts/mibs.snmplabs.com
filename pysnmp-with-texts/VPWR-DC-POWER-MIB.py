#
# PySNMP MIB module VPWR-DC-POWER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VPWR-DC-POWER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:35:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
NotificationType, TimeTicks, Gauge32, enterprises, ObjectIdentity, Integer32, Bits, Counter64, Unsigned32, MibIdentifier, ModuleIdentity, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "Gauge32", "enterprises", "ObjectIdentity", "Integer32", "Bits", "Counter64", "Unsigned32", "MibIdentifier", "ModuleIdentity", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
TimeInterval, TestAndIncr, TimeStamp, DisplayString, AutonomousType, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "TestAndIncr", "TimeStamp", "DisplayString", "AutonomousType", "TextualConvention")
valereDcPowerMgt = ModuleIdentity((1, 3, 6, 1, 4, 1, 13858))
if mibBuilder.loadTexts: valereDcPowerMgt.setLastUpdated('0302080000Z')
if mibBuilder.loadTexts: valereDcPowerMgt.setOrganization('Valere Power Inc.')
if mibBuilder.loadTexts: valereDcPowerMgt.setContactInfo('Author: Haluk Aral Contact: Customer Support Group Postal: 661 N. Plano Road, Suite 300 Richardson, TX-75081 Web: http://www.valerepower.com email: tech.support@valerepower.com Phone 866-240-6614 ')
if mibBuilder.loadTexts: valereDcPowerMgt.setDescription(' MIB Version 2.0 History Apr 26, 2007 Added SysAlarm Config Table Version 2.0 Feb 08, 2003 Changed vpwrTrapDestinationTable to vpwrTrapTable Corrected entry for vpwrTrapTable to be VpwrTrapTableEntry This fixes errors generated by MG-SOFT mib compiler.Ver1.0 Oct 30, 2002 initial release - version 0.4 ')
class PositiveInteger(TextualConvention, Integer32):
    description = 'This data type is a non-zero and non-negative value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class NonNegativeInteger(TextualConvention, Integer32):
    description = 'This data type is a non-negative value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

vpwrDcPowerProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 1))
vpwrDcPowerSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2))
vpwrDcPowerRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 3))
vpwrDcPowerLvd = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 4))
vpwrDcPowerTest = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 5))
vpwrDcPowerModuleIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 6))
vpwrDcPowerBatteryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 7))
vpwrDcPowerAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 8))
vpwrDcPowerSnmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 9))
vpwrDcPowerTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 10))
vpwrDcPowerTrapsMsgString = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 11))
vpwrSystemIdentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2, 1))
vpwrSystemConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2, 2))
vpwrSystemParameterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2, 3))
vpwrLvdConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 4, 1))
vpwrLvdAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 4, 2))
vpwrLvdTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 4, 3))
vpwrRectifierConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 3, 1))
vpwrRectifierAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 3, 2))
vpwrRectifierTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 3, 3))
vpwrBatteryTempGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 7, 1))
vpwrIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrIdentManufacturer.setStatus('current')
if mibBuilder.loadTexts: vpwrIdentManufacturer.setDescription('The name of the DC Power manufacturer.')
vpwrIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrIdentModel.setStatus('current')
if mibBuilder.loadTexts: vpwrIdentModel.setDescription('The DC Power Model designation.')
vpwrIdentControllerVersion = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrIdentControllerVersion.setStatus('current')
if mibBuilder.loadTexts: vpwrIdentControllerVersion.setDescription('The hardware/firmware version(s). This variable may or may not have the same value as vpwrIdentAgentSoftwareVersion.')
vpwrIdentAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrIdentAgentSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: vpwrIdentAgentSoftwareVersion.setDescription('The SNMP agent software version. This variable may or may not have the same value as vpwrIdentControllerFirmwareVersion.')
vpwrIdentName = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrIdentName.setStatus('current')
if mibBuilder.loadTexts: vpwrIdentName.setDescription('A string identifying the system. This object should be set by the administrator.')
vpwrSystemIdentTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6), )
if mibBuilder.loadTexts: vpwrSystemIdentTable.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemIdentTable.setDescription(' This table describes shelves and modules that make up the sysetm. ')
vpwrSystemIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1), ).setIndexNames((0, "VPWR-DC-POWER-MIB", "vpwrShelfIndex"), (0, "VPWR-DC-POWER-MIB", "vpwrModuleIndex"))
if mibBuilder.loadTexts: vpwrSystemIdentEntry.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemIdentEntry.setDescription('An entry containing information applicable to a particular module making up the system.')
vpwrShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrShelfIndex.setStatus('current')
if mibBuilder.loadTexts: vpwrShelfIndex.setDescription('Identifies shelf number that this module belongs to. The possible values are 1 through 16 limited by vpwrSystemShelfCapacity. The shelf that contains the controller is identified as shelf number 1. ')
vpwrModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 2), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleIndex.setStatus('current')
if mibBuilder.loadTexts: vpwrModuleIndex.setDescription('This object identifies the module by its position in the shelf. Module numbering starts from the controller/expansion controller end of the shelf. So, the module in the first slot has an index of 1, the next module is 2 and so on. Under the current scheme - Rectifier module can have a number between 1 and 5. - LVD module starts with an index of 6. ')
vpwrModuleOID = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleOID.setStatus('current')
if mibBuilder.loadTexts: vpwrModuleOID.setDescription('It indicates the type of the module by specifiying its OID')
vpwrModuleParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleParameter.setStatus('current')
if mibBuilder.loadTexts: vpwrModuleParameter.setDescription('The meaning of this object depends upon the module type which is indicated by vpwrModuleOID as follows - Current for Rectifier module. - Not Applicable for LVD module ')
vpwrModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("moduleStatusOK", 0), ("moduleStatusAlarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleOperStatus.setStatus('current')
if mibBuilder.loadTexts: vpwrModuleOperStatus.setDescription('This object indicates current over all status of the module.')
vpwrModuleCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleCapacity.setStatus('current')
if mibBuilder.loadTexts: vpwrModuleCapacity.setDescription('The meaning of this object depends upon the module type which is indicated by vpwrModuleOID as follows - Capacity for Rectifier module. - Not Applicable for LVD module ')
vpwrSystemTempCompensation = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tempCompDisabled", 0), ("tempCompEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemTempCompensation.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemTempCompensation.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemTempCompensation.setDescription(' This parameter enables/disables temperature compensation. ')
vpwrSystemTempCompStartTemperature = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 60))).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemTempCompStartTemperature.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemTempCompStartTemperature.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemTempCompStartTemperature.setDescription(' The temperature at which temperature compensation becomes active. ')
vpwrSystemTempCompStopVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 3), Integer32()).setUnits(' vpwrSystemTempCompStopVoltage *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemTempCompStopVoltage.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemTempCompStopVoltage.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemTempCompStopVoltage.setDescription(' When temperature compensation is active, vpwrSystemTempCompStopVoltage is the limit to which float voltage will be reduced. For example, to set this voltage to 51.75 volts enter a value of 5175. ')
vpwrSystemTempCompensationSlope = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setUnits(' milli-Volts per degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemTempCompensationSlope.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemTempCompensationSlope.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemTempCompensationSlope.setDescription(' The rate at which float voltage is changed, within the specified limits, when temperature compensation is active. ')
vpwrSystemThermalSenseType = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("external", 0), ("internal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemThermalSenseType.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemThermalSenseType.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemThermalSenseType.setDescription(' This parameter selects the temperature sensing point for temperature compensation (in)activation. ')
vpwrSystemHVAlarmSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 6), Integer32()).setUnits(' vpwrSystemHVAlarmSetpoint *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemHVAlarmSetpoint.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemHVAlarmSetpoint.setDescription('System High voltage alarm voltage setting. ')
vpwrSystemBDAlarmSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 7), Integer32()).setUnits(' vpwrSystemBDAlarmSetpoint *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemBDAlarmSetpoint.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemBDAlarmSetpoint.setDescription('System Battery Discharge voltage setting.')
vpwrSystemInternalTempLThreshold = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 8), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemInternalTempLThreshold.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemInternalTempLThreshold.setDescription('Temperature value at which temperature compensation inactive (clear) trap would be sent if temperature compensation was active when this value is reached. ')
vpwrSystemInternalTempUThreshold = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 9), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemInternalTempUThreshold.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemInternalTempUThreshold.setDescription('Temperature value at which temperature compensation active (set) trap would be sent. ')
vpwrSystemShelfCapacity = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemShelfCapacity.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemShelfCapacity.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemShelfCapacity.setDescription(' It describes the maximum number of shelves that can/are controlled by the controller. Each shelf is uniquely numbered in the range from 1 to vpwrShelfCapacity. ')
vpwrSystemVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 2), Integer32()).setUnits(' vpwrSystemVoltage *.01 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemVoltage.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemVoltage.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemVoltage.setDescription(' The current system voltage. ')
vpwrSystemCurrent = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 3), Integer32()).setUnits(' Amperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemCurrent.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemCurrent.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemCurrent.setDescription(' The current system current. ')
vpwrSystemControllerState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("systemControllerStateUnknown", 0), ("systemControllerStateNormal", 1), ("systemControllerStateChange", 2), ("systemControllerStateAlarm", 3), ("systemControllerStateMenu", 4), ("systemControllerStateIrActive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemControllerState.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemControllerState.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemControllerState.setDescription(' Current System state as shown on the enhanced display. ')
vpwrSystemInternalTemperature = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 5), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemInternalTemperature.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemInternalTemperature.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemInternalTemperature.setDescription(' The current controller internal temperature. ')
vpwrSystemTempCompensationState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("systemTempCompInactive", 0), ("systemTempCompActive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemTempCompensationState.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemTempCompensationState.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemTempCompensationState.setDescription(' Active or Inactive. Applicable only if temperature compensation is enabled. This means that the controller is temperature compensating the float voltage. ')
vpwrSystemType = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sysType48V", 0), ("sysType24V", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemType.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemType.setDescription('This parameter describes the type of the system being managed. This object is set by Valere Power Inc. ')
vpwrLvdWarningSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 4, 1, 1), Integer32()).setUnits(' vpwrLvdWarningSetpoint * .01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdWarningSetpoint.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdWarningSetpoint.setDescription('LVD Warning voltage setpoint.')
vpwrLvdDisconnectSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 4, 1, 2), Integer32()).setUnits(' vpwrLvdDisconnectSetpoint *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdDisconnectSetpoint.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdDisconnectSetpoint.setDescription('LVD disconnect voltage setpoint.')
vpwrLvdReconnectSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 4, 1, 3), Integer32()).setUnits(' vpwrLvdReconnectSetpoint *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdReconnectSetpoint.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdReconnectSetpoint.setDescription('LVD Reconnect voltage setpoint.')
vpwrLvdReconnectDelayTimer = MibScalar((1, 3, 6, 1, 4, 1, 13858, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 240))).setUnits(' Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdReconnectDelayTimer.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdReconnectDelayTimer.setDescription('The delay time, in seconds, before LVD is reconnected')
vpwrRectifierFVSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 3, 1, 1), Integer32()).setUnits(' vpwrRectifierFVSetpoint *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRectifierFVSetpoint.setStatus('current')
if mibBuilder.loadTexts: vpwrRectifierFVSetpoint.setDescription('System Float Voltage setting')
vpwrRectifierHVSDSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 3, 1, 2), Integer32()).setUnits(' vpwrRectifierHVSDSetpoint *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRectifierHVSDSetpoint.setStatus('current')
if mibBuilder.loadTexts: vpwrRectifierHVSDSetpoint.setDescription('System High Voltage Shutdown voltage setting')
vpwrBatteryTempTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1), )
if mibBuilder.loadTexts: vpwrBatteryTempTable.setStatus('current')
if mibBuilder.loadTexts: vpwrBatteryTempTable.setDescription('This table describes battery temperature probes. ')
vpwrBatteryTempTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1, 1), ).setIndexNames((0, "VPWR-DC-POWER-MIB", "vpwrBatteryTempIndex"))
if mibBuilder.loadTexts: vpwrBatteryTempTableEntry.setStatus('current')
if mibBuilder.loadTexts: vpwrBatteryTempTableEntry.setDescription('An entry containing information applicable to a particular temperature probe.')
vpwrBatteryTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBatteryTempIndex.setStatus('current')
if mibBuilder.loadTexts: vpwrBatteryTempIndex.setDescription('Index into temperature table')
vpwrBatteryTempName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBatteryTempName.setStatus('current')
if mibBuilder.loadTexts: vpwrBatteryTempName.setDescription('A string identifying probe location.')
vpwrBatteryTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1, 1, 3), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBatteryTemp.setStatus('current')
if mibBuilder.loadTexts: vpwrBatteryTemp.setDescription('Current temperature as recorded by the probe.')
vpwrBatteryTempLThreshold = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 2), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBatteryTempLThreshold.setStatus('current')
if mibBuilder.loadTexts: vpwrBatteryTempLThreshold.setDescription('Temperature value at which a clear trap would be sent. All three battery temperature must be at or below this value to trigger this trap. ')
vpwrBatteryTempUThreshold = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 3), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBatteryTempUThreshold.setStatus('current')
if mibBuilder.loadTexts: vpwrBatteryTempUThreshold.setDescription('Temperature value at which a set trap would be sent. Any one of the three battery temperatures at or exceeding this limit would trigger the trap. ')
vpwrAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 13858, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrAlarmsPresent.setStatus('current')
if mibBuilder.loadTexts: vpwrAlarmsPresent.setDescription('The present number of active alarm conditions.')
vpwrAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 8, 2), )
if mibBuilder.loadTexts: vpwrAlarmTable.setStatus('current')
if mibBuilder.loadTexts: vpwrAlarmTable.setDescription('A list of alarm table entries. The table contains zero, one, or many rows at any moment, depending upon the number of alarm conditions in effect. The table is initially empty at agent startup. The agent creates a row in the table each time a condition is detected and deletes that row when that condition no longer pertains. The vpwrAlarmIndex, for each type of module starts at 1 and is limited by the total number of alarams that can be generated by the module. Alarms are named by an AutonomousType (OBJECT IDENTIFIER), vpwrAlarmDescr, to allow a single table to reflect alarms for different type of modules. The number of rows in the table at any given time is reflected by the value of vpwrAlarmsPresent.')
vpwrAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 8, 2, 1), ).setIndexNames((0, "VPWR-DC-POWER-MIB", "vpwrShelfIndex"), (0, "VPWR-DC-POWER-MIB", "vpwrModuleIndex"), (0, "VPWR-DC-POWER-MIB", "vpwrAlarmIndex"))
if mibBuilder.loadTexts: vpwrAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: vpwrAlarmEntry.setDescription('An entry containing information applicable to a particular alarm.')
vpwrAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: vpwrAlarmIndex.setDescription('Identifies the alarm associated with the module. It is unique on per module type basis. For example, multiple rectifiers can have the same alarm and therefore same vpwrAlarmIndex active at any one time. ')
vpwrAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 2, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrAlarmDescr.setStatus('current')
if mibBuilder.loadTexts: vpwrAlarmDescr.setDescription('A reference to an alarm description object. The object referenced should not be accessible, but rather be used to provide a unique description of the alarm condition.')
vpwrAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrAlarmTime.setStatus('current')
if mibBuilder.loadTexts: vpwrAlarmTime.setDescription('The value of sysUpTime when the alarm condition was detected.')
sysAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 8, 4), )
if mibBuilder.loadTexts: sysAlarmConfigTable.setStatus('current')
if mibBuilder.loadTexts: sysAlarmConfigTable.setDescription('This table describes battery temperature probes. ')
sysAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1), ).setIndexNames((0, "VPWR-DC-POWER-MIB", "sysAlarmIndex"))
if mibBuilder.loadTexts: sysAlarmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: sysAlarmConfigEntry.setDescription('An entry containing information applicable to a particular temperature probe.')
sysAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: sysAlarmIndex.setDescription('Index into temperature table')
sysAlarmDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAlarmDefaultName.setStatus('current')
if mibBuilder.loadTexts: sysAlarmDefaultName.setDescription('A string identifying probe location.')
sysAlarmCustomName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmCustomName.setStatus('current')
if mibBuilder.loadTexts: sysAlarmCustomName.setDescription('A string identifying probe location.')
sysAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("major", 1), ("minor", 2), ("majorAndMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: sysAlarmSeverity.setDescription('Alarm Severity as denoted by Major and Minor Alarm Mask')
sysAlarmToRelayMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmToRelayMapping.setStatus('current')
if mibBuilder.loadTexts: sysAlarmToRelayMapping.setDescription('No additional mapping = 0 Map to Relay A = 1 Map to Relay B = 2 Map to Relay C = 4 Map to Relay D = 8 Map to Relay E = 16 Map to Relay F = 32 Map to Relay A and B = (1 + 2) and so on The major/minor classification of alarms automatically associates it with Major/Minor relay. Assigning a null mapping here does not override sysRelayAlarmSeverity for the alarm. It should be used to define mapping to additional relays. ')
sysAlarmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAlarmOperStatus.setStatus('current')
if mibBuilder.loadTexts: sysAlarmOperStatus.setDescription('Indicates current alarm status')
vpwrTrapTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 9, 1), )
if mibBuilder.loadTexts: vpwrTrapTable.setStatus('current')
if mibBuilder.loadTexts: vpwrTrapTable.setDescription('A list of possible trap destinations depending upon the criticality of the trap. ')
vpwrTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 9, 1, 1), ).setIndexNames((0, "VPWR-DC-POWER-MIB", "vpwrTrapIpIndex"))
if mibBuilder.loadTexts: vpwrTrapTableEntry.setStatus('current')
if mibBuilder.loadTexts: vpwrTrapTableEntry.setDescription('An entry containing information applicable to a particular trap destination.')
vpwrTrapIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrTrapIpIndex.setStatus('current')
if mibBuilder.loadTexts: vpwrTrapIpIndex.setDescription('Trap Entry Index ')
vpwrTrapIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 9, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrTrapIpAddress.setStatus('current')
if mibBuilder.loadTexts: vpwrTrapIpAddress.setDescription('Trap destination IP Address')
vpwrTrapCriticality = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 9, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrTrapCriticality.setStatus('current')
if mibBuilder.loadTexts: vpwrTrapCriticality.setDescription('Criticality of traps sent to this IP Address')
vpwrReadCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 13858, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrReadCommunityString.setStatus('current')
if mibBuilder.loadTexts: vpwrReadCommunityString.setDescription(' This allows setting password to be able to do Get operations')
vpwrWriteCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 13858, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrWriteCommunityString.setStatus('current')
if mibBuilder.loadTexts: vpwrWriteCommunityString.setDescription(' This allows setting password to be able to do Get and Set operations. The read-access is not allowed in the actual implementation. ')
vpwrTrapCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 13858, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrTrapCommunityString.setStatus('current')
if mibBuilder.loadTexts: vpwrTrapCommunityString.setDescription(' This allows setting community string required for the trap to be accepted at the destination. ')
vpwrTrapPowerMajorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,1)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapPowerMajorAlarm.setDescription('Major Alarm')
vpwrTrapPowerMinorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,2)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapPowerMinorAlarm.setDescription('Minor Alarm')
vpwrTrapACFAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,3)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapACFAlarm.setDescription('AC Fail Alarm')
vpwrTrapHVAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,4)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapHVAlarm.setDescription('High Voltage Warning Alarm')
vpwrTrapHVSDAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,5)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapHVSDAlarm.setDescription('High Voltage Shutdown Alarm')
vpwrTrapBDAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,6)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapBDAlarm.setDescription('Battery on Discharge Alarm')
vpwrTrapLVDWarningAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,7)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapLVDWarningAlarm.setDescription('LVD Warning Alarm')
vpwrTrapLVDOpenAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,8)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapLVDOpenAlarm.setDescription('LVD Open Alarm')
vpwrTrapDistAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,9)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapDistAlarm.setDescription('Distribution Open Alarm')
vpwrTrapAuxAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,10)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapAuxAlarm.setDescription('Auxiliary System Alarm')
vpwrTrapSystemRedundancyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,11)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapSystemRedundancyAlarm.setDescription('System Redundant Capacity Alarm')
vpwrTrapIShareAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,12)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapIShareAlarm.setDescription('Rectifier Current Share Alarm')
vpwrTrapModuleFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,13)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapModuleFailAlarm.setDescription('Single Rectifier Fail Alarm')
vpwrTrapMultipleModuleFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,14)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapMultipleModuleFailAlarm.setDescription('Multiple Rectifier Fail Alarm')
vpwrTrapModuleCommAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,15)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapModuleCommAlarm.setDescription('Module Communication Alarm')
vpwrTrapSystemOverTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,16)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapSystemOverTemperatureAlarm.setDescription('System Over Temperature Alarm')
vpwrTrapSystemOK = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,17)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapSystemOK.setDescription('SYSTEM OK - No Active Alarms')
vpwrTrapModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,18)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"), ("VPWR-DC-POWER-MIB", "vpwrShelfIndex"), ("VPWR-DC-POWER-MIB", "vpwrModuleIndex"))
if mibBuilder.loadTexts: vpwrTrapModuleInserted.setDescription('A new module has been inserted into the system.')
vpwrTrapModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,19)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"), ("VPWR-DC-POWER-MIB", "vpwrShelfIndex"), ("VPWR-DC-POWER-MIB", "vpwrModuleIndex"))
if mibBuilder.loadTexts: vpwrTrapModuleRemoved.setDescription('A module has been removed from the system.')
vpwrTrapThermalCompActive = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,20)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapThermalCompActive.setDescription('Thermal compensation has become active.')
vpwrTrapThermalCompInactive = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,21)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapThermalCompInactive.setDescription('Thermal compensation has been de-activated.')
vpwrTrapInternalTempAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,22)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapInternalTempAlarmSet.setDescription('Internal Temperature upper threshold exceeded.')
vpwrTrapInternalTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,23)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapInternalTempAlarmCleared.setDescription('Internal Temperature within limits')
vpwrTrapBatteryTempAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,24)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapBatteryTempAlarmSet.setDescription('At least one Battery Temperature exceeded upper threshold.')
vpwrTrapBatteryTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,25)).setObjects(("VPWR-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapBatteryTempAlarmCleared.setDescription('All Battery Temperatures within limits')
vpwrLvdAlarmContactorOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 4, 2, 1))
if mibBuilder.loadTexts: vpwrLvdAlarmContactorOpen.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdAlarmContactorOpen.setDescription('Contactor open')
vpwrLvdAlarmCBOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 4, 2, 2))
if mibBuilder.loadTexts: vpwrLvdAlarmCBOpen.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdAlarmCBOpen.setDescription('Circuit Breaker open')
vpwrTrapLvdFuseOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 4, 2, 3))
if mibBuilder.loadTexts: vpwrTrapLvdFuseOpen.setStatus('current')
if mibBuilder.loadTexts: vpwrTrapLvdFuseOpen.setDescription('Fuse open')
vpwrLvdAlarmWarning = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 4, 2, 4))
if mibBuilder.loadTexts: vpwrLvdAlarmWarning.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdAlarmWarning.setDescription('Plant Voltage below warning threshold')
vpwrRectAlarmDCFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 1))
if mibBuilder.loadTexts: vpwrRectAlarmDCFail.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmDCFail.setDescription(' ')
vpwrRectAlarmBoostFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 2))
if mibBuilder.loadTexts: vpwrRectAlarmBoostFail.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmBoostFail.setDescription(' ')
vpwrRectAlarmACFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 3))
if mibBuilder.loadTexts: vpwrRectAlarmACFail.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmACFail.setDescription(' ')
vpwrRectAlarmHVSD = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 4))
if mibBuilder.loadTexts: vpwrRectAlarmHVSD.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmHVSD.setDescription(' ')
vpwrRectAlarmFanFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 5))
if mibBuilder.loadTexts: vpwrRectAlarmFanFail.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmFanFail.setDescription(' ')
vpwrRectAlarmAmbTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 6))
if mibBuilder.loadTexts: vpwrRectAlarmAmbTemp.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmAmbTemp.setDescription(' ')
vpwrRectAlarmIntTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 7))
if mibBuilder.loadTexts: vpwrRectAlarmIntTemp.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmIntTemp.setDescription(' ')
vpwrRectAlarmIShare = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 8))
if mibBuilder.loadTexts: vpwrRectAlarmIShare.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmIShare.setDescription(' ')
vpwrRectAlarmUV = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 9))
if mibBuilder.loadTexts: vpwrRectAlarmUV.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmUV.setDescription(' ')
vpwrRectAlarmLowVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 10))
if mibBuilder.loadTexts: vpwrRectAlarmLowVoltage.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmLowVoltage.setDescription(' ')
vpwrRectAlarmReserved = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 11))
if mibBuilder.loadTexts: vpwrRectAlarmReserved.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmReserved.setDescription(' ')
vpwrRectAlarmDCEnable = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 12))
if mibBuilder.loadTexts: vpwrRectAlarmDCEnable.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmDCEnable.setDescription(' ')
vpwrRectAlarmRemoteShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 13))
if mibBuilder.loadTexts: vpwrRectAlarmRemoteShutdown.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmRemoteShutdown.setDescription(' ')
vpwrRectAlarmModDisableShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 14))
if mibBuilder.loadTexts: vpwrRectAlarmModDisableShutdown.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmModDisableShutdown.setDescription(' ')
vpwrRectAlarmShortPinShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 15))
if mibBuilder.loadTexts: vpwrRectAlarmShortPinShutdown.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmShortPinShutdown.setDescription(' ')
vpwrRectAlarmBoostComm = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 16))
if mibBuilder.loadTexts: vpwrRectAlarmBoostComm.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmBoostComm.setDescription(' ')
vpwrTrapsMsgString = MibScalar((1, 3, 6, 1, 4, 1, 13858, 11, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: vpwrTrapsMsgString.setStatus('current')
if mibBuilder.loadTexts: vpwrTrapsMsgString.setDescription(' Place holder for trap notification message string')
mibBuilder.exportSymbols("VPWR-DC-POWER-MIB", vpwrSystemParameterGroup=vpwrSystemParameterGroup, vpwrAlarmTable=vpwrAlarmTable, vpwrTrapInternalTempAlarmSet=vpwrTrapInternalTempAlarmSet, vpwrRectAlarmUV=vpwrRectAlarmUV, vpwrRectAlarmModDisableShutdown=vpwrRectAlarmModDisableShutdown, vpwrTrapIpAddress=vpwrTrapIpAddress, vpwrWriteCommunityString=vpwrWriteCommunityString, sysAlarmIndex=sysAlarmIndex, vpwrSystemCurrent=vpwrSystemCurrent, vpwrBatteryTempUThreshold=vpwrBatteryTempUThreshold, vpwrTrapSystemRedundancyAlarm=vpwrTrapSystemRedundancyAlarm, vpwrLvdAlarmGroup=vpwrLvdAlarmGroup, vpwrTrapLVDWarningAlarm=vpwrTrapLVDWarningAlarm, vpwrLvdAlarmWarning=vpwrLvdAlarmWarning, vpwrRectAlarmBoostComm=vpwrRectAlarmBoostComm, vpwrDcPowerTraps=vpwrDcPowerTraps, vpwrReadCommunityString=vpwrReadCommunityString, vpwrTrapModuleInserted=vpwrTrapModuleInserted, vpwrAlarmEntry=vpwrAlarmEntry, vpwrAlarmIndex=vpwrAlarmIndex, vpwrIdentName=vpwrIdentName, vpwrRectAlarmRemoteShutdown=vpwrRectAlarmRemoteShutdown, vpwrTrapIpIndex=vpwrTrapIpIndex, vpwrTrapThermalCompInactive=vpwrTrapThermalCompInactive, vpwrAlarmTime=vpwrAlarmTime, vpwrRectAlarmFanFail=vpwrRectAlarmFanFail, vpwrTrapSystemOverTemperatureAlarm=vpwrTrapSystemOverTemperatureAlarm, vpwrRectifierHVSDSetpoint=vpwrRectifierHVSDSetpoint, vpwrRectAlarmDCFail=vpwrRectAlarmDCFail, vpwrRectifierTestGroup=vpwrRectifierTestGroup, vpwrTrapMultipleModuleFailAlarm=vpwrTrapMultipleModuleFailAlarm, vpwrRectAlarmAmbTemp=vpwrRectAlarmAmbTemp, vpwrDcPowerLvd=vpwrDcPowerLvd, vpwrBatteryTempGroup=vpwrBatteryTempGroup, vpwrTrapInternalTempAlarmCleared=vpwrTrapInternalTempAlarmCleared, PositiveInteger=PositiveInteger, vpwrModuleOperStatus=vpwrModuleOperStatus, vpwrTrapCommunityString=vpwrTrapCommunityString, vpwrTrapAuxAlarm=vpwrTrapAuxAlarm, vpwrShelfIndex=vpwrShelfIndex, vpwrTrapHVSDAlarm=vpwrTrapHVSDAlarm, vpwrLvdAlarmCBOpen=vpwrLvdAlarmCBOpen, vpwrIdentModel=vpwrIdentModel, vpwrLvdConfigGroup=vpwrLvdConfigGroup, vpwrSystemTempCompensation=vpwrSystemTempCompensation, vpwrSystemTempCompStopVoltage=vpwrSystemTempCompStopVoltage, vpwrRectifierFVSetpoint=vpwrRectifierFVSetpoint, vpwrTrapTableEntry=vpwrTrapTableEntry, vpwrRectAlarmIntTemp=vpwrRectAlarmIntTemp, vpwrRectAlarmIShare=vpwrRectAlarmIShare, vpwrRectAlarmDCEnable=vpwrRectAlarmDCEnable, vpwrRectAlarmBoostFail=vpwrRectAlarmBoostFail, sysAlarmDefaultName=sysAlarmDefaultName, vpwrAlarmDescr=vpwrAlarmDescr, valereDcPowerMgt=valereDcPowerMgt, vpwrRectAlarmHVSD=vpwrRectAlarmHVSD, vpwrSystemIdentTable=vpwrSystemIdentTable, sysAlarmSeverity=sysAlarmSeverity, vpwrSystemInternalTempLThreshold=vpwrSystemInternalTempLThreshold, sysAlarmCustomName=sysAlarmCustomName, vpwrSystemInternalTempUThreshold=vpwrSystemInternalTempUThreshold, vpwrSystemThermalSenseType=vpwrSystemThermalSenseType, vpwrLvdDisconnectSetpoint=vpwrLvdDisconnectSetpoint, vpwrSystemBDAlarmSetpoint=vpwrSystemBDAlarmSetpoint, vpwrSystemIdentGroup=vpwrSystemIdentGroup, vpwrModuleOID=vpwrModuleOID, vpwrDcPowerAlarmGroup=vpwrDcPowerAlarmGroup, vpwrTrapLvdFuseOpen=vpwrTrapLvdFuseOpen, vpwrTrapModuleFailAlarm=vpwrTrapModuleFailAlarm, vpwrTrapCriticality=vpwrTrapCriticality, vpwrSystemControllerState=vpwrSystemControllerState, vpwrTrapIShareAlarm=vpwrTrapIShareAlarm, vpwrDcPowerSystem=vpwrDcPowerSystem, vpwrBatteryTempName=vpwrBatteryTempName, vpwrLvdReconnectDelayTimer=vpwrLvdReconnectDelayTimer, NonNegativeInteger=NonNegativeInteger, vpwrTrapHVAlarm=vpwrTrapHVAlarm, vpwrDcPowerModuleIdent=vpwrDcPowerModuleIdent, vpwrIdentControllerVersion=vpwrIdentControllerVersion, vpwrDcPowerBatteryGroup=vpwrDcPowerBatteryGroup, vpwrTrapPowerMajorAlarm=vpwrTrapPowerMajorAlarm, vpwrDcPowerTrapsMsgString=vpwrDcPowerTrapsMsgString, vpwrTrapsMsgString=vpwrTrapsMsgString, vpwrTrapModuleCommAlarm=vpwrTrapModuleCommAlarm, vpwrTrapBDAlarm=vpwrTrapBDAlarm, vpwrSystemTempCompensationSlope=vpwrSystemTempCompensationSlope, vpwrLvdTestGroup=vpwrLvdTestGroup, vpwrLvdWarningSetpoint=vpwrLvdWarningSetpoint, vpwrTrapDistAlarm=vpwrTrapDistAlarm, vpwrSystemShelfCapacity=vpwrSystemShelfCapacity, vpwrSystemTempCompensationState=vpwrSystemTempCompensationState, vpwrRectAlarmReserved=vpwrRectAlarmReserved, vpwrTrapModuleRemoved=vpwrTrapModuleRemoved, vpwrModuleCapacity=vpwrModuleCapacity, vpwrTrapBatteryTempAlarmSet=vpwrTrapBatteryTempAlarmSet, vpwrTrapACFAlarm=vpwrTrapACFAlarm, vpwrRectifierAlarmGroup=vpwrRectifierAlarmGroup, vpwrTrapTable=vpwrTrapTable, vpwrSystemInternalTemperature=vpwrSystemInternalTemperature, vpwrSystemType=vpwrSystemType, vpwrAlarmsPresent=vpwrAlarmsPresent, vpwrTrapLVDOpenAlarm=vpwrTrapLVDOpenAlarm, vpwrTrapThermalCompActive=vpwrTrapThermalCompActive, PYSNMP_MODULE_ID=valereDcPowerMgt, vpwrSystemIdentEntry=vpwrSystemIdentEntry, vpwrLvdAlarmContactorOpen=vpwrLvdAlarmContactorOpen, vpwrDcPowerSnmpConfig=vpwrDcPowerSnmpConfig, vpwrTrapSystemOK=vpwrTrapSystemOK, vpwrBatteryTempTableEntry=vpwrBatteryTempTableEntry, vpwrDcPowerProducts=vpwrDcPowerProducts, sysAlarmOperStatus=sysAlarmOperStatus, vpwrSystemHVAlarmSetpoint=vpwrSystemHVAlarmSetpoint, vpwrDcPowerRectifier=vpwrDcPowerRectifier, vpwrDcPowerTest=vpwrDcPowerTest, vpwrIdentManufacturer=vpwrIdentManufacturer, vpwrTrapBatteryTempAlarmCleared=vpwrTrapBatteryTempAlarmCleared, sysAlarmConfigTable=sysAlarmConfigTable, vpwrSystemVoltage=vpwrSystemVoltage, vpwrIdentAgentSoftwareVersion=vpwrIdentAgentSoftwareVersion, vpwrRectAlarmShortPinShutdown=vpwrRectAlarmShortPinShutdown, sysAlarmConfigEntry=sysAlarmConfigEntry, vpwrRectAlarmACFail=vpwrRectAlarmACFail, vpwrBatteryTempIndex=vpwrBatteryTempIndex, vpwrBatteryTempLThreshold=vpwrBatteryTempLThreshold, sysAlarmToRelayMapping=sysAlarmToRelayMapping, vpwrBatteryTemp=vpwrBatteryTemp, vpwrRectAlarmLowVoltage=vpwrRectAlarmLowVoltage, vpwrModuleIndex=vpwrModuleIndex, vpwrModuleParameter=vpwrModuleParameter, vpwrRectifierConfigGroup=vpwrRectifierConfigGroup, vpwrLvdReconnectSetpoint=vpwrLvdReconnectSetpoint, vpwrBatteryTempTable=vpwrBatteryTempTable, vpwrTrapPowerMinorAlarm=vpwrTrapPowerMinorAlarm, vpwrSystemConfigGroup=vpwrSystemConfigGroup, vpwrSystemTempCompStartTemperature=vpwrSystemTempCompStartTemperature)
