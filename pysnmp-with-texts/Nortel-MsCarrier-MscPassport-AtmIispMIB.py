#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-AtmIispMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-AtmIispMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:29:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
mscAtmIfVptIndex, mscAtmIfIndex, mscAtmIfVpt, mscAtmIf = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex", "mscAtmIfIndex", "mscAtmIfVpt", "mscAtmIf")
Unsigned32, StorageType, DisplayString, RowStatus, Counter32, Integer32, Gauge32 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "Unsigned32", "StorageType", "DisplayString", "RowStatus", "Counter32", "Integer32", "Gauge32")
NonReplicated, HexString, Hex, AsciiStringIndex = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "NonReplicated", "HexString", "Hex", "AsciiStringIndex")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Unsigned32, NotificationType, IpAddress, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, Counter64, TimeTicks, ModuleIdentity, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "NotificationType", "IpAddress", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "Counter64", "TimeTicks", "ModuleIdentity", "Integer32", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
atmIispMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 70))
mscAtmIfIisp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7))
mscAtmIfIispRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 1), )
if mibBuilder.loadTexts: mscAtmIfIispRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfIisp components.')
mscAtmIfIispRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"))
if mibBuilder.loadTexts: mscAtmIfIispRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfIisp component.')
mscAtmIfIispRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfIisp components. These components can be added and deleted.')
mscAtmIfIispComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfIispStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispStorageType.setDescription('This variable represents the storage type value for the mscAtmIfIisp tables.')
mscAtmIfIispIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfIispIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispIndex.setDescription('This variable represents the index for the mscAtmIfIisp tables.')
mscAtmIfIispProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 10), )
if mibBuilder.loadTexts: mscAtmIfIispProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispProvTable.setDescription('This group contains the provisionable attributes for the Iisp component.')
mscAtmIfIispProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"))
if mibBuilder.loadTexts: mscAtmIfIispProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispProvEntry.setDescription('An entry in the mscAtmIfIispProvTable.')
mscAtmIfIispVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("iisp10Sig30", 2), ("iisp10Sig31", 3))).clone('iisp10Sig31')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispVersion.setDescription('This attribute indicates which specification the IISP interface complies with. The options are iisp10Sig30 which refers to IISP version 1.0 with 3.0 signalling and iisp10Sig31 which refers to IISP version 1.0 with 3.1 signalling. If this attribute is changed, all switched Vcc components in this interface are cleared due to the fact that the two versions are incompatible.')
mscAtmIfIispSide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("networkSide", 0), ("userSide", 1))).clone('networkSide')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispSide.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSide.setDescription('This attribute indicates which side the interface is, user or network.')
mscAtmIfIispSoftPvcRetryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 999999)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispSoftPvcRetryPeriod.setStatus('obsolete')
if mibBuilder.loadTexts: mscAtmIfIispSoftPvcRetryPeriod.setDescription('This attribute specifies the time to wait between call set up retries. The resolution is to the nearest 10 seconds. This attribute has been obsoleted and is replaced by the softPvpAndPvcRetryPeriod attribute.')
mscAtmIfIispSoftPvpAndPvcRetryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 999999)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispSoftPvpAndPvcRetryPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSoftPvpAndPvcRetryPeriod.setDescription('This attribute specifies the time to wait between soft PVP or soft PVC call setup retries. The resolution is to the nearest 10 seconds.')
mscAtmIfIispSoftPvpAndPvcHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(50, 20000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispSoftPvpAndPvcHoldOffTime.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSoftPvpAndPvcHoldOffTime.setDescription('This attribute specifies how long to hold off retries following a release or the connection. The resolution is to the nearest 50 ms.')
mscAtmIfIispAcctOptTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 11), )
if mibBuilder.loadTexts: mscAtmIfIispAcctOptTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAcctOptTable.setDescription('This group contains the provisionable attributes for accounting.')
mscAtmIfIispAcctOptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"))
if mibBuilder.loadTexts: mscAtmIfIispAcctOptEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAcctOptEntry.setDescription('An entry in the mscAtmIfIispAcctOptTable.')
mscAtmIfIispAccountCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 11, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispAccountCollection.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAccountCollection.setDescription('This attribute is used to turn accounting on or off for SVC and SPVC connections. It also specifies the reason(s) for which accounting data is collected: billing, test, study, audit, or force. If the set of reasons is not empty then accounting records will be generated by this interface in the following situations: - on a TODA changeover if TODA is enabled; - every 12 hours (per connection) if TODA is disabled; - on every call clear (a call record with final cell counts). If none of the reasons is present, then accounting will be suppressed. The reason for collection is recorded in the accounting record, in the attribute callingCollectReason or calledCollectReason as appropriate. Description of bits: bill(0) test(1) study(2) audit(3) force(4)')
mscAtmIfIispAccountConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("origTerm", 0), ("intermediate", 1))).clone('intermediate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispAccountConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAccountConnectionType.setDescription('This attribute specifies whether accounting records generated by this interface should be marked as originating, terminating or intermediate. This attribute, in combination with the direction of the call, determines the value of attribute connPointType of the accounting record and may be used by downstream accounting processes to correlate the records. If the value is origTerm then records generated for incoming calls will be marked as originating and records generated for outgoing calls will be marked as terminating. If the value is intermediate then records generated for all calls will be marked as intermediate.')
mscAtmIfIispAccountClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispAccountClass.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAccountClass.setDescription('This attribute specifies the accounting class associated with the interface. Its meaning is determined by the network operator. Its value is simply recorded in the accounting records generated by this interface, in the attribute callingServiceType or calledServiceType as appropriate.')
mscAtmIfIispServiceExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispServiceExchange.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispServiceExchange.setDescription('This attribute specifies the data service exchange associated with this interface. Its meaning is determined by the network operator. Its value is simply recorded in the accounting records generated by this interface, in the attribute callingDse or calledDse as appropriate.')
mscAtmIfIispSig = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3))
mscAtmIfIispSigRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 1), )
if mibBuilder.loadTexts: mscAtmIfIispSigRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfIispSig components.')
mscAtmIfIispSigRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispSigIndex"))
if mibBuilder.loadTexts: mscAtmIfIispSigRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfIispSig component.')
mscAtmIfIispSigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfIispSig components. These components cannot be added nor deleted.')
mscAtmIfIispSigComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfIispSigStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigStorageType.setDescription('This variable represents the storage type value for the mscAtmIfIispSig tables.')
mscAtmIfIispSigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfIispSigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigIndex.setDescription('This variable represents the index for the mscAtmIfIispSig tables.')
mscAtmIfIispSigProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 10), )
if mibBuilder.loadTexts: mscAtmIfIispSigProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigProvTable.setDescription('This attribute group contains the provisionable attributes for the Signalling component.')
mscAtmIfIispSigProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispSigIndex"))
if mibBuilder.loadTexts: mscAtmIfIispSigProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigProvEntry.setDescription('An entry in the mscAtmIfIispSigProvTable.')
mscAtmIfIispSigVci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispSigVci.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVci.setDescription('This attribute specifies the signalling channel number.')
mscAtmIfIispSigAddressConversion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("nativeE164", 1), ("nsap", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispSigAddressConversion.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigAddressConversion.setDescription('This attribute specifies the address conversion on the outgoing signalling PDUs. The options are none, nativeE164, or nsap. The none option is the default and if this option is chosen then nothing is done to the address information element (IE) in the outgoing signalling message. If nativeE164 option is chosen, then only NSAP encapsulated E.164 addresses with zeros in the ESI are converted to native E.164 format in the outgoing signalling message. If the NSAP address is not encapsulated E.164 or the ESI field is not zeros and the nativeE164 option is chosen, then the call is cleared. If the nsap option is chosen, then native E.164 addresses are converted to NSAP E.164 with zeros in the ESI field; otherwise the address is in NSAP format and is not changed.')
mscAtmIfIispSigOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("provisionedOnly", 1))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispSigOperatingMode.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigOperatingMode.setDescription('This attribute specifies the operating mode of the signaling channel. provisionedOnly indicates that only SPVCs and SPVPs are supported on the interface and SVCs are not supported. This value is permitted only on UNI interfaces. normal indicates that SVCs, SPVCs, and SPVPs are supported on the interface.')
mscAtmIfIispSigStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 11), )
if mibBuilder.loadTexts: mscAtmIfIispSigStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscAtmIfIispSigStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispSigIndex"))
if mibBuilder.loadTexts: mscAtmIfIispSigStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigStateEntry.setDescription('An entry in the mscAtmIfIispSigStateTable.')
mscAtmIfIispSigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscAtmIfIispSigOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscAtmIfIispSigUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscAtmIfIispSigOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 12), )
if mibBuilder.loadTexts: mscAtmIfIispSigOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigOperTable.setDescription('This attribute contains the operational attributes for the AtmSignalling component.')
mscAtmIfIispSigOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispSigIndex"))
if mibBuilder.loadTexts: mscAtmIfIispSigOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigOperEntry.setDescription('An entry in the mscAtmIfIispSigOperTable.')
mscAtmIfIispSigLastTxCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigLastTxCauseCode.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigLastTxCauseCode.setDescription('This attribute indicates the cause code in the last transmitted signalling message that contains the CAUSE information element. The cause code is used to describe the reason for generating certain signalling messages.')
mscAtmIfIispSigLastTxDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 12, 1, 2), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigLastTxDiagCode.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigLastTxDiagCode.setDescription('This attribute contains the diagnostic code in the last transmitted signalling message. The diagnostic code is contained in the CAUSE information element and identifies an information element type or timer type. The diagnostic code is present only if a procedural error is detected by the signalling protocol. A diagnostic code is always accompanied by the cause code. If there is no failure, this attribute is set to 0.')
mscAtmIfIispSigLastRxCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigLastRxCauseCode.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigLastRxCauseCode.setDescription('This attribute contains the cause code in the last received signalling message that contains the CAUSE information element. The cause code is used to describe the reason for generating certain signalling messages.')
mscAtmIfIispSigLastRxDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 12, 1, 4), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigLastRxDiagCode.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigLastRxDiagCode.setDescription('This attribute contains the diagnostic code in the last received signalling message. The diagnostic code is contained in the CAUSE information element and identifies an information element type or timer type. The diagnostic code is present only if a procedural error is detected by the signalling protocol. A diagnostic code is always accompanied by the cause code. If there is no failure, this attribute is set to 0.')
mscAtmIfIispSigStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 13), )
if mibBuilder.loadTexts: mscAtmIfIispSigStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigStatsTable.setDescription('This attribute group contains the statistics associated with the AtmSignalling component.')
mscAtmIfIispSigStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispSigIndex"))
if mibBuilder.loadTexts: mscAtmIfIispSigStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigStatsEntry.setDescription('An entry in the mscAtmIfIispSigStatsTable.')
mscAtmIfIispSigCurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigCurrentConnections.setStatus('obsolete')
if mibBuilder.loadTexts: mscAtmIfIispSigCurrentConnections.setDescription('This attribute indicates the total number of currently active connections.')
mscAtmIfIispSigPeakConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 13, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigPeakConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigPeakConnections.setDescription('This attribute indicates the high water mark of active point-to- point and point-to-multipoint connections.')
mscAtmIfIispSigSuccessfulConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigSuccessfulConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigSuccessfulConnections.setDescription('This attribute counts the total number of switched point-to- point and point-to-multipoint connections that were successfully established. The counter wraps to 0 when the maximum value is exceeded.')
mscAtmIfIispSigFailedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigFailedConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigFailedConnections.setDescription('This attribute counts the total number of switched connections that were not successfully established.The counter wraps to 0 when the maximum value is exceeded.')
mscAtmIfIispSigTxPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigTxPdus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigTxPdus.setDescription('This attribute counts the number of transmitted signalling PDUs.The counter wraps to 0 when the maximum value is exceeded.')
mscAtmIfIispSigRxPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigRxPdus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigRxPdus.setDescription('This attribute counts the number of received signalling PDUs.The counter wraps to 0 when the maximum value is exceeded.')
mscAtmIfIispSigCurrentPmpConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 13, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigCurrentPmpConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigCurrentPmpConnections.setDescription('This attribute indicates the number of currently active point-to- multipoint connections.')
mscAtmIfIispSigPeakPmpConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 13, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigPeakPmpConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigPeakPmpConnections.setDescription('This attribute indicates the high water mark of active point-to- multipoint connections.')
mscAtmIfIispSigSuccessfulPmpConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigSuccessfulPmpConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigSuccessfulPmpConnections.setDescription('This attribute counts the total number of switched point-to- multipoint connections that were successfully established. The counter wraps to 0 when the maximum value is exceeded.')
mscAtmIfIispSigFailedPmpConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigFailedPmpConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigFailedPmpConnections.setDescription('This attribute counts the number of switched point-to- multipoint connections that were not successfully established.The counter wraps to 0 when the maximum value is exceeded.')
mscAtmIfIispSigNewCurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 13, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigNewCurrentConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigNewCurrentConnections.setDescription('This attribute indicates the total number of currently active point-to- point and point-to-multipoint connections.')
mscAtmIfIispSigVcd = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2))
mscAtmIfIispSigVcdRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfIispSigVcdRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfIispSigVcd components.')
mscAtmIfIispSigVcdRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispSigIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispSigVcdIndex"))
if mibBuilder.loadTexts: mscAtmIfIispSigVcdRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfIispSigVcd component.')
mscAtmIfIispSigVcdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispSigVcdRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfIispSigVcd components. These components can be added and deleted.')
mscAtmIfIispSigVcdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigVcdComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfIispSigVcdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispSigVcdStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdStorageType.setDescription('This variable represents the storage type value for the mscAtmIfIispSigVcd tables.')
mscAtmIfIispSigVcdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfIispSigVcdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdIndex.setDescription('This variable represents the index for the mscAtmIfIispSigVcd tables.')
mscAtmIfIispSigVcdProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 10), )
if mibBuilder.loadTexts: mscAtmIfIispSigVcdProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdProvTable.setDescription('This group contains the provisionable traffic attributes for a control channel.')
mscAtmIfIispSigVcdProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispSigIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispSigVcdIndex"))
if mibBuilder.loadTexts: mscAtmIfIispSigVcdProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdProvEntry.setDescription('An entry in the mscAtmIfIispSigVcdProvTable.')
mscAtmIfIispSigVcdTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 6, 7, 8))).clone(namedValues=NamedValues(("n3", 3), ("n6", 6), ("n7", 7), ("n8", 8))).clone('n6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispSigVcdTrafficDescType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdTrafficDescType.setDescription('This attribute specifies the type of traffic management which is applied to both the transmit and receive direction of this connection as defined in the ATM Forum. The trafficDescType determines the number and meaning of the parameters in the trafficDescParm attribute.')
mscAtmIfIispSigVcdAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3))).clone('rtVariableBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispSigVcdAtmServiceCategory.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdAtmServiceCategory.setDescription("This attribute specifies the ATM service category for both directions of the connection. The constantBitRate service category is intended for real time applications, that is those requiring tightly constrained delay and delay variation, as would be appropriate for voice and video applications. The consistent availability of a fixed quantity of bandwidth is considered appropriate for CBR service. Cells which are delayed beyond the value specified by CellTransfer Delay are assumed to be of significantly reduce value to the application. The rtVariableBitRate service category is intended for real time applications, that is those requiring tightly constrained delay and delay variation, as would be appropriate for voice and video applications. Sources are expected to transmit at a rate which varies with time. Equivalently, the source can be described as 'bursty'. Cells which are delayed beyond the value specified by CTD are assumed to be of significantly reduced value to the application. Real time VBR service may support statistical multiplexing of real time sources. The nrtVariableBitRate service category is intended for non-real time applications which have bursty traffic characteristics and which can be characterized in terms of a PCR, SCR, and MBS. For those cells which are transferred within the traffic contract, the application expects a low cell loss ratio. For all connections, it expects a bound on the mean cell transfer delay. Non-real time VBR service may support statistical multiplexing of connections. The unspecifiedBitRate service is intended for non-real time applications; that is, those not requiring tightly constrained delay and delay variation. UBR sources are expected to be bursty. UBR service supports a high degree of statistical multiplexing among sources. UBR service does not specify traffic related service guarantees. No numerical commitments are made with respect to the cell loss ratio experienced by a UBR connection, or as to the cell transfer delay experienced by cells on the connection.")
mscAtmIfIispSigVcdWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispSigVcdWeight.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdWeight.setDescription("This attribute specifies an override for the weight of this unshaped connection. This attribute is ignored for shaped connections, for ABR connections, for connections on a CQC-based ATM FP and basic VPTs. When the value is set to sameAsCa, the weight is determined by the weight policy attribute under the CA service category component for all but standard VPT VCCs. For standard VPT VCCs, the weight is determined by the VCC's service category, when the value is set to sameAsCa. When this attribute is set to a value from 1 to 4095, that value is used for the weight policy of this connection relative to other connections. For all but standard VPT VCCs, weight policy determines the proportion of transit cell opportunities which are allocated to this connection, compared to other connections in the same service category. For standard VPT VCCs, weight policy determines the proportion of transmit cell opportunities which are allocated to this connection, compared to other connections associated with the VPT. When the value is set to upToQueueLimit, the weight policy is limited only by the txQueueLimit. VALUES ( 0 = upToQueueLimit 65535 = sameAsCa )")
mscAtmIfIispSigVcdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispSigVcdQosClass.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdQosClass.setDescription('This attribute specifies the quality of service for both the forward and backward direction for this connection. Class 1 supports a QOS that meets Service Class A performance requirements (Circuit emulation, constant bit rate video). Class 2 supports a QOS that meets Service Class B performance requirements (Variable bit rate audio and video). Class 3 supports a QOS that meets Service Class C performance requirements (Connection-Oriented Data Transfer). Class 4 supports a QOS that meets Service Class D performance requirements (Connectionless Data Transfer). Class 0 is the unspecified bit rate QOS class; no objective is specified for the performance parameters.')
mscAtmIfIispSigVcdTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 10, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispSigVcdTrafficShaping.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdTrafficShaping.setDescription("This attribute specifies whether this connection uses traffic shaping when transmitting traffic to the ATM interface. When sameAsCa is selected, traffic shaping for this connection is based on the trafficShaping attribute of the connection's service category component under the AtmIf CA. If the service category has traffic shaping enabled, then traffic shaping is enabled for the connection. Note that enabling traffic shaping may have no effect under certain cases. These cases are listed in the description of the trafficShaping operational attribute, which is under the Vcc Tm and Vpc Tm components. When disabled is selected, traffic shaping for this connection is disabled.")
mscAtmIfIispSigVcdUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 10, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsCa", 3))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispSigVcdUnshapedTransmitQueueing.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdUnshapedTransmitQueueing.setDescription("This attribute only applies when this connection is unshaped. This attribute specifies the transmit queueing method for this connection if it is unshaped. Refer to the unshapedTransmitQueueing attribute under the AtmIf CA service category subcomponent for more details on the meaning of this attribute. When this attribute is set to sameAsCa, the transmit queueing method for the connection is based on the unshapedTransmitQueueing attribute of the connection's service category component under the ConnectionAdministrator. When this attribute is set to common, transmit traffic on this unshaped connection is destined for the common queue. The value sameAsInterface is for migration from previous software releases, but should no longer be used")
mscAtmIfIispSigVcdUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 10, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispSigVcdUsageParameterControl.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdUsageParameterControl.setDescription("This attribute specifies whether this connection enforces usage parameter control when receiving traffic from the ATM interface. When sameAsCa is selected, UPC for the connection is based on the usageParameterControl attribute of the connection's service category component under the ConnectionAdministrator. If the service category has UPC enabled, then UPC is enabled for the connection. Note that enabling UPC may have no effect under certain cases. These cases are listed in the description of the usageParameterControl operational attribute, which is under the Vcc Tm or Vpc Tm component. When disabled is selected, UPC for this connection is disabled. The value sameAsInterface is for migration from previous software releases, but should no longer be used")
mscAtmIfIispSigVcdTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 387), )
if mibBuilder.loadTexts: mscAtmIfIispSigVcdTdpTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdTdpTable.setDescription('This attribute is a vector of five traffic parameters whose meanings are defined by the trafficDescType attribute. The values of peak cell rate (PCR), sustained cell rate (SCR) and requested shaping rate are expressed in cell/s. Maximum burst size (MBS) is expressed in cells. CDVT is expressed in microseconds. The values of PCR, SCR, MBS and CDVT are used for connection admission control (CAC). The value of CDVT is only used for connections where the atmServiceCategory is constantBitRate. For all other values of atmServiceCategory, CDVT is ignored. The values of PCR, SCR and requested shaping rate are used to determine the actual shaping rate where traffic shaping is enabled. When trafficDescType is 3, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameter 1 must be non-zero. Parameters 2 and 3 must be zero. When trafficDescType is 6, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 2 represents the SCR for CLP equal to 0 and 1 traffic; parameter 3 represents the MBS for CLP equal to 0 and 1 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameters 1, 2, and 3 must be non-zero. Parameter 1 must be greater than or equal to parameter 2. Parameter 5 must either be zero (unused) or greater than or equal to parameter 2. When trafficDescType is 7, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 2 represents the SCR for CLP equal to 0 with cell discard; parameter 3 represents the MBS for CLP equal to 0 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameters 1, 2, and 3 must be non-zero. Parameter 1 must be greater than or equal to parameter 2. Parameter 5 must either be zero (unused) or greater than or equal to parameter 2. When trafficDescType is 8, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 2 represents the SCR for CLP equal to 0 traffic with cell tagging; parameter 3 represents the MBS for CLP equal to 0 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameters 1, 2, and 3 must be non-zero. Parameter 1 must be greater than or equal to parameter 2. Parameter 5 must either be zero (unused) or greater than or equal to parameter 2. Whenever it is valid for PCR to be specified, parameter 5 may also be used to specify a requested shaping rate. A non-zero value in parameter 5 overrides the value in parameter 1 and is used as the peak cell rate in calculations of CAC and shaping rate. For trafficDescType 3 the traffic is shaped at the next rate less than the PCR. For trafficDescType 6, 7, and 8, the traffic is shaped at the highest available rate which is between PCR and SCR. However, if there is no available shaping rate between PCR and SCR, traffic is shaped at the next rate above the PCR.')
mscAtmIfIispSigVcdTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 387, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispSigIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispSigVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispSigVcdTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfIispSigVcdTdpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdTdpEntry.setDescription('An entry in the mscAtmIfIispSigVcdTdpTable.')
mscAtmIfIispSigVcdTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 387, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfIispSigVcdTdpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdTdpIndex.setDescription('This variable represents the mscAtmIfIispSigVcdTdpTable specific index for the mscAtmIfIispSigVcdTdpTable.')
mscAtmIfIispSigVcdTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 3, 2, 387, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispSigVcdTdpValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispSigVcdTdpValue.setDescription('This variable represents an individual value for the mscAtmIfIispSigVcdTdpTable.')
mscAtmIfIispAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4))
mscAtmIfIispAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 1), )
if mibBuilder.loadTexts: mscAtmIfIispAddrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfIispAddr components.')
mscAtmIfIispAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispAddrAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispAddrAddressTypeIndex"))
if mibBuilder.loadTexts: mscAtmIfIispAddrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfIispAddr component.')
mscAtmIfIispAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispAddrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfIispAddr components. These components can be added and deleted.')
mscAtmIfIispAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispAddrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfIispAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispAddrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrStorageType.setDescription('This variable represents the storage type value for the mscAtmIfIispAddr tables.')
mscAtmIfIispAddrAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 40)))
if mibBuilder.loadTexts: mscAtmIfIispAddrAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrAddressIndex.setDescription('This variable represents an index for the mscAtmIfIispAddr tables.')
mscAtmIfIispAddrAddressTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("primary", 0), ("alternate", 1), ("default", 3))))
if mibBuilder.loadTexts: mscAtmIfIispAddrAddressTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrAddressTypeIndex.setDescription('This variable represents an index for the mscAtmIfIispAddr tables.')
mscAtmIfIispAddrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 10), )
if mibBuilder.loadTexts: mscAtmIfIispAddrOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrOperTable.setDescription('This attribute group contains the operational attributes for the Address component.')
mscAtmIfIispAddrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispAddrAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispAddrAddressTypeIndex"))
if mibBuilder.loadTexts: mscAtmIfIispAddrOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrOperEntry.setDescription('An entry in the mscAtmIfIispAddrOperTable.')
mscAtmIfIispAddrScope = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 104))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispAddrScope.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrScope.setDescription('This attribute indicates the scope of the ATM address, which is the highest level to which this address will be advertised in the PNNI hierarchy. If no PnniInfo subcomponent has been provisioned, then the scope will default to the level of this node in the PNNI hierarchy. If this node does not participate in a PNNI hierarchy, then this attribute will have the value of -1.')
mscAtmIfIispAddrReachability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("internal", 0), ("exterior", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispAddrReachability.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrReachability.setDescription('This attribute indicates whether the address is internal or exterior. An internal reachable address is an address of a destination that is directly attached to the logical node advertising the address. An exterior reachable address is an address that can be reached through a PNNI routing domain, but which is not located in that PNNI routing domain.')
mscAtmIfIispAddrTermSP = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 2))
mscAtmIfIispAddrTermSPRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfIispAddrTermSPRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrTermSPRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfIispAddrTermSP components.')
mscAtmIfIispAddrTermSPRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispAddrAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispAddrAddressTypeIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispAddrTermSPIndex"))
if mibBuilder.loadTexts: mscAtmIfIispAddrTermSPRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrTermSPRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfIispAddrTermSP component.')
mscAtmIfIispAddrTermSPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispAddrTermSPRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrTermSPRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfIispAddrTermSP components. These components can be added and deleted.')
mscAtmIfIispAddrTermSPComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispAddrTermSPComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrTermSPComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfIispAddrTermSPStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispAddrTermSPStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrTermSPStorageType.setDescription('This variable represents the storage type value for the mscAtmIfIispAddrTermSP tables.')
mscAtmIfIispAddrTermSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfIispAddrTermSPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrTermSPIndex.setDescription('This variable represents the index for the mscAtmIfIispAddrTermSP tables.')
mscAtmIfIispAddrPnniInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 3))
mscAtmIfIispAddrPnniInfoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 3, 1), )
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfIispAddrPnniInfo components.')
mscAtmIfIispAddrPnniInfoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispAddrAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispAddrAddressTypeIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispAddrPnniInfoIndex"))
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfIispAddrPnniInfo component.')
mscAtmIfIispAddrPnniInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfIispAddrPnniInfo components. These components can be added and deleted.')
mscAtmIfIispAddrPnniInfoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfIispAddrPnniInfoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoStorageType.setDescription('This variable represents the storage type value for the mscAtmIfIispAddrPnniInfo tables.')
mscAtmIfIispAddrPnniInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoIndex.setDescription('This variable represents the index for the mscAtmIfIispAddrPnniInfo tables.')
mscAtmIfIispAddrPnniInfoProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 3, 10), )
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoProvTable.setDescription('This attribute group contains the provisioned attributes relating to PNNI for a PnniInfo component.')
mscAtmIfIispAddrPnniInfoProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispAddrAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispAddrAddressTypeIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispAddrPnniInfoIndex"))
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoProvEntry.setDescription('An entry in the mscAtmIfIispAddrPnniInfoProvTable.')
mscAtmIfIispAddrPnniInfoScope = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 104)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoScope.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoScope.setDescription('This attribute specifies the scope of the ATM address, which is the highest level up to which this address will be advertised in the PNNI hierarchy. The scope must be set to a value numerically less than or equal to the level of the lowest level peer group containing this node. Setting the scope to 0 will cause the address to be advertised globally within this PNNI routing domain.')
mscAtmIfIispAddrPnniInfoReachability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 4, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("internal", 0), ("exterior", 1))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoReachability.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispAddrPnniInfoReachability.setDescription('This attribute indicates whether the address is internal or exterior. An internal reachable address is an address of a destination that is directly attached to the logical node advertising the address. An exterior reachable address is an address that can be reached through a PNNI routing domain, but which is not located in that PNNI routing domain.')
mscAtmIfIispCallingAScr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5))
mscAtmIfIispCallingAScrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 1), )
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfIispCallingAScr components.')
mscAtmIfIispCallingAScrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispCallingAScrIndex"))
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfIispCallingAScr component.')
mscAtmIfIispCallingAScrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfIispCallingAScr components. These components can be added and deleted.')
mscAtmIfIispCallingAScrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfIispCallingAScrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrStorageType.setDescription('This variable represents the storage type value for the mscAtmIfIispCallingAScr tables.')
mscAtmIfIispCallingAScrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrIndex.setDescription('This variable represents the index for the mscAtmIfIispCallingAScr tables.')
mscAtmIfIispCallingAScrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 10), )
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrProvTable.setDescription('This attribute group contains the provisionable attributes for the CallingAScr component.')
mscAtmIfIispCallingAScrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispCallingAScrIndex"))
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrProvEntry.setDescription('An entry in the mscAtmIfIispCallingAScrProvTable.')
mscAtmIfIispCallingAScrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrAdminStatus.setDescription('This attribute specifies whether the calling address screening feature is enabled or disabled. If enabled, incoming SVC calls are screened against provisioned addresses. If enabled and the calling address in the ATM SVC call request is provisioned to be accepted, the call is accepted or rejected according to the action specified for that address. If the value is enabled, and the calling address in the address request is not provisioned, the call is rejected If the value is disabled, no calling address screening is performed.')
mscAtmIfIispCallingAScrDefaultInsertionAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 10, 1, 2), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrDefaultInsertionAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrDefaultInsertionAddress.setDescription('This attribute specifies the address to be inserted into the SVC connection request if adminStatus is enabled and the connection request does not contain a calling address. If the adminStatus attribute is enabled and this attribute is empty, all incoming SVC calls which do not contain a calling address are rejected.')
mscAtmIfIispCallingAScrStatTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 11), )
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrStatTable.setDescription('This attribute group contains statistics related to the incoming SVC call requests received while the adminStatus attribute is set to enabled.')
mscAtmIfIispCallingAScrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispCallingAScrIndex"))
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrStatEntry.setDescription('An entry in the mscAtmIfIispCallingAScrStatTable.')
mscAtmIfIispCallingAScrAcceptedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrAcceptedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrAcceptedCalls.setDescription('This attribute counts the incoming SVC calls which were accepted because the address specified in the call request matched a provisioned ATM address and the associated action was accept. When the counter exceeds the maximum, it wraps to 0.')
mscAtmIfIispCallingAScrRejectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrRejectedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrRejectedCalls.setDescription('This attribute counts the incoming SVC calls which were rejected because the address specified in the call request matched a provisioned ATM address, but the associated action was reject. When the counter exceeds the maximum, it wraps to 0.')
mscAtmIfIispCallingAScrUnmatchedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrUnmatchedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrUnmatchedCalls.setDescription('This attribute counts the incoming SVC calls which were rejected because none of the provisioned ATM addresses matched the applicable address in the incoming SVC call request. When the counter exceeds the maximum, it wraps to 0.')
mscAtmIfIispCallingAScrAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 2))
mscAtmIfIispCallingAScrAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrAddrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrAddrRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfIispCallingAScrAddr components.')
mscAtmIfIispCallingAScrAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispCallingAScrIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispCallingAScrAddrAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispCallingAScrAddrAddressActionIndex"))
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrAddrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrAddrRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfIispCallingAScrAddr component.')
mscAtmIfIispCallingAScrAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrAddrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrAddrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfIispCallingAScrAddr components. These components can be added and deleted.')
mscAtmIfIispCallingAScrAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrAddrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrAddrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfIispCallingAScrAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrAddrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrAddrStorageType.setDescription('This variable represents the storage type value for the mscAtmIfIispCallingAScrAddr tables.')
mscAtmIfIispCallingAScrAddrAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 40)))
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrAddrAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrAddrAddressIndex.setDescription('This variable represents an index for the mscAtmIfIispCallingAScrAddr tables.')
mscAtmIfIispCallingAScrAddrAddressActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 5, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("accept", 0), ("reject", 1))))
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrAddrAddressActionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCallingAScrAddrAddressActionIndex.setDescription('This variable represents an index for the mscAtmIfIispCallingAScrAddr tables.')
mscAtmIfIispCalledAScr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6))
mscAtmIfIispCalledAScrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 1), )
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfIispCalledAScr components.')
mscAtmIfIispCalledAScrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispCalledAScrIndex"))
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfIispCalledAScr component.')
mscAtmIfIispCalledAScrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfIispCalledAScr components. These components can be added and deleted.')
mscAtmIfIispCalledAScrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfIispCalledAScrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrStorageType.setDescription('This variable represents the storage type value for the mscAtmIfIispCalledAScr tables.')
mscAtmIfIispCalledAScrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrIndex.setDescription('This variable represents the index for the mscAtmIfIispCalledAScr tables.')
mscAtmIfIispCalledAScrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 10), )
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrProvTable.setDescription('This attribute group contains the provisionable attributes for the CalledAScr component.')
mscAtmIfIispCalledAScrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispCalledAScrIndex"))
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrProvEntry.setDescription('An entry in the mscAtmIfIispCalledAScrProvTable.')
mscAtmIfIispCalledAScrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrAdminStatus.setDescription('This attribute specifies whether the called address screening feature is enabled or disabled. If the value is enabled, incoming SVC calls will be screened against provisioned called addresses. If the value is enabled and the called address in the ATM SVC call request has been provisioned, the call is accepted or rejected according to the action specified for that address. If the value is enabled and the called address in the call request is not provisioned, the call is rejected. If the value is disabled, no called address screening is performed.')
mscAtmIfIispCalledAScrStatTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 11), )
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrStatTable.setDescription('This attribute group contains statistics related to the incoming SVC call requests received while the adminStatus attribute is set to enabled.')
mscAtmIfIispCalledAScrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispCalledAScrIndex"))
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrStatEntry.setDescription('An entry in the mscAtmIfIispCalledAScrStatTable.')
mscAtmIfIispCalledAScrAcceptedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrAcceptedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrAcceptedCalls.setDescription('This attribute counts the incoming SVC calls which were accepted because the address specified in the call request matched a provisioned ATM address and the associated action was accept. When the counter exceeds the maximum, it wraps to 0.')
mscAtmIfIispCalledAScrRejectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrRejectedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrRejectedCalls.setDescription('This attribute counts the incoming SVC calls which were rejected because the address specified in the call request matched a provisioned ATM address, but the associated action was reject. When the counter exceeds the maximum, it wraps to 0.')
mscAtmIfIispCalledAScrUnmatchedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrUnmatchedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrUnmatchedCalls.setDescription('This attribute counts the incoming SVC calls which were rejected because none of the provisioned ATM addresses matched the applicable address in the incoming SVC call request. When the counter exceeds the maximum, it wraps to 0.')
mscAtmIfIispCalledAScrAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 2))
mscAtmIfIispCalledAScrAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrAddrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrAddrRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfIispCalledAScrAddr components.')
mscAtmIfIispCalledAScrAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispCalledAScrIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispCalledAScrAddrAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfIispCalledAScrAddrAddressActionIndex"))
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrAddrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrAddrRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfIispCalledAScrAddr component.')
mscAtmIfIispCalledAScrAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrAddrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrAddrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfIispCalledAScrAddr components. These components can be added and deleted.')
mscAtmIfIispCalledAScrAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrAddrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrAddrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfIispCalledAScrAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrAddrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrAddrStorageType.setDescription('This variable represents the storage type value for the mscAtmIfIispCalledAScrAddr tables.')
mscAtmIfIispCalledAScrAddrAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 40)))
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrAddrAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrAddrAddressIndex.setDescription('This variable represents an index for the mscAtmIfIispCalledAScrAddr tables.')
mscAtmIfIispCalledAScrAddrAddressActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 7, 6, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("accept", 0), ("reject", 1))))
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrAddrAddressActionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfIispCalledAScrAddrAddressActionIndex.setDescription('This variable represents an index for the mscAtmIfIispCalledAScrAddr tables.')
mscAtmIfVptIisp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6))
mscAtmIfVptIispRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 1), )
if mibBuilder.loadTexts: mscAtmIfVptIispRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfVptIisp components.')
mscAtmIfVptIispRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfVptIisp component.')
mscAtmIfVptIispRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfVptIisp components. These components can be added and deleted.')
mscAtmIfVptIispComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfVptIispStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispStorageType.setDescription('This variable represents the storage type value for the mscAtmIfVptIisp tables.')
mscAtmIfVptIispIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptIispIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispIndex.setDescription('This variable represents the index for the mscAtmIfVptIisp tables.')
mscAtmIfVptIispProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 10), )
if mibBuilder.loadTexts: mscAtmIfVptIispProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispProvTable.setDescription('This group contains the provisionable attributes for the Iisp component.')
mscAtmIfVptIispProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispProvEntry.setDescription('An entry in the mscAtmIfVptIispProvTable.')
mscAtmIfVptIispVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("iisp10Sig30", 2), ("iisp10Sig31", 3))).clone('iisp10Sig31')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispVersion.setDescription('This attribute indicates which specification the IISP interface complies with. The options are iisp10Sig30 which refers to IISP version 1.0 with 3.0 signalling and iisp10Sig31 which refers to IISP version 1.0 with 3.1 signalling. If this attribute is changed, all switched Vcc components in this interface are cleared due to the fact that the two versions are incompatible.')
mscAtmIfVptIispSide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("networkSide", 0), ("userSide", 1))).clone('networkSide')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispSide.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSide.setDescription('This attribute indicates which side the interface is, user or network.')
mscAtmIfVptIispSoftPvcRetryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 999999)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispSoftPvcRetryPeriod.setStatus('obsolete')
if mibBuilder.loadTexts: mscAtmIfVptIispSoftPvcRetryPeriod.setDescription('This attribute specifies the time to wait between call set up retries. The resolution is to the nearest 10 seconds. This attribute has been obsoleted and is replaced by the softPvpAndPvcRetryPeriod attribute.')
mscAtmIfVptIispSoftPvpAndPvcRetryPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 999999)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispSoftPvpAndPvcRetryPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSoftPvpAndPvcRetryPeriod.setDescription('This attribute specifies the time to wait between soft PVP or soft PVC call setup retries. The resolution is to the nearest 10 seconds.')
mscAtmIfVptIispSoftPvpAndPvcHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(50, 20000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispSoftPvpAndPvcHoldOffTime.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSoftPvpAndPvcHoldOffTime.setDescription('This attribute specifies how long to hold off retries following a release or the connection. The resolution is to the nearest 50 ms.')
mscAtmIfVptIispAcctOptTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 11), )
if mibBuilder.loadTexts: mscAtmIfVptIispAcctOptTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAcctOptTable.setDescription('This group contains the provisionable attributes for accounting.')
mscAtmIfVptIispAcctOptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispAcctOptEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAcctOptEntry.setDescription('An entry in the mscAtmIfVptIispAcctOptTable.')
mscAtmIfVptIispAccountCollection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 11, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispAccountCollection.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAccountCollection.setDescription('This attribute is used to turn accounting on or off for SVC and SPVC connections. It also specifies the reason(s) for which accounting data is collected: billing, test, study, audit, or force. If the set of reasons is not empty then accounting records will be generated by this interface in the following situations: - on a TODA changeover if TODA is enabled; - every 12 hours (per connection) if TODA is disabled; - on every call clear (a call record with final cell counts). If none of the reasons is present, then accounting will be suppressed. The reason for collection is recorded in the accounting record, in the attribute callingCollectReason or calledCollectReason as appropriate. Description of bits: bill(0) test(1) study(2) audit(3) force(4)')
mscAtmIfVptIispAccountConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("origTerm", 0), ("intermediate", 1))).clone('intermediate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispAccountConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAccountConnectionType.setDescription('This attribute specifies whether accounting records generated by this interface should be marked as originating, terminating or intermediate. This attribute, in combination with the direction of the call, determines the value of attribute connPointType of the accounting record and may be used by downstream accounting processes to correlate the records. If the value is origTerm then records generated for incoming calls will be marked as originating and records generated for outgoing calls will be marked as terminating. If the value is intermediate then records generated for all calls will be marked as intermediate.')
mscAtmIfVptIispAccountClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispAccountClass.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAccountClass.setDescription('This attribute specifies the accounting class associated with the interface. Its meaning is determined by the network operator. Its value is simply recorded in the accounting records generated by this interface, in the attribute callingServiceType or calledServiceType as appropriate.')
mscAtmIfVptIispServiceExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispServiceExchange.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispServiceExchange.setDescription('This attribute specifies the data service exchange associated with this interface. Its meaning is determined by the network operator. Its value is simply recorded in the accounting records generated by this interface, in the attribute callingDse or calledDse as appropriate.')
mscAtmIfVptIispVProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 12), )
if mibBuilder.loadTexts: mscAtmIfVptIispVProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispVProvTable.setDescription('This group contains the provisionable attributes for the Iisp component which are specific to virtual IISP interfaces.')
mscAtmIfVptIispVProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispVProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispVProvEntry.setDescription('An entry in the mscAtmIfVptIispVProvTable.')
mscAtmIfVptIispVpci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispVpci.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispVpci.setDescription('This attribute specifies the Virtual Path Connection Identifier (VPCI) to be used between this signalling entity and its peer. The VPCI of the peer virtual IISP must have the same value for switched connections to be set up across the interface.')
mscAtmIfVptIispSig = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3))
mscAtmIfVptIispSigRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 1), )
if mibBuilder.loadTexts: mscAtmIfVptIispSigRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfVptIispSig components.')
mscAtmIfVptIispSigRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispSigIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispSigRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfVptIispSig component.')
mscAtmIfVptIispSigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfVptIispSig components. These components cannot be added nor deleted.')
mscAtmIfVptIispSigComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfVptIispSigStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigStorageType.setDescription('This variable represents the storage type value for the mscAtmIfVptIispSig tables.')
mscAtmIfVptIispSigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptIispSigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigIndex.setDescription('This variable represents the index for the mscAtmIfVptIispSig tables.')
mscAtmIfVptIispSigProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 10), )
if mibBuilder.loadTexts: mscAtmIfVptIispSigProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigProvTable.setDescription('This attribute group contains the provisionable attributes for the Signalling component.')
mscAtmIfVptIispSigProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispSigIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispSigProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigProvEntry.setDescription('An entry in the mscAtmIfVptIispSigProvTable.')
mscAtmIfVptIispSigVci = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispSigVci.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVci.setDescription('This attribute specifies the signalling channel number.')
mscAtmIfVptIispSigAddressConversion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("nativeE164", 1), ("nsap", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispSigAddressConversion.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigAddressConversion.setDescription('This attribute specifies the address conversion on the outgoing signalling PDUs. The options are none, nativeE164, or nsap. The none option is the default and if this option is chosen then nothing is done to the address information element (IE) in the outgoing signalling message. If nativeE164 option is chosen, then only NSAP encapsulated E.164 addresses with zeros in the ESI are converted to native E.164 format in the outgoing signalling message. If the NSAP address is not encapsulated E.164 or the ESI field is not zeros and the nativeE164 option is chosen, then the call is cleared. If the nsap option is chosen, then native E.164 addresses are converted to NSAP E.164 with zeros in the ESI field; otherwise the address is in NSAP format and is not changed.')
mscAtmIfVptIispSigOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("provisionedOnly", 1))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispSigOperatingMode.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigOperatingMode.setDescription('This attribute specifies the operating mode of the signaling channel. provisionedOnly indicates that only SPVCs and SPVPs are supported on the interface and SVCs are not supported. This value is permitted only on UNI interfaces. normal indicates that SVCs, SPVCs, and SPVPs are supported on the interface.')
mscAtmIfVptIispSigStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 11), )
if mibBuilder.loadTexts: mscAtmIfVptIispSigStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscAtmIfVptIispSigStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispSigIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispSigStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigStateEntry.setDescription('An entry in the mscAtmIfVptIispSigStateTable.')
mscAtmIfVptIispSigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscAtmIfVptIispSigOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscAtmIfVptIispSigUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscAtmIfVptIispSigOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 12), )
if mibBuilder.loadTexts: mscAtmIfVptIispSigOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigOperTable.setDescription('This attribute contains the operational attributes for the AtmSignalling component.')
mscAtmIfVptIispSigOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispSigIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispSigOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigOperEntry.setDescription('An entry in the mscAtmIfVptIispSigOperTable.')
mscAtmIfVptIispSigLastTxCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigLastTxCauseCode.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigLastTxCauseCode.setDescription('This attribute indicates the cause code in the last transmitted signalling message that contains the CAUSE information element. The cause code is used to describe the reason for generating certain signalling messages.')
mscAtmIfVptIispSigLastTxDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 12, 1, 2), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigLastTxDiagCode.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigLastTxDiagCode.setDescription('This attribute contains the diagnostic code in the last transmitted signalling message. The diagnostic code is contained in the CAUSE information element and identifies an information element type or timer type. The diagnostic code is present only if a procedural error is detected by the signalling protocol. A diagnostic code is always accompanied by the cause code. If there is no failure, this attribute is set to 0.')
mscAtmIfVptIispSigLastRxCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigLastRxCauseCode.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigLastRxCauseCode.setDescription('This attribute contains the cause code in the last received signalling message that contains the CAUSE information element. The cause code is used to describe the reason for generating certain signalling messages.')
mscAtmIfVptIispSigLastRxDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 12, 1, 4), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigLastRxDiagCode.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigLastRxDiagCode.setDescription('This attribute contains the diagnostic code in the last received signalling message. The diagnostic code is contained in the CAUSE information element and identifies an information element type or timer type. The diagnostic code is present only if a procedural error is detected by the signalling protocol. A diagnostic code is always accompanied by the cause code. If there is no failure, this attribute is set to 0.')
mscAtmIfVptIispSigStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 13), )
if mibBuilder.loadTexts: mscAtmIfVptIispSigStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigStatsTable.setDescription('This attribute group contains the statistics associated with the AtmSignalling component.')
mscAtmIfVptIispSigStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispSigIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispSigStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigStatsEntry.setDescription('An entry in the mscAtmIfVptIispSigStatsTable.')
mscAtmIfVptIispSigCurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigCurrentConnections.setStatus('obsolete')
if mibBuilder.loadTexts: mscAtmIfVptIispSigCurrentConnections.setDescription('This attribute indicates the total number of currently active connections.')
mscAtmIfVptIispSigPeakConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 13, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigPeakConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigPeakConnections.setDescription('This attribute indicates the high water mark of active point-to- point and point-to-multipoint connections.')
mscAtmIfVptIispSigSuccessfulConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigSuccessfulConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigSuccessfulConnections.setDescription('This attribute counts the total number of switched point-to- point and point-to-multipoint connections that were successfully established. The counter wraps to 0 when the maximum value is exceeded.')
mscAtmIfVptIispSigFailedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigFailedConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigFailedConnections.setDescription('This attribute counts the total number of switched connections that were not successfully established.The counter wraps to 0 when the maximum value is exceeded.')
mscAtmIfVptIispSigTxPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigTxPdus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigTxPdus.setDescription('This attribute counts the number of transmitted signalling PDUs.The counter wraps to 0 when the maximum value is exceeded.')
mscAtmIfVptIispSigRxPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigRxPdus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigRxPdus.setDescription('This attribute counts the number of received signalling PDUs.The counter wraps to 0 when the maximum value is exceeded.')
mscAtmIfVptIispSigCurrentPmpConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 13, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigCurrentPmpConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigCurrentPmpConnections.setDescription('This attribute indicates the number of currently active point-to- multipoint connections.')
mscAtmIfVptIispSigPeakPmpConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 13, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigPeakPmpConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigPeakPmpConnections.setDescription('This attribute indicates the high water mark of active point-to- multipoint connections.')
mscAtmIfVptIispSigSuccessfulPmpConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigSuccessfulPmpConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigSuccessfulPmpConnections.setDescription('This attribute counts the total number of switched point-to- multipoint connections that were successfully established. The counter wraps to 0 when the maximum value is exceeded.')
mscAtmIfVptIispSigFailedPmpConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigFailedPmpConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigFailedPmpConnections.setDescription('This attribute counts the number of switched point-to- multipoint connections that were not successfully established.The counter wraps to 0 when the maximum value is exceeded.')
mscAtmIfVptIispSigNewCurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 13, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigNewCurrentConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigNewCurrentConnections.setDescription('This attribute indicates the total number of currently active point-to- point and point-to-multipoint connections.')
mscAtmIfVptIispSigVcd = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2))
mscAtmIfVptIispSigVcdRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfVptIispSigVcd components.')
mscAtmIfVptIispSigVcdRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispSigIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispSigVcdIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfVptIispSigVcd component.')
mscAtmIfVptIispSigVcdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfVptIispSigVcd components. These components can be added and deleted.')
mscAtmIfVptIispSigVcdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfVptIispSigVcdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdStorageType.setDescription('This variable represents the storage type value for the mscAtmIfVptIispSigVcd tables.')
mscAtmIfVptIispSigVcdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdIndex.setDescription('This variable represents the index for the mscAtmIfVptIispSigVcd tables.')
mscAtmIfVptIispSigVcdProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 10), )
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdProvTable.setDescription('This group contains the provisionable traffic attributes for a control channel.')
mscAtmIfVptIispSigVcdProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispSigIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispSigVcdIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdProvEntry.setDescription('An entry in the mscAtmIfVptIispSigVcdProvTable.')
mscAtmIfVptIispSigVcdTrafficDescType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 6, 7, 8))).clone(namedValues=NamedValues(("n3", 3), ("n6", 6), ("n7", 7), ("n8", 8))).clone('n6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdTrafficDescType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdTrafficDescType.setDescription('This attribute specifies the type of traffic management which is applied to both the transmit and receive direction of this connection as defined in the ATM Forum. The trafficDescType determines the number and meaning of the parameters in the trafficDescParm attribute.')
mscAtmIfVptIispSigVcdAtmServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unspecifiedBitRate", 0), ("constantBitRate", 1), ("rtVariableBitRate", 2), ("nrtVariableBitRate", 3))).clone('rtVariableBitRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdAtmServiceCategory.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdAtmServiceCategory.setDescription("This attribute specifies the ATM service category for both directions of the connection. The constantBitRate service category is intended for real time applications, that is those requiring tightly constrained delay and delay variation, as would be appropriate for voice and video applications. The consistent availability of a fixed quantity of bandwidth is considered appropriate for CBR service. Cells which are delayed beyond the value specified by CellTransfer Delay are assumed to be of significantly reduce value to the application. The rtVariableBitRate service category is intended for real time applications, that is those requiring tightly constrained delay and delay variation, as would be appropriate for voice and video applications. Sources are expected to transmit at a rate which varies with time. Equivalently, the source can be described as 'bursty'. Cells which are delayed beyond the value specified by CTD are assumed to be of significantly reduced value to the application. Real time VBR service may support statistical multiplexing of real time sources. The nrtVariableBitRate service category is intended for non-real time applications which have bursty traffic characteristics and which can be characterized in terms of a PCR, SCR, and MBS. For those cells which are transferred within the traffic contract, the application expects a low cell loss ratio. For all connections, it expects a bound on the mean cell transfer delay. Non-real time VBR service may support statistical multiplexing of connections. The unspecifiedBitRate service is intended for non-real time applications; that is, those not requiring tightly constrained delay and delay variation. UBR sources are expected to be bursty. UBR service supports a high degree of statistical multiplexing among sources. UBR service does not specify traffic related service guarantees. No numerical commitments are made with respect to the cell loss ratio experienced by a UBR connection, or as to the cell transfer delay experienced by cells on the connection.")
mscAtmIfVptIispSigVcdWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdWeight.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdWeight.setDescription("This attribute specifies an override for the weight of this unshaped connection. This attribute is ignored for shaped connections, for ABR connections, for connections on a CQC-based ATM FP and basic VPTs. When the value is set to sameAsCa, the weight is determined by the weight policy attribute under the CA service category component for all but standard VPT VCCs. For standard VPT VCCs, the weight is determined by the VCC's service category, when the value is set to sameAsCa. When this attribute is set to a value from 1 to 4095, that value is used for the weight policy of this connection relative to other connections. For all but standard VPT VCCs, weight policy determines the proportion of transit cell opportunities which are allocated to this connection, compared to other connections in the same service category. For standard VPT VCCs, weight policy determines the proportion of transmit cell opportunities which are allocated to this connection, compared to other connections associated with the VPT. When the value is set to upToQueueLimit, the weight policy is limited only by the txQueueLimit. VALUES ( 0 = upToQueueLimit 65535 = sameAsCa )")
mscAtmIfVptIispSigVcdQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n0", 0), ("n1", 1), ("n2", 2), ("n3", 3), ("n4", 4))).clone('n2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdQosClass.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdQosClass.setDescription('This attribute specifies the quality of service for both the forward and backward direction for this connection. Class 1 supports a QOS that meets Service Class A performance requirements (Circuit emulation, constant bit rate video). Class 2 supports a QOS that meets Service Class B performance requirements (Variable bit rate audio and video). Class 3 supports a QOS that meets Service Class C performance requirements (Connection-Oriented Data Transfer). Class 4 supports a QOS that meets Service Class D performance requirements (Connectionless Data Transfer). Class 0 is the unspecified bit rate QOS class; no objective is specified for the performance parameters.')
mscAtmIfVptIispSigVcdTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 10, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdTrafficShaping.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdTrafficShaping.setDescription("This attribute specifies whether this connection uses traffic shaping when transmitting traffic to the ATM interface. When sameAsCa is selected, traffic shaping for this connection is based on the trafficShaping attribute of the connection's service category component under the AtmIf CA. If the service category has traffic shaping enabled, then traffic shaping is enabled for the connection. Note that enabling traffic shaping may have no effect under certain cases. These cases are listed in the description of the trafficShaping operational attribute, which is under the Vcc Tm and Vpc Tm components. When disabled is selected, traffic shaping for this connection is disabled.")
mscAtmIfVptIispSigVcdUnshapedTransmitQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 10, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("common", 1), ("sameAsCa", 3))).clone('sameAsCa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdUnshapedTransmitQueueing.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdUnshapedTransmitQueueing.setDescription("This attribute only applies when this connection is unshaped. This attribute specifies the transmit queueing method for this connection if it is unshaped. Refer to the unshapedTransmitQueueing attribute under the AtmIf CA service category subcomponent for more details on the meaning of this attribute. When this attribute is set to sameAsCa, the transmit queueing method for the connection is based on the unshapedTransmitQueueing attribute of the connection's service category component under the ConnectionAdministrator. When this attribute is set to common, transmit traffic on this unshaped connection is destined for the common queue. The value sameAsInterface is for migration from previous software releases, but should no longer be used")
mscAtmIfVptIispSigVcdUsageParameterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 10, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("sameAsCa", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdUsageParameterControl.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdUsageParameterControl.setDescription("This attribute specifies whether this connection enforces usage parameter control when receiving traffic from the ATM interface. When sameAsCa is selected, UPC for the connection is based on the usageParameterControl attribute of the connection's service category component under the ConnectionAdministrator. If the service category has UPC enabled, then UPC is enabled for the connection. Note that enabling UPC may have no effect under certain cases. These cases are listed in the description of the usageParameterControl operational attribute, which is under the Vcc Tm or Vpc Tm component. When disabled is selected, UPC for this connection is disabled. The value sameAsInterface is for migration from previous software releases, but should no longer be used")
mscAtmIfVptIispSigVcdTdpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 387), )
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdTdpTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdTdpTable.setDescription('This attribute is a vector of five traffic parameters whose meanings are defined by the trafficDescType attribute. The values of peak cell rate (PCR), sustained cell rate (SCR) and requested shaping rate are expressed in cell/s. Maximum burst size (MBS) is expressed in cells. CDVT is expressed in microseconds. The values of PCR, SCR, MBS and CDVT are used for connection admission control (CAC). The value of CDVT is only used for connections where the atmServiceCategory is constantBitRate. For all other values of atmServiceCategory, CDVT is ignored. The values of PCR, SCR and requested shaping rate are used to determine the actual shaping rate where traffic shaping is enabled. When trafficDescType is 3, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameter 1 must be non-zero. Parameters 2 and 3 must be zero. When trafficDescType is 6, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 2 represents the SCR for CLP equal to 0 and 1 traffic; parameter 3 represents the MBS for CLP equal to 0 and 1 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameters 1, 2, and 3 must be non-zero. Parameter 1 must be greater than or equal to parameter 2. Parameter 5 must either be zero (unused) or greater than or equal to parameter 2. When trafficDescType is 7, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 2 represents the SCR for CLP equal to 0 with cell discard; parameter 3 represents the MBS for CLP equal to 0 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameters 1, 2, and 3 must be non-zero. Parameter 1 must be greater than or equal to parameter 2. Parameter 5 must either be zero (unused) or greater than or equal to parameter 2. When trafficDescType is 8, parameter 1 represents the PCR for CLP equal to 0 and 1 traffic; parameter 2 represents the SCR for CLP equal to 0 traffic with cell tagging; parameter 3 represents the MBS for CLP equal to 0 traffic; parameter 4 represents the CDVT; and parameter 5 represents the requested shaping rate. A non-zero value in parameter 5 overrides any value in parameter 1. This result is used as the PCR. Parameters 1, 2, and 3 must be non-zero. Parameter 1 must be greater than or equal to parameter 2. Parameter 5 must either be zero (unused) or greater than or equal to parameter 2. Whenever it is valid for PCR to be specified, parameter 5 may also be used to specify a requested shaping rate. A non-zero value in parameter 5 overrides the value in parameter 1 and is used as the peak cell rate in calculations of CAC and shaping rate. For trafficDescType 3 the traffic is shaped at the next rate less than the PCR. For trafficDescType 6, 7, and 8, the traffic is shaped at the highest available rate which is between PCR and SCR. However, if there is no available shaping rate between PCR and SCR, traffic is shaped at the next rate above the PCR.')
mscAtmIfVptIispSigVcdTdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 387, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispSigIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispSigVcdIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispSigVcdTdpIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdTdpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdTdpEntry.setDescription('An entry in the mscAtmIfVptIispSigVcdTdpTable.')
mscAtmIfVptIispSigVcdTdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 387, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdTdpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdTdpIndex.setDescription('This variable represents the mscAtmIfVptIispSigVcdTdpTable specific index for the mscAtmIfVptIispSigVcdTdpTable.')
mscAtmIfVptIispSigVcdTdpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 3, 2, 387, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdTdpValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispSigVcdTdpValue.setDescription('This variable represents an individual value for the mscAtmIfVptIispSigVcdTdpTable.')
mscAtmIfVptIispAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4))
mscAtmIfVptIispAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 1), )
if mibBuilder.loadTexts: mscAtmIfVptIispAddrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfVptIispAddr components.')
mscAtmIfVptIispAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispAddrAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispAddrAddressTypeIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispAddrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfVptIispAddr component.')
mscAtmIfVptIispAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispAddrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfVptIispAddr components. These components can be added and deleted.')
mscAtmIfVptIispAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispAddrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfVptIispAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispAddrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrStorageType.setDescription('This variable represents the storage type value for the mscAtmIfVptIispAddr tables.')
mscAtmIfVptIispAddrAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 40)))
if mibBuilder.loadTexts: mscAtmIfVptIispAddrAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrAddressIndex.setDescription('This variable represents an index for the mscAtmIfVptIispAddr tables.')
mscAtmIfVptIispAddrAddressTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("primary", 0), ("alternate", 1), ("default", 3))))
if mibBuilder.loadTexts: mscAtmIfVptIispAddrAddressTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrAddressTypeIndex.setDescription('This variable represents an index for the mscAtmIfVptIispAddr tables.')
mscAtmIfVptIispAddrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 10), )
if mibBuilder.loadTexts: mscAtmIfVptIispAddrOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrOperTable.setDescription('This attribute group contains the operational attributes for the Address component.')
mscAtmIfVptIispAddrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispAddrAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispAddrAddressTypeIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispAddrOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrOperEntry.setDescription('An entry in the mscAtmIfVptIispAddrOperTable.')
mscAtmIfVptIispAddrScope = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 104))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispAddrScope.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrScope.setDescription('This attribute indicates the scope of the ATM address, which is the highest level to which this address will be advertised in the PNNI hierarchy. If no PnniInfo subcomponent has been provisioned, then the scope will default to the level of this node in the PNNI hierarchy. If this node does not participate in a PNNI hierarchy, then this attribute will have the value of -1.')
mscAtmIfVptIispAddrReachability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("internal", 0), ("exterior", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispAddrReachability.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrReachability.setDescription('This attribute indicates whether the address is internal or exterior. An internal reachable address is an address of a destination that is directly attached to the logical node advertising the address. An exterior reachable address is an address that can be reached through a PNNI routing domain, but which is not located in that PNNI routing domain.')
mscAtmIfVptIispAddrTermSP = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 2))
mscAtmIfVptIispAddrTermSPRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVptIispAddrTermSPRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrTermSPRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfVptIispAddrTermSP components.')
mscAtmIfVptIispAddrTermSPRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispAddrAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispAddrAddressTypeIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispAddrTermSPIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispAddrTermSPRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrTermSPRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfVptIispAddrTermSP component.')
mscAtmIfVptIispAddrTermSPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispAddrTermSPRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrTermSPRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfVptIispAddrTermSP components. These components can be added and deleted.')
mscAtmIfVptIispAddrTermSPComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispAddrTermSPComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrTermSPComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfVptIispAddrTermSPStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispAddrTermSPStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrTermSPStorageType.setDescription('This variable represents the storage type value for the mscAtmIfVptIispAddrTermSP tables.')
mscAtmIfVptIispAddrTermSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptIispAddrTermSPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrTermSPIndex.setDescription('This variable represents the index for the mscAtmIfVptIispAddrTermSP tables.')
mscAtmIfVptIispAddrPnniInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 3))
mscAtmIfVptIispAddrPnniInfoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 3, 1), )
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfVptIispAddrPnniInfo components.')
mscAtmIfVptIispAddrPnniInfoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispAddrAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispAddrAddressTypeIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispAddrPnniInfoIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfVptIispAddrPnniInfo component.')
mscAtmIfVptIispAddrPnniInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfVptIispAddrPnniInfo components. These components can be added and deleted.')
mscAtmIfVptIispAddrPnniInfoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfVptIispAddrPnniInfoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoStorageType.setDescription('This variable represents the storage type value for the mscAtmIfVptIispAddrPnniInfo tables.')
mscAtmIfVptIispAddrPnniInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoIndex.setDescription('This variable represents the index for the mscAtmIfVptIispAddrPnniInfo tables.')
mscAtmIfVptIispAddrPnniInfoProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 3, 10), )
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoProvTable.setDescription('This attribute group contains the provisioned attributes relating to PNNI for a PnniInfo component.')
mscAtmIfVptIispAddrPnniInfoProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispAddrAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispAddrAddressTypeIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispAddrPnniInfoIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoProvEntry.setDescription('An entry in the mscAtmIfVptIispAddrPnniInfoProvTable.')
mscAtmIfVptIispAddrPnniInfoScope = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 104)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoScope.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoScope.setDescription('This attribute specifies the scope of the ATM address, which is the highest level up to which this address will be advertised in the PNNI hierarchy. The scope must be set to a value numerically less than or equal to the level of the lowest level peer group containing this node. Setting the scope to 0 will cause the address to be advertised globally within this PNNI routing domain.')
mscAtmIfVptIispAddrPnniInfoReachability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 4, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("internal", 0), ("exterior", 1))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoReachability.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispAddrPnniInfoReachability.setDescription('This attribute indicates whether the address is internal or exterior. An internal reachable address is an address of a destination that is directly attached to the logical node advertising the address. An exterior reachable address is an address that can be reached through a PNNI routing domain, but which is not located in that PNNI routing domain.')
mscAtmIfVptIispCallingAScr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5))
mscAtmIfVptIispCallingAScrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 1), )
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfVptIispCallingAScr components.')
mscAtmIfVptIispCallingAScrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispCallingAScrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfVptIispCallingAScr component.')
mscAtmIfVptIispCallingAScrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfVptIispCallingAScr components. These components can be added and deleted.')
mscAtmIfVptIispCallingAScrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfVptIispCallingAScrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrStorageType.setDescription('This variable represents the storage type value for the mscAtmIfVptIispCallingAScr tables.')
mscAtmIfVptIispCallingAScrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrIndex.setDescription('This variable represents the index for the mscAtmIfVptIispCallingAScr tables.')
mscAtmIfVptIispCallingAScrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 10), )
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrProvTable.setDescription('This attribute group contains the provisionable attributes for the CallingAScr component.')
mscAtmIfVptIispCallingAScrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispCallingAScrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrProvEntry.setDescription('An entry in the mscAtmIfVptIispCallingAScrProvTable.')
mscAtmIfVptIispCallingAScrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrAdminStatus.setDescription('This attribute specifies whether the calling address screening feature is enabled or disabled. If enabled, incoming SVC calls are screened against provisioned addresses. If enabled and the calling address in the ATM SVC call request is provisioned to be accepted, the call is accepted or rejected according to the action specified for that address. If the value is enabled, and the calling address in the address request is not provisioned, the call is rejected If the value is disabled, no calling address screening is performed.')
mscAtmIfVptIispCallingAScrDefaultInsertionAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 10, 1, 2), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrDefaultInsertionAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrDefaultInsertionAddress.setDescription('This attribute specifies the address to be inserted into the SVC connection request if adminStatus is enabled and the connection request does not contain a calling address. If the adminStatus attribute is enabled and this attribute is empty, all incoming SVC calls which do not contain a calling address are rejected.')
mscAtmIfVptIispCallingAScrStatTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 11), )
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrStatTable.setDescription('This attribute group contains statistics related to the incoming SVC call requests received while the adminStatus attribute is set to enabled.')
mscAtmIfVptIispCallingAScrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispCallingAScrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrStatEntry.setDescription('An entry in the mscAtmIfVptIispCallingAScrStatTable.')
mscAtmIfVptIispCallingAScrAcceptedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrAcceptedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrAcceptedCalls.setDescription('This attribute counts the incoming SVC calls which were accepted because the address specified in the call request matched a provisioned ATM address and the associated action was accept. When the counter exceeds the maximum, it wraps to 0.')
mscAtmIfVptIispCallingAScrRejectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrRejectedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrRejectedCalls.setDescription('This attribute counts the incoming SVC calls which were rejected because the address specified in the call request matched a provisioned ATM address, but the associated action was reject. When the counter exceeds the maximum, it wraps to 0.')
mscAtmIfVptIispCallingAScrUnmatchedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrUnmatchedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrUnmatchedCalls.setDescription('This attribute counts the incoming SVC calls which were rejected because none of the provisioned ATM addresses matched the applicable address in the incoming SVC call request. When the counter exceeds the maximum, it wraps to 0.')
mscAtmIfVptIispCallingAScrAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 2))
mscAtmIfVptIispCallingAScrAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrAddrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrAddrRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfVptIispCallingAScrAddr components.')
mscAtmIfVptIispCallingAScrAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispCallingAScrIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispCallingAScrAddrAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispCallingAScrAddrAddressActionIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrAddrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrAddrRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfVptIispCallingAScrAddr component.')
mscAtmIfVptIispCallingAScrAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrAddrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrAddrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfVptIispCallingAScrAddr components. These components can be added and deleted.')
mscAtmIfVptIispCallingAScrAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrAddrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrAddrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfVptIispCallingAScrAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrAddrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrAddrStorageType.setDescription('This variable represents the storage type value for the mscAtmIfVptIispCallingAScrAddr tables.')
mscAtmIfVptIispCallingAScrAddrAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 40)))
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrAddrAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrAddrAddressIndex.setDescription('This variable represents an index for the mscAtmIfVptIispCallingAScrAddr tables.')
mscAtmIfVptIispCallingAScrAddrAddressActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 5, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("accept", 0), ("reject", 1))))
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrAddrAddressActionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCallingAScrAddrAddressActionIndex.setDescription('This variable represents an index for the mscAtmIfVptIispCallingAScrAddr tables.')
mscAtmIfVptIispCalledAScr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6))
mscAtmIfVptIispCalledAScrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 1), )
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfVptIispCalledAScr components.')
mscAtmIfVptIispCalledAScrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispCalledAScrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfVptIispCalledAScr component.')
mscAtmIfVptIispCalledAScrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfVptIispCalledAScr components. These components can be added and deleted.')
mscAtmIfVptIispCalledAScrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfVptIispCalledAScrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrStorageType.setDescription('This variable represents the storage type value for the mscAtmIfVptIispCalledAScr tables.')
mscAtmIfVptIispCalledAScrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrIndex.setDescription('This variable represents the index for the mscAtmIfVptIispCalledAScr tables.')
mscAtmIfVptIispCalledAScrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 10), )
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrProvTable.setDescription('This attribute group contains the provisionable attributes for the CalledAScr component.')
mscAtmIfVptIispCalledAScrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispCalledAScrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrProvEntry.setDescription('An entry in the mscAtmIfVptIispCalledAScrProvTable.')
mscAtmIfVptIispCalledAScrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrAdminStatus.setDescription('This attribute specifies whether the called address screening feature is enabled or disabled. If the value is enabled, incoming SVC calls will be screened against provisioned called addresses. If the value is enabled and the called address in the ATM SVC call request has been provisioned, the call is accepted or rejected according to the action specified for that address. If the value is enabled and the called address in the call request is not provisioned, the call is rejected. If the value is disabled, no called address screening is performed.')
mscAtmIfVptIispCalledAScrStatTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 11), )
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrStatTable.setDescription('This attribute group contains statistics related to the incoming SVC call requests received while the adminStatus attribute is set to enabled.')
mscAtmIfVptIispCalledAScrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispCalledAScrIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrStatEntry.setDescription('An entry in the mscAtmIfVptIispCalledAScrStatTable.')
mscAtmIfVptIispCalledAScrAcceptedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrAcceptedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrAcceptedCalls.setDescription('This attribute counts the incoming SVC calls which were accepted because the address specified in the call request matched a provisioned ATM address and the associated action was accept. When the counter exceeds the maximum, it wraps to 0.')
mscAtmIfVptIispCalledAScrRejectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrRejectedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrRejectedCalls.setDescription('This attribute counts the incoming SVC calls which were rejected because the address specified in the call request matched a provisioned ATM address, but the associated action was reject. When the counter exceeds the maximum, it wraps to 0.')
mscAtmIfVptIispCalledAScrUnmatchedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrUnmatchedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrUnmatchedCalls.setDescription('This attribute counts the incoming SVC calls which were rejected because none of the provisioned ATM addresses matched the applicable address in the incoming SVC call request. When the counter exceeds the maximum, it wraps to 0.')
mscAtmIfVptIispCalledAScrAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 2))
mscAtmIfVptIispCalledAScrAddrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 2, 1), )
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrAddrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrAddrRowStatusTable.setDescription('This entry controls the addition and deletion of mscAtmIfVptIispCalledAScrAddr components.')
mscAtmIfVptIispCalledAScrAddrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmCoreMIB", "mscAtmIfVptIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispCalledAScrIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispCalledAScrAddrAddressIndex"), (0, "Nortel-MsCarrier-MscPassport-AtmIispMIB", "mscAtmIfVptIispCalledAScrAddrAddressActionIndex"))
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrAddrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrAddrRowStatusEntry.setDescription('A single entry in the table represents a single mscAtmIfVptIispCalledAScrAddr component.')
mscAtmIfVptIispCalledAScrAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrAddrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrAddrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAtmIfVptIispCalledAScrAddr components. These components can be added and deleted.')
mscAtmIfVptIispCalledAScrAddrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrAddrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrAddrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAtmIfVptIispCalledAScrAddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrAddrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrAddrStorageType.setDescription('This variable represents the storage type value for the mscAtmIfVptIispCalledAScrAddr tables.')
mscAtmIfVptIispCalledAScrAddrAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 40)))
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrAddrAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrAddrAddressIndex.setDescription('This variable represents an index for the mscAtmIfVptIispCalledAScrAddr tables.')
mscAtmIfVptIispCalledAScrAddrAddressActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 114, 9, 6, 6, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("accept", 0), ("reject", 1))))
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrAddrAddressActionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAtmIfVptIispCalledAScrAddrAddressActionIndex.setDescription('This variable represents an index for the mscAtmIfVptIispCalledAScrAddr tables.')
atmIispGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 70, 1))
atmIispGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 70, 1, 1))
atmIispGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 70, 1, 1, 3))
atmIispGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 70, 1, 1, 3, 2))
atmIispCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 70, 3))
atmIispCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 70, 3, 1))
atmIispCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 70, 3, 1, 3))
atmIispCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 70, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-AtmIispMIB", mscAtmIfVptIispSigStateEntry=mscAtmIfVptIispSigStateEntry, mscAtmIfIispAddrTermSP=mscAtmIfIispAddrTermSP, mscAtmIfVptIispCalledAScrAddrAddressActionIndex=mscAtmIfVptIispCalledAScrAddrAddressActionIndex, mscAtmIfVptIispSigFailedConnections=mscAtmIfVptIispSigFailedConnections, mscAtmIfIispAddrPnniInfoRowStatusEntry=mscAtmIfIispAddrPnniInfoRowStatusEntry, mscAtmIfVptIispRowStatusTable=mscAtmIfVptIispRowStatusTable, mscAtmIfIispSigLastTxDiagCode=mscAtmIfIispSigLastTxDiagCode, mscAtmIfVptIispAddrPnniInfoStorageType=mscAtmIfVptIispAddrPnniInfoStorageType, mscAtmIfIispSigVcdComponentName=mscAtmIfIispSigVcdComponentName, mscAtmIfVptIispAddrPnniInfo=mscAtmIfVptIispAddrPnniInfo, mscAtmIfVptIispAddrRowStatusEntry=mscAtmIfVptIispAddrRowStatusEntry, mscAtmIfVptIispAccountCollection=mscAtmIfVptIispAccountCollection, mscAtmIfIispAddrPnniInfoComponentName=mscAtmIfIispAddrPnniInfoComponentName, mscAtmIfVptIispAddrAddressIndex=mscAtmIfVptIispAddrAddressIndex, mscAtmIfVptIispSigVcdQosClass=mscAtmIfVptIispSigVcdQosClass, mscAtmIfVptIispCalledAScrAddrComponentName=mscAtmIfVptIispCalledAScrAddrComponentName, mscAtmIfIispCalledAScrComponentName=mscAtmIfIispCalledAScrComponentName, mscAtmIfVptIispCalledAScrAddrRowStatusEntry=mscAtmIfVptIispCalledAScrAddrRowStatusEntry, mscAtmIfVptIispCallingAScrStatTable=mscAtmIfVptIispCallingAScrStatTable, mscAtmIfVptIispAccountClass=mscAtmIfVptIispAccountClass, mscAtmIfVptIispSigVcdRowStatusEntry=mscAtmIfVptIispSigVcdRowStatusEntry, mscAtmIfVptIispCallingAScrStatEntry=mscAtmIfVptIispCallingAScrStatEntry, mscAtmIfVptIispAddrTermSPIndex=mscAtmIfVptIispAddrTermSPIndex, mscAtmIfVptIispSigVcdTrafficDescType=mscAtmIfVptIispSigVcdTrafficDescType, mscAtmIfIispRowStatus=mscAtmIfIispRowStatus, mscAtmIfIispRowStatusEntry=mscAtmIfIispRowStatusEntry, mscAtmIfVptIispCalledAScrAddrRowStatus=mscAtmIfVptIispCalledAScrAddrRowStatus, mscAtmIfVptIispIndex=mscAtmIfVptIispIndex, mscAtmIfVptIispCallingAScrAddrAddressActionIndex=mscAtmIfVptIispCallingAScrAddrAddressActionIndex, mscAtmIfVptIispStorageType=mscAtmIfVptIispStorageType, mscAtmIfVptIispAddrTermSPRowStatusEntry=mscAtmIfVptIispAddrTermSPRowStatusEntry, mscAtmIfIispAddrTermSPRowStatus=mscAtmIfIispAddrTermSPRowStatus, mscAtmIfVptIispAcctOptTable=mscAtmIfVptIispAcctOptTable, mscAtmIfIispAddrPnniInfoReachability=mscAtmIfIispAddrPnniInfoReachability, mscAtmIfIispCalledAScrAddrRowStatus=mscAtmIfIispCalledAScrAddrRowStatus, mscAtmIfVptIispSigVcdRowStatus=mscAtmIfVptIispSigVcdRowStatus, mscAtmIfIispAddrTermSPIndex=mscAtmIfIispAddrTermSPIndex, mscAtmIfVptIispSigVcdIndex=mscAtmIfVptIispSigVcdIndex, mscAtmIfVptIispCalledAScrProvEntry=mscAtmIfVptIispCalledAScrProvEntry, mscAtmIfIispCallingAScrRejectedCalls=mscAtmIfIispCallingAScrRejectedCalls, mscAtmIfIispAddrTermSPStorageType=mscAtmIfIispAddrTermSPStorageType, mscAtmIfVptIispSigOperTable=mscAtmIfVptIispSigOperTable, mscAtmIfVptIispAddrPnniInfoRowStatusTable=mscAtmIfVptIispAddrPnniInfoRowStatusTable, mscAtmIfIispSigVcdProvEntry=mscAtmIfIispSigVcdProvEntry, mscAtmIfVptIispCallingAScrStorageType=mscAtmIfVptIispCallingAScrStorageType, mscAtmIfIispSigRowStatusTable=mscAtmIfIispSigRowStatusTable, mscAtmIfIispSigLastTxCauseCode=mscAtmIfIispSigLastTxCauseCode, mscAtmIfIispCallingAScrAddrAddressActionIndex=mscAtmIfIispCallingAScrAddrAddressActionIndex, mscAtmIfVptIispSigPeakConnections=mscAtmIfVptIispSigPeakConnections, mscAtmIfVptIispAddrPnniInfoRowStatus=mscAtmIfVptIispAddrPnniInfoRowStatus, mscAtmIfVptIispSigAdminState=mscAtmIfVptIispSigAdminState, mscAtmIfIispAddrScope=mscAtmIfIispAddrScope, mscAtmIfIispSigRowStatusEntry=mscAtmIfIispSigRowStatusEntry, atmIispCapabilitiesCA02A=atmIispCapabilitiesCA02A, mscAtmIfIispAddrReachability=mscAtmIfIispAddrReachability, mscAtmIfVptIispVpci=mscAtmIfVptIispVpci, mscAtmIfIispCalledAScrAddr=mscAtmIfIispCalledAScrAddr, mscAtmIfVptIispSigVcdTdpTable=mscAtmIfVptIispSigVcdTdpTable, mscAtmIfIispSigFailedPmpConnections=mscAtmIfIispSigFailedPmpConnections, mscAtmIfVptIispProvEntry=mscAtmIfVptIispProvEntry, mscAtmIfIispCallingAScrRowStatus=mscAtmIfIispCallingAScrRowStatus, mscAtmIfVptIispCalledAScrIndex=mscAtmIfVptIispCalledAScrIndex, mscAtmIfIispCalledAScrAddrComponentName=mscAtmIfIispCalledAScrAddrComponentName, mscAtmIfVptIispAddrTermSPComponentName=mscAtmIfVptIispAddrTermSPComponentName, mscAtmIfIispCalledAScrIndex=mscAtmIfIispCalledAScrIndex, mscAtmIfVptIispCalledAScrAddrStorageType=mscAtmIfVptIispCalledAScrAddrStorageType, mscAtmIfVptIispSigFailedPmpConnections=mscAtmIfVptIispSigFailedPmpConnections, mscAtmIfVptIispAddrPnniInfoReachability=mscAtmIfVptIispAddrPnniInfoReachability, mscAtmIfVptIispSigVcdProvTable=mscAtmIfVptIispSigVcdProvTable, mscAtmIfVptIispAddrStorageType=mscAtmIfVptIispAddrStorageType, mscAtmIfIispSigOperationalState=mscAtmIfIispSigOperationalState, mscAtmIfIispAddrPnniInfoIndex=mscAtmIfIispAddrPnniInfoIndex, mscAtmIfIispSigUsageState=mscAtmIfIispSigUsageState, mscAtmIfVptIispCallingAScrAddrRowStatusTable=mscAtmIfVptIispCallingAScrAddrRowStatusTable, mscAtmIfVptIispCallingAScr=mscAtmIfVptIispCallingAScr, atmIispGroup=atmIispGroup, mscAtmIfVptIispSigStatsTable=mscAtmIfVptIispSigStatsTable, mscAtmIfIispSigLastRxDiagCode=mscAtmIfIispSigLastRxDiagCode, mscAtmIfVptIispCalledAScr=mscAtmIfVptIispCalledAScr, mscAtmIfIispSigVcd=mscAtmIfIispSigVcd, mscAtmIfIispAddrOperEntry=mscAtmIfIispAddrOperEntry, mscAtmIfVptIispServiceExchange=mscAtmIfVptIispServiceExchange, mscAtmIfVptIispSigTxPdus=mscAtmIfVptIispSigTxPdus, mscAtmIfIispCalledAScrStatEntry=mscAtmIfIispCalledAScrStatEntry, mscAtmIfVptIispSigSuccessfulPmpConnections=mscAtmIfVptIispSigSuccessfulPmpConnections, mscAtmIfVptIispSide=mscAtmIfVptIispSide, mscAtmIfVptIispVProvTable=mscAtmIfVptIispVProvTable, mscAtmIfIispAccountConnectionType=mscAtmIfIispAccountConnectionType, mscAtmIfVptIispAddrPnniInfoScope=mscAtmIfVptIispAddrPnniInfoScope, mscAtmIfVptIispSigLastTxDiagCode=mscAtmIfVptIispSigLastTxDiagCode, mscAtmIfIispCallingAScrRowStatusTable=mscAtmIfIispCallingAScrRowStatusTable, mscAtmIfVptIispCalledAScrComponentName=mscAtmIfVptIispCalledAScrComponentName, mscAtmIfIispVersion=mscAtmIfIispVersion, mscAtmIfIispAddr=mscAtmIfIispAddr, mscAtmIfVptIispCalledAScrRejectedCalls=mscAtmIfVptIispCalledAScrRejectedCalls, mscAtmIfVptIispCalledAScrStorageType=mscAtmIfVptIispCalledAScrStorageType, mscAtmIfIispSigVcdTdpTable=mscAtmIfIispSigVcdTdpTable, mscAtmIfIispCallingAScrRowStatusEntry=mscAtmIfIispCallingAScrRowStatusEntry, mscAtmIfIispAddrOperTable=mscAtmIfIispAddrOperTable, mscAtmIfIispSigNewCurrentConnections=mscAtmIfIispSigNewCurrentConnections, mscAtmIfIispCallingAScrUnmatchedCalls=mscAtmIfIispCallingAScrUnmatchedCalls, mscAtmIfVptIispSigLastTxCauseCode=mscAtmIfVptIispSigLastTxCauseCode, mscAtmIfVptIispSigLastRxCauseCode=mscAtmIfVptIispSigLastRxCauseCode, mscAtmIfIispCalledAScrAddrAddressIndex=mscAtmIfIispCalledAScrAddrAddressIndex, mscAtmIfVptIispCallingAScrAddrAddressIndex=mscAtmIfVptIispCallingAScrAddrAddressIndex, mscAtmIfVptIispSigVcd=mscAtmIfVptIispSigVcd, mscAtmIfVptIispSigSuccessfulConnections=mscAtmIfVptIispSigSuccessfulConnections, mscAtmIfIispAddrRowStatus=mscAtmIfIispAddrRowStatus, mscAtmIfVptIispCallingAScrAddrRowStatus=mscAtmIfVptIispCallingAScrAddrRowStatus, mscAtmIfIispAddrPnniInfoProvEntry=mscAtmIfIispAddrPnniInfoProvEntry, mscAtmIfIispSigRxPdus=mscAtmIfIispSigRxPdus, mscAtmIfVptIispSigIndex=mscAtmIfVptIispSigIndex, mscAtmIfVptIispSigRxPdus=mscAtmIfVptIispSigRxPdus, mscAtmIfVptIispSigVcdTdpValue=mscAtmIfVptIispSigVcdTdpValue, mscAtmIfVptIispAddrReachability=mscAtmIfVptIispAddrReachability, mscAtmIfIispSigProvTable=mscAtmIfIispSigProvTable, mscAtmIfVptIispCallingAScrAddr=mscAtmIfVptIispCallingAScrAddr, mscAtmIfVptIispSigStorageType=mscAtmIfVptIispSigStorageType, atmIispCapabilitiesCA02=atmIispCapabilitiesCA02, mscAtmIfVptIispSigVcdUnshapedTransmitQueueing=mscAtmIfVptIispSigVcdUnshapedTransmitQueueing, mscAtmIfIispAddrPnniInfoStorageType=mscAtmIfIispAddrPnniInfoStorageType, mscAtmIfIispSigStateTable=mscAtmIfIispSigStateTable, mscAtmIfVptIispSigVcdRowStatusTable=mscAtmIfVptIispSigVcdRowStatusTable, mscAtmIfIispCallingAScr=mscAtmIfIispCallingAScr, mscAtmIfIispSigSuccessfulPmpConnections=mscAtmIfIispSigSuccessfulPmpConnections, mscAtmIfIispIndex=mscAtmIfIispIndex, mscAtmIfIispAddrTermSPComponentName=mscAtmIfIispAddrTermSPComponentName, mscAtmIfVptIispCallingAScrAddrComponentName=mscAtmIfVptIispCallingAScrAddrComponentName, mscAtmIfIispRowStatusTable=mscAtmIfIispRowStatusTable, mscAtmIfVptIisp=mscAtmIfVptIisp, mscAtmIfVptIispVProvEntry=mscAtmIfVptIispVProvEntry, mscAtmIfIispSigLastRxCauseCode=mscAtmIfIispSigLastRxCauseCode, mscAtmIfVptIispSigAddressConversion=mscAtmIfVptIispSigAddressConversion, mscAtmIfIispAddrPnniInfoRowStatusTable=mscAtmIfIispAddrPnniInfoRowStatusTable, mscAtmIfIispSigVcdStorageType=mscAtmIfIispSigVcdStorageType, mscAtmIfIispAddrAddressIndex=mscAtmIfIispAddrAddressIndex, mscAtmIfIispSigVcdAtmServiceCategory=mscAtmIfIispSigVcdAtmServiceCategory, mscAtmIfVptIispAddrComponentName=mscAtmIfVptIispAddrComponentName, mscAtmIfVptIispSigVcdUsageParameterControl=mscAtmIfVptIispSigVcdUsageParameterControl, atmIispCapabilitiesCA=atmIispCapabilitiesCA, mscAtmIfIispSide=mscAtmIfIispSide, mscAtmIfIispSigComponentName=mscAtmIfIispSigComponentName, mscAtmIfVptIispAddrPnniInfoProvEntry=mscAtmIfVptIispAddrPnniInfoProvEntry, mscAtmIfVptIispSoftPvpAndPvcHoldOffTime=mscAtmIfVptIispSoftPvpAndPvcHoldOffTime, mscAtmIfIispSigAddressConversion=mscAtmIfIispSigAddressConversion, mscAtmIfIispSigTxPdus=mscAtmIfIispSigTxPdus, mscAtmIfIispCallingAScrStatEntry=mscAtmIfIispCallingAScrStatEntry, mscAtmIfIispSigIndex=mscAtmIfIispSigIndex, mscAtmIfIisp=mscAtmIfIisp, mscAtmIfVptIispCallingAScrRowStatusEntry=mscAtmIfVptIispCallingAScrRowStatusEntry, mscAtmIfIispAddrPnniInfoScope=mscAtmIfIispAddrPnniInfoScope, mscAtmIfIispSigVcdUsageParameterControl=mscAtmIfIispSigVcdUsageParameterControl, mscAtmIfIispCallingAScrAddrComponentName=mscAtmIfIispCallingAScrAddrComponentName, mscAtmIfVptIispSigRowStatus=mscAtmIfVptIispSigRowStatus, mscAtmIfVptIispComponentName=mscAtmIfVptIispComponentName, mscAtmIfIispAddrPnniInfoProvTable=mscAtmIfIispAddrPnniInfoProvTable, mscAtmIfIispSigVcdTrafficDescType=mscAtmIfIispSigVcdTrafficDescType, mscAtmIfIispCallingAScrIndex=mscAtmIfIispCallingAScrIndex, mscAtmIfIispCallingAScrStorageType=mscAtmIfIispCallingAScrStorageType, mscAtmIfIispAcctOptTable=mscAtmIfIispAcctOptTable, mscAtmIfIispAddrPnniInfoRowStatus=mscAtmIfIispAddrPnniInfoRowStatus, mscAtmIfIispCalledAScrAddrRowStatusTable=mscAtmIfIispCalledAScrAddrRowStatusTable, mscAtmIfIispCallingAScrProvEntry=mscAtmIfIispCallingAScrProvEntry, mscAtmIfVptIispCalledAScrRowStatusTable=mscAtmIfVptIispCalledAScrRowStatusTable, mscAtmIfIispSigVcdTdpEntry=mscAtmIfIispSigVcdTdpEntry, mscAtmIfVptIispAddrPnniInfoComponentName=mscAtmIfVptIispAddrPnniInfoComponentName, mscAtmIfVptIispAcctOptEntry=mscAtmIfVptIispAcctOptEntry, mscAtmIfIispComponentName=mscAtmIfIispComponentName, mscAtmIfVptIispSigVcdAtmServiceCategory=mscAtmIfVptIispSigVcdAtmServiceCategory, mscAtmIfIispAddrStorageType=mscAtmIfIispAddrStorageType, mscAtmIfVptIispCallingAScrDefaultInsertionAddress=mscAtmIfVptIispCallingAScrDefaultInsertionAddress, mscAtmIfVptIispCalledAScrProvTable=mscAtmIfVptIispCalledAScrProvTable, mscAtmIfIispCalledAScrAddrStorageType=mscAtmIfIispCalledAScrAddrStorageType, mscAtmIfVptIispCalledAScrStatEntry=mscAtmIfVptIispCalledAScrStatEntry, mscAtmIfVptIispSigVcdTdpIndex=mscAtmIfVptIispSigVcdTdpIndex, mscAtmIfIispCallingAScrDefaultInsertionAddress=mscAtmIfIispCallingAScrDefaultInsertionAddress, mscAtmIfIispSigVcdTrafficShaping=mscAtmIfIispSigVcdTrafficShaping, mscAtmIfVptIispSigStateTable=mscAtmIfVptIispSigStateTable, mscAtmIfIispSoftPvpAndPvcRetryPeriod=mscAtmIfIispSoftPvpAndPvcRetryPeriod, mscAtmIfIispAddrAddressTypeIndex=mscAtmIfIispAddrAddressTypeIndex, mscAtmIfVptIispCalledAScrAddrRowStatusTable=mscAtmIfVptIispCalledAScrAddrRowStatusTable, mscAtmIfVptIispSigUsageState=mscAtmIfVptIispSigUsageState, mscAtmIfVptIispCallingAScrRejectedCalls=mscAtmIfVptIispCallingAScrRejectedCalls, mscAtmIfIispSigCurrentConnections=mscAtmIfIispSigCurrentConnections, mscAtmIfIispCallingAScrAdminStatus=mscAtmIfIispCallingAScrAdminStatus, mscAtmIfVptIispRowStatus=mscAtmIfVptIispRowStatus, mscAtmIfIispSigStateEntry=mscAtmIfIispSigStateEntry, mscAtmIfIispSigVcdTdpValue=mscAtmIfIispSigVcdTdpValue, mscAtmIfIispAccountClass=mscAtmIfIispAccountClass, mscAtmIfVptIispCallingAScrUnmatchedCalls=mscAtmIfVptIispCallingAScrUnmatchedCalls, mscAtmIfVptIispSigOperEntry=mscAtmIfVptIispSigOperEntry, mscAtmIfVptIispAddrPnniInfoProvTable=mscAtmIfVptIispAddrPnniInfoProvTable, mscAtmIfVptIispSigOperatingMode=mscAtmIfVptIispSigOperatingMode, mscAtmIfVptIispCallingAScrRowStatus=mscAtmIfVptIispCallingAScrRowStatus, mscAtmIfIispSigCurrentPmpConnections=mscAtmIfIispSigCurrentPmpConnections, mscAtmIfVptIispSigStatsEntry=mscAtmIfVptIispSigStatsEntry, mscAtmIfIispAddrPnniInfo=mscAtmIfIispAddrPnniInfo, mscAtmIfIispCallingAScrComponentName=mscAtmIfIispCallingAScrComponentName, mscAtmIfIispCalledAScrRowStatusTable=mscAtmIfIispCalledAScrRowStatusTable, mscAtmIfVptIispAddrTermSPStorageType=mscAtmIfVptIispAddrTermSPStorageType, mscAtmIfVptIispCallingAScrAcceptedCalls=mscAtmIfVptIispCallingAScrAcceptedCalls, atmIispGroupCA=atmIispGroupCA, mscAtmIfIispCalledAScrProvEntry=mscAtmIfIispCalledAScrProvEntry, mscAtmIfIispCallingAScrAddrRowStatus=mscAtmIfIispCallingAScrAddrRowStatus, mscAtmIfIispSigProvEntry=mscAtmIfIispSigProvEntry, mscAtmIfVptIispSigVcdStorageType=mscAtmIfVptIispSigVcdStorageType, mscAtmIfVptIispAddrAddressTypeIndex=mscAtmIfVptIispAddrAddressTypeIndex, atmIispGroupCA02A=atmIispGroupCA02A, mscAtmIfVptIispSoftPvpAndPvcRetryPeriod=mscAtmIfVptIispSoftPvpAndPvcRetryPeriod, mscAtmIfVptIispSigVci=mscAtmIfVptIispSigVci, mscAtmIfVptIispCallingAScrRowStatusTable=mscAtmIfVptIispCallingAScrRowStatusTable, mscAtmIfVptIispAddrOperTable=mscAtmIfVptIispAddrOperTable, mscAtmIfIispCalledAScrAdminStatus=mscAtmIfIispCalledAScrAdminStatus, mscAtmIfIispCalledAScrAddrRowStatusEntry=mscAtmIfIispCalledAScrAddrRowStatusEntry, mscAtmIfVptIispCalledAScrAdminStatus=mscAtmIfVptIispCalledAScrAdminStatus, mscAtmIfIispCallingAScrStatTable=mscAtmIfIispCallingAScrStatTable, mscAtmIfVptIispRowStatusEntry=mscAtmIfVptIispRowStatusEntry, mscAtmIfIispSigSuccessfulConnections=mscAtmIfIispSigSuccessfulConnections, mscAtmIfVptIispSigOperationalState=mscAtmIfVptIispSigOperationalState, mscAtmIfIispAddrComponentName=mscAtmIfIispAddrComponentName, mscAtmIfIispSigVcdRowStatusEntry=mscAtmIfIispSigVcdRowStatusEntry, mscAtmIfVptIispSigVcdTrafficShaping=mscAtmIfVptIispSigVcdTrafficShaping, mscAtmIfVptIispAddrTermSP=mscAtmIfVptIispAddrTermSP, mscAtmIfVptIispSigCurrentConnections=mscAtmIfVptIispSigCurrentConnections, mscAtmIfIispSoftPvpAndPvcHoldOffTime=mscAtmIfIispSoftPvpAndPvcHoldOffTime, mscAtmIfIispSigOperatingMode=mscAtmIfIispSigOperatingMode, mscAtmIfIispSigStatsEntry=mscAtmIfIispSigStatsEntry, mscAtmIfIispCalledAScrProvTable=mscAtmIfIispCalledAScrProvTable, mscAtmIfIispSigPeakConnections=mscAtmIfIispSigPeakConnections, mscAtmIfIispCallingAScrAcceptedCalls=mscAtmIfIispCallingAScrAcceptedCalls, mscAtmIfIispSigVcdUnshapedTransmitQueueing=mscAtmIfIispSigVcdUnshapedTransmitQueueing, mscAtmIfIispCalledAScrRejectedCalls=mscAtmIfIispCalledAScrRejectedCalls, mscAtmIfIispCalledAScrStatTable=mscAtmIfIispCalledAScrStatTable, mscAtmIfVptIispAddrPnniInfoIndex=mscAtmIfVptIispAddrPnniInfoIndex, mscAtmIfIispSigVci=mscAtmIfIispSigVci, mscAtmIfVptIispProvTable=mscAtmIfVptIispProvTable, mscAtmIfIispCallingAScrProvTable=mscAtmIfIispCallingAScrProvTable, mscAtmIfVptIispCalledAScrAddrAddressIndex=mscAtmIfVptIispCalledAScrAddrAddressIndex, atmIispCapabilities=atmIispCapabilities, mscAtmIfVptIispAccountConnectionType=mscAtmIfVptIispAccountConnectionType, mscAtmIfIispCallingAScrAddr=mscAtmIfIispCallingAScrAddr, mscAtmIfIispProvTable=mscAtmIfIispProvTable, mscAtmIfIispCalledAScrUnmatchedCalls=mscAtmIfIispCalledAScrUnmatchedCalls, mscAtmIfIispProvEntry=mscAtmIfIispProvEntry, mscAtmIfIispSigOperTable=mscAtmIfIispSigOperTable, mscAtmIfIispSigFailedConnections=mscAtmIfIispSigFailedConnections, mscAtmIfVptIispCallingAScrAddrRowStatusEntry=mscAtmIfVptIispCallingAScrAddrRowStatusEntry, mscAtmIfIispCalledAScrRowStatus=mscAtmIfIispCalledAScrRowStatus, mscAtmIfIispCallingAScrAddrRowStatusTable=mscAtmIfIispCallingAScrAddrRowStatusTable, mscAtmIfVptIispCalledAScrAcceptedCalls=mscAtmIfVptIispCalledAScrAcceptedCalls, mscAtmIfVptIispSigCurrentPmpConnections=mscAtmIfVptIispSigCurrentPmpConnections, mscAtmIfIispAcctOptEntry=mscAtmIfIispAcctOptEntry, mscAtmIfVptIispCalledAScrAddr=mscAtmIfVptIispCalledAScrAddr, mscAtmIfIispSoftPvcRetryPeriod=mscAtmIfIispSoftPvcRetryPeriod)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-AtmIispMIB", mscAtmIfIispAddrRowStatusTable=mscAtmIfIispAddrRowStatusTable, mscAtmIfVptIispSigVcdTdpEntry=mscAtmIfVptIispSigVcdTdpEntry, mscAtmIfVptIispSigNewCurrentConnections=mscAtmIfVptIispSigNewCurrentConnections, mscAtmIfIispSigStorageType=mscAtmIfIispSigStorageType, mscAtmIfVptIispSigLastRxDiagCode=mscAtmIfVptIispSigLastRxDiagCode, mscAtmIfIispCalledAScr=mscAtmIfIispCalledAScr, mscAtmIfIispSigVcdIndex=mscAtmIfIispSigVcdIndex, mscAtmIfVptIispSigVcdComponentName=mscAtmIfVptIispSigVcdComponentName, mscAtmIfVptIispCallingAScrAddrStorageType=mscAtmIfVptIispCallingAScrAddrStorageType, atmIispGroupCA02=atmIispGroupCA02, mscAtmIfVptIispAddrTermSPRowStatus=mscAtmIfVptIispAddrTermSPRowStatus, mscAtmIfIispSigVcdWeight=mscAtmIfIispSigVcdWeight, mscAtmIfIispCalledAScrRowStatusEntry=mscAtmIfIispCalledAScrRowStatusEntry, mscAtmIfIispSigRowStatus=mscAtmIfIispSigRowStatus, mscAtmIfVptIispAddr=mscAtmIfVptIispAddr, mscAtmIfVptIispCallingAScrIndex=mscAtmIfVptIispCallingAScrIndex, mscAtmIfVptIispAddrPnniInfoRowStatusEntry=mscAtmIfVptIispAddrPnniInfoRowStatusEntry, mscAtmIfVptIispAddrRowStatusTable=mscAtmIfVptIispAddrRowStatusTable, mscAtmIfIispSigPeakPmpConnections=mscAtmIfIispSigPeakPmpConnections, mscAtmIfIispAddrTermSPRowStatusTable=mscAtmIfIispAddrTermSPRowStatusTable, mscAtmIfVptIispSoftPvcRetryPeriod=mscAtmIfVptIispSoftPvcRetryPeriod, mscAtmIfVptIispAddrTermSPRowStatusTable=mscAtmIfVptIispAddrTermSPRowStatusTable, mscAtmIfIispCalledAScrAcceptedCalls=mscAtmIfIispCalledAScrAcceptedCalls, mscAtmIfIispSigStatsTable=mscAtmIfIispSigStatsTable, mscAtmIfVptIispCallingAScrProvTable=mscAtmIfVptIispCallingAScrProvTable, mscAtmIfIispCallingAScrAddrAddressIndex=mscAtmIfIispCallingAScrAddrAddressIndex, atmIispMIB=atmIispMIB, mscAtmIfIispSig=mscAtmIfIispSig, mscAtmIfIispSigVcdRowStatusTable=mscAtmIfIispSigVcdRowStatusTable, mscAtmIfIispSigVcdTdpIndex=mscAtmIfIispSigVcdTdpIndex, mscAtmIfIispCallingAScrAddrRowStatusEntry=mscAtmIfIispCallingAScrAddrRowStatusEntry, mscAtmIfIispSigVcdProvTable=mscAtmIfIispSigVcdProvTable, mscAtmIfIispCallingAScrAddrStorageType=mscAtmIfIispCallingAScrAddrStorageType, mscAtmIfVptIispSigComponentName=mscAtmIfVptIispSigComponentName, mscAtmIfIispSigAdminState=mscAtmIfIispSigAdminState, mscAtmIfVptIispSigRowStatusTable=mscAtmIfVptIispSigRowStatusTable, mscAtmIfIispSigOperEntry=mscAtmIfIispSigOperEntry, mscAtmIfVptIispSigVcdProvEntry=mscAtmIfVptIispSigVcdProvEntry, mscAtmIfIispAddrRowStatusEntry=mscAtmIfIispAddrRowStatusEntry, mscAtmIfVptIispCalledAScrStatTable=mscAtmIfVptIispCalledAScrStatTable, mscAtmIfVptIispCallingAScrComponentName=mscAtmIfVptIispCallingAScrComponentName, mscAtmIfIispSigVcdQosClass=mscAtmIfIispSigVcdQosClass, mscAtmIfIispAccountCollection=mscAtmIfIispAccountCollection, mscAtmIfVptIispAddrRowStatus=mscAtmIfVptIispAddrRowStatus, mscAtmIfVptIispCalledAScrRowStatus=mscAtmIfVptIispCalledAScrRowStatus, mscAtmIfVptIispAddrOperEntry=mscAtmIfVptIispAddrOperEntry, mscAtmIfVptIispSigRowStatusEntry=mscAtmIfVptIispSigRowStatusEntry, mscAtmIfIispServiceExchange=mscAtmIfIispServiceExchange, mscAtmIfVptIispCalledAScrRowStatusEntry=mscAtmIfVptIispCalledAScrRowStatusEntry, mscAtmIfVptIispSigProvEntry=mscAtmIfVptIispSigProvEntry, mscAtmIfVptIispSigPeakPmpConnections=mscAtmIfVptIispSigPeakPmpConnections, mscAtmIfVptIispSig=mscAtmIfVptIispSig, mscAtmIfVptIispSigProvTable=mscAtmIfVptIispSigProvTable, mscAtmIfVptIispAddrScope=mscAtmIfVptIispAddrScope, mscAtmIfIispStorageType=mscAtmIfIispStorageType, mscAtmIfVptIispCallingAScrAdminStatus=mscAtmIfVptIispCallingAScrAdminStatus, mscAtmIfVptIispCallingAScrProvEntry=mscAtmIfVptIispCallingAScrProvEntry, mscAtmIfIispCalledAScrStorageType=mscAtmIfIispCalledAScrStorageType, mscAtmIfVptIispCalledAScrUnmatchedCalls=mscAtmIfVptIispCalledAScrUnmatchedCalls, mscAtmIfIispAddrTermSPRowStatusEntry=mscAtmIfIispAddrTermSPRowStatusEntry, mscAtmIfVptIispVersion=mscAtmIfVptIispVersion, mscAtmIfIispCalledAScrAddrAddressActionIndex=mscAtmIfIispCalledAScrAddrAddressActionIndex, mscAtmIfVptIispSigVcdWeight=mscAtmIfVptIispSigVcdWeight, mscAtmIfIispSigVcdRowStatus=mscAtmIfIispSigVcdRowStatus)
