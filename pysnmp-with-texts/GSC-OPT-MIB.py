#
# PySNMP MIB module GSC-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GSC-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:19:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, iso, Counter32, TimeTicks, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, enterprises, ModuleIdentity, Integer32, ObjectIdentity, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "iso", "Counter32", "TimeTicks", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "enterprises", "ModuleIdentity", "Integer32", "ObjectIdentity", "Unsigned32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class DisplayString(OctetString):
    pass

cdx6500PPCTGSCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29), )
if mibBuilder.loadTexts: cdx6500PPCTGSCPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTGSCPortTable.setDescription('This table contains GSC port configuration parameters.')
cdx6500PPCTGSCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1), ).setIndexNames((0, "GSC-OPT-MIB", "cdx6500GSCPCfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTGSCPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTGSCPortEntry.setDescription('Configuration parameters relevant to a GSC port.')
cdx6500GSCPCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgPortNumber.setDescription('Port number of the port being used by GSC')
cdx6500GSCPCfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(51))).clone(namedValues=NamedValues(("gsc", 51)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgPortType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgPortType.setDescription('The Port Type of the port.')
cdx6500GSCPCfgSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gscTpad", 1), ("gscHpad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgSubtype.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgSubtype.setDescription('The GSC port sub-type. gscHpad - Port is functioning as a host PAD. gscTpad - Port is functioning as a terminal PAD.')
cdx6500GSCPCfgClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8, 13, 14, 15, 16, 100))).clone(namedValues=NamedValues(("speed1200", 4), ("speed1800", 8), ("speed2400", 13), ("speed4800", 14), ("speed9600", 15), ("speed19200", 16), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgClockSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgClockSpeed.setDescription('This is the clock speed of the port in bits per second, when internal clocking is used.')
cdx6500GSCPCfgNumStations = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgNumStations.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgNumStations.setDescription('The number of stations/devices configured on this port.')
cdx6500GSCPCfgMinPollPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgMinPollPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgMinPollPeriod.setDescription('The minimum time the TPAD waits between polls. Specified in 50 ms increments (i.e. 1 means 50 ms).')
cdx6500GSCPCfgPollRespTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgPollRespTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgPollRespTimer.setDescription('The maximum time the TPAD waits for a response from the terminal after a poll. Specified in 50 ms increments (i.e. 5 means 250 ms).')
cdx6500GSCPCfgAckTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgAckTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgAckTimeOut.setDescription('The maximum time the TPAD or HPAD waits for acknowledgement for a transmitted frame. Specified in 50 ms increments (i.e. 5 means 250 ms).')
cdx6500GSCPCfgInterCharTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgInterCharTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgInterCharTimeOut.setDescription('The maximum time period allowed between received characters. Specified in 50 ms increments (i.e. 5 means 250 ms).')
cdx6500GSCPCfgBroadcastHoldTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgBroadcastHoldTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgBroadcastHoldTimeOut.setDescription('The time the TPAD holds a broadcast frame from one station, when it detects a dropped frame, while waiting for the missing frame from another station. Specified in 50 ms increments (i.e. 5 means 250 ms).')
cdx6500GSCPCfgSolicitedTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgSolicitedTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgSolicitedTimeOut.setDescription('Specifies the time that the TPAD waits for a SAD message in response to a PAD message, before re-transmitting the PAD message. Specified in 50 ms increments (i.e. 60 means 3 seconds).')
cdx6500GSCPCfgIdleDiscTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgIdleDiscTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgIdleDiscTimeOut.setDescription('The period that the HPAD waits to receive a UAD-frame, SAD-frame or poll from the polling controller before clearing the call to the TPAD. Specified in minutes (i.e. 5 means 5 minutes).')
cdx6500GSCPCfgAutocallRetryTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgAutocallRetryTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgAutocallRetryTimeOut.setDescription('Specifies the time to wait between subsequent autocall attempts. Specified in 50 ms increments. (i.e. 4 means 200 ms).')
cdx6500GSCPCfgMaxAutocallRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgMaxAutocallRetries.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgMaxAutocallRetries.setDescription('The maximum number of autocall attempts allowed. The port is disabled when the limit is reached.')
cdx6500GSCPCfgN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgN1.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgN1.setDescription('The number of good responses a TPAD must receive before changing a stations state from UP to DOWN .')
cdx6500GSCPCfgN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgN2.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgN2.setDescription('The number of good responses a TPAD must receive before changing a stations state from DOWN to UP.')
cdx6500GSCPCfgNumRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgNumRetries.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgNumRetries.setDescription('The number of times the TPAD or HPAD will retry a selection procedure before discarding a frame.')
cdx6500GSCPCfgPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgPortAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgPortAddress.setDescription('When a GSC port makes a call,this address is inserted into the calling address field.')
cdx6500GSCPCfgPortOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgPortOptions.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgPortOptions.setDescription('The port options specified : NONE - No option specified. ')
cdx6500GSCPCfgConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 100))).clone(namedValues=NamedValues(("simp", 1), ("simpa", 16), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgConnType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgConnType.setDescription('Specifies the control signal handshake and clocking required for a connection to be made to this port. simp - simple, no control signals required. simpa - CTS follows RTS, but no control signals required. nc - Skipped during configuration.')
cdx6500GSCPCfgWakeUpTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgWakeUpTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgWakeUpTimer.setDescription('Specifies the time to wait after autocall attempts are exhausted before attempting another autocall cycle. A value of 0 will prevent subsequent attempts until the station is booted.')
cdx6500GSCPCfgElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgElectricalInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgElectricalInterfaceType.setDescription('Specify the Electrical Interface Type: V.24 - V.24 Electrical Interface Type V.35 - V.35 Electrical Interface Type V.36 - V.36 Electrical Interface Type X.21 - X.21 Electrical Interface Type NONE - Electrically disabled')
cdx6500GSCPCfgV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgV24ElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgV24ElectricalInterfaceOption.setDescription('Specify the Pin 22 option: RI - V.24 uses Pin 22 for Ring Indicator output signal TM - V.24 uses Pin 22 for Test Mode input signal')
cdx6500GSCPCfgHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 29, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPCfgHighSpeedElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPCfgHighSpeedElectricalInterfaceOption.setDescription('Specify the cable type: NONE - V.35/V.36/X.21 DCE with straight through cable XOVER - V.35/V.36/X.21 DCE with crossover adapter cable')
cdx6500SPCTGSCStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8), )
if mibBuilder.loadTexts: cdx6500SPCTGSCStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTGSCStationTable.setDescription('This table contains GSC station configuration parameters.')
cdx6500SPCTGSCStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8, 1), ).setIndexNames((0, "GSC-OPT-MIB", "cdx6500GSCSCfgPortNumber"), (0, "GSC-OPT-MIB", "cdx6500GSCSCfgStationNumber"))
if mibBuilder.loadTexts: cdx6500SPCTGSCStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTGSCStationEntry.setDescription('Each StationEntry contains the configuration parameters for one GSC station.')
cdx6500GSCSCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSCfgPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSCfgPortNumber.setDescription('Port number of the port being used by GSC.')
cdx6500GSCSCfgStationNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSCfgStationNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSCfgStationNumber.setDescription('The number of devices on the multidrop line. Also used for routing purposes.')
cdx6500GSCSCfgStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 29))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSCfgStationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSCfgStationAddress.setDescription('The device address on the local line.')
cdx6500GSCSCfgRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 29))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSCfgRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSCfgRemoteAddress.setDescription('The device address on the remote line.')
cdx6500GSCSCfgAutocallMnem = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSCfgAutocallMnem.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSCfgAutocallMnem.setDescription('Identifies the entry in the Autocall Mnemonic table which specifies the X.25 call request parameters for this station.This is valid only if the port subtype is HPAD.')
cdx6500GSCSCfgProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSCfgProtocolId.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSCfgProtocolId.setDescription('The protocol ID inserted in outgoing calls and checked for incoming calls.')
cdx6500GSCSCfgBillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("billingOff", 1), ("billingOn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSCfgBillingRecords.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSCfgBillingRecords.setDescription('billingOff - Billing records are not generated. billingOn - Billing records are generated.')
cdx6500GSCSCfgStationOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 8, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSCfgStationOptions.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSCfgStationOptions.setDescription('GSC station options: NONE - no option specified IBRO - Inband Broadcast frames supported on this channel. One or more options may be specified by summing (separating them by a plus sign).')
cdx6500PPSTGSCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30), )
if mibBuilder.loadTexts: cdx6500PPSTGSCPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTGSCPortTable.setDescription('This table holds statistics items for GSC ports.')
cdx6500PPSTGSCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1), ).setIndexNames((0, "GSC-OPT-MIB", "cdx6500GSCPStatPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTGSCPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTGSCPortEntry.setDescription('Statistics parameters pertaining to GSC Ports.')
cdx6500GSCPStatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatPortNumber.setDescription('The port number of the GSC port.')
cdx6500GSCPStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(51))).clone(namedValues=NamedValues(("gsc", 51)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatPortType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatPortType.setDescription('The port type.')
cdx6500GSCPStatSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gscTpad", 1), ("gscHpad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatSubtype.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatSubtype.setDescription('The port sub-type. gscHpad - port is functioning as a host PAD. gscTpad - Port is functioning as a terminal PAD.')
cdx6500GSCPStatPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("busyOut", 2), ("up", 3), ("down", 4), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatPortStatus.setDescription("Status of the port: disabled - Port is disabled. enabled - Port is enabled. busyOut - The port is busied out. up - At least one station on the port is not down or disabled. down - All stations on the port are either down or disabled. newvalDisabled - same functionality as 'disabled', new enumeration added for RFC1155 compatibility.")
cdx6500GSCPStatPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatPortSpeed.setDescription('The measured port speed in bits per second.')
cdx6500GSCPStatLastStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatLastStatsReset.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatLastStatsReset.setDescription('The time when the port statistics were last reset.')
cdx6500GSCPStatCharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatCharsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatCharsIn.setDescription('Number of characters received on the line, including data and control characters.')
cdx6500GSCPStatCharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatCharsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatCharsOut.setDescription('Number of characters transmitted on the line, including data and control characters.')
cdx6500GSCPStatCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatCharsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatCharsInPerSec.setDescription('Number of characters received per second on the line, including data and control characters.')
cdx6500GSCPStatCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatCharsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatCharsOutPerSec.setDescription('Number of characters transmitted per second on the line, including data and control characters.')
cdx6500GSCPStatOverrunErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatOverrunErrs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatOverrunErrs.setDescription('The number of overrun errors detected on the line.')
cdx6500GSCPStatChecksumErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatChecksumErrs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatChecksumErrs.setDescription('The number of frames received with checksum errors.')
cdx6500GSCPStatOverlengthFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatOverlengthFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatOverlengthFrames.setDescription('The number of frames received that were over length.')
cdx6500GSCPStatPollRespTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatPollRespTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatPollRespTimeOuts.setDescription('The number of times a poll was issued without response from the terminal.')
cdx6500GSCPStatIntercharTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatIntercharTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatIntercharTimeOuts.setDescription('The number of receive frames aborted because of inter-character timeouts.')
cdx6500GSCPStatAckTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatAckTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatAckTimeOuts.setDescription('The number of transmitted frames which were not acknowledged.')
cdx6500GSCPStatPADFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatPADFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatPADFrames.setDescription('The number of PAD frames received (TPAD) or transmitted (HPAD).')
cdx6500GSCPStatSADFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatSADFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatSADFrames.setDescription('The number of SAD frames transmitted (TPAD) or received (HPAD).')
cdx6500GSCPStatUADFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatUADFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatUADFrames.setDescription('The number of UAD frames transmitted (TPAD) or received (HPAD).')
cdx6500GSCPStatBROFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatBROFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatBROFrames.setDescription('The number of BRO frames transmitted (TPAD) or received (HPAD).')
cdx6500GSCPStatPADChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatPADChars.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatPADChars.setDescription('The number of PAD characters received (TPAD) or transmitted (HPAD).')
cdx6500GSCPStatSADChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatSADChars.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatSADChars.setDescription('The number of SAD characters transmitted (TPAD) or received (HPAD).')
cdx6500GSCPStatUADChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatUADChars.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatUADChars.setDescription('The number of UAD characters transmitted (TPAD) or received (HPAD).')
cdx6500GSCPStatENQs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatENQs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatENQs.setDescription('The number of ENQ characters received (TPAD) or transmitted (HPAD).')
cdx6500GSCPStatPACChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatPACChars.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatPACChars.setDescription('The number of PAC characters received (TPAD) or transmitted (HPAD).')
cdx6500GSCPStatSACChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatSACChars.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatSACChars.setDescription('The number of SAC characters transmitted (TPAD) or received (HPAD).')
cdx6500GSCPStatUACChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatUACChars.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatUACChars.setDescription('The number of UAC characters transmitted (TPAD) or received (HPAD).')
cdx6500GSCPStatPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 30, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCPStatPolls.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCPStatPolls.setDescription('The number of polls transmitted (TPAD) or received (HPAD).')
cdx6500SPSTGSCStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7), )
if mibBuilder.loadTexts: cdx6500SPSTGSCStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPSTGSCStationTable.setDescription('Statistics parameters relevant to GSC stations.')
cdx6500SPSTGSCStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1), ).setIndexNames((0, "GSC-OPT-MIB", "cdx6500GSCSStatPortNumber"), (0, "GSC-OPT-MIB", "cdx6500GSCSStatStationNum"))
if mibBuilder.loadTexts: cdx6500SPSTGSCStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPSTGSCStationEntry.setDescription('This table holds statistics parameters pertaining to GSC stations.')
cdx6500GSCSStatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatPortNumber.setDescription('The port number of the GSC port.')
cdx6500GSCSStatStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatStationNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatStationNum.setDescription('The GSC station number.')
cdx6500GSCSStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(51))).clone(namedValues=NamedValues(("gsc", 51)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatPortType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatPortType.setDescription('This indicates the port type.')
cdx6500GSCSStatSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gscTpad", 1), ("gscHpad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatSubtype.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatSubtype.setDescription('Indicates the sub-type of the associated port. gscHpad - Associated port is functioning as a host PAD. gscTpad - Associated port is functioning as a terminal PAD.')
cdx6500GSCSStatStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 29))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatStationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatStationAddress.setDescription('Configure station address.')
cdx6500GSCSStatStationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("busyOut", 2), ("up", 3), ("down", 4), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatStationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatStationStatus.setDescription("The station status: disabled - Station is disabled. enabled - Station is enabled. busyOut - Station is busied out. up - Station is up. down - Station is down. newvalDisabled - same functionality as 'disabled', new enumeration added for RFC1155 compatibility.")
cdx6500GSCSStatLastStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastStatsReset.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatLastStatsReset.setDescription('Time when the station statistics were last reset.')
cdx6500GSCSStatCharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatCharsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatCharsIn.setDescription('Number of characters received on the line, including data and control characters.')
cdx6500GSCSStatCharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatCharsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatCharsOut.setDescription('Number of characters transmitted on the line, including data and control characters.')
cdx6500GSCSStatCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatCharsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatCharsInPerSec.setDescription('Number of characters received per second on the line, including data and control characters.')
cdx6500GSCSStatCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatCharsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatCharsOutPerSec.setDescription('Number of characters transmitted per second on the line, including data and control characters.')
cdx6500GSCSStatChecksumErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatChecksumErrs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatChecksumErrs.setDescription('The number of frames received with checksum errors.')
cdx6500GSCSStatOverlengthFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatOverlengthFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatOverlengthFrames.setDescription('The number of frames received that were overlength.')
cdx6500GSCSStatPollRespTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatPollRespTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatPollRespTimeOuts.setDescription('The number of times a poll was issued without response from the terminal (TPAD only).')
cdx6500GSCSStatIntercharTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatIntercharTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatIntercharTimeOuts.setDescription('The number of receive frames aborted because of inter-character timeouts.')
cdx6500GSCSStatAckTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatAckTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatAckTimeOuts.setDescription('The number of transmitted frames which were not acknowledged.')
cdx6500GSCSStatPADFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatPADFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatPADFrames.setDescription('The number of PAD frames received (TPAD) or transmitted (HPAD).')
cdx6500GSCSStatSADFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatSADFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatSADFrames.setDescription('The number of SAD frames transmitted (TPAD) or received (HPAD).')
cdx6500GSCSStatUADFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatUADFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatUADFrames.setDescription('The number of UAD frames transmitted (TPAD) or received (HPAD).')
cdx6500GSCSStatBROFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatBROFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatBROFrames.setDescription('The number of BRO frames transmitted (TPAD) or received (HPAD).')
cdx6500GSCSStatPADChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatPADChars.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatPADChars.setDescription('The number of PAD characters received (TPAD) or transmitted (HPAD).')
cdx6500GSCSStatSADChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatSADChars.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatSADChars.setDescription('The number of SAD characters transmitted (TPAD) or received (HPAD).')
cdx6500GSCSStatUADChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatUADChars.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatUADChars.setDescription('The number of UAD characters transmitted (TPAD) or received (HPAD).')
cdx6500GSCSStatENQ = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatENQ.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatENQ.setDescription('The number of ENQ characters received (TPAD) or transmitted (HPAD).')
cdx6500GSCSStatPACChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatPACChars.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatPACChars.setDescription('The number of PAC characters received (TPAD) or transmitted (HPAD).')
cdx6500GSCSStatSACChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatSACChars.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatSACChars.setDescription('The number of SAC characters transmitted (TPAD) or received (HPAD).')
cdx6500GSCSStatUACChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatUACChars.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatUACChars.setDescription('The number of UAC characters transmitted (TPAD) or received (HPAD).')
cdx6500GSCSStatPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatPolls.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatPolls.setDescription('The number of Polls transmitted (TPAD) or received (HPAD).')
cdx6500GSCSStatPADMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatPADMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatPADMessages.setDescription('The number of PAD Messages received (HPAD) or transmitted (TPAD).')
cdx6500GSCSStatUADMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatUADMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatUADMessages.setDescription('The number of UAD Messages received (TPAD) or transmitted (HPAD).')
cdx6500GSCSStatSADMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatSADMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatSADMessages.setDescription('The number of SAD Messages received (TPAD) or transmitted (HPAD).')
cdx6500GSCSStatBROMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatBROMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatBROMessages.setDescription('The number of BRO Messages received (TPAD) or transmitted (HPAD).')
cdx6500GSCSStatSolicitAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatSolicitAbort.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatSolicitAbort.setDescription('The number of SOLICIT ABORT Messages received (TPAD) or transmitted (HPAD).')
cdx6500GSCSStatStatusEnq = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatStatusEnq.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatStatusEnq.setDescription('The number of STATUS ENQ Messages received (HPAD) or transmitted (TPAD).')
cdx6500GSCSStatDeviceUp = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatDeviceUp.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatDeviceUp.setDescription('The number of DEVICE UP Messages received (TPAD) or transmitted (HPAD).')
cdx6500GSCSStatDeviceDown = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatDeviceDown.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatDeviceDown.setDescription('The number of DEVICE DOWN Messages received (TPAD) or transmitted (HPAD).')
cdx6500GSCSStatCallCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibited", 1), ("disconnected", 2), ("calling", 3), ("called", 4), ("connected", 5), ("notDefined", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatCallCurrentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatCallCurrentStatus.setDescription('The current status of the call. inhibited :Current Status = Disconnected. disconnected :Current Status = Disconnected. calling :Current Status = Calling. called :Current Status = Called. connected :Current Status = Connected (data transfer). notDefined :Current Status = Undefined.')
cdx6500GSCSStatLastClrCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastClrCauseCode.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatLastClrCauseCode.setDescription('Last clear cause code.')
cdx6500GSCSStatLastClrDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastClrDiagCode.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatLastClrDiagCode.setDescription('Last clear diagnostic code.')
cdx6500GSCSStatLastInCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastInCalledAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatLastInCalledAddress.setDescription('The called address in the last inbound call.')
cdx6500GSCSStatLastInCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastInCallingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatLastInCallingAddress.setDescription('The calling address in the last inbound call.')
cdx6500GSCSStatLastInCallFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastInCallFacilities.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatLastInCallFacilities.setDescription('The facilities in the last inbound call.')
cdx6500GSCSStatLastInCallCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastInCallCUD.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatLastInCallCUD.setDescription('The Call User Data in the last inbound call.')
cdx6500GSCSStatLastOutCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastOutCalledAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatLastOutCalledAddress.setDescription('The called address in the last outbound call.')
cdx6500GSCSStatLastOutCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastOutCallingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatLastOutCallingAddress.setDescription('The calling address in the last outbound call.')
cdx6500GSCSStatLastOutCallFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastOutCallFacilities.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatLastOutCallFacilities.setDescription('The facilities in the last outbound call.')
cdx6500GSCSStatLastOutCallCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 7, 1, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500GSCSStatLastOutCallCUD.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500GSCSStatLastOutCallCUD.setDescription('The Call User Data in the last outbound call.')
cdx6500ContGSC = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12))
cdx6500ContGSCPTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 1), )
if mibBuilder.loadTexts: cdx6500ContGSCPTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContGSCPTable.setDescription('This table contains the port control objects')
cdx6500ContGSCPTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 1, 1), ).setIndexNames((0, "GSC-OPT-MIB", "cdx6500ContGSCPPortNum"))
if mibBuilder.loadTexts: cdx6500ContGSCPTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContGSCPTableEntry.setDescription('Each entry represents a port control parameter.')
cdx6500ContGSCPPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: cdx6500ContGSCPPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContGSCPPortNum.setDescription('GSC port Number.')
cdx6500ContGSCPBootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContGSCPBootPort.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContGSCPBootPort.setDescription('Boot the specified GSC port. boot : Boot the port noBoot : Do not boot the port.')
cdx6500ContGSCPEnablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContGSCPEnablePort.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContGSCPEnablePort.setDescription('Enable the specified GSC port. enable : Enable the GSC port. noEnable : Do not enable the GSC port.')
cdx6500ContGSCPDisablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContGSCPDisablePort.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContGSCPDisablePort.setDescription('Disable the specified GSC port. disable : Disable the GSC port. noDisable : Do not disable the GSC port.')
cdx6500ContGSCSTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 2), )
if mibBuilder.loadTexts: cdx6500ContGSCSTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContGSCSTable.setDescription('This table contains the station control objects.')
cdx6500ContGSCSTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 2, 1), ).setIndexNames((0, "GSC-OPT-MIB", "cdx6500ContGSCSPortNum"), (0, "GSC-OPT-MIB", "cdx6500ContGSCSStnNum"))
if mibBuilder.loadTexts: cdx6500ContGSCSTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContGSCSTableEntry.setDescription('Each entry represents a station control parameter.')
cdx6500ContGSCSPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: cdx6500ContGSCSPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContGSCSPortNum.setDescription('The GSC Port Number.')
cdx6500ContGSCSStnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: cdx6500ContGSCSStnNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContGSCSStnNum.setDescription('The GSC Station Number.')
cdx6500ContGSCSBootStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContGSCSBootStation.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContGSCSBootStation.setDescription('Boot the specified GSC station boot : Boot the station. noBoot : Do not boot the station.')
cdx6500ContGSCSEnableStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContGSCSEnableStation.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContGSCSEnableStation.setDescription('Enable the specified GSC station. enable : Enable the Station. noEnable : Do not enable the Station.')
cdx6500ContGSCSDisableStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500ContGSCSDisableStation.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContGSCSDisableStation.setDescription('Disable the specified GSC station. disable : Disable the station. noDisable : Do not disable the station.')
mibBuilder.exportSymbols("GSC-OPT-MIB", cdx6500GSCSStatSubtype=cdx6500GSCSStatSubtype, cdx6500Configuration=cdx6500Configuration, cdx6500GSCPCfgInterCharTimeOut=cdx6500GSCPCfgInterCharTimeOut, cdx6500Statistics=cdx6500Statistics, cdx6500GSCSStatPolls=cdx6500GSCSStatPolls, cdx6500GSCSCfgStationOptions=cdx6500GSCSCfgStationOptions, cdx6500GSCPCfgNumStations=cdx6500GSCPCfgNumStations, cdx6500GSCSStatUADMessages=cdx6500GSCSStatUADMessages, cdx6500ContGSCPBootPort=cdx6500ContGSCPBootPort, cdx6500GSCPCfgIdleDiscTimeOut=cdx6500GSCPCfgIdleDiscTimeOut, cdx6500GSCPStatLastStatsReset=cdx6500GSCPStatLastStatsReset, cdx6500GSCSStatSolicitAbort=cdx6500GSCSStatSolicitAbort, cdx6500GSCPStatAckTimeOuts=cdx6500GSCPStatAckTimeOuts, cdx6500GSCSStatSADMessages=cdx6500GSCSStatSADMessages, cdx6500ContGSCPEnablePort=cdx6500ContGSCPEnablePort, cdx6500GSCPCfgBroadcastHoldTimeOut=cdx6500GSCPCfgBroadcastHoldTimeOut, cdx6500GSCPStatPADChars=cdx6500GSCPStatPADChars, cdx6500PSTStationProtocolGroup=cdx6500PSTStationProtocolGroup, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500GSCSStatChecksumErrs=cdx6500GSCSStatChecksumErrs, cdx6500GSCSStatENQ=cdx6500GSCSStatENQ, cdx6500GSCSCfgStationNumber=cdx6500GSCSCfgStationNumber, cdx6500GSCSStatPADChars=cdx6500GSCSStatPADChars, cdx6500GSCPStatUACChars=cdx6500GSCPStatUACChars, cdx6500Controls=cdx6500Controls, cdx6500GSCPCfgAutocallRetryTimeOut=cdx6500GSCPCfgAutocallRetryTimeOut, cdx6500ContGSCPPortNum=cdx6500ContGSCPPortNum, cdx6500SPSTGSCStationTable=cdx6500SPSTGSCStationTable, cdx6500GSCPCfgClockSpeed=cdx6500GSCPCfgClockSpeed, cdx6500GSCPStatIntercharTimeOuts=cdx6500GSCPStatIntercharTimeOuts, cdx6500GSCSStatPortType=cdx6500GSCSStatPortType, cdx6500PCTStationProtocolGroup=cdx6500PCTStationProtocolGroup, DisplayString=DisplayString, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500GSCPStatPortStatus=cdx6500GSCPStatPortStatus, cdx6500GSCSStatSADFrames=cdx6500GSCSStatSADFrames, cdx6500GSCSStatLastInCallCUD=cdx6500GSCSStatLastInCallCUD, cdx6500GSCSStatStatusEnq=cdx6500GSCSStatStatusEnq, cdx6500GSCSStatUADFrames=cdx6500GSCSStatUADFrames, cdx6500GSCSStatStationStatus=cdx6500GSCSStatStationStatus, cdx6500GSCSStatDeviceDown=cdx6500GSCSStatDeviceDown, cdx6500GSCSStatPACChars=cdx6500GSCSStatPACChars, cdx6500GSCPStatUADFrames=cdx6500GSCPStatUADFrames, cdx6500GSCSStatLastInCalledAddress=cdx6500GSCSStatLastInCalledAddress, cdx6500ContGSCSPortNum=cdx6500ContGSCSPortNum, cdx6500GSCSStatCallCurrentStatus=cdx6500GSCSStatCallCurrentStatus, cdx6500GSCPCfgConnType=cdx6500GSCPCfgConnType, cdx6500GSCSStatStationAddress=cdx6500GSCSStatStationAddress, cdx6500GSCPStatPolls=cdx6500GSCPStatPolls, cdx6500GSCPCfgN1=cdx6500GSCPCfgN1, cdx6500GSCSStatLastStatsReset=cdx6500GSCSStatLastStatsReset, cdx6500GSCSStatPADFrames=cdx6500GSCSStatPADFrames, cdx6500GSCSCfgPortNumber=cdx6500GSCSCfgPortNumber, cdx6500GSCPCfgPortNumber=cdx6500GSCPCfgPortNumber, cdx6500GSCSStatLastInCallFacilities=cdx6500GSCSStatLastInCallFacilities, cdx6500GSCSStatCharsOutPerSec=cdx6500GSCSStatCharsOutPerSec, cdx6500GSCSCfgStationAddress=cdx6500GSCSCfgStationAddress, cdx6500SPSTGSCStationEntry=cdx6500SPSTGSCStationEntry, cdx6500GSCSStatStationNum=cdx6500GSCSStatStationNum, cdx6500ContGSC=cdx6500ContGSC, cdx6500GSCPCfgAckTimeOut=cdx6500GSCPCfgAckTimeOut, cdx6500GSCPStatPADFrames=cdx6500GSCPStatPADFrames, cdx6500GSCPCfgPollRespTimer=cdx6500GSCPCfgPollRespTimer, cdx6500ContGSCSTable=cdx6500ContGSCSTable, cdx6500GSCPStatPortNumber=cdx6500GSCPStatPortNumber, cdx6500GSCSStatLastOutCalledAddress=cdx6500GSCSStatLastOutCalledAddress, cdx6500GSCSCfgRemoteAddress=cdx6500GSCSCfgRemoteAddress, cdx6500GSCPCfgPortOptions=cdx6500GSCPCfgPortOptions, cdx6500GSCSStatLastInCallingAddress=cdx6500GSCSStatLastInCallingAddress, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500GSCSStatBROFrames=cdx6500GSCSStatBROFrames, cdx6500PPSTGSCPortTable=cdx6500PPSTGSCPortTable, cdx6500GSCSStatPortNumber=cdx6500GSCSStatPortNumber, cdx6500GSCPStatBROFrames=cdx6500GSCPStatBROFrames, cdx6500GSCSStatOverlengthFrames=cdx6500GSCSStatOverlengthFrames, cdx6500ContGSCSTableEntry=cdx6500ContGSCSTableEntry, cdx6500GSCPCfgWakeUpTimer=cdx6500GSCPCfgWakeUpTimer, cdx6500GSCSStatPADMessages=cdx6500GSCSStatPADMessages, cdx6500GSCSStatDeviceUp=cdx6500GSCSStatDeviceUp, cdx6500GSCPStatCharsInPerSec=cdx6500GSCPStatCharsInPerSec, cdx6500GSCSStatPollRespTimeOuts=cdx6500GSCSStatPollRespTimeOuts, cdx6500ContGSCPTableEntry=cdx6500ContGSCPTableEntry, cdx6500GSCPStatENQs=cdx6500GSCPStatENQs, cdx6500GSCSStatIntercharTimeOuts=cdx6500GSCSStatIntercharTimeOuts, cdx6500GSCPStatUADChars=cdx6500GSCPStatUADChars, cdx6500GSCPCfgNumRetries=cdx6500GSCPCfgNumRetries, cdx6500GSCSStatLastOutCallFacilities=cdx6500GSCSStatLastOutCallFacilities, cdx6500SPCTGSCStationEntry=cdx6500SPCTGSCStationEntry, cdx6500ContGSCPDisablePort=cdx6500ContGSCPDisablePort, cdx6500GSCSStatLastClrCauseCode=cdx6500GSCSStatLastClrCauseCode, codex=codex, cdx6500GSCPCfgSolicitedTimeOut=cdx6500GSCPCfgSolicitedTimeOut, cdx6500GSCSStatLastClrDiagCode=cdx6500GSCSStatLastClrDiagCode, cdx6500GSCSStatUADChars=cdx6500GSCSStatUADChars, cdx6500GSCPStatOverrunErrs=cdx6500GSCPStatOverrunErrs, cdx6500ContGSCSEnableStation=cdx6500ContGSCSEnableStation, cdx6500GSCPCfgMaxAutocallRetries=cdx6500GSCPCfgMaxAutocallRetries, cdx6500GSCPStatSubtype=cdx6500GSCPStatSubtype, cdx6500GSCPCfgSubtype=cdx6500GSCPCfgSubtype, cdx6500GSCPStatSACChars=cdx6500GSCPStatSACChars, cdx6500GSCPCfgHighSpeedElectricalInterfaceOption=cdx6500GSCPCfgHighSpeedElectricalInterfaceOption, cdx6500PPSTGSCPortEntry=cdx6500PPSTGSCPortEntry, cdx6500GSCSStatLastOutCallCUD=cdx6500GSCSStatLastOutCallCUD, cdx6500GSCPCfgPortType=cdx6500GSCPCfgPortType, cdx6500GSCPStatCharsIn=cdx6500GSCPStatCharsIn, cdx6500GSCSCfgAutocallMnem=cdx6500GSCSCfgAutocallMnem, cdx6500GSCPStatPortType=cdx6500GSCPStatPortType, cdx6500GSCPCfgMinPollPeriod=cdx6500GSCPCfgMinPollPeriod, cdx6500PPCTGSCPortEntry=cdx6500PPCTGSCPortEntry, cdx6500GSCPCfgPortAddress=cdx6500GSCPCfgPortAddress, cdx6500GSCSStatCharsIn=cdx6500GSCSStatCharsIn, cdx6500GSCPStatPollRespTimeOuts=cdx6500GSCPStatPollRespTimeOuts, cdx6500GSCPStatChecksumErrs=cdx6500GSCPStatChecksumErrs, cdx6500GSCPCfgN2=cdx6500GSCPCfgN2, cdx6500GSCPCfgV24ElectricalInterfaceOption=cdx6500GSCPCfgV24ElectricalInterfaceOption, cdxProductSpecific=cdxProductSpecific, cdx6500GSCSStatLastOutCallingAddress=cdx6500GSCSStatLastOutCallingAddress, cdx6500GSCSStatCharsInPerSec=cdx6500GSCSStatCharsInPerSec, cdx6500=cdx6500, cdx6500GSCPStatCharsOutPerSec=cdx6500GSCPStatCharsOutPerSec, cdx6500GSCSCfgBillingRecords=cdx6500GSCSCfgBillingRecords, cdx6500PPCTGSCPortTable=cdx6500PPCTGSCPortTable, cdx6500GSCPStatSADChars=cdx6500GSCPStatSADChars, cdx6500ContGSCSStnNum=cdx6500ContGSCSStnNum, cdx6500GSCSStatBROMessages=cdx6500GSCSStatBROMessages, cdx6500GSCPCfgElectricalInterfaceType=cdx6500GSCPCfgElectricalInterfaceType, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500GSCSStatUACChars=cdx6500GSCSStatUACChars, cdx6500GSCPStatCharsOut=cdx6500GSCPStatCharsOut, cdx6500ContGSCSBootStation=cdx6500ContGSCSBootStation, cdx6500GSCPStatPortSpeed=cdx6500GSCPStatPortSpeed, cdx6500GSCPStatPACChars=cdx6500GSCPStatPACChars, cdx6500ContGSCPTable=cdx6500ContGSCPTable, cdx6500GSCPStatSADFrames=cdx6500GSCPStatSADFrames, cdx6500SPCTGSCStationTable=cdx6500SPCTGSCStationTable, cdx6500GSCPStatOverlengthFrames=cdx6500GSCPStatOverlengthFrames, cdx6500GSCSStatSADChars=cdx6500GSCSStatSADChars, cdx6500GSCSStatCharsOut=cdx6500GSCSStatCharsOut, cdx6500GSCSStatAckTimeOuts=cdx6500GSCSStatAckTimeOuts, cdx6500ContGSCSDisableStation=cdx6500ContGSCSDisableStation, cdx6500GSCSCfgProtocolId=cdx6500GSCSCfgProtocolId, cdx6500GSCSStatSACChars=cdx6500GSCSStatSACChars)
