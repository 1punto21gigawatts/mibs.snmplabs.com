#
# PySNMP MIB module OMNI-gx2drr4x-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2drr4x-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:33:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
gx2Drr4x, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Drr4x")
trapPerceivedSeverity, trapNETrapLastTrapTimeStamp, trapIdentifier, trapChangedObjectId, trapChangedValueInteger, trapNetworkElemAlarmStatus, trapNetworkElemOperState, trapNetworkElemModelNumber, trapNetworkElemAdminState, trapNetworkElemAvailStatus, trapChangedValueDisplayString, trapNetworkElemSerialNum, trapText = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity", "trapNETrapLastTrapTimeStamp", "trapIdentifier", "trapChangedObjectId", "trapChangedValueInteger", "trapNetworkElemAlarmStatus", "trapNetworkElemOperState", "trapNetworkElemModelNumber", "trapNetworkElemAdminState", "trapNetworkElemAvailStatus", "trapChangedValueDisplayString", "trapNetworkElemSerialNum", "trapText")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, NotificationType, Counter64, iso, ObjectIdentity, IpAddress, Unsigned32, Gauge32, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "Counter64", "iso", "ObjectIdentity", "IpAddress", "Unsigned32", "Gauge32", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "TimeTicks", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Float(Counter32):
    pass

gx2drr4xDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 1))
gx2drr4xAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2), )
if mibBuilder.loadTexts: gx2drr4xAnalogTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2drr4xAnalogTable.setDescription('This table contains gx2drr4x specific analog parameters with nominal,limits and current values.')
gx2drr4xAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1), ).setIndexNames((0, "OMNI-gx2drr4x-MIB", "gx2drr4xAnalogTableIndex"))
if mibBuilder.loadTexts: gx2drr4xAnalogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2drr4xAnalogEntry.setDescription('This list contains the analog parameters and descriptions.')
gx2drr4xDigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3), )
if mibBuilder.loadTexts: gx2drr4xDigitalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2drr4xDigitalTable.setDescription('This table contains gx2drr4x specific digital parameters with nominal and current values.')
gx2drr4xDigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2), ).setIndexNames((0, "OMNI-gx2drr4x-MIB", "gx2drr4xDigitalTableIndex"))
if mibBuilder.loadTexts: gx2drr4xDigitalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2drr4xDigitalEntry.setDescription('This list contains individual digital parameters and descriptions.')
gx2drr4xStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4), )
if mibBuilder.loadTexts: gx2drr4xStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2drr4xStatusTable.setDescription('This table contains gx2drr4x specific status parameters with nominal and current values.')
gx2drr4xStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3), ).setIndexNames((0, "OMNI-gx2drr4x-MIB", "gx2drr4xStatusTableIndex"))
if mibBuilder.loadTexts: gx2drr4xStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2drr4xStatusEntry.setDescription('This list contains Status parameters and descriptions.')
gx2drr4xFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5), )
if mibBuilder.loadTexts: gx2drr4xFactoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2drr4xFactoryTable.setDescription('This table contains gx2drr4x specific factory setting parameters with nominal and current values.')
gx2drr4xFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4), ).setIndexNames((0, "OMNI-gx2drr4x-MIB", "gx2drr4xFactoryTableIndex"))
if mibBuilder.loadTexts: gx2drr4xFactoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2drr4xFactoryEntry.setDescription('This list contains Factory setting parameters and descriptions.')
gx2drr4xAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2drr4xAnalogTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2drr4xAnalogTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
drr4xlabelRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelRFAAttenuation.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabelRFAAttenuation.setDescription('The value of this object provides the label of the RF Channel A Attenuation Analog parameter.')
drr4xuomRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xuomRFAAttenuation.setStatus('optional')
if mibBuilder.loadTexts: drr4xuomRFAAttenuation.setDescription('The value of this object provides the Unit of Measure of the RF Channel A Attenuation Analog parameter. The unit is in dB')
drr4xmajorHighRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorHighRFAAttenuation.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xmajorHighRFAAttenuation.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xmajorLowRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorLowRFAAttenuation.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xmajorLowRFAAttenuation.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xminorHighRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorHighRFAAttenuation.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xminorHighRFAAttenuation.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xminorLowRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorLowRFAAttenuation.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xminorLowRFAAttenuation.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xcurrentValueRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 8), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drr4xcurrentValueRFAAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xcurrentValueRFAAttenuation.setDescription('The value of this object provides the Current value of the RF Channel A Attenuation Analog parameter.')
drr4xstateFlagRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateFlagRFAAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateFlagRFAAttenuation.setDescription('The value of this object provides the state of the RF Channel A Attenuation Analog parameter. (1-hidden 2-read-only, 3-updateable).')
drr4xminValueRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminValueRFAAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xminValueRFAAttenuation.setDescription('The value of this object provides the minimum value the RF Channel A Attenuation Analog parameter can achive.')
drr4xmaxValueRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmaxValueRFAAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xmaxValueRFAAttenuation.setDescription('The value of this object provides the maximum value the RF Channel A Attenuation Analog parameter can achive.')
drr4xalarmStateRFAAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xalarmStateRFAAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xalarmStateRFAAttenuation.setDescription('The value of this object provides the curent alarm state of the RF Channel A Attenuation Analog parameter.')
drr4xlabelRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelRFBAttenuation.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabelRFBAttenuation.setDescription('The value of this object provides the label of the RF Channel B Attenuation Analog parameter.')
drr4xuomRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xuomRFBAttenuation.setStatus('optional')
if mibBuilder.loadTexts: drr4xuomRFBAttenuation.setDescription('The value of this object provides the Unit of Measure of the RF Channel B Attenuation Analog parameter.')
drr4xmajorHighRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorHighRFBAttenuation.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xmajorHighRFBAttenuation.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xmajorLowRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorLowRFBAttenuation.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xmajorLowRFBAttenuation.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xminorHighRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorHighRFBAttenuation.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xminorHighRFBAttenuation.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xminorLowRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorLowRFBAttenuation.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xminorLowRFBAttenuation.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF. It is kept here for persistence.')
drr4xcurrentValueRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 19), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drr4xcurrentValueRFBAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xcurrentValueRFBAttenuation.setDescription('The value of this object provides the Current value of the RF Channel B Attenuation Analog parameter. The unit is dB ')
drr4xstateFlagRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateFlagRFBAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateFlagRFBAttenuation.setDescription('The value of this object provides the state of the RF Channel B Attenuation Analog parameter. (1-hidden 2-read-only, 3-updateable).')
drr4xminValueRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminValueRFBAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xminValueRFBAttenuation.setDescription('The value of this object provides the minimum value the RF Channel B Attenuation Analog parameter can achive.')
drr4xmaxValueRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmaxValueRFBAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xmaxValueRFBAttenuation.setDescription('The value of this object provides the maximum value the RF Channel B Attenuation Analog parameter can achive.')
drr4xalarmStateRFBAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xalarmStateRFBAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xalarmStateRFBAttenuation.setDescription('The value of this object provides the curent alarm state of the RF Channel B Attenuation Analog parameter.')
drr4xlabelRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelRFCAttenuation.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabelRFCAttenuation.setDescription('The value of this object provides the label of the RF Channel C Attenuation Analog parameter.')
drr4xuomRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xuomRFCAttenuation.setStatus('optional')
if mibBuilder.loadTexts: drr4xuomRFCAttenuation.setDescription('The value of this object provides the Unit of Measure of the RF Channel C Attenuation Analog parameter.')
drr4xmajorHighRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorHighRFCAttenuation.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xmajorHighRFCAttenuation.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xmajorLowRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorLowRFCAttenuation.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xmajorLowRFCAttenuation.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xminorHighRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorHighRFCAttenuation.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xminorHighRFCAttenuation.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xminorLowRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorLowRFCAttenuation.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xminorLowRFCAttenuation.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF. It is kept here for persistence.')
drr4xcurrentValueRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 30), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drr4xcurrentValueRFCAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xcurrentValueRFCAttenuation.setDescription('The value of this object provides the Current value of the RF Channel C Attenuation Analog parameter. The unit is dB ')
drr4xstateFlagRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateFlagRFCAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateFlagRFCAttenuation.setDescription('The value of this object provides the state of the RF Channel C Attenuation Analog parameter. (1-hidden 2-read-only, 3-updateable).')
drr4xminValueRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminValueRFCAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xminValueRFCAttenuation.setDescription('The value of this object provides the minimum value the RF Channel C Attenuation Analog parameter can achive.')
drr4xmaxValueRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmaxValueRFCAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xmaxValueRFCAttenuation.setDescription('The value of this object provides the maximum value the RF Channel C Attenuation Analog parameter can achive.')
drr4xalarmStateRFCAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xalarmStateRFCAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xalarmStateRFCAttenuation.setDescription('The value of this object provides the curent alarm state of the RF Channel C Attenuation Analog parameter.')
drr4xlabelRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelRFDAttenuation.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabelRFDAttenuation.setDescription('The value of this object provides the label of the RF Channel D Attenuation Analog parameter.')
drr4xuomRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xuomRFDAttenuation.setStatus('optional')
if mibBuilder.loadTexts: drr4xuomRFDAttenuation.setDescription('The value of this object provides the Unit of Measure of the RF Channel D Attenuation Analog parameter.')
drr4xmajorHighRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorHighRFDAttenuation.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xmajorHighRFDAttenuation.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xmajorLowRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorLowRFDAttenuation.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xmajorLowRFDAttenuation.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xminorHighRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorHighRFDAttenuation.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xminorHighRFDAttenuation.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xminorLowRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorLowRFDAttenuation.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xminorLowRFDAttenuation.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF. It is kept here for persistence.')
drr4xcurrentValueRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 41), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drr4xcurrentValueRFDAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xcurrentValueRFDAttenuation.setDescription('The value of this object provides the Current value of the RF Channel D Attenuation Analog parameter. The unit is dB ')
drr4xstateFlagRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateFlagRFDAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateFlagRFDAttenuation.setDescription('The value of this object provides the state of the RF Channel D Attenuation Analog parameter. (1-hidden 2-read-only, 3-updateable).')
drr4xminValueRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminValueRFDAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xminValueRFDAttenuation.setDescription('The value of this object provides the minimum value the RF Channel B Attenuation Analog parameter can achive.')
drr4xmaxValueRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmaxValueRFDAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xmaxValueRFDAttenuation.setDescription('The value of this object provides the maximum value the RF Channel D Attenuation Analog parameter can achive.')
drr4xalarmStateRFDAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xalarmStateRFDAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xalarmStateRFDAttenuation.setDescription('The value of this object provides the curent alarm state of the RF Channel D Attenuation Analog parameter.')
drr4xlabelTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelTrippointLevel.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabelTrippointLevel.setDescription('The value of this object provides the label of the trip point level Analog parameter.')
drr4xuomTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xuomTrippointLevel.setStatus('optional')
if mibBuilder.loadTexts: drr4xuomTrippointLevel.setDescription('The value of this object provides the Unit of Measure of the trip point level Analog parameter.')
drr4xmajorHighTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorHighTrippointLevel.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xmajorHighTrippointLevel.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xmajorLowTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorLowTrippointLevel.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xmajorLowTrippointLevel.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xminorHighTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorHighTrippointLevel.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xminorHighTrippointLevel.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xminorLowTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorLowTrippointLevel.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xminorLowTrippointLevel.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xcurrentValueTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 52), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drr4xcurrentValueTrippointLevel.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xcurrentValueTrippointLevel.setDescription('The value of this object provides the Current value of the trip point level Analog parameter. The trip point level set the custumer preferred optical input level. This parameter combined with trippoint mode decides the trippoint alarm and RF channel output impedance. when optical power level is lower than trip point level(Set by this parameter) 1) When trip point mode is ALARM_SWITCH, trip point alarm will be generated and RF output impedance will be changed to high impedance. 2) When trippoint mode is ALARM_ONLY, trippoint alarm will be generated but RF output inpedance remains to be low impedance. This trip point level value is a floating point number that is represented as an IEEE 32 bit number.')
drr4xstateFlagTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateFlagTrippointLevel.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateFlagTrippointLevel.setDescription('The value of this object provides the state of the trip point level Analog parameter. (1-hidden 2-read-only, 3-updateable).')
drr4xminValueTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminValueTrippointLevel.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xminValueTrippointLevel.setDescription('The value of this object provides the minimum value the trip point level Analog parameter can achive.')
drr4xmaxValueTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmaxValueTrippointLevel.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xmaxValueTrippointLevel.setDescription('The value of this object provides the maximum value the trip point level Analog parameter can achive.')
drr4xalarmStateTrippointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xalarmStateTrippointLevel.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xalarmStateTrippointLevel.setDescription('The value of this object provides the curent alarm state of the trip point level Analog parameter.')
drr4xlabelOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelOptCurrent.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabelOptCurrent.setDescription('The value of this object provides the label of the Optical Power Current Analog parameter.')
drr4xuomOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xuomOptCurrent.setStatus('optional')
if mibBuilder.loadTexts: drr4xuomOptCurrent.setDescription('The value of this object provides the Unit of Measure of the Optical Power Current Analog parameter.')
drr4xmajorHighOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorHighOptCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xmajorHighOptCurrent.setDescription('The value of this object provides the Major High alarm value of the Optical Power Current Analog parameter.')
drr4xmajorLowOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorLowOptCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xmajorLowOptCurrent.setDescription('The value of this object provides the Major Low alarm value of the Optical Power Current Analog parameter.')
drr4xminorHighOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorHighOptCurrent.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xminorHighOptCurrent.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xminorLowOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorLowOptCurrent.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xminorLowOptCurrent.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xcurrentValueOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xcurrentValueOptCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xcurrentValueOptCurrent.setDescription('The value of this object provides the Current value of the Optical Power Current Analog parameter. The input optical power in lower than min value, drr4xcurrentValueOptCurrent will report -99dBm The input optical power in higher than this value, drr4xcurrentValueOptCurrent will report 99dBm')
drr4xstateFlagOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateFlagOptCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateFlagOptCurrent.setDescription('The value of this object provides the state of the Optical Power Current Analog parameter. (1-hidden 2-read-only, 3-updateable).')
drr4xminValueOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminValueOptCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xminValueOptCurrent.setDescription('This is recommended min range for display gauge')
drr4xmaxValueOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmaxValueOptCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xmaxValueOptCurrent.setDescription('This is recommended max range for display gauge')
drr4xalarmStateOptCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xalarmStateOptCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xalarmStateOptCurrent.setDescription('The value of this object provides the curent alarm state of the Optical Power Current Analog parameter.')
drr4xlabel12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabel12VCurrent.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabel12VCurrent.setDescription('The value of this object provides the label of the 12v power supply Current Analog parameter.')
drr4xuom12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xuom12VCurrent.setStatus('optional')
if mibBuilder.loadTexts: drr4xuom12VCurrent.setDescription('The value of this object provides the Unit of Measure of the 12v power supply Current Analog parameter.')
drr4xmajorHigh12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorHigh12VCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xmajorHigh12VCurrent.setDescription('The value of this object provides the Major High alarm value of the 12v power supply Current Analog parameter.')
drr4xmajorLow12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorLow12VCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xmajorLow12VCurrent.setDescription('The value of this object provides the Major Low alarm value of the 12v power supply Current Analog parameter.')
drr4xminorHigh12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorHigh12VCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xminorHigh12VCurrent.setDescription('The value of this object provides the Minor High alarm value of the 12v power supply Current Analog parameter.')
drr4xminorLow12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorLow12VCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xminorLow12VCurrent.setDescription('The value of this object provides the Minor Low alarm value of the 12v power supply Current Analog parameter.')
drr4xcurrentValue12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xcurrentValue12VCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xcurrentValue12VCurrent.setDescription('The value of this object provides the Current value of the 12v power supply Current parameter.')
drr4xstateFlag12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateFlag12VCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateFlag12VCurrent.setDescription('The value of this object provides the state of the 12v power supply Current Analog parameter. (1-hidden 2-read-only, 3-updateable).')
drr4xminValue12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminValue12VCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xminValue12VCurrent.setDescription('The value of this object provides the minimum value the 12v power supply Current Analog parameter can achive.')
drr4xmaxValue12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmaxValue12VCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xmaxValue12VCurrent.setDescription('The value of this object provides the maximum value the 12v power supply Current Analog parameter can achive.')
drr4xalarmState12VCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xalarmState12VCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xalarmState12VCurrent.setDescription('The value of this object provides the curent alarm state of the 12v power supply Current Analog parameter.')
drr4xlabelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelModTemp.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabelModTemp.setDescription('The value of this object provides the label of the Module Temperature Analog parameter.')
drr4xuomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xuomModTemp.setStatus('optional')
if mibBuilder.loadTexts: drr4xuomModTemp.setDescription('The value of this object provides the Unit of Measure of the Module Temperature Analog parameter.')
drr4xmajorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xmajorHighModTemp.setDescription('The value of this object provides the Major High alarm value of the Module Temperature Analog parameter.')
drr4xmajorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xmajorLowModTemp.setDescription('The value of this object provides the Major Low alarm value of the Module Temperature Analog parameter.')
drr4xminorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xminorHighModTemp.setDescription('The value of this object provides the Minor High alarm value of the Module Temperature Analog parameter.')
drr4xminorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xminorLowModTemp.setDescription('The value of this object provides the Minor Low alarm value of the Module Temperature Analog parameter.')
drr4xcurrentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xcurrentValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xcurrentValueModTemp.setDescription('The value of this object provides the Current value of the Module Temperature Analog parameter.')
drr4xstateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateFlagModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateFlagModTemp.setDescription('The value of this object provides the state of the Module Temperature Analog parameter. (1-hidden 2-read-only, 3-updateable).')
drr4xminValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xminValueModTemp.setDescription('The value of this object provides the minimum value the Module Temperature Analog parameter can achive.')
drr4xmaxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmaxValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xmaxValueModTemp.setDescription('The value of this object provides the maximum value the Module Temperature Analog parameter can achive.')
drr4xalarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xalarmStateModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xalarmStateModTemp.setDescription('The value of this object provides the curent alarm state of the Module Temperature Analog parameter.')
drr4xlabelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelFanCurrent.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabelFanCurrent.setDescription('The value of this object provides the label of the Fan Current Analog parameter.')
drr4xuomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xuomFanCurrent.setStatus('optional')
if mibBuilder.loadTexts: drr4xuomFanCurrent.setDescription('The value of this object provides the Unit of Measure of the Fan Current Analog parameter.')
drr4xmajorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 92), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorHighFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xmajorHighFanCurrent.setDescription('The value of this object provides the Major High alarm value of the Fan Current Analog parameter.')
drr4xmajorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 93), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmajorLowFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xmajorLowFanCurrent.setDescription('The value of this object provides the Major Low alarm value of the Fan Current Analog parameter.')
drr4xminorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 94), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorHighFanCurrent.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xminorHighFanCurrent.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xminorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 95), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminorLowFanCurrent.setStatus('obsolete')
if mibBuilder.loadTexts: drr4xminorLowFanCurrent.setDescription('This object is not used by this module and always returns invalid float value of 0xFFFFFFFF . It is kept here for persistence.')
drr4xcurrentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 96), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xcurrentValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xcurrentValueFanCurrent.setDescription('The value of this object provides the Current value of the Fan Current Analog parameter.')
drr4xstateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateFlagFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateFlagFanCurrent.setDescription('The value of this object provides the state of the Module Temperature Analog parameter. (1-hidden 2-read-only, 3-updateable).')
drr4xminValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 98), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xminValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xminValueFanCurrent.setDescription('The value of this object provides the minimum value the Fan Current Analog parameter can achive.')
drr4xmaxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 99), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xmaxValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xmaxValueFanCurrent.setDescription('The value of this object provides the maximum value the Fan Current Analog parameter can achive.')
drr4xalarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xalarmStateFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xalarmStateFanCurrent.setDescription('The value of this object provides the curent alarm state of the Fan Current Analog parameter.')
gx2drr4xDigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2drr4xDigitalTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2drr4xDigitalTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
drr4xlabelTrippointMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelTrippointMode.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabelTrippointMode.setDescription('The value of this object provides the label of the Trip point mode Digital parameter. The trip point mode defines the RF switch action based on the optical power input to the DRR')
drr4xenumTrippointMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xenumTrippointMode.setStatus('optional')
if mibBuilder.loadTexts: drr4xenumTrippointMode.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. ')
drr4xvalueTrippointMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarmOnly", 2), ("alarm-and-Switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drr4xvalueTrippointMode.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xvalueTrippointMode.setDescription('The value of this object is the current value of trip point mode. There are three possible value: 1-off, 2-alarm_only, 3-alarm&switch. If module input optical power is higher than the preset trippoint value, no operational difference for these three modes. If module input optical power is less than the preset trippoint value, 1) When trippoint mode is OFF, no trippoint alarm will be generated and RF output impedance will stay normal as low. 2) When tripoint mode is ALARM_ONLY, trip_point alarm will be generated when the input optical power lower than the preset trippoint level but RF output impedance will stay normal as low. 3) When trippoint mode is ALARM_SWITCH, trip point alarm will be generated and RF output impedance will switch to abnorml')
drr4xstateflagTrippointMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("readOnly", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagTrippointMode.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateflagTrippointMode.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
drr4xlabelFactoryDefaultReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelFactoryDefaultReset.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabelFactoryDefaultReset.setDescription('The value of this object provides the label of the Factory Default Reset Digital parameter.')
drr4xenumFactoryDefaultReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xenumFactoryDefaultReset.setStatus('optional')
if mibBuilder.loadTexts: drr4xenumFactoryDefaultReset.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
drr4xvalueFactoryDefaultReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drr4xvalueFactoryDefaultReset.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xvalueFactoryDefaultReset.setDescription('The read of this value will return a invalid value. The read will not reflect the actual setting value for this parameter ')
drr4xstateflagFactoryDefaultReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagFactoryDefaultReset.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateflagFactoryDefaultReset.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
gx2drr4xStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2drr4xStatusTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2drr4xStatusTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
drr4xlabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelBoot.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabelBoot.setDescription('The value of this object provides the label of the Boot Status parameter.')
drr4xvalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xvalueBoot.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xvalueBoot.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
drr4xstateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagBoot.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateflagBoot.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
drr4xlabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelFlash.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabelFlash.setDescription('The value of this object provides the label of the Flash Status parameter.')
drr4xvalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xvalueFlash.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xvalueFlash.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
drr4xstateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagFlash.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateflagFlash.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
drr4xlabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelFactoryDataCRC.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabelFactoryDataCRC.setDescription('The value of this object provides the label of the Factory Data CRC Status parameter.')
drr4xvalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xvalueFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xvalueFactoryDataCRC.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
drr4xstateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateflagFactoryDataCRC.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
drr4xlabelAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelAlarmDataCrc.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabelAlarmDataCrc.setDescription('The value of this object provides the label of the Alarm Data Crc parameter.')
drr4xvalueAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xvalueAlarmDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xvalueAlarmDataCrc.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
drr4xstateflagAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagAlarmDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateflagAlarmDataCrc.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
drr4xlabelCalibrationDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelCalibrationDataCrc.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabelCalibrationDataCrc.setDescription('The value of this object provides the label of the Calibration Data Crc parameter.')
drr4xvalueCalibrationDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xvalueCalibrationDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xvalueCalibrationDataCrc.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
drr4xstateflagCalibrationDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagCalibrationDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateflagCalibrationDataCrc.setDescription('The value of this object provides the state of the the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
drr4xlabelHardwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelHardwareStatus.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabelHardwareStatus.setDescription('The value of this object provides the label of the Module Hardware Status parameter.')
drr4xvalueHardwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xvalueHardwareStatus.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xvalueHardwareStatus.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
drr4xstateflagHardwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagHardwareStatus.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateflagHardwareStatus.setDescription('The value of this object provides the state of the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
drr4xlabelOpticTripPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelOpticTripPointStatus.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabelOpticTripPointStatus.setDescription('The value of this object provides the label of the Optical Trip Point Status parameter.It indicates whether the optical power is above(0) or below(1) trip point value')
drr4xvalueOpticTripPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xvalueOpticTripPointStatus.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xvalueOpticTripPointStatus.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
drr4xstateflagOpticTripPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagOpticTripPointStatus.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateflagOpticTripPointStatus.setDescription('The value of this object provides the state of the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
drr4xlabelLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xlabelLinkStatus.setStatus('optional')
if mibBuilder.loadTexts: drr4xlabelLinkStatus.setDescription('The value of this object provides the label of the Link Activity Status parameter. It represents receiver out of SYN with transmitter or Demux can not detect the optical signal.')
drr4xvalueLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xvalueLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xvalueLinkStatus.setDescription('The value of this object provides the current state of the parameter (1-Ok, 2-Undetermined 3-Warning, 4-Minor, 5-Major, 6-Critical).')
drr4xstateflagLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 4, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xstateflagLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xstateflagLinkStatus.setDescription('The value of this object provides the state of the parameter. (1-Hidden 2-Read-Only, 3-Updateable).')
gx2drr4xFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2drr4xFactoryTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2drr4xFactoryTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
drr4xbootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xbootControlByte.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xbootControlByte.setDescription('The value of this object indicates which bank the firmware is currently being boot from.')
drr4xbootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xbootStatusByte.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xbootStatusByte.setDescription('This object indicates the status of the last boot')
drr4xbank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xbank1CRC.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xbank1CRC.setDescription('This object provides the CRC code of bank 0.')
drr4xbank2CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xbank2CRC.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xbank2CRC.setDescription('This object provides the CRC code of bank 1.')
drr4xprgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xprgEEPROMByte.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xprgEEPROMByte.setDescription('This object indicates if the EEPROM has been programmed')
drr4xfactoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xfactoryCRC.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xfactoryCRC.setDescription('This object provides the CRC code for the Factory data.')
drr4xcalculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("alarm", 2), ("calibration", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xcalculateCRC.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xcalculateCRC.setDescription('This object indicates which of the Emnums will have the CRC calculated (1-factory, 2-alarm, 3-calibration).')
drr4xhourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xhourMeter.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xhourMeter.setDescription('This object provides the hour meter reading of the module.')
drr4xflashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xflashPrgCntA.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xflashPrgCntA.setDescription('This object provides the number of times Bank 0 flash has been programmed.')
drr4xflashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xflashPrgCntB.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xflashPrgCntB.setDescription('This object provides the number of times Bank 1 flash has been programmed.')
drr4xflashBankARev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xflashBankARev.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xflashBankARev.setDescription('This object provides the revision of flash bank 0.')
drr4xflashBankBRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xflashBankBRev.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xflashBankBRev.setDescription('This object provides the revision of flash bank 1.')
drr4xSubAgentRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14, 5, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drr4xSubAgentRev.setStatus('mandatory')
if mibBuilder.loadTexts: drr4xSubAgentRev.setDescription('This object provides the subagent revision of receiver module.')
trapdrrConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdrrConfigChangeInteger.setDescription("This trap is issued if configuration of a single variable with integer type was changed (via ANY interface). TrapChangedValueInteger variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapdrrConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdrrConfigChangeDisplayString.setDescription("This trap is issued if configuration of a single variable with DispalayString type was changed (via ANY interface). TrapChangedValueDisplayString variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapdrr12VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdrr12VCurrentAlarm.setDescription('This trap is issued when the 12V power supply Current parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapdrrModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdrrModuleTempAlarm.setDescription('This trap is issued when the Internal Module Temperature goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapdrrFanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdrrFanCurrentAlarm.setDescription('This trap is issued when the Fan Current parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapdrrFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdrrFlashAlarm.setDescription('This trap is issued when the detects an error during Flash memory operations.')
trapdrrBankBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdrrBankBootAlarm.setDescription('This trap is issued when the module detects an error while booting from bank 0 or bank 1.')
trapdrrAlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdrrAlarmDataCRCAlarm.setDescription('This trap is issued when the Alarm Data CRC is incorrect.')
trapdrrHardwareErrAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdrrHardwareErrAlarm.setDescription('This trap is issued when hardware is abnormal.')
trapdrrOpticalSignalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdrrOpticalSignalAlarm.setDescription('This trap is issued when the optical signal is beyond the preset range.')
trapdrrFactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdrrFactoryDataCRCAlarm.setDescription('This trap is issued when the Factory Data CRC is incorrect.')
trapdrrResetFactoryDefaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdrrResetFactoryDefaultAlarm.setDescription('This trap is issued when the Factory Default Reset occurs.')
trapdrrTripPointAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdrrTripPointAlarm.setDescription('This trap is issued when the Input optical power is lower than the custumer set trip point and trippoint mode as ALARM_ONLY or SWITCH & ALARM.')
trapdrrLinkAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdrrLinkAlarm.setDescription('This trap is issued when receiver is out of SYN with transmitter')
trapdrrCalibrationDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 14) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapdrrCalibrationDataCRCAlarm.setDescription('This trap is issued when the Calibration Data CRC is incorrect')
mibBuilder.exportSymbols("OMNI-gx2drr4x-MIB", drr4xminValueRFAAttenuation=drr4xminValueRFAAttenuation, drr4xcurrentValueModTemp=drr4xcurrentValueModTemp, drr4xmaxValueOptCurrent=drr4xmaxValueOptCurrent, drr4xalarmStateRFAAttenuation=drr4xalarmStateRFAAttenuation, drr4xminorHighModTemp=drr4xminorHighModTemp, gx2drr4xStatusEntry=gx2drr4xStatusEntry, drr4xenumTrippointMode=drr4xenumTrippointMode, gx2drr4xAnalogEntry=gx2drr4xAnalogEntry, drr4xstateflagFlash=drr4xstateflagFlash, drr4xlabelHardwareStatus=drr4xlabelHardwareStatus, trapdrrFactoryDataCRCAlarm=trapdrrFactoryDataCRCAlarm, drr4xlabelFactoryDataCRC=drr4xlabelFactoryDataCRC, drr4xvalueLinkStatus=drr4xvalueLinkStatus, drr4xmajorLowOptCurrent=drr4xmajorLowOptCurrent, drr4xlabelRFDAttenuation=drr4xlabelRFDAttenuation, drr4xlabelLinkStatus=drr4xlabelLinkStatus, trapdrrOpticalSignalAlarm=trapdrrOpticalSignalAlarm, drr4xmaxValueRFBAttenuation=drr4xmaxValueRFBAttenuation, trapdrrCalibrationDataCRCAlarm=trapdrrCalibrationDataCRCAlarm, drr4xmaxValueRFDAttenuation=drr4xmaxValueRFDAttenuation, drr4xminorHigh12VCurrent=drr4xminorHigh12VCurrent, drr4xlabelOptCurrent=drr4xlabelOptCurrent, drr4xbank1CRC=drr4xbank1CRC, gx2drr4xAnalogTableIndex=gx2drr4xAnalogTableIndex, drr4xalarmStateModTemp=drr4xalarmStateModTemp, drr4xuomRFDAttenuation=drr4xuomRFDAttenuation, drr4xlabelFanCurrent=drr4xlabelFanCurrent, drr4xmaxValueTrippointLevel=drr4xmaxValueTrippointLevel, drr4xstateFlagRFCAttenuation=drr4xstateFlagRFCAttenuation, drr4xstateFlagOptCurrent=drr4xstateFlagOptCurrent, drr4xstateflagCalibrationDataCrc=drr4xstateflagCalibrationDataCrc, drr4xminValue12VCurrent=drr4xminValue12VCurrent, drr4xvalueTrippointMode=drr4xvalueTrippointMode, drr4xfactoryCRC=drr4xfactoryCRC, drr4xuomRFAAttenuation=drr4xuomRFAAttenuation, drr4xstateFlagRFBAttenuation=drr4xstateFlagRFBAttenuation, drr4xstateflagFactoryDefaultReset=drr4xstateflagFactoryDefaultReset, gx2drr4xDigitalTable=gx2drr4xDigitalTable, drr4xminorHighTrippointLevel=drr4xminorHighTrippointLevel, drr4xstateFlagTrippointLevel=drr4xstateFlagTrippointLevel, gx2drr4xDigitalTableIndex=gx2drr4xDigitalTableIndex, drr4xminorLowFanCurrent=drr4xminorLowFanCurrent, drr4xmajorHighRFCAttenuation=drr4xmajorHighRFCAttenuation, drr4xbank2CRC=drr4xbank2CRC, drr4xalarmStateTrippointLevel=drr4xalarmStateTrippointLevel, drr4xlabelRFAAttenuation=drr4xlabelRFAAttenuation, trapdrrLinkAlarm=trapdrrLinkAlarm, drr4xstateFlagRFAAttenuation=drr4xstateFlagRFAAttenuation, drr4xmajorLowRFDAttenuation=drr4xmajorLowRFDAttenuation, gx2drr4xDescriptor=gx2drr4xDescriptor, gx2drr4xDigitalEntry=gx2drr4xDigitalEntry, Float=Float, drr4xalarmStateFanCurrent=drr4xalarmStateFanCurrent, drr4xmajorLowTrippointLevel=drr4xmajorLowTrippointLevel, drr4xuomRFBAttenuation=drr4xuomRFBAttenuation, drr4xmajorHighRFAAttenuation=drr4xmajorHighRFAAttenuation, drr4xuom12VCurrent=drr4xuom12VCurrent, drr4xminorHighFanCurrent=drr4xminorHighFanCurrent, drr4xvalueBoot=drr4xvalueBoot, drr4xmaxValueRFAAttenuation=drr4xmaxValueRFAAttenuation, drr4xminValueRFCAttenuation=drr4xminValueRFCAttenuation, gx2drr4xFactoryEntry=gx2drr4xFactoryEntry, drr4xmajorHighRFDAttenuation=drr4xmajorHighRFDAttenuation, trapdrrConfigChangeDisplayString=trapdrrConfigChangeDisplayString, drr4xenumFactoryDefaultReset=drr4xenumFactoryDefaultReset, drr4xcurrentValueTrippointLevel=drr4xcurrentValueTrippointLevel, gx2drr4xStatusTable=gx2drr4xStatusTable, drr4xstateFlagFanCurrent=drr4xstateFlagFanCurrent, drr4xlabelFlash=drr4xlabelFlash, trapdrrBankBootAlarm=trapdrrBankBootAlarm, drr4xminValueOptCurrent=drr4xminValueOptCurrent, drr4xmajorHighModTemp=drr4xmajorHighModTemp, drr4xlabelFactoryDefaultReset=drr4xlabelFactoryDefaultReset, drr4xminorLowTrippointLevel=drr4xminorLowTrippointLevel, drr4xuomFanCurrent=drr4xuomFanCurrent, trapdrrFanCurrentAlarm=trapdrrFanCurrentAlarm, drr4xminValueTrippointLevel=drr4xminValueTrippointLevel, trapdrrResetFactoryDefaultAlarm=trapdrrResetFactoryDefaultAlarm, drr4xstateflagBoot=drr4xstateflagBoot, drr4xmajorHighTrippointLevel=drr4xmajorHighTrippointLevel, drr4xstateflagTrippointMode=drr4xstateflagTrippointMode, drr4xstateFlag12VCurrent=drr4xstateFlag12VCurrent, drr4xvalueFactoryDefaultReset=drr4xvalueFactoryDefaultReset, trapdrr12VCurrentAlarm=trapdrr12VCurrentAlarm, drr4xlabelTrippointMode=drr4xlabelTrippointMode, drr4xmaxValueModTemp=drr4xmaxValueModTemp, drr4xvalueFactoryDataCRC=drr4xvalueFactoryDataCRC, drr4xflashBankBRev=drr4xflashBankBRev, drr4xminorHighRFCAttenuation=drr4xminorHighRFCAttenuation, drr4xstateflagLinkStatus=drr4xstateflagLinkStatus, drr4xstateflagOpticTripPointStatus=drr4xstateflagOpticTripPointStatus, drr4xmaxValueFanCurrent=drr4xmaxValueFanCurrent, drr4xvalueCalibrationDataCrc=drr4xvalueCalibrationDataCrc, drr4xmajorLowRFCAttenuation=drr4xmajorLowRFCAttenuation, drr4xminValueRFDAttenuation=drr4xminValueRFDAttenuation, drr4xminorLowOptCurrent=drr4xminorLowOptCurrent, drr4xcurrentValueRFDAttenuation=drr4xcurrentValueRFDAttenuation, drr4xminorHighRFAAttenuation=drr4xminorHighRFAAttenuation, gx2drr4xAnalogTable=gx2drr4xAnalogTable, drr4xminorLowRFDAttenuation=drr4xminorLowRFDAttenuation, drr4xvalueFlash=drr4xvalueFlash, drr4xstateflagAlarmDataCrc=drr4xstateflagAlarmDataCrc, drr4xvalueHardwareStatus=drr4xvalueHardwareStatus, trapdrrFlashAlarm=trapdrrFlashAlarm, drr4xcurrentValueRFAAttenuation=drr4xcurrentValueRFAAttenuation, drr4xmaxValueRFCAttenuation=drr4xmaxValueRFCAttenuation, drr4xbootStatusByte=drr4xbootStatusByte, drr4xuomRFCAttenuation=drr4xuomRFCAttenuation, gx2drr4xFactoryTable=gx2drr4xFactoryTable, drr4xalarmState12VCurrent=drr4xalarmState12VCurrent, trapdrrHardwareErrAlarm=trapdrrHardwareErrAlarm, drr4xmajorHighOptCurrent=drr4xmajorHighOptCurrent, drr4xstateFlagModTemp=drr4xstateFlagModTemp, drr4xstateflagHardwareStatus=drr4xstateflagHardwareStatus, drr4xlabelRFCAttenuation=drr4xlabelRFCAttenuation, drr4xcurrentValueRFBAttenuation=drr4xcurrentValueRFBAttenuation, drr4xminValueModTemp=drr4xminValueModTemp, drr4xminorHighOptCurrent=drr4xminorHighOptCurrent, drr4xmajorLowModTemp=drr4xmajorLowModTemp, drr4xlabel12VCurrent=drr4xlabel12VCurrent, drr4xcurrentValueRFCAttenuation=drr4xcurrentValueRFCAttenuation, drr4xlabelTrippointLevel=drr4xlabelTrippointLevel, drr4xminorHighRFBAttenuation=drr4xminorHighRFBAttenuation, drr4xhourMeter=drr4xhourMeter, drr4xmajorHighFanCurrent=drr4xmajorHighFanCurrent, drr4xvalueAlarmDataCrc=drr4xvalueAlarmDataCrc, trapdrrConfigChangeInteger=trapdrrConfigChangeInteger, drr4xflashPrgCntB=drr4xflashPrgCntB, drr4xalarmStateRFDAttenuation=drr4xalarmStateRFDAttenuation, gx2drr4xStatusTableIndex=gx2drr4xStatusTableIndex, drr4xcurrentValueFanCurrent=drr4xcurrentValueFanCurrent, drr4xprgEEPROMByte=drr4xprgEEPROMByte, drr4xalarmStateRFBAttenuation=drr4xalarmStateRFBAttenuation, trapdrrModuleTempAlarm=trapdrrModuleTempAlarm, drr4xalarmStateRFCAttenuation=drr4xalarmStateRFCAttenuation, trapdrrAlarmDataCRCAlarm=trapdrrAlarmDataCRCAlarm, drr4xminorLowRFBAttenuation=drr4xminorLowRFBAttenuation, gx2drr4xFactoryTableIndex=gx2drr4xFactoryTableIndex, drr4xmaxValue12VCurrent=drr4xmaxValue12VCurrent, drr4xbootControlByte=drr4xbootControlByte, drr4xmajorHighRFBAttenuation=drr4xmajorHighRFBAttenuation, drr4xstateflagFactoryDataCRC=drr4xstateflagFactoryDataCRC, drr4xminValueRFBAttenuation=drr4xminValueRFBAttenuation, trapdrrTripPointAlarm=trapdrrTripPointAlarm, drr4xlabelOpticTripPointStatus=drr4xlabelOpticTripPointStatus, drr4xmajorLowRFBAttenuation=drr4xmajorLowRFBAttenuation, drr4xmajorLow12VCurrent=drr4xmajorLow12VCurrent, drr4xflashBankARev=drr4xflashBankARev, drr4xlabelRFBAttenuation=drr4xlabelRFBAttenuation, drr4xcurrentValue12VCurrent=drr4xcurrentValue12VCurrent, drr4xmajorHigh12VCurrent=drr4xmajorHigh12VCurrent, drr4xcurrentValueOptCurrent=drr4xcurrentValueOptCurrent, drr4xminValueFanCurrent=drr4xminValueFanCurrent, drr4xuomModTemp=drr4xuomModTemp, drr4xvalueOpticTripPointStatus=drr4xvalueOpticTripPointStatus, drr4xminorLowRFAAttenuation=drr4xminorLowRFAAttenuation, drr4xSubAgentRev=drr4xSubAgentRev, drr4xminorHighRFDAttenuation=drr4xminorHighRFDAttenuation, drr4xstateFlagRFDAttenuation=drr4xstateFlagRFDAttenuation, drr4xalarmStateOptCurrent=drr4xalarmStateOptCurrent, drr4xmajorLowRFAAttenuation=drr4xmajorLowRFAAttenuation, drr4xflashPrgCntA=drr4xflashPrgCntA, drr4xminorLow12VCurrent=drr4xminorLow12VCurrent, drr4xlabelAlarmDataCrc=drr4xlabelAlarmDataCrc, drr4xuomOptCurrent=drr4xuomOptCurrent, drr4xmajorLowFanCurrent=drr4xmajorLowFanCurrent, drr4xlabelCalibrationDataCrc=drr4xlabelCalibrationDataCrc, drr4xminorLowRFCAttenuation=drr4xminorLowRFCAttenuation, drr4xuomTrippointLevel=drr4xuomTrippointLevel, drr4xlabelBoot=drr4xlabelBoot, drr4xminorLowModTemp=drr4xminorLowModTemp, drr4xcalculateCRC=drr4xcalculateCRC, drr4xlabelModTemp=drr4xlabelModTemp)
