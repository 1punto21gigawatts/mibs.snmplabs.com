#
# PySNMP MIB module CIENA-CES-OSPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CIENA-CES-OSPF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:49:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
cienaCesConfig, = mibBuilder.importSymbols("CIENA-SMI", "cienaCesConfig")
AreaID, = mibBuilder.importSymbols("OSPF-MIB", "AreaID")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter64, ObjectIdentity, Counter32, Integer32, Bits, ModuleIdentity, IpAddress, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "ObjectIdentity", "Counter32", "Integer32", "Bits", "ModuleIdentity", "IpAddress", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "NotificationType")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
cienaCesOspfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19))
cienaCesOspfMIB.setRevisions(('2013-04-18 00:00', '2011-02-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cienaCesOspfMIB.setRevisionsDescriptions(('Fixed miscellaneous typos and descriptions.', 'Initial version.',))
if mibBuilder.loadTexts: cienaCesOspfMIB.setLastUpdated('201304180000Z')
if mibBuilder.loadTexts: cienaCesOspfMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: cienaCesOspfMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: cienaCesOspfMIB.setDescription('This MIB module is for the Extension of the OSPF MIB for CIENA Products')
class OspfOperStatus(TextualConvention, Integer32):
    description = 'The current operational state of an OSPF Protocol Manager entity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("operStatusUp", 1), ("operStatusDown", 2), ("operStatusGoingUp", 3), ("operStatusGoingDown", 4), ("operStatusActFailed", 5))

cienaCesOspfMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1))
cienaCesOspfGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 1))
cienaCesOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2))
cienaCesOspfRFC1583Comp = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfRFC1583Comp.setReference('OSPF Version 2, Section 16.4.1 External path preferences')
if mibBuilder.loadTexts: cienaCesOspfRFC1583Comp.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfRFC1583Comp.setDescription('Indicates metrics used to choose among multiple AS-external-LSAs. When RFC1583Compatibility is set to TRUE, only cost is used when choosing among multiple AS-external-LSAs advertising the same destination. When RFC1583Compatibility is set to FALSE, preference is driven first by type of path using cost only to break ties. In order to minimize the chance of routing loops, all OSPF routers in an OSPF routing domain should have RFC1583Compatibility set identically. When there are routers present that have not been updated with the functionality specified in RFC2328 Section 16.4.1, all routers should have RFC1583Compatibility set to TRUE. Otherwise, all routers should have RFC1583Compatibility set to FALSE, preventing all routing loops.')
cienaCesOspfOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 1, 2), OspfOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfOperStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfOperStatus.setDescription('The current operational state of OSPF.')
cienaCesOspfOpaqueLsaSupport = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfOpaqueLsaSupport.setReference('The OSPF Opaque LSA Option')
if mibBuilder.loadTexts: cienaCesOspfOpaqueLsaSupport.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfOpaqueLsaSupport.setDescription("The router's support for Opaque LSA types. This value cannot be changed when OSPF is active and operStatus is up.")
cienaCesOspfTrafficEngSupport = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfTrafficEngSupport.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfTrafficEngSupport.setDescription("The router's support for OSPF traffic engineering.")
cienaCesOspfExtOpLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfExtOpLsaCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfExtOpLsaCount.setDescription('The number of type-11 LSAs in the external database.')
cienaCesOspfExtOpLsaCksumSum = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfExtOpLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfExtOpLsaCksumSum.setDescription('The 32 bit sum of LS checksums of all type-11 LSAs in the external Link State Database.')
cienaCesOspfNumUpdPending = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfNumUpdPending.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfNumUpdPending.setDescription('The number of pending updates to the Link State Database.')
cienaCesOspfNumUpdMerged = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfNumUpdMerged.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfNumUpdMerged.setDescription('The number of updates that have been merged into the Link State Database since the last routing calculation.')
cienaCesOspfNumCksumsPending = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfNumCksumsPending.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfNumCksumsPending.setDescription('The number of LSAs in the Link State Database which are now due to have their checksum checked.')
cienaCesOspfCalcMaxDelay = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 1, 10), Unsigned32().clone(5000)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfCalcMaxDelay.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfCalcMaxDelay.setDescription('The maximum delay before the routing table is recalculated following a change to the Link State Database. (Recalculation is delayed to reduce the frequency of recalculations of the routing table). This parameter has units of milliseconds. A value of 0 indicates that a routing calculation will immediately follow an update to the database.')
cienaCesOspfRouterId = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfRouterId.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfRouterId.setDescription('Ospf router ID.')
cienaCesOspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 1), )
if mibBuilder.loadTexts: cienaCesOspfAreaTable.setReference('OSPF Version 2, Section 6 The Area Data Struc- ture')
if mibBuilder.loadTexts: cienaCesOspfAreaTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfAreaTable.setDescription("Information describing the configured parameters and cumulative statistics of the router's attached areas.")
cienaCesOspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 1, 1), ).setIndexNames((0, "CIENA-CES-OSPF-MIB", "cienaCesOspfAreaId"))
if mibBuilder.loadTexts: cienaCesOspfAreaEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfAreaEntry.setDescription("Information describing the configured parameters and cumulative statistics of one of the router's attached areas.")
cienaCesOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 1, 1, 1), AreaID())
if mibBuilder.loadTexts: cienaCesOspfAreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: cienaCesOspfAreaId.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfAreaId.setDescription('A 32-bit integer uniquely identifying an area. Area ID 0.0.0.0 is used for the OSPF backbone.')
cienaCesOspfAreaTransitCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfAreaTransitCapability.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfAreaTransitCapability.setDescription("This parameter indicates whether the area can carry data traffic that neither originates nor terminates in the area itself. This parameter is calculated when the area's shortest-path tree is built.")
cienaCesOspfAreaRtrLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfAreaRtrLsaCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfAreaRtrLsaCount.setDescription("The number of LSAs with LS type-1 in this area's Link State Database.")
cienaCesOspfAreaRtrLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfAreaRtrLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfAreaRtrLsaCksumSum.setDescription("The 32 bit sum of LS checksums of all LSAs with LS type-1 in this area's Link State Database.")
cienaCesOspfAreaNetLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfAreaNetLsaCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfAreaNetLsaCount.setDescription("The number of LSAs with LS type-2 in this area's Link State Database.")
cienaCesOspfAreaNetLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfAreaNetLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfAreaNetLsaCksumSum.setDescription("The 32 bit sum of LS checksums of all LSAs with LS type-2 in this area's Link State Database.")
cienaCesOspfAreaSummLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfAreaSummLsaCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfAreaSummLsaCount.setDescription("The number of LSAs with LS type-3 in this area's Link State Database.")
cienaCesOspfAreaSummLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfAreaSummLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfAreaSummLsaCksumSum.setDescription("The 32 bit sum of LS checksums of all LSAs with LS type-3 in this area's Link State Database.")
cienaCesOspfAreaSummAsLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfAreaSummAsLsaCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfAreaSummAsLsaCount.setDescription("The number of LSAs with LS type-4 in this area's Link State Database.")
cienaCesOspfAreaSummAsLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfAreaSummAsLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfAreaSummAsLsaCksumSum.setDescription("The 32 bit sum of LS checksums of all LSAs with LS type-4 in this area's Link State Database.")
cienaCesOspfAreaNssaLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfAreaNssaLsaCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfAreaNssaLsaCount.setDescription("The number of LSAs with LS type-7 in this area's Link State Database.")
cienaCesOspfAreaNssaLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfAreaNssaLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfAreaNssaLsaCksumSum.setDescription("The 32 bit sum of LS checksums of all LSAs with LS type-7 in this area's Link State Database.")
cienaCesOspfAreaOpLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfAreaOpLsaCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfAreaOpLsaCount.setDescription("The number of LSAs with LS type-10 in this area's Link State Database.")
cienaCesOspfAreaOpLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfAreaOpLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfAreaOpLsaCksumSum.setDescription("The 32 bit sum of LS checksums of all LSAs with LS type-10 in this area's Link State Database.")
cienaCesOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 2), )
if mibBuilder.loadTexts: cienaCesOspfIfTable.setReference('OSPF Version 2, Appendix C.3 Router interface parameters')
if mibBuilder.loadTexts: cienaCesOspfIfTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfIfTable.setDescription('The OSPF interface table describes the interfaces from the viewpoint of OSPF.')
cienaCesOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 2, 1), ).setIndexNames((0, "CIENA-CES-OSPF-MIB", "cienaCesOspfIfIpAddress"), (0, "CIENA-CES-OSPF-MIB", "cienaCesOspfAddressLessIf"))
if mibBuilder.loadTexts: cienaCesOspfIfEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfIfEntry.setDescription('The OSPF interface entry describes one interface from the viewpoint of OSPF.')
cienaCesOspfIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: cienaCesOspfIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfIfIpAddress.setDescription('The IP address of this OSPF interface.')
cienaCesOspfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cienaCesOspfAddressLessIf.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfAddressLessIf.setDescription('For the purpose of easing the instancing of addressed and addressless interfaces, this variable takes the value 0 on interfaces with IP addresses, and the corresponding value of ifIndex for interfaces having no IP address.')
cienaCesOspfIfLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfIfLsaCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfIfLsaCount.setDescription("The total number of link-local link state advertisements in this interface's link-local Link State Database.")
cienaCesOspfIfLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfIfLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfIfLsaCksumSum.setDescription("The 32-bit unsigned sum of the link-state advertisements' LS checksums contained in this interface's link-local Link State Database. The sum can be used to determine if there has been a change in the interface's Link State Database, and to compare the interface Link State Database of routers attached to the same subnet.")
cienaCesOspfIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 2, 1, 5), OspfOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfIfOperStatus.setDescription('The current operational state of this interface.')
cienaCesOspfIfNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfIfNetMask.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfIfNetMask.setDescription('The subnet mask associated with the IP address of this entry. The value of the mask is an IP address with all the network bits set to 1 and all the hosts bits set to 0.')
cienaCesOspfIfTransmitTimerDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 19, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 429496799)).clone(100)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesOspfIfTransmitTimerDelay.setStatus('current')
if mibBuilder.loadTexts: cienaCesOspfIfTransmitTimerDelay.setDescription('The time this interface delays a LSU packet, in order to add more LSAs to the packet before sending. Setting this correctly can reduce the network traffic. This is configurable on a per-interface basis.')
mibBuilder.exportSymbols("CIENA-CES-OSPF-MIB", cienaCesOspf=cienaCesOspf, cienaCesOspfCalcMaxDelay=cienaCesOspfCalcMaxDelay, cienaCesOspfAreaTransitCapability=cienaCesOspfAreaTransitCapability, cienaCesOspfRouterId=cienaCesOspfRouterId, OspfOperStatus=OspfOperStatus, cienaCesOspfIfIpAddress=cienaCesOspfIfIpAddress, cienaCesOspfIfLsaCount=cienaCesOspfIfLsaCount, cienaCesOspfNumUpdPending=cienaCesOspfNumUpdPending, cienaCesOspfNumCksumsPending=cienaCesOspfNumCksumsPending, cienaCesOspfRFC1583Comp=cienaCesOspfRFC1583Comp, cienaCesOspfAreaNetLsaCksumSum=cienaCesOspfAreaNetLsaCksumSum, cienaCesOspfAreaOpLsaCount=cienaCesOspfAreaOpLsaCount, cienaCesOspfIfTable=cienaCesOspfIfTable, cienaCesOspfAreaNetLsaCount=cienaCesOspfAreaNetLsaCount, cienaCesOspfOperStatus=cienaCesOspfOperStatus, cienaCesOspfOpaqueLsaSupport=cienaCesOspfOpaqueLsaSupport, cienaCesOspfExtOpLsaCksumSum=cienaCesOspfExtOpLsaCksumSum, cienaCesOspfMIB=cienaCesOspfMIB, cienaCesOspfIfTransmitTimerDelay=cienaCesOspfIfTransmitTimerDelay, cienaCesOspfIfOperStatus=cienaCesOspfIfOperStatus, cienaCesOspfAddressLessIf=cienaCesOspfAddressLessIf, cienaCesOspfAreaNssaLsaCount=cienaCesOspfAreaNssaLsaCount, cienaCesOspfAreaNssaLsaCksumSum=cienaCesOspfAreaNssaLsaCksumSum, cienaCesOspfMIBObjects=cienaCesOspfMIBObjects, cienaCesOspfAreaSummLsaCksumSum=cienaCesOspfAreaSummLsaCksumSum, cienaCesOspfAreaOpLsaCksumSum=cienaCesOspfAreaOpLsaCksumSum, cienaCesOspfAreaSummLsaCount=cienaCesOspfAreaSummLsaCount, cienaCesOspfAreaId=cienaCesOspfAreaId, cienaCesOspfIfNetMask=cienaCesOspfIfNetMask, cienaCesOspfExtOpLsaCount=cienaCesOspfExtOpLsaCount, cienaCesOspfTrafficEngSupport=cienaCesOspfTrafficEngSupport, cienaCesOspfNumUpdMerged=cienaCesOspfNumUpdMerged, cienaCesOspfIfEntry=cienaCesOspfIfEntry, cienaCesOspfAreaSummAsLsaCount=cienaCesOspfAreaSummAsLsaCount, cienaCesOspfAreaRtrLsaCount=cienaCesOspfAreaRtrLsaCount, cienaCesOspfAreaSummAsLsaCksumSum=cienaCesOspfAreaSummAsLsaCksumSum, cienaCesOspfGeneralGroup=cienaCesOspfGeneralGroup, cienaCesOspfAreaTable=cienaCesOspfAreaTable, cienaCesOspfAreaRtrLsaCksumSum=cienaCesOspfAreaRtrLsaCksumSum, PYSNMP_MODULE_ID=cienaCesOspfMIB, cienaCesOspfIfLsaCksumSum=cienaCesOspfIfLsaCksumSum, cienaCesOspfAreaEntry=cienaCesOspfAreaEntry)
