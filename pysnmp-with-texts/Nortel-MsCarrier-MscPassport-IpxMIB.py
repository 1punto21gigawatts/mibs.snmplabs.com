#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-IpxMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-IpxMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:30:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
Counter32, Unsigned32, PhysAddress, StorageType, Integer32, Gauge32, DisplayString, RowStatus = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "Counter32", "Unsigned32", "PhysAddress", "StorageType", "Integer32", "Gauge32", "DisplayString", "RowStatus")
NonReplicated, AsciiStringIndex, Hex, AsciiString, DashedHexString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "NonReplicated", "AsciiStringIndex", "Hex", "AsciiString", "DashedHexString")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
mscVrPp, mscVrIndex, mscVrPpIndex, mscVr = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPp", "mscVrIndex", "mscVrPpIndex", "mscVr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, ObjectIdentity, Unsigned32, ModuleIdentity, Counter64, Integer32, NotificationType, MibIdentifier, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "Counter64", "Integer32", "NotificationType", "MibIdentifier", "Gauge32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ipxMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 28))
mscVrPpIpxP = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6))
mscVrPpIpxPRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 1), )
if mibBuilder.loadTexts: mscVrPpIpxPRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrPpIpxP components.')
mscVrPpIpxPRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPIndex"))
if mibBuilder.loadTexts: mscVrPpIpxPRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPRowStatusEntry.setDescription('A single entry in the table represents a single mscVrPpIpxP component.')
mscVrPpIpxPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrPpIpxPRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrPpIpxP components. These components can be added and deleted.')
mscVrPpIpxPComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrPpIpxPStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPStorageType.setDescription('This variable represents the storage type value for the mscVrPpIpxP tables.')
mscVrPpIpxPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("link", 1), ("ethernet", 2), ("novell", 3), ("sap", 4), ("snap", 5), ("vns", 6), ("tunnel", 7))))
if mibBuilder.loadTexts: mscVrPpIpxPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPIndex.setDescription('This variable represents the index for the mscVrPpIpxP tables.')
mscVrPpIpxPAdminControlTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 100), )
if mibBuilder.loadTexts: mscVrPpIpxPAdminControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPAdminControlTable.setDescription('This group includes the Administrative Control attribute. This attribute defines the current administrative state of this component.')
mscVrPpIpxPAdminControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPIndex"))
if mibBuilder.loadTexts: mscVrPpIpxPAdminControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPAdminControlEntry.setDescription('An entry in the mscVrPpIpxPAdminControlTable.')
mscVrPpIpxPSnmpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrPpIpxPSnmpAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSnmpAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational and packet forwarding is allowed. The down state indicates the interface is not operational and packet forwarding is unavailable. The testing state indicates that no operational packets can be passed.')
mscVrPpIpxPProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 101), )
if mibBuilder.loadTexts: mscVrPpIpxPProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPProvTable.setDescription('The Provisionable group for the IpxPort component.')
mscVrPpIpxPProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 101, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPIndex"))
if mibBuilder.loadTexts: mscVrPpIpxPProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPProvEntry.setDescription('An entry in the mscVrPpIpxPProvTable.')
mscVrPpIpxPNetworkNumberProv = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 101, 1, 1), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrPpIpxPNetworkNumberProv.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPNetworkNumberProv.setDescription('The Ipx network number of the network directly connected to this port.')
mscVrPpIpxPDefaultType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 101, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("broadcast", 2), ("ppp", 3), ("wanRip", 4), ("unnumberedRip", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrPpIpxPDefaultType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPDefaultType.setDescription('This attribute indicates which protocol is to run on a protocol port. In the case of a lan media it is to be set to broadcast. In the case of WAN media the following choices are to be exercised: For running Pre-IPXWAN RIP set value to other. For running numbered RIP set value to wanRip. For running un-numbered RIP set value to unnumberedRip. Setting this value to ppp will signify unnumbered Rip running on a ppp port.')
mscVrPpIpxPBroadcastInhibit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 101, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrPpIpxPBroadcastInhibit.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPBroadcastInhibit.setDescription("If this attribute is set, all outgoing periodic and triggered updates for RIP and SAP will be inhibited for the port. However the port will still accept incoming RIP and SAP packets on the port. This may be useful for ports with only a bank of servers on its network in order to limit the routing traffic, assuming that servers don't require routing information or other server information.")
mscVrPpIpxPSresProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 102), )
if mibBuilder.loadTexts: mscVrPpIpxPSresProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSresProvTable.setDescription('This group contains the provisioned attributes for SourceRouteEndStation support.')
mscVrPpIpxPSresProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 102, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPIndex"))
if mibBuilder.loadTexts: mscVrPpIpxPSresProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSresProvEntry.setDescription('An entry in the mscVrPpIpxPSresProvTable.')
mscVrPpIpxPSourceRouteEndStationSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 102, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrPpIpxPSourceRouteEndStationSupport.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSourceRouteEndStationSupport.setDescription('This attribute is used to enable or disable support for SourceRouteEndStation (Sres). If set to enable, Sres will be supported on this protocol on this ProtocolPort (Pp). If set to disable, it will not be supported. An Sres component must be provisioned under the VirtualRouter if this attribute is set to enable. If this attribute is set to enable and this Pp has its linkToMedia attribute set, it must be linked to a LanApplication (La) that has its Framer interfaceName linked to a Fddi or TokenRing component.')
mscVrPpIpxPStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 103), )
if mibBuilder.loadTexts: mscVrPpIpxPStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscVrPpIpxPStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 103, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPIndex"))
if mibBuilder.loadTexts: mscVrPpIpxPStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPStateEntry.setDescription('An entry in the mscVrPpIpxPStateTable.')
mscVrPpIpxPAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 103, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscVrPpIpxPOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 103, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscVrPpIpxPUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 103, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscVrPpIpxPOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 104), )
if mibBuilder.loadTexts: mscVrPpIpxPOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
mscVrPpIpxPOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 104, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPIndex"))
if mibBuilder.loadTexts: mscVrPpIpxPOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPOperStatusEntry.setDescription('An entry in the mscVrPpIpxPOperStatusTable.')
mscVrPpIpxPSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 104, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
mscVrPpIpxPOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 105), )
if mibBuilder.loadTexts: mscVrPpIpxPOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPOperTable.setDescription('The IpxPort Operational Attributes.')
mscVrPpIpxPOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 105, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPIndex"))
if mibBuilder.loadTexts: mscVrPpIpxPOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPOperEntry.setDescription('An entry in the mscVrPpIpxPOperTable.')
mscVrPpIpxPType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 105, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("broadcast", 2), ("ppp", 3), ("wanRip", 4), ("unnumberedRip", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPType.setDescription('The type of the circuit. This would differ from the provisioned type when a different routing protocol is negotiated with the peer.')
mscVrPpIpxPEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 105, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("link", 1), ("ethernet", 2), ("novell", 3), ("sap", 4), ("snap", 5), ("vns", 6), ("tunnel", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPEncapsulation.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPEncapsulation.setDescription('Packet encapsulation type that the router has determined to use on the port. There are seven encapsulation types used to identify IPX datagram as listed below. 1. link: IPX encapsulation type for PPP, ATM MPE, and X25DTE media types. 2. ethernet: IPX encapsulation type for Ethernet and FrDte media types. 3. novell: IPX encapsulation type for Ethernet and FrDte media types. 4. sap: IPX encapsulation type for FDDI, Token Ring, Ethernet and FrDte media types. 5. snap: IPX encapsulation type for FDDI, Token Ring, Ethernet, and FrDte media types. 6. vns: IPX encapsulation type for VNS media type. 7. tunnel: IPX encapsulation type for Tunnel media type.')
mscVrPpIpxPNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 105, 1, 3), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPNetworkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPNetworkNumber.setDescription('The Ipx network number from the provisioned networkNumberProv value.')
mscVrPpIpxPNode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 105, 1, 4), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPNode.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPNode.setDescription('The Ipx node address of this IpxPort.')
mscVrPpIpxPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 106), )
if mibBuilder.loadTexts: mscVrPpIpxPStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPStatsTable.setDescription('The IpxPort Statistics group.')
mscVrPpIpxPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 106, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPIndex"))
if mibBuilder.loadTexts: mscVrPpIpxPStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPStatsEntry.setDescription('An entry in the mscVrPpIpxPStatsTable.')
mscVrPpIpxPStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 106, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPStateChanges.setDescription('Number of times the port has changed state. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrPpIpxPInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 106, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPInReceives.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPInReceives.setDescription('Total number of packets received. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrPpIpxPForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 106, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPForwarded.setDescription('Number of packets forwarded. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrPpIpxPRipP = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 2))
mscVrPpIpxPRipPRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 2, 1), )
if mibBuilder.loadTexts: mscVrPpIpxPRipPRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPRipPRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrPpIpxPRipP components.')
mscVrPpIpxPRipPRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPRipPIndex"))
if mibBuilder.loadTexts: mscVrPpIpxPRipPRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPRipPRowStatusEntry.setDescription('A single entry in the table represents a single mscVrPpIpxPRipP component.')
mscVrPpIpxPRipPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPRipPRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPRipPRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrPpIpxPRipP components. These components cannot be added nor deleted.')
mscVrPpIpxPRipPComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPRipPComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPRipPComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrPpIpxPRipPStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPRipPStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPRipPStorageType.setDescription('This variable represents the storage type value for the mscVrPpIpxPRipP tables.')
mscVrPpIpxPRipPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrPpIpxPRipPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPRipPIndex.setDescription('This variable represents the index for the mscVrPpIpxPRipP tables.')
mscVrPpIpxPRipPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 2, 10), )
if mibBuilder.loadTexts: mscVrPpIpxPRipPStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPRipPStatsTable.setDescription('RIP specific statistics for this IpxPort.')
mscVrPpIpxPRipPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPRipPIndex"))
if mibBuilder.loadTexts: mscVrPpIpxPRipPStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPRipPStatsEntry.setDescription('An entry in the mscVrPpIpxPRipPStatsTable.')
mscVrPpIpxPRipPInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 2, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPRipPInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPRipPInPackets.setDescription('The number of RIP packets received on this IpxPort. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrPpIpxPRipPInRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPRipPInRequests.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPRipPInRequests.setDescription('The number of RIP request packets received on this IpxPort. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrPpIpxPRipPInResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPRipPInResponses.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPRipPInResponses.setDescription('The number of RIP response packets received on this IpxPort. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrPpIpxPRipPOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 2, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPRipPOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPRipPOutPackets.setDescription('The number of RIP packets sent out on this IpxPort. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrPpIpxPRipPOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 2, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPRipPOutRequests.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPRipPOutRequests.setDescription('The number of RIP request packets sent out on this IpxPort. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrPpIpxPRipPOutResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 2, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPRipPOutResponses.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPRipPOutResponses.setDescription('The number of RIP response packets sent out on this IpxPort. This includes RIP periodic update packets. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrPpIpxPRipPIncorrectPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 2, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPRipPIncorrectPackets.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPRipPIncorrectPackets.setDescription('Number of times that an incorrectly formatted RIP packet was received on this IpxPort. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrPpIpxPSapP = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 3))
mscVrPpIpxPSapPRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 3, 1), )
if mibBuilder.loadTexts: mscVrPpIpxPSapPRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSapPRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrPpIpxPSapP components.')
mscVrPpIpxPSapPRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPSapPIndex"))
if mibBuilder.loadTexts: mscVrPpIpxPSapPRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSapPRowStatusEntry.setDescription('A single entry in the table represents a single mscVrPpIpxPSapP component.')
mscVrPpIpxPSapPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPSapPRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSapPRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrPpIpxPSapP components. These components cannot be added nor deleted.')
mscVrPpIpxPSapPComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPSapPComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSapPComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrPpIpxPSapPStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPSapPStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSapPStorageType.setDescription('This variable represents the storage type value for the mscVrPpIpxPSapP tables.')
mscVrPpIpxPSapPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrPpIpxPSapPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSapPIndex.setDescription('This variable represents the index for the mscVrPpIpxPSapP tables.')
mscVrPpIpxPSapPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 3, 10), )
if mibBuilder.loadTexts: mscVrPpIpxPSapPStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSapPStatsTable.setDescription('SAP specific statistics for this IpxPort.')
mscVrPpIpxPSapPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPSapPIndex"))
if mibBuilder.loadTexts: mscVrPpIpxPSapPStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSapPStatsEntry.setDescription('An entry in the mscVrPpIpxPSapPStatsTable.')
mscVrPpIpxPSapPInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 3, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPSapPInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSapPInPackets.setDescription('The total number of SAP packets received on this IpxPort. Includes SAP requests and responses. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrPpIpxPSapPInRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 3, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPSapPInRequests.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSapPInRequests.setDescription('The number of SAP Request packets received on this IpxPort. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrPpIpxPSapPInResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 3, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPSapPInResponses.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSapPInResponses.setDescription('The number of SAP response packets received on this IpxPort. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrPpIpxPSapPOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 3, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPSapPOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSapPOutPackets.setDescription('The total number of SAP packets sent out this IpxPort. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrPpIpxPSapPOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 3, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPSapPOutRequests.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSapPOutRequests.setDescription('The number of SAP request packets sent out on this IpxPort. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrPpIpxPSapPOutResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 3, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPSapPOutResponses.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSapPOutResponses.setDescription('The number of SAP response packets sent out this IpxPort. This includes periodic SAP update packets. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrPpIpxPSapPIncorrectPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 3, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPSapPIncorrectPackets.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPSapPIncorrectPackets.setDescription('Number of times an incorrectly formatted SAP packet was received on this IpxPort. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrPpIpxPIWP = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 4))
mscVrPpIpxPIWPRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 4, 1), )
if mibBuilder.loadTexts: mscVrPpIpxPIWPRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPIWPRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscVrPpIpxPIWP components.')
mscVrPpIpxPIWPRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPIWPRemoteStationIdentifierIndex"))
if mibBuilder.loadTexts: mscVrPpIpxPIWPRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPIWPRowStatusEntry.setDescription('A single entry in the table represents a single mscVrPpIpxPIWP component.')
mscVrPpIpxPIWPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPIWPRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPIWPRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrPpIpxPIWP components. These components cannot be added nor deleted.')
mscVrPpIpxPIWPComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPIWPComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPIWPComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrPpIpxPIWPStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPIWPStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPIWPStorageType.setDescription('This variable represents the storage type value for the mscVrPpIpxPIWP tables.')
mscVrPpIpxPIWPRemoteStationIdentifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 4, 1, 1, 10), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: mscVrPpIpxPIWPRemoteStationIdentifierIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPIWPRemoteStationIdentifierIndex.setDescription('This variable represents the index for the mscVrPpIpxPIWP tables.')
mscVrPpIpxPIWPOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 4, 10), )
if mibBuilder.loadTexts: mscVrPpIpxPIWPOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPIWPOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains operational attributes that are specific for the IPXWAN protocol.')
mscVrPpIpxPIWPOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPIWPRemoteStationIdentifierIndex"))
if mibBuilder.loadTexts: mscVrPpIpxPIWPOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPIWPOperEntry.setDescription('An entry in the mscVrPpIpxPIWPOperTable.')
mscVrPpIpxPIWPNeighbourRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 4, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPIWPNeighbourRouterName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPIWPNeighbourRouterName.setDescription('The name of the neighboring router on a WAN circuit.')
mscVrPpIpxPIWPNeighbourInternalNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 4, 10, 1, 2), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPIWPNeighbourInternalNetworkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPIWPNeighbourInternalNetworkNumber.setDescription('The internal network number of the neighboring router on a WAN circuit.')
mscVrPpIpxPIWPInitFails = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 4, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPIWPInitFails.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPIWPInitFails.setDescription('The number of times initialization has failed on this circuit. This counter wraps around to zero after reaching the maximum value of 4294967295')
mscVrPpIpxPNetSentryP = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 5))
mscVrPpIpxPNetSentryPRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 5, 1), )
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrPpIpxPNetSentryP components.')
mscVrPpIpxPNetSentryPRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPNetSentryPIndex"))
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPRowStatusEntry.setDescription('A single entry in the table represents a single mscVrPpIpxPNetSentryP component.')
mscVrPpIpxPNetSentryPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrPpIpxPNetSentryP components. These components can be added and deleted.')
mscVrPpIpxPNetSentryPComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrPpIpxPNetSentryPStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPStorageType.setDescription('This variable represents the storage type value for the mscVrPpIpxPNetSentryP tables.')
mscVrPpIpxPNetSentryPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPIndex.setDescription('This variable represents the index for the mscVrPpIpxPNetSentryP tables.')
mscVrPpIpxPNetSentryPProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 5, 10), )
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPProvTable.setDescription('This group contains the NetSentry attributes that specify the names of the NetSentry filters which will be applied to IPX packets as incoming and outgoing filters.')
mscVrPpIpxPNetSentryPProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrPpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrPpIpxPNetSentryPIndex"))
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPProvEntry.setDescription('An entry in the mscVrPpIpxPNetSentryPProvTable.')
mscVrPpIpxPNetSentryPInComingFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 5, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPInComingFilter.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPInComingFilter.setDescription('This attribute specifies the name of the NetSentry filter applied to incoming IPX packets on this port.')
mscVrPpIpxPNetSentryPOutGoingFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 3, 6, 5, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPOutGoingFilter.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrPpIpxPNetSentryPOutGoingFilter.setDescription('The name of the filter applied to outgoing IPX packets on this port.')
mscVrIpx = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7))
mscVrIpxRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 1), )
if mibBuilder.loadTexts: mscVrIpxRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpx components.')
mscVrIpxRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"))
if mibBuilder.loadTexts: mscVrIpxRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpx component.')
mscVrIpxRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpx components. These components can be added and deleted.')
mscVrIpxComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpxStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxStorageType.setDescription('This variable represents the storage type value for the mscVrIpx tables.')
mscVrIpxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrIpxIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxIndex.setDescription('This variable represents the index for the mscVrIpx tables.')
mscVrIpxAdminControlTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 100), )
if mibBuilder.loadTexts: mscVrIpxAdminControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxAdminControlTable.setDescription('This group includes the Administrative Control attribute. This attribute defines the current administrative state of this component.')
mscVrIpxAdminControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"))
if mibBuilder.loadTexts: mscVrIpxAdminControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxAdminControlEntry.setDescription('An entry in the mscVrIpxAdminControlTable.')
mscVrIpxSnmpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxSnmpAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSnmpAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational and packet forwarding is allowed. The down state indicates the interface is not operational and packet forwarding is unavailable. The testing state indicates that no operational packets can be passed.')
mscVrIpxProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 101), )
if mibBuilder.loadTexts: mscVrIpxProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxProvTable.setDescription('IPX system provisionable attributes.')
mscVrIpxProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 101, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"))
if mibBuilder.loadTexts: mscVrIpxProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxProvEntry.setDescription('An entry in the mscVrIpxProvTable.')
mscVrIpxNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 101, 1, 1), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxNetworkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNetworkNumber.setDescription('This attribute indicates the internal network number portion of the IPX address. This network number must be unique within the internetwork and is necessary to determine master/slave relationships during IPXWAN negotiations.')
mscVrIpxMaxPathSplits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 101, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxMaxPathSplits.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxMaxPathSplits.setDescription('This attribute indicates the maximum number of paths with equal routing metric value which this instance of IPX may split between when forwarding packets.')
mscVrIpxMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 101, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxMaxHops.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxMaxHops.setDescription('This attribute indicates the maximum number of hops a packet may take.')
mscVrIpxRipUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 101, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxRipUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipUpdateInterval.setDescription('The RIP periodic update interval, in seconds.')
mscVrIpxSapUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 101, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxSapUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapUpdateInterval.setDescription('The SAP periodic update interval, in seconds.')
mscVrIpxControlDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 101, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxControlDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxControlDelay.setDescription('The delay, in microsecs, between receiving a request from a client and sending a response. This router is significantly faster than some Ipx clients. If a problem is being experienced between a router and an Ipx client, it might be resolved by changing the controlDelay.')
mscVrIpxUpdateDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 101, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(55, 500)).clone(55)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxUpdateDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxUpdateDelay.setDescription('The delay, in milliseconds, between sending consecutive (RIP and/or SAP) packets. 55 milliseconds is the minimum specified in the Ipx Router Specification.')
mscVrIpxRipAgeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 101, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxRipAgeMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipAgeMultiplier.setDescription('After this many Rip Update intervals unrefreshed Rip information is considered expired.')
mscVrIpxSapAgeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 101, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxSapAgeMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapAgeMultiplier.setDescription('After this many SAP Update intervals unrefreshed SAP information is considered expired.')
mscVrIpxDamping = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 101, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxDamping.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxDamping.setDescription('This attribute specifies whether damping is applied. Damping refers to the damping of incoming RIP and SAP requests. It handles cases where a rogue client or server is making an extraodinary number of requests. With damping set to disabled, the switch will reply to all requests with no check for rogue nodes.With damping set to enabled, the switch will not reply to a request if the same node made more than the allowable number of requests within 10 seconds. The maximum number of requests to damp at is specified by the following provisionable attributes: ripMaxDampedGeneralRequest, ripMaxDampedSpecificRequests, sapMaxDampedGeneralRequests, sapMaxDampedSpecificRequests.')
mscVrIpxRipMaxDampedGeneralRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 101, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxRipMaxDampedGeneralRequests.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipMaxDampedGeneralRequests.setDescription('This attribute is only used when the attribute damping is enabled. It is used to limit the average rate at which the switch responds to general RIP requests. If more than this number are received within a ten second interval, the first ripMaxDampedGeneralRequests are responded to and the remainder are ignored.')
mscVrIpxRipMaxDampedSpecificRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 101, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxRipMaxDampedSpecificRequests.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipMaxDampedSpecificRequests.setDescription('This attribute is only used when the attribute damping is enabled. It is used to limit the average rate at which the switch responds to specific RIP requests. If more than this number are received within a ten second interval, the first ripMaxDampedSpecificRequests are responded to and the remainder are ignored.')
mscVrIpxSapMaxDampedGeneralRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 101, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxSapMaxDampedGeneralRequests.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapMaxDampedGeneralRequests.setDescription('This attribute is only used when the attribute damping is enabled. It is used to limit the average rate at which the switch responds to general SAP requests. If more than this number are received within a ten second interval, the first sapMaxDampedGeneralRequests are responded to and the remainder are ignored.')
mscVrIpxSapMaxDampedSpecificRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 101, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxSapMaxDampedSpecificRequests.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapMaxDampedSpecificRequests.setDescription('This attribute is only used when the attribute damping is enabled. It is used to limit the average rate at which the switch responds to specific SAP requests. If more than this number are received within a ten second interval, the first sapMaxDampedSpecificRequests are responded to and the remainder are ignored.')
mscVrIpxInitialGeneralRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 101, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxInitialGeneralRequests.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxInitialGeneralRequests.setDescription('This attribute specifies whether the RIP and SAP general requests are sent out a port when the port first comes up. If this attribute is enabled the initial requests will be made; whereas if the attribute is disabled the initial requests will not be made. This attribute may be disabled in order to avoid the traffic resulting within the network from these initial requests and the ensuing responses. With the initial request disabled, the switch will learn about other network segments off of the IPX ports via the periodic broadcasts which are received on those port.')
mscVrIpxHoldDownInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 101, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxHoldDownInterval.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxHoldDownInterval.setDescription('This attribute specifies an interval, after a network is removed from the route table, during which other incoming route updates for the same network will be ignored. The use of this interval prevents the slow convergence which results when switches that receive late network down broadcasts advertise false routes.')
mscVrIpxStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 103), )
if mibBuilder.loadTexts: mscVrIpxStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscVrIpxStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 103, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"))
if mibBuilder.loadTexts: mscVrIpxStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxStateEntry.setDescription('An entry in the mscVrIpxStateTable.')
mscVrIpxAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 103, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscVrIpxOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 103, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscVrIpxUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 103, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscVrIpxOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 104), )
if mibBuilder.loadTexts: mscVrIpxOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
mscVrIpxOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 104, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"))
if mibBuilder.loadTexts: mscVrIpxOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxOperStatusEntry.setDescription('An entry in the mscVrIpxOperStatusTable.')
mscVrIpxSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 104, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
mscVrIpxOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 105), )
if mibBuilder.loadTexts: mscVrIpxOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxOperTable.setDescription('This group contains IPX related operational attributes.')
mscVrIpxOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 105, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"))
if mibBuilder.loadTexts: mscVrIpxOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxOperEntry.setDescription('An entry in the mscVrIpxOperTable.')
mscVrIpxProtocolPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 105, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxProtocolPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxProtocolPortCount.setDescription('The number of portsknown to this instance of Ipx.')
mscVrIpxDestinationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 105, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxDestinationCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxDestinationCount.setDescription('The number of currently reachable destinations known to Ipx.')
mscVrIpxServicesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 105, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxServicesCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxServicesCount.setDescription('The number of Services known to Ipx.')
mscVrIpxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 107), )
if mibBuilder.loadTexts: mscVrIpxStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxStatsTable.setDescription('This group contains IPX related statistics on the CP.')
mscVrIpxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 107, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"))
if mibBuilder.loadTexts: mscVrIpxStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxStatsEntry.setDescription('An entry in the mscVrIpxStatsTable.')
mscVrIpxInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 107, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxInReceives.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxInReceives.setDescription('This attribute counts the total number of IPX packets received, including those received in error. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxInHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 107, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxInHeaderErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxInHeaderErrors.setDescription('The number of IPX packets discarded due to errors in their headers, including any IPX packet with a size less than the minimum of 30 bytes. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxInUnknownSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 107, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxInUnknownSocket.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxInUnknownSocket.setDescription('The number of IPX packets discarded because the destination socket was not open. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 107, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxInDiscards.setDescription('Number of packets received but discarded due to reasons other than those accounted for by inHeaderErrors and inUnknownSocket. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxInBadChecksums = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 107, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxInBadChecksums.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxInBadChecksums.setDescription('Number of packets received with incorrect checksums. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 107, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxInDelivers.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxInDelivers.setDescription('Number of IPX packets delivered locally, including packets from local applications. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 107, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxNoRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNoRoutes.setDescription('Number of times no route to a destination was found. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 107, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxOutRequests.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxOutRequests.setDescription('The number of IPX packets supplied locally for transmission, not including any packets counted in the forwarded attribute. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxOutMalformedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 107, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxOutMalformedRequests.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxOutMalformedRequests.setDescription('Number of outgoing packets supplied locally that contained errors in their structure. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 107, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxOutDiscards.setDescription('The number of outgoing IPX packets discarded due to reasons other than those accounted for in outMalformedRequests or outFiltered. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 107, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxOutPackets.setDescription('The total number of IPX packets transmitted. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxInTooManyHops = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 107, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxInTooManyHops.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxInTooManyHops.setDescription('Number of packets discarded due to exceeding the maxHops value. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxInFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 107, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxInFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxInFiltered.setDescription('The number of incoming IPX packets discarded due to filtering. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxInNetBIOS = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 107, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxInNetBIOS.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxInNetBIOS.setDescription('The number of NetBIOS packets received. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 107, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxForwarded.setDescription('The number of IPX packets forwarded. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxOutFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 107, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxOutFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxOutFiltered.setDescription('The number of outgoing packets discarded due to filtering. This also includes the number of forwarded packets filtered. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxRip = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2))
mscVrIpxRipRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 1), )
if mibBuilder.loadTexts: mscVrIpxRipRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpxRip components.')
mscVrIpxRipRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxRipIndex"))
if mibBuilder.loadTexts: mscVrIpxRipRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpxRip component.')
mscVrIpxRipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxRipRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpxRip components. These components cannot be added nor deleted.')
mscVrIpxRipComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxRipComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpxRipStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxRipStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipStorageType.setDescription('This variable represents the storage type value for the mscVrIpxRip tables.')
mscVrIpxRipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrIpxRipIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipIndex.setDescription('This variable represents the index for the mscVrIpxRip tables.')
mscVrIpxRipStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 10), )
if mibBuilder.loadTexts: mscVrIpxRipStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipStatsTable.setDescription('IPX statistics related to the RIP protocol.')
mscVrIpxRipStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxRipIndex"))
if mibBuilder.loadTexts: mscVrIpxRipStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipStatsEntry.setDescription('An entry in the mscVrIpxRipStatsTable.')
mscVrIpxRipRipIn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxRipRipIn.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRipIn.setDescription('This attribute counts the total number of IPX RIP packets received. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxRipRipOut = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxRipRipOut.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRipOut.setDescription('This attribute counts the total number of RIP packets locally generated and sent out. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxRipRipIncorrectPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxRipRipIncorrectPackets.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRipIncorrectPackets.setDescription('This attribute counts the number of times an incorrectly formatted RIP packet was received. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxRipRFltr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 2))
mscVrIpxRipRFltrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 2, 1), )
if mibBuilder.loadTexts: mscVrIpxRipRFltrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRFltrRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpxRipRFltr components.')
mscVrIpxRipRFltrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxRipIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxRipRFltrIdentifierIndex"))
if mibBuilder.loadTexts: mscVrIpxRipRFltrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRFltrRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpxRipRFltr component.')
mscVrIpxRipRFltrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxRipRFltrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRFltrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpxRipRFltr components. These components can be added and deleted.')
mscVrIpxRipRFltrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxRipRFltrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRFltrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpxRipRFltrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxRipRFltrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRFltrStorageType.setDescription('This variable represents the storage type value for the mscVrIpxRipRFltr tables.')
mscVrIpxRipRFltrIdentifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 268435455)))
if mibBuilder.loadTexts: mscVrIpxRipRFltrIdentifierIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRFltrIdentifierIndex.setDescription('This variable represents the index for the mscVrIpxRipRFltr tables.')
mscVrIpxRipRFltrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 2, 10), )
if mibBuilder.loadTexts: mscVrIpxRipRFltrProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRFltrProvTable.setDescription('This is the provisionable attribute group for RipFilter.')
mscVrIpxRipRFltrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxRipIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxRipRFltrIdentifierIndex"))
if mibBuilder.loadTexts: mscVrIpxRipRFltrProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRFltrProvEntry.setDescription('An entry in the mscVrIpxRipRFltrProvTable.')
mscVrIpxRipRFltrHops = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxRipRFltrHops.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRFltrHops.setDescription('This attribute specifies the distance in terms of number of hops. Networks in RIP packets which are the specified distance away from the switch are filtered or passed depending on the disposition of the filter. A hops value preceded by an equality operator(=), less than operator(<) or greater than operator(>) should be interpreted as matching all RIP packet tuples which are an equal, smaller or greater distance, respectively, away from the switch than the hops value specified. For a given filter, only networks matching all the specified attributes of that filter are filtered or passed depending on the disposition of the filter. The number of hops is specified as a decimal number between 0 and 999.')
mscVrIpxRipRFltrTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 2, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxRipRFltrTicks.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRFltrTicks.setDescription('This attribute specifies the distance in terms of delay in ticks. A tick is 1/ 18 of a second. Networks in RIP packets which are the specified distance away from the switch are filtered or passed depending on the disposition of the filter. A ticks value preceded by a equality operator(=), less than operator(<) or greater than operator(>) should be interpreted as matching all RIP packet tuples which are an equal, greater or lower delay, respectively, away from the switch than the ticks value specified. For a given filter, only networks matching all the specified attributes of that filter are filtered or passed depending on the disposition of the filter. The ticks value is specified as a decimal number between 0 and 999.')
mscVrIpxRipRFltrNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 2, 10, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxRipRFltrNetworkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRFltrNetworkNumber.setDescription("This attribute specifies the network number of matching networks in RIP packets to be filtered or passed depending on the disposition of the filter. The network number can be entered either as a dashed hex string or a string of hex digits entered in pairs of hex digits up to a maximum length of 8 digits; in addition to hex digits, use of the character '?' to indicate wildcarding is allowed. (For example a valid network number would be ff-ff-ff-?? or ffffff??). Wildcard characters may be used only in pairs to replace a pair of hex digits. Filters with a network number preceded by a caret (^) should be interpreted as matching all RIP packet tuples except for the tuples with this network number. For a given filter, only networks matching all the specified attributes of that filter are filtered or passed depending on the disposition of the filter.")
mscVrIpxRipRFltrNode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 2, 10, 1, 4), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxRipRFltrNode.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRFltrNode.setDescription("This attribute specifies the node portion in the source IPX address (that is, the MAC address or circuit ID) of received RIP packets for which the contained network tuples should be filtered or passed depending on the disposition of the filter. This attribute is only valid for filters applied to a port in the input direction and will be ignored if the filter is applied in the output direction.The node number can be entered either as a dashed hex string or a string of hex digits entered in pairs of hex digits up to a maximum length of 12 digits; in addition to hex digits, use of the character '?' to indicate wildcarding is allowed. (For example a valid node number would be 00-20-??-??-??-?? or 0020???????? ). Wildcard characters may be used only in pairs to replace a pair of hex digits. A node number preceded by a caret (^) should be interpreted as matching all RIP packets' network tuples except for the RIP packets with this source node address. For a given filter, only networks matching all the specified attributes of that filter are filtered or passed depending on the disposition of the filter.")
mscVrIpxRipRFltrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 2, 10, 1, 5), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxRipRFltrPort.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRFltrPort.setDescription('This attribute specifies the name of a protocol port whereby networks learned over this port are to be filtered or passed depending on the disposition of the filter. This attribute is only valid for filters applied to a port in the output direction and will be ignored if the filter is applied in the input direction. This attribute is entered as an ascii string and must correspond to a name of a provisioned protocol port. A port name preceded by a caret (^) should be interpreted as matching all RIP packet tuples except for those learned on this port. For a given filter, only networks matching all the specified attributes of that filter are filtered or passed depending on the disposition of the filter.')
mscVrIpxRipRFltrDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pass", 1), ("filter", 2))).clone('filter')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxRipRFltrDisposition.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRFltrDisposition.setDescription('This attribute indicates a reversal of the filter pattern match. If the value is pass, then matching filters will cause the RIP packet tuple to be passed. If the value is filter, then matching filters will cause the RIP packet tuple to be filtered.')
mscVrIpxRipRFltrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 2, 11), )
if mibBuilder.loadTexts: mscVrIpxRipRFltrOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRFltrOperTable.setDescription('This is the operational attribute group for IpxRipFilter.')
mscVrIpxRipRFltrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxRipIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxRipRFltrIdentifierIndex"))
if mibBuilder.loadTexts: mscVrIpxRipRFltrOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRFltrOperEntry.setDescription('An entry in the mscVrIpxRipRFltrOperTable.')
mscVrIpxRipRFltrNumberOfApplyEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 2, 11, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxRipRFltrNumberOfApplyEntries.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRFltrNumberOfApplyEntries.setDescription('This attribute indicates the number of times this filter is referenced by a RipApplyEntry. If zero, this filter is not applied on any ports.')
mscVrIpxRipRipApp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 3))
mscVrIpxRipRipAppRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 3, 1), )
if mibBuilder.loadTexts: mscVrIpxRipRipAppRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRipAppRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpxRipRipApp components.')
mscVrIpxRipRipAppRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxRipIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxRipRipAppProtocolPortNameIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxRipRipAppFilterIdentifierIndex"))
if mibBuilder.loadTexts: mscVrIpxRipRipAppRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRipAppRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpxRipRipApp component.')
mscVrIpxRipRipAppRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxRipRipAppRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRipAppRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpxRipRipApp components. These components can be added and deleted.')
mscVrIpxRipRipAppComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxRipRipAppComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRipAppComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpxRipRipAppStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxRipRipAppStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRipAppStorageType.setDescription('This variable represents the storage type value for the mscVrIpxRipRipApp tables.')
mscVrIpxRipRipAppProtocolPortNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 3, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: mscVrIpxRipRipAppProtocolPortNameIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRipAppProtocolPortNameIndex.setDescription('This variable represents an index for the mscVrIpxRipRipApp tables.')
mscVrIpxRipRipAppFilterIdentifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 268435455)))
if mibBuilder.loadTexts: mscVrIpxRipRipAppFilterIdentifierIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRipAppFilterIdentifierIndex.setDescription('This variable represents an index for the mscVrIpxRipRipApp tables.')
mscVrIpxRipRipAppProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 3, 10), )
if mibBuilder.loadTexts: mscVrIpxRipRipAppProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRipAppProvTable.setDescription('This is the RipApplyEntry provisionable group of attributes.')
mscVrIpxRipRipAppProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxRipIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxRipRipAppProtocolPortNameIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxRipRipAppFilterIdentifierIndex"))
if mibBuilder.loadTexts: mscVrIpxRipRipAppProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRipAppProvEntry.setDescription('An entry in the mscVrIpxRipRipAppProvTable.')
mscVrIpxRipRipAppDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 2, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("output", 1), ("input", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxRipRipAppDirection.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxRipRipAppDirection.setDescription('This attribute specifies whether this RIP filter is applied as an input filter or an output filter. If set to none, this indicates that the filter, though applied to the port, is not currently active in either direction.')
mscVrIpxSap = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3))
mscVrIpxSapRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 1), )
if mibBuilder.loadTexts: mscVrIpxSapRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpxSap components.')
mscVrIpxSapRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSapIndex"))
if mibBuilder.loadTexts: mscVrIpxSapRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpxSap component.')
mscVrIpxSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxSapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpxSap components. These components cannot be added nor deleted.')
mscVrIpxSapComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxSapComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpxSapStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxSapStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapStorageType.setDescription('This variable represents the storage type value for the mscVrIpxSap tables.')
mscVrIpxSapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrIpxSapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapIndex.setDescription('This variable represents the index for the mscVrIpxSap tables.')
mscVrIpxSapStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 10), )
if mibBuilder.loadTexts: mscVrIpxSapStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapStatsTable.setDescription('IPX statistics specific to the SAP protocol.')
mscVrIpxSapStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSapIndex"))
if mibBuilder.loadTexts: mscVrIpxSapStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapStatsEntry.setDescription('An entry in the mscVrIpxSapStatsTable.')
mscVrIpxSapSapIn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxSapSapIn.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSapIn.setDescription('The total number of SAP packets received. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxSapSapOut = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxSapSapOut.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSapOut.setDescription('The total number of SAP packets locally generated and sent out. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxSapSapIncorrectPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxSapSapIncorrectPackets.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSapIncorrectPackets.setDescription('The number of times an incorrectly formatted SAP packet was received. This counter wraps around to zero after reaching the maximum value of 4294967295.')
mscVrIpxSapSFltr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 2))
mscVrIpxSapSFltrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 2, 1), )
if mibBuilder.loadTexts: mscVrIpxSapSFltrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSFltrRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpxSapSFltr components.')
mscVrIpxSapSFltrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSapIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSapSFltrIdentifierIndex"))
if mibBuilder.loadTexts: mscVrIpxSapSFltrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSFltrRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpxSapSFltr component.')
mscVrIpxSapSFltrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxSapSFltrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSFltrRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpxSapSFltr components. These components can be added and deleted.')
mscVrIpxSapSFltrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxSapSFltrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSFltrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpxSapSFltrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxSapSFltrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSFltrStorageType.setDescription('This variable represents the storage type value for the mscVrIpxSapSFltr tables.')
mscVrIpxSapSFltrIdentifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 268435455)))
if mibBuilder.loadTexts: mscVrIpxSapSFltrIdentifierIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSFltrIdentifierIndex.setDescription('This variable represents the index for the mscVrIpxSapSFltr tables.')
mscVrIpxSapSFltrProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 2, 10), )
if mibBuilder.loadTexts: mscVrIpxSapSFltrProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSFltrProvTable.setDescription('The provisionable attribute group for SapFilter.')
mscVrIpxSapSFltrProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSapIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSapSFltrIdentifierIndex"))
if mibBuilder.loadTexts: mscVrIpxSapSFltrProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSFltrProvEntry.setDescription('An entry in the mscVrIpxSapSFltrProvTable.')
mscVrIpxSapSFltrType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxSapSFltrType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSFltrType.setDescription('This attribute specifies the Novell Service type of the services to be filtered from the SAP packets. The type can be entered either as a dashed hex string or a string of hex digits entered in pairs of hex digits up to a maximum length of 4 digits. (For example a valid type would be ff-ff or ffff). A type preceded by a caret(^) should be interpreted as filtering all SAP packets except for those with this type.')
mscVrIpxSapSFltrName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 2, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxSapSFltrName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSFltrName.setDescription('This attribute specifies the readable name of the service to be filtered from SAP packets. The name can be 47 characters or less. This does not include the caret (^) character which precedes the name. A name preceded by a caret (^) should be interpreted as filtering all SAP packets except for the ones with this name.')
mscVrIpxSapSFltrNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 2, 10, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxSapSFltrNetworkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSFltrNetworkNumber.setDescription('This attribute specifies the network number of the service to be filtered from SAP packets. The network number can be entered either as a dashed hex string or a string of hex digits entered in pairs of hex digits up to a maximum length of 8 digits. (For example a valid network number would be ff-ff-ff-ff or ffffffff). A network number preceded by a caret (^) should be interpreted as filtering all SAP packets except for the ones with this network number.')
mscVrIpxSapSFltrNode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 2, 10, 1, 4), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxSapSFltrNode.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSFltrNode.setDescription('This attribute specifies the node portion of the IPX address of the service to be filtered from SAP packets. The node number can be entered either as a dashed hex string or a string of hex digits entered in pairs of hex digits up to a maximum length of 12 digits.. (For example a valid node number would be ff-ff-ff-ff-ff-ff or ffffffffffff). A node number preceded by a caret (^) should be interpreted as filtering all SAP packets except for the ones with this node number.')
mscVrIpxSapSFltrDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pass", 1), ("filter", 2))).clone('filter')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxSapSFltrDisposition.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSFltrDisposition.setDescription('Indicates a reversal of the filter pattern match.')
mscVrIpxSapSFltrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 2, 11), )
if mibBuilder.loadTexts: mscVrIpxSapSFltrOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSFltrOperTable.setDescription('The operational attribute group for IpxSapFilter.')
mscVrIpxSapSFltrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSapIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSapSFltrIdentifierIndex"))
if mibBuilder.loadTexts: mscVrIpxSapSFltrOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSFltrOperEntry.setDescription('An entry in the mscVrIpxSapSFltrOperTable.')
mscVrIpxSapSFltrNumberOfApplyEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 2, 11, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxSapSFltrNumberOfApplyEntries.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSFltrNumberOfApplyEntries.setDescription('The number of times this filter appears in IpxSapApplyEntry. If zero, this filter is not applied on any ports.')
mscVrIpxSapSapApp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 3))
mscVrIpxSapSapAppRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 3, 1), )
if mibBuilder.loadTexts: mscVrIpxSapSapAppRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSapAppRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpxSapSapApp components.')
mscVrIpxSapSapAppRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSapIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSapSapAppProtocolPortNameIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSapSapAppFilterIdentifierIndex"))
if mibBuilder.loadTexts: mscVrIpxSapSapAppRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSapAppRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpxSapSapApp component.')
mscVrIpxSapSapAppRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxSapSapAppRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSapAppRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpxSapSapApp components. These components can be added and deleted.')
mscVrIpxSapSapAppComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxSapSapAppComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSapAppComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpxSapSapAppStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxSapSapAppStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSapAppStorageType.setDescription('This variable represents the storage type value for the mscVrIpxSapSapApp tables.')
mscVrIpxSapSapAppProtocolPortNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 3, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: mscVrIpxSapSapAppProtocolPortNameIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSapAppProtocolPortNameIndex.setDescription('This variable represents an index for the mscVrIpxSapSapApp tables.')
mscVrIpxSapSapAppFilterIdentifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 268435455)))
if mibBuilder.loadTexts: mscVrIpxSapSapAppFilterIdentifierIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSapAppFilterIdentifierIndex.setDescription('This variable represents an index for the mscVrIpxSapSapApp tables.')
mscVrIpxSapSapAppProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 3, 10), )
if mibBuilder.loadTexts: mscVrIpxSapSapAppProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSapAppProvTable.setDescription('The IpxSapApplyEntry provisionable group of attributes.')
mscVrIpxSapSapAppProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSapIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSapSapAppProtocolPortNameIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSapSapAppFilterIdentifierIndex"))
if mibBuilder.loadTexts: mscVrIpxSapSapAppProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSapAppProvEntry.setDescription('An entry in the mscVrIpxSapSapAppProvTable.')
mscVrIpxSapSapAppDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 3, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("output", 1), ("input", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxSapSapAppDirection.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSapSapAppDirection.setDescription('Indicates whether this SAP filter is applied as an input filter or an output filter.')
mscVrIpxFwd = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 4))
mscVrIpxFwdRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 4, 1), )
if mibBuilder.loadTexts: mscVrIpxFwdRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxFwdRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscVrIpxFwd components.')
mscVrIpxFwdRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxFwdNetworkNumberIndex"))
if mibBuilder.loadTexts: mscVrIpxFwdRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxFwdRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpxFwd component.')
mscVrIpxFwdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxFwdRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxFwdRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpxFwd components. These components cannot be added nor deleted.')
mscVrIpxFwdComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxFwdComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxFwdComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpxFwdStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxFwdStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxFwdStorageType.setDescription('This variable represents the storage type value for the mscVrIpxFwd tables.')
mscVrIpxFwdNetworkNumberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 4, 1, 1, 10), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(1, 4)))
if mibBuilder.loadTexts: mscVrIpxFwdNetworkNumberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxFwdNetworkNumberIndex.setDescription('This variable represents the index for the mscVrIpxFwd tables.')
mscVrIpxFwdOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 4, 10), )
if mibBuilder.loadTexts: mscVrIpxFwdOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxFwdOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** IpxForwarding operational attributes.')
mscVrIpxFwdOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxFwdNetworkNumberIndex"))
if mibBuilder.loadTexts: mscVrIpxFwdOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxFwdOperEntry.setDescription('An entry in the mscVrIpxFwdOperTable.')
mscVrIpxFwdProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("rip", 3), ("nlsp", 4), ("static", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxFwdProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxFwdProtocol.setDescription('The routing protocol from which knowledge of this destination was obtained.')
mscVrIpxFwdTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 4, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxFwdTicks.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxFwdTicks.setDescription('The delay, in ticks, to reach this destination.')
mscVrIpxFwdHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 4, 10, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxFwdHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxFwdHopCount.setDescription('The number of hops required to reach this destination.')
mscVrIpxFwdProtocolPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 4, 10, 1, 4), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxFwdProtocolPortId.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxFwdProtocolPortId.setDescription('The unique identifier of the ProtocolPort used to reach the next hop.')
mscVrIpxFwdNextHopPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 4, 10, 1, 5), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxFwdNextHopPhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxFwdNextHopPhysAddress.setDescription('The physical address of the next hop')
mscVrIpxFwdNextHopNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 4, 10, 1, 6), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxFwdNextHopNetworkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxFwdNextHopNetworkNumber.setDescription('The IPX network number of the next hop.')
mscVrIpxSrvc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 5))
mscVrIpxSrvcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 5, 1), )
if mibBuilder.loadTexts: mscVrIpxSrvcRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSrvcRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscVrIpxSrvc components.')
mscVrIpxSrvcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSrvcNetworkNumberIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSrvcNodeIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSrvcTypeIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSrvcNameIndex"))
if mibBuilder.loadTexts: mscVrIpxSrvcRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSrvcRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpxSrvc component.')
mscVrIpxSrvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxSrvcRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSrvcRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpxSrvc components. These components cannot be added nor deleted.')
mscVrIpxSrvcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxSrvcComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSrvcComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpxSrvcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxSrvcStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSrvcStorageType.setDescription('This variable represents the storage type value for the mscVrIpxSrvc tables.')
mscVrIpxSrvcNetworkNumberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 5, 1, 1, 10), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(1, 4)))
if mibBuilder.loadTexts: mscVrIpxSrvcNetworkNumberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSrvcNetworkNumberIndex.setDescription('This variable represents an index for the mscVrIpxSrvc tables.')
mscVrIpxSrvcNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 5, 1, 1, 11), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(1, 6)))
if mibBuilder.loadTexts: mscVrIpxSrvcNodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSrvcNodeIndex.setDescription('This variable represents an index for the mscVrIpxSrvc tables.')
mscVrIpxSrvcTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: mscVrIpxSrvcTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSrvcTypeIndex.setDescription('This variable represents an index for the mscVrIpxSrvc tables.')
mscVrIpxSrvcNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 5, 1, 1, 13), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: mscVrIpxSrvcNameIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSrvcNameIndex.setDescription('This variable represents an index for the mscVrIpxSrvc tables.')
mscVrIpxSrvcOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 5, 10), )
if mibBuilder.loadTexts: mscVrIpxSrvcOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSrvcOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** The Ipx Services Operational group.')
mscVrIpxSrvcOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSrvcNetworkNumberIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSrvcNodeIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSrvcTypeIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxSrvcNameIndex"))
if mibBuilder.loadTexts: mscVrIpxSrvcOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSrvcOperEntry.setDescription('An entry in the mscVrIpxSrvcOperTable.')
mscVrIpxSrvcSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 5, 10, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxSrvcSocket.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSrvcSocket.setDescription('Socket at which the service is available')
mscVrIpxSrvcProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("nlsp", 4), ("static", 5), ("sap", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxSrvcProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSrvcProtocol.setDescription('The protocol from which knowledge of this service was obtained.')
mscVrIpxSrvcHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 5, 10, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxSrvcHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxSrvcHopCount.setDescription('Number of hops to the service.')
mscVrIpxAdj = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 6))
mscVrIpxAdjRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 6, 1), )
if mibBuilder.loadTexts: mscVrIpxAdjRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxAdjRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscVrIpxAdj components.')
mscVrIpxAdjRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxAdjProtocolPortIdentifierIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxAdjNetworkNumberIndex"))
if mibBuilder.loadTexts: mscVrIpxAdjRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxAdjRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpxAdj component.')
mscVrIpxAdjRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxAdjRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxAdjRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpxAdj components. These components cannot be added nor deleted.')
mscVrIpxAdjComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxAdjComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxAdjComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpxAdjStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxAdjStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxAdjStorageType.setDescription('This variable represents the storage type value for the mscVrIpxAdj tables.')
mscVrIpxAdjProtocolPortIdentifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 6, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: mscVrIpxAdjProtocolPortIdentifierIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxAdjProtocolPortIdentifierIndex.setDescription('This variable represents an index for the mscVrIpxAdj tables.')
mscVrIpxAdjNetworkNumberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 6, 1, 1, 11), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(1, 4)))
if mibBuilder.loadTexts: mscVrIpxAdjNetworkNumberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxAdjNetworkNumberIndex.setDescription('This variable represents an index for the mscVrIpxAdj tables.')
mscVrIpxAdjOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 6, 10), )
if mibBuilder.loadTexts: mscVrIpxAdjOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxAdjOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** The Adjacencies operational group.')
mscVrIpxAdjOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxAdjProtocolPortIdentifierIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxAdjNetworkNumberIndex"))
if mibBuilder.loadTexts: mscVrIpxAdjOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxAdjOperEntry.setDescription('An entry in the mscVrIpxAdjOperTable.')
mscVrIpxAdjPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 6, 10, 1, 1), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxAdjPhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxAdjPhysAddress.setDescription('The physical address of the adjacent router.')
mscVrIpxAdjAdjacencyState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initializing", 1), ("up", 2), ("failed", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxAdjAdjacencyState.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxAdjAdjacencyState.setDescription('The state of the connection to the adjacent router.')
mscVrIpxNs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7))
mscVrIpxNsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 1), )
if mibBuilder.loadTexts: mscVrIpxNsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpxNs components.')
mscVrIpxNsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxNsIndex"))
if mibBuilder.loadTexts: mscVrIpxNsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpxNs component.')
mscVrIpxNsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxNsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpxNs components. These components can be added and deleted.')
mscVrIpxNsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxNsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpxNsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxNsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsStorageType.setDescription('This variable represents the storage type value for the mscVrIpxNs tables.')
mscVrIpxNsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrIpxNsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsIndex.setDescription('This variable represents the index for the mscVrIpxNs tables.')
mscVrIpxNsProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 10), )
if mibBuilder.loadTexts: mscVrIpxNsProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsProvTable.setDescription('The provisionable attribute group for the IpxNetSentry component.')
mscVrIpxNsProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxNsIndex"))
if mibBuilder.loadTexts: mscVrIpxNsProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsProvEntry.setDescription('An entry in the mscVrIpxNsProvTable.')
mscVrIpxNsFirstFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxNsFirstFilter.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsFirstFilter.setDescription('First NetSentry filter for Ipx. If specified this filter is applied before any other NetSentry filters applicable to the packet.')
mscVrIpxNsLastFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxNsLastFilter.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsLastFilter.setDescription('Last filter for Ipx. If specified this filter is applied after all other NetSentry filters applicable to the packet.')
mscVrIpxNsLocalInFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 10, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxNsLocalInFilter.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsLocalInFilter.setDescription('The filter name of the NetSentry filter to be applied at the Local In filter point.')
mscVrIpxNsLocalOutFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 10, 1, 4), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxNsLocalOutFilter.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsLocalOutFilter.setDescription('The filter name of the NetSentry filter to be applied at the Local Out filter point.')
mscVrIpxNsNetSentryApp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 2))
mscVrIpxNsNetSentryAppRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 2, 1), )
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpxNsNetSentryApp components.')
mscVrIpxNsNetSentryAppRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxNsIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxNsNetSentryAppEntryIndex"))
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpxNsNetSentryApp component.')
mscVrIpxNsNetSentryAppRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpxNsNetSentryApp components. These components can be added and deleted.')
mscVrIpxNsNetSentryAppComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpxNsNetSentryAppStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppStorageType.setDescription('This variable represents the storage type value for the mscVrIpxNsNetSentryApp tables.')
mscVrIpxNsNetSentryAppEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 268435455)))
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppEntryIndex.setDescription('This variable represents the index for the mscVrIpxNsNetSentryApp tables.')
mscVrIpxNsNetSentryAppProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 2, 10), )
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppProvTable.setDescription('The Provisionable group for the IpxNetSentryApplyList.')
mscVrIpxNsNetSentryAppProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxNsIndex"), (0, "Nortel-MsCarrier-MscPassport-IpxMIB", "mscVrIpxNsNetSentryAppEntryIndex"))
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppProvEntry.setDescription('An entry in the mscVrIpxNsNetSentryAppProvTable.')
mscVrIpxNsNetSentryAppFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppFilter.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppFilter.setDescription('The name of the filter to be applied to packets matching the conditions in this entry of the IpxNetSentryApplyList.')
mscVrIpxNsNetSentryAppNetworkNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 2, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppNetworkNumber1.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppNetworkNumber1.setDescription('The first IPX network Number used to compare. This network number can be entered either as a dashed hex string or a string of hex digits. (For example a valid network number would be ff-ff-ff-ff or ffffffff). In addition a value of * will be accepted as a wildcard for all networks.')
mscVrIpxNsNetSentryAppNode1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 2, 10, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppNode1.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppNode1.setDescription('This attribute is the first IPX node address used to compare. This node number can be entered either as a dashed hex string or a string of hex digits. (For example a valid node number would be ff-ff-ff-ff-ff-ff or ffffffffffff). In addition a value of * will be accepted as a wildcard for all nodes.')
mscVrIpxNsNetSentryAppDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("to", 1), ("from", 2), ("tofrom", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppDirection.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppDirection.setDescription("Indicates the direction a packet must be moving between the first and second apply list entries in order for the entries to match. First 'to' second, first 'from' second, or first 'tofrom' second (either direction).")
mscVrIpxNsNetSentryAppNetworkNumber2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 2, 10, 1, 5), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppNetworkNumber2.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppNetworkNumber2.setDescription('The second IPX network Number used to compare. This network number can be entered either as a dashed hex string or a string of hex digits. (For example a valid network number would be ff-ff-ff-ff or ffffffff). In addition a value of * will be accepted as a wildcard for all networks.')
mscVrIpxNsNetSentryAppNode2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 7, 7, 2, 10, 1, 6), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppNode2.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpxNsNetSentryAppNode2.setDescription('This attribute is the second IPX node address used to compared. This node can be entered either as a dashed hex string or a string of hex digits. (For example a valid network number would be ff-ff-ff-ff-ff-ff or ffffffffffff). In addition a value of * will be accepted as a wildcard for all nodes.')
ipxGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 28, 1))
ipxGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 28, 1, 1))
ipxGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 28, 1, 1, 3))
ipxGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 28, 1, 1, 3, 2))
ipxCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 28, 3))
ipxCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 28, 3, 1))
ipxCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 28, 3, 1, 3))
ipxCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 28, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-IpxMIB", mscVrIpxAdjStorageType=mscVrIpxAdjStorageType, mscVrPpIpxPSapPStorageType=mscVrPpIpxPSapPStorageType, mscVrIpxInUnknownSocket=mscVrIpxInUnknownSocket, mscVrPpIpxPSnmpOperStatus=mscVrPpIpxPSnmpOperStatus, mscVrIpxNsNetSentryAppEntryIndex=mscVrIpxNsNetSentryAppEntryIndex, mscVrIpxSapSapAppStorageType=mscVrIpxSapSapAppStorageType, mscVrPpIpxPSapPOutResponses=mscVrPpIpxPSapPOutResponses, mscVrIpxFwd=mscVrIpxFwd, mscVrIpxSapSapAppProvTable=mscVrIpxSapSapAppProvTable, mscVrIpxInitialGeneralRequests=mscVrIpxInitialGeneralRequests, mscVrIpxSapSFltrNumberOfApplyEntries=mscVrIpxSapSFltrNumberOfApplyEntries, mscVrPpIpxPOperTable=mscVrPpIpxPOperTable, mscVrIpxSapStatsTable=mscVrIpxSapStatsTable, mscVrIpxComponentName=mscVrIpxComponentName, ipxCapabilitiesCA=ipxCapabilitiesCA, mscVrPpIpxPNetworkNumber=mscVrPpIpxPNetworkNumber, mscVrIpxInDelivers=mscVrIpxInDelivers, mscVrPpIpxPStatsEntry=mscVrPpIpxPStatsEntry, mscVrIpxNsLastFilter=mscVrIpxNsLastFilter, mscVrIpxAdjRowStatusTable=mscVrIpxAdjRowStatusTable, mscVrPpIpxPSourceRouteEndStationSupport=mscVrPpIpxPSourceRouteEndStationSupport, mscVrIpxNsProvTable=mscVrIpxNsProvTable, mscVrPpIpxPSapPInRequests=mscVrPpIpxPSapPInRequests, mscVrIpxNsNetSentryAppNode2=mscVrIpxNsNetSentryAppNode2, mscVrIpxRipRFltrNode=mscVrIpxRipRFltrNode, mscVrIpxNsNetSentryAppRowStatusTable=mscVrIpxNsNetSentryAppRowStatusTable, mscVrPpIpxPRowStatusTable=mscVrPpIpxPRowStatusTable, mscVrPpIpxPSapPIndex=mscVrPpIpxPSapPIndex, mscVrIpxOutDiscards=mscVrIpxOutDiscards, mscVrIpxSapSapAppProvEntry=mscVrIpxSapSapAppProvEntry, mscVrPpIpxPNetSentryPOutGoingFilter=mscVrPpIpxPNetSentryPOutGoingFilter, mscVrPpIpxPNetSentryPComponentName=mscVrPpIpxPNetSentryPComponentName, mscVrIpxSapIndex=mscVrIpxSapIndex, mscVrIpxRipRFltrOperEntry=mscVrIpxRipRFltrOperEntry, mscVrPpIpxPNetSentryPProvTable=mscVrPpIpxPNetSentryPProvTable, mscVrIpxFwdRowStatus=mscVrIpxFwdRowStatus, mscVrIpxNsRowStatusTable=mscVrIpxNsRowStatusTable, mscVrPpIpxPSapPStatsTable=mscVrPpIpxPSapPStatsTable, mscVrPpIpxPSapPOutRequests=mscVrPpIpxPSapPOutRequests, mscVrIpxRipRFltrStorageType=mscVrIpxRipRFltrStorageType, mscVrPpIpxPAdminControlEntry=mscVrPpIpxPAdminControlEntry, mscVrIpxRipRipAppRowStatusTable=mscVrIpxRipRipAppRowStatusTable, mscVrIpxInDiscards=mscVrIpxInDiscards, mscVrIpxSap=mscVrIpxSap, mscVrIpxSapSFltrOperEntry=mscVrIpxSapSFltrOperEntry, mscVrPpIpxPSapPStatsEntry=mscVrPpIpxPSapPStatsEntry, mscVrPpIpxPIWP=mscVrPpIpxPIWP, mscVrIpxRipRFltrRowStatusTable=mscVrIpxRipRFltrRowStatusTable, mscVrIpxSapSapOut=mscVrIpxSapSapOut, mscVrIpxInBadChecksums=mscVrIpxInBadChecksums, mscVrPpIpxPSapPOutPackets=mscVrPpIpxPSapPOutPackets, mscVrPpIpxPNetSentryPRowStatus=mscVrPpIpxPNetSentryPRowStatus, mscVrPpIpxPOperStatusTable=mscVrPpIpxPOperStatusTable, mscVrIpxAdjAdjacencyState=mscVrIpxAdjAdjacencyState, mscVrPpIpxPRipPRowStatus=mscVrPpIpxPRipPRowStatus, mscVrPpIpxPSapP=mscVrPpIpxPSapP, mscVrPpIpxPRipPRowStatusEntry=mscVrPpIpxPRipPRowStatusEntry, mscVrIpxNs=mscVrIpxNs, mscVrIpxRipRFltrOperTable=mscVrIpxRipRFltrOperTable, mscVrIpxAdjPhysAddress=mscVrIpxAdjPhysAddress, mscVrIpxRipRFltrProvEntry=mscVrIpxRipRFltrProvEntry, mscVrIpxNsLocalOutFilter=mscVrIpxNsLocalOutFilter, mscVrIpxSrvcNodeIndex=mscVrIpxSrvcNodeIndex, mscVrIpxProtocolPortCount=mscVrIpxProtocolPortCount, mscVrIpxSrvcNetworkNumberIndex=mscVrIpxSrvcNetworkNumberIndex, mscVrIpxStatsTable=mscVrIpxStatsTable, mscVrIpxSrvc=mscVrIpxSrvc, mscVrIpxSapSFltrIdentifierIndex=mscVrIpxSapSFltrIdentifierIndex, mscVrPpIpxPOperEntry=mscVrPpIpxPOperEntry, mscVrIpxSapSapIn=mscVrIpxSapSapIn, mscVrPpIpxPSapPComponentName=mscVrPpIpxPSapPComponentName, mscVrIpxFwdStorageType=mscVrIpxFwdStorageType, mscVrPpIpxPRipPOutRequests=mscVrPpIpxPRipPOutRequests, mscVrIpxRipRFltrPort=mscVrIpxRipRFltrPort, mscVrIpxInTooManyHops=mscVrIpxInTooManyHops, mscVrPpIpxPRowStatusEntry=mscVrPpIpxPRowStatusEntry, mscVrPpIpxPSapPRowStatusTable=mscVrPpIpxPSapPRowStatusTable, mscVrIpxInHeaderErrors=mscVrIpxInHeaderErrors, mscVrIpxRipRipAppStorageType=mscVrIpxRipRipAppStorageType, mscVrIpxSapRowStatusTable=mscVrIpxSapRowStatusTable, mscVrIpxDamping=mscVrIpxDamping, mscVrPpIpxPDefaultType=mscVrPpIpxPDefaultType, mscVrIpxNsRowStatus=mscVrIpxNsRowStatus, mscVrIpxRipRFltrHops=mscVrIpxRipRFltrHops, mscVrIpxNsNetSentryAppDirection=mscVrIpxNsNetSentryAppDirection, mscVrIpxRipRipAppProtocolPortNameIndex=mscVrIpxRipRipAppProtocolPortNameIndex, mscVrIpxRipRipIncorrectPackets=mscVrIpxRipRipIncorrectPackets, mscVrIpxStateEntry=mscVrIpxStateEntry, mscVrPpIpxPType=mscVrPpIpxPType, mscVrIpxSapSapAppComponentName=mscVrIpxSapSapAppComponentName, mscVrIpxNsNetSentryAppNetworkNumber2=mscVrIpxNsNetSentryAppNetworkNumber2, mscVrIpxSapSapAppRowStatus=mscVrIpxSapSapAppRowStatus, mscVrPpIpxPIWPInitFails=mscVrPpIpxPIWPInitFails, mscVrIpxAdjProtocolPortIdentifierIndex=mscVrIpxAdjProtocolPortIdentifierIndex, mscVrIpxOutRequests=mscVrIpxOutRequests, mscVrIpxRipRFltrComponentName=mscVrIpxRipRFltrComponentName, mscVrPpIpxP=mscVrPpIpxP, mscVrPpIpxPSapPRowStatus=mscVrPpIpxPSapPRowStatus, mscVrIpxRipMaxDampedSpecificRequests=mscVrIpxRipMaxDampedSpecificRequests, mscVrIpxOperStatusTable=mscVrIpxOperStatusTable, mscVrIpxNsNetSentryAppComponentName=mscVrIpxNsNetSentryAppComponentName, mscVrIpxUsageState=mscVrIpxUsageState, mscVrPpIpxPEncapsulation=mscVrPpIpxPEncapsulation, mscVrPpIpxPNetworkNumberProv=mscVrPpIpxPNetworkNumberProv, ipxMIB=ipxMIB, ipxGroupCA02=ipxGroupCA02, mscVrIpxProvTable=mscVrIpxProvTable, mscVrIpxFwdOperTable=mscVrIpxFwdOperTable, mscVrIpxRipRFltrIdentifierIndex=mscVrIpxRipRFltrIdentifierIndex, mscVrPpIpxPSnmpAdminStatus=mscVrPpIpxPSnmpAdminStatus, mscVrIpxSrvcRowStatusEntry=mscVrIpxSrvcRowStatusEntry, mscVrIpxFwdNextHopPhysAddress=mscVrIpxFwdNextHopPhysAddress, mscVrIpxFwdOperEntry=mscVrIpxFwdOperEntry, mscVrIpxRipRFltrRowStatus=mscVrIpxRipRFltrRowStatus, mscVrIpxRipRipIn=mscVrIpxRipRipIn, mscVrIpxAdminControlTable=mscVrIpxAdminControlTable, mscVrIpxServicesCount=mscVrIpxServicesCount, mscVrIpxNsFirstFilter=mscVrIpxNsFirstFilter, mscVrIpxIndex=mscVrIpxIndex, mscVrIpxSrvcTypeIndex=mscVrIpxSrvcTypeIndex, mscVrPpIpxPInReceives=mscVrPpIpxPInReceives, mscVrPpIpxPNetSentryPInComingFilter=mscVrPpIpxPNetSentryPInComingFilter, mscVrIpxSapSFltrRowStatusTable=mscVrIpxSapSFltrRowStatusTable, mscVrIpxNsIndex=mscVrIpxNsIndex, mscVrIpxRipStorageType=mscVrIpxRipStorageType, mscVrPpIpxPRipPInRequests=mscVrPpIpxPRipPInRequests, ipxGroup=ipxGroup, mscVrIpxSapSFltr=mscVrIpxSapSFltr, mscVrIpxAdminControlEntry=mscVrIpxAdminControlEntry, mscVrPpIpxPIWPRowStatus=mscVrPpIpxPIWPRowStatus, mscVrIpxOperTable=mscVrIpxOperTable, mscVrIpxSrvcHopCount=mscVrIpxSrvcHopCount, mscVrIpxRipRowStatusTable=mscVrIpxRipRowStatusTable, mscVrIpxSnmpAdminStatus=mscVrIpxSnmpAdminStatus, mscVrIpxRowStatus=mscVrIpxRowStatus, mscVrIpxInReceives=mscVrIpxInReceives, mscVrIpxSapSFltrProvEntry=mscVrIpxSapSFltrProvEntry, mscVrPpIpxPIWPNeighbourRouterName=mscVrPpIpxPIWPNeighbourRouterName, mscVrPpIpxPIWPNeighbourInternalNetworkNumber=mscVrPpIpxPIWPNeighbourInternalNetworkNumber, mscVrPpIpxPRipP=mscVrPpIpxPRipP, mscVrIpxRipRFltrDisposition=mscVrIpxRipRFltrDisposition, mscVrPpIpxPRipPIndex=mscVrPpIpxPRipPIndex, mscVrPpIpxPIWPRowStatusTable=mscVrPpIpxPIWPRowStatusTable, mscVrPpIpxPRipPInPackets=mscVrPpIpxPRipPInPackets, mscVrPpIpxPRipPStatsEntry=mscVrPpIpxPRipPStatsEntry, mscVrIpxNsComponentName=mscVrIpxNsComponentName, mscVrIpxRipStatsEntry=mscVrIpxRipStatsEntry, mscVrPpIpxPRowStatus=mscVrPpIpxPRowStatus, mscVrIpxRipRFltrTicks=mscVrIpxRipRFltrTicks, mscVrIpxSapSFltrName=mscVrIpxSapSFltrName, mscVrIpxRowStatusTable=mscVrIpxRowStatusTable, mscVrIpxAdj=mscVrIpxAdj, ipxCapabilitiesCA02A=ipxCapabilitiesCA02A, mscVrIpxNsStorageType=mscVrIpxNsStorageType, mscVrPpIpxPRipPIncorrectPackets=mscVrPpIpxPRipPIncorrectPackets, mscVrIpxRipRFltrNumberOfApplyEntries=mscVrIpxRipRFltrNumberOfApplyEntries, mscVrIpxSapSFltrNode=mscVrIpxSapSFltrNode, mscVrIpxSapRowStatus=mscVrIpxSapRowStatus, mscVrIpxSapSFltrStorageType=mscVrIpxSapSFltrStorageType, mscVrIpxSrvcProtocol=mscVrIpxSrvcProtocol, mscVrIpxSrvcStorageType=mscVrIpxSrvcStorageType, mscVrIpxAdjComponentName=mscVrIpxAdjComponentName, mscVrIpxStatsEntry=mscVrIpxStatsEntry, mscVrIpxRipRipAppDirection=mscVrIpxRipRipAppDirection, mscVrIpxSrvcNameIndex=mscVrIpxSrvcNameIndex, mscVrIpxSapSapAppRowStatusTable=mscVrIpxSapSapAppRowStatusTable, mscVrIpxSapComponentName=mscVrIpxSapComponentName, mscVrIpxOperStatusEntry=mscVrIpxOperStatusEntry, mscVrIpxRipRFltr=mscVrIpxRipRFltr, mscVrIpxSapMaxDampedGeneralRequests=mscVrIpxSapMaxDampedGeneralRequests, ipxGroupCA=ipxGroupCA, mscVrIpxNsNetSentryAppProvTable=mscVrIpxNsNetSentryAppProvTable, mscVrPpIpxPUsageState=mscVrPpIpxPUsageState, mscVrIpxFwdRowStatusTable=mscVrIpxFwdRowStatusTable, mscVrIpxOutPackets=mscVrIpxOutPackets, mscVrIpxNsNetSentryAppRowStatusEntry=mscVrIpxNsNetSentryAppRowStatusEntry, mscVrIpxAdminState=mscVrIpxAdminState, mscVrIpxSrvcRowStatus=mscVrIpxSrvcRowStatus, mscVrIpxAdjOperEntry=mscVrIpxAdjOperEntry, mscVrIpxSrvcSocket=mscVrIpxSrvcSocket, mscVrIpxRipRipAppProvTable=mscVrIpxRipRipAppProvTable, mscVrIpx=mscVrIpx, mscVrPpIpxPAdminControlTable=mscVrPpIpxPAdminControlTable, mscVrPpIpxPStateChanges=mscVrPpIpxPStateChanges, mscVrPpIpxPIWPRowStatusEntry=mscVrPpIpxPIWPRowStatusEntry, mscVrPpIpxPRipPRowStatusTable=mscVrPpIpxPRipPRowStatusTable, mscVrIpxRipRipAppRowStatus=mscVrIpxRipRipAppRowStatus, mscVrPpIpxPNetSentryPIndex=mscVrPpIpxPNetSentryPIndex, mscVrIpxSapSFltrDisposition=mscVrIpxSapSFltrDisposition, mscVrPpIpxPSapPIncorrectPackets=mscVrPpIpxPSapPIncorrectPackets, mscVrPpIpxPAdminState=mscVrPpIpxPAdminState, mscVrIpxFwdNextHopNetworkNumber=mscVrIpxFwdNextHopNetworkNumber, mscVrIpxRipRowStatus=mscVrIpxRipRowStatus, mscVrIpxFwdProtocol=mscVrIpxFwdProtocol, mscVrIpxRipRipAppFilterIdentifierIndex=mscVrIpxRipRipAppFilterIdentifierIndex, mscVrPpIpxPIWPComponentName=mscVrPpIpxPIWPComponentName, mscVrIpxFwdHopCount=mscVrIpxFwdHopCount, mscVrPpIpxPIWPStorageType=mscVrPpIpxPIWPStorageType, mscVrIpxRipMaxDampedGeneralRequests=mscVrIpxRipMaxDampedGeneralRequests, mscVrIpxAdjOperTable=mscVrIpxAdjOperTable, mscVrPpIpxPComponentName=mscVrPpIpxPComponentName, mscVrIpxNsProvEntry=mscVrIpxNsProvEntry, mscVrIpxDestinationCount=mscVrIpxDestinationCount, mscVrIpxNsNetSentryAppNode1=mscVrIpxNsNetSentryAppNode1, mscVrIpxProvEntry=mscVrIpxProvEntry, mscVrPpIpxPRipPStorageType=mscVrPpIpxPRipPStorageType, mscVrIpxRipRFltrNetworkNumber=mscVrIpxRipRFltrNetworkNumber, mscVrPpIpxPIWPOperEntry=mscVrPpIpxPIWPOperEntry, mscVrIpxSapSFltrOperTable=mscVrIpxSapSFltrOperTable, mscVrIpxAdjRowStatus=mscVrIpxAdjRowStatus, mscVrIpxSapSFltrRowStatus=mscVrIpxSapSFltrRowStatus, mscVrIpxSapMaxDampedSpecificRequests=mscVrIpxSapMaxDampedSpecificRequests, mscVrPpIpxPSresProvEntry=mscVrPpIpxPSresProvEntry, mscVrIpxNsNetSentryAppFilter=mscVrIpxNsNetSentryAppFilter, mscVrPpIpxPIWPOperTable=mscVrPpIpxPIWPOperTable, mscVrIpxHoldDownInterval=mscVrIpxHoldDownInterval, mscVrPpIpxPIWPRemoteStationIdentifierIndex=mscVrPpIpxPIWPRemoteStationIdentifierIndex, mscVrPpIpxPNetSentryPRowStatusTable=mscVrPpIpxPNetSentryPRowStatusTable, mscVrPpIpxPProvTable=mscVrPpIpxPProvTable, mscVrIpxAdjNetworkNumberIndex=mscVrIpxAdjNetworkNumberIndex, mscVrPpIpxPSapPInPackets=mscVrPpIpxPSapPInPackets, mscVrIpxSrvcComponentName=mscVrIpxSrvcComponentName, mscVrPpIpxPNetSentryP=mscVrPpIpxPNetSentryP, mscVrIpxSapSFltrRowStatusEntry=mscVrIpxSapSFltrRowStatusEntry, mscVrIpxOperEntry=mscVrIpxOperEntry, mscVrIpxRipAgeMultiplier=mscVrIpxRipAgeMultiplier, mscVrIpxNoRoutes=mscVrIpxNoRoutes, mscVrIpxSrvcOperEntry=mscVrIpxSrvcOperEntry, mscVrPpIpxPNetSentryPProvEntry=mscVrPpIpxPNetSentryPProvEntry, mscVrIpxSapAgeMultiplier=mscVrIpxSapAgeMultiplier, mscVrIpxControlDelay=mscVrIpxControlDelay, ipxGroupCA02A=ipxGroupCA02A, mscVrIpxInFiltered=mscVrIpxInFiltered, mscVrIpxMaxPathSplits=mscVrIpxMaxPathSplits, mscVrIpxOutMalformedRequests=mscVrIpxOutMalformedRequests, mscVrIpxSapStorageType=mscVrIpxSapStorageType, mscVrIpxSapSFltrComponentName=mscVrIpxSapSFltrComponentName, mscVrIpxRipRipAppRowStatusEntry=mscVrIpxRipRipAppRowStatusEntry, mscVrPpIpxPIndex=mscVrPpIpxPIndex, mscVrIpxRipStatsTable=mscVrIpxRipStatsTable, mscVrPpIpxPSapPInResponses=mscVrPpIpxPSapPInResponses, mscVrIpxSapStatsEntry=mscVrIpxSapStatsEntry, mscVrPpIpxPStateEntry=mscVrPpIpxPStateEntry, mscVrIpxSapSapApp=mscVrIpxSapSapApp, mscVrIpxSapSapAppDirection=mscVrIpxSapSapAppDirection, mscVrPpIpxPRipPInResponses=mscVrPpIpxPRipPInResponses, mscVrPpIpxPRipPOutPackets=mscVrPpIpxPRipPOutPackets, mscVrIpxOperationalState=mscVrIpxOperationalState, mscVrIpxSapSFltrType=mscVrIpxSapSFltrType, mscVrIpxForwarded=mscVrIpxForwarded, mscVrPpIpxPBroadcastInhibit=mscVrPpIpxPBroadcastInhibit, mscVrPpIpxPStatsTable=mscVrPpIpxPStatsTable, mscVrPpIpxPSapPRowStatusEntry=mscVrPpIpxPSapPRowStatusEntry, mscVrIpxUpdateDelay=mscVrIpxUpdateDelay)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-IpxMIB", mscVrPpIpxPNetSentryPStorageType=mscVrPpIpxPNetSentryPStorageType, mscVrPpIpxPProvEntry=mscVrPpIpxPProvEntry, mscVrIpxRipRipAppProvEntry=mscVrIpxRipRipAppProvEntry, mscVrIpxOutFiltered=mscVrIpxOutFiltered, mscVrPpIpxPForwarded=mscVrPpIpxPForwarded, mscVrPpIpxPStorageType=mscVrPpIpxPStorageType, mscVrIpxNetworkNumber=mscVrIpxNetworkNumber, mscVrIpxRipRipOut=mscVrIpxRipRipOut, mscVrIpxSapSFltrNetworkNumber=mscVrIpxSapSFltrNetworkNumber, mscVrIpxNsNetSentryApp=mscVrIpxNsNetSentryApp, mscVrIpxRipRFltrRowStatusEntry=mscVrIpxRipRFltrRowStatusEntry, mscVrIpxNsNetSentryAppRowStatus=mscVrIpxNsNetSentryAppRowStatus, mscVrPpIpxPRipPComponentName=mscVrPpIpxPRipPComponentName, mscVrIpxRipRowStatusEntry=mscVrIpxRipRowStatusEntry, mscVrIpxFwdTicks=mscVrIpxFwdTicks, mscVrPpIpxPSresProvTable=mscVrPpIpxPSresProvTable, mscVrPpIpxPStateTable=mscVrPpIpxPStateTable, mscVrIpxRipIndex=mscVrIpxRipIndex, mscVrIpxNsNetSentryAppProvEntry=mscVrIpxNsNetSentryAppProvEntry, mscVrIpxSapSapIncorrectPackets=mscVrIpxSapSapIncorrectPackets, mscVrPpIpxPRipPOutResponses=mscVrPpIpxPRipPOutResponses, mscVrIpxRowStatusEntry=mscVrIpxRowStatusEntry, mscVrIpxStorageType=mscVrIpxStorageType, mscVrIpxFwdComponentName=mscVrIpxFwdComponentName, ipxCapabilitiesCA02=ipxCapabilitiesCA02, mscVrIpxSapRowStatusEntry=mscVrIpxSapRowStatusEntry, mscVrIpxAdjRowStatusEntry=mscVrIpxAdjRowStatusEntry, mscVrIpxNsNetSentryAppStorageType=mscVrIpxNsNetSentryAppStorageType, mscVrIpxSapSapAppRowStatusEntry=mscVrIpxSapSapAppRowStatusEntry, mscVrIpxSrvcOperTable=mscVrIpxSrvcOperTable, mscVrIpxNsNetSentryAppNetworkNumber1=mscVrIpxNsNetSentryAppNetworkNumber1, mscVrIpxSrvcRowStatusTable=mscVrIpxSrvcRowStatusTable, mscVrIpxRipComponentName=mscVrIpxRipComponentName, mscVrIpxSapSFltrProvTable=mscVrIpxSapSFltrProvTable, mscVrIpxMaxHops=mscVrIpxMaxHops, mscVrIpxSnmpOperStatus=mscVrIpxSnmpOperStatus, mscVrIpxFwdRowStatusEntry=mscVrIpxFwdRowStatusEntry, mscVrIpxRipRipApp=mscVrIpxRipRipApp, mscVrIpxFwdNetworkNumberIndex=mscVrIpxFwdNetworkNumberIndex, mscVrIpxSapSapAppFilterIdentifierIndex=mscVrIpxSapSapAppFilterIdentifierIndex, mscVrIpxInNetBIOS=mscVrIpxInNetBIOS, mscVrPpIpxPRipPStatsTable=mscVrPpIpxPRipPStatsTable, mscVrIpxNsRowStatusEntry=mscVrIpxNsRowStatusEntry, mscVrIpxNsLocalInFilter=mscVrIpxNsLocalInFilter, mscVrIpxRipUpdateInterval=mscVrIpxRipUpdateInterval, mscVrIpxSapSapAppProtocolPortNameIndex=mscVrIpxSapSapAppProtocolPortNameIndex, mscVrIpxSapUpdateInterval=mscVrIpxSapUpdateInterval, mscVrIpxRipRipAppComponentName=mscVrIpxRipRipAppComponentName, mscVrIpxStateTable=mscVrIpxStateTable, mscVrPpIpxPOperStatusEntry=mscVrPpIpxPOperStatusEntry, mscVrIpxRipRFltrProvTable=mscVrIpxRipRFltrProvTable, mscVrPpIpxPNode=mscVrPpIpxPNode, mscVrIpxRip=mscVrIpxRip, mscVrIpxFwdProtocolPortId=mscVrIpxFwdProtocolPortId, mscVrPpIpxPNetSentryPRowStatusEntry=mscVrPpIpxPNetSentryPRowStatusEntry, mscVrPpIpxPOperationalState=mscVrPpIpxPOperationalState, ipxCapabilities=ipxCapabilities)
