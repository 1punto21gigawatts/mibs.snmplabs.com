#
# PySNMP MIB module AT-USER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AT-USER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:30:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
sysinfo, = mibBuilder.importSymbols("AT-SMI-MIB", "sysinfo")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Bits, Unsigned32, IpAddress, Integer32, iso, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64, NotificationType, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Bits", "Unsigned32", "IpAddress", "Integer32", "iso", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64", "NotificationType", "Counter32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
user = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20))
user.setRevisions(('2012-09-21 00:00', '2010-09-07 00:00', '2010-06-15 00:15', '2010-06-08 00:00', '2008-10-16 12:00', '2008-08-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: user.setRevisionsDescriptions(('Added chassis switch (e.g. SBx8100) descriptions to stack-related MIB objects', 'Generic syntax tidy up', 'MIB revision history dates in descriptions updated.', 'Add objects for strong passwords information.', 'Add objects for local user data base information.', 'Initial version.',))
if mibBuilder.loadTexts: user.setLastUpdated('201209210000Z')
if mibBuilder.loadTexts: user.setOrganization('Allied Telesis, Inc.')
if mibBuilder.loadTexts: user.setContactInfo(' http://www.alliedtelesis.com')
if mibBuilder.loadTexts: user.setDescription('The AT-USER MIB contains objects for displaying information of users currently logged into a device, or configured in the local user data base of the device.')
userInfoTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 1), )
if mibBuilder.loadTexts: userInfoTable.setStatus('current')
if mibBuilder.loadTexts: userInfoTable.setDescription('A table of information about users. Each entry in the table represents a user currently logged into the device.')
userInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 1, 1), ).setIndexNames((0, "AT-USER-MIB", "userInfoType"), (0, "AT-USER-MIB", "userInfoIndex"))
if mibBuilder.loadTexts: userInfoEntry.setStatus('current')
if mibBuilder.loadTexts: userInfoEntry.setDescription('Information on a user currently logged into the device.')
userInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("console", 1), ("aux", 2), ("telnet", 3), ("script", 4), ("stack", 5))))
if mibBuilder.loadTexts: userInfoType.setStatus('current')
if mibBuilder.loadTexts: userInfoType.setDescription('The type of connection through which the user logged into the device: - console (1) - aux (2) - telnet (3) - script (4) - stack or back-up CFC console (5)')
userInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: userInfoIndex.setStatus('current')
if mibBuilder.loadTexts: userInfoIndex.setDescription('The index of the line upon which the user logged into the device.')
userInfoUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userInfoUserName.setStatus('current')
if mibBuilder.loadTexts: userInfoUserName.setDescription('This object represents the user name of the user currently logged into the device.')
userInfoPrivilegeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userInfoPrivilegeLevel.setStatus('current')
if mibBuilder.loadTexts: userInfoPrivilegeLevel.setDescription('This object indicates the privilege level the user is granted.')
userInfoIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userInfoIdleTime.setStatus('current')
if mibBuilder.loadTexts: userInfoIdleTime.setDescription('This object indicates the amount of time since the user was last active. It is in the form of hh:mm:ss.')
userInfoLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userInfoLocation.setStatus('current')
if mibBuilder.loadTexts: userInfoLocation.setDescription('This object indicates the location or login method of the user. It can be an IP address used by the user to telnet into the device, or an asyn port, etc.')
userInfoPasswordLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userInfoPasswordLifetime.setStatus('current')
if mibBuilder.loadTexts: userInfoPasswordLifetime.setDescription("This object indicates the number of days remaining until the users password expires. Depending on the current user setting it will either display a string of: 'No Expiry' - password will never expire (default); 'x days' where x is the remaining lifetime of the current password - the maximum lifetime value is 1000 days; '-x days (expired)' indicates that the current password expired 'x' days ago.")
userInfoPasswordLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userInfoPasswordLastChange.setStatus('current')
if mibBuilder.loadTexts: userInfoPasswordLastChange.setDescription('This object indicates, in days, the last time the password was altered.')
userConfigTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 2), )
if mibBuilder.loadTexts: userConfigTable.setStatus('current')
if mibBuilder.loadTexts: userConfigTable.setDescription('A table of user configuration information. Each entry in the table represents a user configured in the local user data base of the device.')
userConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 2, 1), ).setIndexNames((0, "AT-USER-MIB", "userConfigIndex"))
if mibBuilder.loadTexts: userConfigEntry.setStatus('current')
if mibBuilder.loadTexts: userConfigEntry.setDescription('A conceptual entry in the userConfigTable.')
userConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: userConfigIndex.setStatus('current')
if mibBuilder.loadTexts: userConfigIndex.setDescription('The index used to identify entries in the userConfigTable.')
userConfigUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userConfigUsername.setStatus('current')
if mibBuilder.loadTexts: userConfigUsername.setDescription("This object represents the user's name in configuration.")
userConfigPrivilegeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userConfigPrivilegeLevel.setStatus('current')
if mibBuilder.loadTexts: userConfigPrivilegeLevel.setDescription("This object represents the user's privilege level in configuration.")
userSecurityPasswordRules = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 3))
userSecurityPasswordHistory = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSecurityPasswordHistory.setStatus('current')
if mibBuilder.loadTexts: userSecurityPasswordHistory.setDescription("This object represents the number of previous passwords that will be retained for comparison when a new password is created for the user. The password must be unique when compared against the previous history. A value of 0 represents 'No Restriction' - default. The maximum number of retained passwords is 15.")
userSecurityPasswordLifetime = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSecurityPasswordLifetime.setStatus('current')
if mibBuilder.loadTexts: userSecurityPasswordLifetime.setDescription("This object represents the maximum time interval (days) that the password may persist for before a change is required. A value of 0 represents 'No Expiry' - default. The maximum value is 1000 days.")
userSecurityPasswordWarning = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSecurityPasswordWarning.setStatus('current')
if mibBuilder.loadTexts: userSecurityPasswordWarning.setDescription("This object represents the number of days before the password expires that a warning message will be displayed when the user logs on. A value of 0 indicates 'No Warning' - default. The maximum value is 1000 but must always be less than the password lifetime.")
userSecurityPasswordMinLength = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 3, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSecurityPasswordMinLength.setStatus('current')
if mibBuilder.loadTexts: userSecurityPasswordMinLength.setDescription('This object represents the minimum password length that the password must satisfy to be considered valid. The default value is 1.')
userSecurityPasswordMinCategory = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 3, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSecurityPasswordMinCategory.setStatus('current')
if mibBuilder.loadTexts: userSecurityPasswordMinCategory.setDescription('This object represents the minimum number of different categories that the password must satisfy to be considered valid. Categories are split into four groups: upper-case letters; lower-case letters; digits; special symbols. For example, combinations of: ABCD (1 category), ABCDabcd (2 categories), ABCD1111 (2 categories), abcd#$# (2 categories), Aa1# (4 categories). The default value is 1.')
userSecurityPasswordForced = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSecurityPasswordForced.setStatus('current')
if mibBuilder.loadTexts: userSecurityPasswordForced.setDescription('This object represents whether or not a user with an expired password should be forced to alter their password at the next log-on. When a user logs on with an expired password the system will either reject the log-on attempt or if allowed to log-on then the user may be forced to update their password immediately depending on this setting. This functionality is only valid for administrative users. The default value is disabled.')
userSecurityPasswordReject = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 3, 20, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSecurityPasswordReject.setStatus('current')
if mibBuilder.loadTexts: userSecurityPasswordReject.setDescription('This object represents whether or not a user log-on attempt with an expired password will be rejected. If they are not rejected then the user will be allowed to log-on. They may have to alter their password immediately based on the forced setting. This functionality is only valid for administrative users. The passwords of non-administrative users will never expire. The default value is disabled.')
mibBuilder.exportSymbols("AT-USER-MIB", userConfigUsername=userConfigUsername, userSecurityPasswordForced=userSecurityPasswordForced, userSecurityPasswordWarning=userSecurityPasswordWarning, userInfoPasswordLifetime=userInfoPasswordLifetime, userSecurityPasswordMinLength=userSecurityPasswordMinLength, userConfigTable=userConfigTable, userSecurityPasswordMinCategory=userSecurityPasswordMinCategory, userInfoType=userInfoType, userInfoIndex=userInfoIndex, userConfigIndex=userConfigIndex, userInfoIdleTime=userInfoIdleTime, user=user, userInfoEntry=userInfoEntry, userSecurityPasswordHistory=userSecurityPasswordHistory, userConfigEntry=userConfigEntry, userConfigPrivilegeLevel=userConfigPrivilegeLevel, userInfoPrivilegeLevel=userInfoPrivilegeLevel, userSecurityPasswordLifetime=userSecurityPasswordLifetime, userInfoPasswordLastChange=userInfoPasswordLastChange, userInfoTable=userInfoTable, userInfoUserName=userInfoUserName, userSecurityPasswordReject=userSecurityPasswordReject, userInfoLocation=userInfoLocation, PYSNMP_MODULE_ID=user, userSecurityPasswordRules=userSecurityPasswordRules)
