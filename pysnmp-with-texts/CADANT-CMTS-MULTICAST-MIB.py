#
# PySNMP MIB module CADANT-CMTS-MULTICAST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-CMTS-MULTICAST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:45:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
cadIfMacDomainIfIndex, = mibBuilder.importSymbols("CADANT-CMTS-LAYER2CMTS-MIB", "cadIfMacDomainIfIndex")
cadLayer3, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadLayer3")
mgmdPmStaticGroupAddressType, mgmdPmStaticGroupIfIndex, mgmdPmStaticGroupEntityType = mibBuilder.importSymbols("DC-MGMD-MIB", "mgmdPmStaticGroupAddressType", "mgmdPmStaticGroupIfIndex", "mgmdPmStaticGroupEntityType")
ChSetId, = mibBuilder.importSymbols("DOCS-IF3-MIB", "ChSetId")
dsgIfClassId, dsgIfTunnelIndex, dsgIfTunnelGrpIndex, Dsid = mibBuilder.importSymbols("DSG-IF-MIB", "dsgIfClassId", "dsgIfTunnelIndex", "dsgIfTunnelGrpIndex", "Dsid")
ifIndex, InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddressType, InetAddress, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressPrefixLength")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Unsigned32, TimeTicks, Counter32, Gauge32, MibIdentifier, ObjectIdentity, Integer32, Counter64, NotificationType, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "TimeTicks", "Counter32", "Gauge32", "MibIdentifier", "ObjectIdentity", "Integer32", "Counter64", "NotificationType", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
MacAddress, TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
cadMcastStdMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10))
cadMcastStdMib.setRevisions(('2015-01-28 00:00', '2014-09-22 00:00', '2014-06-04 00:00', '2014-04-08 00:00', '2013-07-18 00:00', '2013-01-28 00:00', '2012-10-08 00:00', '2011-11-08 00:00', '2011-04-05 00:00', '2011-04-04 00:00', '2011-03-21 00:00', '2011-03-08 00:00', '2005-08-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadMcastStdMib.setRevisionsDescriptions(('Add cadMcastClearVideoForwardCounts.', 'Add cadMcastForwardDestIfType as an index of cadMcastForwardDestEntry.', 'Add cadMcastIgmpThrottleEnable, cadMcastIgmpThrottleBurstSize, cadMcastIgmpThrottleInterval and cadMcastIgmpThrottleIncrement for US IGMP Throttling.', 'Add cadDsgIfTunnelChToGroupTable', 'Add cadMcastDeleteDsg ', 'Change cadMcastStatsTunnelIndex from not-accessible to read-only', 'Add cadMcastStatsTable', 'Remove 120 seconds from cadStaticFqdnCachePollInterval. Add cadMcastForwardUseDefaultFlow object. Reduce the size of cadFqdnCacheName, cadDsgIfSrcName and cadMgmdPmStaticGroupSourceName from 250 to 154.', 'Rename cadStaticFqdnCfgGroup to cadFqdnCfgGroup. Rename cadStaticFqdnCacheEntry to cadFqdnCacheEntry. Change SYNTAX of FQDN name from OCTET STRING to SnmpAdminString.', 'Change range of cadStaticFqdnCachePollInterval from (1800..2678400) to (300..86400)', 'Remove cadMgmdPmStaticGroupName, cadMgmdPmStaticGroupSourceStaticIpAddr and cadDsgIfDestName. Rename cadMgmdPmStaticGroupStaticIpAddr to Rename cadMgmdPmStaticGroup. Add cadStaticFqdnCacheStatus. Change FQDN name maximum size from 256 to 250.', 'Add cadStaticFqdnCfgGroup, cadStaticFqdnCacheEntry, cadDsgIfClassifierCfgEntry, and cadMgmdPmStaticGroupCfgEntry.', 'Original version.',))
if mibBuilder.loadTexts: cadMcastStdMib.setLastUpdated('201501280000Z')
if mibBuilder.loadTexts: cadMcastStdMib.setOrganization('Arris Inc')
if mibBuilder.loadTexts: cadMcastStdMib.setContactInfo('Arris Technical Support')
if mibBuilder.loadTexts: cadMcastStdMib.setDescription('Cadant Multicast MIB tables')
cadMcastStaticMacIpBindingTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 1), )
if mibBuilder.loadTexts: cadMcastStaticMacIpBindingTable.setStatus('current')
if mibBuilder.loadTexts: cadMcastStaticMacIpBindingTable.setDescription('The list of static multicast MAC/IP bindings. Bindings in this table are used to override the standard RFC bindings.')
cadMcastStaticMacIpBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 1, 1), ).setIndexNames((0, "CADANT-CMTS-MULTICAST-MIB", "cadMcastStaticMacIpBindingAddressType"), (0, "CADANT-CMTS-MULTICAST-MIB", "cadMcastStaticMacIpBindingAddress"))
if mibBuilder.loadTexts: cadMcastStaticMacIpBindingEntry.setStatus('current')
if mibBuilder.loadTexts: cadMcastStaticMacIpBindingEntry.setDescription('An entry (conceptual row) in the cadMcastStaticMacIpBindingTable.')
cadMcastStaticMacIpBindingAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cadMcastStaticMacIpBindingAddressType.setStatus('current')
if mibBuilder.loadTexts: cadMcastStaticMacIpBindingAddressType.setDescription('The address type of the InetAddress variables in this table.')
cadMcastStaticMacIpBindingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cadMcastStaticMacIpBindingAddress.setStatus('current')
if mibBuilder.loadTexts: cadMcastStaticMacIpBindingAddress.setDescription('The multicast group address.')
cadMcastStaticMacIpBindingMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadMcastStaticMacIpBindingMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadMcastStaticMacIpBindingMacAddress.setDescription('The MAC address to bind to the multicast group address in the ARP table.')
cadMcastStaticMacIpBindingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadMcastStaticMacIpBindingStatus.setStatus('current')
if mibBuilder.loadTexts: cadMcastStaticMacIpBindingStatus.setDescription('The status of this row.')
cadMcastMrouteTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 2), )
if mibBuilder.loadTexts: cadMcastMrouteTable.setStatus('current')
if mibBuilder.loadTexts: cadMcastMrouteTable.setDescription('The list of static mroutes. Routes in this table are used to override unicast routes.')
cadMcastMrouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 2, 1), ).setIndexNames((0, "CADANT-CMTS-MULTICAST-MIB", "cadMcastMrouteType"), (0, "CADANT-CMTS-MULTICAST-MIB", "cadMcastMrouteSourceAddress"), (0, "CADANT-CMTS-MULTICAST-MIB", "cadMcastMrouteSourcePrefix"))
if mibBuilder.loadTexts: cadMcastMrouteEntry.setStatus('current')
if mibBuilder.loadTexts: cadMcastMrouteEntry.setDescription('An entry (conceptual row) in the cadMcastMrouteTable.')
cadMcastMrouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cadMcastMrouteType.setStatus('current')
if mibBuilder.loadTexts: cadMcastMrouteType.setDescription('The address type of the InetAddress variables in this table.')
cadMcastMrouteSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: cadMcastMrouteSourceAddress.setStatus('current')
if mibBuilder.loadTexts: cadMcastMrouteSourceAddress.setDescription('The multicast route source address.')
cadMcastMrouteSourcePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 2, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: cadMcastMrouteSourcePrefix.setStatus('current')
if mibBuilder.loadTexts: cadMcastMrouteSourcePrefix.setDescription('The multicast route source network prefix.')
cadMcastMrouteRpfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 2, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadMcastMrouteRpfAddress.setStatus('current')
if mibBuilder.loadTexts: cadMcastMrouteRpfAddress.setDescription('The multicast route RPF neighbor address.')
cadMcastMrouteDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadMcastMrouteDistance.setStatus('current')
if mibBuilder.loadTexts: cadMcastMrouteDistance.setDescription('The multicast route admin distance.')
cadMcastMrouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadMcastMrouteStatus.setStatus('current')
if mibBuilder.loadTexts: cadMcastMrouteStatus.setDescription('The status of this row.')
cadMcastForwardTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 3), )
if mibBuilder.loadTexts: cadMcastForwardTable.setStatus('current')
if mibBuilder.loadTexts: cadMcastForwardTable.setDescription('The list of multicast forwardings.')
cadMcastForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 3, 1), ).setIndexNames((0, "CADANT-CMTS-MULTICAST-MIB", "cadMcastForwardAddressType"), (0, "CADANT-CMTS-MULTICAST-MIB", "cadMcastForwardGroupAddress"), (0, "CADANT-CMTS-MULTICAST-MIB", "cadMcastForwardSourceAddress"), (0, "CADANT-CMTS-MULTICAST-MIB", "cadMcastForwardSourceIf"))
if mibBuilder.loadTexts: cadMcastForwardEntry.setStatus('current')
if mibBuilder.loadTexts: cadMcastForwardEntry.setDescription('An entry (conceptual row) in the cadMcastForwardTable.')
cadMcastForwardAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cadMcastForwardAddressType.setStatus('current')
if mibBuilder.loadTexts: cadMcastForwardAddressType.setDescription('The address type of the InetAddress variables in this table.')
cadMcastForwardGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 3, 1, 2), InetAddress())
if mibBuilder.loadTexts: cadMcastForwardGroupAddress.setStatus('current')
if mibBuilder.loadTexts: cadMcastForwardGroupAddress.setDescription('The multicast group address.')
cadMcastForwardSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 3, 1, 3), InetAddress())
if mibBuilder.loadTexts: cadMcastForwardSourceAddress.setStatus('current')
if mibBuilder.loadTexts: cadMcastForwardSourceAddress.setDescription('The multicast source address or 0 for all sources.')
cadMcastForwardSourceIf = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 3, 1, 4), InterfaceIndexOrZero())
if mibBuilder.loadTexts: cadMcastForwardSourceIf.setStatus('current')
if mibBuilder.loadTexts: cadMcastForwardSourceIf.setDescription('The multicast source interface or 0 for all interface.')
cadMcastForwardDestIfList = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMcastForwardDestIfList.setStatus('current')
if mibBuilder.loadTexts: cadMcastForwardDestIfList.setDescription('The index id of the list of destination interfaces.')
cadMcastForwardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMcastForwardCount.setStatus('current')
if mibBuilder.loadTexts: cadMcastForwardCount.setDescription('The number of multicast packets forwarded for this group.')
cadMcastForwardDestTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 4), )
if mibBuilder.loadTexts: cadMcastForwardDestTable.setStatus('current')
if mibBuilder.loadTexts: cadMcastForwardDestTable.setDescription('The list of multicast forwarding destination interfaces.')
cadMcastForwardDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 4, 1), ).setIndexNames((0, "CADANT-CMTS-MULTICAST-MIB", "cadMcastForwardDestIfListId"), (0, "CADANT-CMTS-MULTICAST-MIB", "cadMcastForwardDestIfType"), (0, "CADANT-CMTS-MULTICAST-MIB", "cadMcastForwardDestIf"))
if mibBuilder.loadTexts: cadMcastForwardDestEntry.setStatus('current')
if mibBuilder.loadTexts: cadMcastForwardDestEntry.setDescription('An entry (conceptual row) in the cadMcastForwardDestTable.')
cadMcastForwardDestIfListId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cadMcastForwardDestIfListId.setStatus('current')
if mibBuilder.loadTexts: cadMcastForwardDestIfListId.setDescription('The index id of the list of destination interfaces.')
cadMcastForwardDestIf = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMcastForwardDestIf.setStatus('current')
if mibBuilder.loadTexts: cadMcastForwardDestIf.setDescription('The multicast dest interface.For the case of cadMcastForwardDestIfType being set to sdv(2), the destination interface will be a DCAM slot number. For all other settings of cadMcastForwardDestIfType, the destination interface will be an ifIndex.')
cadMcastForwardDestIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("docsis", 1), ("sdv", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMcastForwardDestIfType.setStatus('current')
if mibBuilder.loadTexts: cadMcastForwardDestIfType.setDescription('The type of multicast destination interface.')
cadMcastGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 5))
cadMcastClearForwardCounts = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 5, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMcastClearForwardCounts.setStatus('current')
if mibBuilder.loadTexts: cadMcastClearForwardCounts.setDescription('This variable always returns false upon reading. When set to true, the multicast forward counts are cleared.')
cadMcastForwardUseDefaultFlow = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 5, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMcastForwardUseDefaultFlow.setStatus('current')
if mibBuilder.loadTexts: cadMcastForwardUseDefaultFlow.setDescription('When set to true, the forwarding of multicast data packets uses the default flow')
cadMcastDeleteDsg = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 5, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMcastDeleteDsg.setStatus('current')
if mibBuilder.loadTexts: cadMcastDeleteDsg.setDescription('This variable always returns false(2) upon reading. When set to true(1), all rows in every DSG MIB table are deleted. except dsgIfDownstreamEntry(s) are reset to default values.')
cadMcastIgmpThrottleEnable = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 5, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMcastIgmpThrottleEnable.setStatus('current')
if mibBuilder.loadTexts: cadMcastIgmpThrottleEnable.setDescription('Globally enable/disable IGMP throttle feature.')
cadMcastIgmpThrottleBurstSize = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 5, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)).clone(22)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMcastIgmpThrottleBurstSize.setStatus('current')
if mibBuilder.loadTexts: cadMcastIgmpThrottleBurstSize.setDescription('Maximum size of IGMP throttle bucket per MAC address.')
cadMcastIgmpThrottleInterval = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 5, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMcastIgmpThrottleInterval.setStatus('current')
if mibBuilder.loadTexts: cadMcastIgmpThrottleInterval.setDescription('Interval in seconds between replenishing an IGMP throttle bucket.')
cadMcastIgmpThrottleIncrement = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 5, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMcastIgmpThrottleIncrement.setStatus('current')
if mibBuilder.loadTexts: cadMcastIgmpThrottleIncrement.setDescription('Number of tokens added to a throttle bucket every cadMcastIgmpThrottleInterval seconds.')
cadMcastClearVideoForwardCounts = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 5, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadMcastClearVideoForwardCounts.setStatus('current')
if mibBuilder.loadTexts: cadMcastClearVideoForwardCounts.setDescription('This variable always returns false upon reading. When set to true, the SDV multicast forward counts (i.e. cadMcastForwardCount attribute of the rows of cadMcastForwardEntry for IEQ video) are cleared.')
cadFqdnCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 6))
cadFqdnCacheEnable = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 6, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadFqdnCacheEnable.setStatus('current')
if mibBuilder.loadTexts: cadFqdnCacheEnable.setDescription("If set to true(1), polling for the C4 applications' FQDN / IP cache binding updates will be enabled. If set to false(2), no polling will be performed.")
cadFqdnCachePollInterval = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 6, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(300, 86400)).clone(1800)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadFqdnCachePollInterval.setStatus('current')
if mibBuilder.loadTexts: cadFqdnCachePollInterval.setDescription("Poll interval in seconds for checking for updates to the C4 application's FQDN/IP cache binding.")
cadFqdnCacheRefresh = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 6, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadFqdnCacheRefresh.setStatus('current')
if mibBuilder.loadTexts: cadFqdnCacheRefresh.setDescription('This variable always returns false(2) upon reading. When set to true(1), the C4 application will immediatelly poll the DNS resovler for an update of each of the FQDN IP bindings contained in the cadStaticFqdnCacheTable.')
cadFqdnCacheTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 7), )
if mibBuilder.loadTexts: cadFqdnCacheTable.setStatus('current')
if mibBuilder.loadTexts: cadFqdnCacheTable.setDescription('The list of the FQDN IP bindings from DNS resolver.')
cadFqdnCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 7, 1), ).setIndexNames((0, "CADANT-CMTS-MULTICAST-MIB", "cadFqdnCacheName"))
if mibBuilder.loadTexts: cadFqdnCacheEntry.setStatus('current')
if mibBuilder.loadTexts: cadFqdnCacheEntry.setDescription('An entry (conceptual row) in the cadFqdnCacheTable.')
cadFqdnCacheName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 7, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 154)))
if mibBuilder.loadTexts: cadFqdnCacheName.setStatus('current')
if mibBuilder.loadTexts: cadFqdnCacheName.setDescription('The name can be a host name or fully/partially qualified domain name.')
cadFqdnCacheFqdn = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 7, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFqdnCacheFqdn.setStatus('current')
if mibBuilder.loadTexts: cadFqdnCacheFqdn.setDescription('the fully qualified domain name returned from DNS resolver.')
cadFqdnCacheIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 7, 1, 3), InetAddressType().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFqdnCacheIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cadFqdnCacheIpAddrType.setDescription('The IP address type associated with the IP address. If the IP address is zero length, this object will be set to unknown(0).')
cadFqdnCacheIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 7, 1, 4), InetAddress().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFqdnCacheIpAddress.setStatus('current')
if mibBuilder.loadTexts: cadFqdnCacheIpAddress.setDescription('The IP address type associated with the resolved IP address. This object is set to zero length, if the resolved IP address is not found.')
cadFqdnCacheLastUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 7, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFqdnCacheLastUpdateTime.setStatus('current')
if mibBuilder.loadTexts: cadFqdnCacheLastUpdateTime.setDescription('The sysUpTime when a cadStaticFqdnCacheEntry is updated.')
cadFqdnCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("validIp", 1), ("unknownIp", 2), ("invalidIp", 3), ("timeout", 4), ("genError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadFqdnCacheStatus.setStatus('current')
if mibBuilder.loadTexts: cadFqdnCacheStatus.setDescription('validIp(1) - found a valid IP address associated with cadStaticFqdnCacheName. unknownIp(2) - DNS server does not have the IP address. invalidIp(3) - IP address returned by the service is not a vlid unicast IP address. timeout(4) - DNS resolver send request but get timeout. genError(5) - general error.')
cadDsgIfClassifierCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 8), )
if mibBuilder.loadTexts: cadDsgIfClassifierCfgTable.setStatus('current')
if mibBuilder.loadTexts: cadDsgIfClassifierCfgTable.setDescription('The list of the FQDN IP bindings from DNS resolver.')
cadDsgIfClassifierCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 8, 1), ).setIndexNames((0, "DSG-IF-MIB", "dsgIfTunnelIndex"), (0, "DSG-IF-MIB", "dsgIfClassId"))
if mibBuilder.loadTexts: cadDsgIfClassifierCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cadDsgIfClassifierCfgEntry.setDescription('An entry (conceptual row) in the cadDsgIfClassifierCfgTable.')
cadDsgIfSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 8, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 154))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDsgIfSrcName.setStatus('current')
if mibBuilder.loadTexts: cadDsgIfSrcName.setDescription('The source name where a source name can be a host name, partially, or fully qualified domain name.')
cadDsgIfClassifierCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDsgIfClassifierCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadDsgIfClassifierCfgRowStatus.setDescription('The status of this row.')
cadMgmdPmStaticGroupCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 9), )
if mibBuilder.loadTexts: cadMgmdPmStaticGroupCfgTable.setStatus('current')
if mibBuilder.loadTexts: cadMgmdPmStaticGroupCfgTable.setDescription('The list of the FQDN IP bindings from DNS resolver.')
cadMgmdPmStaticGroupCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 9, 1), ).setIndexNames((0, "DC-MGMD-MIB", "mgmdPmStaticGroupEntityType"), (0, "DC-MGMD-MIB", "mgmdPmStaticGroupIfIndex"), (0, "DC-MGMD-MIB", "mgmdPmStaticGroupAddressType"), (0, "CADANT-CMTS-MULTICAST-MIB", "cadMgmdPmStaticGroupAddress"), (0, "CADANT-CMTS-MULTICAST-MIB", "cadMgmdPmStaticGroupSourceName"))
if mibBuilder.loadTexts: cadMgmdPmStaticGroupCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cadMgmdPmStaticGroupCfgEntry.setDescription('An entry (conceptual row) in the cadMgmdPmStaticGroupCfgTable.')
cadMgmdPmStaticGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 9, 1, 1), InetAddress())
if mibBuilder.loadTexts: cadMgmdPmStaticGroupAddress.setStatus('current')
if mibBuilder.loadTexts: cadMgmdPmStaticGroupAddress.setDescription('the static IP address of the group.')
cadMgmdPmStaticGroupSourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 9, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 154))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMgmdPmStaticGroupSourceName.setStatus('current')
if mibBuilder.loadTexts: cadMgmdPmStaticGroupSourceName.setDescription('Group source name can be a host name or fully/partially qualified domain name.')
cadMgmdPmStaticGroupCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 9, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMgmdPmStaticGroupCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadMgmdPmStaticGroupCfgRowStatus.setDescription('The status of this row.')
cadMcastStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 10), )
if mibBuilder.loadTexts: cadMcastStatsTable.setStatus('current')
if mibBuilder.loadTexts: cadMcastStatsTable.setDescription('The Cadent Multicast Stats Table contains the packet and byte counters for an instance of a multicast stream. If the multicast stream is for a DSG tunnel, it also contains the ifIndex of the channel carrying the tunnel and the tunnel number.')
cadMcastStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 10, 1), ).setIndexNames((0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadIfMacDomainIfIndex"), (0, "CADANT-CMTS-MULTICAST-MIB", "cadMcastStatsDsid"))
if mibBuilder.loadTexts: cadMcastStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cadMcastStatsEntry.setDescription('An entry in the Cadent Multicast Stats Table. An entry in this table exists for each active multicast service flow when MDF is enabled on the cable-mac.')
cadMcastStatsDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 10, 1, 1), Dsid())
if mibBuilder.loadTexts: cadMcastStatsDsid.setStatus('current')
if mibBuilder.loadTexts: cadMcastStatsDsid.setDescription('This object contains the DSID value with which the CMTS labels the DSG Tunnel traffic.')
cadMcastStatsSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 10, 1, 2), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMcastStatsSentPkts.setStatus('current')
if mibBuilder.loadTexts: cadMcastStatsSentPkts.setDescription('This attribute indicates the count of the number of packets transmitted for this outgoing multicast stream.')
cadMcastStatsSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 10, 1, 3), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMcastStatsSentOctets.setStatus('current')
if mibBuilder.loadTexts: cadMcastStatsSentOctets.setDescription('This attribute indicates the count of the number of octets transmitted for this outgoing multicast stream.')
cadMcastStatsDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 10, 1, 4), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMcastStatsDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: cadMcastStatsDroppedPkts.setDescription('This attribute indicates the count of the number of packets dropped for this outgoing multicast stream.')
cadMcastStatsDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 10, 1, 5), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMcastStatsDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: cadMcastStatsDroppedOctets.setDescription('This attribute indicates the count of the number of octets dropped for this outgoing multicast stream.')
cadMcastStatsDsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 10, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMcastStatsDsIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadMcastStatsDsIfIndex.setDescription('The ifIndex of the downstream channel carrying this stream. Zero if stream is not for DSG.')
cadMcastStatsTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 10, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMcastStatsTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: cadMcastStatsTunnelIndex.setDescription('The index into the DSG Tunnel table that represent a tunnel. Zero if stream is not for DSG.')
cadMcastStatsDsChSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 10, 1, 8), ChSetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMcastStatsDsChSetId.setStatus('current')
if mibBuilder.loadTexts: cadMcastStatsDsChSetId.setDescription('This attribute provides the reference for the Downstream Channel Set within a MAC Domain that the multicast Servide flow is replicated to.')
cadMcastStatsGSFID = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMcastStatsGSFID.setStatus('current')
if mibBuilder.loadTexts: cadMcastStatsGSFID.setDescription('This attribute indicates the identifier assigned to the multicast group service flow.')
cadDsgIfTunnelChToGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 11), )
if mibBuilder.loadTexts: cadDsgIfTunnelChToGroupTable.setStatus('current')
if mibBuilder.loadTexts: cadDsgIfTunnelChToGroupTable.setDescription('The list of entries of DSG tunnel channel to group.')
cadDsgIfTunnelChToGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CADANT-CMTS-MULTICAST-MIB", "cadDsgIfTunnelGrpIndex"))
if mibBuilder.loadTexts: cadDsgIfTunnelChToGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cadDsgIfTunnelChToGroupEntry.setDescription('An entry (conceptual row) in the cadDsgIfTunnelChToGroupTable.')
cadDsgIfTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 10, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDsgIfTunnelGrpIndex.setStatus('current')
if mibBuilder.loadTexts: cadDsgIfTunnelGrpIndex.setDescription('This attribute indicates DSG tunnel group index.')
mibBuilder.exportSymbols("CADANT-CMTS-MULTICAST-MIB", cadMcastClearVideoForwardCounts=cadMcastClearVideoForwardCounts, cadDsgIfClassifierCfgRowStatus=cadDsgIfClassifierCfgRowStatus, cadMcastStatsGSFID=cadMcastStatsGSFID, cadMcastForwardDestIfType=cadMcastForwardDestIfType, cadFqdnCacheEntry=cadFqdnCacheEntry, cadMgmdPmStaticGroupCfgRowStatus=cadMgmdPmStaticGroupCfgRowStatus, cadFqdnCacheRefresh=cadFqdnCacheRefresh, cadMcastStaticMacIpBindingStatus=cadMcastStaticMacIpBindingStatus, cadMcastMrouteEntry=cadMcastMrouteEntry, cadMcastStaticMacIpBindingEntry=cadMcastStaticMacIpBindingEntry, cadMcastMrouteSourceAddress=cadMcastMrouteSourceAddress, cadMcastClearForwardCounts=cadMcastClearForwardCounts, cadMcastForwardEntry=cadMcastForwardEntry, cadMcastDeleteDsg=cadMcastDeleteDsg, cadMcastStaticMacIpBindingAddressType=cadMcastStaticMacIpBindingAddressType, cadDsgIfClassifierCfgTable=cadDsgIfClassifierCfgTable, cadMgmdPmStaticGroupSourceName=cadMgmdPmStaticGroupSourceName, cadMcastStatsDsIfIndex=cadMcastStatsDsIfIndex, cadFqdnCacheName=cadFqdnCacheName, cadDsgIfSrcName=cadDsgIfSrcName, cadMcastStatsTunnelIndex=cadMcastStatsTunnelIndex, cadDsgIfTunnelChToGroupTable=cadDsgIfTunnelChToGroupTable, cadMcastIgmpThrottleIncrement=cadMcastIgmpThrottleIncrement, cadFqdnCacheIpAddrType=cadFqdnCacheIpAddrType, cadMcastMrouteRpfAddress=cadMcastMrouteRpfAddress, cadMcastStatsTable=cadMcastStatsTable, cadMcastStatsEntry=cadMcastStatsEntry, cadMcastForwardTable=cadMcastForwardTable, cadFqdnCfgGroup=cadFqdnCfgGroup, cadMcastStatsDsChSetId=cadMcastStatsDsChSetId, cadMcastMrouteTable=cadMcastMrouteTable, cadFqdnCacheLastUpdateTime=cadFqdnCacheLastUpdateTime, PYSNMP_MODULE_ID=cadMcastStdMib, cadMcastMrouteType=cadMcastMrouteType, cadFqdnCachePollInterval=cadFqdnCachePollInterval, cadMcastStatsDroppedOctets=cadMcastStatsDroppedOctets, cadMcastForwardSourceAddress=cadMcastForwardSourceAddress, cadMcastStaticMacIpBindingAddress=cadMcastStaticMacIpBindingAddress, cadMcastStatsDsid=cadMcastStatsDsid, cadMcastForwardDestEntry=cadMcastForwardDestEntry, cadMcastForwardDestIf=cadMcastForwardDestIf, cadFqdnCacheTable=cadFqdnCacheTable, cadDsgIfClassifierCfgEntry=cadDsgIfClassifierCfgEntry, cadMcastForwardAddressType=cadMcastForwardAddressType, cadDsgIfTunnelChToGroupEntry=cadDsgIfTunnelChToGroupEntry, cadMcastForwardDestIfList=cadMcastForwardDestIfList, cadMcastForwardDestIfListId=cadMcastForwardDestIfListId, cadMcastIgmpThrottleInterval=cadMcastIgmpThrottleInterval, cadMgmdPmStaticGroupCfgEntry=cadMgmdPmStaticGroupCfgEntry, cadMcastStatsSentOctets=cadMcastStatsSentOctets, cadMcastStatsSentPkts=cadMcastStatsSentPkts, cadMcastStdMib=cadMcastStdMib, cadFqdnCacheFqdn=cadFqdnCacheFqdn, cadFqdnCacheIpAddress=cadFqdnCacheIpAddress, cadMcastForwardDestTable=cadMcastForwardDestTable, cadMcastMrouteSourcePrefix=cadMcastMrouteSourcePrefix, cadMcastForwardGroupAddress=cadMcastForwardGroupAddress, cadMcastGlobals=cadMcastGlobals, cadMcastIgmpThrottleEnable=cadMcastIgmpThrottleEnable, cadMcastMrouteStatus=cadMcastMrouteStatus, cadMgmdPmStaticGroupCfgTable=cadMgmdPmStaticGroupCfgTable, cadMcastForwardUseDefaultFlow=cadMcastForwardUseDefaultFlow, cadFqdnCacheEnable=cadFqdnCacheEnable, cadMgmdPmStaticGroupAddress=cadMgmdPmStaticGroupAddress, cadMcastStatsDroppedPkts=cadMcastStatsDroppedPkts, cadMcastForwardCount=cadMcastForwardCount, cadMcastStaticMacIpBindingMacAddress=cadMcastStaticMacIpBindingMacAddress, cadMcastForwardSourceIf=cadMcastForwardSourceIf, cadMcastStaticMacIpBindingTable=cadMcastStaticMacIpBindingTable, cadFqdnCacheStatus=cadFqdnCacheStatus, cadDsgIfTunnelGrpIndex=cadDsgIfTunnelGrpIndex, cadMcastMrouteDistance=cadMcastMrouteDistance, cadMcastIgmpThrottleBurstSize=cadMcastIgmpThrottleBurstSize)
