#
# PySNMP MIB module SANMgrV1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SANMgrV1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:00:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Gauge32, iso, Integer32, Counter32, ObjectIdentity, Counter64, ModuleIdentity, experimental, Unsigned32, TimeTicks, NotificationType, IpAddress, Bits, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "iso", "Integer32", "Counter32", "ObjectIdentity", "Counter64", "ModuleIdentity", "experimental", "Unsigned32", "TimeTicks", "NotificationType", "IpAddress", "Bits", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
pathlight = MibIdentifier((1, 3, 6, 1, 4, 1, 2935))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 2935, 1))
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 2935, 2))
devices = MibIdentifier((1, 3, 6, 1, 4, 1, 2935, 3))
controllers = MibIdentifier((1, 3, 6, 1, 4, 1, 2935, 4))
notification = MibIdentifier((1, 3, 6, 1, 4, 1, 2935, 5))
panelLED = MibIdentifier((1, 3, 6, 1, 4, 1, 2935, 6))
paHost = MibIdentifier((1, 3, 6, 1, 4, 1, 2935, 7))
scsiMap = MibIdentifier((1, 3, 6, 1, 4, 1, 2935, 8))
deviceMap = MibIdentifier((1, 3, 6, 1, 4, 1, 2935, 9))
replication = MibIdentifier((1, 3, 6, 1, 4, 1, 2935, 10))
envData = MibIdentifier((1, 3, 6, 1, 4, 1, 2935, 11))
trapDefinition = MibIdentifier((1, 3, 6, 1, 4, 1, 2935, 1000))
class ProductID(ObjectIdentifier):
    pass

class PathlightProduct(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("sanGateway", 1), ("sanRouter", 2), ("sanBridge", 3), ("adicFCR2", 4), ("dellFCR2", 5), ("siemensFCR2", 6), ("sanHoneoye", 7), ("adicHoneoye", 8), ("dellHoneoye", 9), ("siemensHoneoye", 10), ("ibmGatewayModule", 11))

class Boolean(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class LogCommand(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("idle", 0), ("snapshot", 1), ("scroll", 2), ("save", 3), ("clear", 4), ("removeFile", 5), ("logModeCurrent", 6), ("logModeAbsolute", 7), ("doHealthCheck", 8))

class PltStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("failed", 1), ("down", 2), ("testing", 3), ("up", 4))

class FcStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("configWait", 0), ("loopInit", 1), ("login", 2), ("ready", 3), ("lostSync", 4), ("error", 5), ("reinit", 6), ("nonPart", 7), ("failed", 8))

class Interface(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 0), ("sanGateway", 1), ("ssa", 2), ("fibreChannel", 3), ("scsi", 4), ("ethernet", 5), ("unknown", 6), ("any", 7), ("sanReplication", 8))

class Reset(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("run", 0), ("reset", 1), ("reboot", 2))

class BaudRate(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("baud9600", 0), ("baud19200", 1), ("baud38400", 2))

class HealthCheckLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("none", 0), ("system", 1), ("interface", 2), ("simpleDevice", 3), ("deviceReady", 4))

class LogViewingLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("private", 0), ("notice", 1), ("warning", 2), ("information", 3))

class DeviceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 31))
    namedValues = NamedValues(("directAccess", 0), ("sequentialAccess", 1), ("printer", 2), ("processor", 3), ("worm", 4), ("cd", 5), ("scanner", 6), ("opticalMemory", 7), ("mediumChanger", 8), ("communications", 9), ("ascIt81", 10), ("ascIt82", 11), ("storageArrayController", 12), ("enclosure", 13), ("simplifiedDirectAccess", 14), ("opticalCardReader", 15), ("unknown", 31))

class VendorIDInt(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 4096, 4130, 4215, 4537))
    namedValues = NamedValues(("unknown", 0), ("symbios", 4096), ("amd", 4130), ("qlogic", 4215), ("pathlight", 4537))

class FibreMedia(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("unknown", 0), ("copper", 1), ("shortWaveOptical", 2), ("longWaveOptical", 3), ("shortWaveOpticalDual", 4), ("longWaveOpticalDual", 5), ("shortWaveOpticalLongDistance", 6), ("longWaveOpticalLongDistance", 7), ("gbicSWOneGB", 8), ("gbicLW1300OneGB", 9), ("gbicLW1300HPOneGB", 10), ("gbicLW1550HPOneGB", 11), ("gbicCopperHSSDCOneGB", 12), ("gbicCopperDB9OneGB", 13), ("gbicSWTwoGB", 14), ("gbicLW1300TwoGB", 15), ("gbicLW1300HPTwoGB", 16), ("gbicLW1550HPTwoGB", 17), ("gbicCopperHSSDCTwoGB", 18), ("gbicCopperDB9TwoGB", 19), ("noGBIC", 20))

class FibrePort(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 255))
    namedValues = NamedValues(("nodeLoop", 0), ("node", 1), ("fabricLoop", 3), ("fabric", 4), ("none", 255))

class FibreLoopIDMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("soft", 0), ("hard", 1))

class FibrePortMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 17, 18, 19))
    namedValues = NamedValues(("privateTargetOnly", 1), ("privateInitiatorOnly", 2), ("privateTargetAndInitiator", 3), ("publicTargetOnly", 17), ("publicInitiatorOnly", 18), ("publicTargetAndInitiator", 19))

class FibreConnOptions(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("loopOnly", 0), ("pointToPointOnly", 1), ("loopPreferred", 2), ("pointToPointPreferred", 3))

class SsaSpeed(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ssa80", 1), ("ssa160", 2))

class PathingAlgorithm(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("default", 0), ("skipInitiators", 1), ("unknown", 2))

class ScsiSpeed(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("async", 0), ("fast", 1), ("ultra", 2), ("ultra2", 3), ("ultra160", 4))

class ScsiRole(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("target", 0), ("initiator", 1))

class ScsiTermination(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1), ("notPresent", 2))

class ScsiCardType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 0), ("differentialNoTermination", 1), ("differentialTerminated", 2), ("singleEndedNoTermination", 3), ("singleEndedTerminated", 4), ("unknown", 5), ("lowVoltageSingleEnded", 6), ("lowVoltageDifferential", 7), ("lowVoltageMultiFunction", 8))

class ScsiAnsiLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notScsi", 0), ("scsi-1", 1), ("scsi-2", 2), ("scsi-3", 3))

sanGateway = MibIdentifier((1, 3, 6, 1, 4, 1, 2935, 1, 1))
sanGateway1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2935, 1, 1, 1))
sanGateway2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2935, 1, 1, 2))
paIdentify = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paIdentify.setStatus('mandatory')
if mibBuilder.loadTexts: paIdentify.setDescription('Flash the READY light on the SAN Data Gateway front panel. A non-zero value turns the LED on for the specified number of seconds. Zero turns LED off.')
paReboot = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 2), Reset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paReboot.setStatus('mandatory')
if mibBuilder.loadTexts: paReboot.setDescription('Writing a reboot(2) value here causes immediate reboot.')
paHealthCheckValue = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paHealthCheckValue.setStatus('mandatory')
if mibBuilder.loadTexts: paHealthCheckValue.setDescription('Value in percent of health check tests passed.')
paHealthCheckLevel = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 4), HealthCheckLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paHealthCheckLevel.setStatus('mandatory')
if mibBuilder.loadTexts: paHealthCheckLevel.setDescription('Scrutiny level of health check function.')
paHealthCheckInterval = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 5), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paHealthCheckInterval.setStatus('mandatory')
if mibBuilder.loadTexts: paHealthCheckInterval.setDescription('Health Check interval in minutes.')
paEvRptLevel = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 6), LogViewingLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paEvRptLevel.setStatus('mandatory')
if mibBuilder.loadTexts: paEvRptLevel.setDescription('Used when retrieving Event Log. Events with log level greater than paEvRptLevel are not retrieved.')
paEventLogLevels = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paEventLogLevels.setStatus('mandatory')
if mibBuilder.loadTexts: paEventLogLevels.setDescription('Each of 255 event types has an 8-bit level used when reading log. Currently valid LogLevel range is 0-3.')
paTrapThresholds = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paTrapThresholds.setStatus('mandatory')
if mibBuilder.loadTexts: paTrapThresholds.setDescription('Each of 255 event types has an 8-bit threshold. When the number of events exceeds the Trap Threshold, a trap is generated and sent to all parties listed in the trap destination table (also under SNMP control) . Threshold 0 means Never Threshold 1 means Always Threshold 2 - 255 means Number of events per 10 minute period')
paBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 9), BaudRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: paBaudRate.setDescription('Serial baud rate for SAN Gateway Service Port. Currently, the Agent does not support baud rate change: the rate is hard-coded to 19200 baud.')
paEventLog = MibTable((1, 3, 6, 1, 4, 1, 2935, 2, 10), )
if mibBuilder.loadTexts: paEventLog.setStatus('mandatory')
if mibBuilder.loadTexts: paEventLog.setDescription('Entry point for the Agent Event Log Table.')
paEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2935, 2, 10, 1), ).setIndexNames((0, "SANMgrV1-MIB", "paIndex"))
if mibBuilder.loadTexts: paEventLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: paEventLogEntry.setDescription(' ')
paIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paIndex.setStatus('mandatory')
if mibBuilder.loadTexts: paIndex.setDescription('MIB EventLogEntry Table index.')
paTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 2, 10, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paTime.setStatus('mandatory')
if mibBuilder.loadTexts: paTime.setDescription('Time stamp (since boot).')
paProducer = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 2, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paProducer.setStatus('mandatory')
if mibBuilder.loadTexts: paProducer.setDescription("Numeric identifier for this event's producer.")
paEventClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 2, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paEventClass.setStatus('mandatory')
if mibBuilder.loadTexts: paEventClass.setDescription("Numeric identifier for this event's class.")
paEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 2, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paEventCode.setStatus('mandatory')
if mibBuilder.loadTexts: paEventCode.setDescription('Numeric code for this event.')
paSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 2, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paSeq.setStatus('mandatory')
if mibBuilder.loadTexts: paSeq.setDescription('Sequence number (relative record number) since boot.')
paEventVars = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 2, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paEventVars.setStatus('mandatory')
if mibBuilder.loadTexts: paEventVars.setDescription('Text description of event.')
paLogSize = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 11), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paLogSize.setStatus('mandatory')
if mibBuilder.loadTexts: paLogSize.setDescription('Number of records in entire event log. (Not just current records since boot.)')
paCommand = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 12), LogCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paCommand.setStatus('mandatory')
if mibBuilder.loadTexts: paCommand.setDescription('Used for issuing command to SNMP agent.')
paLogBoot = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paLogBoot.setStatus('mandatory')
if mibBuilder.loadTexts: paLogBoot.setDescription('Absolute index of first log entry at boot.')
paLogNCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 14), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paLogNCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: paLogNCurrent.setDescription('SNMP Get (read) returns number of records since boot subject to viewing level filtering. SNMP Set (write) copies this number of records since boot (subject to level filtering) into a buffer from which records are read. This mode of use is deprecated. The preferred way to get the event log since boot is to read paLogBoot, set paEvRptLevel and do a series of SNMP GetNext calls starting at instance paLogBoot until end of event log MIB table is reached.')
paLogChronFirst = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 15), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paLogChronFirst.setStatus('mandatory')
if mibBuilder.loadTexts: paLogChronFirst.setDescription('Used to request range of records from paLogChronFirst to paLogChronLast')
paLogChronLast = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 16), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paLogChronLast.setStatus('mandatory')
if mibBuilder.loadTexts: paLogChronLast.setDescription('Used to request range of records from paLogChronFirst to paLogChronLast')
paLogScroll = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paLogScroll.setStatus('mandatory')
if mibBuilder.loadTexts: paLogScroll.setDescription('Used to request previous/next range of records event log')
paLogFilename = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paLogFilename.setStatus('mandatory')
if mibBuilder.loadTexts: paLogFilename.setDescription('Used to save event log to a file.')
paEnvironmentState = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paEnvironmentState.setStatus('mandatory')
if mibBuilder.loadTexts: paEnvironmentState.setDescription('Temperature and Voltage Status of SAN Data Gateway: ********************************** (LSB) bit 0 Auxiliary Power bit 1 Main Power bit 2 Temperature Warning bit 3 Temperature Alarm')
paGatewayFWRev = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paGatewayFWRev.setStatus('mandatory')
if mibBuilder.loadTexts: paGatewayFWRev.setDescription('SAN Data Gateway Firmware Revision information.')
paGatewayHWRev = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paGatewayHWRev.setStatus('mandatory')
if mibBuilder.loadTexts: paGatewayHWRev.setDescription('SAN Data Gateway Hardware Revision information.')
paSnmpFWRev = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paSnmpFWRev.setStatus('mandatory')
if mibBuilder.loadTexts: paSnmpFWRev.setDescription('SNMP Agent Firmware Revision information.')
paRidTag = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paRidTag.setStatus('mandatory')
if mibBuilder.loadTexts: paRidTag.setDescription('SAN Data Gateway RIDTag.')
paSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: paSerialNumber.setDescription('SAN Data Gateway Serial Number.')
paServerVersion = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paServerVersion.setStatus('mandatory')
if mibBuilder.loadTexts: paServerVersion.setDescription('Remote Management software writes Server version information here to customize SNMP Agent behavior.')
paProductType = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 26), PathlightProduct()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paProductType.setStatus('mandatory')
if mibBuilder.loadTexts: paProductType.setDescription('Type of SAN device')
paVPSEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 27), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paVPSEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: paVPSEnabled.setDescription('State of ITL Access Control enable.')
paLicenseKey = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paLicenseKey.setStatus('mandatory')
if mibBuilder.loadTexts: paLicenseKey.setDescription('Used to pass feature enabling license keys.')
paThirdPartyCopyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 29), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paThirdPartyCopyEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: paThirdPartyCopyEnabled.setDescription('State of Extended 3rd Party Copy enable. Enabled means that a valid license key has been entered for this feature.')
paVPSStatus = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paVPSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: paVPSStatus.setDescription('State of Virtual Private SAN feature. bit 0 : active or inactive. bit 1 : licensed or not licensed. Bit 1 is redundant with MIB var paVPSEnabled. Writing 1 to bit 0 makes VPS active if licensed. Writing 0 to bit 0 makes VPS inactive if licensed.')
paThirdPartyCopyStatus = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paThirdPartyCopyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: paThirdPartyCopyStatus.setDescription('State of Extended 3rd Party Copy feature. bit 0 : active or inactive. bit 1 : licensed or not licensed. Bit 1 is redundant with MIB var paThirdPartyCopyEnabled. Writing 1 to bit 0 makes Third Party Copy active if licensed. Writing 0 to bit 0 makes Third Party Copy inactive if licensed.')
paCommandControlLUN = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paCommandControlLUN.setStatus('mandatory')
if mibBuilder.loadTexts: paCommandControlLUN.setDescription('Gateway/Router Command and Control LUN')
paSanDirectorEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 33), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paSanDirectorEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: paSanDirectorEnabled.setDescription('State of SAN Director Support for this device. To enable, user must write a valid license key to OID paLicenseKey or enter the license key from the service port.')
paNodeName = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: paNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: paNodeName.setDescription('SAN Gateway Node Name.')
paVPMStatus = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paVPMStatus.setStatus('mandatory')
if mibBuilder.loadTexts: paVPMStatus.setDescription('State of Virtual Private Map feature. bit 0 : active or inactive. bit 1 : licensed or not licensed.')
paSRSStatus = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paSRSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: paSRSStatus.setDescription('State of SAN Replication Services feature. bit 0 : active or inactive. bit 1 : licensed or not licensed.')
paEthernetType = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paEthernetType.setStatus('mandatory')
if mibBuilder.loadTexts: paEthernetType.setDescription('Current Ethernet Speed.')
paTrapSequenceNumber = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paTrapSequenceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: paTrapSequenceNumber.setDescription('Sequence number of last trap sent by this SNMP Agent.')
paSysNodeNameMode = MibScalar((1, 3, 6, 1, 4, 1, 2935, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sameForEachPort", 0), ("differentForEachPort", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paSysNodeNameMode.setStatus('mandatory')
if mibBuilder.loadTexts: paSysNodeNameMode.setDescription('Algorithm used when computing Fibre Channel World Wide Node Name for each port. If the value is sameForEachPort(0), then the World Wide Node Name is the same for each port and computed based on the World Wide Node Name of the gateway. If the value is differentForEachPort(1), then the World Wide Node Name is different for each port, computed based on the World Wide Port Name for that port.')
pdDevices = MibTable((1, 3, 6, 1, 4, 1, 2935, 3, 1), )
if mibBuilder.loadTexts: pdDevices.setStatus('mandatory')
if mibBuilder.loadTexts: pdDevices.setDescription('Pathlight Physical Device Group *********************************** Each device attached to the Gateway has an entry here.')
pdDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1), ).setIndexNames((0, "SANMgrV1-MIB", "pdIndex"))
if mibBuilder.loadTexts: pdDevEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pdDevEntry.setDescription(' ')
pdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pdIndex.setDescription('MIB table index')
pdUID = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdUID.setStatus('mandatory')
if mibBuilder.loadTexts: pdUID.setDescription('Universal Identifier')
pdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 3), DeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdType.setStatus('mandatory')
if mibBuilder.loadTexts: pdType.setDescription('Device Type i.e. disk/tape/cd etc.')
pdVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdVendor.setStatus('mandatory')
if mibBuilder.loadTexts: pdVendor.setDescription('Device Vendor')
pdProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdProduct.setStatus('mandatory')
if mibBuilder.loadTexts: pdProduct.setDescription('Device Product Identifier')
pdBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: pdBlockSize.setDescription('Block size in Bytes')
pdCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: pdCapacity.setDescription('Capacity in BLOCKS (see pdBlockSize)')
pdAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdAccess.setStatus('mandatory')
if mibBuilder.loadTexts: pdAccess.setDescription(' ')
pdRemovable = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 9), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdRemovable.setStatus('mandatory')
if mibBuilder.loadTexts: pdRemovable.setDescription('Is device removable ?')
pdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 10), PltStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pdStatus.setDescription('Device Status')
pdSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: pdSpeed.setDescription('Device Speed in MBytes/second')
pdWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdWidth.setStatus('mandatory')
if mibBuilder.loadTexts: pdWidth.setDescription('Data path width in bits')
pdSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdSerial.setStatus('mandatory')
if mibBuilder.loadTexts: pdSerial.setDescription('Device Serial Number')
pdIdentify = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdIdentify.setStatus('mandatory')
if mibBuilder.loadTexts: pdIdentify.setDescription('Number of seconds to flash identifying LED. Write here to flash LED on device if supported by Gateway and device. Zero turns LED off.')
pdInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 15), Interface()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: pdInterfaceType.setDescription("This device's type of communication interface.")
pdBus = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdBus.setStatus('mandatory')
if mibBuilder.loadTexts: pdBus.setDescription('SCSI bus number')
pdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdId.setStatus('mandatory')
if mibBuilder.loadTexts: pdId.setDescription('SCSI Address ID')
pdLun = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdLun.setStatus('mandatory')
if mibBuilder.loadTexts: pdLun.setDescription('SCSI Logical Unit Number.')
pdCtlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdCtlrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pdCtlrIndex.setDescription("Index of this device's controller in the Controllers MIB table and type-specific controller tables")
pdHWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdHWRev.setStatus('mandatory')
if mibBuilder.loadTexts: pdHWRev.setDescription('Device hardware revision number/identifier')
pdFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdFWRev.setStatus('mandatory')
if mibBuilder.loadTexts: pdFWRev.setDescription('Device firmware revision number/identifier')
pdReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 22), Reset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdReset.setStatus('mandatory')
if mibBuilder.loadTexts: pdReset.setDescription('Generic device reset if supported. Write reset(1) here to reset device if supported by Gateway firmware and device.')
pdStatusBits = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdStatusBits.setStatus('mandatory')
if mibBuilder.loadTexts: pdStatusBits.setDescription('Device status bits as per SCSI spec.')
pdScsiAnsiLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 24), ScsiAnsiLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdScsiAnsiLevel.setStatus('mandatory')
if mibBuilder.loadTexts: pdScsiAnsiLevel.setDescription('Device SCSI level.')
pdTargetLun = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdTargetLun.setStatus('mandatory')
if mibBuilder.loadTexts: pdTargetLun.setDescription("This target device's Logical Unit Number as seen from attached host.")
pdIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 3, 1, 1, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pdIpAddress.setDescription("This target device's IP Address if applicable. In case of SAN Gateway or Router, this information is used to allow arbitrary drill-down capability.")
pcControllers = MibTable((1, 3, 6, 1, 4, 1, 2935, 4, 1), )
if mibBuilder.loadTexts: pcControllers.setStatus('mandatory')
if mibBuilder.loadTexts: pcControllers.setDescription('Pathlight Controller Group ******************************* All controllers installed in the SAN Data Gateway have an entry here AND a parallel entry in the controller-type specific table (Fibre Channnel, SSA, or SCSI).')
pcCtlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1), ).setIndexNames((0, "SANMgrV1-MIB", "pcIndex"))
if mibBuilder.loadTexts: pcCtlrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pcCtlrEntry.setDescription(' ')
pcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pcIndex.setDescription('MIB Table index.')
pcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 2), Interface()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcType.setStatus('mandatory')
if mibBuilder.loadTexts: pcType.setDescription('Communication Interface type.')
pcVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 3), VendorIDInt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcVendorId.setStatus('mandatory')
if mibBuilder.loadTexts: pcVendorId.setDescription('Integer vendor ID for this controller.')
pcProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcProductId.setStatus('mandatory')
if mibBuilder.loadTexts: pcProductId.setDescription("Vendor's integer ID for this controller.")
pcRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcRevision.setStatus('deprecated')
if mibBuilder.loadTexts: pcRevision.setDescription('Revision information for this controller. See also pcHWRev and pcFWRev.')
pcSubVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcSubVendor.setStatus('mandatory')
if mibBuilder.loadTexts: pcSubVendor.setDescription('Integer sub-vendor ID for this controller.')
pcSubProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcSubProduct.setStatus('mandatory')
if mibBuilder.loadTexts: pcSubProduct.setDescription("Vendor's integer sub-product ID for this controller.")
pcMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcMaxBurst.setStatus('mandatory')
if mibBuilder.loadTexts: pcMaxBurst.setDescription('Maximum burst transfer rate in MBytes/second')
pcLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcLatency.setStatus('mandatory')
if mibBuilder.loadTexts: pcLatency.setDescription('Latency Timer in Clock Ticks.')
pcIdentify = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcIdentify.setStatus('mandatory')
if mibBuilder.loadTexts: pcIdentify.setDescription('Reserved for flashing identifying LED on device.')
pcPCIBus = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcPCIBus.setStatus('mandatory')
if mibBuilder.loadTexts: pcPCIBus.setDescription('PCI Bus number in SAN Data Gateway for this controller.')
pcPCIDev = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcPCIDev.setStatus('mandatory')
if mibBuilder.loadTexts: pcPCIDev.setDescription('PCI device number in SAN Data Gateway for this controller.')
pcPCIFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcPCIFunc.setStatus('mandatory')
if mibBuilder.loadTexts: pcPCIFunc.setDescription('PCI Function number in SAN Data Gateway for this contoller.')
pcReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 14), Reset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcReset.setStatus('mandatory')
if mibBuilder.loadTexts: pcReset.setDescription('Generic controller reset variable. Not supported for all controller types.')
pcRescan = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 15), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcRescan.setStatus('mandatory')
if mibBuilder.loadTexts: pcRescan.setDescription('Writing true(1) here causes controller to rescan its bus if rescan is supported for this controller type.')
pcLED = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcLED.setStatus('mandatory')
if mibBuilder.loadTexts: pcLED.setDescription('Is LED on?')
pcHWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcHWRev.setStatus('mandatory')
if mibBuilder.loadTexts: pcHWRev.setDescription('Hardware revision for this controller.')
pcFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcFWRev.setStatus('mandatory')
if mibBuilder.loadTexts: pcFWRev.setDescription('Firmware revision for this controller')
pcPCISlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcPCISlot.setStatus('mandatory')
if mibBuilder.loadTexts: pcPCISlot.setDescription('Location of Channel Card on PCI bus')
pcPMCSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcPMCSlot.setStatus('mandatory')
if mibBuilder.loadTexts: pcPMCSlot.setDescription('Location of Card: PMC 1, 2 or 3. 0=> Not a PMC card')
pcPCIClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcPCIClass.setStatus('mandatory')
if mibBuilder.loadTexts: pcPCIClass.setDescription('Device class code as per PCI specification.')
pcSplitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 22), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcSplitMode.setStatus('mandatory')
if mibBuilder.loadTexts: pcSplitMode.setDescription('Enable/Disable Split Mode for this controller.')
pcChannelMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 23), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcChannelMask.setStatus('mandatory')
if mibBuilder.loadTexts: pcChannelMask.setDescription('Specifies access permissions for this initiator in bits 0 through 18 ************************************************* -* SCSI Channels *- Bit 0 => Is access DISALLOWED to SCSI channel 1 ? Bit 1 => Is access DISALLOWED to SCSI channel 2 ? Bit 2 => Is access DISALLOWED to SCSI channel 3 ? Bit 3 => Is access DISALLOWED to SCSI channel 4 ? -* Ultra SCSI Channels *- Bit 4 => Is access DISALLOWED to Ultra SCSI channel 1 ? Bit 5 => Is access DISALLOWED to Ultra SCSI channel 2 ? Bit 6 => Is access DISALLOWED to Ultra SCSI channel 3 ? Bit 7 => Is access DISALLOWED to Ultra SCSI channel 4 ? Bit 8 => Is access DISALLOWED to Ultra SCSI channel 5 ? Bit 9 => Is access DISALLOWED to Ultra SCSI channel 6 ? -* Fibre Channel *- Bit 10 => Is access DISALLOWED to Fibre Channel 1 ? Bit 11 => Is access DISALLOWED to Fibre Channel 2 ? Bit 12 => Is access DISALLOWED to Fibre Channel 3 ? Bit 13 => Is access DISALLOWED to Fibre Channel 4 ? Bit 14 => Is access DISALLOWED to Fibre Channel 5 ? Bit 15 => Is access DISALLOWED to Fibre Channel 6 ? -* SSA Channels *- Bit 16 => Is access DISALLOWED to SSA channel 1 ? Bit 17 => Is access DISALLOWED to SSA Channel 2 ? Bit 18 => Is access DISALLOWED to SSA Channel 3 ?')
pcPortHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pcPortHostType.setStatus('mandatory')
if mibBuilder.loadTexts: pcPortHostType.setDescription('Host type for this port. Used if VPS is not enabled.')
pcFCCtlrs = MibTable((1, 3, 6, 1, 4, 1, 2935, 4, 2), )
if mibBuilder.loadTexts: pcFCCtlrs.setStatus('mandatory')
if mibBuilder.loadTexts: pcFCCtlrs.setDescription('Entry point for Fibre Channel Controller Device Group ****************************************************** This table parallels the Controller Table: a Fibre Channel controller with pcIndex N in the controller table appears here as index N as well, and in general there are rows in this table which are empty.')
fcCtlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1), ).setIndexNames((0, "SANMgrV1-MIB", "pcIndex"))
if mibBuilder.loadTexts: fcCtlrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fcCtlrEntry.setDescription(' ')
fcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 1), FcStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fcStatus.setDescription('Status of the Fibre Channel Controller')
fcMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcMaxSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: fcMaxSpeed.setDescription('Maximum Transfer Speed in MBytes per second.')
fcWWID = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcWWID.setStatus('mandatory')
if mibBuilder.loadTexts: fcWWID.setDescription('World Wide Identifier for this Fibre Channel Controller.')
fcFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFWRev.setStatus('mandatory')
if mibBuilder.loadTexts: fcFWRev.setDescription('Firmware revision number/identifier for this Fibre Channel Controller.')
fcHWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHWRev.setStatus('mandatory')
if mibBuilder.loadTexts: fcHWRev.setDescription('Hardware revision number/identifier for this Fibre Channel Controller.')
fcLoopID = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcLoopID.setStatus('mandatory')
if mibBuilder.loadTexts: fcLoopID.setDescription('Fibre Channel Loop ID. soft = -1')
fcFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: fcFrameSize.setDescription('Fibre Channel frame size.')
fcPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 8), FibrePort()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPortType.setStatus('mandatory')
if mibBuilder.loadTexts: fcPortType.setDescription('Fibre Channel Port Type')
fcMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 9), FibreMedia()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcMedia.setStatus('mandatory')
if mibBuilder.loadTexts: fcMedia.setDescription('Media type for this Fibre Channel Controller')
fcSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: fcSerialNumber.setDescription('Serial Number for this Fibre Channel Controller.')
fcLoopIDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 11), FibreLoopIDMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLoopIDMode.setStatus('mandatory')
if mibBuilder.loadTexts: fcLoopIDMode.setDescription('Fibre Channel Loop ID mode (soft or hard)')
fcALPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcALPhysicalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: fcALPhysicalAddress.setDescription('Arbitrated Loop Physical Address (ALPA)')
fcPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 13), FibrePortMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPortMode.setStatus('mandatory')
if mibBuilder.loadTexts: fcPortMode.setDescription('Fibre Channel Port Mode.')
fcConnectionOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 14), FibreConnOptions()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcConnectionOptions.setStatus('mandatory')
if mibBuilder.loadTexts: fcConnectionOptions.setDescription('Connection options for ISP2200 FC chip. Values 4 - 8 are reserved.')
fcCtlrChipType = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCtlrChipType.setStatus('mandatory')
if mibBuilder.loadTexts: fcCtlrChipType.setDescription('Type of Fibre Channel controller chip. Valid types are 2100 , 2200 for QLogic ISP2100 and ISP2200 chips.')
fcTapeFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 16), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTapeFeature.setStatus('mandatory')
if mibBuilder.loadTexts: fcTapeFeature.setDescription('Status of Fibre Channel Tape Specification support. true means this controller supports FC Tape false means this controller does not support FC Tape')
fcHardID = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHardID.setStatus('mandatory')
if mibBuilder.loadTexts: fcHardID.setDescription('Fibre Channel Hard ID, the preferred loop ID for this controller. Even if the controller is in Hard Loop ID mode, the actual loop ID is not guaranteed to be fcHardID.')
fcCurrentSpeedSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCurrentSpeedSetting.setStatus('mandatory')
if mibBuilder.loadTexts: fcCurrentSpeedSetting.setDescription('Speed in Gb/sec. 0: Auto, 1: 1Gb, 2: 2Gb')
fcCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCurrentSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: fcCurrentSpeed.setDescription('Current Speed Indicator Gb/sec.')
fcFrameBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFrameBufferSize.setStatus('mandatory')
if mibBuilder.loadTexts: fcFrameBufferSize.setDescription('Fibre Channel Frame Buffer Size')
fcLinkFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLinkFailureCount.setStatus('mandatory')
if mibBuilder.loadTexts: fcLinkFailureCount.setDescription('Fibre Channel Link Failure Count ')
fcLossSyncCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLossSyncCount.setStatus('mandatory')
if mibBuilder.loadTexts: fcLossSyncCount.setDescription('Fibre Channel Loss of Sync Count ')
fcLossSignalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLossSignalCount.setStatus('mandatory')
if mibBuilder.loadTexts: fcLossSignalCount.setDescription('Fibre Channel Loss of Signal Count ')
fcProtocolErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcProtocolErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: fcProtocolErrorCount.setDescription('Fibre Channel Primitive Sequence Protocol Error Count ')
fcInvalidTxWordCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInvalidTxWordCount.setStatus('mandatory')
if mibBuilder.loadTexts: fcInvalidTxWordCount.setDescription('Fibre Channel Invalid Transmission Word Count ')
fcInvalidCRCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInvalidCRCCount.setStatus('mandatory')
if mibBuilder.loadTexts: fcInvalidCRCCount.setDescription('Fibre Channel Invalid CRC Count ')
fcWWNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 2, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcWWNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: fcWWNodeName.setDescription('The World Wide Node Name for this Fibre Channel Controller. The Node Name for this port may computer strictly on the World Wide Node Name for the gateway, or on a per port basis which uses the World Wide Port Name (fcWWID), thus giving each port a different Node Name. See paSysNodeNameMode to get or set which algorithm is in use.')
pcSSACtlrs = MibTable((1, 3, 6, 1, 4, 1, 2935, 4, 3), )
if mibBuilder.loadTexts: pcSSACtlrs.setStatus('mandatory')
if mibBuilder.loadTexts: pcSSACtlrs.setDescription('Entry point for SSA Controller Device Group **************************************************** This table parallels the Controller Table: an SSA controller with pcIndex N in the controller table appears here as row index N as well, and in general there are rows in this table which are empty.')
ssaCtlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2935, 4, 3, 1), ).setIndexNames((0, "SANMgrV1-MIB", "pcIndex"))
if mibBuilder.loadTexts: ssaCtlrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ssaCtlrEntry.setDescription(' ')
ssaStatus1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 3, 1, 1), PltStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssaStatus1.setStatus('mandatory')
if mibBuilder.loadTexts: ssaStatus1.setDescription('Status on port 1 of dual port SSA card')
ssaStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 3, 1, 2), PltStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssaStatus2.setStatus('mandatory')
if mibBuilder.loadTexts: ssaStatus2.setDescription('Status on port 2 of dual port SSA card')
ssaSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 3, 1, 3), SsaSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssaSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ssaSpeed.setDescription('SSA transfer speed 80 Mbytes/second or 160 MBytes/second ')
ssaUID = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssaUID.setStatus('mandatory')
if mibBuilder.loadTexts: ssaUID.setDescription('Universal Identifier for this SSA Controller.')
ssaFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssaFWRev.setStatus('mandatory')
if mibBuilder.loadTexts: ssaFWRev.setDescription('Firmware revision number/identifier for this SSA controller.')
ssaMaxTarg = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 3, 1, 6), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssaMaxTarg.setStatus('mandatory')
if mibBuilder.loadTexts: ssaMaxTarg.setDescription('Maximum number of targets supported.')
ssaMaxInit = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 3, 1, 7), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssaMaxInit.setStatus('mandatory')
if mibBuilder.loadTexts: ssaMaxInit.setDescription('Maximum number of initiators supported.')
ssaPathAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 3, 1, 8), PathingAlgorithm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssaPathAlg.setStatus('mandatory')
if mibBuilder.loadTexts: ssaPathAlg.setDescription('SSA pathing algorithm.')
ssaHWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssaHWRev.setStatus('mandatory')
if mibBuilder.loadTexts: ssaHWRev.setDescription('Hardware revision number/identifier for this SSA controller.')
ssaMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssaMasterPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ssaMasterPriority.setDescription('The SSA Master Priority of an SSA node is a number from 0 to 7. SSA initiators elect a master based on this priority. If more than one SSA node has the same priority then the node with the highest UID is elected. Pathlight SSA host adapters default to a Master Priority of 4. SAN Gateway SSA Target adapters default to a priority of 5 to ensure that the Gateway node will be master in a multi-initiator loop. This value should never be set to 7 because this is the priority used to guarantee mastership to a node that is entering Service Mode.')
ssaSATAQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssaSATAQuota.setStatus('mandatory')
if mibBuilder.loadTexts: ssaSATAQuota.setDescription("The SSA SAT Quota A parameter is an 8 bit number that determines 'the maximum number of frames which can be originated from this port before the port is SATisfied and forwards the SAT character. A value of zero means that no SATs are forwarded or issued from this port.'")
ssaSATBQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssaSATBQuota.setStatus('mandatory')
if mibBuilder.loadTexts: ssaSATBQuota.setDescription("The SSA SAT Quota B parameter is an 8 bit number that determines 'the maximum number of frames which this port can originate without forwarding a SAT character. A value of zero means that an infinite number of frames can be sent without being subject to SAT pacing.'")
ssaSATIQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssaSATIQuota.setStatus('mandatory')
if mibBuilder.loadTexts: ssaSATIQuota.setDescription(' ')
pcSCSICtlrs = MibTable((1, 3, 6, 1, 4, 1, 2935, 4, 4), )
if mibBuilder.loadTexts: pcSCSICtlrs.setStatus('mandatory')
if mibBuilder.loadTexts: pcSCSICtlrs.setDescription('Entry point for SCSI Controller Device Group **************************************************** This table parallels the Controller Table: a SCSI controller with pcIndex N in the controller table appears here as row index N as well, and in general there are rows in this table which are empty.')
scsiCtlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2935, 4, 4, 1), ).setIndexNames((0, "SANMgrV1-MIB", "pcIndex"))
if mibBuilder.loadTexts: scsiCtlrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: scsiCtlrEntry.setDescription(' ')
scsiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 4, 1, 1), PltStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scsiStatus.setDescription('Status for this SCSI controller.')
scsiSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 4, 1, 2), ScsiSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: scsiSpeed.setDescription('SCSI Transaction speed.')
scsiRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 4, 1, 3), ScsiRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiRole.setStatus('mandatory')
if mibBuilder.loadTexts: scsiRole.setDescription('Is this a Target or Initiator ?')
scsiHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiHostId.setStatus('mandatory')
if mibBuilder.loadTexts: scsiHostId.setDescription('Host ID defaults to 7.')
scsiMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 4, 1, 5), ScsiSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiMaxSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: scsiMaxSpeed.setDescription('Maximum Speed of this SCSI Channel.')
scsiTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 4, 1, 6), ScsiTermination()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiTerm.setStatus('mandatory')
if mibBuilder.loadTexts: scsiTerm.setDescription('State of internal SCSI bus terminations, if any.')
scsiIoCard = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 4, 1, 7), ScsiCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiIoCard.setStatus('mandatory')
if mibBuilder.loadTexts: scsiIoCard.setDescription('Type of SCSI controller hardware.')
scsiMaxIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiMaxIds.setStatus('mandatory')
if mibBuilder.loadTexts: scsiMaxIds.setDescription('Maximum Number of IDs for this SCSI controller.')
scsiMaxLuns = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiMaxLuns.setStatus('mandatory')
if mibBuilder.loadTexts: scsiMaxLuns.setDescription('Maximum Number of LUNs for this SCSI controller.')
scsiMaxWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiMaxWidth.setStatus('mandatory')
if mibBuilder.loadTexts: scsiMaxWidth.setDescription('Maximum transfer width in bits.')
scsiHWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiHWRev.setStatus('mandatory')
if mibBuilder.loadTexts: scsiHWRev.setDescription('Hardware revision for this SCSI controller.')
scsiFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiFWRev.setStatus('mandatory')
if mibBuilder.loadTexts: scsiFWRev.setDescription('Firmware revision for this SCSI controller.')
scsiResetOnPowerUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 4, 1, 13), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiResetOnPowerUp.setStatus('mandatory')
if mibBuilder.loadTexts: scsiResetOnPowerUp.setDescription('Enables/Disables SCSI bus reset upon Gateway power-up for this SCSI controller.')
scsiMultiInitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 4, 1, 14), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiMultiInitEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: scsiMultiInitEnabled.setDescription('Enables/Disables multi-initiator support on for this SCSI controller.')
scsiAlternateHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 4, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiAlternateHostId.setStatus('mandatory')
if mibBuilder.loadTexts: scsiAlternateHostId.setDescription('Alternate Host ID for this SCSI controller. -1 means use automatic.')
pnTrapDest = MibTable((1, 3, 6, 1, 4, 1, 2935, 5, 1), )
if mibBuilder.loadTexts: pnTrapDest.setStatus('mandatory')
if mibBuilder.loadTexts: pnTrapDest.setDescription('Trap destination Group Table ****************************************** A list of IP addresses to which SNMP Traps are sent in parallel using UDP Port 162.')
pnTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2935, 5, 1, 1), ).setIndexNames((0, "SANMgrV1-MIB", "pnIPAddr"), (0, "SANMgrV1-MIB", "pnUdpPort"))
if mibBuilder.loadTexts: pnTrapDestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pnTrapDestEntry.setDescription(' ')
pnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 5, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pnIndex.setDescription('Index into TrapDest table ')
pnIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 5, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: pnIPAddr.setDescription('IP Address of destination entity to which traps are sent.')
pnUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnUdpPort.setStatus('mandatory')
if mibBuilder.loadTexts: pnUdpPort.setDescription('UDP Port on which traps are sent to this entity.')
pnTrapStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("proprietary", 1), ("rfc1215", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnTrapStyle.setStatus('mandatory')
if mibBuilder.loadTexts: pnTrapStyle.setDescription('Style to be used when building a trap PDU to be sent to this entity. A value of proprietary(1) selects the proprietary format used by the Pathlight SAN Director management application. A value of rfc1215(2) selects the format as described in the RFC 1215 TRAP-TYPE objects included in this MIB document. The default is proprietary(1).')
ledReady = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledReady.setStatus('mandatory')
if mibBuilder.loadTexts: ledReady.setDescription('ON/OFF state of READY LED.')
ledAuxPower = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledAuxPower.setStatus('mandatory')
if mibBuilder.loadTexts: ledAuxPower.setDescription('ON/OFF state of AUXILIARY POWER LED.')
ledMainPower = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledMainPower.setStatus('mandatory')
if mibBuilder.loadTexts: ledMainPower.setDescription('ON/OFF state of MAIN POWER LED.')
ledTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledTempAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ledTempAlarm.setDescription('ON/OFF state of Temperature Alarm LED.')
ledTempWarn = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledTempWarn.setStatus('mandatory')
if mibBuilder.loadTexts: ledTempWarn.setDescription('ON/OFF state of Temperature Warning LED.')
ledEtherCollision = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledEtherCollision.setStatus('mandatory')
if mibBuilder.loadTexts: ledEtherCollision.setDescription('Is Ethernet Collison LED on?')
ledEtherTransmit = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledEtherTransmit.setStatus('mandatory')
if mibBuilder.loadTexts: ledEtherTransmit.setDescription('ON/OFF state of Ethernet Transmit LED.')
ledEtherLink = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledEtherLink.setStatus('mandatory')
if mibBuilder.loadTexts: ledEtherLink.setDescription('ON/OFF state of Ethernet Link LED.')
ledScsi1 = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledScsi1.setStatus('mandatory')
if mibBuilder.loadTexts: ledScsi1.setDescription('ON/OFF state of SCSI Channel 1 LED.')
ledScsi2 = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledScsi2.setStatus('mandatory')
if mibBuilder.loadTexts: ledScsi2.setDescription('ON/OFF state of SCSI Channel 2 LED.')
ledScsi3 = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledScsi3.setStatus('mandatory')
if mibBuilder.loadTexts: ledScsi3.setDescription('ON/OFF state of SCSI Channel 3 LED.')
ledScsi4 = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledScsi4.setStatus('mandatory')
if mibBuilder.loadTexts: ledScsi4.setDescription('ON/OFF state of SCSI Channel 4 LED.')
ledActivity1 = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledActivity1.setStatus('mandatory')
if mibBuilder.loadTexts: ledActivity1.setDescription('ON/OFF state of Network Connection Channel 1 Activity LED.')
ledActivity2 = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledActivity2.setStatus('mandatory')
if mibBuilder.loadTexts: ledActivity2.setDescription('ON/OFF state of Network Connection Channel 2 Activity LED.')
ledActivity3 = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledActivity3.setStatus('mandatory')
if mibBuilder.loadTexts: ledActivity3.setDescription('ON/OFF state of Network Connection Channel 3 Activity LED.')
ledStatus1 = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledStatus1.setStatus('mandatory')
if mibBuilder.loadTexts: ledStatus1.setDescription('ON/OFF state of Network Connection Channel 1 Status LED.')
ledStatus2 = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledStatus2.setStatus('mandatory')
if mibBuilder.loadTexts: ledStatus2.setDescription('ON/OFF state of Network Connection Channel 2 Status LED.')
ledStatus3 = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledStatus3.setStatus('mandatory')
if mibBuilder.loadTexts: ledStatus3.setDescription('ON/OFF state of Network Connection Channel 1 Status LED.')
ledAll = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledAll.setStatus('mandatory')
if mibBuilder.loadTexts: ledAll.setDescription(' All LED values in one INTEGER Value *********************************************** Bit 0 Ready Bit 8 Scsi1 Bit 1 AuxPower Bit 9 Scsi2 Bit 2 MainPower Bit 10 Scsi3 Bit 3 TempAlarm Bit 11 Scsi4 Bit 4 TempWarn Bit 12 Activity1 Bit 5 EtherCollision Bit 13 Activity2 Bit 6 EtherTransmit Bit 14 Activity3 Bit 7 EtherLink Bit 15 Status1 Bit 16 Status2 Bit 17 Status3 Bit 18 Error Bit 19 Ethernet Speed')
ledError = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledError.setStatus('mandatory')
if mibBuilder.loadTexts: ledError.setDescription('Turned on to indicate an Alarm or Warning condition.')
ledEthernetSpeed = MibScalar((1, 3, 6, 1, 4, 1, 2935, 6, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledEthernetSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ledEthernetSpeed.setDescription('ON/OFF state of Ethernet Speed indicator LED. 0 means 10 Base-T , 1 means 100 Base-T.')
hostCommand = MibScalar((1, 3, 6, 1, 4, 1, 2935, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostCommand.setStatus('mandatory')
if mibBuilder.loadTexts: hostCommand.setDescription('Used to issue commands to ITL control software. ')
hostInitiator = MibTable((1, 3, 6, 1, 4, 1, 2935, 7, 2), )
if mibBuilder.loadTexts: hostInitiator.setStatus('mandatory')
if mibBuilder.loadTexts: hostInitiator.setDescription('Attached Host Group Table *************************** List of attached hosts and pertinent information.')
hostInitiatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2935, 7, 2, 1), ).setIndexNames((0, "SANMgrV1-MIB", "hostIndex"))
if mibBuilder.loadTexts: hostInitiatorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hostInitiatorEntry.setDescription(' ')
hostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 7, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hostIndex.setDescription('Index into Host Initiator table ')
hostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 7, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hostRowStatus.setDescription('Row Status for this row. ')
hostWWName = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostWWName.setStatus('mandatory')
if mibBuilder.loadTexts: hostWWName.setDescription('World Wide name of this Initiator. ')
hostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 7, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostName.setStatus('mandatory')
if mibBuilder.loadTexts: hostName.setDescription('Name for this Initiator. ')
hostType = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 7, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostType.setStatus('mandatory')
if mibBuilder.loadTexts: hostType.setDescription('Operating System and other host environment information. ')
hostPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 7, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostPortID.setStatus('mandatory')
if mibBuilder.loadTexts: hostPortID.setDescription(' ')
hostSANConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostSANConnection.setStatus('mandatory')
if mibBuilder.loadTexts: hostSANConnection.setDescription('SAN Connection (1-6) to which this host is connected. ')
hostConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: hostConnectionType.setDescription('Type of SAN connection (FCAL , etc.) ')
hostITLData = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 7, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostITLData.setStatus('mandatory')
if mibBuilder.loadTexts: hostITLData.setDescription('ITL Access Control data for this host. 256 possible LUNs with one Byte of data per LUN. ')
hostIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 7, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: hostIPAddr.setDescription('IP Address of this host. Host is not required to have an IP address.')
scsiMapCommand = MibScalar((1, 3, 6, 1, 4, 1, 2935, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiMapCommand.setStatus('mandatory')
if mibBuilder.loadTexts: scsiMapCommand.setDescription('Used to issue commands to SCSI Channel map map routines. ')
scsiChannelMap = MibTable((1, 3, 6, 1, 4, 1, 2935, 8, 2), )
if mibBuilder.loadTexts: scsiChannelMap.setStatus('mandatory')
if mibBuilder.loadTexts: scsiChannelMap.setDescription('SCSI Channel Device Map Table ****************************** List of devices presented to SCSI attached initiator. The initiator sees a series of (Target ID , LUN ) SCSI targets which are mapped to a logical device identified by a Pathlight assigned LUN.')
scsiMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2935, 8, 2, 1), ).setIndexNames((0, "SANMgrV1-MIB", "scsiMapPort"), (0, "SANMgrV1-MIB", "scsiMapTid"), (0, "SANMgrV1-MIB", "scsiMapLun"))
if mibBuilder.loadTexts: scsiMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: scsiMapEntry.setDescription(' ')
scsiMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 8, 2, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiMapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scsiMapRowStatus.setDescription('Specifies the state of the row.')
scsiMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiMapPort.setStatus('mandatory')
if mibBuilder.loadTexts: scsiMapPort.setDescription('SCSI port (bus) number for this entry (1 thru 10). ')
scsiMapTid = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiMapTid.setStatus('mandatory')
if mibBuilder.loadTexts: scsiMapTid.setDescription('SCSI Target ID for this entry. ')
scsiMapLun = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiMapLun.setStatus('mandatory')
if mibBuilder.loadTexts: scsiMapLun.setDescription('SCSI LUN for this entry. ')
scsiMapAssignedLun = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 8, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiMapAssignedLun.setStatus('mandatory')
if mibBuilder.loadTexts: scsiMapAssignedLun.setDescription('Pathlight LUN assigned to this entry. This assigned LUN maps to some device connected to the Gateway/Router by some other means (FC, SSA, SCSI, ...).')
scsiMapComments = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 8, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scsiMapComments.setStatus('mandatory')
if mibBuilder.loadTexts: scsiMapComments.setDescription("User's comments for this entry.")
scsiMapPdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiMapPdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: scsiMapPdIndex.setDescription('Index into Pathlight SANMgr MIB Device Table ( pd group ). The Device Table has more detailed information about attached devices.')
deviceMapCommand = MibScalar((1, 3, 6, 1, 4, 1, 2935, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clearCopy", 1), ("commit", 2), ("winnow", 3), ("mapClearDatabase", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceMapCommand.setStatus('mandatory')
if mibBuilder.loadTexts: deviceMapCommand.setDescription('Used to issue commands to device map map routines. ')
dmDeviceMap = MibTable((1, 3, 6, 1, 4, 1, 2935, 9, 2), )
if mibBuilder.loadTexts: dmDeviceMap.setStatus('mandatory')
if mibBuilder.loadTexts: dmDeviceMap.setDescription('Device Map Group *********************************** Each device attached to the Gateway has an entry here. Historical data of devices not presently connected may also appear here.')
dmDevMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2935, 9, 2, 1), ).setIndexNames((0, "SANMgrV1-MIB", "dmAssignedLun"))
if mibBuilder.loadTexts: dmDevMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dmDevMapEntry.setDescription(' ')
dmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 9, 2, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dmRowStatus.setDescription('Row Control Object for this row')
dmAssignedLun = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmAssignedLun.setStatus('mandatory')
if mibBuilder.loadTexts: dmAssignedLun.setDescription('Logical Unit Number assigned to this attached device. Range is 0 thru 255.')
dmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 9, 2, 1, 3), Interface()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmType.setStatus('mandatory')
if mibBuilder.loadTexts: dmType.setDescription('Type of device (FC, SCSI, SNA, SSA).')
dmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 9, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmPort.setStatus('mandatory')
if mibBuilder.loadTexts: dmPort.setDescription('SAN Gateway Port to which this device is connected. May be 1 thru 10 for SCSI, 1 thru 6 for Fibre Channel, 1 thru 3 for SSA.')
dmTargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 9, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmTargetId.setStatus('mandatory')
if mibBuilder.loadTexts: dmTargetId.setDescription('The Target ID of the attached target device. This is the actual target ID of the device, not fabricated by the Gateway or Router.')
dmTargetLun = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 9, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmTargetLun.setStatus('mandatory')
if mibBuilder.loadTexts: dmTargetLun.setDescription('The Logical Unit Number of the attached target device. This is the actual LUN of the device, not fabricated by the Gateway or Router.')
dmUid = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 9, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmUid.setStatus('mandatory')
if mibBuilder.loadTexts: dmUid.setDescription('A universally unique identifier for this target device.')
srsDevTable = MibTable((1, 3, 6, 1, 4, 1, 2935, 10, 1), )
if mibBuilder.loadTexts: srsDevTable.setStatus('mandatory')
if mibBuilder.loadTexts: srsDevTable.setDescription('Entry point for SAN Replication Service Device Group ***************************************************** Each SAN Replication Service Device has an entry in this table')
srsDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2935, 10, 1, 1), ).setIndexNames((0, "SANMgrV1-MIB", "srsDevId"))
if mibBuilder.loadTexts: srsDevEntry.setStatus('mandatory')
if mibBuilder.loadTexts: srsDevEntry.setDescription(' ')
srsDevId = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srsDevId.setStatus('mandatory')
if mibBuilder.loadTexts: srsDevId.setDescription('Device ID for this SRS Device.')
srsDevState = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("initialized", 1), ("online", 2), ("error", 3), ("deleted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srsDevState.setStatus('mandatory')
if mibBuilder.loadTexts: srsDevState.setDescription('State of this LUN Replicated Device.')
srsDevCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsDevCommand.setStatus('mandatory')
if mibBuilder.loadTexts: srsDevCommand.setDescription('Used to invoke SAN Replication Services API commands. Parameters may be passed in the same SNMP Set varbind list with the srsDevCommand as the last varbind. ********************************************* create(1) - Creates a new SRS Device delete(2) - Deletes an existing SRS Device')
srsDevAssignedLun = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsDevAssignedLun.setStatus('mandatory')
if mibBuilder.loadTexts: srsDevAssignedLun.setDescription("Assigned LUN of the SAN Replication Service Device's Primary.")
srsDevMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srsDevMemberCount.setStatus('mandatory')
if mibBuilder.loadTexts: srsDevMemberCount.setDescription('Number of members of this LUN Replicated Device.')
srsDevMembersOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srsDevMembersOnline.setStatus('mandatory')
if mibBuilder.loadTexts: srsDevMembersOnline.setDescription('Number of members online.')
srsDevFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsDevFlags.setStatus('mandatory')
if mibBuilder.loadTexts: srsDevFlags.setDescription('SCSI device flags for this SAN Replication Service Device.')
srsDevSizeInBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 1, 1, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsDevSizeInBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: srsDevSizeInBlocks.setDescription('Size in blocks of this SAN Replication Services Device.')
srsDevBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsDevBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: srsDevBlockSize.setDescription('Block size in octets.')
srsDevPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsDevPrimary.setStatus('mandatory')
if mibBuilder.loadTexts: srsDevPrimary.setDescription("The Assigned LUN of this SRS Device's Primary.")
srsMemTable = MibTable((1, 3, 6, 1, 4, 1, 2935, 10, 2), )
if mibBuilder.loadTexts: srsMemTable.setStatus('mandatory')
if mibBuilder.loadTexts: srsMemTable.setDescription('Entry point for SAN Replication Services Member Group ***************************************************** This table lists the Members of each SRS Device.')
srsMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2935, 10, 2, 1), ).setIndexNames((0, "SANMgrV1-MIB", "srsMemDeviceId"), (0, "SANMgrV1-MIB", "srsMemId"))
if mibBuilder.loadTexts: srsMemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: srsMemEntry.setDescription(' ')
srsMemDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srsMemDeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: srsMemDeviceId.setDescription('Device ID of the SAN Replication Services Device to which this member belongs.')
srsMemId = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srsMemId.setStatus('mandatory')
if mibBuilder.loadTexts: srsMemId.setDescription('Member ID (index) of this member device.')
srsMemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("online", 1), ("synchronized", 2), ("synchronizing", 3), ("suspended", 4), ("readError", 5), ("writeError", 6), ("offline", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srsMemState.setStatus('mandatory')
if mibBuilder.loadTexts: srsMemState.setDescription('State of this SAN Replication Services Device Member.')
srsMemCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("memberAdd", 1), ("suspend", 2), ("resume", 3), ("remove", 4), ("primarySet", 5), ("fullSynchronize", 6), ("quickSynchronize", 7), ("memberChange", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsMemCommand.setStatus('mandatory')
if mibBuilder.loadTexts: srsMemCommand.setDescription('Used to invoke SAN Replication Services API methods. Parameters may be passed in the same SNMP Set varbind list with the lrmCommand as the last varbind.')
srsMemType = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srsMemType.setStatus('mandatory')
if mibBuilder.loadTexts: srsMemType.setDescription('Is this device a primary or secondary member.')
srsMemSyncPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srsMemSyncPoint.setStatus('mandatory')
if mibBuilder.loadTexts: srsMemSyncPoint.setDescription('Number of blocks synchronized so far. Used for monitoring synchronization.')
srsMemAssignedLun = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsMemAssignedLun.setStatus('mandatory')
if mibBuilder.loadTexts: srsMemAssignedLun.setDescription('Assigned LUN for this SRS Member.')
srsMemReadOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsMemReadOptions.setStatus('mandatory')
if mibBuilder.loadTexts: srsMemReadOptions.setDescription('SRS Member read options.')
srsMemWriteOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("synchronous", 0), ("asynchronous", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srsMemWriteOptions.setStatus('mandatory')
if mibBuilder.loadTexts: srsMemWriteOptions.setDescription('SRS Member write options.')
envDataTable = MibTable((1, 3, 6, 1, 4, 1, 2935, 11, 1), )
if mibBuilder.loadTexts: envDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: envDataTable.setDescription('Entry point for Environmental Data Group ***************************************************** This table lists the attributes of each environmental data.')
envDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2935, 11, 1, 1), ).setIndexNames((0, "SANMgrV1-MIB", "envDataId"))
if mibBuilder.loadTexts: envDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: envDataEntry.setDescription(' ')
envDataId = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envDataId.setStatus('mandatory')
if mibBuilder.loadTexts: envDataId.setDescription('')
envDataName = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envDataName.setStatus('mandatory')
if mibBuilder.loadTexts: envDataName.setDescription('Name of this environmental data')
envNominalLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envNominalLo.setStatus('mandatory')
if mibBuilder.loadTexts: envNominalLo.setDescription('Minimum value for Nominal status Warning state occurs if the current value is less than this')
envNominalHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 11, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envNominalHi.setStatus('mandatory')
if mibBuilder.loadTexts: envNominalHi.setDescription('Maximum Value for Nominal status Warning state occurs if the current value is greater than this.')
envWarningLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 11, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envWarningLo.setStatus('mandatory')
if mibBuilder.loadTexts: envWarningLo.setDescription('Minimum value for Warning status Alarm state occurs if the current value is less than this')
envWarningHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 11, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envWarningHi.setStatus('mandatory')
if mibBuilder.loadTexts: envWarningHi.setDescription('Maximum Value for Warning status Alarm state occurs if the current value is greater than this.')
envCurValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 11, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCurValue.setStatus('mandatory')
if mibBuilder.loadTexts: envCurValue.setDescription('Current Value.')
envCurStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 11, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCurStatus.setStatus('mandatory')
if mibBuilder.loadTexts: envCurStatus.setDescription('Current Status: Nominal, Warning, or Alarm.')
envUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2935, 11, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envUnit.setStatus('mandatory')
if mibBuilder.loadTexts: envUnit.setDescription('Unit')
ssaPortUpEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,1)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: ssaPortUpEvent.setDescription('An SSA Port Up Event has occurred.')
ssaPortDownEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,2)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: ssaPortDownEvent.setDescription('An SSA Port Down Event has occurred.')
ssaUidAddedEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,3)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: ssaUidAddedEvent.setDescription('An SSA UID Added Event has occurred.')
ssaUidRemovedEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,4)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: ssaUidRemovedEvent.setDescription('An SSA UID Removed Event has occurred.')
ssaWebReconfiguredEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,5)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: ssaWebReconfiguredEvent.setDescription('An SSA Web Reconfigured Event has occurred.')
ssaAsyncErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,6)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: ssaAsyncErrorEvent.setDescription('An SSA Async Error Event has occurred.')
ssaAdapterEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,7)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: ssaAdapterEvent.setDescription('An SSA Adapter Event has occurred.')
senseDataEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,8)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: senseDataEvent.setDescription('Sense Data recorded following a check condition. Normally, the host system will request and process sense data, and then perform error recovery.')
unitAttentionEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,9)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: unitAttentionEvent.setDescription('A LUN reports a unit attention condition on a non-removable media device.')
ibfEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,10)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: ibfEvent.setDescription('An Internal Bus Fault event has occurred.')
temperatureChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,11)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: temperatureChangeEvent.setDescription('A temperature sensor has reported a change from one of three possible states to a another. The possible states are OK, High, Very High. The display string contained in the varbind paEventVars indicates the initial and final temperature state.')
timeReferenceEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,12)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: timeReferenceEvent.setDescription('')
shutdownEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,13)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: shutdownEvent.setDescription('This unit is shutting down as a result of a restart request.')
diagnosticEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,14)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: diagnosticEvent.setDescription('This event is used for diagnostic purposes.')
configurationEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,15)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: configurationEvent.setDescription('')
unexpectedScsiInterruptEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,16)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: unexpectedScsiInterruptEvent.setDescription('A SCSI bus reports an unexpected interrupt.')
lipResetEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,17)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: lipResetEvent.setDescription('A Fibre Channel interface reports a LIP reset was received from a host.')
fcSystemErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,18)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: fcSystemErrorEvent.setDescription('A Fibre Channel interace reports a system error.')
fcRequestTransferErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,19)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: fcRequestTransferErrorEvent.setDescription('A Fibre Channel interface reports an error processing a request.')
fcResponseTransferErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,20)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: fcResponseTransferErrorEvent.setDescription('A Fibre Channel interface reports an error processing a response.')
memoryFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,21)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: memoryFaultEvent.setDescription('Processor memory fault detected.')
fcLipEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,22)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: fcLipEvent.setDescription('A Fibre Channel interface detected a LIP.')
fcLoopUpEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,23)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: fcLoopUpEvent.setDescription('A Fibre Channel interface reports loop up.')
fcLoopDownEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,24)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: fcLoopDownEvent.setDescription('A Fibre Channel interface reports loop down.')
pciBusParityErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,25)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: pciBusParityErrorEvent.setDescription('Parity error detected on unit internal PCI bus.')
pciInterfaceErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,26)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: pciInterfaceErrorEvent.setDescription('Interface error detected on unit internal PCI bus.')
scsiDeviceAddedEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,27)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: scsiDeviceAddedEvent.setDescription('A device has been added to a SCSI bus.')
scsiBusResetEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,28)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: scsiBusResetEvent.setDescription('A SCSI interface reports a bus reset was detected.')
deviceAddedEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,29)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: deviceAddedEvent.setDescription('This unit has added a device to its configuration table. Note: This trap is held off until the unit has been up for 60 seconds.')
deviceRemovedEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,30)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: deviceRemovedEvent.setDescription('This unit has removed a device from its configuration table.')
loggingStartedEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,31)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: loggingStartedEvent.setDescription('Event logging service has started.')
loggingStoppedEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,32)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: loggingStoppedEvent.setDescription('Event logging service has stopped.')
interfaceBusFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,33)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: interfaceBusFaultEvent.setDescription('An interface has detected a bus fault. The display string contained in varbind paEventVars contains the details of which interface detected the fault.')
interfaceDeviceFaultEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,34)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: interfaceDeviceFaultEvent.setDescription('An interface has detected a device fault. The display string contained in varbind paEventVars contains the details of which interface detected the fault.')
scsiUnexpectedDisconnectEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,35)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: scsiUnexpectedDisconnectEvent.setDescription('A SCSI interface has reported an unexpected disconnect by a device.')
scsiParityErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,36)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: scsiParityErrorEvent.setDescription('A SCSI interface has detected a parity error on the bus.')
fcPortDatabaseChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,37)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: fcPortDatabaseChangeEvent.setDescription('Fibre Channel port databse change detected.')
ddfMemoryErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,38)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: ddfMemoryErrorEvent.setDescription('An error was detected on the Direct Data Flow memory board.')
fcDirectoryServerChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,39)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: fcDirectoryServerChangeEvent.setDescription('The Directory Server on the Fibre Channel fabric has changed.')
lunLimitExcededEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,40)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: lunLimitExcededEvent.setDescription('The maximum LUN limit has been exceded, too many devices connected.')
fcTransferFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,41)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: fcTransferFailureEvent.setDescription('Fibre Channel transfer error.')
deviceLimitExcededEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,42)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: deviceLimitExcededEvent.setDescription('The maximum device limit has been exceded, the persistent device map database is full.')
fcDebugDumpEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,43)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: fcDebugDumpEvent.setDescription('A Fibre Channel interface driver has reported a a debug dump.')
excessiveScsiBusErrorsEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,44)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: excessiveScsiBusErrorsEvent.setDescription('')
memoryScrubberErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,45)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: memoryScrubberErrorEvent.setDescription('')
srsDeviceCreatedEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,46)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: srsDeviceCreatedEvent.setDescription('A new SAN Replication Services device has been created')
srsDeviceOnlineEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,47)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: srsDeviceOnlineEvent.setDescription('A SAN Replication Services device has entered the online state.')
srsDeviceRemovedEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,48)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: srsDeviceRemovedEvent.setDescription('A SAN Replication Services device has been removed (deleted).')
srsDeviceFailedEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,49)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: srsDeviceFailedEvent.setDescription('A SAN Replication Services device has failed.')
srsMemberAddedEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,50)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: srsMemberAddedEvent.setDescription('A new member LUN has been added to a SAN Replication Services device.')
srsMemberSuspendedEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,51)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: srsMemberSuspendedEvent.setDescription('A SAN Replication Services member has been suspended.')
srsMemberRemovedEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,52)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: srsMemberRemovedEvent.setDescription('A SAN Replication Services member has been removed.')
srsMemberSyncStartedEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,53)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: srsMemberSyncStartedEvent.setDescription('A SAN Replication Service member has begun synchronization to the primary member.')
srsMemberSyncDoneEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,54)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: srsMemberSyncDoneEvent.setDescription('A SAN Replication Service member has completed synchronization to the primary member.')
srsMemberSyncErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,55)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: srsMemberSyncErrorEvent.setDescription('An error was detect during synchronization of a SAN Replication Service member to the primary member.')
srsMemberRetryEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,56)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: srsMemberRetryEvent.setDescription('A command issued to a SAN Replication Services member has failed and is being retried.')
srsMemberErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,57)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: srsMemberErrorEvent.setDescription('A command issued to a SAN Replication Services member has resulted in an error.')
envPowerNominalEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,58)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: envPowerNominalEvent.setDescription('Power has returned to nominal state from a warning or alarm state.')
envPowerWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,59)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: envPowerWarningEvent.setDescription('Power has entered a warning state from a nominal state (power degrading) or alarm state (power improving).')
envPowerAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,60)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: envPowerAlarmEvent.setDescription('Power has entered an alarm state.')
envTemperatureNominalEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,61)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: envTemperatureNominalEvent.setDescription('Inlet air, outlet air, or I/O processor temperature has returned to nominal state from a warning or alarm state.')
envInletTemperatureWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,62)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: envInletTemperatureWarningEvent.setDescription('Inlet air temperature has entered a warning state from a nominal state (temperature increasing) or an alarm state (temperature decreasing).')
envInletTemperatureAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,63)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: envInletTemperatureAlarmEvent.setDescription('Inlet air temperature has entered an alarm state.')
envOutletTemperatureWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,64)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: envOutletTemperatureWarningEvent.setDescription('Outlet air temperature has entered a warning state from a nominal state (temperature increasing) or an alarm state (temperature decreasing).')
envOutletTemperatureAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,65)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: envOutletTemperatureAlarmEvent.setDescription('Outlet air temperature has entered an alarm state.')
envFanNominalEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,66)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: envFanNominalEvent.setDescription('Fan has entered a nominal state from a fault state.')
envFanWarningEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,67)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: envFanWarningEvent.setDescription('Fan has entered a warning range (tachometer fans only).')
envFanAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,68)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: envFanAlarmEvent.setDescription('Fan has entered an alarm range (tachometer fans) or is stalled (rotor stall fans).')
eccMemoryErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,69)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: eccMemoryErrorEvent.setDescription('Error correcting code memory has detected an error.')
firmwareUploadCompleteEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,70)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: firmwareUploadCompleteEvent.setDescription('Firmware upload process has completed.')
restartCompleteEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,71)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: restartCompleteEvent.setDescription('Restart process has completed.')
maxInitiatorsExceededEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,72)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: maxInitiatorsExceededEvent.setDescription('Maximum number of initiators has been exceeded.')
powerSupplyOutOfSpecEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,100)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: powerSupplyOutOfSpecEvent.setDescription('The main power supply voltage is out of specified operating range.')
auxPowerOutOfSpecEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,101)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: auxPowerOutOfSpecEvent.setDescription('The auxillary power supply voltage is out of specified operating range.')
newTemperatureChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,102)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: newTemperatureChangeEvent.setDescription('Temperature change detected since last report. The possible temperature states are OK, High, and Very High.')
newPciErrorsEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,103)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: newPciErrorsEvent.setDescription('')
newMemoryParityErrorsEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,104)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: newMemoryParityErrorsEvent.setDescription('')
pciBusInterfaceErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,105)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: pciBusInterfaceErrorEvent.setDescription('')
fcInterfaceFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,106)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: fcInterfaceFailureEvent.setDescription('Fibre Channel interface failed Health Check.')
scsiInterfaceFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,107)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: scsiInterfaceFailureEvent.setDescription('SCSI interface failed Health Check.')
ssaInterfaceFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,108)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: ssaInterfaceFailureEvent.setDescription('SSA interface failed Health Check.')
deviceFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,109)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: deviceFailureEvent.setDescription('Target device failed Health Check.')
fcLinkStatusChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,110)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: fcLinkStatusChangeEvent.setDescription('Fibre Channel link status has changed.')
newFcTranferErrorsEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,111)).setObjects(("SANMgrV1-MIB", "paTrapSequenceNumber"), ("SANMgrV1-MIB", "paTime"), ("SANMgrV1-MIB", "paProducer"), ("SANMgrV1-MIB", "paEventClass"), ("SANMgrV1-MIB", "paEventCode"), ("SANMgrV1-MIB", "paSeq"), ("SANMgrV1-MIB", "paEventVars"))
if mibBuilder.loadTexts: newFcTranferErrorsEvent.setDescription('New Fibre Channel transfer errors were detected since last report.')
logWillOverwriteEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,150))
if mibBuilder.loadTexts: logWillOverwriteEvent.setDescription('The event log circular buffer is about to wrap, overwriting the oldest entries.')
bootCompletedEvent = NotificationType((1, 3, 6, 1, 4, 1, 2935, 1000) + (0,4444))
if mibBuilder.loadTexts: bootCompletedEvent.setDescription('This unit has completed its boot sequence and is ready for SNMP communication with management applications. During the time period between the initiation of the boot (or reboot) sequence and the issuing of the bootCompletedEvent trap, certain data objects may not be completely initialized. As such, management applications should not attempt to retrieve data via SNMP until the bootCompletedEvent is issued.')
mibBuilder.exportSymbols("SANMgrV1-MIB", pdType=pdType, srsDevState=srsDevState, ssaSATBQuota=ssaSATBQuota, paEventVars=paEventVars, envData=envData, paIdentify=paIdentify, pciBusInterfaceErrorEvent=pciBusInterfaceErrorEvent, PathlightProduct=PathlightProduct, hostName=hostName, lunLimitExcededEvent=lunLimitExcededEvent, ledError=ledError, memoryScrubberErrorEvent=memoryScrubberErrorEvent, srsDeviceFailedEvent=srsDeviceFailedEvent, dmDeviceMap=dmDeviceMap, envPowerWarningEvent=envPowerWarningEvent, pcHWRev=pcHWRev, newPciErrorsEvent=newPciErrorsEvent, ssaPathAlg=ssaPathAlg, pdProduct=pdProduct, deviceMap=deviceMap, paGatewayHWRev=paGatewayHWRev, bootCompletedEvent=bootCompletedEvent, scsiMapComments=scsiMapComments, srsMemberErrorEvent=srsMemberErrorEvent, srsMemEntry=srsMemEntry, srsMemAssignedLun=srsMemAssignedLun, pcSubProduct=pcSubProduct, hostWWName=hostWWName, pdFWRev=pdFWRev, hostInitiator=hostInitiator, srsMemberSyncDoneEvent=srsMemberSyncDoneEvent, srsMemWriteOptions=srsMemWriteOptions, ScsiTermination=ScsiTermination, srsMemTable=srsMemTable, ssaAsyncErrorEvent=ssaAsyncErrorEvent, pcPMCSlot=pcPMCSlot, ssaUidRemovedEvent=ssaUidRemovedEvent, srsMemberSyncErrorEvent=srsMemberSyncErrorEvent, srsDevMembersOnline=srsDevMembersOnline, pdAccess=pdAccess, envPowerNominalEvent=envPowerNominalEvent, paTrapSequenceNumber=paTrapSequenceNumber, scsiHostId=scsiHostId, unexpectedScsiInterruptEvent=unexpectedScsiInterruptEvent, pcPCIFunc=pcPCIFunc, envInletTemperatureAlarmEvent=envInletTemperatureAlarmEvent, hostCommand=hostCommand, pdBlockSize=pdBlockSize, ledStatus1=ledStatus1, ibfEvent=ibfEvent, ledAll=ledAll, paBaudRate=paBaudRate, fcLoopIDMode=fcLoopIDMode, srsDevTable=srsDevTable, fcInterfaceFailureEvent=fcInterfaceFailureEvent, dmRowStatus=dmRowStatus, pdDevEntry=pdDevEntry, srsDevBlockSize=srsDevBlockSize, envFanAlarmEvent=envFanAlarmEvent, unitAttentionEvent=unitAttentionEvent, scsiStatus=scsiStatus, fcLipEvent=fcLipEvent, ledReady=ledReady, fcHWRev=fcHWRev, hostPortID=hostPortID, paNodeName=paNodeName, ssaAdapterEvent=ssaAdapterEvent, pcReset=pcReset, ScsiAnsiLevel=ScsiAnsiLevel, paLogChronFirst=paLogChronFirst, scsiCtlrEntry=scsiCtlrEntry, ledScsi3=ledScsi3, fcFWRev=fcFWRev, ssaMaxTarg=ssaMaxTarg, pciInterfaceErrorEvent=pciInterfaceErrorEvent, Reset=Reset, fcInvalidTxWordCount=fcInvalidTxWordCount, ScsiCardType=ScsiCardType, scsiMaxIds=scsiMaxIds, ledScsi1=ledScsi1, pnTrapStyle=pnTrapStyle, scsiInterfaceFailureEvent=scsiInterfaceFailureEvent, sanGateway2=sanGateway2, paEthernetType=paEthernetType, pdRemovable=pdRemovable, paLogScroll=paLogScroll, pdStatusBits=pdStatusBits, fcMedia=fcMedia, fcCurrentSpeed=fcCurrentSpeed, pdBus=pdBus, srsMemSyncPoint=srsMemSyncPoint, pcRescan=pcRescan, paSRSStatus=paSRSStatus, paHealthCheckLevel=paHealthCheckLevel, paVPSStatus=paVPSStatus, scsiResetOnPowerUp=scsiResetOnPowerUp, dmAssignedLun=dmAssignedLun, pcVendorId=pcVendorId, envDataId=envDataId, hostSANConnection=hostSANConnection, envTemperatureNominalEvent=envTemperatureNominalEvent, fcLinkStatusChangeEvent=fcLinkStatusChangeEvent, configurationEvent=configurationEvent, Interface=Interface, ledStatus3=ledStatus3, fcFrameSize=fcFrameSize, pdSerial=pdSerial, pdLun=pdLun, paReboot=paReboot, newFcTranferErrorsEvent=newFcTranferErrorsEvent, pdIpAddress=pdIpAddress, ledMainPower=ledMainPower, auxPowerOutOfSpecEvent=auxPowerOutOfSpecEvent, paEventLogLevels=paEventLogLevels, SsaSpeed=SsaSpeed, scsiBusResetEvent=scsiBusResetEvent, srsMemberRetryEvent=srsMemberRetryEvent, fcALPhysicalAddress=fcALPhysicalAddress, fcLoopUpEvent=fcLoopUpEvent, scsiIoCard=scsiIoCard, fcResponseTransferErrorEvent=fcResponseTransferErrorEvent, scsiParityErrorEvent=scsiParityErrorEvent, pcChannelMask=pcChannelMask, fcSystemErrorEvent=fcSystemErrorEvent, envOutletTemperatureAlarmEvent=envOutletTemperatureAlarmEvent, notification=notification, hostInitiatorEntry=hostInitiatorEntry, fcSerialNumber=fcSerialNumber, envWarningHi=envWarningHi, hostConnectionType=hostConnectionType, envInletTemperatureWarningEvent=envInletTemperatureWarningEvent, ddfMemoryErrorEvent=ddfMemoryErrorEvent, pdScsiAnsiLevel=pdScsiAnsiLevel, dmType=dmType, scsiMapTid=scsiMapTid, firmwareUploadCompleteEvent=firmwareUploadCompleteEvent, pcFCCtlrs=pcFCCtlrs, pdInterfaceType=pdInterfaceType, VendorIDInt=VendorIDInt, pcPortHostType=pcPortHostType, ssaStatus2=ssaStatus2, restartCompleteEvent=restartCompleteEvent, pnIndex=pnIndex, lipResetEvent=lipResetEvent, pdStatus=pdStatus, ledTempWarn=ledTempWarn, paEvRptLevel=paEvRptLevel, scsiSpeed=scsiSpeed, srsDevSizeInBlocks=srsDevSizeInBlocks, envDataEntry=envDataEntry, diagnosticEvent=diagnosticEvent, PathingAlgorithm=PathingAlgorithm, srsMemCommand=srsMemCommand, pcPCIClass=pcPCIClass, fcTapeFeature=fcTapeFeature, pnTrapDest=pnTrapDest, ScsiRole=ScsiRole, timeReferenceEvent=timeReferenceEvent, envCurStatus=envCurStatus, newTemperatureChangeEvent=newTemperatureChangeEvent, sanGateway=sanGateway, hostIndex=hostIndex, pcSplitMode=pcSplitMode, paSanDirectorEnabled=paSanDirectorEnabled, deviceLimitExcededEvent=deviceLimitExcededEvent, fcMaxSpeed=fcMaxSpeed, pcType=pcType, paVPMStatus=paVPMStatus, pdWidth=pdWidth, replication=replication, ssaCtlrEntry=ssaCtlrEntry, ledActivity2=ledActivity2, ssaPortUpEvent=ssaPortUpEvent, fcWWID=fcWWID, srsMemberSyncStartedEvent=srsMemberSyncStartedEvent, ssaMasterPriority=ssaMasterPriority, fcLinkFailureCount=fcLinkFailureCount, LogViewingLevel=LogViewingLevel, srsDeviceOnlineEvent=srsDeviceOnlineEvent, fcWWNodeName=fcWWNodeName, ssaSpeed=ssaSpeed, fcConnectionOptions=fcConnectionOptions, hostType=hostType, fcProtocolErrorCount=fcProtocolErrorCount, pcLatency=pcLatency, fcTransferFailureEvent=fcTransferFailureEvent, controllers=controllers, loggingStoppedEvent=loggingStoppedEvent, ssaInterfaceFailureEvent=ssaInterfaceFailureEvent, PltStatus=PltStatus, ledAuxPower=ledAuxPower, pcControllers=pcControllers, FibrePort=FibrePort, scsiMaxLuns=scsiMaxLuns, fcStatus=fcStatus, paLogFilename=paLogFilename, scsiMapLun=scsiMapLun, ledEthernetSpeed=ledEthernetSpeed, paServerVersion=paServerVersion, ProductID=ProductID, deviceRemovedEvent=deviceRemovedEvent, temperatureChangeEvent=temperatureChangeEvent, pdVendor=pdVendor, fcDirectoryServerChangeEvent=fcDirectoryServerChangeEvent, paSeq=paSeq, DeviceType=DeviceType, fcPortMode=fcPortMode, ssaUidAddedEvent=ssaUidAddedEvent, FibreLoopIDMode=FibreLoopIDMode, pcPCIDev=pcPCIDev, ledScsi4=ledScsi4, pdIdentify=pdIdentify, scsiTerm=scsiTerm, dmTargetLun=dmTargetLun, fcCurrentSpeedSetting=fcCurrentSpeedSetting, envPowerAlarmEvent=envPowerAlarmEvent, paSnmpFWRev=paSnmpFWRev, scsiMapPort=scsiMapPort, scsiMapRowStatus=scsiMapRowStatus, srsMemState=srsMemState, paTrapThresholds=paTrapThresholds, srsDevPrimary=srsDevPrimary, pdCapacity=pdCapacity, paLicenseKey=paLicenseKey, pcSSACtlrs=pcSSACtlrs, HealthCheckLevel=HealthCheckLevel, srsDevFlags=srsDevFlags, deviceAddedEvent=deviceAddedEvent, panelLED=panelLED, envFanWarningEvent=envFanWarningEvent, newMemoryParityErrorsEvent=newMemoryParityErrorsEvent, sanGateway1=sanGateway1, scsiUnexpectedDisconnectEvent=scsiUnexpectedDisconnectEvent, ssaMaxInit=ssaMaxInit, ledTempAlarm=ledTempAlarm, ssaSATIQuota=ssaSATIQuota, srsMemberAddedEvent=srsMemberAddedEvent, srsDeviceRemovedEvent=srsDeviceRemovedEvent, Boolean=Boolean, hostIPAddr=hostIPAddr, paThirdPartyCopyStatus=paThirdPartyCopyStatus, paCommand=paCommand, pnIPAddr=pnIPAddr, srsDevMemberCount=srsDevMemberCount, envDataTable=envDataTable, ledScsi2=ledScsi2, ledActivity3=ledActivity3, pcSCSICtlrs=pcSCSICtlrs, paEventLog=paEventLog, srsMemberSuspendedEvent=srsMemberSuspendedEvent, scsiRole=scsiRole, paThirdPartyCopyEnabled=paThirdPartyCopyEnabled, paHost=paHost, pnTrapDestEntry=pnTrapDestEntry)
mibBuilder.exportSymbols("SANMgrV1-MIB", srsMemType=srsMemType, paSysNodeNameMode=paSysNodeNameMode, powerSupplyOutOfSpecEvent=powerSupplyOutOfSpecEvent, scsiMapAssignedLun=scsiMapAssignedLun, ledEtherLink=ledEtherLink, scsiMapCommand=scsiMapCommand, fcPortDatabaseChangeEvent=fcPortDatabaseChangeEvent, paLogSize=paLogSize, paProducer=paProducer, products=products, envNominalLo=envNominalLo, srsDevId=srsDevId, paProductType=paProductType, pcMaxBurst=pcMaxBurst, pcIdentify=pcIdentify, paLogBoot=paLogBoot, ledActivity1=ledActivity1, fcLoopDownEvent=fcLoopDownEvent, paGatewayFWRev=paGatewayFWRev, FibrePortMode=FibrePortMode, hostRowStatus=hostRowStatus, dmUid=dmUid, paRidTag=paRidTag, dmDevMapEntry=dmDevMapEntry, scsiChannelMap=scsiChannelMap, scsiFWRev=scsiFWRev, paEventCode=paEventCode, srsMemberRemovedEvent=srsMemberRemovedEvent, paSerialNumber=paSerialNumber, srsMemId=srsMemId, envOutletTemperatureWarningEvent=envOutletTemperatureWarningEvent, deviceFailureEvent=deviceFailureEvent, scsiMap=scsiMap, ledStatus2=ledStatus2, ledEtherCollision=ledEtherCollision, pcPCISlot=pcPCISlot, ScsiSpeed=ScsiSpeed, eccMemoryErrorEvent=eccMemoryErrorEvent, ssaFWRev=ssaFWRev, logWillOverwriteEvent=logWillOverwriteEvent, pdDevices=pdDevices, ssaSATAQuota=ssaSATAQuota, fcFrameBufferSize=fcFrameBufferSize, paIndex=paIndex, scsiMaxSpeed=scsiMaxSpeed, fcDebugDumpEvent=fcDebugDumpEvent, devices=devices, pcLED=pcLED, envUnit=envUnit, memoryFaultEvent=memoryFaultEvent, scsiMaxWidth=scsiMaxWidth, paEventLogEntry=paEventLogEntry, shutdownEvent=shutdownEvent, paEnvironmentState=paEnvironmentState, pdIndex=pdIndex, ssaStatus1=ssaStatus1, srsDevAssignedLun=srsDevAssignedLun, ledEtherTransmit=ledEtherTransmit, scsiMultiInitEnabled=scsiMultiInitEnabled, interfaceBusFaultEvent=interfaceBusFaultEvent, pciBusParityErrorEvent=pciBusParityErrorEvent, FibreConnOptions=FibreConnOptions, RowStatus=RowStatus, scsiMapPdIndex=scsiMapPdIndex, pcIndex=pcIndex, hostITLData=hostITLData, agent=agent, envDataName=envDataName, FcStatus=FcStatus, fcPortType=fcPortType, deviceMapCommand=deviceMapCommand, fcCtlrChipType=fcCtlrChipType, pnUdpPort=pnUdpPort, srsDevCommand=srsDevCommand, scsiAlternateHostId=scsiAlternateHostId, fcRequestTransferErrorEvent=fcRequestTransferErrorEvent, fcLossSyncCount=fcLossSyncCount, paHealthCheckValue=paHealthCheckValue, pathlight=pathlight, pcProductId=pcProductId, pdReset=pdReset, envFanNominalEvent=envFanNominalEvent, fcHardID=fcHardID, pdSpeed=pdSpeed, pdUID=pdUID, scsiDeviceAddedEvent=scsiDeviceAddedEvent, paCommandControlLUN=paCommandControlLUN, pdCtlrIndex=pdCtlrIndex, pcCtlrEntry=pcCtlrEntry, paHealthCheckInterval=paHealthCheckInterval, paLogNCurrent=paLogNCurrent, excessiveScsiBusErrorsEvent=excessiveScsiBusErrorsEvent, srsMemDeviceId=srsMemDeviceId, envNominalHi=envNominalHi, pdId=pdId, senseDataEvent=senseDataEvent, interfaceDeviceFaultEvent=interfaceDeviceFaultEvent, pdHWRev=pdHWRev, fcCtlrEntry=fcCtlrEntry, BaudRate=BaudRate, scsiMapEntry=scsiMapEntry, pdTargetLun=pdTargetLun, fcLoopID=fcLoopID, srsDevEntry=srsDevEntry, FibreMedia=FibreMedia, pcSubVendor=pcSubVendor, dmTargetId=dmTargetId, ssaPortDownEvent=ssaPortDownEvent, srsMemReadOptions=srsMemReadOptions, fcLossSignalCount=fcLossSignalCount, maxInitiatorsExceededEvent=maxInitiatorsExceededEvent, ssaHWRev=ssaHWRev, trapDefinition=trapDefinition, ssaWebReconfiguredEvent=ssaWebReconfiguredEvent, scsiHWRev=scsiHWRev, LogCommand=LogCommand, fcInvalidCRCCount=fcInvalidCRCCount, paTime=paTime, srsDeviceCreatedEvent=srsDeviceCreatedEvent, envWarningLo=envWarningLo, pcPCIBus=pcPCIBus, ssaUID=ssaUID, envCurValue=envCurValue, pcRevision=pcRevision, paLogChronLast=paLogChronLast, paEventClass=paEventClass, loggingStartedEvent=loggingStartedEvent, dmPort=dmPort, paVPSEnabled=paVPSEnabled, pcFWRev=pcFWRev)
