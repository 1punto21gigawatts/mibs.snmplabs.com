#
# PySNMP MIB module PHIHONG-PoE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PHIHONG-PoE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:40:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Gauge32, Counter64, Unsigned32, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, enterprises, iso, Counter32, TimeTicks, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "Counter64", "Unsigned32", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "enterprises", "iso", "Counter32", "TimeTicks", "Bits", "ObjectIdentity")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
phihong = MibIdentifier((1, 3, 6, 1, 4, 1, 24852))
poeProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 24852, 2))
poeProductsPart = MibScalar((1, 3, 6, 1, 4, 1, 24852, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeProductsPart.setStatus('current')
if mibBuilder.loadTexts: poeProductsPart.setDescription('the POE controller Part.')
poeSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 24852, 2, 2))
poeSystemActionHubReset = MibScalar((1, 3, 6, 1, 4, 1, 24852, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ready", 0), ("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: poeSystemActionHubReset.setStatus('current')
if mibBuilder.loadTexts: poeSystemActionHubReset.setDescription('Reset the POE controller.')
poeSystemActionHubRestoreFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 24852, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ready", 0), ("restore", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: poeSystemActionHubRestoreFactoryDefault.setStatus('current')
if mibBuilder.loadTexts: poeSystemActionHubRestoreFactoryDefault.setDescription('Restore Factory Default to flash. resetpassword means when users forget the password,they can use this entry, and all of the snmp module parameters will be set to default values.')
poeSystemActionHubSaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 24852, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ready", 0), ("save", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: poeSystemActionHubSaveConfiguration.setStatus('current')
if mibBuilder.loadTexts: poeSystemActionHubSaveConfiguration.setDescription('Save the POE parameters to flash')
poeSystemAllPortPowerEnable = MibScalar((1, 3, 6, 1, 4, 1, 24852, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ready", 0), ("disable", 1), ("enable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: poeSystemAllPortPowerEnable.setStatus('current')
if mibBuilder.loadTexts: poeSystemAllPortPowerEnable.setDescription('Enables power supply in all port. Setting this object at a value enable(2) enables power and detection mechanism for all port. Setting this object at a value disable(1) disables power for all port.')
poeSystemHWVersion = MibScalar((1, 3, 6, 1, 4, 1, 24852, 2, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeSystemHWVersion.setStatus('current')
if mibBuilder.loadTexts: poeSystemHWVersion.setDescription('System hardware version for the Main board')
poeSystemNumberOfChannel = MibScalar((1, 3, 6, 1, 4, 1, 24852, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeSystemNumberOfChannel.setStatus('current')
if mibBuilder.loadTexts: poeSystemNumberOfChannel.setDescription('Number of ports in the system')
poeSystemProductPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 24852, 2, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeSystemProductPartNumber.setStatus('current')
if mibBuilder.loadTexts: poeSystemProductPartNumber.setDescription('System Part Number for PowerHub ')
poeSystemFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 24852, 2, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeSystemFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: poeSystemFirmwareVersion.setDescription('System firmware version for the POE')
poeSystemDescription = MibScalar((1, 3, 6, 1, 4, 1, 24852, 2, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeSystemDescription.setStatus('current')
if mibBuilder.loadTexts: poeSystemDescription.setDescription('System Description 10 characters ')
poeSystemConsumptionPower = MibScalar((1, 3, 6, 1, 4, 1, 24852, 2, 2, 12), Integer32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: poeSystemConsumptionPower.setStatus('current')
if mibBuilder.loadTexts: poeSystemConsumptionPower.setDescription('Measured usage power expressed in Watts.')
poeSystemControlACPower = MibScalar((1, 3, 6, 1, 4, 1, 24852, 2, 2, 13), Integer32()).setUnits('Watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeSystemControlACPower.setStatus('current')
if mibBuilder.loadTexts: poeSystemControlACPower.setDescription('describes the maximum available power in Watts to be supplied by the AC backup source to this device.')
poeSystemControlDCPower = MibScalar((1, 3, 6, 1, 4, 1, 24852, 2, 2, 14), Integer32()).setUnits('Watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeSystemControlDCPower.setStatus('current')
if mibBuilder.loadTexts: poeSystemControlDCPower.setDescription('describes the maximum available power in Watts to be supplied by the DC backup source to this device.')
poeSystemControlBothPower = MibScalar((1, 3, 6, 1, 4, 1, 24852, 2, 2, 15), Integer32()).setUnits('Watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeSystemControlBothPower.setStatus('current')
if mibBuilder.loadTexts: poeSystemControlBothPower.setDescription('describes the maximum available power in Watts to be supplied by Both AC and DC backup source to this device.')
poeSystemParameters = MibScalar((1, 3, 6, 1, 4, 1, 24852, 2, 2, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeSystemParameters.setStatus('current')
if mibBuilder.loadTexts: poeSystemParameters.setDescription('1st char:Knokoff enable,2nd char:AC Disconnect enable,3th char:Disable Power Management')
poeSystemSnmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 24852, 2, 2, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeSystemSnmpVersion.setStatus('current')
if mibBuilder.loadTexts: poeSystemSnmpVersion.setDescription(' The software version for the SNMP device')
poeSystemPerPortPowerEnable = MibScalar((1, 3, 6, 1, 4, 1, 24852, 2, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(48, 48)).setFixedLength(48)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeSystemPerPortPowerEnable.setStatus('current')
if mibBuilder.loadTexts: poeSystemPerPortPowerEnable.setDescription('Enables power supply in all port. Setting this object at a value enable(2) enables power and detection mechanism for all port. Setting this object at a value disable(1) disables power for all port.')
poeSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 24852, 2, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("overheat", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeSystemStatus.setStatus('current')
if mibBuilder.loadTexts: poeSystemStatus.setDescription('The status of the POE.')
poePortTable = MibTable((1, 3, 6, 1, 4, 1, 24852, 2, 3), )
if mibBuilder.loadTexts: poePortTable.setStatus('current')
if mibBuilder.loadTexts: poePortTable.setDescription('')
poePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24852, 2, 3, 1), ).setIndexNames((0, "PHIHONG-PoE-MIB", "poePortIndex"))
if mibBuilder.loadTexts: poePortEntry.setStatus('current')
if mibBuilder.loadTexts: poePortEntry.setDescription('port entry containing data regarding a particular port')
poePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 24852, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortIndex.setStatus('current')
if mibBuilder.loadTexts: poePortIndex.setDescription('A unique value for each port.')
poePortPowerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 24852, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortPowerEnable.setStatus('current')
if mibBuilder.loadTexts: poePortPowerEnable.setDescription('Enables power supply on this port. Setting this object at a value enable(2) enables power and detection mechanism for this port. Setting this object at a value disable(1) disables power for this port.')
poePortControlMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 24852, 2, 3, 1, 3), Integer32()).setUnits('mWatts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortControlMaxPower.setStatus('current')
if mibBuilder.loadTexts: poePortControlMaxPower.setDescription('This command specifies the max power in [mWatts] to that port. IF you set this value it will take out this port from the auto mode. The value MUST be more then 0')
poePortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 24852, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortDescription.setStatus('current')
if mibBuilder.loadTexts: poePortDescription.setDescription('Port Description 10 characters ')
poePortDetectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 24852, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 8, 9))).clone(namedValues=NamedValues(("off", 0), ("discR", 1), ("discC", 2), ("class", 3), ("rampUp", 4), ("ramPOEown", 5), ("sampleI", 8), ("sampleV", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortDetectionStatus.setStatus('current')
if mibBuilder.loadTexts: poePortDetectionStatus.setDescription(' Port Detection, show the detection status of each port')
poePortPowerClassifications = MibTableColumn((1, 3, 6, 1, 4, 1, 24852, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortPowerClassifications.setStatus('current')
if mibBuilder.loadTexts: poePortPowerClassifications.setDescription('Port Power Classifications, show the classification of each port')
poePortPowerDetectionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 24852, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortPowerDetectionControl.setStatus('current')
if mibBuilder.loadTexts: poePortPowerDetectionControl.setDescription('Port Power Detection Control, enable or disable the Power Limit for Management')
poePortPowerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 24852, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("high", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortPowerPriority.setStatus('current')
if mibBuilder.loadTexts: poePortPowerPriority.setDescription('Port Power Priority, show the priority of each port')
poePortPower = MibTableColumn((1, 3, 6, 1, 4, 1, 24852, 2, 3, 1, 11), Integer32()).setUnits('mWattes').setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortPower.setStatus('current')
if mibBuilder.loadTexts: poePortPower.setDescription('Port Actual Power (in mWattes).')
poePortVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 24852, 2, 3, 1, 12), DisplayString()).setUnits('dVoltage').setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortVoltage.setStatus('current')
if mibBuilder.loadTexts: poePortVoltage.setDescription('Port Voltage (in dVoltage).')
poePortCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 24852, 2, 3, 1, 13), Integer32()).setUnits('mAmps').setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortCurrent.setStatus('current')
if mibBuilder.loadTexts: poePortCurrent.setDescription('Port Current (in mAmps).')
poePortResistance = MibTableColumn((1, 3, 6, 1, 4, 1, 24852, 2, 3, 1, 14), Integer32()).setUnits('ohms').setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortResistance.setStatus('current')
if mibBuilder.loadTexts: poePortResistance.setDescription('Port Resistance (in ohms).')
poePortFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 24852, 2, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortFlags.setStatus('current')
if mibBuilder.loadTexts: poePortFlags.setDescription('1st char:classification(0-3),2nd char:Port bypass detection enable,3th char:Port bypass classifiation enable,4th cahr:Port bypass powerup enable,5th char:Port bypass sampling enable.')
poePortBypassFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 24852, 2, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortBypassFlags.setStatus('current')
if mibBuilder.loadTexts: poePortBypassFlags.setDescription('1st char:Port bypass detection enable,2nd char:Port bypass classifiation enable,3th cahr:Port bypass powerup enable,4th char:Port bypass sampling enable.')
poePortUseClassificationforPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 24852, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortUseClassificationforPowerLimit.setStatus('current')
if mibBuilder.loadTexts: poePortUseClassificationforPowerLimit.setDescription(' Use Port classification for power limit , enable or disable the Port classification for power limit.')
poePortLegacyDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 24852, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortLegacyDetection.setStatus('current')
if mibBuilder.loadTexts: poePortLegacyDetection.setDescription(' Use Port legacy detection , enable or disable the Port legacy detection.')
poeTrapsControlTable = MibTable((1, 3, 6, 1, 4, 1, 24852, 2, 4), )
if mibBuilder.loadTexts: poeTrapsControlTable.setStatus('current')
if mibBuilder.loadTexts: poeTrapsControlTable.setDescription('A table of objects that display and control the Traps on a PSM device.')
poeTrapsControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24852, 2, 4, 1), ).setIndexNames((0, "PHIHONG-PoE-MIB", "poeTrapsControlGroupIndex"))
if mibBuilder.loadTexts: poeTrapsControlEntry.setStatus('current')
if mibBuilder.loadTexts: poeTrapsControlEntry.setDescription('A set of objects that control the Trap events.')
poeTrapsControlGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 24852, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: poeTrapsControlGroupIndex.setStatus('current')
if mibBuilder.loadTexts: poeTrapsControlGroupIndex.setDescription('This variable uniquely identifies the group.')
poeTrapsControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 24852, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trapsDisabled", 1), ("trapsEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeTrapsControlEnable.setStatus('current')
if mibBuilder.loadTexts: poeTrapsControlEnable.setDescription('Enable Traps from Agent')
poeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 24852, 2, 5))
poePortHWFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 24852, 2, 5, 1)).setObjects(("PHIHONG-PoE-MIB", "poeTrapsControlGroupIndex"), ("PHIHONG-PoE-MIB", "poePortVoltage"))
if mibBuilder.loadTexts: poePortHWFailTrap.setStatus('current')
if mibBuilder.loadTexts: poePortHWFailTrap.setDescription('This trap indicate UV0v failure /UV0v Spike failure /Device A2d failure.')
poePortPeakOverCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 24852, 2, 5, 2)).setObjects(("PHIHONG-PoE-MIB", "poeTrapsControlGroupIndex"), ("PHIHONG-PoE-MIB", "poePortCurrent"))
if mibBuilder.loadTexts: poePortPeakOverCurrentTrap.setStatus('current')
if mibBuilder.loadTexts: poePortPeakOverCurrentTrap.setDescription('This trap indicate peak over current failure.')
poePortOverloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 24852, 2, 5, 3)).setObjects(("PHIHONG-PoE-MIB", "poeTrapsControlGroupIndex"), ("PHIHONG-PoE-MIB", "poePortDetectionStatus"))
if mibBuilder.loadTexts: poePortOverloadTrap.setStatus('current')
if mibBuilder.loadTexts: poePortOverloadTrap.setDescription('This trap indicate overload failure. If you put at least 400mA on the output, you will see if your traps work')
poePortDiscoveryFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 24852, 2, 5, 4)).setObjects(("PHIHONG-PoE-MIB", "poeTrapsControlGroupIndex"), ("PHIHONG-PoE-MIB", "poePortVoltage"))
if mibBuilder.loadTexts: poePortDiscoveryFailTrap.setStatus('current')
if mibBuilder.loadTexts: poePortDiscoveryFailTrap.setDescription('This trap indicate Discovery failure/ Discovery VA2 failure/Discovery RA2 failure/Sample Discovery A2d Failure.')
poePortClassificationFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 24852, 2, 5, 5)).setObjects(("PHIHONG-PoE-MIB", "poeTrapsControlGroupIndex"), ("PHIHONG-PoE-MIB", "poePortVoltage"))
if mibBuilder.loadTexts: poePortClassificationFailTrap.setStatus('current')
if mibBuilder.loadTexts: poePortClassificationFailTrap.setDescription('This trap indicate Class Violation failure/ Classification A2d failure.')
poePortDisconnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 24852, 2, 5, 6)).setObjects(("PHIHONG-PoE-MIB", "poeTrapsControlGroupIndex"), ("PHIHONG-PoE-MIB", "poePortDetectionStatus"))
if mibBuilder.loadTexts: poePortDisconnectTrap.setStatus('current')
if mibBuilder.loadTexts: poePortDisconnectTrap.setDescription('This trap indicate port is disconnected.')
poePortVoltageFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 24852, 2, 5, 7)).setObjects(("PHIHONG-PoE-MIB", "poeTrapsControlGroupIndex"), ("PHIHONG-PoE-MIB", "poePortVoltage"))
if mibBuilder.loadTexts: poePortVoltageFailTrap.setStatus('current')
if mibBuilder.loadTexts: poePortVoltageFailTrap.setDescription('This trap indicate if PSM Port is no voltage failure.')
poeSystemOverheatTrap = NotificationType((1, 3, 6, 1, 4, 1, 24852, 2, 5, 8)).setObjects(("PHIHONG-PoE-MIB", "poeTrapsControlGroupIndex"))
if mibBuilder.loadTexts: poeSystemOverheatTrap.setStatus('current')
if mibBuilder.loadTexts: poeSystemOverheatTrap.setDescription('This trap indicate if PSM is overheat.')
mibBuilder.exportSymbols("PHIHONG-PoE-MIB", poePortResistance=poePortResistance, poePortBypassFlags=poePortBypassFlags, poeSystemDescription=poeSystemDescription, poePortPeakOverCurrentTrap=poePortPeakOverCurrentTrap, poePortHWFailTrap=poePortHWFailTrap, poePortUseClassificationforPowerLimit=poePortUseClassificationforPowerLimit, poePortOverloadTrap=poePortOverloadTrap, poePortVoltageFailTrap=poePortVoltageFailTrap, poeSystemControlDCPower=poeSystemControlDCPower, poeSystemParameters=poeSystemParameters, poeProduct=poeProduct, poePortDescription=poePortDescription, poeTrapsControlTable=poeTrapsControlTable, poeSystemAllPortPowerEnable=poeSystemAllPortPowerEnable, poePortTable=poePortTable, poeSystemControlBothPower=poeSystemControlBothPower, poePortPowerDetectionControl=poePortPowerDetectionControl, poeTrapsControlGroupIndex=poeTrapsControlGroupIndex, poeProductsPart=poeProductsPart, poePortIndex=poePortIndex, poeSystemControlACPower=poeSystemControlACPower, poePortEntry=poePortEntry, poeTraps=poeTraps, poePortCurrent=poePortCurrent, poePortPowerClassifications=poePortPowerClassifications, poePortFlags=poePortFlags, poeSystemNumberOfChannel=poeSystemNumberOfChannel, phihong=phihong, poeTrapsControlEnable=poeTrapsControlEnable, poePortPowerPriority=poePortPowerPriority, poeSystemConsumptionPower=poeSystemConsumptionPower, poeSystem=poeSystem, poeSystemProductPartNumber=poeSystemProductPartNumber, poePortDisconnectTrap=poePortDisconnectTrap, poePortClassificationFailTrap=poePortClassificationFailTrap, poeSystemActionHubRestoreFactoryDefault=poeSystemActionHubRestoreFactoryDefault, poeTrapsControlEntry=poeTrapsControlEntry, poePortVoltage=poePortVoltage, poeSystemHWVersion=poeSystemHWVersion, poePortPowerEnable=poePortPowerEnable, poeSystemPerPortPowerEnable=poeSystemPerPortPowerEnable, poeSystemActionHubSaveConfiguration=poeSystemActionHubSaveConfiguration, poeSystemActionHubReset=poeSystemActionHubReset, poePortDiscoveryFailTrap=poePortDiscoveryFailTrap, poePortLegacyDetection=poePortLegacyDetection, poePortControlMaxPower=poePortControlMaxPower, poeSystemOverheatTrap=poeSystemOverheatTrap, poeSystemFirmwareVersion=poeSystemFirmwareVersion, poeSystemSnmpVersion=poeSystemSnmpVersion, poePortDetectionStatus=poePortDetectionStatus, poePortPower=poePortPower, poeSystemStatus=poeSystemStatus)
