#
# PySNMP MIB module AISLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AISLC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:16:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, Integer32, Counter64, Unsigned32, iso, NotificationType, ModuleIdentity, TimeTicks, ObjectIdentity, IpAddress, Counter32, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Integer32", "Counter64", "Unsigned32", "iso", "NotificationType", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "IpAddress", "Counter32", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
DisplayString, DateAndTime, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention", "TruthValue")
aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSLC = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 10))
if mibBuilder.loadTexts: aiSLC.setLastUpdated('9909141500Z')
if mibBuilder.loadTexts: aiSLC.setOrganization('Applied Innovation Incorporated')
if mibBuilder.loadTexts: aiSLC.setContactInfo(' Engineering MIB Administrator Postal: Applied Innovation Inc. 5800 Innovation Drive Dublin, OH 43016 Tel: 614/798-2000 Fax: 614/798-1770 E-mail: snmp@aiinet.com')
if mibBuilder.loadTexts: aiSLC.setDescription('The MIB Module for Smart Line Cards (SLC)')
aiSLCSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 10, 1))
aislcAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("boot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcAdminStatus.setStatus('current')
if mibBuilder.loadTexts: aislcAdminStatus.setDescription('Configured boot status of the card. A write of boot(2)when this object is in up(1) state will cause the SLC to reboot. Any other write will have no effect. This may not yet be the operational state of the SLC. The current operational state of the SLC is available as aislcOperStatus below.')
aislcAdminPush = MibScalar((1, 3, 6, 1, 4, 1, 539, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("push", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcAdminPush.setStatus('current')
if mibBuilder.loadTexts: aislcAdminPush.setDescription('A write of push(2) to this object informs the SLC that the management station is done with a group of related set requests. The SLC will save to novolatile memory any unsaved values. The use of this feature by the management station is OPTIONAL. The SLC will save to nonvolatile memory periodically, and upon the occurence of various events, even if the management station never writes to this object.')
aislcOperBaseport = MibScalar((1, 3, 6, 1, 4, 1, 539, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcOperBaseport.setStatus('current')
if mibBuilder.loadTexts: aislcOperBaseport.setDescription('The baseport of the SLC. This is the lowest-numbered backplane Time Division Subchannel assigned to this SLC.')
aislcLastConfigTime = MibScalar((1, 3, 6, 1, 4, 1, 539, 10, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcLastConfigTime.setStatus('current')
if mibBuilder.loadTexts: aislcLastConfigTime.setDescription('The timestamp of the last configuration or inventory change in the SLC. This value should be set to the value of sysUpTime at boot time. Additionaly, this value should be updated when a user changes the configuration or when any new hardware is detected that would effect variables in the supported MIBs.')
aislcAdminResetAlarm = MibScalar((1, 3, 6, 1, 4, 1, 539, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2), ("linkdown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcAdminResetAlarm.setStatus('current')
if mibBuilder.loadTexts: aislcAdminResetAlarm.setDescription('A write of reset(2) to this object informs the SLC that the management station wishes to reset the board alarm level for the SLC to the NORMAL level. The use of this feature by the management station is OPTIONAL. The SLC will reset the alarm status of the SLC to a normal alarm status. Used to reset the alarm status of the SLC after marking an enabled link that is down as dormant. A get of this object will return the current board level alarm state, either normal(1) or linkdown(3).')
aislcFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 539, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: aislcFirmwareVersion.setDescription('The version of the firmware currently executing on the SLC. This is in the format xxx.yyy[.zzz] where xxx, yyy, and zzz are 1 to 3 digit numbers and the third field, zzz, is optional.')
aislcProductName = MibScalar((1, 3, 6, 1, 4, 1, 539, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcProductName.setStatus('current')
if mibBuilder.loadTexts: aislcProductName.setDescription('The name of the product, such as AI296 or AI193-FT.')
aislcRomIdImageId = MibScalar((1, 3, 6, 1, 4, 1, 539, 10, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcRomIdImageId.setStatus('current')
if mibBuilder.loadTexts: aislcRomIdImageId.setDescription('The image identifier (ROM ID) string of the firmware currently executing on the SLC.')
aislcRomIdTimeDate = MibScalar((1, 3, 6, 1, 4, 1, 539, 10, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcRomIdTimeDate.setStatus('current')
if mibBuilder.loadTexts: aislcRomIdTimeDate.setDescription('This is the image build time and date. The DateAndTime type is a structured OCTET STRING, defined in v2-tc.my (SNMPv2 Textual Conventions).')
aislcRomIdSelFeatTable = MibTable((1, 3, 6, 1, 4, 1, 539, 10, 1, 10), )
if mibBuilder.loadTexts: aislcRomIdSelFeatTable.setStatus('current')
if mibBuilder.loadTexts: aislcRomIdSelFeatTable.setDescription('A table of selectable features in this firmware image. If there are no selectable features, this table is empty.')
aislcRomIdSelFeatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 10, 1, 10, 1), ).setIndexNames((0, "AISLC-MIB", "aislcRomIdSelFeatName"))
if mibBuilder.loadTexts: aislcRomIdSelFeatTableEntry.setStatus('current')
if mibBuilder.loadTexts: aislcRomIdSelFeatTableEntry.setDescription('Information about a particular selectable feature.')
aislcRomIdSelFeatName = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 10, 1, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcRomIdSelFeatName.setStatus('current')
if mibBuilder.loadTexts: aislcRomIdSelFeatName.setDescription('The name of the selectable feature for this entry.')
aislcRomIdSelFeatEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 10, 1, 10, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcRomIdSelFeatEnabled.setStatus('current')
if mibBuilder.loadTexts: aislcRomIdSelFeatEnabled.setDescription('Whether or not this selectable feature is enabled. The TruthValue syntax defines values of true(1) and false(2).')
mibBuilder.exportSymbols("AISLC-MIB", aislcProductName=aislcProductName, aislcRomIdSelFeatTableEntry=aislcRomIdSelFeatTableEntry, aislcLastConfigTime=aislcLastConfigTime, aislcRomIdSelFeatEnabled=aislcRomIdSelFeatEnabled, aislcAdminStatus=aislcAdminStatus, aiSLC=aiSLC, aii=aii, aislcAdminPush=aislcAdminPush, aislcOperBaseport=aislcOperBaseport, aiSLCSystem=aiSLCSystem, aislcRomIdTimeDate=aislcRomIdTimeDate, aislcRomIdSelFeatTable=aislcRomIdSelFeatTable, aislcAdminResetAlarm=aislcAdminResetAlarm, aislcRomIdSelFeatName=aislcRomIdSelFeatName, aislcFirmwareVersion=aislcFirmwareVersion, PYSNMP_MODULE_ID=aiSLC, aislcRomIdImageId=aislcRomIdImageId)
