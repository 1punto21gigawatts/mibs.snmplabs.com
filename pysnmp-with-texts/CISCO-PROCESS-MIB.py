#
# PySNMP MIB module CISCO-PROCESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-PROCESS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:10:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
EntPhysicalIndexOrZero, Unsigned64 = mibBuilder.importSymbols("CISCO-TC", "EntPhysicalIndexOrZero", "Unsigned64")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, TimeTicks, Integer32, IpAddress, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, Bits, ObjectIdentity, NotificationType, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "Integer32", "IpAddress", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "Bits", "ObjectIdentity", "NotificationType", "MibIdentifier", "Counter64")
DisplayString, TimeStamp, TextualConvention, RowPointer, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TextualConvention", "RowPointer", "RowStatus", "TruthValue")
ciscoProcessMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 109))
ciscoProcessMIB.setRevisions(('2011-06-23 00:00', '2010-05-06 00:00', '2009-10-12 00:00', '2009-01-23 00:00', '2007-03-23 00:00', '2003-01-22 00:00', '2001-05-18 00:00', '1998-04-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoProcessMIB.setRevisionsDescriptions(('Added new table cpmCoreTable as well as a new optoinal compliance group cpmCoreGroup.', 'Added the following new objects to the cpmCPUTotalTable. cpmCPUMemoryCommitted, cpmCPUMemoryCommittedOvrFlow and cpmCPUMemoryHCCommitted. Added new compliance group cpmCPUTotalMemoryCommitGroup which includes Committed memory objects. Added new compliance cProcessMIBComplianceRev5 which deprecates cProcessMIBComplianceRev4.', 'Added TEXTUAL-CONVENTION called CPULoadAverage. Added the following new objects to cpmCPUTotalTable. cpmCPULoadAvg1min, cpmCPULoadAvg5min, cpmCPULoadAvg15min. Added new compliance group cpmCPULoadAvgGroup which includes load average objects. Added new compliance cProcessMIBComplianceRev4 which deprecates cProcessMIBComplianceRev3.', 'Added the following new objects to cpmCPUTotalTable. cpmCPUMemoryUsedOvrflw, cpmCPUMemoryHCUsed, cpmCPUMemoryFreeOvrflw, cpmCPUMemoryHCFree, cpmCPUMemoryKernelReservedOvrflw, cpmCPUMemoryHCKernelReserved, cpmCPUMemoryLowestOvrflw, cpmCPUMemoryHCLowest Added the following new objects to cpmProcessExtRevTable. cpmProcExtMemAllocatedRevOvrflw, cpmProcExtHCMemAllocatedRev, cpmProcExtMemFreedRevOvrflw, cpmProcExtHCMemFreedRev, cpmProcessTextSegmentSizeOvrflw, cpmProcessHCTextSegmentSize, cpmProcessDataSegmentSizeOvrflw, cpmProcessHCDataSegmentSize, cpmProcessStackSizeOvrflw, cpmProcessHCStackSize, cpmProcessDynamicMemorySizeOvrflw, cpmProcessHCDynamicMemorySize Added the following new objects to cpmThreadTable. cpmThreadStackSizeOvrflw, cpmThreadHCStackSize Added the following new objects to cpmVirtualProcessTable. cpmVirtualProcessMemAllocatedOvrflw, cpmVirtualProcessHCMemAllocated, cpmVirtualProcessMemFreedOvrflw, cpmVirtualProcessHCMemFreed Added following new compliance groups. cpmCPUTotalOverflowGroup, cpmCPUTotalOverflowGroup, cpmProcessExtRevOverflowGroup, cpmProcessExtRevHCGroup, cpmThreadOverflowGroup, cpmThreadHCGroup, cpmVirtualProcessOverflowGroup, cpmVirtualProcessHCGroup Added new compliance cProcessMIBComplianceRev3 which deprecates cProcessMIBComplianceRev2.', 'Added new objects to support POSIX compliant OS. Added cpmThread, cpmThreadTable, cpmVirtualProcess, cpmVirtualProcessTable and updated cpmCPUTotalTable, cpmProcessExtRevTable. Added cProcessMIBComplianceRev2 by deprecating cProcessMIBComplianceRev1. Added cpmCPUPosixMemoryGroup, cpmPosixProcessGroup, cpmThreadGroup, cpmVirtualProcessGroup.', 'cpmCPUThresholdTable, cpmCPUHistoryTable, cpmCPUProcessHistoryTable are added for CPU thresholding feature.', 'The objects cpmProcExtUtil5Sec, cpmProcExtUtil1Min, cpmProcExtUtil5Min,cpmCPUTotal5sec, cpmCPUTotal1min and cpmCPUTotal5min are deprecated to increase the value range as 0..100. The table cpmProcessExtTable is deprecated. The new objects added are cpmProcessExtRevTable, cpmProcExtMemAllocatedRev, cpmProcExtMemFreedRev, cpmProcExtInvokedRev, cpmProcExtRuntimeRev, cpmProcExtUtil5SecRev, cpmProcExtUtil1MinRev, cpmCPUTotal5MinRev, cpmCPUTotal5secRev, cpmCPUTotal1minRev and cpmCPUTotal5minRev.', 'Initial version of this MIB.',))
if mibBuilder.loadTexts: ciscoProcessMIB.setLastUpdated('201106230000Z')
if mibBuilder.loadTexts: ciscoProcessMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoProcessMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoProcessMIB.setDescription('The MIB module to describe active system processes. Virtual Machine refers to those OS which can run the code or process of a different executional model OS. Virtual Process assume the executional model of a OS which is different from Native OS. Virtual Processes are also referred as Tasks. Thread is a sequence of instructions to be executed within a program. Thread which adhere to POSIX standard is referred as a POSIX thread.')
class CPULoadAverage(TextualConvention, Unsigned32):
    description = 'The average number of processes in the queue waiting for CPU time over the last N minutes, where the N is defined by the object using this TC. This is similar to UNIX/Linux system load average. The calculation may vary by different OS kernels, so refer to the specific system document of your interest. The object value, which uses this TC, reflects the average number of runnable processes with units of hundredths of processes, i.e. a value of 183 indicates the average number of runnable processes over the N minutes is 1.83.'
    status = 'current'
    displayHint = 'd'

ciscoProcessMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 1))
cpmCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1))
cpmProcess = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2))
cpmThread = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3))
cpmVirtualProcess = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4))
cpmCPUHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5))
cpmCPUTotalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1), )
if mibBuilder.loadTexts: cpmCPUTotalTable.setStatus('current')
if mibBuilder.loadTexts: cpmCPUTotalTable.setDescription('A table of overall CPU statistics.')
cpmCPUTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-PROCESS-MIB", "cpmCPUTotalIndex"))
if mibBuilder.loadTexts: cpmCPUTotalEntry.setStatus('current')
if mibBuilder.loadTexts: cpmCPUTotalEntry.setDescription('Overall information about the CPU load. Entries in this table come and go as CPUs are added and removed from the system.')
cpmCPUTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cpmCPUTotalIndex.setStatus('current')
if mibBuilder.loadTexts: cpmCPUTotalIndex.setDescription('An index that uniquely represents a CPU (or group of CPUs) whose CPU load information is reported by a row in this table. This index is assigned arbitrarily by the engine and is not saved over reboots.')
cpmCPUTotalPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 2), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUTotalPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: cpmCPUTotalPhysicalIndex.setDescription('The entPhysicalIndex of the physical entity for which the CPU statistics in this entry are maintained. The physical entity can be a CPU chip, a group of CPUs, a CPU card etc. The exact type of this entity is described by its entPhysicalVendorType value. If the CPU statistics in this entry correspond to more than one physical entity (or to no physical entity), or if the entPhysicalTable is not supported on the SNMP agent, the value of this object must be zero.')
cpmCPUTotal5sec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUTotal5sec.setStatus('deprecated')
if mibBuilder.loadTexts: cpmCPUTotal5sec.setDescription('The overall CPU busy percentage in the last 5 second period. This object obsoletes the busyPer object from the OLD-CISCO-SYSTEM-MIB. This object is deprecated by cpmCPUTotal5secRev which has the changed range of value (0..100).')
cpmCPUTotal1min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUTotal1min.setStatus('deprecated')
if mibBuilder.loadTexts: cpmCPUTotal1min.setDescription('The overall CPU busy percentage in the last 1 minute period. This object obsoletes the avgBusy1 object from the OLD-CISCO-SYSTEM-MIB. This object is deprecated by cpmCPUTotal1minRev which has the changed range of value (0..100).')
cpmCPUTotal5min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUTotal5min.setStatus('deprecated')
if mibBuilder.loadTexts: cpmCPUTotal5min.setDescription('The overall CPU busy percentage in the last 5 minute period. This object deprecates the avgBusy5 object from the OLD-CISCO-SYSTEM-MIB. This object is deprecated by cpmCPUTotal5minRev which has the changed range of value (0..100).')
cpmCPUTotal5secRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUTotal5secRev.setStatus('deprecated')
if mibBuilder.loadTexts: cpmCPUTotal5secRev.setDescription('The overall CPU busy percentage in the last 5 second period. This object deprecates the object cpmCPUTotal5sec and increases the value range to (0..100). This object is deprecated by cpmCPUTotalMonIntervalValue')
cpmCPUTotal1minRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUTotal1minRev.setStatus('current')
if mibBuilder.loadTexts: cpmCPUTotal1minRev.setDescription('The overall CPU busy percentage in the last 1 minute period. This object deprecates the object cpmCPUTotal1min and increases the value range to (0..100).')
cpmCPUTotal5minRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUTotal5minRev.setStatus('current')
if mibBuilder.loadTexts: cpmCPUTotal5minRev.setDescription('The overall CPU busy percentage in the last 5 minute period. This object deprecates the object cpmCPUTotal5min and increases the value range to (0..100).')
cpmCPUMonInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMonInterval.setStatus('current')
if mibBuilder.loadTexts: cpmCPUMonInterval.setDescription('CPU usage monitoring interval. The value of this object in seconds indicates the how often the CPU utilization is calculated and monitored.')
cpmCPUTotalMonIntervalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUTotalMonIntervalValue.setStatus('current')
if mibBuilder.loadTexts: cpmCPUTotalMonIntervalValue.setDescription('The overall CPU busy percentage in the last cpmCPUMonInterval period. This object deprecates the object cpmCPUTotal5secRev.')
cpmCPUInterruptMonIntervalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUInterruptMonIntervalValue.setStatus('current')
if mibBuilder.loadTexts: cpmCPUInterruptMonIntervalValue.setDescription('The overall CPU busy percentage in the interrupt context in the last cpmCPUMonInterval period.')
cpmCPUMemoryUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 12), Gauge32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryUsed.setStatus('current')
if mibBuilder.loadTexts: cpmCPUMemoryUsed.setDescription('The overall CPU wide system memory which is currently under use.')
cpmCPUMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 13), Gauge32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryFree.setStatus('current')
if mibBuilder.loadTexts: cpmCPUMemoryFree.setDescription('The overall CPU wide system memory which is currently free.')
cpmCPUMemoryKernelReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 14), Gauge32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryKernelReserved.setStatus('current')
if mibBuilder.loadTexts: cpmCPUMemoryKernelReserved.setDescription('The overall CPU wide system memory which is reserved for kernel usage.')
cpmCPUMemoryLowest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 15), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryLowest.setStatus('current')
if mibBuilder.loadTexts: cpmCPUMemoryLowest.setDescription('The lowest free memory that has been recorded since device has booted.')
cpmCPUMemoryUsedOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 16), Gauge32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryUsedOvrflw.setStatus('current')
if mibBuilder.loadTexts: cpmCPUMemoryUsedOvrflw.setDescription('This object represents the upper 32-bit of cpmCPUMemoryUsed. This object needs to be supported only when the value of cpmCPUMemoryUsed exceeds 32-bit, otherwise this object value would be set to 0.')
cpmCPUMemoryHCUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 17), CounterBasedGauge64()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryHCUsed.setStatus('current')
if mibBuilder.loadTexts: cpmCPUMemoryHCUsed.setDescription('The overall CPU wide system memory which is currently under use. This object is a 64-bit version of cpmCPUMemoryUsed.')
cpmCPUMemoryFreeOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 18), Gauge32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryFreeOvrflw.setStatus('current')
if mibBuilder.loadTexts: cpmCPUMemoryFreeOvrflw.setDescription('This object represents the upper 32-bit of cpmCPUMemoryFree. This object needs to be supported only when the value of cpmCPUMemoryFree exceeds 32-bit, otherwise this object value would be set to 0.')
cpmCPUMemoryHCFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 19), Counter64()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryHCFree.setStatus('current')
if mibBuilder.loadTexts: cpmCPUMemoryHCFree.setDescription('The overall CPU wide system memory which is currently free. This object is a 64-bit version of cpmCPUMemoryFree.')
cpmCPUMemoryKernelReservedOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 20), Gauge32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryKernelReservedOvrflw.setStatus('current')
if mibBuilder.loadTexts: cpmCPUMemoryKernelReservedOvrflw.setDescription('This object represents the upper 32-bit of cpmCPUMemoryKernelReserved. This object needs to be supported only when the value of cpmCPUMemoryKernelReserved exceeds 32-bit, otherwise this object value would be set to 0.')
cpmCPUMemoryHCKernelReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 21), CounterBasedGauge64()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryHCKernelReserved.setStatus('current')
if mibBuilder.loadTexts: cpmCPUMemoryHCKernelReserved.setDescription('The overall CPU wide system memory which is reserved for kernel usage. This object is a 64-bit version of cpmCPUMemoryKernelReserved.')
cpmCPUMemoryLowestOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 22), Gauge32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryLowestOvrflw.setStatus('current')
if mibBuilder.loadTexts: cpmCPUMemoryLowestOvrflw.setDescription('This object represents the upper 32-bit of cpmCPUMemoryLowest. This object needs to be supported only when the value of cpmCPUMemoryLowest exceeds 32-bit, otherwise this object value would be set to 0.')
cpmCPUMemoryHCLowest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 23), CounterBasedGauge64()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryHCLowest.setStatus('current')
if mibBuilder.loadTexts: cpmCPUMemoryHCLowest.setDescription('The lowest free memory that has been recorded since device has booted. This object is a 64-bit version of cpmCPUMemoryLowest.')
cpmCPULoadAvg1min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 24), CPULoadAverage()).setUnits('hundredths of processes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPULoadAvg1min.setStatus('current')
if mibBuilder.loadTexts: cpmCPULoadAvg1min.setDescription('The overall CPU load Average in the last 1 minute period')
cpmCPULoadAvg5min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 25), CPULoadAverage()).setUnits('hundredths of processes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPULoadAvg5min.setStatus('current')
if mibBuilder.loadTexts: cpmCPULoadAvg5min.setDescription('The overall CPU load Average in the last 5 minutes period')
cpmCPULoadAvg15min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 26), CPULoadAverage()).setUnits('hundredths of processes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPULoadAvg15min.setStatus('current')
if mibBuilder.loadTexts: cpmCPULoadAvg15min.setDescription('The overall CPU load Average in the last 15 minutes period')
cpmCPUMemoryCommitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryCommitted.setStatus('current')
if mibBuilder.loadTexts: cpmCPUMemoryCommitted.setDescription('The overall CPU wide system memory which is currently Committed.')
cpmCPUMemoryCommittedOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryCommittedOvrflw.setStatus('current')
if mibBuilder.loadTexts: cpmCPUMemoryCommittedOvrflw.setDescription('This object represents the upper 32-bit of cpmCPUMemoryCommitted. This object needs to be supported only when the value of cpmCPUMemoryCommitted exceeds 32-bit, otherwise this object value would be set to 0.')
cpmCPUMemoryHCCommitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 1, 1, 29), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUMemoryHCCommitted.setStatus('current')
if mibBuilder.loadTexts: cpmCPUMemoryHCCommitted.setDescription('The overall CPU wide system memory which is currently committed. This object is a 64-bit version of cpmCPUMemoryCommitted')
cpmCoreTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 2), )
if mibBuilder.loadTexts: cpmCoreTable.setStatus('current')
if mibBuilder.loadTexts: cpmCoreTable.setDescription('A table of per-Core statistics.')
cpmCoreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-PROCESS-MIB", "cpmCPUTotalIndex"), (0, "CISCO-PROCESS-MIB", "cpmCoreIndex"))
if mibBuilder.loadTexts: cpmCoreEntry.setStatus('current')
if mibBuilder.loadTexts: cpmCoreEntry.setDescription('Overall information about the Core load. Entries in this table could come and go as Cores go online or offline.')
cpmCoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cpmCoreIndex.setStatus('current')
if mibBuilder.loadTexts: cpmCoreIndex.setDescription('An index that uniquely represents a Core (or group of Cores) whose Core load information is reported by a row in this table. This index is assigned arbitrarily by the engine and is not saved over reboots.')
cpmCorePhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 2, 1, 2), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCorePhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: cpmCorePhysicalIndex.setDescription('The entCorePhysicalIndex of the physical entity for which the Core statistics in this entry are maintained. The physical entity can be a CPU chip, a group of CPUs, a CPU card etc. The exact type of this entity is described by its entPhysicalVendorType value. If the Core statistics in this entry correspond to more than one physical entity (or to no physical entity), or if the entPhysicalTable is not supported on the SNMP agent, the value of this object must be zero.')
cpmCore5sec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 2, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCore5sec.setStatus('current')
if mibBuilder.loadTexts: cpmCore5sec.setDescription('The overall Core busy percentage in the last 5 second period.')
cpmCore1min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 2, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCore1min.setStatus('current')
if mibBuilder.loadTexts: cpmCore1min.setDescription('The overall Core busy percentage in the last 1 minute period.')
cpmCore5min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 2, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCore5min.setStatus('current')
if mibBuilder.loadTexts: cpmCore5min.setDescription('The overall Core busy percentage in the last 5 minute period.')
cpmCoreLoadAvg1min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 2, 1, 6), CPULoadAverage()).setUnits('hundredths of processes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCoreLoadAvg1min.setStatus('current')
if mibBuilder.loadTexts: cpmCoreLoadAvg1min.setDescription('The overall Core load Average in the last 1 minute period')
cpmCoreLoadAvg5min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 2, 1, 7), CPULoadAverage()).setUnits('hundredths of processes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCoreLoadAvg5min.setStatus('current')
if mibBuilder.loadTexts: cpmCoreLoadAvg5min.setDescription('The overall Core load Average in the last 5 minutes period')
cpmCoreLoadAvg15min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 1, 2, 1, 8), CPULoadAverage()).setUnits('hundredths of processes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCoreLoadAvg15min.setStatus('current')
if mibBuilder.loadTexts: cpmCoreLoadAvg15min.setDescription('The overall Core load Average in the last 15 minutes period')
cpmProcessTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1), )
if mibBuilder.loadTexts: cpmProcessTable.setStatus('current')
if mibBuilder.loadTexts: cpmProcessTable.setDescription('A table of generic information on all active processes on this device.')
cpmProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-PROCESS-MIB", "cpmCPUTotalIndex"), (0, "CISCO-PROCESS-MIB", "cpmProcessPID"))
if mibBuilder.loadTexts: cpmProcessEntry.setStatus('current')
if mibBuilder.loadTexts: cpmProcessEntry.setDescription('Generic information about an active process on this device. Entries in this table come and go as processes are created and destroyed by the device.')
cpmProcessPID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessPID.setStatus('current')
if mibBuilder.loadTexts: cpmProcessPID.setDescription('This object contains the process ID. cpmTimeCreated should be checked against the last time it was polled, and if it has changed the PID has been reused and the entire entry should be polled again.')
cpmProcessName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessName.setStatus('current')
if mibBuilder.loadTexts: cpmProcessName.setDescription("The name associated with this process. If the name is longer than 32 characters, it will be truncated to the first 31 characters, and a `*' will be appended as the last character to imply this is a truncated process name.")
cpmProcessuSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1, 1, 4), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessuSecs.setStatus('deprecated')
if mibBuilder.loadTexts: cpmProcessuSecs.setDescription('Average elapsed CPU time in microseconds when the process was active. This object is deprecated by cpmProcessAverageUSecs.')
cpmProcessTimeCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessTimeCreated.setStatus('current')
if mibBuilder.loadTexts: cpmProcessTimeCreated.setDescription('The time when the process was created. The process ID and the time when the process was created, uniquely identifies a process.')
cpmProcessAverageUSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 1, 1, 6), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessAverageUSecs.setStatus('current')
if mibBuilder.loadTexts: cpmProcessAverageUSecs.setDescription('Average elapsed CPU time in microseconds when the process was active. This object deprecates the object cpmProcessuSecs.')
cpmProcessExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2), )
if mibBuilder.loadTexts: cpmProcessExtTable.setStatus('deprecated')
if mibBuilder.loadTexts: cpmProcessExtTable.setDescription('This table contains information that may or may not be available on all cisco devices. It contains additional objects for the more general cpmProcessTable. This object is deprecated by cpmProcessExtRevTable.')
cpmProcessExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1), )
cpmProcessEntry.registerAugmentions(("CISCO-PROCESS-MIB", "cpmProcessExtEntry"))
cpmProcessExtEntry.setIndexNames(*cpmProcessEntry.getIndexNames())
if mibBuilder.loadTexts: cpmProcessExtEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cpmProcessExtEntry.setDescription('An entry containing additional information for a particular process. This object is deprecated by cpmProcessExtRevEntry.')
cpmProcExtMemAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 1), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtMemAllocated.setStatus('deprecated')
if mibBuilder.loadTexts: cpmProcExtMemAllocated.setDescription('The sum of all the dynamically allocated memory that this process has received from the system. This includes memory that may have been returned. The sum of freed memory is provided by cpmProcExtMemFreed. This object is deprecated by cpmProcExtMemAllocatedRev.')
cpmProcExtMemFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 2), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtMemFreed.setStatus('deprecated')
if mibBuilder.loadTexts: cpmProcExtMemFreed.setDescription('The sum of all memory that this process has returned to the system. This object is deprecated by cpmProcExtMemFreedRev.')
cpmProcExtInvoked = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtInvoked.setStatus('deprecated')
if mibBuilder.loadTexts: cpmProcExtInvoked.setDescription('The number of times since cpmTimeCreated that the process has been invoked. This object is deprecated by cpmProcExtInvokedRev.')
cpmProcExtRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 4), Counter32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtRuntime.setStatus('deprecated')
if mibBuilder.loadTexts: cpmProcExtRuntime.setDescription('The amount of CPU time the process has used, in microseconds. This object is deprecated by cpmProcExtRuntimeRev.')
cpmProcExtUtil5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtUtil5Sec.setStatus('deprecated')
if mibBuilder.loadTexts: cpmProcExtUtil5Sec.setDescription('This object provides a general idea of how busy a process caused the processor to be over a 5 second period. It is determined as a weighted decaying average of the current idle time over the longest idle time. Note that this information should be used as an estimate only. This object is deprecated by cpmProcExtUtil5SecRev which has the changed range of value (0..100).')
cpmProcExtUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtUtil1Min.setStatus('deprecated')
if mibBuilder.loadTexts: cpmProcExtUtil1Min.setDescription('This object provides a general idea of how busy a process caused the processor to be over a 1 minute period. It is determined as a weighted decaying average of the current idle time over the longest idle time. Note that this information should be used as an estimate only. This object is deprecated by cpmProcExtUtil1MinRev which has the changed range of value (0..100).')
cpmProcExtUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtUtil5Min.setStatus('deprecated')
if mibBuilder.loadTexts: cpmProcExtUtil5Min.setDescription('This object provides a general idea of how busy a process caused the processor to be over a 5 minute period. It is determined as a weighted decaying average of the current idle time over the longest idle time. Note that this information should be used as an estimate only. This object is deprecated by cpmProcExtUtil5MinRev which has the changed range of value (0..100).')
cpmProcExtPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("high", 2), ("normal", 3), ("low", 4), ("notAssigned", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpmProcExtPriority.setStatus('deprecated')
if mibBuilder.loadTexts: cpmProcExtPriority.setDescription('The priority level at which the process is running. This object is deprecated by cpmProcExtPriorityRev.')
cpmProcessExtRevTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3), )
if mibBuilder.loadTexts: cpmProcessExtRevTable.setStatus('current')
if mibBuilder.loadTexts: cpmProcessExtRevTable.setDescription('This table contains information that may or may not be available on all cisco devices. It contains additional objects for the more general cpmProcessTable. This object deprecates cpmProcessExtTable.')
cpmProcessExtRevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-PROCESS-MIB", "cpmCPUTotalIndex"), (0, "CISCO-PROCESS-MIB", "cpmProcessPID"))
if mibBuilder.loadTexts: cpmProcessExtRevEntry.setStatus('current')
if mibBuilder.loadTexts: cpmProcessExtRevEntry.setDescription('An entry containing additional information for a particular process. This object deprecates cpmProcessExtEntry.')
cpmProcExtMemAllocatedRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 1), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtMemAllocatedRev.setStatus('current')
if mibBuilder.loadTexts: cpmProcExtMemAllocatedRev.setDescription('The sum of all the dynamically allocated memory that this process has received from the system. This includes memory that may have been returned. The sum of freed memory is provided by cpmProcExtMemFreedRev. This object deprecates cpmProcExtMemAllocated.')
cpmProcExtMemFreedRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 2), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtMemFreedRev.setStatus('current')
if mibBuilder.loadTexts: cpmProcExtMemFreedRev.setDescription('The sum of all memory that this process has returned to the system. This object deprecates cpmProcExtMemFreed.')
cpmProcExtInvokedRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtInvokedRev.setStatus('current')
if mibBuilder.loadTexts: cpmProcExtInvokedRev.setDescription('The number of times since cpmTimeCreated that the process has been invoked. This object deprecates cpmProcExtInvoked.')
cpmProcExtRuntimeRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 4), Counter32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtRuntimeRev.setStatus('current')
if mibBuilder.loadTexts: cpmProcExtRuntimeRev.setDescription('The amount of CPU time the process has used, in microseconds. This object deprecates cpmProcExtRuntime.')
cpmProcExtUtil5SecRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtUtil5SecRev.setStatus('current')
if mibBuilder.loadTexts: cpmProcExtUtil5SecRev.setDescription('This object provides a general idea of how busy a process caused the processor to be over a 5 second period. It is determined as a weighted decaying average of the current idle time over the longest idle time. Note that this information should be used as an estimate only. This object deprecates cpmProcExtUtil5Sec and increases the value range to (0..100).')
cpmProcExtUtil1MinRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtUtil1MinRev.setStatus('current')
if mibBuilder.loadTexts: cpmProcExtUtil1MinRev.setDescription('This object provides a general idea of how busy a process caused the processor to be over a 1 minute period. It is determined as a weighted decaying average of the current idle time over the longest idle time. Note that this information should be used as an estimate only. This object deprecates cpmProcExtUtil1Min and increases the value range to (0..100).')
cpmProcExtUtil5MinRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtUtil5MinRev.setStatus('current')
if mibBuilder.loadTexts: cpmProcExtUtil5MinRev.setDescription('This object provides a general idea of how busy a process caused the processor to be over a 5 minute period. It is determined as a weighted decaying average of the current idle time over the longest idle time. Note that this information should be used as an estimate only. This object deprecates cpmProcExtUtil5Min and increases the value range to (0..100).')
cpmProcExtPriorityRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("high", 2), ("normal", 3), ("low", 4), ("notAssigned", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtPriorityRev.setStatus('current')
if mibBuilder.loadTexts: cpmProcExtPriorityRev.setDescription('The priority level at which the process is running. This object deprecates cpmProcExtPriority.')
cpmProcessType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("posix", 2), ("ios", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessType.setStatus('current')
if mibBuilder.loadTexts: cpmProcessType.setDescription('This indicates the kind of process in context.')
cpmProcessRespawn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessRespawn.setStatus('current')
if mibBuilder.loadTexts: cpmProcessRespawn.setDescription('This indicates whether respawn of a process is enabled or not. If enabled the process in context repawns after it has crashed/stopped.')
cpmProcessRespawnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessRespawnCount.setStatus('current')
if mibBuilder.loadTexts: cpmProcessRespawnCount.setDescription('This indicates the number of times the process has respawned/restarted.')
cpmProcessRespawnAfterLastPatch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessRespawnAfterLastPatch.setStatus('current')
if mibBuilder.loadTexts: cpmProcessRespawnAfterLastPatch.setDescription('This indicates the number of times a process has restarted after the last patch is applied. This is to determine the stability of the last patch.')
cpmProcessMemoryCore = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("mainmem", 2), ("mainmemSharedmem", 3), ("mainmemText", 4), ("mainmemTextSharedmem", 5), ("sharedmem", 6), ("sparse", 7), ("off", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessMemoryCore.setStatus('current')
if mibBuilder.loadTexts: cpmProcessMemoryCore.setDescription('This indicates the part of process memory to be dumped when a process crashes. The process memory is used for debugging purposes to trace the root cause of the crash. sparse - Some operating systems support minimal dump of process core like register info, partial stack, partial memory pages especially for critical process to facilitate faster process restart.')
cpmProcessLastRestartUser = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessLastRestartUser.setStatus('current')
if mibBuilder.loadTexts: cpmProcessLastRestartUser.setDescription('This indicate the user that has last restarted the process or has taken running coredump of the process.')
cpmProcessTextSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 15), Unsigned32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessTextSegmentSize.setStatus('current')
if mibBuilder.loadTexts: cpmProcessTextSegmentSize.setDescription('This indicates the text memory of a process and all its shared objects.')
cpmProcessDataSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 16), Gauge32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessDataSegmentSize.setStatus('current')
if mibBuilder.loadTexts: cpmProcessDataSegmentSize.setDescription('This indicates the data segment of a process and all its shared objects.')
cpmProcessStackSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 17), Gauge32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessStackSize.setStatus('current')
if mibBuilder.loadTexts: cpmProcessStackSize.setDescription('This indicates the amount of stack memory used by the process.')
cpmProcessDynamicMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 18), Gauge32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessDynamicMemorySize.setStatus('current')
if mibBuilder.loadTexts: cpmProcessDynamicMemorySize.setDescription('This indicates the amount of dynamic memory being used by the process.')
cpmProcExtMemAllocatedRevOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 19), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtMemAllocatedRevOvrflw.setStatus('current')
if mibBuilder.loadTexts: cpmProcExtMemAllocatedRevOvrflw.setDescription('This object represents the upper 32-bit of cpmProcExtMemAllocatedRev. This object needs to be supported only when the value of cpmProcExtMemAllocatedRev exceeds 32-bit, otherwise this object value would be set to 0.')
cpmProcExtHCMemAllocatedRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 20), CounterBasedGauge64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtHCMemAllocatedRev.setStatus('current')
if mibBuilder.loadTexts: cpmProcExtHCMemAllocatedRev.setDescription('The sum of all the dynamically allocated memory that this process has received from the system. This includes memory that may have been returned. This object is a 64-bit version of cpmProcExtMemAllocatedRev.')
cpmProcExtMemFreedRevOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 21), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtMemFreedRevOvrflw.setStatus('current')
if mibBuilder.loadTexts: cpmProcExtMemFreedRevOvrflw.setDescription('This object represents the upper 32-bit of cpmProcExtMemFreedRev. This object needs to be supported only when the value of cpmProcExtMemFreedRev exceeds 32-bit,otherwise this object value would be set to 0.')
cpmProcExtHCMemFreedRev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 22), CounterBasedGauge64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcExtHCMemFreedRev.setStatus('current')
if mibBuilder.loadTexts: cpmProcExtHCMemFreedRev.setDescription('The sum of all memory that this process has returned to the system. This object is a 64-bit version of cpmProcExtMemFreedRev.')
cpmProcessTextSegmentSizeOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 23), Unsigned32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessTextSegmentSizeOvrflw.setStatus('current')
if mibBuilder.loadTexts: cpmProcessTextSegmentSizeOvrflw.setDescription('This object represents the upper 32-bit of cpmProcessTextSegmentSize. This object needs to be supported only when the value of cpmProcessTextSegmentSize exceeds 32-bit, otherwise this object value would be set to 0.')
cpmProcessHCTextSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 24), Unsigned64()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessHCTextSegmentSize.setStatus('current')
if mibBuilder.loadTexts: cpmProcessHCTextSegmentSize.setDescription('This indicates the text memory of a process and all its shared objects. This object is a 64-bit version of cpmProcessTextSegmentSize.')
cpmProcessDataSegmentSizeOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 25), Gauge32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessDataSegmentSizeOvrflw.setStatus('current')
if mibBuilder.loadTexts: cpmProcessDataSegmentSizeOvrflw.setDescription('This object represents the upper 32-bit of cpmProcessDataSegmentSize. This object needs to be supported only when the value of cpmProcessDataSegmentSize exceeds 32-bit, otherwise this object value would be set to 0.')
cpmProcessHCDataSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 26), CounterBasedGauge64()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessHCDataSegmentSize.setStatus('current')
if mibBuilder.loadTexts: cpmProcessHCDataSegmentSize.setDescription('This indicates the data segment of a process and all its shared objects.. This object is a 64-bit version of cpmProcessDataSegmentSize.')
cpmProcessStackSizeOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 27), Gauge32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessStackSizeOvrflw.setStatus('current')
if mibBuilder.loadTexts: cpmProcessStackSizeOvrflw.setDescription('This object represents the upper 32-bit of cpmProcessStackSize. This object needs to be supported only when the value of cpmProcessStackSize exceeds 32-bit, otherwise this object value would be set to 0.')
cpmProcessHCStackSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 28), CounterBasedGauge64()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessHCStackSize.setStatus('current')
if mibBuilder.loadTexts: cpmProcessHCStackSize.setDescription('This indicates the amount of stack memory used by the process. This object is a 64-bit version of cpmProcessStackSize.')
cpmProcessDynamicMemorySizeOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 29), Gauge32()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessDynamicMemorySizeOvrflw.setStatus('current')
if mibBuilder.loadTexts: cpmProcessDynamicMemorySizeOvrflw.setDescription('This object represents the upper 32-bit of cpmProcessDynamicMemorySize. This object needs to be supported only when the value of cpmProcessDynamicMemorySize exceeds 32-bit, otherwise this object value would be set to 0.')
cpmProcessHCDynamicMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 3, 1, 30), CounterBasedGauge64()).setUnits('kilo-bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmProcessHCDynamicMemorySize.setStatus('current')
if mibBuilder.loadTexts: cpmProcessHCDynamicMemorySize.setDescription('This indicates the amount of dynamic memory being used by the process. This object is a 64-bit version of cpmProcessDynamicMemorySize.')
cpmCPUThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 4), )
if mibBuilder.loadTexts: cpmCPUThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cpmCPUThresholdTable.setDescription('This table contains the information about the thresholding values for CPU , configured by the user.')
cpmCPUThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-PROCESS-MIB", "cpmCPUTotalIndex"), (0, "CISCO-PROCESS-MIB", "cpmCPUThresholdClass"))
if mibBuilder.loadTexts: cpmCPUThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cpmCPUThresholdEntry.setDescription('An entry containing information about CPU thresholding parameters. cpmCPUTotalIndex identifies the CPU (or group of CPUs) for which this configuration applies.')
cpmCPUThresholdClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("total", 1), ("interrupt", 2), ("process", 3))))
if mibBuilder.loadTexts: cpmCPUThresholdClass.setStatus('current')
if mibBuilder.loadTexts: cpmCPUThresholdClass.setDescription('Value of this object indicates the type of utilization, which is monitored. The total(1) indicates the total CPU utilization, interrupt(2) indicates the the CPU utilization in interrupt context and process(3) indicates the CPU utilization in the process level execution context.')
cpmCPURisingThresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpmCPURisingThresholdValue.setStatus('current')
if mibBuilder.loadTexts: cpmCPURisingThresholdValue.setDescription('The percentage rising threshold value configured by the user. The value indicates, if the percentage CPU utilization is equal to or above this value for cpmCPURisingThresholdPeriod duration then send a cpmCPURisingThreshold notification to the NMS.')
cpmCPURisingThresholdPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 4294967295)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpmCPURisingThresholdPeriod.setStatus('current')
if mibBuilder.loadTexts: cpmCPURisingThresholdPeriod.setDescription('This is an observation interval. The value of this object indicates that the CPU utilization should be above cpmCPURisingThresholdValue for this duration to send a cpmCPURisingThreshold notification to the NMS.')
cpmCPUFallingThresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpmCPUFallingThresholdValue.setStatus('current')
if mibBuilder.loadTexts: cpmCPUFallingThresholdValue.setDescription('The percentage falling threshold value configured by the user. The value indicates, if the percentage CPU utilization is equal to or below this value for cpmCPUFallingThresholdPeriod duration then send a cpmCPUFallingThreshold notification to the NMS.')
cpmCPUFallingThresholdPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 4294967295)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpmCPUFallingThresholdPeriod.setStatus('current')
if mibBuilder.loadTexts: cpmCPUFallingThresholdPeriod.setDescription('This is an observation interval. The value of this object indicates that CPU utilization should be below cpmCPUFallingThresholdValue for this duration to send a cpmCPURisingThreshold notification to the NMS.')
cpmCPUThresholdEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpmCPUThresholdEntryStatus.setStatus('current')
if mibBuilder.loadTexts: cpmCPUThresholdEntryStatus.setDescription('The status of this table entry.')
cpmCPUHistoryThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpmCPUHistoryThreshold.setStatus('current')
if mibBuilder.loadTexts: cpmCPUHistoryThreshold.setDescription('The user configured value of this object gives the minimum percent CPU utilization of a process in the last cpmCPUMonInterval duration required to be a member of history table. When this object is changed the new value will have effect in the next interval.')
cpmCPUHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpmCPUHistorySize.setStatus('current')
if mibBuilder.loadTexts: cpmCPUHistorySize.setDescription('A value configured by the user which specifies the number of reports in the history table. A report contains set of processes which crossed the cpmCPUHistoryThreshold in the last cpmCPUMonInterval along with the time at which this report is created, total and interrupt CPU utilizations. When this object is changed the new value will have effect in the next interval.')
cpmCPUHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 3), )
if mibBuilder.loadTexts: cpmCPUHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cpmCPUHistoryTable.setDescription('A list of CPU utilization history entries.')
cpmCPUHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 3, 1), ).setIndexNames((0, "CISCO-PROCESS-MIB", "cpmCPUTotalIndex"), (0, "CISCO-PROCESS-MIB", "cpmCPUHistoryReportId"))
if mibBuilder.loadTexts: cpmCPUHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cpmCPUHistoryEntry.setDescription('A historical sample of CPU utilization statistics. cpmCPUTotalIndex identifies the CPU (or group of CPUs) for which this history is collected. When the cpmCPUHistorySize is reached the least recent entry is lost.')
cpmCPUHistoryReportId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cpmCPUHistoryReportId.setStatus('current')
if mibBuilder.loadTexts: cpmCPUHistoryReportId.setDescription('All the entries which are created at the same time will have same value for this object. When the configured threshold for being a part of History table is reached then the qualified processes become the part of history table. The entries which became the part of history table at one instant will have the same value for this object. When this object reaches the max index value then it will wrap around.')
cpmCPUHistoryReportSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUHistoryReportSize.setStatus('current')
if mibBuilder.loadTexts: cpmCPUHistoryReportSize.setDescription('The number of process entries in a report. This object gives information about how many processes became a part of history table at one instant.')
cpmCPUHistoryTotalUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 3, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUHistoryTotalUtil.setStatus('current')
if mibBuilder.loadTexts: cpmCPUHistoryTotalUtil.setDescription('Total percentage of CPU utilization at cpmCPUHistoryCreated.')
cpmCPUHistoryInterruptUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 3, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUHistoryInterruptUtil.setStatus('current')
if mibBuilder.loadTexts: cpmCPUHistoryInterruptUtil.setDescription('Percentage of CPU utilization in the interrupt context at cpmCPUHistoryCreated.')
cpmCPUHistoryCreatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUHistoryCreatedTime.setStatus('current')
if mibBuilder.loadTexts: cpmCPUHistoryCreatedTime.setDescription('Time stamp with respect to sysUpTime indicating the time at which this report is created.')
cpmThreadTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1), )
if mibBuilder.loadTexts: cpmThreadTable.setStatus('current')
if mibBuilder.loadTexts: cpmThreadTable.setDescription('This table contains generic information about POSIX threads in the device.')
cpmThreadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-PROCESS-MIB", "cpmCPUTotalIndex"), (0, "CISCO-PROCESS-MIB", "cpmProcessPID"), (0, "CISCO-PROCESS-MIB", "cpmThreadID"))
if mibBuilder.loadTexts: cpmThreadEntry.setStatus('current')
if mibBuilder.loadTexts: cpmThreadEntry.setDescription('An entry containing the general statistics of a POSIX thread.')
cpmThreadID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cpmThreadID.setStatus('current')
if mibBuilder.loadTexts: cpmThreadID.setDescription('This object contains the thread ID. ThreadID is Unique per process.')
cpmThreadName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmThreadName.setStatus('current')
if mibBuilder.loadTexts: cpmThreadName.setDescription('This object represents the name of the thread. Thread names need not be unique. Hence statistics should be analyzed against thread ID.')
cpmThreadPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmThreadPriority.setStatus('current')
if mibBuilder.loadTexts: cpmThreadPriority.setDescription('This object indicates the priority of a POSIX thread. The higher the number, the higher the priority of the thread over other threads.')
cpmThreadState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("other", 1), ("dead", 2), ("running", 3), ("ready", 4), ("stopped", 5), ("send", 6), ("receive", 7), ("reply", 8), ("stack", 9), ("waitpage", 10), ("sigsuspend", 11), ("sigwaitinfo", 12), ("nanosleep", 13), ("mutex", 14), ("condvar", 15), ("join", 16), ("intr", 17), ("sem", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmThreadState.setStatus('current')
if mibBuilder.loadTexts: cpmThreadState.setDescription("This object indicates the current state of a thread. Running state means that the thread is actively consumig CPU. All the other states are just waiting states. The valid states are: other - Any other state apart from the listed ones. dead - Kernel is waiting to release the thread's resources. running - Actively running on a CPU. ready - Not running on a CPU, but is ready to run (one or more higher or equal priority threads are running). stopped - Suspended (SIGSTOP signal). send - Waiting for a server to receive a message. receive - Waiting for a client to send a message. reply - Waiting for a server to reply to a message. stack - Waiting for more stack to be allocated. waitpage - Waiting for process manager to resolve a fault on a page. sigsuspend - Suspended for a signal. sigwaitinfo - Waiting for a signal. nanosleep - Sleeping for a period of time. mutex - Waiting to acquire a mutex condvar - Waiting for a condition variable to be signalled. join - Waiting for the completion of another thread. intr - Waiting for an interrupt. sem - Waiting to acquire a semaphore.")
cpmThreadBlockingProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1, 5), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmThreadBlockingProcess.setStatus('current')
if mibBuilder.loadTexts: cpmThreadBlockingProcess.setDescription('This object identifies the process on which the current thread is blocked on. This points to the cpmProcessTable of the process on which the thread in context is blocked. This is valid only to threads which are either in send/reply states. For the rest of the threads it is returned as 0.0')
cpmThreadCpuUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1, 6), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmThreadCpuUtilization.setStatus('current')
if mibBuilder.loadTexts: cpmThreadCpuUtilization.setDescription('This object provides a general idea on how busy the thread in context caused the processor to be.')
cpmThreadStackSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1, 7), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmThreadStackSize.setStatus('current')
if mibBuilder.loadTexts: cpmThreadStackSize.setDescription('This object indicates the stack size allocated to the thread in context.')
cpmThreadStackSizeOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1, 8), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmThreadStackSizeOvrflw.setStatus('current')
if mibBuilder.loadTexts: cpmThreadStackSizeOvrflw.setDescription('This object represents the upper 32-bit of cpmThreadStackSize. This object needs to be supported only when the value of cpmThreadStackSize exceeds 32-bit, otherwise this object value would be set to 0.')
cpmThreadHCStackSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 3, 1, 1, 9), CounterBasedGauge64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmThreadHCStackSize.setStatus('current')
if mibBuilder.loadTexts: cpmThreadHCStackSize.setDescription('This object indicates the stack size allocated to the thread in context. This object is a 64-bit version of cpmThreadStackSize.')
cpmVirtualProcessTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1), )
if mibBuilder.loadTexts: cpmVirtualProcessTable.setStatus('current')
if mibBuilder.loadTexts: cpmVirtualProcessTable.setDescription('This table contains information about virtual processes in a virtual machine.')
cpmVirtualProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-PROCESS-MIB", "cpmCPUTotalIndex"), (0, "CISCO-PROCESS-MIB", "cpmProcessPID"), (0, "CISCO-PROCESS-MIB", "cpmVirtualProcessID"))
if mibBuilder.loadTexts: cpmVirtualProcessEntry.setStatus('current')
if mibBuilder.loadTexts: cpmVirtualProcessEntry.setDescription('An entry containing the general statistics of a virtual process in a virtual machine.')
cpmVirtualProcessID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cpmVirtualProcessID.setStatus('current')
if mibBuilder.loadTexts: cpmVirtualProcessID.setDescription('This object indicates the process ID of a virtual process. PID is unique only inside one address space. Virtual process PID should be considered along with Parent process cpmProcessPID.')
cpmVirtualProcessName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessName.setStatus('current')
if mibBuilder.loadTexts: cpmVirtualProcessName.setDescription("This object indicates the name of a virtual process. If the name is longer than 32 characters, it will be truncated to the first 31 characters, and a `*' will be appended as the last character to imply this is a truncated process name.")
cpmVirtualProcessUtil5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessUtil5Sec.setStatus('current')
if mibBuilder.loadTexts: cpmVirtualProcessUtil5Sec.setDescription('This indicates an estimated CPU utilization by a virtual process over the last 5 seconds.')
cpmVirtualProcessUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessUtil1Min.setStatus('current')
if mibBuilder.loadTexts: cpmVirtualProcessUtil1Min.setDescription('This indicates an estimated CPU utilization by a virtual process over the last one minute.')
cpmVirtualProcessUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessUtil5Min.setStatus('current')
if mibBuilder.loadTexts: cpmVirtualProcessUtil5Min.setDescription('This indicates an estimated CPU utilization by a virtual process over the last 5 minutes.')
cpmVirtualProcessMemAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 6), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessMemAllocated.setStatus('current')
if mibBuilder.loadTexts: cpmVirtualProcessMemAllocated.setDescription('This object indicates the memory allocated by the virtual process inside the address space of a process running on Native OS.')
cpmVirtualProcessMemFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 7), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessMemFreed.setStatus('current')
if mibBuilder.loadTexts: cpmVirtualProcessMemFreed.setDescription('This object indicates the memory freed by the virtual process inside the address space of a process running on Native OS.')
cpmVirtualProcessInvokeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessInvokeCount.setStatus('current')
if mibBuilder.loadTexts: cpmVirtualProcessInvokeCount.setDescription('The number of times a virtual process is invoked.')
cpmVirtualProcessRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 9), Counter32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessRuntime.setStatus('current')
if mibBuilder.loadTexts: cpmVirtualProcessRuntime.setDescription('The amount of CPU time a virtual process has used in microseconds.')
cpmVirtualProcessMemAllocatedOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 10), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessMemAllocatedOvrflw.setStatus('current')
if mibBuilder.loadTexts: cpmVirtualProcessMemAllocatedOvrflw.setDescription('This object represents the upper 32-bit of cpmVirtualProcessMemAllocated. This object needs to be supported only when the value of cpmVirtualProcessMemAllocated exceeds 32-bit, otherwise this object value would be set to 0.')
cpmVirtualProcessHCMemAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 11), CounterBasedGauge64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessHCMemAllocated.setStatus('current')
if mibBuilder.loadTexts: cpmVirtualProcessHCMemAllocated.setDescription('This object indicates the memory allocated by the virtual process inside the address space of a process running on Native OS. This object is a 64-bit version of cpmVirtualProcessMemAllocated.')
cpmVirtualProcessMemFreedOvrflw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 12), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessMemFreedOvrflw.setStatus('current')
if mibBuilder.loadTexts: cpmVirtualProcessMemFreedOvrflw.setDescription('This object represents the upper 32-bit of cpmVirtualProcessMemFreed. This object needs to be supported only when the value of cpmVirtualProcessMemFreed exceeds 32-bit, otherwise this object value would be set to 0.')
cpmVirtualProcessHCMemFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 4, 1, 1, 13), CounterBasedGauge64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmVirtualProcessHCMemFreed.setStatus('current')
if mibBuilder.loadTexts: cpmVirtualProcessHCMemFreed.setDescription('This object indicates the memory freed by the virtual process inside the address space of a process running on Native OS.This object is a 64-bit version of cpmVirtualProcessMemAllocated.')
cpmCPUProcessHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 4), )
if mibBuilder.loadTexts: cpmCPUProcessHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cpmCPUProcessHistoryTable.setDescription('A list of process history entries. This table contains CPU utilization of processes which crossed the cpmCPUHistoryThreshold.')
cpmCPUProcessHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 4, 1), ).setIndexNames((0, "CISCO-PROCESS-MIB", "cpmCPUTotalIndex"), (0, "CISCO-PROCESS-MIB", "cpmCPUHistoryReportId"), (0, "CISCO-PROCESS-MIB", "cpmCPUProcessHistoryIndex"))
if mibBuilder.loadTexts: cpmCPUProcessHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cpmCPUProcessHistoryEntry.setDescription('A historical sample of process utilization statistics. The entries in this table will have corresponding entires in the cpmCPUHistoryTable. The entries in this table get deleted when the entry associated with this entry in the cpmCPUHistoryTable gets deleted.')
cpmCPUProcessHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cpmCPUProcessHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cpmCPUProcessHistoryIndex.setDescription('An index that uniquely identifies an entry in the cmpCPUProcessHistory table among those in the same report. This index is between 1 to N, where N is the cpmCPUHistoryReportSize.')
cpmCPUHistoryProcId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUHistoryProcId.setStatus('current')
if mibBuilder.loadTexts: cpmCPUHistoryProcId.setDescription('The process Id associated with this entry.')
cpmCPUHistoryProcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUHistoryProcName.setStatus('current')
if mibBuilder.loadTexts: cpmCPUHistoryProcName.setDescription('The process name associated with this entry.')
cpmCPUHistoryProcCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 4, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUHistoryProcCreated.setStatus('current')
if mibBuilder.loadTexts: cpmCPUHistoryProcCreated.setDescription('The time when the process was created. The process ID and the time when the process was created, uniquely identifies a process.')
cpmCPUHistoryProcUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 109, 1, 2, 5, 4, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmCPUHistoryProcUtil.setStatus('current')
if mibBuilder.loadTexts: cpmCPUHistoryProcUtil.setDescription('The percentage CPU utilization of a process at cpmCPUHistoryCreatedTime.')
ciscoProcessMIBNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 2))
ciscoProcessMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 2, 0))
cpmCPURisingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 109, 2, 0, 1)).setObjects(("CISCO-PROCESS-MIB", "cpmCPURisingThresholdValue"), ("CISCO-PROCESS-MIB", "cpmCPUTotalMonIntervalValue"), ("CISCO-PROCESS-MIB", "cpmCPUInterruptMonIntervalValue"), ("CISCO-PROCESS-MIB", "cpmProcExtUtil5SecRev"), ("CISCO-PROCESS-MIB", "cpmProcessTimeCreated"))
if mibBuilder.loadTexts: cpmCPURisingThreshold.setStatus('current')
if mibBuilder.loadTexts: cpmCPURisingThreshold.setDescription('A cpmCPURisingThreshold notification is sent when configured rising CPU utilization threshold (cpmCPURisingThresholdValue) is reached and CPU utilization remained above the threshold for configured interval(cpmCPURisingThresholdPeriod) and such a notification is requested. The cpmProcExtUtil5SecRev and cpmProcessTimeCreated objects can be repeated multiple times in a notification indicating the top users of CPU.')
cpmCPUFallingThreshold = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 109, 2, 0, 2)).setObjects(("CISCO-PROCESS-MIB", "cpmCPUFallingThresholdValue"), ("CISCO-PROCESS-MIB", "cpmCPUTotalMonIntervalValue"), ("CISCO-PROCESS-MIB", "cpmCPUInterruptMonIntervalValue"))
if mibBuilder.loadTexts: cpmCPUFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: cpmCPUFallingThreshold.setDescription('A cpmCPUFallingThresholdTrap is sent when the configured falling threshold (cpmCPURisingThresholdValue) is reached and CPU utilization remained under threshold for configured interval (cpmCPUFallingThresholdPeriod) and such a notification is requested.')
ciscoProcessMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 3))
cpmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 1))
cpmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2))
cProcessMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 1, 1)).setObjects(("CISCO-PROCESS-MIB", "cpmCPUTotalGroup"), ("CISCO-PROCESS-MIB", "cpmProcessGroup"), ("CISCO-PROCESS-MIB", "cpmProcessExtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cProcessMIBCompliance = cProcessMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cProcessMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco Process MIB. This is deprecated and new compliance cProcessMIBComplianceRev is added.')
cProcessMIBComplianceRev = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 1, 2)).setObjects(("CISCO-PROCESS-MIB", "cpmCPUTotalGroupRev"), ("CISCO-PROCESS-MIB", "cpmProcessGroupRev"), ("CISCO-PROCESS-MIB", "cpmProcessExtGroupRev"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cProcessMIBComplianceRev = cProcessMIBComplianceRev.setStatus('deprecated')
if mibBuilder.loadTexts: cProcessMIBComplianceRev.setDescription('The compliance statement for entities which implement the Cisco Process MIB. This compliance module deprecates cProcessMIBCompliance.')
cProcessMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 1, 3)).setObjects(("CISCO-PROCESS-MIB", "cpmCPUThresholdGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalGroupRev1"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryGroup"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cProcessMIBComplianceRev1 = cProcessMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cProcessMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco Process MIB. This compliance module deprecates cProcessMIBComplianceRev.')
cProcessMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 1, 4)).setObjects(("CISCO-PROCESS-MIB", "cpmCPUTotalGroupRev1"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryGroup"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdNotificationGroup"), ("CISCO-PROCESS-MIB", "cpmProcessExtGroupRev"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdGroup"), ("CISCO-PROCESS-MIB", "cpmProcessGroupRev"), ("CISCO-PROCESS-MIB", "cpmCPUPosixMemoryGroup"), ("CISCO-PROCESS-MIB", "cpmPosixProcessGroup"), ("CISCO-PROCESS-MIB", "cpmThreadGroup"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cProcessMIBComplianceRev2 = cProcessMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cProcessMIBComplianceRev2.setDescription('The compliance statement for entities which implement the Cisco Process MIB. This compliance module deprecates cProcessMIBComplianceRev1.')
cProcessMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 1, 5)).setObjects(("CISCO-PROCESS-MIB", "cpmCPUTotalGroupRev1"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryGroup"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdNotificationGroup"), ("CISCO-PROCESS-MIB", "cpmProcessExtGroupRev"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdGroup"), ("CISCO-PROCESS-MIB", "cpmProcessGroupRev"), ("CISCO-PROCESS-MIB", "cpmCPUPosixMemoryGroup"), ("CISCO-PROCESS-MIB", "cpmPosixProcessGroup"), ("CISCO-PROCESS-MIB", "cpmThreadGroup"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalHCGroup"), ("CISCO-PROCESS-MIB", "cpmProcessExtRevOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmProcessExtRevHCGroup"), ("CISCO-PROCESS-MIB", "cpmThreadOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmThreadHCGroup"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessHCGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cProcessMIBComplianceRev3 = cProcessMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cProcessMIBComplianceRev3.setDescription('The compliance statement for entities which implement the Cisco Process MIB. This compliance module deprecates cProcessMIBComplianceRev2.')
cProcessMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 1, 6)).setObjects(("CISCO-PROCESS-MIB", "cpmCPUTotalGroupRev1"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryGroup"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdNotificationGroup"), ("CISCO-PROCESS-MIB", "cpmProcessExtGroupRev"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdGroup"), ("CISCO-PROCESS-MIB", "cpmProcessGroupRev"), ("CISCO-PROCESS-MIB", "cpmCPUPosixMemoryGroup"), ("CISCO-PROCESS-MIB", "cpmPosixProcessGroup"), ("CISCO-PROCESS-MIB", "cpmThreadGroup"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalHCGroup"), ("CISCO-PROCESS-MIB", "cpmProcessExtRevOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmProcessExtRevHCGroup"), ("CISCO-PROCESS-MIB", "cpmThreadOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmThreadHCGroup"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessHCGroup"), ("CISCO-PROCESS-MIB", "cpmCPULoadAvgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cProcessMIBComplianceRev4 = cProcessMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: cProcessMIBComplianceRev4.setDescription('The compliance statement for entities which implement the Cisco Process MIB. This compliance module deprecates cProcessMIBComplianceRev3.')
cProcessMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 1, 7)).setObjects(("CISCO-PROCESS-MIB", "cpmCPUTotalGroupRev1"), ("CISCO-PROCESS-MIB", "cpmCoreGroup"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryGroup"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdNotificationGroup"), ("CISCO-PROCESS-MIB", "cpmProcessExtGroupRev"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdGroup"), ("CISCO-PROCESS-MIB", "cpmProcessGroupRev"), ("CISCO-PROCESS-MIB", "cpmCPUPosixMemoryGroup"), ("CISCO-PROCESS-MIB", "cpmPosixProcessGroup"), ("CISCO-PROCESS-MIB", "cpmThreadGroup"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalHCGroup"), ("CISCO-PROCESS-MIB", "cpmProcessExtRevOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmProcessExtRevHCGroup"), ("CISCO-PROCESS-MIB", "cpmThreadOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmThreadHCGroup"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessOverflowGroup"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessHCGroup"), ("CISCO-PROCESS-MIB", "cpmCPULoadAvgGroup"), ("CISCO-PROCESS-MIB", "cpmCPUTotalMemoryCommitGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cProcessMIBComplianceRev5 = cProcessMIBComplianceRev5.setStatus('current')
if mibBuilder.loadTexts: cProcessMIBComplianceRev5.setDescription('The compliance statement for entities which implement the Cisco Process MIB. This compliance module deprecates cProcessMIBComplianceRev4')
cpmCPUTotalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 1)).setObjects(("CISCO-PROCESS-MIB", "cpmCPUTotalPhysicalIndex"), ("CISCO-PROCESS-MIB", "cpmCPUTotal5sec"), ("CISCO-PROCESS-MIB", "cpmCPUTotal1min"), ("CISCO-PROCESS-MIB", "cpmCPUTotal5min"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmCPUTotalGroup = cpmCPUTotalGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cpmCPUTotalGroup.setDescription('A collection of objects providing CPU load monitoring information. This group is mandatory for all cisco devices. This group is deprecated since the objects cpmCPUTotal5sec, cpmCPUTotal1min and cpmCPUTotal5min are deprecated. A new object cpmCPUTotalGroupRev is added in place of it.')
cpmProcessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 2)).setObjects(("CISCO-PROCESS-MIB", "cpmProcessPID"), ("CISCO-PROCESS-MIB", "cpmProcessName"), ("CISCO-PROCESS-MIB", "cpmProcessuSecs"), ("CISCO-PROCESS-MIB", "cpmProcessTimeCreated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmProcessGroup = cpmProcessGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cpmProcessGroup.setDescription('A collection of objects providing common process monitoring information. This group is mandatory for all cisco devices. This object is deprecated by cpmProcessGroupRev.')
cpmProcessExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 3)).setObjects(("CISCO-PROCESS-MIB", "cpmProcExtMemAllocated"), ("CISCO-PROCESS-MIB", "cpmProcExtMemFreed"), ("CISCO-PROCESS-MIB", "cpmProcExtInvoked"), ("CISCO-PROCESS-MIB", "cpmProcExtRuntime"), ("CISCO-PROCESS-MIB", "cpmProcExtUtil5Sec"), ("CISCO-PROCESS-MIB", "cpmProcExtUtil1Min"), ("CISCO-PROCESS-MIB", "cpmProcExtUtil5Min"), ("CISCO-PROCESS-MIB", "cpmProcExtPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmProcessExtGroup = cpmProcessExtGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cpmProcessExtGroup.setDescription('A collection of objects providing additional and more detailed process monitoring information. This group is mandatory for all cisco devices that have the internal capability to keep this information. This group is deprecated and new group cpmProcessExtGroupRev is added.')
cpmCPUTotalGroupRev = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 4)).setObjects(("CISCO-PROCESS-MIB", "cpmCPUTotalPhysicalIndex"), ("CISCO-PROCESS-MIB", "cpmCPUTotal5secRev"), ("CISCO-PROCESS-MIB", "cpmCPUTotal1minRev"), ("CISCO-PROCESS-MIB", "cpmCPUTotal5minRev"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmCPUTotalGroupRev = cpmCPUTotalGroupRev.setStatus('deprecated')
if mibBuilder.loadTexts: cpmCPUTotalGroupRev.setDescription('A collection of objects providing CPU load monitoring information. This group is mandatory for all cisco devices. This group deprecates cpmCPUTotalGroup. This group is deprecated since the object cpmCPUTotal5secRev is deprecated. A new object cpmCPUTotalGroupRev1 is added in place of it.')
cpmProcessExtGroupRev = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 5)).setObjects(("CISCO-PROCESS-MIB", "cpmProcExtMemAllocatedRev"), ("CISCO-PROCESS-MIB", "cpmProcExtMemFreedRev"), ("CISCO-PROCESS-MIB", "cpmProcExtInvokedRev"), ("CISCO-PROCESS-MIB", "cpmProcExtRuntimeRev"), ("CISCO-PROCESS-MIB", "cpmProcExtUtil5SecRev"), ("CISCO-PROCESS-MIB", "cpmProcExtUtil1MinRev"), ("CISCO-PROCESS-MIB", "cpmProcExtUtil5MinRev"), ("CISCO-PROCESS-MIB", "cpmProcExtPriorityRev"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmProcessExtGroupRev = cpmProcessExtGroupRev.setStatus('current')
if mibBuilder.loadTexts: cpmProcessExtGroupRev.setDescription('A collection of objects providing additional and more detailed process monitoring information. This group is mandatory for all cisco devices that have the internal capability to keep this information. This group is formed after deprecating cpmProcessExtGroup. cpmProcExtMemAllocatedRev, cpmProcExtMemFreedRev, cpmProcExtInvokedRev, cpmProcExtRuntimeRev, cpmProcExtUtil5SecRev, cpmProcExtUtil1MinRev and cpmProcExtUtil5MinRev are the new objects added.')
cpmProcessGroupRev = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 6)).setObjects(("CISCO-PROCESS-MIB", "cpmProcessPID"), ("CISCO-PROCESS-MIB", "cpmProcessName"), ("CISCO-PROCESS-MIB", "cpmProcessAverageUSecs"), ("CISCO-PROCESS-MIB", "cpmProcessTimeCreated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmProcessGroupRev = cpmProcessGroupRev.setStatus('current')
if mibBuilder.loadTexts: cpmProcessGroupRev.setDescription('A collection of objects providing common process monitoring information. This group is mandatory for all cisco devices. This object deprecates cpmProcessGroup.')
cpmCPUTotalGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 7)).setObjects(("CISCO-PROCESS-MIB", "cpmCPUTotalPhysicalIndex"), ("CISCO-PROCESS-MIB", "cpmCPUTotal1minRev"), ("CISCO-PROCESS-MIB", "cpmCPUTotal5minRev"), ("CISCO-PROCESS-MIB", "cpmCPUMonInterval"), ("CISCO-PROCESS-MIB", "cpmCPUTotalMonIntervalValue"), ("CISCO-PROCESS-MIB", "cpmCPUInterruptMonIntervalValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmCPUTotalGroupRev1 = cpmCPUTotalGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cpmCPUTotalGroupRev1.setDescription('A collection of objects providing CPU load monitoring information. This group is mandatory for all cisco devices. This group deprecates cpmCPUTotalGroupRev.')
cpmCPUThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 8)).setObjects(("CISCO-PROCESS-MIB", "cpmCPURisingThresholdValue"), ("CISCO-PROCESS-MIB", "cpmCPURisingThresholdPeriod"), ("CISCO-PROCESS-MIB", "cpmCPUFallingThresholdValue"), ("CISCO-PROCESS-MIB", "cpmCPUFallingThresholdPeriod"), ("CISCO-PROCESS-MIB", "cpmCPUThresholdEntryStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmCPUThresholdGroup = cpmCPUThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: cpmCPUThresholdGroup.setDescription('A collection of objects used for configuration of thresholding.')
cpmCPUHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 9)).setObjects(("CISCO-PROCESS-MIB", "cpmCPUHistorySize"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryThreshold"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryTotalUtil"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryInterruptUtil"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryCreatedTime"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryReportSize"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryProcId"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryProcName"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryProcCreated"), ("CISCO-PROCESS-MIB", "cpmCPUHistoryProcUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmCPUHistoryGroup = cpmCPUHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: cpmCPUHistoryGroup.setDescription('A collection of objects providing information about CPU utilization history.')
cpmCPUThresholdNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 10)).setObjects(("CISCO-PROCESS-MIB", "cpmCPURisingThreshold"), ("CISCO-PROCESS-MIB", "cpmCPUFallingThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmCPUThresholdNotificationGroup = cpmCPUThresholdNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cpmCPUThresholdNotificationGroup.setDescription('A group of notifications.')
cpmCPUPosixMemoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 11)).setObjects(("CISCO-PROCESS-MIB", "cpmCPUMemoryUsed"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryFree"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryKernelReserved"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryLowest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmCPUPosixMemoryGroup = cpmCPUPosixMemoryGroup.setStatus('current')
if mibBuilder.loadTexts: cpmCPUPosixMemoryGroup.setDescription('A collection of common objects providing CPU wide System memory information running POSIX compliant OS.')
cpmPosixProcessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 12)).setObjects(("CISCO-PROCESS-MIB", "cpmProcessType"), ("CISCO-PROCESS-MIB", "cpmProcessRespawn"), ("CISCO-PROCESS-MIB", "cpmProcessRespawnCount"), ("CISCO-PROCESS-MIB", "cpmProcessRespawnAfterLastPatch"), ("CISCO-PROCESS-MIB", "cpmProcessMemoryCore"), ("CISCO-PROCESS-MIB", "cpmProcessLastRestartUser"), ("CISCO-PROCESS-MIB", "cpmProcessTextSegmentSize"), ("CISCO-PROCESS-MIB", "cpmProcessDataSegmentSize"), ("CISCO-PROCESS-MIB", "cpmProcessStackSize"), ("CISCO-PROCESS-MIB", "cpmProcessDynamicMemorySize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmPosixProcessGroup = cpmPosixProcessGroup.setStatus('current')
if mibBuilder.loadTexts: cpmPosixProcessGroup.setDescription('A collection of common objects providing Process information on devices running POSIX compliant OS.')
cpmThreadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 13)).setObjects(("CISCO-PROCESS-MIB", "cpmThreadName"), ("CISCO-PROCESS-MIB", "cpmThreadPriority"), ("CISCO-PROCESS-MIB", "cpmThreadState"), ("CISCO-PROCESS-MIB", "cpmThreadBlockingProcess"), ("CISCO-PROCESS-MIB", "cpmThreadCpuUtilization"), ("CISCO-PROCESS-MIB", "cpmThreadStackSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmThreadGroup = cpmThreadGroup.setStatus('current')
if mibBuilder.loadTexts: cpmThreadGroup.setDescription('A collection of objects providing thread information information on devices running POSIX compliant OS.')
cpmVirtualProcessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 14)).setObjects(("CISCO-PROCESS-MIB", "cpmVirtualProcessName"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessUtil5Sec"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessUtil1Min"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessUtil5Min"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessMemAllocated"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessMemFreed"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessInvokeCount"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessRuntime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmVirtualProcessGroup = cpmVirtualProcessGroup.setStatus('current')
if mibBuilder.loadTexts: cpmVirtualProcessGroup.setDescription('A collection of objects providing virtual process information on devices that can run virtual machines.')
cpmCPUTotalOverflowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 15)).setObjects(("CISCO-PROCESS-MIB", "cpmCPUMemoryUsedOvrflw"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryFreeOvrflw"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryKernelReservedOvrflw"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryLowestOvrflw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmCPUTotalOverflowGroup = cpmCPUTotalOverflowGroup.setStatus('current')
if mibBuilder.loadTexts: cpmCPUTotalOverflowGroup.setDescription('A collection of Overflow (Ovrflw) objects providing CPU load monitoring information.')
cpmCPUTotalHCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 16)).setObjects(("CISCO-PROCESS-MIB", "cpmCPUMemoryHCUsed"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryHCFree"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryHCKernelReserved"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryHCLowest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmCPUTotalHCGroup = cpmCPUTotalHCGroup.setStatus('current')
if mibBuilder.loadTexts: cpmCPUTotalHCGroup.setDescription('A collection of High Capacity (HC) objects providing CPU load monitoring information.')
cpmProcessExtRevOverflowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 17)).setObjects(("CISCO-PROCESS-MIB", "cpmProcExtMemAllocatedRevOvrflw"), ("CISCO-PROCESS-MIB", "cpmProcExtMemFreedRevOvrflw"), ("CISCO-PROCESS-MIB", "cpmProcessTextSegmentSizeOvrflw"), ("CISCO-PROCESS-MIB", "cpmProcessDataSegmentSizeOvrflw"), ("CISCO-PROCESS-MIB", "cpmProcessStackSizeOvrflw"), ("CISCO-PROCESS-MIB", "cpmProcessDynamicMemorySizeOvrflw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmProcessExtRevOverflowGroup = cpmProcessExtRevOverflowGroup.setStatus('current')
if mibBuilder.loadTexts: cpmProcessExtRevOverflowGroup.setDescription('A collection of Overflow objects providing additional and more detailed process monitoring information.')
cpmProcessExtRevHCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 18)).setObjects(("CISCO-PROCESS-MIB", "cpmProcExtHCMemAllocatedRev"), ("CISCO-PROCESS-MIB", "cpmProcExtHCMemFreedRev"), ("CISCO-PROCESS-MIB", "cpmProcessHCTextSegmentSize"), ("CISCO-PROCESS-MIB", "cpmProcessHCDataSegmentSize"), ("CISCO-PROCESS-MIB", "cpmProcessHCStackSize"), ("CISCO-PROCESS-MIB", "cpmProcessHCDynamicMemorySize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmProcessExtRevHCGroup = cpmProcessExtRevHCGroup.setStatus('current')
if mibBuilder.loadTexts: cpmProcessExtRevHCGroup.setDescription('A collection of High Capacity objects providing additional and more detailed process monitoring information.')
cpmThreadOverflowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 19)).setObjects(("CISCO-PROCESS-MIB", "cpmThreadStackSizeOvrflw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmThreadOverflowGroup = cpmThreadOverflowGroup.setStatus('current')
if mibBuilder.loadTexts: cpmThreadOverflowGroup.setDescription('A collection of Overflow objects providing thread information on devices running POSIX compliant OS.')
cpmThreadHCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 20)).setObjects(("CISCO-PROCESS-MIB", "cpmThreadHCStackSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmThreadHCGroup = cpmThreadHCGroup.setStatus('current')
if mibBuilder.loadTexts: cpmThreadHCGroup.setDescription('A collection of High Capacity objects providing thread information on devices running POSIX compliant OS.')
cpmVirtualProcessOverflowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 21)).setObjects(("CISCO-PROCESS-MIB", "cpmVirtualProcessMemAllocatedOvrflw"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessMemFreedOvrflw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmVirtualProcessOverflowGroup = cpmVirtualProcessOverflowGroup.setStatus('current')
if mibBuilder.loadTexts: cpmVirtualProcessOverflowGroup.setDescription('A collection of Overflow objects providing virtual process information on devices that can run virtual machines.')
cpmVirtualProcessHCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 22)).setObjects(("CISCO-PROCESS-MIB", "cpmVirtualProcessHCMemAllocated"), ("CISCO-PROCESS-MIB", "cpmVirtualProcessHCMemFreed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmVirtualProcessHCGroup = cpmVirtualProcessHCGroup.setStatus('current')
if mibBuilder.loadTexts: cpmVirtualProcessHCGroup.setDescription('A collection of High Capacity objects providing virtual process information on devices that can run virtual machines.')
cpmCPULoadAvgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 23)).setObjects(("CISCO-PROCESS-MIB", "cpmCPULoadAvg1min"), ("CISCO-PROCESS-MIB", "cpmCPULoadAvg5min"), ("CISCO-PROCESS-MIB", "cpmCPULoadAvg15min"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmCPULoadAvgGroup = cpmCPULoadAvgGroup.setStatus('current')
if mibBuilder.loadTexts: cpmCPULoadAvgGroup.setDescription('A collection of objects providing CPU load average information')
cpmCPUTotalMemoryCommitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 24)).setObjects(("CISCO-PROCESS-MIB", "cpmCPUMemoryCommitted"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryCommittedOvrflw"), ("CISCO-PROCESS-MIB", "cpmCPUMemoryHCCommitted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmCPUTotalMemoryCommitGroup = cpmCPUTotalMemoryCommitGroup.setStatus('current')
if mibBuilder.loadTexts: cpmCPUTotalMemoryCommitGroup.setDescription('A collection of objects providing CPU system Committed memory information.')
cpmCoreGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 109, 3, 2, 25)).setObjects(("CISCO-PROCESS-MIB", "cpmCorePhysicalIndex"), ("CISCO-PROCESS-MIB", "cpmCore5sec"), ("CISCO-PROCESS-MIB", "cpmCore1min"), ("CISCO-PROCESS-MIB", "cpmCore5min"), ("CISCO-PROCESS-MIB", "cpmCoreLoadAvg1min"), ("CISCO-PROCESS-MIB", "cpmCoreLoadAvg5min"), ("CISCO-PROCESS-MIB", "cpmCoreLoadAvg15min"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpmCoreGroup = cpmCoreGroup.setStatus('current')
if mibBuilder.loadTexts: cpmCoreGroup.setDescription('A collection of objects providing per-Core CPU utilization.')
mibBuilder.exportSymbols("CISCO-PROCESS-MIB", cpmProcessExtRevTable=cpmProcessExtRevTable, cpmProcessHCDataSegmentSize=cpmProcessHCDataSegmentSize, cpmCore1min=cpmCore1min, cpmCore5sec=cpmCore5sec, cpmProcessRespawnCount=cpmProcessRespawnCount, cpmProcExtMemAllocatedRev=cpmProcExtMemAllocatedRev, cpmCPURisingThreshold=cpmCPURisingThreshold, cpmVirtualProcessMemFreedOvrflw=cpmVirtualProcessMemFreedOvrflw, cpmProcessType=cpmProcessType, cpmCPUHistoryTotalUtil=cpmCPUHistoryTotalUtil, cpmCPUTotal5sec=cpmCPUTotal5sec, cpmProcExtRuntime=cpmProcExtRuntime, cpmCPUThresholdClass=cpmCPUThresholdClass, cpmCPUPosixMemoryGroup=cpmCPUPosixMemoryGroup, cpmCPUProcessHistoryTable=cpmCPUProcessHistoryTable, CPULoadAverage=CPULoadAverage, ciscoProcessMIB=ciscoProcessMIB, cProcessMIBComplianceRev1=cProcessMIBComplianceRev1, cpmCPUThresholdTable=cpmCPUThresholdTable, cpmProcessExtTable=cpmProcessExtTable, cpmVirtualProcessName=cpmVirtualProcessName, cpmCorePhysicalIndex=cpmCorePhysicalIndex, cpmProcExtUtil5Min=cpmProcExtUtil5Min, cpmProcExtMemFreedRev=cpmProcExtMemFreedRev, cpmCPUTotalPhysicalIndex=cpmCPUTotalPhysicalIndex, cpmProcExtPriorityRev=cpmProcExtPriorityRev, cpmCPUTotalHCGroup=cpmCPUTotalHCGroup, cpmVirtualProcessGroup=cpmVirtualProcessGroup, cpmThread=cpmThread, cpmCPUMemoryKernelReserved=cpmCPUMemoryKernelReserved, cpmCPUHistorySize=cpmCPUHistorySize, cpmCPUMemoryHCFree=cpmCPUMemoryHCFree, cpmCPUInterruptMonIntervalValue=cpmCPUInterruptMonIntervalValue, cpmCPUHistoryInterruptUtil=cpmCPUHistoryInterruptUtil, cpmCPUHistoryCreatedTime=cpmCPUHistoryCreatedTime, cpmCPULoadAvg1min=cpmCPULoadAvg1min, cpmCPULoadAvgGroup=cpmCPULoadAvgGroup, cpmThreadState=cpmThreadState, cpmProcessExtEntry=cpmProcessExtEntry, cpmCPURisingThresholdPeriod=cpmCPURisingThresholdPeriod, cpmGroups=cpmGroups, cpmProcessHCStackSize=cpmProcessHCStackSize, cpmProcessPID=cpmProcessPID, cpmProcExtMemAllocated=cpmProcExtMemAllocated, cpmCPURisingThresholdValue=cpmCPURisingThresholdValue, ciscoProcessMIBNotifPrefix=ciscoProcessMIBNotifPrefix, cpmCPUTotalTable=cpmCPUTotalTable, ciscoProcessMIBObjects=ciscoProcessMIBObjects, cpmCPUHistoryProcUtil=cpmCPUHistoryProcUtil, cpmProcessTextSegmentSize=cpmProcessTextSegmentSize, PYSNMP_MODULE_ID=ciscoProcessMIB, cpmCPUFallingThresholdPeriod=cpmCPUFallingThresholdPeriod, cpmCPUTotalGroup=cpmCPUTotalGroup, cpmProcessGroup=cpmProcessGroup, cpmVirtualProcessHCGroup=cpmVirtualProcessHCGroup, cpmThreadBlockingProcess=cpmThreadBlockingProcess, cpmCPUHistoryProcCreated=cpmCPUHistoryProcCreated, cpmThreadHCGroup=cpmThreadHCGroup, cpmCPULoadAvg15min=cpmCPULoadAvg15min, cpmThreadOverflowGroup=cpmThreadOverflowGroup, cpmProcessuSecs=cpmProcessuSecs, cpmProcessName=cpmProcessName, cpmCPUMemoryLowestOvrflw=cpmCPUMemoryLowestOvrflw, cpmCPUTotalOverflowGroup=cpmCPUTotalOverflowGroup, cpmCPUTotal1minRev=cpmCPUTotal1minRev, cpmProcessGroupRev=cpmProcessGroupRev, cpmThreadStackSizeOvrflw=cpmThreadStackSizeOvrflw, cpmProcExtHCMemFreedRev=cpmProcExtHCMemFreedRev, cpmThreadTable=cpmThreadTable, cpmCPUTotalGroupRev1=cpmCPUTotalGroupRev1, cpmProcessExtRevHCGroup=cpmProcessExtRevHCGroup, cpmProcExtUtil5MinRev=cpmProcExtUtil5MinRev, cpmVirtualProcessHCMemAllocated=cpmVirtualProcessHCMemAllocated, cpmProcessExtGroupRev=cpmProcessExtGroupRev, cpmVirtualProcessUtil1Min=cpmVirtualProcessUtil1Min, cpmCoreLoadAvg15min=cpmCoreLoadAvg15min, cpmProcessExtGroup=cpmProcessExtGroup, cpmCPUTotalMemoryCommitGroup=cpmCPUTotalMemoryCommitGroup, cpmThreadStackSize=cpmThreadStackSize, cpmVirtualProcessMemFreed=cpmVirtualProcessMemFreed, cProcessMIBComplianceRev4=cProcessMIBComplianceRev4, cpmCPUTotal5minRev=cpmCPUTotal5minRev, cpmCPUTotalMonIntervalValue=cpmCPUTotalMonIntervalValue, cpmCPUHistoryProcId=cpmCPUHistoryProcId, cpmProcessDataSegmentSize=cpmProcessDataSegmentSize, cpmProcExtPriority=cpmProcExtPriority, cpmCoreTable=cpmCoreTable, cpmProcessAverageUSecs=cpmProcessAverageUSecs, cpmVirtualProcessUtil5Sec=cpmVirtualProcessUtil5Sec, cpmCPUMemoryUsedOvrflw=cpmCPUMemoryUsedOvrflw, cpmProcExtRuntimeRev=cpmProcExtRuntimeRev, cpmThreadGroup=cpmThreadGroup, cpmProcessMemoryCore=cpmProcessMemoryCore, cpmCPULoadAvg5min=cpmCPULoadAvg5min, cpmProcessStackSizeOvrflw=cpmProcessStackSizeOvrflw, cpmCoreGroup=cpmCoreGroup, cpmCore5min=cpmCore5min, cpmCPUTotalIndex=cpmCPUTotalIndex, cpmProcExtMemAllocatedRevOvrflw=cpmProcExtMemAllocatedRevOvrflw, cpmCPUThresholdNotificationGroup=cpmCPUThresholdNotificationGroup, cpmCPUTotalEntry=cpmCPUTotalEntry, cpmCPUMemoryKernelReservedOvrflw=cpmCPUMemoryKernelReservedOvrflw, cpmCPUMonInterval=cpmCPUMonInterval, cpmProcessDynamicMemorySize=cpmProcessDynamicMemorySize, cpmCoreIndex=cpmCoreIndex, cpmVirtualProcessHCMemFreed=cpmVirtualProcessHCMemFreed, cpmCPUMemoryUsed=cpmCPUMemoryUsed, ciscoProcessMIBConformance=ciscoProcessMIBConformance, cpmCPUMemoryHCUsed=cpmCPUMemoryHCUsed, cpmProcessRespawnAfterLastPatch=cpmProcessRespawnAfterLastPatch, cpmProcessHCTextSegmentSize=cpmProcessHCTextSegmentSize, cpmCPUHistoryGroup=cpmCPUHistoryGroup, cpmCPUMemoryHCKernelReserved=cpmCPUMemoryHCKernelReserved, cpmCoreEntry=cpmCoreEntry, cpmCoreLoadAvg5min=cpmCoreLoadAvg5min, cProcessMIBComplianceRev3=cProcessMIBComplianceRev3, cpmCPUHistoryProcName=cpmCPUHistoryProcName, cpmCPU=cpmCPU, cpmThreadID=cpmThreadID, cpmThreadName=cpmThreadName, ciscoProcessMIBNotifs=ciscoProcessMIBNotifs, cpmCPUMemoryLowest=cpmCPUMemoryLowest, cpmCPUHistory=cpmCPUHistory, cpmProcessLastRestartUser=cpmProcessLastRestartUser, cpmCoreLoadAvg1min=cpmCoreLoadAvg1min, cpmCPUHistoryReportId=cpmCPUHistoryReportId, cpmProcessExtRevEntry=cpmProcessExtRevEntry, cpmProcExtMemFreed=cpmProcExtMemFreed, cpmCPUThresholdGroup=cpmCPUThresholdGroup, cpmCPUHistoryReportSize=cpmCPUHistoryReportSize, cpmCPUHistoryTable=cpmCPUHistoryTable, cpmProcessStackSize=cpmProcessStackSize, cpmCPUMemoryCommittedOvrflw=cpmCPUMemoryCommittedOvrflw, cpmCPUHistoryEntry=cpmCPUHistoryEntry, cpmProcessTimeCreated=cpmProcessTimeCreated, cpmProcessEntry=cpmProcessEntry, cpmPosixProcessGroup=cpmPosixProcessGroup, cpmProcessHCDynamicMemorySize=cpmProcessHCDynamicMemorySize, cpmCompliances=cpmCompliances, cpmCPUFallingThreshold=cpmCPUFallingThreshold, cpmCPUMemoryHCLowest=cpmCPUMemoryHCLowest, cpmCPUFallingThresholdValue=cpmCPUFallingThresholdValue, cpmVirtualProcessInvokeCount=cpmVirtualProcessInvokeCount, cpmVirtualProcessMemAllocatedOvrflw=cpmVirtualProcessMemAllocatedOvrflw, cpmCPUTotalGroupRev=cpmCPUTotalGroupRev, cpmVirtualProcessRuntime=cpmVirtualProcessRuntime, cpmVirtualProcessEntry=cpmVirtualProcessEntry, cpmThreadEntry=cpmThreadEntry, cpmVirtualProcessMemAllocated=cpmVirtualProcessMemAllocated, cpmProcessTextSegmentSizeOvrflw=cpmProcessTextSegmentSizeOvrflw, cpmCPUMemoryFreeOvrflw=cpmCPUMemoryFreeOvrflw, cpmCPUMemoryHCCommitted=cpmCPUMemoryHCCommitted, cpmVirtualProcessUtil5Min=cpmVirtualProcessUtil5Min, cpmCPUMemoryCommitted=cpmCPUMemoryCommitted, cpmCPUThresholdEntryStatus=cpmCPUThresholdEntryStatus, cpmProcessRespawn=cpmProcessRespawn, cpmProcessDynamicMemorySizeOvrflw=cpmProcessDynamicMemorySizeOvrflw, cpmCPUMemoryFree=cpmCPUMemoryFree, cpmCPUProcessHistoryIndex=cpmCPUProcessHistoryIndex, cpmCPUProcessHistoryEntry=cpmCPUProcessHistoryEntry, cpmCPUThresholdEntry=cpmCPUThresholdEntry, cpmProcExtInvoked=cpmProcExtInvoked, cpmCPUHistoryThreshold=cpmCPUHistoryThreshold, cpmProcExtInvokedRev=cpmProcExtInvokedRev, cpmVirtualProcess=cpmVirtualProcess, cpmThreadPriority=cpmThreadPriority, cProcessMIBCompliance=cProcessMIBCompliance, cpmProcExtUtil1Min=cpmProcExtUtil1Min, cpmProcExtUtil1MinRev=cpmProcExtUtil1MinRev, cpmVirtualProcessOverflowGroup=cpmVirtualProcessOverflowGroup, cpmProcExtUtil5SecRev=cpmProcExtUtil5SecRev, cpmCPUTotal5secRev=cpmCPUTotal5secRev, cProcessMIBComplianceRev5=cProcessMIBComplianceRev5, cpmProcessDataSegmentSizeOvrflw=cpmProcessDataSegmentSizeOvrflw, cpmProcess=cpmProcess, cpmThreadCpuUtilization=cpmThreadCpuUtilization, cpmProcExtHCMemAllocatedRev=cpmProcExtHCMemAllocatedRev, cProcessMIBComplianceRev2=cProcessMIBComplianceRev2, cpmCPUTotal1min=cpmCPUTotal1min, cpmProcessTable=cpmProcessTable, cpmProcExtUtil5Sec=cpmProcExtUtil5Sec, cpmThreadHCStackSize=cpmThreadHCStackSize, cpmProcessExtRevOverflowGroup=cpmProcessExtRevOverflowGroup, cpmCPUTotal5min=cpmCPUTotal5min, cpmVirtualProcessTable=cpmVirtualProcessTable, cProcessMIBComplianceRev=cProcessMIBComplianceRev, cpmVirtualProcessID=cpmVirtualProcessID, cpmProcExtMemFreedRevOvrflw=cpmProcExtMemFreedRevOvrflw)
