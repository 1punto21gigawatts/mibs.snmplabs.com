#
# PySNMP MIB module VC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:33:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
neStatistics, = mibBuilder.importSymbols("NE-STAT-MIB", "neStatistics")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Counter64, Counter32, ObjectIdentity, IpAddress, iso, Unsigned32, Bits, TimeTicks, Integer32, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "Counter32", "ObjectIdentity", "IpAddress", "iso", "Unsigned32", "Bits", "TimeTicks", "Integer32", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
vcStatMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2603, 1, 3))
vcStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2603, 1, 3, 1))
vcStatTable = MibTable((1, 3, 6, 1, 4, 1, 2603, 1, 3, 1, 1), )
if mibBuilder.loadTexts: vcStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: vcStatTable.setDescription('A list of vc entries.')
vcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2603, 1, 3, 1, 1, 1), ).setIndexNames((0, "VC-MIB", "vcPipePosition"), (0, "VC-MIB", "vcPipeInstancePosition"), (0, "VC-MIB", "vcPosition"), (0, "VC-MIB", "vcInstancePosition"))
if mibBuilder.loadTexts: vcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vcEntry.setDescription('A vc entry contains statistical objects for one vc.')
vcPipePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2603, 1, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPipePosition.setStatus('mandatory')
if mibBuilder.loadTexts: vcPipePosition.setDescription('Position of pipe in table')
vcPipeInstancePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2603, 1, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPipeInstancePosition.setStatus('mandatory')
if mibBuilder.loadTexts: vcPipeInstancePosition.setDescription('Position of pipe instance in group')
vcPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2603, 1, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPosition.setStatus('mandatory')
if mibBuilder.loadTexts: vcPosition.setDescription('Position of VC in pipe')
vcInstancePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2603, 1, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcInstancePosition.setStatus('mandatory')
if mibBuilder.loadTexts: vcInstancePosition.setDescription('Position of VC instance in group')
vcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2603, 1, 3, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcName.setStatus('mandatory')
if mibBuilder.loadTexts: vcName.setDescription('vc name')
vcByteCountIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2603, 1, 3, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcByteCountIn.setStatus('mandatory')
if mibBuilder.loadTexts: vcByteCountIn.setDescription('Bytes in per vc')
vcByteCountOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2603, 1, 3, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcByteCountOut.setStatus('mandatory')
if mibBuilder.loadTexts: vcByteCountOut.setDescription('Bytes out per vc')
vcByteCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2603, 1, 3, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcByteCountTotal.setStatus('mandatory')
if mibBuilder.loadTexts: vcByteCountTotal.setDescription('Total Bytes per vc')
vcLiveConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2603, 1, 3, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcLiveConnections.setStatus('mandatory')
if mibBuilder.loadTexts: vcLiveConnections.setDescription('Live Connections per vc')
vcNewConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2603, 1, 3, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcNewConnections.setStatus('mandatory')
if mibBuilder.loadTexts: vcNewConnections.setDescription('New Connections per vc')
vcPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2603, 1, 3, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPacketsIn.setStatus('mandatory')
if mibBuilder.loadTexts: vcPacketsIn.setDescription('Packets in per vc')
vcPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2603, 1, 3, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPacketsOut.setStatus('mandatory')
if mibBuilder.loadTexts: vcPacketsOut.setDescription('Packets out per vc')
vcPacketsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2603, 1, 3, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcPacketsTotal.setStatus('mandatory')
if mibBuilder.loadTexts: vcPacketsTotal.setDescription('Total Packets per vc')
mibBuilder.exportSymbols("VC-MIB", vcPosition=vcPosition, vcPipeInstancePosition=vcPipeInstancePosition, vcLiveConnections=vcLiveConnections, vcStatTable=vcStatTable, vcStat=vcStat, vcPipePosition=vcPipePosition, vcNewConnections=vcNewConnections, vcStatMIB=vcStatMIB, vcByteCountTotal=vcByteCountTotal, vcName=vcName, vcPacketsTotal=vcPacketsTotal, vcPacketsIn=vcPacketsIn, vcEntry=vcEntry, vcByteCountOut=vcByteCountOut, vcInstancePosition=vcInstancePosition, vcByteCountIn=vcByteCountIn, vcPacketsOut=vcPacketsOut)
