#
# PySNMP MIB module Nortel-Magellan-Passport-TdmaIwfMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-TdmaIwfMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:28:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
Unsigned32, Integer32, DisplayString, Gauge32, StorageType, Counter32, RowPointer, RowStatus = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "Unsigned32", "Integer32", "DisplayString", "Gauge32", "StorageType", "Counter32", "RowPointer", "RowStatus")
NonReplicated, AsciiString, FixedPoint2, Link = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "NonReplicated", "AsciiString", "FixedPoint2", "Link")
components, passportMIBs = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "components", "passportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, TimeTicks, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, NotificationType, Bits, Counter32, Counter64, ModuleIdentity, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "NotificationType", "Bits", "Counter32", "Counter64", "ModuleIdentity", "iso", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tdmaIwfMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 140))
tdmaCs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135))
tdmaCsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 1), )
if mibBuilder.loadTexts: tdmaCsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsRowStatusTable.setDescription('This entry controls the addition and deletion of tdmaCs components.')
tdmaCsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"))
if mibBuilder.loadTexts: tdmaCsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsRowStatusEntry.setDescription('A single entry in the table represents a single tdmaCs component.')
tdmaCsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsRowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaCs components. These components can be added and deleted.')
tdmaCsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaCsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsStorageType.setDescription('This variable represents the storage type value for the tdmaCs tables.')
tdmaCsCsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: tdmaCsCsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsCsIndex.setDescription('This variable represents the index for the tdmaCs tables.')
tdmaCsServProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 100), )
if mibBuilder.loadTexts: tdmaCsServProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsServProvTable.setDescription('This group contains all the necessary timers for call setup and call clearing scenarios on the IWF.')
tdmaCsServProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"))
if mibBuilder.loadTexts: tdmaCsServProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsServProvEntry.setDescription('An entry in the tdmaCsServProvTable.')
tdmaCsTIwf1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 100, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsTIwf1.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsTIwf1.setDescription('This is an internal timer to the call server of the IWF and is used during call setup for ensuring the MIT protocol stack and the NIT modem for a new call have been allocated and initialized.')
tdmaCsTIwf2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 100, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsTIwf2.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsTIwf2.setDescription('This is an internal timer to the call server of the IWF and is used during call clearing for ensuring the MIT protocol stack and NIT modem for a call have been deallocated correctly.')
tdmaCsT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 100, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsT303.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsT303.setDescription('This timer is a call setup timer and is used for ensuring a CallProceeding message is received for a Setup message that has been sent by the IWF to the MTX.')
tdmaCsT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 100, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsT305.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsT305.setDescription('This timer is a call clearing timer and is used for ensuring a Release message is received for a Disconnect message the IWF has sent to the MTX.')
tdmaCsT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 100, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsT308.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsT308.setDescription('This timer is a call clearing timer and is used for ensuring a ReleaseComplete message is received for the Release message the IWF has sent to the MTX.')
tdmaCsT313 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 100, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsT313.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsT313.setDescription('This is a call setup timer and is used for ensuring a ConnectAck message is received in response for the Connect message the IWF has sent to the MTX.')
tdmaCsT999 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 100, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsT999.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsT999.setDescription('This timer is used during a mobile termination call setup and is used for ensuring the Setup message is received from the MTX.')
tdmaCsSupportedTechnology = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 100, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("tdmaOnly", 0), ("cdmaOnly", 1), ("tdmaAndCdma", 2))).clone('tdmaOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsSupportedTechnology.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsSupportedTechnology.setDescription('This attribute specifies the wireless technology that is supported for data calls on this IWF.')
tdmaCsSupportedService = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 100, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("asyncDataOnly", 0), ("g3FaxOnly", 1), ("analogFaxOnly", 2), ("packetOnly", 3), ("asyncDataAndG3Fax", 4), ("asyncDataAndAnalogFax", 5), ("asyncDataAndPacket", 6), ("asyncDataG3FaxAndPacket", 7), ("asyncDataAFaxAndPacket", 8))).clone('asyncDataOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsSupportedService.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsSupportedService.setDescription('This attribute specifies the type(s) of data calls this IWF supports.')
tdmaCsMiscProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 101), )
if mibBuilder.loadTexts: tdmaCsMiscProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsMiscProvTable.setDescription('This group contains general provisioning data for the TdmaIwfCallServer that does not fit within other provisioning groups.')
tdmaCsMiscProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 101, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"))
if mibBuilder.loadTexts: tdmaCsMiscProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsMiscProvEntry.setDescription('An entry in the tdmaCsMiscProvTable.')
tdmaCsCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 101, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsCommentText.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsCommentText.setDescription('Use of this attribute is at the discretion of the system administrator. Typically, this attribute is used to specify the name of the DMS- MTX configured for this TdmaIwfCallServer plus any other commentary information.')
tdmaCsMscIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 101, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsMscIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsMscIpAddress.setDescription('This attribute specifies the Internet Protocol (IP) Address of the Mobile Telephone Exchange (MTX) that is permitted to set up MTX InterWorking Function (IWF) data calls using this TdmaIwfCallServer. This address must be specified in order for this TdmaIwfCallServer to provide service. If call setups are attempted from an MSC which does not have this address, those calls are rejected. The callsRequested statistic of this TdmaIwfCallServer is incremented and appropriate call failure logs are generated at the MSC.')
tdmaCsVirtualRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 101, 1, 3), RowPointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsVirtualRouterName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsVirtualRouterName.setDescription('This attribute specifies the virtual router that this TdmaIwfCallServer uses for transmitting and receiving signaling messages to and from the DMS-MTX.')
tdmaCsVoiceLaw = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 101, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("aLaw", 0), ("muLaw", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsVoiceLaw.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsVoiceLaw.setDescription('This attribute specifies the voice law to be established for the IWF to PSTN modem link for calls established by this TdmaIwfCallServer. This attribute has one of the following values: aLaw: A protocol for encoding voice-band audio, Pulse Code Modulation (PCM). muLaw: A protocol for encoding voice-band audio, PCM. Note that this value must match the voice law used at the DMS- MTX connected to this TdmaIwfCallServer.')
tdmaCsCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 103), )
if mibBuilder.loadTexts: tdmaCsCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
tdmaCsCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 103, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"))
if mibBuilder.loadTexts: tdmaCsCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsCidDataEntry.setDescription('An entry in the tdmaCsCidDataTable.')
tdmaCsCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 103, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
tdmaCsStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 104), )
if mibBuilder.loadTexts: tdmaCsStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
tdmaCsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 104, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"))
if mibBuilder.loadTexts: tdmaCsStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsStateEntry.setDescription('An entry in the tdmaCsStateTable.')
tdmaCsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 104, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
tdmaCsOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 104, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
tdmaCsUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 104, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
tdmaCsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 121), )
if mibBuilder.loadTexts: tdmaCsStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsStatsTable.setDescription('This group contains operational attributes that measure the performance used for the calls set up by this particular TdmaIwfCallServer.')
tdmaCsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 121, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"))
if mibBuilder.loadTexts: tdmaCsStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsStatsEntry.setDescription('An entry in the tdmaCsStatsTable.')
tdmaCsCurrentCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 121, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsCurrentCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsCurrentCalls.setDescription('This attribute indicates the number of active calls currently serviced by this particular TdmaIwfCallServer.')
tdmaCsCallsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 121, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsCallsRequested.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsCallsRequested.setDescription('This attribute counts the number of IWF call setup requests received at this particular TdmaIwfCallServer from the DMS-MTX. The counter wraps when it exceeds the maximum value.')
tdmaCsCallsSetUp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 121, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsCallsSetUp.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsCallsSetUp.setDescription('This attribute counts the number of IWF calls successfully setup by this particular TdmaIwfCallServer. A call is considered setup when the IWF-Setup-Request message is received, indicating a request for a data communications service, and the IWF has successfully allocated the necessary resources to fulfill the request. The counter wraps when it exceeds the maximum value.')
tdmaCsCallsReleasedNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 121, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsCallsReleasedNormal.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsCallsReleasedNormal.setDescription('This attribute counts the number of IWF calls that have completed successfully on this particular TdmaIwfCallServer. The counter wraps when it exceeds the maximum value.')
tdmaCsCallsReleasedAbnormal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 121, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsCallsReleasedAbnormal.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsCallsReleasedAbnormal.setDescription('This attribute counts the number of IWF calls that have been released due to error conditions at this particular TdmaIwfCallServer or one if its TdmaIwfBearerChannel(s). The counter wraps when it exceeds the maximum value.')
tdmaCsErroredLFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 121, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsErroredLFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsErroredLFrames.setDescription('This attribute counts the number of CM/IWF Control Interface (CCI) messages received from the DMS-MTX that have an incorrect format. The counter wraps when it exceeds the maximum value.')
tdmaCsModem = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 2))
tdmaCsModemRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 2, 1), )
if mibBuilder.loadTexts: tdmaCsModemRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsModemRowStatusTable.setDescription('This entry controls the addition and deletion of tdmaCsModem components.')
tdmaCsModemRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsModemIndex"))
if mibBuilder.loadTexts: tdmaCsModemRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsModemRowStatusEntry.setDescription('A single entry in the table represents a single tdmaCsModem component.')
tdmaCsModemRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsModemRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsModemRowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaCsModem components. These components cannot be added nor deleted.')
tdmaCsModemComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsModemComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsModemComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaCsModemStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsModemStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsModemStorageType.setDescription('This variable represents the storage type value for the tdmaCsModem tables.')
tdmaCsModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: tdmaCsModemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsModemIndex.setDescription('This variable represents the index for the tdmaCsModem tables.')
tdmaCsFax = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 3))
tdmaCsFaxRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 3, 1), )
if mibBuilder.loadTexts: tdmaCsFaxRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsFaxRowStatusTable.setDescription('This entry controls the addition and deletion of tdmaCsFax components.')
tdmaCsFaxRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsFaxIndex"))
if mibBuilder.loadTexts: tdmaCsFaxRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsFaxRowStatusEntry.setDescription('A single entry in the table represents a single tdmaCsFax component.')
tdmaCsFaxRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsFaxRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsFaxRowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaCsFax components. These components cannot be added nor deleted.')
tdmaCsFaxComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsFaxComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsFaxComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaCsFaxStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsFaxStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsFaxStorageType.setDescription('This variable represents the storage type value for the tdmaCsFax tables.')
tdmaCsFaxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: tdmaCsFaxIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsFaxIndex.setDescription('This variable represents the index for the tdmaCsFax tables.')
tdmaCsDce = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 4))
tdmaCsDceRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 4, 1), )
if mibBuilder.loadTexts: tdmaCsDceRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsDceRowStatusTable.setDescription('This entry controls the addition and deletion of tdmaCsDce components.')
tdmaCsDceRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsDceIndex"))
if mibBuilder.loadTexts: tdmaCsDceRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsDceRowStatusEntry.setDescription('A single entry in the table represents a single tdmaCsDce component.')
tdmaCsDceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsDceRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsDceRowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaCsDce components. These components cannot be added nor deleted.')
tdmaCsDceComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsDceComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsDceComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaCsDceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsDceStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsDceStorageType.setDescription('This variable represents the storage type value for the tdmaCsDce tables.')
tdmaCsDceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: tdmaCsDceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsDceIndex.setDescription('This variable represents the index for the tdmaCsDce tables.')
tdmaCsDsc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 5))
tdmaCsDscRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 5, 1), )
if mibBuilder.loadTexts: tdmaCsDscRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsDscRowStatusTable.setDescription('This entry controls the addition and deletion of tdmaCsDsc components.')
tdmaCsDscRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsDscIndex"))
if mibBuilder.loadTexts: tdmaCsDscRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsDscRowStatusEntry.setDescription('A single entry in the table represents a single tdmaCsDsc component.')
tdmaCsDscRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsDscRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsDscRowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaCsDsc components. These components cannot be added nor deleted.')
tdmaCsDscComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsDscComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsDscComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaCsDscStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsDscStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsDscStorageType.setDescription('This variable represents the storage type value for the tdmaCsDsc tables.')
tdmaCsDscIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: tdmaCsDscIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsDscIndex.setDescription('This variable represents the index for the tdmaCsDsc tables.')
tdmaCsDscProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 5, 10), )
if mibBuilder.loadTexts: tdmaCsDscProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsDscProvTable.setDescription('This group contains the provisionable attributes for Data Service Control Asynchronous Data Service portion of the wireless protocol stack used for the calls set up by this particular TdmaIwfCallServer.')
tdmaCsDscProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsDscIndex"))
if mibBuilder.loadTexts: tdmaCsDscProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsDscProvEntry.setDescription('An entry in the tdmaCsDscProvTable.')
tdmaCsDscLl0BufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 5, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(80, 65535)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsDscLl0BufferSize.setStatus('obsolete')
if mibBuilder.loadTexts: tdmaCsDscLl0BufferSize.setDescription('This attribute specifies the maximum size of the DSC logical link 0 control buffer. Changes impact the amount of memory used (more memory is used when increasing the attribute). The gain in performance obtained from the selection of a larger buffer size may be offset by less memory being available. The customer might wish to increase the buffer size when a degradation in throughput of the system is seen.')
tdmaCsDscLl1BufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 5, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(160, 65535)).clone(160)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsDscLl1BufferSize.setStatus('obsolete')
if mibBuilder.loadTexts: tdmaCsDscLl1BufferSize.setDescription('This attribute specifies the maximum size of the DSC logical link 1 data buffer. Changes impact the amount of memory used (more memory is used when increasing the attribute). The gain in performance obtained from the selection of a larger buffer size may be offset by less memory being available. The customer might wish to increase the buffer size when a degradation in throughput of the system is seen.')
tdmaCsDscK0Ll0WindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 5, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsDscK0Ll0WindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsDscK0Ll0WindowSize.setDescription('This attribute specifies the maximum size of the DSC logical link 0 window.')
tdmaCsDscK1Ll1WindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 5, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsDscK1Ll1WindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsDscK1Ll1WindowSize.setDescription('This attribute specifies the maximum size of the DSC logical link 1 window.')
tdmaCsDscP0CompressionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 5, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noCompression", 0), ("compInitrResp", 1), ("compRespInitr", 2), ("compBoth", 3))).clone('noCompression')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsDscP0CompressionDirection.setStatus('obsolete')
if mibBuilder.loadTexts: tdmaCsDscP0CompressionDirection.setDescription('This attribute specifies the compression configuration for DSC. This attribute has one of the following values: noCompression: No compression. compInitrResp: Compression initiator to responder. compRespInitr: Compression responder to initiator. compBoth: Compression both directions.')
tdmaCsDscP1CompressionMaximumCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 5, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(512, 4096)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsDscP1CompressionMaximumCodewords.setStatus('obsolete')
if mibBuilder.loadTexts: tdmaCsDscP1CompressionMaximumCodewords.setDescription('This attribute specifies the maximum number of codewords to be used for compression. A codeword is a binary number that represents a string of characters. Changes to this attribute impact the amount of memory used (more memory is used when increasing the attribute). The gain in performance obtained from the selection of a larger dictionary may be offset by the larger codeword size needed, and for certain types of data, better performance may be obtained by using a smaller dictionary. Changes to this attribute do not affect existing calls.')
tdmaCsDscP2CompressionMaximumCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 5, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 150)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsDscP2CompressionMaximumCharacters.setStatus('obsolete')
if mibBuilder.loadTexts: tdmaCsDscP2CompressionMaximumCharacters.setDescription('This attribute specifies the maximum number of characters that can be represented by a single codeword to be used for compression from logical link 0.')
tdmaCsRlp1 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 6))
tdmaCsRlp1RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 6, 1), )
if mibBuilder.loadTexts: tdmaCsRlp1RowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsRlp1RowStatusTable.setDescription('This entry controls the addition and deletion of tdmaCsRlp1 components.')
tdmaCsRlp1RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsRlp1Index"))
if mibBuilder.loadTexts: tdmaCsRlp1RowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsRlp1RowStatusEntry.setDescription('A single entry in the table represents a single tdmaCsRlp1 component.')
tdmaCsRlp1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsRlp1RowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsRlp1RowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaCsRlp1 components. These components can be added.')
tdmaCsRlp1ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsRlp1ComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsRlp1ComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaCsRlp1StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsRlp1StorageType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsRlp1StorageType.setDescription('This variable represents the storage type value for the tdmaCsRlp1 tables.')
tdmaCsRlp1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("halfRate", 0), ("fullRate", 1), ("doubleRate", 2), ("tripleRate", 3))))
if mibBuilder.loadTexts: tdmaCsRlp1Index.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsRlp1Index.setDescription('This variable represents the index for the tdmaCsRlp1 tables.')
tdmaCsRlp1ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 6, 10), )
if mibBuilder.loadTexts: tdmaCsRlp1ProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsRlp1ProvTable.setDescription('This group contains provisionable attributes for the Radio Link Protocol 1 (RLP1) parameters used for the calls set up by this particular TdmaIwfCallServer. Changes to these attributes do not affect existing calls.')
tdmaCsRlp1ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsRlp1Index"))
if mibBuilder.loadTexts: tdmaCsRlp1ProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsRlp1ProvEntry.setDescription('An entry in the tdmaCsRlp1ProvTable.')
tdmaCsRlp1T1ResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 6, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 20)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsRlp1T1ResponseTimer.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsRlp1T1ResponseTimer.setDescription('This attribute specifies the time the receiving Radio Link Protocol (RLP1) entity shall wait for a response from the peer TIA-136-310 (formerly IS-130) application. During the Exchange Information (XID) negotiation, both RLP1 entities (mobile station and IWF) can agree to use a specific value for this timer (T1). The IWF attempts to negotiate to the value specified by this attribute. Changes to this attribute do not affect existing calls.')
tdmaCsRlp1T2LinkActivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 6, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 120)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsRlp1T2LinkActivityTimer.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsRlp1T2LinkActivityTimer.setDescription('This attribute specifies the maximum time the receiving Radio Link Protocol (RLP1) entity shall wait for link activity. During the Exchange Information (XID) negotiation, both RLP1 entities (mobile station and IWF) can agree to use a specific value for this timer (T2). The IWF attempts to negotiate to the value specified by this attribute. Changes to this attribute do not affect existing calls.')
tdmaCsRlp1T3PeerAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 6, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 20)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsRlp1T3PeerAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsRlp1T3PeerAckTimer.setDescription('This attribute specifies the maximum time the receiving Radio Link Protocol (RLP1) entity shall wait for the peer to ACK or NAK data. During the Exchange Information (XID) negotiation, both RLP1 entities (mobile station and IWF) can agree to use a specific value for this timer (T3). The IWF attempts to negotiate to the value specified by this attribute. Changes to this attribute do not affect existing calls.')
tdmaCsV42 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7))
tdmaCsV42RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7, 1), )
if mibBuilder.loadTexts: tdmaCsV42RowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42RowStatusTable.setDescription('This entry controls the addition and deletion of tdmaCsV42 components.')
tdmaCsV42RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsV42Index"))
if mibBuilder.loadTexts: tdmaCsV42RowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42RowStatusEntry.setDescription('A single entry in the table represents a single tdmaCsV42 component.')
tdmaCsV42RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsV42RowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42RowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaCsV42 components. These components cannot be added nor deleted.')
tdmaCsV42ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsV42ComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42ComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaCsV42StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsV42StorageType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42StorageType.setDescription('This variable represents the storage type value for the tdmaCsV42 tables.')
tdmaCsV42Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: tdmaCsV42Index.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42Index.setDescription('This variable represents the index for the tdmaCsV42 tables.')
tdmaCsV42ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7, 10), )
if mibBuilder.loadTexts: tdmaCsV42ProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42ProvTable.setDescription('This group contains the provisionable attributes for the V.42 protocol used for the calls set up by this particular IwfCallServer. Changes to these attributes do not affect existing calls.')
tdmaCsV42ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsV42Index"))
if mibBuilder.loadTexts: tdmaCsV42ProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42ProvEntry.setDescription('An entry in the tdmaCsV42ProvTable.')
tdmaCsV42T400DetectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7, 10, 1, 1), FixedPoint2().subtype(subtypeSpec=ValueRangeConstraint(75, 254)).clone(75)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsV42T400DetectTimer.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42T400DetectTimer.setDescription('This attribute specifies the maximum amount of time that the IWF waits for an Originator Detection Pattern (ODP) or Answerer Detection Pattern (ADP). ODP/ADP is a series of special bit patterns used during the call setup procedures. If the IWF is the originator of the call, it starts sending ODP patterns and waits for an ADP for the duration of T400 from the answerer at call setup time. If the IWF is the answerer of the call, it waits for an ODP for T400 seconds from the originator and if it receives during that time it sends an ADP pattern to the originator at the call setup time. Since both sides operate with different values of T400 timer, a higher value increases the chance of a successful call setup. Changes to this attribute do not affect existing calls.')
tdmaCsV42T401AckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7, 10, 1, 2), FixedPoint2().subtype(subtypeSpec=ValueRangeConstraint(50, 900)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsV42T401AckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42T401AckTimer.setDescription('This attribute specifies the maximum amount of time that the IWF waits for an acknowledgment before retransmitting a frame. Since information about the T401 timer is not carried in the Exchange Identification (XID) negotiations at call setup time, both sides operate with different timer values. The value for T401 depends on many factors, such as propagation delay or frame processing time. A frame is retransmitted up to N400 times if the timer T401 expires before an acknowledgment for a frame is actually received. The performance of the data link layer can be impacted by the value of this timer as retransmissions of frames occur on expiry of timer T401. Changes to this attribute do not affect existing calls.')
tdmaCsV42T402AckDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7, 10, 1, 3), FixedPoint2().subtype(subtypeSpec=ValueRangeConstraint(25, 450)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsV42T402AckDelayTimer.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42T402AckDelayTimer.setDescription('This attribute specifies the maximum amount of time that the IWF may wait following the receipt of any frame requiring a reply before it initiates transmission of an appropriate reply in order to ensure that the reply frame is received by the remote error-correcting entity prior to expiration of the T401 timer of the remote error-correcting entity. Since information about the T402 timer is not carried in the Exchange Identification (XID) negotiations at call setup, both sides operate with different timer values. If this timer expires, then the reply that would have been returned prior to its expiration is not sent. The performance of the data link layer can be impacted by the value of this timer as retransmissions of frames occur on expiry of timer T401. For better performance, a value of t402AckDelayTimer (T402) equal to half the value of t401AckTimer (T401) is recommended. Changes to this attribute do not affect existing calls.')
tdmaCsV42T403IdleProbeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 90)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsV42T403IdleProbeTimer.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42T403IdleProbeTimer.setDescription('This attribute specifies the maximum amount of time that the IWF allows to elapse without frames being exchanged. The link is permitted to remain idle with no frames being exchanged on the data link. Upon expiry of this timer, the IWF polls its peer for status. Since information about the T403 timer is not carried in the Exchange Identification (XID) negotiations at call setup time, both sides operate with different timer values. Changes to this attribute do not affect existing calls.')
tdmaCsV42TxN401FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsV42TxN401FrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42TxN401FrameSize.setDescription('This attribute specifies the maximum number of octets that can be carried in the information field of an Information (I) frame, Exchange Identification (XID) frame, and a Unnumbered Information (UI) frame from the IWF to the remote entity. The default value is 128 octets, and no XID negotiations required for txN401FrameSize. If the value for txN401FrameSize value is set to other than 128 octets, then XID frames are exchanged to negotiate a value. The value provided for txN401FrameSize sets up the bounds during XID negotiations. The IWF performs XID negotiations with this value as a minimum or maximum value. If a value greater than 128 is specified, then the IWF negotiates or attempts to negotiate a value between the 128 (as a minimum) and the given value (as a maximum). If a value less than 128 is specified, then the IWF attempts to negotiate a value between the given value (as a minimum) and 128 (as a maximum). Any value can be specified as long as it is within the provisionable limits. However, a value equal to or close to 128 is recommended. Changes to this attribute do not affect existing calls.')
tdmaCsV42RxN401FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsV42RxN401FrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42RxN401FrameSize.setDescription('This attribute specifies the maximum number of octets that can be carried in the information field of an Information (I) frame, Exchange Identification (XID) frame, and a Unnumbered Information (UI) frame from the remote entity to the IWF. The default value is 128 octets, and no XID negotiations are required for rxN401FrameSize. If the value set for rxN401FrameSize is other than 128, XID frames are exchanged to negotiate a value. The value provided for rxN401FrameSize sets up the bounds during XID negotiations. The IWF performs XID negotiations with this value as a minimum or maximum value. If a value greater than 128 is specified, then the IWF attempts to negotiate for a value between 128 (as a minimum) and the given value (as a maximum). If a value less than 128 value is specified, then the IWF attempts to negotiate for a value between the given value (as a minimum) and 128 (as a maximum). Any value can be specified as long as it is within the provisionable limits. However, a value equal to or close to the default is recommended. Changes to this attribute do not affect existing calls.')
tdmaCsV42TxKWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsV42TxKWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42TxKWindowSize.setDescription('This attribute specifies the maximum number of outstanding unacknowledged sequenced Information (I) frames from the IWF to the remote entity. The default value is 15 frames, and if this value is used then no Exchange Identification (XID) negotiations are required for txKWindowSize. If the value set for txKWindowSize is other than 15, then XID frames are exchanged to negotiate a value. The value provided for txKWindowSize sets up the bounds during XID negotiations. The IWF performs XID negotiations with this value as a minimum or maximum value. If a value greater than 15 is specified, then the IWF attempts to negotiate a value between 15 (as a minimum) and the given value (as a maximum). If a value less than 15 is specified, then the IWF attempts to negotiate for a value between the given value (as a minimum) and 15 (as a maximum). Any value can be specified as long at it is within the provisionable limits. However, a value equal to or close to the default is recommended. Changes to this attribute do not affect existing calls.')
tdmaCsV42RxKWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsV42RxKWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42RxKWindowSize.setDescription('This attribute specifies the maximum number of outstanding unacknowledged sequenced Information (I) frames from the remote entity to the IWF. The default value is 15 frames, and if this value is used then no Exchange Identification (XID) negotiations are required for rxKWindowSize. If the value set for rxKWindowSize is other than 15, then XID frames are exchanged to negotiate a value. The value provided for rxKWindowSize sets up the bounds during XID negotiations. The IWF performs XID negotiations with this value as a minimum or maximum value. If a value greater than 15 is specified, then the IWF attempts to negotiate a value between 15 (as a minimum) and the given value (as a maximum). If a value less than 15 is specified, then the IWF attempts to negotiate for a value between the given value (as a minimum) and 15 (as a maximum). Any value can be specified as long as it is within the provisionable limits. However, a value equal to or close to the default is recommended. Changes to this attribute do not affect existing calls.')
tdmaCsV42N400RetransLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsV42N400RetransLimit.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42N400RetransLimit.setDescription('This attribute specifies the maximum number of times the IWF retransmits a frame upon expiry of t401AckTimer before appropriate recovery action is taken. Information about N400 (Retransmission Limit) is not carried in the Exchange Identification (XID) negotiation at call setup time so both sides operate with different N400 values. Changes to this attribute do not affect existing calls.')
tdmaCsV42FcsLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 7, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("fcs16", 0), ("fcs32Or16", 1), ("fcs32", 2))).clone('fcs32Or16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsV42FcsLength.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42FcsLength.setDescription('This attribute specifies whether a 16 bit or a 32 bit Frame Check Sequence (FCS) will be used for the link between the IWF and the far end DCE. This attribute has one of the following values: fcs16: Use only a 16 bit FCS. fcs32Or16: 32 bit FCS is preferred; Use a 16 bit FCS if needed. fcs32Only: Use only a 32 it FCS; If unavailable, drop the connection.')
tdmaCsV42Bis = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 8))
tdmaCsV42BisRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 8, 1), )
if mibBuilder.loadTexts: tdmaCsV42BisRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42BisRowStatusTable.setDescription('This entry controls the addition and deletion of tdmaCsV42Bis components.')
tdmaCsV42BisRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 8, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsV42BisIndex"))
if mibBuilder.loadTexts: tdmaCsV42BisRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42BisRowStatusEntry.setDescription('A single entry in the table represents a single tdmaCsV42Bis component.')
tdmaCsV42BisRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsV42BisRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42BisRowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaCsV42Bis components. These components cannot be added nor deleted.')
tdmaCsV42BisComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsV42BisComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42BisComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaCsV42BisStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsV42BisStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42BisStorageType.setDescription('This variable represents the storage type value for the tdmaCsV42Bis tables.')
tdmaCsV42BisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: tdmaCsV42BisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42BisIndex.setDescription('This variable represents the index for the tdmaCsV42Bis tables.')
tdmaCsV42BisProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 8, 10), )
if mibBuilder.loadTexts: tdmaCsV42BisProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42BisProvTable.setDescription('This group contains the provisionable attributes for the V.42bis data compression protocol parameters used for the calls set up by this particular CallServer. Changes to these attributes do not affect existing calls.')
tdmaCsV42BisProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 8, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsV42BisIndex"))
if mibBuilder.loadTexts: tdmaCsV42BisProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42BisProvEntry.setDescription('An entry in the tdmaCsV42BisProvTable.')
tdmaCsV42BisP0CompressionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 8, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noCompression", 0), ("compInitrResp", 1), ("compRespInitr", 2), ("compBoth", 3))).clone('compBoth')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsV42BisP0CompressionDirection.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42BisP0CompressionDirection.setDescription('This attribute specifies the V.42bis data compression direction to be supported. The value for compression direction is negotiated at link setup by the data link protocol by way of the Exchange Identification (XID) negotiation of parameter P0 (compression direction). During XID negotiation of parameter P0, both sides (IWF and mobile or IWF and PSTN) agree on the compression direction. This attribute has one of the following values: noCompression: No compression is present. compInitrResp: The data sent by the IWF to the other entity is compressed. compRespInitr: The data received by the IWF from the other entity is compressed. compBoth: The data sent and received by the IWF is compressed. Changes to this attribute do not affect existing calls.')
tdmaCsV42BisP1MaximumCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 8, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(512, 4096)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsV42BisP1MaximumCodewords.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42BisP1MaximumCodewords.setDescription('This attribute specifies the maximum number of V.42bis codewords the IWF supports. A codeword is a binary number that represents a string of characters in compressed form. V.42bis keeps a dictionary of codewords for each compression direction. Changes to this attribute impact the compression ratio for the encoder (component TdmaBc V42Bis attribute compRatioEncoder). Changes also impact the amount of memory used (more memory is used when increasing the attribute). The gain in performance obtained from the selection of a larger dictionary may be offset by the larger codeword size needed, and for certain types of data, better performance may be obtained by using a smaller dictionary. Changes to this attribute do not affect existing calls.')
tdmaCsV42BisP2MaximumStringSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 8, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 250)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsV42BisP2MaximumStringSize.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42BisP2MaximumStringSize.setDescription('This attribute specifies the maximum number of characters allowed in a string represented by a codeword that the IWF supports. Each codeword in a V.42bis dictionary represents a string of characters. Changes to this attribute impact the compression ratio for the encoder. Changes to this attribute do not affect existing calls.')
tdmaCsV42BisActionOnError = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 8, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("resetLink", 0), ("takeDownCall", 1))).clone('resetLink')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsV42BisActionOnError.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsV42BisActionOnError.setDescription('This attribute specifies whether or not V.42bis takes down the call or resets the link when any of the following errors occur: 1.Receipt of STEPUP (step up codeword size) codeword when it would cause C2 (current code word size) to exceed N1 (maximum code word size). 2. Receipt of a codeword, at any time, equal to C1 (next empty dictionary entry). 3. Receipt of a codeword representing an empty dictionary entry. 4. Receipt of a reserved command code. 5. Receipt of any other error. If the value is resetLink, the error corrected connection and V.42bis dictionaries are reset. Some data is lost but the call continues. If the value is takeDownCall, the call is taken down. Changes to this attribute do not affect existing calls.')
tdmaCsLp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 9))
tdmaCsLpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 9, 1), )
if mibBuilder.loadTexts: tdmaCsLpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsLpRowStatusTable.setDescription('This entry controls the addition and deletion of tdmaCsLp components.')
tdmaCsLpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 9, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsLpIndex"))
if mibBuilder.loadTexts: tdmaCsLpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsLpRowStatusEntry.setDescription('A single entry in the table represents a single tdmaCsLp component.')
tdmaCsLpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 9, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaCsLpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsLpRowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaCsLp components. These components can be added and deleted.')
tdmaCsLpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsLpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsLpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaCsLpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsLpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsLpStorageType.setDescription('This variable represents the storage type value for the tdmaCsLp tables.')
tdmaCsLpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: tdmaCsLpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsLpIndex.setDescription('This variable represents the index for the tdmaCsLp tables.')
tdmaCsLpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 9, 10), )
if mibBuilder.loadTexts: tdmaCsLpOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsLpOperTable.setDescription('This group contains operational attributes pertaining to information about TdmaIwfBearerChannels and TdmaIwfLogicalProcessor associated with a TdmaIwfCallServer from a high-level view.')
tdmaCsLpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 9, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaCsLpIndex"))
if mibBuilder.loadTexts: tdmaCsLpOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsLpOperEntry.setDescription('An entry in the tdmaCsLpOperTable.')
tdmaCsLpConfiguredBearerChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 9, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 124))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsLpConfiguredBearerChannels.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsLpConfiguredBearerChannels.setDescription('This attribute indicates the number of TdmaIwfBearerChannel components provisioned for the TdmaIwfLogicalProcessor represented by this component.')
tdmaCsLpActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 9, 10, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 124))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsLpActiveCalls.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsLpActiveCalls.setDescription('This attribute indicates the number of calls currently active on this LogicalProcessor.')
tdmaCsLpModemsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 135, 9, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaCsLpModemsSupported.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaCsLpModemsSupported.setDescription('This attribute indicates if modems are supported with this TdmaIwfLogicalProcessor. This attribute has one of the following values: yes: Modems are supported with this TdmaIwfLogicalProcessor. no: Modems are not supported with this TdmaIwfLogicalProcessor.')
tdmaBc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136))
tdmaBcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 1), )
if mibBuilder.loadTexts: tdmaBcRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRowStatusTable.setDescription('This entry controls the addition and deletion of tdmaBc components.')
tdmaBcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"))
if mibBuilder.loadTexts: tdmaBcRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRowStatusEntry.setDescription('A single entry in the table represents a single tdmaBc component.')
tdmaBcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaBcRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaBc components. These components can be added and deleted.')
tdmaBcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaBcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcStorageType.setDescription('This variable represents the storage type value for the tdmaBc tables.')
tdmaBcCsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: tdmaBcCsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcCsIndex.setDescription('This variable represents an index for the tdmaBc tables.')
tdmaBcBcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: tdmaBcBcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcBcIndex.setDescription('This variable represents an index for the tdmaBc tables.')
tdmaBcOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 101), )
if mibBuilder.loadTexts: tdmaBcOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcOperTable.setDescription('This group contains operational attributes concerning the operation of this particular TdmaIwfBearerChannel for the current or most recent call.')
tdmaBcOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 101, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"))
if mibBuilder.loadTexts: tdmaBcOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcOperEntry.setDescription('An entry in the tdmaBcOperTable.')
tdmaBcState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 101, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("setup", 1), ("active", 2), ("release", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcState.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcState.setDescription('This attribute indicates the current state of the MSC/IWF Interface Protocol (MIP) Message Router (MMR) for an IWF element. This attribute has one of the following values: idle: Startup state of IWF element. setup: This call half is being set up. active: This call half has been connected by both the MTX and IWF and is active. release: This call half is being released.')
tdmaBcCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 101, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("analogSpeech", 0), ("digitalSpeech", 1), ("analogPrefSpeech", 2), ("digitalPrefSpeech", 3), ("asyncData", 4), ("g3Fax", 5), ("rejected", 6), ("stuIII", 7), ("notUsedYet", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcCallType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcCallType.setDescription('This attribute indicates the current call type. This attribute has one of the following values: analogSpeech: Analog speech calls. digitalSpeech: Digital speech calls. analogPrefSpeech: Analog preferred speech calls. digitalPrefSpeech: Digital preferred speech calls. asyncData: Asynchronous data service calls. g3Fax: Group 3 fax calls. rejected: Rejected calls. stuIII: STU III calls. notUsedYet: Bearer Channel has not been used in a call yet.')
tdmaBcLastResponseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 101, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 129, 131, 144, 145, 146, 147, 156, 159, 169, 172, 175, 177, 191, 207, 209, 210, 223, 224, 225, 226, 230, 239))).clone(namedValues=NamedValues(("noCause", 0), ("unassignedNumber", 129), ("noRouteToDest", 131), ("normalClearing", 144), ("userBusy", 145), ("noResponse", 146), ("userNoAnswer", 147), ("invalidNumberFormat", 156), ("unspecNormal", 159), ("temporaryFailure", 169), ("channelUnavailable", 172), ("resourceUnavailable", 175), ("qosUnavailable", 177), ("serviceUnavailable", 191), ("unimplementedOption", 207), ("invalidCallRefValue", 209), ("invalidChannel", 210), ("unspecInvalidMessage", 223), ("missingMandatoryIe", 224), ("invalidMessageType", 225), ("incompatibleMessage", 226), ("timerRecovery", 230), ("unspecProtocolError", 239)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcLastResponseCode.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcLastResponseCode.setDescription('This attribute indicates the MSC/IWF Interface Protocol (MIP) Message Router (MMR) response code returned for the last call which was active on this particular TdmaIwfBearerChannel. This attribute has one of the following values: noCause: No cause available. unassignedNumber: Unallocated or unassigned number. noRouteToDest: No route to destination. normalClearing: The call was terminated normally. userBusy: User busy. noResponse: No carrier. userNoAnswer: No answer from user. invalidNumberFormat: Translation or routing problem. unspecNormal: Normal, unspecified. temporaryFailure: Temporary failure. channelUnavailable: Channel unavailable. resourceUnavailable: Resources unavailable to handle call. qosUnavailabled: Specified rate of call unavailable. serviceUnavailable: Service not implemented. unimplementedOption: Option not implemented. invalidCallRefValue: Invalid call reference value. invalidChannel: Identified channel does not exist. unspecInvalidMessage: Invalid message, unspecified. missingMandatoryIe: Missing mandatory information element. invalidMessageType: Message type not implemented. incompatibleMessage: Message not compatible with call state. timerRecovery: Recovery on timer expiration. protocolError: Protocol error, unspecified.')
tdmaBcMateBearerChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 101, 1, 4), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcMateBearerChannel.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcMateBearerChannel.setDescription('This attribute contains the name of the mate TdmaIwfBearerChannel that this TdmaIwfBearerChannel is involved with in the currently active call. In the case of a FastConnect call, this mate is a TdmaIwfFcBearerChannel.')
tdmaBcCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 103), )
if mibBuilder.loadTexts: tdmaBcCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
tdmaBcCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 103, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"))
if mibBuilder.loadTexts: tdmaBcCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcCidDataEntry.setDescription('An entry in the tdmaBcCidDataTable.')
tdmaBcCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 103, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaBcCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
tdmaBcStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 104), )
if mibBuilder.loadTexts: tdmaBcStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
tdmaBcStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 104, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"))
if mibBuilder.loadTexts: tdmaBcStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcStateEntry.setDescription('An entry in the tdmaBcStateTable.')
tdmaBcAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 104, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
tdmaBcOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 104, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
tdmaBcUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 104, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
tdmaBcFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2))
tdmaBcFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 1), )
if mibBuilder.loadTexts: tdmaBcFramerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerRowStatusTable.setDescription('This entry controls the addition and deletion of tdmaBcFramer components.')
tdmaBcFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcFramerIndex"))
if mibBuilder.loadTexts: tdmaBcFramerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerRowStatusEntry.setDescription('A single entry in the table represents a single tdmaBcFramer component.')
tdmaBcFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcFramerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerRowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaBcFramer components. These components cannot be added nor deleted.')
tdmaBcFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcFramerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaBcFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcFramerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerStorageType.setDescription('This variable represents the storage type value for the tdmaBcFramer tables.')
tdmaBcFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: tdmaBcFramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerIndex.setDescription('This variable represents the index for the tdmaBcFramer tables.')
tdmaBcFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 10), )
if mibBuilder.loadTexts: tdmaBcFramerProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerProvTable.setDescription('This group contains the base provisioning data for the Framer component. Application or hardware interface specific provisioning data is contained in other provisionable Framer groups.')
tdmaBcFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcFramerIndex"))
if mibBuilder.loadTexts: tdmaBcFramerProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerProvEntry.setDescription('An entry in the tdmaBcFramerProvTable.')
tdmaBcFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaBcFramerInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerInterfaceName.setDescription("This attribute contains a hardware component name. The attribute associates the application with a specific link. This defines the module processor on which Framer's parent component (as well as Framer itself) will run.")
tdmaBcFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 11), )
if mibBuilder.loadTexts: tdmaBcFramerStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerStatsTable.setDescription('This group contains the operational statistics data for a TdmaIwfFramer component.')
tdmaBcFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcFramerIndex"))
if mibBuilder.loadTexts: tdmaBcFramerStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerStatsEntry.setDescription('An entry in the tdmaBcFramerStatsTable.')
tdmaBcFramerTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcFramerTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerTxFrames.setDescription('This attribute counts the number of frames transmitted to the link interface by TdmaIwfFramer. The counter wraps when it exceeds the maximum value.')
tdmaBcFramerRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcFramerRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerRxFrames.setDescription('This attribute counts the number of frames received from the link interface by TdmaIwfFramer. The counter wraps when it exceeds the maximum value.')
tdmaBcFramerRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcFramerRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerRxBytes.setDescription('This attribute counts the number of bytes received from the link interface by TdmaIwfFramer. The counter wraps when it exceeds the maximum value.')
tdmaBcFramerLinkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 12), )
if mibBuilder.loadTexts: tdmaBcFramerLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerLinkTable.setDescription('This group contains provisionable attributes for the TdmaIwfFramer which controls link layer framing for application components sending and receiving data on a link interface for this particular TdmaIwfBearerChannel.')
tdmaBcFramerLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcFramerIndex"))
if mibBuilder.loadTexts: tdmaBcFramerLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerLinkEntry.setDescription('An entry in the tdmaBcFramerLinkTable.')
tdmaBcFramerFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 8))).clone(namedValues=NamedValues(("btdsFraming", 2), ("mtxFraming", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmaBcFramerFramingType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerFramingType.setDescription('This attribute indicates the type of framing for the link layer data received and transmitted on this channel. This attribute has one of the following values: btdsFraming: Bit transparent framing for the TdmaIwfBearerChannel components on MVP cards. mtxFraming: DMS-MTX InterSystem Link Protocol (ISLP) framing required for the TdmaIwfBearerChannel components on DS1C/E1C cards.')
tdmaBcFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 13), )
if mibBuilder.loadTexts: tdmaBcFramerStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
tdmaBcFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcFramerIndex"))
if mibBuilder.loadTexts: tdmaBcFramerStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerStateEntry.setDescription('An entry in the tdmaBcFramerStateTable.')
tdmaBcFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcFramerAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
tdmaBcFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcFramerOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
tdmaBcFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcFramerUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFramerUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
tdmaBcModem = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3))
tdmaBcModemRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 1), )
if mibBuilder.loadTexts: tdmaBcModemRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemRowStatusTable.setDescription('This entry controls the addition and deletion of tdmaBcModem components.')
tdmaBcModemRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcModemIndex"))
if mibBuilder.loadTexts: tdmaBcModemRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemRowStatusEntry.setDescription('A single entry in the table represents a single tdmaBcModem component.')
tdmaBcModemRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcModemRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemRowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaBcModem components. These components cannot be added nor deleted.')
tdmaBcModemComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcModemComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaBcModemStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcModemStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemStorageType.setDescription('This variable represents the storage type value for the tdmaBcModem tables.')
tdmaBcModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: tdmaBcModemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemIndex.setDescription('This variable represents the index for the tdmaBcModem tables.')
tdmaBcModemOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 10), )
if mibBuilder.loadTexts: tdmaBcModemOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemOperTable.setDescription('This group contains operational attributes that measure performance of the modem component for this particular TdmaIwfBearerChannel.')
tdmaBcModemOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcModemIndex"))
if mibBuilder.loadTexts: tdmaBcModemOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemOperEntry.setDescription('An entry in the tdmaBcModemOperTable.')
tdmaBcModemVoiceLaw = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("aLaw", 0), ("muLaw", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcModemVoiceLaw.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemVoiceLaw.setDescription("This attribute indicates the active voice law associated with the modem component. This attribute has one of the following values: aLaw and muLaw. Both protocols are utilized for encoding voice- band audio. For additional information on each, refer to ITU-T G.711 'Pulse Code Modulation (PCM) of Voice Frequencies'.")
tdmaBcModemRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("n50", 0), ("n300", 1), ("n600", 2), ("n1200", 3), ("n2400", 4), ("n4800", 5), ("n7200", 6), ("n9600", 7), ("n12000", 8), ("n14400", 9), ("n16800", 10), ("n19200", 11), ("n21600", 12), ("n24000", 13), ("n26400", 14), ("n28800", 15), ("n31200", 16), ("n32000", 17), ("n33600", 18), ("n38400", 19), ("n43200", 20), ("n48000", 21), ("n56000", 22), ("n57600", 23), ("n64000", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcModemRate.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemRate.setDescription('This attribute indicates the transmission rate of the current modem in use. All rates are the same in both the transmit and receive directions.')
tdmaBcModemModemAlgorithmInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcModemModemAlgorithmInUse.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemModemAlgorithmInUse.setDescription('This attribute indicates the current modem algorithm(s) active for the channel. This attribute has one of the following values: t30: T.30 is active. T.30 is the Group 3 fax protocol. v17: V.17 is active.V.17 is an ITU-T 14400bit/s modem standard. v21: V.21 is active. V.21 is an ITU-4 300bit/s modem standard. v22: V.22 ia active. V.22 is an ITU-T modem standard that operates at 1200bit/s and 600 baud. v22bis: V.22bis is active. V.22bis is an ITU-T modem standard that operates at 2400bit/s and 600 baud. v27ter: V.27ter is active. V.27ter is an ITU-T 7200bit/s modem standard. v29: V.29 is active. V.29 is an ITU-T 9600bit/s modem standard. v32: V.32 is active. V.32 is an ITU-T modem standard that operates at 9600bit/s and 2400 baud. v32bis: V.32bis is an ITU-T modem standard that operates at a speed of 14.4kbit/s. Description of bits: t30(0) v17(1) v21(2) v22(3) v22bis(4) v27ter(5) v29(6) v32(7) v32bis(8)')
tdmaBcModemProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("training", 1), ("connected", 2), ("releasing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcModemProtocolState.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemProtocolState.setDescription('This attribute indicates the active protocol state of the modem in use.This attribute has one of the following values: idle: Modem is in an inactive state and has no current connection established. training: Modem is attempting to establish a connection with the far end modem via handshaking. connected: Modem has establish a connection with the far end modem. releasing: Modem has begun tearing down the connection.')
tdmaBcModemMobileSideFlowControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcModemMobileSideFlowControlState.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemMobileSideFlowControlState.setDescription('This attribute indicates the state of flow control based on whether flow control was requested by the mobile side of the connection and an indication was sent to an upper layer protocol. This attribute has one of the following values: on: Flow control is active towards the mobile side of the call. off: Flow control is not active towards the mobile side of the call. DESCRIPTION')
tdmaBcModemPstnSideFlowControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcModemPstnSideFlowControlState.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemPstnSideFlowControlState.setDescription('This attribute indicates the state of flow control based on whether flow control was requested by the PSTN side of the connection and an indication was sent to the Digital Signal Processor. This attribute has one of the following values: on: Flow control is active towards the DSP (PSTN side of the call). off: Flow control is not active towards the DSP (PSTN side of the call).')
tdmaBcModemAsyncMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcModemAsyncMode.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemAsyncMode.setDescription('This attribute indicates whether conversion between synchronous and asynchronous data format (specifically, the stripping or insertion of start and stop bits) is being performed. The value is on unless the V.42 layer is active or it is a fax call. This attribute has one of the following values: on: Conversion between synchronous and asynchronous data is being performed. off: Conversion between synchronous and asynchronous data is not being performed.')
tdmaBcModemOutbandFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcModemOutbandFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemOutbandFlowControl.setDescription('This attribute indicates whether outband flow control conversions are being performed. If outband flow control is on, then when the Modem Application Layer (MAL) receives an xon or xoff from the PSTN, the MAL converts the instruction into a primitive and sends it to the Data Service Control (DSC). In the opposite direction with outband flow control on, when the MAL receives a primitive from the DSC, the MAL converts the primitive into an xon or xoff and forwards it to the PSTN. If outband flow control is off, then all flow control is handled inband. The modem performs either inband or outband flow control unless V.42 layer is active, it is a fax call, or no flow control was specified by the DMS-MTX. This attribute has one of the following values: on: Conversion to and from out-of-band signaling is enabled. off: Conversion to and from out-of-band signaling is disabled.')
tdmaBcModemOutbandBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcModemOutbandBreak.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemOutbandBreak.setDescription('This attribute indicates whether inband or outband break control conversions are being performed. If outband break control is on, when the modem detects a break condition coming from the PSTN, the Modem Application Layer (MAL) converts the instruction into a primitive and forwards it to the Data Service Control (DSC). In the opposite direction with outband break control on, when the MAL receives a primitive from the DSC, the MAL converts the primitive into a break and forwards it to the PSTN. When a break condition is discovered all subsequent incoming data is discarded until a start bit is received.')
tdmaBcModemAutobaud = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcModemAutobaud.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemAutobaud.setDescription('This attribute indicates whether autobaud is active. The modem is instructed at call setup time by the DMS-MTX on the following: (1) the initial modem data rate value, and (2) whether a modem is allowed to perform autobauding (on) or not (off). With autobauding on, the modem is allowed to connect using a valid modem data rate less than or equal to the initial rate specified to the modem by the DMS-MTX. If a modem cannot perform autobauding and the carrier cannot be established at the initial data rate, the modem is disabled.')
tdmaBcModemStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 11), )
if mibBuilder.loadTexts: tdmaBcModemStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemStatsTable.setDescription('This group contains operational attributes that measure performance of the modem component for this particular TdmaIwfBearerChannel.')
tdmaBcModemStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcModemIndex"))
if mibBuilder.loadTexts: tdmaBcModemStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemStatsEntry.setDescription('An entry in the tdmaBcModemStatsTable.')
tdmaBcModemTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcModemTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemTxBytes.setDescription('This attribute counts the number of payload bytes transmitted. The counter wraps when it exceeds the maximum value.')
tdmaBcModemRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcModemRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemRxBytes.setDescription('This attribute counts the number of payload bytes received. The counter wraps when it exceeds the maximum value.')
tdmaBcModemFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 3, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcModemFramingErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcModemFramingErrors.setDescription('This attribute counts the number of framing errors detected by the hardware. This is the absence of a stop bit after a start bit and eight bits of data. All incoming data is discarded until the next start bit is received. The counter wraps when it exceeds the maximum value.')
tdmaBcFax = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 4))
tdmaBcFaxRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 4, 1), )
if mibBuilder.loadTexts: tdmaBcFaxRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFaxRowStatusTable.setDescription('This entry controls the addition and deletion of tdmaBcFax components.')
tdmaBcFaxRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcFaxIndex"))
if mibBuilder.loadTexts: tdmaBcFaxRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFaxRowStatusEntry.setDescription('A single entry in the table represents a single tdmaBcFax component.')
tdmaBcFaxRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcFaxRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFaxRowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaBcFax components. These components cannot be added nor deleted.')
tdmaBcFaxComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcFaxComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFaxComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaBcFaxStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcFaxStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFaxStorageType.setDescription('This variable represents the storage type value for the tdmaBcFax tables.')
tdmaBcFaxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: tdmaBcFaxIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFaxIndex.setDescription('This variable represents the index for the tdmaBcFax tables.')
tdmaBcFaxOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 4, 10), )
if mibBuilder.loadTexts: tdmaBcFaxOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFaxOperTable.setDescription('This group contains operational attributes which measure the performance of the fax protocol.')
tdmaBcFaxOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcFaxIndex"))
if mibBuilder.loadTexts: tdmaBcFaxOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFaxOperEntry.setDescription('An entry in the tdmaBcFaxOperTable.')
tdmaBcFaxActiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("ecm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcFaxActiveMode.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFaxActiveMode.setDescription('This attribute indicates the mode of the fax T.30 protocol, determined during Exchange Identification (XID) negotiations. The following modes are supported: normal: Normal T.30 protocol, Error Correction Mode (ECM) not used. ecm: Error Correction Mode used. Fax error correction is done using a half-duplex page selective repeat technique.')
tdmaBcFaxProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("setup", 0), ("idle", 1), ("bcsRx", 2), ("bcsTx", 3), ("msgRx", 4), ("msgTx", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcFaxProtocolState.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFaxProtocolState.setDescription('This attribute indicates the protocol state of the fax adaptor. This attribute has one of the following values: setup: Call setup state. idle: Idle state only transmitting Synchronize (SYNC) frames. bcsRx: Receiving Binary Coded Signal (BCS) packet from modem. bcsTx: Transmitting BCS packet to modem. msgRx: Receiving fax message from modem. msgTx: Transmitting fax message to modem.')
tdmaBcFaxMessageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 4, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcFaxMessageRate.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFaxMessageRate.setDescription('This attribute indicates the fax message rate used for sending fax documents.')
tdmaBcFaxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 4, 11), )
if mibBuilder.loadTexts: tdmaBcFaxStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFaxStatsTable.setDescription('This group contains statistical attributes which measure the performance of the fax protocol.')
tdmaBcFaxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcFaxIndex"))
if mibBuilder.loadTexts: tdmaBcFaxStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFaxStatsEntry.setDescription('An entry in the tdmaBcFaxStatsTable.')
tdmaBcFaxTxPagesToMobile = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 4, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcFaxTxPagesToMobile.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFaxTxPagesToMobile.setDescription('The attribute counts the number of fax pages transmitted to the mobile. The counter wraps when it exceeds the maximum value.')
tdmaBcFaxRxPagesFromMobile = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 4, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcFaxRxPagesFromMobile.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcFaxRxPagesFromMobile.setDescription('This attribute counts the number of fax pages received from the mobile. The counter wraps when it exceeds the maximum value.')
tdmaBcDce = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 5))
tdmaBcDceRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 5, 1), )
if mibBuilder.loadTexts: tdmaBcDceRowStatusTable.setStatus('obsolete')
if mibBuilder.loadTexts: tdmaBcDceRowStatusTable.setDescription('This entry controls the addition and deletion of tdmaBcDce components.')
tdmaBcDceRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcDceIndex"))
if mibBuilder.loadTexts: tdmaBcDceRowStatusEntry.setStatus('obsolete')
if mibBuilder.loadTexts: tdmaBcDceRowStatusEntry.setDescription('A single entry in the table represents a single tdmaBcDce component.')
tdmaBcDceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcDceRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: tdmaBcDceRowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaBcDce components. These components cannot be added nor deleted.')
tdmaBcDceComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcDceComponentName.setStatus('obsolete')
if mibBuilder.loadTexts: tdmaBcDceComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaBcDceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcDceStorageType.setStatus('obsolete')
if mibBuilder.loadTexts: tdmaBcDceStorageType.setDescription('This variable represents the storage type value for the tdmaBcDce tables.')
tdmaBcDceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: tdmaBcDceIndex.setStatus('obsolete')
if mibBuilder.loadTexts: tdmaBcDceIndex.setDescription('This variable represents the index for the tdmaBcDce tables.')
tdmaBcDsc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 6))
tdmaBcDscRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 6, 1), )
if mibBuilder.loadTexts: tdmaBcDscRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcDscRowStatusTable.setDescription('This entry controls the addition and deletion of tdmaBcDsc components.')
tdmaBcDscRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcDscIndex"))
if mibBuilder.loadTexts: tdmaBcDscRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcDscRowStatusEntry.setDescription('A single entry in the table represents a single tdmaBcDsc component.')
tdmaBcDscRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcDscRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcDscRowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaBcDsc components. These components cannot be added nor deleted.')
tdmaBcDscComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcDscComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcDscComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaBcDscStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcDscStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcDscStorageType.setDescription('This variable represents the storage type value for the tdmaBcDsc tables.')
tdmaBcDscIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: tdmaBcDscIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcDscIndex.setDescription('This variable represents the index for the tdmaBcDsc tables.')
tdmaBcDscOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 6, 10), )
if mibBuilder.loadTexts: tdmaBcDscOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcDscOperTable.setDescription('This group contains operational attributes that measure the performance of the DSC asynchronous data service.')
tdmaBcDscOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcDscIndex"))
if mibBuilder.loadTexts: tdmaBcDscOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcDscOperEntry.setDescription('An entry in the tdmaBcDscOperTable.')
tdmaBcDscP0CompressionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noCompression", 0), ("compInitrResp", 1), ("compRespInitr", 2), ("compBoth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcDscP0CompressionDirection.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcDscP0CompressionDirection.setDescription('This attribute indicates the direction of compression requested from logical link 0 (LL0). This attribute has one of the following values: noCpmpression: No data compression. compInitrResp: Compression initiator to responder. compRespInitr: compression responder to initiator. compBoth: compression in both directions.')
tdmaBcDscP1CompressionMaximumCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 6, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(512, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcDscP1CompressionMaximumCodewords.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcDscP1CompressionMaximumCodewords.setDescription('This attribute indicates the maximum number of codewords to be requested from logical link 0 (LL0) for compression. A codeword is a binary number that represents a string of characters.')
tdmaBcDscP2CompressionMaximumCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 6, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcDscP2CompressionMaximumCharacters.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcDscP2CompressionMaximumCharacters.setDescription('This attribute indicates the maximum number of characters that can be represented by a single codeword to be requested from logical link 0 (LL0) for compression.')
tdmaBcDscStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 6, 11), )
if mibBuilder.loadTexts: tdmaBcDscStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcDscStatsTable.setDescription('This group contains statistical attributes that measure the performance of the DSC asynchronous data service.')
tdmaBcDscStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 6, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcDscIndex"))
if mibBuilder.loadTexts: tdmaBcDscStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcDscStatsEntry.setDescription('An entry in the tdmaBcDscStatsTable.')
tdmaBcDscTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 6, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcDscTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcDscTxBytes.setDescription('This attribute counts the number of data bytes relayed by DSC in the transmit direction (towards the mobile). The counter wraps when it exceeds the maximum value.')
tdmaBcDscRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 6, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcDscRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcDscRxBytes.setDescription('This attribute counts the number of data bytes relayed by DSC in the receive direction (from the mobile). The counter wraps when it exceeds the maximum value.')
tdmaBcRlp1 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7))
tdmaBcRlp1RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7, 1), )
if mibBuilder.loadTexts: tdmaBcRlp1RowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRlp1RowStatusTable.setDescription('This entry controls the addition and deletion of tdmaBcRlp1 components.')
tdmaBcRlp1RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcRlp1Index"))
if mibBuilder.loadTexts: tdmaBcRlp1RowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRlp1RowStatusEntry.setDescription('A single entry in the table represents a single tdmaBcRlp1 component.')
tdmaBcRlp1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcRlp1RowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRlp1RowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaBcRlp1 components. These components cannot be added nor deleted.')
tdmaBcRlp1ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcRlp1ComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRlp1ComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaBcRlp1StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcRlp1StorageType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRlp1StorageType.setDescription('This variable represents the storage type value for the tdmaBcRlp1 tables.')
tdmaBcRlp1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: tdmaBcRlp1Index.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRlp1Index.setDescription('This variable represents the index for the tdmaBcRlp1 tables.')
tdmaBcRlp1OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7, 10), )
if mibBuilder.loadTexts: tdmaBcRlp1OperTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRlp1OperTable.setDescription('This group contains operational attributes that measure performance of the TdmaIwfBearerChannel.')
tdmaBcRlp1OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcRlp1Index"))
if mibBuilder.loadTexts: tdmaBcRlp1OperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRlp1OperEntry.setDescription('An entry in the tdmaBcRlp1OperTable.')
tdmaBcRlp1Layer3L0ReqWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcRlp1Layer3L0ReqWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRlp1Layer3L0ReqWinSize.setDescription('This attribute indicates the window size for Service Access Point (SAP) 0 requested by layer 3. The window size is the maximum number of sequentially numbered Information (I) frames that may be unacknowledged at any given time.')
tdmaBcRlp1Layer3L1ReqWinSize1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcRlp1Layer3L1ReqWinSize1.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRlp1Layer3L1ReqWinSize1.setDescription('This attribute indicates the window size for Service Access Point (SAP) 1 requested by layer 3. The window size is the maximum number of sequentially numbered Information (I) frames that may be unacknowledged at any given time.')
tdmaBcRlp1T1ResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcRlp1T1ResponseTimer.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRlp1T1ResponseTimer.setDescription('This attribute indicates the current T1 timer for Service Access Points (SAP) 0 and 1 negotiated by the Radio Link Protocol 1 (RLP1), during Exchange Information (XID). This attribute specifies the time the receiving RLP1 entity shall wait for a response from the peer TIA-136-310 (formerly IS-130) application. The value used for XID negotiations can be provisioned in the TdmaCs/* Rlp1 t1ResponseTimer attribute.')
tdmaBcRlp1T2LinkActivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcRlp1T2LinkActivityTimer.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRlp1T2LinkActivityTimer.setDescription('This attribute indicates the current T2 timer for Service Access Points (SAP) 0 and 1 negotiated by the Radio Link Protocol 1 (RLP1), during Exchange Information (XID). This attribute specifies the maximum time the receiving RLP1 entity shall wait for link activity. The value used for XID negotiations can be provisioned in the TdmaCs/* Rlp1 t2LinkActivityTimer attribute.')
tdmaBcRlp1T3PeerAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcRlp1T3PeerAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRlp1T3PeerAckTimer.setDescription('This attribute indicates the current T3 timer for Service Access Points (SAP) 0 and 1 negotiated by the Radio Link Protocol 1 (RLP1), during Exchange Information (XID). The attribute specifies the maximum time the receiving RLP1 entity shall wait for the peer to ACK or NAK data. The value used for XID negotiations can be provisioned in the TdmaCs/* Rlp1 t3PeerAckTimer attribute.')
tdmaBcRlp1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7, 11), )
if mibBuilder.loadTexts: tdmaBcRlp1StatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRlp1StatsTable.setDescription('This group contains operational attributes that measure performance of the TdmaIwfBearerChannel.')
tdmaBcRlp1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcRlp1Index"))
if mibBuilder.loadTexts: tdmaBcRlp1StatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRlp1StatsEntry.setDescription('An entry in the tdmaBcRlp1StatsTable.')
tdmaBcRlp1TxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcRlp1TxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRlp1TxFrames.setDescription('This attribute counts the number of valid frames transmitted to the mobile. The counter wraps when it exceeds the maximum value.')
tdmaBcRlp1RxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcRlp1RxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRlp1RxFrames.setDescription('This attributes counts the number of valid frames received from the mobile. The counter wraps when it exceeds the maximum value.')
tdmaBcRlp1BadRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 7, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcRlp1BadRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcRlp1BadRxFrames.setDescription('This attribute count the total number of bad RLP1 frames received from the mobile. The counter wraps when it exceeds the maximum value.')
tdmaBcV42 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8))
tdmaBcV42RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 1), )
if mibBuilder.loadTexts: tdmaBcV42RowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42RowStatusTable.setDescription('This entry controls the addition and deletion of tdmaBcV42 components.')
tdmaBcV42RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcV42Index"))
if mibBuilder.loadTexts: tdmaBcV42RowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42RowStatusEntry.setDescription('A single entry in the table represents a single tdmaBcV42 component.')
tdmaBcV42RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42RowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42RowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaBcV42 components. These components cannot be added nor deleted.')
tdmaBcV42ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42ComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42ComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaBcV42StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42StorageType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42StorageType.setDescription('This variable represents the storage type value for the tdmaBcV42 tables.')
tdmaBcV42Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: tdmaBcV42Index.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42Index.setDescription('This variable represents the index for the tdmaBcV42 tables.')
tdmaBcV42OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 10), )
if mibBuilder.loadTexts: tdmaBcV42OperTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42OperTable.setDescription('This group contains operational attributes which measure V.42 error detection and correction performance.')
tdmaBcV42OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcV42Index"))
if mibBuilder.loadTexts: tdmaBcV42OperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42OperEntry.setDescription('An entry in the tdmaBcV42OperTable.')
tdmaBcV42ProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notActive", 0), ("disconnected", 1), ("linkSetup", 2), ("frameReject", 3), ("disconnectRequest", 4), ("informationTransfer", 5), ("waitingAck", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42ProtocolState.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42ProtocolState.setDescription('This attribute indicates the state of V.42. Valid states are: notActive: The V.42 link connection with the PSTN modem is not established. None of the V.42 functions including the error detection, error correction, and flow control is provided to the data call. This is the initial state of V.42. disconnected: This means that the V42 link is disconnected. linkSetup: The V.42 operation enters this state from the disconnected state after the V.42 sends to the PSTN modem a Set Asynchronous Balanced Mode Extended (SABME) frame in an attempt to establish the error control connection with the PSTN modem. frameReject: The V.42 operation enters into this state after it identifies an invalid frame sent by the peer and it sends back a frame reject (FRMR) frame to the peer. disconnectRequest: The V.42 operation enters into this state after it sends to the peer a disconnect (DISC) frame with the attempt to disconnect the V.42 error control link. informationTransfer: The V.42 enters into this state after it receives a UA (unnumbered acknowledgment) frame which the peer sent upon receipt of the SAMBE frame from IWF V.42. Once in this state, the V.42 can exchange data and supervisory information with its peer. waitingAck: The V.42 enters this state after it sends polling enquiry to its peer. The V.42 sends the polling enquiry when it receives a reject frame (REJ) from its peer or either its acknowledgment timer or inactivity timer timed out on the information frames sent out.')
tdmaBcV42TxN401FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65355))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42TxN401FrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42TxN401FrameSize.setDescription('This attribute indicates the current value of parameter N401 for V.42 which is negotiated during Exchange Information (XID). This is the maximum number of octets that can be carried in the information field of an information frame that the IWF V.42 transmits to the PSTN modem. The IWF V.42 puts this or even smaller size of data into the outgoing information frame. The value used for XID negotiations can be provisioned via TdmaCs/* V42.')
tdmaBcV42RxN401FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42RxN401FrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42RxN401FrameSize.setDescription('This attribute indicates the current value of N401, that is negotiated during Exchange Identification (XID). This is the maximum number of octets that can be carried in the information field of an information frame received from the PSTN modem. An incoming information frame carrying data octets more than this size shall be rejected by the IWF V.42. The value used for XID negotiations can be provisioned via TdmaCs/* V42.')
tdmaBcV42TxKWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42TxKWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42TxKWindowSize.setDescription('This attribute indicates the current value of k, that is negotiated during Exchange Identification (XID). This is the size of flow control sliding window used for the information frames that the V.42 transmits to the PSTN modem. This size governs the maximum number of information frames that the IWF V.42 error- correcting entity can have outstanding (that is, unacknowledged). The value used for XID negotiations can be provisioned via TdmaCs/* V42.')
tdmaBcV42RxKWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42RxKWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42RxKWindowSize.setDescription('This attribute indicates the current value of k that is negotiated during Exchange Identification (XID). This is the size of flow control sliding window used for information frames transmitted from the PSTN modem. This size governs the maximum number of information frames that the peer of the IWF V.42 error-correcting entity can have outstanding (that is, unacknowledged). The value used for XID negotiations can be provisioned via TdmaCs/* V42.')
tdmaBcV42V42ActiveInCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notActiveInCall", 0), ("activeInCall", 1))).clone('notActiveInCall')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42V42ActiveInCall.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42V42ActiveInCall.setDescription('This attribute indicates whether V42 is really being used in this data call.')
tdmaBcV42V42BisActiveInCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notActiveInCall", 0), ("activeInCall", 1))).clone('notActiveInCall')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42V42BisActiveInCall.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42V42BisActiveInCall.setDescription('This attribute indicates whether V42bis is really being used in this data call.')
tdmaBcV42StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 11), )
if mibBuilder.loadTexts: tdmaBcV42StatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42StatsTable.setDescription('This group contains statistical attributes that measure the V.42 error detection and correction performance.')
tdmaBcV42StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcV42Index"))
if mibBuilder.loadTexts: tdmaBcV42StatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42StatsEntry.setDescription('An entry in the tdmaBcV42StatsTable.')
tdmaBcV42RxIBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42RxIBytes.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42RxIBytes.setDescription('This attribute counts the total number of bytes that the V.42 actually received from the PSTN modem in a data call. The counter wraps when it exceeds the maximum value.')
tdmaBcV42TxIBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42TxIBytes.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42TxIBytes.setDescription('This attribute counts the total number of bytes that the V.42 transmitted to the PSTN modem in a data call. The counter wraps when it exceeds the maximum value.')
tdmaBcV42RxIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42RxIFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42RxIFrames.setDescription('This attribute counts the total number of Information (I) frames that the V.42 received from the PSTN modem in a data call. The counter wraps when it exceeds the maximum value.')
tdmaBcV42TxIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42TxIFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42TxIFrames.setDescription('This attribute counts the total number of information frames that the V.42 transmitted to the PSTN modem in a data call. The counter wraps when it exceeds the maximum value.')
tdmaBcV42RetransmittedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42RetransmittedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42RetransmittedFrames.setDescription('This attribute counts the total number of frames retransmitted by the IWF V.42 entity in a data call. The V.42 retransmits the same frame when the associated T401 acknowledgment timer timeouts or when a Reject (REJ) supervisory frame has been received from the PSTN modem. The counter wraps when it exceeds the maximum value.')
tdmaBcV42T1AckTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42T1AckTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42T1AckTimeouts.setDescription("This attribute counts the total number of times that the T401 timer has timed out within a data call. If this timer times-out frequently, the operator may need to adjust the provisioned parameter T401 acknowledgment timer to a larger time amount, since every time that V.42 sends out a frame it sets the T401 timer to wait for the peer's acknowledgment of the frame. When the timer times-out and no acknowledgment has been received, the V.42 sends the same frame to its peer. The counter wraps when it exceeds the maximum value.")
tdmaBcV42RemoteBusyIndications = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42RemoteBusyIndications.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42RemoteBusyIndications.setDescription('This attribute counts the total number of times the PSTN modem enters a busy state (the IWF has received a Receive Not Ready message) and asks the IWF V.42 not to send Information (I) frames to it until it is ready to receive information frames again (indicated by receipt of a Receive Ready message or a data message). The counter wraps when it exceeds the maximum value.')
tdmaBcV42LocalBusyIndications = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42LocalBusyIndications.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42LocalBusyIndications.setDescription('This attribute counts the total number of times the IWF V.42 enters in a busy condition and asks the peer to stop sending information frames until it has cleared up from the busy condition. The V.42 enters busy condition when its data buffer is about to be overflowed by the incoming Information (I) frames. The counter wraps when it exceeds the maximum value.')
tdmaBcV42BadFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42BadFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BadFramesRx.setDescription("This attribute counts the total number of bad frames the IWF V.42 has received from the PSTN remote modem within the data call. In this instance, 'bad frames' refer to the V.42 protocol error frames other than the check sequence error frames. The counter wraps when it exceeds the maximum value.")
tdmaBcV42CrcErrorsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 8, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42CrcErrorsRx.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42CrcErrorsRx.setDescription('This attribute counts the total number of frames received from the remote PSTN modem that contain incorrect frame check sequence. A high value signifies the condition of the physical medium is poor. The counter wraps when it exceeds the maximum value.')
tdmaBcV42Bis = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9))
tdmaBcV42BisRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 1), )
if mibBuilder.loadTexts: tdmaBcV42BisRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisRowStatusTable.setDescription('This entry controls the addition and deletion of tdmaBcV42Bis components.')
tdmaBcV42BisRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcV42BisIndex"))
if mibBuilder.loadTexts: tdmaBcV42BisRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisRowStatusEntry.setDescription('A single entry in the table represents a single tdmaBcV42Bis component.')
tdmaBcV42BisRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42BisRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisRowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaBcV42Bis components. These components cannot be added nor deleted.')
tdmaBcV42BisComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42BisComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaBcV42BisStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42BisStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisStorageType.setDescription('This variable represents the storage type value for the tdmaBcV42Bis tables.')
tdmaBcV42BisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: tdmaBcV42BisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisIndex.setDescription('This variable represents the index for the tdmaBcV42Bis tables.')
tdmaBcV42BisOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 10), )
if mibBuilder.loadTexts: tdmaBcV42BisOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisOperTable.setDescription('This group contains operational attributes that measure the performance of IwfV42bis.')
tdmaBcV42BisOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcV42BisIndex"))
if mibBuilder.loadTexts: tdmaBcV42BisOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisOperEntry.setDescription('An entry in the tdmaBcV42BisOperTable.')
tdmaBcV42BisProtocolModeEncoder = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("transparent", 0), ("compressed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42BisProtocolModeEncoder.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisProtocolModeEncoder.setDescription('This attribute indicates the current mode of the IwfV42bis encoder. This mode can be either: transparent: A mode of operation in which compression has been selected but data is being transmitted in uncompressed form. Transparent mode command sequences may be inserted into the data stream. compressed: A mode of operation in which data is transmitted in codewords. The encoder switches between the two modes depending on whether the data coming from the Date Terminal Equipment (DTE) is suitable for compression. The data compression function periodically determines the compressibility of the data based on a comparison of the number of bits required to represent a segment of the data stream before and after compression.')
tdmaBcV42BisProtocolModeDecoder = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("transparent", 0), ("compressed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42BisProtocolModeDecoder.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisProtocolModeDecoder.setDescription('This attribute indicates the current mode of the V.42bis decoder. This mode can be either: transparent: A mode of operation in which compression has been selected but data is being transmitted in uncompressed form. Transparent mode command sequences may be inserted into the data stream. compressed: A mode of operation in which data is transmitted in codewords. The encoder (at the mobile or PSTN) switches between the two modes depending on whether the data coming from the Date Terminal Equipment (DTE) is suitable for compression. The data compression function periodically determines the compressibility of the data based on a comparison of the number of bits required to represent a segment of the data stream before and after compression.')
tdmaBcV42BisP0CompressionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noCompression", 0), ("compInitrResp", 1), ("compRespInitr", 2), ("compBoth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42BisP0CompressionDirection.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisP0CompressionDirection.setDescription('This attribute indicates the direction in which V.42bis is active, negotiated at link setup by the data link protocol through Exchange Identification (XID) negotiation of parameter P0 (compression direction). The value used for XID negotiations can be provisioned via TdmaCs/* V42bis. This attribute has one of the following values: noCompression: No data compression. compInitrResp: The data sent by the IWF to the other entity is compressed. compRespInitr: The data received by the IWF from the other entity is compressed. compBoth: compression in both directions.')
tdmaBcV42BisP1MaximumCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42BisP1MaximumCodewords.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisP1MaximumCodewords.setDescription('This attribute indicates the maximum number of codewords in the dictionary negotiated at link setup by the data link protocol by way of the Exchange Identification (XID) negotiation of parameter P1 (number of codewords). The value used for XID negotiations can be provisioned via TdmaCs/* V42bis.')
tdmaBcV42BisP2MaximumStringSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42BisP2MaximumStringSize.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisP2MaximumStringSize.setDescription('This attribute indicates the maximum number of characters allowed in a string represented by a codeword negotiated at link setup by the data link protocol by way of the Exchange Identification (XID) negotiation of parameter P2 (maximum string size). The value used for XID negotiations can be provisioned via TdmaCs/* V42bis.')
tdmaBcV42BisLastDecodeError = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("badStepup", 1), ("codewordEqC1", 2), ("emptyCodeword", 3), ("rsvdCommand", 4), ("generalError", 5))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42BisLastDecodeError.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisLastDecodeError.setDescription('This attribute indicates last error found by the decoder. This attribute has one of the following values: none: No errors found. badStepup: Receipt of STEPUP (step up codeword size) codeword when it would cause C2 (current code word size) to exceed N1 (maximum code word size). codewordEqC1: Receipt of a codeword, at any time, equal to C1 (next empty dictionary entry). emptyCodeword: Receipt of a codeword representing an empty dictionary entry. reservedCommand: Receipt of a reserved command code. generalError: Receipt of any other error. The action taken by V.42bis on detecting an error is provisioned via TdmaCs/* V42bis.')
tdmaBcV42BisCompRatioEncoder = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 10, 1, 7), FixedPoint2().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42BisCompRatioEncoder.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisCompRatioEncoder.setDescription('This attribute indicates the number of uncompressed bytes divided by the number of compressed bytes. A value greater than one means that the data is being compressed. This is the compression ratio achieved by the V.42bis encoder running on the Passport. This attribute is relevant for both protocol modes transparent and compressed as the encoder switches between the two modes.')
tdmaBcV42BisCompRatioDecoder = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 10, 1, 8), FixedPoint2().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42BisCompRatioDecoder.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisCompRatioDecoder.setDescription('This attribute indicates the number of uncompressed bytes divided by the number of compressed bytes. A value greater than one means that the data is being compressed. This is the compression ratio achieved by the V.42bis encoder at the mobile or PSTN. This attribute is relevant for both protocol modes transparent and compressed as the encoder switches between the two modes.')
tdmaBcV42BisStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 11), )
if mibBuilder.loadTexts: tdmaBcV42BisStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisStatsTable.setDescription('This group contains statistical attributes that measure the performance of IwfV42bis.')
tdmaBcV42BisStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcV42BisIndex"))
if mibBuilder.loadTexts: tdmaBcV42BisStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisStatsEntry.setDescription('An entry in the tdmaBcV42BisStatsTable.')
tdmaBcV42BisModeChangesEncode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42BisModeChangesEncode.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisModeChangesEncode.setDescription('This attribute counts the number of mode changes (from transparent to compressed or from compressed to transparent) by the encoder. The counter wraps when it exceeds the maximum value.')
tdmaBcV42BisModeChangesDecode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42BisModeChangesDecode.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisModeChangesDecode.setDescription('This attribute counts the number of mode changes (from transparent to compressed or from compressed to transparent) by the decoder. The mode changes are determined by the encoder at the mobile or the PSTN. The counter wraps when it exceeds the maximum value.')
tdmaBcV42BisResetsEncode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42BisResetsEncode.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisResetsEncode.setDescription('This attribute counts the number of resets sent by the encoder. A reset is a command code sent by the encoder to force dictionary reinitialization. The counter wraps when it exceeds the maximum value.')
tdmaBcV42BisResetsDecode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42BisResetsDecode.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisResetsDecode.setDescription('This attribute counts the number of resets received by the decoder. A reset is a command code sent by the encoder to force dictionary reinitialization. The resets of the decoder are determined by the encoder at the mobile or PSTN. The counter wraps when it exceeds the maximum value.')
tdmaBcV42BisReinitializations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42BisReinitializations.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisReinitializations.setDescription('This attribute counts the number of times V.42bis is reinitialized because of a destructive break (a destructive break is a break that causes data to be discarded) occurring on the error-corrected connection initiated by either the mobile or PSTN. The counter wraps when it exceeds the maximum value.')
tdmaBcV42BisErrorsInDecode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 9, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcV42BisErrorsInDecode.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcV42BisErrorsInDecode.setDescription('This attribute counts the number of errors found by the decoder. The errors could be any of the following: 1.Receipt of STEPUP (step up codeword size) codeword when it would cause C2 (current code word size) to exceed N1 (maximum code word size). 2. Receipt of a codeword, at any time, equal to C1 (next empty dictionary entry). 3. Receipt of a codeword representing an empty dictionary entry. 4. Receipt of a reserved command code. 5. Receipt of any other error. The counter wraps when it exceeds the maximum value. The action taken by V.42bis on detecting any of these errors is provisioned via TdmaCs/* V42bis.')
tdmaBcUr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 10))
tdmaBcUrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 10, 1), )
if mibBuilder.loadTexts: tdmaBcUrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcUrRowStatusTable.setDescription('This entry controls the addition and deletion of tdmaBcUr components.')
tdmaBcUrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 10, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcUrIndex"))
if mibBuilder.loadTexts: tdmaBcUrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcUrRowStatusEntry.setDescription('A single entry in the table represents a single tdmaBcUr component.')
tdmaBcUrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 10, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcUrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcUrRowStatus.setDescription('This variable is used as the basis for SNMP naming of tdmaBcUr components. These components cannot be added nor deleted.')
tdmaBcUrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcUrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcUrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
tdmaBcUrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcUrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcUrStorageType.setDescription('This variable represents the storage type value for the tdmaBcUr tables.')
tdmaBcUrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 10, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: tdmaBcUrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcUrIndex.setDescription('This variable represents the index for the tdmaBcUr tables.')
tdmaBcUrOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 10, 10), )
if mibBuilder.loadTexts: tdmaBcUrOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcUrOperTable.setDescription('This group contains operational attributes that measure the performance of the UpperRelay.')
tdmaBcUrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 10, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcUrIndex"))
if mibBuilder.loadTexts: tdmaBcUrOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcUrOperEntry.setDescription('An entry in the tdmaBcUrOperTable.')
tdmaBcUrRxBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 10, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcUrRxBufferSize.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcUrRxBufferSize.setDescription('This attribute indicates the size of the receive flow control buffer. This attribute may be viewed via TdmaBc/*,*,*,* UpperRelay.')
tdmaBcUrTxFlowControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 10, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("inactive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcUrTxFlowControlState.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcUrTxFlowControlState.setDescription('This attribute indicates whether the transmit flow control is active or not. This attribute has one of the following values: active: The transmit flow control is active. inactive: The transmit flow control is inactive. This attribute may be viewed via TdmaBc/*,*,*,* UpperRelay.')
tdmaBcUrRxFlowControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 10, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("inactive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcUrRxFlowControlState.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcUrRxFlowControlState.setDescription('This attribute indicates whether the receive flow control is active or not. This attribute has one of the following values: active: The receive flow control is active. inactive: The receive flow control is inactive. This attribute may be viewed via TdmaBc/*,*,*,* UpperRelay.')
tdmaBcUrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 10, 11), )
if mibBuilder.loadTexts: tdmaBcUrStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcUrStatsTable.setDescription('This group contains operational attributes that measure the performance of the UpperRelay.')
tdmaBcUrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 10, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcCsIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcBcIndex"), (0, "Nortel-Magellan-Passport-TdmaIwfMIB", "tdmaBcUrIndex"))
if mibBuilder.loadTexts: tdmaBcUrStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcUrStatsEntry.setDescription('An entry in the tdmaBcUrStatsTable.')
tdmaBcUrTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 10, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcUrTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcUrTxFrames.setDescription('This attribute counts the number of frames that are sent in the transmit direction. The counter wraps when it exceeds the maximum value. The counter wraps when it exceeds the maximum value.')
tdmaBcUrRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 10, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcUrRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcUrRxFrames.setDescription('This attribute counts the number of frames that are sent in the receive direction. The counter wraps when it exceeds the maximum value.')
tdmaBcUrUnacknowledgedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 10, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcUrUnacknowledgedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcUrUnacknowledgedFrames.setDescription('This attribute indicates the current number of frames sent that have not been acknowledged for this instance of the UpperRelay. The counter wraps when it exceeds the maximum value.')
tdmaBcUrCumUnacknowledgedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 136, 10, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmaBcUrCumUnacknowledgedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tdmaBcUrCumUnacknowledgedFrames.setDescription('This attribute is the total number of unacknowledged frames for this instance of the UpperRelay. It is not reset when a new call starts.')
tdmaIwfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 140, 1))
tdmaIwfGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 140, 1, 5))
tdmaIwfGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 140, 1, 5, 2))
tdmaIwfGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 140, 1, 5, 2, 2))
tdmaIwfCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 140, 3))
tdmaIwfCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 140, 3, 5))
tdmaIwfCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 140, 3, 5, 2))
tdmaIwfCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 140, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-TdmaIwfMIB", tdmaCsRowStatus=tdmaCsRowStatus, tdmaBcModemVoiceLaw=tdmaBcModemVoiceLaw, tdmaCsCidDataTable=tdmaCsCidDataTable, tdmaCsV42BisP2MaximumStringSize=tdmaCsV42BisP2MaximumStringSize, tdmaIwfCapabilities=tdmaIwfCapabilities, tdmaBcFaxStatsEntry=tdmaBcFaxStatsEntry, tdmaBcModemComponentName=tdmaBcModemComponentName, tdmaCsLpOperTable=tdmaCsLpOperTable, tdmaCsRlp1Index=tdmaCsRlp1Index, tdmaBcFaxIndex=tdmaBcFaxIndex, tdmaBcBcIndex=tdmaBcBcIndex, tdmaCsModem=tdmaCsModem, tdmaCsFaxComponentName=tdmaCsFaxComponentName, tdmaCsMiscProvTable=tdmaCsMiscProvTable, tdmaBcModemStatsTable=tdmaBcModemStatsTable, tdmaCsModemStorageType=tdmaCsModemStorageType, tdmaCsV42BisProvTable=tdmaCsV42BisProvTable, tdmaIwfGroupBE=tdmaIwfGroupBE, tdmaCsV42BisActionOnError=tdmaCsV42BisActionOnError, tdmaBcDscStorageType=tdmaBcDscStorageType, tdmaCsDceRowStatusEntry=tdmaCsDceRowStatusEntry, tdmaCsRlp1RowStatusTable=tdmaCsRlp1RowStatusTable, tdmaCsFax=tdmaCsFax, tdmaCsServProvTable=tdmaCsServProvTable, tdmaBc=tdmaBc, tdmaCsLpRowStatusEntry=tdmaCsLpRowStatusEntry, tdmaBcFaxRxPagesFromMobile=tdmaBcFaxRxPagesFromMobile, tdmaBcOperTable=tdmaBcOperTable, tdmaBcUrRowStatusTable=tdmaBcUrRowStatusTable, tdmaBcFaxStorageType=tdmaBcFaxStorageType, tdmaBcUrTxFlowControlState=tdmaBcUrTxFlowControlState, tdmaCs=tdmaCs, tdmaBcAdminState=tdmaBcAdminState, tdmaBcDscRowStatusEntry=tdmaBcDscRowStatusEntry, tdmaBcV42RxKWindowSize=tdmaBcV42RxKWindowSize, tdmaBcV42RowStatus=tdmaBcV42RowStatus, tdmaBcRlp1RxFrames=tdmaBcRlp1RxFrames, tdmaBcUrRowStatus=tdmaBcUrRowStatus, tdmaBcFaxComponentName=tdmaBcFaxComponentName, tdmaBcFramerInterfaceName=tdmaBcFramerInterfaceName, tdmaCsV42Index=tdmaCsV42Index, tdmaCsRowStatusEntry=tdmaCsRowStatusEntry, tdmaBcRlp1OperTable=tdmaBcRlp1OperTable, tdmaCsDscProvEntry=tdmaCsDscProvEntry, tdmaBcRlp1T3PeerAckTimer=tdmaBcRlp1T3PeerAckTimer, tdmaBcRowStatusTable=tdmaBcRowStatusTable, tdmaBcFramerRowStatusEntry=tdmaBcFramerRowStatusEntry, tdmaCsT308=tdmaCsT308, tdmaBcUrRxFrames=tdmaBcUrRxFrames, tdmaBcCidDataEntry=tdmaBcCidDataEntry, tdmaBcV42TxN401FrameSize=tdmaBcV42TxN401FrameSize, tdmaBcDscRxBytes=tdmaBcDscRxBytes, tdmaBcDceComponentName=tdmaBcDceComponentName, tdmaCsRlp1ProvTable=tdmaCsRlp1ProvTable, tdmaCsCommentText=tdmaCsCommentText, tdmaBcModemRowStatusEntry=tdmaBcModemRowStatusEntry, tdmaBcV42RetransmittedFrames=tdmaBcV42RetransmittedFrames, tdmaBcV42BisComponentName=tdmaBcV42BisComponentName, tdmaBcUsageState=tdmaBcUsageState, tdmaBcV42BisModeChangesDecode=tdmaBcV42BisModeChangesDecode, tdmaCsV42TxKWindowSize=tdmaCsV42TxKWindowSize, tdmaBcStateTable=tdmaBcStateTable, tdmaCsRlp1T1ResponseTimer=tdmaCsRlp1T1ResponseTimer, tdmaCsDscK0Ll0WindowSize=tdmaCsDscK0Ll0WindowSize, tdmaBcFramerStatsTable=tdmaBcFramerStatsTable, tdmaCsDscLl1BufferSize=tdmaCsDscLl1BufferSize, tdmaBcV42BisRowStatusTable=tdmaBcV42BisRowStatusTable, tdmaBcDscIndex=tdmaBcDscIndex, tdmaCsV42ProvEntry=tdmaCsV42ProvEntry, tdmaBcFramerLinkEntry=tdmaBcFramerLinkEntry, tdmaBcModemStorageType=tdmaBcModemStorageType, tdmaBcRlp1TxFrames=tdmaBcRlp1TxFrames, tdmaCsV42BisProvEntry=tdmaCsV42BisProvEntry, tdmaBcV42BadFramesRx=tdmaBcV42BadFramesRx, tdmaBcUrUnacknowledgedFrames=tdmaBcUrUnacknowledgedFrames, tdmaBcUrStatsTable=tdmaBcUrStatsTable, tdmaBcCustomerIdentifier=tdmaBcCustomerIdentifier, tdmaBcV42RxN401FrameSize=tdmaBcV42RxN401FrameSize, tdmaBcUrRxFlowControlState=tdmaBcUrRxFlowControlState, tdmaCsRlp1=tdmaCsRlp1, tdmaCsRlp1ProvEntry=tdmaCsRlp1ProvEntry, tdmaBcUrStorageType=tdmaBcUrStorageType, tdmaBcDscComponentName=tdmaBcDscComponentName, tdmaCsStateTable=tdmaCsStateTable, tdmaBcRlp1RowStatusEntry=tdmaBcRlp1RowStatusEntry, tdmaBcDscP1CompressionMaximumCodewords=tdmaBcDscP1CompressionMaximumCodewords, tdmaBcModemProtocolState=tdmaBcModemProtocolState, tdmaBcDscTxBytes=tdmaBcDscTxBytes, tdmaCsT313=tdmaCsT313, tdmaCsV42TxN401FrameSize=tdmaCsV42TxN401FrameSize, tdmaCsDscK1Ll1WindowSize=tdmaCsDscK1Ll1WindowSize, tdmaBcV42T1AckTimeouts=tdmaBcV42T1AckTimeouts, tdmaCsT305=tdmaCsT305, tdmaCsDce=tdmaCsDce, tdmaBcMateBearerChannel=tdmaBcMateBearerChannel, tdmaCsModemComponentName=tdmaCsModemComponentName, tdmaCsFaxRowStatusTable=tdmaCsFaxRowStatusTable, tdmaCsSupportedService=tdmaCsSupportedService, tdmaCsLpComponentName=tdmaCsLpComponentName, tdmaBcV42StatsTable=tdmaBcV42StatsTable, tdmaBcUrStatsEntry=tdmaBcUrStatsEntry, tdmaIwfCapabilitiesBE01=tdmaIwfCapabilitiesBE01, tdmaCsDscRowStatusEntry=tdmaCsDscRowStatusEntry, tdmaCsOperationalState=tdmaCsOperationalState, tdmaCsDsc=tdmaCsDsc, tdmaCsFaxStorageType=tdmaCsFaxStorageType, tdmaBcDscRowStatusTable=tdmaBcDscRowStatusTable, tdmaBcStateEntry=tdmaBcStateEntry, tdmaCsErroredLFrames=tdmaCsErroredLFrames, tdmaBcRlp1ComponentName=tdmaBcRlp1ComponentName, tdmaIwfGroup=tdmaIwfGroup, tdmaBcFramerRowStatusTable=tdmaBcFramerRowStatusTable, tdmaCsCidDataEntry=tdmaCsCidDataEntry, tdmaBcV42BisP1MaximumCodewords=tdmaBcV42BisP1MaximumCodewords, tdmaCsFaxRowStatusEntry=tdmaCsFaxRowStatusEntry, tdmaBcV42StatsEntry=tdmaBcV42StatsEntry, tdmaBcDscP2CompressionMaximumCharacters=tdmaBcDscP2CompressionMaximumCharacters, tdmaCsDscP2CompressionMaximumCharacters=tdmaCsDscP2CompressionMaximumCharacters, tdmaCsRlp1T3PeerAckTimer=tdmaCsRlp1T3PeerAckTimer, tdmaBcDscStatsEntry=tdmaBcDscStatsEntry, tdmaBcState=tdmaBcState, tdmaBcV42BisModeChangesEncode=tdmaBcV42BisModeChangesEncode, tdmaBcFramerRxBytes=tdmaBcFramerRxBytes, tdmaBcV42BisRowStatus=tdmaBcV42BisRowStatus, tdmaCsRlp1ComponentName=tdmaCsRlp1ComponentName, tdmaCsSupportedTechnology=tdmaCsSupportedTechnology, tdmaBcModemRate=tdmaBcModemRate, tdmaBcV42BisStatsTable=tdmaBcV42BisStatsTable, tdmaCsLpOperEntry=tdmaCsLpOperEntry, tdmaBcV42RowStatusTable=tdmaBcV42RowStatusTable, tdmaBcV42=tdmaBcV42, tdmaCsVoiceLaw=tdmaCsVoiceLaw, tdmaBcFaxStatsTable=tdmaBcFaxStatsTable, tdmaBcModemStatsEntry=tdmaBcModemStatsEntry, tdmaCsDscIndex=tdmaCsDscIndex, tdmaBcDceRowStatusTable=tdmaBcDceRowStatusTable, tdmaCsV42Bis=tdmaCsV42Bis, tdmaCsV42RowStatusEntry=tdmaCsV42RowStatusEntry, tdmaBcModemOperTable=tdmaBcModemOperTable, tdmaCsV42BisRowStatus=tdmaCsV42BisRowStatus, tdmaCsLpRowStatus=tdmaCsLpRowStatus, tdmaBcFramerTxFrames=tdmaBcFramerTxFrames, tdmaCsFaxRowStatus=tdmaCsFaxRowStatus, tdmaBcUr=tdmaBcUr, tdmaBcFramerOperationalState=tdmaBcFramerOperationalState, tdmaCsUsageState=tdmaCsUsageState, tdmaBcFaxOperEntry=tdmaBcFaxOperEntry, tdmaBcFaxMessageRate=tdmaBcFaxMessageRate, tdmaBcComponentName=tdmaBcComponentName, tdmaCsV42BisRowStatusEntry=tdmaCsV42BisRowStatusEntry, tdmaCsDscRowStatusTable=tdmaCsDscRowStatusTable, tdmaBcV42TxIBytes=tdmaBcV42TxIBytes, tdmaBcV42BisCompRatioDecoder=tdmaBcV42BisCompRatioDecoder, tdmaCsDscStorageType=tdmaCsDscStorageType, tdmaBcFaxActiveMode=tdmaBcFaxActiveMode, tdmaBcDce=tdmaBcDce, tdmaCsVirtualRouterName=tdmaCsVirtualRouterName, tdmaCsLpModemsSupported=tdmaCsLpModemsSupported, tdmaCsV42BisComponentName=tdmaCsV42BisComponentName, tdmaBcRlp1OperEntry=tdmaBcRlp1OperEntry, tdmaCsDscP0CompressionDirection=tdmaCsDscP0CompressionDirection, tdmaBcV42BisP0CompressionDirection=tdmaBcV42BisP0CompressionDirection, tdmaBcModemOperEntry=tdmaBcModemOperEntry, tdmaCsModemIndex=tdmaCsModemIndex, tdmaBcDceRowStatusEntry=tdmaBcDceRowStatusEntry, tdmaCsDscProvTable=tdmaCsDscProvTable, tdmaCsRlp1T2LinkActivityTimer=tdmaCsRlp1T2LinkActivityTimer, tdmaBcModemModemAlgorithmInUse=tdmaBcModemModemAlgorithmInUse, tdmaCsCustomerIdentifier=tdmaCsCustomerIdentifier, tdmaBcV42LocalBusyIndications=tdmaBcV42LocalBusyIndications, tdmaCsV42RxKWindowSize=tdmaCsV42RxKWindowSize, tdmaBcOperationalState=tdmaBcOperationalState, tdmaCsAdminState=tdmaCsAdminState, tdmaCsV42RxN401FrameSize=tdmaCsV42RxN401FrameSize, tdmaBcV42BisErrorsInDecode=tdmaBcV42BisErrorsInDecode, tdmaBcFramerUsageState=tdmaBcFramerUsageState, tdmaBcV42StorageType=tdmaBcV42StorageType, tdmaBcV42BisResetsEncode=tdmaBcV42BisResetsEncode, tdmaBcV42BisLastDecodeError=tdmaBcV42BisLastDecodeError, tdmaBcModem=tdmaBcModem, tdmaBcFaxRowStatus=tdmaBcFaxRowStatus, tdmaBcV42RxIFrames=tdmaBcV42RxIFrames, tdmaBcFramerStateTable=tdmaBcFramerStateTable, tdmaBcFramerIndex=tdmaBcFramerIndex, tdmaBcV42RemoteBusyIndications=tdmaBcV42RemoteBusyIndications, tdmaBcFramerStateEntry=tdmaBcFramerStateEntry, tdmaCsV42T400DetectTimer=tdmaCsV42T400DetectTimer, tdmaCsCsIndex=tdmaCsCsIndex, tdmaBcRlp1Layer3L0ReqWinSize=tdmaBcRlp1Layer3L0ReqWinSize, tdmaCsV42BisIndex=tdmaCsV42BisIndex, tdmaBcDscOperEntry=tdmaBcDscOperEntry, tdmaCsV42StorageType=tdmaCsV42StorageType, tdmaBcV42BisIndex=tdmaBcV42BisIndex, tdmaCsLpStorageType=tdmaCsLpStorageType, tdmaBcDscRowStatus=tdmaBcDscRowStatus, tdmaCsCurrentCalls=tdmaCsCurrentCalls, tdmaBcV42CrcErrorsRx=tdmaBcV42CrcErrorsRx, tdmaCsCallsReleasedAbnormal=tdmaCsCallsReleasedAbnormal, tdmaBcRlp1T2LinkActivityTimer=tdmaBcRlp1T2LinkActivityTimer, tdmaBcV42BisResetsDecode=tdmaBcV42BisResetsDecode, tdmaBcRlp1StorageType=tdmaBcRlp1StorageType, tdmaCsV42N400RetransLimit=tdmaCsV42N400RetransLimit, tdmaCsModemRowStatus=tdmaCsModemRowStatus, tdmaBcFramerComponentName=tdmaBcFramerComponentName, tdmaBcModemRxBytes=tdmaBcModemRxBytes, tdmaCsModemRowStatusEntry=tdmaCsModemRowStatusEntry, tdmaBcFramerRxFrames=tdmaBcFramerRxFrames, tdmaBcModemIndex=tdmaBcModemIndex, tdmaCsDscComponentName=tdmaCsDscComponentName, tdmaBcV42BisReinitializations=tdmaBcV42BisReinitializations, tdmaCsV42T403IdleProbeTimer=tdmaCsV42T403IdleProbeTimer, tdmaCsMiscProvEntry=tdmaCsMiscProvEntry, tdmaCsV42ProvTable=tdmaCsV42ProvTable, tdmaCsComponentName=tdmaCsComponentName, tdmaBcRlp1T1ResponseTimer=tdmaBcRlp1T1ResponseTimer, tdmaCsModemRowStatusTable=tdmaCsModemRowStatusTable, tdmaCsCallsReleasedNormal=tdmaCsCallsReleasedNormal, tdmaBcV42ComponentName=tdmaBcV42ComponentName, tdmaCsDscLl0BufferSize=tdmaCsDscLl0BufferSize, tdmaBcV42V42BisActiveInCall=tdmaBcV42V42BisActiveInCall, tdmaBcRlp1RowStatus=tdmaBcRlp1RowStatus, tdmaCsFaxIndex=tdmaCsFaxIndex, tdmaBcV42BisProtocolModeEncoder=tdmaBcV42BisProtocolModeEncoder, tdmaBcFaxTxPagesToMobile=tdmaBcFaxTxPagesToMobile, tdmaBcV42BisStorageType=tdmaBcV42BisStorageType, tdmaBcV42Bis=tdmaBcV42Bis, tdmaCsRowStatusTable=tdmaCsRowStatusTable, tdmaBcDscStatsTable=tdmaBcDscStatsTable, tdmaCsLpIndex=tdmaCsLpIndex, tdmaBcV42BisOperTable=tdmaBcV42BisOperTable, tdmaCsDscRowStatus=tdmaCsDscRowStatus, tdmaIwfGroupBE01=tdmaIwfGroupBE01, tdmaBcRowStatus=tdmaBcRowStatus, tdmaCsV42BisP0CompressionDirection=tdmaCsV42BisP0CompressionDirection, tdmaCsStateEntry=tdmaCsStateEntry, tdmaBcModemFramingErrors=tdmaBcModemFramingErrors, tdmaCsV42RowStatus=tdmaCsV42RowStatus, tdmaBcRlp1StatsTable=tdmaBcRlp1StatsTable, tdmaBcV42BisRowStatusEntry=tdmaBcV42BisRowStatusEntry, tdmaBcRlp1Layer3L1ReqWinSize1=tdmaBcRlp1Layer3L1ReqWinSize1, tdmaCsDceComponentName=tdmaCsDceComponentName, tdmaCsStorageType=tdmaCsStorageType, tdmaBcV42Index=tdmaBcV42Index, tdmaBcRowStatusEntry=tdmaBcRowStatusEntry, tdmaBcV42TxIFrames=tdmaBcV42TxIFrames, tdmaBcV42TxKWindowSize=tdmaBcV42TxKWindowSize, tdmaCsDceRowStatus=tdmaCsDceRowStatus, tdmaBcDceRowStatus=tdmaBcDceRowStatus, tdmaBcModemTxBytes=tdmaBcModemTxBytes, tdmaIwfMIB=tdmaIwfMIB, tdmaBcFramerProvEntry=tdmaBcFramerProvEntry, tdmaCsV42BisStorageType=tdmaCsV42BisStorageType, tdmaBcCidDataTable=tdmaBcCidDataTable, tdmaIwfGroupBE01A=tdmaIwfGroupBE01A)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-TdmaIwfMIB", tdmaBcLastResponseCode=tdmaBcLastResponseCode, tdmaCsStatsEntry=tdmaCsStatsEntry, tdmaBcDsc=tdmaBcDsc, tdmaBcV42RxIBytes=tdmaBcV42RxIBytes, tdmaBcFax=tdmaBcFax, tdmaBcV42OperEntry=tdmaBcV42OperEntry, tdmaCsTIwf2=tdmaCsTIwf2, tdmaBcDscOperTable=tdmaBcDscOperTable, tdmaBcDscP0CompressionDirection=tdmaBcDscP0CompressionDirection, tdmaBcRlp1BadRxFrames=tdmaBcRlp1BadRxFrames, tdmaCsStatsTable=tdmaCsStatsTable, tdmaBcV42OperTable=tdmaBcV42OperTable, tdmaBcUrTxFrames=tdmaBcUrTxFrames, tdmaCsDscP1CompressionMaximumCodewords=tdmaCsDscP1CompressionMaximumCodewords, tdmaBcV42BisP2MaximumStringSize=tdmaBcV42BisP2MaximumStringSize, tdmaBcFramerLinkTable=tdmaBcFramerLinkTable, tdmaBcV42BisStatsEntry=tdmaBcV42BisStatsEntry, tdmaBcV42V42ActiveInCall=tdmaBcV42V42ActiveInCall, tdmaBcRlp1StatsEntry=tdmaBcRlp1StatsEntry, tdmaIwfCapabilitiesBE01A=tdmaIwfCapabilitiesBE01A, tdmaBcModemPstnSideFlowControlState=tdmaBcModemPstnSideFlowControlState, tdmaBcModemAutobaud=tdmaBcModemAutobaud, tdmaCsT999=tdmaCsT999, tdmaBcRlp1=tdmaBcRlp1, tdmaBcDceStorageType=tdmaBcDceStorageType, tdmaBcCallType=tdmaBcCallType, tdmaCsV42RowStatusTable=tdmaCsV42RowStatusTable, tdmaBcModemRowStatus=tdmaBcModemRowStatus, tdmaBcV42RowStatusEntry=tdmaBcV42RowStatusEntry, tdmaBcDceIndex=tdmaBcDceIndex, tdmaBcFaxRowStatusTable=tdmaBcFaxRowStatusTable, tdmaCsV42FcsLength=tdmaCsV42FcsLength, tdmaBcFramerStorageType=tdmaBcFramerStorageType, tdmaBcFramerRowStatus=tdmaBcFramerRowStatus, tdmaCsLp=tdmaCsLp, tdmaBcUrOperTable=tdmaBcUrOperTable, tdmaCsV42ComponentName=tdmaCsV42ComponentName, tdmaCsRlp1StorageType=tdmaCsRlp1StorageType, tdmaBcV42BisCompRatioEncoder=tdmaBcV42BisCompRatioEncoder, tdmaCsV42BisRowStatusTable=tdmaCsV42BisRowStatusTable, tdmaBcOperEntry=tdmaBcOperEntry, tdmaCsCallsSetUp=tdmaCsCallsSetUp, tdmaBcUrIndex=tdmaBcUrIndex, tdmaBcModemOutbandFlowControl=tdmaBcModemOutbandFlowControl, tdmaBcUrRxBufferSize=tdmaBcUrRxBufferSize, tdmaCsV42T402AckDelayTimer=tdmaCsV42T402AckDelayTimer, tdmaBcFramerStatsEntry=tdmaBcFramerStatsEntry, tdmaBcV42BisProtocolModeDecoder=tdmaBcV42BisProtocolModeDecoder, tdmaBcUrComponentName=tdmaBcUrComponentName, tdmaBcStorageType=tdmaBcStorageType, tdmaBcFaxProtocolState=tdmaBcFaxProtocolState, tdmaCsDceStorageType=tdmaCsDceStorageType, tdmaCsMscIpAddress=tdmaCsMscIpAddress, tdmaBcModemRowStatusTable=tdmaBcModemRowStatusTable, tdmaBcRlp1RowStatusTable=tdmaBcRlp1RowStatusTable, tdmaBcRlp1Index=tdmaBcRlp1Index, tdmaCsV42T401AckTimer=tdmaCsV42T401AckTimer, tdmaBcFramerFramingType=tdmaBcFramerFramingType, tdmaBcV42BisOperEntry=tdmaBcV42BisOperEntry, tdmaBcV42ProtocolState=tdmaBcV42ProtocolState, tdmaCsServProvEntry=tdmaCsServProvEntry, tdmaBcModemAsyncMode=tdmaBcModemAsyncMode, tdmaBcUrRowStatusEntry=tdmaBcUrRowStatusEntry, tdmaBcFaxRowStatusEntry=tdmaBcFaxRowStatusEntry, tdmaBcCsIndex=tdmaBcCsIndex, tdmaBcModemOutbandBreak=tdmaBcModemOutbandBreak, tdmaBcUrCumUnacknowledgedFrames=tdmaBcUrCumUnacknowledgedFrames, tdmaIwfCapabilitiesBE=tdmaIwfCapabilitiesBE, tdmaCsV42BisP1MaximumCodewords=tdmaCsV42BisP1MaximumCodewords, tdmaBcFaxOperTable=tdmaBcFaxOperTable, tdmaCsRlp1RowStatusEntry=tdmaCsRlp1RowStatusEntry, tdmaCsTIwf1=tdmaCsTIwf1, tdmaBcFramer=tdmaBcFramer, tdmaBcModemMobileSideFlowControlState=tdmaBcModemMobileSideFlowControlState, tdmaCsT303=tdmaCsT303, tdmaBcFramerAdminState=tdmaBcFramerAdminState, tdmaBcFramerProvTable=tdmaBcFramerProvTable, tdmaCsLpConfiguredBearerChannels=tdmaCsLpConfiguredBearerChannels, tdmaCsRlp1RowStatus=tdmaCsRlp1RowStatus, tdmaCsV42=tdmaCsV42, tdmaCsDceIndex=tdmaCsDceIndex, tdmaCsCallsRequested=tdmaCsCallsRequested, tdmaCsLpActiveCalls=tdmaCsLpActiveCalls, tdmaCsLpRowStatusTable=tdmaCsLpRowStatusTable, tdmaBcUrOperEntry=tdmaBcUrOperEntry, tdmaCsDceRowStatusTable=tdmaCsDceRowStatusTable)
