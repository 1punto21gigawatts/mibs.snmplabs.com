#
# PySNMP MIB module CISCO-MGX82XX-DSX3-BERT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MGX82XX-DSX3-BERT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:07:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
axisDiagnostics, = mibBuilder.importSymbols("BASIS-MIB", "axisDiagnostics")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, Counter32, NotificationType, Gauge32, TimeTicks, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, MibIdentifier, Counter64, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "NotificationType", "Gauge32", "TimeTicks", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "MibIdentifier", "Counter64", "Unsigned32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoMgx82xxDsx3BertMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 39))
ciscoMgx82xxDsx3BertMIB.setRevisions(('2003-01-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoMgx82xxDsx3BertMIB.setRevisionsDescriptions(('Initial version of the MIB. The content of this MIB was originally available in CISCO-WAN-AXIPOP-MIB defined using SMIv1. The applicable objects from CISCO-WAN-AXIPOP-MIB are defined using SMIv2 in this MIB. Also the descriptions of some of the objects have been modified.',))
if mibBuilder.loadTexts: ciscoMgx82xxDsx3BertMIB.setLastUpdated('200301020000Z')
if mibBuilder.loadTexts: ciscoMgx82xxDsx3BertMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoMgx82xxDsx3BertMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoMgx82xxDsx3BertMIB.setDescription('The MIB Module for BERT (Bit Error Rate Testing) on ds3 interfaces in some of the cards (Service Modules) in MGX products. This MIB is applicable for following T3/E3 Service Modules: FRSM-2T3E3 : Frame Relay Service Module. CESM-T3E3 : Circuit Emulation Service Module.')
dsx3bert = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 6, 2))
dsx3bertControl = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAction", 0), ("acquireBert", 1), ("releaseBert", 2), ("cnfBert", 3), ("startBert", 4), ("modBert", 5), ("delBert", 6))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3bertControl.setStatus('current')
if mibBuilder.loadTexts: dsx3bertControl.setDescription('This object controls all the SET operations on this MIB group. noAction : No action is taken. This value can not be written This object contains value noAction(0) just after setting it to delBert(6). acquireBert : Acquire BERT resources. cnfBert : Configure the required BERT test. startBert : The configured test has to be started. modBert : Modify parameters for the ongoing BERT test. delBert : Running BERT test has to be stopped. This value is write-only. This value is never returned for a SNMP Get request. For Performing BERT : Following sequence need to be done. * acquire BERT by setting this object to acquireBert(1). * configure BERT by setting this object to cnfBert(3) * Start BERT by setting this object to startBert(4). * Modify BERT parameters by setting this object to modBert(5).')
dsx3bertResourceStatus = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("free", 1), ("inUse", 2))).clone('free')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3bertResourceStatus.setStatus('current')
if mibBuilder.loadTexts: dsx3bertResourceStatus.setDescription('All of bert resources can be used by only one user at a time. This object provides the status of the resources.')
dsx3bertOwner = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3bertOwner.setStatus('current')
if mibBuilder.loadTexts: dsx3bertOwner.setDescription('This refers to the user who owns the BERT resources. If the user is a CLI user, then this is username. If it is SNMP Manager, then this would be the ASCII form of the IP address.')
dsx3bertUserId = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3bertUserId.setStatus('current')
if mibBuilder.loadTexts: dsx3bertUserId.setDescription('This identifies the user who wants to do a SET operation on this group. This will be compared against bertOwner and access will be given only if it matches. Hence, for every SET request, this object should have a valid value. If the user is a CLI user, then this is login username. If it is SNMP Manager, then this would be the ASCII form of the IP address.')
dsx3bertStatus = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inactive", 1), ("bertInSync", 2), ("bertOutOfSync", 3), ("farEndInLoop", 4), ("metallicInLoop", 5), ("bertFailed", 6))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3bertStatus.setStatus('current')
if mibBuilder.loadTexts: dsx3bertStatus.setDescription('This object provides the status of BERT in the shelf. The possible values are : inactive (1) : BERT not in progress bertInSync (2) : BERT is activated and receive side is synchronized with the incoming sequence of patterns. bertOutOfSync (3) : BERT is activated and receive is out of synchronization with the incoming sequence of patterns. farEndInLoop (4) : Far End is in loop back. metallicInLoop(5) : Local Loopback set. bertFailed (6) : BERT Failed. farEndInLoop(4) is not applicable for CESM-T3E3 and FRSM-2T3E3.')
dsx3bertTestMedium = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("line", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3bertTestMedium.setStatus('current')
if mibBuilder.loadTexts: dsx3bertTestMedium.setDescription('Specifies whether the BERT is to be tested on a port or an entire T3/E3 line. For a BERT test, this object must be set. For CESM-T3E3 and FRSM-@T3E3, this object must be set to line(2).')
dsx3bertPort = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3bertPort.setStatus('current')
if mibBuilder.loadTexts: dsx3bertPort.setDescription('This object specifies the port number for BERT. Port level bert is not supported in CESM-T3E3 and FRSM-2T3E3. So for these cards, the value must be always 1. ')
dsx3bertLine = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3bertLine.setStatus('current')
if mibBuilder.loadTexts: dsx3bertLine.setDescription('This object specifies the line number for BERT. If the dsx3bertTestMedium is set to port(1), this represents the line to which the port (dsx3bertPort) belongs. The value supported depends upon the type of card (service module).')
dsx3bertMode = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bertPatternTest", 1), ("loopback", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3bertMode.setStatus('current')
if mibBuilder.loadTexts: dsx3bertMode.setDescription('This object specifies the mode, the BERT module is to be configured for. The value loopback(2) is not supported in CESM-T3E3 and FRSM-2T3E3 . ')
dsx3bertPattern = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("allOnes", 1), ("allZeros", 2), ("alternateOneZero", 3), ("doubleOneZero", 4), ("threeInTwentyFour", 5), ("oneInSixteen", 6), ("oneInEight", 7), ("oneInFour", 8), ("sfLoopUp", 9), ("sfLoopDown", 10), ("threeBit", 11), ("fourBit", 12), ("fiveBit", 13), ("sixBit", 14), ("sevenBit", 15), ("fracT1LoopUp", 16), ("fracT1LoopDown", 17), ("nineBit", 18), ("tenBit", 19), ("elevenBit", 20), ("fifteenBit", 21), ("seventeenBit", 22), ("eighteenBit", 23), ("twentyBit", 24), ("twentyBitQRSS", 25), ("twentyOneBit", 26), ("twentyTwoBit", 27), ("twentyThreeBit", 28), ("twentyFiveBit", 29), ("twentyEightBit", 30), ("twentyNineBit", 31), ("thirtyOneBit", 32), ("thirtyTwo", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3bertPattern.setReference('CCITT/ITU O.150, O.151, O.152, O.153, O.161 Standards.')
if mibBuilder.loadTexts: dsx3bertPattern.setStatus('current')
if mibBuilder.loadTexts: dsx3bertPattern.setDescription("This variable determines BERT pattern to be transmitted on the interface identified by dsx3bertLine or dsx3bertPort. Bit error measurements are widely used to assess the performance of a digital transmission equipment. Precise error measurement requires that the bit pattern transmitted is known before hand. During BER testing a known pattern is transmitted on a interface. The pattern received on the receive side is checked for bit errors. In order to measure the performance of digital line under real condition this patterns should also simulate real traffic as closely as possible. There are two categories of test patterns that can be generated by a BERT equipment: repetitive and pseudo-random. The former test patterns are zeroes or ones or alternating zeroes and ones; the latter patterns are exponential numbers and conform to CCITT/ITU O.151, O.153. There are different patterns for different interface speeds. This object allows the user to configure this BERT patterns. The supported values are : Repetitive Patterns allOnes(1): All Ones(Continuous Marks). This is repeating pattern of ones(...1111...). This provides testing of maximum power level requirements. The all one pattern test causes the repeater to consume the maximum amount of power. If there is insufficient DC span power then the repeater may begin to fail. Typically this pattern is used for a simple continuity check. It may also be used to detect the presence of unwanted loop in the network. allZeros(2): All Zeroes(Continuous spaces). This is repeating pattern of zeros(...000...). The use of this pattern is to test and verify that the ones density policing mechanism is functioning properly. This pattern must be used in circuits optioned for B8ZS. alternateOneZero(3): Alternate one/zero pattern(..1010..). This pattern produces a 50% ones density. It is used to stress the repeater's DC power consumption. doubleOneZero(4): Double alternate one/zero(..10101010..). threeInTwentyFour(5): This is a 24 bit pattern which contains 3 ones. The largest string of consecutive zeros is fifteen. This pattern is used primarily to test timing(clock) recovery and may be used framed or unframed for that purpose. This pattern covers both the minimum ones density and the maximum number of consecutive zeros. oneInSixteen(6): N repetitive pattern, 1 in 16. oneInEight(7): This is an eight bit pattern which contains single one. This pattern is used primarily to test timing(clock) recovery and may be used framed or unframed for that purpose. This pattern is used to verify frame synchronization by providing the minimum acceptable pulse density. oneInFour(8): This pattern is standard loop up remote code. Typically it is used when the loop up remote test fails to place the remote system into loopback. sfLoopUp (9): D4/SF Loopback activate/up Valid only for T1 line. sfLoopDown(10): D4/SF Loopback deactivate/down Valid only for T1 line. threeBit (11): Repetitive patterns of 3 bits in length. fourBit (12): Repetitive patterns of 4 bits in length. fiveBit (13): Repetitive patterns of 5 bits in length. sixBit (14): Repetitive patterns of 6 bits in length. sevenBit (15): Repetitive patterns of 7 bits in length. fracT1LoopUp(16): Fractional T1 Loopback activate/up. fracT1LoopDown(17): Fractional T1 Loopback deactivate/down. nineBit (18): Repetitive patterns of 9 bits in length. tenBit (19): Repetitive patterns of 10 bits in length. elevenBit (20): Repetitive patterns of 11 bits in length. fifteenBit (21): Repetitive patterns of 15 bits in length. seventeenBit (22): Repetitive patterns of 17 bits in length. eighteenBit (23): Repetitive patterns of 18 bits in length. twentyBit (24): Repetitive patterns of 20 bits in length. twentyBitQRSS(25): 20 bits of Quasi Random Signal Source. twentyOneBit (26): Repetitive patterns of 21 bits in length. twentyTwoBit (27): Repetitive patterns of 22 bits in length. twentyThreeBit (28): Repetitive patterns of 23 bits in length. twentyFiveBit (29): Repetitive patterns of 25 bits in length. twentyEightBit (30): Repetitive patterns of 28 bits in length. twentyNineBit (31): Repetitive patterns of 29 bits in length. thirtyOneBit (32): Repetitive patterns of 32 bits in length. thirtyTwo (33): Repetitive patterns of 33 bits in length. ")
dsx3bertLoopback = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("farEndLoopback", 1), ("metallicLoopback", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3bertLoopback.setStatus('current')
if mibBuilder.loadTexts: dsx3bertLoopback.setDescription('This object specifies the type of loopback to be established/de-established. The value farEndLoopback(1) is not supported in CESM-T3E3 and FRSM-2T3E3, where the default value for this object shall be 2.')
dsx3bertStartTime = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 12), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3bertStartTime.setStatus('current')
if mibBuilder.loadTexts: dsx3bertStartTime.setDescription('This object contains the time at which BERT started. The syntax is hh:mm:ss. The time zone is as configured in the shelf. This object contains zero length string for following values of dsx3bertControl: noAction (0), acquireBert (1), releaseBert (2), cnfBert (3).')
dsx3bertStartDate = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 13), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3bertStartDate.setStatus('current')
if mibBuilder.loadTexts: dsx3bertStartDate.setDescription('This object contains the date on which BERT started. The syntax is yy/mm/dd. This object contains zero length string for following values of dsx3bertControl: noAction (0), acquireBert (1), releaseBert (2), cnfBert (3).')
dsx3bertBitCountUpper = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3bertBitCountUpper.setStatus('current')
if mibBuilder.loadTexts: dsx3bertBitCountUpper.setDescription('This number of bits transmitted is represented in an encoded form as a 64-bit counter. This object gives the upper 31 bits of the 64 bit counter. The 32nd bit is not available.')
dsx3bertBitCountLower = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3bertBitCountLower.setStatus('current')
if mibBuilder.loadTexts: dsx3bertBitCountLower.setDescription('This number of bits transmitted is represented in an encoded form as a 64-bit counter. This object gives the lower 31 bits of the 64 bit counter. The 32nd bit is not available.')
dsx3bertBitErrorCountUpper = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3bertBitErrorCountUpper.setStatus('current')
if mibBuilder.loadTexts: dsx3bertBitErrorCountUpper.setDescription('This number of bits received in error is represented in an encoded form as a 64-bit counter. This object gives the upper 31 bits of the 64 bit counter. The 32nd bit is not available.')
dsx3bertBitErrorCountLower = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3bertBitErrorCountLower.setStatus('current')
if mibBuilder.loadTexts: dsx3bertBitErrorCountLower.setDescription('This number of bits received in error is represented in an encoded form as a 64-bit counter. This object gives the lower 31 bits of the 64 bit counter. The 32nd bit is not available.')
dsx3bertErrorInsertionRate = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("errorInsertionDisabled", 1), ("oneInTen", 2), ("oneInTenPowerTwo", 3), ("oneInTenPowerThree", 4), ("oneInTenPowerFour", 5), ("oneInTenPowerFive", 6), ("oneInTenPowerSix", 7), ("oneInTenPowerSeven", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx3bertErrorInsertionRate.setStatus('current')
if mibBuilder.loadTexts: dsx3bertErrorInsertionRate.setDescription('This object is used for injecting continuous errors into transmitted BERT pattern. The errors are inserted in a BERT pattern sent, in order to do sanity check on receive interface in the event that no bit errors are detected. Injecting errors allows users to stress communication links and to check the functionality of error monitoring equipment along the path. Once set to send continuous errors, errors will be inserted at the configured rate until set to errorInsertionDisabled(1). The possible values are : errorInsertionDisabled(1) : no bit errors are inserted. oneInTen(2) : insert bit errors at the rate of 1 bit error per 10 bits (10^-1) transmitted. oneInTenPowerTwo(3) : insert bit errors at the rate of 1 bit error per 100 bits (10^-2) transmitted. oneInTenPowerThree(4): insert bit errors at the rate of 1 bit error per 1000 bits (10^-3) transmitted. oneInTenPowerFour(5): insert bit errors at the rate of 1 bit error per 10000 (10^-4) bits transmitted. oneInTenPowerFive(6): insert bit errors at the rate of 1 bit error per 100000 bits (10^-5) transmitted. oneInTenPowerSix(7) : insert bit errors at the rate of 1 bit error per 1000000 bits (10^-6) transmitted. oneInTenPowerSeven(8): insert bit errors at the rate of 1 bit error per 10,000,000 (10^-7)bits transmitted. ')
dsx3bertErrorInjectCount = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3bertErrorInjectCount.setStatus('current')
if mibBuilder.loadTexts: dsx3bertErrorInjectCount.setDescription('This shows the number of times error was injected.')
dsx3bertCleanupAction = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 6, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("smCleanup", 2), ("metallicLoopdown", 3))).clone('noAction')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx3bertCleanupAction.setStatus('current')
if mibBuilder.loadTexts: dsx3bertCleanupAction.setDescription('When the BERT has to be stopped or aborted (due to card state changes), this object would give the exact action to take. The bert related changes to the card, then, can be cleaned up. The value metallicLoopdown(3) is not applicable for CESM-T3E3 and FRSM-2T3E3. When its value is metallicLoopdown(3), it implies smCleanup plus the corresponding Loopdown.')
cmDsx3BertMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 39, 2))
cmDsx3BertMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 39, 2, 1))
cmDsx3BertMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 39, 2, 2))
cmDsx3BertCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 39, 2, 2, 1)).setObjects(("CISCO-MGX82XX-DSX3-BERT-MIB", "cmDsx3BertConfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx3BertCompliance = cmDsx3BertCompliance.setStatus('current')
if mibBuilder.loadTexts: cmDsx3BertCompliance.setDescription('The compliance statement for objects related to Bert MIB.')
cmDsx3BertConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 39, 2, 1, 1)).setObjects(("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertControl"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertResourceStatus"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertOwner"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertUserId"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertStatus"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertTestMedium"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertPort"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertLine"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertMode"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertPattern"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertLoopback"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertStartTime"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertStartDate"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertBitCountUpper"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertBitCountLower"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertBitErrorCountUpper"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertBitErrorCountLower"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertErrorInsertionRate"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertErrorInjectCount"), ("CISCO-MGX82XX-DSX3-BERT-MIB", "dsx3bertCleanupAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx3BertConfGroup = cmDsx3BertConfGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx3BertConfGroup.setDescription('The collection of objects which are used for configuring/running BERT on DSX3 interfaces.')
mibBuilder.exportSymbols("CISCO-MGX82XX-DSX3-BERT-MIB", dsx3bertErrorInsertionRate=dsx3bertErrorInsertionRate, cmDsx3BertMIBGroups=cmDsx3BertMIBGroups, dsx3bertBitCountLower=dsx3bertBitCountLower, dsx3bertOwner=dsx3bertOwner, dsx3bertPattern=dsx3bertPattern, cmDsx3BertMIBCompliances=cmDsx3BertMIBCompliances, ciscoMgx82xxDsx3BertMIB=ciscoMgx82xxDsx3BertMIB, cmDsx3BertMIBConformance=cmDsx3BertMIBConformance, dsx3bertResourceStatus=dsx3bertResourceStatus, dsx3bertStatus=dsx3bertStatus, dsx3bertBitErrorCountUpper=dsx3bertBitErrorCountUpper, dsx3bertControl=dsx3bertControl, dsx3bertCleanupAction=dsx3bertCleanupAction, cmDsx3BertConfGroup=cmDsx3BertConfGroup, PYSNMP_MODULE_ID=ciscoMgx82xxDsx3BertMIB, dsx3bertMode=dsx3bertMode, dsx3bertBitErrorCountLower=dsx3bertBitErrorCountLower, cmDsx3BertCompliance=cmDsx3BertCompliance, dsx3bertStartTime=dsx3bertStartTime, dsx3bertPort=dsx3bertPort, dsx3bertLoopback=dsx3bertLoopback, dsx3bertBitCountUpper=dsx3bertBitCountUpper, dsx3bertStartDate=dsx3bertStartDate, dsx3bert=dsx3bert, dsx3bertUserId=dsx3bertUserId, dsx3bertLine=dsx3bertLine, dsx3bertErrorInjectCount=dsx3bertErrorInjectCount, dsx3bertTestMedium=dsx3bertTestMedium)
