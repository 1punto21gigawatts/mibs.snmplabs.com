#
# PySNMP MIB module CISCO-LWAPP-RF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-RF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:06:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
CLApIfType, = mibBuilder.importSymbols("CISCO-LWAPP-TC-MIB", "CLApIfType")
cLAPGroupName, = mibBuilder.importSymbols("CISCO-LWAPP-WLAN-MIB", "cLAPGroupName")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, TimeTicks, iso, Integer32, ModuleIdentity, Gauge32, Unsigned32, ObjectIdentity, Counter64, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "iso", "Integer32", "ModuleIdentity", "Gauge32", "Unsigned32", "ObjectIdentity", "Counter64", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32")
StorageType, DisplayString, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "DisplayString", "TextualConvention", "RowStatus", "TruthValue")
ciscoLwappRFMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 778))
ciscoLwappRFMIB.setRevisions(('2012-04-27 00:00', '2012-01-27 00:00', '2011-11-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappRFMIB.setRevisionsDescriptions(('Add 11n MCS rates support in profile, cLRFProfileMcsDataRateTable is added for this rate setting.', ' Below new objects have been added to the cLRFProfileTable cLRFProfileHighDensityMaxRadioClients cLRFProfileBandSelectProbeResponse cLRFProfileBandSelectCycleCount cLRFProfileBandSelectCycleThreshold cLRFProfileBandSelectExpireSuppression cLRFProfileBandSelectExpireDualBand cLRFProfileBandSelectClientRSSI cLRFProfileLoadBalancingWindowSize cLRFProfileLoadBalancingDenialCount cLRFProfileCHDDataRSSIThreshold cLRFProfileCHDVoiceRSSIThreshold cLRFProfileCHDClientExceptionLevel cLRFProfileCHDCoverageExceptionLevel cLRFProfileMulticastDataRate One new scalar object has been added cLRFProfileOutOfBoxAPConfig', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLwappRFMIB.setLastUpdated('201111010000Z')
if mibBuilder.loadTexts: ciscoLwappRFMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappRFMIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappRFMIB.setDescription("This MIB is intended to be implemented on all those devices operating as Central Controllers (CC) that terminate the Light Weight Access Point Protocol tunnel from Cisco Light-weight LWAPP Access Points. This MIB helps to manage the Radio Frequency (RF) parameters on the controller. The relationship between CC and the LWAPP APs can be depicted as followshe LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters, to the LWAPP APs. The APs then encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends it to the controller to which it is logically connected to. Central Controller ( CC ) The central entity that terminates the LWAPP protocol tunnel from the LWAPP APs. Throughout this MIB, this entity also referred to as 'controller'. Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communication between the Access Points and the controllers. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. 802.1x The IEEE ratified standard for enforcing port based access control. This was originally intended for use on wired LANs and later extended for use in 802.11 WLAN environments. This defines an architecture with three main parts - a supplicant (Ex. an 802.11 wireless client), an authenticator (the AP) and an authentication server(a Radius server). The authenticator passes messages back and forth between the supplicant and the authentication server to enable the supplicant get authenticated to the network. Radio Frequency ( RF ) Radio frequency (RF) is a rate of oscillation in the range of about 3 kHz to 300 GHz, which corresponds to the frequency of radio waves, and the alternating currents which carry radio signals. Received Signal Strength Indicator ( RSSI ) A measure of the strength of the signal as observed by the entity that received it, expressed in 'dbm'. Coverage Hole Detection ( CHD ) If clients on an Access Point are detected at low RSSI levels, it is considered a coverage hole by the Access Points. This indicates the existence of an area where clients are continually getting poor signal coverage, without having a viable location to roam to. REFERENCE [1] Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications. [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol [3] IEEE 802.11 - The original 1 Mbit/s and 2 Mbit/s, 2.4 GHz RF and IR standard.")
ciscoLwappRFMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 778, 0))
ciscoLwappRFMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 778, 1))
ciscoLwappRFMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 778, 2))
ciscoLwappRFConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1))
ciscoLwappRFGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 2))
class CiscoLwappRFApDataRates(TextualConvention, Integer32):
    description = "This field indicates the data rates supported by an AP 'disabled' The rate is not supported by the AP 'supported' The rate is supported by the AP 'mandatoryRate' The rate is required by the AP 'notApplicable' The rate is notApplicable."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("disabled", 0), ("supported", 1), ("mandatoryRate", 2), ("notApplicable", 3))

cLAPGroupsRFProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 1), )
if mibBuilder.loadTexts: cLAPGroupsRFProfileTable.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsRFProfileTable.setDescription('This table lists the mapping between an RF profile and an AP group.')
cLAPGroupsRFProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLAPGroupName"))
if mibBuilder.loadTexts: cLAPGroupsRFProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cLAPGroupsRFProfileEntry.setDescription("An entry containing the configuration attributes that affect the operation of the APs within a group. Entries can be added/deleted by explicit management action from NMS/EMS through the 'bsnAPGroupsVlanRowStatus' object in bsnAPGroupsVlanTable as defined by the AIRESPACE-WIRELESS-MIB.")
cLAPGroups802dot11bgRFProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAPGroups802dot11bgRFProfileName.setStatus('current')
if mibBuilder.loadTexts: cLAPGroups802dot11bgRFProfileName.setDescription("This object specifies the RF profile name assigned to this site on the 802.11bg radio. This profile being assigned should exist in the 'cLRFProfileTable'. To disassociate a profile with this site a string of zero length should be set.")
cLAPGroups802dot11aRFProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLAPGroups802dot11aRFProfileName.setStatus('current')
if mibBuilder.loadTexts: cLAPGroups802dot11aRFProfileName.setDescription("This object specifies the RF profile name assigned to this site on the 802.11a radio. This profile being assigned should exist in the 'cLRFProfileTable'. To disassociate a profile with this site a string of zero length should be set.")
cLRFProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2), )
if mibBuilder.loadTexts: cLRFProfileTable.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileTable.setDescription('This table lists the configuration for each RF profile.')
cLRFProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-RF-MIB", "cLRFProfileName"))
if mibBuilder.loadTexts: cLRFProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileEntry.setDescription('An entry containing the configuration attributes that affect the operation of 802.11 RF domain. Entries can be added/deleted by explicit management action from NMS/EMS or through user console.')
cLRFProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cLRFProfileName.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileName.setDescription('This object uniquely identifies a RF Profile.')
cLRFProfileDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileDescr.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileDescr.setDescription('This object specifies a human-readable description of the profile.')
cLRFProfileTransmitPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 30)).clone(-10)).setUnits('dbm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileTransmitPowerMin.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileTransmitPowerMin.setDescription('This object specifies the lower bound of transmit power value supported by an AP.')
cLRFProfileTransmitPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 30)).clone(30)).setUnits('dbm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileTransmitPowerMax.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileTransmitPowerMax.setDescription('This object specifies the uppoer bound of transmit power value supported by an AP.')
cLRFProfileTransmitPowerThresholdV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, -50)).clone(-70)).setUnits('dbm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileTransmitPowerThresholdV1.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileTransmitPowerThresholdV1.setDescription('This object specifies the transmit power control version 1 threshold for the radio resource management algorithm.')
cLRFProfileTransmitPowerThresholdV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, -50)).clone(-67)).setUnits('dbm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileTransmitPowerThresholdV2.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileTransmitPowerThresholdV2.setDescription('This object specifies the transmit power control version 2 threshold for the radio resource management algorithm.')
cLRFProfileDataRate1Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 7), CiscoLwappRFApDataRates().clone('mandatoryRate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileDataRate1Mbps.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileDataRate1Mbps.setDescription('This object specifies the configuration for this data rate.')
cLRFProfileDataRate2Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 8), CiscoLwappRFApDataRates().clone('mandatoryRate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileDataRate2Mbps.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileDataRate2Mbps.setDescription('This object specifies the configuration for this data rate.')
cLRFProfileDataRate5AndHalfMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 9), CiscoLwappRFApDataRates().clone('mandatoryRate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileDataRate5AndHalfMbps.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileDataRate5AndHalfMbps.setDescription('This object specifies the configuration for this data rate.')
cLRFProfileDataRate11Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 10), CiscoLwappRFApDataRates().clone('mandatoryRate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileDataRate11Mbps.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileDataRate11Mbps.setDescription('This object specifies the configuration for this data rate.')
cLRFProfileDataRate6Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 11), CiscoLwappRFApDataRates().clone('supported')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileDataRate6Mbps.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileDataRate6Mbps.setDescription('This object specifies the configuration for this data rate.')
cLRFProfileDataRate9Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 12), CiscoLwappRFApDataRates().clone('supported')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileDataRate9Mbps.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileDataRate9Mbps.setDescription('This object specifies the configuration for this data rate.')
cLRFProfileDataRate12Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 13), CiscoLwappRFApDataRates().clone('supported')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileDataRate12Mbps.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileDataRate12Mbps.setDescription('This object specifies the configuration for this data rate.')
cLRFProfileDataRate18Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 14), CiscoLwappRFApDataRates().clone('supported')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileDataRate18Mbps.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileDataRate18Mbps.setDescription('This object specifies the configuration for this data rate.')
cLRFProfileDataRate24Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 15), CiscoLwappRFApDataRates().clone('supported')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileDataRate24Mbps.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileDataRate24Mbps.setDescription('This object specifies the configuration for this data rate.')
cLRFProfileDataRate36Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 16), CiscoLwappRFApDataRates().clone('supported')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileDataRate36Mbps.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileDataRate36Mbps.setDescription('This object specifies the configuration for this data rate.')
cLRFProfileDataRate48Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 17), CiscoLwappRFApDataRates().clone('supported')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileDataRate48Mbps.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileDataRate48Mbps.setDescription('This object specifies the configuration for this data rate.')
cLRFProfileDataRate54Mbps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 18), CiscoLwappRFApDataRates().clone('supported')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileDataRate54Mbps.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileDataRate54Mbps.setDescription('This object specifies the configuration for this data rate.')
cLRFProfileRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 19), CLApIfType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileRadioType.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileRadioType.setDescription('This object is used to configure the radio type for this profile.')
cLRFProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 20), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileStorageType.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileStorageType.setDescription('This object represents the storage type for this conceptual row.')
cLRFProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileRowStatus.setDescription('This is the status column for this row and used to create and delete specific instances of rows in this table.')
cLRFProfileHighDensityMaxRadioClients = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 22), Unsigned32().clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileHighDensityMaxRadioClients.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileHighDensityMaxRadioClients.setDescription('This object specifies the maximum number of clients per AP radio.')
cLRFProfileBandSelectProbeResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 23), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileBandSelectProbeResponse.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileBandSelectProbeResponse.setDescription("This object specifies the AP's probe response with clients to verify whether client can associate on both 2.4 GHz and 5Ghz spectrum. When set to true, AP suppresses probe response to new clients for all SSIDs that are not being Band Select disabled.")
cLRFProfileBandSelectCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 24), Unsigned32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileBandSelectCycleCount.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileBandSelectCycleCount.setDescription('This object specifies the maximum number of cycles not responding.')
cLRFProfileBandSelectCycleThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 25), Unsigned32().clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileBandSelectCycleThreshold.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileBandSelectCycleThreshold.setDescription('This object specifies the cycle threshold for band select.')
cLRFProfileBandSelectExpireSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 26), Unsigned32().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileBandSelectExpireSuppression.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileBandSelectExpireSuppression.setDescription('This object specifies the expire of suppression.')
cLRFProfileBandSelectExpireDualBand = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 27), Unsigned32().clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileBandSelectExpireDualBand.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileBandSelectExpireDualBand.setDescription('This object specifies the expire of dual band.')
cLRFProfileBandSelectClientRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 28), Integer32().clone(-80)).setUnits('dbm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileBandSelectClientRSSI.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileBandSelectClientRSSI.setDescription('This object specifies the minimum dBM of a client RSSI to respond to probe.')
cLRFProfileLoadBalancingWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 29), Unsigned32().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileLoadBalancingWindowSize.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileLoadBalancingWindowSize.setDescription('This object specifies the number of clients associated between APs.')
cLRFProfileLoadBalancingDenialCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 30), Unsigned32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileLoadBalancingDenialCount.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileLoadBalancingDenialCount.setDescription('This object specifies number of clients denial with respect to AP.')
cLRFProfileCHDDataRSSIThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 31), Integer32().clone(-80)).setUnits('dbm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileCHDDataRSSIThreshold.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileCHDDataRSSIThreshold.setDescription('This object specifies the RSSI threshold value for data packets.')
cLRFProfileCHDVoiceRSSIThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 32), Integer32().clone(-80)).setUnits('dbm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileCHDVoiceRSSIThreshold.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileCHDVoiceRSSIThreshold.setDescription('This object specifies RSSI threshold value for voice packets.')
cLRFProfileCHDClientExceptionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 33), Unsigned32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileCHDClientExceptionLevel.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileCHDClientExceptionLevel.setDescription('This object specifies the client minimum exception level.')
cLRFProfileCHDCoverageExceptionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 34), Unsigned32().clone(25)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileCHDCoverageExceptionLevel.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileCHDCoverageExceptionLevel.setDescription('This object specifies the coverage exception level.')
cLRFProfileMulticastDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 35), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileMulticastDataRate.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileMulticastDataRate.setDescription('This object specifies the minimum multicast data rate. A value 0 indicates that AP will automatically adjust data rates.')
cLRFProfile11nOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 36), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfile11nOnly.setStatus('current')
if mibBuilder.loadTexts: cLRFProfile11nOnly.setDescription('This object specifies if 11n-client-only mode is enabled.')
cLRFProfileHDClientTrapThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 37), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLRFProfileHDClientTrapThreshold.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileHDClientTrapThreshold.setDescription('This object specifies the threshold number of clients per AP radio to trigger a trap. The trap ciscoLwappApClientThresholdNotify will be triggered once the count of clients on the AP radio reaches this limit. A value of zero indicates that the trap is disabled.')
cLRFProfileInterferenceThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLRFProfileInterferenceThreshold.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileInterferenceThreshold.setDescription('This object specifies the threshold number of interference between 0 and 100 percent.')
cLRFProfileNoiseThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLRFProfileNoiseThreshold.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileNoiseThreshold.setDescription('This object specifies the threshold number of noise threshold between -127 and 0 dBm.')
cLRFProfileUtilizationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLRFProfileUtilizationThreshold.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileUtilizationThreshold.setDescription('This object specifies the threshold number of utlization threshold between 0 and 100 percent.')
cLRFProfileDCAForeignContribution = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLRFProfileDCAForeignContribution.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileDCAForeignContribution.setDescription('This object specifies whether foreign interference is taken into account for the DCA metrics.')
cLRFProfileDCAChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("min", 1), ("medium", 2), ("max", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLRFProfileDCAChannelWidth.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileDCAChannelWidth.setDescription('This object specifies how the system performs DCA channel width selection for the RFProfile min - Min channel width(20Mhz) the radio supports medium - Medium channel width(40Mhz) supported by this radio. max - Max channel width(80Mhz) supported by this radio.')
cLRFProfileDCAChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 43), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLRFProfileDCAChannelList.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileDCAChannelList.setDescription('This object specifies the 802.11 channels available to the RF Profile. A comma separated list of integers.')
cLRFProfileRxSopThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("auto", 0), ("low", 1), ("medium", 2), ("high", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLRFProfileRxSopThreshold.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileRxSopThreshold.setDescription('Configures the receiver start of packet threshold for the rf profile.')
cLRFProfileOutOfBoxAPConfig = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLRFProfileOutOfBoxAPConfig.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileOutOfBoxAPConfig.setDescription('This object specifies the out of box AP group.')
cLRFProfileMcsDataRateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 3), )
if mibBuilder.loadTexts: cLRFProfileMcsDataRateTable.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileMcsDataRateTable.setDescription('This object specifies the 11n MCS rates supported by the RF profile, indexed by the MCS rate, ranging from 1 to 24, corresponding to rate MCS-0, MCS-1, ... MCS-23.')
cLRFProfileMcsDataRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-RF-MIB", "cLRFProfileMcsName"), (0, "CISCO-LWAPP-RF-MIB", "cLRFProfileMcsRate"))
if mibBuilder.loadTexts: cLRFProfileMcsDataRateEntry.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileMcsDataRateEntry.setDescription('An entry containing MCS date rate information applicable to a particular profile.')
cLRFProfileMcsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cLRFProfileMcsName.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileMcsName.setDescription('This object uniquely identifies a RF Profile.')
cLRFProfileMcsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cLRFProfileMcsRate.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileMcsRate.setDescription('This object uniquely identifies the MCS data rate for a particular profile.')
cLRFProfileMcsRateSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 778, 1, 1, 3, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLRFProfileMcsRateSupport.setStatus('current')
if mibBuilder.loadTexts: cLRFProfileMcsRateSupport.setDescription("This object is used to enable or disable the data rate. When this object is set to 'true' the MCS support is enabled. When this object is set to 'false' the MCS support is disabled..")
ciscoLwappRFMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 778, 2, 1))
ciscoLwappRFMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 778, 2, 2))
ciscoLwappRFMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 778, 2, 1, 1)).setObjects(("CISCO-LWAPP-RF-MIB", "ciscoLwappRFConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRFMIBCompliance = ciscoLwappRFMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappRFMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappRFMIB module. This compliance is deprecated and replaced by ciscoLwappRFMIBComplianceVer1 .')
ciscoLwappRFMIBComplianceVer1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 778, 2, 1, 2)).setObjects(("CISCO-LWAPP-RF-MIB", "ciscoLwappRFConfigGroup"), ("CISCO-LWAPP-RF-MIB", "ciscoLwappRFConfigGroup1"), ("CISCO-LWAPP-RF-MIB", "ciscoLwappRFGlobalConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRFMIBComplianceVer1 = ciscoLwappRFMIBComplianceVer1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappRFMIBComplianceVer1.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappRFMIB module.')
ciscoLwappRFMIBComplianceVer2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 778, 2, 1, 3)).setObjects(("CISCO-LWAPP-RF-MIB", "ciscoLwappRFConfigGroup"), ("CISCO-LWAPP-RF-MIB", "ciscoLwappRFConfigGroup1"), ("CISCO-LWAPP-RF-MIB", "ciscoLwappRFGlobalConfigGroup"), ("CISCO-LWAPP-RF-MIB", "ciscoLwappRFConfigGroup2"), ("CISCO-LWAPP-RF-MIB", "ciscoLwappRFConfigGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRFMIBComplianceVer2 = ciscoLwappRFMIBComplianceVer2.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappRFMIBComplianceVer2.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappRFMIB module. Added ciscoLwappRFConfigGroup2 to add object to raise trap when client count exceeds threshold and ciscoLwappRFConfigGroup3 to address DCA settings')
ciscoLwappRFConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 778, 2, 2, 1)).setObjects(("CISCO-LWAPP-RF-MIB", "cLAPGroups802dot11bgRFProfileName"), ("CISCO-LWAPP-RF-MIB", "cLAPGroups802dot11aRFProfileName"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDescr"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileTransmitPowerMin"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileTransmitPowerMax"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileTransmitPowerThresholdV1"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileTransmitPowerThresholdV2"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate1Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate2Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate5AndHalfMbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate11Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate6Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate9Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate12Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate18Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate24Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate36Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate48Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate54Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileRadioType"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileStorageType"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileRowStatus"), ("CISCO-LWAPP-RF-MIB", "cLRFProfile11nOnly"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRFConfigGroup = ciscoLwappRFConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappRFConfigGroup.setDescription('This collection of objects specifies the configuration of RF parameters on the controller to be passed to an LWAPP AP.This config group ciscoLwappRFConfigGroup is deprecated and replaced by ciscoLwappRFConfigGroupVer1')
ciscoLwappRFConfigGroupVer1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 778, 2, 2, 2)).setObjects(("CISCO-LWAPP-RF-MIB", "cLAPGroups802dot11bgRFProfileName"), ("CISCO-LWAPP-RF-MIB", "cLAPGroups802dot11aRFProfileName"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDescr"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileTransmitPowerMin"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileTransmitPowerMax"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileTransmitPowerThresholdV1"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileTransmitPowerThresholdV2"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate1Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate2Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate5AndHalfMbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate11Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate6Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate9Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate12Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate18Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate24Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate36Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate48Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDataRate54Mbps"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileRadioType"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileStorageType"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileRowStatus"), ("CISCO-LWAPP-RF-MIB", "cLRFProfile11nOnly"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileMcsName"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileMcsRate"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileMcsRateSupport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRFConfigGroupVer1 = ciscoLwappRFConfigGroupVer1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappRFConfigGroupVer1.setDescription('This collection of objects specifies the configuration of RF parameters on the controller to be passed to an LWAPP AP.')
ciscoLwappRFConfigGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 778, 2, 2, 5)).setObjects(("CISCO-LWAPP-RF-MIB", "cLRFProfileHighDensityMaxRadioClients"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileBandSelectProbeResponse"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileBandSelectCycleCount"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileBandSelectCycleThreshold"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileBandSelectExpireSuppression"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileBandSelectExpireDualBand"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileBandSelectClientRSSI"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileLoadBalancingWindowSize"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileLoadBalancingDenialCount"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileCHDDataRSSIThreshold"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileCHDVoiceRSSIThreshold"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileCHDClientExceptionLevel"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileCHDCoverageExceptionLevel"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileMulticastDataRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRFConfigGroup1 = ciscoLwappRFConfigGroup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappRFConfigGroup1.setDescription('This collection of objects specifies the configuration of RF parameters on the controller to be passed to an LWAPP AP.')
ciscoLwappRFGlobalConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 778, 2, 2, 3)).setObjects(("CISCO-LWAPP-RF-MIB", "cLRFProfileOutOfBoxAPConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRFGlobalConfigGroup = ciscoLwappRFGlobalConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappRFGlobalConfigGroup.setDescription('This is the RF global config parameter.')
ciscoLwappRFConfigGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 778, 2, 2, 4)).setObjects(("CISCO-LWAPP-RF-MIB", "cLRFProfileHDClientTrapThreshold"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileInterferenceThreshold"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileNoiseThreshold"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileUtilizationThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRFConfigGroup2 = ciscoLwappRFConfigGroup2.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappRFConfigGroup2.setDescription('This object specifies the configuration of Trap threshold to be configured on the interface of an LWAPP AP.')
ciscoLwappRFConfigGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 778, 2, 2, 6)).setObjects(("CISCO-LWAPP-RF-MIB", "cLRFProfileDCAForeignContribution"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDCAChannelWidth"), ("CISCO-LWAPP-RF-MIB", "cLRFProfileDCAChannelList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRFConfigGroup3 = ciscoLwappRFConfigGroup3.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappRFConfigGroup3.setDescription('This object specifies the configuration DCA for RF Profiles.')
ciscoLwappRFConfigGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 778, 2, 2, 7)).setObjects(("CISCO-LWAPP-RF-MIB", "cLRFProfileRxSopThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappRFConfigGroup4 = ciscoLwappRFConfigGroup4.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappRFConfigGroup4.setDescription('This object specifies the receiver start of packet threshold for RF Profiles.')
mibBuilder.exportSymbols("CISCO-LWAPP-RF-MIB", cLRFProfileOutOfBoxAPConfig=cLRFProfileOutOfBoxAPConfig, cLRFProfileDCAForeignContribution=cLRFProfileDCAForeignContribution, cLRFProfileDataRate11Mbps=cLRFProfileDataRate11Mbps, ciscoLwappRFGlobalObjects=ciscoLwappRFGlobalObjects, ciscoLwappRFMIB=ciscoLwappRFMIB, cLRFProfileBandSelectCycleCount=cLRFProfileBandSelectCycleCount, cLRFProfileRadioType=cLRFProfileRadioType, cLRFProfileRxSopThreshold=cLRFProfileRxSopThreshold, cLRFProfileMcsRateSupport=cLRFProfileMcsRateSupport, cLRFProfileDataRate2Mbps=cLRFProfileDataRate2Mbps, cLRFProfileRowStatus=cLRFProfileRowStatus, cLAPGroups802dot11bgRFProfileName=cLAPGroups802dot11bgRFProfileName, cLRFProfileBandSelectClientRSSI=cLRFProfileBandSelectClientRSSI, ciscoLwappRFMIBNotifs=ciscoLwappRFMIBNotifs, cLRFProfileHighDensityMaxRadioClients=cLRFProfileHighDensityMaxRadioClients, ciscoLwappRFConfigGroup4=ciscoLwappRFConfigGroup4, cLRFProfileDataRate12Mbps=cLRFProfileDataRate12Mbps, cLRFProfileDataRate1Mbps=cLRFProfileDataRate1Mbps, cLRFProfile11nOnly=cLRFProfile11nOnly, cLRFProfileNoiseThreshold=cLRFProfileNoiseThreshold, cLRFProfileTransmitPowerMin=cLRFProfileTransmitPowerMin, cLRFProfileStorageType=cLRFProfileStorageType, cLRFProfileDescr=cLRFProfileDescr, cLRFProfileCHDDataRSSIThreshold=cLRFProfileCHDDataRSSIThreshold, cLRFProfileCHDClientExceptionLevel=cLRFProfileCHDClientExceptionLevel, cLRFProfileBandSelectCycleThreshold=cLRFProfileBandSelectCycleThreshold, cLRFProfileMcsDataRateEntry=cLRFProfileMcsDataRateEntry, ciscoLwappRFMIBObjects=ciscoLwappRFMIBObjects, cLRFProfileDataRate9Mbps=cLRFProfileDataRate9Mbps, ciscoLwappRFConfig=ciscoLwappRFConfig, cLRFProfileInterferenceThreshold=cLRFProfileInterferenceThreshold, ciscoLwappRFMIBComplianceVer2=ciscoLwappRFMIBComplianceVer2, cLRFProfileCHDCoverageExceptionLevel=cLRFProfileCHDCoverageExceptionLevel, ciscoLwappRFConfigGroupVer1=ciscoLwappRFConfigGroupVer1, cLRFProfileDataRate5AndHalfMbps=cLRFProfileDataRate5AndHalfMbps, ciscoLwappRFConfigGroup3=ciscoLwappRFConfigGroup3, cLRFProfileTransmitPowerThresholdV2=cLRFProfileTransmitPowerThresholdV2, cLRFProfileDCAChannelList=cLRFProfileDCAChannelList, cLRFProfileTransmitPowerThresholdV1=cLRFProfileTransmitPowerThresholdV1, cLRFProfileDataRate6Mbps=cLRFProfileDataRate6Mbps, cLRFProfileDataRate36Mbps=cLRFProfileDataRate36Mbps, cLRFProfileTransmitPowerMax=cLRFProfileTransmitPowerMax, cLRFProfileDataRate48Mbps=cLRFProfileDataRate48Mbps, cLRFProfileBandSelectExpireDualBand=cLRFProfileBandSelectExpireDualBand, ciscoLwappRFMIBComplianceVer1=ciscoLwappRFMIBComplianceVer1, CiscoLwappRFApDataRates=CiscoLwappRFApDataRates, cLRFProfileBandSelectExpireSuppression=cLRFProfileBandSelectExpireSuppression, cLRFProfileHDClientTrapThreshold=cLRFProfileHDClientTrapThreshold, cLAPGroups802dot11aRFProfileName=cLAPGroups802dot11aRFProfileName, cLAPGroupsRFProfileTable=cLAPGroupsRFProfileTable, cLRFProfileName=cLRFProfileName, cLRFProfileDataRate18Mbps=cLRFProfileDataRate18Mbps, ciscoLwappRFMIBCompliances=ciscoLwappRFMIBCompliances, ciscoLwappRFConfigGroup=ciscoLwappRFConfigGroup, cLRFProfileMcsRate=cLRFProfileMcsRate, cLRFProfileEntry=cLRFProfileEntry, ciscoLwappRFMIBCompliance=ciscoLwappRFMIBCompliance, cLRFProfileDataRate24Mbps=cLRFProfileDataRate24Mbps, cLRFProfileMulticastDataRate=cLRFProfileMulticastDataRate, PYSNMP_MODULE_ID=ciscoLwappRFMIB, cLRFProfileUtilizationThreshold=cLRFProfileUtilizationThreshold, ciscoLwappRFMIBConform=ciscoLwappRFMIBConform, cLAPGroupsRFProfileEntry=cLAPGroupsRFProfileEntry, cLRFProfileTable=cLRFProfileTable, cLRFProfileDataRate54Mbps=cLRFProfileDataRate54Mbps, ciscoLwappRFMIBGroups=ciscoLwappRFMIBGroups, cLRFProfileDCAChannelWidth=cLRFProfileDCAChannelWidth, cLRFProfileMcsName=cLRFProfileMcsName, cLRFProfileLoadBalancingWindowSize=cLRFProfileLoadBalancingWindowSize, cLRFProfileMcsDataRateTable=cLRFProfileMcsDataRateTable, ciscoLwappRFGlobalConfigGroup=ciscoLwappRFGlobalConfigGroup, ciscoLwappRFConfigGroup1=ciscoLwappRFConfigGroup1, ciscoLwappRFConfigGroup2=ciscoLwappRFConfigGroup2, cLRFProfileBandSelectProbeResponse=cLRFProfileBandSelectProbeResponse, cLRFProfileLoadBalancingDenialCount=cLRFProfileLoadBalancingDenialCount, cLRFProfileCHDVoiceRSSIThreshold=cLRFProfileCHDVoiceRSSIThreshold)
