#
# PySNMP MIB module CISCO-APPLIANCE-REDUNDANCY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-APPLIANCE-REDUNDANCY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:50:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Bits, ModuleIdentity, iso, ObjectIdentity, MibIdentifier, Integer32, IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, Counter64, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "iso", "ObjectIdentity", "MibIdentifier", "Integer32", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "Counter64", "NotificationType", "Counter32")
TimeInterval, DisplayString, TruthValue, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "DisplayString", "TruthValue", "TextualConvention", "DateAndTime")
ciscoApplianceRedundancyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 458))
if mibBuilder.loadTexts: ciscoApplianceRedundancyMIB.setLastUpdated('200412230000Z')
if mibBuilder.loadTexts: ciscoApplianceRedundancyMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoApplianceRedundancyMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wlse@cisco.com')
if mibBuilder.loadTexts: ciscoApplianceRedundancyMIB.setDescription('This mib defines the SNMP objects to report the status of High Availability (HA) functionality in Cisco network management appliance devices. The HA functinality is achieved via the redundancy of network management appliance devices. An network management appliance is a device which combines hardware and software to provide specific network management services. Cisco WLSE, Wireless Service Engine (WLSE) is such an appliance. The High Availability is achieved via redundancy of appliances. This redundancy scheme is designed to support hardware or software failure of the appliances in a non- disruptive manner. Redundancy is achieved by configuring a cluster of two appliances with one common virtual IP address. The data is mirrored from the active appliance to the standby appliance at regular intervals. One of the appliances is in active mode, performing all normal functions. The other appliance is in warm standby mode; that is, the appliance is up but no application services are running. Both the active and standby appliances have their own IP addresses. The active appliance also owns the virtual IP address to which all the service requests are made. The active appliance and standby appliance periodically poll each other. If the standby appliance cannot reach the active appliance, it will become the active appliance. This is called a switchover event. The switchover can be caused by other causes, for example, via user commands. Both the active and standby appliances should implement this MIB and report any exceptions caused by switchover events.')
ciscoApplRedundancyMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 458, 1))
carConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 1))
carSwitchOverObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 2))
class CarRedundancyState(TextualConvention, Integer32):
    description = 'States of the HA redundancy: notConfigured - The appliance is not configured for redundancy. starting - The appliance is configured for redundancy and is initializing. This state could apply to both active and standby appliances. active - The appliance is the active appliance. preStandby - The appliance is configured to be standby and is attempting to restore data from the active appliance and is not yet in the standby mode. standby - The appliance is warm standby mode. activeLostStandby - The active appliance is not getting any response from the standby appliance. activeLostNetwork - The active appliance is not getting any response from the standby appliance or from the default gateway. There is possibly network issue. standbyLostNetwork - The standby appliance is not getting any response from the active appliance or from the default gateway. There is possibly network issue.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("notConfigured", 1), ("starting", 2), ("active", 3), ("preStandby", 4), ("standby", 5), ("activeLostStandby", 6), ("activeLostNetwork", 7), ("standbyLostNetwork", 8))

class CarSwitchOverReason(TextualConvention, Integer32):
    description = 'Cause of HA switchover event. lossConnWithActive - Switchover is caused by loss of connectivity to active appliance. forcedSwitchOver - Switchover is caused by user command. unknown - Unknown reason.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("lossConnWithActive", 1), ("forcedSwitchOver", 2), ("unknown", 3))

carRedundancySyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 1, 1), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carRedundancySyncInterval.setStatus('current')
if mibBuilder.loadTexts: carRedundancySyncInterval.setDescription('Time interval at which the active and standby appliances are synchronized. Synchronization consists of incrementally backing up the data on the active appliance and restoring on the standby appliance.')
carRedundancyCheckInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carRedundancyCheckInterval.setStatus('current')
if mibBuilder.loadTexts: carRedundancyCheckInterval.setDescription('Time interval to check the availability status of each appliance. Both the active and standby appliances will check the status of each other in this time interval. If the standby appliance is not able to connect to the active appliance during this check, it will become the active appliance.')
carRedundancyState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 1, 3), CarRedundancyState().clone('notConfigured')).setMaxAccess("readonly")
if mibBuilder.loadTexts: carRedundancyState.setStatus('current')
if mibBuilder.loadTexts: carRedundancyState.setDescription('The HA redundancy state of this appliance device.')
carNotificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: carNotificationEnabled.setStatus('current')
if mibBuilder.loadTexts: carNotificationEnabled.setDescription('Enable or disable HA switchover event notifications via SNMP.')
carHAAddressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 1, 5), )
if mibBuilder.loadTexts: carHAAddressTable.setStatus('current')
if mibBuilder.loadTexts: carHAAddressTable.setDescription('This table keeps the current configuration of the address information of the active and standby appliances. There is an entry in this table corresponding to each network interface that is configured for redundancy. Thus, the number of entries in this table corresponds to the number of interfaces configured for redundancy.')
carHAAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-APPLIANCE-REDUNDANCY-MIB", "carHAAddrTableIndex"))
if mibBuilder.loadTexts: carHAAddressEntry.setStatus('current')
if mibBuilder.loadTexts: carHAAddressEntry.setDescription('An entry containing address information for HA configuration on a network interface.')
carHAAddrTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 1, 5, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: carHAAddrTableIndex.setStatus('current')
if mibBuilder.loadTexts: carHAAddrTableIndex.setDescription('This index matches the interface number for which the Virtual IP configuration is maintained. For example, the Virtual IP configured on interface eth0 will be index 0. Entry for eth1 will be index 1,... and so on.')
carVirtualAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 1, 5, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carVirtualAddressType.setStatus('current')
if mibBuilder.loadTexts: carVirtualAddressType.setDescription('The type of address stored in carVirtualAddress.')
carVirtualAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 1, 5, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carVirtualAddress.setStatus('current')
if mibBuilder.loadTexts: carVirtualAddress.setDescription('The virtual IP address configured for this interface. The type of this mib variable is defined in carVirtualAddressType. This address binds to the active appliance at all times. All the management requests should be made to this address.')
carMyAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 1, 5, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carMyAddressType.setStatus('current')
if mibBuilder.loadTexts: carMyAddressType.setDescription('The type of address stored in carMyAddress')
carMyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 1, 5, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carMyAddress.setStatus('current')
if mibBuilder.loadTexts: carMyAddress.setDescription('The IP address of the interface configured for this HA configuration in this appliance. The type of this mib variable is defined in carMyAddressType. Note this value will not be affected by switchover events.')
carPeerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 1, 5, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carPeerAddressType.setStatus('current')
if mibBuilder.loadTexts: carPeerAddressType.setDescription('The type of address stored in carPeerAddress')
carPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 1, 5, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carPeerAddress.setStatus('current')
if mibBuilder.loadTexts: carPeerAddress.setDescription('The IP address of the interface configured for this HA configuration in the peer appliance. The type of this mib variable is defined in carPeerAddressType. Note this value will not be affected by switchover events.')
carLastSwitchOverReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 2, 1), CarSwitchOverReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carLastSwitchOverReason.setStatus('current')
if mibBuilder.loadTexts: carLastSwitchOverReason.setDescription('Cause for the most recent switchover.')
carLastSwitchOverTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 2, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carLastSwitchOverTime.setStatus('current')
if mibBuilder.loadTexts: carLastSwitchOverTime.setDescription('The local date and time when the last switchover event occurred and was logged to the system.')
carTotalSwitchOvers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carTotalSwitchOvers.setStatus('current')
if mibBuilder.loadTexts: carTotalSwitchOvers.setDescription('The number of all HA switchover events.')
carMaxSwitchOverHistoryRecords = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 2, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)).clone(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: carMaxSwitchOverHistoryRecords.setStatus('current')
if mibBuilder.loadTexts: carMaxSwitchOverHistoryRecords.setDescription('The maximun number of records to keep in carSwitchOverHistoryTable. New records will replace the old records on a first-in-first-out basis. A value of 0 indicates no history will be retained.')
carSwitchOverHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 2, 5), )
if mibBuilder.loadTexts: carSwitchOverHistoryTable.setStatus('current')
if mibBuilder.loadTexts: carSwitchOverHistoryTable.setDescription('This table keeps an history of HA switchover events. The maximum number of records is equal or less than carMaxSwitchOverRecords.')
carSwitchOverHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-APPLIANCE-REDUNDANCY-MIB", "carSWHistTableIndex"))
if mibBuilder.loadTexts: carSwitchOverHistEntry.setStatus('current')
if mibBuilder.loadTexts: carSwitchOverHistEntry.setDescription('An entry containing information about a HA switchover event.')
carSWHistTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 2, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: carSWHistTableIndex.setStatus('current')
if mibBuilder.loadTexts: carSWHistTableIndex.setDescription('An monotonically increasing number for the sole purpose of indexing entries. When it reaches maximum value, the agent sets it back to 1.')
carSWHistActiveNodeAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 2, 5, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carSWHistActiveNodeAddressType.setStatus('current')
if mibBuilder.loadTexts: carSWHistActiveNodeAddressType.setDescription('Represents the type of address stored in carSWHistActiveNodeAddress.')
carSWHistActiveNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 2, 5, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carSWHistActiveNodeAddress.setStatus('current')
if mibBuilder.loadTexts: carSWHistActiveNodeAddress.setDescription('The address of the active appliance after the switchover event. carSWHistActiveNodeAddressType specifies the type of this mib variable.')
carSWHistStandbyNodeAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 2, 5, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carSWHistStandbyNodeAddressType.setStatus('current')
if mibBuilder.loadTexts: carSWHistStandbyNodeAddressType.setDescription('Represents the type of address stored in carSWHistStandbyNodeAddress.')
carSWHistStandbyNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 2, 5, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carSWHistStandbyNodeAddress.setStatus('current')
if mibBuilder.loadTexts: carSWHistStandbyNodeAddress.setDescription('The address of the standby appliance after the switchover event. carSWHistStandbyNodeAddressType specifies the type of this mib variable.')
carSWHistEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 2, 5, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carSWHistEventTime.setStatus('current')
if mibBuilder.loadTexts: carSWHistEventTime.setDescription('The local date and time when the switchover event occurred and was logged to the system.')
carSWHistEventReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 458, 1, 2, 5, 1, 7), CarSwitchOverReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: carSWHistEventReason.setStatus('current')
if mibBuilder.loadTexts: carSWHistEventReason.setDescription('Cause of the switchover event.')
carHAMIBNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 458, 2))
carHAMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 458, 2, 0))
carSwitchOverNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 458, 2, 0, 1)).setObjects(("CISCO-APPLIANCE-REDUNDANCY-MIB", "carSWHistEventTime"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carSWHistEventReason"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carSWHistActiveNodeAddressType"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carSWHistActiveNodeAddress"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carSWHistStandbyNodeAddressType"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carSWHistStandbyNodeAddress"))
if mibBuilder.loadTexts: carSwitchOverNotification.setStatus('current')
if mibBuilder.loadTexts: carSwitchOverNotification.setDescription('This notification is sent when a switchover event happened. This notification can be enabled or disabled via carNotificationEnabled.')
ciscoHAMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 458, 3))
ciscoHAMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 458, 3, 1))
ciscoHAMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 458, 3, 2))
ciscoHAMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 458, 3, 1, 1)).setObjects(("CISCO-APPLIANCE-REDUNDANCY-MIB", "ciscoHAConfigDataGroup"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "ciscoHASwitchOverDataGroup"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "ciscoHAExceptionNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoHAMIBCompliance = ciscoHAMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoHAMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-APPLIANCE-HIGH-AVAILABILITY-MIB.')
ciscoHAConfigDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 458, 3, 2, 1)).setObjects(("CISCO-APPLIANCE-REDUNDANCY-MIB", "carVirtualAddressType"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carVirtualAddress"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carMyAddressType"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carMyAddress"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carPeerAddressType"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carPeerAddress"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carRedundancySyncInterval"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carRedundancyCheckInterval"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carRedundancyState"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carNotificationEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoHAConfigDataGroup = ciscoHAConfigDataGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoHAConfigDataGroup.setDescription('A collection of objects that enable the switchover event notification for the HA network elements.')
ciscoHASwitchOverDataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 458, 3, 2, 2)).setObjects(("CISCO-APPLIANCE-REDUNDANCY-MIB", "carLastSwitchOverReason"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carLastSwitchOverTime"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carTotalSwitchOvers"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carMaxSwitchOverHistoryRecords"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carSWHistActiveNodeAddressType"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carSWHistActiveNodeAddress"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carSWHistStandbyNodeAddressType"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carSWHistStandbyNodeAddress"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carSWHistEventTime"), ("CISCO-APPLIANCE-REDUNDANCY-MIB", "carSWHistEventReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoHASwitchOverDataGroup = ciscoHASwitchOverDataGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoHASwitchOverDataGroup.setDescription('A collection of objects that record the switchover events for HA network elements.')
ciscoHAExceptionNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 458, 3, 2, 3)).setObjects(("CISCO-APPLIANCE-REDUNDANCY-MIB", "carSwitchOverNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoHAExceptionNotifGroup = ciscoHAExceptionNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoHAExceptionNotifGroup.setDescription('A collection of the monitored exception events.')
mibBuilder.exportSymbols("CISCO-APPLIANCE-REDUNDANCY-MIB", carPeerAddressType=carPeerAddressType, carConfigObjects=carConfigObjects, carSwitchOverObjects=carSwitchOverObjects, carSWHistStandbyNodeAddress=carSWHistStandbyNodeAddress, carTotalSwitchOvers=carTotalSwitchOvers, carHAAddressEntry=carHAAddressEntry, carVirtualAddress=carVirtualAddress, carSwitchOverHistoryTable=carSwitchOverHistoryTable, carHAMIBNotifPrefix=carHAMIBNotifPrefix, ciscoHAMIBCompliance=ciscoHAMIBCompliance, carMaxSwitchOverHistoryRecords=carMaxSwitchOverHistoryRecords, carHAAddressTable=carHAAddressTable, carSWHistEventReason=carSWHistEventReason, carHAMIBNotifications=carHAMIBNotifications, carRedundancyState=carRedundancyState, carSWHistActiveNodeAddress=carSWHistActiveNodeAddress, carSWHistStandbyNodeAddressType=carSWHistStandbyNodeAddressType, carMyAddress=carMyAddress, carRedundancySyncInterval=carRedundancySyncInterval, ciscoHAMIBConformance=ciscoHAMIBConformance, carMyAddressType=carMyAddressType, carLastSwitchOverReason=carLastSwitchOverReason, carSWHistActiveNodeAddressType=carSWHistActiveNodeAddressType, carLastSwitchOverTime=carLastSwitchOverTime, CarSwitchOverReason=CarSwitchOverReason, carRedundancyCheckInterval=carRedundancyCheckInterval, PYSNMP_MODULE_ID=ciscoApplianceRedundancyMIB, carSwitchOverHistEntry=carSwitchOverHistEntry, ciscoApplRedundancyMIBObjects=ciscoApplRedundancyMIBObjects, carSwitchOverNotification=carSwitchOverNotification, carVirtualAddressType=carVirtualAddressType, carSWHistEventTime=carSWHistEventTime, ciscoHASwitchOverDataGroup=ciscoHASwitchOverDataGroup, carPeerAddress=carPeerAddress, ciscoHAExceptionNotifGroup=ciscoHAExceptionNotifGroup, ciscoHAConfigDataGroup=ciscoHAConfigDataGroup, CarRedundancyState=CarRedundancyState, carSWHistTableIndex=carSWHistTableIndex, ciscoHAMIBCompliances=ciscoHAMIBCompliances, ciscoApplianceRedundancyMIB=ciscoApplianceRedundancyMIB, ciscoHAMIBGroups=ciscoHAMIBGroups, carNotificationEnabled=carNotificationEnabled, carHAAddrTableIndex=carHAAddrTableIndex)
