#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-ProvisioningMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-ProvisioningMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:31:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
RowPointer, StorageType, Unsigned32, DisplayString, RowStatus = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "RowPointer", "StorageType", "Unsigned32", "DisplayString", "RowStatus")
NonReplicated, AsciiString, EnterpriseDateAndTime, AsciiStringIndex = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "NonReplicated", "AsciiString", "EnterpriseDateAndTime", "AsciiStringIndex")
mscPassportMIBs, mscComponents = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs", "mscComponents")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, iso, Counter32, ObjectIdentity, Counter64, MibIdentifier, Bits, ModuleIdentity, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "Counter32", "ObjectIdentity", "Counter64", "MibIdentifier", "Bits", "ModuleIdentity", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
provisioningMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 19))
mscProv = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11))
mscProvRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 1), )
if mibBuilder.loadTexts: mscProvRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvRowStatusTable.setDescription('This entry controls the addition and deletion of mscProv components.')
mscProvRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ProvisioningMIB", "mscProvIndex"))
if mibBuilder.loadTexts: mscProvRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvRowStatusEntry.setDescription('A single entry in the table represents a single mscProv component.')
mscProvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscProv components. These components cannot be added nor deleted.')
mscProvComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscProvStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvStorageType.setDescription('This variable represents the storage type value for the mscProv tables.')
mscProvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscProvIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvIndex.setDescription('This variable represents the index for the mscProv tables.')
mscProvStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 10), )
if mibBuilder.loadTexts: mscProvStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscProvStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ProvisioningMIB", "mscProvIndex"))
if mibBuilder.loadTexts: mscProvStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvStateEntry.setDescription('An entry in the mscProvStateTable.')
mscProvAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscProvOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscProvUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscProvOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11), )
if mibBuilder.loadTexts: mscProvOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvOperTable.setDescription('This group contains the operational attributes for the ProvisioningSystem component.')
mscProvOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ProvisioningMIB", "mscProvIndex"))
if mibBuilder.loadTexts: mscProvOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvOperEntry.setDescription('An entry in the mscProvOperTable.')
mscProvProvisioningActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 21))).clone(namedValues=NamedValues(("initialLoading", 0), ("none", 2), ("activation", 3), ("initialActivation", 4), ("rollingBack", 5), ("saving", 6), ("loadingOrApplying", 7), ("semanticChecking", 8), ("waitingForConfirm", 9), ("clearing", 11), ("copying", 12), ("committing", 13), ("deleting", 14), ("confirming", 15), ("adding", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvProvisioningActivity.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvProvisioningActivity.setDescription('This attribute describes the type of provisioning activity that the ProvisioningSystem component is performing.')
mscProvActivityProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvActivityProgress.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvActivityProgress.setDescription('This attribute indicates the status relating to a long-running command handled by the ProvisioningSystem. It is usually expressed as a percentage of the number of elements (for example, components) processed with respect to the total set of elements that need to be processed for that activity. Note that, one cannot assume that the percentage implies how much time the task may still take. The time to complete the activity is dependent on many things which are beyond the control of the ProvisioningSystem itself.')
mscProvCommittedFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvCommittedFileName.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvCommittedFileName.setDescription('This attribute contains the name of the committed file. This is the file that will be used to obtain the provisioning data if the module restarts. Immediately after system power-up, this attribute contains the name of the file used during initial loading.')
mscProvCurrentViewFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11, 1, 4), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvCurrentViewFileName.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvCurrentViewFileName.setDescription('This attribute contains the name of the provisioning file that contains the current view provisioning data. After system power-up, this attribute contains the name of the file used during initial loading. If the current view data has not been saved, this attribute is empty.')
mscProvLastUsedFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11, 1, 5), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvLastUsedFileName.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvLastUsedFileName.setDescription('This attribute contains the last saved, loaded or committed file name. If a Load, Save or Commit command returns an error, this attribute remains unchanged. Immediately after system power-up, this attribute contains the name of the file used during initial loading.')
mscProvProvisioningSession = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11, 1, 6), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvProvisioningSession.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvProvisioningSession.setDescription('This attribute contains the component name of the operator session which is currently in provisioning mode. For example, NMIS Telnet Session/2 If no session is in provisioning mode, this attribute will be empty.')
mscProvProvisioningUser = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11, 1, 7), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvProvisioningUser.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvProvisioningUser.setDescription('This attribute contains the userid of the operator who is currently provisioning the module. If no session is in provisioning mode, this attribute will be empty.')
mscProvCheckRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvCheckRequired.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvCheckRequired.setDescription('This attribute indicates whether semantic checking is required before activating the edit view.')
mscProvNextFileSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscProvNextFileSequenceNumber.setStatus('obsolete')
if mibBuilder.loadTexts: mscProvNextFileSequenceNumber.setDescription('This attribute is no longer supported.')
mscProvConfirmRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvConfirmRequired.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvConfirmRequired.setDescription('This attribute indicates whether the operator must enter a Confirm Prov command in order to keep a newly activated current view in effect. If an activation is not confirmed within 20 minutes of its completion, the module will restart using the committed provisioning data.')
mscProvProvisioningDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvProvisioningDirectory.setStatus('obsolete')
if mibBuilder.loadTexts: mscProvProvisioningDirectory.setDescription('This attribute indicates the name of the provisioning directory.')
mscProvEditViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11, 1, 12), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvEditViewName.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvEditViewName.setDescription('This attribute indicates the name of the provisioning view that represents the edit view provisioning data. If the edit view data has not been saved, this attribute is empty.')
mscProvEditViewAddedComponents = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvEditViewAddedComponents.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvEditViewAddedComponents.setDescription('This attribute indicates the number of provisioning components that have been added to the edit view with respect to the current view.')
mscProvEditViewDeletedComponents = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvEditViewDeletedComponents.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvEditViewDeletedComponents.setDescription('This attribute indicates the number of provisioned components that have been deleted from the edit view with respect to the current view.')
mscProvEditViewChangedComponents = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvEditViewChangedComponents.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvEditViewChangedComponents.setDescription('This attribute indicates the number of provisioned components whose attributes differ between the edit and current views.')
mscProvStandbyCpActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 6))).clone(namedValues=NamedValues(("none", 0), ("loadingProvisioningData", 1), ("savingCommitFormatProvisioningData", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvStandbyCpActivity.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvStandbyCpActivity.setDescription('This attribute descibes the type of provisionin activity, which ProvisioningSystem is performing on standby CP.')
mscProvStandbyCpActivityProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 11, 1, 17), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvStandbyCpActivityProgress.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvStandbyCpActivityProgress.setDescription('This attribute indicates status of a provisioning activity, which ProvisioningSystem is performing on standby CP.')
mscProvView = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 2))
mscProvViewRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 2, 1), )
if mibBuilder.loadTexts: mscProvViewRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvViewRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscProvView components.')
mscProvViewRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ProvisioningMIB", "mscProvIndex"), (0, "Nortel-MsCarrier-MscPassport-ProvisioningMIB", "mscProvViewIndex"))
if mibBuilder.loadTexts: mscProvViewRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvViewRowStatusEntry.setDescription('A single entry in the table represents a single mscProvView component.')
mscProvViewRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvViewRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvViewRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscProvView components. These components cannot be added nor deleted.')
mscProvViewComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvViewComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvViewComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscProvViewStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvViewStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvViewStorageType.setDescription('This variable represents the storage type value for the mscProvView tables.')
mscProvViewIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 40)))
if mibBuilder.loadTexts: mscProvViewIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvViewIndex.setDescription('This variable represents the index for the mscProvView tables.')
mscProvViewOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 2, 100), )
if mibBuilder.loadTexts: mscProvViewOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvViewOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the operational attributes for the View component.')
mscProvViewOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 2, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ProvisioningMIB", "mscProvIndex"), (0, "Nortel-MsCarrier-MscPassport-ProvisioningMIB", "mscProvViewIndex"))
if mibBuilder.loadTexts: mscProvViewOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvViewOperEntry.setDescription('An entry in the mscProvViewOperTable.')
mscProvViewUser = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 2, 100, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvViewUser.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvViewUser.setDescription('This attribute indicates the userid of the operator who first saved this view. It may be empty if unknown or if the view has not been saved.')
mscProvViewCheckState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 2, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("failed", 0), ("unknown", 1), ("partial", 2), ("softwareChanged", 3), ("full", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvViewCheckState.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvViewCheckState.setDescription('This attribute indicates the semantic check state of the view when it was saved. The values are described in worst to best order. The failed state indicates that the view has failed a semantic check and cannot be activated. The unknown state indicates that semantic checks have not been run and the view cannot be activated. The partial state indicates that the view has passed incomplete checks, that is Check -changed Prov has succeeded. This is also the best state value for a partial view. Thew view cannot be activated until it has been fully checked. The softwareChanged state indicates that the view has passed complete checks, but by software other than that to be activated, that is, either the application versions have changed, or features have been added. After activation, the new software may detect semantic errors. After correcting these errors, if any, the view will need to be re-saved or re-committed as appropriate. The full state indicates that the view has passed complete checks, that is, it has been fully verified. It can be activated.')
mscProvViewComponents = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 2, 100, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvViewComponents.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvViewComponents.setDescription('This attributes indicates the number of provisioned components that have been (or could be) saved.')
mscProvViewFormats = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 2, 100, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvViewFormats.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvViewFormats.setDescription('This attribute indicates the formats of the saved information. Each serves a different purpose. The ascii format is readable by operators and can be easily parsed and generated by scripts. NMS makes use of this format. Note that the syntax is subject to change without notice. This format is generated via Save -ascii Prov. A view with an ascii format can be loaded and activated. The commit format is generated via Commit Prov and allows for fast activation, that is, a shorter service outage time. The system will never leave a view with only this format, as it cannot be loaded. The delta format contains the changes made between the current view and the edit view. It is, therefore, much smaller and faster to Load or Save than the other formats. A view containing this format can be loaded or have the changes applied to the edit view. This provides a mechanism to propagate a set of changes from one view to another. A view containing only this format can be activated if this would not require a system reload. To generate this format, issue Save Prov without the -ascii or portable options. The part format is generated via Save component() Prov. The part format can be loaded. The syntax of this format is subject to change without notice. The portable format is a compact representation that can be quickly loaded. It can be transported from one Passport to another, or to an NMS. It is generated via Save -portable Prov. The portable format can be loaded and activated. Description of bits: ascii(0) commit(1) delta(2) part(3) portable(4)')
mscProvViewBaseView = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 2, 100, 1, 5), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvViewBaseView.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvViewBaseView.setDescription("This attribute indicates the name of the view upon which this view's changes are based (even if the delta format does not exists). In other words, it indicates the name of the current view that existed at the time that this view was saved. This may not be the name of the current view that is running now. This attribute is empty when the view is unsaved or if the current view was saved.")
mscProvViewVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 2, 100, 1, 6), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvViewVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvViewVersion.setDescription('This attribute represents the version of base software that saved this view. It is empty if unknown.')
mscProvViewCreationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 11, 2, 100, 1, 7), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscProvViewCreationDate.setStatus('mandatory')
if mibBuilder.loadTexts: mscProvViewCreationDate.setDescription('This attribute indicates the creation date of this view.')
provisioningGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 19, 1))
provisioningGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 19, 1, 1))
provisioningGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 19, 1, 1, 3))
provisioningGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 19, 1, 1, 3, 2))
provisioningCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 19, 3))
provisioningCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 19, 3, 1))
provisioningCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 19, 3, 1, 3))
provisioningCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 19, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-ProvisioningMIB", provisioningCapabilitiesCA02=provisioningCapabilitiesCA02, provisioningCapabilitiesCA=provisioningCapabilitiesCA, mscProvStandbyCpActivity=mscProvStandbyCpActivity, mscProvViewComponentName=mscProvViewComponentName, mscProvEditViewChangedComponents=mscProvEditViewChangedComponents, mscProvOperTable=mscProvOperTable, mscProv=mscProv, mscProvOperEntry=mscProvOperEntry, mscProvCheckRequired=mscProvCheckRequired, mscProvProvisioningDirectory=mscProvProvisioningDirectory, mscProvViewOperEntry=mscProvViewOperEntry, mscProvRowStatusEntry=mscProvRowStatusEntry, mscProvUsageState=mscProvUsageState, mscProvAdminState=mscProvAdminState, mscProvProvisioningUser=mscProvProvisioningUser, mscProvRowStatusTable=mscProvRowStatusTable, provisioningGroupCA02A=provisioningGroupCA02A, mscProvProvisioningActivity=mscProvProvisioningActivity, mscProvEditViewName=mscProvEditViewName, mscProvEditViewAddedComponents=mscProvEditViewAddedComponents, mscProvViewOperTable=mscProvViewOperTable, mscProvViewComponents=mscProvViewComponents, mscProvViewBaseView=mscProvViewBaseView, mscProvViewCreationDate=mscProvViewCreationDate, provisioningGroup=provisioningGroup, mscProvConfirmRequired=mscProvConfirmRequired, mscProvStorageType=mscProvStorageType, mscProvActivityProgress=mscProvActivityProgress, mscProvStandbyCpActivityProgress=mscProvStandbyCpActivityProgress, mscProvViewVersion=mscProvViewVersion, provisioningGroupCA02=provisioningGroupCA02, mscProvLastUsedFileName=mscProvLastUsedFileName, mscProvCurrentViewFileName=mscProvCurrentViewFileName, mscProvNextFileSequenceNumber=mscProvNextFileSequenceNumber, mscProvViewRowStatus=mscProvViewRowStatus, mscProvStateEntry=mscProvStateEntry, mscProvStateTable=mscProvStateTable, mscProvEditViewDeletedComponents=mscProvEditViewDeletedComponents, mscProvViewFormats=mscProvViewFormats, mscProvView=mscProvView, mscProvProvisioningSession=mscProvProvisioningSession, provisioningGroupCA=provisioningGroupCA, mscProvViewUser=mscProvViewUser, mscProvRowStatus=mscProvRowStatus, provisioningMIB=provisioningMIB, mscProvViewCheckState=mscProvViewCheckState, mscProvOperationalState=mscProvOperationalState, mscProvViewIndex=mscProvViewIndex, mscProvIndex=mscProvIndex, mscProvCommittedFileName=mscProvCommittedFileName, mscProvViewStorageType=mscProvViewStorageType, mscProvViewRowStatusEntry=mscProvViewRowStatusEntry, provisioningCapabilities=provisioningCapabilities, mscProvComponentName=mscProvComponentName, provisioningCapabilitiesCA02A=provisioningCapabilitiesCA02A, mscProvViewRowStatusTable=mscProvViewRowStatusTable)
