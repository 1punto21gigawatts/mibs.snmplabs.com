#
# PySNMP MIB module CISCO-GTP-DIRECTOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-GTP-DIRECTOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:59:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, Counter32, Bits, NotificationType, MibIdentifier, ModuleIdentity, ObjectIdentity, Integer32, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "Counter32", "Bits", "NotificationType", "MibIdentifier", "ModuleIdentity", "ObjectIdentity", "Integer32", "iso", "IpAddress")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
ciscoGtpDirectorMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 245))
ciscoGtpDirectorMIB.setRevisions(('2001-09-13 14:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoGtpDirectorMIB.setRevisionsDescriptions(('Initial version of this MIB Module.',))
if mibBuilder.loadTexts: ciscoGtpDirectorMIB.setLastUpdated('200109131400Z')
if mibBuilder.loadTexts: ciscoGtpDirectorMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoGtpDirectorMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-gprs@cisco.com')
if mibBuilder.loadTexts: ciscoGtpDirectorMIB.setDescription('This MIB module defines objects that are used to manage GTP Director Module. In the GPRS network, the APN is the identifier that specifies where the user is connecting. The APN identifies whether the network is a corporate network or a service provider network. The APN comprises of two parts, the network id and the operator id. The Single Access point feature enables the service provider to add new access-points to the GGSN without having to provision the HLR. The requests are sent by the SGSN to the same virtual APN. A virtual APN is not associated with any actual physical network. The GGSN processes the request and forwards the packet to the appropriate access-point that is specified in the PCO. The Single APN feature is supported only in Cisco GGSNs. The purpose of the GTP-Director is to provide a mechanism for service providers using non-Cisco GGSN to use the Single APN feature. This would enable the service providers to add access-point to the network without having to provision the HLR. This will be transparent to the SGSN. The mobile user initiates a connection request to the SGSN. The access-point name specified in the request is the virtual APN. The GTP-Director would resolve the access-point name and forward the request to the appropriate GGSN (real GGSN). +==+ +===+ +====+ ==== +===+ +====+ +===+ |MS|--|BSS|--|SGSN|--|PLMN|--|GDM|--|GGSN|--Gi-|PDN| +==+ +===+ +====+ ==== +===+ +====+ +===+ | | | | +====+ | |___|GGSN|------Gi | +====+ | | | | +====+ +===+ |_____|GGSN|--Gi-|PDN| +====+ +===+ The GTP-Director also provides load balancing across GGSNs. The GTP-Director uses the round-robin mechanism for providing load balancing. The Cisco GGSNs may use the GTP-Director, but is not necessary as they can use IOS-SLB ( Server Load Balancing ). Acronyms and terms: APN Access Point Name BSS Base Staion Subsystem GDM GTP Director Module GGSN Gateway GPRS Support Node Gi Reference point between GPRS and an external packet data network GPRS General Packet Radio Service HLR Home Location Register NMS Network Management System PCO Protocol Configuration Options PDN Packet Data Network PDP Packet Data Protocol PLMN Public Land Mobile Network MS Mobile Station SGSN Serving GPRS Support Node TID Tunnel Identifier ')
ciscoGtpDirectorMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 245, 1))
cgdConfigurations = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 245, 1, 1))
cgdStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 245, 1, 2))
cgdStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 245, 1, 3))
cgdNotifMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 245, 1, 4))
cgdCreatePdpRequestInfoSaveTimer = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 245, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgdCreatePdpRequestInfoSaveTimer.setStatus('current')
if mibBuilder.loadTexts: cgdCreatePdpRequestInfoSaveTimer.setDescription('When a GDM receives a request to create PDP, it processes and forwards the request to the GGSN and saves the information related to the request. This object defines the time during which the information is maintained by the GDM. Any subsequent retries by the SGSN within this time period will be forwarded to the same GGSN, but the timer will not be reset if a retry occurs before it has expired. ')
cgdPendingPdps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 245, 1, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdPendingPdps.setStatus('current')
if mibBuilder.loadTexts: cgdPendingPdps.setDescription('This object gives the number of create PDP requests whose connection retry timer has not expired. ')
cgdCreatePdpRequestFwded = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 245, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdCreatePdpRequestFwded.setStatus('current')
if mibBuilder.loadTexts: cgdCreatePdpRequestFwded.setDescription('This object gives the number of unique create PDP requests forwarded by the GDM to GGSN. This does not include the retransmissions. ')
cgdTotalCreatePdpRequestFwded = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 245, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdTotalCreatePdpRequestFwded.setStatus('current')
if mibBuilder.loadTexts: cgdTotalCreatePdpRequestFwded.setDescription('This object gives the total number of create PDP requests forwarded by the GDM to GGSN. This includes retransmissions too. ')
cgdCreateRequestRejected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 245, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdCreateRequestRejected.setStatus('current')
if mibBuilder.loadTexts: cgdCreateRequestRejected.setDescription('This object gives the total number of create PDP requests rejected by the GGSN. ')
cgdTotalUnsupportedMessages = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 245, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdTotalUnsupportedMessages.setStatus('current')
if mibBuilder.loadTexts: cgdTotalUnsupportedMessages.setDescription('GDM does not support any signalling message other than create PDP request. If the GDM receives any unsupported signalling message, it will not be forwarded to GGSN and will be dropped. This object gives the total number of unsupported signalling messages received by the GDM. ')
cgdPdpRequestDropped = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 245, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdPdpRequestDropped.setStatus('current')
if mibBuilder.loadTexts: cgdPdpRequestDropped.setDescription('This object gives the total number of PDP requests dropped by the GDM due to routing failures, which occur, if the GTP is unable to pass the packet to IP. ')
cgdNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 245, 1, 4, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgdNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cgdNotifEnable.setDescription("Indicates whether ciscoGtpDirectorNotifications notification will be sent when it is generated by the device. - 'true', will enable the device to send the notification. - 'false', will prevent the device from sending out the notification. ")
cgdNotifType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 245, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gdmServiceUp", 1), ("gdmServiceDown", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cgdNotifType.setStatus('current')
if mibBuilder.loadTexts: cgdNotifType.setDescription('This object indicates the type of notification. ')
ciscoGtpDirectorNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 245, 2))
ciscoGtpDirectorNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 245, 2, 0))
ciscoGtpDirectorNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 245, 2, 0, 1)).setObjects(("CISCO-GTP-DIRECTOR-MIB", "cgdNotifType"))
if mibBuilder.loadTexts: ciscoGtpDirectorNotification.setStatus('current')
if mibBuilder.loadTexts: ciscoGtpDirectorNotification.setDescription('This notification indicates the occurrence of a GDM related alarm. ')
ciscoGtpDirectorMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 245, 3))
ciscoGtpDirectorMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 245, 3, 1))
ciscoGtpDirectorMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 245, 3, 2))
ciscoGtpDirectorMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 245, 3, 1, 1)).setObjects(("CISCO-GTP-DIRECTOR-MIB", "ciscoGtpDirectorConfigurationsGroup"), ("CISCO-GTP-DIRECTOR-MIB", "ciscoGtpDirectorStatusGroup"), ("CISCO-GTP-DIRECTOR-MIB", "ciscoGtpDirectorStatisticsGroup"), ("CISCO-GTP-DIRECTOR-MIB", "ciscoGtpDirectorNotifMgmtGroup"), ("CISCO-GTP-DIRECTOR-MIB", "ciscoGtpDirectorNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGtpDirectorMIBCompliance = ciscoGtpDirectorMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoGtpDirectorMIBCompliance.setDescription('The compliance statements for entities which implement CISCO-GDM-MIB. ')
ciscoGtpDirectorConfigurationsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 245, 3, 2, 1)).setObjects(("CISCO-GTP-DIRECTOR-MIB", "cgdCreatePdpRequestInfoSaveTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGtpDirectorConfigurationsGroup = ciscoGtpDirectorConfigurationsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGtpDirectorConfigurationsGroup.setDescription('A collection of GDM configuration objects. ')
ciscoGtpDirectorStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 245, 3, 2, 2)).setObjects(("CISCO-GTP-DIRECTOR-MIB", "cgdPendingPdps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGtpDirectorStatusGroup = ciscoGtpDirectorStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGtpDirectorStatusGroup.setDescription('A collection of GDM status. ')
ciscoGtpDirectorStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 245, 3, 2, 3)).setObjects(("CISCO-GTP-DIRECTOR-MIB", "cgdCreatePdpRequestFwded"), ("CISCO-GTP-DIRECTOR-MIB", "cgdTotalCreatePdpRequestFwded"), ("CISCO-GTP-DIRECTOR-MIB", "cgdCreateRequestRejected"), ("CISCO-GTP-DIRECTOR-MIB", "cgdTotalUnsupportedMessages"), ("CISCO-GTP-DIRECTOR-MIB", "cgdPdpRequestDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGtpDirectorStatisticsGroup = ciscoGtpDirectorStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGtpDirectorStatisticsGroup.setDescription('A collection of GDM Statistics. ')
ciscoGtpDirectorNotifMgmtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 245, 3, 2, 4)).setObjects(("CISCO-GTP-DIRECTOR-MIB", "cgdNotifEnable"), ("CISCO-GTP-DIRECTOR-MIB", "cgdNotifType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGtpDirectorNotifMgmtGroup = ciscoGtpDirectorNotifMgmtGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGtpDirectorNotifMgmtGroup.setDescription(' A collection of objects related with notification management on GDM.')
ciscoGtpDirectorNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 245, 3, 2, 5)).setObjects(("CISCO-GTP-DIRECTOR-MIB", "ciscoGtpDirectorNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGtpDirectorNotifGroup = ciscoGtpDirectorNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGtpDirectorNotifGroup.setDescription('A collection of notifications. ')
mibBuilder.exportSymbols("CISCO-GTP-DIRECTOR-MIB", ciscoGtpDirectorNotifications=ciscoGtpDirectorNotifications, cgdNotifType=cgdNotifType, ciscoGtpDirectorStatisticsGroup=ciscoGtpDirectorStatisticsGroup, ciscoGtpDirectorMIBGroups=ciscoGtpDirectorMIBGroups, ciscoGtpDirectorNotifPrefix=ciscoGtpDirectorNotifPrefix, ciscoGtpDirectorNotifMgmtGroup=ciscoGtpDirectorNotifMgmtGroup, PYSNMP_MODULE_ID=ciscoGtpDirectorMIB, cgdPdpRequestDropped=cgdPdpRequestDropped, cgdTotalUnsupportedMessages=cgdTotalUnsupportedMessages, cgdCreatePdpRequestInfoSaveTimer=cgdCreatePdpRequestInfoSaveTimer, cgdPendingPdps=cgdPendingPdps, ciscoGtpDirectorMIB=ciscoGtpDirectorMIB, cgdStatus=cgdStatus, ciscoGtpDirectorMIBCompliance=ciscoGtpDirectorMIBCompliance, ciscoGtpDirectorNotifGroup=ciscoGtpDirectorNotifGroup, cgdTotalCreatePdpRequestFwded=cgdTotalCreatePdpRequestFwded, cgdStatistics=cgdStatistics, ciscoGtpDirectorNotification=ciscoGtpDirectorNotification, cgdConfigurations=cgdConfigurations, cgdCreateRequestRejected=cgdCreateRequestRejected, ciscoGtpDirectorStatusGroup=ciscoGtpDirectorStatusGroup, ciscoGtpDirectorMIBConformance=ciscoGtpDirectorMIBConformance, ciscoGtpDirectorMIBCompliances=ciscoGtpDirectorMIBCompliances, cgdNotifEnable=cgdNotifEnable, ciscoGtpDirectorConfigurationsGroup=ciscoGtpDirectorConfigurationsGroup, cgdNotifMgmt=cgdNotifMgmt, ciscoGtpDirectorMIBObjects=ciscoGtpDirectorMIBObjects, cgdCreatePdpRequestFwded=cgdCreatePdpRequestFwded)
