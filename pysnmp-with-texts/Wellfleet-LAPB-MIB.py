#
# PySNMP MIB module Wellfleet-LAPB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-LAPB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, Bits, Counter64, iso, TimeTicks, ObjectIdentity, NotificationType, ModuleIdentity, MibIdentifier, IpAddress, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "Bits", "Counter64", "iso", "TimeTicks", "ObjectIdentity", "NotificationType", "ModuleIdentity", "MibIdentifier", "IpAddress", "Unsigned32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfDataLink, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfDataLink")
wfLapbTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8), )
if mibBuilder.loadTexts: wfLapbTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbTable.setDescription('********************************************************************** LAPB MIB record *********************************************************************')
wfLapbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1), ).setIndexNames((0, "Wellfleet-LAPB-MIB", "wfLapbLineNumber"), (0, "Wellfleet-LAPB-MIB", "wfLapbLLIndex"))
if mibBuilder.loadTexts: wfLapbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbEntry.setDescription('An entry in the LAPB table')
wfLapbDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbDelete.setDescription('Create/Delete parameter')
wfLapbDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbDisable.setDescription('Enable/Disable parameter')
wfLapbState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbState.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbState.setDescription('Line Driver state variable, Not Present, DSR Wait, Init, Down, Up')
wfLapbLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbLineNumber.setDescription('Instance identifier, Line Number, filled in by LAPB')
wfLapbLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbLLIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbLLIndex.setDescription('Instance identifier, Lower Layer Index, filled in by LAPB')
wfLapbCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbCct.setDescription('CCT number for this LAPB subsystem, it is associated with the driver or application running underneath it.')
wfLapbStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("dxe", 3))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbStationType.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbStationType.setDescription('Identifies the desired station type of this interface. A value of DxE indicates XID enabled but not negotiation has not yet taken place.')
wfLapbControlField = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modulo8", 1), ("modulo128", 2))).clone('modulo8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbControlField.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbControlField.setDescription('This parameter establishes the desired size of the sequence numbers used to number frames.')
wfLapbN1FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 4500)).clone(1600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbN1FrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbN1FrameSize.setDescription('The default maximum N1 frame size desired in number of bytes for a frame transmitted by the DxE. This excludes flags and 0 bits inserted for transparency.')
wfLapbKWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbKWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbKWindowSize.setDescription('The default transmit and receive window size for this Interface. This is the maximum number of unacknowledged sequence frames that may be outstanding from this DxE at any one time.')
wfLapbN2RxmitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbN2RxmitCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbN2RxmitCount.setDescription('The default N2 retry count indicates the number of retransmission attempts which will be tried per frame before a line is determined to be down. The retry count is max attempts following expiration of the T1 timer.')
wfLapbT1AckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbT1AckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbT1AckTimer.setDescription('The default T1 timer for this interface. This specifies the maximum time in tenths of seconds to wait for an acknowledgment of a frame.')
wfLapbT2AckDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbT2AckDelayTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbT2AckDelayTimer.setDescription('The default T2 timer for this interface. This specifies the maximum time in seconds to wait before sending an acknowledgment for a sequenced frame. A value of one means there will be no delay in acknowledgment generation.')
wfLapbT3DisconnectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbT3DisconnectTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbT3DisconnectTimer.setDescription('The T3 timer for this interface. This specifies the time in seconds to wait before considering the link disconnected. A value of one indicates the link will be considered disconnected upon completion of the frame exchange to disconnect the link.')
wfLapbT4IdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbT4IdleTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbT4IdleTimer.setDescription('The T4 timer for this interface. This specifies the maximum time in seconds to allow without frames being exchanged on the data link. Not implemented for this project.')
wfLapbActionInitiate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("passive", 2), ("activeDisc", 3))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbActionInitiate.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbActionInitiate.setDescription('This identifies the action LAPB will take to initiate link set-up.')
wfLapbXidDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbXidDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbXidDisable.setDescription('XID enable/disable parameter. This parameter is used to enable or disable transmission/reception of Test XID frames.')
wfLapbCommandAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 3))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbCommandAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbCommandAddress.setDescription('The local command address parameter contains the DTE or DCE value expressed as a single octet.')
wfLapbResponseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1))).clone(namedValues=NamedValues(("dte", 3), ("dce", 1))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbResponseAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbResponseAddress.setDescription('The local response address parameter contains the DTE or DCE value expressed as a single octet.')
wfLapbWanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 7))).clone(namedValues=NamedValues(("standard", 1), ("x25", 6), ("lapb", 7))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbWanProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbWanProtocol.setDescription('WAN protocol selection is provided via this parameter. The supported protocols can be selected per interface.')
wfLapbRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbRxOctets.setDescription('Number of octets received without error')
wfLapbRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbRxFrames.setDescription('Number of frames received without error')
wfLapbTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbTxOctets.setDescription('Number of octets transmitted without error')
wfLapbTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbTxFrames.setDescription('Number of frames transmitted without error')
wfLapbReXmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbReXmits.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbReXmits.setDescription('Number of retransmission occurances')
wfLapbRejectsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbRejectsTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbRejectsTx.setDescription('Number of reject frames which were transmitted')
wfLapbRejectsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbRejectsRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbRejectsRx.setDescription('Number of reject frames which were received')
wfLapbFrameRejectsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbFrameRejectsTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbFrameRejectsTx.setDescription('Number of Frame Rejects transmitted')
wfLapbFrameRejectsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbFrameRejectsRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbFrameRejectsRx.setDescription('Number of Frame Rejects received')
wfLapbRRsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbRRsTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbRRsTx.setDescription('Number of Receiver Ready frames transmitted')
wfLapbRRsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbRRsRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbRRsRx.setDescription('Number of Receiver Ready frames received')
wfLapbRNRsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbRNRsTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbRNRsTx.setDescription('Number of Receiver Not Ready frames transmitted')
wfLapbRNRsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbRNRsRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbRNRsRx.setDescription('Number of Receiver Not Ready frames received')
wfLapbResets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbResets.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbResets.setDescription('Number of Link Connection Resets')
wfLapbNormalDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbNormalDisc.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbNormalDisc.setDescription('Number of normal link disconnections')
wfLapbAbnormalDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbAbnormalDisc.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbAbnormalDisc.setDescription('Number of abnormal link disconnections')
wfLapbSetupAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbSetupAllowed.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbSetupAllowed.setDescription('Number of successful link connections')
wfLapbSetupRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfLapbSetupRefused.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbSetupRefused.setDescription('Number of unsuccessful link connections')
wfLapbNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gosip", 1), ("net2", 2))).clone('net2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbNetworkType.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbNetworkType.setDescription('The types GOSIP and NET2 are used in conjunction with the X.25 network')
wfLapbIdleRRFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbIdleRRFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbIdleRRFrames.setDescription('XID enable/disable parameter. This parameter is used to enable or disable transmission/reception of Test XID frames.')
wfLapbClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("x25", 2), ("ipex", 3))).clone('x25')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbClientType.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbClientType.setDescription('This parameter is used to describe the client above the LAPB protocol layer. By default, the client is the X.25 Packet layer. Currently, the only other selection is ipex or none.')
wfLapbRetransmitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 8, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLapbRetransmitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfLapbRetransmitTimer.setDescription('The Retransmit timer for this interface. This specifies the maximum time in seconds to allow without retransmitting frames after RNR and RR received on this interface.')
mibBuilder.exportSymbols("Wellfleet-LAPB-MIB", wfLapbFrameRejectsRx=wfLapbFrameRejectsRx, wfLapbRxFrames=wfLapbRxFrames, wfLapbCommandAddress=wfLapbCommandAddress, wfLapbRNRsTx=wfLapbRNRsTx, wfLapbKWindowSize=wfLapbKWindowSize, wfLapbN2RxmitCount=wfLapbN2RxmitCount, wfLapbT4IdleTimer=wfLapbT4IdleTimer, wfLapbStationType=wfLapbStationType, wfLapbXidDisable=wfLapbXidDisable, wfLapbState=wfLapbState, wfLapbSetupRefused=wfLapbSetupRefused, wfLapbLineNumber=wfLapbLineNumber, wfLapbLLIndex=wfLapbLLIndex, wfLapbNetworkType=wfLapbNetworkType, wfLapbIdleRRFrames=wfLapbIdleRRFrames, wfLapbN1FrameSize=wfLapbN1FrameSize, wfLapbRejectsRx=wfLapbRejectsRx, wfLapbClientType=wfLapbClientType, wfLapbRRsTx=wfLapbRRsTx, wfLapbTxFrames=wfLapbTxFrames, wfLapbRxOctets=wfLapbRxOctets, wfLapbTable=wfLapbTable, wfLapbT2AckDelayTimer=wfLapbT2AckDelayTimer, wfLapbSetupAllowed=wfLapbSetupAllowed, wfLapbActionInitiate=wfLapbActionInitiate, wfLapbRetransmitTimer=wfLapbRetransmitTimer, wfLapbT1AckTimer=wfLapbT1AckTimer, wfLapbEntry=wfLapbEntry, wfLapbDelete=wfLapbDelete, wfLapbRejectsTx=wfLapbRejectsTx, wfLapbFrameRejectsTx=wfLapbFrameRejectsTx, wfLapbNormalDisc=wfLapbNormalDisc, wfLapbRRsRx=wfLapbRRsRx, wfLapbWanProtocol=wfLapbWanProtocol, wfLapbCct=wfLapbCct, wfLapbT3DisconnectTimer=wfLapbT3DisconnectTimer, wfLapbReXmits=wfLapbReXmits, wfLapbRNRsRx=wfLapbRNRsRx, wfLapbResets=wfLapbResets, wfLapbTxOctets=wfLapbTxOctets, wfLapbAbnormalDisc=wfLapbAbnormalDisc, wfLapbResponseAddress=wfLapbResponseAddress, wfLapbDisable=wfLapbDisable, wfLapbControlField=wfLapbControlField)
