#
# PySNMP MIB module CISCO-VINES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VINES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:18:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Unsigned32, MibIdentifier, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, NotificationType, ModuleIdentity, TimeTicks, Counter64, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Unsigned32", "MibIdentifier", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "NotificationType", "ModuleIdentity", "TimeTicks", "Counter64", "Integer32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
PhysAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC-v1", "PhysAddress", "TruthValue")
ciscoVinesMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17))
ciscoVinesMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 1))
cvBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 1))
cvForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2))
cvTotal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3))
cvInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4))
ciscoVinesMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 3))
ciscoVinesMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 3, 1))
ciscoVinesMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 3, 2))
class VinesNetworkNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class VinesHostNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class VinesMetric(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 819200)

cvBasicNetwork = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 1, 1), VinesNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvBasicNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: cvBasicNetwork.setDescription('VINES network number of this router.')
cvBasicHost = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 1, 2), VinesHostNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvBasicHost.setStatus('mandatory')
if mibBuilder.loadTexts: cvBasicHost.setDescription('VINES host (subnetwork) number of this router.')
cvBasicNextClient = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 1, 3), VinesHostNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvBasicNextClient.setStatus('mandatory')
if mibBuilder.loadTexts: cvBasicNextClient.setDescription('Next VINES client host (subnetwork) number to be assigned by this router.')
cvForwNeighborNeighborCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwNeighborNeighborCount.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwNeighborNeighborCount.setDescription('The number of neighbors in the neighbor table, cvForwNeighborTable.')
cvForwNeighborPathCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwNeighborPathCount.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwNeighborPathCount.setDescription('The number of paths in the neighbor table, cvForwNeighborTable.')
cvForwNeighborVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwNeighborVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwNeighborVersion.setDescription('The version number of the neighbor table, cvForwNeighborTable, incremented each time a route or path is added or deleted.')
cvForwNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4), )
if mibBuilder.loadTexts: cvForwNeighborTable.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwNeighborTable.setDescription('A table of information about neighbors of this router.')
cvForwNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-VINES-MIB", "cvForwNeighborNetwork"), (0, "CISCO-VINES-MIB", "cvForwNeighborHost"), (0, "IF-MIB", "ifIndex"), (0, "CISCO-VINES-MIB", "cvForwNeighborPhysAddress"))
if mibBuilder.loadTexts: cvForwNeighborEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwNeighborEntry.setDescription('Information about a neighbor of this router. Entries are indexed by network interface (ifIndex) as there may be more than one path to a given neighbor.')
cvForwNeighborNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1, 1), VinesNetworkNumber())
if mibBuilder.loadTexts: cvForwNeighborNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwNeighborNetwork.setDescription("The network part of the neighbor's VINES internet address.")
cvForwNeighborHost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1, 2), VinesHostNumber())
if mibBuilder.loadTexts: cvForwNeighborHost.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwNeighborHost.setDescription("The host part of the neighbor's VINES internet address.")
cvForwNeighborPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1, 3), PhysAddress())
if mibBuilder.loadTexts: cvForwNeighborPhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwNeighborPhysAddress.setDescription("The neighbor's physical address on the network interface indicated by this entry's ifIndex, interpreted according to ifType at ifIndex in ifTable.")
cvForwNeighborSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unrecognized", 1), ("self", 2), ("rtpRedirect", 3), ("rtpUpdate", 4), ("manualRoute", 5), ("igrp", 6), ("test", 7), ("manualNeighbor", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwNeighborSource.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwNeighborSource.setDescription('The source of this entry.')
cvForwNeighborRtpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwNeighborRtpVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwNeighborRtpVersion.setDescription('The version of RTP through which the entry was learned.')
cvForwNeighborUsageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("next", 1), ("roundRobin", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwNeighborUsageType.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwNeighborUsageType.setDescription('The way in which this path will be used to forward a message.')
cvForwNeighborAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwNeighborAge.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwNeighborAge.setDescription('The age of the entry, in seconds. The value -1 indicates not applicable, for RTP Version 0 neighbors on WAN interfaces, when the interface is configured for delta-only updates.')
cvForwNeighborMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1, 8), VinesMetric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwNeighborMetric.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwNeighborMetric.setDescription('The expected one-way delay to send a message to this neighbor.')
cvForwNeighborUses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwNeighborUses.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwNeighborUses.setDescription("For all cvForwNeighborSource values but 'manualRoute', the number of times the path has been used to forward a message. For a 'manualRoute', the number of static routes that use this neighbor as their first hop.")
cvForwRouteRouterCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteRouterCount.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwRouteRouterCount.setDescription('The number of routers (servers) in the route table, cvForwRouteTable.')
cvForwRouteRouteCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteRouteCount.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwRouteRouteCount.setDescription('The number of routes in the route table, cvForwRouteTable.')
cvForwRouteVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwRouteVersion.setDescription('The version number of the route table, cvForwRouteTable, incremented each time a route or server (router) is added or deleted.')
cvForwRouteUpdateCountdown = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteUpdateCountdown.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwRouteUpdateCountdown.setDescription('The number of seconds until the next routing update.')
cvForwRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9), )
if mibBuilder.loadTexts: cvForwRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwRouteTable.setDescription('A table of information about routes from this router to other VINES networks.')
cvForwRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1), ).setIndexNames((0, "CISCO-VINES-MIB", "cvForwRouteNetworkNumber"), (0, "CISCO-VINES-MIB", "cvForwRouteNeighborNetwork"))
if mibBuilder.loadTexts: cvForwRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwRouteEntry.setDescription('Information about a route from this router to a remote VINES network.')
cvForwRouteNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 1), VinesNetworkNumber())
if mibBuilder.loadTexts: cvForwRouteNetworkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwRouteNetworkNumber.setDescription("The remote network's VINES network number.")
cvForwRouteNeighborNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 2), VinesNetworkNumber())
if mibBuilder.loadTexts: cvForwRouteNeighborNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwRouteNeighborNetwork.setDescription('The network part of the VINES internetwork address of the neighbor that is the next hop to the remote network. Since the neighbor is a router by definition, its host number is 1.')
cvForwRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unrecognized", 1), ("self", 2), ("rtpRedirect", 3), ("rtpUpdate", 4), ("manualRoute", 5), ("igrp", 6), ("test", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteSource.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwRouteSource.setDescription('The source of this entry.')
cvForwRouteRtpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteRtpVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwRouteRtpVersion.setDescription('The version of RTP through which the entry was learned.')
cvForwRouteUseNext = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteUseNext.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwRouteUseNext.setDescription('Whether this route is the one to use next to get to the remote network.')
cvForwRouteForwardBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteForwardBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwRouteForwardBroadcast.setDescription('Whether this route will be used to forward a broadcast from a serverless network.')
cvForwRouteSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteSuppress.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwRouteSuppress.setDescription('Whether this route is temporarily being suppressed as normal operation before eventually advertising it.')
cvForwRouteLoadShareEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteLoadShareEligible.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwRouteLoadShareEligible.setDescription('Whether this route is eligible for load sharing because its metric is equal to the best metric for the same neighbor.')
cvForwRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteAge.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwRouteAge.setDescription('The age of the entry, in seconds. The value -1 indicates not applicable, for RTP Version 0 neighbors on WAN interfaces, when the interface is configured for delta-only updates.')
cvForwRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 10), VinesMetric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteMetric.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwRouteMetric.setDescription('The expected one-way delay to send a message on this route.')
cvForwRouteUses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 2, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvForwRouteUses.setStatus('mandatory')
if mibBuilder.loadTexts: cvForwRouteUses.setDescription('The number of times the route has been used to forward a message.')
cvTotalInputPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalInputPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalInputPackets.setDescription('Total count of number of VINES input packets.')
cvTotalOutputPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalOutputPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalOutputPackets.setDescription('Total count of number of VINES output packets.')
cvTotalLocalDestPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalLocalDestPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalLocalDestPackets.setDescription('Total count of VINES input packets for this host.')
cvTotalForwardedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalForwardedPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalForwardedPackets.setDescription('Total count of number of VINES packets forwarded.')
cvTotalBroadcastInPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalBroadcastInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalBroadcastInPackets.setDescription('Total count of number of VINES input broadcast packets.')
cvTotalBroadcastOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalBroadcastOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalBroadcastOutPackets.setDescription('Total count of number of VINES output broadcast packets.')
cvTotalBroadcastForwardPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalBroadcastForwardPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalBroadcastForwardPackets.setDescription('Total count of number of VINES broadcast packets forwarded.')
cvTotalLanOnlyPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalLanOnlyPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalLanOnlyPackets.setDescription('Total count of number of VINES broadcast packets not forwarded to all interfaces because the LAN ONLY bit was set.')
cvTotalNotOver4800Packets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalNotOver4800Packets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalNotOver4800Packets.setDescription('Total count of number of VINES broadcast packets not forwarded to all interfaces because the OVER 4800 BPS bit was set.')
cvTotalNoChargesPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalNoChargesPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalNoChargesPackets.setDescription('Total count of number of VINES broadcast packets not forwarded to all interfaces because the NO CHARGES only bit was set.')
cvTotalFormatErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalFormatErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalFormatErrors.setDescription('Total count of number of VINES input packets with header errors.')
cvTotalChecksumErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalChecksumErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalChecksumErrors.setDescription('Total count of number of VINES input packets with checksum errors.')
cvTotalHopCountsExceeded = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalHopCountsExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalHopCountsExceeded.setDescription('Total count of number of VINES input packets that have exceeded the maximum hop count.')
cvTotalNoRouteDrops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalNoRouteDrops.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalNoRouteDrops.setDescription('Total count of number of VINES packets dropped due to no route.')
cvTotalEncapsFailedDrops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalEncapsFailedDrops.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalEncapsFailedDrops.setDescription('Total count of number of VINES packets dropped due to output encapsulation failed.')
cvTotalUnknownPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalUnknownPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalUnknownPackets.setDescription('Total count of number of unknown VINES input packets.')
cvTotalIcpInPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalIcpInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalIcpInPackets.setDescription('Total count of number of VINES ICP packets received.')
cvTotalIcpOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalIcpOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalIcpOutPackets.setDescription('Total count of number of VINES ICP packets generated.')
cvTotalMetricOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalMetricOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalMetricOutPackets.setDescription('Total count of number of VINES ICP Metric Notification packets generated.')
cvTotalMacEchoInPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalMacEchoInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalMacEchoInPackets.setDescription('Total count of number of VINES MAC level Echo packets received.')
cvTotalMacEchoOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalMacEchoOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalMacEchoOutPackets.setDescription('Total count of number of VINES MAC level Echo packets generated.')
cvTotalEchoInPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalEchoInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalEchoInPackets.setDescription('Total count of number of VINES Echo packets received.')
cvTotalEchoOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalEchoOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalEchoOutPackets.setDescription('Total count of number of VINES Echo packets generated.')
cvTotalProxyOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalProxyOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalProxyOutPackets.setDescription('Total count of proxy packets sent.')
cvTotalProxyReplyOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 3, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvTotalProxyReplyOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvTotalProxyReplyOutPackets.setDescription('Total count of responses to proxy packets.')
cvIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1), )
if mibBuilder.loadTexts: cvIfConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfConfigTable.setDescription('VINES interface configuration table.')
cvIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvIfConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfConfigEntry.setDescription('VINES interface configuration table entry.')
cvIfConfigMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 1), VinesMetric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigMetric.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfConfigMetric.setDescription('VINES protocol metric value.')
cvIfConfigEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("arpa", 1), ("tokenRing", 2), ("snap", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigEncapsulation.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfConfigEncapsulation.setDescription('VINES protocol default encapsulation')
cvIfConfigAccesslist = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigAccesslist.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfConfigAccesslist.setDescription('VINES protocol outgoing access list number.')
cvIfConfigPropagate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("always", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigPropagate.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfConfigPropagate.setDescription('VINES protocol propagation control.')
cvIfConfigArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("never", 1), ("always", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigArpEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfConfigArpEnabled.setDescription('VINES protocol arp replies enabled.')
cvIfConfigServerless = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("never", 1), ("dynamic", 2), ("always", 3), ("alwaysBroadcast", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigServerless.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfConfigServerless.setDescription('VINES protocol serverless support enabled.')
cvIfConfigRedirectInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigRedirectInterval.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfConfigRedirectInterval.setDescription('VINES protocol redirect interval (in ms).')
cvIfConfigSplitDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigSplitDisabled.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfConfigSplitDisabled.setDescription('VINES protocol split horizon disabled')
cvIfConfigLineup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigLineup.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfConfigLineup.setDescription('VINES protocol line up/down.')
cvIfConfigFastokay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigFastokay.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfConfigFastokay.setDescription('VINES protocol fast switching supported.')
cvIfConfigRouteCache = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigRouteCache.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfConfigRouteCache.setDescription('VINES protocol fast switching requested')
cvIfConfigInputRouterFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigInputRouterFilter.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfConfigInputRouterFilter.setDescription('VINES protocol filter on received routing information source address.')
cvIfConfigInputNetworkFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigInputNetworkFilter.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfConfigInputNetworkFilter.setDescription('VINES protocol filter on received routing information content.')
cvIfConfigOutputNetworkFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfConfigOutputNetworkFilter.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfConfigOutputNetworkFilter.setDescription('VINES protocol filter on transmitted routing information content.')
cvIfCountInTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2), )
if mibBuilder.loadTexts: cvIfCountInTable.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInTable.setDescription('VINES interface input counter table.')
cvIfCountInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvIfCountInEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInEntry.setDescription('VINES interface input counter table entry.')
cvIfCountInNotEnabledDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInNotEnabledDrops.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInNotEnabledDrops.setDescription('VINES protocol count of input packets discarded because interface not configured.')
cvIfCountInFormatErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInFormatErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInFormatErrors.setDescription('VINES protocol count of input packets with format errors.')
cvIfCountInLocalDestPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInLocalDestPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInLocalDestPackets.setDescription('VINES protocol count of input packets destined for this router.')
cvIfCountInBroadcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInBroadcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInBroadcastPackets.setDescription('VINES protocol input broadcast count.')
cvIfCountInForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInForwardedPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInForwardedPackets.setDescription('VINES protocol count of input packets forwarded to another interface.')
cvIfCountInNoRouteDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInNoRouteDrops.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInNoRouteDrops.setDescription('VINES protocol count of input packets dropped because there was no route to the destination.')
cvIfCountInZeroHopCountDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInZeroHopCountDrops.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInZeroHopCountDrops.setDescription('VINES protocol count of input packets dropped due to a zero hop count.')
cvIfCountInChecksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInChecksumErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInChecksumErrors.setDescription('VINES protocol count of input packets with checksum errors.')
cvIfCountInArpQueryRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInArpQueryRequests.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInArpQueryRequests.setDescription('VINES protocol count of input ARP Query Request messages.')
cvIfCountInArpQueryResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInArpQueryResponses.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInArpQueryResponses.setDescription('VINES protocol count of input ARP Query Response messages.')
cvIfCountInArpAssignmentRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInArpAssignmentRequests.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInArpAssignmentRequests.setDescription('VINES protocol count of input ARP Assignment Request messages.')
cvIfCountInArpAssignmentResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInArpAssignmentResponses.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInArpAssignmentResponses.setDescription('VINES protocol count of input ARP Assignment Response messages.')
cvIfCountInArpIllegalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInArpIllegalMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInArpIllegalMessages.setDescription('VINES protocol count of input illegal ARP messages.')
cvIfCountInIcpErrorMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInIcpErrorMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInIcpErrorMessages.setDescription('VINES protocol count of input ICP error messages.')
cvIfCountInIcpMetricMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInIcpMetricMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInIcpMetricMessages.setDescription('VINES protocol count of input ICP metric messages.')
cvIfCountInIcpIllegalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInIcpIllegalMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInIcpIllegalMessages.setDescription('VINES protocol count of input illegal ICP messages.')
cvIfCountInIpcMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInIpcMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInIpcMessages.setDescription('VINES protocol count of input IPC messages.')
cvIfCountInRtp0Messages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInRtp0Messages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInRtp0Messages.setDescription('VINES protocol count of input RTP type 0 messages.')
cvIfCountInRtp1Messages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInRtp1Messages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInRtp1Messages.setDescription('VINES protocol count of input RTP Request messages.')
cvIfCountInRtp2Messages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInRtp2Messages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInRtp2Messages.setDescription('VINES protocol count of input RTP type 2 messages.')
cvIfCountInRtp3Messages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInRtp3Messages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInRtp3Messages.setDescription('VINES protocol count of input RTP type 3 messages.')
cvIfCountInRtpUpdateMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInRtpUpdateMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInRtpUpdateMessages.setDescription('VINES protocol count of input RTP Update messages.')
cvIfCountInRtpResponseMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInRtpResponseMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInRtpResponseMessages.setDescription('VINES protocol count of input RTP Response messages.')
cvIfCountInRtpRedirectMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInRtpRedirectMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInRtpRedirectMessages.setDescription('VINES protocol count of input RTP Redirect messages.')
cvIfCountInRtpIllegalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInRtpIllegalMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInRtpIllegalMessages.setDescription('VINES protocol count of input illegal RTP messages.')
cvIfCountInSppMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInSppMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInSppMessages.setDescription('VINES protocol count of input SPP messages.')
cvIfCountInIpUnknownProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInIpUnknownProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInIpUnknownProtocols.setDescription('VINES protocol count of input packets of unknown VINES protocols.')
cvIfCountInIpcUnknownPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInIpcUnknownPorts.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInIpcUnknownPorts.setDescription('VINES protocol count of input packets of unknown VINES IPC ports.')
cvIfCountInBroadcastsHelpered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInBroadcastsHelpered.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInBroadcastsHelpered.setDescription('VINES protocol count of input packets helpered to another server.')
cvIfCountInBroadcastsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInBroadcastsForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInBroadcastsForwarded.setDescription('VINES protocol input broadcast forwarded to other interface(s).')
cvIfCountInBroadcastDuplicates = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInBroadcastDuplicates.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInBroadcastDuplicates.setDescription('VINES protocol input duplicate broadcast count.')
cvIfCountInEchoPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInEchoPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInEchoPackets.setDescription('VINES protocol count of input IPC echo messages.')
cvIfCountInMacEchoPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInMacEchoPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInMacEchoPackets.setDescription('VINES protocol count of input MAC layer echo frames.')
cvIfCountInProxyReplyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountInProxyReplyPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountInProxyReplyPackets.setDescription('VINES protocol count of responses to proxy packets.')
cvIfCountOutTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3), )
if mibBuilder.loadTexts: cvIfCountOutTable.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutTable.setDescription('VINES interface output counter table.')
cvIfCountOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvIfCountOutEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutEntry.setDescription('VINES interface output counter table entry.')
cvIfCountOutUnicastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutUnicastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutUnicastPackets.setDescription('VINES protocol unicast packets generated.')
cvIfCountOutBroadcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutBroadcastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutBroadcastPackets.setDescription('VINES protocol broadcast packets generated.')
cvIfCountOutForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutForwardedPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutForwardedPackets.setDescription('VINES protocol count of forwarded packets.')
cvIfCountOutEncapsulationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutEncapsulationFailures.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutEncapsulationFailures.setDescription('VINES protocol output encapsulation failures.')
cvIfCountOutAccessFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutAccessFailures.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutAccessFailures.setDescription('VINES protocol output access list failures.')
cvIfCountOutDownFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutDownFailures.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutDownFailures.setDescription('VINES protocol output interface down count.')
cvIfCountOutPacketsNotBroadcastToSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutPacketsNotBroadcastToSource.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutPacketsNotBroadcastToSource.setDescription('VINES protocol output broadcast not sent because interface leads back to the source.')
cvIfCountOutPacketsNotBroadcastLanOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutPacketsNotBroadcastLanOnly.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutPacketsNotBroadcastLanOnly.setDescription("VINES protocol output broadcast not sent due to 'Lan Only' class.")
cvIfCountOutPacketsNotBroadcastNotOver4800 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutPacketsNotBroadcastNotOver4800.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutPacketsNotBroadcastNotOver4800.setDescription("VINES protocol output broadcast not sent due to 'High Speed' class.")
cvIfCountOutPacketsNotBroadcastNoCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutPacketsNotBroadcastNoCharge.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutPacketsNotBroadcastNoCharge.setDescription("VINES protocol output broadcast not sent due to 'No Charges' class.")
cvIfCountOutBroadcastsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutBroadcastsForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutBroadcastsForwarded.setDescription('VINES protocol output broadcast forwarded from another interface.')
cvIfCountOutBroadcastsHelpered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutBroadcastsHelpered.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutBroadcastsHelpered.setDescription('VINES protocol output broadcast helpered to a VINES server.')
cvIfCountOutArpQueryRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutArpQueryRequests.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutArpQueryRequests.setDescription('VINES protocol count of output ARP Query Request messages.')
cvIfCountOutArpQueryResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutArpQueryResponses.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutArpQueryResponses.setDescription('VINES protocol count of output ARP Query Response messages.')
cvIfCountOutArpAssignmentRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutArpAssignmentRequests.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutArpAssignmentRequests.setDescription('VINES protocol count of output ARP Assignment Request messages.')
cvIfCountOutArpAssignmentResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutArpAssignmentResponses.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutArpAssignmentResponses.setDescription('VINES protocol count of input ARP Assignment Response messages.')
cvIfCountOutIcpErrorMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutIcpErrorMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutIcpErrorMessages.setDescription('VINES protocol count of output IPC Error messages.')
cvIfCountOutIcpMetricMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutIcpMetricMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutIcpMetricMessages.setDescription('VINES protocol count of output IPC metric messages.')
cvIfCountOutIpcMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutIpcMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutIpcMessages.setDescription('VINES protocol count of output ICP messages.')
cvIfCountOutRtp0Messages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutRtp0Messages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutRtp0Messages.setDescription('VINES protocol count of output RTP type 0 messages.')
cvIfCountOutRtpRequestMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutRtpRequestMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutRtpRequestMessages.setDescription('VINES protocol count of output RTP Request messages.')
cvIfCountOutRtp2Messages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutRtp2Messages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutRtp2Messages.setDescription('VINES protocol count of output RTP type 2 messages.')
cvIfCountOutRtp3Messages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutRtp3Messages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutRtp3Messages.setDescription('VINES protocol count of output RTP type 3 messages.')
cvIfCountOutRtpUpdateMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutRtpUpdateMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutRtpUpdateMessages.setDescription('VINES protocol count of output RTP Update messages.')
cvIfCountOutRtpResponseMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutRtpResponseMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutRtpResponseMessages.setDescription('VINES protocol count of output RTP Response messages.')
cvIfCountOutRtpRedirectMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutRtpRedirectMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutRtpRedirectMessages.setDescription('VINES protocol count of output RTP Redirect messages.')
cvIfCountOutSppMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutSppMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutSppMessages.setDescription('VINES protocol count of output SPP messages.')
cvIfCountOutEchoPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutEchoPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutEchoPackets.setDescription('VINES protocol count of output IPC echo messages.')
cvIfCountOutMacEchoPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutMacEchoPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutMacEchoPackets.setDescription('VINES protocol count of output IPCMAC layer echo frames.')
cvIfCountOutProxyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 17, 1, 4, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvIfCountOutProxyPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cvIfCountOutProxyPackets.setDescription('VINES protocol count of proxy packets sent.')
ciscoVinesMIBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 3, 2, 1))
ciscoVinesMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 17, 3, 1, 1))
mibBuilder.exportSymbols("CISCO-VINES-MIB", cvTotalBroadcastInPackets=cvTotalBroadcastInPackets, cvIfCountOutPacketsNotBroadcastNoCharge=cvIfCountOutPacketsNotBroadcastNoCharge, cvForwNeighborAge=cvForwNeighborAge, cvForwNeighborMetric=cvForwNeighborMetric, cvIfConfigInputRouterFilter=cvIfConfigInputRouterFilter, cvTotalForwardedPackets=cvTotalForwardedPackets, cvIfCountInEchoPackets=cvIfCountInEchoPackets, cvTotalEchoOutPackets=cvTotalEchoOutPackets, cvTotalIcpOutPackets=cvTotalIcpOutPackets, cvIfCountInProxyReplyPackets=cvIfCountInProxyReplyPackets, cvIfCountInBroadcastDuplicates=cvIfCountInBroadcastDuplicates, cvIfCountOutPacketsNotBroadcastToSource=cvIfCountOutPacketsNotBroadcastToSource, ciscoVinesMIBCompliances=ciscoVinesMIBCompliances, cvIfCountInMacEchoPackets=cvIfCountInMacEchoPackets, cvBasicNetwork=cvBasicNetwork, cvBasicHost=cvBasicHost, cvIfCountOutArpAssignmentResponses=cvIfCountOutArpAssignmentResponses, cvIfCountOutRtpRequestMessages=cvIfCountOutRtpRequestMessages, cvIfConfigOutputNetworkFilter=cvIfConfigOutputNetworkFilter, cvIfCountOutUnicastPackets=cvIfCountOutUnicastPackets, ciscoVinesMIBGroups=ciscoVinesMIBGroups, cvIfCountInRtp1Messages=cvIfCountInRtp1Messages, cvIfCountInLocalDestPackets=cvIfCountInLocalDestPackets, cvIfCountInArpAssignmentRequests=cvIfCountInArpAssignmentRequests, cvIfCountInIpcMessages=cvIfCountInIpcMessages, ciscoVinesMIBObjects=ciscoVinesMIBObjects, cvIfCountOutIcpMetricMessages=cvIfCountOutIcpMetricMessages, cvForwarding=cvForwarding, cvTotalOutputPackets=cvTotalOutputPackets, cvForwRouteAge=cvForwRouteAge, cvIfCountInRtp2Messages=cvIfCountInRtp2Messages, cvIfCountOutEchoPackets=cvIfCountOutEchoPackets, cvTotalLocalDestPackets=cvTotalLocalDestPackets, cvForwNeighborPhysAddress=cvForwNeighborPhysAddress, cvIfCountInArpIllegalMessages=cvIfCountInArpIllegalMessages, cvForwRouteRtpVersion=cvForwRouteRtpVersion, cvBasicNextClient=cvBasicNextClient, cvForwRouteVersion=cvForwRouteVersion, cvIfConfigServerless=cvIfConfigServerless, cvForwNeighborNeighborCount=cvForwNeighborNeighborCount, cvTotalIcpInPackets=cvTotalIcpInPackets, cvIfConfigRedirectInterval=cvIfConfigRedirectInterval, VinesMetric=VinesMetric, ciscoVinesMIB=ciscoVinesMIB, cvForwRouteRouterCount=cvForwRouteRouterCount, cvIfCountInBroadcastPackets=cvIfCountInBroadcastPackets, cvTotalFormatErrors=cvTotalFormatErrors, cvIfCountOutDownFailures=cvIfCountOutDownFailures, cvIfCountInRtp0Messages=cvIfCountInRtp0Messages, cvForwRouteLoadShareEligible=cvForwRouteLoadShareEligible, cvIfCountOutEntry=cvIfCountOutEntry, cvIfCountInRtpResponseMessages=cvIfCountInRtpResponseMessages, ciscoVinesMIBGroup=ciscoVinesMIBGroup, cvForwNeighborNetwork=cvForwNeighborNetwork, cvForwNeighborHost=cvForwNeighborHost, cvForwRouteSource=cvForwRouteSource, cvForwRouteForwardBroadcast=cvForwRouteForwardBroadcast, cvTotalLanOnlyPackets=cvTotalLanOnlyPackets, cvIfCountOutIcpErrorMessages=cvIfCountOutIcpErrorMessages, cvIfCountOutIpcMessages=cvIfCountOutIpcMessages, cvIfCountInIpcUnknownPorts=cvIfCountInIpcUnknownPorts, cvIfConfigAccesslist=cvIfConfigAccesslist, cvIfConfigFastokay=cvIfConfigFastokay, cvIfCountInFormatErrors=cvIfCountInFormatErrors, cvForwRouteUses=cvForwRouteUses, cvForwNeighborEntry=cvForwNeighborEntry, cvIfCountInNoRouteDrops=cvIfCountInNoRouteDrops, cvIfCountInZeroHopCountDrops=cvIfCountInZeroHopCountDrops, cvIfCountOutPacketsNotBroadcastNotOver4800=cvIfCountOutPacketsNotBroadcastNotOver4800, cvInterface=cvInterface, cvIfCountOutSppMessages=cvIfCountOutSppMessages, cvForwNeighborPathCount=cvForwNeighborPathCount, cvIfCountOutRtpResponseMessages=cvIfCountOutRtpResponseMessages, cvIfConfigPropagate=cvIfConfigPropagate, cvIfCountInArpQueryResponses=cvIfCountInArpQueryResponses, cvIfCountOutRtp0Messages=cvIfCountOutRtp0Messages, cvForwRouteTable=cvForwRouteTable, cvTotalMacEchoOutPackets=cvTotalMacEchoOutPackets, cvIfConfigArpEnabled=cvIfConfigArpEnabled, cvTotalNoRouteDrops=cvTotalNoRouteDrops, cvIfCountOutBroadcastPackets=cvIfCountOutBroadcastPackets, cvForwRouteNetworkNumber=cvForwRouteNetworkNumber, cvIfCountOutArpAssignmentRequests=cvIfCountOutArpAssignmentRequests, cvIfCountOutRtpRedirectMessages=cvIfCountOutRtpRedirectMessages, cvIfCountOutAccessFailures=cvIfCountOutAccessFailures, cvIfCountOutRtp3Messages=cvIfCountOutRtp3Messages, cvIfConfigTable=cvIfConfigTable, VinesNetworkNumber=VinesNetworkNumber, cvTotalUnknownPackets=cvTotalUnknownPackets, cvIfConfigEncapsulation=cvIfConfigEncapsulation, cvIfCountInTable=cvIfCountInTable, cvIfConfigMetric=cvIfConfigMetric, cvTotalProxyReplyOutPackets=cvTotalProxyReplyOutPackets, cvTotal=cvTotal, cvTotalNotOver4800Packets=cvTotalNotOver4800Packets, cvForwRouteUseNext=cvForwRouteUseNext, cvBasic=cvBasic, cvIfCountInArpAssignmentResponses=cvIfCountInArpAssignmentResponses, cvForwNeighborTable=cvForwNeighborTable, cvForwRouteEntry=cvForwRouteEntry, cvIfConfigRouteCache=cvIfConfigRouteCache, cvTotalEchoInPackets=cvTotalEchoInPackets, cvTotalMacEchoInPackets=cvTotalMacEchoInPackets, cvIfConfigEntry=cvIfConfigEntry, cvIfCountOutBroadcastsHelpered=cvIfCountOutBroadcastsHelpered, cvIfCountInIpUnknownProtocols=cvIfCountInIpUnknownProtocols, cvTotalBroadcastForwardPackets=cvTotalBroadcastForwardPackets, cvForwNeighborRtpVersion=cvForwNeighborRtpVersion, cvIfCountOutMacEchoPackets=cvIfCountOutMacEchoPackets, cvTotalNoChargesPackets=cvTotalNoChargesPackets, cvIfCountOutTable=cvIfCountOutTable, cvTotalHopCountsExceeded=cvTotalHopCountsExceeded, cvIfCountInIcpMetricMessages=cvIfCountInIcpMetricMessages, cvIfCountOutPacketsNotBroadcastLanOnly=cvIfCountOutPacketsNotBroadcastLanOnly, cvIfCountOutProxyPackets=cvIfCountOutProxyPackets, cvIfCountInRtpRedirectMessages=cvIfCountInRtpRedirectMessages, cvIfCountOutArpQueryRequests=cvIfCountOutArpQueryRequests, cvTotalMetricOutPackets=cvTotalMetricOutPackets, cvForwRouteRouteCount=cvForwRouteRouteCount, cvTotalProxyOutPackets=cvTotalProxyOutPackets, cvTotalBroadcastOutPackets=cvTotalBroadcastOutPackets, cvTotalEncapsFailedDrops=cvTotalEncapsFailedDrops, cvForwNeighborSource=cvForwNeighborSource, cvIfConfigInputNetworkFilter=cvIfConfigInputNetworkFilter, cvIfCountInSppMessages=cvIfCountInSppMessages, cvForwRouteSuppress=cvForwRouteSuppress, cvIfCountInNotEnabledDrops=cvIfCountInNotEnabledDrops, cvIfCountInChecksumErrors=cvIfCountInChecksumErrors, cvTotalInputPackets=cvTotalInputPackets, cvIfConfigLineup=cvIfConfigLineup, cvIfCountInIcpErrorMessages=cvIfCountInIcpErrorMessages, cvIfCountOutBroadcastsForwarded=cvIfCountOutBroadcastsForwarded, cvIfCountInIcpIllegalMessages=cvIfCountInIcpIllegalMessages, cvForwRouteNeighborNetwork=cvForwRouteNeighborNetwork, ciscoVinesMIBConformance=ciscoVinesMIBConformance, cvForwNeighborUses=cvForwNeighborUses, cvIfCountInRtp3Messages=cvIfCountInRtp3Messages, cvIfCountInRtpUpdateMessages=cvIfCountInRtpUpdateMessages, cvTotalChecksumErrors=cvTotalChecksumErrors, cvForwRouteMetric=cvForwRouteMetric, cvIfCountInEntry=cvIfCountInEntry, cvIfCountOutRtpUpdateMessages=cvIfCountOutRtpUpdateMessages, cvIfCountOutEncapsulationFailures=cvIfCountOutEncapsulationFailures, cvIfCountInArpQueryRequests=cvIfCountInArpQueryRequests, cvIfCountInForwardedPackets=cvIfCountInForwardedPackets, ciscoVinesMIBCompliance=ciscoVinesMIBCompliance, cvIfCountOutForwardedPackets=cvIfCountOutForwardedPackets, cvIfCountOutArpQueryResponses=cvIfCountOutArpQueryResponses, cvForwRouteUpdateCountdown=cvForwRouteUpdateCountdown, cvForwNeighborUsageType=cvForwNeighborUsageType, cvIfCountOutRtp2Messages=cvIfCountOutRtp2Messages, cvIfCountInBroadcastsForwarded=cvIfCountInBroadcastsForwarded, cvIfConfigSplitDisabled=cvIfConfigSplitDisabled, cvIfCountInRtpIllegalMessages=cvIfCountInRtpIllegalMessages, VinesHostNumber=VinesHostNumber, cvIfCountInBroadcastsHelpered=cvIfCountInBroadcastsHelpered, cvForwNeighborVersion=cvForwNeighborVersion)
