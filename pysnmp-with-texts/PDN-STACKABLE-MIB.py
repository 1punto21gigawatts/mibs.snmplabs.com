#
# PySNMP MIB module PDN-STACKABLE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-STACKABLE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:39:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
pdn_common, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-common")
SwitchState, = mibBuilder.importSymbols("PDN-TC", "SwitchState")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, Bits, Gauge32, iso, NotificationType, Unsigned32, MibIdentifier, Counter32, ModuleIdentity, Counter64, TimeTicks, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "Gauge32", "iso", "NotificationType", "Unsigned32", "MibIdentifier", "Counter32", "ModuleIdentity", "Counter64", "TimeTicks", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
pdnStackable = ModuleIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36))
pdnStackable.setRevisions(('2004-09-14 00:00', '2003-03-12 00:00', '2002-07-31 00:00', '2002-05-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pdnStackable.setRevisionsDescriptions(('Added stack links for the Verdun ML PPP project. Also, cleaned up errors flaged by libsmi. These changes were radical, but only effected stuff that has not been implemented in any agents.', 'Added third stack link for the Verdun product.', 'Added Single Management Entity objects', 'Initial Release.',))
if mibBuilder.loadTexts: pdnStackable.setLastUpdated('200409140000Z')
if mibBuilder.loadTexts: pdnStackable.setOrganization('Paradyne Networks MIB Working Group Other information about group editing the MIB')
if mibBuilder.loadTexts: pdnStackable.setContactInfo('Paradyne Networks, Inc. 8545 126th Avenue North Largo, FL 33733 www.paradyne.com General Comments to: mibwg_team@paradyne.com Editors Clay Sikes')
if mibBuilder.loadTexts: pdnStackable.setDescription('This MIB contains objects that are used for configuration and statistics reporting things that are unique to a stackable product.')
pdnStackableNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 0))
pdnStackableObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 1))
pdnStackableAFNs = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 2))
pdnStackableConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 3))
wanInterface = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 1, 1), Bits().clone(namedValues=NamedValues(("stackLink1", 0), ("stackLink2", 1), ("plugInModule", 2), ("stackLink3", 3), ("stackLink4", 4), ("stackLink5", 5), ("stackLink6", 6), ("stackLink7", 7), ("stackLink8", 8), ("stackLink9", 9), ("stackLink10", 10), ("stackLink11", 11), ("stackLink12", 12), ("stackLink13", 13), ("stackLink14", 14), ("stackLink15", 15), ("stackLink16", 16), ("stackLink17", 17), ("stackLink18", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanInterface.setStatus('current')
if mibBuilder.loadTexts: wanInterface.setDescription('This object allows the WAN interface to be selected. Given that the syntax for this object is BITS, it is intented that the implementation could support multiple-simulatneous uplinks. There is no default value suggested or specified with a DEFVAL directive. The intent is that the particular project using this MIB object will specify its own default value. It seems like projects using this MIB object may be different enough that it would not be a good idea to specify a default here.')
pdnStackMethod = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("daisyChain", 1), ("star", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnStackMethod.setStatus('current')
if mibBuilder.loadTexts: pdnStackMethod.setDescription('This object identifies the method by which units are interconnected.')
pdnStackConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 1, 3), )
if mibBuilder.loadTexts: pdnStackConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: pdnStackConfigurationTable.setDescription("This table is used to display the stack configuration. Implementation details regarding units becoming attached to or removed from the Stack should be covered in the implementation's Operational Specification.")
pdnStackConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 1, 3, 1), ).setIndexNames((0, "PDN-STACKABLE-MIB", "pdnUnitExternalID"))
if mibBuilder.loadTexts: pdnStackConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: pdnStackConfigurationEntry.setDescription('Each entry represents a unit in the stack.')
pdnUnitExternalID = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: pdnUnitExternalID.setStatus('current')
if mibBuilder.loadTexts: pdnUnitExternalID.setDescription('This object is the External ID used to refer to a particular unit. The value of this External ID will typically be indicated on the unit by some means such as a LED.')
pdnUnitEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnUnitEntPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: pdnUnitEntPhysicalIndex.setDescription('This object serves to map the table row to an entry into the entPhysicalTable. This object will contain the entPhysicalIndex associated with the unit.')
pdnUnitAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 1, 3, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnUnitAssigned.setStatus('current')
if mibBuilder.loadTexts: pdnUnitAssigned.setDescription('This object indicates if the External ID has been assigned to a particular Globally Unique Identifier (GUID). Writing a false(2) is a mechanism to delete a unit from a stack. When a unit is deleted from a stack, all data that the Stack knows about the unit is purged. On read operations: true(1) - indicates that the External ID has been assigned to a unit false(2) - indicates that the External ID has not been assigned to a unit')
pdnUnitGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnUnitGUID.setStatus('current')
if mibBuilder.loadTexts: pdnUnitGUID.setDescription("This object is the representation of the units' Globally Unique Identifier (GUID). The requirement for this identifier is that is something that makes the unit uniquely identifiable. A MAC addresses is an example of something that could be used as a GUID. The particular implementation's Operational Specification should clarify what is used as the implementation's GUID.")
pdnUnitPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 1, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnUnitPresent.setStatus('current')
if mibBuilder.loadTexts: pdnUnitPresent.setDescription('This object identifies if the unit is present in the stack. Note that when a unit is removed from a stack, its stack and configuration information is retained. true(1) - indicates that the unit is present false(2) - indicates that the unit is no present')
pdnMoveUnitCmdTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 1, 4), )
if mibBuilder.loadTexts: pdnMoveUnitCmdTable.setStatus('current')
if mibBuilder.loadTexts: pdnMoveUnitCmdTable.setDescription('This table contains the objects necessary to support a command to move a unit in a stack. This command only applies when singleManagementEntity is enabled.')
pdnMoveUnitCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 1, 4, 1), ).setIndexNames((0, "PDN-STACKABLE-MIB", "pdnMoveUnitSrcNumber"), (0, "PDN-STACKABLE-MIB", "pdnMoveUnitDestNumber"))
if mibBuilder.loadTexts: pdnMoveUnitCmdEntry.setStatus('current')
if mibBuilder.loadTexts: pdnMoveUnitCmdEntry.setDescription('The table has a single row supporting a command to move a unit in a stack.')
pdnMoveUnitSrcNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: pdnMoveUnitSrcNumber.setStatus('current')
if mibBuilder.loadTexts: pdnMoveUnitSrcNumber.setDescription("This object is used as a table index and serves as the identifier for the source unit in the move command. The implementation's Operational Specification should clearly specify what this object represents. For example, this object could be what is refered to as the unit's External ID.")
pdnMoveUnitDestNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 1, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: pdnMoveUnitDestNumber.setStatus('current')
if mibBuilder.loadTexts: pdnMoveUnitDestNumber.setDescription("This object is used as a table index and serves as the identifier for the destination unit in the move command.The implementation's Operational Specification should clearly specify what this object represents. For example, this object could be what is refered to as the unit's External ID.")
pdnMoveUnitCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("move", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnMoveUnitCmd.setStatus('current')
if mibBuilder.loadTexts: pdnMoveUnitCmd.setDescription('Writing the value move(2) will cause the stack and configuration related information for the source unit to be moved to the destination unit. This object always returns a noOp(1) on a read operation.')
pdnStackUnitAddedTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 1, 5), SwitchState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnStackUnitAddedTrapEnable.setStatus('current')
if mibBuilder.loadTexts: pdnStackUnitAddedTrapEnable.setDescription('Indicates whether the pdnStackUnitAdded trap should be generated. The following values are defined for this object: enabled(1) - Generates the trap disabled(2) - Does not generate the trap')
pdnStackUnitComFailureTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 1, 6), SwitchState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnStackUnitComFailureTrapEnable.setStatus('current')
if mibBuilder.loadTexts: pdnStackUnitComFailureTrapEnable.setDescription('Indicates whether the pdnStackUnitComFailure trap should be generated. The following values are defined for this object: enabled(1) - Generates the trap disabled(2) - Does not generate the trap')
pdnStackUnitComRestoredTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 1, 7), SwitchState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnStackUnitComRestoredTrapEnable.setStatus('current')
if mibBuilder.loadTexts: pdnStackUnitComRestoredTrapEnable.setDescription('Indicates whether the pdnStackUnitComRestored trap should be generated. The following values are defined for this object: enabled(1) - Generates the trap disabled(2) - Does not generate the trap')
pdnStackUnitAdded = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 0, 1)).setObjects(("PDN-STACKABLE-MIB", "pdnUnitGUID"))
if mibBuilder.loadTexts: pdnStackUnitAdded.setStatus('current')
if mibBuilder.loadTexts: pdnStackUnitAdded.setDescription('This trap signifies that a new unit has been added to a stack.')
pdnStackUnitComFailure = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 0, 2)).setObjects(("PDN-STACKABLE-MIB", "pdnUnitGUID"))
if mibBuilder.loadTexts: pdnStackUnitComFailure.setStatus('current')
if mibBuilder.loadTexts: pdnStackUnitComFailure.setDescription('This trap signifies that a loss of communication has occured with a unit that was part of a stack.')
pdnStackUnitComRestored = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 0, 3)).setObjects(("PDN-STACKABLE-MIB", "pdnUnitGUID"))
if mibBuilder.loadTexts: pdnStackUnitComRestored.setStatus('current')
if mibBuilder.loadTexts: pdnStackUnitComRestored.setDescription('This trap signifies that communication to a unit that was part of the stack has occured.')
pdnStackableCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 3, 1))
pdnStackableGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 3, 2))
pdnStackableConmpliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 3, 1, 1)).setObjects(("PDN-STACKABLE-MIB", "wanInterfaceGroup"), ("PDN-STACKABLE-MIB", "singleManagementEntityGroup"), ("PDN-STACKABLE-MIB", "singleManagementEntityNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnStackableConmpliance = pdnStackableConmpliance.setStatus('current')
if mibBuilder.loadTexts: pdnStackableConmpliance.setDescription('The compliance statement for elements implementing stackable units.')
pdnStackableObjGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 3, 2, 1))
pdnStackableAfnGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 3, 2, 2))
pdnStackableNtfyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 3, 2, 3))
wanInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 3, 2, 1, 1)).setObjects(("PDN-STACKABLE-MIB", "wanInterface"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wanInterfaceGroup = wanInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: wanInterfaceGroup.setDescription('Objects related to the WAN.')
singleManagementEntityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 3, 2, 1, 2)).setObjects(("PDN-STACKABLE-MIB", "pdnStackMethod"), ("PDN-STACKABLE-MIB", "pdnUnitEntPhysicalIndex"), ("PDN-STACKABLE-MIB", "pdnUnitAssigned"), ("PDN-STACKABLE-MIB", "pdnUnitGUID"), ("PDN-STACKABLE-MIB", "pdnUnitPresent"), ("PDN-STACKABLE-MIB", "pdnMoveUnitCmd"), ("PDN-STACKABLE-MIB", "pdnStackUnitAddedTrapEnable"), ("PDN-STACKABLE-MIB", "pdnStackUnitComFailureTrapEnable"), ("PDN-STACKABLE-MIB", "pdnStackUnitComRestoredTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    singleManagementEntityGroup = singleManagementEntityGroup.setStatus('current')
if mibBuilder.loadTexts: singleManagementEntityGroup.setDescription('Objects related to the Single Management Entity.')
singleManagementEntityNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 36, 3, 2, 3, 1)).setObjects(("PDN-STACKABLE-MIB", "pdnStackUnitAdded"), ("PDN-STACKABLE-MIB", "pdnStackUnitComFailure"), ("PDN-STACKABLE-MIB", "pdnStackUnitComRestored"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    singleManagementEntityNotificationGroup = singleManagementEntityNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: singleManagementEntityNotificationGroup.setDescription('Notifications that must be implemented for Single Management Entity implementations.')
mibBuilder.exportSymbols("PDN-STACKABLE-MIB", pdnUnitAssigned=pdnUnitAssigned, pdnStackConfigurationTable=pdnStackConfigurationTable, pdnUnitExternalID=pdnUnitExternalID, pdnStackableObjGroups=pdnStackableObjGroups, pdnStackUnitComRestoredTrapEnable=pdnStackUnitComRestoredTrapEnable, pdnMoveUnitSrcNumber=pdnMoveUnitSrcNumber, pdnStackUnitComFailure=pdnStackUnitComFailure, pdnStackMethod=pdnStackMethod, pdnMoveUnitCmdTable=pdnMoveUnitCmdTable, pdnMoveUnitCmd=pdnMoveUnitCmd, pdnStackableConmpliance=pdnStackableConmpliance, pdnStackableNotifications=pdnStackableNotifications, pdnStackConfigurationEntry=pdnStackConfigurationEntry, pdnUnitGUID=pdnUnitGUID, pdnStackUnitComFailureTrapEnable=pdnStackUnitComFailureTrapEnable, pdnUnitEntPhysicalIndex=pdnUnitEntPhysicalIndex, pdnMoveUnitDestNumber=pdnMoveUnitDestNumber, pdnStackableObjects=pdnStackableObjects, pdnUnitPresent=pdnUnitPresent, wanInterfaceGroup=wanInterfaceGroup, singleManagementEntityGroup=singleManagementEntityGroup, pdnStackableAfnGroups=pdnStackableAfnGroups, pdnStackableNtfyGroups=pdnStackableNtfyGroups, pdnStackable=pdnStackable, pdnStackUnitAdded=pdnStackUnitAdded, PYSNMP_MODULE_ID=pdnStackable, pdnStackUnitComRestored=pdnStackUnitComRestored, wanInterface=wanInterface, pdnStackableConformance=pdnStackableConformance, pdnStackableCompliances=pdnStackableCompliances, pdnStackableAFNs=pdnStackableAFNs, pdnStackableGroups=pdnStackableGroups, singleManagementEntityNotificationGroup=singleManagementEntityNotificationGroup, pdnMoveUnitCmdEntry=pdnMoveUnitCmdEntry, pdnStackUnitAddedTrapEnable=pdnStackUnitAddedTrapEnable)
