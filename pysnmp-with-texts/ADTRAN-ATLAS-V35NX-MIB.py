#
# PySNMP MIB module ADTRAN-ATLAS-V35NX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADTRAN-ATLAS-V35NX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:14:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
adATLASModuleInfoFPStatus, = mibBuilder.importSymbols("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus")
adATLASUnitFPStatus, adATLASUnitSlotAddress, adATLASUnitPortAddress = mibBuilder.importSymbols("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus", "adATLASUnitSlotAddress", "adATLASUnitPortAddress")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Integer32, ObjectIdentity, IpAddress, ModuleIdentity, iso, Counter32, enterprises, TimeTicks, Counter64, MibIdentifier, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "ObjectIdentity", "IpAddress", "ModuleIdentity", "iso", "Counter32", "enterprises", "TimeTicks", "Counter64", "MibIdentifier", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
adtran = MibIdentifier((1, 3, 6, 1, 4, 1, 664))
adMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2))
adATLASmg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154))
adGenATLASmg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154, 1))
adATLASV35Nxmg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7))
adATLASV35NxIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASV35NxIfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxIfNumber.setDescription('The number of V.35 Nx ports (regardless of their current state) present on this system.')
adATLASV35NxIfTable = MibTable((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 2), )
if mibBuilder.loadTexts: adATLASV35NxIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxIfTable.setDescription('The ATLAS V.35 Nx Interface Status Table.')
adATLASV35NxIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 2, 1), ).setIndexNames((0, "ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfIndex"))
if mibBuilder.loadTexts: adATLASV35NxIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxIfEntry.setDescription('An entry in the ATLAS V.35 Nx Interface Status Table.')
adATLASV35NxIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASV35NxIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxIfIndex.setDescription('This variable indicates the interface number of a particular V.35 Nx port within the ATLAS product. This number will be the same as the ifIndex located in the MIB-II interface table.')
adATLASV35NxIfSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASV35NxIfSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxIfSlotNum.setDescription('This variable indicates the slot number of a particular ATLAS module with a V.35 Nx interface.')
adATLASV35NxIfPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASV35NxIfPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxIfPortNum.setDescription('This variable indicates the port number of a particular V.35 Nx interface on an ATLAS module.')
adATLASV35NxIfAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASV35NxIfAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxIfAlarmStatus.setDescription('This bit-encoded variable indicates the current alarm status of a V.35 Nx interface. This variable is encoded as follows: CLOCK SLIP ALARM 0x01 PLL ALARM 0x02 ZERO ALARM 0x04 NO EXT CLK ALARM 0x08 Note: There may be multiple bits set based on the current state of the interface. If a bit is set, then the corresponding alarm is active.')
adATLASV35NxIfDTEStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASV35NxIfDTEStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxIfDTEStatus.setDescription('This bit-encoded variable indicates the current state of the DTE leads on a V.35 Nx interface. This variable is encoded as follows: RTS 0x001 CTS 0x002 DTR 0x004 DSR 0x008 DCD 0x010 RI 0x020 TD 0x040 RD 0x080 EC 0x100 Note: There may be multiple bits set based on the current state of the interface. If a bit is set, then the corresponding DTE lead is active.')
adATLASV35NxIfDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASV35NxIfDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxIfDataRate.setDescription('This variable indicates the current data rate of a V.35 Nx interface.')
adATLASV35NxIfPLLFifoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASV35NxIfPLLFifoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxIfPLLFifoStatus.setDescription('This bit-encoded variable indicates the current PLL/FIFO status of a V.35 Nx interface. This variable is encoded as follows: LOCK 0x01 RXE 0x02 RXF 0x04 TXE 0x08 TXF 0x10 Note: There may be multiple bits set based on the current state of the interface.')
adATLASV35NxIfInbandStatTable = MibTable((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 3), )
if mibBuilder.loadTexts: adATLASV35NxIfInbandStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxIfInbandStatTable.setDescription('The ATLAS V.35 Nx Interface Inband Statistics Table.')
adATLASV35NxIfInbandStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 3, 1), ).setIndexNames((0, "ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfInbandStatIndex"))
if mibBuilder.loadTexts: adATLASV35NxIfInbandStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxIfInbandStatEntry.setDescription('An entry in the ATLAS V.35 Nx Interface Inband Statistics Table.')
adATLASV35NxIfInbandStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASV35NxIfInbandStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxIfInbandStatIndex.setDescription('This variable indicates the Interface number of a particular V.35 Nx port within the ATLAS product. This number will be the same as the ifIndex located in the MIB-II interface table.')
adATLASV35NxIfInbandStatRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASV35NxIfInbandStatRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxIfInbandStatRxFrames.setDescription('This variable indicates the number of frames recieved by a particular V.35 Nx interface.')
adATLASV35NxIfInbandStatTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASV35NxIfInbandStatTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxIfInbandStatTxFrames.setDescription('This variable indicates the number of frames transmitted by a particular V.35 Nx interface.')
adATLASV35NxIfInbandStatRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASV35NxIfInbandStatRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxIfInbandStatRxBytes.setDescription('This variable indicates the number of bytes recieved by a particular V.35 Nx interface.')
adATLASV35NxIfInbandStatTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASV35NxIfInbandStatTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxIfInbandStatTxBytes.setDescription('This variable indicates the number of bytes transmitted by a particular V.35 Nx interface.')
adATLASV35NxIfInbandStatReset = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetStats", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASV35NxIfInbandStatReset.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxIfInbandStatReset.setDescription('This variable is used to reset the inband statistics.')
adATLASV35NxTstTable = MibTable((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 4), )
if mibBuilder.loadTexts: adATLASV35NxTstTable.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxTstTable.setDescription('The ATLAS V.35 Nx Interface Test Table.')
adATLASV35NxTstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 4, 1), ).setIndexNames((0, "ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxTstIndex"))
if mibBuilder.loadTexts: adATLASV35NxTstEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxTstEntry.setDescription('An entry in the ATLAS V.35 Nx Interface Test Table.')
adATLASV35NxTstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASV35NxTstIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxTstIndex.setDescription('This variable indicates the interface number of a particular V.35 Nx port within the ATLAS product. This number will be the same as the ifIndex located in the MIB-II interface table.')
adATLASV35NxTstLoopbk = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLpBk", 1), ("localLpBk", 2), ("remoteLpBk", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASV35NxTstLoopbk.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxTstLoopbk.setDescription('This variable controls the activation and deactivation of loopbacks on a particular V.35 Nx interface.')
adATLASV35NxTstLoopbkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("inactive", 1), ("loopingUpRmt", 2), ("rmtLooped", 3), ("loopingDownRmt", 4), ("rmtLoopFailed", 5), ("loopedFromRmt", 6), ("loopbkActive", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASV35NxTstLoopbkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxTstLoopbkStatus.setDescription('This variable indicates a V.35 Nx interfaces current loopback status by displaying one of the following status messages: No loopback active Looping up remote unit Remote unit looped back Looping down remote unit Remote loopup failed Port looped from remote source Port loopback active.')
adATLASV35NxTst511Pattern = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASV35NxTst511Pattern.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxTst511Pattern.setDescription('This variable controls the activation and deactivation of the 511 test pattern generator and detector.')
adATLASV35NxTstPatternSync = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("synced", 1), ("noSync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASV35NxTstPatternSync.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxTstPatternSync.setDescription('This variable displays the synchronization status of the 511 pattern test.')
adATLASV35NxTstPatternSyncLost = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("syncLost", 1), ("syncNotLost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASV35NxTstPatternSyncLost.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxTstPatternSyncLost.setDescription('This variable displays whether or not the synchronization was ever lost during the 511 pattern test.')
adATLASV35NxTstPatternESs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adATLASV35NxTstPatternESs.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxTstPatternESs.setDescription('This variable indicates the number of seconds (after pattern sync) of the 511 pettern test that have contained at least one error.')
adATLASV35NxTstInjectErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("injectError", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASV35NxTstInjectErrs.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxTstInjectErrs.setDescription('Inject a 511 pattern error into the data stream.')
adATLASV35NxTstClearRslts = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 2, 154, 1, 7, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearResults", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adATLASV35NxTstClearRslts.setStatus('mandatory')
if mibBuilder.loadTexts: adATLASV35NxTstClearRslts.setDescription('Reset all test results.')
adATLASV35NxSlipAlarmActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400700)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfAlarmStatus"))
if mibBuilder.loadTexts: adATLASV35NxSlipAlarmActive.setDescription('This trap indicates a SLIP alarm is active.')
adATLASV35NxSlipAlarmInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400701)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfAlarmStatus"))
if mibBuilder.loadTexts: adATLASV35NxSlipAlarmInActive.setDescription('This trap indicates a SLIP alarm is inactive.')
adATLASV35NxPLLAlarmActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400702)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfAlarmStatus"))
if mibBuilder.loadTexts: adATLASV35NxPLLAlarmActive.setDescription('This trap indicates a PLL alarm is active.')
adATLASV35NxPLLAlarmInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400703)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfAlarmStatus"))
if mibBuilder.loadTexts: adATLASV35NxPLLAlarmInActive.setDescription('This trap indicates a PLL alarm is inactive.')
adATLASV35NxZeroAlarmActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400704)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfAlarmStatus"))
if mibBuilder.loadTexts: adATLASV35NxZeroAlarmActive.setDescription('This trap indicates a Zero alarm is active.')
adATLASV35NxZeroAlarmInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400705)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfAlarmStatus"))
if mibBuilder.loadTexts: adATLASV35NxZeroAlarmInActive.setDescription('This trap indicates a Zero alarm is inactive.')
adATLASV35NxExtClkAlarmActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400706)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfAlarmStatus"))
if mibBuilder.loadTexts: adATLASV35NxExtClkAlarmActive.setDescription('This trap indicates a no external clock alarm is active.')
adATLASV35NxExtClkAlarmInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400707)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfAlarmStatus"))
if mibBuilder.loadTexts: adATLASV35NxExtClkAlarmInActive.setDescription('This trap indicates a no external clock alarm is inactive.')
adATLASV35NxRTSActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400708)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfDTEStatus"))
if mibBuilder.loadTexts: adATLASV35NxRTSActive.setDescription('This trap indicates the RTS Lead is active.')
adATLASV35NxRTSInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400709)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfDTEStatus"))
if mibBuilder.loadTexts: adATLASV35NxRTSInActive.setDescription('This trap indicates the RTS Lead is inactive.')
adATLASV35NxCTSActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400710)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfDTEStatus"))
if mibBuilder.loadTexts: adATLASV35NxCTSActive.setDescription('This trap indicates the CTS Lead is active.')
adATLASV35NxCTSInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400711)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfDTEStatus"))
if mibBuilder.loadTexts: adATLASV35NxCTSInActive.setDescription('This trap indicates the CTS Lead is inactive.')
adATLASV35NxDTRActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400712)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfDTEStatus"))
if mibBuilder.loadTexts: adATLASV35NxDTRActive.setDescription('This trap indicates the DTR Lead is active.')
adATLASV35NxDTRInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400713)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfDTEStatus"))
if mibBuilder.loadTexts: adATLASV35NxDTRInActive.setDescription('This trap indicates the DTR Lead is inactive.')
adATLASV35NxDSRActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400714)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfDTEStatus"))
if mibBuilder.loadTexts: adATLASV35NxDSRActive.setDescription('This trap indicates the DSR Lead is active.')
adATLASV35NxDSRInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400715)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfDTEStatus"))
if mibBuilder.loadTexts: adATLASV35NxDSRInActive.setDescription('This trap indicates the DSR Lead is inactive.')
adATLASV35NxDCDActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400716)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfDTEStatus"))
if mibBuilder.loadTexts: adATLASV35NxDCDActive.setDescription('This trap indicates the DCD Lead is active.')
adATLASV35NxDCDInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400717)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfDTEStatus"))
if mibBuilder.loadTexts: adATLASV35NxDCDInActive.setDescription('This trap indicates the DCD Lead is inactive.')
adATLASV35NxRIActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400718)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfDTEStatus"))
if mibBuilder.loadTexts: adATLASV35NxRIActive.setDescription('This trap indicates the RI Lead is active.')
adATLASV35NxRIInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400719)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfDTEStatus"))
if mibBuilder.loadTexts: adATLASV35NxRIInActive.setDescription('This trap indicates the RI Lead is inactive.')
adATLASV35NxTDActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400720)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfDTEStatus"))
if mibBuilder.loadTexts: adATLASV35NxTDActive.setDescription('This trap indicates the presence of transistions on the TD lead.')
adATLASV35NxTDInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400721)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfDTEStatus"))
if mibBuilder.loadTexts: adATLASV35NxTDInActive.setDescription('This trap indicates the absence of transistions on the TD lead.')
adATLASV35NxRDActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400722)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfDTEStatus"))
if mibBuilder.loadTexts: adATLASV35NxRDActive.setDescription('This trap indicates the presence of transistions on the RD Lead.')
adATLASV35NxRDInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400723)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfDTEStatus"))
if mibBuilder.loadTexts: adATLASV35NxRDInActive.setDescription('This trap indicates the absence of transistions on the RD Lead.')
adATLASV35NxECActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400724)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfDTEStatus"))
if mibBuilder.loadTexts: adATLASV35NxECActive.setDescription('This trap indicates the presence of transistions on the EC Lead.')
adATLASV35NxECInActive = NotificationType((1, 3, 6, 1, 4, 1, 664, 2, 154) + (0,15400725)).setObjects(("IF-MIB", "ifIndex"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitSlotAddress"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitPortAddress"), ("ADTRAN-ATLAS-MODULE-MIB", "adATLASModuleInfoFPStatus"), ("ADTRAN-ATLAS-UNIT-MIB", "adATLASUnitFPStatus"), ("ADTRAN-ATLAS-V35NX-MIB", "adATLASV35NxIfDTEStatus"))
if mibBuilder.loadTexts: adATLASV35NxECInActive.setDescription('This trap indicates the absence of transistions on the EC Lead.')
mibBuilder.exportSymbols("ADTRAN-ATLAS-V35NX-MIB", adATLASV35NxZeroAlarmActive=adATLASV35NxZeroAlarmActive, adATLASV35NxIfInbandStatRxBytes=adATLASV35NxIfInbandStatRxBytes, adATLASV35NxPLLAlarmInActive=adATLASV35NxPLLAlarmInActive, adATLASV35NxTDActive=adATLASV35NxTDActive, adATLASV35NxCTSActive=adATLASV35NxCTSActive, adATLASV35NxIfSlotNum=adATLASV35NxIfSlotNum, adATLASV35NxTst511Pattern=adATLASV35NxTst511Pattern, adATLASV35NxTstClearRslts=adATLASV35NxTstClearRslts, adATLASV35NxIfDTEStatus=adATLASV35NxIfDTEStatus, adATLASV35NxIfInbandStatTxFrames=adATLASV35NxIfInbandStatTxFrames, adATLASV35NxSlipAlarmInActive=adATLASV35NxSlipAlarmInActive, adATLASV35NxExtClkAlarmActive=adATLASV35NxExtClkAlarmActive, adATLASV35NxCTSInActive=adATLASV35NxCTSInActive, adATLASV35NxDSRInActive=adATLASV35NxDSRInActive, adATLASV35NxIfInbandStatRxFrames=adATLASV35NxIfInbandStatRxFrames, adATLASV35NxDSRActive=adATLASV35NxDSRActive, adGenATLASmg=adGenATLASmg, adATLASV35NxIfTable=adATLASV35NxIfTable, adATLASV35NxTstTable=adATLASV35NxTstTable, adATLASV35NxTstEntry=adATLASV35NxTstEntry, adATLASV35NxTstLoopbkStatus=adATLASV35NxTstLoopbkStatus, adATLASV35NxTDInActive=adATLASV35NxTDInActive, adATLASV35NxRTSInActive=adATLASV35NxRTSInActive, adATLASV35NxECActive=adATLASV35NxECActive, adATLASV35NxRDActive=adATLASV35NxRDActive, adATLASV35NxECInActive=adATLASV35NxECInActive, adATLASV35NxIfNumber=adATLASV35NxIfNumber, adATLASV35NxIfEntry=adATLASV35NxIfEntry, adATLASV35NxTstPatternESs=adATLASV35NxTstPatternESs, adATLASV35NxRIInActive=adATLASV35NxRIInActive, adATLASV35NxTstPatternSyncLost=adATLASV35NxTstPatternSyncLost, adATLASV35NxIfInbandStatReset=adATLASV35NxIfInbandStatReset, adATLASV35NxTstIndex=adATLASV35NxTstIndex, adATLASV35NxIfDataRate=adATLASV35NxIfDataRate, adATLASV35NxTstPatternSync=adATLASV35NxTstPatternSync, adATLASV35NxDTRActive=adATLASV35NxDTRActive, adATLASV35NxIfInbandStatTable=adATLASV35NxIfInbandStatTable, adATLASV35NxDCDInActive=adATLASV35NxDCDInActive, adATLASV35Nxmg=adATLASV35Nxmg, adATLASV35NxIfIndex=adATLASV35NxIfIndex, adATLASV35NxIfPortNum=adATLASV35NxIfPortNum, adtran=adtran, adATLASV35NxRTSActive=adATLASV35NxRTSActive, adATLASV35NxIfAlarmStatus=adATLASV35NxIfAlarmStatus, adATLASV35NxZeroAlarmInActive=adATLASV35NxZeroAlarmInActive, adATLASV35NxIfPLLFifoStatus=adATLASV35NxIfPLLFifoStatus, adATLASV35NxIfInbandStatEntry=adATLASV35NxIfInbandStatEntry, adATLASV35NxTstInjectErrs=adATLASV35NxTstInjectErrs, adATLASV35NxRDInActive=adATLASV35NxRDInActive, adATLASV35NxTstLoopbk=adATLASV35NxTstLoopbk, adATLASV35NxDTRInActive=adATLASV35NxDTRInActive, adATLASmg=adATLASmg, adMgmt=adMgmt, adATLASV35NxDCDActive=adATLASV35NxDCDActive, adATLASV35NxIfInbandStatTxBytes=adATLASV35NxIfInbandStatTxBytes, adATLASV35NxPLLAlarmActive=adATLASV35NxPLLAlarmActive, adATLASV35NxExtClkAlarmInActive=adATLASV35NxExtClkAlarmInActive, adATLASV35NxIfInbandStatIndex=adATLASV35NxIfInbandStatIndex, adATLASV35NxRIActive=adATLASV35NxRIActive, adATLASV35NxSlipAlarmActive=adATLASV35NxSlipAlarmActive)
