#
# PySNMP MIB module EXTREME-NETFLOW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXTREME-BASE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:07:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
extremeAgent, = mibBuilder.importSymbols("EXTREME-BASE-MIB", "extremeAgent")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, Integer32, Gauge32, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, ModuleIdentity, ObjectIdentity, TimeTicks, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Integer32", "Gauge32", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Bits", "Unsigned32")
TruthValue, MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "DisplayString", "TextualConvention")
extremeNetFlow = ModuleIdentity((1, 3, 6, 1, 4, 1, 1916, 1, 22))
if mibBuilder.loadTexts: extremeNetFlow.setLastUpdated('0010310000Z')
if mibBuilder.loadTexts: extremeNetFlow.setOrganization('Extreme Networks, Inc.')
if mibBuilder.loadTexts: extremeNetFlow.setContactInfo('www.extremenetworks.com')
if mibBuilder.loadTexts: extremeNetFlow.setDescription('Extreme NetFlow tables.')
extremeNetFlowConfigPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1))
extremeNetFlowConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 22, 2))
extremeNetFlowGroupCollectorTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 22, 2, 2), )
if mibBuilder.loadTexts: extremeNetFlowGroupCollectorTable.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowGroupCollectorTable.setDescription('This table contains configuration information for a defined NetFlow group flow entry.')
extremeNetFlowGroupCollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 22, 2, 2, 1), ).setIndexNames((0, "EXTREME-NETFLOW-MIB", "extremeNetFlowGroupNumber"), (0, "EXTREME-NETFLOW-MIB", "extremeNetFlowCollectorId"))
if mibBuilder.loadTexts: extremeNetFlowGroupCollectorEntry.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowGroupCollectorEntry.setDescription('')
extremeNetFlowGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: extremeNetFlowGroupNumber.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowGroupNumber.setDescription('The group number.')
extremeNetFlowCollectorId = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: extremeNetFlowCollectorId.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowCollectorId.setDescription('The collector number.')
extremeNetFlowGroupPingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowGroupPingEnabled.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowGroupPingEnabled.setDescription('Flag indicating if ping is enabled for the group')
extremeNetFlowGroupSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 2, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowGroupSourceIp.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowGroupSourceIp.setDescription('Source IP address for the group.')
extremeNetFlowCollectorIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 2, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowCollectorIpAddress.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowCollectorIpAddress.setDescription("The collector's configured IP address.")
extremeNetFlowCollectorUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowCollectorUdpPort.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowCollectorUdpPort.setDescription("The collector's configured UDP port number.")
extremeNetFlowCollectorStatusUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 2, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowCollectorStatusUp.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowCollectorStatusUp.setDescription('Flag indicating if the collector is up.')
extremeNetFlowCollectorDowntime = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowCollectorDowntime.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowCollectorDowntime.setDescription('The downtime value for the collector.')
extremeNetFlowCollectorPacketsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowCollectorPacketsTx.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowCollectorPacketsTx.setDescription('The transmit packet count for the collector.')
extremeNetFlowPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 1), )
if mibBuilder.loadTexts: extremeNetFlowPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowPortConfigTable.setDescription('This table contains configuration information for a defined NetFlow port.')
extremeNetFlowPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 1, 1), ).setIndexNames((0, "EXTREME-NETFLOW-MIB", "extremeNetFlowPortConfigPortIndex"))
if mibBuilder.loadTexts: extremeNetFlowPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowPortConfigEntry.setDescription('')
extremeNetFlowPortConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: extremeNetFlowPortConfigPortIndex.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowPortConfigPortIndex.setDescription('The index value for the port.')
extremeNetFlowPortConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowPortConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowPortConfigEnabled.setDescription('Flag indicating if port is enabled.')
extremeNetFlowPortConfigTimout = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowPortConfigTimout.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowPortConfigTimout.setDescription('The port timeout value.')
extremeNetFlowPortOverFlowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowPortOverFlowPackets.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowPortOverFlowPackets.setDescription('The number of packets not accounted for due to lack of resources. Implemented on PoS ports only')
extremeNetFlowPortFilterConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2), )
if mibBuilder.loadTexts: extremeNetFlowPortFilterConfigTable.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowPortFilterConfigTable.setDescription('This table contains configuration information for a defined NetFlow filter.')
extremeNetFlowPortFilterConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1), ).setIndexNames((0, "EXTREME-NETFLOW-MIB", "extremeNetFlowPortConfigPortNumber"), (0, "EXTREME-NETFLOW-MIB", "extremeNetFlowPortConfigFilterEgress"), (0, "EXTREME-NETFLOW-MIB", "extremeNetFlowPortConfigFilterNumber"))
if mibBuilder.loadTexts: extremeNetFlowPortFilterConfigEntry.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowPortFilterConfigEntry.setDescription('')
extremeNetFlowPortConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: extremeNetFlowPortConfigPortNumber.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowPortConfigPortNumber.setDescription('The port number for the filter.')
extremeNetFlowPortConfigFilterEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1, 2), TruthValue())
if mibBuilder.loadTexts: extremeNetFlowPortConfigFilterEgress.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowPortConfigFilterEgress.setDescription('Flag indicating whether this is a request for an egress filter (1) or an ingress filter (0).')
extremeNetFlowPortConfigFilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: extremeNetFlowPortConfigFilterNumber.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowPortConfigFilterNumber.setDescription('The filter number being requested (1-8).')
extremeNetFlowPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowPortEnabled.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowPortEnabled.setDescription('Flag indicating whether port is enabled.')
extremeNetFlowFilterEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowFilterEnabled.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowFilterEnabled.setDescription('Flag indicating whether filter is enabled.')
extremeNetFlowDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowDestIpAddress.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowDestIpAddress.setDescription('Filter Destination IP address.')
extremeNetFlowDestIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowDestIpAddressMask.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowDestIpAddressMask.setDescription('Filter Destination IP address Mask.')
extremeNetFlowSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowSourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowSourceIpAddress.setDescription('Filter Source IP address.')
extremeNetFlowSourceIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowSourceIpAddressMask.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowSourceIpAddressMask.setDescription('Filter Source IP address Mask.')
extremeNetFlowDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowDestPort.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowDestPort.setDescription('The destination port (valid for TCP and UDP flows only).')
extremeNetFlowDestPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowDestPortMask.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowDestPortMask.setDescription('The destination port mask.')
extremeNetFlowSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowSourcePort.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowSourcePort.setDescription('The source port (valid for TCP and UDP flows only).')
extremeNetFlowSourcePortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowSourcePortMask.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowSourcePortMask.setDescription('The source port mask.')
extremeNetFlowProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowProtocol.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowProtocol.setDescription('The IP protocol for the filter.')
extremeNetFlowProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowProtocolMask.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowProtocolMask.setDescription('The IP protocol mask.')
extremeNetFlowFilterGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowFilterGroupNumber.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowFilterGroupNumber.setDescription('The Group Number.')
extremeNetFlowMatchAllFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowMatchAllFlag.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowMatchAllFlag.setDescription('Filter is set to match all flows.')
extremeNetFlowMatchNoneFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 22, 1, 2, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNetFlowMatchNoneFlag.setStatus('current')
if mibBuilder.loadTexts: extremeNetFlowMatchNoneFlag.setDescription('Filter is set to not match any flows.')
mibBuilder.exportSymbols("EXTREME-NETFLOW-MIB", PYSNMP_MODULE_ID=extremeNetFlow, extremeNetFlowDestIpAddress=extremeNetFlowDestIpAddress, extremeNetFlow=extremeNetFlow, extremeNetFlowPortConfigEnabled=extremeNetFlowPortConfigEnabled, extremeNetFlowCollectorStatusUp=extremeNetFlowCollectorStatusUp, extremeNetFlowSourceIpAddress=extremeNetFlowSourceIpAddress, extremeNetFlowGroupNumber=extremeNetFlowGroupNumber, extremeNetFlowSourcePort=extremeNetFlowSourcePort, extremeNetFlowFilterGroupNumber=extremeNetFlowFilterGroupNumber, extremeNetFlowCollectorId=extremeNetFlowCollectorId, extremeNetFlowPortConfigPortNumber=extremeNetFlowPortConfigPortNumber, extremeNetFlowSourcePortMask=extremeNetFlowSourcePortMask, extremeNetFlowMatchAllFlag=extremeNetFlowMatchAllFlag, extremeNetFlowConfigGroup=extremeNetFlowConfigGroup, extremeNetFlowConfigPort=extremeNetFlowConfigPort, extremeNetFlowProtocol=extremeNetFlowProtocol, extremeNetFlowPortEnabled=extremeNetFlowPortEnabled, extremeNetFlowPortConfigTimout=extremeNetFlowPortConfigTimout, extremeNetFlowDestIpAddressMask=extremeNetFlowDestIpAddressMask, extremeNetFlowCollectorPacketsTx=extremeNetFlowCollectorPacketsTx, extremeNetFlowGroupCollectorEntry=extremeNetFlowGroupCollectorEntry, extremeNetFlowPortFilterConfigTable=extremeNetFlowPortFilterConfigTable, extremeNetFlowFilterEnabled=extremeNetFlowFilterEnabled, extremeNetFlowSourceIpAddressMask=extremeNetFlowSourceIpAddressMask, extremeNetFlowPortOverFlowPackets=extremeNetFlowPortOverFlowPackets, extremeNetFlowPortFilterConfigEntry=extremeNetFlowPortFilterConfigEntry, extremeNetFlowCollectorIpAddress=extremeNetFlowCollectorIpAddress, extremeNetFlowPortConfigEntry=extremeNetFlowPortConfigEntry, extremeNetFlowGroupPingEnabled=extremeNetFlowGroupPingEnabled, extremeNetFlowPortConfigFilterNumber=extremeNetFlowPortConfigFilterNumber, extremeNetFlowPortConfigTable=extremeNetFlowPortConfigTable, extremeNetFlowDestPort=extremeNetFlowDestPort, extremeNetFlowPortConfigFilterEgress=extremeNetFlowPortConfigFilterEgress, extremeNetFlowGroupSourceIp=extremeNetFlowGroupSourceIp, extremeNetFlowCollectorDowntime=extremeNetFlowCollectorDowntime, extremeNetFlowDestPortMask=extremeNetFlowDestPortMask, extremeNetFlowProtocolMask=extremeNetFlowProtocolMask, extremeNetFlowCollectorUdpPort=extremeNetFlowCollectorUdpPort, extremeNetFlowMatchNoneFlag=extremeNetFlowMatchNoneFlag, extremeNetFlowGroupCollectorTable=extremeNetFlowGroupCollectorTable, extremeNetFlowPortConfigPortIndex=extremeNetFlowPortConfigPortIndex)
