#
# PySNMP MIB module CXBCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXBCM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:32:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
cxBCM, Alias, SapIndex = mibBuilder.importSymbols("CXProduct-SMI", "cxBCM", "Alias", "SapIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, TimeTicks, NotificationType, Bits, Unsigned32, Integer32, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, ModuleIdentity, NotificationType, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "NotificationType", "Bits", "Unsigned32", "Integer32", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "ModuleIdentity", "NotificationType", "Counter32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class LSapIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 30)

class CHIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 1)

bcmTraps = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmTraps.setStatus('obsolete')
if mibBuilder.loadTexts: bcmTraps.setDescription("Determines whether this software layers produces the 'bcmUSapStatusIndication' and 'bcmLSapStatusIndication' traps whose accumulated values can be retrieved by an SNMP-compliant network management device. Options: disabled (1):layer does not produce upper SAP and lower SAP status traps enabled (2) :layer produces upper SAP and lower SAP status traps Default Value: disabled Configuration Changed: administrative ")
bcmCallHistoryTraps = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmCallHistoryTraps.setStatus('mandatory')
if mibBuilder.loadTexts: bcmCallHistoryTraps.setDescription("Determines whether this software layers produces the 'bcmCallHistoryStatusIndication' trap whose accumulated value can be retrieved by an SNMP-compliant network management device. WARNING: This object is not supported yet. Options: disabled (1):layer does not produce call history trap enabled (2):layer produces call history trap Default Value: disabled Configuration Changed: administrative ")
bcmSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: bcmSoftwareVersion.setDescription('Identifies the main version and revision numbers (separated by a period) of the BCM software layer. The first digit is changed when the software has passed a certification. The second digit is changed each time a new functionality is added to the software. Version 1.00: ISDN BRI User U interface - Not certified (Supports data only) 2.00: Added ISDN BRI User S/T interface - CTR3 certified (Supports Data only) 2.10: Added ISDN PRI User/Network CEPT (E1) - Not certified (Supports voice on PRI and data on BRI and PRI)')
bcmMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 4), Integer32().clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmMibLevel.setStatus('mandatory')
if mibBuilder.loadTexts: bcmMibLevel.setDescription('Used to determine current MIB module release supported by the agent. Object is in decimal.')
bcmModuleState = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uninitialized", 1), ("initializing", 2), ("registering", 3), ("operational", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmModuleState.setStatus('mandatory')
if mibBuilder.loadTexts: bcmModuleState.setDescription('Indicates the operational state of the BCM software layer. Options: uninitialized (1): not initialized initializing (2): in initializing state registering (3):in registration state operational (4): in operational state Default Value: none')
bcmNbActiveUSap = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbActiveUSap.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbActiveUSap.setDescription('Indicates the number of upper SAPS that have been initialized. Range of Values: 0-20 for BRI ISDN 0-64 for PRI ISDN Default Value: none')
bcmNbActiveDsl = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmNbActiveDsl.setStatus('mandatory')
if mibBuilder.loadTexts: bcmNbActiveDsl.setDescription('Indicates the number of Digital Subscriber Lines (DSLs) which are synchronized and therefore ready to process calls. Range of Values: 0-2 for DI600 0-6 for CX900 0-8 for CX950 Default Value: none')
bcmLSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50), )
if mibBuilder.loadTexts: bcmLSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapTable.setDescription('A table containing configuration, controls, status and statistics information about each BCM module layer lower service access point.')
bcmLSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1), ).setIndexNames((0, "CXBCM-MIB", "bcmLSapDslNumber"), (0, "CXBCM-MIB", "bcmLSapNumber"))
if mibBuilder.loadTexts: bcmLSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapEntry.setDescription('The parameters for a specific lower service access point.')
bcmLSapDslNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapDslNumber.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapDslNumber.setDescription('Indicates the Digital Subscriber Line number associated with this lower SAP. Range of Values: 1-2 for DI600 (port) 1-6 for CX900 (slot) 1-8 for CX950 (slot) Default Value: none')
bcmLSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 2), LSapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapNumber.setDescription('Indicates the row containing objects for configuring or monitoring a SAP associated with one of the ISDN channels. Range of Values: 0-2 for BRI 0-30 for PRI (ANSI (T1) will only make use of 0-23) NOTE: Entry 0 must always be connected to the D channel. Default Value:none')
bcmLSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmLSapAlias.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapAlias.setDescription('Determines the textual name that uniquely identifies this lower SAP. Range of Values: 0-16 alphanumeric characters beginning with a non-numeric character and ending with up to three numeric characters Default Value: none Configuration Changed: administrative ')
bcmLSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmLSapCompanionAlias.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapCompanionAlias.setDescription("Determines the textual name identifying this SAP's companion SAP in the Bit-Oriented Protocol (BOP) Driver or Q.931 software layer. Range of Values: 0-16 alphanumeric characters beginning with an alpha character Default Value: none Configuration Changed: administrative ")
bcmLSapDirectoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmLSapDirectoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapDirectoryIndex.setDescription('Determines the ISDN Address, Subaddress and SPID of this lower SAP. Range of Values: 1-40 for BRI ISDN 1-128 for PRI ISDN Default Value: 1 Configuration Changed: administrative ')
bcmLSapLowDirectoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmLSapLowDirectoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapLowDirectoryIndex.setDescription('Determines the start of an ISDN Address that can be called from this lower SAP. Range of Values: 1-40 for BRI ISDN 1-128 for PRI ISDN NOTE: Only used for DATA calls Default Value: 1 Configuration Changed: administrative ')
bcmLSapHighDirectoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmLSapHighDirectoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapHighDirectoryIndex.setDescription('Determines the end of an ISDN Address that can be called from this lower SAP. Range of Values: 1-40 for BRI ISDN 1-128 for PRI ISDN NOTE: Only used for DATA calls Default Value: 40 Configuration Changed: administrative ')
bcmLSapState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("not-used", 1), ("unbound", 2), ("bound", 3), ("registering", 4), ("idle", 5), ("outgoing", 6), ("incoming", 7), ("active", 8), ("release", 9), ("pending", 10), ("overlap-rx", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapState.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapState.setDescription('Indicates the current state of this lower SAP. Options: not-used (1): SAP not in use unbound (2): SAP not bound to another software layer bound (3):SAP bound to another software layer registering (4):SAP waits for SPID-EID exchange (this state is for BRI North American switches only) idle (5): SAP is idle outgoing (6):SAP process call request from upper application incoming (7):SAP process call indication from Digital Subscriber Line (DSL) active (8):SAP is active release (9):SAP released from call pending (10):SAP bound, wait for link to go up overlap-rx (11): SAP is receiving calling information over several messages Default Value: none')
bcmLSapStatusEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noEvent", 1), ("dslOutOfRange", 2), ("lsapOutOfRange", 3), ("lsapMngmtRegistrationFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapStatusEvent.setStatus('obsolete')
if mibBuilder.loadTexts: bcmLSapStatusEvent.setDescription("Indicates a status generated by the 'bcmLSapStatusIndication' trap. Note: This value will always read 'noEvent' unless 'bcmTraps' has been enabled and an event has been trapped. Options: noEvent (1): no trapped event dslOutOfRange (2): Digital Subscriber Line number out of range lsapOutOfRange (3): lower SAP number out of range lsapMngmtRegistrationFailed (4): lower SAP SPID registration failed Default Value: noEvent")
bcmLSapPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapPeerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapPeerAddress.setDescription('Indicates the ISDN Address of the remote location currently or last called. Range of Values: 0-16 non-alpha characters (namely, 0123456789*#) Default Value: none (0 if peer address unknown)')
bcmLSapPeerSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapPeerSubAddress.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapPeerSubAddress.setDescription('Indicates the ISDN Subaddress of the remote location currently or last called. Range of Values: 0-20 Default Value: none (0 if peer address unknown)')
bcmLSapCallOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("originate", 2), ("answer", 3), ("callback", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapCallOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapCallOrigin.setDescription('Indicates how the current or last call began at this lower SAP. Options: unknown (1): SAP had no call since last system startup originate (2): SAP originated call answer (3): SAP answered call callback (4): SAP called back once not busy Default Value: unknown')
bcmLSapInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("speech", 2), ("unrestricted-digital", 3), ("restricted-digital", 4), ("audio-31", 5), ("audio-7", 6), ("video", 7), ("packet", 8))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapInfoType.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapInfoType.setDescription('Indicates the transfer capability of the current or last call. Options: unknown (1): SAP had no call since last system startup speech (2): voice call unrestricted-digital (3): unrestricted data stream restricted-digital (4): restricted data stream audio-31 (5): voice call audio-7 (6): high-quality voice call video (7): video stream packet (8): data packets Default Value: unknown')
bcmLSapCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapCallId.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapCallId.setDescription("Indicates the new call ID in the 'setup' message. Range of Values: 0-FFFF (hexadecimal) Note: ID in received messages from 1-7FFF; ID in sent messages from 8000-FFFF. ID '0' reserved for broadcast messages. Default Value: none")
bcmLSapUSapId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapUSapId.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapUSapId.setDescription("Specifies the upper SAP associated with this lower SAP's Digital Subscriber Line. Range of Values: 1-20 for BRI ISDN 1-64 for PRI ISDN Default Value: none")
bcmLSapChannelCES = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapChannelCES.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapChannelCES.setDescription("Indicates the Connection Endpoint Suffix (CES) of this lower SAP's channel. For BRI North American switches, when SPIDs are used, the CES will be '1' and '2' accordingly. But in the case of BRI and PRI which does not use SPID, the CES is always '1'. When this lower SAP refers to a D channel or if this lower SAP isn't configured, then the CES is 0 to signal that it is not used. Range of Values: 0 not used 1-2 Default Value: none")
bcmLSapCallSetupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 49), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapCallSetupTime.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapCallSetupTime.setDescription('Indicates the system time when the ISDN setup message was sent or received for the current or last call. Range of Values: 0-4, 294, 967, 295 Default Value: 0 (= no call since system startup)')
bcmLSapCallConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 50), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapCallConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapCallConnectTime.setDescription('Indicates the system time when the ISDN connect message was sent or received for the current or last call. Range of Values: 0-4, 294, 967, 295 Default Value: 0 (= no call since system startup)')
bcmLSapCallDisconnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 51), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapCallDisconnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapCallDisconnectTime.setDescription('Indicates the system time when the ISDN disconnect or release message was sent or received for the current or last call. Range of Values: 0-4, 294, 967, 295 Default Value: 0 (= no call since system startup)')
bcmLSapNbInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapNbInCalls.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapNbInCalls.setDescription('Indicates the number of incoming calls on this lower SAP since system startup. Range of Values: 0-4, 294, 967, 295 Default Value: none')
bcmLSapNbInCallsConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapNbInCallsConnected.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapNbInCallsConnected.setDescription('Indicates the number of incoming calls that connected successfully through this lower SAP since system startup. Range of Values: 0-4, 294, 967, 295 Default Value: none')
bcmLSapNbOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapNbOutCalls.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapNbOutCalls.setDescription('Indicates the number of outgoing calls on this lower SAP since system startup. Range of Values: 0-4, 294, 967, 295 Default Value: none')
bcmLSapNbOutCallsConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 50, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmLSapNbOutCallsConnected.setStatus('mandatory')
if mibBuilder.loadTexts: bcmLSapNbOutCallsConnected.setDescription('Indicates the number of outgoing calls that connected successfully through this lower SAP since system startup. Range of Values: 0-4, 294, 967, 295 Default Value: none')
bcmDslTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51), )
if mibBuilder.loadTexts: bcmDslTable.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDslTable.setDescription('A table containing information about a DSL control block. This DSL access point is used for the handling of the D and Bs channels that are part of a DSL (Digital Subscriber Line)')
bcmDslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1), ).setIndexNames((0, "CXBCM-MIB", "bcmDslNumber"))
if mibBuilder.loadTexts: bcmDslEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDslEntry.setDescription('The parameters for a specific DSL control block.')
bcmDslNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmDslNumber.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDslNumber.setDescription("Indicates the Digital Subscriber Line's access point number. Range of Values: 1-2 for DI600 (port) 1-6 for CX900 (slot) 1-8 for CX950 (slot) Default Value: none")
bcmDslRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDslRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDslRowStatus.setDescription('Determines whether this DSL is to be removed from service (i.e. invalidated) within the B-Channel Manager software layer. Options: invalid (1): row is flagged; after next reset values will be disabled and row will be deleted from table valid (2): values are enabled Default Value: valid Configuration Changed: administrative ')
bcmDslSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 8, 9))).clone(namedValues=NamedValues(("unspecified", 1), ("bri-5ESS", 3), ("bri-DMS100", 5), ("bri-NI1", 8), ("bri-NI2", 9))).clone('bri-NI1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDslSwitchType.setStatus('obsolete')
if mibBuilder.loadTexts: bcmDslSwitchType.setDescription('Determines the ISDN switch type supported on the D channel. Options: unspecified (1) bri-5ESS (3): U.S.A / At&T 5ESS bri-DMS100 (5): U.S.A / Norther Telecom bri-NI1 (8): U.S.A / National ISDN 1 bri-NI2 (9): U.S.A / National ISDN 2 Default Value: bri-NI1 (8) Configuration Changed: administrative ')
bcmDslBChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDslBChannelCount.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDslBChannelCount.setDescription('Determines the total number of B channels managed by the signaling interface. Range of Values: 1-30 NOTE: It has to be set to: 2 for BRI 23 for ANSI (T1) 30 for CEPT (E1) Default Value: 2 for BRI 30 for PRI Configuration Changed: administrative ')
bcmDslBChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dialup", 1), ("leased", 2))).clone('dialup')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDslBChannelType.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDslBChannelType.setDescription('Determines the type of ISDN line. Options: dialup (1): B channels controlled by associated signaling D channel leased (2): B channels always connected and not controlled by D channel (This option is not supported yet) Default Value: dialup Configuration Changed: administrative ')
bcmDslMngmtTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDslMngmtTimer.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDslMngmtTimer.setDescription('Determines the interval in seconds that the BCM software layer will wait between two SPIDs transmission when no answer form the network is received. Range of Values: 1-255 NOTE: Only used for BRI North American switches in Fully Initialized Terminal (FIT) mode Default Value: 45 Configuration Changed: administrative ')
bcmDslInfoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate56kbps", 1), ("rate64kbps", 2))).clone('rate64kbps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDslInfoRate.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDslInfoRate.setDescription('Determines the speed of the B channel connected to the Digital Subscriber Line when a call is initiated on that DSL. Options: rate56kbps (1): B channel speed is 56 kbps rate64kbps (2): B channel speed is 64 kbps Default Value: rate64kbps (1) Configuration Changed: administrative ')
bcmDslSendingProceed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("en-bloc", 1), ("overlap", 2))).clone('en-bloc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDslSendingProceed.setStatus('obsolete')
if mibBuilder.loadTexts: bcmDslSendingProceed.setDescription("Indicates the way calling information for the switch is generated. 'en-bloc' means that all calling information is sent in the first message. overlap means that calling information is spread over several messages")
bcmDslInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bri", 2), ("pri", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmDslInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDslInterfaceType.setDescription('Indicates the type of physical interface for the specified Digital Subscriber Line. Options: none (1): not specified bri (2): Basic Rate Interface pri (3): Primary Rate Interface Default Value: none')
bcmDslBriType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("u", 2), ("s-t", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmDslBriType.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDslBriType.setDescription("Indicates the type of BRI interface for the specified Digital Subscriber Line. Options: none (1): SAP has no BRI interface u (2): BRI type is 'U' s-t (3): BRI type is 'S/T' Default Value: none")
bcmDslPriType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ansi", 2), ("cept", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmDslPriType.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDslPriType.setDescription("Indicates the type of PRI interface for the specified Digital Subscriber Line. Options: none (1): SAP has no PRI interface ansi (2): PRI type is 'ANSI' (T1) cept (3): PRI type is 'CEPT' (E1) Default Value: none")
bcmDslNbChannelInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmDslNbChannelInUse.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDslNbChannelInUse.setDescription('Indicates the number of B channels connected, connecting, or active on this Digital Subscriber Line. Range of Values: 0-2 for BRI 0-23 for ANSI (T1) 0-30 for CEPT (E1) Default Value: 0')
bcmDslOutGoingCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmDslOutGoingCallId.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDslOutGoingCallId.setDescription("Indicates the call ID used in the 'setup' message sent. Range of Values: 8000-FFFF (hexadecimal) Default Value: none")
bcmDslEffectiveRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 51, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmDslEffectiveRetries.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDslEffectiveRetries.setDescription('Indicates the number of times a management request has been sent to initialize the ISDN switch. Range of Values: 0-255 NOTE: Only used for BRI North American switches Default Value: 0')
bcmUSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52), )
if mibBuilder.loadTexts: bcmUSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapTable.setDescription('A table containing configuration information about each upper service access point.')
bcmUSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1), ).setIndexNames((0, "CXBCM-MIB", "bcmUSapNumber"))
if mibBuilder.loadTexts: bcmUSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapEntry.setDescription('The parameters for a specific upper service access point.')
bcmUSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapNumber.setDescription('Indicates the row containing objects for configuring or monitoring a SAP associated with one of the ISDN channels. Range of Values: 1-20 for BRI ISDN 1-64 for PRI ISDN Default Value: none')
bcmUSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('invalid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapRowStatus.setDescription('Determines whether this SAP is to be removed from service (i.e. invalidated) within the B-Channel Manager software layer. Options: invalid (1): = row is flagged; after next reset values will be disabled and row will be deleted from table valid (2): values are enabled Default Value: invalid Configuration Changed: administrative ')
bcmUSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapAlias.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapAlias.setDescription('Determines the textual name uniquely identifying this upper SAP. Range of Values: 0-16 alphanumeric characters beginning with an alpha character Default Value: none Configuration Changed: administrative ')
bcmUSapLowDirectoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapLowDirectoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapLowDirectoryIndex.setDescription("Determines the start of an ISDN Address that can call this upper SAP according to 'bcmUSapAnswerMode'. Range of Values: 1-40 for BRI ISDN 1-128 for PRI ISDN Default Value: 1 Configuration Changed: administrative ")
bcmUSapHighDirectoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapHighDirectoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapHighDirectoryIndex.setDescription("Determines the end of an ISDN Address that can call this upper SAP according to 'bcmUSapAnswerMode'. Range of Values: 1-40 for BRI ISDN 1-128 for PRI ISDN Default Value: 40 Configuration Changed: administrative ")
bcmUSapAnswerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("answer-none", 1), ("answer-all", 2), ("answer-address", 3), ("answer-subaddress", 4))).clone('answer-all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapAnswerMode.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapAnswerMode.setDescription("Determines security for accepting incoming call indications from the DSL. Options: answer-none (1): incoming calls not accepted answer-all (2): incoming calls accepted even without match between 'bcmUSapLowDirectoryIndex' and 'bcmUSapHighDirectoryIndex' answer-address (3): incoming calls accepted if there is an ISDN address fit between 'bcmUSapLowDirectoryIndex' and 'bcmUSapHighDirectoryIndex' answer-subaddress (4): incoming calls accepted if there is an ISDN subaddress fit between 'bcmUSapLowDirectoryIndex' and 'bcmUSapHighDirectoryIndex' Default Value: answer-none (1) Configuration Changed: administrative ")
bcmUSapPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("originate", 1), ("answer", 2), ("both", 3), ("callback", 4))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapPermission.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapPermission.setDescription('Determines what actions this upper SAP permits regarding outgoing and incoming calls. Options: originate (1): SAP permits calls to originate through it answer (2): SAP permits calls to be answered through it both (3): SAP permits calls both to originate and to be answered through it callback(4): SAP permits callback after rejecting a call (may use reverse charging information if available) Default Value: both Configuration Changed: administrative ')
bcmUSapCallTypeAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("voice-call", 1), ("data-call", 2), ("packet-call", 3))).clone('data-call')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapCallTypeAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapCallTypeAccepted.setDescription("Determines the type of call this upper SAP will accept. Options: voice-call (1): SAP accepts calls using 'speech', 'audio-31', or 'audio-7' value in 'bcmSapInfoType' data-call (2): SAP accepts calls using 'digital', 'digital-56', or 'restricted-digital' value in 'bcmSapInfoType' packet-call (3): SAP accepts calls using 'packet' value in 'bcmSapInfoType' (this option is not supported) Default Value: data-call Configuration Changed: administrative ")
bcmUSapSendingProceed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("en-bloc", 1), ("overlap", 2))).clone('en-bloc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapSendingProceed.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapSendingProceed.setDescription("Indicates the way calling information for the switch is generated. 'en-bloc' means that all calling information is sent in the call request message (for voice application the message will be sent at the bcmUSapVoiceInterDigitTimer expiry or if the '#' tone is dialed) 'overlap' means that calling information is spread over several messages.")
bcmUSapVoiceInterDigitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapVoiceInterDigitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapVoiceInterDigitTimer.setDescription("Indicates the maximum time in seconds to wait for another digit in 'en-bloc' sending mode. When this timer expires, a connection attempt will be made with all the gathered digits NOTE: This object is used for Voice Applications only.")
bcmUSapVoiceHuntGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 17), Integer32().clone(1073741823)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapVoiceHuntGroup.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapVoiceHuntGroup.setDescription("Determines the voice ports number included in the Hunt Group as a bitmap. A Voice Hunt Group identifies multiple voice ports that can be used locally to process an incoming call indication from the Digital Subscriber Line (DSL). It is also used to specify which voice ports can access this upper SAP to make an outgoing call request. A maximum of 30 voice ports can be mapped in a single hunt group. Range of Values:'0000 0000'h to '3FFF FFFF'h Default Value: '3FFF FFFF'h equals 1073741823 NOTE: This object is used for Voice Applications only.")
bcmUSapVoiceHuntDsl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 18), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapVoiceHuntDsl.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapVoiceHuntDsl.setDescription("Determines the Digital Subscriber Line (DSL) numbers included in the DSL Hunt Group as a bitmap. The DSL Hunt Group identifies which DSL could be used by this upper SAP when an outgoing call request from the Voice module is made. It also identifies which DSL could be used when an incoming call indication from the DSL is received. A maximum of 2 ports can be mapped in a single DSL hunt group. Range of Values:'0000 0000'h to '0000 0003'h Default Value: '0000 0003'h equals 3 NOTE: This object is used for Voice Applications only.")
bcmUSapVoiceAddressPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("isdn", 2), ("telephony", 3), ("x-121", 4), ("telex", 5), ("national", 9), ("private", 10))).clone('isdn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapVoiceAddressPlan.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapVoiceAddressPlan.setDescription('Determines the Address Plan (corresponding to the Q.931 Information Element 0x70, octet 3, bit 4 to 1) associated to a voice call request from an upper application (FR/PPP/VOICE). NOTE: This object is used for Voice Applications only. Options: unknown (1): unknown plan isdn (2): ISDN telephony (3): telephony x-121 (4): X.121 telex (5): telex national (9): national private (10): private Default Value: isdn (2) Configuration Changed: administrative ')
bcmUSapVoiceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("international", 2), ("national", 3), ("private", 4), ("subscriber", 5))).clone('international')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapVoiceAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapVoiceAddressType.setDescription('Determines the Address Type (corresponding to the Q.931 Information Element 0x70, octet 3, bit 7 to 5) associated to a voice call request from an upper application (FR/PPP/VOICE). NOTE: This object is used for Voice Applications only. Options: unknown (1): unknown type international (2): international national (3): national private (4): private subscriber (5): subscriber Default Value: international (2) Configuration Changed: administrative ')
bcmUSapVoiceCodingScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mu-law", 1), ("a-law", 2))).clone('mu-law')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapVoiceCodingScheme.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapVoiceCodingScheme.setDescription("Indicates the voice encoding scheme used for voice calls that will be initiated locally. This object won't be used when using the NET3 or NET5 switch types because in that case the 'A-law' encoding is enforced. NOTE: This object is used for Voice Applications only. Default Value: 1 Configuration Changed: administrative ")
bcmUSapVoiceCallRoutingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-used", 1), ("address", 2), ("subaddress", 3), ("address-and-subaddress", 4))).clone('not-used')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmUSapVoiceCallRoutingMode.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapVoiceCallRoutingMode.setDescription('Indicates how this Upper SAP will provide the routing information to the upper voice layer application. When an incoming call indication from the Digital Subscriber Line (DSL) is received, the called party can be used to route this voice call to a remote. NOTE: This object is used for Voice Applications only. Options: not-used (1): incoming call indication called party information is not used. Routing information has to be provided in-band. address (2): complete address is used to route the voice call subaddress (3): complete subaddress is used to route the voice call address-and-subaddress (4): complete address and subaddress is used to route the voice call. The address is sent first followed by the subaddress. Default Value: not-used (1) Configuration Changed: administrative ')
bcmUSapState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 11))).clone(namedValues=NamedValues(("not-used", 1), ("unbound", 2), ("bound", 3), ("registering", 4), ("idle", 5), ("outgoing", 6), ("incoming", 7), ("active", 8), ("release", 9), ("overlap-rx", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapState.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapState.setDescription('Indicates the current state of this upper SAP. Options: not-used (1): SAP not in use unbound (2): SAP not bound to another software layer bound (3): SAP bound to another software layer registering (4): SAP in process of being registered idle (5): SAP is idle outgoing (6): SAP process call indication from DSL incoming (7): SAP process call request from upper application active (8): SAP is active release (9): SAP released from call overlap-rx (11): SAP is receiving calling information over several messages Default Value: none')
bcmUSapStatusEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEvent", 1), ("usapOutOfRange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapStatusEvent.setStatus('obsolete')
if mibBuilder.loadTexts: bcmUSapStatusEvent.setDescription("Indicates a status generated by the 'bcmUSapStatusIndication' trap. Note: This value will always read 'noEvent' unless 'bcmTraps' has been enabled and an event has been trapped. Options: noEvent (1): no event trapped usapOutOfRange (2): upper SAP number out of range Default Value: noEvent")
bcmUSapNbChannelBound = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapNbChannelBound.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapNbChannelBound.setDescription('Indicates the number of B channels bound in the current or last call. Range of Values: 0-30 Default Value: 0 (no call since system startup)')
bcmUSapTotalConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 43), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapTotalConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapTotalConnectTime.setDescription('Indicates the total time connected to remote parties on both incoming and outgoing calls since system startup. Range of Values: 0-4, 294, 967, 295 Default Value: 0 (no call since system startup)')
bcmUSapLastSetupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 44), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapLastSetupTime.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapLastSetupTime.setDescription('Indicates the system time when an ISDN setup message for the current or last call was last sent or received by this upper SAP. Range of Values: 0-4, 294, 967, 295 Default Value: 0 (no call since system startup)')
bcmUSapLastConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 45), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapLastConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapLastConnectTime.setDescription('Indicates the system time when an ISDN connect message for the current of last call was last sent or received by this upper SAP. Range of Values: 0-4, 294, 967, 295 Default Value: 0 (no call since system startup)')
bcmUSapLastDisconnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 46), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapLastDisconnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapLastDisconnectTime.setDescription('Indicates the system time when an ISDN disconnect or release message for the current or last call was last sent or received by this upper SAP. Range of Values: 0-4, 294, 967, 295 Default Value: 0 (no call since system startup)')
bcmUSapLastDisconnectCause = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapLastDisconnectCause.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapLastDisconnectCause.setDescription('Indicates the codes for the cause of a disconnect. Cause Values: For each class, the description of its cause value is given. Note that the value corresponds to the decimal value of the 7 least significant bits since the bit 8 is always set to 1. Class 000, Normal Events: 1 Unassigned number 2 No route to specified transit network 3 No route to destination 6 Channel unacceptable 7 Call awarded and deliivered in an established channel 16 Normal call clearing 17 User busy 18 No user responding 19 User alerting, no answer 21 Call rejected 22 Number changed 26 Non-selected user clearing 27 Destination out of order 28 Invalid number format (incompatible number) 29 Facility rejected 30 Response to STATUS ENQUIRY 31 Normal unspecified Class 010, Network Congestion: 34 No circuit/channel available 38 Network out of order 41 Temporary failure 42 Switching equipment congestion 43 User info discarded 44 Requested channel not available 47 Resources unavailable - unspecified Class 011, Service or Option Not Available: 49 Quality of service unavailable 50 Requested facility not subscribed 57 Bearer capability not authorized 58 Bearer capability not presently authorized 63 Service or option not available, unspecified or Option Not Implemented: 65 Bearer capability not implemented 66 Channel type not implemented 69 Requested facility not implemented 70 Only restricted digital information bearer capability is available 79 Service or option not implemented, unspecified Class 101, Invalid Message: 81 Invalid call reference value 82 Identified channel does not exist 83 Suspended call exits, but this call identity does not 84 Call identity in use 85 No call suspended 86 Call having the requested call identity has been cleared 88 Incompatible destination 91 Invalid transit network selection 95 Invalid message, unspecified Class 110, Protocol Error: 96 Mandatory information element is missing 97 Message type non-existent or not implemented 98 Message not compatible with call state or message type non-existent of not implemented 99 Information element non-existent or not implemented 100 Invalid information element contents 101 Message not compatible with call state 102 Recovery on time expiry 111 Protocol error, unspecified Class 111, Interworking: 127 Interworking, unspecified Range of Values: 0-127 Default Value: none')
bcmUSapDslId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapDslId.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapDslId.setDescription('Indicates the Digital Subscriber Line used by the current or last call. Range of Values: 0-2 for DI600 (port) 0-6 for CX900 (slot) 0-8 for CX950 (slot) Default Value: 0 (no call since system startup)')
bcmUSapLocalSapId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapLocalSapId.setStatus('obsolete')
if mibBuilder.loadTexts: bcmUSapLocalSapId.setDescription("Indicates the upper SAP's ID. Range of Values: 1-20 for BRI ISDN 1-64 for PRI ISDN Default Value: none")
bcmUSapSpeedDialDirectoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapSpeedDialDirectoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapSpeedDialDirectoryIndex.setDescription('Indicates an address associated with this upper SAP that is used for speed-dialing by ISDN applications. Range of Values: 1-40 for BRI ISDN 1-128 for PRI ISDN NOTE: Only used for DATA calls Default Value: none')
bcmUSapVoiceChannelUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapVoiceChannelUsed.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapVoiceChannelUsed.setDescription('Indicates which voice port used in the current or last call. Range of Values: 1-15 indicates respective DVDBs 1-15 on DVC 1 16-30 indicates respective DVDBs 1-15 on DVC 2 NOTE: This object is used for Voice Applications only.')
bcmUSapNbSuccessCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapNbSuccessCalls.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapNbSuccessCalls.setDescription('Indicates the number of completed calls to remote parties through this upper SAP since system startup. Range of Values: 0-4, 294, 967, 295 Default Value: none')
bcmUSapNbFailedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapNbFailedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapNbFailedCalls.setDescription('Indicates the number of failed calls to remote parties through this upper SAP since system startup. Range of Values: 0-4,294,967,295 Default Value: none')
bcmUSapNbRefusedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 52, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmUSapNbRefusedCalls.setStatus('mandatory')
if mibBuilder.loadTexts: bcmUSapNbRefusedCalls.setDescription('Indicates the number of refused calls to remote parties through this upper SAP since system startup. Range of Values: 0-4, 294, 967, 295 Default Value: none')
bcmDirectoryTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53), )
if mibBuilder.loadTexts: bcmDirectoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDirectoryTable.setDescription('A table containing the ISDN access points.')
bcmDirectoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53, 1), ).setIndexNames((0, "CXBCM-MIB", "bcmDirectoryNumber"))
if mibBuilder.loadTexts: bcmDirectoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDirectoryEntry.setDescription('The parameters for a specific ISDN access point.')
bcmDirectoryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmDirectoryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDirectoryNumber.setDescription('Indicates the row containing objects for configuring an ISDN access point. Range of Values: 1-40 for BRI ISDN 1-128 for PRI ISDN Default Value: none')
bcmDirectoryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('invalid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDirectoryRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDirectoryRowStatus.setDescription('Determines whether this ISDN access point is to be removed from service (i.e. invalidated) within the B-Channel Manager software layer. Options: invalid (1): row is flagged; after next reset values will be disabled and row will be deleted from table valid (2): values are enabled Default Value: invalid Configuration Changed: administrative ')
bcmDirectoryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDirectoryAddress.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDirectoryAddress.setDescription('Determines the ISDN address or phone number. Range of Values: 0-16 non-alpha characters (namely, 0123456789*#) Default Value: none Configuration Changed: administrative ')
bcmDirectoryAddressPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("isdn", 2), ("telephony", 3), ("x-121", 4), ("telex", 5), ("national", 9), ("private", 10))).clone('isdn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDirectoryAddressPlan.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDirectoryAddressPlan.setDescription("Determines the Address Plan (corresponding to the Q.931 Information Element 0x70, octet 3, bit 4 to 1) associated with 'bcmDirectoryAddress'. Options: unknown (1): unknown plan isdn (2): ISDN telephony (3): telephony x-121 (4): X.121 telex (5): telex national (9): national private (10): private Default Value: isdn (2) Configuration Changed: administrative ")
bcmDirectoryAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("international", 2), ("national", 3), ("private", 4), ("subscriber", 5))).clone('international')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDirectoryAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDirectoryAddressType.setDescription("Determines the Address Type (corresponding to the Q.931 Information Element 0x70, octet 3, bit 7 to 5) associated with 'bcmDirectoryAddress'. Options: unknown (1): unknown type international (2): international national (3): national private (4): private subscriber (5): subscriber Default Value: international (2) Configuration Changed: administrative ")
bcmDirectorySubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDirectorySubAddress.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDirectorySubAddress.setDescription('Determines the ISDN subaddress or phone extension number. Range of Values: 0-20 non-alpha characters (namely, 0123456789*#) Note: If the subaddress is not known, this value is left blank. Default Value: none Configuration Changed: administrative ')
bcmDirectorySubAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("nsap", 1), ("user-defines", 3))).clone('user-defines')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDirectorySubAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDirectorySubAddressType.setDescription("Determines the Subaddress Type (corresponding to the Q.931 Information Element 0x71, octet 3, bit 7 to 5) associated with 'bcmDirectoryAddress'. Options: nsap (1): NSAP (CCITT rec. X-213 [23]/ISO 8348 AD2[24]) user-defines (3): private network Default Value: user-defines (3) Configuration Changed: administrative ")
bcmDirectorySpid = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 53, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcmDirectorySpid.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDirectorySpid.setDescription('Determines the SPID (Service Profile Identifier) for DMS-100, NI-1, NI-2 and, optionally, 5ESS switches supporting BRI. Range of Values: 0-20 non-alpha characters (namely, 0123456789*#) Note: If switch does not use SPID, this value is left blank. Default Value: none Configuration Changed: administrative ')
bcmCallHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54), )
if mibBuilder.loadTexts: bcmCallHistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: bcmCallHistoryTable.setDescription('A table containing information about specific calls to specific destination.')
bcmCallHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1), ).setIndexNames((0, "CXBCM-MIB", "bcmCallHistoryUSapNumber"), (0, "CXBCM-MIB", "bcmCallHistoryNumber"))
if mibBuilder.loadTexts: bcmCallHistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bcmCallHistoryEntry.setDescription('The information regarding a single upper SAP connection.')
bcmCallHistoryUSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistoryUSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: bcmCallHistoryUSapNumber.setDescription('Indicates the upper SAP involved in this call history. Range of Values: 1-20 for BRI ISDN 1-64 for PRI ISDN Default Value: none')
bcmCallHistoryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 2), CHIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistoryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: bcmCallHistoryNumber.setDescription('Indicates the unique identifier for this call history. Range of Values: 1 Default Value: none')
bcmCallHistoryDslChannelUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistoryDslChannelUsed.setStatus('mandatory')
if mibBuilder.loadTexts: bcmCallHistoryDslChannelUsed.setDescription('Indicates the Digital Subscriber Line involved in this call history. Range of Values: 1-2 for DI600 (port) 1-6 for CX900 (slot) 1-8 for CX950 (slot) Default Value: none')
bcmCallHistoryBChannelsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistoryBChannelsUsed.setStatus('mandatory')
if mibBuilder.loadTexts: bcmCallHistoryBChannelsUsed.setDescription('Indicates a the B channel(s) that have been used in this call history (each B channel identified by one-bit position in 32-bit object) Range of Values: 0-FFFFFFFF hexadecimal Default Value: none')
bcmCallHistoryPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistoryPeerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: bcmCallHistoryPeerAddress.setDescription('Indicates the address to which a call connected in this call history. Range of Values: 0-16 non-alpha characters (namely, 0123456789*#) Note: If the number is not known, this value is left blank. Default Value: none')
bcmCallHistoryPeerSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistoryPeerSubAddress.setStatus('mandatory')
if mibBuilder.loadTexts: bcmCallHistoryPeerSubAddress.setDescription('Indicates the subaddress to which a call connected in this call history. Range of Values: 0-20 non-alpha characters (namely, 0123456789*#) Note: If the number is not known, this value is left blank. Default Value: none')
bcmCallHistoryOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown-src", 1), ("originate-src", 2), ("answer-src", 3), ("callback-src", 4))).clone('unknown-src')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistoryOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: bcmCallHistoryOrigin.setDescription('Indicates the origin of a call in this call history. Options: unknown-src (1): unknown origin originate-src (2): SAP originated call answer-src (3): SAP answered call callback-src (4): SAP called back Default Value: unknown-src (1)')
bcmCallHistorySetupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 45), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistorySetupTime.setStatus('mandatory')
if mibBuilder.loadTexts: bcmCallHistorySetupTime.setDescription('Indicates the system time when the call in this call history was setup. Range of Values: 0-4, 294, 967, 295 Default Value: none')
bcmCallHistoryConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 46), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistoryConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: bcmCallHistoryConnectTime.setDescription('Indicates the system time when the call in this call history was connected. Range of Values: 0-4, 294, 967, 295 Default Value: none')
bcmCallHistoryDisconnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 54, 1, 47), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmCallHistoryDisconnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: bcmCallHistoryDisconnectTime.setDescription('Indicates the system time when the call in this call history was disconnected or released. Range of Values: 0-4, 294, 967, 295 Default Value: none')
bcmDebugTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 55), )
if mibBuilder.loadTexts: bcmDebugTable.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDebugTable.setDescription('A table containing control to access debugging information.')
bcmDebugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 55, 1), ).setIndexNames((0, "CXBCM-MIB", "bcmDebugNumber"))
if mibBuilder.loadTexts: bcmDebugEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDebugEntry.setDescription('The parameters for a specific structure debugging information.')
bcmDebugNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 55, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcmDebugNumber.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDebugNumber.setDescription('Indicates the row containing objects for creating files of debugging information. Default Value: none')
bcmDebugDslCB = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 55, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bcmDebugDslCB.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDebugDslCB.setDescription('Creates a file that includes debugging information about DSL control block structures for the specified DSL. Range of Values: 1-2 for DI600 (port) 1-6 for CX900 (slot) 1-8 for CX950 (slot) Warning: You should not modify this object without advice of Memotec personnel.')
bcmDebugLSapCB = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 55, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bcmDebugLSapCB.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDebugLSapCB.setDescription('Creates a file that includes debugging information about lower SAP control block structures for the specified SAP. Range of Values: 1-64 for DI600 1-192 for CX900 1-256 for CX950 Warning: You should not modify this object without advice of Memotec personnel.')
bcmDebugUSapCB = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 55, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bcmDebugUSapCB.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDebugUSapCB.setDescription('Creates a file that includes debugging information about upper SAP control block structures for the specified SAP. Range of Values: 1-20 for BRI ISDN 1-64 for PRI ISDN Warning: You should not modify this object without advice of Memotec personnel.')
bcmDebugCallHistoryCB = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 55, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bcmDebugCallHistoryCB.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDebugCallHistoryCB.setDescription('Creates a file that includes debugging information about call history for the specified SAP. Range of Values: 1-20 for BRI ISDN 1-64 for PRI ISDN Warning: You should not modify this object without advice of Memotec personnel.')
bcmDebugDataScope = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 55, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bcmDebugDataScope.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDebugDataScope.setDescription('Creates a running display of hexadecimal values over a period measured in milliseconds for a given SAP. Range of Values: 1-2 for DI600 (port) 1-6 for CX900 (slot) 1-8 for CX950 (slot) Warning: You should not modify this object without advice of Memotec personnel.')
bcmDebugDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48, 55, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bcmDebugDisconnect.setStatus('mandatory')
if mibBuilder.loadTexts: bcmDebugDisconnect.setDescription('Sends a DISConnect message to a given BCM Upper SAP. Range of Values: 1-20 for BRI ISDN 1-64 for PRI ISDN Warning: You should not modify this object without advice of Memotec personnel.')
bcmLSapStatusIndication = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48) + (0,1)).setObjects(("CXBCM-MIB", "bcmLSapDslNumber"), ("CXBCM-MIB", "bcmLSapNumber"), ("CXBCM-MIB", "bcmLSapStatusEvent"))
if mibBuilder.loadTexts: bcmLSapStatusIndication.setDescription("Indicates that the event identified by global object bcmLSapStatusEvent has occured at lower access point. This trap is only generated when the global object bcmTraps is set to value 'enabled'.")
bcmCallHistoryStatusIndication = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 48) + (0,2)).setObjects(("CXBCM-MIB", "bcmCallHistoryUSapNumber"), ("CXBCM-MIB", "bcmCallHistoryNumber"), ("CXBCM-MIB", "bcmCallHistoryDslChannelUsed"), ("CXBCM-MIB", "bcmCallHistoryBChannelsUsed"), ("CXBCM-MIB", "bcmCallHistoryPeerAddress"), ("CXBCM-MIB", "bcmCallHistoryPeerSubAddress"), ("CXBCM-MIB", "bcmCallHistoryOrigin"), ("CXBCM-MIB", "bcmCallHistorySetupTime"), ("CXBCM-MIB", "bcmCallHistoryConnectTime"), ("CXBCM-MIB", "bcmCallHistoryDisconnectTime"))
if mibBuilder.loadTexts: bcmCallHistoryStatusIndication.setDescription("Indicates that the event identified by global object bcmCallHistoryTable has occured at upper access point. This trap is only generated when the global object bcmCallHistoryTraps is set to value 'enabled'.")
mibBuilder.exportSymbols("CXBCM-MIB", bcmLSapHighDirectoryIndex=bcmLSapHighDirectoryIndex, bcmDslNumber=bcmDslNumber, bcmDslTable=bcmDslTable, bcmDslEffectiveRetries=bcmDslEffectiveRetries, bcmDirectorySubAddressType=bcmDirectorySubAddressType, bcmSoftwareVersion=bcmSoftwareVersion, bcmCallHistoryTraps=bcmCallHistoryTraps, bcmUSapPermission=bcmUSapPermission, bcmLSapUSapId=bcmLSapUSapId, bcmUSapLastConnectTime=bcmUSapLastConnectTime, bcmDslNbChannelInUse=bcmDslNbChannelInUse, bcmCallHistoryDslChannelUsed=bcmCallHistoryDslChannelUsed, bcmDebugLSapCB=bcmDebugLSapCB, bcmLSapDslNumber=bcmLSapDslNumber, bcmUSapSpeedDialDirectoryIndex=bcmUSapSpeedDialDirectoryIndex, bcmDslInterfaceType=bcmDslInterfaceType, bcmUSapAlias=bcmUSapAlias, bcmLSapNumber=bcmLSapNumber, bcmLSapState=bcmLSapState, bcmDirectoryAddressType=bcmDirectoryAddressType, bcmLSapCallDisconnectTime=bcmLSapCallDisconnectTime, bcmUSapAnswerMode=bcmUSapAnswerMode, bcmUSapVoiceInterDigitTimer=bcmUSapVoiceInterDigitTimer, bcmDebugTable=bcmDebugTable, bcmUSapLastSetupTime=bcmUSapLastSetupTime, bcmUSapLastDisconnectCause=bcmUSapLastDisconnectCause, bcmLSapNbOutCallsConnected=bcmLSapNbOutCallsConnected, bcmCallHistoryConnectTime=bcmCallHistoryConnectTime, bcmDirectoryRowStatus=bcmDirectoryRowStatus, bcmNbActiveUSap=bcmNbActiveUSap, bcmUSapLastDisconnectTime=bcmUSapLastDisconnectTime, bcmUSapNbRefusedCalls=bcmUSapNbRefusedCalls, bcmUSapState=bcmUSapState, bcmDebugDslCB=bcmDebugDslCB, bcmUSapNbFailedCalls=bcmUSapNbFailedCalls, bcmDirectorySubAddress=bcmDirectorySubAddress, bcmLSapTable=bcmLSapTable, bcmUSapVoiceAddressPlan=bcmUSapVoiceAddressPlan, bcmDebugNumber=bcmDebugNumber, bcmUSapNumber=bcmUSapNumber, bcmCallHistoryUSapNumber=bcmCallHistoryUSapNumber, bcmUSapTable=bcmUSapTable, bcmDslPriType=bcmDslPriType, bcmLSapPeerAddress=bcmLSapPeerAddress, bcmLSapCallConnectTime=bcmLSapCallConnectTime, bcmDebugUSapCB=bcmDebugUSapCB, bcmDslBChannelType=bcmDslBChannelType, bcmLSapNbInCallsConnected=bcmLSapNbInCallsConnected, bcmCallHistoryTable=bcmCallHistoryTable, bcmDslOutGoingCallId=bcmDslOutGoingCallId, bcmDirectoryEntry=bcmDirectoryEntry, CHIndex=CHIndex, bcmDirectorySpid=bcmDirectorySpid, bcmTraps=bcmTraps, bcmDslInfoRate=bcmDslInfoRate, bcmUSapEntry=bcmUSapEntry, bcmLSapCallId=bcmLSapCallId, bcmCallHistorySetupTime=bcmCallHistorySetupTime, bcmLSapCompanionAlias=bcmLSapCompanionAlias, bcmCallHistoryBChannelsUsed=bcmCallHistoryBChannelsUsed, bcmUSapVoiceHuntGroup=bcmUSapVoiceHuntGroup, bcmUSapRowStatus=bcmUSapRowStatus, bcmUSapDslId=bcmUSapDslId, bcmUSapHighDirectoryIndex=bcmUSapHighDirectoryIndex, bcmUSapNbSuccessCalls=bcmUSapNbSuccessCalls, bcmCallHistoryOrigin=bcmCallHistoryOrigin, bcmLSapAlias=bcmLSapAlias, bcmLSapNbInCalls=bcmLSapNbInCalls, bcmUSapLocalSapId=bcmUSapLocalSapId, bcmLSapCallSetupTime=bcmLSapCallSetupTime, bcmUSapCallTypeAccepted=bcmUSapCallTypeAccepted, bcmDslSendingProceed=bcmDslSendingProceed, bcmCallHistoryStatusIndication=bcmCallHistoryStatusIndication, bcmCallHistoryDisconnectTime=bcmCallHistoryDisconnectTime, bcmLSapEntry=bcmLSapEntry, bcmUSapLowDirectoryIndex=bcmUSapLowDirectoryIndex, bcmDslBriType=bcmDslBriType, LSapIndex=LSapIndex, bcmUSapStatusEvent=bcmUSapStatusEvent, bcmDslMngmtTimer=bcmDslMngmtTimer, bcmLSapNbOutCalls=bcmLSapNbOutCalls, bcmDslSwitchType=bcmDslSwitchType, bcmMibLevel=bcmMibLevel, bcmLSapInfoType=bcmLSapInfoType, bcmModuleState=bcmModuleState, bcmUSapVoiceCallRoutingMode=bcmUSapVoiceCallRoutingMode, bcmCallHistoryPeerAddress=bcmCallHistoryPeerAddress, bcmDebugDisconnect=bcmDebugDisconnect, bcmDirectoryNumber=bcmDirectoryNumber, bcmDebugCallHistoryCB=bcmDebugCallHistoryCB, bcmLSapChannelCES=bcmLSapChannelCES, bcmUSapVoiceHuntDsl=bcmUSapVoiceHuntDsl, bcmDslEntry=bcmDslEntry, bcmLSapDirectoryIndex=bcmLSapDirectoryIndex, bcmUSapNbChannelBound=bcmUSapNbChannelBound, bcmDslRowStatus=bcmDslRowStatus, bcmDirectoryAddress=bcmDirectoryAddress, bcmUSapSendingProceed=bcmUSapSendingProceed, bcmNbActiveDsl=bcmNbActiveDsl, bcmCallHistoryNumber=bcmCallHistoryNumber, bcmDslBChannelCount=bcmDslBChannelCount, bcmDirectoryTable=bcmDirectoryTable, bcmLSapStatusEvent=bcmLSapStatusEvent, bcmLSapStatusIndication=bcmLSapStatusIndication, bcmCallHistoryPeerSubAddress=bcmCallHistoryPeerSubAddress, bcmDirectoryAddressPlan=bcmDirectoryAddressPlan, bcmUSapVoiceAddressType=bcmUSapVoiceAddressType, bcmDebugDataScope=bcmDebugDataScope, bcmLSapLowDirectoryIndex=bcmLSapLowDirectoryIndex, bcmLSapCallOrigin=bcmLSapCallOrigin, bcmCallHistoryEntry=bcmCallHistoryEntry, bcmDebugEntry=bcmDebugEntry, bcmUSapVoiceChannelUsed=bcmUSapVoiceChannelUsed, bcmUSapTotalConnectTime=bcmUSapTotalConnectTime, bcmLSapPeerSubAddress=bcmLSapPeerSubAddress, bcmUSapVoiceCodingScheme=bcmUSapVoiceCodingScheme)
