#
# PySNMP MIB module CISCO-WDS-IDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WDS-IDS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:21:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, Gauge32, IpAddress, Bits, MibIdentifier, Counter64, NotificationType, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "IpAddress", "Bits", "MibIdentifier", "Counter64", "NotificationType", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "Counter32", "Unsigned32")
DisplayString, TimeStamp, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "MacAddress", "TextualConvention")
ciscoWdsIdsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 457))
ciscoWdsIdsMIB.setRevisions(('2004-10-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWdsIdsMIB.setRevisionsDescriptions(('Initial version of this MIB module. ',))
if mibBuilder.loadTexts: ciscoWdsIdsMIB.setLastUpdated('200410170000Z')
if mibBuilder.loadTexts: ciscoWdsIdsMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoWdsIdsMIB.setContactInfo(' Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-dot11@cisco.com')
if mibBuilder.loadTexts: ciscoWdsIdsMIB.setDescription('This MIB is intended to be implemented on all IOS based network entities that provide Wireless Domain Services, for the purpose of providing network management stations information about the various attempts to compromise the security in the 802.11-based wireless networks. Entities that can be configured to provide Wireless Domain Services could be an 802.11 Access Point, a Switch or any other IOS network device, that allows the WDS configuration. The MIB reports the information about the MAC spoofing attempts made by wireless clients to compromise the security of the network. MAC Spoofing is detected by the WDS when clients attempt to authenticate with the WDS using the MAC address of another client while roaming from one AP to another. Upon detecting this, the WDS provides the information about the client and the username to the NMS as MIB objects. The hierarchy of the WDS, AP and MNs is as follows. +=====+ +=====+ +=====+ | | | | | | | WDS | | WDS | | WDS | | | | | | | +=====+ +=====+ +=====+ / \\ \\ \\ / \\ \\ \\ / \\ \\ \\ / \\ \\ \\ / \\ \\ \\ \\/ \\/ \\/ \\/ +~-~-~+ +~-~-~+ +~-~-~+ +~-~-~+ + + + + + + + + + AP + + AP + + AP + + AP + + + + + + + + + +~-~-~+ +~-~-~+ +~-~-~+ +~-~-~+ .. . . . .. . . . . . . . . . . . . . . . . . . . . . . . \\/ \\/ \\/ \\/ \\/ +.....+ +.....+ +-.-.-.+ +~-~-~+ +......+ + + + + + + + + + + + MN + + MN + + MN + + MN + + MN + + + + + + + + + + + +.....+ +.....+ +-.-.-.+ +~-~-~+ +......+ The WDS include authentication and registration services for the APs. An AP provides Proxy Authentication and registration services for the MNs. The wireless connections are represented as dotted lines in the above diagram. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Wireless Domain Services (WDS) The set of services being offered at a particular broadcast domain that may be an IP subnet or a particular VLAN, or across the L3 cloud. The services include the following. 1. MN security credential caching to provide seamless, secure intra-subnet roaming. 2. Authenticated context transfer for roaming client within the subnet. Context The mobility context for an MN includes its current mobility bindings with the APs, IP/802 address bindings, cached configuration parameters, QoS state, IP group membership, authentication state, accounting statistics, and other dynamically derived protocol state information. ')
ciscoWdsIdsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 457, 1))
ciscoWdsIdsMacSpoofing = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 457, 1, 1))
ciscoWdsIdsMaxMacAddresses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 457, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoWdsIdsMaxMacAddresses.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsIdsMaxMacAddresses.setDescription('This object indicates the maximum number of different MAC addresses for which spoofing events are held in this table. ')
ciscoWdsIdsMaxEntriesPerMac = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 457, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoWdsIdsMaxEntriesPerMac.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsIdsMaxEntriesPerMac.setDescription('This object indicates the maximum number of entries that can be held for a particular MAC address indicated by the object ciscoWdsIdsMacSpoofStaMacAddress. ')
ciscoWdsIdsMacSpoofTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 457, 1, 1, 3), )
if mibBuilder.loadTexts: ciscoWdsIdsMacSpoofTable.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsIdsMacSpoofTable.setDescription("This table gives the information about the MAC spoofing attacks detected by the network entity offering WDS. An entry in this table is created by the agent when the WDS detects a MAC spoofing attack. The agent at anytime will retain only the most recent and maximum number of entries possible for a particular MAC. The older entries are purged automatically when the number of entries for a particular MAC reaches its maximum. Thus, there can be a maximum of those many different MAC addresses indicated by ciscoWdsIdsMaxMacAddresses and for each MAC address, the maximum number of entries is indicated by the value of the MIB object ciscoWdsIdsMaxEntriesPerMac. MAC spoofing is detected only by the network entity serving as the active WDS and hence this table is populated only by the active WDS as indicated by the values 'wds' and 'active' for the MIB objects cDot11csServiceType and cDot11csWdsInstanceState respectively. If cDot11csServiceType equals 'none' indicating that WDS is not configured in this station, or cDot11csWdsInstanceState not equals 'active' indicating that this entity is not the currently active WDS, a 'noSuchInstance' error is returned for the queries to the objects of this table. ")
ciscoWdsIdsMacSpoofEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 457, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-WDS-IDS-MIB", "ciscoWdsIdsMacSpoofStaMacAddress"), (0, "CISCO-WDS-IDS-MIB", "ciscoWdsIdsMacSpoofIndex"))
if mibBuilder.loadTexts: ciscoWdsIdsMacSpoofEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsIdsMacSpoofEntry.setDescription('An entry holds the information about one instance of MAC spoofing attack detected on the radio interface of the AP identified by ciscoWdsIdsMacSpoofStaMacAddress. ')
ciscoWdsIdsMacSpoofStaMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 457, 1, 1, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: ciscoWdsIdsMacSpoofStaMacAddress.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsIdsMacSpoofStaMacAddress.setDescription('This object identifies the radio interface of the 802.11 station, that has forwarded the authentication request of the client with the spoofed MAC address indicated by ciscoWdsIdsMacSpoofClient, to the WDS. ')
ciscoWdsIdsMacSpoofIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 457, 1, 1, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ciscoWdsIdsMacSpoofIndex.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsIdsMacSpoofIndex.setDescription('This object identifies the set of information about one instance of a MAC spoofing attack detected by the WDS. The radio interface of the 802.11 station that has forwarded the authentication request is identified by ciscoWdsIdsMacSpoofStaMacAddress. ')
ciscoWdsIdsMacSpoofClient = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 457, 1, 1, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoWdsIdsMacSpoofClient.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsIdsMacSpoofClient.setDescription('This object indicates the MAC address that has been spoofed. ')
ciscoWdsIdsMacSpoofUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 457, 1, 1, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoWdsIdsMacSpoofUserId.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsIdsMacSpoofUserId.setDescription('This object indicates the userId used by the wireless client when attempting the MAC spoofing attack. ')
ciscoWdsIdsMacSpoofDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 457, 1, 1, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoWdsIdsMacSpoofDetectTime.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsIdsMacSpoofDetectTime.setDescription('This object indicates the time at which this MAC spoofing attempt is detected by the WDS. ')
ciscoWdsIdsMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 457, 2))
ciscoWdsIdsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 457, 2, 1))
ciscoWdsIdsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 457, 2, 2))
ciscoWdsIdsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 457, 2, 1, 1)).setObjects(("CISCO-WDS-IDS-MIB", "ciscoWdsIdsMacSpoofingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWdsIdsMIBCompliance = ciscoWdsIdsMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsIdsMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoWdsIdsMIB module.')
ciscoWdsIdsMacSpoofingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 457, 2, 2, 1)).setObjects(("CISCO-WDS-IDS-MIB", "ciscoWdsIdsMaxMacAddresses"), ("CISCO-WDS-IDS-MIB", "ciscoWdsIdsMaxEntriesPerMac"), ("CISCO-WDS-IDS-MIB", "ciscoWdsIdsMacSpoofClient"), ("CISCO-WDS-IDS-MIB", "ciscoWdsIdsMacSpoofUserId"), ("CISCO-WDS-IDS-MIB", "ciscoWdsIdsMacSpoofDetectTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWdsIdsMacSpoofingGroup = ciscoWdsIdsMacSpoofingGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWdsIdsMacSpoofingGroup.setDescription('This collection of objects provide the information about the various attempts to spoof the MAC addresses of valid wireless clients in the network. ')
mibBuilder.exportSymbols("CISCO-WDS-IDS-MIB", ciscoWdsIdsMacSpoofTable=ciscoWdsIdsMacSpoofTable, ciscoWdsIdsMIBCompliances=ciscoWdsIdsMIBCompliances, ciscoWdsIdsMIBObjects=ciscoWdsIdsMIBObjects, ciscoWdsIdsMacSpoofEntry=ciscoWdsIdsMacSpoofEntry, ciscoWdsIdsMacSpoofUserId=ciscoWdsIdsMacSpoofUserId, ciscoWdsIdsMIBCompliance=ciscoWdsIdsMIBCompliance, PYSNMP_MODULE_ID=ciscoWdsIdsMIB, ciscoWdsIdsMIB=ciscoWdsIdsMIB, ciscoWdsIdsMIBConform=ciscoWdsIdsMIBConform, ciscoWdsIdsMacSpoofIndex=ciscoWdsIdsMacSpoofIndex, ciscoWdsIdsMacSpoofingGroup=ciscoWdsIdsMacSpoofingGroup, ciscoWdsIdsMaxMacAddresses=ciscoWdsIdsMaxMacAddresses, ciscoWdsIdsMacSpoofDetectTime=ciscoWdsIdsMacSpoofDetectTime, ciscoWdsIdsMacSpoofing=ciscoWdsIdsMacSpoofing, ciscoWdsIdsMaxEntriesPerMac=ciscoWdsIdsMaxEntriesPerMac, ciscoWdsIdsMacSpoofClient=ciscoWdsIdsMacSpoofClient, ciscoWdsIdsMIBGroups=ciscoWdsIdsMIBGroups, ciscoWdsIdsMacSpoofStaMacAddress=ciscoWdsIdsMacSpoofStaMacAddress)
