#
# PySNMP MIB module PDN-SECURITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-SECURITY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:39:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
pdn_security, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-security")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, NotificationType, Gauge32, ModuleIdentity, Unsigned32, MibIdentifier, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "NotificationType", "Gauge32", "ModuleIdentity", "Unsigned32", "MibIdentifier", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "Counter32", "Integer32")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
devSecurityMgrValidation = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devSecurityMgrValidation.setStatus('mandatory')
if mibBuilder.loadTexts: devSecurityMgrValidation.setDescription('This object is used to either enable or disable SNMP IP validation. When enabled the first check on any incoming PDU is based on the IP address of the datagram. If the IP address is configured in the devSecurityMgrTable then the community name is checked. If the community name is correct then the lowest access level between the the Table and the community name is taken.')
devSecurityMgrMaxNumber = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devSecurityMgrMaxNumber.setStatus('mandatory')
if mibBuilder.loadTexts: devSecurityMgrMaxNumber.setDescription('Maximum number of managers allowed in the devSecurityMgrTable.')
devSecurityMgrCurrentNumber = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devSecurityMgrCurrentNumber.setStatus('mandatory')
if mibBuilder.loadTexts: devSecurityMgrCurrentNumber.setDescription('Current number of managers in the devSecurityMgrTable.')
devSecurityMgrTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 4), )
if mibBuilder.loadTexts: devSecurityMgrTable.setStatus('mandatory')
if mibBuilder.loadTexts: devSecurityMgrTable.setDescription('A list of the security manager entries. In order to add a new Security Manager the devSecurityMgrIpAddress object must be created first by setting it to a valid IP Address.')
devSecurityMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 4, 1), ).setIndexNames((0, "PDN-SECURITY-MIB", "devSecurityMgrIpAddress"))
if mibBuilder.loadTexts: devSecurityMgrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: devSecurityMgrEntry.setDescription('The SNMP IP Address configuration items.')
devSecurityMgrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 4, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devSecurityMgrIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: devSecurityMgrIpAddress.setDescription("This is used to specify the IP address that identifies the SNMP manager(s) that are authorized to send SNMP messages. An existing Security Manager may be deleted by setting the devSecurityMgrIpAddress object to 0.0.0.0 or by setting the devSecurityMgrIpAddress object to a new IP Address. A new Security Manager may be added by setting the devSecurityMgrIpAddress object of 0.0.0.0 to the new address as long as there is still room for another Security Manager. When ever a new Security Manager is added or an existing Security Manager's IP Address is modified, the devSecurityMgrAccess object is set to the default value of read (1).")
devSecurityMgrAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read", 1), ("readWrite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devSecurityMgrAccess.setStatus('mandatory')
if mibBuilder.loadTexts: devSecurityMgrAccess.setDescription("This field is used to specify the access allowed for an authorized NMS when Manager Validation is performed. If the IP address for the NMS sending an SNMP message is on the list of allowed managers, this option along with the Community Name access determine the type of access allowed for the that manager. When ever a new Security Manager is added or an existing Security Manager's IP Address is modified, the devSecurityMgrAccess object is set to the default value of read (1). If the index for this object is not in the existing table and if there is room in the table then the index will be used to create a new Security Manager and will be given the requested access level.")
newSecurityMgrTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 5), )
if mibBuilder.loadTexts: newSecurityMgrTable.setStatus('mandatory')
if mibBuilder.loadTexts: newSecurityMgrTable.setDescription('A list of the security manager entries. If an entry is not found in this table, it is added to the table.')
newSecurityMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 5, 1), ).setIndexNames((0, "PDN-SECURITY-MIB", "newSecurityMgrIpAddress"))
if mibBuilder.loadTexts: newSecurityMgrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: newSecurityMgrEntry.setDescription('The SNMP IP Address configuration items.')
newSecurityMgrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 5, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newSecurityMgrIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: newSecurityMgrIpAddress.setDescription('This is used to specify the IP address that identifies the SNMP manager(s) that are authorized to send SNMP messages. This object is the binary AND of SNMP or telnet source IP address and its subnet mask if the subnet mask is available. Subnet mask is assumed to be 255.255.255.255 when not available')
newSecurityMgrAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("read", 1), ("readWrite", 2), ("noAccess", 3), ("telnetNoAccess", 4), ("telnetRead", 5), ("telnetReadWrite", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newSecurityMgrAccess.setStatus('mandatory')
if mibBuilder.loadTexts: newSecurityMgrAccess.setDescription("This field is used to specify the access allowed for an authorized NMS when Manager Validation is performed. If the IP address for the NMS sending an SNMP message is on the list of allowed managers, this option along with the Community Name access determine the type of access allowed for the that manager. When ever a new Security Manager is added or an existing Security Manager's IP Address is modified, the newSecurityMgrAccess object is set to the default value of read (1). If the index for this object is not in the existing table and if there is room in the table then the index will be used to create a new Security Manager and will be given the requested access level. In addition changing an existing access permission to noAccess invalidates the corresponding row of this table. It is upto the implementation to decide whether to actually remove this entry from the table or not. read (1) ==> no telnet access and snmp read only access readWrite (2) ==> no telnet access and snmp read-write access noAccess (3) ==> no telnet access and no snmp read-write access telnetNoAccess (4) ==> telnet access and no snmp access telnetRead (5) ==> telnet access and snmp read only access telnetReadWrite (6) ==> telnet access and snmp read-write access.")
newSecurityMgrSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newSecurityMgrSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: newSecurityMgrSubnetMask.setDescription('This object is used to specify the subnet mask ')
devSecurityTelnetSourceValidation = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devSecurityTelnetSourceValidation.setStatus('mandatory')
if mibBuilder.loadTexts: devSecurityTelnetSourceValidation.setDescription('This object is used to either enable or disable telnet source address screening ')
devSecurityFtpSourceValidation = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devSecurityFtpSourceValidation.setStatus('mandatory')
if mibBuilder.loadTexts: devSecurityFtpSourceValidation.setDescription('This object is used to either enable or disable ftp source address screening ')
securityMgrTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 8), )
if mibBuilder.loadTexts: securityMgrTable.setStatus('mandatory')
if mibBuilder.loadTexts: securityMgrTable.setDescription('A list of the security manager entries. If an entry is not found in this table, it is added to the table.')
securityMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 8, 1), ).setIndexNames((0, "PDN-SECURITY-MIB", "securityMgrIpAddress"), (0, "PDN-SECURITY-MIB", "securityMgrSubnetMask"))
if mibBuilder.loadTexts: securityMgrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: securityMgrEntry.setDescription('The device access security configuration items.')
securityMgrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 8, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityMgrIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: securityMgrIpAddress.setDescription('This is used to specify the IP address that identifies the SNMP manager(s) that are authorized to send SNMP messages.')
securityMgrSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityMgrSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: securityMgrSubnetMask.setDescription('This object is used to specify the subnet mask ')
securityMgrSnmpAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2), ("noAccess", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityMgrSnmpAccess.setStatus('mandatory')
if mibBuilder.loadTexts: securityMgrSnmpAccess.setDescription('This is used to specify the snmp access to the device.')
securityMgrTelnetAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityMgrTelnetAccess.setStatus('mandatory')
if mibBuilder.loadTexts: securityMgrTelnetAccess.setDescription('This is used to specify the telnet access to the device.')
securityMgrFtpAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityMgrFtpAccess.setStatus('mandatory')
if mibBuilder.loadTexts: securityMgrFtpAccess.setDescription('This is used to specify the ftp access to the device.')
securityMgrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 8, 8, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityMgrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: securityMgrRowStatus.setDescription('The status of this table entry.')
mibBuilder.exportSymbols("PDN-SECURITY-MIB", securityMgrTable=securityMgrTable, newSecurityMgrSubnetMask=newSecurityMgrSubnetMask, newSecurityMgrIpAddress=newSecurityMgrIpAddress, securityMgrFtpAccess=securityMgrFtpAccess, newSecurityMgrAccess=newSecurityMgrAccess, securityMgrIpAddress=securityMgrIpAddress, newSecurityMgrEntry=newSecurityMgrEntry, devSecurityMgrMaxNumber=devSecurityMgrMaxNumber, devSecurityFtpSourceValidation=devSecurityFtpSourceValidation, newSecurityMgrTable=newSecurityMgrTable, devSecurityMgrCurrentNumber=devSecurityMgrCurrentNumber, securityMgrSubnetMask=securityMgrSubnetMask, devSecurityMgrIpAddress=devSecurityMgrIpAddress, devSecurityMgrAccess=devSecurityMgrAccess, securityMgrEntry=securityMgrEntry, devSecurityMgrEntry=devSecurityMgrEntry, devSecurityMgrValidation=devSecurityMgrValidation, securityMgrTelnetAccess=securityMgrTelnetAccess, securityMgrSnmpAccess=securityMgrSnmpAccess, securityMgrRowStatus=securityMgrRowStatus, devSecurityMgrTable=devSecurityMgrTable, devSecurityTelnetSourceValidation=devSecurityTelnetSourceValidation)
