#
# PySNMP MIB module HPN-ICF-PBR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-PBR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:40:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Gauge32, MibIdentifier, ModuleIdentity, Bits, Counter64, ObjectIdentity, IpAddress, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "MibIdentifier", "ModuleIdentity", "Bits", "Counter64", "ObjectIdentity", "IpAddress", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Integer32")
DisplayString, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "TextualConvention")
hpnicfPBR = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113))
hpnicfPBR.setRevisions(('2010-12-10 15:58',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfPBR.setRevisionsDescriptions(('The initial version of this MIB file.',))
if mibBuilder.loadTexts: hpnicfPBR.setLastUpdated('201012101558Z')
if mibBuilder.loadTexts: hpnicfPBR.setOrganization('')
if mibBuilder.loadTexts: hpnicfPBR.setContactInfo('')
if mibBuilder.loadTexts: hpnicfPBR.setDescription('This MIB contains objects to manage the configuration and information of PBR. It routes IP packets by user defined policy other than normal destination address based routing. ')
hpnicfPBRObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 1))
hpnicfPBRGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 1, 1))
hpnicfPBRNexthopTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPBRNexthopTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRNexthopTrapEnabled.setDescription("The value is a global setting only for IPv4 PBR. If the value is set to 'false', the feature is disabled.")
hpnicfPBRLocalPolicy = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPBRLocalPolicy.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRLocalPolicy.setDescription('The value is a global setting. An existing policy name setting enables local PBR for IPv4 packets initiated by the device. Only one policy can be applied locally. An empty name setting disables the feature. ')
hpnicfPBRIPv6NexthopTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPBRIPv6NexthopTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRIPv6NexthopTrapEnabled.setDescription("The value is a global setting only for IPv6 PBR. If the value is set to 'false', the feature is disabled.")
hpnicfPBRMibTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 1, 2))
hpnicfPBRTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 1, 2, 1))
hpnicfPBRNexthopAddrType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 1, 2, 1, 1), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfPBRNexthopAddrType.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRNexthopAddrType.setDescription('Indicating address type of hpnicfPBRNexthopAddr, which can be IPv4 or IPv6.')
hpnicfPBRNexthopAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 1, 2, 1, 2), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfPBRNexthopAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRNexthopAddr.setDescription('The involved next hop IP address of trap information.')
hpnicfPBRTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 1, 2, 2))
hpnicfPBRTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 1, 2, 2, 0))
hpnicfPBRNexthopFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 1, 2, 2, 0, 1)).setObjects(("HPN-ICF-PBR-MIB", "hpnicfPBRNexthopAddrType"), ("HPN-ICF-PBR-MIB", "hpnicfPBRNexthopAddr"))
if mibBuilder.loadTexts: hpnicfPBRNexthopFailedTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRNexthopFailedTrap.setDescription('When the next hop of PBR apply clause became unreachable according to routing information, trap is generated and is sent to the remote monitoring device.')
hpnicfPBRTables = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2))
hpnicfPBRMibPolicyNodeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 1), )
if mibBuilder.loadTexts: hpnicfPBRMibPolicyNodeTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibPolicyNodeTable.setDescription('A table for PBR nodes. ')
hpnicfPBRMibPolicyNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-PBR-MIB", "hpnicfPBRMibPolicyNodeAddrType"), (0, "HPN-ICF-PBR-MIB", "hpnicfPBRMibPolicyName"), (0, "HPN-ICF-PBR-MIB", "hpnicfPBRMibPolicyNodeId"))
if mibBuilder.loadTexts: hpnicfPBRMibPolicyNodeEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibPolicyNodeEntry.setDescription('An entry for PBR nodes. ')
hpnicfPBRMibPolicyNodeAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpnicfPBRMibPolicyNodeAddrType.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibPolicyNodeAddrType.setDescription('Address type of policy node, which can be IPv4 or IPv6.')
hpnicfPBRMibPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19)))
if mibBuilder.loadTexts: hpnicfPBRMibPolicyName.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibPolicyName.setDescription('Policy name of PBR node.')
hpnicfPBRMibPolicyNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hpnicfPBRMibPolicyNodeId.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibPolicyNodeId.setDescription('Sequence identifier of PBR node.')
hpnicfPBRMibPolicyNodeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPBRMibPolicyNodeMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibPolicyNodeMode.setDescription('Mode of PBR node. If the mode of a node is marked as true, the packets that meet the matching rules are processed by action rules in the node. If the mode of a node is marked as false, the packets that meet the matching rules are sent back to the normal forwarding path.')
hpnicfPBRMibPolicyNodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPBRMibPolicyNodeRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibPolicyNodeRowStatus.setDescription('Operation status of this table entry. Three actions are used: active, createAndGo, and destroy. ')
hpnicfPBRMibIfPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 2), )
if mibBuilder.loadTexts: hpnicfPBRMibIfPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibIfPolicyTable.setDescription('A table for interfaces being applied with PBR nodes with the same policy name. ')
hpnicfPBRMibIfPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-PBR-MIB", "hpnicfPBRMibPolicyAddressType"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfPBRMibIfPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibIfPolicyEntry.setDescription('An entry for reference relation between interface and policy nodes.')
hpnicfPBRMibPolicyAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpnicfPBRMibPolicyAddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibPolicyAddressType.setDescription('Address type of policy node, which can be IPv4 or IPv6.')
hpnicfPBRMibAppliedPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPBRMibAppliedPolicyName.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibAppliedPolicyName.setDescription('Policy name of PBR nodes.')
hpnicfPBRMibIfPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPBRMibIfPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibIfPolicyRowStatus.setDescription('Operation status of this table entry. Three actions are used: active, createAndGo, and destroy. ')
hpnicfPBRMibMatchAclTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 3), )
if mibBuilder.loadTexts: hpnicfPBRMibMatchAclTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibMatchAclTable.setDescription('A table for ACLs being used by a policy node. Only one ACL can be used within a node at most. ')
hpnicfPBRMibMatchAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-PBR-MIB", "hpnicfPBRMibPolicyNodeAddrType"), (0, "HPN-ICF-PBR-MIB", "hpnicfPBRMibPolicyName"), (0, "HPN-ICF-PBR-MIB", "hpnicfPBRMibPolicyNodeId"))
if mibBuilder.loadTexts: hpnicfPBRMibMatchAclEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibMatchAclEntry.setDescription('An entry for policy node that uses an ACL group as its if-match rule.')
hpnicfPBRMibAclGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPBRMibAclGroupId.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibAclGroupId.setDescription('Index of number-acl group. Setting -1 indicates closing this rule. ')
hpnicfPBRMibApplyPrecedenceTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 4), )
if mibBuilder.loadTexts: hpnicfPBRMibApplyPrecedenceTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyPrecedenceTable.setDescription('A table for precedence values being used by a policy node. Only one precedence value can be used within a node at most. ')
hpnicfPBRMibApplyPrecedenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 4, 1), ).setIndexNames((0, "HPN-ICF-PBR-MIB", "hpnicfPBRMibPolicyNodeAddrType"), (0, "HPN-ICF-PBR-MIB", "hpnicfPBRMibPolicyName"), (0, "HPN-ICF-PBR-MIB", "hpnicfPBRMibPolicyNodeId"))
if mibBuilder.loadTexts: hpnicfPBRMibApplyPrecedenceEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyPrecedenceEntry.setDescription('An entry for policy node with an action to set IP precedence for matching packets. ')
hpnicfPBRMibApplyPrecedenceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPBRMibApplyPrecedenceValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyPrecedenceValue.setDescription('Value of precedence being applied on IP header. <0-7> Value of precedence routine Specify routine precedence(0) priority Specify priority precedence(1) immediate Specify immediate precedence(2) flash Specify flash precedence(3) flash-override Specify flash-override precedence(4) critical Specify critical precedence(5) internet Specify internetwork control precedence(6) network Specify network control precedence(7) Setting -1 indicates closing this action. ')
hpnicfPBRMibApplyNexthopTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 5), )
if mibBuilder.loadTexts: hpnicfPBRMibApplyNexthopTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyNexthopTable.setDescription('A table for next hop actions being used by a policy node. ')
hpnicfPBRMibApplyNexthopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 5, 1), ).setIndexNames((0, "HPN-ICF-PBR-MIB", "hpnicfPBRMibPolicyNodeAddrType"), (0, "HPN-ICF-PBR-MIB", "hpnicfPBRMibPolicyName"), (0, "HPN-ICF-PBR-MIB", "hpnicfPBRMibPolicyNodeId"), (0, "HPN-ICF-PBR-MIB", "hpnicfPBRMibApplyNexthopIndex"))
if mibBuilder.loadTexts: hpnicfPBRMibApplyNexthopEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyNexthopEntry.setDescription('An entry for policy node with an action to set next hop for matching packets. ')
hpnicfPBRMibApplyNexthopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hpnicfPBRMibApplyNexthopIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyNexthopIndex.setDescription('Index of next hop for the apply next hop action.')
hpnicfPBRMibApplyNexthopVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPBRMibApplyNexthopVpnName.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyNexthopVpnName.setDescription('Name of VPN instance where apply next hop action is used.')
hpnicfPBRMibApplyNexthopAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 5, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPBRMibApplyNexthopAddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyNexthopAddressType.setDescription('Address type of hpnicfPBRMibApplyNexthopAddress, which can be IPv4 or IPv6.')
hpnicfPBRMibApplyNexthopAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 5, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPBRMibApplyNexthopAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyNexthopAddress.setDescription('Next hop IP address of apply next hop action.')
hpnicfPBRMibApplyNexthopTrackId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 5, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPBRMibApplyNexthopTrackId.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyNexthopTrackId.setDescription('Identifier of track object related with next hop. Setting 0 indicates closing this function. ')
hpnicfPBRMibApplyNexthopDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 5, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPBRMibApplyNexthopDirect.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyNexthopDirect.setDescription('Direct route attribute of next hop according to route information.')
hpnicfPBRMibApplyNexthopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 5, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPBRMibApplyNexthopRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyNexthopRowStatus.setDescription('Operation status of this table entry. Three actions are used: active, createAndGo, and destroy. ')
hpnicfPBRMibApplyDefaultNexthopTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 6), )
if mibBuilder.loadTexts: hpnicfPBRMibApplyDefaultNexthopTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyDefaultNexthopTable.setDescription('A table for default next hop actions being used by a policy node.')
hpnicfPBRMibApplyDefaultNexthopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 6, 1), ).setIndexNames((0, "HPN-ICF-PBR-MIB", "hpnicfPBRMibPolicyNodeAddrType"), (0, "HPN-ICF-PBR-MIB", "hpnicfPBRMibPolicyName"), (0, "HPN-ICF-PBR-MIB", "hpnicfPBRMibPolicyNodeId"), (0, "HPN-ICF-PBR-MIB", "hpnicfPBRMibApplyDefaultNexthopIndex"))
if mibBuilder.loadTexts: hpnicfPBRMibApplyDefaultNexthopEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyDefaultNexthopEntry.setDescription('An entry for policy node with an action to set default next hop for matching packets. ')
hpnicfPBRMibApplyDefaultNexthopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hpnicfPBRMibApplyDefaultNexthopIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyDefaultNexthopIndex.setDescription('Index of default next hop for the apply default next hop action.')
hpnicfPBRMibApplyDefaultNexthopVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPBRMibApplyDefaultNexthopVpnName.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyDefaultNexthopVpnName.setDescription('Name of VPN instance where apply default next hop action is used.')
hpnicfPBRMibApplyDefaultNexthopAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 6, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPBRMibApplyDefaultNexthopAddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyDefaultNexthopAddressType.setDescription('Address type of hpnicfPBRMibApplyDefaultNexthopAddress, which can be IPv4 or IPv6.')
hpnicfPBRMibApplyDefaultNexthopAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 6, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPBRMibApplyDefaultNexthopAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyDefaultNexthopAddress.setDescription('Next hop IP address of apply default next hop action.')
hpnicfPBRMibApplyDefaultNexthopTrackId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 6, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPBRMibApplyDefaultNexthopTrackId.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyDefaultNexthopTrackId.setDescription('Identifier of track object related with default next hop. Setting 0 indicates closing this function.')
hpnicfPBRMibApplyDefaultNexthopDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 6, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPBRMibApplyDefaultNexthopDirect.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyDefaultNexthopDirect.setDescription('Direct route attribute of apply default next hop address according to route information.')
hpnicfPBRMibApplyDefaultNexthopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 113, 2, 6, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPBRMibApplyDefaultNexthopRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfPBRMibApplyDefaultNexthopRowStatus.setDescription('Operation status of this table entry. Three actions are used: active, createAndGo, and destroy. ')
mibBuilder.exportSymbols("HPN-ICF-PBR-MIB", hpnicfPBRNexthopFailedTrap=hpnicfPBRNexthopFailedTrap, hpnicfPBRMibPolicyNodeEntry=hpnicfPBRMibPolicyNodeEntry, hpnicfPBRLocalPolicy=hpnicfPBRLocalPolicy, hpnicfPBRMibPolicyNodeMode=hpnicfPBRMibPolicyNodeMode, hpnicfPBRMibApplyDefaultNexthopTable=hpnicfPBRMibApplyDefaultNexthopTable, hpnicfPBRIPv6NexthopTrapEnabled=hpnicfPBRIPv6NexthopTrapEnabled, hpnicfPBRMibIfPolicyEntry=hpnicfPBRMibIfPolicyEntry, hpnicfPBRMibIfPolicyTable=hpnicfPBRMibIfPolicyTable, hpnicfPBRMibApplyNexthopVpnName=hpnicfPBRMibApplyNexthopVpnName, hpnicfPBRMibIfPolicyRowStatus=hpnicfPBRMibIfPolicyRowStatus, hpnicfPBRMibApplyDefaultNexthopAddress=hpnicfPBRMibApplyDefaultNexthopAddress, hpnicfPBRNexthopAddrType=hpnicfPBRNexthopAddrType, hpnicfPBRMibPolicyName=hpnicfPBRMibPolicyName, hpnicfPBRMibApplyDefaultNexthopVpnName=hpnicfPBRMibApplyDefaultNexthopVpnName, hpnicfPBRTables=hpnicfPBRTables, hpnicfPBRMibApplyPrecedenceEntry=hpnicfPBRMibApplyPrecedenceEntry, hpnicfPBRMibTrap=hpnicfPBRMibTrap, hpnicfPBRMibPolicyAddressType=hpnicfPBRMibPolicyAddressType, hpnicfPBRMibApplyNexthopAddress=hpnicfPBRMibApplyNexthopAddress, hpnicfPBRMibApplyDefaultNexthopEntry=hpnicfPBRMibApplyDefaultNexthopEntry, hpnicfPBRTrapObjects=hpnicfPBRTrapObjects, hpnicfPBRTraps=hpnicfPBRTraps, hpnicfPBRMibApplyDefaultNexthopTrackId=hpnicfPBRMibApplyDefaultNexthopTrackId, hpnicfPBRObjects=hpnicfPBRObjects, hpnicfPBRMibApplyNexthopTrackId=hpnicfPBRMibApplyNexthopTrackId, hpnicfPBRMibApplyDefaultNexthopRowStatus=hpnicfPBRMibApplyDefaultNexthopRowStatus, hpnicfPBRMibApplyNexthopAddressType=hpnicfPBRMibApplyNexthopAddressType, hpnicfPBRMibMatchAclEntry=hpnicfPBRMibMatchAclEntry, hpnicfPBRMibPolicyNodeRowStatus=hpnicfPBRMibPolicyNodeRowStatus, hpnicfPBRMibApplyNexthopDirect=hpnicfPBRMibApplyNexthopDirect, hpnicfPBRMibApplyNexthopEntry=hpnicfPBRMibApplyNexthopEntry, hpnicfPBR=hpnicfPBR, hpnicfPBRMibApplyDefaultNexthopAddressType=hpnicfPBRMibApplyDefaultNexthopAddressType, hpnicfPBRGlobal=hpnicfPBRGlobal, hpnicfPBRMibApplyDefaultNexthopDirect=hpnicfPBRMibApplyDefaultNexthopDirect, PYSNMP_MODULE_ID=hpnicfPBR, hpnicfPBRMibApplyNexthopRowStatus=hpnicfPBRMibApplyNexthopRowStatus, hpnicfPBRMibApplyDefaultNexthopIndex=hpnicfPBRMibApplyDefaultNexthopIndex, hpnicfPBRNexthopAddr=hpnicfPBRNexthopAddr, hpnicfPBRMibPolicyNodeTable=hpnicfPBRMibPolicyNodeTable, hpnicfPBRMibAppliedPolicyName=hpnicfPBRMibAppliedPolicyName, hpnicfPBRMibMatchAclTable=hpnicfPBRMibMatchAclTable, hpnicfPBRMibApplyNexthopIndex=hpnicfPBRMibApplyNexthopIndex, hpnicfPBRMibApplyPrecedenceTable=hpnicfPBRMibApplyPrecedenceTable, hpnicfPBRMibPolicyNodeId=hpnicfPBRMibPolicyNodeId, hpnicfPBRMibAclGroupId=hpnicfPBRMibAclGroupId, hpnicfPBRNexthopTrapEnabled=hpnicfPBRNexthopTrapEnabled, hpnicfPBRMibPolicyNodeAddrType=hpnicfPBRMibPolicyNodeAddrType, hpnicfPBRTrapsPrefix=hpnicfPBRTrapsPrefix, hpnicfPBRMibApplyPrecedenceValue=hpnicfPBRMibApplyPrecedenceValue, hpnicfPBRMibApplyNexthopTable=hpnicfPBRMibApplyNexthopTable)
