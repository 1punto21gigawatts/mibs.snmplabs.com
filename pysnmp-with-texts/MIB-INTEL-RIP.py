#
# PySNMP MIB module MIB-INTEL-RIP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MIB-INTEL-RIP
# Produced by pysmi-0.3.4 at Wed May  1 14:12:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Bits, iso, Counter32, ModuleIdentity, Gauge32, ObjectIdentity, Integer32, NotificationType, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Bits", "iso", "Counter32", "ModuleIdentity", "Gauge32", "ObjectIdentity", "Integer32", "NotificationType", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rip = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 39))
ripIpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 39, 1), )
if mibBuilder.loadTexts: ripIpRouteTable.setStatus('optional')
if mibBuilder.loadTexts: ripIpRouteTable.setDescription("This entity's RIP Routing table.")
ripIpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 39, 1, 1), ).setIndexNames((0, "MIB-INTEL-RIP", "ripIpRouteChassis"), (0, "MIB-INTEL-RIP", "ripIpRouteModule"), (0, "MIB-INTEL-RIP", "ripIpRouteInst"), (0, "MIB-INTEL-RIP", "ripIpRouteDest"), (0, "MIB-INTEL-RIP", "ripIpRouteMask"), (0, "MIB-INTEL-RIP", "ripIpIfIndex"), (0, "MIB-INTEL-RIP", "ripIpRouteNextHop"))
if mibBuilder.loadTexts: ripIpRouteEntry.setStatus('optional')
if mibBuilder.loadTexts: ripIpRouteEntry.setDescription('A route to a particular destination.')
ripIpRouteChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 39, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIpRouteChassis.setStatus('optional')
if mibBuilder.loadTexts: ripIpRouteChassis.setDescription('Chassis number in stack that contains the module.')
ripIpRouteModule = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 39, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIpRouteModule.setStatus('optional')
if mibBuilder.loadTexts: ripIpRouteModule.setDescription('Module number in the chassis.')
ripIpRouteInst = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 39, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIpRouteInst.setStatus('optional')
if mibBuilder.loadTexts: ripIpRouteInst.setDescription('Routing table instance number.')
ripIpRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 39, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIpRouteDest.setStatus('optional')
if mibBuilder.loadTexts: ripIpRouteDest.setDescription('The destination IP address of this route.')
ripIpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 39, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIpRouteMask.setStatus('optional')
if mibBuilder.loadTexts: ripIpRouteMask.setDescription('Indicate the mask to be logical-ANDed with the destination address before being compared to the value in the ripIpRouteDest field.')
ripIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 39, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIpIfIndex.setStatus('optional')
if mibBuilder.loadTexts: ripIpIfIndex.setDescription('The interface that the frame is forwarded on.')
ripIpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 39, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIpRouteNextHop.setStatus('optional')
if mibBuilder.loadTexts: ripIpRouteNextHop.setDescription('The IP address of the next hop of this route.')
ripIpRoutePref = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 39, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIpRoutePref.setStatus('optional')
if mibBuilder.loadTexts: ripIpRoutePref.setDescription('The preference value for this route.')
ripIpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 39, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIpRouteMetric.setStatus('optional')
if mibBuilder.loadTexts: ripIpRouteMetric.setDescription('The RIP routing metric for this route.')
ripIpRouteState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 39, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIpRouteState.setStatus('optional')
if mibBuilder.loadTexts: ripIpRouteState.setDescription('The current state of the route.')
ripIpRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 39, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIpRouteAge.setStatus('optional')
if mibBuilder.loadTexts: ripIpRouteAge.setDescription('The number of seconds since this route was last updated or otherwise detemined to be correct.')
ripIpRouteProtoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 39, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rip1", 1), ("rip2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIpRouteProtoVersion.setStatus('optional')
if mibBuilder.loadTexts: ripIpRouteProtoVersion.setDescription('The RIP protocol version.')
ripIpRouteProtoTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 39, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIpRouteProtoTrigger.setStatus('optional')
if mibBuilder.loadTexts: ripIpRouteProtoTrigger.setDescription('The RIP protocol trigger state.')
mibBuilder.exportSymbols("MIB-INTEL-RIP", ripIpRouteAge=ripIpRouteAge, ripIpRouteEntry=ripIpRouteEntry, ripIpRouteDest=ripIpRouteDest, rip=rip, ripIpRouteChassis=ripIpRouteChassis, ripIpRouteInst=ripIpRouteInst, ripIpIfIndex=ripIpIfIndex, ripIpRoutePref=ripIpRoutePref, ripIpRouteMetric=ripIpRouteMetric, ripIpRouteProtoVersion=ripIpRouteProtoVersion, ripIpRouteModule=ripIpRouteModule, ripIpRouteProtoTrigger=ripIpRouteProtoTrigger, ripIpRouteNextHop=ripIpRouteNextHop, ripIpRouteMask=ripIpRouteMask, ripIpRouteTable=ripIpRouteTable, ripIpRouteState=ripIpRouteState)
