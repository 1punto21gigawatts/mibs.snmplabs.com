#
# PySNMP MIB module RBN-SSE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-SSE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:53:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
IANAItuEventType, IANAItuProbableCause = mibBuilder.importSymbols("IANA-ITU-ALARM-TC-MIB", "IANAItuEventType", "IANAItuProbableCause")
ItuPerceivedSeverity, = mibBuilder.importSymbols("ITU-ALARM-TC-MIB", "ItuPerceivedSeverity")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
RbnPercentage, RbnSlot = mibBuilder.importSymbols("RBN-TC", "RbnPercentage", "RbnSlot")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, Integer32, Unsigned32, IpAddress, Gauge32, ModuleIdentity, Counter64, MibIdentifier, NotificationType, Bits, ObjectIdentity, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "Unsigned32", "IpAddress", "Gauge32", "ModuleIdentity", "Counter64", "MibIdentifier", "NotificationType", "Bits", "ObjectIdentity", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DateAndTime, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString", "TruthValue")
rbnSseMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 48))
rbnSseMIB.setRevisions(('2009-09-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnSseMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: rbnSseMIB.setLastUpdated('200909010000Z')
if mibBuilder.loadTexts: rbnSseMIB.setOrganization('RedBack Networks, Inc.')
if mibBuilder.loadTexts: rbnSseMIB.setContactInfo(' RedBack Networks, Inc. Postal: 300 Holger Way San Jose, CA 95134-1362 USA Phone: +1 408 750-5000 Fax: +1 408 750-5599 E-mail: mib-info@redback.com')
if mibBuilder.loadTexts: rbnSseMIB.setDescription('This management information module defines the objects necessary to support the management of SmartEdge Server Engine(SSE) file server groups, partitions and corresponding alarms')
rbnSseMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 48, 0))
rbnSseMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1))
rbnSseMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 48, 2))
rbnFSGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 1), )
if mibBuilder.loadTexts: rbnFSGroupTable.setStatus('current')
if mibBuilder.loadTexts: rbnFSGroupTable.setDescription('File-Server Group is a logical abstraction of a physical file server. This table lists the File Server Groups that have been configured on the system.')
rbnFSGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 1, 1), ).setIndexNames((0, "RBN-SSE-MIB", "rbnFSGroupName"))
if mibBuilder.loadTexts: rbnFSGroupEntry.setStatus('current')
if mibBuilder.loadTexts: rbnFSGroupEntry.setDescription('A conceptual row in the rbnFSGroupTable.')
rbnFSGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: rbnFSGroupName.setStatus('current')
if mibBuilder.loadTexts: rbnFSGroupName.setDescription('A textual name for the File Server Group.')
rbnFSGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("up", 1), ("down", 2), ("partial", 3), ("stale", 4), ("noCard", 5), ("unassigned", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFSGroupState.setStatus('current')
if mibBuilder.loadTexts: rbnFSGroupState.setDescription('Service state of the File Server Group.')
rbnFSGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("diskRedundancy", 1), ("networkRedundancy", 2), ("nonRedundant", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFSGroupMode.setStatus('current')
if mibBuilder.loadTexts: rbnFSGroupMode.setDescription('Operational mode. diskRedundancy Each hard disk on a single file-server card will mirror each other, and when one fails, the other will take over automatically. networkRedundancy One file-server is mirroring the other in the same chassis. One of the file-servers will be in active state while the other is standby or backup. nonRedundant One or two hard disks serving as generic disk.')
rbnFSGroupRaidMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("raid0", 1), ("raid1", 2), ("independent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFSGroupRaidMode.setStatus('current')
if mibBuilder.loadTexts: rbnFSGroupRaidMode.setDescription('Operational mode of the disks. RAID0 : must use 2 disks. Non-RAID0: RAID1: imply using 2 disks, although 1 could be un-plugged. Independent (standalone): either 1 or 2 disks.')
rbnFSGroupRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 1, 1, 5), TruthValue().clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFSGroupRevert.setStatus('current')
if mibBuilder.loadTexts: rbnFSGroupRevert.setDescription('The reverting mode of the File Server Group. Revert back to original primary/secondary relationship if in reverted mode (that is this object has the value true(1)).')
rbnFSPrimarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 1, 1, 6), RbnSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFSPrimarySlot.setStatus('current')
if mibBuilder.loadTexts: rbnFSPrimarySlot.setDescription('The chassis slot number in which the primary SSE card is present.')
rbnFSSecondarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 1, 1, 7), RbnSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFSSecondarySlot.setStatus('current')
if mibBuilder.loadTexts: rbnFSSecondarySlot.setDescription('The chassis slot number in which the secondary SSE card is present.')
rbnFSActiveSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 1, 1, 8), RbnSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFSActiveSlot.setStatus('current')
if mibBuilder.loadTexts: rbnFSActiveSlot.setDescription('The slot number in which the active SSE card is present.')
rbnFSPartitionTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 2), )
if mibBuilder.loadTexts: rbnFSPartitionTable.setStatus('current')
if mibBuilder.loadTexts: rbnFSPartitionTable.setDescription('This table lists the Partitions that have been configured on the system.')
rbnFSPartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 2, 1), ).setIndexNames((0, "RBN-SSE-MIB", "rbnFSGroupName"), (0, "RBN-SSE-MIB", "rbnFSPartitionName"))
if mibBuilder.loadTexts: rbnFSPartitionEntry.setStatus('current')
if mibBuilder.loadTexts: rbnFSPartitionEntry.setDescription('A conceptual row in the PartitionTable.')
rbnFSPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: rbnFSPartitionName.setStatus('current')
if mibBuilder.loadTexts: rbnFSPartitionName.setDescription('A textual name for the Partition.')
rbnFSPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("stale", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFSPartitionState.setStatus('current')
if mibBuilder.loadTexts: rbnFSPartitionState.setDescription('Operational status of the partition.')
rbnFSPartitionSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('GBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFSPartitionSize.setStatus('current')
if mibBuilder.loadTexts: rbnFSPartitionSize.setDescription('Size of the partition in GBytes.')
rbnFSPartitionDisk = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFSPartitionDisk.setStatus('current')
if mibBuilder.loadTexts: rbnFSPartitionDisk.setDescription('DiskId of the disk(disk num) where the partition is located. For SSE, 0 for DISK_1, 1 for DISK_2 and 2 for DISK_ALL will be used.')
rbnFSPartitionMirrored = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFSPartitionMirrored.setStatus('current')
if mibBuilder.loadTexts: rbnFSPartitionMirrored.setDescription('Mirror data to standby disk, if network redundancy is configured.')
rbnFSPartitionRaiseTriggerPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 2, 1, 6), RbnPercentage().subtype(subtypeSpec=ValueRangeConstraint(50, 100)).clone(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFSPartitionRaiseTriggerPercentage.setStatus('current')
if mibBuilder.loadTexts: rbnFSPartitionRaiseTriggerPercentage.setDescription('Partition capacity used in percentage to trigger alarm. Raise percentage of 100 indicates alarm is triggered when the partition is completeley full.')
rbnFSPartitionClearTriggerPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 2, 1, 7), RbnPercentage().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(70)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnFSPartitionClearTriggerPercentage.setStatus('current')
if mibBuilder.loadTexts: rbnFSPartitionClearTriggerPercentage.setDescription('Specifies the capacity percentage for when the alarm is cleared. Clear percentage of 10 indicates alarm is triggered when parition is at 10% below raise percentage.')
rbnSseAlarmDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 3), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnSseAlarmDateAndTime.setStatus('current')
if mibBuilder.loadTexts: rbnSseAlarmDateAndTime.setDescription('The local date and time when the alarm was raised')
rbnSseAlarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 4), ItuPerceivedSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnSseAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: rbnSseAlarmSeverity.setDescription('The perceived severity of the alarm.')
rbnSseAlarmProbableCause = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 5), IANAItuProbableCause()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnSseAlarmProbableCause.setStatus('current')
if mibBuilder.loadTexts: rbnSseAlarmProbableCause.setDescription('The probable cause for this alarm.')
rbnSseEventType = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 6), IANAItuEventType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnSseEventType.setStatus('current')
if mibBuilder.loadTexts: rbnSseEventType.setDescription('The type of the alarm.')
rbnSseAlarmDescription = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 48, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnSseAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: rbnSseAlarmDescription.setDescription('A text string which conveys additional information about the alarm.')
rbnSseFsgSwitchManual = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 48, 0, 1)).setObjects(("RBN-SSE-MIB", "rbnSseAlarmDateAndTime"), ("RBN-SSE-MIB", "rbnSseAlarmSeverity"), ("RBN-SSE-MIB", "rbnSseAlarmProbableCause"), ("RBN-SSE-MIB", "rbnSseEventType"), ("RBN-SSE-MIB", "rbnSseAlarmDescription"), ("RBN-SSE-MIB", "rbnFSGroupState"))
if mibBuilder.loadTexts: rbnSseFsgSwitchManual.setStatus('current')
if mibBuilder.loadTexts: rbnSseFsgSwitchManual.setDescription('A rbnSseFsgSwitchManual notification signifies that the FS group manual switch in progress.')
rbnSseFsgSwitchAuto = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 48, 0, 2)).setObjects(("RBN-SSE-MIB", "rbnSseAlarmDateAndTime"), ("RBN-SSE-MIB", "rbnSseAlarmSeverity"), ("RBN-SSE-MIB", "rbnSseAlarmProbableCause"), ("RBN-SSE-MIB", "rbnSseEventType"), ("RBN-SSE-MIB", "rbnSseAlarmDescription"), ("RBN-SSE-MIB", "rbnFSGroupState"))
if mibBuilder.loadTexts: rbnSseFsgSwitchAuto.setStatus('current')
if mibBuilder.loadTexts: rbnSseFsgSwitchAuto.setDescription('A rbnSseFsgSwitchAuto notification signifies that the FS group auto switch in progress.')
rbnSseFsgSwitchCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 48, 0, 3)).setObjects(("RBN-SSE-MIB", "rbnSseAlarmDateAndTime"), ("RBN-SSE-MIB", "rbnSseAlarmSeverity"), ("RBN-SSE-MIB", "rbnSseAlarmProbableCause"), ("RBN-SSE-MIB", "rbnSseEventType"), ("RBN-SSE-MIB", "rbnSseAlarmDescription"), ("RBN-SSE-MIB", "rbnFSGroupState"))
if mibBuilder.loadTexts: rbnSseFsgSwitchCompleted.setStatus('current')
if mibBuilder.loadTexts: rbnSseFsgSwitchCompleted.setDescription('A rbnSseFsgSwitchCompleted notification signifies that the FS group switch completed.')
rbnSseFsgSwitchFail = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 48, 0, 4)).setObjects(("RBN-SSE-MIB", "rbnSseAlarmDateAndTime"), ("RBN-SSE-MIB", "rbnSseAlarmSeverity"), ("RBN-SSE-MIB", "rbnSseAlarmProbableCause"), ("RBN-SSE-MIB", "rbnSseEventType"), ("RBN-SSE-MIB", "rbnSseAlarmDescription"), ("RBN-SSE-MIB", "rbnFSGroupState"))
if mibBuilder.loadTexts: rbnSseFsgSwitchFail.setStatus('current')
if mibBuilder.loadTexts: rbnSseFsgSwitchFail.setDescription('A rbnSseFsgSwitchFail notification signifies that the FS group switch failed.')
rbnSseFsgSwitchWtr = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 48, 0, 5)).setObjects(("RBN-SSE-MIB", "rbnSseAlarmDateAndTime"), ("RBN-SSE-MIB", "rbnSseAlarmSeverity"), ("RBN-SSE-MIB", "rbnSseAlarmProbableCause"), ("RBN-SSE-MIB", "rbnSseEventType"), ("RBN-SSE-MIB", "rbnSseAlarmDescription"), ("RBN-SSE-MIB", "rbnFSGroupState"))
if mibBuilder.loadTexts: rbnSseFsgSwitchWtr.setStatus('current')
if mibBuilder.loadTexts: rbnSseFsgSwitchWtr.setDescription('A rbnSseFsgSwitchWtr notification signifies that the FS group auto switch is waiting to restored.')
rbnSseFsgNotOperational = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 48, 0, 6)).setObjects(("RBN-SSE-MIB", "rbnSseAlarmDateAndTime"), ("RBN-SSE-MIB", "rbnSseAlarmSeverity"), ("RBN-SSE-MIB", "rbnSseAlarmProbableCause"), ("RBN-SSE-MIB", "rbnSseEventType"), ("RBN-SSE-MIB", "rbnSseAlarmDescription"), ("RBN-SSE-MIB", "rbnFSGroupState"))
if mibBuilder.loadTexts: rbnSseFsgNotOperational.setStatus('current')
if mibBuilder.loadTexts: rbnSseFsgNotOperational.setDescription('A rbnSseFsgNotOperational notification signifies that the FS group is not operational.')
rbnSseFsgBlockDeviceFail = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 48, 0, 7)).setObjects(("RBN-SSE-MIB", "rbnSseAlarmDateAndTime"), ("RBN-SSE-MIB", "rbnSseAlarmSeverity"), ("RBN-SSE-MIB", "rbnSseAlarmProbableCause"), ("RBN-SSE-MIB", "rbnSseEventType"), ("RBN-SSE-MIB", "rbnSseAlarmDescription"), ("RBN-SSE-MIB", "rbnFSGroupState"))
if mibBuilder.loadTexts: rbnSseFsgBlockDeviceFail.setStatus('current')
if mibBuilder.loadTexts: rbnSseFsgBlockDeviceFail.setDescription('A rbnSseFsgBlockDeviceFail notification signifies that the FS group block device (DRBD) failed.')
rbnSseFsgPartitionNotOperational = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 48, 0, 8)).setObjects(("RBN-SSE-MIB", "rbnSseAlarmDateAndTime"), ("RBN-SSE-MIB", "rbnSseAlarmSeverity"), ("RBN-SSE-MIB", "rbnSseAlarmProbableCause"), ("RBN-SSE-MIB", "rbnSseEventType"), ("RBN-SSE-MIB", "rbnSseAlarmDescription"), ("RBN-SSE-MIB", "rbnFSPartitionState"))
if mibBuilder.loadTexts: rbnSseFsgPartitionNotOperational.setStatus('current')
if mibBuilder.loadTexts: rbnSseFsgPartitionNotOperational.setDescription('A rbnSseFsgPartitionNotOperational notification signifies that the FS group partition not operational.')
rbnSseFsgParitionDataSyncing = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 48, 0, 9)).setObjects(("RBN-SSE-MIB", "rbnSseAlarmDateAndTime"), ("RBN-SSE-MIB", "rbnSseAlarmSeverity"), ("RBN-SSE-MIB", "rbnSseAlarmProbableCause"), ("RBN-SSE-MIB", "rbnSseEventType"), ("RBN-SSE-MIB", "rbnSseAlarmDescription"), ("RBN-SSE-MIB", "rbnFSPartitionState"))
if mibBuilder.loadTexts: rbnSseFsgParitionDataSyncing.setStatus('current')
if mibBuilder.loadTexts: rbnSseFsgParitionDataSyncing.setDescription('A rbnSseFsgParitionDataSyncing notification signifies that the FS group partition data sync failed.')
rbnSseFsgParitionDataSyncFail = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 48, 0, 10)).setObjects(("RBN-SSE-MIB", "rbnSseAlarmDateAndTime"), ("RBN-SSE-MIB", "rbnSseAlarmSeverity"), ("RBN-SSE-MIB", "rbnSseAlarmProbableCause"), ("RBN-SSE-MIB", "rbnSseEventType"), ("RBN-SSE-MIB", "rbnSseAlarmDescription"), ("RBN-SSE-MIB", "rbnFSPartitionState"))
if mibBuilder.loadTexts: rbnSseFsgParitionDataSyncFail.setStatus('current')
if mibBuilder.loadTexts: rbnSseFsgParitionDataSyncFail.setDescription('A rbnSseFsgParitionDataSyncFail notification signifies that the FS group partition data sync failed.')
rbnSseFsgPartitionFull = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 48, 0, 11)).setObjects(("RBN-SSE-MIB", "rbnSseAlarmDateAndTime"), ("RBN-SSE-MIB", "rbnSseAlarmSeverity"), ("RBN-SSE-MIB", "rbnSseAlarmProbableCause"), ("RBN-SSE-MIB", "rbnSseEventType"), ("RBN-SSE-MIB", "rbnSseAlarmDescription"), ("RBN-SSE-MIB", "rbnFSPartitionState"))
if mibBuilder.loadTexts: rbnSseFsgPartitionFull.setStatus('current')
if mibBuilder.loadTexts: rbnSseFsgPartitionFull.setDescription('A rbnSseFsgPartitionFull notification signifies that the FS group partition is full')
rbnSseFsgPartitionLow = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 48, 0, 12)).setObjects(("RBN-SSE-MIB", "rbnSseAlarmDateAndTime"), ("RBN-SSE-MIB", "rbnSseAlarmSeverity"), ("RBN-SSE-MIB", "rbnSseAlarmProbableCause"), ("RBN-SSE-MIB", "rbnSseEventType"), ("RBN-SSE-MIB", "rbnSseAlarmDescription"), ("RBN-SSE-MIB", "rbnFSPartitionState"))
if mibBuilder.loadTexts: rbnSseFsgPartitionLow.setStatus('current')
if mibBuilder.loadTexts: rbnSseFsgPartitionLow.setDescription('A rbnSseFsgPartitionLow notification signifies that the FS group partition is low in space.')
rbnSseFsgPartitionNotOperStandby = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 48, 0, 13)).setObjects(("RBN-SSE-MIB", "rbnSseAlarmDateAndTime"), ("RBN-SSE-MIB", "rbnSseAlarmSeverity"), ("RBN-SSE-MIB", "rbnSseAlarmProbableCause"), ("RBN-SSE-MIB", "rbnSseEventType"), ("RBN-SSE-MIB", "rbnSseAlarmDescription"), ("RBN-SSE-MIB", "rbnFSPartitionState"))
if mibBuilder.loadTexts: rbnSseFsgPartitionNotOperStandby.setStatus('current')
if mibBuilder.loadTexts: rbnSseFsgPartitionNotOperStandby.setDescription('A rbnSseFsgPartitionNotOperStandby notification signifies that the FS group partition is not ready at standby')
rbnSseGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 48, 2, 1))
rbnSseCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 48, 2, 2))
rbnSseMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 48, 2, 2, 1)).setObjects(("RBN-SSE-MIB", "rbnSseFileServerGroup"), ("RBN-SSE-MIB", "rbnSsePartitionGroup"), ("RBN-SSE-MIB", "rbnSseEventObjectGroup"), ("RBN-SSE-MIB", "rbnSseEventGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSseMIBCompliance = rbnSseMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: rbnSseMIBCompliance.setDescription('The compliance statement for Redback SmartEdge Server Engine(SSE) MIB.')
rbnSseFileServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 48, 2, 1, 1)).setObjects(("RBN-SSE-MIB", "rbnFSGroupMode"), ("RBN-SSE-MIB", "rbnFSGroupState"), ("RBN-SSE-MIB", "rbnFSGroupRaidMode"), ("RBN-SSE-MIB", "rbnFSGroupRevert"), ("RBN-SSE-MIB", "rbnFSPrimarySlot"), ("RBN-SSE-MIB", "rbnFSSecondarySlot"), ("RBN-SSE-MIB", "rbnFSActiveSlot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSseFileServerGroup = rbnSseFileServerGroup.setStatus('current')
if mibBuilder.loadTexts: rbnSseFileServerGroup.setDescription('A collection of rbnFSGroupTable objects providing information applicable to all file server groups.')
rbnSsePartitionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 48, 2, 1, 2)).setObjects(("RBN-SSE-MIB", "rbnFSPartitionSize"), ("RBN-SSE-MIB", "rbnFSPartitionState"), ("RBN-SSE-MIB", "rbnFSPartitionDisk"), ("RBN-SSE-MIB", "rbnFSPartitionMirrored"), ("RBN-SSE-MIB", "rbnFSPartitionRaiseTriggerPercentage"), ("RBN-SSE-MIB", "rbnFSPartitionClearTriggerPercentage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSsePartitionGroup = rbnSsePartitionGroup.setStatus('current')
if mibBuilder.loadTexts: rbnSsePartitionGroup.setDescription('A collection of rbnFSPartitionTable objects providing information applicable to all file server group partitions.')
rbnSseEventObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 48, 2, 1, 3)).setObjects(("RBN-SSE-MIB", "rbnSseEventType"), ("RBN-SSE-MIB", "rbnSseAlarmDateAndTime"), ("RBN-SSE-MIB", "rbnSseAlarmDescription"), ("RBN-SSE-MIB", "rbnSseAlarmProbableCause"), ("RBN-SSE-MIB", "rbnSseAlarmSeverity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSseEventObjectGroup = rbnSseEventObjectGroup.setStatus('current')
if mibBuilder.loadTexts: rbnSseEventObjectGroup.setDescription('A collection of rbnSse notification objects.')
rbnSseEventGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 48, 2, 1, 4)).setObjects(("RBN-SSE-MIB", "rbnSseFsgSwitchManual"), ("RBN-SSE-MIB", "rbnSseFsgSwitchAuto"), ("RBN-SSE-MIB", "rbnSseFsgSwitchCompleted"), ("RBN-SSE-MIB", "rbnSseFsgSwitchFail"), ("RBN-SSE-MIB", "rbnSseFsgSwitchWtr"), ("RBN-SSE-MIB", "rbnSseFsgNotOperational"), ("RBN-SSE-MIB", "rbnSseFsgBlockDeviceFail"), ("RBN-SSE-MIB", "rbnSseFsgPartitionNotOperational"), ("RBN-SSE-MIB", "rbnSseFsgParitionDataSyncing"), ("RBN-SSE-MIB", "rbnSseFsgParitionDataSyncFail"), ("RBN-SSE-MIB", "rbnSseFsgPartitionFull"), ("RBN-SSE-MIB", "rbnSseFsgPartitionLow"), ("RBN-SSE-MIB", "rbnSseFsgPartitionNotOperStandby"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSseEventGroup = rbnSseEventGroup.setStatus('current')
if mibBuilder.loadTexts: rbnSseEventGroup.setDescription('A collection of rbnSse notifications.')
mibBuilder.exportSymbols("RBN-SSE-MIB", rbnSseFsgSwitchCompleted=rbnSseFsgSwitchCompleted, rbnSseFsgNotOperational=rbnSseFsgNotOperational, rbnFSGroupName=rbnFSGroupName, rbnFSGroupMode=rbnFSGroupMode, rbnSseFsgSwitchManual=rbnSseFsgSwitchManual, rbnFSPartitionClearTriggerPercentage=rbnFSPartitionClearTriggerPercentage, rbnSseAlarmDateAndTime=rbnSseAlarmDateAndTime, rbnSseAlarmSeverity=rbnSseAlarmSeverity, rbnFSPartitionRaiseTriggerPercentage=rbnFSPartitionRaiseTriggerPercentage, rbnSseMIB=rbnSseMIB, rbnSseCompliances=rbnSseCompliances, rbnSseFsgPartitionNotOperational=rbnSseFsgPartitionNotOperational, rbnFSPrimarySlot=rbnFSPrimarySlot, rbnSseFsgPartitionNotOperStandby=rbnSseFsgPartitionNotOperStandby, rbnFSGroupRaidMode=rbnFSGroupRaidMode, rbnSseEventObjectGroup=rbnSseEventObjectGroup, rbnSseMIBCompliance=rbnSseMIBCompliance, rbnFSPartitionTable=rbnFSPartitionTable, rbnSseEventType=rbnSseEventType, rbnSseFsgPartitionLow=rbnSseFsgPartitionLow, PYSNMP_MODULE_ID=rbnSseMIB, rbnFSGroupTable=rbnFSGroupTable, rbnSseAlarmDescription=rbnSseAlarmDescription, rbnSseFsgPartitionFull=rbnSseFsgPartitionFull, rbnSsePartitionGroup=rbnSsePartitionGroup, rbnSseMIBConformance=rbnSseMIBConformance, rbnSseFsgSwitchAuto=rbnSseFsgSwitchAuto, rbnFSGroupState=rbnFSGroupState, rbnFSPartitionDisk=rbnFSPartitionDisk, rbnFSSecondarySlot=rbnFSSecondarySlot, rbnSseMIBObjects=rbnSseMIBObjects, rbnFSPartitionState=rbnFSPartitionState, rbnFSPartitionEntry=rbnFSPartitionEntry, rbnFSActiveSlot=rbnFSActiveSlot, rbnSseGroups=rbnSseGroups, rbnSseFsgSwitchWtr=rbnSseFsgSwitchWtr, rbnFSPartitionName=rbnFSPartitionName, rbnSseFsgParitionDataSyncing=rbnSseFsgParitionDataSyncing, rbnSseFileServerGroup=rbnSseFileServerGroup, rbnSseMIBNotifications=rbnSseMIBNotifications, rbnFSPartitionMirrored=rbnFSPartitionMirrored, rbnSseFsgParitionDataSyncFail=rbnSseFsgParitionDataSyncFail, rbnFSPartitionSize=rbnFSPartitionSize, rbnSseFsgSwitchFail=rbnSseFsgSwitchFail, rbnSseAlarmProbableCause=rbnSseAlarmProbableCause, rbnSseFsgBlockDeviceFail=rbnSseFsgBlockDeviceFail, rbnFSGroupEntry=rbnFSGroupEntry, rbnFSGroupRevert=rbnFSGroupRevert, rbnSseEventGroup=rbnSseEventGroup)
