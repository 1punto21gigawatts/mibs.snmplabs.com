#
# PySNMP MIB module POWER-ETHERNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/POWER-ETHERNET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:06:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, mib_2, Gauge32, IpAddress, ObjectIdentity, Unsigned32, Bits, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso, NotificationType, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "mib-2", "Gauge32", "IpAddress", "ObjectIdentity", "Unsigned32", "Bits", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso", "NotificationType", "ModuleIdentity", "Integer32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
powerEthernetMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 105))
powerEthernetMIB.setRevisions(('2003-11-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: powerEthernetMIB.setRevisionsDescriptions(('Initial version, published as RFC 3621.',))
if mibBuilder.loadTexts: powerEthernetMIB.setLastUpdated('200311240000Z')
if mibBuilder.loadTexts: powerEthernetMIB.setOrganization('IETF Ethernet Interfaces and Hub MIB Working Group')
if mibBuilder.loadTexts: powerEthernetMIB.setContactInfo(' WG Charter: http://www.ietf.org/html.charters/hubmib-charter.html Mailing lists: General Discussion: hubmib@ietf.org To Subscribe: hubmib-requests@ietf.org In Body: subscribe your_email_address Chair: Dan Romascanu Avaya Tel: +972-3-645-8414 Email: dromasca@avaya.com Editor: Avi Berger PowerDsine Inc. Tel: 972-9-7755100 Ext 307 Fax: 972-9-7755120 E-mail: avib@PowerDsine.com ')
if mibBuilder.loadTexts: powerEthernetMIB.setDescription('The MIB module for managing Power Source Equipment (PSE) working according to the IEEE 802.af Powered Ethernet (DTE Power via MDI) standard. The following terms are used throughout this MIB module. For complete formal definitions, the IEEE 802.3 standards should be consulted wherever possible: Group - A recommended, but optional, entity defined by the IEEE 802.3 management standard, in order to support a modular numbering scheme. The classical example allows an implementor to represent field-replaceable units as groups of ports, with the port numbering matching the modular hardware implementation. Port - This entity identifies the port within the group for which this entry contains information. The numbering scheme for ports is implementation specific. Copyright (c) The Internet Society (2003). This version of this MIB module is part of RFC 3621; See the RFC itself for full legal notices.')
pethNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 105, 0))
pethObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 105, 1))
pethConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 105, 2))
pethPsePortTable = MibTable((1, 3, 6, 1, 2, 1, 105, 1, 1), )
if mibBuilder.loadTexts: pethPsePortTable.setStatus('current')
if mibBuilder.loadTexts: pethPsePortTable.setDescription('A table of objects that display and control the power characteristics of power Ethernet ports on a Power Source Entity (PSE) device. This group will be implemented in managed power Ethernet switches and mid-span devices. Values of all read-write objects in this table are persistent at restart/reboot.')
pethPsePortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 105, 1, 1, 1), ).setIndexNames((0, "POWER-ETHERNET-MIB", "pethPsePortGroupIndex"), (0, "POWER-ETHERNET-MIB", "pethPsePortIndex"))
if mibBuilder.loadTexts: pethPsePortEntry.setStatus('current')
if mibBuilder.loadTexts: pethPsePortEntry.setDescription('A set of objects that display and control the power characteristics of a power Ethernet PSE port.')
pethPsePortGroupIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pethPsePortGroupIndex.setStatus('current')
if mibBuilder.loadTexts: pethPsePortGroupIndex.setDescription('This variable uniquely identifies the group containing the port to which a power Ethernet PSE is connected. Group means box in the stack, module in a rack and the value 1 MUST be used for non-modular devices. Furthermore, the same value MUST be used in this variable, pethMainPseGroupIndex, and pethNotificationControlGroupIndex to refer to a given box in a stack or module in the rack.')
pethPsePortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pethPsePortIndex.setStatus('current')
if mibBuilder.loadTexts: pethPsePortIndex.setDescription('This variable uniquely identifies the power Ethernet PSE port within group pethPsePortGroupIndex to which the power Ethernet PSE entry is connected.')
pethPsePortAdminEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethPsePortAdminEnable.setReference('IEEE Std 802.3af Section 30.9.1.1.2 aPSEAdminState')
if mibBuilder.loadTexts: pethPsePortAdminEnable.setStatus('current')
if mibBuilder.loadTexts: pethPsePortAdminEnable.setDescription('true (1) An interface which can provide the PSE functions. false(2) The interface will act as it would if it had no PSE function.')
pethPsePortPowerPairsControlAbility = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortPowerPairsControlAbility.setReference('IEEE Std 802.3af Section 30.9.1.1.3 aPSEPowerPairsControlAbility')
if mibBuilder.loadTexts: pethPsePortPowerPairsControlAbility.setStatus('current')
if mibBuilder.loadTexts: pethPsePortPowerPairsControlAbility.setDescription('Describes the capability of controlling the power pairs functionality to switch pins for sourcing power. The value true indicate that the device has the capability to control the power pairs. When false the PSE Pinout Alternative used cannot be controlled through the PethPsePortAdminEnable attribute.')
pethPsePortPowerPairs = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("spare", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethPsePortPowerPairs.setReference('IEEE Std 802.3af Section 30.9.1.1.4 aPSEPowerPairs')
if mibBuilder.loadTexts: pethPsePortPowerPairs.setStatus('current')
if mibBuilder.loadTexts: pethPsePortPowerPairs.setDescription('Describes or controls the pairs in use. If the value of pethPsePortPowerPairsControl is true, this object is writable. A value of signal(1) means that the signal pairs only are in use. A value of spare(2) means that the spare pairs only are in use.')
pethPsePortDetectionStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("searching", 2), ("deliveringPower", 3), ("fault", 4), ("test", 5), ("otherFault", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortDetectionStatus.setReference('IEEE Std 802.3af Section 30.9.1.1.5 aPSEPowerDetectionStatus')
if mibBuilder.loadTexts: pethPsePortDetectionStatus.setStatus('current')
if mibBuilder.loadTexts: pethPsePortDetectionStatus.setDescription('Describes the operational status of the port PD detection. A value of disabled(1)- indicates that the PSE State diagram is in the state DISABLED. A value of deliveringPower(3) - indicates that the PSE State diagram is in the state POWER_ON for a duration greater than tlim max (see IEEE Std 802.3af Table 33-5 tlim). A value of fault(4) - indicates that the PSE State diagram is in the state TEST_ERROR. A value of test(5) - indicates that the PSE State diagram is in the state TEST_MODE. A value of otherFault(6) - indicates that the PSE State diagram is in the state IDLE due to the variable error_conditions. A value of searching(2)- indicates the PSE State diagram is in a state other than those listed above.')
pethPsePortPowerPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("high", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethPsePortPowerPriority.setStatus('current')
if mibBuilder.loadTexts: pethPsePortPowerPriority.setDescription('This object controls the priority of the port from the point of view of a power management algorithm. The priority that is set by this variable could be used by a control mechanism that prevents over current situations by disconnecting first ports with lower power priority. Ports that connect devices critical to the operation of the network - like the E911 telephones ports - should be set to higher priority.')
pethPsePortMPSAbsentCounter = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortMPSAbsentCounter.setReference('IEEE Std 802.3af Section 30.9.1.1.11 aPSEMPSAbsentCounter')
if mibBuilder.loadTexts: pethPsePortMPSAbsentCounter.setStatus('current')
if mibBuilder.loadTexts: pethPsePortMPSAbsentCounter.setDescription('This counter is incremented when the PSE state diagram transitions directly from the state POWER_ON to the state IDLE due to tmpdo_timer_done being asserted.')
pethPsePortType = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 1, 1, 9), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethPsePortType.setStatus('current')
if mibBuilder.loadTexts: pethPsePortType.setDescription('A manager will set the value of this variable to indicate the type of powered device that is connected to the port. The default value supplied by the agent if no value has ever been set should be a zero-length octet string.')
pethPsePortPowerClassifications = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortPowerClassifications.setReference('IEEE Std 802.3af Section 30.9.1.1.6 aPSEPowerClassification')
if mibBuilder.loadTexts: pethPsePortPowerClassifications.setStatus('current')
if mibBuilder.loadTexts: pethPsePortPowerClassifications.setDescription('Classification is a way to tag different terminals on the Power over LAN network according to their power consumption. Devices such as IP telephones, WLAN access points and others, will be classified according to their power requirements. The meaning of the classification labels is defined in the IEEE specification. This variable is valid only while a PD is being powered, that is, while the attribute pethPsePortDetectionStatus is reporting the enumeration deliveringPower.')
pethPsePortInvalidSignatureCounter = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortInvalidSignatureCounter.setReference('IEEE Std 802.3af Section 30.9.1.1.7 aPSEInvalidSignatureCounter')
if mibBuilder.loadTexts: pethPsePortInvalidSignatureCounter.setStatus('current')
if mibBuilder.loadTexts: pethPsePortInvalidSignatureCounter.setDescription('This counter is incremented when the PSE state diagram enters the state SIGNATURE_INVALID.')
pethPsePortPowerDeniedCounter = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortPowerDeniedCounter.setReference('IEEE Std 802.3af Section 30.9.1.1.8 aPSEPowerDeniedCounter')
if mibBuilder.loadTexts: pethPsePortPowerDeniedCounter.setStatus('current')
if mibBuilder.loadTexts: pethPsePortPowerDeniedCounter.setDescription('This counter is incremented when the PSE state diagram enters the state POWER_DENIED.')
pethPsePortOverLoadCounter = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortOverLoadCounter.setReference('IEEE Std 802.3af Section 30.9.1.1.9 aPSEOverLoadCounter')
if mibBuilder.loadTexts: pethPsePortOverLoadCounter.setStatus('current')
if mibBuilder.loadTexts: pethPsePortOverLoadCounter.setDescription('This counter is incremented when the PSE state diagram enters the state ERROR_DELAY_OVER.')
pethPsePortShortCounter = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortShortCounter.setReference('IEEE Std 802.3af Section 30.9.1.1.10 aPSEShortCounter')
if mibBuilder.loadTexts: pethPsePortShortCounter.setStatus('current')
if mibBuilder.loadTexts: pethPsePortShortCounter.setDescription('This counter is incremented when the PSE state diagram enters the state ERROR_DELAY_SHORT.')
pethMainPseObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 105, 1, 3))
pethMainPseTable = MibTable((1, 3, 6, 1, 2, 1, 105, 1, 3, 1), )
if mibBuilder.loadTexts: pethMainPseTable.setStatus('current')
if mibBuilder.loadTexts: pethMainPseTable.setDescription('A table of objects that display and control attributes of the main power source in a PSE device. Ethernet switches are one example of boxes that would support these objects. Values of all read-write objects in this table are persistent at restart/reboot.')
pethMainPseEntry = MibTableRow((1, 3, 6, 1, 2, 1, 105, 1, 3, 1, 1), ).setIndexNames((0, "POWER-ETHERNET-MIB", "pethMainPseGroupIndex"))
if mibBuilder.loadTexts: pethMainPseEntry.setStatus('current')
if mibBuilder.loadTexts: pethMainPseEntry.setDescription('A set of objects that display and control the Main power of a PSE. ')
pethMainPseGroupIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pethMainPseGroupIndex.setStatus('current')
if mibBuilder.loadTexts: pethMainPseGroupIndex.setDescription('This variable uniquely identifies the group to which power Ethernet PSE is connected. Group means (box in the stack, module in a rack) and the value 1 MUST be used for non-modular devices. Furthermore, the same value MUST be used in this variable, pethPsePortGroupIndex, and pethNotificationControlGroupIndex to refer to a given box in a stack or module in a rack.')
pethMainPsePower = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 3, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: pethMainPsePower.setStatus('current')
if mibBuilder.loadTexts: pethMainPsePower.setDescription('The nominal power of the PSE expressed in Watts.')
pethMainPseOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("faulty", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethMainPseOperStatus.setStatus('current')
if mibBuilder.loadTexts: pethMainPseOperStatus.setDescription('The operational status of the main PSE.')
pethMainPseConsumptionPower = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 3, 1, 1, 4), Gauge32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: pethMainPseConsumptionPower.setStatus('current')
if mibBuilder.loadTexts: pethMainPseConsumptionPower.setDescription('Measured usage power expressed in Watts.')
pethMainPseUsageThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethMainPseUsageThreshold.setStatus('current')
if mibBuilder.loadTexts: pethMainPseUsageThreshold.setDescription('The usage threshold expressed in percents for comparing the measured power and initiating an alarm if the threshold is exceeded.')
pethNotificationControl = MibIdentifier((1, 3, 6, 1, 2, 1, 105, 1, 4))
pethNotificationControlTable = MibTable((1, 3, 6, 1, 2, 1, 105, 1, 4, 1), )
if mibBuilder.loadTexts: pethNotificationControlTable.setStatus('current')
if mibBuilder.loadTexts: pethNotificationControlTable.setDescription('A table of objects that display and control the Notification on a PSE device. Values of all read-write objects in this table are persistent at restart/reboot.')
pethNotificationControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 105, 1, 4, 1, 1), ).setIndexNames((0, "POWER-ETHERNET-MIB", "pethNotificationControlGroupIndex"))
if mibBuilder.loadTexts: pethNotificationControlEntry.setStatus('current')
if mibBuilder.loadTexts: pethNotificationControlEntry.setDescription('A set of objects that control the Notification events.')
pethNotificationControlGroupIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pethNotificationControlGroupIndex.setStatus('current')
if mibBuilder.loadTexts: pethNotificationControlGroupIndex.setDescription('This variable uniquely identifies the group. Group means box in the stack, module in a rack and the value 1 MUST be used for non-modular devices. Furthermore, the same value MUST be used in this variable, pethPsePortGroupIndex, and pethMainPseGroupIndex to refer to a given box in a stack or module in a rack. ')
pethNotificationControlEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 105, 1, 4, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethNotificationControlEnable.setStatus('current')
if mibBuilder.loadTexts: pethNotificationControlEnable.setDescription('This object controls, on a per-group basis, whether or not notifications from the agent are enabled. The value true(1) means that notifications are enabled; the value false(2) means that they are not.')
pethPsePortOnOffNotification = NotificationType((1, 3, 6, 1, 2, 1, 105, 0, 1)).setObjects(("POWER-ETHERNET-MIB", "pethPsePortDetectionStatus"))
if mibBuilder.loadTexts: pethPsePortOnOffNotification.setStatus('current')
if mibBuilder.loadTexts: pethPsePortOnOffNotification.setDescription(' This Notification indicates if Pse Port is delivering or not power to the PD. This Notification SHOULD be sent on every status change except in the searching mode. At least 500 msec must elapse between notifications being emitted by the same object instance.')
pethMainPowerUsageOnNotification = NotificationType((1, 3, 6, 1, 2, 1, 105, 0, 2)).setObjects(("POWER-ETHERNET-MIB", "pethMainPseConsumptionPower"))
if mibBuilder.loadTexts: pethMainPowerUsageOnNotification.setStatus('current')
if mibBuilder.loadTexts: pethMainPowerUsageOnNotification.setDescription(' This Notification indicate PSE Threshold usage indication is on, the usage power is above the threshold. At least 500 msec must elapse between notifications being emitted by the same object instance.')
pethMainPowerUsageOffNotification = NotificationType((1, 3, 6, 1, 2, 1, 105, 0, 3)).setObjects(("POWER-ETHERNET-MIB", "pethMainPseConsumptionPower"))
if mibBuilder.loadTexts: pethMainPowerUsageOffNotification.setStatus('current')
if mibBuilder.loadTexts: pethMainPowerUsageOffNotification.setDescription(' This Notification indicates PSE Threshold usage indication off, the usage power is below the threshold. At least 500 msec must elapse between notifications being emitted by the same object instance.')
pethCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 105, 2, 1))
pethGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 105, 2, 2))
pethCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 105, 2, 1, 1)).setObjects(("POWER-ETHERNET-MIB", "pethPsePortGroup"), ("POWER-ETHERNET-MIB", "pethPsePortNotificationGroup"), ("POWER-ETHERNET-MIB", "pethNotificationControlGroup"), ("POWER-ETHERNET-MIB", "pethMainPseGroup"), ("POWER-ETHERNET-MIB", "pethMainPowerNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pethCompliance = pethCompliance.setStatus('current')
if mibBuilder.loadTexts: pethCompliance.setDescription('Describes the requirements for conformance to the Power Ethernet MIB.')
pethPsePortGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 105, 2, 2, 1)).setObjects(("POWER-ETHERNET-MIB", "pethPsePortAdminEnable"), ("POWER-ETHERNET-MIB", "pethPsePortPowerPairsControlAbility"), ("POWER-ETHERNET-MIB", "pethPsePortPowerPairs"), ("POWER-ETHERNET-MIB", "pethPsePortDetectionStatus"), ("POWER-ETHERNET-MIB", "pethPsePortPowerPriority"), ("POWER-ETHERNET-MIB", "pethPsePortMPSAbsentCounter"), ("POWER-ETHERNET-MIB", "pethPsePortInvalidSignatureCounter"), ("POWER-ETHERNET-MIB", "pethPsePortPowerDeniedCounter"), ("POWER-ETHERNET-MIB", "pethPsePortOverLoadCounter"), ("POWER-ETHERNET-MIB", "pethPsePortShortCounter"), ("POWER-ETHERNET-MIB", "pethPsePortType"), ("POWER-ETHERNET-MIB", "pethPsePortPowerClassifications"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pethPsePortGroup = pethPsePortGroup.setStatus('current')
if mibBuilder.loadTexts: pethPsePortGroup.setDescription('PSE Port objects.')
pethMainPseGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 105, 2, 2, 2)).setObjects(("POWER-ETHERNET-MIB", "pethMainPsePower"), ("POWER-ETHERNET-MIB", "pethMainPseOperStatus"), ("POWER-ETHERNET-MIB", "pethMainPseConsumptionPower"), ("POWER-ETHERNET-MIB", "pethMainPseUsageThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pethMainPseGroup = pethMainPseGroup.setStatus('current')
if mibBuilder.loadTexts: pethMainPseGroup.setDescription('Main PSE Objects. ')
pethNotificationControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 105, 2, 2, 3)).setObjects(("POWER-ETHERNET-MIB", "pethNotificationControlEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pethNotificationControlGroup = pethNotificationControlGroup.setStatus('current')
if mibBuilder.loadTexts: pethNotificationControlGroup.setDescription('Notification Control Objects. ')
pethPsePortNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 105, 2, 2, 4)).setObjects(("POWER-ETHERNET-MIB", "pethPsePortOnOffNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pethPsePortNotificationGroup = pethPsePortNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: pethPsePortNotificationGroup.setDescription('Pse Port Notifications.')
pethMainPowerNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 105, 2, 2, 5)).setObjects(("POWER-ETHERNET-MIB", "pethMainPowerUsageOnNotification"), ("POWER-ETHERNET-MIB", "pethMainPowerUsageOffNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pethMainPowerNotificationGroup = pethMainPowerNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: pethMainPowerNotificationGroup.setDescription('Main PSE Notifications.')
mibBuilder.exportSymbols("POWER-ETHERNET-MIB", pethMainPseEntry=pethMainPseEntry, pethPsePortOnOffNotification=pethPsePortOnOffNotification, pethMainPowerUsageOffNotification=pethMainPowerUsageOffNotification, pethPsePortInvalidSignatureCounter=pethPsePortInvalidSignatureCounter, pethMainPseOperStatus=pethMainPseOperStatus, pethMainPseTable=pethMainPseTable, pethPsePortNotificationGroup=pethPsePortNotificationGroup, pethPsePortGroup=pethPsePortGroup, pethMainPowerNotificationGroup=pethMainPowerNotificationGroup, pethPsePortEntry=pethPsePortEntry, pethPsePortType=pethPsePortType, pethPsePortTable=pethPsePortTable, pethMainPsePower=pethMainPsePower, pethGroups=pethGroups, pethPsePortPowerDeniedCounter=pethPsePortPowerDeniedCounter, PYSNMP_MODULE_ID=powerEthernetMIB, pethPsePortDetectionStatus=pethPsePortDetectionStatus, powerEthernetMIB=powerEthernetMIB, pethMainPseConsumptionPower=pethMainPseConsumptionPower, pethPsePortShortCounter=pethPsePortShortCounter, pethPsePortIndex=pethPsePortIndex, pethMainPseGroupIndex=pethMainPseGroupIndex, pethConformance=pethConformance, pethPsePortPowerPriority=pethPsePortPowerPriority, pethPsePortPowerClassifications=pethPsePortPowerClassifications, pethPsePortOverLoadCounter=pethPsePortOverLoadCounter, pethNotificationControlEnable=pethNotificationControlEnable, pethPsePortPowerPairs=pethPsePortPowerPairs, pethNotificationControl=pethNotificationControl, pethMainPseGroup=pethMainPseGroup, pethNotificationControlTable=pethNotificationControlTable, pethCompliances=pethCompliances, pethObjects=pethObjects, pethNotificationControlGroup=pethNotificationControlGroup, pethPsePortAdminEnable=pethPsePortAdminEnable, pethMainPowerUsageOnNotification=pethMainPowerUsageOnNotification, pethPsePortGroupIndex=pethPsePortGroupIndex, pethPsePortMPSAbsentCounter=pethPsePortMPSAbsentCounter, pethPsePortPowerPairsControlAbility=pethPsePortPowerPairsControlAbility, pethMainPseUsageThreshold=pethMainPseUsageThreshold, pethMainPseObjects=pethMainPseObjects, pethNotificationControlGroupIndex=pethNotificationControlGroupIndex, pethNotificationControlEntry=pethNotificationControlEntry, pethCompliance=pethCompliance, pethNotifications=pethNotifications)
