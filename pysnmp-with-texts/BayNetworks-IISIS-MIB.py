#
# PySNMP MIB module BayNetworks-IISIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BayNetworks-IISIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:42:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, NotificationType, MibIdentifier, Unsigned32, Integer32, iso, Counter32, TimeTicks, Counter64, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "MibIdentifier", "Unsigned32", "Integer32", "iso", "Counter32", "TimeTicks", "Counter64", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfIisisGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfIisisGroup")
wfIisisGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1))
wfIisisGeneralDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisGeneralDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisGeneralDelete.setDescription("'This value determines whether I-ISIS is configured'")
wfIisisGeneralDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisGeneralDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisGeneralDisable.setDescription("'The administrative status of I-ISIS in the router. The value 'enabled' denotes that the I-ISIS Process is active on at least one interface; 'disabled' disables it on all interfaces.'")
wfIisisGeneralState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("invalid", 3), ("notpresent", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisGeneralState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisGeneralState.setDescription("'The state of I-ISIS'")
wfIisisRouterId = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisRouterId.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisRouterId.setDescription('This value contains the system ID of this Intermediate System.')
wfIisisVersion = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisVersion.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisVersion.setDescription('This read-only parameter identifies the version number of the IS-IS protocol to which this node conforms to.')
wfIisisRouterType = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("l1only", 1), ("l2only", 2), ("l1l2", 3))).clone('l1l2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisRouterType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisRouterType.setDescription('This value determines whether this system is L1 only router L2 only router or L1-L2 IS.')
wfIisisSpfHoldDown = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisSpfHoldDown.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisSpfHoldDown.setDescription('Hold Down Timer for the SPF (in seconds). The SPF will run at most once per hold down timer value. A value of 0 means no hold down.')
wfIisisPrimaryLogMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 8), Gauge32().clone(287)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisPrimaryLogMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisPrimaryLogMask.setDescription("A parameter to specify which I-ISIS log messages should be logged. This will only effect the Primary I-ISIS gate. Each bit represents a message as defined below. A 1 in that bit location means to log it and a 0 means not to put that log message in the log. Changing this value will NOT restart I-ISIS, but will take effct immediately(if there are any messages to be logged. bit 31 bit 0 +---------------------------------------+ | | +---------------------------------------+ bit0 Trace Messages bit1 INFO Level messages bit2 debug level messages bit3 I-ISIS interface state change messages bit4 Nbr state changes bit5 self-origination of LSA's bit6 receipt of new LSA's bit7 changes to I-ISIS`s Routing Table bit8 Bad LS requests, Ack's, or updates bit9 receipt of less recent LSA's bit10 receipt of more recent self-originated LSA's bit11 receipt of MAxAge LSA's (i.e. LSA's being flushed) bit12 - 31 reserved ")
wfIisisMaximumPath = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisMaximumPath.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisMaximumPath.setDescription('Maximum number of equal cost paths allowed for a network installed by OSPF.')
wfIisisMaxAreas = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisMaxAreas.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisMaxAreas.setDescription('This value defines the maximum allowable number of areas addresses for the domain that this router exists in.')
wfIisisNumL1Lsps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisNumL1Lsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisNumL1Lsps.setDescription('Number of L2 LSPS stored in the database')
wfIisisNumL2Lsps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisNumL2Lsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisNumL2Lsps.setDescription('Number of L2 LSPS stored in the database')
wfIisisCksumIsPdus = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisCksumIsPdus.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisCksumIsPdus.setDescription('This value indicates whether ISIS PDUs will carry a checksum.')
wfIisisL1LspPassword = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisL1LspPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL1LspPassword.setDescription('This assigns a password such that only L1 Lsps with the matching password will be accepted. All L1 Lsps generated by this system will contain this string in the password option.')
wfIisisL2LspPassword = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisL2LspPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL2LspPassword.setDescription('This assigns a password such that only L2 Lsps with the matching password will be accepted. All L2 Lsps generated by this system will contain this string in the password option.')
wfIisisAreaAddr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisAreaAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisAreaAddr.setDescription("This Assigns the area address for this router. This field must be filled in. If the user doesn't enter a value, then assign 0x470005. Site Manager must force the user to enter at least a 3-byte value for this field.")
wfIisisAreaAddrAlias1 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisAreaAddrAlias1.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisAreaAddrAlias1.setDescription('This Assigns the first area address alias for this router. This field does no have to be filled in, but if the user tries to enter a value, Site Manager must make sure that it is at least 3-bytes in length.')
wfIisisAreaAddrAlias2 = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisAreaAddrAlias2.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisAreaAddrAlias2.setDescription('This Assigns the second area address alias for this router. This field does no have to be filled in, but if the user tries to enter a value, Site Manager must make sure that it is at least 3-bytes in length.')
wfIisisL1CorruptedLsps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisL1CorruptedLsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL1CorruptedLsps.setDescription('Number of Corrupted L1-Lsps Detected.')
wfIisisL2CorruptedLsps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisL2CorruptedLsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL2CorruptedLsps.setDescription('Number of Corrupted L2-Lsps Detected.')
wfIisisL1LspDbOverLoads = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisL1LspDbOverLoads.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL1LspDbOverLoads.setDescription('Number of times the L1 Lsp Database Overload event has been generated.')
wfIisisL2LspDbOverLoads = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisL2LspDbOverLoads.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL2LspDbOverLoads.setDescription('Number of times the L2Lsp Database Overload event has been generated.')
wfIisisNearestL2Is = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisNearestL2Is.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisNearestL2Is.setDescription('This is the ID of the nearest L2 system in this area.')
wfIisisNumL1Routes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisNumL1Routes.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisNumL1Routes.setDescription('Number of L1 Routes.')
wfIisisNumL2Routes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisNumL2Routes.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisNumL2Routes.setDescription('Number of L2 Routes.')
wfIisisMinLSPGenerationInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 900)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisMinLSPGenerationInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisMinLSPGenerationInterval.setDescription('Min time interval(in secs) before LSP generation')
wfIisisMaxLSPGenerationInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(150, 27000)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisMaxLSPGenerationInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisMaxLSPGenerationInterval.setDescription('Max time interval(in secs) before LSP generation')
wfIisisMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 7200)).clone(1200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisMaxAge.setDescription('The lifetime of the lsp after which it will be considered expired')
wfIisisMinLSPXmtInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisMinLSPXmtInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisMinLSPXmtInterval.setDescription('')
wfIisisPartialSNPInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisPartialSNPInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisPartialSNPInterval.setDescription('')
wfIisisZeroAgeLifetime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisZeroAgeLifetime.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisZeroAgeLifetime.setDescription('If the remaining lifetime of an LSP reaches zero, the expired LSP will be kept in the database for this time (in seconds)')
wfIisisAgePend = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisAgePend.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisAgePend.setDescription('The number of entries processed before this gate pends')
wfIisisCsnpBuildInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1200)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisCsnpBuildInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisCsnpBuildInterval.setDescription('The interval at which CSNPs are generated by the Designated IS')
wfIisisL2LspBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 16384)).clone(1497)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisL2LspBufferSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL2LspBufferSize.setDescription('The max size of the LSP generated by system')
wfIisisL1SpfCnt = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisL1SpfCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL1SpfCnt.setDescription('The number of times the L1 I-ISIS SPF algorithm has been run for this area.')
wfIisisL2SpfCnt = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisL2SpfCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL2SpfCnt.setDescription('The number of times the L2 I-ISIS SPF algorithm has been run for this area.')
wfIisisAreaTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 2), )
if mibBuilder.loadTexts: wfIisisAreaTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisAreaTable.setDescription("-- The I-ISIS Area Data Structure contains information -- regarding the various areas. The interfaces and -- links are configured as part of these areas. -- Area 0.0.0.0, by definition, is the Backbone Area 'Information describing the configured parameters and cumulative statistics of the router's attached areas.' REFERENCE 'I-ISIS Version 2, Section 6 The Area Data Structure'")
wfIisisAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 2, 1), ).setIndexNames((0, "BayNetworks-IISIS-MIB", "wfIisisAreaId"))
if mibBuilder.loadTexts: wfIisisAreaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisAreaEntry.setDescription("'Information describing the configured parameters and cumulative statistics of one of the router's attached areas.'")
wfIisisAreaDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisAreaDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisAreaDelete.setDescription('This value determines if the I-ISIS router is configured with this area.')
wfIisisAreaDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisAreaDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisAreaDisable.setDescription('This value indicates the state of this area on the I-ISIS router.')
wfIisisAreaState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisAreaState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisAreaState.setDescription('This value indicates the state of the I-ISIS Area.')
wfIisisAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisAreaId.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisAreaId.setDescription('A 32-bit integer uniquely identifying an area. Area ID 0.0.0.0 is used for the I-ISIS backbone.')
wfIisisSpfCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisSpfCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisSpfCnt.setDescription('The number of times the I-ISIS SPF algorithm has been run for this area.')
wfIisisL1LspHdrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 3), )
if mibBuilder.loadTexts: wfIisisL1LspHdrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL1LspHdrTable.setDescription("2 u_int32's so the inst_id len is 2.")
wfIisisL1LspHdrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 3, 1), ).setIndexNames((0, "BayNetworks-IISIS-MIB", "wfIisisL1LspHdrLspId"))
if mibBuilder.loadTexts: wfIisisL1LspHdrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL1LspHdrEntry.setDescription('A Record in the Level 1 Lsp Header Table')
wfIisisL1LspHdrLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisL1LspHdrLspId.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL1LspHdrLspId.setDescription('LSPID = Source ID + Pseudo-node ID + LSP number')
wfIisisL1LspHdrLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisL1LspHdrLifetime.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL1LspHdrLifetime.setDescription('Lsp Lifetime')
wfIisisL1LspHdrSeqnum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisL1LspHdrSeqnum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL1LspHdrSeqnum.setDescription('Lsp sequence number')
wfIisisL1LspHdrFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisL1LspHdrFlags.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL1LspHdrFlags.setDescription('Flags: P/ATT/LSPDBOL/IS type')
wfIisisL1LspHdrCksum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisL1LspHdrCksum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL1LspHdrCksum.setDescription('Checksum')
wfIisisL2LspHdrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 4), )
if mibBuilder.loadTexts: wfIisisL2LspHdrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL2LspHdrTable.setDescription("2 u_int32's so the inst_id len is 2.")
wfIisisL2LspHdrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 4, 1), ).setIndexNames((0, "BayNetworks-IISIS-MIB", "wfIisisL2LspHdrLspId"))
if mibBuilder.loadTexts: wfIisisL2LspHdrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL2LspHdrEntry.setDescription('A Record in the Lsp Header Table')
wfIisisL2LspHdrLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisL2LspHdrLspId.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL2LspHdrLspId.setDescription('LSPID = Source ID + Pseudo-node ID + LSP number')
wfIisisL2LspHdrLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisL2LspHdrLifetime.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL2LspHdrLifetime.setDescription('Lsp Lifetime')
wfIisisL2LspHdrSeqnum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisL2LspHdrSeqnum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL2LspHdrSeqnum.setDescription('Lsp sequence number')
wfIisisL2LspHdrFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisL2LspHdrFlags.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL2LspHdrFlags.setDescription('Flags: P/ATT/LSPDBOL/IS type')
wfIisisL2LspHdrCksum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisL2LspHdrCksum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisL2LspHdrCksum.setDescription('Checksum')
wfIisisIfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 5), )
if mibBuilder.loadTexts: wfIisisIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfTable.setDescription("-- I-ISIS Interface Table -- The I-ISIS Interface Table augments the ifTable with I-ISIS -- specific information. 'The I-ISIS Interface Table describes the interfaces from the viewpoint of I-ISIS.'")
wfIisisIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 5, 1), ).setIndexNames((0, "BayNetworks-IISIS-MIB", "wfIisisIfIpAddress"), (0, "BayNetworks-IISIS-MIB", "wfIisisAddressLessIf"))
if mibBuilder.loadTexts: wfIisisIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfEntry.setDescription("'The I-ISIS Interface Entry describes one interface from the viewpoint of I-ISIS.'")
wfIisisIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisIfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfDelete.setDescription('This variable determines in an I-ISIS Interface has been configured on the router.')
wfIisisIfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisIfDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfDisable.setDescription("'The I-ISIS interface's administrative status. The value 'enabled' denotes that neighbor relationships may be formed on the interface, and the interface will be advertised as an internal route to some area. The value 'disabled' denotes that the interface is external to I-ISIS.'")
wfIisisIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfIpAddress.setDescription("'The IP address of this I-ISIS interface.'")
wfIisisAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisAddressLessIf.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisAddressLessIf.setDescription("'For the purpose of easing the instancing of addressed and addressless interfaces; This variable takes the value 0 on interfaces with IP Addresses, and the corresponding value of ifIndex for interfaces having no IP Address.'")
wfIisisIfRouterLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8))).clone(namedValues=NamedValues(("l1", 1), ("l2", 2), ("l1l2", 3), ("ext", 4), ("l2ext", 6), ("l1l2ext", 7), ("esisonly", 8))).clone('l2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisIfRouterLevel.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfRouterLevel.setDescription('This is the level protocol that the circuit runs. Its a bit mask to allow for some combination of L1, L2, External, ES-IS-only.')
wfIisisIfL1DefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisIfL1DefaultMetric.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfL1DefaultMetric.setDescription('This is the default cost of using this circuit for L1 traffic.')
wfIisisIfL2DefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisIfL2DefaultMetric.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfL2DefaultMetric.setDescription('This is the default cost of using this circuit for L2 traffic.')
wfIisisIfL1DrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisIfL1DrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfL1DrPriority.setDescription('This is the priority for this system to become L1 designated router on this LAN circuit.')
wfIisisIfL2DrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisIfL2DrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfL2DrPriority.setDescription('This is the priority for this system to become L2 designated router on this LAN circuit.')
wfIisisIfHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 21845)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisIfHelloTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfHelloTimer.setDescription('This is the period (secs) between IIH hello transmissions.')
wfIisisIfPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 5, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisIfPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfPassword.setDescription('This is Circuit Password for this circuit. Used to filter out Hellos from systems without the correct password.')
wfIisisIfHelloMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisIfHelloMtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfHelloMtuSize.setDescription('Configure Hello MTU size per I-ISIS interface This parameter has the following values/meanings: 1 - Use the MTU specified by IP 2 - Use the MTU of ethernet, regardless of what IP says > 2 - Use this value as the actual MTU. If the value is smaller than what I-ISIS needs as a minimum then the mtu specified by IP is used. For example, 3 would never be used as an MTU.')
wfIisisIfIihHoldMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisIfIihHoldMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfIihHoldMultiplier.setDescription('This is the multiplier value used to compute the hold time set in the IIH PDUs transmitted from this router. Hold time equals IIH Timer times IIH Hold Multiplier.')
wfIisisIfIshHoldMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisIfIshHoldMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfIshHoldMultiplier.setDescription('This is the multiplier value used to compute the hold time set in the ISH PDUs transmitted from this router. Hold time equals IIH Timer times IIH Hold Multiplier.')
wfIisisIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("broadcast", 1), ("pointtopoint", 2))).clone('broadcast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisIfType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfType.setDescription('The IISIS interface type.')
wfIisisIfCsnpTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIisisIfCsnpTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfCsnpTimer.setDescription('This is the period (in seconds) between CSNP transmissions.')
wfIisisIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6), )
if mibBuilder.loadTexts: wfIisisIfStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsTable.setDescription('-- I-ISIS Interface Stats Table. ')
wfIisisIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1), ).setIndexNames((0, "BayNetworks-IISIS-MIB", "wfIisisIfStatsIpAddress"), (0, "BayNetworks-IISIS-MIB", "wfIisisStatsAddressLessIf"))
if mibBuilder.loadTexts: wfIisisIfStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsEntry.setDescription("'The information regarding a interface'.")
wfIisisIfStatsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsIpAddress.setDescription("'The IP address of this I-ISIS interface.'")
wfIisisStatsAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisStatsAddressLessIf.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisStatsAddressLessIf.setDescription("'For the purpose of easing the instancing of addressed and addressless interfaces; This variable takes the value 0 on interfaces with IP Addresses, and the corresponding value of ifIndex for interfaces having no IP Address.'")
wfIisisIfStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsState.setDescription('This indicates whether the circuit state is up or down.')
wfIisisIfStatsCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsCct.setDescription('A unique value for each known circuit.')
wfIisisIfStatsL1TxHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsL1TxHellos.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsL1TxHellos.setDescription('Number of I-ISIS Hello packets transmitted.')
wfIisisIfStatsL2TxHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsL2TxHellos.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsL2TxHellos.setDescription('Number of I-ISIS Hello packets transmitted.')
wfIisisIfStatsL1RxHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsL1RxHellos.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsL1RxHellos.setDescription('Number of I-ISIS Hello packets received.')
wfIisisIfStatsL2RxHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsL2RxHellos.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsL2RxHellos.setDescription('Number of I-ISIS Hello packets received.')
wfIisisIfStatsL1Drops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsL1Drops.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsL1Drops.setDescription('Number of I-ISIS packets dropped because of invalid information in the packet.')
wfIisisIfStatsL2Drops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsL2Drops.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsL2Drops.setDescription('Number of I-ISIS packets dropped because of invalid information in the packet.')
wfIisisIfStatsL1DesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsL1DesignatedRouter.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsL1DesignatedRouter.setDescription('This is the ID of the L1 Designated Router on this circuit.')
wfIisisIfStatsL2DesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsL2DesignatedRouter.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsL2DesignatedRouter.setDescription('This is the ID of the L2 Designated Router on this circuit.')
wfIisisIfStatsTxL1Lsp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsTxL1Lsp.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsTxL1Lsp.setDescription('Number of L1 LSPs(Link State Packet) transmitted.')
wfIisisIfStatsTxL2Lsp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsTxL2Lsp.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsTxL2Lsp.setDescription('Number of L2 LSPs(Link State Packet) transmitted.')
wfIisisIfStatsTxL1Csnp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsTxL1Csnp.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsTxL1Csnp.setDescription('Number of L1 CSNPs(Complete sequence no. packet) transmitted.')
wfIisisIfStatsTxL2Csnp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsTxL2Csnp.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsTxL2Csnp.setDescription('Number of L2 CSNPs(Complete sequence no. packet) transmitted.')
wfIisisIfStatsTxL1Psnp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsTxL1Psnp.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsTxL1Psnp.setDescription('Number of L1 PSNPs(Partial sequence no. packet) transmitted.')
wfIisisIfStatsTxL2Psnp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsTxL2Psnp.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsTxL2Psnp.setDescription('Number of L2 PSNPs(Partial sequence no. packet) transmitted.')
wfIisisIfStatsRxL1Lsp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsRxL1Lsp.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsRxL1Lsp.setDescription('Number of L1 LSPs(Link State Packet) received.')
wfIisisIfStatsRxL2Lsp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsRxL2Lsp.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsRxL2Lsp.setDescription('Number of L2 LSPs(Link State Packet) received.')
wfIisisIfStatsRxL1Csnp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsRxL1Csnp.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsRxL1Csnp.setDescription('Number of L1 CSNPs(Complete sequence no. packet) received.')
wfIisisIfStatsRxL2Csnp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsRxL2Csnp.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsRxL2Csnp.setDescription('Number of L2 CSNPs(Complete sequence no. packet) received.')
wfIisisIfStatsRxL1Psnp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsRxL1Psnp.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsRxL1Psnp.setDescription('Number of L1 PSNPs(Partial sequence no. packet) received.')
wfIisisIfStatsRxL2Psnp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsRxL2Psnp.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsRxL2Psnp.setDescription('Number of L2 PSNPs(Partial sequence no. packet) received.')
wfIisisIfStatsL1NbrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsL1NbrCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsL1NbrCount.setDescription('Count of neighbors with any state.')
wfIisisIfStatsL2NbrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsL2NbrCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsL2NbrCount.setDescription('Count of neighbors with any state.')
wfIisisIfStatsL1AdjCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsL1AdjCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsL1AdjCount.setDescription('Count of neighbors with state UP.')
wfIisisIfStatsL2AdjCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 6, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisIfStatsL2AdjCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisIfStatsL2AdjCount.setDescription('Count of neighbors with state UP.')
wfIisisDynNbrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 7), )
if mibBuilder.loadTexts: wfIisisDynNbrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisDynNbrTable.setDescription('-- I-ISIS Dynamic Neighbor Table The I-ISIS Dynamic Neighbor Table describes all neighbors in the locality of the subject router learned during operation.')
wfIisisDynNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 7, 1), ).setIndexNames((0, "BayNetworks-IISIS-MIB", "wfIisisDynNbrIpAddr"), (0, "BayNetworks-IISIS-MIB", "wfIisisDynNbrAddressLessIndex"))
if mibBuilder.loadTexts: wfIisisDynNbrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisDynNbrEntry.setDescription("'The information regarding a single neighbor.' REFERENCE 'I-ISIS Version 2, Section 10 The Neighbor Data Structure'")
wfIisisDynNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("init", 2), ("up", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisDynNbrState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisDynNbrState.setDescription("'The State of the relationship with this Neighbor.'")
wfIisisDynNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisDynNbrIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisDynNbrIpAddr.setDescription("'The IP address of this neighbor.'")
wfIisisDynNbrIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisDynNbrIfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisDynNbrIfAddr.setDescription("'Our Interface IP address for this neighbor.'")
wfIisisDynNbrAddressLessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisDynNbrAddressLessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisDynNbrAddressLessIndex.setDescription("'The circuit over which this neighbor is learnt.'")
wfIisisDynNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 7, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisDynNbrRtrId.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisDynNbrRtrId.setDescription("'A 6 byte field representing the Intermediate system Id.'")
wfIisisDynNbrDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 7, 1, 6), Integer32().clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisDynNbrDatabase.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisDynNbrDatabase.setDescription('Database into which the Adjacency is stored, 1=ES, 2=Level 1 IS, 3=Level 2 IS.')
wfIisisDynNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("broadcast", 1), ("pointtopoint", 2))).clone('broadcast')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisDynNbrType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisDynNbrType.setDescription('The type of adjacency.')
wfIisisDynNbrPseudonodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisDynNbrPseudonodeId.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisDynNbrPseudonodeId.setDescription('A unique value for each known circuit.')
wfIisisDynNbrHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisDynNbrHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisDynNbrHoldTime.setDescription('Hold Time received from neighbor.')
wfIisisDynNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisDynNbrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisDynNbrPriority.setDescription('Priority to become designated router. IS only.')
wfIisisDynNbrSnpaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 7, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisDynNbrSnpaAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisDynNbrSnpaAddr.setDescription('SNPA address for neighbor.')
wfIisisDynNbrLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 8, 7, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIisisDynNbrLanId.setStatus('mandatory')
if mibBuilder.loadTexts: wfIisisDynNbrLanId.setDescription('LAN ID of Designated IS of this interface.')
mibBuilder.exportSymbols("BayNetworks-IISIS-MIB", wfIisisIfStatsRxL2Lsp=wfIisisIfStatsRxL2Lsp, wfIisisL1LspPassword=wfIisisL1LspPassword, wfIisisL1LspDbOverLoads=wfIisisL1LspDbOverLoads, wfIisisIfStatsRxL1Csnp=wfIisisIfStatsRxL1Csnp, wfIisisVersion=wfIisisVersion, wfIisisL2LspHdrEntry=wfIisisL2LspHdrEntry, wfIisisIfStatsRxL1Lsp=wfIisisIfStatsRxL1Lsp, wfIisisIfStatsL1AdjCount=wfIisisIfStatsL1AdjCount, wfIisisAreaAddrAlias2=wfIisisAreaAddrAlias2, wfIisisAreaTable=wfIisisAreaTable, wfIisisIfStatsL2RxHellos=wfIisisIfStatsL2RxHellos, wfIisisAreaId=wfIisisAreaId, wfIisisDynNbrLanId=wfIisisDynNbrLanId, wfIisisSpfHoldDown=wfIisisSpfHoldDown, wfIisisL1LspHdrSeqnum=wfIisisL1LspHdrSeqnum, wfIisisIfStatsL1DesignatedRouter=wfIisisIfStatsL1DesignatedRouter, wfIisisGeneralDelete=wfIisisGeneralDelete, wfIisisIfEntry=wfIisisIfEntry, wfIisisPrimaryLogMask=wfIisisPrimaryLogMask, wfIisisIfPassword=wfIisisIfPassword, wfIisisDynNbrDatabase=wfIisisDynNbrDatabase, wfIisisNumL1Routes=wfIisisNumL1Routes, wfIisisDynNbrAddressLessIndex=wfIisisDynNbrAddressLessIndex, wfIisisL2LspHdrLifetime=wfIisisL2LspHdrLifetime, wfIisisDynNbrSnpaAddr=wfIisisDynNbrSnpaAddr, wfIisisL2LspHdrSeqnum=wfIisisL2LspHdrSeqnum, wfIisisIfType=wfIisisIfType, wfIisisIfStatsL2Drops=wfIisisIfStatsL2Drops, wfIisisL1LspHdrLifetime=wfIisisL1LspHdrLifetime, wfIisisL1SpfCnt=wfIisisL1SpfCnt, wfIisisIfHelloMtuSize=wfIisisIfHelloMtuSize, wfIisisIfL1DefaultMetric=wfIisisIfL1DefaultMetric, wfIisisCksumIsPdus=wfIisisCksumIsPdus, wfIisisAreaDelete=wfIisisAreaDelete, wfIisisIfIshHoldMultiplier=wfIisisIfIshHoldMultiplier, wfIisisIfStatsTable=wfIisisIfStatsTable, wfIisisAreaState=wfIisisAreaState, wfIisisIfStatsIpAddress=wfIisisIfStatsIpAddress, wfIisisAgePend=wfIisisAgePend, wfIisisGeneralGroup=wfIisisGeneralGroup, wfIisisCsnpBuildInterval=wfIisisCsnpBuildInterval, wfIisisL2LspBufferSize=wfIisisL2LspBufferSize, wfIisisIfTable=wfIisisIfTable, wfIisisIfRouterLevel=wfIisisIfRouterLevel, wfIisisL2LspDbOverLoads=wfIisisL2LspDbOverLoads, wfIisisIfIihHoldMultiplier=wfIisisIfIihHoldMultiplier, wfIisisIfStatsTxL1Psnp=wfIisisIfStatsTxL1Psnp, wfIisisIfStatsL1TxHellos=wfIisisIfStatsL1TxHellos, wfIisisIfDelete=wfIisisIfDelete, wfIisisMaximumPath=wfIisisMaximumPath, wfIisisDynNbrState=wfIisisDynNbrState, wfIisisL1LspHdrCksum=wfIisisL1LspHdrCksum, wfIisisIfStatsL2TxHellos=wfIisisIfStatsL2TxHellos, wfIisisIfL2DrPriority=wfIisisIfL2DrPriority, wfIisisIfStatsL1RxHellos=wfIisisIfStatsL1RxHellos, wfIisisIfIpAddress=wfIisisIfIpAddress, wfIisisRouterId=wfIisisRouterId, wfIisisAreaAddr=wfIisisAreaAddr, wfIisisL1LspHdrTable=wfIisisL1LspHdrTable, wfIisisAreaAddrAlias1=wfIisisAreaAddrAlias1, wfIisisDynNbrEntry=wfIisisDynNbrEntry, wfIisisDynNbrIfAddr=wfIisisDynNbrIfAddr, wfIisisRouterType=wfIisisRouterType, wfIisisDynNbrRtrId=wfIisisDynNbrRtrId, wfIisisL2LspPassword=wfIisisL2LspPassword, wfIisisDynNbrHoldTime=wfIisisDynNbrHoldTime, wfIisisIfStatsRxL1Psnp=wfIisisIfStatsRxL1Psnp, wfIisisIfStatsTxL1Csnp=wfIisisIfStatsTxL1Csnp, wfIisisAreaDisable=wfIisisAreaDisable, wfIisisIfCsnpTimer=wfIisisIfCsnpTimer, wfIisisPartialSNPInterval=wfIisisPartialSNPInterval, wfIisisIfStatsL2NbrCount=wfIisisIfStatsL2NbrCount, wfIisisIfStatsTxL1Lsp=wfIisisIfStatsTxL1Lsp, wfIisisL1CorruptedLsps=wfIisisL1CorruptedLsps, wfIisisDynNbrPseudonodeId=wfIisisDynNbrPseudonodeId, wfIisisIfL2DefaultMetric=wfIisisIfL2DefaultMetric, wfIisisAreaEntry=wfIisisAreaEntry, wfIisisIfStatsL1Drops=wfIisisIfStatsL1Drops, wfIisisL2SpfCnt=wfIisisL2SpfCnt, wfIisisMaxLSPGenerationInterval=wfIisisMaxLSPGenerationInterval, wfIisisIfStatsTxL2Lsp=wfIisisIfStatsTxL2Lsp, wfIisisIfDisable=wfIisisIfDisable, wfIisisGeneralDisable=wfIisisGeneralDisable, wfIisisStatsAddressLessIf=wfIisisStatsAddressLessIf, wfIisisNumL1Lsps=wfIisisNumL1Lsps, wfIisisL1LspHdrEntry=wfIisisL1LspHdrEntry, wfIisisDynNbrType=wfIisisDynNbrType, wfIisisSpfCnt=wfIisisSpfCnt, wfIisisIfStatsTxL2Csnp=wfIisisIfStatsTxL2Csnp, wfIisisDynNbrIpAddr=wfIisisDynNbrIpAddr, wfIisisNumL2Lsps=wfIisisNumL2Lsps, wfIisisGeneralState=wfIisisGeneralState, wfIisisMaxAreas=wfIisisMaxAreas, wfIisisIfStatsRxL2Psnp=wfIisisIfStatsRxL2Psnp, wfIisisL1LspHdrLspId=wfIisisL1LspHdrLspId, wfIisisDynNbrPriority=wfIisisDynNbrPriority, wfIisisL2LspHdrLspId=wfIisisL2LspHdrLspId, wfIisisNearestL2Is=wfIisisNearestL2Is, wfIisisL2LspHdrTable=wfIisisL2LspHdrTable, wfIisisIfStatsState=wfIisisIfStatsState, wfIisisIfStatsL2DesignatedRouter=wfIisisIfStatsL2DesignatedRouter, wfIisisL2LspHdrFlags=wfIisisL2LspHdrFlags, wfIisisZeroAgeLifetime=wfIisisZeroAgeLifetime, wfIisisIfStatsEntry=wfIisisIfStatsEntry, wfIisisMinLSPGenerationInterval=wfIisisMinLSPGenerationInterval, wfIisisIfStatsL2AdjCount=wfIisisIfStatsL2AdjCount, wfIisisAddressLessIf=wfIisisAddressLessIf, wfIisisNumL2Routes=wfIisisNumL2Routes, wfIisisL2CorruptedLsps=wfIisisL2CorruptedLsps, wfIisisIfStatsTxL2Psnp=wfIisisIfStatsTxL2Psnp, wfIisisL2LspHdrCksum=wfIisisL2LspHdrCksum, wfIisisMinLSPXmtInterval=wfIisisMinLSPXmtInterval, wfIisisMaxAge=wfIisisMaxAge, wfIisisL1LspHdrFlags=wfIisisL1LspHdrFlags, wfIisisIfL1DrPriority=wfIisisIfL1DrPriority, wfIisisIfStatsCct=wfIisisIfStatsCct, wfIisisIfHelloTimer=wfIisisIfHelloTimer, wfIisisIfStatsL1NbrCount=wfIisisIfStatsL1NbrCount, wfIisisIfStatsRxL2Csnp=wfIisisIfStatsRxL2Csnp, wfIisisDynNbrTable=wfIisisDynNbrTable)
