#
# PySNMP MIB module HPNSASOFTWARESUBSYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPNSASOFTWARESUBSYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:42:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, Counter64, TimeTicks, ModuleIdentity, Bits, iso, IpAddress, Counter32, NotificationType, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "Counter64", "TimeTicks", "ModuleIdentity", "Bits", "iso", "IpAddress", "Counter32", "NotificationType", "Gauge32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpnsaSW = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 24))
hpnsaSWMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 1))
hpnsaSWManageability = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2))
hpnsaSWDrivers = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3))
hpnsaSWMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWMibRevMajor.setDescription('The major revision level of the MIB.')
hpnsaSWMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWMibRevMinor.setDescription('The minor revision level of the MIB.')
hpnsaSWManageabilityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1), )
if mibBuilder.loadTexts: hpnsaSWManageabilityTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWManageabilityTable.setDescription('A table of manageability components that satisfy requests for this MIB. These include executables and agents.')
hpnsaSWManageabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1, 1), ).setIndexNames((0, "HPNSASOFTWARESUBSYSTEM-MIB", "hpnsaSWManageabilityIndex"))
if mibBuilder.loadTexts: hpnsaSWManageabilityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWManageabilityEntry.setDescription('A group of information describing the manageability component.')
hpnsaSWManageabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWManageabilityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWManageabilityIndex.setDescription('The unique index for the manageability component.')
hpnsaSWManageabilityFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWManageabilityFileName.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWManageabilityFileName.setDescription('The name of the manageability component that can be examined to identify this software component.')
hpnsaSWManageabilityFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWManageabilityFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWManageabilityFileSize.setDescription('The size in bytes the manageability component.')
hpnsaSWManageabilityFileDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWManageabilityFileDate.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWManageabilityFileDate.setDescription('The date on which this software was created. field octets contents range ------------------------------------------------- 1 1 years since 1900 0..138 2 2 month 1..12 3 3 day 1..31 4 4 hour 0..23 5 5 minute 0..59 6 6 second 0..59 ')
hpnsaSWManageabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("stopped", 1), ("start-pending", 2), ("stop-pending", 3), ("running", 4), ("continue-pending", 5), ("pause-pending", 6), ("paused", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWManageabilityState.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWManageabilityState.setDescription('The state of the manageability component.')
hpnsaSWManageabilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("agent", 1), ("service", 2), ("driver", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWManageabilityType.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWManageabilityType.setDescription('The type of the manageability component.')
hpnsaSWManageabilityVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWManageabilityVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWManageabilityVersion.setDescription('The version of the manageability component that can be examined to identify this software component.')
hpnsaSWManageabilityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWManageabilityDescription.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWManageabilityDescription.setDescription('The description of the manageability component that can be examined to identify this software component.')
hpnsaSWDriversTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1), )
if mibBuilder.loadTexts: hpnsaSWDriversTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWDriversTable.setDescription('A table of the driver components that satisfy requests for this MIB.')
hpnsaSWDriversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1, 1), ).setIndexNames((0, "HPNSASOFTWARESUBSYSTEM-MIB", "hpnsaSWDriversIndex"))
if mibBuilder.loadTexts: hpnsaSWDriversEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWDriversEntry.setDescription('A group of information describing the driver component.')
hpnsaSWDriversIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWDriversIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWDriversIndex.setDescription('The unique index for the driver component.')
hpnsaSWDriversFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWDriversFileName.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWDriversFileName.setDescription('The name of the driver component that can be examined to identify this software component.')
hpnsaSWDriversFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWDriversFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWDriversFileSize.setDescription('The size in bytes of the driver component.')
hpnsaSWDriversFileDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWDriversFileDate.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWDriversFileDate.setDescription('The date on which this driver was created. field octets contents range ------------------------------------------------- 1 1 years since 1900 0..138 2 2 month 1..12 3 3 day 1..31 4 4 hour 0..23 5 5 minute 0..59 6 6 second 0..59 ')
hpnsaSWDriversState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("stopped", 1), ("start-pending", 2), ("stop-pending", 3), ("running", 4), ("continue-pending", 5), ("pause-pending", 6), ("paused", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWDriversState.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWDriversState.setDescription('The state of the driver component.')
hpnsaSWDriversType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("networkinterfacecard", 1), ("scsi", 2), ("diskarraycontroller", 3), ("system", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWDriversType.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWDriversType.setDescription('The type of the driver component.')
hpnsaSWDriversVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWDriversVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWDriversVersion.setDescription('The version of the driver component that can be examined to identify this software component.')
hpnsaSWDriversDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 24, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSWDriversDescription.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSWDriversDescription.setDescription('The description of the driver component that can be examined to identify this software component.')
mibBuilder.exportSymbols("HPNSASOFTWARESUBSYSTEM-MIB", hpnsaSWManageabilityFileName=hpnsaSWManageabilityFileName, hpnsaSWDriversVersion=hpnsaSWDriversVersion, hpnsaSWDriversFileSize=hpnsaSWDriversFileSize, hpnsaSWDriversIndex=hpnsaSWDriversIndex, hpnsaSWMibRevMajor=hpnsaSWMibRevMajor, hpnsaSWDriversState=hpnsaSWDriversState, hpnsaSWDriversTable=hpnsaSWDriversTable, hpnsaSWManageabilityTable=hpnsaSWManageabilityTable, hpnsaSWManageabilityIndex=hpnsaSWManageabilityIndex, hpnsaSWManageabilityDescription=hpnsaSWManageabilityDescription, hpnsaSWMibRevMinor=hpnsaSWMibRevMinor, hpnsaSWManageabilityFileDate=hpnsaSWManageabilityFileDate, hpnsa=hpnsa, hpnsaSW=hpnsaSW, hpnsaSWDriversFileName=hpnsaSWDriversFileName, hpnsaSWDriversType=hpnsaSWDriversType, hpnsaSWManageabilityEntry=hpnsaSWManageabilityEntry, hpnsaSWMibRev=hpnsaSWMibRev, hp=hp, nm=nm, hpnsaSWManageabilityType=hpnsaSWManageabilityType, hpnsaSWDriversEntry=hpnsaSWDriversEntry, hpnsaSWManageabilityState=hpnsaSWManageabilityState, hpnsaSWDriversFileDate=hpnsaSWDriversFileDate, hpnsaSWManageabilityFileSize=hpnsaSWManageabilityFileSize, hpnsaSWDriversDescription=hpnsaSWDriversDescription, hpnsaSWManageability=hpnsaSWManageability, hpnsaSWDrivers=hpnsaSWDrivers, hpnsaSWManageabilityVersion=hpnsaSWManageabilityVersion)
