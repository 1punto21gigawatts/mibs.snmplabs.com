#
# PySNMP MIB module OPENWAVE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OPENWAVE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:35:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, ModuleIdentity, Unsigned32, IpAddress, iso, NotificationType, ObjectIdentity, Bits, MibIdentifier, Gauge32, NotificationType, Integer32, enterprises, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "ModuleIdentity", "Unsigned32", "IpAddress", "iso", "NotificationType", "ObjectIdentity", "Bits", "MibIdentifier", "Gauge32", "NotificationType", "Integer32", "enterprises", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

openwave = MibIdentifier((1, 3, 6, 1, 4, 1, 1900))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4))
upiInit = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 1))
upiInitDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 1, 1), )
if mibBuilder.loadTexts: upiInitDescriptionTable.setStatus('mandatory')
if mibBuilder.loadTexts: upiInitDescriptionTable.setDescription('the table holding UPInit identifying information')
upiInitDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 1, 1, 1), ).setIndexNames((0, "OPENWAVE-MIB", "upidInitIpAddr"), (0, "OPENWAVE-MIB", "upidInitProcessId"))
if mibBuilder.loadTexts: upiInitDescriptionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upiInitDescriptionEntry.setDescription('the entry associated with each UPInit process')
upidInitIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upidInitIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: upidInitIpAddr.setDescription('the ip address of the host running UPInit')
upidInitProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upidInitProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: upidInitProcessId.setDescription('the process id of UPInit')
upidInitVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upidInitVersion.setStatus('mandatory')
if mibBuilder.loadTexts: upidInitVersion.setDescription('the version of the UP system')
upidInitProcessType = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upidInitProcessType.setStatus('mandatory')
if mibBuilder.loadTexts: upidInitProcessType.setDescription('one of these : UPLInit, UPAdmInit, UPAppsInit')
upidInitHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upidInitHostName.setStatus('mandatory')
if mibBuilder.loadTexts: upidInitHostName.setDescription('the host name where the UPInit process runs')
upidInitStartupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upidInitStartupTime.setStatus('mandatory')
if mibBuilder.loadTexts: upidInitStartupTime.setDescription('the UPInit start up time')
upiInitStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2))
upiInitChildProcessTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 1), )
if mibBuilder.loadTexts: upiInitChildProcessTable.setStatus('mandatory')
if mibBuilder.loadTexts: upiInitChildProcessTable.setDescription('the table holding child process identifying information')
upiInitChildProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 1, 1), ).setIndexNames((0, "OPENWAVE-MIB", "upipInitIpAddr"), (0, "OPENWAVE-MIB", "upipInitProcessId"), (0, "OPENWAVE-MIB", "upipChildProcessId"))
if mibBuilder.loadTexts: upiInitChildProcessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upiInitChildProcessEntry.setDescription('the entry associated with each child process')
upipInitIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipInitIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: upipInitIpAddr.setDescription('the ip address of the host where UPInit runs')
upipInitProcessType = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipInitProcessType.setStatus('mandatory')
if mibBuilder.loadTexts: upipInitProcessType.setDescription('the UPInit process type: UPAdmInit, UPLInit or UPApsInit')
upipInitProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipInitProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: upipInitProcessId.setDescription('the UPInit process pid')
upipChildProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipChildProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: upipChildProcessId.setDescription('the child process pid')
upipChildProcessType = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipChildProcessType.setStatus('mandatory')
if mibBuilder.loadTexts: upipChildProcessType.setDescription('the child process type, e.g. Dispatcher, Agent')
upipChildProcessIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipChildProcessIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: upipChildProcessIpAddr.setDescription('the ip address of the host where the child process runs')
upipChildProcessHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipChildProcessHostName.setStatus('mandatory')
if mibBuilder.loadTexts: upipChildProcessHostName.setDescription('the name of the host where the child process runs')
upipChildProcessExePath = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipChildProcessExePath.setStatus('mandatory')
if mibBuilder.loadTexts: upipChildProcessExePath.setDescription('the execution path of the child process')
upipChildProcessExeArgs = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipChildProcessExeArgs.setStatus('mandatory')
if mibBuilder.loadTexts: upipChildProcessExeArgs.setDescription('the arguments used when exeuting the child process')
upipChildProcessState = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipChildProcessState.setStatus('mandatory')
if mibBuilder.loadTexts: upipChildProcessState.setDescription('the state of the child process')
upipChildProcessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipChildProcessStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upipChildProcessStatus.setDescription('how the child process is started')
upipChildProcessStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipChildProcessStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: upipChildProcessStartTime.setDescription('the child process start time')
upipChildProcessStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipChildProcessStopTime.setStatus('mandatory')
if mibBuilder.loadTexts: upipChildProcessStopTime.setDescription('the child process stop time')
upiInitChildProcessStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 2), )
if mibBuilder.loadTexts: upiInitChildProcessStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: upiInitChildProcessStatsTable.setDescription('the table holding child process statistics')
upiInitChildProcessStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 2, 1), ).setIndexNames((0, "OPENWAVE-MIB", "upipsInitIpAddr"), (0, "OPENWAVE-MIB", "upipsInitProcessId"), (0, "OPENWAVE-MIB", "upipsChildProcessType"))
if mibBuilder.loadTexts: upiInitChildProcessStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upiInitChildProcessStatsEntry.setDescription('the statistics associated with each child process type')
upipsInitIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipsInitIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: upipsInitIpAddr.setDescription(' the ip address of the host where UPInit runs')
upipsInitProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipsInitProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: upipsInitProcessId.setDescription(' the UPInit process pid')
upipsChildProcessType = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipsChildProcessType.setStatus('mandatory')
if mibBuilder.loadTexts: upipsChildProcessType.setDescription('the child process name, e.g. Dispatcher,Agent')
upipsInitProcessType = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipsInitProcessType.setStatus('mandatory')
if mibBuilder.loadTexts: upipsInitProcessType.setDescription(' the UPInit process name, e.g. UPLInit UPAdmInit')
upipsChildProcessesStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipsChildProcessesStarted.setStatus('mandatory')
if mibBuilder.loadTexts: upipsChildProcessesStarted.setDescription('the number of times processes of this type started')
upipsChildProcessesDied = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipsChildProcessesDied.setStatus('mandatory')
if mibBuilder.loadTexts: upipsChildProcessesDied.setDescription('the number of times processes of this type died')
upipsChildProcessesRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 1, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upipsChildProcessesRunning.setStatus('mandatory')
if mibBuilder.loadTexts: upipsChildProcessesRunning.setDescription('the number of times processes of this type running ')
upiInitTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 1, 20))
upitTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 1, 20, 1), DisplayString())
if mibBuilder.loadTexts: upitTrapInfo.setStatus('optional')
if mibBuilder.loadTexts: upitTrapInfo.setDescription('Text string which provides additional information about the trap.')
upitChildProcessHostName = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 1, 20, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upitChildProcessHostName.setStatus('mandatory')
if mibBuilder.loadTexts: upitChildProcessHostName.setDescription('the hostname of the host where child process runs')
upitChildProcessType = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 1, 20, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upitChildProcessType.setStatus('mandatory')
if mibBuilder.loadTexts: upitChildProcessType.setDescription('the child process type e.g. Dispatcher, Agent')
upitChildProcessId = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 1, 20, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upitChildProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: upitChildProcessId.setDescription('the child process id')
upiChildProcessStart = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 1) + (0,300)).setObjects(("OPENWAVE-MIB", "upidInitHostName"), ("OPENWAVE-MIB", "upidInitProcessType"), ("OPENWAVE-MIB", "upidInitProcessId"), ("OPENWAVE-MIB", "upitChildProcessHostName"), ("OPENWAVE-MIB", "upitChildProcessType"), ("OPENWAVE-MIB", "upitChildProcessId"), ("OPENWAVE-MIB", "upitTrapInfo"))
if mibBuilder.loadTexts: upiChildProcessStart.setDescription('An event that is generated when a child process is started/restarted.')
upiChildProcessShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 1) + (0,301)).setObjects(("OPENWAVE-MIB", "upidInitHostName"), ("OPENWAVE-MIB", "upidInitProcessType"), ("OPENWAVE-MIB", "upidInitProcessId"), ("OPENWAVE-MIB", "upitChildProcessHostName"), ("OPENWAVE-MIB", "upitChildProcessType"), ("OPENWAVE-MIB", "upitChildProcessId"), ("OPENWAVE-MIB", "upitTrapInfo"))
if mibBuilder.loadTexts: upiChildProcessShutdown.setDescription('An event that is generated when a child process is shut down. upitTrapInfo gives the condition.')
upiInitFailToStart = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 1) + (0,302)).setObjects(("OPENWAVE-MIB", "upidInitHostName"), ("OPENWAVE-MIB", "upidInitProcessType"), ("OPENWAVE-MIB", "upidInitProcessId"), ("OPENWAVE-MIB", "upitTrapInfo"))
if mibBuilder.loadTexts: upiInitFailToStart.setDescription('An event that is generated when UPInit is failed to start itself.')
upiInitShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 1) + (0,303)).setObjects(("OPENWAVE-MIB", "upidInitHostName"), ("OPENWAVE-MIB", "upidInitProcessType"), ("OPENWAVE-MIB", "upidInitProcessId"), ("OPENWAVE-MIB", "upitTrapInfo"))
if mibBuilder.loadTexts: upiInitShutdown.setDescription('An event that is generated when UPInit is about to shutdown itself.')
upiAllChildProcessesStop = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 1) + (0,304)).setObjects(("OPENWAVE-MIB", "upidInitHostName"), ("OPENWAVE-MIB", "upidInitProcessType"), ("OPENWAVE-MIB", "upidInitProcessId"), ("OPENWAVE-MIB", "upitTrapInfo"))
if mibBuilder.loadTexts: upiAllChildProcessesStop.setDescription('An event that is generated when UPInit is about to stop all child processes.')
upiAllChildProcessesRestart = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 1) + (0,305)).setObjects(("OPENWAVE-MIB", "upidInitHostName"), ("OPENWAVE-MIB", "upidInitProcessType"), ("OPENWAVE-MIB", "upidInitProcessId"), ("OPENWAVE-MIB", "upitTrapInfo"))
if mibBuilder.loadTexts: upiAllChildProcessesRestart.setDescription('An event that is generated when UPInit is about to restart all child process.')
upiDatabaseConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 1) + (0,306)).setObjects(("OPENWAVE-MIB", "upidInitHostName"), ("OPENWAVE-MIB", "upidInitProcessType"), ("OPENWAVE-MIB", "upidInitProcessId"), ("OPENWAVE-MIB", "upitTrapInfo"))
if mibBuilder.loadTexts: upiDatabaseConnectionDown.setDescription('An event that is generated when UPInit detects that the database is down.')
upiDatabaseConnectionUp = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 1) + (0,307)).setObjects(("OPENWAVE-MIB", "upidInitHostName"), ("OPENWAVE-MIB", "upidInitProcessType"), ("OPENWAVE-MIB", "upidInitProcessId"), ("OPENWAVE-MIB", "upitTrapInfo"))
if mibBuilder.loadTexts: upiDatabaseConnectionUp.setDescription('An event that is generated when UPInit detects that the database is back up.')
upiChildProcessFailToStart = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 1) + (0,308)).setObjects(("OPENWAVE-MIB", "upidInitHostName"), ("OPENWAVE-MIB", "upidInitProcessType"), ("OPENWAVE-MIB", "upidInitProcessId"), ("OPENWAVE-MIB", "upitChildProcessType"), ("OPENWAVE-MIB", "upitTrapInfo"))
if mibBuilder.loadTexts: upiChildProcessFailToStart.setDescription('An event that is generated when a child process fails to start.')
upiNoChildProcess = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 1) + (0,309)).setObjects(("OPENWAVE-MIB", "upidInitHostName"), ("OPENWAVE-MIB", "upidInitProcessType"), ("OPENWAVE-MIB", "upidInitProcessId"), ("OPENWAVE-MIB", "upitTrapInfo"))
if mibBuilder.loadTexts: upiNoChildProcess.setDescription('An event that is generated when no child process is started by this upiInit instance.')
upiChildProcessesBelowMinimum = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 1) + (0,310)).setObjects(("OPENWAVE-MIB", "upidInitHostName"), ("OPENWAVE-MIB", "upidInitProcessType"), ("OPENWAVE-MIB", "upidInitProcessId"), ("OPENWAVE-MIB", "upitChildProcessType"), ("OPENWAVE-MIB", "upitTrapInfo"))
if mibBuilder.loadTexts: upiChildProcessesBelowMinimum.setDescription('An event that is generated when the number of child processes started by means of TCP-Connect mechanism as defined in the cfg_init_tab becomes less than 2. This really applies to number of agents in most cases')
upLink = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2))
upLinkProcesses = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1))
uplDispatcher = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1))
uplDispatcherDescription = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 1))
upldHostName = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upldHostName.setStatus('mandatory')
if mibBuilder.loadTexts: upldHostName.setDescription('Name of the host on which dispatcher resides.')
upldProcessId = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upldProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: upldProcessId.setDescription('Process ID for the dispatcher.')
upldPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upldPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: upldPortNumber.setDescription('Port number the dispatcher uses to listen for incomming airlink requests.')
upldStartUpTime = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upldStartUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: upldStartUpTime.setDescription('Time the dispatcher started.')
upldState = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("regular", 1), ("redirect", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upldState.setStatus('mandatory')
if mibBuilder.loadTexts: upldState.setDescription('The state of the dispatcher: regular: routes airlink requests to UPLAgents; redirect: routes airlink requests to other UPLDispatchers permanently.')
uplDispatcherStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 2))
upldRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upldRequestsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: upldRequestsReceived.setDescription('Requests that have been received since the dispatcher started.')
upldRequestsDropped = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upldRequestsDropped.setStatus('mandatory')
if mibBuilder.loadTexts: upldRequestsDropped.setDescription('Requests that have been dropped due to lack of resources since the dispatcher started.')
upldUplAgentsLoaded = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upldUplAgentsLoaded.setStatus('mandatory')
if mibBuilder.loadTexts: upldUplAgentsLoaded.setDescription('Total number of agents currently loaded in the dispatcher.')
upldUplAgentsDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upldUplAgentsDisconnected.setStatus('mandatory')
if mibBuilder.loadTexts: upldUplAgentsDisconnected.setDescription('Total number of agents currently disconnected among all the agents loaded in the dispatcher.')
upldSubscribersLoaded = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upldSubscribersLoaded.setStatus('mandatory')
if mibBuilder.loadTexts: upldSubscribersLoaded.setDescription('Total number of subscribers currently loaded in the dispatcher.')
upldKeyExchanges = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upldKeyExchanges.setStatus('mandatory')
if mibBuilder.loadTexts: upldKeyExchanges.setDescription('Number of key exchanges since the dispatcher started.')
uplDispRadiusClientStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 3))
upldTotalMappingTableHits = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upldTotalMappingTableHits.setStatus('mandatory')
if mibBuilder.loadTexts: upldTotalMappingTableHits.setDescription('The total number of CLID mapping table database hits made since the uplDispatcher started.')
upldSuccessfulMappingHits = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upldSuccessfulMappingHits.setStatus('mandatory')
if mibBuilder.loadTexts: upldSuccessfulMappingHits.setDescription('The number of successful CLID mapping hits made on the database since the uplDispatcher started.')
upldFailedMappingHits = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upldFailedMappingHits.setStatus('mandatory')
if mibBuilder.loadTexts: upldFailedMappingHits.setDescription('The number of failed CLID mapping hits made on the database since the uplDispatcher started.')
uplDispatcherTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 20))
upldTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 20, 1), DisplayString())
if mibBuilder.loadTexts: upldTrapInfo.setStatus('optional')
if mibBuilder.loadTexts: upldTrapInfo.setDescription('Text string which provides additional information about the trap.')
upldUplAgentId = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 1, 20, 2), Integer32())
if mibBuilder.loadTexts: upldUplAgentId.setStatus('optional')
if mibBuilder.loadTexts: upldUplAgentId.setDescription('The UPLAgent identifier related to the trap.')
upldStartup = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,100)).setObjects(("OPENWAVE-MIB", "upldHostName"), ("OPENWAVE-MIB", "upldProcessId"), ("OPENWAVE-MIB", "upldTrapInfo"))
if mibBuilder.loadTexts: upldStartup.setDescription('An event that is generated when the dispatcher is started.')
upldShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,101)).setObjects(("OPENWAVE-MIB", "upldHostName"), ("OPENWAVE-MIB", "upldProcessId"), ("OPENWAVE-MIB", "upldTrapInfo"))
if mibBuilder.loadTexts: upldShutdown.setDescription('An event that is generated when the dispatcher is shut down. upldTrapInfo gives the condition.')
upldInvalidConfig = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,102)).setObjects(("OPENWAVE-MIB", "upldHostName"), ("OPENWAVE-MIB", "upldProcessId"), ("OPENWAVE-MIB", "upldTrapInfo"))
if mibBuilder.loadTexts: upldInvalidConfig.setDescription('An event that is generated when the dispatcher detects an invalid configuration. upldTrapInfo gives the configuration name.')
upldUplAgentConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,103)).setObjects(("OPENWAVE-MIB", "upldHostName"), ("OPENWAVE-MIB", "upldProcessId"), ("OPENWAVE-MIB", "upldUplAgentId"), ("OPENWAVE-MIB", "upldTrapInfo"))
if mibBuilder.loadTexts: upldUplAgentConnectionDown.setDescription('An event that is generated when the dispatcher detects that the connection to the UPLAgent is down. The UPLAgent is identified by upldAgentId. upldTrapInfo gives the host name where the UPLAgent resides.')
upldDatabaseConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,104)).setObjects(("OPENWAVE-MIB", "upldHostName"), ("OPENWAVE-MIB", "upldProcessId"), ("OPENWAVE-MIB", "upldTrapInfo"))
if mibBuilder.loadTexts: upldDatabaseConnectionDown.setDescription('An event that is generated when the dispatcher detects that the database is down.')
upldOutOfResouce = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,105)).setObjects(("OPENWAVE-MIB", "upldHostName"), ("OPENWAVE-MIB", "upldProcessId"), ("OPENWAVE-MIB", "upldTrapInfo"))
if mibBuilder.loadTexts: upldOutOfResouce.setDescription('An event that is generated when the dispatcher detects an out-of-resource condition. upldTrapInfo gives the resource name')
upldUplAgentConnectionUp = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,106)).setObjects(("OPENWAVE-MIB", "upldHostName"), ("OPENWAVE-MIB", "upldProcessId"), ("OPENWAVE-MIB", "upldUplAgentId"), ("OPENWAVE-MIB", "upldTrapInfo"))
if mibBuilder.loadTexts: upldUplAgentConnectionUp.setDescription('An event that is generated when the dispatcher detects that the connection to the UPLAgent has come up. The UPLAgent is identified by upldAgentId. upldTrapInfo gives the host name where the UPLAgent resides.')
upldDatabaseConnectionUp = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,107)).setObjects(("OPENWAVE-MIB", "upldHostName"), ("OPENWAVE-MIB", "upldProcessId"), ("OPENWAVE-MIB", "upldTrapInfo"))
if mibBuilder.loadTexts: upldDatabaseConnectionUp.setDescription('An event that is generated when the dispatcher detects that the database has come into service.')
upldUplRadiusConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,108)).setObjects(("OPENWAVE-MIB", "upldHostName"), ("OPENWAVE-MIB", "upldProcessId"), ("OPENWAVE-MIB", "upldTrapInfo"))
if mibBuilder.loadTexts: upldUplRadiusConnectionDown.setDescription('An event that is generated when the dispatcher detects that the connection to the UPLRadius is down. upldTrapInfo gives the host name where the UPLRadius resides.')
uplAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2))
uplAgentDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 1), )
if mibBuilder.loadTexts: uplAgentDescriptionTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentDescriptionTable.setDescription('The table holding uplAgent identifying information.')
uplAgentDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 1, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplaAgentIdentifier"))
if mibBuilder.loadTexts: uplAgentDescriptionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentDescriptionEntry.setDescription('The entry associated with each uplAgent.')
uplaAgentIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaAgentIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uplaAgentIdentifier.setDescription('The unique identifier for each uplAgent.')
uplaHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaHostName.setStatus('mandatory')
if mibBuilder.loadTexts: uplaHostName.setDescription('The host name of the uplAgent host.')
uplaProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: uplaProcessId.setDescription('The process id for the uplAgent.')
uplaStartUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaStartUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: uplaStartUpTime.setDescription('The date and time the uplAgent started.')
uplAgentProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2))
uplAgentWebAccessStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 1), )
if mibBuilder.loadTexts: uplAgentWebAccessStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentWebAccessStatsTable.setDescription('The table holding Web access statistics.')
uplAgentWebAccessStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 1, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplawsAgentIdentifier"))
if mibBuilder.loadTexts: uplAgentWebAccessStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentWebAccessStatsEntry.setDescription('The entry associated with each uplAgent.')
uplawsAgentIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplawsAgentIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uplawsAgentIdentifier.setDescription('The unique identifier for each uplAgent.')
uplaHttpRequestsStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaHttpRequestsStarted.setStatus('mandatory')
if mibBuilder.loadTexts: uplaHttpRequestsStarted.setDescription('Number of http requests initiated since the uplAgent started.')
uplaHttpRequestsSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaHttpRequestsSucceeded.setStatus('mandatory')
if mibBuilder.loadTexts: uplaHttpRequestsSucceeded.setDescription('Number of http requests that succeeded among all http requests initiated since the uplAgent started.')
uplaHttpMeanResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaHttpMeanResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: uplaHttpMeanResponseTime.setDescription('Mean response time in milliseconds for http requests.')
uplaHttpDeviationOfResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaHttpDeviationOfResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: uplaHttpDeviationOfResponseTime.setDescription('Standard Deviation of uplaHttpMeanResponseTime.')
uplaHttpsRequestsStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaHttpsRequestsStarted.setStatus('mandatory')
if mibBuilder.loadTexts: uplaHttpsRequestsStarted.setDescription('Number of https requests initiated since the uplAgent started.')
uplaHttpsRequestsSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaHttpsRequestsSucceeded.setStatus('mandatory')
if mibBuilder.loadTexts: uplaHttpsRequestsSucceeded.setDescription('Number of https requests that succeeded among all https requests initiated since the uplAgent started.')
uplaHttpsMeanResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaHttpsMeanResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: uplaHttpsMeanResponseTime.setDescription('Mean response time in milliseconds for https requests.')
uplaHttpsDeviationOfResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaHttpsDeviationOfResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: uplaHttpsDeviationOfResponseTime.setDescription('Standard deviation of uplaHttpsMeanResponseTime.')
uplAgentErrorStatsSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 2), )
if mibBuilder.loadTexts: uplAgentErrorStatsSummaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentErrorStatsSummaryTable.setDescription('The table holding error-summary statistics.')
uplAgentErrorStatsSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 2, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplaesAgentIdentifier"))
if mibBuilder.loadTexts: uplAgentErrorStatsSummaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentErrorStatsSummaryEntry.setDescription('The entry associated with each uplAgent.')
uplaesAgentIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaesAgentIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uplaesAgentIdentifier.setDescription('The unique identifier for each uplAgent.')
uplaTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaTotalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: uplaTotalErrors.setDescription('Total number of errors that have occurred since the uplAgent started.')
uplaSilentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaSilentErrors.setStatus('mandatory')
if mibBuilder.loadTexts: uplaSilentErrors.setDescription('Number of error occurrences for the silent class of errors since the uplAgent started. The silent class of errors refers to errors caused by client requests, but for which the uplAgent does not send the errors back to the client.')
uplaDeviceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaDeviceErrors.setStatus('mandatory')
if mibBuilder.loadTexts: uplaDeviceErrors.setDescription('Number of error occurences for the device class of errors since the uplAgent started. The device class of errors refers to unregistered and unsupported devices.')
uplaKeyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaKeyErrors.setStatus('mandatory')
if mibBuilder.loadTexts: uplaKeyErrors.setDescription('Number of error occurrences for the key class of errors since the uplAgent started. The key class of errors refers to encryption key mismatch and unsupported encryption algorithms/configurations.')
uplaSessionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaSessionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: uplaSessionErrors.setDescription('Number of error occurrences for the session class of errors since the uplAgent started. The session class of errors refers to invalid sessions.')
uplaTransactionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaTransactionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: uplaTransactionErrors.setDescription('Number of error occurrences for the transaction class of errors since the uplAgent started. The transaction class of errors refers to all errors occurring while the transaction is conducted.')
uplaOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaOtherErrors.setStatus('mandatory')
if mibBuilder.loadTexts: uplaOtherErrors.setDescription('Number of error occurrences for all other errors since the uplAgent started. It is simply TotalErrors minus all the named class errors.')
uplAgentErrorStatsDetailTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 3), )
if mibBuilder.loadTexts: uplAgentErrorStatsDetailTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentErrorStatsDetailTable.setDescription('The table holding detailed error statistics.')
uplAgentErrorStatsDetailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 3, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplaedAgentIdentifier"), (0, "OPENWAVE-MIB", "uplaErrorCode"))
if mibBuilder.loadTexts: uplAgentErrorStatsDetailEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentErrorStatsDetailEntry.setDescription('The entry associated with each error code in an uplAgent.')
uplaedAgentIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaedAgentIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uplaedAgentIdentifier.setDescription('The unique identifier for each uplAgent.')
uplaErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: uplaErrorCode.setDescription('The error code as defined in uplAgent.')
uplaErrorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaErrorName.setStatus('mandatory')
if mibBuilder.loadTexts: uplaErrorName.setDescription('A text string describing the error name.')
uplaErrorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaErrorSeverity.setStatus('optional')
if mibBuilder.loadTexts: uplaErrorSeverity.setDescription('Error severity. 1 is the highest.')
uplaErrorClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("silent", 1), ("device", 2), ("key", 3), ("session", 4), ("transaction", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaErrorClass.setStatus('mandatory')
if mibBuilder.loadTexts: uplaErrorClass.setDescription('Error class identifier.')
uplaErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: uplaErrorCount.setDescription('Number of times the error has occurred since the uplAgent started.')
uplHdtpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3))
uplAgentSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 1), )
if mibBuilder.loadTexts: uplAgentSessionStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentSessionStatsTable.setDescription('The table holding uplAgent session statistics.')
uplAgentSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 1, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplassAgentIdentifier"))
if mibBuilder.loadTexts: uplAgentSessionStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentSessionStatsEntry.setDescription('The entry associated with each uplAgent.')
uplassAgentIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplassAgentIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uplassAgentIdentifier.setDescription('The unique identifier for each uplAgent.')
uplaActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaActiveSessions.setStatus('mandatory')
if mibBuilder.loadTexts: uplaActiveSessions.setDescription('Number of active sessions currently in the uplAgent.')
uplaEncryptedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaEncryptedSessions.setStatus('mandatory')
if mibBuilder.loadTexts: uplaEncryptedSessions.setDescription('Number of sessions that use encryption among all active sessions in the uplAgent.')
uplaProtoSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaProtoSessions.setStatus('mandatory')
if mibBuilder.loadTexts: uplaProtoSessions.setDescription('Number of proto sessions that do not complete the session-creation procedure currently in the uplAgent.')
uplaSessionsStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaSessionsStarted.setStatus('mandatory')
if mibBuilder.loadTexts: uplaSessionsStarted.setDescription('Number of sessions started since the uplAgent started.')
uplaSessionsSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaSessionsSucceeded.setStatus('mandatory')
if mibBuilder.loadTexts: uplaSessionsSucceeded.setDescription('Number of sessions that have completed the session-creation procedure among all sessions started since the uplAgent started.')
uplaKeyExchanges = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaKeyExchanges.setStatus('mandatory')
if mibBuilder.loadTexts: uplaKeyExchanges.setDescription('Number of key exchanges that have completed since the uplAgent started.')
uplAgentAirLinkStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 2), )
if mibBuilder.loadTexts: uplAgentAirLinkStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: uplAgentAirLinkStatsTable.setDescription('The table holding uplAgent airlink traffic statistics.')
uplAgentAirLinkStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 2, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplaasAgentIdentifier"))
if mibBuilder.loadTexts: uplAgentAirLinkStatsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: uplAgentAirLinkStatsEntry.setDescription('The entry associated with each uplAgent.')
uplaasAgentIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaasAgentIdentifier.setStatus('deprecated')
if mibBuilder.loadTexts: uplaasAgentIdentifier.setDescription('The unique identifier for each uplAgent.')
uplaRequestsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaRequestsReceived.setStatus('deprecated')
if mibBuilder.loadTexts: uplaRequestsReceived.setDescription("Number of requests that have been received by uplAgent since it started. Ack, Cancel, and SessComplete PDU's are not counted.")
uplaRequestsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaRequestsDropped.setStatus('deprecated')
if mibBuilder.loadTexts: uplaRequestsDropped.setDescription("Number of requests that have been dropped since the UPLagent started. Dropped requests include duplicated, invalid, and out of sequence PDU's.")
uplaRequestsDuplicated = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaRequestsDuplicated.setStatus('deprecated')
if mibBuilder.loadTexts: uplaRequestsDuplicated.setDescription('Number of duplicated requests that have been received since the uplAgent started.')
uplaRequestsNotValid = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaRequestsNotValid.setStatus('deprecated')
if mibBuilder.loadTexts: uplaRequestsNotValid.setDescription('Number of invalid requests that have been received since the uplAgent started.')
uplaRepliesDelivered = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaRepliesDelivered.setStatus('deprecated')
if mibBuilder.loadTexts: uplaRepliesDelivered.setDescription('Number of replies that have been successfully delivered to the browser client since the uplAgent started.')
uplaRepliesTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaRepliesTimedOut.setStatus('deprecated')
if mibBuilder.loadTexts: uplaRepliesTimedOut.setDescription('Number of replies not delivered due to timeout since the uplAgent started.')
uplAgentTransactionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 3), )
if mibBuilder.loadTexts: uplAgentTransactionStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentTransactionStatsTable.setDescription('The table holding uplAgent transaction statistics.')
uplAgentTransactionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 3, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplatsAgentIdentifier"))
if mibBuilder.loadTexts: uplAgentTransactionStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentTransactionStatsEntry.setDescription('The entry associated with each uplAgent.')
uplatsAgentIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplatsAgentIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uplatsAgentIdentifier.setDescription('The unique identifier for each uplAgent.')
uplaTransactionsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaTransactionsActive.setStatus('mandatory')
if mibBuilder.loadTexts: uplaTransactionsActive.setDescription('Number of active transactions currently in the uplAgent.')
uplaTransactionsStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaTransactionsStarted.setStatus('mandatory')
if mibBuilder.loadTexts: uplaTransactionsStarted.setDescription('Number of transactions that have started since the uplAgent started.')
uplaTransactionsSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaTransactionsSucceeded.setStatus('mandatory')
if mibBuilder.loadTexts: uplaTransactionsSucceeded.setDescription('Number of transactions that have succeeded among all transactions started since the uplAgent started.')
uplaMeanTransactionLife = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaMeanTransactionLife.setStatus('mandatory')
if mibBuilder.loadTexts: uplaMeanTransactionLife.setDescription('Mean transaction lifetime measured in milliseconds.')
uplaDeviationOfTransactionLife = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaDeviationOfTransactionLife.setStatus('mandatory')
if mibBuilder.loadTexts: uplaDeviationOfTransactionLife.setDescription('Standard deviation of uplaMeanTransactionLife.')
uplaMeanResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaMeanResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: uplaMeanResponseTime.setDescription("Mean transaction response time in milliseconds,as measured from the browser's point of view.")
uplaDeviationOfResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaDeviationOfResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: uplaDeviationOfResponseTime.setDescription('Standard deviation of uplaMeanResponseTime.')
uplaMeanRetriesPerThousandTxn = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaMeanRetriesPerThousandTxn.setStatus('mandatory')
if mibBuilder.loadTexts: uplaMeanRetriesPerThousandTxn.setDescription('Number of retransmitted requests for every one thousand completed transactions.')
uplaDeviationOfRetriesPTTxn = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaDeviationOfRetriesPTTxn.setStatus('mandatory')
if mibBuilder.loadTexts: uplaDeviationOfRetriesPTTxn.setDescription('Standard deviation of uplaMeanRetriesPerThousandTxn.')
uplAgentLimitedResourceTable = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 3, 6), Integer32())
if mibBuilder.loadTexts: uplAgentLimitedResourceTable.setStatus('deprecated')
if mibBuilder.loadTexts: uplAgentLimitedResourceTable.setDescription('The table holding information about limited resource usage.')
uplaWapStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4))
uplAgentWapWSPSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 1), )
if mibBuilder.loadTexts: uplAgentWapWSPSessionStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentWapWSPSessionStatsTable.setDescription('The table holding uplAgent WAP session statistics.')
uplAgentWapSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 1, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplawssAgentIdentifier"))
if mibBuilder.loadTexts: uplAgentWapSessionStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentWapSessionStatsEntry.setDescription('The entry associated with each uplAgent.')
uplawssAgentIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplawssAgentIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uplawssAgentIdentifier.setDescription('The unique identifier for each uplAgent.')
uplaActiveWapSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaActiveWapSessions.setStatus('mandatory')
if mibBuilder.loadTexts: uplaActiveWapSessions.setDescription('')
uplaWapSessionsStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaWapSessionsStarted.setStatus('mandatory')
if mibBuilder.loadTexts: uplaWapSessionsStarted.setDescription('')
uplAgentWapWTPTransactionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 2), )
if mibBuilder.loadTexts: uplAgentWapWTPTransactionStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentWapWTPTransactionStatsTable.setDescription('The table holding uplAgent WAP Transaction layer statistics.')
uplAgentWapTransactionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 2, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplawtsAgentIdentifier"))
if mibBuilder.loadTexts: uplAgentWapTransactionStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentWapTransactionStatsEntry.setDescription('The entry associated with each uplAgent.')
uplawtsAgentIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplawtsAgentIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uplawtsAgentIdentifier.setDescription('The unique identifier for each uplAgent.')
uplaWapInvokeTpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaWapInvokeTpdus.setStatus('mandatory')
if mibBuilder.loadTexts: uplaWapInvokeTpdus.setDescription('')
uplaWapResultTpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaWapResultTpdus.setStatus('mandatory')
if mibBuilder.loadTexts: uplaWapResultTpdus.setDescription('')
uplaWapAbortTransaction = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaWapAbortTransaction.setStatus('mandatory')
if mibBuilder.loadTexts: uplaWapAbortTransaction.setDescription('')
uplAgentWapErrorStatsSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 3), )
if mibBuilder.loadTexts: uplAgentWapErrorStatsSummaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentWapErrorStatsSummaryTable.setDescription('The table holding WAP stack related error-summary statistics.')
uplAgentWapErrorStatsSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 3, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplawesAgentIdentifier"))
if mibBuilder.loadTexts: uplAgentWapErrorStatsSummaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentWapErrorStatsSummaryEntry.setDescription('The entry associated with each uplAgent.')
uplawesAgentIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplawesAgentIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uplawesAgentIdentifier.setDescription('The unique identifier for each uplAgent.')
uplaTotalWapErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaTotalWapErrors.setStatus('mandatory')
if mibBuilder.loadTexts: uplaTotalWapErrors.setDescription('Total number of WAP stack errors that have occurred since the uplAgent started.')
uplaOtherWapErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaOtherWapErrors.setStatus('mandatory')
if mibBuilder.loadTexts: uplaOtherWapErrors.setDescription('Number of error occurrences for all other errors since the uplAgent started. It is simply TotalErrors minus all the named class errors.')
uplaSessionWapErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaSessionWapErrors.setStatus('mandatory')
if mibBuilder.loadTexts: uplaSessionWapErrors.setDescription('Number of error occurrences for the WAP session class of errors since the uplAgent started. The session class of errors refers to invalid sessions.')
uplaTransactionWapErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaTransactionWapErrors.setStatus('mandatory')
if mibBuilder.loadTexts: uplaTransactionWapErrors.setDescription('Number of error occurrences for the WAP transaction class of errors since the uplAgent started. The transaction class of errors refers to all errors occurring while the transaction is conducted.')
uplAgentWapErrorStatsDetailTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 4), )
if mibBuilder.loadTexts: uplAgentWapErrorStatsDetailTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentWapErrorStatsDetailTable.setDescription('The table holding detailed error statistics.')
uplAgentWapErrorStatsDetailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 4, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplaweAgentIdentifier"), (0, "OPENWAVE-MIB", "uplaWapErrorCode"))
if mibBuilder.loadTexts: uplAgentWapErrorStatsDetailEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentWapErrorStatsDetailEntry.setDescription('The entry associated with each error code in an uplAgent.')
uplaweAgentIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaweAgentIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uplaweAgentIdentifier.setDescription('The unique identifier for each uplAgent.')
uplaWapErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaWapErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: uplaWapErrorCode.setDescription('The error code as defined in uplAgent.')
uplaWapErrorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaWapErrorName.setStatus('mandatory')
if mibBuilder.loadTexts: uplaWapErrorName.setDescription('A text string describing the error name.')
uplaWapErrorSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaWapErrorSeverity.setStatus('optional')
if mibBuilder.loadTexts: uplaWapErrorSeverity.setDescription('Error severity. 1 is the highest.')
uplaWapErrorClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("session", 2), ("txn", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaWapErrorClass.setStatus('mandatory')
if mibBuilder.loadTexts: uplaWapErrorClass.setDescription('Error class identifier.')
uplaWapErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaWapErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: uplaWapErrorCount.setDescription('Number of times the error has occurred since the uplAgent started.')
uplaStackServiceStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5))
uplAgentStackServiceTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5, 1), )
if mibBuilder.loadTexts: uplAgentStackServiceTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentStackServiceTable.setDescription('The table holding UP.Link Stack Service data for each Agent. The static information is obtained from the Oracle database which is configured via the Admin GUI. The dynamic information is kept up to date by the process.')
uplAgentStackServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5, 1, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplasstAgentIdentifier"), (0, "OPENWAVE-MIB", "uplAgentStackServiceIdentifier"))
if mibBuilder.loadTexts: uplAgentStackServiceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentStackServiceEntry.setDescription('The entry associated with Stack Services for each Agent.')
uplasstAgentIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplasstAgentIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uplasstAgentIdentifier.setDescription('The unique identifier for each uplAgent.')
uplAgentStackServiceIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplAgentStackServiceIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentStackServiceIdentifier.setDescription('The unique identifier for each Stack Service.')
uplAgentStackServiceAppProtoName = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplAgentStackServiceAppProtoName.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentStackServiceAppProtoName.setDescription('AppProtName.')
uplAgentStackServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplAgentStackServiceName.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentStackServiceName.setDescription('AppProtName + Bearer + Tunnel Proto.')
uplAgentStackServiceLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notloaded", 1), ("loaded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplAgentStackServiceLoaded.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentStackServiceLoaded.setDescription('Has the Stack Service been loaded: (1) No (2) Yes.')
uplAgentStackServiceAdaptorThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplAgentStackServiceAdaptorThreads.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentStackServiceAdaptorThreads.setDescription('The number of Adaptor threads for this Stack Service.')
uplAgentStackServiceWDPPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplAgentStackServiceWDPPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentStackServiceWDPPortNumber.setDescription('The WDP Port number for this Stack Service.')
uplAgentStackServiceTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplAgentStackServiceTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentStackServiceTableSize.setDescription('The value of the StackSvcNumBuckets configuration parameter.')
uplAgentStackServiceMeanTableItems = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplAgentStackServiceMeanTableItems.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentStackServiceMeanTableItems.setDescription('Mean number of total items in a stack table.')
uplAgentStackServiceMeanTableItemsDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplAgentStackServiceMeanTableItemsDeviation.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentStackServiceMeanTableItemsDeviation.setDescription('Std. deviation from mean number of total items in a stack table.')
uplAgentStackServiceMeanBucketChainLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplAgentStackServiceMeanBucketChainLength.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentStackServiceMeanBucketChainLength.setDescription('Mean length of bucket chain in a stack table.')
uplAgentStackServiceMeanBucketChainLengthDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplAgentStackServiceMeanBucketChainLengthDeviation.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentStackServiceMeanBucketChainLengthDeviation.setDescription('Std. deviation from mean length of bucket chain in a stack table.')
uplAgentStackServiceTableMeanNumberItemsGarbageCollected = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplAgentStackServiceTableMeanNumberItemsGarbageCollected.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentStackServiceTableMeanNumberItemsGarbageCollected.setDescription('Mean number of items removed per garbage collection run.')
uplAgentStackServiceTableMeanNumberItemsGarbageCollectedDeviatn = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplAgentStackServiceTableMeanNumberItemsGarbageCollectedDeviatn.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentStackServiceTableMeanNumberItemsGarbageCollectedDeviatn.setDescription('Std. deviation from mean number of items removed per garbage collection run.')
uplAgentStackServiceMeanGarbageCollectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplAgentStackServiceMeanGarbageCollectTime.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentStackServiceMeanGarbageCollectTime.setDescription('Mean time, in milliseconds, to garbage collect for a stack service.')
uplAgentStackServiceMeanGarbageCollectTimeDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 5, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplAgentStackServiceMeanGarbageCollectTimeDeviation.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentStackServiceMeanGarbageCollectTimeDeviation.setDescription('Std. deviation from mean time to garbage collect for a stack service.')
uplaRadiusClientStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 6))
uplAgentRadiusClientStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 6, 1), )
if mibBuilder.loadTexts: uplAgentRadiusClientStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentRadiusClientStatsTable.setDescription('The table holding uplAgent Radius Client statistics.')
uplAgentRadiusClientStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 6, 1, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplarcsAgentIdentifier"))
if mibBuilder.loadTexts: uplAgentRadiusClientStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplAgentRadiusClientStatsEntry.setDescription('The entry associated with each uplAgent.')
uplarcsAgentIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplarcsAgentIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uplarcsAgentIdentifier.setDescription('The unique identifier for each uplAgent.')
uplaTotalMappingTableHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaTotalMappingTableHits.setStatus('mandatory')
if mibBuilder.loadTexts: uplaTotalMappingTableHits.setDescription('The total number of CLID mapping table database hits made since the uplAgent started.')
uplaSuccessfulMappingHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaSuccessfulMappingHits.setStatus('mandatory')
if mibBuilder.loadTexts: uplaSuccessfulMappingHits.setDescription('The number of successful CLID mapping hits made on the database since the uplAgent started.')
uplaFailedMappingHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplaFailedMappingHits.setStatus('mandatory')
if mibBuilder.loadTexts: uplaFailedMappingHits.setDescription('The number of failed CLID mapping hits made on the database since the uplAgent started.')
uplAgentTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 20))
uplaTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 2, 20, 1), DisplayString())
if mibBuilder.loadTexts: uplaTrapInfo.setStatus('optional')
if mibBuilder.loadTexts: uplaTrapInfo.setDescription('Text string that provides additional information about the trap.')
uplaStartup = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,200)).setObjects(("OPENWAVE-MIB", "uplaAgentIdentifier"), ("OPENWAVE-MIB", "uplaHostName"), ("OPENWAVE-MIB", "uplaProcessId"), ("OPENWAVE-MIB", "uplaTrapInfo"))
if mibBuilder.loadTexts: uplaStartup.setDescription('An event that is generated when the uplAgent is started.')
uplaShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,201)).setObjects(("OPENWAVE-MIB", "uplaAgentIdentifier"), ("OPENWAVE-MIB", "uplaHostName"), ("OPENWAVE-MIB", "uplaProcessId"), ("OPENWAVE-MIB", "uplaTrapInfo"))
if mibBuilder.loadTexts: uplaShutdown.setDescription('An event that is generated when the uplAgent is shut down. uplaTrapInfo gives the reason for the shutdown.')
uplaDatabaseConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,202)).setObjects(("OPENWAVE-MIB", "uplaAgentIdentifier"), ("OPENWAVE-MIB", "uplaHostName"), ("OPENWAVE-MIB", "uplaProcessId"), ("OPENWAVE-MIB", "uplaTrapInfo"))
if mibBuilder.loadTexts: uplaDatabaseConnectionDown.setDescription('An event that is generated when the uplAgent detects that the database connection is down.')
uplaFaxMgrConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,203)).setObjects(("OPENWAVE-MIB", "uplaAgentIdentifier"), ("OPENWAVE-MIB", "uplaHostName"), ("OPENWAVE-MIB", "uplaProcessId"), ("OPENWAVE-MIB", "uplaTrapInfo"))
if mibBuilder.loadTexts: uplaFaxMgrConnectionDown.setDescription('An event that is generated when the uplAgent detects that the fax manager is down.')
uplaMessengerConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,204)).setObjects(("OPENWAVE-MIB", "uplaAgentIdentifier"), ("OPENWAVE-MIB", "uplaHostName"), ("OPENWAVE-MIB", "uplaProcessId"), ("OPENWAVE-MIB", "uplaTrapInfo"))
if mibBuilder.loadTexts: uplaMessengerConnectionDown.setDescription('An event that is generated when the uplAgent detects that the messenger is down.')
uplaInvalidConfig = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,205)).setObjects(("OPENWAVE-MIB", "uplaAgentIdentifier"), ("OPENWAVE-MIB", "uplaHostName"), ("OPENWAVE-MIB", "uplaProcessId"), ("OPENWAVE-MIB", "uplaTrapInfo"))
if mibBuilder.loadTexts: uplaInvalidConfig.setDescription('An event that is generated when the uplAgent detects an invalid configuration. uplaTrapInfo gives the configuration name.')
uplaInternalFatalErrors = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,206)).setObjects(("OPENWAVE-MIB", "uplaAgentIdentifier"), ("OPENWAVE-MIB", "uplaHostName"), ("OPENWAVE-MIB", "uplaProcessId"), ("OPENWAVE-MIB", "uplaTrapInfo"))
if mibBuilder.loadTexts: uplaInternalFatalErrors.setDescription('An event that is generated when the uplAgent detects an internal fatal error. uplaTrapInfo gives error name.')
uplaOutOfResource = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,207)).setObjects(("OPENWAVE-MIB", "uplaAgentIdentifier"), ("OPENWAVE-MIB", "uplaHostName"), ("OPENWAVE-MIB", "uplaProcessId"), ("OPENWAVE-MIB", "uplaTrapInfo"))
if mibBuilder.loadTexts: uplaOutOfResource.setDescription('An event that is generated when the uplAgent detects reportable out-of-resource conditions. uplaTrapInfo gives the resource name.')
uplaDatabaseConnectionUp = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,208)).setObjects(("OPENWAVE-MIB", "uplaAgentIdentifier"), ("OPENWAVE-MIB", "uplaHostName"), ("OPENWAVE-MIB", "uplaProcessId"), ("OPENWAVE-MIB", "uplaTrapInfo"))
if mibBuilder.loadTexts: uplaDatabaseConnectionUp.setDescription('An event that is generated when the Agent detects that the database is up.')
uplaBillingInitError = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,209)).setObjects(("OPENWAVE-MIB", "uplaAgentIdentifier"), ("OPENWAVE-MIB", "uplaHostName"), ("OPENWAVE-MIB", "uplaProcessId"), ("OPENWAVE-MIB", "uplaTrapInfo"))
if mibBuilder.loadTexts: uplaBillingInitError.setDescription('An event that is generated when the Agent client cannot initialise communication with the Billing Manager.')
uplaBillingLogError = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,210)).setObjects(("OPENWAVE-MIB", "uplaAgentIdentifier"), ("OPENWAVE-MIB", "uplaHostName"), ("OPENWAVE-MIB", "uplaProcessId"), ("OPENWAVE-MIB", "uplaTrapInfo"))
if mibBuilder.loadTexts: uplaBillingLogError.setDescription('An event that is generated when the Agent client Billing event cannot be logged with the Billing Manager.')
uplaDynamicUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,211)).setObjects(("OPENWAVE-MIB", "uplaAgentIdentifier"), ("OPENWAVE-MIB", "uplaHostName"), ("OPENWAVE-MIB", "uplaProcessId"), ("OPENWAVE-MIB", "uplaTrapInfo"))
if mibBuilder.loadTexts: uplaDynamicUpdateStarted.setDescription('An event that is generated when the Agent Dynamic Update has started.')
uplaDynamicUpdateStopped = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,212)).setObjects(("OPENWAVE-MIB", "uplaAgentIdentifier"), ("OPENWAVE-MIB", "uplaHostName"), ("OPENWAVE-MIB", "uplaProcessId"), ("OPENWAVE-MIB", "uplaTrapInfo"))
if mibBuilder.loadTexts: uplaDynamicUpdateStopped.setDescription('An event that is generated when the Agent Dynamic Update has terminated.')
uplNbRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 3))
uplNbRouterDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 3, 1), )
if mibBuilder.loadTexts: uplNbRouterDescriptionTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplNbRouterDescriptionTable.setDescription('The table holding UPLNbRouter identifying information.')
uplNbRouterDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 3, 1, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplrdIpAddress"), (0, "OPENWAVE-MIB", "uplrdProcessId"))
if mibBuilder.loadTexts: uplNbRouterDescriptionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplNbRouterDescriptionEntry.setDescription('The entry associated with each UPLNbRouter.')
uplrdIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrdIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: uplrdIpAddress.setDescription('The ip address of the host running UPLNbRouter.')
uplrdProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrdProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: uplrdProcessId.setDescription('The process id of the UPLNbRouter.')
uplrdHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrdHostName.setStatus('mandatory')
if mibBuilder.loadTexts: uplrdHostName.setDescription('The host name of the node running UPLNbRouter.')
uplrdPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrdPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: uplrdPortNumber.setDescription('The port number on which the UPLNbRouter listens for incoming requests.')
uplrdStartUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrdStartUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: uplrdStartUpTime.setDescription('The date and time the UPLNbRouter started.')
uplrHdtpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 3, 2))
uplNbRouterAirlinkTable = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 3, 2, 1), Integer32())
if mibBuilder.loadTexts: uplNbRouterAirlinkTable.setStatus('deprecated')
if mibBuilder.loadTexts: uplNbRouterAirlinkTable.setDescription('The table holding airlinks loaded successfully in UPLNbRouter.')
uplNbRouterAirlinkStatsTable = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 3, 2, 2), Integer32())
if mibBuilder.loadTexts: uplNbRouterAirlinkStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: uplNbRouterAirlinkStatsTable.setDescription('The table holding statistics of mobile-terminated traffic through airlinks loaded in UPLNbRouter.')
uplrStackServiceStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 3, 3))
uplNbRouterTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 3, 20))
uplrTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 3, 20, 1), DisplayString())
if mibBuilder.loadTexts: uplrTrapInfo.setStatus('optional')
if mibBuilder.loadTexts: uplrTrapInfo.setDescription('Text string that provides additional information about the trap.')
uplrClientIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 3, 20, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrClientIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: uplrClientIpAddress.setDescription('The ip address of the node running the client that is communicating to the UPLNbRouter.')
uplrClientHostName = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 3, 20, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrClientHostName.setStatus('mandatory')
if mibBuilder.loadTexts: uplrClientHostName.setDescription('The host name of the node running the client that is communicating to the UPLNbRouter.')
uplrClientProcessId = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 3, 20, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrClientProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: uplrClientProcessId.setDescription('The process id of the client that is communicating to the UPLNbRouter.')
uplrStartup = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,500)).setObjects(("OPENWAVE-MIB", "uplrdHostName"), ("OPENWAVE-MIB", "uplrdProcessId"), ("OPENWAVE-MIB", "uplrTrapInfo"))
if mibBuilder.loadTexts: uplrStartup.setDescription('An event that is generated when the UPLNbRouter is started.')
uplrShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,501)).setObjects(("OPENWAVE-MIB", "uplrdHostName"), ("OPENWAVE-MIB", "uplrdProcessId"), ("OPENWAVE-MIB", "uplrTrapInfo"))
if mibBuilder.loadTexts: uplrShutdown.setDescription('An event that is generated when the UPLNbRouter is shut down. uplrTrapInfo gives the reason for the shutdown.')
uplrDatabaseConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,502)).setObjects(("OPENWAVE-MIB", "uplrdHostName"), ("OPENWAVE-MIB", "uplrdProcessId"), ("OPENWAVE-MIB", "uplrTrapInfo"))
if mibBuilder.loadTexts: uplrDatabaseConnectionDown.setDescription('An event that is generated when the UPLNbRouter detects that the database connection is down.')
uplrDatabaseConnectionUp = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,503)).setObjects(("OPENWAVE-MIB", "uplrdHostName"), ("OPENWAVE-MIB", "uplrdProcessId"), ("OPENWAVE-MIB", "uplrTrapInfo"))
if mibBuilder.loadTexts: uplrDatabaseConnectionUp.setDescription('An event that is generated when the UPLNbRouter detects that the database connection is back up.')
uplrInternalError = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,505)).setObjects(("OPENWAVE-MIB", "uplrdHostName"), ("OPENWAVE-MIB", "uplrdProcessId"), ("OPENWAVE-MIB", "uplrTrapInfo"))
if mibBuilder.loadTexts: uplrInternalError.setDescription('An event that is generated when the UPLNbRouter detects an internal error. uplrTrapInfo gives error name.')
uplrSMSCConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,506)).setObjects(("OPENWAVE-MIB", "uplrdHostName"), ("OPENWAVE-MIB", "uplrdProcessId"), ("OPENWAVE-MIB", "uplrTrapInfo"))
if mibBuilder.loadTexts: uplrSMSCConnectionDown.setDescription('An event that is generated when the UPLNbRouter detects the connection to external SMSC is down')
uplrSMSCConnectionUp = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,507)).setObjects(("OPENWAVE-MIB", "uplrdHostName"), ("OPENWAVE-MIB", "uplrdProcessId"), ("OPENWAVE-MIB", "uplrTrapInfo"))
if mibBuilder.loadTexts: uplrSMSCConnectionUp.setDescription('An event that is generated when the UPLNbRouter detects the connection to external SMSC is back up')
uplrClientConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,508)).setObjects(("OPENWAVE-MIB", "uplrdHostName"), ("OPENWAVE-MIB", "uplrdProcessId"), ("OPENWAVE-MIB", "uplrTrapInfo"))
if mibBuilder.loadTexts: uplrClientConnectionDown.setDescription('An event that is generated when the UPLNbRouter detects the connection to a client is down. The client can be uplMessenger, uplAgent or uplDispatcher.')
uplrClientConnectionUp = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,509)).setObjects(("OPENWAVE-MIB", "uplrdHostName"), ("OPENWAVE-MIB", "uplrdProcessId"), ("OPENWAVE-MIB", "uplrTrapInfo"))
if mibBuilder.loadTexts: uplrClientConnectionUp.setDescription('An event that is generated when the UPLNbRouter detects the connection to a client is back up. The client can be uplMessenger, uplAgent or uplDispatcher.')
uplrNbRouterConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,510)).setObjects(("OPENWAVE-MIB", "uplrClientIpAddress"), ("OPENWAVE-MIB", "uplrClientHostName"), ("OPENWAVE-MIB", "uplrClientProcessId"), ("OPENWAVE-MIB", "uplrTrapInfo"))
if mibBuilder.loadTexts: uplrNbRouterConnectionDown.setDescription('An event that is generated by a client when the client detects the connection to an UPLNbRouter is down.')
uplrNbRouterConnectionUp = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,511)).setObjects(("OPENWAVE-MIB", "uplrClientIpAddress"), ("OPENWAVE-MIB", "uplrClientHostName"), ("OPENWAVE-MIB", "uplrClientProcessId"), ("OPENWAVE-MIB", "uplrTrapInfo"))
if mibBuilder.loadTexts: uplrNbRouterConnectionUp.setDescription('An event that is generated by a client when the client detects the connection to an UPLNbRouter is back up.')
uplrProtocolError = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,512)).setObjects(("OPENWAVE-MIB", "uplrClientIpAddress"), ("OPENWAVE-MIB", "uplrClientHostName"), ("OPENWAVE-MIB", "uplrClientProcessId"), ("OPENWAVE-MIB", "uplrTrapInfo"))
if mibBuilder.loadTexts: uplrProtocolError.setDescription('An event that is generated by a client process running narrowband airlink adaptor when it detects a protocol error in the messages exchange with the UPLNbRouter.')
uplrBillingInitError = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,513)).setObjects(("OPENWAVE-MIB", "uplrdHostName"), ("OPENWAVE-MIB", "uplrdProcessId"), ("OPENWAVE-MIB", "uplrTrapInfo"))
if mibBuilder.loadTexts: uplrBillingInitError.setDescription('An event that is generated when the NBRouter client cannot initialise communication with the Billing Manager.')
uplrBillingLogError = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,514)).setObjects(("OPENWAVE-MIB", "uplrdHostName"), ("OPENWAVE-MIB", "uplrdProcessId"), ("OPENWAVE-MIB", "uplrTrapInfo"))
if mibBuilder.loadTexts: uplrBillingLogError.setDescription('An event that is generated when the NBRouter client Billing event cannot be logged with the Billing Manager.')
uplMessenger = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4))
uplMessengerDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 1), )
if mibBuilder.loadTexts: uplMessengerDescriptionTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplMessengerDescriptionTable.setDescription('The table holding UPLMessenger identifying information.')
uplMessengerDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 1, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplmdIpAddress"), (0, "OPENWAVE-MIB", "uplmdProcessId"))
if mibBuilder.loadTexts: uplMessengerDescriptionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplMessengerDescriptionEntry.setDescription('The entry associated with each UPLMessenger.')
uplmdIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmdIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: uplmdIpAddress.setDescription('The ip address of the host running UPLMessenger.')
uplmdProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmdProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: uplmdProcessId.setDescription('The process id of the UPLMessenger.')
uplmdHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmdHostName.setStatus('mandatory')
if mibBuilder.loadTexts: uplmdHostName.setDescription('The host name of the node running UPLMessenger.')
uplmdMsgServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmdMsgServerPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: uplmdMsgServerPortNumber.setDescription('The port number on which the UPLMessenger connects to the proxy to deliver notifications.')
uplmdPublicHTTPPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmdPublicHTTPPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: uplmdPublicHTTPPortNumber.setDescription('The port number on which the UPLMessenger listens for nonsecure public notification services.')
uplmdPublicHTTPSPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmdPublicHTTPSPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: uplmdPublicHTTPSPortNumber.setDescription('The port number on which the UPLMessenger listens for secure public notification services.')
uplmdPrivateHTTPPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmdPrivateHTTPPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: uplmdPrivateHTTPPortNumber.setDescription('The port number on which the UPLMessenger listens for nonsecure private notification services.')
uplmdStartupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmdStartupTime.setStatus('mandatory')
if mibBuilder.loadTexts: uplmdStartupTime.setDescription('The date and time the UPLMessenger started.')
uplmDBMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmDBMaxConnections.setStatus('mandatory')
if mibBuilder.loadTexts: uplmDBMaxConnections.setDescription('Maximum number of database connections.')
uplmDBMinConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmDBMinConnections.setStatus('mandatory')
if mibBuilder.loadTexts: uplmDBMinConnections.setDescription('Minimum number of database connections.')
uplmDBConnectionCacheThreadWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmDBConnectionCacheThreadWaits.setStatus('mandatory')
if mibBuilder.loadTexts: uplmDBConnectionCacheThreadWaits.setDescription('Number of times threads had to wait for a database connection.')
uplmDBConnectionCacheMeanWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmDBConnectionCacheMeanWaitTime.setStatus('mandatory')
if mibBuilder.loadTexts: uplmDBConnectionCacheMeanWaitTime.setDescription('Mean wait time in milliseconds for threads waiting on a database connection.')
uplmDBConnectionCacheDeviationOfWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmDBConnectionCacheDeviationOfWaitTime.setStatus('mandatory')
if mibBuilder.loadTexts: uplmDBConnectionCacheDeviationOfWaitTime.setDescription('Standard deviation of uplmDBConnectionCacheMeanWaitTime.')
uplmdMaxMsgClientStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmdMaxMsgClientStreams.setStatus('mandatory')
if mibBuilder.loadTexts: uplmdMaxMsgClientStreams.setDescription('Configured max number of busy streams. ')
uplmdOpenAgentStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmdOpenAgentStreams.setStatus('mandatory')
if mibBuilder.loadTexts: uplmdOpenAgentStreams.setDescription('Number of streams currently in use. These sometimes get blocked, so always at max with no increase in the next value implies a problem.')
uplmdNumTxnProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmdNumTxnProcessed.setStatus('mandatory')
if mibBuilder.loadTexts: uplmdNumTxnProcessed.setDescription('Total number of transactions processed by the streams.')
uplmHdtpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 2))
uplMessengerAirlinkTable = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 2, 1), Integer32())
if mibBuilder.loadTexts: uplMessengerAirlinkTable.setStatus('deprecated')
if mibBuilder.loadTexts: uplMessengerAirlinkTable.setDescription('The table holding airlinks loaded successfully in UPLMessenger.')
uplMessengerAirlinkStatsTable = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 2, 2), Integer32())
if mibBuilder.loadTexts: uplMessengerAirlinkStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: uplMessengerAirlinkStatsTable.setDescription('The table holding statistics of notifications sent by the messenger.')
uplmStackServiceStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 3))
uplMessengerNtfnStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4), )
if mibBuilder.loadTexts: uplMessengerNtfnStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplMessengerNtfnStatsTable.setDescription('The table holding statistics on notification services provided by UPLMessenger.')
uplMessengerNtfnStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplmnsIpAddress"), (0, "OPENWAVE-MIB", "uplmnsProcessId"))
if mibBuilder.loadTexts: uplMessengerNtfnStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplMessengerNtfnStatsEntry.setDescription('The entry associated with notifications statistics for each UPLMessenger.')
uplmnsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsIpAddress.setDescription('The ip address of the host running UPLMessenger.')
uplmnsProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsProcessId.setDescription('The process id of the UPLMessenger.')
uplmnsPublicHTTPReqReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsPublicHTTPReqReceived.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsPublicHTTPReqReceived.setDescription('The number of public HTTP requests the UPLMessenger received since it comes up.')
uplmnsPrivateHTTPReqReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsPrivateHTTPReqReceived.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsPrivateHTTPReqReceived.setDescription('The number of private HTTP requests the UPLMessenger received since it comes up.')
uplmnsPublicHTTPSReqReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsPublicHTTPSReqReceived.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsPublicHTTPSReqReceived.setDescription('The number of public HTTP requests the UPLMessenger received since it comes up.')
uplmnsPublicHTTPReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsPublicHTTPReqProcessed.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsPublicHTTPReqProcessed.setDescription('The number of public HTTP requests the UPLMessenger processed successfully since it comes up.')
uplmnsPrivateHTTPReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsPrivateHTTPReqProcessed.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsPrivateHTTPReqProcessed.setDescription('The number of private HTTP requests the UPLMessenger processed successfully since it comes up.')
uplmnsPublicHTTPSReqProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsPublicHTTPSReqProcessed.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsPublicHTTPSReqProcessed.setDescription('The number of public HTTPS requests the UPLMessenger processed successfully since it comes up.')
uplmnsAvgNtfnsAddedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsAvgNtfnsAddedPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsAvgNtfnsAddedPerSec.setDescription('The average number of notifications added per second by the UPLMessenger.')
uplmnsAvgNtfnsDeliveredPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsAvgNtfnsDeliveredPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsAvgNtfnsDeliveredPerSec.setDescription('The average number of notifications delivered per second by the UPLMessenger.')
uplmnsAvgNtfnsExpiredPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsAvgNtfnsExpiredPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsAvgNtfnsExpiredPerSec.setDescription('The average number of notifications expired per second by the UPLMessenger.')
uplmnsAvgNtfnsMarkedUnDelvrPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsAvgNtfnsMarkedUnDelvrPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsAvgNtfnsMarkedUnDelvrPerSec.setDescription('The average number of notifications marked undeliverable per second by the UPLMessenger.')
uplmnsNumAddRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsNumAddRequests.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsNumAddRequests.setDescription('Total number of notifications submitted for delivery.')
uplmnsNumStatusRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsNumStatusRequests.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsNumStatusRequests.setDescription('Total number of requests for notification status submitted.')
uplmnsNumDeleteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsNumDeleteRequests.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsNumDeleteRequests.setDescription('Total number of delete requests submitted.')
uplmnsNumAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsNumAdded.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsNumAdded.setDescription('Total number of notifications that were actually added.')
uplmnsNumStatusFound = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsNumStatusFound.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsNumStatusFound.setDescription('Total number of status requests that were processed sucessfully.')
uplmnsNumDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsNumDeleted.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsNumDeleted.setDescription('Total number of delete requests that were processed sucessfully.')
uplmnsNumExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsNumExpired.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsNumExpired.setDescription('Total number of notification requests that got expired.')
uplmnsCompletedNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsCompletedNotifications.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsCompletedNotifications.setDescription('Total number of notifications that got completed.')
uplmnsSignalsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmnsSignalsSent.setStatus('mandatory')
if mibBuilder.loadTexts: uplmnsSignalsSent.setDescription('Number of signal PDUs sent.')
uplMessengerNtfnCacheTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 5), )
if mibBuilder.loadTexts: uplMessengerNtfnCacheTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplMessengerNtfnCacheTable.setDescription('The table holding statistics on the notification cache maintained by UPLMessenger.')
uplMessengerNtfnCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 5, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplmncIpAddress"), (0, "OPENWAVE-MIB", "uplmncProcessId"))
if mibBuilder.loadTexts: uplMessengerNtfnCacheEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplMessengerNtfnCacheEntry.setDescription('The entry associated with the notifications cache statistics for each UPLMessenger.')
uplmncIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmncIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: uplmncIpAddress.setDescription('The ip address of the host running UPLMessenger.')
uplmncProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmncProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: uplmncProcessId.setDescription('The process id of the UPLMessenger.')
uplmncTotalNumOfPendingNtfns = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmncTotalNumOfPendingNtfns.setStatus('mandatory')
if mibBuilder.loadTexts: uplmncTotalNumOfPendingNtfns.setDescription('The number of pending notifications in the cache as maintained by the UPLMessenger.')
uplmncAvgNumOfPendingNtfnsPerSub = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmncAvgNumOfPendingNtfnsPerSub.setStatus('mandatory')
if mibBuilder.loadTexts: uplmncAvgNumOfPendingNtfnsPerSub.setDescription('The average number of pending notifications per subscriber as maintained by the UPLMessenger.')
uplMessengerHTTPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6), )
if mibBuilder.loadTexts: uplMessengerHTTPStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplMessengerHTTPStatsTable.setDescription('The table holding statistics on HTTP services provided by UPLMessenger.')
uplMessengerHTTPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplmhIpAddress"), (0, "OPENWAVE-MIB", "uplmhProcessId"))
if mibBuilder.loadTexts: uplMessengerHTTPStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplMessengerHTTPStatsEntry.setDescription('The entry associated with HTTP statistics for each UPLMessenger.')
uplmhIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhIpAddress.setDescription('The ip address of the host running UPLMessenger.')
uplmhProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhProcessId.setDescription('The process id of the UPLMessenger.')
uplmhPublicHTTPMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPublicHTTPMaxConnections.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPublicHTTPMaxConnections.setDescription('The maximum number of HTTP connections that can be possible on the public non-secure interface. Refelects the config variable NumPublicHTTPThreads')
uplmhPublicHTTPOpenConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPublicHTTPOpenConnections.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPublicHTTPOpenConnections.setDescription(' The number of Public HTTP connections that are currently open')
uplmhPublicHTTPMaxThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPublicHTTPMaxThreads.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPublicHTTPMaxThreads.setDescription(' The maximum Public HTTP threads that start up (NumPublicHTTPThreads)')
uplmhPublicHTTPBusyThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPublicHTTPBusyThreads.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPublicHTTPBusyThreads.setDescription(' The Number of public HTTP threads that are currently busy. Busy means when the thread Picks up a entry from the dispatcher quese, Not busy means when the thread goes back to sleep on the dispatcher queu e')
uplmhPublicHTTPTimesAllThreadsBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPublicHTTPTimesAllThreadsBusy.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPublicHTTPTimesAllThreadsBusy.setDescription(' The number of times a message was received and all the public HTTP threads are busy')
uplmhPublicHTTPMaxDispQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPublicHTTPMaxDispQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPublicHTTPMaxDispQueueLength.setDescription('The Maximum length of the public HTTP dispatcher queue (MaxPublicHTTPDispatchQLen )')
uplmhPublicHTTPCurrentDispQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPublicHTTPCurrentDispQueueLen.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPublicHTTPCurrentDispQueueLen.setDescription(' The Current length of the public HTTP dispatcher queue')
uplmhPublicHTTPTimesDispQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPublicHTTPTimesDispQueueFull.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPublicHTTPTimesDispQueueFull.setDescription(' The number of times a connection was accepted and the public HTTP dispatcher queue was full')
uplmhPrivateHTTPMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPrivateHTTPMaxConnections.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPrivateHTTPMaxConnections.setDescription('The maximum number of HTTP connections that can be possible on the private non-secure interface ')
uplmhPrivateHTTPOpenConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPrivateHTTPOpenConnections.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPrivateHTTPOpenConnections.setDescription(' The number of Private HTTP connections that are currently open')
uplmhPrivateHTTPMaxThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPrivateHTTPMaxThreads.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPrivateHTTPMaxThreads.setDescription(' The maximum Private HTTP threads that start up')
uplmhPrivateHTTPBusyThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPrivateHTTPBusyThreads.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPrivateHTTPBusyThreads.setDescription(' The Number of private HTTP threads that are currently busy')
uplmhPrivateHTTPTimesAllThreadsBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPrivateHTTPTimesAllThreadsBusy.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPrivateHTTPTimesAllThreadsBusy.setDescription(' The number of times a message was received and all the private HTTP threads are busy')
uplmhPrivateHTTPMaxDispQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPrivateHTTPMaxDispQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPrivateHTTPMaxDispQueueLength.setDescription('The Maximum length of the private HTTP dispatcher queue')
uplmhPrivateHTTPCurrentDispQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPrivateHTTPCurrentDispQueueLen.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPrivateHTTPCurrentDispQueueLen.setDescription(' The Current length of the private HTTP dispatcher queue')
uplmhPrivateHTTPTimesDispQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPrivateHTTPTimesDispQueueFull.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPrivateHTTPTimesDispQueueFull.setDescription(' The number of times a connection was accepted and the private HTTP dispatcher queue was full')
uplmhPublicHTTPSMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPublicHTTPSMaxConnections.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPublicHTTPSMaxConnections.setDescription('The maximum number of HTTP connections that can be possible on the public secure interface')
uplmhPublicHTTPSOpenConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPublicHTTPSOpenConnections.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPublicHTTPSOpenConnections.setDescription(' The number of Public secure HTTP connections that are currently open')
uplmhPublicHTTPSMaxThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPublicHTTPSMaxThreads.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPublicHTTPSMaxThreads.setDescription(' The maximum Public secure HTTP threads that start up')
uplmhPublicHTTPSBusyThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPublicHTTPSBusyThreads.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPublicHTTPSBusyThreads.setDescription(' The Number of public secure HTTP threads that are currently busy')
uplmhPublicHTTPSTimesAllThreadsBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPublicHTTPSTimesAllThreadsBusy.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPublicHTTPSTimesAllThreadsBusy.setDescription(' The number of times a message was received and all the public secure HTTP threads are busy')
uplmhPublicHTTPSMaxDispQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPublicHTTPSMaxDispQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPublicHTTPSMaxDispQueueLength.setDescription('The Maximum length of the public secure HTTP dispatcher queue')
uplmhPublicHTTPSCurrentDispQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPublicHTTPSCurrentDispQueueLen.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPublicHTTPSCurrentDispQueueLen.setDescription(' The Current length of the public secure HTTP dispatcher queue')
uplmhPublicHTTPSTimesDispQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplmhPublicHTTPSTimesDispQueueFull.setStatus('mandatory')
if mibBuilder.loadTexts: uplmhPublicHTTPSTimesDispQueueFull.setDescription(' The number of times a connection was accepted and the public secure HTTP dispatcher queue was full')
uplMessengerTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 20))
uplmTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 4, 20, 1), DisplayString())
if mibBuilder.loadTexts: uplmTrapInfo.setStatus('optional')
if mibBuilder.loadTexts: uplmTrapInfo.setDescription('Text string that provides additional information about the trap.')
uplmStartup = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,600)).setObjects(("OPENWAVE-MIB", "uplmdIpAddress"), ("OPENWAVE-MIB", "uplmdHostName"), ("OPENWAVE-MIB", "uplmdProcessId"), ("OPENWAVE-MIB", "uplmTrapInfo"))
if mibBuilder.loadTexts: uplmStartup.setDescription('An event that is generated when the UPLMessenger is started.')
uplmShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,601)).setObjects(("OPENWAVE-MIB", "uplmdIpAddress"), ("OPENWAVE-MIB", "uplmdHostName"), ("OPENWAVE-MIB", "uplmdProcessId"), ("OPENWAVE-MIB", "uplmTrapInfo"))
if mibBuilder.loadTexts: uplmShutdown.setDescription('An event that is generated when the UPLMessenger is shut down. uplmTrapInfo gives the reason for the shutdown.')
uplmDatabaseConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,602)).setObjects(("OPENWAVE-MIB", "uplmdIpAddress"), ("OPENWAVE-MIB", "uplmdHostName"), ("OPENWAVE-MIB", "uplmdProcessId"), ("OPENWAVE-MIB", "uplmTrapInfo"))
if mibBuilder.loadTexts: uplmDatabaseConnectionDown.setDescription('An event that is generated when the UPLMessenger detects that the database connection is down.')
uplmDatabaseConnectionUp = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,603)).setObjects(("OPENWAVE-MIB", "uplmdIpAddress"), ("OPENWAVE-MIB", "uplmdHostName"), ("OPENWAVE-MIB", "uplmdProcessId"), ("OPENWAVE-MIB", "uplmTrapInfo"))
if mibBuilder.loadTexts: uplmDatabaseConnectionUp.setDescription('An event that is generated when the UPLMessenger detects that the database connection is back up.')
uplmInvalidConfig = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,604)).setObjects(("OPENWAVE-MIB", "uplmdIpAddress"), ("OPENWAVE-MIB", "uplmdHostName"), ("OPENWAVE-MIB", "uplmdProcessId"), ("OPENWAVE-MIB", "uplmTrapInfo"))
if mibBuilder.loadTexts: uplmInvalidConfig.setDescription('An event that is generated when the UPLMessenger detects an invalid configuration. uplmTrapInfo gives the configuration name.')
uplmInternalErrors = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,605)).setObjects(("OPENWAVE-MIB", "uplmdIpAddress"), ("OPENWAVE-MIB", "uplmdHostName"), ("OPENWAVE-MIB", "uplmdProcessId"), ("OPENWAVE-MIB", "uplmTrapInfo"))
if mibBuilder.loadTexts: uplmInternalErrors.setDescription('An event that is generated when the UPLMessenger detects an internal error. uplmTrapInfo gives error name.')
uplmAgentConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,606)).setObjects(("OPENWAVE-MIB", "uplmdIpAddress"), ("OPENWAVE-MIB", "uplmdHostName"), ("OPENWAVE-MIB", "uplmdProcessId"), ("OPENWAVE-MIB", "uplmTrapInfo"))
if mibBuilder.loadTexts: uplmAgentConnectionDown.setDescription('An event that is generated when the UPLMesssenger detects the message server serving UPLAgents at a configured port is down.')
uplmPublicHTTPServiceStarted = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,607)).setObjects(("OPENWAVE-MIB", "uplmdIpAddress"), ("OPENWAVE-MIB", "uplmdHostName"), ("OPENWAVE-MIB", "uplmdProcessId"), ("OPENWAVE-MIB", "uplmTrapInfo"))
if mibBuilder.loadTexts: uplmPublicHTTPServiceStarted.setDescription('An event that is generated when the UPLMessenger is starting the Public HTTP service. This is sent as a warning because the service lowers the overall security of the system.')
uplmPublicHTTPServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,608)).setObjects(("OPENWAVE-MIB", "uplmdIpAddress"), ("OPENWAVE-MIB", "uplmdHostName"), ("OPENWAVE-MIB", "uplmdProcessId"), ("OPENWAVE-MIB", "uplmTrapInfo"))
if mibBuilder.loadTexts: uplmPublicHTTPServiceDown.setDescription('An event that is generated when the UPLMessenger detects the Public HTTP interface is down.')
uplmPrivateHTTPServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,609)).setObjects(("OPENWAVE-MIB", "uplmdIpAddress"), ("OPENWAVE-MIB", "uplmdHostName"), ("OPENWAVE-MIB", "uplmdProcessId"), ("OPENWAVE-MIB", "uplmTrapInfo"))
if mibBuilder.loadTexts: uplmPrivateHTTPServiceDown.setDescription('An event that is generated when the UPLMessenger detects the Private HTTP interface is down.')
uplmPublicHTTPSServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,610)).setObjects(("OPENWAVE-MIB", "uplmdIpAddress"), ("OPENWAVE-MIB", "uplmdHostName"), ("OPENWAVE-MIB", "uplmdProcessId"), ("OPENWAVE-MIB", "uplmTrapInfo"))
if mibBuilder.loadTexts: uplmPublicHTTPSServiceDown.setDescription('An event that is generated when the UPLMessenger detects the Public secure HTTP interface is down.')
uplWap = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 5))
uplWapTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 5, 20))
uplwTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 5, 20, 1), DisplayString())
if mibBuilder.loadTexts: uplwTrapInfo.setStatus('optional')
if mibBuilder.loadTexts: uplwTrapInfo.setDescription('Text string that provides additional information about the trap.')
uplwHostName = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 5, 20, 2), DisplayString())
if mibBuilder.loadTexts: uplwHostName.setStatus('optional')
if mibBuilder.loadTexts: uplwHostName.setDescription('The host name of the node running the process which is executing the wap subsystem.')
uplwProcessId = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 5, 20, 3), Integer32())
if mibBuilder.loadTexts: uplwProcessId.setStatus('optional')
if mibBuilder.loadTexts: uplwProcessId.setDescription('The id of the process that is executing the wap subsystem.')
uplwCLIDMappingError = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,701)).setObjects(("OPENWAVE-MIB", "uplwHostName"), ("OPENWAVE-MIB", "uplwProcessId"), ("OPENWAVE-MIB", "uplwTrapInfo"))
if mibBuilder.loadTexts: uplwCLIDMappingError.setDescription('An event that is generated when a match is not found in the CLID mapping table by the wap subsystem. uplwProcessId indicates which client is executing the wap subsystem and uplwTrapInfo describes the error.')
uplBillingMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6))
uplBillingMgrDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 1), )
if mibBuilder.loadTexts: uplBillingMgrDescriptionTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplBillingMgrDescriptionTable.setDescription('The table holding UPLBillMan identifying information.')
uplBillingMgrDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 1, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplbdIpAddress"), (0, "OPENWAVE-MIB", "uplbdProcessId"))
if mibBuilder.loadTexts: uplBillingMgrDescriptionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplBillingMgrDescriptionEntry.setDescription('The entry associated with each UPLBillMan.')
uplbdIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplbdIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: uplbdIpAddress.setDescription('The ip address of the host running UPLBillMan.')
uplbdProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplbdProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: uplbdProcessId.setDescription('The process id of the UPLBillMan.')
uplbdHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplbdHostName.setStatus('mandatory')
if mibBuilder.loadTexts: uplbdHostName.setDescription('The host name of the node running UPLBillMan.')
uplbdPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplbdPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: uplbdPortNumber.setDescription('The port number on which the UPLBillMan listens for incoming billing events to log.')
uplbdStartupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplbdStartupTime.setStatus('mandatory')
if mibBuilder.loadTexts: uplbdStartupTime.setDescription('The date and time the UPLBillMan started.')
uplBillingMgrEventStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 2), )
if mibBuilder.loadTexts: uplBillingMgrEventStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplBillingMgrEventStatsTable.setDescription('The table holding statistics on events logged by UPLBillMan.')
uplBillingMgrEventStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 2, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplbesIpAddress"), (0, "OPENWAVE-MIB", "uplbesProcessId"))
if mibBuilder.loadTexts: uplBillingMgrEventStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplBillingMgrEventStatsEntry.setDescription('The entry associated with event statistics for each UPLBillMan.')
uplbesIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplbesIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: uplbesIpAddress.setDescription('The ip address of the host running UPLBillMan.')
uplbesProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplbesProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: uplbesProcessId.setDescription('The process id of the UPLBillMan.')
uplbesEventsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplbesEventsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: uplbesEventsReceived.setDescription('The number of events received by UPLBillMan since it comes up.')
uplbesEventLogFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplbesEventLogFailures.setStatus('mandatory')
if mibBuilder.loadTexts: uplbesEventLogFailures.setDescription('The number of events that failed to be loggeed by UPLBillMan since it comes up.')
uplbesDirectTransferFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplbesDirectTransferFailures.setStatus('mandatory')
if mibBuilder.loadTexts: uplbesDirectTransferFailures.setDescription('The the number of events that failed to be directed to a real time transfer interface by UPLBillMan since it comes up.')
uplBillingMgrFileStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 3), )
if mibBuilder.loadTexts: uplBillingMgrFileStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplBillingMgrFileStatsTable.setDescription('The table holding statistics on file and disk space used by UPLBillMan.')
uplBillingMgrFileStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 3, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplbfsIpAddress"), (0, "OPENWAVE-MIB", "uplbfsProcessId"))
if mibBuilder.loadTexts: uplBillingMgrFileStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplBillingMgrFileStatsEntry.setDescription('The entry associated with file statistics for each UPLBillMan.')
uplbfsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplbfsIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: uplbfsIpAddress.setDescription('The ip address of the host running UPLBillMan.')
uplbfsProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplbfsProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: uplbfsProcessId.setDescription('The process id of the UPLBillMan.')
uplbfsMaxBillingFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplbfsMaxBillingFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: uplbfsMaxBillingFileSize.setDescription('Maximum billing file size in bytes for UPLBillMan.')
uplbfsCompressorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplbfsCompressorName.setStatus('mandatory')
if mibBuilder.loadTexts: uplbfsCompressorName.setDescription('The name of the compression tool used by UPLBillMan if one is used.')
uplbfsBillingFilePath = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplbfsBillingFilePath.setStatus('mandatory')
if mibBuilder.loadTexts: uplbfsBillingFilePath.setDescription('Path to the billing file volume for the UPLBillMan process.')
uplbfsFileDiskSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplbfsFileDiskSpaceUsed.setStatus('mandatory')
if mibBuilder.loadTexts: uplbfsFileDiskSpaceUsed.setDescription('Percentage disk space used at the volume uplbfsBillingFilePath.')
uplbfsArchiveFilePath = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplbfsArchiveFilePath.setStatus('mandatory')
if mibBuilder.loadTexts: uplbfsArchiveFilePath.setDescription('Path to the archive file volume for the UPLBillMan process.')
uplbfsArchiveDiskSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplbfsArchiveDiskSpaceUsed.setStatus('mandatory')
if mibBuilder.loadTexts: uplbfsArchiveDiskSpaceUsed.setDescription('Percentage disk space used at the volume uplbfsArchiveFilePath.')
uplBillingMgrTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 20))
uplbTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 6, 20, 1), DisplayString())
if mibBuilder.loadTexts: uplbTrapInfo.setStatus('optional')
if mibBuilder.loadTexts: uplbTrapInfo.setDescription('Text string that provides additional information about the trap.')
uplbStartup = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,800)).setObjects(("OPENWAVE-MIB", "uplbdIpAddress"), ("OPENWAVE-MIB", "uplbdHostName"), ("OPENWAVE-MIB", "uplbdProcessId"), ("OPENWAVE-MIB", "uplbTrapInfo"))
if mibBuilder.loadTexts: uplbStartup.setDescription('An event that is generated when the UPLBillMan is started.')
uplbShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,801)).setObjects(("OPENWAVE-MIB", "uplbdIpAddress"), ("OPENWAVE-MIB", "uplbdHostName"), ("OPENWAVE-MIB", "uplbdProcessId"), ("OPENWAVE-MIB", "uplbTrapInfo"))
if mibBuilder.loadTexts: uplbShutdown.setDescription('An event that is generated when the UPLBillMan is shut down. uplbTrapInfo gives the reason for the shutdown.')
uplbDatabaseConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,802)).setObjects(("OPENWAVE-MIB", "uplbdIpAddress"), ("OPENWAVE-MIB", "uplbdHostName"), ("OPENWAVE-MIB", "uplbdProcessId"), ("OPENWAVE-MIB", "uplbTrapInfo"))
if mibBuilder.loadTexts: uplbDatabaseConnectionDown.setDescription('An event that is generated when the UPLBillMan detects that the database connection is down.')
uplbBillingLogFileError = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,803)).setObjects(("OPENWAVE-MIB", "uplbdIpAddress"), ("OPENWAVE-MIB", "uplbdHostName"), ("OPENWAVE-MIB", "uplbdProcessId"), ("OPENWAVE-MIB", "uplbTrapInfo"))
if mibBuilder.loadTexts: uplbBillingLogFileError.setDescription('An event that is generated when the UPLBillMan fails to open, move or write to the Billing Log. uplbTrapInfo desribes the problem with the Billing Log.')
uplbBillingDirectTransferError = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,804)).setObjects(("OPENWAVE-MIB", "uplbdIpAddress"), ("OPENWAVE-MIB", "uplbdHostName"), ("OPENWAVE-MIB", "uplbdProcessId"), ("OPENWAVE-MIB", "uplbTrapInfo"))
if mibBuilder.loadTexts: uplbBillingDirectTransferError.setDescription('An event that is generated when the UPLBillMan fails to direct to a Billing transfer interface. uplbTrapInfo desribes the problem with the Billing interface.')
uplbDiskSpaceError = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,805)).setObjects(("OPENWAVE-MIB", "uplbdIpAddress"), ("OPENWAVE-MIB", "uplbdHostName"), ("OPENWAVE-MIB", "uplbdProcessId"), ("OPENWAVE-MIB", "uplbTrapInfo"))
if mibBuilder.loadTexts: uplbDiskSpaceError.setDescription('An event that is generated when the UPLBillMan detects a problem with disk space. uplbTrapInfo gives the reason for the problem.')
uplbDiskSpaceLow = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,806)).setObjects(("OPENWAVE-MIB", "uplbdIpAddress"), ("OPENWAVE-MIB", "uplbdHostName"), ("OPENWAVE-MIB", "uplbdProcessId"), ("OPENWAVE-MIB", "uplbTrapInfo"))
if mibBuilder.loadTexts: uplbDiskSpaceLow.setDescription('An event that is generated when the UPLBillMan detects that the disk volume has reached a lower threshold. uplbTrapInfo gives the reason for the problem.')
uplbDiskSpaceCriticallyLow = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,807)).setObjects(("OPENWAVE-MIB", "uplbdIpAddress"), ("OPENWAVE-MIB", "uplbdHostName"), ("OPENWAVE-MIB", "uplbdProcessId"), ("OPENWAVE-MIB", "uplbTrapInfo"))
if mibBuilder.loadTexts: uplbDiskSpaceCriticallyLow.setDescription('An event that is generated when the UPLBillMan detects that the disk volume has reached a critical threshold. uplbTrapInfo gives the reason for the problem.')
uplRadiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7))
uplRadiusServerDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 1), )
if mibBuilder.loadTexts: uplRadiusServerDescriptionTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplRadiusServerDescriptionTable.setDescription('The table holding UPLRadius identifying information.')
uplRadiusServerDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 1, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplrsdIpAddress"), (0, "OPENWAVE-MIB", "uplrsdProcessId"))
if mibBuilder.loadTexts: uplRadiusServerDescriptionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplRadiusServerDescriptionEntry.setDescription('The entry associated with each UPLRadius.')
uplrsdIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrsdIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: uplrsdIpAddress.setDescription('The ip address of the host running UPLRadius.')
uplrsdProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrsdProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: uplrsdProcessId.setDescription('The process id of the UPLRadius.')
uplrsdHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrsdHostName.setStatus('mandatory')
if mibBuilder.loadTexts: uplrsdHostName.setDescription('The host name of the node running UPLRadius.')
uplrsdPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrsdPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: uplrsdPortNumber.setDescription('The port number on which the UPLRadius listens for incoming accounting messages.')
uplrsdStartupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrsdStartupTime.setStatus('mandatory')
if mibBuilder.loadTexts: uplrsdStartupTime.setDescription('The date and time the UPLRadius started.')
uplRadiusServerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 2), )
if mibBuilder.loadTexts: uplRadiusServerStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplRadiusServerStatsTable.setDescription('The table holding statistics on events logged by UPLRadius.')
uplRadiusServerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 2, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplrssIpAddress"), (0, "OPENWAVE-MIB", "uplrssProcessId"))
if mibBuilder.loadTexts: uplRadiusServerStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplRadiusServerStatsEntry.setDescription('The entry associated with event statistics for each UPLRadius.')
uplrssIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrssIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: uplrssIpAddress.setDescription('The ip address of the host running UPLRadius.')
uplrssProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrssProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: uplrssProcessId.setDescription('The process id of the UPLRadius process.')
uplrssRasServiceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrssRasServiceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: uplrssRasServiceAddress.setDescription('The RAS Service Address of the UPLRadius process.')
uplrssAuthenticationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrssAuthenticationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uplrssAuthenticationStatus.setDescription('The Authentication Status of the UPLRadius process. The status can be ON or OFF')
uplrssStartAccMsgReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrssStartAccMsgReceived.setStatus('mandatory')
if mibBuilder.loadTexts: uplrssStartAccMsgReceived.setDescription('The number of START accouting messages received by UPLRadius since it comes up.')
uplrssInterimAccMsgReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrssInterimAccMsgReceived.setStatus('mandatory')
if mibBuilder.loadTexts: uplrssInterimAccMsgReceived.setDescription('The number of Interim accouting messages received by UPLRadius since it comes up.')
uplrssStopAccMsgReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrssStopAccMsgReceived.setStatus('mandatory')
if mibBuilder.loadTexts: uplrssStopAccMsgReceived.setDescription('The number of STOP accouting messages received by UPLRadius since it comes up.')
uplrssIpMsisdnPairsInserted = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrssIpMsisdnPairsInserted.setStatus('mandatory')
if mibBuilder.loadTexts: uplrssIpMsisdnPairsInserted.setDescription('The number of IP/MSISDN pairs that have been inserted into the UP.Link database by UPLRadius since it comes up.')
uplrssIpMsisdnPairsUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrssIpMsisdnPairsUpdated.setStatus('mandatory')
if mibBuilder.loadTexts: uplrssIpMsisdnPairsUpdated.setDescription('The number of IP/MSISDN pairs that have been updated on the UP.Link database by UPLRadius since it comes up.')
uplrssIpMsisdnPairsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplrssIpMsisdnPairsDeleted.setStatus('mandatory')
if mibBuilder.loadTexts: uplrssIpMsisdnPairsDeleted.setDescription('The number of IP/MSISDN pairs that have been deleted from the UP.Link database by UPLRadius since it comes up.')
uplRadiusServerTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 20))
uplrsTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 7, 20, 1), DisplayString())
if mibBuilder.loadTexts: uplrsTrapInfo.setStatus('optional')
if mibBuilder.loadTexts: uplrsTrapInfo.setDescription('Text string that provides additional information about the trap.')
uplrsStartup = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,900)).setObjects(("OPENWAVE-MIB", "uplrsdIpAddress"), ("OPENWAVE-MIB", "uplrsdHostName"), ("OPENWAVE-MIB", "uplrsdProcessId"), ("OPENWAVE-MIB", "uplrsTrapInfo"))
if mibBuilder.loadTexts: uplrsStartup.setDescription('An event that is generated when the UPLRadius is started.')
uplrsFailedToStart = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,901)).setObjects(("OPENWAVE-MIB", "uplrsdIpAddress"), ("OPENWAVE-MIB", "uplrsdHostName"), ("OPENWAVE-MIB", "uplrsdProcessId"), ("OPENWAVE-MIB", "uplrsTrapInfo"))
if mibBuilder.loadTexts: uplrsFailedToStart.setDescription('An event that is generated when the UPLRadius fails to start.')
uplrsDatabaseConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,902)).setObjects(("OPENWAVE-MIB", "uplrsdIpAddress"), ("OPENWAVE-MIB", "uplrsdHostName"), ("OPENWAVE-MIB", "uplrsdProcessId"), ("OPENWAVE-MIB", "uplrsTrapInfo"))
if mibBuilder.loadTexts: uplrsDatabaseConnectionDown.setDescription('An event that is generated when the UPLRadius detects that the database connection is down.')
uplrsBillingInitError = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,903)).setObjects(("OPENWAVE-MIB", "uplrsdIpAddress"), ("OPENWAVE-MIB", "uplrsdHostName"), ("OPENWAVE-MIB", "uplrsdProcessId"), ("OPENWAVE-MIB", "uplrsTrapInfo"))
if mibBuilder.loadTexts: uplrsBillingInitError.setDescription('An event that is generated when the Radius client cannot initialise communication with the Billing Manager.')
uplrsBillingLogError = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,904)).setObjects(("OPENWAVE-MIB", "uplrsdIpAddress"), ("OPENWAVE-MIB", "uplrsdHostName"), ("OPENWAVE-MIB", "uplrsdProcessId"), ("OPENWAVE-MIB", "uplrsTrapInfo"))
if mibBuilder.loadTexts: uplrsBillingLogError.setDescription('An event that is generated when a Radius client billing event cannot be logged with the Billing Manager.')
uplCertRequester = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 8))
uplCertRequesterDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 8, 1), )
if mibBuilder.loadTexts: uplCertRequesterDescriptionTable.setStatus('mandatory')
if mibBuilder.loadTexts: uplCertRequesterDescriptionTable.setDescription('The table holding UPLCertRequester identifying information.')
uplCertRequesterDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 8, 1, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uplcrdIpAddress"), (0, "OPENWAVE-MIB", "uplcrdProcessId"))
if mibBuilder.loadTexts: uplCertRequesterDescriptionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uplCertRequesterDescriptionEntry.setDescription('The entry associated with each UPLCertRequester.')
uplcrdIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 8, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplcrdIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: uplcrdIpAddress.setDescription('The ip address of the host running UPLCertRequester.')
uplcrdProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplcrdProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: uplcrdProcessId.setDescription('The process id of the UPLCertRequester.')
uplcrdHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplcrdHostName.setStatus('mandatory')
if mibBuilder.loadTexts: uplcrdHostName.setDescription('The host name of the node running UPLCertRequester.')
uplcrdUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplcrdUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: uplcrdUpdateInterval.setDescription('The interval time between Database updates of certificates by the UPLCertRequester .')
uplcrdRequestAllowance = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplcrdRequestAllowance.setStatus('mandatory')
if mibBuilder.loadTexts: uplcrdRequestAllowance.setDescription('The certificate request allowance time. This is the time, before the expiration date of an existing certificate, that a new certificate is requested by UPLCertRequester.')
uplcrdStartupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 8, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uplcrdStartupTime.setStatus('mandatory')
if mibBuilder.loadTexts: uplcrdStartupTime.setDescription('The date and time the UPLCertRequester started.')
uplCertRequesterTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 8, 20))
uplcrTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 2, 1, 8, 20, 1), DisplayString())
if mibBuilder.loadTexts: uplcrTrapInfo.setStatus('optional')
if mibBuilder.loadTexts: uplcrTrapInfo.setDescription('Text string that provides additional information about the trap.')
uplcrStartup = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,1200)).setObjects(("OPENWAVE-MIB", "uplcrdIpAddress"), ("OPENWAVE-MIB", "uplcrdHostName"), ("OPENWAVE-MIB", "uplcrdProcessId"), ("OPENWAVE-MIB", "uplcrTrapInfo"))
if mibBuilder.loadTexts: uplcrStartup.setDescription('An event that is generated when the UPLCertRequester is started.')
uplcrFatalError = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,1201)).setObjects(("OPENWAVE-MIB", "uplcrdIpAddress"), ("OPENWAVE-MIB", "uplcrdHostName"), ("OPENWAVE-MIB", "uplcrdProcessId"), ("OPENWAVE-MIB", "uplcrTrapInfo"))
if mibBuilder.loadTexts: uplcrFatalError.setDescription('An event that is generated when an internal exception is caught in UPLCertRequester that may cause the process to fail.')
uplcrCertificateUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,1202)).setObjects(("OPENWAVE-MIB", "uplcrdIpAddress"), ("OPENWAVE-MIB", "uplcrdHostName"), ("OPENWAVE-MIB", "uplcrdProcessId"), ("OPENWAVE-MIB", "uplcrTrapInfo"))
if mibBuilder.loadTexts: uplcrCertificateUpdateFailed.setDescription('An event that is generated when the UPLCertRequester fails in an attempt to refresh a WTLS certificate.')
uplcrInvalidCertResponse = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 2) + (0,1203)).setObjects(("OPENWAVE-MIB", "uplcrdIpAddress"), ("OPENWAVE-MIB", "uplcrdHostName"), ("OPENWAVE-MIB", "uplcrdProcessId"), ("OPENWAVE-MIB", "uplcrTrapInfo"))
if mibBuilder.loadTexts: uplcrInvalidCertResponse.setDescription('An event that is generated when the UPLCertRequester receives a HTTP response with a content-type other than the WTLS certificate mime type.')
upLinkConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 2))
upLinkStaticInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 2, 2, 1))
upAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 3))
upAdminTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 3, 20))
upsTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 3, 20, 1), DisplayString())
if mibBuilder.loadTexts: upsTrapInfo.setStatus('optional')
if mibBuilder.loadTexts: upsTrapInfo.setDescription('Text string which provides additional information about the trap.')
upsProxyServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,400)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsProxyServiceDown.setDescription('An event that is generated when the proxy service is down ')
upsProxyServiceSlow = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,401)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsProxyServiceSlow.setDescription('An event that is generated when the proxy service is slow')
upsPushServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,402)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsPushServiceDown.setDescription('An event that is generated when the push service is down ')
upsBookmarksServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,403)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsBookmarksServiceDown.setDescription('An event that is generated when the bookmarks service is down ')
upsBookmarksServiceSlow = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,404)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsBookmarksServiceSlow.setDescription('An event that is generated when the bookmarks service is slow ')
upsHomePageServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,405)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsHomePageServiceDown.setDescription('An event that is generated when the homepage service is down ')
upsUPWebServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,406)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsUPWebServiceDown.setDescription('An event that is generated when the UP Web service is down ')
upsUPWebServiceSlow = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,407)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsUPWebServiceSlow.setDescription('An event that is generated when the UP Web service is slow ')
upsUPAdminServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,408)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsUPAdminServiceDown.setDescription('An event that is generated when the UP Admin service is down ')
upsUPMailServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,409)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsUPMailServiceDown.setDescription('An event that is generated when the UP Mail service is down ')
upsUPMailServiceSlow = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,410)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsUPMailServiceSlow.setDescription('An event that is generated when the UP Mail service is slow ')
upsUPPimServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,411)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsUPPimServiceDown.setDescription('An event that is generated when the UP Pim service is down ')
upsUPPimServiceSlow = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,412)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsUPPimServiceSlow.setDescription('An event that is generated when the UP Pim service is slow')
upsHomePageServiceSlow = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,413)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsHomePageServiceSlow.setDescription('An event that is generated when the UP Home Page service is slow')
upsProxyServiceUp = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,414)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsProxyServiceUp.setDescription('An event that is generated when the proxy service comes back online.')
upsProxyServiceNormal = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,415)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsProxyServiceNormal.setDescription('An event that is generated when the proxy service returns to normal response time.')
upsPushServiceUp = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,416)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsPushServiceUp.setDescription('An event that is generated when the push service comes back online.')
upsBookmarksServiceUp = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,417)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsBookmarksServiceUp.setDescription('An event that is generated when the bookmarks service comes back online')
upsBookmarksServiceNormal = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,418)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsBookmarksServiceNormal.setDescription('An event that is generated when the bookmarks service returns to normal response time.')
upsHomePageServiceUp = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,419)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsHomePageServiceUp.setDescription('An event that is generated when the homepage service comes back online.')
upsUPWebServiceUp = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,420)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsUPWebServiceUp.setDescription('An event that is generated when the UP Web service comes back online.')
upsUPWebServiceNormal = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,421)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsUPWebServiceNormal.setDescription('An event that is generated when the UP Web service returns to normal response time.')
upsUPAdminServiceUp = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,422)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsUPAdminServiceUp.setDescription('An event that is generated when the UP Admin service comes back online.')
upsUPMailServiceUp = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,423)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsUPMailServiceUp.setDescription('An event that is generated when the UP Mail service comes back online.')
upsUPMailServiceNormal = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,424)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsUPMailServiceNormal.setDescription('An event that is generated when the UP Mail service returns to normal response time.')
upsUPPimServiceUp = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,425)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsUPPimServiceUp.setDescription('An event that is generated when the UP Pim service comes back on line.')
upsUPPimServiceNormal = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 3) + (0,426)).setObjects(("OPENWAVE-MIB", "upsTrapInfo"))
if mibBuilder.loadTexts: upsUPPimServiceNormal.setDescription('An event that is generated when the UP Pim service returns to normal response time.')
upPushProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 5))
upPushPap = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1))
upPushPapDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 1), )
if mibBuilder.loadTexts: upPushPapDescriptionTable.setStatus('mandatory')
if mibBuilder.loadTexts: upPushPapDescriptionTable.setDescription('The table holding UPPushPAP identifying information.')
upPushPapDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 1, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uppdPAPIndex"))
if mibBuilder.loadTexts: upPushPapDescriptionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upPushPapDescriptionEntry.setDescription('The entry associated with each UPPushPAP.')
uppdPAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppdPAPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uppdPAPIndex.setDescription('The index for each PAP process in the SNMP table.')
uppdPAPIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppdPAPIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uppdPAPIdentifier.setDescription('The unique identifier for each PAP process.')
uppdProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppdProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: uppdProcessId.setDescription('The process id of the UPPushPAP.')
uppdHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppdHostName.setStatus('mandatory')
if mibBuilder.loadTexts: uppdHostName.setDescription('The host name of the node running UPPushPAP.')
uppdPublicHTTPPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppdPublicHTTPPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: uppdPublicHTTPPortNumber.setDescription('The port number on which the UPPushPAP listens for nonsecure public notification services.')
uppdPublicHTTPSPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppdPublicHTTPSPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: uppdPublicHTTPSPortNumber.setDescription('The port number on which the UPPushPAP listens for secure public notification services.')
uppdPrivateHTTPPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppdPrivateHTTPPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: uppdPrivateHTTPPortNumber.setDescription('The port number on which the UPPushPAP listens for nonsecure private notification services.')
uppdStartupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppdStartupTime.setStatus('mandatory')
if mibBuilder.loadTexts: uppdStartupTime.setDescription('The date and time the UPPushPAP started.')
upPushPapNtfnStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 2), )
if mibBuilder.loadTexts: upPushPapNtfnStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: upPushPapNtfnStatsTable.setDescription('The table holding statistics on notification services provided by UPPushPAP.')
upPushPapNtfnStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 2, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uppnsPAPIndex"))
if mibBuilder.loadTexts: upPushPapNtfnStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upPushPapNtfnStatsEntry.setDescription('The entry associated with notifications statistics for each UPPushPAP.')
uppnsPAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppnsPAPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uppnsPAPIndex.setDescription('The index for each PAP process in the SNMP table.')
uppnsPAPIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppnsPAPIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uppnsPAPIdentifier.setDescription('The unique identifier for each PAP process.')
uppnsPublicHTTPReqReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppnsPublicHTTPReqReceived.setStatus('mandatory')
if mibBuilder.loadTexts: uppnsPublicHTTPReqReceived.setDescription('The number of public HTTP requests the UPPushPAP received since it comes up.')
uppnsPrivateHTTPReqReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppnsPrivateHTTPReqReceived.setStatus('mandatory')
if mibBuilder.loadTexts: uppnsPrivateHTTPReqReceived.setDescription('The number of private HTTP requests the UPPushPAP received since it comes up.')
uppnsPublicHTTPSReqReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppnsPublicHTTPSReqReceived.setStatus('mandatory')
if mibBuilder.loadTexts: uppnsPublicHTTPSReqReceived.setDescription('The number of public HTTP requests the UPPushPAP received since it comes up.')
uppnsPublicHTTPReqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppnsPublicHTTPReqAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: uppnsPublicHTTPReqAccepted.setDescription('The number of public HTTP requests the UPPushPAP successfully accepted since it comes up.')
uppnsPrivateHTTPReqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppnsPrivateHTTPReqAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: uppnsPrivateHTTPReqAccepted.setDescription('The number of private HTTP requests the UPPushPAP successfully accepted since it comes up.')
uppnsPublicHTTPSReqAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppnsPublicHTTPSReqAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: uppnsPublicHTTPSReqAccepted.setDescription('The number of public HTTPS requests the UPPushPAP successfully accepted since it comes up.')
uppnsAvgNtfnsReceivedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppnsAvgNtfnsReceivedPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: uppnsAvgNtfnsReceivedPerSec.setDescription('The average number of notifications received per second by the UPPushPAP.')
uppnsAvgNtfnsAcceptedPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppnsAvgNtfnsAcceptedPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: uppnsAvgNtfnsAcceptedPerSec.setDescription('The average number of notifications accepted per second by the UPPushPAP.')
upPushPapForwardedNtfnsTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 3), )
if mibBuilder.loadTexts: upPushPapForwardedNtfnsTable.setStatus('mandatory')
if mibBuilder.loadTexts: upPushPapForwardedNtfnsTable.setDescription('The table holding statistics on the notification forwarded by UPPushPAP.')
upPushPapForwardedNtfnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 3, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uppfnPAPIndex"))
if mibBuilder.loadTexts: upPushPapForwardedNtfnsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upPushPapForwardedNtfnsEntry.setDescription('The entry associated with the forwarded notifications statistics for each UPPushPAP.')
uppfnPAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppfnPAPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uppfnPAPIndex.setDescription('The index for each PAP process in the SNMP table.')
uppfnPAPIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppfnPAPIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uppfnPAPIdentifier.setDescription('The unique identifier for each PAP process.')
uppfnPPGForwardedNtfns = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppfnPPGForwardedNtfns.setStatus('mandatory')
if mibBuilder.loadTexts: uppfnPPGForwardedNtfns.setDescription('The number of notifications forwarded to the UPPushPPG process by the UPPushPAP.')
uppfnPPGFailedNtfns = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppfnPPGFailedNtfns.setStatus('mandatory')
if mibBuilder.loadTexts: uppfnPPGFailedNtfns.setDescription('The number of notifications that failed to be forwarded to the UPPushPPG process by the UPPushPAP.')
uppfnMessengerForwardedNtfns = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppfnMessengerForwardedNtfns.setStatus('mandatory')
if mibBuilder.loadTexts: uppfnMessengerForwardedNtfns.setDescription('The number of notifications forwarded to the UPLMessenger process by the UPPushPAP.')
uppfnMessengerFailedNtfns = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppfnMessengerFailedNtfns.setStatus('mandatory')
if mibBuilder.loadTexts: uppfnMessengerFailedNtfns.setDescription('The number of notifications that failed to be forwarded to the UPLMessenger process by the UPPushPAP.')
upPushPapTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 20))
uppTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 5, 1, 20, 1), DisplayString())
if mibBuilder.loadTexts: uppTrapInfo.setStatus('optional')
if mibBuilder.loadTexts: uppTrapInfo.setDescription('Text string that provides additional information about the trap.')
uppStartup = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 5) + (0,1000)).setObjects(("OPENWAVE-MIB", "uppdPAPIdentifier"), ("OPENWAVE-MIB", "uppdHostName"), ("OPENWAVE-MIB", "uppdProcessId"), ("OPENWAVE-MIB", "uppTrapInfo"))
if mibBuilder.loadTexts: uppStartup.setDescription('An event that is generated when the UPPushPAP is started.')
uppShutDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 5) + (0,1001)).setObjects(("OPENWAVE-MIB", "uppdPAPIdentifier"), ("OPENWAVE-MIB", "uppdHostName"), ("OPENWAVE-MIB", "uppdProcessId"), ("OPENWAVE-MIB", "uppTrapInfo"))
if mibBuilder.loadTexts: uppShutDown.setDescription('An event that is generated when the UPPushPAP is shutting down. uppTrapInfo gives the reason for the shutdown.')
uppFailToStart = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 5) + (0,1002)).setObjects(("OPENWAVE-MIB", "uppdPAPIdentifier"), ("OPENWAVE-MIB", "uppdHostName"), ("OPENWAVE-MIB", "uppdProcessId"), ("OPENWAVE-MIB", "uppTrapInfo"))
if mibBuilder.loadTexts: uppFailToStart.setDescription('An event that is generated when the UPPushPAP has failed to start-up. uppTrapInfo gives the reason for the shutdown.')
uppDatabaseConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 5) + (0,1003)).setObjects(("OPENWAVE-MIB", "uppdPAPIdentifier"), ("OPENWAVE-MIB", "uppdHostName"), ("OPENWAVE-MIB", "uppdProcessId"), ("OPENWAVE-MIB", "uppTrapInfo"))
if mibBuilder.loadTexts: uppDatabaseConnectionDown.setDescription('An event that is generated when the UPPushPAP detects that the database connection is down.')
uppInternalErrors = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 5) + (0,1006)).setObjects(("OPENWAVE-MIB", "uppdPAPIdentifier"), ("OPENWAVE-MIB", "uppdHostName"), ("OPENWAVE-MIB", "uppdProcessId"), ("OPENWAVE-MIB", "uppTrapInfo"))
if mibBuilder.loadTexts: uppInternalErrors.setDescription('An event that is generated when the UPPushPAP detects an internal error. uppTrapInfo gives error name.')
uppPublicHTTPServiceStarted = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 5) + (0,1007)).setObjects(("OPENWAVE-MIB", "uppdPAPIdentifier"), ("OPENWAVE-MIB", "uppdHostName"), ("OPENWAVE-MIB", "uppdProcessId"), ("OPENWAVE-MIB", "uppTrapInfo"))
if mibBuilder.loadTexts: uppPublicHTTPServiceStarted.setDescription('An event that is generated when the UPPushPAP is starting the Public HTTP service. This is sent as a warning because the service lowers the overall security of the system.')
uppPublicHTTPServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 5) + (0,1008)).setObjects(("OPENWAVE-MIB", "uppdPAPIdentifier"), ("OPENWAVE-MIB", "uppdHostName"), ("OPENWAVE-MIB", "uppdProcessId"), ("OPENWAVE-MIB", "uppTrapInfo"))
if mibBuilder.loadTexts: uppPublicHTTPServiceDown.setDescription('An event that is generated when the UPPushPAP detects the Public HTTP interface is down.')
uppPrivateHTTPServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 5) + (0,1009)).setObjects(("OPENWAVE-MIB", "uppdPAPIdentifier"), ("OPENWAVE-MIB", "uppdHostName"), ("OPENWAVE-MIB", "uppdProcessId"), ("OPENWAVE-MIB", "uppTrapInfo"))
if mibBuilder.loadTexts: uppPrivateHTTPServiceDown.setDescription('An event that is generated when the UPPushPAP detects the Private HTTP interface is down.')
uppPublicHTTPSServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 5) + (0,1010)).setObjects(("OPENWAVE-MIB", "uppdPAPIdentifier"), ("OPENWAVE-MIB", "uppdHostName"), ("OPENWAVE-MIB", "uppdProcessId"), ("OPENWAVE-MIB", "uppTrapInfo"))
if mibBuilder.loadTexts: uppPublicHTTPSServiceDown.setDescription('An event that is generated when the UPPushPAP detects the Public secure HTTP interface is down.')
uppPPGInterfaceDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 5) + (0,1011)).setObjects(("OPENWAVE-MIB", "uppdPAPIdentifier"), ("OPENWAVE-MIB", "uppdHostName"), ("OPENWAVE-MIB", "uppdProcessId"), ("OPENWAVE-MIB", "uppTrapInfo"))
if mibBuilder.loadTexts: uppPPGInterfaceDown.setDescription('An event that is generated when the UPPushPAP detects a PPG interface is down. uppTrapInfo gives the PPG identifier')
uppPPGInterfaceUp = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 5) + (0,1012)).setObjects(("OPENWAVE-MIB", "uppdPAPIdentifier"), ("OPENWAVE-MIB", "uppdHostName"), ("OPENWAVE-MIB", "uppdProcessId"), ("OPENWAVE-MIB", "uppTrapInfo"))
if mibBuilder.loadTexts: uppPPGInterfaceUp.setDescription('An event that is generated when the UPPushPAP detects a PPG interface is up. uppTrapInfo gives the PPG identifier')
uppPAPSuspended = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 5) + (0,1013)).setObjects(("OPENWAVE-MIB", "uppdPAPIdentifier"), ("OPENWAVE-MIB", "uppdHostName"), ("OPENWAVE-MIB", "uppdProcessId"), ("OPENWAVE-MIB", "uppTrapInfo"))
if mibBuilder.loadTexts: uppPAPSuspended.setDescription('An event that is generated when the UPPushPAP process has been suspended.')
uppPAPResumed = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 5) + (0,1014)).setObjects(("OPENWAVE-MIB", "uppdPAPIdentifier"), ("OPENWAVE-MIB", "uppdHostName"), ("OPENWAVE-MIB", "uppdProcessId"), ("OPENWAVE-MIB", "uppTrapInfo"))
if mibBuilder.loadTexts: uppPAPResumed.setDescription('An event that is generated when the UPPushPAP has resumed.')
upPushPpg = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 5, 2))
upPushPpgDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 5, 2, 1), )
if mibBuilder.loadTexts: upPushPpgDescriptionTable.setStatus('mandatory')
if mibBuilder.loadTexts: upPushPpgDescriptionTable.setDescription('The table holding UPPushPPG identifying information.')
upPushPpgDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 5, 2, 1, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uppgdPPGIndex"))
if mibBuilder.loadTexts: upPushPpgDescriptionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upPushPpgDescriptionEntry.setDescription('The entry associated with each UPPushPPG.')
uppgdPPGIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppgdPPGIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uppgdPPGIndex.setDescription('The index for each PPG process in the SNMP table.')
uppgdPPGIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppgdPPGIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uppgdPPGIdentifier.setDescription('The unique identifier for each PPG process.')
uppgdProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppgdProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: uppgdProcessId.setDescription('The process id of the UPPushPPG.')
uppgdHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppgdHostName.setStatus('mandatory')
if mibBuilder.loadTexts: uppgdHostName.setDescription('The host name of the node running UPPushPPG.')
uppgdMsgServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppgdMsgServerPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: uppgdMsgServerPortNumber.setDescription('The port number on which the UPPushPPG connects to the proxy to deliver notifications.')
uppgdStartupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppgdStartupTime.setStatus('mandatory')
if mibBuilder.loadTexts: uppgdStartupTime.setDescription('The date and time the UPPushPPG started.')
upPushPpgNtfnStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1900, 4, 5, 2, 2), )
if mibBuilder.loadTexts: upPushPpgNtfnStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: upPushPpgNtfnStatsTable.setDescription('The table holding statistics on notification services provided by UPPushPPG.')
upPushPpgNtfnStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1900, 4, 5, 2, 2, 1), ).setIndexNames((0, "OPENWAVE-MIB", "uppgnsPPGIndex"))
if mibBuilder.loadTexts: upPushPpgNtfnStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upPushPpgNtfnStatsEntry.setDescription('The entry associated with notifications statistics for each UPPushPPG.')
uppgnsPPGIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppgnsPPGIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uppgnsPPGIndex.setDescription('The index for each PPG process in the SNMP table.')
uppgnsPPGIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppgnsPPGIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uppgnsPPGIdentifier.setDescription('The unique identifier for each PPG process.')
uppgnsTotalNumOfPendingNtfns = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppgnsTotalNumOfPendingNtfns.setStatus('mandatory')
if mibBuilder.loadTexts: uppgnsTotalNumOfPendingNtfns.setDescription('The total number of pending notifications in the cache as maintained by the UPPushPPG.')
uppgnsAvgNtfnsDeliveredPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppgnsAvgNtfnsDeliveredPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: uppgnsAvgNtfnsDeliveredPerSec.setDescription('The average number of notifications delivered per second by the UPPushPPG.')
uppgnsAvgNtfnsMarkedUnDelvrPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1900, 4, 5, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uppgnsAvgNtfnsMarkedUnDelvrPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: uppgnsAvgNtfnsMarkedUnDelvrPerSec.setDescription('The average number of notifications marked undeliverable per second by the UPPushPPG.')
upPushPpgTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 4, 5, 2, 20))
uppgTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 1900, 4, 5, 2, 20, 1), DisplayString())
if mibBuilder.loadTexts: uppgTrapInfo.setStatus('optional')
if mibBuilder.loadTexts: uppgTrapInfo.setDescription('Text string that provides additional information about the trap.')
uppgStartup = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 5) + (0,1100)).setObjects(("OPENWAVE-MIB", "uppgdPPGIdentifier"), ("OPENWAVE-MIB", "uppgdHostName"), ("OPENWAVE-MIB", "uppgdProcessId"), ("OPENWAVE-MIB", "uppgTrapInfo"))
if mibBuilder.loadTexts: uppgStartup.setDescription('An event that is generated when the UPPushPPG is started.')
upgFailToStart = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 5) + (0,1101)).setObjects(("OPENWAVE-MIB", "uppgdPPGIdentifier"), ("OPENWAVE-MIB", "uppgdHostName"), ("OPENWAVE-MIB", "uppgdProcessId"), ("OPENWAVE-MIB", "uppgTrapInfo"))
if mibBuilder.loadTexts: upgFailToStart.setDescription('An event that is generated when the UPPushPPG has failed to start-up. uppTrapInfo gives the reason for the shutdown.')
uppgDatabaseConnectionDown = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 5) + (0,1102)).setObjects(("OPENWAVE-MIB", "uppgdPPGIdentifier"), ("OPENWAVE-MIB", "uppgdHostName"), ("OPENWAVE-MIB", "uppgdProcessId"), ("OPENWAVE-MIB", "uppgTrapInfo"))
if mibBuilder.loadTexts: uppgDatabaseConnectionDown.setDescription('An event that is generated when the UPPushPPG detects that the database connection is down.')
uppgInternalErrors = NotificationType((1, 3, 6, 1, 4, 1, 1900, 4, 5) + (0,1105)).setObjects(("OPENWAVE-MIB", "uppgdPPGIdentifier"), ("OPENWAVE-MIB", "uppgdHostName"), ("OPENWAVE-MIB", "uppgdProcessId"), ("OPENWAVE-MIB", "uppgTrapInfo"))
if mibBuilder.loadTexts: uppgInternalErrors.setDescription('An event that is generated when the UPPushPPG detects an internal error. uppgTrapInfo gives error name.')
services = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 5))
upMail = MibIdentifier((1, 3, 6, 1, 4, 1, 1900, 5, 1))
mibBuilder.exportSymbols("OPENWAVE-MIB", upiInitFailToStart=upiInitFailToStart, uplAgentLimitedResourceTable=uplAgentLimitedResourceTable, uplMessengerNtfnStatsTable=uplMessengerNtfnStatsTable, uplrNbRouterConnectionUp=uplrNbRouterConnectionUp, upsUPWebServiceUp=upsUPWebServiceUp, uplMessengerNtfnCacheEntry=uplMessengerNtfnCacheEntry, uplrsdHostName=uplrsdHostName, uplcrdIpAddress=uplcrdIpAddress, uplrdStartUpTime=uplrdStartUpTime, uplmdIpAddress=uplmdIpAddress, upldUplAgentsDisconnected=upldUplAgentsDisconnected, uplmDBMinConnections=uplmDBMinConnections, uplmdOpenAgentStreams=uplmdOpenAgentStreams, systems=systems, uplMessenger=uplMessenger, uppnsPAPIdentifier=uppnsPAPIdentifier, uplaRequestsDropped=uplaRequestsDropped, uplAgentTrapInfo=uplAgentTrapInfo, uppfnPPGFailedNtfns=uppfnPPGFailedNtfns, uplmhProcessId=uplmhProcessId, uppTrapInfo=uppTrapInfo, upiInitChildProcessEntry=upiInitChildProcessEntry, uplmnsAvgNtfnsAddedPerSec=uplmnsAvgNtfnsAddedPerSec, uplaSilentErrors=uplaSilentErrors, uplaErrorClass=uplaErrorClass, uplmhPrivateHTTPCurrentDispQueueLen=uplmhPrivateHTTPCurrentDispQueueLen, uplrssAuthenticationStatus=uplrssAuthenticationStatus, upipChildProcessExePath=upipChildProcessExePath, uplrssInterimAccMsgReceived=uplrssInterimAccMsgReceived, uppgdStartupTime=uppgdStartupTime, uplDispatcher=uplDispatcher, uplrsFailedToStart=uplrsFailedToStart, uplaKeyErrors=uplaKeyErrors, uplaRadiusClientStats=uplaRadiusClientStats, uplmhPublicHTTPSMaxDispQueueLength=uplmhPublicHTTPSMaxDispQueueLength, uplwProcessId=uplwProcessId, uplmDBConnectionCacheMeanWaitTime=uplmDBConnectionCacheMeanWaitTime, uplaOtherErrors=uplaOtherErrors, upipChildProcessType=upipChildProcessType, uplAgentWapErrorStatsSummaryTable=uplAgentWapErrorStatsSummaryTable, uplmnsIpAddress=uplmnsIpAddress, uplRadiusServerDescriptionEntry=uplRadiusServerDescriptionEntry, upiInitChildProcessTable=upiInitChildProcessTable, upPushPapDescriptionEntry=upPushPapDescriptionEntry, uplBillingMgrDescriptionEntry=uplBillingMgrDescriptionEntry, uplbfsFileDiskSpaceUsed=uplbfsFileDiskSpaceUsed, uplmAgentConnectionDown=uplmAgentConnectionDown, uplmDatabaseConnectionDown=uplmDatabaseConnectionDown, upiChildProcessesBelowMinimum=upiChildProcessesBelowMinimum, uplAgentDescriptionTable=uplAgentDescriptionTable, upsUPPimServiceNormal=upsUPPimServiceNormal, uplMessengerDescriptionTable=uplMessengerDescriptionTable, uplmhPublicHTTPSBusyThreads=uplmhPublicHTTPSBusyThreads, uplaHostName=uplaHostName, uplrProtocolError=uplrProtocolError, upPushPpgNtfnStatsTable=upPushPpgNtfnStatsTable, uplBillingMgrEventStatsEntry=uplBillingMgrEventStatsEntry, uplmhPublicHTTPOpenConnections=uplmhPublicHTTPOpenConnections, uplmhPrivateHTTPMaxConnections=uplmhPrivateHTTPMaxConnections, upitChildProcessHostName=upitChildProcessHostName, uplAgentAirLinkStatsTable=uplAgentAirLinkStatsTable, uppdPublicHTTPSPortNumber=uppdPublicHTTPSPortNumber, upldDatabaseConnectionDown=upldDatabaseConnectionDown, uplaEncryptedSessions=uplaEncryptedSessions, uppnsPublicHTTPReqReceived=uppnsPublicHTTPReqReceived, uplbesEventsReceived=uplbesEventsReceived, upPushPap=upPushPap, uplHdtpStats=uplHdtpStats, uplAgentWapWTPTransactionStatsTable=uplAgentWapWTPTransactionStatsTable, upipInitProcessId=upipInitProcessId, upiInitStats=upiInitStats, uppPPGInterfaceUp=uppPPGInterfaceUp, uplrssRasServiceAddress=uplrssRasServiceAddress, upsBookmarksServiceDown=upsBookmarksServiceDown, uppfnMessengerForwardedNtfns=uppfnMessengerForwardedNtfns, uplBillingMgrEventStatsTable=uplBillingMgrEventStatsTable, uplAgentTransactionStatsEntry=uplAgentTransactionStatsEntry, uppdPublicHTTPPortNumber=uppdPublicHTTPPortNumber, uplmnsNumStatusFound=uplmnsNumStatusFound, upldSubscribersLoaded=upldSubscribersLoaded, uplAgentStackServiceMeanTableItemsDeviation=uplAgentStackServiceMeanTableItemsDeviation, uplbfsArchiveDiskSpaceUsed=uplbfsArchiveDiskSpaceUsed, uplassAgentIdentifier=uplassAgentIdentifier, uplRadiusServerStatsTable=uplRadiusServerStatsTable, uplAgentWebAccessStatsEntry=uplAgentWebAccessStatsEntry, uplaWapAbortTransaction=uplaWapAbortTransaction, upAdminTrapInfo=upAdminTrapInfo, uplAgentWapTransactionStatsEntry=uplAgentWapTransactionStatsEntry, uplbdPortNumber=uplbdPortNumber, uplAgentWapErrorStatsDetailTable=uplAgentWapErrorStatsDetailTable, uplmhPublicHTTPSMaxThreads=uplmhPublicHTTPSMaxThreads, uppgTrapInfo=uppgTrapInfo, uplmnsNumDeleted=uplmnsNumDeleted, uplbfsArchiveFilePath=uplbfsArchiveFilePath, uppPublicHTTPSServiceDown=uppPublicHTTPSServiceDown, uplDispatcherTrapInfo=uplDispatcherTrapInfo, uplaSessionErrors=uplaSessionErrors, upPushPpgNtfnStatsEntry=upPushPpgNtfnStatsEntry, upipsChildProcessesStarted=upipsChildProcessesStarted, uppnsPrivateHTTPReqReceived=uppnsPrivateHTTPReqReceived, upidInitProcessType=upidInitProcessType, uplaStartUpTime=uplaStartUpTime, uplBillingMgr=uplBillingMgr, upsUPMailServiceDown=upsUPMailServiceDown, uplaasAgentIdentifier=uplaasAgentIdentifier, uplawssAgentIdentifier=uplawssAgentIdentifier, upipsInitProcessId=upipsInitProcessId, uplaDeviationOfTransactionLife=uplaDeviationOfTransactionLife, uplAgentErrorStatsSummaryTable=uplAgentErrorStatsSummaryTable, uplAgent=uplAgent, uplaWapResultTpdus=uplaWapResultTpdus, uppnsPublicHTTPSReqAccepted=uppnsPublicHTTPSReqAccepted, upipChildProcessState=upipChildProcessState, upsBookmarksServiceUp=upsBookmarksServiceUp, uplMessengerTrapInfo=uplMessengerTrapInfo, upldTrapInfo=upldTrapInfo, upipChildProcessStatus=upipChildProcessStatus, uplmnsPublicHTTPSReqProcessed=uplmnsPublicHTTPSReqProcessed, uplRadiusServerDescriptionTable=uplRadiusServerDescriptionTable, uppPAPResumed=uppPAPResumed, uppfnMessengerFailedNtfns=uppfnMessengerFailedNtfns, uplmdStartupTime=uplmdStartupTime, upipInitProcessType=upipInitProcessType, uplrssProcessId=uplrssProcessId, uplmhIpAddress=uplmhIpAddress, uplbfsCompressorName=uplbfsCompressorName, uppgdPPGIndex=uppgdPPGIndex, uplbesIpAddress=uplbesIpAddress, uplaOutOfResource=uplaOutOfResource, upsUPPimServiceDown=upsUPPimServiceDown, upPushPpg=upPushPpg, uplmnsNumAddRequests=uplmnsNumAddRequests, uplAgentRadiusClientStatsTable=uplAgentRadiusClientStatsTable, upldOutOfResouce=upldOutOfResouce, uplaWapErrorSeverity=uplaWapErrorSeverity, uplmdNumTxnProcessed=uplmdNumTxnProcessed, uplmInvalidConfig=uplmInvalidConfig, uppgdProcessId=uppgdProcessId, uplmnsNumStatusRequests=uplmnsNumStatusRequests, uplaHttpRequestsSucceeded=uplaHttpRequestsSucceeded, uplmnsPrivateHTTPReqProcessed=uplmnsPrivateHTTPReqProcessed, uplaesAgentIdentifier=uplaesAgentIdentifier, uplmdMaxMsgClientStreams=uplmdMaxMsgClientStreams, uplrHdtpStats=uplrHdtpStats, uplaActiveWapSessions=uplaActiveWapSessions, uplawtsAgentIdentifier=uplawtsAgentIdentifier, uplmdMsgServerPortNumber=uplmdMsgServerPortNumber, upldSuccessfulMappingHits=upldSuccessfulMappingHits, upsHomePageServiceUp=upsHomePageServiceUp, uplmDatabaseConnectionUp=uplmDatabaseConnectionUp, uplaStartup=uplaStartup, upipsInitIpAddr=upipsInitIpAddr, upldUplRadiusConnectionDown=upldUplRadiusConnectionDown, uplmhPublicHTTPMaxDispQueueLength=uplmhPublicHTTPMaxDispQueueLength, uplrsDatabaseConnectionDown=uplrsDatabaseConnectionDown, uppdPAPIndex=uppdPAPIndex, uplMessengerDescriptionEntry=uplMessengerDescriptionEntry, uplMessengerNtfnStatsEntry=uplMessengerNtfnStatsEntry, uplcrdUpdateInterval=uplcrdUpdateInterval, upidInitProcessId=upidInitProcessId, uplaOtherWapErrors=uplaOtherWapErrors, uplmncAvgNumOfPendingNtfnsPerSub=uplmncAvgNumOfPendingNtfnsPerSub, uplmhPublicHTTPSMaxConnections=uplmhPublicHTTPSMaxConnections, uplmhPrivateHTTPBusyThreads=uplmhPrivateHTTPBusyThreads, uppgdMsgServerPortNumber=uppgdMsgServerPortNumber, uplmnsProcessId=uplmnsProcessId, uplrdPortNumber=uplrdPortNumber, upLinkConfig=upLinkConfig, upLinkProcesses=upLinkProcesses, uppgnsAvgNtfnsMarkedUnDelvrPerSec=uppgnsAvgNtfnsMarkedUnDelvrPerSec, uppnsPublicHTTPReqAccepted=uppnsPublicHTTPReqAccepted, uplaSuccessfulMappingHits=uplaSuccessfulMappingHits, upldHostName=upldHostName, uplcrdRequestAllowance=uplcrdRequestAllowance, uplaHttpsRequestsSucceeded=uplaHttpsRequestsSucceeded, uppdProcessId=uppdProcessId, uplbfsBillingFilePath=uplbfsBillingFilePath, uplmShutdown=uplmShutdown, uppgnsPPGIndex=uppgnsPPGIndex, upPushPapNtfnStatsEntry=upPushPapNtfnStatsEntry, uplBillingMgrTrapInfo=uplBillingMgrTrapInfo, uppShutDown=uppShutDown, upiDatabaseConnectionDown=upiDatabaseConnectionDown, uplmhPublicHTTPMaxConnections=uplmhPublicHTTPMaxConnections, uplbBillingLogFileError=uplbBillingLogFileError, upipsChildProcessesRunning=upipsChildProcessesRunning, uplaRepliesTimedOut=uplaRepliesTimedOut, uplaHttpRequestsStarted=uplaHttpRequestsStarted, uplaSessionsStarted=uplaSessionsStarted, uplcrTrapInfo=uplcrTrapInfo, uplBillingMgrFileStatsEntry=uplBillingMgrFileStatsEntry, uplNbRouterDescriptionTable=uplNbRouterDescriptionTable, upAdmin=upAdmin, uppgdHostName=uppgdHostName, upldInvalidConfig=upldInvalidConfig, upsHomePageServiceDown=upsHomePageServiceDown, uplaInternalFatalErrors=uplaInternalFatalErrors, uplAgentAirLinkStatsEntry=uplAgentAirLinkStatsEntry, openwave=openwave, uplNbRouter=uplNbRouter, uplmnsNumDeleteRequests=uplmnsNumDeleteRequests, uppnsPAPIndex=uppnsPAPIndex, upldDatabaseConnectionUp=upldDatabaseConnectionUp, uplcrCertificateUpdateFailed=uplcrCertificateUpdateFailed, upiDatabaseConnectionUp=upiDatabaseConnectionUp, uplmnsAvgNtfnsExpiredPerSec=uplmnsAvgNtfnsExpiredPerSec, upsPushServiceDown=upsPushServiceDown, uplAgentStackServiceWDPPortNumber=uplAgentStackServiceWDPPortNumber, uplaTransactionErrors=uplaTransactionErrors, uplWap=uplWap, uplAgentTransactionStatsTable=uplAgentTransactionStatsTable, uplwHostName=uplwHostName, uplmnsNumAdded=uplmnsNumAdded, upipsChildProcessesDied=upipsChildProcessesDied, upsUPMailServiceNormal=upsUPMailServiceNormal, uplRadiusServerTrapInfo=uplRadiusServerTrapInfo, uplaErrorCount=uplaErrorCount, uplaMeanTransactionLife=uplaMeanTransactionLife, uplDispatcherStats=uplDispatcherStats, uplbBillingDirectTransferError=uplbBillingDirectTransferError, uplcrdProcessId=uplcrdProcessId, uplrBillingLogError=uplrBillingLogError, uplaDatabaseConnectionUp=uplaDatabaseConnectionUp, uplRadiusServerStatsEntry=uplRadiusServerStatsEntry, uppgStartup=uppgStartup, uplaFaxMgrConnectionDown=uplaFaxMgrConnectionDown, uplmhPrivateHTTPMaxDispQueueLength=uplmhPrivateHTTPMaxDispQueueLength, uplmStackServiceStats=uplmStackServiceStats, uplrdProcessId=uplrdProcessId, uplrDatabaseConnectionUp=uplrDatabaseConnectionUp, uplAgentStackServiceEntry=uplAgentStackServiceEntry, uplaMeanRetriesPerThousandTxn=uplaMeanRetriesPerThousandTxn, uplbShutdown=uplbShutdown, uplMessengerHTTPStatsTable=uplMessengerHTTPStatsTable, upsUPAdminServiceDown=upsUPAdminServiceDown, upiInitDescriptionTable=upiInitDescriptionTable, uplbDiskSpaceLow=uplbDiskSpaceLow, upPushPpgTrapInfo=upPushPpgTrapInfo, uplAgentWebAccessStatsTable=uplAgentWebAccessStatsTable, uplaTransactionWapErrors=uplaTransactionWapErrors, upPushPpgDescriptionEntry=upPushPpgDescriptionEntry, uplaDynamicUpdateStarted=uplaDynamicUpdateStarted, uppPAPSuspended=uppPAPSuspended, uplCertRequesterTrapInfo=uplCertRequesterTrapInfo, uplaHttpsDeviationOfResponseTime=uplaHttpsDeviationOfResponseTime, uppPrivateHTTPServiceDown=uppPrivateHTTPServiceDown, uplbDatabaseConnectionDown=uplbDatabaseConnectionDown, uplmPublicHTTPSServiceDown=uplmPublicHTTPSServiceDown, uppdPAPIdentifier=uppdPAPIdentifier, upldState=upldState, upPushPapTrapInfo=upPushPapTrapInfo, upldUplAgentsLoaded=upldUplAgentsLoaded, uppdStartupTime=uppdStartupTime, uppfnPAPIndex=uppfnPAPIndex)
mibBuilder.exportSymbols("OPENWAVE-MIB", uplmhPublicHTTPTimesDispQueueFull=uplmhPublicHTTPTimesDispQueueFull, uplaTransactionsSucceeded=uplaTransactionsSucceeded, uplAgentWapErrorStatsSummaryEntry=uplAgentWapErrorStatsSummaryEntry, upsProxyServiceUp=upsProxyServiceUp, uplaKeyExchanges=uplaKeyExchanges, uplmhPublicHTTPSOpenConnections=uplmhPublicHTTPSOpenConnections, upiInitShutdown=upiInitShutdown, uplMessengerAirlinkStatsTable=uplMessengerAirlinkStatsTable, uplmdHostName=uplmdHostName, uplrSMSCConnectionUp=uplrSMSCConnectionUp, uplaRepliesDelivered=uplaRepliesDelivered, uplrsdProcessId=uplrsdProcessId, uplrClientIpAddress=uplrClientIpAddress, upldPortNumber=upldPortNumber, uppfnPAPIdentifier=uppfnPAPIdentifier, uplcrInvalidCertResponse=uplcrInvalidCertResponse, uplrdIpAddress=uplrdIpAddress, upPushPapForwardedNtfnsEntry=upPushPapForwardedNtfnsEntry, upipChildProcessIpAddr=upipChildProcessIpAddr, uplrStartup=uplrStartup, uplmnsAvgNtfnsMarkedUnDelvrPerSec=uplmnsAvgNtfnsMarkedUnDelvrPerSec, uplBillingMgrFileStatsTable=uplBillingMgrFileStatsTable, uplmnsNumExpired=uplmnsNumExpired, uplmStartup=uplmStartup, uplAgentStackServiceName=uplAgentStackServiceName, uplwCLIDMappingError=uplwCLIDMappingError, upgFailToStart=upgFailToStart, uplmnsPublicHTTPReqReceived=uplmnsPublicHTTPReqReceived, uplaWapErrorCode=uplaWapErrorCode, upldUplAgentConnectionDown=upldUplAgentConnectionDown, uplDispatcherDescription=uplDispatcherDescription, upipChildProcessStartTime=upipChildProcessStartTime, upsUPPimServiceUp=upsUPPimServiceUp, uplaTotalMappingTableHits=uplaTotalMappingTableHits, uplawsAgentIdentifier=uplawsAgentIdentifier, uplrInternalError=uplrInternalError, uplAgentSessionStatsEntry=uplAgentSessionStatsEntry, uplaTrapInfo=uplaTrapInfo, upldUplAgentId=upldUplAgentId, uplAgentStackServiceMeanTableItems=uplAgentStackServiceMeanTableItems, uplaBillingInitError=uplaBillingInitError, upsUPAdminServiceUp=upsUPAdminServiceUp, uppStartup=uppStartup, uplrssIpAddress=uplrssIpAddress, uplaHttpMeanResponseTime=uplaHttpMeanResponseTime, upsProxyServiceNormal=upsProxyServiceNormal, uplNbRouterAirlinkTable=uplNbRouterAirlinkTable, uppFailToStart=uppFailToStart, uplaRequestsReceived=uplaRequestsReceived, uplmnsPublicHTTPSReqReceived=uplmnsPublicHTTPSReqReceived, uplbStartup=uplbStartup, uplaDynamicUpdateStopped=uplaDynamicUpdateStopped, uplAgentStackServiceMeanGarbageCollectTimeDeviation=uplAgentStackServiceMeanGarbageCollectTimeDeviation, uplaTotalErrors=uplaTotalErrors, upipChildProcessHostName=upipChildProcessHostName, uppnsAvgNtfnsAcceptedPerSec=uppnsAvgNtfnsAcceptedPerSec, uplaProcessId=uplaProcessId, uplrTrapInfo=uplrTrapInfo, uplmHdtpStats=uplmHdtpStats, upiChildProcessFailToStart=upiChildProcessFailToStart, upldStartup=upldStartup, uplwTrapInfo=uplwTrapInfo, upsProxyServiceSlow=upsProxyServiceSlow, uplrsTrapInfo=uplrsTrapInfo, uplaDeviationOfResponseTime=uplaDeviationOfResponseTime, uplrsdPortNumber=uplrsdPortNumber, uplaHttpsRequestsStarted=uplaHttpsRequestsStarted, upiAllChildProcessesRestart=upiAllChildProcessesRestart, uplaProtoSessions=uplaProtoSessions, uplRadiusServer=uplRadiusServer, uplmhPublicHTTPTimesAllThreadsBusy=uplmhPublicHTTPTimesAllThreadsBusy, upldRequestsReceived=upldRequestsReceived, uplaMeanResponseTime=uplaMeanResponseTime, uplaSessionsSucceeded=uplaSessionsSucceeded, uplMessengerNtfnCacheTable=uplMessengerNtfnCacheTable, uplAgentStackServiceLoaded=uplAgentStackServiceLoaded, uppnsPrivateHTTPReqAccepted=uppnsPrivateHTTPReqAccepted, uplmhPublicHTTPSTimesAllThreadsBusy=uplmhPublicHTTPSTimesAllThreadsBusy, upidInitStartupTime=upidInitStartupTime, uplrsdIpAddress=uplrsdIpAddress, uplaBillingLogError=uplaBillingLogError, upsProxyServiceDown=upsProxyServiceDown, uplmhPrivateHTTPOpenConnections=uplmhPrivateHTTPOpenConnections, uppDatabaseConnectionDown=uppDatabaseConnectionDown, uplmdPublicHTTPPortNumber=uplmdPublicHTTPPortNumber, uplCertRequesterDescriptionEntry=uplCertRequesterDescriptionEntry, uplbTrapInfo=uplbTrapInfo, uppnsPublicHTTPSReqReceived=uppnsPublicHTTPSReqReceived, upiChildProcessShutdown=upiChildProcessShutdown, uplrdHostName=uplrdHostName, uplmncTotalNumOfPendingNtfns=uplmncTotalNumOfPendingNtfns, uplbDiskSpaceCriticallyLow=uplbDiskSpaceCriticallyLow, upipInitIpAddr=upipInitIpAddr, uplAgentErrorStatsDetailEntry=uplAgentErrorStatsDetailEntry, uplarcsAgentIdentifier=uplarcsAgentIdentifier, uplrClientHostName=uplrClientHostName, uplrClientProcessId=uplrClientProcessId, uplrSMSCConnectionDown=uplrSMSCConnectionDown, upsBookmarksServiceNormal=upsBookmarksServiceNormal, uplAgentStackServiceMeanBucketChainLength=uplAgentStackServiceMeanBucketChainLength, uplmhPrivateHTTPTimesAllThreadsBusy=uplmhPrivateHTTPTimesAllThreadsBusy, uplmhPublicHTTPSTimesDispQueueFull=uplmhPublicHTTPSTimesDispQueueFull, uplbdIpAddress=uplbdIpAddress, uplAgentStackServiceAdaptorThreads=uplAgentStackServiceAdaptorThreads, uplaTransactionsActive=uplaTransactionsActive, uplmdPrivateHTTPPortNumber=uplmdPrivateHTTPPortNumber, upldRequestsDropped=upldRequestsDropped, uplmDBConnectionCacheThreadWaits=uplmDBConnectionCacheThreadWaits, uplrBillingInitError=uplrBillingInitError, uplbfsMaxBillingFileSize=uplbfsMaxBillingFileSize, uplbdHostName=uplbdHostName, upPushPapNtfnStatsTable=upPushPapNtfnStatsTable, upiNoChildProcess=upiNoChildProcess, uplbdProcessId=uplbdProcessId, upsUPPimServiceSlow=upsUPPimServiceSlow, uplNbRouterAirlinkStatsTable=uplNbRouterAirlinkStatsTable, upldUplAgentConnectionUp=upldUplAgentConnectionUp, uplAgentStackServiceMeanBucketChainLengthDeviation=uplAgentStackServiceMeanBucketChainLengthDeviation, uplbdStartupTime=uplbdStartupTime, uplrNbRouterConnectionDown=uplrNbRouterConnectionDown, uplmnsAvgNtfnsDeliveredPerSec=uplmnsAvgNtfnsDeliveredPerSec, uppInternalErrors=uppInternalErrors, uplmnsPrivateHTTPReqReceived=uplmnsPrivateHTTPReqReceived, uplaDeviationOfRetriesPTTxn=uplaDeviationOfRetriesPTTxn, uplaHttpDeviationOfResponseTime=uplaHttpDeviationOfResponseTime, uplaWapErrorName=uplaWapErrorName, upldFailedMappingHits=upldFailedMappingHits, uplrsBillingLogError=uplrsBillingLogError, upsUPWebServiceSlow=upsUPWebServiceSlow, upipChildProcessStopTime=upipChildProcessStopTime, uplWapTrapInfo=uplWapTrapInfo, uppgInternalErrors=uppgInternalErrors, upiInitDescriptionEntry=upiInitDescriptionEntry, uplcrStartup=uplcrStartup, uplmncIpAddress=uplmncIpAddress, upiInitChildProcessStatsEntry=upiInitChildProcessStatsEntry, uplaActiveSessions=uplaActiveSessions, upipChildProcessExeArgs=upipChildProcessExeArgs, uplAgentDescriptionEntry=uplAgentDescriptionEntry, uplaSessionWapErrors=uplaSessionWapErrors, uplrShutdown=uplrShutdown, upitChildProcessId=upitChildProcessId, uplrsBillingInitError=uplrsBillingInitError, uplaDeviceErrors=uplaDeviceErrors, uplAgentStackServiceTableSize=uplAgentStackServiceTableSize, uplmdPublicHTTPSPortNumber=uplmdPublicHTTPSPortNumber, uppPublicHTTPServiceStarted=uppPublicHTTPServiceStarted, uplAgentWapSessionStatsEntry=uplAgentWapSessionStatsEntry, upitChildProcessType=upitChildProcessType, uplrssIpMsisdnPairsUpdated=uplrssIpMsisdnPairsUpdated, uplaErrorCode=uplaErrorCode, uppgDatabaseConnectionDown=uppgDatabaseConnectionDown, uplaWapSessionsStarted=uplaWapSessionsStarted, upiChildProcessStart=upiChildProcessStart, upldStartUpTime=upldStartUpTime, uppdPrivateHTTPPortNumber=uppdPrivateHTTPPortNumber, uppPublicHTTPServiceDown=uppPublicHTTPServiceDown, uplbesEventLogFailures=uplbesEventLogFailures, uplNbRouterDescriptionEntry=uplNbRouterDescriptionEntry, uplmPublicHTTPServiceStarted=uplmPublicHTTPServiceStarted, uplAgentStackServiceTableMeanNumberItemsGarbageCollected=uplAgentStackServiceTableMeanNumberItemsGarbageCollected, uplAgentWapWSPSessionStatsTable=uplAgentWapWSPSessionStatsTable, upidInitHostName=upidInitHostName, uplbfsIpAddress=uplbfsIpAddress, uplmdProcessId=uplmdProcessId, uplmncProcessId=uplmncProcessId, upsUPWebServiceNormal=upsUPWebServiceNormal, uplaShutdown=uplaShutdown, uplmhPublicHTTPSCurrentDispQueueLen=uplmhPublicHTTPSCurrentDispQueueLen, upldShutdown=upldShutdown, uppPPGInterfaceDown=uppPPGInterfaceDown, upPushPpgDescriptionTable=upPushPpgDescriptionTable, uplasstAgentIdentifier=uplasstAgentIdentifier, upMail=upMail, uplaHttpsMeanResponseTime=uplaHttpsMeanResponseTime, uplrsdStartupTime=uplrsdStartupTime, uplAgentWapErrorStatsDetailEntry=uplAgentWapErrorStatsDetailEntry, uplmhPublicHTTPMaxThreads=uplmhPublicHTTPMaxThreads, uplAgentStackServiceIdentifier=uplAgentStackServiceIdentifier, uplaDatabaseConnectionDown=uplaDatabaseConnectionDown, upidInitVersion=upidInitVersion, uplmhPublicHTTPBusyThreads=uplmhPublicHTTPBusyThreads, upPushProxy=upPushProxy, uplrStackServiceStats=uplrStackServiceStats, uplAgentStackServiceMeanGarbageCollectTime=uplAgentStackServiceMeanGarbageCollectTime, upLinkStaticInfo=upLinkStaticInfo, uplAgentProxyStats=uplAgentProxyStats, uplNbRouterTrapInfo=uplNbRouterTrapInfo, uplmnsPublicHTTPReqProcessed=uplmnsPublicHTTPReqProcessed, uplrClientConnectionDown=uplrClientConnectionDown, upsBookmarksServiceSlow=upsBookmarksServiceSlow, uplmPrivateHTTPServiceDown=uplmPrivateHTTPServiceDown, uppgnsPPGIdentifier=uppgnsPPGIdentifier, uplaFailedMappingHits=uplaFailedMappingHits, uplaErrorSeverity=uplaErrorSeverity, upipChildProcessId=upipChildProcessId, uplaWapStats=uplaWapStats, uppdHostName=uppdHostName, uplawesAgentIdentifier=uplawesAgentIdentifier, uplAgentStackServiceTable=uplAgentStackServiceTable, uplrClientConnectionUp=uplrClientConnectionUp, uplmnsSignalsSent=uplmnsSignalsSent, uplcrdStartupTime=uplcrdStartupTime, uplbesDirectTransferFailures=uplbesDirectTransferFailures, uplbesProcessId=uplbesProcessId, uplAgentRadiusClientStatsEntry=uplAgentRadiusClientStatsEntry, upipsChildProcessType=upipsChildProcessType, uplaInvalidConfig=uplaInvalidConfig, uppgnsAvgNtfnsDeliveredPerSec=uppgnsAvgNtfnsDeliveredPerSec, uplaErrorName=uplaErrorName, uplMessengerAirlinkTable=uplMessengerAirlinkTable, services=services, uppgdPPGIdentifier=uppgdPPGIdentifier, uplaWapErrorCount=uplaWapErrorCount, uplrssStartAccMsgReceived=uplrssStartAccMsgReceived, uplaMessengerConnectionDown=uplaMessengerConnectionDown, uplaAgentIdentifier=uplaAgentIdentifier, upsUPMailServiceUp=upsUPMailServiceUp, upiInit=upiInit, upiAllChildProcessesStop=upiAllChildProcessesStop, uplbDiskSpaceError=uplbDiskSpaceError, uppgnsTotalNumOfPendingNtfns=uppgnsTotalNumOfPendingNtfns, uplaRequestsNotValid=uplaRequestsNotValid, uplaTotalWapErrors=uplaTotalWapErrors, uplatsAgentIdentifier=uplatsAgentIdentifier, upiInitTrapInfo=upiInitTrapInfo, uplAgentErrorStatsDetailTable=uplAgentErrorStatsDetailTable, uplcrFatalError=uplcrFatalError, upldProcessId=upldProcessId, upsUPWebServiceDown=upsUPWebServiceDown, uplaWapInvokeTpdus=uplaWapInvokeTpdus, DisplayString=DisplayString, upLink=upLink, uplAgentStackServiceTableMeanNumberItemsGarbageCollectedDeviatn=uplAgentStackServiceTableMeanNumberItemsGarbageCollectedDeviatn, uplrssStopAccMsgReceived=uplrssStopAccMsgReceived, uppnsAvgNtfnsReceivedPerSec=uppnsAvgNtfnsReceivedPerSec, uppfnPPGForwardedNtfns=uppfnPPGForwardedNtfns, uplrDatabaseConnectionDown=uplrDatabaseConnectionDown, uplmhPrivateHTTPMaxThreads=uplmhPrivateHTTPMaxThreads, upldTotalMappingTableHits=upldTotalMappingTableHits, uplmhPrivateHTTPTimesDispQueueFull=uplmhPrivateHTTPTimesDispQueueFull, uplAgentSessionStatsTable=uplAgentSessionStatsTable, uplrssIpMsisdnPairsDeleted=uplrssIpMsisdnPairsDeleted, upPushPapDescriptionTable=upPushPapDescriptionTable, uplmDBConnectionCacheDeviationOfWaitTime=uplmDBConnectionCacheDeviationOfWaitTime, upPushPapForwardedNtfnsTable=upPushPapForwardedNtfnsTable, uplmTrapInfo=uplmTrapInfo, upipsInitProcessType=upipsInitProcessType, uplbfsProcessId=uplbfsProcessId, uplmnsCompletedNotifications=uplmnsCompletedNotifications, upsHomePageServiceSlow=upsHomePageServiceSlow, uplmDBMaxConnections=uplmDBMaxConnections, upitTrapInfo=upitTrapInfo, uplmPublicHTTPServiceDown=uplmPublicHTTPServiceDown)
mibBuilder.exportSymbols("OPENWAVE-MIB", uplaedAgentIdentifier=uplaedAgentIdentifier, upidInitIpAddr=upidInitIpAddr, uplAgentStackServiceAppProtoName=uplAgentStackServiceAppProtoName, upiInitChildProcessStatsTable=upiInitChildProcessStatsTable, uplaweAgentIdentifier=uplaweAgentIdentifier, uplCertRequester=uplCertRequester, uplcrdHostName=uplcrdHostName, uplmInternalErrors=uplmInternalErrors, upldKeyExchanges=upldKeyExchanges, upsPushServiceUp=upsPushServiceUp, uplmhPublicHTTPCurrentDispQueueLen=uplmhPublicHTTPCurrentDispQueueLen, uplBillingMgrDescriptionTable=uplBillingMgrDescriptionTable, uplaWapErrorClass=uplaWapErrorClass, upsUPMailServiceSlow=upsUPMailServiceSlow, uplDispRadiusClientStats=uplDispRadiusClientStats, uplMessengerHTTPStatsEntry=uplMessengerHTTPStatsEntry, uplrsStartup=uplrsStartup, uplCertRequesterDescriptionTable=uplCertRequesterDescriptionTable, uplAgentErrorStatsSummaryEntry=uplAgentErrorStatsSummaryEntry, upsTrapInfo=upsTrapInfo, uplrssIpMsisdnPairsInserted=uplrssIpMsisdnPairsInserted, uplaTransactionsStarted=uplaTransactionsStarted, uplaRequestsDuplicated=uplaRequestsDuplicated, uplaStackServiceStats=uplaStackServiceStats)
