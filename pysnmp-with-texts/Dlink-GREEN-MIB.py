#
# PySNMP MIB module Dlink-GREEN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Dlink-GREEN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:58:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
rnd, = mibBuilder.importSymbols("DLINK-3100-MIB", "rnd")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, iso, TimeTicks, Counter32, Integer32, ObjectIdentity, Bits, Gauge32, NotificationType, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "TimeTicks", "Counter32", "Integer32", "ObjectIdentity", "Bits", "Gauge32", "NotificationType", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
rlGreenEth = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 134))
rlGreenEth.setRevisions(('2008-08-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlGreenEth.setRevisionsDescriptions(('Add Green Ethernet Energy Detect and Short Reach support per port and per system rlGreenEthernet',))
if mibBuilder.loadTexts: rlGreenEth.setLastUpdated('200808150000Z')
if mibBuilder.loadTexts: rlGreenEth.setOrganization('Dlink Semiconductor, Inc.')
if mibBuilder.loadTexts: rlGreenEth.setContactInfo('www.Dlink.com')
if mibBuilder.loadTexts: rlGreenEth.setDescription('The private MIB module definition for Green Ethernet Energy Detect feature.')
rlGreenEthEnergyDetectEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 134, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlGreenEthEnergyDetectEnable.setStatus('current')
if mibBuilder.loadTexts: rlGreenEthEnergyDetectEnable.setDescription('This scalar defines Green Ethernet Enrgy-Detect Globaly')
rlGreenEthShortReachEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 134, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlGreenEthShortReachEnable.setStatus('current')
if mibBuilder.loadTexts: rlGreenEthShortReachEnable.setDescription('This scalar defines Green Ethernet Short-Reach Globaly')
rlGreenEthCurrentEnergyConsumption = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 134, 3), Unsigned32()).setUnits('mWatt').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGreenEthCurrentEnergyConsumption.setStatus('current')
if mibBuilder.loadTexts: rlGreenEthCurrentEnergyConsumption.setDescription('This scalar define Green Ethernet all modes current Energy consumption per system in mWatt in order to calculate current energy consumption in percent proportional to Consumption without Green Ethernet feature please use the following formula: (rlGreenEthCurrentEnergyConsumption/rlGreenEthCurrentMaxEnergyConsumption)*100')
rlGreenEthCurrentMaxEnergyConsumption = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 134, 4), Unsigned32()).setUnits('mWatt').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGreenEthCurrentMaxEnergyConsumption.setStatus('current')
if mibBuilder.loadTexts: rlGreenEthCurrentMaxEnergyConsumption.setDescription('This scalar define Green Ethernet current maximum consumption Energy consumption per system in mWatt, as it was without Green Ethernet feature.')
rlGreenEthCumulativePowerSaveMeter = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 134, 5), Unsigned32()).setUnits('Watt*Hour').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGreenEthCumulativePowerSaveMeter.setStatus('current')
if mibBuilder.loadTexts: rlGreenEthCumulativePowerSaveMeter.setDescription('This scalar define Green Ethernet cumulative power save per system in Watt*Hour')
rlGreenEthShortReachThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 134, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 70))).setUnits('meter').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlGreenEthShortReachThreshold.setStatus('current')
if mibBuilder.loadTexts: rlGreenEthShortReachThreshold.setDescription('The usage threshold expressed in meter for determinate the cable length for Short-Reach')
rlGreenEthCumulativePowerSaveMeterReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 134, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlGreenEthCumulativePowerSaveMeterReset.setStatus('current')
if mibBuilder.loadTexts: rlGreenEthCumulativePowerSaveMeterReset.setDescription("The rlGreenEthCumulativePowerSaveMeterReset indicates that rlGreenEthCumulativePowerSaveMeter should be set to ziro. This object behaviors as write-only than reading this object will always return 'false'.")
class RlGreenSavingType(TextualConvention, Integer32):
    description = 'Green saving types: energyDetect(1) uses energy detect shortReach(2) uses Short Reach'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("energyDetect", 1), ("shortReach", 2))

class NonOperReasonType(TextualConvention, Integer32):
    description = 'Reason why Green Ethernet is not activated saving on a port NP(1) Port is not present - Applicable in ED & SR LT(2) Link Type is not supported(fiber, auto media setect) - Applicable in ED & SR LU(3) Port link is up - Applicable only in ED LS(4) Link speed is not supported (100M,10M,10G) - Applicable only in SR LL(5) Link length received from VCT test exceed threshold - Applicable only in SR ER(6) Errors detected on line and port revered back to Long Reach(only in enhanced mode) - Applicable only in SR LD(7) Port link is Down - Applicable only in SR unknown(8) In case that green Active or disable on port'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("np", 1), ("lt", 2), ("lu", 3), ("ls", 4), ("ll", 5), ("er", 6), ("ld", 7), ("unknown", 8))

rlGreenEthPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 134, 8), )
if mibBuilder.loadTexts: rlGreenEthPortTable.setStatus('current')
if mibBuilder.loadTexts: rlGreenEthPortTable.setDescription('A table of green state of ports')
rlGreenEthPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 134, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Dlink-GREEN-MIB", "rlGreenEthPortSavingTypeValue"))
if mibBuilder.loadTexts: rlGreenEthPortEntry.setStatus('current')
if mibBuilder.loadTexts: rlGreenEthPortEntry.setDescription('An entry of green state of port')
rlGreenEthPortSavingTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 134, 8, 1, 1), RlGreenSavingType())
if mibBuilder.loadTexts: rlGreenEthPortSavingTypeValue.setStatus('current')
if mibBuilder.loadTexts: rlGreenEthPortSavingTypeValue.setDescription('Green saving types')
rlGreenEthPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 134, 8, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlGreenEthPortAdminState.setStatus('current')
if mibBuilder.loadTexts: rlGreenEthPortAdminState.setDescription('Active\\non Active')
rlGreenEthPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 134, 8, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGreenEthPortOperState.setStatus('current')
if mibBuilder.loadTexts: rlGreenEthPortOperState.setDescription('Active\\non Active')
rlGreenEthPortNonOperReason = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 134, 8, 1, 4), NonOperReasonType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGreenEthPortNonOperReason.setStatus('current')
if mibBuilder.loadTexts: rlGreenEthPortNonOperReason.setDescription('Reason why saving mode is not activated')
rlGreenEthForceShortReachIfIndexList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 134, 9), PortList().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlGreenEthForceShortReachIfIndexList.setStatus('current')
if mibBuilder.loadTexts: rlGreenEthForceShortReachIfIndexList.setDescription('The ports that forced enable the Green Ethernet Short Reach configuration not considering VCT results.')
mibBuilder.exportSymbols("Dlink-GREEN-MIB", rlGreenEthCumulativePowerSaveMeter=rlGreenEthCumulativePowerSaveMeter, rlGreenEthPortNonOperReason=rlGreenEthPortNonOperReason, RlGreenSavingType=RlGreenSavingType, rlGreenEthCurrentEnergyConsumption=rlGreenEthCurrentEnergyConsumption, rlGreenEthShortReachEnable=rlGreenEthShortReachEnable, rlGreenEthPortTable=rlGreenEthPortTable, rlGreenEthCurrentMaxEnergyConsumption=rlGreenEthCurrentMaxEnergyConsumption, rlGreenEthCumulativePowerSaveMeterReset=rlGreenEthCumulativePowerSaveMeterReset, rlGreenEthPortSavingTypeValue=rlGreenEthPortSavingTypeValue, rlGreenEthPortOperState=rlGreenEthPortOperState, NonOperReasonType=NonOperReasonType, rlGreenEthForceShortReachIfIndexList=rlGreenEthForceShortReachIfIndexList, rlGreenEthPortAdminState=rlGreenEthPortAdminState, rlGreenEthPortEntry=rlGreenEthPortEntry, rlGreenEth=rlGreenEth, rlGreenEthShortReachThreshold=rlGreenEthShortReachThreshold, rlGreenEthEnergyDetectEnable=rlGreenEthEnergyDetectEnable, PYSNMP_MODULE_ID=rlGreenEth)
